{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15874", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15874/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15874/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15874/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15874", "id": 286230464, "node_id": "MDU6SXNzdWUyODYyMzA0NjQ=", "number": 15874, "title": "Weird behaviour of tf.control_dependencies", "user": {"login": "matthew-z", "id": 5741303, "node_id": "MDQ6VXNlcjU3NDEzMDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5741303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-z", "html_url": "https://github.com/matthew-z", "followers_url": "https://api.github.com/users/matthew-z/followers", "following_url": "https://api.github.com/users/matthew-z/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-z/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-z/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-z/subscriptions", "organizations_url": "https://api.github.com/users/matthew-z/orgs", "repos_url": "https://api.github.com/users/matthew-z/repos", "events_url": "https://api.github.com/users/matthew-z/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-z/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-01-05T09:07:41Z", "updated_at": "2018-11-18T01:52:28Z", "closed_at": "2018-11-18T01:52:28Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-19-ga52c8d9 1.4.1</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:  CUDA V8.0.61 CUDNN 6.0.20</li>\n<li><strong>GPU model and memory</strong>: K40M</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The source code is a minimal one to use dynamic rnn to predict token tag.</p>\n<p>I tried to use <code> tf.control_dependencies</code> to ensure <code>loss</code> will be evaluated before train_op. However,  I mistakenly evaluated <code>loss</code> in <code>session.run([train, loss])</code>.</p>\n<p>Then I found that if the input length (<code>EXAMPLE_LENGTH </code> in the example code) is larger than or equal to 32, the program will hang without any notification. If I set <code>CUDA_VISIBLE_DEVICES=''</code> to use CPU only, the program will output an error code. However, if the input length is smaller than 32, it will run without any problem.</p>\n<p>I am not sure if it is a bug or an intentional behavior.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">from</span> tensorflow.contrib.rnn <span class=\"pl-k\">import</span> stack_bidirectional_dynamic_rnn\n<span class=\"pl-k\">from</span> tensorflow.python.ops <span class=\"pl-k\">import</span> rnn_cell\n\n<span class=\"pl-c1\">EXAMPLE_LENGTH</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">31</span>\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n    x <span class=\"pl-k\">=</span> tf.random_uniform(<span class=\"pl-v\">maxval</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2000</span>, <span class=\"pl-v\">minval</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, \n                          <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">EXAMPLE_LENGTH</span>, <span class=\"pl-c1\">300</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    lengths <span class=\"pl-k\">=</span> tf.constant([<span class=\"pl-c1\">EXAMPLE_LENGTH</span>])\n    y <span class=\"pl-k\">=</span> tf.random_uniform(<span class=\"pl-v\">maxval</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>, <span class=\"pl-v\">minval</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, \n                          <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">EXAMPLE_LENGTH</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)\n\n    cell <span class=\"pl-k\">=</span> rnn_cell.BasicRNNCell(<span class=\"pl-c1\">50</span>)\n    output, _ <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(cell, x, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float32<span class=\"pl-pds\">\"</span></span>)\n    \n    logits <span class=\"pl-k\">=</span> tf.layers.dense(output ,<span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>)\n    loss <span class=\"pl-k\">=</span> tf.reduce_sum(tf.nn.sparse_softmax_cross_entropy_with_logits(<span class=\"pl-v\">logits</span><span class=\"pl-k\">=</span>logits, <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>y))\n    <span class=\"pl-k\">with</span> tf.control_dependencies([loss]):\n        opt <span class=\"pl-k\">=</span> tf.train.AdamOptimizer()\n        train_op <span class=\"pl-k\">=</span> opt.minimize(loss)\n        \n\n\n    sess <span class=\"pl-k\">=</span> tf.InteractiveSession()\n    sess.run(tf.global_variables_initializer())\n\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n        _, l <span class=\"pl-k\">=</span> sess.run([train_op, loss])\n        <span class=\"pl-c1\">print</span>(i, l)</pre></div>\n<h3>Traceback</h3>\n<h4>Only output error with CPU</h4>\n<pre><code>---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)\n   1322     try:\n-&gt; 1323       return fn(*args)\n   1324     except errors.OpError as e:\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)\n   1301                                    feed_dict, fetch_list, target_list,\n-&gt; 1302                                    status, run_metadata)\n   1303 \n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py in __exit__(self, type_arg, value_arg, traceback_arg)\n    472             compat.as_text(c_api.TF_Message(self.status.status)),\n--&gt; 473             c_api.TF_GetCode(self.status.status))\n    474     # Delete the underlying status object from memory otherwise it stays alive\n\nInvalidArgumentError: Retval[0] does not have value\n\nDuring handling of the above exception, another exception occurred:\n\nInvalidArgumentError                      Traceback (most recent call last)\n&lt;ipython-input-43-926b17edef2c&gt; in &lt;module&gt;()\n     26 \n     27     for i in range(10):\n---&gt; 28         _, l = sess.run([train_op, loss])\n     29         print(i, l)\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in run(self, fetches, feed_dict, options, run_metadata)\n    887     try:\n    888       result = self._run(None, fetches, feed_dict, options_ptr,\n--&gt; 889                          run_metadata_ptr)\n    890       if run_metadata:\n    891         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)\n   1118     if final_fetches or final_targets or (handle and feed_dict_tensor):\n   1119       results = self._do_run(handle, final_targets, final_fetches,\n-&gt; 1120                              feed_dict_tensor, options, run_metadata)\n   1121     else:\n   1122       results = []\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\n   1315     if handle is None:\n   1316       return self._do_call(_run_fn, self._session, feeds, fetches, targets,\n-&gt; 1317                            options, run_metadata)\n   1318     else:\n   1319       return self._do_call(_prun_fn, self._session, handle, feeds, fetches)\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)\n   1334         except KeyError:\n   1335           pass\n-&gt; 1336       raise type(e)(node_def, op, message)\n   1337 \n   1338   def _extend_graph(self):\n\nInvalidArgumentError: Retval[0] does not have value\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.4.0-19-ga52c8d9 1.4.1\nPython version: 3.5\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:  CUDA V8.0.61 CUDNN 6.0.20\nGPU model and memory: K40M\nExact command to reproduce:\n\nDescribe the problem\nThe source code is a minimal one to use dynamic rnn to predict token tag.\nI tried to use  tf.control_dependencies to ensure loss will be evaluated before train_op. However,  I mistakenly evaluated loss in session.run([train, loss]).\nThen I found that if the input length (EXAMPLE_LENGTH  in the example code) is larger than or equal to 32, the program will hang without any notification. If I set CUDA_VISIBLE_DEVICES='' to use CPU only, the program will output an error code. However, if the input length is smaller than 32, it will run without any problem.\nI am not sure if it is a bug or an intentional behavior.\nSource code / logs\nimport tensorflow as tf\n\nfrom tensorflow.contrib.rnn import stack_bidirectional_dynamic_rnn\nfrom tensorflow.python.ops import rnn_cell\n\nEXAMPLE_LENGTH = 31\nwith tf.Graph().as_default():\n    x = tf.random_uniform(maxval=2000, minval=1, \n                          shape=[1, EXAMPLE_LENGTH, 300], dtype=tf.float32)\n    lengths = tf.constant([EXAMPLE_LENGTH])\n    y = tf.random_uniform(maxval=5, minval=0, \n                          shape=[1, EXAMPLE_LENGTH], dtype=tf.int32)\n\n    cell = rnn_cell.BasicRNNCell(50)\n    output, _ = tf.nn.dynamic_rnn(cell, x, dtype=\"float32\")\n    \n    logits = tf.layers.dense(output ,units=5)\n    loss = tf.reduce_sum(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y))\n    with tf.control_dependencies([loss]):\n        opt = tf.train.AdamOptimizer()\n        train_op = opt.minimize(loss)\n        \n\n\n    sess = tf.InteractiveSession()\n    sess.run(tf.global_variables_initializer())\n\n    for i in range(10):\n        _, l = sess.run([train_op, loss])\n        print(i, l)\nTraceback\nOnly output error with CPU\n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)\n   1322     try:\n-> 1323       return fn(*args)\n   1324     except errors.OpError as e:\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)\n   1301                                    feed_dict, fetch_list, target_list,\n-> 1302                                    status, run_metadata)\n   1303 \n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py in __exit__(self, type_arg, value_arg, traceback_arg)\n    472             compat.as_text(c_api.TF_Message(self.status.status)),\n--> 473             c_api.TF_GetCode(self.status.status))\n    474     # Delete the underlying status object from memory otherwise it stays alive\n\nInvalidArgumentError: Retval[0] does not have value\n\nDuring handling of the above exception, another exception occurred:\n\nInvalidArgumentError                      Traceback (most recent call last)\n<ipython-input-43-926b17edef2c> in <module>()\n     26 \n     27     for i in range(10):\n---> 28         _, l = sess.run([train_op, loss])\n     29         print(i, l)\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in run(self, fetches, feed_dict, options, run_metadata)\n    887     try:\n    888       result = self._run(None, fetches, feed_dict, options_ptr,\n--> 889                          run_metadata_ptr)\n    890       if run_metadata:\n    891         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)\n   1118     if final_fetches or final_targets or (handle and feed_dict_tensor):\n   1119       results = self._do_run(handle, final_targets, final_fetches,\n-> 1120                              feed_dict_tensor, options, run_metadata)\n   1121     else:\n   1122       results = []\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\n   1315     if handle is None:\n   1316       return self._do_call(_run_fn, self._session, feeds, fetches, targets,\n-> 1317                            options, run_metadata)\n   1318     else:\n   1319       return self._do_call(_prun_fn, self._session, handle, feeds, fetches)\n\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)\n   1334         except KeyError:\n   1335           pass\n-> 1336       raise type(e)(node_def, op, message)\n   1337 \n   1338   def _extend_graph(self):\n\nInvalidArgumentError: Retval[0] does not have value", "body": "\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.4.0-19-ga52c8d9 1.4.1\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:  CUDA V8.0.61 CUDNN 6.0.20\r\n- **GPU model and memory**: K40M\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\n\r\nThe source code is a minimal one to use dynamic rnn to predict token tag.\r\n\r\nI tried to use ` tf.control_dependencies` to ensure `loss` will be evaluated before train_op. However,  I mistakenly evaluated `loss` in `session.run([train, loss])`.   \r\n\r\nThen I found that if the input length (`EXAMPLE_LENGTH ` in the example code) is larger than or equal to 32, the program will hang without any notification. If I set `CUDA_VISIBLE_DEVICES=''` to use CPU only, the program will output an error code. However, if the input length is smaller than 32, it will run without any problem. \r\n\r\nI am not sure if it is a bug or an intentional behavior.\r\n\r\n### Source code / logs\r\n```python\r\nimport tensorflow as tf\r\n\r\nfrom tensorflow.contrib.rnn import stack_bidirectional_dynamic_rnn\r\nfrom tensorflow.python.ops import rnn_cell\r\n\r\nEXAMPLE_LENGTH = 31\r\nwith tf.Graph().as_default():\r\n    x = tf.random_uniform(maxval=2000, minval=1, \r\n                          shape=[1, EXAMPLE_LENGTH, 300], dtype=tf.float32)\r\n    lengths = tf.constant([EXAMPLE_LENGTH])\r\n    y = tf.random_uniform(maxval=5, minval=0, \r\n                          shape=[1, EXAMPLE_LENGTH], dtype=tf.int32)\r\n\r\n    cell = rnn_cell.BasicRNNCell(50)\r\n    output, _ = tf.nn.dynamic_rnn(cell, x, dtype=\"float32\")\r\n    \r\n    logits = tf.layers.dense(output ,units=5)\r\n    loss = tf.reduce_sum(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y))\r\n    with tf.control_dependencies([loss]):\r\n        opt = tf.train.AdamOptimizer()\r\n        train_op = opt.minimize(loss)\r\n        \r\n\r\n\r\n    sess = tf.InteractiveSession()\r\n    sess.run(tf.global_variables_initializer())\r\n\r\n    for i in range(10):\r\n        _, l = sess.run([train_op, loss])\r\n        print(i, l)\r\n```\r\n\r\n\r\n### Traceback\r\n\r\n\r\n#### Only output error with CPU\r\n```\r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)\r\n   1322     try:\r\n-> 1323       return fn(*args)\r\n   1324     except errors.OpError as e:\r\n\r\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)\r\n   1301                                    feed_dict, fetch_list, target_list,\r\n-> 1302                                    status, run_metadata)\r\n   1303 \r\n\r\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py in __exit__(self, type_arg, value_arg, traceback_arg)\r\n    472             compat.as_text(c_api.TF_Message(self.status.status)),\r\n--> 473             c_api.TF_GetCode(self.status.status))\r\n    474     # Delete the underlying status object from memory otherwise it stays alive\r\n\r\nInvalidArgumentError: Retval[0] does not have value\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n<ipython-input-43-926b17edef2c> in <module>()\r\n     26 \r\n     27     for i in range(10):\r\n---> 28         _, l = sess.run([train_op, loss])\r\n     29         print(i, l)\r\n\r\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in run(self, fetches, feed_dict, options, run_metadata)\r\n    887     try:\r\n    888       result = self._run(None, fetches, feed_dict, options_ptr,\r\n--> 889                          run_metadata_ptr)\r\n    890       if run_metadata:\r\n    891         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\r\n\r\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)\r\n   1118     if final_fetches or final_targets or (handle and feed_dict_tensor):\r\n   1119       results = self._do_run(handle, final_targets, final_fetches,\r\n-> 1120                              feed_dict_tensor, options, run_metadata)\r\n   1121     else:\r\n   1122       results = []\r\n\r\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\r\n   1315     if handle is None:\r\n   1316       return self._do_call(_run_fn, self._session, feeds, fetches, targets,\r\n-> 1317                            options, run_metadata)\r\n   1318     else:\r\n   1319       return self._do_call(_prun_fn, self._session, handle, feeds, fetches)\r\n\r\n/usr/local/var/pyenv/versions/anaconda3-4.1.1/lib/python3.6/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)\r\n   1334         except KeyError:\r\n   1335           pass\r\n-> 1336       raise type(e)(node_def, op, message)\r\n   1337 \r\n   1338   def _extend_graph(self):\r\n\r\nInvalidArgumentError: Retval[0] does not have value\r\n```"}