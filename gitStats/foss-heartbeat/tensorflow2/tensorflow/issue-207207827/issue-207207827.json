{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7463", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7463/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7463/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7463/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7463", "id": 207207827, "node_id": "MDU6SXNzdWUyMDcyMDc4Mjc=", "number": 7463, "title": "Initialize error in 0.12.1", "user": {"login": "lemmonation", "id": 9084510, "node_id": "MDQ6VXNlcjkwODQ1MTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9084510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lemmonation", "html_url": "https://github.com/lemmonation", "followers_url": "https://api.github.com/users/lemmonation/followers", "following_url": "https://api.github.com/users/lemmonation/following{/other_user}", "gists_url": "https://api.github.com/users/lemmonation/gists{/gist_id}", "starred_url": "https://api.github.com/users/lemmonation/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lemmonation/subscriptions", "organizations_url": "https://api.github.com/users/lemmonation/orgs", "repos_url": "https://api.github.com/users/lemmonation/repos", "events_url": "https://api.github.com/users/lemmonation/events{/privacy}", "received_events_url": "https://api.github.com/users/lemmonation/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-13T12:42:01Z", "updated_at": "2017-02-15T05:14:58Z", "closed_at": "2017-02-15T05:14:58Z", "author_association": "NONE", "body_html": "<p>I run my code well under Tensorflow 0.10, but after I update the version to 0.12.1, all the variables throws a <code>FailedPreconditionError (see above for traceback): Attempting to use uninitialized value W</code> error. And my code is  unchanged except I use<code> tf.global_variables_initializer()</code> instead of <code>tf.initialize_all_variables()</code>. I tried to add <code>tf.GraphKeys.VARIABLES = tf.GraphKeys.GLOBAL_VARIABLES</code> under <code>import tensorflow as tf</code> but it didn't work. So I opened this issue because I don't know where the bug is.</p>\n<p>My code is as below. Omitted some details to be more readable.<br>\nAnd the error is different every time. All tf.Variable defined variables are mentioned wrong.</p>\n<pre><code>class model(object):\n    def __init__(self, paras):\n        self.D = tf.constant(D, dtype = tf.float32)\n        self.Q = tf.constant(Q, dtype = tf.float32)\n\n        if self.USE_FEATURE:\n            self.CF = tf.Variable((np.random.rand(self.rank, d_F) - 0.5) / self.rank, \\\n                                  dtype = tf.float32, name = 'CF')  #error here\n        self.W = tf.Variable((np.random.rand(self.rank, sample_num) - 0.5) / self.rank / 200, \\\n                                  dtype = tf.float32, name = 'W')   #error here\n        self.C = tf.Variable((np.random.rand(context_num, self.rank) - 0.5) / self.rank, \\\n                                   dtype = tf.float32, name = 'C')  #error here\n        \n        ED = tf.transpose(self.Q) * (1.0 / (1.0 + tf.exp(- tf.matmul(self.C, self.W))))\n        recons = self.D - ED\n        W_grad = tf.matmul(tf.transpose(self.C), recons)\n        self.W_grad = tf.Variable(W_grad, dtype = tf.float32)  #error here\n        \n        self._build_update_W_grad()\n        if not self.USE_FEATURE:\n            self._build_alter_W()\n        else:\n            self._build_W_with_F()\n        self._build_alter_C()\n\n    def _run(self, sess):\n        tf.initialize_all_variables().run()  #where the error throws\n\n        for i in xrange(self.max_iter):\n            if (i + 1) % self.prun_step == 0:\n                self.mu = self.mu * self.prun_rate\n            if (i + 1) % 2 == 1:\n                for j in xrange(self.inner_maxiter):\n                    if not self.USE_FEATURE:\n                        self.up_W_grad.run()\n                        self.up_W.run()\n                    else:\n                        self.up_W_grad.run()\n                        for k in xrange(self.sgd_batch):\n                            self.up_W_CF.run()\n                            #raise NotImplementedError\n            else:\n                for j in xrange(self.inner_maxiter):\n                    self.up_C.run()\n        \n        W = self.W.eval()\n        C = self.C.eval()\n        print 'end training. save W and C'\n        return W, C\n\n    def _build_alter_W(self):\n        #codes\n        self.up_W = tf.group(updata_W)\n        \n    def _build_W_with_F(self):    \n        #codes\n        self.up_W_CF = tf.group(updata_W, updata_CF)\n        #raise NotImplementedError\n   \n    def _build_alter_C(self):\n        #codes\n        self.up_C = tf.group(updata_C)\n   \n    def _build_update_W_grad(self):\n        #codes\n        self.up_W_grad = tf.group(update_W_grad)\n\n#main program\ntrain_epoch = model(paras)\nwith tf.Session(config = config) as sess:\n    W, C = train_epoch._run(sess)\n</code></pre>\n<p>Can anybody help? The program worked well in 0.10 but crashed after I updated to 0.12.1. I changed nothing but <code>tf.initialize_all_variables().run()</code> to <code>tf.global_variables_initializer().run()</code>.</p>", "body_text": "I run my code well under Tensorflow 0.10, but after I update the version to 0.12.1, all the variables throws a FailedPreconditionError (see above for traceback): Attempting to use uninitialized value W error. And my code is  unchanged except I use tf.global_variables_initializer() instead of tf.initialize_all_variables(). I tried to add tf.GraphKeys.VARIABLES = tf.GraphKeys.GLOBAL_VARIABLES under import tensorflow as tf but it didn't work. So I opened this issue because I don't know where the bug is.\nMy code is as below. Omitted some details to be more readable.\nAnd the error is different every time. All tf.Variable defined variables are mentioned wrong.\nclass model(object):\n    def __init__(self, paras):\n        self.D = tf.constant(D, dtype = tf.float32)\n        self.Q = tf.constant(Q, dtype = tf.float32)\n\n        if self.USE_FEATURE:\n            self.CF = tf.Variable((np.random.rand(self.rank, d_F) - 0.5) / self.rank, \\\n                                  dtype = tf.float32, name = 'CF')  #error here\n        self.W = tf.Variable((np.random.rand(self.rank, sample_num) - 0.5) / self.rank / 200, \\\n                                  dtype = tf.float32, name = 'W')   #error here\n        self.C = tf.Variable((np.random.rand(context_num, self.rank) - 0.5) / self.rank, \\\n                                   dtype = tf.float32, name = 'C')  #error here\n        \n        ED = tf.transpose(self.Q) * (1.0 / (1.0 + tf.exp(- tf.matmul(self.C, self.W))))\n        recons = self.D - ED\n        W_grad = tf.matmul(tf.transpose(self.C), recons)\n        self.W_grad = tf.Variable(W_grad, dtype = tf.float32)  #error here\n        \n        self._build_update_W_grad()\n        if not self.USE_FEATURE:\n            self._build_alter_W()\n        else:\n            self._build_W_with_F()\n        self._build_alter_C()\n\n    def _run(self, sess):\n        tf.initialize_all_variables().run()  #where the error throws\n\n        for i in xrange(self.max_iter):\n            if (i + 1) % self.prun_step == 0:\n                self.mu = self.mu * self.prun_rate\n            if (i + 1) % 2 == 1:\n                for j in xrange(self.inner_maxiter):\n                    if not self.USE_FEATURE:\n                        self.up_W_grad.run()\n                        self.up_W.run()\n                    else:\n                        self.up_W_grad.run()\n                        for k in xrange(self.sgd_batch):\n                            self.up_W_CF.run()\n                            #raise NotImplementedError\n            else:\n                for j in xrange(self.inner_maxiter):\n                    self.up_C.run()\n        \n        W = self.W.eval()\n        C = self.C.eval()\n        print 'end training. save W and C'\n        return W, C\n\n    def _build_alter_W(self):\n        #codes\n        self.up_W = tf.group(updata_W)\n        \n    def _build_W_with_F(self):    \n        #codes\n        self.up_W_CF = tf.group(updata_W, updata_CF)\n        #raise NotImplementedError\n   \n    def _build_alter_C(self):\n        #codes\n        self.up_C = tf.group(updata_C)\n   \n    def _build_update_W_grad(self):\n        #codes\n        self.up_W_grad = tf.group(update_W_grad)\n\n#main program\ntrain_epoch = model(paras)\nwith tf.Session(config = config) as sess:\n    W, C = train_epoch._run(sess)\n\nCan anybody help? The program worked well in 0.10 but crashed after I updated to 0.12.1. I changed nothing but tf.initialize_all_variables().run() to tf.global_variables_initializer().run().", "body": "I run my code well under Tensorflow 0.10, but after I update the version to 0.12.1, all the variables throws a `FailedPreconditionError (see above for traceback): Attempting to use uninitialized value W` error. And my code is  unchanged except I use` tf.global_variables_initializer()` instead of `tf.initialize_all_variables()`. I tried to add `tf.GraphKeys.VARIABLES = tf.GraphKeys.GLOBAL_VARIABLES` under `import tensorflow as tf` but it didn't work. So I opened this issue because I don't know where the bug is.\r\n\r\nMy code is as below. Omitted some details to be more readable.\r\nAnd the error is different every time. All tf.Variable defined variables are mentioned wrong.\r\n\r\n```\r\nclass model(object):\r\n    def __init__(self, paras):\r\n        self.D = tf.constant(D, dtype = tf.float32)\r\n        self.Q = tf.constant(Q, dtype = tf.float32)\r\n\r\n        if self.USE_FEATURE:\r\n            self.CF = tf.Variable((np.random.rand(self.rank, d_F) - 0.5) / self.rank, \\\r\n                                  dtype = tf.float32, name = 'CF')  #error here\r\n        self.W = tf.Variable((np.random.rand(self.rank, sample_num) - 0.5) / self.rank / 200, \\\r\n                                  dtype = tf.float32, name = 'W')   #error here\r\n        self.C = tf.Variable((np.random.rand(context_num, self.rank) - 0.5) / self.rank, \\\r\n                                   dtype = tf.float32, name = 'C')  #error here\r\n        \r\n        ED = tf.transpose(self.Q) * (1.0 / (1.0 + tf.exp(- tf.matmul(self.C, self.W))))\r\n        recons = self.D - ED\r\n        W_grad = tf.matmul(tf.transpose(self.C), recons)\r\n        self.W_grad = tf.Variable(W_grad, dtype = tf.float32)  #error here\r\n        \r\n        self._build_update_W_grad()\r\n        if not self.USE_FEATURE:\r\n            self._build_alter_W()\r\n        else:\r\n            self._build_W_with_F()\r\n        self._build_alter_C()\r\n\r\n    def _run(self, sess):\r\n        tf.initialize_all_variables().run()  #where the error throws\r\n\r\n        for i in xrange(self.max_iter):\r\n            if (i + 1) % self.prun_step == 0:\r\n                self.mu = self.mu * self.prun_rate\r\n            if (i + 1) % 2 == 1:\r\n                for j in xrange(self.inner_maxiter):\r\n                    if not self.USE_FEATURE:\r\n                        self.up_W_grad.run()\r\n                        self.up_W.run()\r\n                    else:\r\n                        self.up_W_grad.run()\r\n                        for k in xrange(self.sgd_batch):\r\n                            self.up_W_CF.run()\r\n                            #raise NotImplementedError\r\n            else:\r\n                for j in xrange(self.inner_maxiter):\r\n                    self.up_C.run()\r\n        \r\n        W = self.W.eval()\r\n        C = self.C.eval()\r\n        print 'end training. save W and C'\r\n        return W, C\r\n\r\n    def _build_alter_W(self):\r\n        #codes\r\n        self.up_W = tf.group(updata_W)\r\n        \r\n    def _build_W_with_F(self):    \r\n        #codes\r\n        self.up_W_CF = tf.group(updata_W, updata_CF)\r\n        #raise NotImplementedError\r\n   \r\n    def _build_alter_C(self):\r\n        #codes\r\n        self.up_C = tf.group(updata_C)\r\n   \r\n    def _build_update_W_grad(self):\r\n        #codes\r\n        self.up_W_grad = tf.group(update_W_grad)\r\n\r\n#main program\r\ntrain_epoch = model(paras)\r\nwith tf.Session(config = config) as sess:\r\n    W, C = train_epoch._run(sess)\r\n```\r\n\r\nCan anybody help? The program worked well in 0.10 but crashed after I updated to 0.12.1. I changed nothing but `tf.initialize_all_variables().run()` to `tf.global_variables_initializer().run()`. "}