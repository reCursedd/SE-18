{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19423", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19423/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19423/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19423/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/19423", "id": 324740265, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg5MjUxMzI1", "number": 19423, "title": "Introduce tf.contrib.framework.Notification.", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-20T20:31:50Z", "updated_at": "2018-06-03T19:24:16Z", "closed_at": "2018-06-03T19:17:01Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19423", "html_url": "https://github.com/tensorflow/tensorflow/pull/19423", "diff_url": "https://github.com/tensorflow/tensorflow/pull/19423.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/19423.patch"}, "body_html": "<p>ConditionVariable may be used to delay computation, or to synchronize<br>\ncomputation between multiple tasks.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10168793\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/m3bm3b\">@m3bm3b</a> i've had some free time here and there in the last couple weeks - and have been playing with improving synchronized training.  so i wrote up this ConditionVariable primitive.  though the Wait on the CV doesn't release a lock on a mutex or CriticalSection object (the way a condition_variable does in c++), it allows:</p>\n<ul>\n<li>Arbitrary-length sleep via wait(timeout_in_us)</li>\n<li>Synchronizing available workers using notifications.</li>\n<li>Support for cancellation.</li>\n</ul>", "body_text": "ConditionVariable may be used to delay computation, or to synchronize\ncomputation between multiple tasks.\n@mrry @m3bm3b i've had some free time here and there in the last couple weeks - and have been playing with improving synchronized training.  so i wrote up this ConditionVariable primitive.  though the Wait on the CV doesn't release a lock on a mutex or CriticalSection object (the way a condition_variable does in c++), it allows:\n\nArbitrary-length sleep via wait(timeout_in_us)\nSynchronizing available workers using notifications.\nSupport for cancellation.", "body": "ConditionVariable may be used to delay computation, or to synchronize\r\ncomputation between multiple tasks.\r\n\r\n@mrry @m3bm3b i've had some free time here and there in the last couple weeks - and have been playing with improving synchronized training.  so i wrote up this ConditionVariable primitive.  though the Wait on the CV doesn't release a lock on a mutex or CriticalSection object (the way a condition_variable does in c++), it allows:\r\n\r\n* Arbitrary-length sleep via wait(timeout_in_us)\r\n* Synchronizing available workers using notifications.\r\n* Support for cancellation."}