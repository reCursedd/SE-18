{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355428900", "html_url": "https://github.com/tensorflow/tensorflow/issues/15844#issuecomment-355428900", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15844", "id": 355428900, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQyODkwMA==", "user": {"login": "Hackempluf", "id": 8088862, "node_id": "MDQ6VXNlcjgwODg4NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/8088862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hackempluf", "html_url": "https://github.com/Hackempluf", "followers_url": "https://api.github.com/users/Hackempluf/followers", "following_url": "https://api.github.com/users/Hackempluf/following{/other_user}", "gists_url": "https://api.github.com/users/Hackempluf/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hackempluf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hackempluf/subscriptions", "organizations_url": "https://api.github.com/users/Hackempluf/orgs", "repos_url": "https://api.github.com/users/Hackempluf/repos", "events_url": "https://api.github.com/users/Hackempluf/events{/privacy}", "received_events_url": "https://api.github.com/users/Hackempluf/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-04T23:27:21Z", "updated_at": "2018-01-04T23:27:21Z", "author_association": "NONE", "body_html": "<p>The <code>tf.MonitoredTrainingSession</code> itself checks if an OutOfRangeError occured inside an <code>with</code> statement and suppresses it. You can check this by simply running the following snippet:</p>\n<pre><code>with tf.train.MonitoredTrainingSession() as sess:\n    raise tf.errors.OutOfRangeError(None, None, None)\n</code></pre>\n<p>If you raise another error instead of <code>tf.errors.OutOfRangeError</code>, then it is propagated like usual.</p>\n<p>This is intended behaviour, as the OutOfRangeError signals the end of the training set.</p>\n<p>@tensorflow-team I would suggest displaying an Log-Message instead of just silently ignoring it, as it could point to a potential issue (INFO or maybe DEBUG level would be enough).</p>", "body_text": "The tf.MonitoredTrainingSession itself checks if an OutOfRangeError occured inside an with statement and suppresses it. You can check this by simply running the following snippet:\nwith tf.train.MonitoredTrainingSession() as sess:\n    raise tf.errors.OutOfRangeError(None, None, None)\n\nIf you raise another error instead of tf.errors.OutOfRangeError, then it is propagated like usual.\nThis is intended behaviour, as the OutOfRangeError signals the end of the training set.\n@tensorflow-team I would suggest displaying an Log-Message instead of just silently ignoring it, as it could point to a potential issue (INFO or maybe DEBUG level would be enough).", "body": "The ```tf.MonitoredTrainingSession``` itself checks if an OutOfRangeError occured inside an ```with``` statement and suppresses it. You can check this by simply running the following snippet: \r\n```\r\nwith tf.train.MonitoredTrainingSession() as sess:\r\n    raise tf.errors.OutOfRangeError(None, None, None)\r\n```\r\nIf you raise another error instead of ```tf.errors.OutOfRangeError```, then it is propagated like usual.\r\n\r\nThis is intended behaviour, as the OutOfRangeError signals the end of the training set. \r\n\r\n@tensorflow-team I would suggest displaying an Log-Message instead of just silently ignoring it, as it could point to a potential issue (INFO or maybe DEBUG level would be enough)."}