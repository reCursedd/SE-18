{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/231516353", "html_url": "https://github.com/tensorflow/tensorflow/pull/3235#issuecomment-231516353", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3235", "id": 231516353, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTUxNjM1Mw==", "user": {"login": "IvanUkhov", "id": 57440, "node_id": "MDQ6VXNlcjU3NDQw", "avatar_url": "https://avatars1.githubusercontent.com/u/57440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IvanUkhov", "html_url": "https://github.com/IvanUkhov", "followers_url": "https://api.github.com/users/IvanUkhov/followers", "following_url": "https://api.github.com/users/IvanUkhov/following{/other_user}", "gists_url": "https://api.github.com/users/IvanUkhov/gists{/gist_id}", "starred_url": "https://api.github.com/users/IvanUkhov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IvanUkhov/subscriptions", "organizations_url": "https://api.github.com/users/IvanUkhov/orgs", "repos_url": "https://api.github.com/users/IvanUkhov/repos", "events_url": "https://api.github.com/users/IvanUkhov/events{/privacy}", "received_events_url": "https://api.github.com/users/IvanUkhov/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-09T05:23:26Z", "updated_at": "2016-07-09T05:33:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=229914\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/keveman\">@keveman</a>, I see. Thanks for the clarification! I think it depends on what <code>TF_DeleteLibrary</code> is supposed to do. If we agree that its sole purpose is to dispose <code>TF_Library</code> then the current implementation of the function satiates the purpose. It eliminates a memory leakage, and it makes one confident about the usage of the API as one knows exactly what to do with the pointer given by <code>TF_LoadLibrary</code>. Imagine, for instance, what people calling the function from other languages think when they are given a pointer and told that they own it. If, however, <code>TF_DeleteLibrary</code> is also responsible for unloading the library then, I agree, it\u2019s better to do not have any function at all than a half-working one.</p>\n<p>It might be interesting to note that there is a certain analogy between <code>TF_DeleteSession</code> and <code>TF_DeleteLibrary</code> and between <code>TF_CloseSession</code> and <code>TF_UnloadLibrary</code> (potential).</p>", "body_text": "@keveman, I see. Thanks for the clarification! I think it depends on what TF_DeleteLibrary is supposed to do. If we agree that its sole purpose is to dispose TF_Library then the current implementation of the function satiates the purpose. It eliminates a memory leakage, and it makes one confident about the usage of the API as one knows exactly what to do with the pointer given by TF_LoadLibrary. Imagine, for instance, what people calling the function from other languages think when they are given a pointer and told that they own it. If, however, TF_DeleteLibrary is also responsible for unloading the library then, I agree, it\u2019s better to do not have any function at all than a half-working one.\nIt might be interesting to note that there is a certain analogy between TF_DeleteSession and TF_DeleteLibrary and between TF_CloseSession and TF_UnloadLibrary (potential).", "body": "@keveman, I see. Thanks for the clarification! I think it depends on what `TF_DeleteLibrary` is supposed to do. If we agree that its sole purpose is to dispose `TF_Library` then the current implementation of the function satiates the purpose. It eliminates a memory leakage, and it makes one confident about the usage of the API as one knows exactly what to do with the pointer given by `TF_LoadLibrary`. Imagine, for instance, what people calling the function from other languages think when they are given a pointer and told that they own it. If, however, `TF_DeleteLibrary` is also responsible for unloading the library then, I agree, it\u2019s better to do not have any function at all than a half-working one.\n\nIt might be interesting to note that there is a certain analogy between `TF_DeleteSession` and `TF_DeleteLibrary` and between `TF_CloseSession` and `TF_UnloadLibrary` (potential).\n"}