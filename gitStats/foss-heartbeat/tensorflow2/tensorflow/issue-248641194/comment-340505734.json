{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/340505734", "html_url": "https://github.com/tensorflow/tensorflow/pull/12102#issuecomment-340505734", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12102", "id": 340505734, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDUwNTczNA==", "user": {"login": "cwhipkey", "id": 17578177, "node_id": "MDQ6VXNlcjE3NTc4MTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/17578177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwhipkey", "html_url": "https://github.com/cwhipkey", "followers_url": "https://api.github.com/users/cwhipkey/followers", "following_url": "https://api.github.com/users/cwhipkey/following{/other_user}", "gists_url": "https://api.github.com/users/cwhipkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwhipkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwhipkey/subscriptions", "organizations_url": "https://api.github.com/users/cwhipkey/orgs", "repos_url": "https://api.github.com/users/cwhipkey/repos", "events_url": "https://api.github.com/users/cwhipkey/events{/privacy}", "received_events_url": "https://api.github.com/users/cwhipkey/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-30T16:41:35Z", "updated_at": "2017-10-30T16:41:35Z", "author_association": "MEMBER", "body_html": "<ul>\n<li><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=161459\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/petewarden\">@petewarden</a>  - pete, this will increase binary size some on  mobile (maybe not the full 77k, but it will probably be an increase).  What do you think we should do?   Some options are:</li>\n</ul>\n<ol>\n<li>\n<p>use ifdef to use the old code on mobile.  This clearly would cause no binary increase on mobile, but makes another code path that will be less tested and it's a bit unfortunate to have 2 code paths.</p>\n</li>\n<li>\n<p>similar to 1., but do it in a way that can be tested off android.</p>\n</li>\n<li>\n<p>add in the performant library and code only use by the kernels, but not in the string library.  This seems not great, since you would need to call the fast library from the kernels, instead of just using the string library.</p>\n</li>\n<li>\n<p>test more fully and maybe it won't be a big change, or we can find savings elsewhere.</p>\n</li>\n</ol>", "body_text": "@petewarden  - pete, this will increase binary size some on  mobile (maybe not the full 77k, but it will probably be an increase).  What do you think we should do?   Some options are:\n\n\n\nuse ifdef to use the old code on mobile.  This clearly would cause no binary increase on mobile, but makes another code path that will be less tested and it's a bit unfortunate to have 2 code paths.\n\n\nsimilar to 1., but do it in a way that can be tested off android.\n\n\nadd in the performant library and code only use by the kernels, but not in the string library.  This seems not great, since you would need to call the fast library from the kernels, instead of just using the string library.\n\n\ntest more fully and maybe it won't be a big change, or we can find savings elsewhere.", "body": "+ @petewarden  - pete, this will increase binary size some on  mobile (maybe not the full 77k, but it will probably be an increase).  What do you think we should do?   Some options are:\r\n\r\n1. use ifdef to use the old code on mobile.  This clearly would cause no binary increase on mobile, but makes another code path that will be less tested and it's a bit unfortunate to have 2 code paths.\r\n\r\n2. similar to 1., but do it in a way that can be tested off android.\r\n\r\n3. add in the performant library and code only use by the kernels, but not in the string library.  This seems not great, since you would need to call the fast library from the kernels, instead of just using the string library.\r\n\r\n4. test more fully and maybe it won't be a big change, or we can find savings elsewhere."}