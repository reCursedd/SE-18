{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/146611023", "pull_request_review_id": 71574229, "id": 146611023, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjYxMTAyMw==", "diff_hunk": "@@ -32,72 +35,16 @@ namespace tensorflow {\n \n namespace {\n \n-template <typename T>\n-T locale_independent_strtonum(const char* str, const char** endptr) {\n-  static const std::unordered_map<string, T> special_nums = {\n-      {\"inf\", std::numeric_limits<T>::infinity()},\n-      {\"+inf\", std::numeric_limits<T>::infinity()},\n-      {\"-inf\", -std::numeric_limits<T>::infinity()},\n-      {\"infinity\", std::numeric_limits<T>::infinity()},\n-      {\"+infinity\", std::numeric_limits<T>::infinity()},\n-      {\"-infinity\", -std::numeric_limits<T>::infinity()},\n-      {\"nan\", std::numeric_limits<T>::quiet_NaN()},\n-      {\"+nan\", std::numeric_limits<T>::quiet_NaN()},\n-      {\"-nan\", -std::numeric_limits<T>::quiet_NaN()},\n-  };\n-  std::stringstream s(str);\n-\n-  // Check if str is one of the special numbers.\n-  string special_num_str;\n-  s >> special_num_str;\n-\n-  for (int i = 0; i < special_num_str.length(); ++i) {\n-    special_num_str[i] =\n-        std::tolower(special_num_str[i], std::locale::classic());\n-  }\n-\n-  auto entry = special_nums.find(special_num_str);\n-  if (entry != special_nums.end()) {\n-    *endptr = str + (s.eof() ? static_cast<std::iostream::pos_type>(strlen(str))\n-                             : s.tellg());\n-    return entry->second;\n-  } else {\n-    // Perhaps it's a hex number\n-    if (special_num_str.compare(0, 2, \"0x\") == 0 ||\n-        special_num_str.compare(0, 3, \"-0x\") == 0) {\n-      return strtol(str, const_cast<char**>(endptr), 16);\n-    }\n-  }\n-  // Reset the stream\n-  s.str(str);\n-  s.clear();\n-  // Use the \"C\" locale\n-  s.imbue(std::locale::classic());\n-\n-  T result;\n-  s >> result;\n-\n-  // Set to result to what strto{f,d} functions would have returned. If the\n-  // number was outside the range, the stringstream sets the fail flag, but\n-  // returns the +/-max() value, whereas strto{f,d} functions return +/-INF.\n-  if (s.fail()) {\n-    if (result == std::numeric_limits<T>::max()) {\n-      result = std::numeric_limits<T>::infinity();\n-      s.clear(s.rdstate() & ~std::ios::failbit);\n-    } else if (result == -std::numeric_limits<T>::max()) {\n-      result = -std::numeric_limits<T>::infinity();\n-      s.clear(s.rdstate() & ~std::ios::failbit);\n-    }\n-  }\n-\n-  if (endptr) {\n-    *endptr =\n-        str +\n-        (s.fail() ? static_cast<std::iostream::pos_type>(0)\n-                  : (s.eof() ? static_cast<std::iostream::pos_type>(strlen(str))\n-                             : s.tellg()));\n-  }\n-  return result;\n+static inline const double_conversion::StringToDoubleConverter& StringToFloatConverter() {\n+    const static double_conversion::StringToDoubleConverter converter(\n+        double_conversion::StringToDoubleConverter::ALLOW_LEADING_SPACES\n+        | double_conversion::StringToDoubleConverter::ALLOW_HEX\n+        | double_conversion::StringToDoubleConverter::ALLOW_OCTALS", "path": "tensorflow/core/lib/strings/numbers.cc", "position": null, "original_position": 84, "commit_id": "32dbc5c7a67fd56094ef72c8869b0d61a3eb23c8", "original_commit_id": "bb1bd807fcbb26822a3872d04e0223f6d6e6f06d", "user": {"login": "cwhipkey", "id": 17578177, "node_id": "MDQ6VXNlcjE3NTc4MTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/17578177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwhipkey", "html_url": "https://github.com/cwhipkey", "followers_url": "https://api.github.com/users/cwhipkey/followers", "following_url": "https://api.github.com/users/cwhipkey/following{/other_user}", "gists_url": "https://api.github.com/users/cwhipkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwhipkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwhipkey/subscriptions", "organizations_url": "https://api.github.com/users/cwhipkey/orgs", "repos_url": "https://api.github.com/users/cwhipkey/repos", "events_url": "https://api.github.com/users/cwhipkey/events{/privacy}", "received_events_url": "https://api.github.com/users/cwhipkey/received_events", "type": "User", "site_admin": false}, "body": "do we need to support OCTALS?", "created_at": "2017-10-24T16:04:15Z", "updated_at": "2017-11-27T07:48:11Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12102#discussion_r146611023", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12102", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/146611023"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12102#discussion_r146611023"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12102"}}, "body_html": "<p>do we need to support OCTALS?</p>", "body_text": "do we need to support OCTALS?"}