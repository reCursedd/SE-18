{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/328176516", "html_url": "https://github.com/tensorflow/tensorflow/pull/12915#issuecomment-328176516", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12915", "id": 328176516, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODE3NjUxNg==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-08T18:13:57Z", "updated_at": "2017-09-08T18:13:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> That sounds reasonable! I agree that it's better to have a clearly defined API. In general, modularization of TensorFlow and it's binaries would probably be a good idea.</p>\n<p>As for a temporary workaround, I only need this for my Scala API for defining an op equivalent to <code>py_func</code>. One way to go about this would be to make <code>pywrap_tensorflow.so</code> accessible through the nightly CI builds. Is that something that's easy to do? Then, I can simply also package it with <code>libtensorflow.so</code> for my current purposes, until a more elegant alternative is available.</p>\n<p>P.S. I refer to the CI builds because my packaging/release script right now, pulls the <code>libtensorflow.so</code> binaries from there.</p>", "body_text": "@asimshankar That sounds reasonable! I agree that it's better to have a clearly defined API. In general, modularization of TensorFlow and it's binaries would probably be a good idea.\nAs for a temporary workaround, I only need this for my Scala API for defining an op equivalent to py_func. One way to go about this would be to make pywrap_tensorflow.so accessible through the nightly CI builds. Is that something that's easy to do? Then, I can simply also package it with libtensorflow.so for my current purposes, until a more elegant alternative is available.\nP.S. I refer to the CI builds because my packaging/release script right now, pulls the libtensorflow.so binaries from there.", "body": "@asimshankar That sounds reasonable! I agree that it's better to have a clearly defined API. In general, modularization of TensorFlow and it's binaries would probably be a good idea.\r\n\r\nAs for a temporary workaround, I only need this for my Scala API for defining an op equivalent to `py_func`. One way to go about this would be to make `pywrap_tensorflow.so` accessible through the nightly CI builds. Is that something that's easy to do? Then, I can simply also package it with `libtensorflow.so` for my current purposes, until a more elegant alternative is available.\r\n\r\nP.S. I refer to the CI builds because my packaging/release script right now, pulls the `libtensorflow.so` binaries from there."}