{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/343493287", "html_url": "https://github.com/tensorflow/tensorflow/issues/14451#issuecomment-343493287", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14451", "id": 343493287, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzQ5MzI4Nw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-10T14:51:26Z", "updated_at": "2017-11-10T14:51:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p>If you have a function <code>f</code> that returns the number of times to duplicate an element, you can data-dependently repeat an element using <code>dataset.flat_map(lambda x: tf.data.Dataset.from_tensors(x).repeat(f(x))</code>. Perhaps that would work?</p>", "body_text": "If you have a function f that returns the number of times to duplicate an element, you can data-dependently repeat an element using dataset.flat_map(lambda x: tf.data.Dataset.from_tensors(x).repeat(f(x)). Perhaps that would work?", "body": "If you have a function `f` that returns the number of times to duplicate an element, you can data-dependently repeat an element using `dataset.flat_map(lambda x: tf.data.Dataset.from_tensors(x).repeat(f(x))`. Perhaps that would work?"}