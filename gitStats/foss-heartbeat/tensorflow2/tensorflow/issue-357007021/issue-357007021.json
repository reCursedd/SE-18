{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22073", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22073/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22073/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22073/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/22073", "id": 357007021, "node_id": "MDExOlB1bGxSZXF1ZXN0MjEzMTI2ODEz", "number": 22073, "title": "Fix ReLU layer serialization bug", "user": {"login": "yanboliang", "id": 1962026, "node_id": "MDQ6VXNlcjE5NjIwMjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1962026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanboliang", "html_url": "https://github.com/yanboliang", "followers_url": "https://api.github.com/users/yanboliang/followers", "following_url": "https://api.github.com/users/yanboliang/following{/other_user}", "gists_url": "https://api.github.com/users/yanboliang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanboliang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanboliang/subscriptions", "organizations_url": "https://api.github.com/users/yanboliang/orgs", "repos_url": "https://api.github.com/users/yanboliang/repos", "events_url": "https://api.github.com/users/yanboliang/events{/privacy}", "received_events_url": "https://api.github.com/users/yanboliang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-04T23:04:23Z", "updated_at": "2018-09-04T23:30:13Z", "closed_at": "2018-09-04T23:29:25Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22073", "html_url": "https://github.com/tensorflow/tensorflow/pull/22073", "diff_url": "https://github.com/tensorflow/tensorflow/pull/22073.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/22073.patch"}, "body_html": "<p>This bug is reported at <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"355152782\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/keras-team/keras/issues/11023\" data-hovercard-type=\"issue\" data-hovercard-url=\"/keras-team/keras/issues/11023/hovercard\" href=\"https://github.com/keras-team/keras/issues/11023\">keras-team/keras#11023</a>, but actually <code>keras-team/keras</code> handles this correctly, <code>tf.keras</code> has the bug. You can also use the following code snippet to reproduce:</p>\n<pre><code>from tensorflow.python.keras.layers import Input, ReLU\nfrom tensorflow.python.keras.models import Model, save_model, load_model\nimport numpy as np\n\ninput = Input(shape=(5, 6, 3))\noutput = ReLU(6)(input)\nmodel = Model(inputs=input, outputs=output)\nmodel.summary()\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nsave_model(model, \"/tmp/test1\")\nload_model(\"/tmp/test1\")\n</code></pre>\n<p>This is the exception:</p>\n<pre><code>Traceback (most recent call last):\n  File \"test.py\", line 13, in &lt;module&gt;\n    load_model(\"/tmp/test1\")\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/saving.py\", line 229, in load_model\n    model = model_from_config(model_config, custom_objects=custom_objects)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/saving.py\", line 306, in model_from_config\n    return deserialize(config, custom_objects=custom_objects)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\n    printable_module_name='layer')\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/utils/generic_utils.py\", line 173, in deserialize_keras_object\n    list(custom_objects.items())))\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 1209, in from_config\n    process_layer(layer_data)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 1195, in process_layer\n    layer = deserialize_layer(layer_data, custom_objects=custom_objects)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\n    printable_module_name='layer')\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/utils/generic_utils.py\", line 175, in deserialize_keras_object\n    return cls.from_config(config['config'])\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1553, in from_config\n    return cls(**config)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/layers/advanced_activations.py\", line 302, in __init__\n    self.max_value = K.cast_to_floatx(max_value)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/backend.py\", line 216, in cast_to_floatx\n    return np.asarray(x, dtype=_FLOATX)\n  File \"/Library/Python/2.7/site-packages/numpy/core/numeric.py\", line 492, in asarray\n    return array(a, dtype, copy=False, order=order)\nTypeError: float() argument must be a string or a number\n</code></pre>\n<p>The bug is caused by the type of <code>self.max_value</code> is <code>np.ndarray</code> after <code>K.cast_to_floatx</code>, so we should force to convert it to float when serializing it, otherwise, it would be serialized as <code>np.ndarray</code> and throws exception when loading back. This fix is following other layers in <code>advanced_activations.py</code>, such as <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/advanced_activations.py#L63\">here</a>, they handle similar issue correctly.</p>", "body_text": "This bug is reported at keras-team/keras#11023, but actually keras-team/keras handles this correctly, tf.keras has the bug. You can also use the following code snippet to reproduce:\nfrom tensorflow.python.keras.layers import Input, ReLU\nfrom tensorflow.python.keras.models import Model, save_model, load_model\nimport numpy as np\n\ninput = Input(shape=(5, 6, 3))\noutput = ReLU(6)(input)\nmodel = Model(inputs=input, outputs=output)\nmodel.summary()\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nsave_model(model, \"/tmp/test1\")\nload_model(\"/tmp/test1\")\n\nThis is the exception:\nTraceback (most recent call last):\n  File \"test.py\", line 13, in <module>\n    load_model(\"/tmp/test1\")\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/saving.py\", line 229, in load_model\n    model = model_from_config(model_config, custom_objects=custom_objects)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/saving.py\", line 306, in model_from_config\n    return deserialize(config, custom_objects=custom_objects)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\n    printable_module_name='layer')\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/utils/generic_utils.py\", line 173, in deserialize_keras_object\n    list(custom_objects.items())))\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 1209, in from_config\n    process_layer(layer_data)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 1195, in process_layer\n    layer = deserialize_layer(layer_data, custom_objects=custom_objects)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\n    printable_module_name='layer')\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/utils/generic_utils.py\", line 175, in deserialize_keras_object\n    return cls.from_config(config['config'])\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1553, in from_config\n    return cls(**config)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/layers/advanced_activations.py\", line 302, in __init__\n    self.max_value = K.cast_to_floatx(max_value)\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/backend.py\", line 216, in cast_to_floatx\n    return np.asarray(x, dtype=_FLOATX)\n  File \"/Library/Python/2.7/site-packages/numpy/core/numeric.py\", line 492, in asarray\n    return array(a, dtype, copy=False, order=order)\nTypeError: float() argument must be a string or a number\n\nThe bug is caused by the type of self.max_value is np.ndarray after K.cast_to_floatx, so we should force to convert it to float when serializing it, otherwise, it would be serialized as np.ndarray and throws exception when loading back. This fix is following other layers in advanced_activations.py, such as here, they handle similar issue correctly.", "body": "This bug is reported at https://github.com/keras-team/keras/issues/11023, but actually ```keras-team/keras``` handles this correctly, ```tf.keras``` has the bug. You can also use the following code snippet to reproduce:\r\n```\r\nfrom tensorflow.python.keras.layers import Input, ReLU\r\nfrom tensorflow.python.keras.models import Model, save_model, load_model\r\nimport numpy as np\r\n\r\ninput = Input(shape=(5, 6, 3))\r\noutput = ReLU(6)(input)\r\nmodel = Model(inputs=input, outputs=output)\r\nmodel.summary()\r\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\r\n\r\nsave_model(model, \"/tmp/test1\")\r\nload_model(\"/tmp/test1\")\r\n```\r\nThis is the exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 13, in <module>\r\n    load_model(\"/tmp/test1\")\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/saving.py\", line 229, in load_model\r\n    model = model_from_config(model_config, custom_objects=custom_objects)\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/saving.py\", line 306, in model_from_config\r\n    return deserialize(config, custom_objects=custom_objects)\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\r\n    printable_module_name='layer')\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/utils/generic_utils.py\", line 173, in deserialize_keras_object\r\n    list(custom_objects.items())))\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 1209, in from_config\r\n    process_layer(layer_data)\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 1195, in process_layer\r\n    layer = deserialize_layer(layer_data, custom_objects=custom_objects)\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\r\n    printable_module_name='layer')\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/utils/generic_utils.py\", line 175, in deserialize_keras_object\r\n    return cls.from_config(config['config'])\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1553, in from_config\r\n    return cls(**config)\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/layers/advanced_activations.py\", line 302, in __init__\r\n    self.max_value = K.cast_to_floatx(max_value)\r\n  File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/backend.py\", line 216, in cast_to_floatx\r\n    return np.asarray(x, dtype=_FLOATX)\r\n  File \"/Library/Python/2.7/site-packages/numpy/core/numeric.py\", line 492, in asarray\r\n    return array(a, dtype, copy=False, order=order)\r\nTypeError: float() argument must be a string or a number\r\n```\r\nThe bug is caused by the type of ```self.max_value``` is ```np.ndarray``` after ```K.cast_to_floatx```, so we should force to convert it to float when serializing it, otherwise, it would be serialized as ```np.ndarray``` and throws exception when loading back. This fix is following other layers in ```advanced_activations.py```, such as [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/layers/advanced_activations.py#L63), they handle similar issue correctly."}