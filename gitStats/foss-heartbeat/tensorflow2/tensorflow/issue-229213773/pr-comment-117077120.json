{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/117077120", "pull_request_review_id": 38728936, "id": 117077120, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzA3NzEyMA==", "diff_hunk": "@@ -0,0 +1,133 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"lmdb.h\"\n+#include \"tensorflow/core/framework/reader_op_kernel.h\"\n+#include \"tensorflow/core/framework/reader_base.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+\n+#include <sys/stat.h>\n+\n+namespace tensorflow {\n+\n+inline void MDB_CHECK(int mdb_status) {\n+  CHECK_EQ(mdb_status, MDB_SUCCESS) << mdb_strerror(mdb_status);\n+}\n+\n+class LMDBReader : public ReaderBase {\n+ public:\n+  LMDBReader(const string& node_name, Env* env)\n+      : ReaderBase(strings::StrCat(\"LMDBReader '\", node_name, \"'\")),\n+        env_(env),\n+        mdb_env_(nullptr),\n+        mdb_dbi_(0),\n+        mdb_txn_(nullptr),\n+        mdb_cursor_(nullptr) {}\n+\n+  Status OnWorkStartedLocked() override {\n+    MDB_CHECK(mdb_env_create(&mdb_env_));\n+    int flags = MDB_RDONLY | MDB_NOTLS;\n+\n+    // Check if the LMDB filename is actually a file instead of a directory.\n+    // If so, set appropriate flags so we can open it.\n+    struct stat source_stat;\n+    if (stat(current_work().c_str(), &source_stat) == 0 &&\n+        (source_stat.st_mode & S_IFREG)) {\n+      flags |= MDB_NOSUBDIR;\n+    }\n+\n+    MDB_CHECK(mdb_env_open(mdb_env_, current_work().c_str(), flags, 0664));\n+    MDB_CHECK(mdb_txn_begin(mdb_env_, nullptr, MDB_RDONLY, &mdb_txn_));\n+    MDB_CHECK(mdb_dbi_open(mdb_txn_, nullptr, 0, &mdb_dbi_));\n+\n+    return Status::OK();\n+  }\n+\n+  Status OnWorkFinishedLocked() override {\n+    if (mdb_env_ != nullptr) {\n+      mdb_dbi_close(mdb_env_, mdb_dbi_);\n+      mdb_env_close(mdb_env_);\n+      mdb_env_ = nullptr;\n+      if (mdb_cursor_) {\n+        mdb_cursor_close(mdb_cursor_);\n+      }\n+      mdb_txn_abort(mdb_txn_);\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status ReadLocked(string* key, string* value, bool* produced,\n+                    bool* at_end) override {\n+    if (mdb_cursor_ == nullptr) {\n+      MDB_CHECK(mdb_cursor_open(mdb_txn_, mdb_dbi_, &mdb_cursor_));\n+      if (Seek(MDB_FIRST) == false) {\n+        *at_end = true;\n+        return Status::OK();\n+      }\n+    }\n+    else {\n+      if (Seek(MDB_NEXT) == false) {\n+        *at_end = true;\n+        return Status::OK();\n+      }\n+    }\n+    *key = string(static_cast<const char*>(mdb_key_.mv_data), mdb_key_.mv_size);", "path": "tensorflow/core/kernels/lmdb_reader_op.cc", "position": null, "original_position": 86, "commit_id": "18bcada8638dfc246b42a7e7845172c3ee7a7d48", "original_commit_id": "060f10bbeea9b6e5390ebb1e1a13acb2094cab72", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "body": "Does LMDB handle endianness conversions automatically?", "created_at": "2017-05-17T18:29:07Z", "updated_at": "2017-05-31T21:25:11Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9950#discussion_r117077120", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9950", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/117077120"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9950#discussion_r117077120"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9950"}}, "body_html": "<p>Does LMDB handle endianness conversions automatically?</p>", "body_text": "Does LMDB handle endianness conversions automatically?"}