{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95629354", "pull_request_review_id": 16190508, "id": 95629354, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NjI5MzU0", "diff_hunk": "@@ -2129,6 +2131,97 @@ def legacy_fully_connected(x,\n \n     return _apply_activation(y, activation_fn, output_collections)\n \n+def adaptive_softmax_loss(inputs,\n+                          labels,\n+                          cutoff,\n+                          project_factor=4,\n+                          initializer=None,\n+                          name=None):\n+  \"\"\"Computes and returns the adaptive softmax loss (a improvement of \n+  hierarchical softmax).\n+    \n+  See [Efficient softmax approximation for GPUs](https://arxiv.org/pdf/1609.04309v2.pdf).\n+        \n+  This is a faster way to train a softmax classifier over a huge number of \n+  classes, and can be used for **both training and prediction**. For example, it \n+  can be used for training a Language Model with a very huge vocabulary, and \n+  the trained languaed model can be used in speech recognition, text generation, \n+  and machine translation very efficiently.\n+  \n+  Args:\n+    inputs: A `Tensor` of shape `[batch_size, dim]`.  The forward\n+      activations of the input network.\n+    labels: `Tensor` of shape `[d_0, d_1, ..., d_{r-2}]` and dtype `int32` or\n+      `int64`. Each entry in `labels` must be an index in `[0, num_classes)`.\n+    cutoff: A list indicating the limits of the different clusters.\n+    project_factor: A floating point value greater or equal to 1.0. The projection ", "path": "tensorflow/contrib/layers/python/layers/layers.py", "position": 45, "original_position": 45, "commit_id": "b98dc09da4f979d85ad27c6ff4c901af1bffdec3", "original_commit_id": "b98dc09da4f979d85ad27c6ff4c901af1bffdec3", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "Python float scalar, or can this be a tensorflow float16/float32/float64 scalar?", "created_at": "2017-01-11T17:31:59Z", "updated_at": "2017-01-11T17:39:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6632#discussion_r95629354", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6632", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95629354"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6632#discussion_r95629354"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6632"}}, "body_html": "<p>Python float scalar, or can this be a tensorflow float16/float32/float64 scalar?</p>", "body_text": "Python float scalar, or can this be a tensorflow float16/float32/float64 scalar?"}