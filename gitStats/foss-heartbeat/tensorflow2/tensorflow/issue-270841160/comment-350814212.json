{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350814212", "html_url": "https://github.com/tensorflow/tensorflow/issues/14194#issuecomment-350814212", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14194", "id": 350814212, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDgxNDIxMg==", "user": {"login": "headupinclouds", "id": 554720, "node_id": "MDQ6VXNlcjU1NDcyMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/554720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/headupinclouds", "html_url": "https://github.com/headupinclouds", "followers_url": "https://api.github.com/users/headupinclouds/followers", "following_url": "https://api.github.com/users/headupinclouds/following{/other_user}", "gists_url": "https://api.github.com/users/headupinclouds/gists{/gist_id}", "starred_url": "https://api.github.com/users/headupinclouds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/headupinclouds/subscriptions", "organizations_url": "https://api.github.com/users/headupinclouds/orgs", "repos_url": "https://api.github.com/users/headupinclouds/repos", "events_url": "https://api.github.com/users/headupinclouds/events{/privacy}", "received_events_url": "https://api.github.com/users/headupinclouds/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-11T18:30:42Z", "updated_at": "2017-12-11T18:30:56Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15482785\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/johnsrude\">@johnsrude</a> The CMake build appears to be configured to generate an new version file <code>tensorflow/core/util/version_info.cc</code> for <em>every</em> build, which is included in the low level <code>tf_core_framework</code>.  This is at least partly responsible for the rebuild problems.</p>\n<p>There is a custom command that creates the version file from python + git here:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/dcd820616d352d1e8844b1db504af4e859176cbf/tensorflow/contrib/cmake/tf_core_framework.cmake#L271-L283\">tensorflow/tensorflow/contrib/cmake/tf_core_framework.cmake</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 271 to 283\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/dcd820616d352d1e8844b1db504af4e859176cbf\">dcd8206</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L271\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"271\"></td>\n          <td id=\"LC271\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">#</span> Tricky setup to force always rebuilding</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L272\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"272\"></td>\n          <td id=\"LC272\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">#</span> force_rebuild always runs forcing ${VERSION_INFO_CC} target to run</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L273\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"273\"></td>\n          <td id=\"LC273\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">#</span> ${VERSION_INFO_CC} would cache, but it depends on a phony never produced</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L274\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"274\"></td>\n          <td id=\"LC274\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">#</span> target.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L275\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"275\"></td>\n          <td id=\"LC275\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">set</span>(VERSION_INFO_CC <span class=\"pl-smi\">${tensorflow_source_dir}</span>/tensorflow/core/util/version_info.cc) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L276\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"276\"></td>\n          <td id=\"LC276\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">add_custom_target</span>(force_rebuild_target <span class=\"pl-k\">ALL</span> <span class=\"pl-k\">DEPENDS</span> <span class=\"pl-smi\">${VERSION_INFO_CC}</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L277\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"277\"></td>\n          <td id=\"LC277\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">add_custom_command</span>(<span class=\"pl-k\">OUTPUT</span> __force_rebuild <span class=\"pl-k\">COMMAND</span> <span class=\"pl-smi\">${CMAKE_COMMAND}</span> -E echo) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L278\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"278\"></td>\n          <td id=\"LC278\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">add_custom_command</span>(<span class=\"pl-k\">OUTPUT</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L279\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"279\"></td>\n          <td id=\"LC279\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-smi\">${VERSION_INFO_CC}</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L280\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"280\"></td>\n          <td id=\"LC280\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">COMMAND</span> <span class=\"pl-smi\">${PYTHON_EXECUTABLE}</span> <span class=\"pl-smi\">${tensorflow_source_dir}</span>/tensorflow/tools/git/gen_git_source.py </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L281\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"281\"></td>\n          <td id=\"LC281\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     --raw_generate <span class=\"pl-smi\">${VERSION_INFO_CC}</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L282\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"282\"></td>\n          <td id=\"LC282\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">DEPENDS</span> __force_rebuild) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L283\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"283\"></td>\n          <td id=\"LC283\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">set</span>(tf_version_srcs <span class=\"pl-smi\">${tensorflow_source_dir}</span>/tensorflow/core/util/version_info.cc) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>I <em>think</em> what we want, is to only update this file if the git version has changed.  I've added an extra <code>add_custom_command</code> to copy the output from <code>gen_git_source.py --raw_generate</code> over<code>tensorflow/core/util/version_info.cc</code> only if it has changed using CMake's <code>copy_if_different</code>, and that seems to address the unwanted full rebuild.</p>\n<pre><code># Tricky setup to force always rebuilding\n# force_rebuild always runs forcing ${VERSION_INFO_CC} target to run\n# ${VERSION_INFO_CC} would cache, but it depends on a phony never produced\n# target.\nset(gen_git_source ${tensorflow_source_dir}/tensorflow/tools/git/gen_git_source.py)\nset(version_info_cc_tmp ${CMAKE_CURRENT_BINARY_DIR}/version_info.cc)\nadd_custom_target(force_rebuild_target ALL DEPENDS ${VERSION_INFO_CC})\nset_property(TARGET force_rebuild_target PROPERTY FOLDER \"custom\")\n\nadd_custom_command(OUTPUT __force_rebuild COMMAND ${CMAKE_COMMAND} -E echo)\nadd_custom_command(OUTPUT\n    ${version_info_cc_tmp}\n    COMMAND ${PYTHON_EXECUTABLE} ${gen_git_source} --raw_generate ${version_info_cc_tmp}\n    DEPENDS __force_rebuild)\n\nset(VERSION_INFO_CC ${tensorflow_source_dir}/tensorflow/core/util/version_info.cc)\nadd_custom_command(OUTPUT\n  \"${VERSION_INFO_CC}\"\n  DEPENDS \"${version_info_cc_tmp}\"\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different \"${version_info_cc_tmp}\" \"${VERSION_INFO_CC}\"\n  ) \n  \nset(tf_version_srcs ${VERSION_INFO_CC})\n</code></pre>\n<p>I've tested this on OS X and it seems to be working.  Is there an active CMake author who can review this?</p>", "body_text": "@johnsrude The CMake build appears to be configured to generate an new version file tensorflow/core/util/version_info.cc for every build, which is included in the low level tf_core_framework.  This is at least partly responsible for the rebuild problems.\nThere is a custom command that creates the version file from python + git here:\n\n  \n    \n      tensorflow/tensorflow/contrib/cmake/tf_core_framework.cmake\n    \n    \n        Lines 271 to 283\n      in\n      dcd8206\n    \n    \n    \n    \n\n        \n          \n           # Tricky setup to force always rebuilding \n        \n\n        \n          \n           # force_rebuild always runs forcing ${VERSION_INFO_CC} target to run \n        \n\n        \n          \n           # ${VERSION_INFO_CC} would cache, but it depends on a phony never produced \n        \n\n        \n          \n           # target. \n        \n\n        \n          \n           set(VERSION_INFO_CC ${tensorflow_source_dir}/tensorflow/core/util/version_info.cc) \n        \n\n        \n          \n           add_custom_target(force_rebuild_target ALL DEPENDS ${VERSION_INFO_CC}) \n        \n\n        \n          \n           add_custom_command(OUTPUT __force_rebuild COMMAND ${CMAKE_COMMAND} -E echo) \n        \n\n        \n          \n           add_custom_command(OUTPUT \n        \n\n        \n          \n               ${VERSION_INFO_CC} \n        \n\n        \n          \n               COMMAND ${PYTHON_EXECUTABLE} ${tensorflow_source_dir}/tensorflow/tools/git/gen_git_source.py \n        \n\n        \n          \n               --raw_generate ${VERSION_INFO_CC} \n        \n\n        \n          \n               DEPENDS __force_rebuild) \n        \n\n        \n          \n           set(tf_version_srcs ${tensorflow_source_dir}/tensorflow/core/util/version_info.cc) \n        \n    \n  \n\n\nI think what we want, is to only update this file if the git version has changed.  I've added an extra add_custom_command to copy the output from gen_git_source.py --raw_generate overtensorflow/core/util/version_info.cc only if it has changed using CMake's copy_if_different, and that seems to address the unwanted full rebuild.\n# Tricky setup to force always rebuilding\n# force_rebuild always runs forcing ${VERSION_INFO_CC} target to run\n# ${VERSION_INFO_CC} would cache, but it depends on a phony never produced\n# target.\nset(gen_git_source ${tensorflow_source_dir}/tensorflow/tools/git/gen_git_source.py)\nset(version_info_cc_tmp ${CMAKE_CURRENT_BINARY_DIR}/version_info.cc)\nadd_custom_target(force_rebuild_target ALL DEPENDS ${VERSION_INFO_CC})\nset_property(TARGET force_rebuild_target PROPERTY FOLDER \"custom\")\n\nadd_custom_command(OUTPUT __force_rebuild COMMAND ${CMAKE_COMMAND} -E echo)\nadd_custom_command(OUTPUT\n    ${version_info_cc_tmp}\n    COMMAND ${PYTHON_EXECUTABLE} ${gen_git_source} --raw_generate ${version_info_cc_tmp}\n    DEPENDS __force_rebuild)\n\nset(VERSION_INFO_CC ${tensorflow_source_dir}/tensorflow/core/util/version_info.cc)\nadd_custom_command(OUTPUT\n  \"${VERSION_INFO_CC}\"\n  DEPENDS \"${version_info_cc_tmp}\"\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different \"${version_info_cc_tmp}\" \"${VERSION_INFO_CC}\"\n  ) \n  \nset(tf_version_srcs ${VERSION_INFO_CC})\n\nI've tested this on OS X and it seems to be working.  Is there an active CMake author who can review this?", "body": "@johnsrude The CMake build appears to be configured to generate an new version file `tensorflow/core/util/version_info.cc` for *every* build, which is included in the low level `tf_core_framework`.  This is at least partly responsible for the rebuild problems.\r\n\r\nThere is a custom command that creates the version file from python + git here:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/dcd820616d352d1e8844b1db504af4e859176cbf/tensorflow/contrib/cmake/tf_core_framework.cmake#L271-L283\r\n\r\nI *think* what we want, is to only update this file if the git version has changed.  I've added an extra `add_custom_command` to copy the output from `gen_git_source.py --raw_generate` over`tensorflow/core/util/version_info.cc` only if it has changed using CMake's `copy_if_different`, and that seems to address the unwanted full rebuild.\r\n\r\n```\r\n# Tricky setup to force always rebuilding\r\n# force_rebuild always runs forcing ${VERSION_INFO_CC} target to run\r\n# ${VERSION_INFO_CC} would cache, but it depends on a phony never produced\r\n# target.\r\nset(gen_git_source ${tensorflow_source_dir}/tensorflow/tools/git/gen_git_source.py)\r\nset(version_info_cc_tmp ${CMAKE_CURRENT_BINARY_DIR}/version_info.cc)\r\nadd_custom_target(force_rebuild_target ALL DEPENDS ${VERSION_INFO_CC})\r\nset_property(TARGET force_rebuild_target PROPERTY FOLDER \"custom\")\r\n\r\nadd_custom_command(OUTPUT __force_rebuild COMMAND ${CMAKE_COMMAND} -E echo)\r\nadd_custom_command(OUTPUT\r\n    ${version_info_cc_tmp}\r\n    COMMAND ${PYTHON_EXECUTABLE} ${gen_git_source} --raw_generate ${version_info_cc_tmp}\r\n    DEPENDS __force_rebuild)\r\n\r\nset(VERSION_INFO_CC ${tensorflow_source_dir}/tensorflow/core/util/version_info.cc)\r\nadd_custom_command(OUTPUT\r\n  \"${VERSION_INFO_CC}\"\r\n  DEPENDS \"${version_info_cc_tmp}\"\r\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different \"${version_info_cc_tmp}\" \"${VERSION_INFO_CC}\"\r\n  ) \r\n  \r\nset(tf_version_srcs ${VERSION_INFO_CC})\r\n```\r\n\r\nI've tested this on OS X and it seems to be working.  Is there an active CMake author who can review this?\r\n"}