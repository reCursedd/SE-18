{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/318002873", "html_url": "https://github.com/tensorflow/tensorflow/issues/7172#issuecomment-318002873", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7172", "id": 318002873, "node_id": "MDEyOklzc3VlQ29tbWVudDMxODAwMjg3Mw==", "user": {"login": "parthg", "id": 804925, "node_id": "MDQ6VXNlcjgwNDkyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/804925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parthg", "html_url": "https://github.com/parthg", "followers_url": "https://api.github.com/users/parthg/followers", "following_url": "https://api.github.com/users/parthg/following{/other_user}", "gists_url": "https://api.github.com/users/parthg/gists{/gist_id}", "starred_url": "https://api.github.com/users/parthg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parthg/subscriptions", "organizations_url": "https://api.github.com/users/parthg/orgs", "repos_url": "https://api.github.com/users/parthg/repos", "events_url": "https://api.github.com/users/parthg/events{/privacy}", "received_events_url": "https://api.github.com/users/parthg/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-26T09:37:20Z", "updated_at": "2017-07-26T09:37:20Z", "author_association": "NONE", "body_html": "<p>To add my 2 cents:</p>\n<p>If the final goal is to use a pre-trained model to predict or extract features for new images, there is no need to generate intermediate .pbtxt file and consecutively freeze it. If you already know the layer names, below is the example of how to use ResNet50 model to extract features (inspired a bit from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8059551\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/civilman628\">@civilman628</a> 's answer and documentation on <a href=\"https://github.com/tensorflow/models/blob/master/slim/nets/resnet_v1.py\">resnet_v1.py</a>):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tensorflow.contrib.slim.nets <span class=\"pl-k\">import</span> resnet_v1\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib.slim <span class=\"pl-k\">as</span> slim\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create graph</span>\ninputs <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[batch_size, height, width, channels])\n<span class=\"pl-k\">with</span> slim.arg_scope(resnet_v1.resnet_arg_scope()):\n        net, end_points <span class=\"pl-k\">=</span> resnet_v1.resnet_v1_50(inputs, <span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n\nsaver <span class=\"pl-k\">=</span> tf.train.Saver()    \n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n        saver.restore(sess, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>.resnet_v1_50.ckpt<span class=\"pl-pds\">'</span></span>)\n        representation_tensor <span class=\"pl-k\">=</span> sess.graph.get_tensor_by_name(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>resnet_v1_50/pool5:0<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> if you don't know names like these, consider referring to corresponding model file or generate .pbtxt file as mentioned in  @civilman628 's answer above</span>\n        img <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>  <span class=\"pl-c\"><span class=\"pl-c\">#</span>load image here with size [1, 224,224, 3]</span>\n        features <span class=\"pl-k\">=</span> sess.run(representation_tensor, {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Placeholder:0<span class=\"pl-pds\">'</span></span>: x})</pre></div>", "body_text": "To add my 2 cents:\nIf the final goal is to use a pre-trained model to predict or extract features for new images, there is no need to generate intermediate .pbtxt file and consecutively freeze it. If you already know the layer names, below is the example of how to use ResNet50 model to extract features (inspired a bit from @civilman628 's answer and documentation on resnet_v1.py):\nfrom tensorflow.contrib.slim.nets import resnet_v1\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\n\n# Create graph\ninputs = tf.placeholder(tf.float32, shape=[batch_size, height, width, channels])\nwith slim.arg_scope(resnet_v1.resnet_arg_scope()):\n        net, end_points = resnet_v1.resnet_v1_50(inputs, is_training=False)\n\nsaver = tf.train.Saver()    \n\nwith tf.Session() as sess:\n        saver.restore(sess, '.resnet_v1_50.ckpt')\n        representation_tensor = sess.graph.get_tensor_by_name('resnet_v1_50/pool5:0') # if you don't know names like these, consider referring to corresponding model file or generate .pbtxt file as mentioned in  @civilman628 's answer above\n        img = ...  #load image here with size [1, 224,224, 3]\n        features = sess.run(representation_tensor, {'Placeholder:0': x})", "body": "To add my 2 cents:\r\n\r\nIf the final goal is to use a pre-trained model to predict or extract features for new images, there is no need to generate intermediate .pbtxt file and consecutively freeze it. If you already know the layer names, below is the example of how to use ResNet50 model to extract features (inspired a bit from @civilman628 's answer and documentation on [resnet_v1.py](https://github.com/tensorflow/models/blob/master/slim/nets/resnet_v1.py)):\r\n\r\n```python\r\nfrom tensorflow.contrib.slim.nets import resnet_v1\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.slim as slim\r\n\r\n# Create graph\r\ninputs = tf.placeholder(tf.float32, shape=[batch_size, height, width, channels])\r\nwith slim.arg_scope(resnet_v1.resnet_arg_scope()):\r\n        net, end_points = resnet_v1.resnet_v1_50(inputs, is_training=False)\r\n\r\nsaver = tf.train.Saver()    \r\n\r\nwith tf.Session() as sess:\r\n        saver.restore(sess, '.resnet_v1_50.ckpt')\r\n        representation_tensor = sess.graph.get_tensor_by_name('resnet_v1_50/pool5:0') # if you don't know names like these, consider referring to corresponding model file or generate .pbtxt file as mentioned in  @civilman628 's answer above\r\n        img = ...  #load image here with size [1, 224,224, 3]\r\n        features = sess.run(representation_tensor, {'Placeholder:0': x})\r\n```\r\n\r\n\r\n"}