{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/207053486", "html_url": "https://github.com/tensorflow/tensorflow/issues/1798#issuecomment-207053486", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1798", "id": 207053486, "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzA1MzQ4Ng==", "user": {"login": "sherrym", "id": 12770037, "node_id": "MDQ6VXNlcjEyNzcwMDM3", "avatar_url": "https://avatars0.githubusercontent.com/u/12770037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sherrym", "html_url": "https://github.com/sherrym", "followers_url": "https://api.github.com/users/sherrym/followers", "following_url": "https://api.github.com/users/sherrym/following{/other_user}", "gists_url": "https://api.github.com/users/sherrym/gists{/gist_id}", "starred_url": "https://api.github.com/users/sherrym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sherrym/subscriptions", "organizations_url": "https://api.github.com/users/sherrym/orgs", "repos_url": "https://api.github.com/users/sherrym/repos", "events_url": "https://api.github.com/users/sherrym/events{/privacy}", "received_events_url": "https://api.github.com/users/sherrym/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-07T19:10:57Z", "updated_at": "2016-04-07T19:10:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>You should be to do this:</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    new_saver <span class=\"pl-k\">=</span> tf.train.import_meta_graph(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>my-save-dir/my-model-10000.meta<span class=\"pl-pds\">'</span></span>)\n    new_saver.restore(sess, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>my-save-dir/my-model-10000<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> tf.get_collection() returns a list. In this example we only want the</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> first one.</span>\n    train_op <span class=\"pl-k\">=</span> tf.get_collection(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>train_op<span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">0</span>]\n    <span class=\"pl-k\">for</span> step <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(<span class=\"pl-c1\">1000000</span>):\n      sess.run(train_op)</pre></div>", "body_text": "You should be to do this:\n  with tf.Session() as sess:\n    new_saver = tf.train.import_meta_graph('my-save-dir/my-model-10000.meta')\n    new_saver.restore(sess, 'my-save-dir/my-model-10000')\n    # tf.get_collection() returns a list. In this example we only want the\n    # first one.\n    train_op = tf.get_collection('train_op')[0]\n    for step in xrange(1000000):\n      sess.run(train_op)", "body": "You should be to do this:\n\n``` Python\n  with tf.Session() as sess:\n    new_saver = tf.train.import_meta_graph('my-save-dir/my-model-10000.meta')\n    new_saver.restore(sess, 'my-save-dir/my-model-10000')\n    # tf.get_collection() returns a list. In this example we only want the\n    # first one.\n    train_op = tf.get_collection('train_op')[0]\n    for step in xrange(1000000):\n      sess.run(train_op)\n```\n"}