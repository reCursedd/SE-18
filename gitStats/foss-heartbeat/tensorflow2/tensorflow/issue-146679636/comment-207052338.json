{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/207052338", "html_url": "https://github.com/tensorflow/tensorflow/issues/1812#issuecomment-207052338", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1812", "id": 207052338, "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzA1MjMzOA==", "user": {"login": "johnrowlay", "id": 17486673, "node_id": "MDQ6VXNlcjE3NDg2Njcz", "avatar_url": "https://avatars3.githubusercontent.com/u/17486673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnrowlay", "html_url": "https://github.com/johnrowlay", "followers_url": "https://api.github.com/users/johnrowlay/followers", "following_url": "https://api.github.com/users/johnrowlay/following{/other_user}", "gists_url": "https://api.github.com/users/johnrowlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnrowlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnrowlay/subscriptions", "organizations_url": "https://api.github.com/users/johnrowlay/orgs", "repos_url": "https://api.github.com/users/johnrowlay/repos", "events_url": "https://api.github.com/users/johnrowlay/events{/privacy}", "received_events_url": "https://api.github.com/users/johnrowlay/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-07T19:07:08Z", "updated_at": "2016-04-07T19:07:08Z", "author_association": "NONE", "body_html": "<p>I'm not hugely experienced with either neural networks or Tensor Flow, but it sounds like it could be the \"vanishing gradients\" problem. When you have a very deep network (and30 layers is <em>very</em> deep), the gradients in the loss function become very small, and I have seen elsewhere that this can cause NaN values. It sounds like in the single step you mention, the gradients reduce and cross a precision threshold, and therefore become undefined.</p>", "body_text": "I'm not hugely experienced with either neural networks or Tensor Flow, but it sounds like it could be the \"vanishing gradients\" problem. When you have a very deep network (and30 layers is very deep), the gradients in the loss function become very small, and I have seen elsewhere that this can cause NaN values. It sounds like in the single step you mention, the gradients reduce and cross a precision threshold, and therefore become undefined.", "body": "I'm not hugely experienced with either neural networks or Tensor Flow, but it sounds like it could be the \"vanishing gradients\" problem. When you have a very deep network (and30 layers is _very_ deep), the gradients in the loss function become very small, and I have seen elsewhere that this can cause NaN values. It sounds like in the single step you mention, the gradients reduce and cross a precision threshold, and therefore become undefined.\n"}