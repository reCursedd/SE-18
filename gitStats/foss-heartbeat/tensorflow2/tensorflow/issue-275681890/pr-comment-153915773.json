{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/153915773", "pull_request_review_id": 79997998, "id": 153915773, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzkxNTc3Mw==", "diff_hunk": "@@ -45,11 +45,9 @@\n VALIDATION_FILE = 'validation.tfrecords'\n \n \n-def read_and_decode(filename_queue):\n-  reader = tf.TFRecordReader()\n-  _, serialized_example = reader.read(filename_queue)\n-  features = tf.parse_single_example(\n-      serialized_example,\n+def decode(serialized_example):\n+  features = tf.parse_example(", "path": "tensorflow/examples/how_tos/reading_data/fully_connected_reader.py", "position": null, "original_position": 10, "commit_id": "e018f3093dc1f94fa64c3ca928fca685f43aae50", "original_commit_id": "980f2eb047f6cddec3aa64d4461f6ff6613b89ed", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "I'd prefer the `parse_single_example` version for readability, please.\r\n\r\n(I am curious at what the cause of different performance might be... applying `tf.parse_example()` to a vector containing one example follows almost exactly the same code path as applying `tf.parse_single_example()` to a scalar, except it does all of the necessary squeezing etc. internally. The way it deals with `tf.SparseTensor` appears to be [a bit clumsy](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/parsing_ops.py#L839-L847), but that path isn't used here, and apart from that I don't see any obvious deficiencies....)", "created_at": "2017-11-29T21:10:22Z", "updated_at": "2017-12-04T14:43:25Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14751#discussion_r153915773", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14751", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/153915773"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14751#discussion_r153915773"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14751"}}, "body_html": "<p>I'd prefer the <code>parse_single_example</code> version for readability, please.</p>\n<p>(I am curious at what the cause of different performance might be... applying <code>tf.parse_example()</code> to a vector containing one example follows almost exactly the same code path as applying <code>tf.parse_single_example()</code> to a scalar, except it does all of the necessary squeezing etc. internally. The way it deals with <code>tf.SparseTensor</code> appears to be <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/parsing_ops.py#L839-L847\">a bit clumsy</a>, but that path isn't used here, and apart from that I don't see any obvious deficiencies....)</p>", "body_text": "I'd prefer the parse_single_example version for readability, please.\n(I am curious at what the cause of different performance might be... applying tf.parse_example() to a vector containing one example follows almost exactly the same code path as applying tf.parse_single_example() to a scalar, except it does all of the necessary squeezing etc. internally. The way it deals with tf.SparseTensor appears to be a bit clumsy, but that path isn't used here, and apart from that I don't see any obvious deficiencies....)", "in_reply_to_id": 153911453}