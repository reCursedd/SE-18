{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/157868858", "pull_request_review_id": 84579850, "id": 157868858, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg2ODg1OA==", "diff_hunk": "@@ -3297,9 +3299,120 @@ def count(values,\n     return count_, update_op\n \n \n+def cohen_kappa(labels, predictions, num_classes, weights=None,\n+                metrics_collections=None, updates_collections=None, name=None):\n+  \"\"\"Calculates [Cohen's kappa](https://en.wikipedia.org/wiki/Cohen's_kappa)\n+  which is a statistic that measures inter-annotator agreement.\n+\n+  The `cohen_kappa` function creates three local variables: `total_po`,\n+  `total_pe_row`, and `total_pe_col`, that are used to compute the\n+  Cohen's kappa. This value is ultimately returned as `kappa`, an idempotent\n+  operation that is calculate by\n+\n+      pe = (pe_row * pe_col) / N\n+      k = (sum(po) - sum(pe)) / (N - sum(pe))\n+\n+  For estimation of the metric over a stream of data, the function creates an\n+  `update_op` operation that updates these variables and returns the\n+  `kappa`. `update_op` weights each prediction by the corresponding value in\n+  `weights`.\n+\n+  Class labels are expected to start at 0. E.g., if `num_classes`\n+  was three, then the possible labels would be [0, 1, 2].\n+\n+  If `weights` is `None`, weights default to 1. Use weights of 0 to mask values.\n+\n+  NOTE: Equivalent to `sklearn.metrics.cohen_kappa_score`, but the method\n+  doesn't support weighted matrix yet.\n+\n+  Args:\n+    labels: 1-D `Tensor` of the ground truth values.\n+    predictions: 1-D `Tensor` of the predicted values.", "path": "tensorflow/contrib/metrics/python/ops/metric_ops.py", "position": null, "original_position": 45, "commit_id": "fda336a65f094557fed09ac3c8b67f201ae04617", "original_commit_id": "b0b16fd062dd6ad1e2ce2169d376c9120922d9b1", "user": {"login": "roumposg", "id": 7244943, "node_id": "MDQ6VXNlcjcyNDQ5NDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7244943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roumposg", "html_url": "https://github.com/roumposg", "followers_url": "https://api.github.com/users/roumposg/followers", "following_url": "https://api.github.com/users/roumposg/following{/other_user}", "gists_url": "https://api.github.com/users/roumposg/gists{/gist_id}", "starred_url": "https://api.github.com/users/roumposg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roumposg/subscriptions", "organizations_url": "https://api.github.com/users/roumposg/orgs", "repos_url": "https://api.github.com/users/roumposg/repos", "events_url": "https://api.github.com/users/roumposg/events{/privacy}", "received_events_url": "https://api.github.com/users/roumposg/received_events", "type": "User", "site_admin": false}, "body": "Please, indicate whether these are int or float tensors. For integer predictions, we prefer predictions_idx, as in precition_at_top_k.", "created_at": "2017-12-19T20:39:14Z", "updated_at": "2017-12-22T01:07:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/15443#discussion_r157868858", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15443", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/157868858"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/15443#discussion_r157868858"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15443"}}, "body_html": "<p>Please, indicate whether these are int or float tensors. For integer predictions, we prefer predictions_idx, as in precition_at_top_k.</p>", "body_text": "Please, indicate whether these are int or float tensors. For integer predictions, we prefer predictions_idx, as in precition_at_top_k."}