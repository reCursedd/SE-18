{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/157931127", "pull_request_review_id": 84656205, "id": 157931127, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzkzMTEyNw==", "diff_hunk": "@@ -3297,9 +3299,120 @@ def count(values,\n     return count_, update_op\n \n \n+def cohen_kappa(labels, predictions, num_classes, weights=None,\n+                metrics_collections=None, updates_collections=None, name=None):\n+  \"\"\"Calculates [Cohen's kappa](https://en.wikipedia.org/wiki/Cohen's_kappa)\n+  which is a statistic that measures inter-annotator agreement.\n+\n+  The `cohen_kappa` function creates three local variables: `total_po`,\n+  `total_pe_row`, and `total_pe_col`, that are used to compute the\n+  Cohen's kappa. This value is ultimately returned as `kappa`, an idempotent\n+  operation that is calculate by\n+\n+      pe = (pe_row * pe_col) / N\n+      k = (sum(po) - sum(pe)) / (N - sum(pe))\n+\n+  For estimation of the metric over a stream of data, the function creates an\n+  `update_op` operation that updates these variables and returns the\n+  `kappa`. `update_op` weights each prediction by the corresponding value in\n+  `weights`.\n+\n+  Class labels are expected to start at 0. E.g., if `num_classes`\n+  was three, then the possible labels would be [0, 1, 2].\n+\n+  If `weights` is `None`, weights default to 1. Use weights of 0 to mask values.\n+\n+  NOTE: Equivalent to `sklearn.metrics.cohen_kappa_score`, but the method\n+  doesn't support weighted matrix yet.\n+\n+  Args:\n+    labels: 1-D `Tensor` of the ground truth values.\n+    predictions: 1-D `Tensor` of the predicted values.\n+    num_classes: The possible number of labels.\n+    weights: Optional `Tensor` whose shape matches `predictions`.\n+    metrics_collections: An optional list of collections that `kappa` should\n+      be added to.\n+    updates_collections: An optional list of collections that `update_op` should\n+      be added to.\n+    name: An optional variable_scope name.\n+\n+  Returns:\n+    kappa: Scalar float `Tensor` representing the current Cohen's kappa.\n+    update_op: `Operation` that increments `total_po`, `total_pe_row` and\n+      `total_pe_col` variables appropriately and whose value matches `kappa`.\n+\n+  Raises:\n+    ValueError: If `num_classes` is less than 2, or `predictions` and `labels`\n+      have mismatched shapes, or if `weights` is not `None` and its shape\n+      doesn't match `predictions`, or if either `metrics_collections` or\n+      `updates_collections` are not a list or tuple.\n+    RuntimeError: If eager execution is enabled.\n+  \"\"\"\n+  if context.in_eager_mode():\n+    raise RuntimeError('tf.contrib.metrics.cohen_kappa is not supported'\n+                       'when eager execution is enabled.')\n+  if num_classes < 2:\n+    raise ValueError('`num_classes` must be greater than 1.'\n+                     'Found: {}'.format(num_classes))\n+  with variable_scope.variable_scope(name, 'cohen_kappa',\n+                                     (labels, predictions, weights)):\n+    # Convert 2-dim (num, 1) to 1-dim (num,)\n+    labels.get_shape().with_rank_at_most(2)\n+    labels = array_ops.squeeze(labels)\n+    predictions, labels, weights = metrics_impl._remove_squeezable_dimensions(  # pylint: disable=protected-access\n+        predictions=predictions, labels=labels, weights=weights)\n+    predictions.get_shape().assert_is_compatible_with(labels.get_shape())\n+\n+    stat_dtype = (dtypes.int64\n+                  if weights is None or weights.dtype.is_integer\n+                  else dtypes.float32)\n+    total_po = metrics_impl.metric_variable((num_classes,), stat_dtype, name='total_po')\n+    total_pe_row = metrics_impl.metric_variable((num_classes,), stat_dtype, name='total_pe_row')\n+    total_pe_col = metrics_impl.metric_variable((num_classes,), stat_dtype, name='total_pe_col')\n+\n+    # Table of the counts of agreement:\n+    counts_in_table = confusion_matrix.confusion_matrix(\n+      labels, predictions,\n+      num_classes=num_classes, weights=weights,\n+      dtype=stat_dtype, name=\"counts_in_table\")\n+\n+    po = array_ops.diag_part(counts_in_table, name='po')\n+    pe_row = math_ops.reduce_sum(counts_in_table, axis=0, name='pe_row')\n+    pe_col = math_ops.reduce_sum(counts_in_table, axis=1, name='pe_col')\n+    with ops.control_dependencies([po, pe_row, pe_col]):", "path": "tensorflow/contrib/metrics/python/ops/metric_ops.py", "position": null, "original_position": 97, "commit_id": "fda336a65f094557fed09ac3c8b67f201ae04617", "original_commit_id": "b0b16fd062dd6ad1e2ce2169d376c9120922d9b1", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "body": "Yes, I agree with you.", "created_at": "2017-12-20T03:36:16Z", "updated_at": "2017-12-22T01:07:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/15443#discussion_r157931127", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15443", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/157931127"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/15443#discussion_r157931127"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15443"}}, "body_html": "<p>Yes, I agree with you.</p>", "body_text": "Yes, I agree with you.", "in_reply_to_id": 157873483}