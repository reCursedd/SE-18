{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/157875015", "pull_request_review_id": 84579850, "id": 157875015, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg3NTAxNQ==", "diff_hunk": "@@ -6660,5 +6661,194 @@ def test2dWeightedValues_placeholders(self):\n       self.assertAlmostEqual(4.1, result.eval(), 5)\n \n \n+class CohenKappaTest(test.TestCase):\n+\n+  def _confuse_matrix_to_samples(self, confuse_matrix):\n+    x, y = confuse_matrix.shape\n+    pairs = []\n+    for label in range(x):\n+      for feature in range(y):\n+        pairs += [label, feature] * confuse_matrix[label, feature]\n+    pairs = np.array(pairs).reshape((-1, 2))\n+    return pairs[:, 0], pairs[:, 1]\n+\n+  def setUp(self):\n+    np.random.seed(1)\n+    ops.reset_default_graph()\n+\n+  def testVars(self):\n+    metrics.cohen_kappa(\n+        predictions=array_ops.ones((10, 1)),\n+        labels=array_ops.ones((10, 1)),\n+        num_classes=2)\n+    _assert_metric_variables(self, (\n+        'cohen_kappa/total_po:0',\n+        'cohen_kappa/total_pe_row:0',\n+        'cohen_kappa/total_pe_col:0',))\n+\n+  def testMetricsCollection(self):\n+    my_collection_name = '__metrics__'\n+    kappa, _ = metrics.cohen_kappa(\n+        predictions=array_ops.ones((10, 1)),\n+        labels=array_ops.ones((10, 1)),\n+        num_classes=2,\n+        metrics_collections=[my_collection_name])\n+    self.assertListEqual(ops.get_collection(my_collection_name), [kappa])\n+\n+  def testUpdatesCollection(self):\n+    my_collection_name = '__updates__'\n+    _, update_op = metrics.cohen_kappa(\n+        predictions=array_ops.ones((10, 1)),\n+        labels=array_ops.ones((10, 1)),\n+        num_classes=2,\n+        updates_collections=[my_collection_name])\n+    self.assertListEqual(ops.get_collection(my_collection_name), [update_op])\n+\n+  def testValueTensorIsIdempotent(self):\n+    predictions = random_ops.random_uniform(\n+      (10, 1), maxval=3, dtype=dtypes_lib.int64, seed=1)\n+    labels = random_ops.random_uniform(\n+      (10, 1), maxval=3, dtype=dtypes_lib.int64, seed=2)\n+    kappa, update_op = metrics.cohen_kappa(labels, predictions, 3)\n+\n+    with self.test_session() as sess:\n+      sess.run(variables.local_variables_initializer())\n+\n+      # Run several updates.\n+      for _ in range(10):\n+        sess.run(update_op)\n+\n+      # Then verify idempotency.\n+      initial_kappa = kappa.eval()\n+      for _ in range(10):\n+        self.assertAlmostEqual(initial_kappa, kappa.eval(), 5)\n+\n+  def testBasic(self):\n+    confuse_matrix = np.array([\n+      [9, 3, 1],\n+      [4, 8, 2],\n+      [2, 1, 6]])\n+    labels, predictions = self._confuse_matrix_to_samples(confuse_matrix)\n+\n+    dtypes = [dtypes_lib.int32, dtypes_lib.int64,\n+              dtypes_lib.float32, dtypes_lib.float64]\n+    shapes = [(len(labels,)),  # 1-dim\n+              (len(labels), 1)]  # 2-dim\n+    weights = [None, np.ones_like(labels)]\n+\n+    for dtype in dtypes:\n+      for shape in shapes:\n+        for weight in weights:\n+          with self.test_session() as sess:\n+            predictions_tensor = constant_op.constant(\n+                np.reshape(predictions, shape), dtype=dtype)\n+            labels_tensor = constant_op.constant(\n+                np.reshape(labels, shape), dtype=dtype)\n+            kappa, update_op = metrics.cohen_kappa(\n+                labels_tensor, predictions_tensor, 3, weights=weight)\n+\n+            sess.run(variables.local_variables_initializer())\n+            self.assertAlmostEqual(0.45, sess.run(update_op), 2)\n+            self.assertAlmostEqual(0.45, kappa.eval(), 2)\n+\n+  def testBasic2(self):\n+    labels = np.random.randint(0, 4, size=(100, 1))\n+    predictions = np.random.randint(0, 4, size=(100, 1))\n+    expect = sk_metrics.cohen_kappa_score(labels, predictions)\n+\n+    with self.test_session() as sess:\n+      predictions = constant_op.constant(predictions, dtype=dtypes_lib.float32)\n+      labels = constant_op.constant(labels)\n+      kappa, update_op = metrics.cohen_kappa(labels, predictions, 4)\n+\n+      sess.run(variables.local_variables_initializer())\n+      self.assertAlmostEqual(expect, sess.run(update_op), 5)\n+      self.assertAlmostEqual(expect, kappa.eval(), 5)\n+\n+  def testAllCorrect(self):\n+    inputs = np.random.randint(0, 4, size=(100, 1))\n+    expect = sk_metrics.cohen_kappa_score(inputs, inputs)", "path": "tensorflow/contrib/metrics/python/ops/metric_ops_test.py", "position": null, "original_position": 118, "commit_id": "fda336a65f094557fed09ac3c8b67f201ae04617", "original_commit_id": "b0b16fd062dd6ad1e2ce2169d376c9120922d9b1", "user": {"login": "roumposg", "id": 7244943, "node_id": "MDQ6VXNlcjcyNDQ5NDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7244943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roumposg", "html_url": "https://github.com/roumposg", "followers_url": "https://api.github.com/users/roumposg/followers", "following_url": "https://api.github.com/users/roumposg/following{/other_user}", "gists_url": "https://api.github.com/users/roumposg/gists{/gist_id}", "starred_url": "https://api.github.com/users/roumposg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roumposg/subscriptions", "organizations_url": "https://api.github.com/users/roumposg/orgs", "repos_url": "https://api.github.com/users/roumposg/repos", "events_url": "https://api.github.com/users/roumposg/events{/privacy}", "received_events_url": "https://api.github.com/users/roumposg/received_events", "type": "User", "site_admin": false}, "body": "Similarly, we want to avoid random. You can just use a small matrix for labels and predictions.", "created_at": "2017-12-19T21:06:53Z", "updated_at": "2017-12-22T01:07:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/15443#discussion_r157875015", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15443", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/157875015"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/15443#discussion_r157875015"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15443"}}, "body_html": "<p>Similarly, we want to avoid random. You can just use a small matrix for labels and predictions.</p>", "body_text": "Similarly, we want to avoid random. You can just use a small matrix for labels and predictions."}