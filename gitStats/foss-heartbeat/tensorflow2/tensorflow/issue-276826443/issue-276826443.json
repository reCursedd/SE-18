{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14888", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14888/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14888/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14888/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14888", "id": 276826443, "node_id": "MDU6SXNzdWUyNzY4MjY0NDM=", "number": 14888, "title": "Is it possible to extend normal operators like add/minus with convolution-like operating?", "user": {"login": "hiroki-kyoto", "id": 2834158, "node_id": "MDQ6VXNlcjI4MzQxNTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2834158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hiroki-kyoto", "html_url": "https://github.com/hiroki-kyoto", "followers_url": "https://api.github.com/users/hiroki-kyoto/followers", "following_url": "https://api.github.com/users/hiroki-kyoto/following{/other_user}", "gists_url": "https://api.github.com/users/hiroki-kyoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hiroki-kyoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hiroki-kyoto/subscriptions", "organizations_url": "https://api.github.com/users/hiroki-kyoto/orgs", "repos_url": "https://api.github.com/users/hiroki-kyoto/repos", "events_url": "https://api.github.com/users/hiroki-kyoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hiroki-kyoto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-26T13:53:35Z", "updated_at": "2017-11-28T17:24:20Z", "closed_at": "2017-11-28T17:24:20Z", "author_association": "NONE", "body_html": "<p>This is a feature request, and so far I haven't got any solution from tensorflow source code or websites like stackoverflow.<br>\nIt may be confusing to state the problem like my title, so, I am going to give it a demo:</p>\n<ol>\n<li>The input matrix A has shape of [5,5], and the operation matrix B has shape of [3,3];</li>\n<li>In convolution manner, tf.nn.conv2d(A, B, padding='VALID') will compute like this:<br>\ncreate a sliding window C with the same size of the filter matrix B on matrix A, and apply<br>\ncomputation DOT(C, B) for all possible position of C on A. All obtained product of B and C<br>\nform the matrix of convolution result,</li>\n<li>Here, if we enables the users to replace the DOT(C, B) with other element-wise operators<br>\nlike ADD(C, B) or user defined ones, it will enable tons of more creative layer designs to<br>\nexplore the power of AI.<br>\nA more flexiable interface will help users to avoid building his own operators by hacking the ops lib.<br>\nSorry for interruption. If this request get passed, I hope I can help implementing it.</li>\n</ol>", "body_text": "This is a feature request, and so far I haven't got any solution from tensorflow source code or websites like stackoverflow.\nIt may be confusing to state the problem like my title, so, I am going to give it a demo:\n\nThe input matrix A has shape of [5,5], and the operation matrix B has shape of [3,3];\nIn convolution manner, tf.nn.conv2d(A, B, padding='VALID') will compute like this:\ncreate a sliding window C with the same size of the filter matrix B on matrix A, and apply\ncomputation DOT(C, B) for all possible position of C on A. All obtained product of B and C\nform the matrix of convolution result,\nHere, if we enables the users to replace the DOT(C, B) with other element-wise operators\nlike ADD(C, B) or user defined ones, it will enable tons of more creative layer designs to\nexplore the power of AI.\nA more flexiable interface will help users to avoid building his own operators by hacking the ops lib.\nSorry for interruption. If this request get passed, I hope I can help implementing it.", "body": "This is a feature request, and so far I haven't got any solution from tensorflow source code or websites like stackoverflow. \r\nIt may be confusing to state the problem like my title, so, I am going to give it a demo:\r\n1. The input matrix A has shape of [5,5], and the operation matrix B has shape of [3,3];\r\n2. In convolution manner, tf.nn.conv2d(A, B, padding='VALID') will compute like this:\r\n     create a sliding window C with the same size of the filter matrix B on matrix A, and apply \r\n     computation DOT(C, B) for all possible position of C on A. All obtained product of B and C \r\n     form the matrix of convolution result,\r\n3. Here, if we enables the users to replace the DOT(C, B) with other element-wise operators \r\n   like ADD(C, B) or user defined ones, it will enable tons of more creative layer designs to \r\n   explore the power of AI. \r\n   A more flexiable interface will help users to avoid building his own operators by hacking the ops lib.\r\nSorry for interruption. If this request get passed, I hope I can help implementing it."}