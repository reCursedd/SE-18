{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/375837293", "html_url": "https://github.com/tensorflow/tensorflow/issues/17390#issuecomment-375837293", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17390", "id": 375837293, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTgzNzI5Mw==", "user": {"login": "saudet", "id": 3328023, "node_id": "MDQ6VXNlcjMzMjgwMjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3328023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saudet", "html_url": "https://github.com/saudet", "followers_url": "https://api.github.com/users/saudet/followers", "following_url": "https://api.github.com/users/saudet/following{/other_user}", "gists_url": "https://api.github.com/users/saudet/gists{/gist_id}", "starred_url": "https://api.github.com/users/saudet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saudet/subscriptions", "organizations_url": "https://api.github.com/users/saudet/orgs", "repos_url": "https://api.github.com/users/saudet/repos", "events_url": "https://api.github.com/users/saudet/events{/privacy}", "received_events_url": "https://api.github.com/users/saudet/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-24T01:38:05Z", "updated_at": "2018-03-24T01:38:05Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15925882\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Nicholas-Schaub\">@Nicholas-Schaub</a> IMO, we're far from getting everything in place, so please keep looking at things! What bothers me though is that I had mapped the C++ API of TensorFlow API way back in 2015, but apparently this was not a satisfactory solution for Google (and I am still looking for an explanation as to why that is) and their engineers (mainly <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a>) started writing JNI code manually and building a custom API on top of that. I can see this is still in progress, first to match the functionality of the C++ API for the ops, and then eventually of the Python API.</p>\n<p>So, anyway, all that to say, I would welcome any feedback about JavaCPP and what's missing. I mean, I do receive feedback from users saying that the C++ API isn't user-friendly, which is fair enough, but then why not build a user-friendly API on top of automatically generated wrappers like they've been doing for the Python API with SWIG? Why is there a need to write everything manually down to all the JNI functions?</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10109534\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/karllessard\">@karllessard</a> Yes, I've also been talking about that, and <a href=\"https://jyni.org/\" rel=\"nofollow\">https://jyni.org/</a> is another project which could use our support and that could provide that. They've got NumPy running, adding TensorFlow would probably not be that hard, if we can actually get 1 or 2 engineers working on that full time that is. Again, it won't provide a Java-friendly API out of the box, but it would take care of generating all the nasty boilerplate code, so why not use, if not that exactly, something like that, at least?</p>", "body_text": "@Nicholas-Schaub IMO, we're far from getting everything in place, so please keep looking at things! What bothers me though is that I had mapped the C++ API of TensorFlow API way back in 2015, but apparently this was not a satisfactory solution for Google (and I am still looking for an explanation as to why that is) and their engineers (mainly @asimshankar) started writing JNI code manually and building a custom API on top of that. I can see this is still in progress, first to match the functionality of the C++ API for the ops, and then eventually of the Python API.\nSo, anyway, all that to say, I would welcome any feedback about JavaCPP and what's missing. I mean, I do receive feedback from users saying that the C++ API isn't user-friendly, which is fair enough, but then why not build a user-friendly API on top of automatically generated wrappers like they've been doing for the Python API with SWIG? Why is there a need to write everything manually down to all the JNI functions?\n@karllessard Yes, I've also been talking about that, and https://jyni.org/ is another project which could use our support and that could provide that. They've got NumPy running, adding TensorFlow would probably not be that hard, if we can actually get 1 or 2 engineers working on that full time that is. Again, it won't provide a Java-friendly API out of the box, but it would take care of generating all the nasty boilerplate code, so why not use, if not that exactly, something like that, at least?", "body": "@Nicholas-Schaub IMO, we're far from getting everything in place, so please keep looking at things! What bothers me though is that I had mapped the C++ API of TensorFlow API way back in 2015, but apparently this was not a satisfactory solution for Google (and I am still looking for an explanation as to why that is) and their engineers (mainly @asimshankar) started writing JNI code manually and building a custom API on top of that. I can see this is still in progress, first to match the functionality of the C++ API for the ops, and then eventually of the Python API.\r\n\r\nSo, anyway, all that to say, I would welcome any feedback about JavaCPP and what's missing. I mean, I do receive feedback from users saying that the C++ API isn't user-friendly, which is fair enough, but then why not build a user-friendly API on top of automatically generated wrappers like they've been doing for the Python API with SWIG? Why is there a need to write everything manually down to all the JNI functions?\r\n\r\n@karllessard Yes, I've also been talking about that, and https://jyni.org/ is another project which could use our support and that could provide that. They've got NumPy running, adding TensorFlow would probably not be that hard, if we can actually get 1 or 2 engineers working on that full time that is. Again, it won't provide a Java-friendly API out of the box, but it would take care of generating all the nasty boilerplate code, so why not use, if not that exactly, something like that, at least?"}