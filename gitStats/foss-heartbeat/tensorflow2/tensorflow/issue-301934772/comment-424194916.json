{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424194916", "html_url": "https://github.com/tensorflow/tensorflow/issues/17390#issuecomment-424194916", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17390", "id": 424194916, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDE5NDkxNg==", "user": {"login": "saudet", "id": 3328023, "node_id": "MDQ6VXNlcjMzMjgwMjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3328023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saudet", "html_url": "https://github.com/saudet", "followers_url": "https://api.github.com/users/saudet/followers", "following_url": "https://api.github.com/users/saudet/following{/other_user}", "gists_url": "https://api.github.com/users/saudet/gists{/gist_id}", "starred_url": "https://api.github.com/users/saudet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saudet/subscriptions", "organizations_url": "https://api.github.com/users/saudet/orgs", "repos_url": "https://api.github.com/users/saudet/repos", "events_url": "https://api.github.com/users/saudet/events{/privacy}", "received_events_url": "https://api.github.com/users/saudet/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-25T03:20:40Z", "updated_at": "2018-09-25T03:20:40Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10109534\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/karllessard\">@karllessard</a> Great work, thanks for the contribution! The JavaCPP Presets for TensorFlow now include your Java ops wrappers, with builds on Maven for Android, Linux, Mac, and Windows, compiled against and bundled with MKL-DNN, CUDA, and cuDNN (that is, no need to install them, all binaries get pulled from Maven), along with a more complex JNI loader than the default one in TensorFlow that works well with multiple class loaders and Windows applications including JavaFX ones:<br>\n<a href=\"https://github.com/bytedeco/javacpp-presets/tree/master/tensorflow\">https://github.com/bytedeco/javacpp-presets/tree/master/tensorflow</a></p>\n<p>They seem to work fine, but let me know if you find any issues or would like to change something. With a bit more work, I'm sure we could get all this to interoperate with the rest of the C/C++ APIs that come with the presets. That would be nice, given that at that level, JavaCPP can share memory with zero-copy and manage with scopes the resources used by multiple APIs, not only from TensorFlow but from other native libraries as well, such as OpenCV, FFmpeg, or Tesseract:<br>\n<a href=\"http://bytedeco.org/news/2018/07/17/bytedeco-as-distribution/\" rel=\"nofollow\">http://bytedeco.org/news/2018/07/17/bytedeco-as-distribution/</a></p>", "body_text": "@karllessard Great work, thanks for the contribution! The JavaCPP Presets for TensorFlow now include your Java ops wrappers, with builds on Maven for Android, Linux, Mac, and Windows, compiled against and bundled with MKL-DNN, CUDA, and cuDNN (that is, no need to install them, all binaries get pulled from Maven), along with a more complex JNI loader than the default one in TensorFlow that works well with multiple class loaders and Windows applications including JavaFX ones:\nhttps://github.com/bytedeco/javacpp-presets/tree/master/tensorflow\nThey seem to work fine, but let me know if you find any issues or would like to change something. With a bit more work, I'm sure we could get all this to interoperate with the rest of the C/C++ APIs that come with the presets. That would be nice, given that at that level, JavaCPP can share memory with zero-copy and manage with scopes the resources used by multiple APIs, not only from TensorFlow but from other native libraries as well, such as OpenCV, FFmpeg, or Tesseract:\nhttp://bytedeco.org/news/2018/07/17/bytedeco-as-distribution/", "body": "@karllessard Great work, thanks for the contribution! The JavaCPP Presets for TensorFlow now include your Java ops wrappers, with builds on Maven for Android, Linux, Mac, and Windows, compiled against and bundled with MKL-DNN, CUDA, and cuDNN (that is, no need to install them, all binaries get pulled from Maven), along with a more complex JNI loader than the default one in TensorFlow that works well with multiple class loaders and Windows applications including JavaFX ones:\r\n    https://github.com/bytedeco/javacpp-presets/tree/master/tensorflow\r\n\r\nThey seem to work fine, but let me know if you find any issues or would like to change something. With a bit more work, I'm sure we could get all this to interoperate with the rest of the C/C++ APIs that come with the presets. That would be nice, given that at that level, JavaCPP can share memory with zero-copy and manage with scopes the resources used by multiple APIs, not only from TensorFlow but from other native libraries as well, such as OpenCV, FFmpeg, or Tesseract:\r\n    http://bytedeco.org/news/2018/07/17/bytedeco-as-distribution/"}