{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/372087318", "html_url": "https://github.com/tensorflow/tensorflow/issues/17390#issuecomment-372087318", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17390", "id": 372087318, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjA4NzMxOA==", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-11T03:52:12Z", "updated_at": "2018-03-11T03:56:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Just to add something about this: other than the ubiquitous differences between the two languages, what is really interesting about having a Java graph building API compared to Python is the way it enforces tensor type checking at compile time (by using generics). So you know exactly what datatype you are dealing with at the output of an operation and what you can possibly do with it. So I think current efforts are not done in vain... or at least I hope ;)</p>\n<p>Implementing the core ops in Java is a big step forward for having a mature client library and yes <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15925882\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Nicholas-Schaub\">@Nicholas-Schaub</a>, it will be possible to do backpropagation using the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/training_ops.cc\">training ops</a>, for example. But it will not be as easy as in Python until we figure out how to extract and expose the logic implemented in its client library, like its <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/gradient_descent.py\">gradient descent optimizer</a>.</p>", "body_text": "Just to add something about this: other than the ubiquitous differences between the two languages, what is really interesting about having a Java graph building API compared to Python is the way it enforces tensor type checking at compile time (by using generics). So you know exactly what datatype you are dealing with at the output of an operation and what you can possibly do with it. So I think current efforts are not done in vain... or at least I hope ;)\nImplementing the core ops in Java is a big step forward for having a mature client library and yes @Nicholas-Schaub, it will be possible to do backpropagation using the training ops, for example. But it will not be as easy as in Python until we figure out how to extract and expose the logic implemented in its client library, like its gradient descent optimizer.", "body": "Just to add something about this: other than the ubiquitous differences between the two languages, what is really interesting about having a Java graph building API compared to Python is the way it enforces tensor type checking at compile time (by using generics). So you know exactly what datatype you are dealing with at the output of an operation and what you can possibly do with it. So I think current efforts are not done in vain... or at least I hope ;)\r\n\r\nImplementing the core ops in Java is a big step forward for having a mature client library and yes @Nicholas-Schaub, it will be possible to do backpropagation using the [training ops](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/training_ops.cc), for example. But it will not be as easy as in Python until we figure out how to extract and expose the logic implemented in its client library, like its [gradient descent optimizer](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/gradient_descent.py)."}