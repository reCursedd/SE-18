{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/410893821", "html_url": "https://github.com/tensorflow/tensorflow/issues/21381#issuecomment-410893821", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21381", "id": 410893821, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDg5MzgyMQ==", "user": {"login": "sabhiram", "id": 2693144, "node_id": "MDQ6VXNlcjI2OTMxNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2693144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sabhiram", "html_url": "https://github.com/sabhiram", "followers_url": "https://api.github.com/users/sabhiram/followers", "following_url": "https://api.github.com/users/sabhiram/following{/other_user}", "gists_url": "https://api.github.com/users/sabhiram/gists{/gist_id}", "starred_url": "https://api.github.com/users/sabhiram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sabhiram/subscriptions", "organizations_url": "https://api.github.com/users/sabhiram/orgs", "repos_url": "https://api.github.com/users/sabhiram/repos", "events_url": "https://api.github.com/users/sabhiram/events{/privacy}", "received_events_url": "https://api.github.com/users/sabhiram/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-07T00:24:55Z", "updated_at": "2018-08-07T00:24:55Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6349758\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/draplater\">@draplater</a> If you want to pass non-tensor arguments to a <code>py_func</code> you can do so quite easily by wrapping your <code>py_func</code> definition in a wrapper where the desired variable is within scope.</p>\n<p>For example something like this will work:</p>\n<pre><code>def mk_some_func(extra_info):\n    def some_func(tensor0, tensor1, ...):\n        # Use `extra_info` as a py object here\n        return np.int32(0)\n    return some_func\n</code></pre>\n<p>Then when you want to create your py_func:</p>\n<pre><code>op = tf.py_func(mk_some_func(extra_info), [data_pl, info_pl], tf.int32)\n</code></pre>\n<p>Remember that if <code>extra_info</code> is a graph-time tensor, this method will not work. Also if the info you wish to pass is redefined with each session, you will need to get cute with how you modify the <code>extra_info</code> dictionary (etc). However if the data will not change for the given session, the above method should work out.</p>", "body_text": "@draplater If you want to pass non-tensor arguments to a py_func you can do so quite easily by wrapping your py_func definition in a wrapper where the desired variable is within scope.\nFor example something like this will work:\ndef mk_some_func(extra_info):\n    def some_func(tensor0, tensor1, ...):\n        # Use `extra_info` as a py object here\n        return np.int32(0)\n    return some_func\n\nThen when you want to create your py_func:\nop = tf.py_func(mk_some_func(extra_info), [data_pl, info_pl], tf.int32)\n\nRemember that if extra_info is a graph-time tensor, this method will not work. Also if the info you wish to pass is redefined with each session, you will need to get cute with how you modify the extra_info dictionary (etc). However if the data will not change for the given session, the above method should work out.", "body": "@draplater If you want to pass non-tensor arguments to a `py_func` you can do so quite easily by wrapping your `py_func` definition in a wrapper where the desired variable is within scope.\r\n\r\nFor example something like this will work:\r\n\r\n```\r\ndef mk_some_func(extra_info):\r\n    def some_func(tensor0, tensor1, ...):\r\n        # Use `extra_info` as a py object here\r\n        return np.int32(0)\r\n    return some_func\r\n```\r\n\r\nThen when you want to create your py_func:\r\n```\r\nop = tf.py_func(mk_some_func(extra_info), [data_pl, info_pl], tf.int32)\r\n```\r\n\r\nRemember that if `extra_info` is a graph-time tensor, this method will not work. Also if the info you wish to pass is redefined with each session, you will need to get cute with how you modify the `extra_info` dictionary (etc). However if the data will not change for the given session, the above method should work out."}