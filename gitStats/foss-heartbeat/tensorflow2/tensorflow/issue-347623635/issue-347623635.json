{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21381", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21381/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21381/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21381/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21381", "id": 347623635, "node_id": "MDU6SXNzdWUzNDc2MjM2MzU=", "number": 21381, "title": "Is it possible to pass a PyObject into tf.py_func?", "user": {"login": "draplater", "id": 6349758, "node_id": "MDQ6VXNlcjYzNDk3NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6349758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/draplater", "html_url": "https://github.com/draplater", "followers_url": "https://api.github.com/users/draplater/followers", "following_url": "https://api.github.com/users/draplater/following{/other_user}", "gists_url": "https://api.github.com/users/draplater/gists{/gist_id}", "starred_url": "https://api.github.com/users/draplater/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/draplater/subscriptions", "organizations_url": "https://api.github.com/users/draplater/orgs", "repos_url": "https://api.github.com/users/draplater/repos", "events_url": "https://api.github.com/users/draplater/events{/privacy}", "received_events_url": "https://api.github.com/users/draplater/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-08-04T14:37:19Z", "updated_at": "2018-08-07T23:37:24Z", "closed_at": "2018-08-07T23:37:24Z", "author_association": "NONE", "body_html": "<p>Some times we need to use some information inside tf.pyfunc, and its unnecessary to convert these information into basic types that can feed into tensorflow.</p>\n<p>For example, I don't know how to pass a pyObject into  tf.py_func, so I must write like this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> pickle\n<span class=\"pl-k\">from</span> typing <span class=\"pl-k\">import</span> List\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\ndata: List[<span class=\"pl-c1\">int</span>] <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]\nextra_info: List[<span class=\"pl-c1\">object</span>] <span class=\"pl-k\">=</span> [{<span class=\"pl-c1\">1</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Some python object that cannot be easily converted into basic types<span class=\"pl-pds\">\"</span></span>},\n                            {<span class=\"pl-c1\">2</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Some python object that cannot be easily converted into basic types<span class=\"pl-pds\">\"</span></span>},\n                            {<span class=\"pl-c1\">3</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Some python object that cannot be easily converted into basic types<span class=\"pl-pds\">\"</span></span>}\n                            ]\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">some_func</span>(<span class=\"pl-smi\">one_data</span>: <span class=\"pl-c1\">int</span>, <span class=\"pl-smi\">one_info_serialized</span>: <span class=\"pl-c1\">str</span>):\n    one_extra_info <span class=\"pl-k\">=</span> pickle.loads(one_info_serialized)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> just imagine I will use the object</span>\n    <span class=\"pl-c1\">print</span>(one_extra_info)\n    <span class=\"pl-k\">return</span> np.int32(<span class=\"pl-c1\">0</span>)\n\n\ndata_pl <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>())\ninfo_pl <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.string)\nop <span class=\"pl-k\">=</span> tf.py_func(some_func, [data_pl, info_pl], tf.int32)\nsession <span class=\"pl-k\">=</span> tf.Session()\n\n<span class=\"pl-k\">for</span> one_data, one_info <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(data, extra_info):\n    session.run(op, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{data_pl: one_data,\n                               <span class=\"pl-c\"><span class=\"pl-c\">#</span> How can I pass this PyObject directly?</span>\n                               info_pl: pickle.dumps(one_info)})</pre></div>", "body_text": "Some times we need to use some information inside tf.pyfunc, and its unnecessary to convert these information into basic types that can feed into tensorflow.\nFor example, I don't know how to pass a pyObject into  tf.py_func, so I must write like this:\nimport pickle\nfrom typing import List\nimport tensorflow as tf\nimport numpy as np\n\ndata: List[int] = [1, 2, 3]\nextra_info: List[object] = [{1: \"Some python object that cannot be easily converted into basic types\"},\n                            {2: \"Some python object that cannot be easily converted into basic types\"},\n                            {3: \"Some python object that cannot be easily converted into basic types\"}\n                            ]\n\n\ndef some_func(one_data: int, one_info_serialized: str):\n    one_extra_info = pickle.loads(one_info_serialized)\n    # just imagine I will use the object\n    print(one_extra_info)\n    return np.int32(0)\n\n\ndata_pl = tf.placeholder(dtype=tf.int32, shape=())\ninfo_pl = tf.placeholder(dtype=tf.string)\nop = tf.py_func(some_func, [data_pl, info_pl], tf.int32)\nsession = tf.Session()\n\nfor one_data, one_info in zip(data, extra_info):\n    session.run(op, feed_dict={data_pl: one_data,\n                               # How can I pass this PyObject directly?\n                               info_pl: pickle.dumps(one_info)})", "body": "Some times we need to use some information inside tf.pyfunc, and its unnecessary to convert these information into basic types that can feed into tensorflow.\r\n\r\nFor example, I don't know how to pass a pyObject into  tf.py_func, so I must write like this:\r\n```python\r\nimport pickle\r\nfrom typing import List\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndata: List[int] = [1, 2, 3]\r\nextra_info: List[object] = [{1: \"Some python object that cannot be easily converted into basic types\"},\r\n                            {2: \"Some python object that cannot be easily converted into basic types\"},\r\n                            {3: \"Some python object that cannot be easily converted into basic types\"}\r\n                            ]\r\n\r\n\r\ndef some_func(one_data: int, one_info_serialized: str):\r\n    one_extra_info = pickle.loads(one_info_serialized)\r\n    # just imagine I will use the object\r\n    print(one_extra_info)\r\n    return np.int32(0)\r\n\r\n\r\ndata_pl = tf.placeholder(dtype=tf.int32, shape=())\r\ninfo_pl = tf.placeholder(dtype=tf.string)\r\nop = tf.py_func(some_func, [data_pl, info_pl], tf.int32)\r\nsession = tf.Session()\r\n\r\nfor one_data, one_info in zip(data, extra_info):\r\n    session.run(op, feed_dict={data_pl: one_data,\r\n                               # How can I pass this PyObject directly?\r\n                               info_pl: pickle.dumps(one_info)})\r\n```"}