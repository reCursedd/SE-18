{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20571", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20571/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20571/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20571/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20571", "id": 338633116, "node_id": "MDU6SXNzdWUzMzg2MzMxMTY=", "number": 20571, "title": "Cannot query shape of opaque params in CudnnGRU", "user": {"login": "danielwatson6", "id": 3270063, "node_id": "MDQ6VXNlcjMyNzAwNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3270063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielwatson6", "html_url": "https://github.com/danielwatson6", "followers_url": "https://api.github.com/users/danielwatson6/followers", "following_url": "https://api.github.com/users/danielwatson6/following{/other_user}", "gists_url": "https://api.github.com/users/danielwatson6/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielwatson6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielwatson6/subscriptions", "organizations_url": "https://api.github.com/users/danielwatson6/orgs", "repos_url": "https://api.github.com/users/danielwatson6/repos", "events_url": "https://api.github.com/users/danielwatson6/events{/privacy}", "received_events_url": "https://api.github.com/users/danielwatson6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-07-05T15:55:21Z", "updated_at": "2018-08-08T08:33:18Z", "closed_at": "2018-08-08T08:33:17Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Yes</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.9.0-rc0</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.14.1</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 5.4.0</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0/7.0</li>\n<li><strong>GPU model and memory</strong>: NVIDIA GTX 1080 Ti, 11176MiB</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When trying to compute the number of parameters in <code>tf.contrib.cudnn_rnn.CudnnGRU</code>, TensorFlow will crash.</p>\n<p>The reason to do this is to share the weights between <code>CudnnGRU</code> and <code>CudnnCompatibleGRUCell</code>. There is no documentation with examples on how to do this (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"335344594\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/20273\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/20273/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/20273\">#20273</a> ), but there is a high-level description from the tf 1.2 docs:</p>\n<pre><code>Cudnn implementation of the GRU model. Cudnn RNN has an opaque parameter buffer that can be used for inference and training. But it is possible that the layout of the parameter buffers changes between generations. So it is highly recommended to use RNNParamsSaveable to save and restore weights and biases in a canonical format.\n\nThis is a typical use case:\n  * The user creates a CudnnRNN model.\n  * The user query that parameter buffer size.\n  * The user creates a variable of that size that serves as the parameter buffers.\n  * The user either initialize the parameter buffer, or load the canonical weights into the parameter buffer.\n  * The user calls the model with the parameter buffer for inference, or training.\n  * If training, the user creates a Saver object.\n  * If training, the user creates a RNNParamsSaveable object from the parameter buffer for it to be later saved in the canonical format. When creating a RNNParamsSaveable object, a name could be provided, which is useful in distinguishing the names of multiple RNNParamsSaveable objects (e.g. for an encoder-decoder model).\n  * Once a while, the user saves the parameter buffer into model checkpoints with Saver.save().\n  * When restoring, the user creates a RNNParamsSaveable object and uses Saver.restore() to restore the paramter buffer from the canonical format to a user-defined format, as well as to restore other savable objects in the checkpoint file.\n</code></pre>\n<p>So the second step in this process fails.</p>\n<p>Also to consider: <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.9/tensorflow/contrib/cudnn_rnn/python/kernel_tests/cudnn_rnn_ops_test.py\">the test file has deprecated code and will fail</a>, using <code>cuddn_gru_instance.params_size()</code> rather than <code>.count_params()</code>, which is no longer defined. These test cases are the only resource available for users attempting to find out how undocumented features should be used, but they're outdated.</p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\nrnn = tf.contrib.cudnn_rnn.CudnnGRU(1, 7, direction='unidirectional')\nrnn.build([2,3,5])\nrnn.count_params()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/home/danielwatson/.pyenv/versions/3.6.5/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1298, in count_params\n    weight_shapes = [w.get_shape().as_list() for w in self.weights]\n  File \"/home/danielwatson/.pyenv/versions/3.6.5/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1298, in &lt;listcomp&gt;\n    weight_shapes = [w.get_shape().as_list() for w in self.weights]\n  File \"/home/danielwatson/.pyenv/versions/3.6.5/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 903, in as_list\n    raise ValueError(\"as_list() is not defined on an unknown TensorShape.\")\nValueError: as_list() is not defined on an unknown TensorShape.\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Yes\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.9.0-rc0\nPython version: 3.6.5\nBazel version (if compiling from source): 0.14.1\nGCC/Compiler version (if compiling from source): 5.4.0\nCUDA/cuDNN version: 9.0/7.0\nGPU model and memory: NVIDIA GTX 1080 Ti, 11176MiB\n\nDescribe the problem\nWhen trying to compute the number of parameters in tf.contrib.cudnn_rnn.CudnnGRU, TensorFlow will crash.\nThe reason to do this is to share the weights between CudnnGRU and CudnnCompatibleGRUCell. There is no documentation with examples on how to do this (see #20273 ), but there is a high-level description from the tf 1.2 docs:\nCudnn implementation of the GRU model. Cudnn RNN has an opaque parameter buffer that can be used for inference and training. But it is possible that the layout of the parameter buffers changes between generations. So it is highly recommended to use RNNParamsSaveable to save and restore weights and biases in a canonical format.\n\nThis is a typical use case:\n  * The user creates a CudnnRNN model.\n  * The user query that parameter buffer size.\n  * The user creates a variable of that size that serves as the parameter buffers.\n  * The user either initialize the parameter buffer, or load the canonical weights into the parameter buffer.\n  * The user calls the model with the parameter buffer for inference, or training.\n  * If training, the user creates a Saver object.\n  * If training, the user creates a RNNParamsSaveable object from the parameter buffer for it to be later saved in the canonical format. When creating a RNNParamsSaveable object, a name could be provided, which is useful in distinguishing the names of multiple RNNParamsSaveable objects (e.g. for an encoder-decoder model).\n  * Once a while, the user saves the parameter buffer into model checkpoints with Saver.save().\n  * When restoring, the user creates a RNNParamsSaveable object and uses Saver.restore() to restore the paramter buffer from the canonical format to a user-defined format, as well as to restore other savable objects in the checkpoint file.\n\nSo the second step in this process fails.\nAlso to consider: the test file has deprecated code and will fail, using cuddn_gru_instance.params_size() rather than .count_params(), which is no longer defined. These test cases are the only resource available for users attempting to find out how undocumented features should be used, but they're outdated.\nSource code / logs\nimport tensorflow as tf\nrnn = tf.contrib.cudnn_rnn.CudnnGRU(1, 7, direction='unidirectional')\nrnn.build([2,3,5])\nrnn.count_params()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/danielwatson/.pyenv/versions/3.6.5/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1298, in count_params\n    weight_shapes = [w.get_shape().as_list() for w in self.weights]\n  File \"/home/danielwatson/.pyenv/versions/3.6.5/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1298, in <listcomp>\n    weight_shapes = [w.get_shape().as_list() for w in self.weights]\n  File \"/home/danielwatson/.pyenv/versions/3.6.5/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 903, in as_list\n    raise ValueError(\"as_list() is not defined on an unknown TensorShape.\")\nValueError: as_list() is not defined on an unknown TensorShape.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Yes\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 1.9.0-rc0\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: 0.14.1\r\n- **GCC/Compiler version (if compiling from source)**: 5.4.0\r\n- **CUDA/cuDNN version**: 9.0/7.0\r\n- **GPU model and memory**: NVIDIA GTX 1080 Ti, 11176MiB\r\n\r\n### Describe the problem\r\nWhen trying to compute the number of parameters in `tf.contrib.cudnn_rnn.CudnnGRU`, TensorFlow will crash.\r\n\r\nThe reason to do this is to share the weights between `CudnnGRU` and `CudnnCompatibleGRUCell`. There is no documentation with examples on how to do this (see #20273 ), but there is a high-level description from the tf 1.2 docs:\r\n```\r\nCudnn implementation of the GRU model. Cudnn RNN has an opaque parameter buffer that can be used for inference and training. But it is possible that the layout of the parameter buffers changes between generations. So it is highly recommended to use RNNParamsSaveable to save and restore weights and biases in a canonical format.\r\n\r\nThis is a typical use case:\r\n  * The user creates a CudnnRNN model.\r\n  * The user query that parameter buffer size.\r\n  * The user creates a variable of that size that serves as the parameter buffers.\r\n  * The user either initialize the parameter buffer, or load the canonical weights into the parameter buffer.\r\n  * The user calls the model with the parameter buffer for inference, or training.\r\n  * If training, the user creates a Saver object.\r\n  * If training, the user creates a RNNParamsSaveable object from the parameter buffer for it to be later saved in the canonical format. When creating a RNNParamsSaveable object, a name could be provided, which is useful in distinguishing the names of multiple RNNParamsSaveable objects (e.g. for an encoder-decoder model).\r\n  * Once a while, the user saves the parameter buffer into model checkpoints with Saver.save().\r\n  * When restoring, the user creates a RNNParamsSaveable object and uses Saver.restore() to restore the paramter buffer from the canonical format to a user-defined format, as well as to restore other savable objects in the checkpoint file.\r\n```\r\nSo the second step in this process fails.\r\n\r\nAlso to consider: [the test file has deprecated code and will fail](https://github.com/tensorflow/tensorflow/blob/r1.9/tensorflow/contrib/cudnn_rnn/python/kernel_tests/cudnn_rnn_ops_test.py), using `cuddn_gru_instance.params_size()` rather than `.count_params()`, which is no longer defined. These test cases are the only resource available for users attempting to find out how undocumented features should be used, but they're outdated.\r\n\r\n### Source code / logs\r\n```\r\nimport tensorflow as tf\r\nrnn = tf.contrib.cudnn_rnn.CudnnGRU(1, 7, direction='unidirectional')\r\nrnn.build([2,3,5])\r\nrnn.count_params()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/danielwatson/.pyenv/versions/3.6.5/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1298, in count_params\r\n    weight_shapes = [w.get_shape().as_list() for w in self.weights]\r\n  File \"/home/danielwatson/.pyenv/versions/3.6.5/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 1298, in <listcomp>\r\n    weight_shapes = [w.get_shape().as_list() for w in self.weights]\r\n  File \"/home/danielwatson/.pyenv/versions/3.6.5/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 903, in as_list\r\n    raise ValueError(\"as_list() is not defined on an unknown TensorShape.\")\r\nValueError: as_list() is not defined on an unknown TensorShape.\r\n```\r\n"}