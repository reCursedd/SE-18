{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/212531652", "pull_request_review_id": 149186474, "id": 212531652, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjUzMTY1Mg==", "diff_hunk": "@@ -192,6 +196,31 @@ def _calculate_num_features(sorted_feature_columns):\n   return num_features\n \n \n+def _generate_feature_name_mapping(sorted_feature_columns):", "path": "tensorflow/python/estimator/canned/boosted_trees.py", "position": 22, "original_position": 22, "commit_id": "046c74c8e7c68aaa726977dd6e8a2523f854f9cc", "original_commit_id": "4979d7314dd1f1788751781b2dfbfb9e47c8e20e", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "body": "Yes, it's a problem if we forget to update this function. \r\n\r\n1. I'm afraid that `_calculate_num_feature` will meet the same problem: if we add new subclass, and we forget to update it. Because we use external function to calculate num_feature and featuer_name, it's easy to forget it when adding new subclass. Perhaps we'd better to make them become the property of FeatureColumn base class, and force every subclass to handle the details. I think the question has beyond the scope of this PR.\r\n\r\n2. I think unit tests can only assure old behaviors unchanged. Say, we have supported numeric_column class here, and we use tests to track its behavior. If we add new class, multiple dimensional numeric_column, but we forget to add the corresponding tests. I'm afraid that unit test can do nothing for this case.", "created_at": "2018-08-24T06:26:12Z", "updated_at": "2018-09-19T22:45:29Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21509#discussion_r212531652", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21509", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/212531652"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21509#discussion_r212531652"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21509"}}, "body_html": "<p>Yes, it's a problem if we forget to update this function.</p>\n<ol>\n<li>\n<p>I'm afraid that <code>_calculate_num_feature</code> will meet the same problem: if we add new subclass, and we forget to update it. Because we use external function to calculate num_feature and featuer_name, it's easy to forget it when adding new subclass. Perhaps we'd better to make them become the property of FeatureColumn base class, and force every subclass to handle the details. I think the question has beyond the scope of this PR.</p>\n</li>\n<li>\n<p>I think unit tests can only assure old behaviors unchanged. Say, we have supported numeric_column class here, and we use tests to track its behavior. If we add new class, multiple dimensional numeric_column, but we forget to add the corresponding tests. I'm afraid that unit test can do nothing for this case.</p>\n</li>\n</ol>", "body_text": "Yes, it's a problem if we forget to update this function.\n\n\nI'm afraid that _calculate_num_feature will meet the same problem: if we add new subclass, and we forget to update it. Because we use external function to calculate num_feature and featuer_name, it's easy to forget it when adding new subclass. Perhaps we'd better to make them become the property of FeatureColumn base class, and force every subclass to handle the details. I think the question has beyond the scope of this PR.\n\n\nI think unit tests can only assure old behaviors unchanged. Say, we have supported numeric_column class here, and we use tests to track its behavior. If we add new class, multiple dimensional numeric_column, but we forget to add the corresponding tests. I'm afraid that unit test can do nothing for this case.", "in_reply_to_id": 212097047}