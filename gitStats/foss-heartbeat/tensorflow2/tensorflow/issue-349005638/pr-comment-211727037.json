{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/211727037", "pull_request_review_id": 148204058, "id": 211727037, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTcyNzAzNw==", "diff_hunk": "@@ -910,8 +939,103 @@ def _create_regression_head(label_dimension, weight_column=None):\n   # pylint: enable=protected-access\n \n \n+def _compute_feature_importances_per_tree(tree, num_features):\n+  \"\"\"Computes the importance of each feature in the tree.\"\"\"\n+  importances = np.zeros(num_features)\n+\n+  for node in tree.nodes:\n+    node_type = node.WhichOneof('node')\n+    if node_type == 'bucketized_split':\n+      feature_id = node.bucketized_split.feature_id\n+      importances[feature_id] += node.metadata.gain\n+    elif node_type == 'leaf':\n+      assert node.metadata.gain == 0\n+    else:\n+      raise ValueError('Unexpected split type %s', node_type)\n+\n+  return importances\n+\n+\n+def _compute_feature_importances(tree_ensemble, num_features, normalize):\n+  \"\"\"Compute the feature importances.\n+\n+  The higher the value, the more important the feature.\n+\n+  Args:\n+    tree_ensemble: a trained tree ensemble, instance of proto\n+      boosted_trees.TreeEnsemble.\n+    num_features: The total number of feature ids.\n+    normalize: If True, normalize the feature importances.\n+\n+  Returns:\n+    sorted_feature_idx: A list of feature_id which is sorted\n+      by its feature importance.\n+    feature_importances: A list of corresponding feature importances.\n+\n+  Raises:\n+    AssertionError: If feature importances contain negative value.\n+      Or if normalize = True and normalization is not possible\n+      (e.g. ensemble is empty or trees contain only a root node).\n+  \"\"\"\n+  tree_importances = [_compute_feature_importances_per_tree(tree, num_features)\n+                      for tree in tree_ensemble.trees]\n+  tree_importances = np.array(tree_importances)\n+  tree_weights = np.array(tree_ensemble.tree_weights).reshape(-1, 1)\n+  feature_importances = np.sum(tree_importances * tree_weights, axis=0)\n+  assert np.all(feature_importances >= 0), ('feature_importances '\n+                                            'must be non-negative.')\n+  if normalize:\n+    normalizer = np.sum(feature_importances)\n+    assert normalizer > 0, 'Trees are all empty or contains only a root node.'\n+    feature_importances /= normalizer\n+\n+  sorted_feature_idx = np.argsort(feature_importances)[::-1]\n+  return sorted_feature_idx, feature_importances[sorted_feature_idx]\n+\n+\n+class _BoostedTrees(estimator.Estimator):\n+  \"\"\"Base class for boosted trees estimators.\"\"\"\n+\n+  def __init__(self, model_fn, model_dir, config, feature_columns):\n+    super(_BoostedTrees, self).__init__(\n+        model_fn=model_fn, model_dir=model_dir, config=config)\n+\n+    self._sorted_feature_columns = sorted(feature_columns, key=lambda tc: tc.name)\n+    self._num_features = _calculate_num_features(self._sorted_feature_columns)\n+\n+  def experimental_feature_importances(self, normalize=False):\n+    \"\"\"Computes gain-based feature importances.\n+\n+    The higher the value, the more important the corresponding feature.\n+\n+    Args:\n+      normalize: If True, normalize the feature importances.\n+\n+    Returns:\n+      sorted_feature_names: 1-D array of feature name which is sorted\n+        by its feature importance.\n+      feature_importances: 1-D array of the corresponding feature importance.\n+\n+    Raises:\n+      ValueError: Empty ensemble.\n+    \"\"\"", "path": "tensorflow/python/estimator/canned/boosted_trees.py", "position": null, "original_position": 133, "commit_id": "046c74c8e7c68aaa726977dd6e8a2523f854f9cc", "original_commit_id": "73c8cbb413029cf3e540e99b883ae89f4b08fc11", "user": {"login": "nataliaponomareva", "id": 4313109, "node_id": "MDQ6VXNlcjQzMTMxMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4313109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nataliaponomareva", "html_url": "https://github.com/nataliaponomareva", "followers_url": "https://api.github.com/users/nataliaponomareva/followers", "following_url": "https://api.github.com/users/nataliaponomareva/following{/other_user}", "gists_url": "https://api.github.com/users/nataliaponomareva/gists{/gist_id}", "starred_url": "https://api.github.com/users/nataliaponomareva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nataliaponomareva/subscriptions", "organizations_url": "https://api.github.com/users/nataliaponomareva/orgs", "repos_url": "https://api.github.com/users/nataliaponomareva/repos", "events_url": "https://api.github.com/users/nataliaponomareva/events{/privacy}", "received_events_url": "https://api.github.com/users/nataliaponomareva/received_events", "type": "User", "site_admin": false}, "body": "When attempting to normalize on an empty ensemble or an ensemble of trees which have no splits?", "created_at": "2018-08-21T19:17:34Z", "updated_at": "2018-09-19T22:45:29Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21509#discussion_r211727037", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21509", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/211727037"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21509#discussion_r211727037"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21509"}}, "body_html": "<p>When attempting to normalize on an empty ensemble or an ensemble of trees which have no splits?</p>", "body_text": "When attempting to normalize on an empty ensemble or an ensemble of trees which have no splits?"}