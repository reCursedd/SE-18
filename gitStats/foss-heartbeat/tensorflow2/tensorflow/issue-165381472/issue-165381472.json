{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3299", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3299/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3299/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3299/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3299", "id": 165381472, "node_id": "MDU6SXNzdWUxNjUzODE0NzI=", "number": 3299, "title": "Frequent dynamic memory allocation in tensorflow/core/kernels/conv_ops.cc?", "user": {"login": "changyun79", "id": 19846701, "node_id": "MDQ6VXNlcjE5ODQ2NzAx", "avatar_url": "https://avatars3.githubusercontent.com/u/19846701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changyun79", "html_url": "https://github.com/changyun79", "followers_url": "https://api.github.com/users/changyun79/followers", "following_url": "https://api.github.com/users/changyun79/following{/other_user}", "gists_url": "https://api.github.com/users/changyun79/gists{/gist_id}", "starred_url": "https://api.github.com/users/changyun79/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changyun79/subscriptions", "organizations_url": "https://api.github.com/users/changyun79/orgs", "repos_url": "https://api.github.com/users/changyun79/repos", "events_url": "https://api.github.com/users/changyun79/events{/privacy}", "received_events_url": "https://api.github.com/users/changyun79/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-07-13T17:50:53Z", "updated_at": "2016-07-13T21:36:18Z", "closed_at": "2016-07-13T21:36:18Z", "author_association": "NONE", "body_html": "<p>I am looking at the code in tensorflow/core/kernels/conv_ops.cc, Compute(OpKernelContext* context)  function:<br>\n<code>// Output tensor is of the following dimensions:                           // [ in_batch, out_rows, out_cols, out_depth ]                             Tensor* output = nullptr;                                                  OP_REQUIRES_OK(context, context-&gt;allocate_output(0, out_shape, &amp;output)); </code><br>\nDoes it mean each CONV OP will always dynamic allocate output tensor (including the buffer as the size of in_batch x out_rows x out_cols x out_depth) even if I load the graph once but iterate multiple times to inference multiple images? Where the memory was freed?</p>\n<p>Thanks.</p>", "body_text": "I am looking at the code in tensorflow/core/kernels/conv_ops.cc, Compute(OpKernelContext* context)  function:\n// Output tensor is of the following dimensions:                           // [ in_batch, out_rows, out_cols, out_depth ]                             Tensor* output = nullptr;                                                  OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output)); \nDoes it mean each CONV OP will always dynamic allocate output tensor (including the buffer as the size of in_batch x out_rows x out_cols x out_depth) even if I load the graph once but iterate multiple times to inference multiple images? Where the memory was freed?\nThanks.", "body": "I am looking at the code in tensorflow/core/kernels/conv_ops.cc, Compute(OpKernelContext\\* context)  function:\n`\n  // Output tensor is of the following dimensions:                          \n  // [ in_batch, out_rows, out_cols, out_depth ]                            \n  Tensor* output = nullptr;                                                 \n  OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output)); \n`\nDoes it mean each CONV OP will always dynamic allocate output tensor (including the buffer as the size of in_batch x out_rows x out_cols x out_depth) even if I load the graph once but iterate multiple times to inference multiple images? Where the memory was freed? \n\nThanks.\n"}