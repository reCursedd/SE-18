{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/51807680", "pull_request_review_id": null, "id": 51807680, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3Njgw", "diff_hunk": "@@ -0,0 +1,287 @@\n+#!/usr/bin/env bash\n+# Copyright 2016 Google Inc. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+# Build the Python PIP installation package for TensorFlow\n+# and run the Python unit tests from the source code on the installation\n+#\n+# Usage:\n+#   pip.sh CONTAINER_TYPE [--pip-upgrade]\n+# The option \"--pip-upgrade\" forces \"--upgrade\" flag during pip install.\n+#\n+# When executing the Python unit tests, the script obeys the shell\n+# variables: PY_TEST_WHITELIST, PY_TEST_BLACKLIST, PY_TEST_GPU_BLACKLIST,\n+# and NO_TEST_ON_INSTALL\n+#\n+# To select only a subset of the Python tests to run, set the environment\n+# variable PY_TEST_WHITELIST, e.g.,\n+#   PY_TEST_WHITELIST=\"tensorflow/python/kernel_tests/shape_ops_test.py\"\n+# Separate the tests with a colon (:). Leave this environment variable empty\n+# to disable the whitelist.\n+#\n+# You can also ignore a set of the tests by using the environment variable\n+# PY_TEST_BLACKLIST. For example, you can include in PY_TEST_BLACKLIST the\n+# tests that depend on Python modules in TensorFlow source that are not\n+# exported publicly.\n+#\n+# In addition, you can put blacklist for only GPU build inthe environment\n+# variable PY_TEST_GPU_BLACKLIST.\n+#\n+# If the environmental variable NO_TEST_ON_INSTALL is set to any non-empty\n+# value, the script will exit after the pip install step.\n+\n+# =============================================================================\n+# Test blacklist: General\n+#\n+# tensorflow/python/framework/ops_test.py\n+#   depends on depends on \"test_ops\", which is defined in a C++ file wrapped as\n+#   a .py file through the Bazel rule \u201ctf_gen_ops_wrapper_py\u201d.\n+# tensorflow/util/protobuf/compare_test.py:\n+#   depends on compare_test_pb2 defined outside Python\n+# tensorflow/python/framework/device_test.py:\n+#   depends on CheckValid() and ToString(), both defined externally\n+#\n+PY_TEST_BLACKLIST=\"${PY_TEST_BLACKLIST}:\"\\\n+\"tensorflow/python/framework/ops_test.py:\"\\\n+\"tensorflow/python/util/protobuf/compare_test.py:\"\\\n+\"tensorflow/python/framework/device_test.py\"\n+\n+# Test blacklist: GPU-only\n+PY_TEST_GPU_BLACKLIST=\"${PY_TEST_GPU_BLACKLIST}:\"\\\n+\"tensorflow/python/framework/function_test.py\"\n+\n+# =============================================================================\n+\n+# Helper functions\n+# Get the absolute path from a path\n+abs_path() {\n+    [[ $1 = /* ]] && echo \"$1\" || echo \"$PWD/${1#./}\"\n+}\n+\n+# Get the command line arguments\n+CONTAINER_TYPE=$( echo \"$1\" | tr '[:upper:]' '[:lower:]' )\n+\n+PIP_BUILD_TARGET=\"//tensorflow/tools/pip_package:build_pip_package\"\n+if [[ ${CONTAINER_TYPE} == \"cpu\" ]]; then\n+  bazel build -c opt ${PIP_BUILD_TARGET}\n+elif [[ ${CONTAINER_TYPE} == \"gpu\" ]]; then\n+  bazel build -c opt --config=cuda ${PIP_BUILD_TARGET}\n+else\n+  echo \"Unrecognized container type: \\\"${CONTAINER_TYPE}\\\"\"\n+  exit 1\n+fi\n+\n+echo \"PY_TEST_WHITELIST: ${PY_TEST_WHITELIST}\"\n+echo \"PY_TEST_BLACKLIST: ${PY_TEST_BLACKLIST}\"\n+echo \"PY_TEST_GPU_BLACKLIST: ${PY_TEST_GPU_BLACKLIST}\"\n+\n+# Append GPU-only test blacklist\n+if [[ ${CONTAINER_TYPE} == \"gpu\" ]]; then\n+  PY_TEST_BLACKLIST=\"${PY_TEST_BLACKLIST}:${PY_TEST_GPU_BLACKLIST}\"\n+fi\n+\n+# Build PIP Wheel file\n+PIP_WHL_DIR=\"pip_whl\"\n+PIP_WHL_DIR=`abs_path ${PIP_WHL_DIR}`  # Get absolute path\n+rm -rf ${PIP_WHL_DIR} && mkdir ${PIP_WHL_DIR}\n+bazel-bin/tensorflow/tools/pip_package/build_pip_package ${PIP_WHL_DIR} &&\n+\n+# Perform installation\n+WHL_PATH=`ls ${PIP_WHL_DIR}/tensorflow*.whl`\n+if [[ `echo ${WHL_PATH} | wc -w` -ne 1 ]]; then\n+  echo \"ERROR: Failed to find exactly one built TensorFlow .whl file\"\n+  exit 1\n+fi\n+\n+echo \"whl file path = ${WHL_PATH}\"\n+\n+# Install, in user's local home folder\n+echo \"Installing pip whl file: ${WHL_PATH}\"\n+\n+UPGRADE_OPT=\"\"\n+if [[ $2 == \"--pip-upgrade\" ]]; then\n+  UPGRADE_OPT=\"--upgrade\"\n+fi\n+\n+pip install -v --user ${UPGRADE_OPT} ${WHL_PATH} &&\n+\n+# If NO_TEST_ON_INSTALL is set to any non-empty value, skip all Python\n+# tests-on-install and exit right away\n+if [[ ! -z ${NO_TEST_ON_INSTALL} ]]; then\n+  echo \"NO_TEST_ON_INSTALL=${NO_TEST_ON_INSTALL}:\"\n+  echo \"  Skipping ALL Python unit tests on install\"\n+  exit 0\n+fi\n+\n+# Directory from which the unit-test files will be run\n+PY_TEST_DIR_REL=\"pip_install_tests\"\n+PY_TEST_DIR=`abs_path ${PY_TEST_DIR_REL}`  # Get absolute path\n+rm -rf ${PY_TEST_DIR} && mkdir ${PY_TEST_DIR}\n+\n+# Create test log directory\n+PY_TEST_LOG_DIR_REL=${PY_TEST_DIR_REL}/logs\n+PY_TEST_LOG_DIR=`abs_path ${PY_TEST_LOG_DIR_REL}`  # Absolute path\n+\n+mkdir ${PY_TEST_LOG_DIR}\n+\n+# Copy source files that are required by the tests but are not included in the\n+# PIP package\n+\n+# Look for local Python library directory\n+LIB_PYTHON_DIR=\"\"\n+\n+# Candidate locations of the local Python library directory\n+LIB_PYTHON_DIR_CANDS=\"${HOME}/.local/lib/python* \"\\\n+\"${HOME}/Library/Python/*/lib/python\"\n+\n+for CAND in ${LIB_PYTHON_DIR_CANDS}; do\n+  if [[ -d \"${CAND}\" ]]; then\n+    LIB_PYTHON_DIR=\"${CAND}\"\n+    break\n+  fi\n+done\n+\n+if [[ -z ${LIB_PYTHON_DIR} ]]; then\n+  echo \"Failed to find local Python library directory\"\n+  exit 1\n+else\n+  echo \"Found local Python library directory at: ${LIB_PYTHON_DIR}\"\n+fi\n+\n+PACKAGES_DIR=`ls -d ${LIB_PYTHON_DIR}/*-packages | head -1`\n+\n+echo \"Copying some source directories that are required by tests but are \"\\\n+\"not included in install to Python packages directory: ${PACKAGES_DIR}\"\n+\n+# tensorflow.python.tools\n+rm -rf ${PACKAGES_DIR}/tensorflow/python/tools\n+cp -r tensorflow/python/tools \\\n+      ${PACKAGES_DIR}/tensorflow/python/tools\n+touch ${PACKAGES_DIR}/tensorflow/python/tools/__init__.py  # Make module visible\n+\n+echo \"Copying additional files required by tests to working directory \"\\\n+\"for test: ${PY_TEST_DIR}\"\n+\n+# Image files required by some tests, e.g., images_ops_test.py\n+mkdir -p ${PY_TEST_DIR}/tensorflow/core/lib\n+rm -rf ${PY_TEST_DIR}/tensorflow/core/lib/jpeg\n+cp -r tensorflow/core/lib/jpeg ${PY_TEST_DIR}/tensorflow/core/lib\n+rm -rf ${PY_TEST_DIR}/tensorflow/core/lib/png\n+cp -r tensorflow/core/lib/png ${PY_TEST_DIR}/tensorflow/core/lib\n+\n+# Run tests\n+DIR0=`pwd`\n+ALL_PY_TESTS=`find tensorflow/python -name \"*_test.py\"`\n+PY_TEST_COUNT=`echo ${ALL_PY_TESTS} | wc -w`\n+\n+if [[ ${PY_TEST_COUNT} -eq 0 ]]; then\n+  echo \"ERROR: Cannot find any tensorflow Python unit tests to run on install\"\n+  exit 1\n+fi\n+\n+# Iterate through all the Python unit test files using the installation\n+COUNTER=0\n+PASS_COUNTER=0\n+FAIL_COUNTER=0\n+SKIP_COUNTER=0\n+FAILED_TESTS=\"\"\n+FAILED_TEST_LOGS=\"\"\n+\n+for TEST_FILE_PATH in ${ALL_PY_TESTS}; do\n+  ((COUNTER++))\n+\n+  PROG_STR=\"(${COUNTER} / ${PY_TEST_COUNT})\"\n+\n+  # If PY_TEST_WHITELIST is not empty, only the white-listed tests will be run\n+  if [[ ! -z ${PY_TEST_WHITELIST} ]] && \\\n+     [[ ! ${PY_TEST_WHITELIST} == *\"${TEST_FILE_PATH}\"* ]]; then\n+    ((SKIP_COUNTER++))\n+    echo \"${PROG_STR} Skipping non-whitelisted test: ${TEST_FILE_PATH}\"\n+    continue\n+  fi\n+\n+  # If the test is in the black list, skip it\n+  if [[ ${PY_TEST_BLACKLIST} == *\"${TEST_FILE_PATH}\"* ]]; then\n+    ((SKIP_COUNTER++))\n+    echo \"${PROG_STR} Skipping blacklisted test: ${TEST_FILE_PATH}\"\n+    continue\n+  fi\n+\n+  # Copy to a separate directory to guard against the possibility of picking up\n+  # modules in the source directory\n+  cp ${TEST_FILE_PATH} ${PY_TEST_DIR}/\n+\n+  TEST_BASENAME=`basename \"${TEST_FILE_PATH}\"`\n+\n+  # Relative path of the test log. Use long path in case there are duplicate\n+  # file names in the Python tests\n+  TEST_LOG_REL=\"${PY_TEST_LOG_DIR_REL}/${TEST_FILE_PATH}.log\"\n+  mkdir -p `dirname ${TEST_LOG_REL}`  # Create directory for log\n+\n+  TEST_LOG=`abs_path ${TEST_LOG_REL}`  # Absolute path\n+\n+  # Before running the test, cd away from the Tensorflow source to\n+  # avoid the possibility of picking up dependencies from the\n+  # source directory\n+  cd ${PY_TEST_DIR}\n+  python ${PY_TEST_DIR}/${TEST_BASENAME} >${TEST_LOG} 2>&1\n+\n+  # Check for pass or failure status of the test outtput and exit\n+  if [[ $? -eq 0 ]]; then\n+    ((PASS_COUNTER++))\n+\n+    echo \"${PROG_STR} Python test-on-install succeeded: ${TEST_FILE_PATH}\"\n+  else\n+    ((FAIL_COUNTER++))\n+\n+    FAILED_TESTS=\"${FAILED_TESTS} ${TEST_FILE_PATH}\"\n+\n+    FAILED_TEST_LOGS=\"${FAILED_TEST_LOGS} ${TEST_LOG_REL}\"\n+\n+    echo \"${PROG_STR} Python test-on-install FAILED: ${TEST_FILE_PATH}\"\n+    echo \"  Log @: ${TEST_LOG_REL}\"", "path": "tensorflow/tools/ci_build/builds/pip.sh", "position": 255, "original_position": 254, "commit_id": "da2202dec6befe480b5bae3971a0c5cab15d74ea", "original_commit_id": "a028874f686d1f165cda2176e7a7169731f84b78", "user": {"login": "jendap", "id": 567848, "node_id": "MDQ6VXNlcjU2Nzg0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/567848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jendap", "html_url": "https://github.com/jendap", "followers_url": "https://api.github.com/users/jendap/followers", "following_url": "https://api.github.com/users/jendap/following{/other_user}", "gists_url": "https://api.github.com/users/jendap/gists{/gist_id}", "starred_url": "https://api.github.com/users/jendap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jendap/subscriptions", "organizations_url": "https://api.github.com/users/jendap/orgs", "repos_url": "https://api.github.com/users/jendap/repos", "events_url": "https://api.github.com/users/jendap/events{/privacy}", "received_events_url": "https://api.github.com/users/jendap/received_events", "type": "User", "site_admin": false}, "body": "Put here \"cat ${TEST_LOG}\", you do want to see those which fail.\n", "created_at": "2016-02-03T23:43:08Z", "updated_at": "2016-02-04T04:43:38Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/939#discussion_r51807680", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/939", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/51807680"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/939#discussion_r51807680"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/939"}}, "body_html": "<p>Put here \"cat ${TEST_LOG}\", you do want to see those which fail.</p>", "body_text": "Put here \"cat ${TEST_LOG}\", you do want to see those which fail."}