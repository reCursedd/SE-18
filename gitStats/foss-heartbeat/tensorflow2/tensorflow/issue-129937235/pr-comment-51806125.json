{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/51806125", "pull_request_review_id": null, "id": 51806125, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MTI1", "diff_hunk": "@@ -0,0 +1,287 @@\n+#!/usr/bin/env bash\n+# Copyright 2016 Google Inc. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+# Build the Python PIP installation package for TensorFlow\n+# and run the Python unit tests from the source code on the installation\n+#\n+# Usage:\n+#   pip.sh CONTAINER_TYPE [--pip-upgrade]\n+# The option \"--pip-upgrade\" forces \"--upgrade\" flag during pip install.\n+#\n+# When executing the Python unit tests, the script obeys the shell\n+# variables: PY_TEST_WHITELIST, PY_TEST_BLACKLIST, PY_TEST_GPU_BLACKLIST,\n+# and NO_TEST_ON_INSTALL\n+#\n+# To select only a subset of the Python tests to run, set the environment\n+# variable PY_TEST_WHITELIST, e.g.,\n+#   PY_TEST_WHITELIST=\"tensorflow/python/kernel_tests/shape_ops_test.py\"\n+# Separate the tests with a colon (:). Leave this environment variable empty\n+# to disable the whitelist.\n+#\n+# You can also ignore a set of the tests by using the environment variable\n+# PY_TEST_BLACKLIST. For example, you can include in PY_TEST_BLACKLIST the\n+# tests that depend on Python modules in TensorFlow source that are not\n+# exported publicly.\n+#\n+# In addition, you can put blacklist for only GPU build inthe environment\n+# variable PY_TEST_GPU_BLACKLIST.\n+#\n+# If the environmental variable NO_TEST_ON_INSTALL is set to any non-empty\n+# value, the script will exit after the pip install step.\n+\n+# =============================================================================\n+# Test blacklist: General\n+#\n+# tensorflow/python/framework/ops_test.py\n+#   depends on depends on \"test_ops\", which is defined in a C++ file wrapped as\n+#   a .py file through the Bazel rule \u201ctf_gen_ops_wrapper_py\u201d.\n+# tensorflow/util/protobuf/compare_test.py:\n+#   depends on compare_test_pb2 defined outside Python\n+# tensorflow/python/framework/device_test.py:\n+#   depends on CheckValid() and ToString(), both defined externally\n+#\n+PY_TEST_BLACKLIST=\"${PY_TEST_BLACKLIST}:\"\\\n+\"tensorflow/python/framework/ops_test.py:\"\\\n+\"tensorflow/python/util/protobuf/compare_test.py:\"\\\n+\"tensorflow/python/framework/device_test.py\"\n+\n+# Test blacklist: GPU-only\n+PY_TEST_GPU_BLACKLIST=\"${PY_TEST_GPU_BLACKLIST}:\"\\\n+\"tensorflow/python/framework/function_test.py\"\n+\n+# =============================================================================\n+\n+# Helper functions\n+# Get the absolute path from a path\n+abs_path() {\n+    [[ $1 = /* ]] && echo \"$1\" || echo \"$PWD/${1#./}\"\n+}\n+\n+# Get the command line arguments\n+CONTAINER_TYPE=$( echo \"$1\" | tr '[:upper:]' '[:lower:]' )\n+\n+PIP_BUILD_TARGET=\"//tensorflow/tools/pip_package:build_pip_package\"\n+if [[ ${CONTAINER_TYPE} == \"cpu\" ]]; then\n+  bazel build -c opt ${PIP_BUILD_TARGET}\n+elif [[ ${CONTAINER_TYPE} == \"gpu\" ]]; then\n+  bazel build -c opt --config=cuda ${PIP_BUILD_TARGET}\n+else\n+  echo \"Unrecognized container type: \\\"${CONTAINER_TYPE}\\\"\"\n+  exit 1\n+fi\n+\n+echo \"PY_TEST_WHITELIST: ${PY_TEST_WHITELIST}\"\n+echo \"PY_TEST_BLACKLIST: ${PY_TEST_BLACKLIST}\"\n+echo \"PY_TEST_GPU_BLACKLIST: ${PY_TEST_GPU_BLACKLIST}\"\n+\n+# Append GPU-only test blacklist\n+if [[ ${CONTAINER_TYPE} == \"gpu\" ]]; then\n+  PY_TEST_BLACKLIST=\"${PY_TEST_BLACKLIST}:${PY_TEST_GPU_BLACKLIST}\"\n+fi\n+\n+# Build PIP Wheel file\n+PIP_WHL_DIR=\"pip_whl\"\n+PIP_WHL_DIR=`abs_path ${PIP_WHL_DIR}`  # Get absolute path\n+rm -rf ${PIP_WHL_DIR} && mkdir ${PIP_WHL_DIR}\n+bazel-bin/tensorflow/tools/pip_package/build_pip_package ${PIP_WHL_DIR} &&\n+\n+# Perform installation\n+WHL_PATH=`ls ${PIP_WHL_DIR}/tensorflow*.whl`\n+if [[ `echo ${WHL_PATH} | wc -w` -ne 1 ]]; then\n+  echo \"ERROR: Failed to find exactly one built TensorFlow .whl file\"\n+  exit 1\n+fi\n+\n+echo \"whl file path = ${WHL_PATH}\"\n+\n+# Install, in user's local home folder\n+echo \"Installing pip whl file: ${WHL_PATH}\"\n+\n+UPGRADE_OPT=\"\"\n+if [[ $2 == \"--pip-upgrade\" ]]; then\n+  UPGRADE_OPT=\"--upgrade\"\n+fi\n+\n+pip install -v --user ${UPGRADE_OPT} ${WHL_PATH} &&", "path": "tensorflow/tools/ci_build/builds/pip.sh", "position": 119, "original_position": 118, "commit_id": "da2202dec6befe480b5bae3971a0c5cab15d74ea", "original_commit_id": "a028874f686d1f165cda2176e7a7169731f84b78", "user": {"login": "jendap", "id": 567848, "node_id": "MDQ6VXNlcjU2Nzg0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/567848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jendap", "html_url": "https://github.com/jendap", "followers_url": "https://api.github.com/users/jendap/followers", "following_url": "https://api.github.com/users/jendap/following{/other_user}", "gists_url": "https://api.github.com/users/jendap/gists{/gist_id}", "starred_url": "https://api.github.com/users/jendap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jendap/subscriptions", "organizations_url": "https://api.github.com/users/jendap/orgs", "repos_url": "https://api.github.com/users/jendap/repos", "events_url": "https://api.github.com/users/jendap/events{/privacy}", "received_events_url": "https://api.github.com/users/jendap/received_events", "type": "User", "site_admin": false}, "body": "&& is doing what here?\n", "created_at": "2016-02-03T23:28:18Z", "updated_at": "2016-02-04T04:43:38Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/939#discussion_r51806125", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/939", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/51806125"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/939#discussion_r51806125"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/939"}}, "body_html": "<p>&amp;&amp; is doing what here?</p>", "body_text": "&& is doing what here?"}