{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/287627171", "html_url": "https://github.com/tensorflow/tensorflow/pull/8522#issuecomment-287627171", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8522", "id": 287627171, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzYyNzE3MQ==", "user": {"login": "snnn", "id": 856316, "node_id": "MDQ6VXNlcjg1NjMxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/856316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snnn", "html_url": "https://github.com/snnn", "followers_url": "https://api.github.com/users/snnn/followers", "following_url": "https://api.github.com/users/snnn/following{/other_user}", "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}", "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snnn/subscriptions", "organizations_url": "https://api.github.com/users/snnn/orgs", "repos_url": "https://api.github.com/users/snnn/repos", "events_url": "https://api.github.com/users/snnn/events{/privacy}", "received_events_url": "https://api.github.com/users/snnn/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-19T16:11:32Z", "updated_at": "2017-03-19T16:12:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Some performance test result after this change:</p>\n<p>input data: A text file in libsvm format, 10906667862 bytes, 164540416 lines, with CRLF line terminators</p>\n<p>test code:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>mutex<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>Windows.h<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>stdio.h<span class=\"pl-pds\">&gt;</span></span>\n\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/platform/env.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/lib/core/errors.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/lib/io/inputbuffer.h<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">tensorflow</span><span class=\"pl-k\">;</span>\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">test1</span>(<span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span>* filename) {\n\tLARGE_INTEGER li;\n\t<span class=\"pl-c1\">QueryPerformanceFrequency</span>(&amp;li);\n\tEnv* env = <span class=\"pl-c1\">Env::Default</span>();\n\tstd::unique_ptr&lt;RandomAccessFile&gt; file_;\n\t<span class=\"pl-k\">const</span> ::tensorflow::Status status = env-&gt;<span class=\"pl-c1\">NewRandomAccessFile</span>(filename, &amp;file_);\n\t<span class=\"pl-k\">if</span> (!status.<span class=\"pl-c1\">ok</span>()) {\n\t\t<span class=\"pl-k\">return</span> -<span class=\"pl-c1\">1</span>;\n\t}\n\tLARGE_INTEGER startTime, endTime;\n\t<span class=\"pl-k\">int</span> <span class=\"pl-c1\">kBufferSize</span> = <span class=\"pl-c1\">2</span> * <span class=\"pl-c1\">1024</span> * <span class=\"pl-c1\">1024</span>;\n\tio::InputBuffer* input_buffer = <span class=\"pl-k\">new</span> <span class=\"pl-c1\">io::InputBuffer</span>(file_.<span class=\"pl-c1\">get</span>(), <span class=\"pl-c1\">kBufferSize</span>);\n\t<span class=\"pl-c1\">QueryPerformanceCounter</span>(&amp;startTime);\n\tstring line_contents;\n\t<span class=\"pl-k\">while</span> (<span class=\"pl-c1\">true</span>) {\n\t\tStatus status = input_buffer-&gt;<span class=\"pl-c1\">ReadLine</span>(&amp;line_contents);\n\t\t<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">errors::IsOutOfRange</span>(status)) {\n\t\t\t<span class=\"pl-k\">break</span>;\n\t\t}\n\t\t<span class=\"pl-k\">if</span> (!status.<span class=\"pl-c1\">ok</span>()) {\n\t\t\t<span class=\"pl-k\">return</span> -<span class=\"pl-c1\">1</span>;\n\t\t}\n\t}\n\t<span class=\"pl-c1\">QueryPerformanceCounter</span>(&amp;endTime);\n\t<span class=\"pl-k\">const</span> <span class=\"pl-k\">double</span> seconds = ((endTime.<span class=\"pl-smi\">QuadPart</span> - startTime.<span class=\"pl-smi\">QuadPart</span>) / (<span class=\"pl-k\">double</span>)li.<span class=\"pl-smi\">QuadPart</span>);\n\t<span class=\"pl-c1\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dur = %g<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, seconds);\n\t<span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n}\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">test2</span>(<span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span>* filename) {\n\tLARGE_INTEGER li;\n\t<span class=\"pl-c1\">QueryPerformanceFrequency</span>(&amp;li);\n\t<span class=\"pl-k\">int</span> <span class=\"pl-c1\">kBufferSize</span> = <span class=\"pl-c1\">2</span> * <span class=\"pl-c1\">1024</span> * <span class=\"pl-c1\">1024</span>;\n\tstd::unique_ptr&lt;<span class=\"pl-k\">char</span>[]&gt; <span class=\"pl-c1\">buf</span>(<span class=\"pl-k\">new</span> <span class=\"pl-k\">char</span>[<span class=\"pl-c1\">kBufferSize</span>]);\n\t<span class=\"pl-c1\">FILE</span>* fd = <span class=\"pl-c1\">fopen</span>(filename, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rb<span class=\"pl-pds\">\"</span></span>);\n\t<span class=\"pl-k\">if</span> (fd == <span class=\"pl-c1\">nullptr</span>) <span class=\"pl-k\">return</span> -<span class=\"pl-c1\">1</span>;\n\tLARGE_INTEGER startTime, endTime;\n\t<span class=\"pl-c1\">QueryPerformanceCounter</span>(&amp;startTime);\n\t<span class=\"pl-k\">while</span> (<span class=\"pl-c1\">fgets</span>(buf.<span class=\"pl-c1\">get</span>(), <span class=\"pl-c1\">kBufferSize</span>, fd) != <span class=\"pl-c1\">nullptr</span>) {\n\n\t}\n\t<span class=\"pl-c1\">QueryPerformanceCounter</span>(&amp;endTime);\n\t<span class=\"pl-k\">const</span> <span class=\"pl-k\">double</span> seconds = ((endTime.<span class=\"pl-smi\">QuadPart</span> - startTime.<span class=\"pl-smi\">QuadPart</span>) / (<span class=\"pl-k\">double</span>)li.<span class=\"pl-smi\">QuadPart</span>);\n\t<span class=\"pl-c1\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>read by fgets, dur = %g<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, seconds);\n\t<span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n}\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">int</span> argc,<span class=\"pl-k\">char</span>* argv[]) {\n\t<span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span>* filename = argv[<span class=\"pl-c1\">1</span>];\n\t<span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span>* method = argv[<span class=\"pl-c1\">2</span>];\n\t<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">_stricmp</span>(method, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fgets<span class=\"pl-pds\">\"</span></span>)==<span class=\"pl-c1\">0</span>) {\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-c1\">test2</span>(filename);\n\t}\n\t<span class=\"pl-k\">return</span> <span class=\"pl-c1\">test1</span>(filename);\n}\n</pre></div>\n<p>Result:<br>\nfile on SSD, read by fgets, dur = 35 seconds<br>\nfile on SSD, read by InputBuffer, dur = 19 seconds<br>\nfile on HardDisk, read by fgets, dur = 104 seconds<br>\nfile on HardDisk, read by InputBuffer, dur = 114 seconds</p>\n<p>So, I think it's ok to simply remove FILE_FLAG_RANDOM_ACCESS flag.</p>", "body_text": "Some performance test result after this change:\ninput data: A text file in libsvm format, 10906667862 bytes, 164540416 lines, with CRLF line terminators\ntest code:\n#include <mutex>\n#include <Windows.h>\n#include <stdio.h>\n\n#include \"tensorflow/core/platform/env.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/io/inputbuffer.h\"\nusing namespace tensorflow;\n\nint test1(const char* filename) {\n\tLARGE_INTEGER li;\n\tQueryPerformanceFrequency(&li);\n\tEnv* env = Env::Default();\n\tstd::unique_ptr<RandomAccessFile> file_;\n\tconst ::tensorflow::Status status = env->NewRandomAccessFile(filename, &file_);\n\tif (!status.ok()) {\n\t\treturn -1;\n\t}\n\tLARGE_INTEGER startTime, endTime;\n\tint kBufferSize = 2 * 1024 * 1024;\n\tio::InputBuffer* input_buffer = new io::InputBuffer(file_.get(), kBufferSize);\n\tQueryPerformanceCounter(&startTime);\n\tstring line_contents;\n\twhile (true) {\n\t\tStatus status = input_buffer->ReadLine(&line_contents);\n\t\tif (errors::IsOutOfRange(status)) {\n\t\t\tbreak;\n\t\t}\n\t\tif (!status.ok()) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\tQueryPerformanceCounter(&endTime);\n\tconst double seconds = ((endTime.QuadPart - startTime.QuadPart) / (double)li.QuadPart);\n\tprintf(\"dur = %g\\n\", seconds);\n\treturn 0;\n}\n\nint test2(const char* filename) {\n\tLARGE_INTEGER li;\n\tQueryPerformanceFrequency(&li);\n\tint kBufferSize = 2 * 1024 * 1024;\n\tstd::unique_ptr<char[]> buf(new char[kBufferSize]);\n\tFILE* fd = fopen(filename, \"rb\");\n\tif (fd == nullptr) return -1;\n\tLARGE_INTEGER startTime, endTime;\n\tQueryPerformanceCounter(&startTime);\n\twhile (fgets(buf.get(), kBufferSize, fd) != nullptr) {\n\n\t}\n\tQueryPerformanceCounter(&endTime);\n\tconst double seconds = ((endTime.QuadPart - startTime.QuadPart) / (double)li.QuadPart);\n\tprintf(\"read by fgets, dur = %g\\n\", seconds);\n\treturn 0;\n}\n\nint main(int argc,char* argv[]) {\n\tconst char* filename = argv[1];\n\tconst char* method = argv[2];\n\tif (_stricmp(method, \"fgets\")==0) {\n\t\treturn test2(filename);\n\t}\n\treturn test1(filename);\n}\n\nResult:\nfile on SSD, read by fgets, dur = 35 seconds\nfile on SSD, read by InputBuffer, dur = 19 seconds\nfile on HardDisk, read by fgets, dur = 104 seconds\nfile on HardDisk, read by InputBuffer, dur = 114 seconds\nSo, I think it's ok to simply remove FILE_FLAG_RANDOM_ACCESS flag.", "body": "Some performance test result after this change:\r\n\r\ninput data: A text file in libsvm format, 10906667862 bytes, 164540416 lines, with CRLF line terminators\r\n\r\ntest code:\r\n```cpp\r\n#include <mutex>\r\n#include <Windows.h>\r\n#include <stdio.h>\r\n\r\n#include \"tensorflow/core/platform/env.h\"\r\n#include \"tensorflow/core/lib/core/errors.h\"\r\n#include \"tensorflow/core/lib/io/inputbuffer.h\"\r\nusing namespace tensorflow;\r\n\r\nint test1(const char* filename) {\r\n\tLARGE_INTEGER li;\r\n\tQueryPerformanceFrequency(&li);\r\n\tEnv* env = Env::Default();\r\n\tstd::unique_ptr<RandomAccessFile> file_;\r\n\tconst ::tensorflow::Status status = env->NewRandomAccessFile(filename, &file_);\r\n\tif (!status.ok()) {\r\n\t\treturn -1;\r\n\t}\r\n\tLARGE_INTEGER startTime, endTime;\r\n\tint kBufferSize = 2 * 1024 * 1024;\r\n\tio::InputBuffer* input_buffer = new io::InputBuffer(file_.get(), kBufferSize);\r\n\tQueryPerformanceCounter(&startTime);\r\n\tstring line_contents;\r\n\twhile (true) {\r\n\t\tStatus status = input_buffer->ReadLine(&line_contents);\r\n\t\tif (errors::IsOutOfRange(status)) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tif (!status.ok()) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\tQueryPerformanceCounter(&endTime);\r\n\tconst double seconds = ((endTime.QuadPart - startTime.QuadPart) / (double)li.QuadPart);\r\n\tprintf(\"dur = %g\\n\", seconds);\r\n\treturn 0;\r\n}\r\n\r\nint test2(const char* filename) {\r\n\tLARGE_INTEGER li;\r\n\tQueryPerformanceFrequency(&li);\r\n\tint kBufferSize = 2 * 1024 * 1024;\r\n\tstd::unique_ptr<char[]> buf(new char[kBufferSize]);\r\n\tFILE* fd = fopen(filename, \"rb\");\r\n\tif (fd == nullptr) return -1;\r\n\tLARGE_INTEGER startTime, endTime;\r\n\tQueryPerformanceCounter(&startTime);\r\n\twhile (fgets(buf.get(), kBufferSize, fd) != nullptr) {\r\n\r\n\t}\r\n\tQueryPerformanceCounter(&endTime);\r\n\tconst double seconds = ((endTime.QuadPart - startTime.QuadPart) / (double)li.QuadPart);\r\n\tprintf(\"read by fgets, dur = %g\\n\", seconds);\r\n\treturn 0;\r\n}\r\n\r\nint main(int argc,char* argv[]) {\r\n\tconst char* filename = argv[1];\r\n\tconst char* method = argv[2];\r\n\tif (_stricmp(method, \"fgets\")==0) {\r\n\t\treturn test2(filename);\r\n\t}\r\n\treturn test1(filename);\r\n}\r\n\r\n```\r\n\r\nResult:\r\nfile on SSD, read by fgets, dur = 35 seconds\r\nfile on SSD, read by InputBuffer, dur = 19 seconds\r\nfile on HardDisk, read by fgets, dur = 104 seconds\r\nfile on HardDisk, read by InputBuffer, dur = 114 seconds\r\n\r\nSo, I think it's ok to simply remove FILE_FLAG_RANDOM_ACCESS flag.\r\n\r\n\r\n"}