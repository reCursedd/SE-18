{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/407108666", "html_url": "https://github.com/tensorflow/tensorflow/issues/19491#issuecomment-407108666", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19491", "id": 407108666, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzEwODY2Ng==", "user": {"login": "ezhulenev", "id": 1174378, "node_id": "MDQ6VXNlcjExNzQzNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1174378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezhulenev", "html_url": "https://github.com/ezhulenev", "followers_url": "https://api.github.com/users/ezhulenev/followers", "following_url": "https://api.github.com/users/ezhulenev/following{/other_user}", "gists_url": "https://api.github.com/users/ezhulenev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezhulenev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezhulenev/subscriptions", "organizations_url": "https://api.github.com/users/ezhulenev/orgs", "repos_url": "https://api.github.com/users/ezhulenev/repos", "events_url": "https://api.github.com/users/ezhulenev/events{/privacy}", "received_events_url": "https://api.github.com/users/ezhulenev/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-23T15:57:51Z", "updated_at": "2018-07-23T15:57:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4223137\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fcacarminati\">@fcacarminati</a> Unfortunately in your case the volume patch data is scattered across all of the input buffer, and there is no contiguous blocks of 8+ scalars, so TensorVolumePatchOp packet access has to construct packet by loading scalars one by one.</p>\n<p>One option to make it faster, is to create custom LHS/RHS packer, similar to what you can find in eigen_spatial_convolutions, I'll take a look on it, it does seem like relatively simple thing. That change made Conv2D ~2x faster, so I expect to see somewhat similar results for Conv3D.</p>", "body_text": "@fcacarminati Unfortunately in your case the volume patch data is scattered across all of the input buffer, and there is no contiguous blocks of 8+ scalars, so TensorVolumePatchOp packet access has to construct packet by loading scalars one by one.\nOne option to make it faster, is to create custom LHS/RHS packer, similar to what you can find in eigen_spatial_convolutions, I'll take a look on it, it does seem like relatively simple thing. That change made Conv2D ~2x faster, so I expect to see somewhat similar results for Conv3D.", "body": "@fcacarminati Unfortunately in your case the volume patch data is scattered across all of the input buffer, and there is no contiguous blocks of 8+ scalars, so TensorVolumePatchOp packet access has to construct packet by loading scalars one by one.\r\n\r\nOne option to make it faster, is to create custom LHS/RHS packer, similar to what you can find in eigen_spatial_convolutions, I'll take a look on it, it does seem like relatively simple thing. That change made Conv2D ~2x faster, so I expect to see somewhat similar results for Conv3D."}