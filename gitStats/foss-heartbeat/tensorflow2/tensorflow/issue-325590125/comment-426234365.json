{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/426234365", "html_url": "https://github.com/tensorflow/tensorflow/issues/19491#issuecomment-426234365", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19491", "id": 426234365, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjIzNDM2NQ==", "user": {"login": "fcacarminati", "id": 4223137, "node_id": "MDQ6VXNlcjQyMjMxMzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4223137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fcacarminati", "html_url": "https://github.com/fcacarminati", "followers_url": "https://api.github.com/users/fcacarminati/followers", "following_url": "https://api.github.com/users/fcacarminati/following{/other_user}", "gists_url": "https://api.github.com/users/fcacarminati/gists{/gist_id}", "starred_url": "https://api.github.com/users/fcacarminati/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fcacarminati/subscriptions", "organizations_url": "https://api.github.com/users/fcacarminati/orgs", "repos_url": "https://api.github.com/users/fcacarminati/repos", "events_url": "https://api.github.com/users/fcacarminati/events{/privacy}", "received_events_url": "https://api.github.com/users/fcacarminati/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-02T11:07:09Z", "updated_at": "2018-10-02T11:07:09Z", "author_association": "NONE", "body_html": "<blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4223137\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fcacarminati\">@fcacarminati</a> I've submitted couple of changes that should make Conv3D performance much better (I'd expecte something like ~5x). One of them is custom kernels for backprop input and filter: <a href=\"https://github.com/tensorflow/tensorflow/commit/e183b8d0328d7398cb6ffc530d1ae8fdbd2111c0\">e183b8d</a></p>\n<p>These kernels make less smaller allocations, instead they allocate quite large temporary buffers, so you might see increased peak memory usage. It's possible to fallback on original Eigen kernels using <code>kernel_label_map</code> (see</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/blob/8cb0558da924e891aa1bb5d79a6c0c846301e4eb/tensorflow/python/framework/ops.py#L3311\">tensorflow/tensorflow/python/framework/ops.py</a><br>\nLine 3311 in <a href=\"/tensorflow/tensorflow/commit/8cb0558da924e891aa1bb5d79a6c0c846301e4eb\">8cb0558</a><br>\ndef _kernel_label_map(self, op_to_kernel_label_map):<br>\n), old kernels registered with a \"eigen_tensor\" label.<br>\nI'd be super interested to know how much this helps in your specific case.</p>\n</blockquote>\n<p>I have a factor 3 improvement! And I have a factor 2.5 with the 3D patch changes. All in all this would give me a fantastic factor close to 10. When can we expect these two changes to get into the same branch? We are <em>really</em> depending on performance here and the work seems to be mostly done. One more little effort please :-) Best regards</p>", "body_text": "@fcacarminati I've submitted couple of changes that should make Conv3D performance much better (I'd expecte something like ~5x). One of them is custom kernels for backprop input and filter: e183b8d\nThese kernels make less smaller allocations, instead they allocate quite large temporary buffers, so you might see increased peak memory usage. It's possible to fallback on original Eigen kernels using kernel_label_map (see\ntensorflow/tensorflow/python/framework/ops.py\nLine 3311 in 8cb0558\ndef _kernel_label_map(self, op_to_kernel_label_map):\n), old kernels registered with a \"eigen_tensor\" label.\nI'd be super interested to know how much this helps in your specific case.\n\nI have a factor 3 improvement! And I have a factor 2.5 with the 3D patch changes. All in all this would give me a fantastic factor close to 10. When can we expect these two changes to get into the same branch? We are really depending on performance here and the work seems to be mostly done. One more little effort please :-) Best regards", "body": "> @fcacarminati I've submitted couple of changes that should make Conv3D performance much better (I'd expecte something like ~5x). One of them is custom kernels for backprop input and filter: [e183b8d](https://github.com/tensorflow/tensorflow/commit/e183b8d0328d7398cb6ffc530d1ae8fdbd2111c0)\r\n> \r\n> These kernels make less smaller allocations, instead they allocate quite large temporary buffers, so you might see increased peak memory usage. It's possible to fallback on original Eigen kernels using `kernel_label_map` (see\r\n> \r\n> [tensorflow/tensorflow/python/framework/ops.py](https://github.com/tensorflow/tensorflow/blob/8cb0558da924e891aa1bb5d79a6c0c846301e4eb/tensorflow/python/framework/ops.py#L3311)\r\n> Line 3311 in [8cb0558](/tensorflow/tensorflow/commit/8cb0558da924e891aa1bb5d79a6c0c846301e4eb)\r\n>  def _kernel_label_map(self, op_to_kernel_label_map): \r\n> ), old kernels registered with a \"eigen_tensor\" label.\r\n> I'd be super interested to know how much this helps in your specific case.\r\n\r\nI have a factor 3 improvement! And I have a factor 2.5 with the 3D patch changes. All in all this would give me a fantastic factor close to 10. When can we expect these two changes to get into the same branch? We are *really* depending on performance here and the work seems to be mostly done. One more little effort please :-) Best regards\r\n"}