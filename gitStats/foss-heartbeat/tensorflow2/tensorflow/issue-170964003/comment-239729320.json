{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/239729320", "html_url": "https://github.com/tensorflow/tensorflow/pull/3780#issuecomment-239729320", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3780", "id": 239729320, "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTcyOTMyMA==", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-15T04:53:35Z", "updated_at": "2016-08-15T04:53:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Well, the hope is that users don't have to install bazel -- just need to run 'gcc' on the custom op that, say, lives in the TensorBox library (which you could package up via pip yourself, etc).  That's the situation I'd love to be in :)</p>\n<p>As for its suitability in TF: we could get a set of opinions on this, but speaking as someone who has to essentially forever maintain any code that gets into TF core, I'm always wary of having to maintain (and handle bug reports for, debug) code for ideas that aren't \"core\" functions of TensorFlow.  I guess I'd have to understand how generally this op could be used.  One idea is that, we leave this external for now, and as more feature requests come in that could be solved by having this op in the core, we add it to core at that point.  What do you think?</p>", "body_text": "Well, the hope is that users don't have to install bazel -- just need to run 'gcc' on the custom op that, say, lives in the TensorBox library (which you could package up via pip yourself, etc).  That's the situation I'd love to be in :)\nAs for its suitability in TF: we could get a set of opinions on this, but speaking as someone who has to essentially forever maintain any code that gets into TF core, I'm always wary of having to maintain (and handle bug reports for, debug) code for ideas that aren't \"core\" functions of TensorFlow.  I guess I'd have to understand how generally this op could be used.  One idea is that, we leave this external for now, and as more feature requests come in that could be solved by having this op in the core, we add it to core at that point.  What do you think?", "body": "Well, the hope is that users don't have to install bazel -- just need to run 'gcc' on the custom op that, say, lives in the TensorBox library (which you could package up via pip yourself, etc).  That's the situation I'd love to be in :)\n\nAs for its suitability in TF: we could get a set of opinions on this, but speaking as someone who has to essentially forever maintain any code that gets into TF core, I'm always wary of having to maintain (and handle bug reports for, debug) code for ideas that aren't \"core\" functions of TensorFlow.  I guess I'd have to understand how generally this op could be used.  One idea is that, we leave this external for now, and as more feature requests come in that could be solved by having this op in the core, we add it to core at that point.  What do you think?\n"}