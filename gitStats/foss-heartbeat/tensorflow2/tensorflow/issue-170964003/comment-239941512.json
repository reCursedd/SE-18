{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/239941512", "html_url": "https://github.com/tensorflow/tensorflow/pull/3780#issuecomment-239941512", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3780", "id": 239941512, "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTk0MTUxMg==", "user": {"login": "Russell91", "id": 1069617, "node_id": "MDQ6VXNlcjEwNjk2MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1069617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Russell91", "html_url": "https://github.com/Russell91", "followers_url": "https://api.github.com/users/Russell91/followers", "following_url": "https://api.github.com/users/Russell91/following{/other_user}", "gists_url": "https://api.github.com/users/Russell91/gists{/gist_id}", "starred_url": "https://api.github.com/users/Russell91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Russell91/subscriptions", "organizations_url": "https://api.github.com/users/Russell91/orgs", "repos_url": "https://api.github.com/users/Russell91/repos", "events_url": "https://api.github.com/users/Russell91/events{/privacy}", "received_events_url": "https://api.github.com/users/Russell91/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-15T21:54:55Z", "updated_at": "2016-08-15T22:06:48Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=62879\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kaveman\">@kaveman</a> My quote</p>\n<blockquote>\n<p>I guess we'll just have to keep an eye on this as the extension system matures?</p>\n</blockquote>\n<p>was a reaction to the comment of <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> that</p>\n<blockquote>\n<p>Well, the hope is that users don't have to install bazel -- just need to run 'gcc' on the custom op that, say, lives in the TensorBox library (which you could package up via pip yourself, etc). That's the situation I'd love to be in :)</p>\n</blockquote>\n<p>I guess I'll have to look into exactly what is possible with the current system, but you have to understand that I'm not only interested in a system which is <em>possible</em> for users to add the hungarian layer, but one where it is <em>easy</em>. That's just a much higher bar, and say, even requiring them to install bazel would miss the mark entirely. Bazel is so rapidly developed that there's at least a 20% chance of an install taking &gt; 15 minutes due to versioning problems. So I'm happy to learn about a bazel extension system, and it may indeed be much better than forcing them to recompile tensorflow from scratch (as they currently have to with my project). But <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> is absolutely correct that I would prefer to just have my users say \"make hungarian\", which would call the native gcc to create a .so, and link that in at runtime with some python magic than to have them muck around with a brand new build system (bazel). Note also that my project currently suggests people to get started by ignoring the hungarian layer and just use a simpler model for exactly these complexity reasons.</p>\n<p>Edit: Okay, yes it seems that your link here: <a href=\"https://www.tensorflow.org/versions/r0.10/how_tos/adding_an_op/index.html#with-tensorflow-binary-installation\" rel=\"nofollow\">https://www.tensorflow.org/versions/r0.10/how_tos/adding_an_op/index.html#with-tensorflow-binary-installation</a> is what I was looking for. Thanks guys!</p>", "body_text": "@kaveman My quote\n\nI guess we'll just have to keep an eye on this as the extension system matures?\n\nwas a reaction to the comment of @vrv that\n\nWell, the hope is that users don't have to install bazel -- just need to run 'gcc' on the custom op that, say, lives in the TensorBox library (which you could package up via pip yourself, etc). That's the situation I'd love to be in :)\n\nI guess I'll have to look into exactly what is possible with the current system, but you have to understand that I'm not only interested in a system which is possible for users to add the hungarian layer, but one where it is easy. That's just a much higher bar, and say, even requiring them to install bazel would miss the mark entirely. Bazel is so rapidly developed that there's at least a 20% chance of an install taking > 15 minutes due to versioning problems. So I'm happy to learn about a bazel extension system, and it may indeed be much better than forcing them to recompile tensorflow from scratch (as they currently have to with my project). But @vrv is absolutely correct that I would prefer to just have my users say \"make hungarian\", which would call the native gcc to create a .so, and link that in at runtime with some python magic than to have them muck around with a brand new build system (bazel). Note also that my project currently suggests people to get started by ignoring the hungarian layer and just use a simpler model for exactly these complexity reasons.\nEdit: Okay, yes it seems that your link here: https://www.tensorflow.org/versions/r0.10/how_tos/adding_an_op/index.html#with-tensorflow-binary-installation is what I was looking for. Thanks guys!", "body": "@kaveman My quote \n\n> I guess we'll just have to keep an eye on this as the extension system matures?\n\nwas a reaction to the comment of @vrv that \n\n> Well, the hope is that users don't have to install bazel -- just need to run 'gcc' on the custom op that, say, lives in the TensorBox library (which you could package up via pip yourself, etc). That's the situation I'd love to be in :)\n\nI guess I'll have to look into exactly what is possible with the current system, but you have to understand that I'm not only interested in a system which is _possible_ for users to add the hungarian layer, but one where it is _easy_. That's just a much higher bar, and say, even requiring them to install bazel would miss the mark entirely. Bazel is so rapidly developed that there's at least a 20% chance of an install taking > 15 minutes due to versioning problems. So I'm happy to learn about a bazel extension system, and it may indeed be much better than forcing them to recompile tensorflow from scratch (as they currently have to with my project). But @vrv is absolutely correct that I would prefer to just have my users say \"make hungarian\", which would call the native gcc to create a .so, and link that in at runtime with some python magic than to have them muck around with a brand new build system (bazel). Note also that my project currently suggests people to get started by ignoring the hungarian layer and just use a simpler model for exactly these complexity reasons.\n\nEdit: Okay, yes it seems that your link here: https://www.tensorflow.org/versions/r0.10/how_tos/adding_an_op/index.html#with-tensorflow-binary-installation is what I was looking for. Thanks guys!\n"}