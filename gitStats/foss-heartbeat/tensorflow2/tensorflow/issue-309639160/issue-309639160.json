{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18079", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18079/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18079/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18079/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18079", "id": 309639160, "node_id": "MDU6SXNzdWUzMDk2MzkxNjA=", "number": 18079, "title": "Can't get the dim of input when the Dataset is from generator.", "user": {"login": "imhuay", "id": 13265495, "node_id": "MDQ6VXNlcjEzMjY1NDk1", "avatar_url": "https://avatars2.githubusercontent.com/u/13265495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imhuay", "html_url": "https://github.com/imhuay", "followers_url": "https://api.github.com/users/imhuay/followers", "following_url": "https://api.github.com/users/imhuay/following{/other_user}", "gists_url": "https://api.github.com/users/imhuay/gists{/gist_id}", "starred_url": "https://api.github.com/users/imhuay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imhuay/subscriptions", "organizations_url": "https://api.github.com/users/imhuay/orgs", "repos_url": "https://api.github.com/users/imhuay/repos", "events_url": "https://api.github.com/users/imhuay/events{/privacy}", "received_events_url": "https://api.github.com/users/imhuay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-03-29T06:52:12Z", "updated_at": "2018-04-03T01:35:54Z", "closed_at": "2018-04-02T17:30:48Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.6</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When use <code>from_generator</code> way to get dataset, it can't get the output shape of it. And then pass the features of it to the layers, the layer can't get the rank of it.</p>\n<p>But it is wok well use <code>from_tensor_slices</code> way to get the dataset.</p>\n<p>I am not sure if it is a bug. The tutorial mainly use <code>from_tensor_slices</code> as emamples. But I think the action should be same when use these ways to get the dataset.</p>\n<h3>Source code / logs</h3>\n<pre><code>    def csv_yield(csv_path):\n        with open(csv_path, newline='') as f:\n            next(f)  # skip the first line\n            reader = csv.reader(f)\n            features, labels = [], []\n            for line in reader:\n                feature, label = [float(i) for i in line[:-1]], int(line[-1])\n                yield feature, label\n\n\n    ds_train = tf.data.Dataset.from_generator(lambda: csv_yield(r\"../data/iris/iris_training.csv\"),\n                                              output_types=(tf.float32, tf.int32))\n    ds_train = ds_train.shuffle(1000).batch(16).repeat(5)\n    features, labels = ds_train.make_one_shot_iterator().get_next()\n\n    net = tf.layers.dense(features, units=10, activation=tf.nn.relu)\n</code></pre>\n<p><code>ValueError: Input 0 of layer dense_1 is incompatible with the layer: its rank is undefined, but the layer requires a defined rank.</code></p>\n<p>But is is ok when use <code>tf.data.Dataset.from_tensor_slices</code>, The only difference between of them is the way of dataset. They shouldn't have different actions.</p>\n<pre><code>    def read_csv(csv_path):\n        with open(csv_path, newline='') as f:\n            next(f)  # skip the first line\n            reader = csv.reader(f)\n            features, labels = [], []\n            for line in reader:\n                feature, label = [float(i) for i in line[:-1]], int(line[-1])\n                # yield feature, label\n                features.append(feature)\n                labels.append(label)\n            return features, labels\n\n\n    ds_train = tf.data.Dataset.from_tensor_slices(read_csv(r\"../data/iris/iris_training.csv\"))\n    ds_train = ds_train.shuffle(1000).batch(16).repeat(5)\n    features, labels = ds_train.make_one_shot_iterator().get_next()\n\n    net = tf.layers.dense(features, units=10, activation=tf.nn.relu)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): pip\nTensorFlow version (use command below): 1.6\nPython version: 3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nWhen use from_generator way to get dataset, it can't get the output shape of it. And then pass the features of it to the layers, the layer can't get the rank of it.\nBut it is wok well use from_tensor_slices way to get the dataset.\nI am not sure if it is a bug. The tutorial mainly use from_tensor_slices as emamples. But I think the action should be same when use these ways to get the dataset.\nSource code / logs\n    def csv_yield(csv_path):\n        with open(csv_path, newline='') as f:\n            next(f)  # skip the first line\n            reader = csv.reader(f)\n            features, labels = [], []\n            for line in reader:\n                feature, label = [float(i) for i in line[:-1]], int(line[-1])\n                yield feature, label\n\n\n    ds_train = tf.data.Dataset.from_generator(lambda: csv_yield(r\"../data/iris/iris_training.csv\"),\n                                              output_types=(tf.float32, tf.int32))\n    ds_train = ds_train.shuffle(1000).batch(16).repeat(5)\n    features, labels = ds_train.make_one_shot_iterator().get_next()\n\n    net = tf.layers.dense(features, units=10, activation=tf.nn.relu)\n\nValueError: Input 0 of layer dense_1 is incompatible with the layer: its rank is undefined, but the layer requires a defined rank.\nBut is is ok when use tf.data.Dataset.from_tensor_slices, The only difference between of them is the way of dataset. They shouldn't have different actions.\n    def read_csv(csv_path):\n        with open(csv_path, newline='') as f:\n            next(f)  # skip the first line\n            reader = csv.reader(f)\n            features, labels = [], []\n            for line in reader:\n                feature, label = [float(i) for i in line[:-1]], int(line[-1])\n                # yield feature, label\n                features.append(feature)\n                labels.append(label)\n            return features, labels\n\n\n    ds_train = tf.data.Dataset.from_tensor_slices(read_csv(r\"../data/iris/iris_training.csv\"))\n    ds_train = ds_train.shuffle(1000).batch(16).repeat(5)\n    features, labels = ds_train.make_one_shot_iterator().get_next()\n\n    net = tf.layers.dense(features, units=10, activation=tf.nn.relu)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: pip\r\n- **TensorFlow version (use command below)**: 1.6\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: \r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\n\r\nWhen use `from_generator` way to get dataset, it can't get the output shape of it. And then pass the features of it to the layers, the layer can't get the rank of it.\r\n\r\nBut it is wok well use `from_tensor_slices` way to get the dataset.\r\n\r\nI am not sure if it is a bug. The tutorial mainly use `from_tensor_slices` as emamples. But I think the action should be same when use these ways to get the dataset.\r\n\r\n### Source code / logs\r\n\r\n```\r\n    def csv_yield(csv_path):\r\n        with open(csv_path, newline='') as f:\r\n            next(f)  # skip the first line\r\n            reader = csv.reader(f)\r\n            features, labels = [], []\r\n            for line in reader:\r\n                feature, label = [float(i) for i in line[:-1]], int(line[-1])\r\n                yield feature, label\r\n\r\n\r\n    ds_train = tf.data.Dataset.from_generator(lambda: csv_yield(r\"../data/iris/iris_training.csv\"),\r\n                                              output_types=(tf.float32, tf.int32))\r\n    ds_train = ds_train.shuffle(1000).batch(16).repeat(5)\r\n    features, labels = ds_train.make_one_shot_iterator().get_next()\r\n\r\n    net = tf.layers.dense(features, units=10, activation=tf.nn.relu)\r\n```\r\n\r\n`ValueError: Input 0 of layer dense_1 is incompatible with the layer: its rank is undefined, but the layer requires a defined rank.`\r\n\r\nBut is is ok when use `tf.data.Dataset.from_tensor_slices`, The only difference between of them is the way of dataset. They shouldn't have different actions.\r\n\r\n```\r\n    def read_csv(csv_path):\r\n        with open(csv_path, newline='') as f:\r\n            next(f)  # skip the first line\r\n            reader = csv.reader(f)\r\n            features, labels = [], []\r\n            for line in reader:\r\n                feature, label = [float(i) for i in line[:-1]], int(line[-1])\r\n                # yield feature, label\r\n                features.append(feature)\r\n                labels.append(label)\r\n            return features, labels\r\n\r\n\r\n    ds_train = tf.data.Dataset.from_tensor_slices(read_csv(r\"../data/iris/iris_training.csv\"))\r\n    ds_train = ds_train.shuffle(1000).batch(16).repeat(5)\r\n    features, labels = ds_train.make_one_shot_iterator().get_next()\r\n\r\n    net = tf.layers.dense(features, units=10, activation=tf.nn.relu)\r\n```\r\n\r\n"}