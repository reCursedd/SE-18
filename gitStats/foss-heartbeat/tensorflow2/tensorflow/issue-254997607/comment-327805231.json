{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327805231", "html_url": "https://github.com/tensorflow/tensorflow/issues/12793#issuecomment-327805231", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12793", "id": 327805231, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzgwNTIzMQ==", "user": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-07T13:49:56Z", "updated_at": "2017-09-07T13:49:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=28526467\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/luchensk\">@luchensk</a></p>\n<p>The constructor of <code>tf_debug.DumpingDebugWrapper</code> provides a keyword argument called <code>watch_fn</code>, which can be used to control what tensors get watched on each run. <code>watch_fn</code> is a callable that takes fetch and feed names as input arguments and out puts an instance of <a href=\"https://www.tensorflow.org/api_docs/python/tfdbg/WatchOptions\" rel=\"nofollow\"><code>tf_debug.WatchOptions</code></a>. The following example shows how to let the DumpingDebugWrapper dump to disk only for the 100th to 200th <code>Session.run()</code> calls:</p>\n<div class=\"highlight highlight-source-python\"><pre>counter <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">my_watch_fn</span>(<span class=\"pl-smi\">fetches</span>, <span class=\"pl-smi\">feeds</span>):\n  <span class=\"pl-k\">del</span> fetches, feeds  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Not used. But you could use them to dump runs of specific fetches/feeds.</span>\n  watch_opt <span class=\"pl-k\">=</span> tf_debug.WatchOptions(<span class=\"pl-v\">debug_ops</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DebugIdentity<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">node_name_regex_whitelist</span><span class=\"pl-k\">=</span><span class=\"pl-sr\"><span class=\"pl-k\">r</span><span class=\"pl-pds\">\"</span><span class=\"pl-c1\">.</span><span class=\"pl-k\">*</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">if</span> (counter <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">100</span> <span class=\"pl-k\">and</span> counter <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">200</span>) <span class=\"pl-k\">else</span> <span class=\"pl-sr\"><span class=\"pl-k\">r</span><span class=\"pl-pds\">\"</span><span class=\"pl-c1\">$</span><span class=\"pl-c1\">^</span><span class=\"pl-pds\">\"</span></span>) \n  counter <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">1</span>\n  <span class=\"pl-k\">return</span> watch_opt\n\nsess <span class=\"pl-k\">=</span> tf_debug.DumpingDebugWrapperSession(sess, <span class=\"pl-v\">watch_fn</span><span class=\"pl-k\">=</span>my_watch_fn)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>", "body_text": "@luchensk\nThe constructor of tf_debug.DumpingDebugWrapper provides a keyword argument called watch_fn, which can be used to control what tensors get watched on each run. watch_fn is a callable that takes fetch and feed names as input arguments and out puts an instance of tf_debug.WatchOptions. The following example shows how to let the DumpingDebugWrapper dump to disk only for the 100th to 200th Session.run() calls:\ncounter = 0\ndef my_watch_fn(fetches, feeds):\n  del fetches, feeds  # Not used. But you could use them to dump runs of specific fetches/feeds.\n  watch_opt = tf_debug.WatchOptions(debug_ops=\"DebugIdentity\", node_name_regex_whitelist=r\".*\" if (counter >= 100 and counter < 200) else r\"$^\") \n  counter += 1\n  return watch_opt\n\nsess = tf_debug.DumpingDebugWrapperSession(sess, watch_fn=my_watch_fn)\n# ...", "body": "@luchensk \r\n\r\nThe constructor of `tf_debug.DumpingDebugWrapper` provides a keyword argument called `watch_fn`, which can be used to control what tensors get watched on each run. `watch_fn` is a callable that takes fetch and feed names as input arguments and out puts an instance of [`tf_debug.WatchOptions`](https://www.tensorflow.org/api_docs/python/tfdbg/WatchOptions). The following example shows how to let the DumpingDebugWrapper dump to disk only for the 100th to 200th `Session.run()` calls:\r\n\r\n``` python\r\ncounter = 0\r\ndef my_watch_fn(fetches, feeds):\r\n  del fetches, feeds  # Not used. But you could use them to dump runs of specific fetches/feeds.\r\n  watch_opt = tf_debug.WatchOptions(debug_ops=\"DebugIdentity\", node_name_regex_whitelist=r\".*\" if (counter >= 100 and counter < 200) else r\"$^\") \r\n  counter += 1\r\n  return watch_opt\r\n\r\nsess = tf_debug.DumpingDebugWrapperSession(sess, watch_fn=my_watch_fn)\r\n# ...\r\n```"}