{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17014", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17014/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17014/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17014/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17014", "id": 297177529, "node_id": "MDU6SXNzdWUyOTcxNzc1Mjk=", "number": 17014, "title": "Importing graph with tf.contrib.resampler.resampler fails", "user": {"login": "stefanbrugger", "id": 5682925, "node_id": "MDQ6VXNlcjU2ODI5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5682925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefanbrugger", "html_url": "https://github.com/stefanbrugger", "followers_url": "https://api.github.com/users/stefanbrugger/followers", "following_url": "https://api.github.com/users/stefanbrugger/following{/other_user}", "gists_url": "https://api.github.com/users/stefanbrugger/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefanbrugger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefanbrugger/subscriptions", "organizations_url": "https://api.github.com/users/stefanbrugger/orgs", "repos_url": "https://api.github.com/users/stefanbrugger/repos", "events_url": "https://api.github.com/users/stefanbrugger/events{/privacy}", "received_events_url": "https://api.github.com/users/stefanbrugger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "malcolmreynolds", "id": 36041, "node_id": "MDQ6VXNlcjM2MDQx", "avatar_url": "https://avatars2.githubusercontent.com/u/36041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malcolmreynolds", "html_url": "https://github.com/malcolmreynolds", "followers_url": "https://api.github.com/users/malcolmreynolds/followers", "following_url": "https://api.github.com/users/malcolmreynolds/following{/other_user}", "gists_url": "https://api.github.com/users/malcolmreynolds/gists{/gist_id}", "starred_url": "https://api.github.com/users/malcolmreynolds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malcolmreynolds/subscriptions", "organizations_url": "https://api.github.com/users/malcolmreynolds/orgs", "repos_url": "https://api.github.com/users/malcolmreynolds/repos", "events_url": "https://api.github.com/users/malcolmreynolds/events{/privacy}", "received_events_url": "https://api.github.com/users/malcolmreynolds/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "malcolmreynolds", "id": 36041, "node_id": "MDQ6VXNlcjM2MDQx", "avatar_url": "https://avatars2.githubusercontent.com/u/36041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malcolmreynolds", "html_url": "https://github.com/malcolmreynolds", "followers_url": "https://api.github.com/users/malcolmreynolds/followers", "following_url": "https://api.github.com/users/malcolmreynolds/following{/other_user}", "gists_url": "https://api.github.com/users/malcolmreynolds/gists{/gist_id}", "starred_url": "https://api.github.com/users/malcolmreynolds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malcolmreynolds/subscriptions", "organizations_url": "https://api.github.com/users/malcolmreynolds/orgs", "repos_url": "https://api.github.com/users/malcolmreynolds/repos", "events_url": "https://api.github.com/users/malcolmreynolds/events{/privacy}", "received_events_url": "https://api.github.com/users/malcolmreynolds/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-02-14T17:17:26Z", "updated_at": "2018-04-27T19:16:59Z", "closed_at": "2018-04-27T19:16:59Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nOSx High Sierra</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\npip install</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.5.0</li>\n<li><strong>Python version</strong>:<br>\n3.5.4</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nCPU</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>GPU model and memory</strong>:<br>\nN/A</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nSee below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Importing a graph def with a  <code>tf.contrib.resampler.resampler</code> op fails iff <code>tf.contrib</code> is not imported first.</p>\n<p>Execute:</p>\n<pre><code>import tensorflow as tf\n\ndef export_model(filename, sess, output_node_names):\n    from tensorflow.python.framework import graph_util\n    output_graph_def = graph_util.convert_variables_to_constants(sess,\n                                                                 sess.graph.as_graph_def(add_shapes=True),\n                                                                 output_node_names)\n    with tf.gfile.GFile(filename, \"wb\") as f:\n        f.write(output_graph_def.SerializeToString())\n        \ndef read_frozen_protobuf(path):\n    with tf.gfile.FastGFile(str(path), 'rb') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n        return graph_def\n\n    \ndef export(filename):\n    tf.reset_default_graph()\n    g = tf.Graph()\n    with tf.Session(graph=g, config=tf.ConfigProto(allow_soft_placement=True)) as sess:\n        images = tf.placeholder(dtype=tf.float64, shape=[32, 32], name='images')\n        points = tf.placeholder(dtype=tf.float64, shape=[32, 2], name='points')\n        resampled = tf.contrib.resampler.resampler(images, points, name='resampled')\n        output_node_names = ['resampled/Resampler']\n        export_model(filename, sess, output_node_names)\n        \ndef load(filename):\n    import numpy as np\n    tf.reset_default_graph()\n    g = tf.Graph()\n    with tf.Session(graph=g, config=tf.ConfigProto(allow_soft_placement=True)) as sess:\n        images = np.zeros((32, 32), dtype=np.float64)\n        points = np.zeros((32, 2), dtype=np.float64)\n        graph_def = read_frozen_protobuf(filename)\n        tf.import_graph_def(graph_def, \n                            input_map={'images': images,\n                                       'points': points},\n                            return_elements=['resampled/Resampler:0'])\n        \n######################################################\nfrozen_graph_def = '/tmp/test.frozen'\nexport(frozen_graph_def)\nload(frozen_graph_def)\n</code></pre>\n<p>Then, in a new interpreter (where the load(..) function is defined), execute:</p>\n<pre><code>frozen_graph_def = '/tmp/test.frozen'\nload(frozen_graph_def)\n</code></pre>\n<p>This give the error message:</p>\n<pre><code>---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-1-64251e160f7d&gt; in &lt;module&gt;()\n     42 frozen_graph_def = '/tmp/test.frozen'\n     43 # export(frozen_graph_def)\n---&gt; 44 load(frozen_graph_def)\n\n&lt;ipython-input-1-64251e160f7d&gt; in load(filename)\n     37                             input_map={'images': images,\n     38                                        'points': points},\n---&gt; 39                             return_elements=['resampled/Resampler:0'])\n     40 \n     41 ######################################################################\n\n/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    314                 'in a future version' if date is None else ('after %s' % date),\n    315                 instructions)\n--&gt; 316       return func(*args, **kwargs)\n    317     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n    318                                        _add_deprecated_arg_notice_to_docstring(\n\n/lib/python3.5/site-packages/tensorflow/python/framework/importer.py in import_graph_def(graph_def, input_map, return_elements, name, op_dict, producer_op_list)\n    539         # Set any default attr values that aren't present.\n    540         if node.op not in op_dict:\n--&gt; 541           raise ValueError('No op named %s in defined operations.' % node.op)\n    542         op_def = op_dict[node.op]\n    543         for attr_def in op_def.attr:\n\nValueError: No op named Resampler in defined operations.\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nOSx High Sierra\nTensorFlow installed from (source or binary):\npip install\nTensorFlow version (use command below):\n1.5.0\nPython version:\n3.5.4\nCUDA/cuDNN version:\nCPU\nBazel version (if compiling from source):\nN/A\nGPU model and memory:\nN/A\nExact command to reproduce:\nSee below\n\nDescribe the problem\nImporting a graph def with a  tf.contrib.resampler.resampler op fails iff tf.contrib is not imported first.\nExecute:\nimport tensorflow as tf\n\ndef export_model(filename, sess, output_node_names):\n    from tensorflow.python.framework import graph_util\n    output_graph_def = graph_util.convert_variables_to_constants(sess,\n                                                                 sess.graph.as_graph_def(add_shapes=True),\n                                                                 output_node_names)\n    with tf.gfile.GFile(filename, \"wb\") as f:\n        f.write(output_graph_def.SerializeToString())\n        \ndef read_frozen_protobuf(path):\n    with tf.gfile.FastGFile(str(path), 'rb') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n        return graph_def\n\n    \ndef export(filename):\n    tf.reset_default_graph()\n    g = tf.Graph()\n    with tf.Session(graph=g, config=tf.ConfigProto(allow_soft_placement=True)) as sess:\n        images = tf.placeholder(dtype=tf.float64, shape=[32, 32], name='images')\n        points = tf.placeholder(dtype=tf.float64, shape=[32, 2], name='points')\n        resampled = tf.contrib.resampler.resampler(images, points, name='resampled')\n        output_node_names = ['resampled/Resampler']\n        export_model(filename, sess, output_node_names)\n        \ndef load(filename):\n    import numpy as np\n    tf.reset_default_graph()\n    g = tf.Graph()\n    with tf.Session(graph=g, config=tf.ConfigProto(allow_soft_placement=True)) as sess:\n        images = np.zeros((32, 32), dtype=np.float64)\n        points = np.zeros((32, 2), dtype=np.float64)\n        graph_def = read_frozen_protobuf(filename)\n        tf.import_graph_def(graph_def, \n                            input_map={'images': images,\n                                       'points': points},\n                            return_elements=['resampled/Resampler:0'])\n        \n######################################################\nfrozen_graph_def = '/tmp/test.frozen'\nexport(frozen_graph_def)\nload(frozen_graph_def)\n\nThen, in a new interpreter (where the load(..) function is defined), execute:\nfrozen_graph_def = '/tmp/test.frozen'\nload(frozen_graph_def)\n\nThis give the error message:\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-1-64251e160f7d> in <module>()\n     42 frozen_graph_def = '/tmp/test.frozen'\n     43 # export(frozen_graph_def)\n---> 44 load(frozen_graph_def)\n\n<ipython-input-1-64251e160f7d> in load(filename)\n     37                             input_map={'images': images,\n     38                                        'points': points},\n---> 39                             return_elements=['resampled/Resampler:0'])\n     40 \n     41 ######################################################################\n\n/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    314                 'in a future version' if date is None else ('after %s' % date),\n    315                 instructions)\n--> 316       return func(*args, **kwargs)\n    317     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n    318                                        _add_deprecated_arg_notice_to_docstring(\n\n/lib/python3.5/site-packages/tensorflow/python/framework/importer.py in import_graph_def(graph_def, input_map, return_elements, name, op_dict, producer_op_list)\n    539         # Set any default attr values that aren't present.\n    540         if node.op not in op_dict:\n--> 541           raise ValueError('No op named %s in defined operations.' % node.op)\n    542         op_def = op_dict[node.op]\n    543         for attr_def in op_def.attr:\n\nValueError: No op named Resampler in defined operations.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nOSx High Sierra\r\n- **TensorFlow installed from (source or binary)**:\r\npip install\r\n- **TensorFlow version (use command below)**:\r\n1.5.0\r\n- **Python version**: \r\n3.5.4\r\n- **CUDA/cuDNN version**:\r\nCPU\r\n- **Bazel version (if compiling from source)**:\r\nN/A\r\n- **GPU model and memory**:\r\nN/A\r\n- **Exact command to reproduce**:\r\nSee below\r\n\r\n\r\n### Describe the problem\r\nImporting a graph def with a  `tf.contrib.resampler.resampler` op fails iff `tf.contrib` is not imported first.\r\n\r\nExecute:\r\n```\r\nimport tensorflow as tf\r\n\r\ndef export_model(filename, sess, output_node_names):\r\n    from tensorflow.python.framework import graph_util\r\n    output_graph_def = graph_util.convert_variables_to_constants(sess,\r\n                                                                 sess.graph.as_graph_def(add_shapes=True),\r\n                                                                 output_node_names)\r\n    with tf.gfile.GFile(filename, \"wb\") as f:\r\n        f.write(output_graph_def.SerializeToString())\r\n        \r\ndef read_frozen_protobuf(path):\r\n    with tf.gfile.FastGFile(str(path), 'rb') as f:\r\n        graph_def = tf.GraphDef()\r\n        graph_def.ParseFromString(f.read())\r\n        return graph_def\r\n\r\n    \r\ndef export(filename):\r\n    tf.reset_default_graph()\r\n    g = tf.Graph()\r\n    with tf.Session(graph=g, config=tf.ConfigProto(allow_soft_placement=True)) as sess:\r\n        images = tf.placeholder(dtype=tf.float64, shape=[32, 32], name='images')\r\n        points = tf.placeholder(dtype=tf.float64, shape=[32, 2], name='points')\r\n        resampled = tf.contrib.resampler.resampler(images, points, name='resampled')\r\n        output_node_names = ['resampled/Resampler']\r\n        export_model(filename, sess, output_node_names)\r\n        \r\ndef load(filename):\r\n    import numpy as np\r\n    tf.reset_default_graph()\r\n    g = tf.Graph()\r\n    with tf.Session(graph=g, config=tf.ConfigProto(allow_soft_placement=True)) as sess:\r\n        images = np.zeros((32, 32), dtype=np.float64)\r\n        points = np.zeros((32, 2), dtype=np.float64)\r\n        graph_def = read_frozen_protobuf(filename)\r\n        tf.import_graph_def(graph_def, \r\n                            input_map={'images': images,\r\n                                       'points': points},\r\n                            return_elements=['resampled/Resampler:0'])\r\n        \r\n######################################################\r\nfrozen_graph_def = '/tmp/test.frozen'\r\nexport(frozen_graph_def)\r\nload(frozen_graph_def)\r\n```\r\n\r\nThen, in a new interpreter (where the load(..) function is defined), execute:\r\n```\r\nfrozen_graph_def = '/tmp/test.frozen'\r\nload(frozen_graph_def)\r\n```\r\n\r\nThis give the error message:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-1-64251e160f7d> in <module>()\r\n     42 frozen_graph_def = '/tmp/test.frozen'\r\n     43 # export(frozen_graph_def)\r\n---> 44 load(frozen_graph_def)\r\n\r\n<ipython-input-1-64251e160f7d> in load(filename)\r\n     37                             input_map={'images': images,\r\n     38                                        'points': points},\r\n---> 39                             return_elements=['resampled/Resampler:0'])\r\n     40 \r\n     41 ######################################################################\r\n\r\n/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    314                 'in a future version' if date is None else ('after %s' % date),\r\n    315                 instructions)\r\n--> 316       return func(*args, **kwargs)\r\n    317     return tf_decorator.make_decorator(func, new_func, 'deprecated',\r\n    318                                        _add_deprecated_arg_notice_to_docstring(\r\n\r\n/lib/python3.5/site-packages/tensorflow/python/framework/importer.py in import_graph_def(graph_def, input_map, return_elements, name, op_dict, producer_op_list)\r\n    539         # Set any default attr values that aren't present.\r\n    540         if node.op not in op_dict:\r\n--> 541           raise ValueError('No op named %s in defined operations.' % node.op)\r\n    542         op_def = op_dict[node.op]\r\n    543         for attr_def in op_def.attr:\r\n\r\nValueError: No op named Resampler in defined operations.\r\n```"}