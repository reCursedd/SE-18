{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15292", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15292/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15292/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15292/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15292", "id": 281247397, "node_id": "MDU6SXNzdWUyODEyNDczOTc=", "number": 15292, "title": "Converting a .pb file to .meta in TF 1.3", "user": {"login": "amirjamez", "id": 8922398, "node_id": "MDQ6VXNlcjg5MjIzOTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8922398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amirjamez", "html_url": "https://github.com/amirjamez", "followers_url": "https://api.github.com/users/amirjamez/followers", "following_url": "https://api.github.com/users/amirjamez/following{/other_user}", "gists_url": "https://api.github.com/users/amirjamez/gists{/gist_id}", "starred_url": "https://api.github.com/users/amirjamez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amirjamez/subscriptions", "organizations_url": "https://api.github.com/users/amirjamez/orgs", "repos_url": "https://api.github.com/users/amirjamez/repos", "events_url": "https://api.github.com/users/amirjamez/events{/privacy}", "received_events_url": "https://api.github.com/users/amirjamez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2017-12-12T03:41:58Z", "updated_at": "2018-06-10T18:47:29Z", "closed_at": "2018-06-10T18:32:56Z", "author_association": "NONE", "body_html": "<p>Using <code>tf.slim</code>'s pre-trained models we can <a href=\"https://github.com/tensorflow/models/tree/master/research/slim#exporting-the-inference-graph\">export_inference_graph</a> to generate a <code>.pb</code> file for a given <code>.ckpt</code>, say <code>inception_v3</code>. Is there a way to generate <code>.meta</code> file of inception_v3 using these two files as well?</p>\n<p>My specific use case is that I need to see the pre-trained weights if inception in each tensor (<code>tf.variable</code>) and don't know any other way to retrieve other using .meta and .ckpt to do so and I lack <code>.meta</code> here:</p>\n<pre><code>#retrieve a pre-trained model\nsess = tf.Session()\nsaver = tf.train.import_meta_graph('./model.meta')\nsaver.restore(sess,'./model.ckpt')\n</code></pre>\n<p><strong>Steps to reproduce:</strong></p>\n<p>I used the instution in export_inference_graph and generated a .pb file, then I exported the .meta file as bellow:</p>\n<pre><code>sess=tf.Session()\nINCEPTION_PB='./inception_v3_inf_graph.pb'\n    \nf=gfile.FastGFile(INCEPTION_PB,'rb')\ngraph_def = tf.GraphDef()\ngraph_def.ParseFromString(f.read())\n_= tf.import_graph_def(graph_def,name='')\nmeta_graph_def = tf.train.export_meta_graph(filename='./inception.meta')\n</code></pre>\n<p>However, this results in a <code>.meta</code> file without collections, thus can not initialized:</p>\n<pre><code>&gt;&gt;&gt; saver = tf.train.import_meta_graph('./inception.meta')\nINFO:tensorflow:Saver not created because there are no variables in the graph to restore\n</code></pre>\n<pre><code> &gt;&gt;&gt; saver.restore(sess,'../../inception_v3.ckpt')\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'NoneType' object has no attribute 'restore'\n</code></pre>\n<p>What is the problem here? I guess it would be nice this conversion feature is added to TF.</p>\n<p>Info:<br>\nHave I written custom code: Not much except these above.<br>\nOS Platform and Distribution: Ubuntu 14.04.3 - 3.19.0-25-generic<br>\nTensorFlow installed from: pip installation<br>\nTensorFlow version - v1.3<br>\nBazel version: v5.4<br>\nCUDA/cuDNN version:  v6.0<br>\nGPU model and memory: NVIDIA GeForce GTX 1060 6GB - memoryClockRate (GHz) 1.7845</p>", "body_text": "Using tf.slim's pre-trained models we can export_inference_graph to generate a .pb file for a given .ckpt, say inception_v3. Is there a way to generate .meta file of inception_v3 using these two files as well?\nMy specific use case is that I need to see the pre-trained weights if inception in each tensor (tf.variable) and don't know any other way to retrieve other using .meta and .ckpt to do so and I lack .meta here:\n#retrieve a pre-trained model\nsess = tf.Session()\nsaver = tf.train.import_meta_graph('./model.meta')\nsaver.restore(sess,'./model.ckpt')\n\nSteps to reproduce:\nI used the instution in export_inference_graph and generated a .pb file, then I exported the .meta file as bellow:\nsess=tf.Session()\nINCEPTION_PB='./inception_v3_inf_graph.pb'\n    \nf=gfile.FastGFile(INCEPTION_PB,'rb')\ngraph_def = tf.GraphDef()\ngraph_def.ParseFromString(f.read())\n_= tf.import_graph_def(graph_def,name='')\nmeta_graph_def = tf.train.export_meta_graph(filename='./inception.meta')\n\nHowever, this results in a .meta file without collections, thus can not initialized:\n>>> saver = tf.train.import_meta_graph('./inception.meta')\nINFO:tensorflow:Saver not created because there are no variables in the graph to restore\n\n >>> saver.restore(sess,'../../inception_v3.ckpt')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: 'NoneType' object has no attribute 'restore'\n\nWhat is the problem here? I guess it would be nice this conversion feature is added to TF.\nInfo:\nHave I written custom code: Not much except these above.\nOS Platform and Distribution: Ubuntu 14.04.3 - 3.19.0-25-generic\nTensorFlow installed from: pip installation\nTensorFlow version - v1.3\nBazel version: v5.4\nCUDA/cuDNN version:  v6.0\nGPU model and memory: NVIDIA GeForce GTX 1060 6GB - memoryClockRate (GHz) 1.7845", "body": "Using `tf.slim`'s pre-trained models we can [export_inference_graph](https://github.com/tensorflow/models/tree/master/research/slim#exporting-the-inference-graph) to generate a `.pb` file for a given `.ckpt`, say `inception_v3`. Is there a way to generate `.meta` file of inception_v3 using these two files as well? \r\n\r\nMy specific use case is that I need to see the pre-trained weights if inception in each tensor (`tf.variable`) and don't know any other way to retrieve other using .meta and .ckpt to do so and I lack `.meta` here:\r\n\r\n```\r\n#retrieve a pre-trained model\r\nsess = tf.Session()\r\nsaver = tf.train.import_meta_graph('./model.meta')\r\nsaver.restore(sess,'./model.ckpt')\r\n```\r\n\r\n\r\n**Steps to reproduce:**\r\n\r\nI used the instution in export_inference_graph and generated a .pb file, then I exported the .meta file as bellow:\r\n\r\n```\r\nsess=tf.Session()\r\nINCEPTION_PB='./inception_v3_inf_graph.pb'\r\n    \r\nf=gfile.FastGFile(INCEPTION_PB,'rb')\r\ngraph_def = tf.GraphDef()\r\ngraph_def.ParseFromString(f.read())\r\n_= tf.import_graph_def(graph_def,name='')\r\nmeta_graph_def = tf.train.export_meta_graph(filename='./inception.meta')\r\n```\r\nHowever, this results in a `.meta` file without collections, thus can not initialized:\r\n\r\n```\r\n>>> saver = tf.train.import_meta_graph('./inception.meta')\r\nINFO:tensorflow:Saver not created because there are no variables in the graph to restore\r\n```\r\n\r\n```\r\n >>> saver.restore(sess,'../../inception_v3.ckpt')\r\nTraceback (most recent call last):\r\nFile \"<stdin>\", line 1, in <module>\r\nAttributeError: 'NoneType' object has no attribute 'restore'\r\n```\r\n\r\nWhat is the problem here? I guess it would be nice this conversion feature is added to TF.\r\n\r\nInfo: \r\nHave I written custom code: Not much except these above.\r\nOS Platform and Distribution: Ubuntu 14.04.3 - 3.19.0-25-generic\r\nTensorFlow installed from: pip installation \r\nTensorFlow version - v1.3\r\nBazel version: v5.4\r\nCUDA/cuDNN version:  v6.0\r\nGPU model and memory: NVIDIA GeForce GTX 1060 6GB - memoryClockRate (GHz) 1.7845\r\n\r\n\r\n\r\n"}