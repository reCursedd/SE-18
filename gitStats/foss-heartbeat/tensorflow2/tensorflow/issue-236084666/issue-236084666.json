{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10721", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10721/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10721/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10721/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/10721", "id": 236084666, "node_id": "MDExOlB1bGxSZXF1ZXN0MTI1NzQ2NzA4", "number": 10721, "title": "DataFeeder fails on default random_state", "user": {"login": "mdymczyk", "id": 1208615, "node_id": "MDQ6VXNlcjEyMDg2MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1208615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdymczyk", "html_url": "https://github.com/mdymczyk", "followers_url": "https://api.github.com/users/mdymczyk/followers", "following_url": "https://api.github.com/users/mdymczyk/following{/other_user}", "gists_url": "https://api.github.com/users/mdymczyk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdymczyk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdymczyk/subscriptions", "organizations_url": "https://api.github.com/users/mdymczyk/orgs", "repos_url": "https://api.github.com/users/mdymczyk/repos", "events_url": "https://api.github.com/users/mdymczyk/events{/privacy}", "received_events_url": "https://api.github.com/users/mdymczyk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "mdymczyk", "id": 1208615, "node_id": "MDQ6VXNlcjEyMDg2MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1208615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdymczyk", "html_url": "https://github.com/mdymczyk", "followers_url": "https://api.github.com/users/mdymczyk/followers", "following_url": "https://api.github.com/users/mdymczyk/following{/other_user}", "gists_url": "https://api.github.com/users/mdymczyk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdymczyk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdymczyk/subscriptions", "organizations_url": "https://api.github.com/users/mdymczyk/orgs", "repos_url": "https://api.github.com/users/mdymczyk/repos", "events_url": "https://api.github.com/users/mdymczyk/events{/privacy}", "received_events_url": "https://api.github.com/users/mdymczyk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mdymczyk", "id": 1208615, "node_id": "MDQ6VXNlcjEyMDg2MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1208615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdymczyk", "html_url": "https://github.com/mdymczyk", "followers_url": "https://api.github.com/users/mdymczyk/followers", "following_url": "https://api.github.com/users/mdymczyk/following{/other_user}", "gists_url": "https://api.github.com/users/mdymczyk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdymczyk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdymczyk/subscriptions", "organizations_url": "https://api.github.com/users/mdymczyk/orgs", "repos_url": "https://api.github.com/users/mdymczyk/repos", "events_url": "https://api.github.com/users/mdymczyk/events{/privacy}", "received_events_url": "https://api.github.com/users/mdymczyk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 21, "created_at": "2017-06-15T05:55:22Z", "updated_at": "2017-11-07T23:16:35Z", "closed_at": "2017-11-07T23:16:35Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10721", "html_url": "https://github.com/tensorflow/tensorflow/pull/10721", "diff_url": "https://github.com/tensorflow/tensorflow/pull/10721.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/10721.patch"}, "body_html": "<p>Fixes <code>len() of unsized object</code> error in <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/learn/python/learn/learn_io/data_feeder.py#L367\">DataFeeder</a> due to incorrect object type.</p>\n<p>Tested with Python 3.5 and latest Tensorflow (1.1.0). Failed on</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow.contrib.learn import KMeansClustering\nfrom tensorflow.contrib.learn import SKCompat\n\ndef my_input_fn(df):\n    return {k: tf.constant(df[k].values) for k in df.columns}\n\ndef train_input_fn():\n    return my_input_fn(pd.DataFrame(train_data)) # train_data is anything that can be passed to pd.DataFrame()\n\nmodel = SKCompat(KMeansClustering(num_clusters=k))\nmodel.fit(x = train_input_fn(), y = None)\n</code></pre>\n<p>Resulted in:</p>\n<pre><code>tensorflow/contrib/learn/python/learn/learn_io/data_feeder.py in __init__(self, x, y, n_classes, batch_size, shuffle, random_state, epochs)\n    365         0] if x_is_dict else self._x.shape[0]\n    366     if self._shuffle:\n--&gt; 367       self.indices = self.random_state.permutation(num_samples)\n    368     else:\n    369       self.indices = np.array(range(num_samples))\n\nmtrand.pyx in mtrand.RandomState.permutation (numpy/random/mtrand/mtrand.c:39959)()\n\nmtrand.pyx in mtrand.RandomState.shuffle (numpy/random/mtrand/mtrand.c:38843)()\n\nTypeError: len() of unsized object\n</code></pre>\n<p>Couldn't find any myself, but is there any workaround for this?</p>", "body_text": "Fixes len() of unsized object error in DataFeeder due to incorrect object type.\nTested with Python 3.5 and latest Tensorflow (1.1.0). Failed on\nimport tensorflow as tf\nfrom tensorflow.contrib.learn import KMeansClustering\nfrom tensorflow.contrib.learn import SKCompat\n\ndef my_input_fn(df):\n    return {k: tf.constant(df[k].values) for k in df.columns}\n\ndef train_input_fn():\n    return my_input_fn(pd.DataFrame(train_data)) # train_data is anything that can be passed to pd.DataFrame()\n\nmodel = SKCompat(KMeansClustering(num_clusters=k))\nmodel.fit(x = train_input_fn(), y = None)\n\nResulted in:\ntensorflow/contrib/learn/python/learn/learn_io/data_feeder.py in __init__(self, x, y, n_classes, batch_size, shuffle, random_state, epochs)\n    365         0] if x_is_dict else self._x.shape[0]\n    366     if self._shuffle:\n--> 367       self.indices = self.random_state.permutation(num_samples)\n    368     else:\n    369       self.indices = np.array(range(num_samples))\n\nmtrand.pyx in mtrand.RandomState.permutation (numpy/random/mtrand/mtrand.c:39959)()\n\nmtrand.pyx in mtrand.RandomState.shuffle (numpy/random/mtrand/mtrand.c:38843)()\n\nTypeError: len() of unsized object\n\nCouldn't find any myself, but is there any workaround for this?", "body": "Fixes `len() of unsized object` error in [DataFeeder](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/learn/python/learn/learn_io/data_feeder.py#L367) due to incorrect object type.\r\n\r\nTested with Python 3.5 and latest Tensorflow (1.1.0). Failed on\r\n\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.learn import KMeansClustering\r\nfrom tensorflow.contrib.learn import SKCompat\r\n\r\ndef my_input_fn(df):\r\n    return {k: tf.constant(df[k].values) for k in df.columns}\r\n\r\ndef train_input_fn():\r\n    return my_input_fn(pd.DataFrame(train_data)) # train_data is anything that can be passed to pd.DataFrame()\r\n\r\nmodel = SKCompat(KMeansClustering(num_clusters=k))\r\nmodel.fit(x = train_input_fn(), y = None)\r\n```\r\n\r\nResulted in:\r\n\r\n```\r\ntensorflow/contrib/learn/python/learn/learn_io/data_feeder.py in __init__(self, x, y, n_classes, batch_size, shuffle, random_state, epochs)\r\n    365         0] if x_is_dict else self._x.shape[0]\r\n    366     if self._shuffle:\r\n--> 367       self.indices = self.random_state.permutation(num_samples)\r\n    368     else:\r\n    369       self.indices = np.array(range(num_samples))\r\n\r\nmtrand.pyx in mtrand.RandomState.permutation (numpy/random/mtrand/mtrand.c:39959)()\r\n\r\nmtrand.pyx in mtrand.RandomState.shuffle (numpy/random/mtrand/mtrand.c:38843)()\r\n\r\nTypeError: len() of unsized object\r\n```\r\n\r\nCouldn't find any myself, but is there any workaround for this?"}