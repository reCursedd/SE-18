{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18345", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18345/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18345/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18345/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18345", "id": 312504055, "node_id": "MDU6SXNzdWUzMTI1MDQwNTU=", "number": 18345, "title": "Using Tensorflow with RNNs & batch normalisation", "user": {"login": "TBastiani", "id": 286440, "node_id": "MDQ6VXNlcjI4NjQ0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/286440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TBastiani", "html_url": "https://github.com/TBastiani", "followers_url": "https://api.github.com/users/TBastiani/followers", "following_url": "https://api.github.com/users/TBastiani/following{/other_user}", "gists_url": "https://api.github.com/users/TBastiani/gists{/gist_id}", "starred_url": "https://api.github.com/users/TBastiani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TBastiani/subscriptions", "organizations_url": "https://api.github.com/users/TBastiani/orgs", "repos_url": "https://api.github.com/users/TBastiani/repos", "events_url": "https://api.github.com/users/TBastiani/events{/privacy}", "received_events_url": "https://api.github.com/users/TBastiani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-04-09T12:06:02Z", "updated_at": "2018-09-09T16:28:39Z", "closed_at": "2018-09-09T16:28:39Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code</strong>: Yes</li>\n<li><strong>OS Platform and Distribution</strong>: Archlinux/Linux 4.14</li>\n<li><strong>TensorFlow installed from</strong>: source (will segfault before <a href=\"https://github.com/tensorflow/tensorflow/commit/7535f6beb7ba95bf54e1513b0c2c51b844a7a49f\">7535f6b</a>)</li>\n<li><strong>TensorFlow version</strong>: b'unknown' 1.7.0 / latest master</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version</strong>: 0.11.1</li>\n<li><strong>GCC/Compiler version</strong>: 7.3.0</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.1/7.1.2</li>\n<li><strong>GPU model and memory</strong>: Titan XP/12GB</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When trying to run the source code below I get an error saying there's a cycle in my graph. This only seems to happen with XLA enabled and does not happen if I don't include the <a href=\"https://www.tensorflow.org/api_docs/python/tf/layers/batch_normalization\" rel=\"nofollow\">additional required control dependency for batch normalisation</a>. Indeed this seems to occur whenever I use a dynamic RNN in combination with batch normalisation and XLA JIT support.</p>\n<h4>Sample code to reproduce</h4>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf                                                                                                                                                                                                                       \n\n<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/cpu:0<span class=\"pl-pds\">'</span></span>):\n    xin <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>input<span class=\"pl-pds\">'</span></span>)\n    rnn_cell <span class=\"pl-k\">=</span> tf.contrib.rnn.LSTMCell(<span class=\"pl-c1\">1</span>)\n    out, _ <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(rnn_cell, xin, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    out <span class=\"pl-k\">=</span> tf.layers.batch_normalization(out, <span class=\"pl-v\">training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    out <span class=\"pl-k\">=</span> tf.identity(out, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>output<span class=\"pl-pds\">'</span></span>)\n\n    optimiser <span class=\"pl-k\">=</span> tf.train.AdamOptimizer(<span class=\"pl-c1\">.0001</span>)\n    update_ops <span class=\"pl-k\">=</span> tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">UPDATE_OPS</span>)\n    <span class=\"pl-k\">with</span> tf.control_dependencies(update_ops):\n        out <span class=\"pl-k\">=</span> optimiser.minimize(out, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>tf.Variable(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>train_op<span class=\"pl-pds\">'</span></span>)\n\nconfig <span class=\"pl-k\">=</span> tf.ConfigProto(<span class=\"pl-v\">allow_soft_placement</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>)\nsess <span class=\"pl-k\">=</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config)\nsess.run(tf.global_variables_initializer())\n\nsample_in <span class=\"pl-k\">=</span> [[[<span class=\"pl-c1\">0</span>]]]\nsess.run(out, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{xin: sample_in})</pre></div>\n<h4>Output log</h4>\n<pre><code>2018-04-03 13:09:24.326950: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1212] Found device 0 with properties:                                                                                                                          \nname: TITAN Xp major: 6 minor: 1 memoryClockRate(GHz): 1.582\npciBusID: 0000:65:00.0\ntotalMemory: 11.90GiB freeMemory: 11.74GiB\n2018-04-03 13:09:24.326982: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1312] Adding visible gpu devices: 0\n2018-04-03 13:09:24.512956: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 11366 MB memory) -&gt; physical GPU (device: 0, name: TITAN Xp, pci bus id: 0000:65:00.0, compute capability: 6.1)\nTraceback (most recent call last):\n  File \"/home/thom/.python/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1361, in _do_call\n    return fn(*args)\n  File \"/home/thom/.python/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1340, in _run_fn\n    target_list, status, run_metadata)\n  File \"/home/thom/.python/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py\", line 516, in __exit__\n    c_api.TF_GetCode(self.status.status))\ntensorflow.python.framework.errors_impl.InternalError: Cycle detected when adding enter-&gt;frame edge: Edge from gradients/f_count to (null) would create a cycle.\n+-&gt; (null)\n|   rnn/TensorArrayStack/TensorArrayGatherV3\n|   rnn/transpose_1\n|   batch_normalization/moments/mean\n|   batch_normalization/moments/Squeeze\n|   batch_normalization/AssignMovingAvg/sub\n|   batch_normalization/AssignMovingAvg/mul\n|   batch_normalization/AssignMovingAvg\n+-- gradients/f_count\n</code></pre>\n<h3>Workaround</h3>\n<p>I seem to be able to workaround the issue by relying on <a href=\"https://www.tensorflow.org/api_docs/python/tf/contrib/layers/batch_norm\" rel=\"nofollow\"><code>tf.contrib.layers.batch_norm</code></a> instead of <a href=\"https://www.tensorflow.org/api_docs/python/tf/layers/batch_normalization\" rel=\"nofollow\"><code>tf.layers.batch_normalization</code></a> by setting the <code>updates_collections</code> parameter to <code>None</code> in order to force inlining of the update operation.</p>\n<h4>Sample code with workaround</h4>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf                                                                                                                                                                                                                       \n\n<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/cpu:0<span class=\"pl-pds\">'</span></span>):\n    xin <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>input<span class=\"pl-pds\">'</span></span>)\n    rnn_cell <span class=\"pl-k\">=</span> tf.contrib.rnn.LSTMCell(<span class=\"pl-c1\">1</span>)\n    out, _ <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(rnn_cell, xin, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    out <span class=\"pl-k\">=</span> tf.contrib.layers.batch_norm(out, <span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">updates_collections</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>)\n    out <span class=\"pl-k\">=</span> tf.identity(out, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>output<span class=\"pl-pds\">'</span></span>)\n\n    optimiser <span class=\"pl-k\">=</span> tf.train.AdamOptimizer(<span class=\"pl-c1\">.0001</span>)\n    out <span class=\"pl-k\">=</span> optimiser.minimize(out, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>tf.Variable(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>train_op<span class=\"pl-pds\">'</span></span>)\n\nconfig <span class=\"pl-k\">=</span> tf.ConfigProto(<span class=\"pl-v\">allow_soft_placement</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>)\nsess <span class=\"pl-k\">=</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config)\nsess.run(tf.global_variables_initializer())\n\nsample_in <span class=\"pl-k\">=</span> [[[<span class=\"pl-c1\">0</span>]]]\nsess.run(out, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{xin: sample_in})</pre></div>\n<h3>Additional information</h3>\n<ol>\n<li>I have already submitted a question on <a href=\"https://stackoverflow.com/questions/49630269/using-tensorflow-with-rnns-batch-normalisation\" rel=\"nofollow\">Stack Overflow</a> a week ago and have had no answers so far.</li>\n<li>Make sure you try and reproduce the issue on the tip of master or the sample will cause a segmentation fault.</li>\n</ol>", "body_text": "System information\n\nHave I written custom code: Yes\nOS Platform and Distribution: Archlinux/Linux 4.14\nTensorFlow installed from: source (will segfault before 7535f6b)\nTensorFlow version: b'unknown' 1.7.0 / latest master\nPython version: 3.6\nBazel version: 0.11.1\nGCC/Compiler version: 7.3.0\nCUDA/cuDNN version: 9.1/7.1.2\nGPU model and memory: Titan XP/12GB\nExact command to reproduce: See below\n\nDescribe the problem\nWhen trying to run the source code below I get an error saying there's a cycle in my graph. This only seems to happen with XLA enabled and does not happen if I don't include the additional required control dependency for batch normalisation. Indeed this seems to occur whenever I use a dynamic RNN in combination with batch normalisation and XLA JIT support.\nSample code to reproduce\nimport tensorflow as tf                                                                                                                                                                                                                       \n\nwith tf.device('/cpu:0'):\n    xin = tf.placeholder(tf.float32, [None, 1, 1], name='input')\n    rnn_cell = tf.contrib.rnn.LSTMCell(1)\n    out, _ = tf.nn.dynamic_rnn(rnn_cell, xin, dtype=tf.float32)\n    out = tf.layers.batch_normalization(out, training=True)\n    out = tf.identity(out, name='output')\n\n    optimiser = tf.train.AdamOptimizer(.0001)\n    update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\n    with tf.control_dependencies(update_ops):\n        out = optimiser.minimize(out, global_step=tf.Variable(0, dtype=tf.float32), name='train_op')\n\nconfig = tf.ConfigProto(allow_soft_placement = False)\nsess = tf.Session(config=config)\nsess.run(tf.global_variables_initializer())\n\nsample_in = [[[0]]]\nsess.run(out, feed_dict={xin: sample_in})\nOutput log\n2018-04-03 13:09:24.326950: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1212] Found device 0 with properties:                                                                                                                          \nname: TITAN Xp major: 6 minor: 1 memoryClockRate(GHz): 1.582\npciBusID: 0000:65:00.0\ntotalMemory: 11.90GiB freeMemory: 11.74GiB\n2018-04-03 13:09:24.326982: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1312] Adding visible gpu devices: 0\n2018-04-03 13:09:24.512956: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 11366 MB memory) -> physical GPU (device: 0, name: TITAN Xp, pci bus id: 0000:65:00.0, compute capability: 6.1)\nTraceback (most recent call last):\n  File \"/home/thom/.python/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1361, in _do_call\n    return fn(*args)\n  File \"/home/thom/.python/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1340, in _run_fn\n    target_list, status, run_metadata)\n  File \"/home/thom/.python/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py\", line 516, in __exit__\n    c_api.TF_GetCode(self.status.status))\ntensorflow.python.framework.errors_impl.InternalError: Cycle detected when adding enter->frame edge: Edge from gradients/f_count to (null) would create a cycle.\n+-> (null)\n|   rnn/TensorArrayStack/TensorArrayGatherV3\n|   rnn/transpose_1\n|   batch_normalization/moments/mean\n|   batch_normalization/moments/Squeeze\n|   batch_normalization/AssignMovingAvg/sub\n|   batch_normalization/AssignMovingAvg/mul\n|   batch_normalization/AssignMovingAvg\n+-- gradients/f_count\n\nWorkaround\nI seem to be able to workaround the issue by relying on tf.contrib.layers.batch_norm instead of tf.layers.batch_normalization by setting the updates_collections parameter to None in order to force inlining of the update operation.\nSample code with workaround\nimport tensorflow as tf                                                                                                                                                                                                                       \n\nwith tf.device('/cpu:0'):\n    xin = tf.placeholder(tf.float32, [None, 1, 1], name='input')\n    rnn_cell = tf.contrib.rnn.LSTMCell(1)\n    out, _ = tf.nn.dynamic_rnn(rnn_cell, xin, dtype=tf.float32)\n    out = tf.contrib.layers.batch_norm(out, is_training=True, updates_collections=None)\n    out = tf.identity(out, name='output')\n\n    optimiser = tf.train.AdamOptimizer(.0001)\n    out = optimiser.minimize(out, global_step=tf.Variable(0, dtype=tf.float32), name='train_op')\n\nconfig = tf.ConfigProto(allow_soft_placement = False)\nsess = tf.Session(config=config)\nsess.run(tf.global_variables_initializer())\n\nsample_in = [[[0]]]\nsess.run(out, feed_dict={xin: sample_in})\nAdditional information\n\nI have already submitted a question on Stack Overflow a week ago and have had no answers so far.\nMake sure you try and reproduce the issue on the tip of master or the sample will cause a segmentation fault.", "body": "### System information\r\n- **Have I written custom code**: Yes\r\n- **OS Platform and Distribution**: Archlinux/Linux 4.14\r\n- **TensorFlow installed from**: source (will segfault before [7535f6b](https://github.com/tensorflow/tensorflow/commit/7535f6beb7ba95bf54e1513b0c2c51b844a7a49f))\r\n- **TensorFlow version**: b'unknown' 1.7.0 / latest master\r\n- **Python version**: 3.6\r\n- **Bazel version**: 0.11.1\r\n- **GCC/Compiler version**: 7.3.0\r\n- **CUDA/cuDNN version**: 9.1/7.1.2\r\n- **GPU model and memory**: Titan XP/12GB\r\n- **Exact command to reproduce**: See below\r\n\r\n### Describe the problem\r\n\r\nWhen trying to run the source code below I get an error saying there's a cycle in my graph. This only seems to happen with XLA enabled and does not happen if I don't include the [additional required control dependency for batch normalisation](https://www.tensorflow.org/api_docs/python/tf/layers/batch_normalization). Indeed this seems to occur whenever I use a dynamic RNN in combination with batch normalisation and XLA JIT support.\r\n\r\n#### Sample code to reproduce\r\n\r\n```Python\r\nimport tensorflow as tf                                                                                                                                                                                                                       \r\n\r\nwith tf.device('/cpu:0'):\r\n    xin = tf.placeholder(tf.float32, [None, 1, 1], name='input')\r\n    rnn_cell = tf.contrib.rnn.LSTMCell(1)\r\n    out, _ = tf.nn.dynamic_rnn(rnn_cell, xin, dtype=tf.float32)\r\n    out = tf.layers.batch_normalization(out, training=True)\r\n    out = tf.identity(out, name='output')\r\n\r\n    optimiser = tf.train.AdamOptimizer(.0001)\r\n    update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\r\n    with tf.control_dependencies(update_ops):\r\n        out = optimiser.minimize(out, global_step=tf.Variable(0, dtype=tf.float32), name='train_op')\r\n\r\nconfig = tf.ConfigProto(allow_soft_placement = False)\r\nsess = tf.Session(config=config)\r\nsess.run(tf.global_variables_initializer())\r\n\r\nsample_in = [[[0]]]\r\nsess.run(out, feed_dict={xin: sample_in})\r\n```\r\n#### Output log\r\n```\r\n2018-04-03 13:09:24.326950: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1212] Found device 0 with properties:                                                                                                                          \r\nname: TITAN Xp major: 6 minor: 1 memoryClockRate(GHz): 1.582\r\npciBusID: 0000:65:00.0\r\ntotalMemory: 11.90GiB freeMemory: 11.74GiB\r\n2018-04-03 13:09:24.326982: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1312] Adding visible gpu devices: 0\r\n2018-04-03 13:09:24.512956: I tensorflow/core/common_runtime/gpu/gpu_device.cc:993] Creating TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 11366 MB memory) -> physical GPU (device: 0, name: TITAN Xp, pci bus id: 0000:65:00.0, compute capability: 6.1)\r\nTraceback (most recent call last):\r\n  File \"/home/thom/.python/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1361, in _do_call\r\n    return fn(*args)\r\n  File \"/home/thom/.python/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1340, in _run_fn\r\n    target_list, status, run_metadata)\r\n  File \"/home/thom/.python/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py\", line 516, in __exit__\r\n    c_api.TF_GetCode(self.status.status))\r\ntensorflow.python.framework.errors_impl.InternalError: Cycle detected when adding enter->frame edge: Edge from gradients/f_count to (null) would create a cycle.\r\n+-> (null)\r\n|   rnn/TensorArrayStack/TensorArrayGatherV3\r\n|   rnn/transpose_1\r\n|   batch_normalization/moments/mean\r\n|   batch_normalization/moments/Squeeze\r\n|   batch_normalization/AssignMovingAvg/sub\r\n|   batch_normalization/AssignMovingAvg/mul\r\n|   batch_normalization/AssignMovingAvg\r\n+-- gradients/f_count\r\n```\r\n\r\n### Workaround\r\n\r\nI seem to be able to workaround the issue by relying on [`tf.contrib.layers.batch_norm`](https://www.tensorflow.org/api_docs/python/tf/contrib/layers/batch_norm) instead of [`tf.layers.batch_normalization`](https://www.tensorflow.org/api_docs/python/tf/layers/batch_normalization) by setting the `updates_collections` parameter to `None` in order to force inlining of the update operation.\r\n\r\n#### Sample code with workaround\r\n\r\n```Python\r\nimport tensorflow as tf                                                                                                                                                                                                                       \r\n\r\nwith tf.device('/cpu:0'):\r\n    xin = tf.placeholder(tf.float32, [None, 1, 1], name='input')\r\n    rnn_cell = tf.contrib.rnn.LSTMCell(1)\r\n    out, _ = tf.nn.dynamic_rnn(rnn_cell, xin, dtype=tf.float32)\r\n    out = tf.contrib.layers.batch_norm(out, is_training=True, updates_collections=None)\r\n    out = tf.identity(out, name='output')\r\n\r\n    optimiser = tf.train.AdamOptimizer(.0001)\r\n    out = optimiser.minimize(out, global_step=tf.Variable(0, dtype=tf.float32), name='train_op')\r\n\r\nconfig = tf.ConfigProto(allow_soft_placement = False)\r\nsess = tf.Session(config=config)\r\nsess.run(tf.global_variables_initializer())\r\n\r\nsample_in = [[[0]]]\r\nsess.run(out, feed_dict={xin: sample_in})\r\n```\r\n\r\n### Additional information\r\n\r\n1. I have already submitted a question on [Stack Overflow](https://stackoverflow.com/questions/49630269/using-tensorflow-with-rnns-batch-normalisation) a week ago and have had no answers so far.\r\n2. Make sure you try and reproduce the issue on the tip of master or the sample will cause a segmentation fault.\r\n"}