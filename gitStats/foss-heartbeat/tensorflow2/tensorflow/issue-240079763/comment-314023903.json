{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/314023903", "html_url": "https://github.com/tensorflow/tensorflow/pull/11234#issuecomment-314023903", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11234", "id": 314023903, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDAyMzkwMw==", "user": {"login": "guoyejun", "id": 10448440, "node_id": "MDQ6VXNlcjEwNDQ4NDQw", "avatar_url": "https://avatars1.githubusercontent.com/u/10448440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guoyejun", "html_url": "https://github.com/guoyejun", "followers_url": "https://api.github.com/users/guoyejun/followers", "following_url": "https://api.github.com/users/guoyejun/following{/other_user}", "gists_url": "https://api.github.com/users/guoyejun/gists{/gist_id}", "starred_url": "https://api.github.com/users/guoyejun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guoyejun/subscriptions", "organizations_url": "https://api.github.com/users/guoyejun/orgs", "repos_url": "https://api.github.com/users/guoyejun/repos", "events_url": "https://api.github.com/users/guoyejun/events{/privacy}", "received_events_url": "https://api.github.com/users/guoyejun/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-10T07:10:53Z", "updated_at": "2017-07-10T07:10:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The SYCL kernels are registered with different methods. Some sycl kernels are registered with TF_CALL_float/double, TF_CALL_GPU_NUMBER_TYPES_NO_HALF and TF_CALL_NUMBER_TYPES_NO_INT32 defined in register_types.h. Some are registered with REGISTER* defined in cwise_ops_common.h. And some are registered specially with the macro defined within its own .cc file, for example, fill_functor.cc.</p>\n<p>It's hard to find only one place to handle all the cases (for example, as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1849778\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jwlawson\">@jwlawson</a> mentioned, cwise ops cannot benifit from register_types.h ). With spirit of what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1849778\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jwlawson\">@jwlawson</a> suggested, we can try to reduce the places of #ifdef as less as possible.</p>\n<p>For all the cwise ops, we can use one #ifdef in cwise_ops_common.h to handle double, and future half float usage. I'll upload the patch. For other sycl kernel categories, we can use the same spirit to reduce the number of #ifdef.</p>", "body_text": "The SYCL kernels are registered with different methods. Some sycl kernels are registered with TF_CALL_float/double, TF_CALL_GPU_NUMBER_TYPES_NO_HALF and TF_CALL_NUMBER_TYPES_NO_INT32 defined in register_types.h. Some are registered with REGISTER* defined in cwise_ops_common.h. And some are registered specially with the macro defined within its own .cc file, for example, fill_functor.cc.\nIt's hard to find only one place to handle all the cases (for example, as @jwlawson mentioned, cwise ops cannot benifit from register_types.h ). With spirit of what @jwlawson suggested, we can try to reduce the places of #ifdef as less as possible.\nFor all the cwise ops, we can use one #ifdef in cwise_ops_common.h to handle double, and future half float usage. I'll upload the patch. For other sycl kernel categories, we can use the same spirit to reduce the number of #ifdef.", "body": "The SYCL kernels are registered with different methods. Some sycl kernels are registered with TF_CALL_float/double, TF_CALL_GPU_NUMBER_TYPES_NO_HALF and TF_CALL_NUMBER_TYPES_NO_INT32 defined in register_types.h. Some are registered with REGISTER* defined in cwise_ops_common.h. And some are registered specially with the macro defined within its own .cc file, for example, fill_functor.cc.  \r\n\r\nIt's hard to find only one place to handle all the cases (for example, as @jwlawson mentioned, cwise ops cannot benifit from register_types.h ). With spirit of what @jwlawson suggested, we can try to reduce the places of #ifdef as less as possible. \r\n\r\nFor all the cwise ops, we can use one #ifdef in cwise_ops_common.h to handle double, and future half float usage. I'll upload the patch. For other sycl kernel categories, we can use the same spirit to reduce the number of #ifdef.\r\n"}