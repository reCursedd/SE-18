{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/164038802", "html_url": "https://github.com/tensorflow/tensorflow/issues/456#issuecomment-164038802", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/456", "id": 164038802, "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDAzODgwMg==", "user": {"login": "zheng-xq", "id": 15736910, "node_id": "MDQ6VXNlcjE1NzM2OTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/15736910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zheng-xq", "html_url": "https://github.com/zheng-xq", "followers_url": "https://api.github.com/users/zheng-xq/followers", "following_url": "https://api.github.com/users/zheng-xq/following{/other_user}", "gists_url": "https://api.github.com/users/zheng-xq/gists{/gist_id}", "starred_url": "https://api.github.com/users/zheng-xq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zheng-xq/subscriptions", "organizations_url": "https://api.github.com/users/zheng-xq/orgs", "repos_url": "https://api.github.com/users/zheng-xq/repos", "events_url": "https://api.github.com/users/zheng-xq/events{/privacy}", "received_events_url": "https://api.github.com/users/zheng-xq/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-11T20:20:21Z", "updated_at": "2015-12-11T20:20:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p>From an internal discussion, a workaround was suggested using Gumbel argmax trick as follows. We are still discussing whether we should include it in the python op library, or having a more efficient native implementation.</p>\n<hr>\n<p>Suppose we want to sample a bunch (say, N) of K-ary categorical distributions. Suppose further that none of the probabilities are exactly zero (to simulate a zero probability for one state just use a really really really small one).</p>\n<p>So we have an N by K matrix of of log probabilities X. So in other words we imagine our categorical distributions being expressed in softmax form as exp(X). So really we want to sample from exp(x_i) / sum_j exp(x_j).</p>\n<p>Generate a matrix of uniforms on (0,1) of the same shape as X. Call this matrix U.</p>\n<p>np.argmax(X - np.log(-np.log(U)), axis=1) gives us our samples.</p>\n<p><a href=\"https://hips.seas.harvard.edu/blog/2013/04/06/the-gumbel-max-trick-for-discrete-distributions/\" rel=\"nofollow\">https://hips.seas.harvard.edu/blog/2013/04/06/the-gumbel-max-trick-for-discrete-distributions/</a></p>", "body_text": "From an internal discussion, a workaround was suggested using Gumbel argmax trick as follows. We are still discussing whether we should include it in the python op library, or having a more efficient native implementation.\n\nSuppose we want to sample a bunch (say, N) of K-ary categorical distributions. Suppose further that none of the probabilities are exactly zero (to simulate a zero probability for one state just use a really really really small one).\nSo we have an N by K matrix of of log probabilities X. So in other words we imagine our categorical distributions being expressed in softmax form as exp(X). So really we want to sample from exp(x_i) / sum_j exp(x_j).\nGenerate a matrix of uniforms on (0,1) of the same shape as X. Call this matrix U.\nnp.argmax(X - np.log(-np.log(U)), axis=1) gives us our samples.\nhttps://hips.seas.harvard.edu/blog/2013/04/06/the-gumbel-max-trick-for-discrete-distributions/", "body": "From an internal discussion, a workaround was suggested using Gumbel argmax trick as follows. We are still discussing whether we should include it in the python op library, or having a more efficient native implementation. \n\n---\n\nSuppose we want to sample a bunch (say, N) of K-ary categorical distributions. Suppose further that none of the probabilities are exactly zero (to simulate a zero probability for one state just use a really really really small one).\n\nSo we have an N by K matrix of of log probabilities X. So in other words we imagine our categorical distributions being expressed in softmax form as exp(X). So really we want to sample from exp(x_i) / sum_j exp(x_j).\n\nGenerate a matrix of uniforms on (0,1) of the same shape as X. Call this matrix U.\n\nnp.argmax(X - np.log(-np.log(U)), axis=1) gives us our samples. \n\nhttps://hips.seas.harvard.edu/blog/2013/04/06/the-gumbel-max-trick-for-discrete-distributions/\n"}