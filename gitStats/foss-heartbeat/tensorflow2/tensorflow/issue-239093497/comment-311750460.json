{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/311750460", "html_url": "https://github.com/tensorflow/tensorflow/issues/11102#issuecomment-311750460", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11102", "id": 311750460, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTc1MDQ2MA==", "user": {"login": "TrsNium", "id": 11388424, "node_id": "MDQ6VXNlcjExMzg4NDI0", "avatar_url": "https://avatars1.githubusercontent.com/u/11388424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TrsNium", "html_url": "https://github.com/TrsNium", "followers_url": "https://api.github.com/users/TrsNium/followers", "following_url": "https://api.github.com/users/TrsNium/following{/other_user}", "gists_url": "https://api.github.com/users/TrsNium/gists{/gist_id}", "starred_url": "https://api.github.com/users/TrsNium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TrsNium/subscriptions", "organizations_url": "https://api.github.com/users/TrsNium/orgs", "repos_url": "https://api.github.com/users/TrsNium/repos", "events_url": "https://api.github.com/users/TrsNium/events{/privacy}", "received_events_url": "https://api.github.com/users/TrsNium/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-28T18:42:01Z", "updated_at": "2017-06-28T18:50:50Z", "author_association": "NONE", "body_html": "<p>helper = TrainingHelper(...)<br>\ndecoder = BasicDecoder(...)<br>\ndecoder_outputs, final_state, seq_len = tf.contrib.seq2seq.dynamic_decode(decoder, ## <strong>output_time_major=True</strong>)<br>\nrnn_out, sample_ids = decoder_outputs</p>\n<p>logits = tf.layers.dense(rnn_out[-1], target_vocab_size)</p>", "body_text": "helper = TrainingHelper(...)\ndecoder = BasicDecoder(...)\ndecoder_outputs, final_state, seq_len = tf.contrib.seq2seq.dynamic_decode(decoder, ## output_time_major=True)\nrnn_out, sample_ids = decoder_outputs\nlogits = tf.layers.dense(rnn_out[-1], target_vocab_size)", "body": "helper = TrainingHelper(...)\r\ndecoder = BasicDecoder(...)\r\ndecoder_outputs, final_state, seq_len = tf.contrib.seq2seq.dynamic_decode(decoder, ## **output_time_major=True**)\r\nrnn_out, sample_ids = decoder_outputs\r\n\r\nlogits = tf.layers.dense(rnn_out[-1], target_vocab_size)\r\n"}