{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/436824812", "html_url": "https://github.com/tensorflow/tensorflow/pull/21222#issuecomment-436824812", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21222", "id": 436824812, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjgyNDgxMg==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-08T00:10:33Z", "updated_at": "2018-11-08T00:10:33Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">My guess is that the initializer (and possibly dtype) are possibly\ndifferent!  Can you create the variables in both cases and compare their\ninitializers?</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Wed, Nov 7, 2018 at 4:03 PM, Mark Collier ***@***.***&gt; wrote:\n *<a class=\"user-mention\" href=\"https://github.com/MarkPKCollier\">@MarkPKCollier</a>* commented on this pull request.\n ------------------------------\n\n In tensorflow/contrib/rnn/python/ops/rnn_cell.py\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"345536176\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/21222\" href=\"https://github.com/tensorflow/tensorflow/pull/21222#discussion_r231724339\">#21222 (comment)</a>&gt;\n :\n\n &gt; +    # eq (9)\n +    w = w_sharpen / math_ops.reduce_sum(w_sharpen, axis=1, keepdims=True)\n +\n +    return w\n +\n +  def zero_state(self, batch_size, dtype):\n +    with vs.variable_scope('init', reuse=self.reuse):\n +      read_vector_list = [array_ops.zeros([batch_size, self.memory_vector_dim])\n +        for _ in range(self.read_head_num)]\n +\n +      w_list = [array_ops.zeros([batch_size, self.memory_size])\n +        for _ in range(self.read_head_num + self.write_head_num)]\n +\n +      controller_init_state = self.controller.zero_state(batch_size, dtype)\n +\n +      M = self._expand(vs.get_variable('init_M',\n\n Ok, this is where the issue arises. When I replace vs.get_variable with\n self.add_variable - I get much slower convergence, looking at the docs I\n don't see why this would be the case but I have tested that the\n initializer, trainable, etc. parameters are the same in both case.\n\n So given that for whatever reason the convergence rates are different with\n what should be a change that doesn't make a difference, is it acceptable to\n use vs.get_variable in the build method and avoid creating a variable in\n zero_state?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"345536176\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/21222\" href=\"https://github.com/tensorflow/tensorflow/pull/21222#discussion_r231724339\">#21222 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/ABtim-sMIMM3ZDxnFMQXshsCfZoluSetks5us3TAgaJpZM4Vlceb\">https://github.com/notifications/unsubscribe-auth/ABtim-sMIMM3ZDxnFMQXshsCfZoluSetks5us3TAgaJpZM4Vlceb</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "My guess is that the initializer (and possibly dtype) are possibly\ndifferent!  Can you create the variables in both cases and compare their\ninitializers?\n\u2026\nOn Wed, Nov 7, 2018 at 4:03 PM, Mark Collier ***@***.***> wrote:\n *@MarkPKCollier* commented on this pull request.\n ------------------------------\n\n In tensorflow/contrib/rnn/python/ops/rnn_cell.py\n <#21222 (comment)>\n :\n\n > +    # eq (9)\n +    w = w_sharpen / math_ops.reduce_sum(w_sharpen, axis=1, keepdims=True)\n +\n +    return w\n +\n +  def zero_state(self, batch_size, dtype):\n +    with vs.variable_scope('init', reuse=self.reuse):\n +      read_vector_list = [array_ops.zeros([batch_size, self.memory_vector_dim])\n +        for _ in range(self.read_head_num)]\n +\n +      w_list = [array_ops.zeros([batch_size, self.memory_size])\n +        for _ in range(self.read_head_num + self.write_head_num)]\n +\n +      controller_init_state = self.controller.zero_state(batch_size, dtype)\n +\n +      M = self._expand(vs.get_variable('init_M',\n\n Ok, this is where the issue arises. When I replace vs.get_variable with\n self.add_variable - I get much slower convergence, looking at the docs I\n don't see why this would be the case but I have tested that the\n initializer, trainable, etc. parameters are the same in both case.\n\n So given that for whatever reason the convergence rates are different with\n what should be a change that doesn't make a difference, is it acceptable to\n use vs.get_variable in the build method and avoid creating a variable in\n zero_state?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#21222 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/ABtim-sMIMM3ZDxnFMQXshsCfZoluSetks5us3TAgaJpZM4Vlceb>\n .", "body": "My guess is that the initializer (and possibly dtype) are possibly\ndifferent!  Can you create the variables in both cases and compare their\ninitializers?\n\nOn Wed, Nov 7, 2018 at 4:03 PM, Mark Collier <notifications@github.com>\nwrote:\n\n> *@MarkPKCollier* commented on this pull request.\n> ------------------------------\n>\n> In tensorflow/contrib/rnn/python/ops/rnn_cell.py\n> <https://github.com/tensorflow/tensorflow/pull/21222#discussion_r231724339>\n> :\n>\n> > +    # eq (9)\n> +    w = w_sharpen / math_ops.reduce_sum(w_sharpen, axis=1, keepdims=True)\n> +\n> +    return w\n> +\n> +  def zero_state(self, batch_size, dtype):\n> +    with vs.variable_scope('init', reuse=self.reuse):\n> +      read_vector_list = [array_ops.zeros([batch_size, self.memory_vector_dim])\n> +        for _ in range(self.read_head_num)]\n> +\n> +      w_list = [array_ops.zeros([batch_size, self.memory_size])\n> +        for _ in range(self.read_head_num + self.write_head_num)]\n> +\n> +      controller_init_state = self.controller.zero_state(batch_size, dtype)\n> +\n> +      M = self._expand(vs.get_variable('init_M',\n>\n> Ok, this is where the issue arises. When I replace vs.get_variable with\n> self.add_variable - I get much slower convergence, looking at the docs I\n> don't see why this would be the case but I have tested that the\n> initializer, trainable, etc. parameters are the same in both case.\n>\n> So given that for whatever reason the convergence rates are different with\n> what should be a change that doesn't make a difference, is it acceptable to\n> use vs.get_variable in the build method and avoid creating a variable in\n> zero_state?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/pull/21222#discussion_r231724339>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABtim-sMIMM3ZDxnFMQXshsCfZoluSetks5us3TAgaJpZM4Vlceb>\n> .\n>\n"}