{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/239055349", "html_url": "https://github.com/tensorflow/tensorflow/issues/2358#issuecomment-239055349", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2358", "id": 239055349, "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTA1NTM0OQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-11T01:56:35Z", "updated_at": "2016-08-11T01:56:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6753285\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/altaetran\">@altaetran</a> here's an example that uses a helper I wrote to simplify dealing with persistent tensors</p>\n<ol>\n<li>Download <a href=\"https://raw.githubusercontent.com/yaroslavvb/imperative/georgia/release/imperative.py\" rel=\"nofollow\">imperative.py</a> and save it in a place where you can import it (ie, same directory as your script)</li>\n</ol>\n<pre><code>import tensorflow as tf\nimport imperative\nenv = imperative.Env(tf)\ntfi = env.tf\n\nN_feat = 3\nZ = tfi.zeros([10, N_feat])\nX1 = tfi.constant([[1,0.00,1],\n[2,0.00,1],\n[3,0.00,1],\n[5,0.00,1.1],\n[6,1.0,1.8]])\n\nind = [0, 1, 1, 0, 0]\nfor right_pos, left_pos in enumerate(ind):\n    new_row = Z[left_pos, :]+X1[right_pos, :]\n    # turn vector into 1-by-x matrix so we can concat it\n    new_row_mat = tfi.reshape(new_row, [1, -1])\n    # make new Tensor with old row replaced by updated version\n    Z = tfi.concat(0, [Z[:left_pos, :], new_row_mat, Z[left_pos+1:, :]])\nprint Z\n\n</code></pre>\n<p>That should give</p>\n<pre><code>ITensor([[ 12.           1.           3.89999986]\n [  5.           0.           2.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]], dtype=float32)\n</code></pre>\n<p>I'm working on more docs for imperative.py, meanwhile there's an overview with some slides here<br>\n<a href=\"https://github.com/yaroslavvb/imperative/blob/master/imperative_slides.pdf\">https://github.com/yaroslavvb/imperative/blob/master/imperative_slides.pdf</a></p>", "body_text": "@altaetran here's an example that uses a helper I wrote to simplify dealing with persistent tensors\n\nDownload imperative.py and save it in a place where you can import it (ie, same directory as your script)\n\nimport tensorflow as tf\nimport imperative\nenv = imperative.Env(tf)\ntfi = env.tf\n\nN_feat = 3\nZ = tfi.zeros([10, N_feat])\nX1 = tfi.constant([[1,0.00,1],\n[2,0.00,1],\n[3,0.00,1],\n[5,0.00,1.1],\n[6,1.0,1.8]])\n\nind = [0, 1, 1, 0, 0]\nfor right_pos, left_pos in enumerate(ind):\n    new_row = Z[left_pos, :]+X1[right_pos, :]\n    # turn vector into 1-by-x matrix so we can concat it\n    new_row_mat = tfi.reshape(new_row, [1, -1])\n    # make new Tensor with old row replaced by updated version\n    Z = tfi.concat(0, [Z[:left_pos, :], new_row_mat, Z[left_pos+1:, :]])\nprint Z\n\n\nThat should give\nITensor([[ 12.           1.           3.89999986]\n [  5.           0.           2.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]], dtype=float32)\n\nI'm working on more docs for imperative.py, meanwhile there's an overview with some slides here\nhttps://github.com/yaroslavvb/imperative/blob/master/imperative_slides.pdf", "body": "@altaetran here's an example that uses a helper I wrote to simplify dealing with persistent tensors\n1. Download [imperative.py](https://raw.githubusercontent.com/yaroslavvb/imperative/georgia/release/imperative.py) and save it in a place where you can import it (ie, same directory as your script)\n\n```\nimport tensorflow as tf\nimport imperative\nenv = imperative.Env(tf)\ntfi = env.tf\n\nN_feat = 3\nZ = tfi.zeros([10, N_feat])\nX1 = tfi.constant([[1,0.00,1],\n[2,0.00,1],\n[3,0.00,1],\n[5,0.00,1.1],\n[6,1.0,1.8]])\n\nind = [0, 1, 1, 0, 0]\nfor right_pos, left_pos in enumerate(ind):\n    new_row = Z[left_pos, :]+X1[right_pos, :]\n    # turn vector into 1-by-x matrix so we can concat it\n    new_row_mat = tfi.reshape(new_row, [1, -1])\n    # make new Tensor with old row replaced by updated version\n    Z = tfi.concat(0, [Z[:left_pos, :], new_row_mat, Z[left_pos+1:, :]])\nprint Z\n\n```\n\nThat should give\n\n```\nITensor([[ 12.           1.           3.89999986]\n [  5.           0.           2.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]\n [  0.           0.           0.        ]], dtype=float32)\n```\n\nI'm working on more docs for imperative.py, meanwhile there's an overview with some slides here\nhttps://github.com/yaroslavvb/imperative/blob/master/imperative_slides.pdf\n"}