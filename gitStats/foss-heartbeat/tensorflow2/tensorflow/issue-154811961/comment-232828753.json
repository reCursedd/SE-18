{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/232828753", "html_url": "https://github.com/tensorflow/tensorflow/issues/2358#issuecomment-232828753", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2358", "id": 232828753, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjgyODc1Mw==", "user": {"login": "rryan", "id": 26527, "node_id": "MDQ6VXNlcjI2NTI3", "avatar_url": "https://avatars3.githubusercontent.com/u/26527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rryan", "html_url": "https://github.com/rryan", "followers_url": "https://api.github.com/users/rryan/followers", "following_url": "https://api.github.com/users/rryan/following{/other_user}", "gists_url": "https://api.github.com/users/rryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/rryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rryan/subscriptions", "organizations_url": "https://api.github.com/users/rryan/orgs", "repos_url": "https://api.github.com/users/rryan/repos", "events_url": "https://api.github.com/users/rryan/events{/privacy}", "received_events_url": "https://api.github.com/users/rryan/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-15T00:19:19Z", "updated_at": "2016-07-15T00:19:19Z", "author_association": "MEMBER", "body_html": "<p>It wont help with the gradient bit (and this is a non-public op) but based on your example code you could do:</p>\n<div class=\"highlight highlight-source-python\"><pre>Z <span class=\"pl-k\">=</span> gen_state_ops._temporary_variable(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">...</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">...</span>)\nZ_name <span class=\"pl-k\">=</span> Z.op.name\ndestroy_op <span class=\"pl-k\">=</span> gen_state_ops._destroy_temporary_variable(Z, <span class=\"pl-v\">var_name</span><span class=\"pl-k\">=</span>Z_name)\nX1_ph <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">3</span>))\nind_ph <span class=\"pl-k\">=</span> tf.placeholder(tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">None</span>))\nZ <span class=\"pl-k\">=</span> tf.scatter_add(Z, ind_ph, X1_ph)\n\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(steps):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> run Z with placeholders filled in for X1_ph and ind_ph</span>\n    sess.run(Z, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{X1_ph: <span class=\"pl-c1\">...</span>, ind_ph: <span class=\"pl-c1\">...</span>}) \n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> clean up -- destroy_op returns the value of Z and destroys the temporary variable</span>\n  sess.run(destroy_op) </pre></div>", "body_text": "It wont help with the gradient bit (and this is a non-public op) but based on your example code you could do:\nZ = gen_state_ops._temporary_variable(shape=..., dtype=...)\nZ_name = Z.op.name\ndestroy_op = gen_state_ops._destroy_temporary_variable(Z, var_name=Z_name)\nX1_ph = tf.placeholder(tf.float32, shape=(None, 3))\nind_ph = tf.placeholder(tf.int32, shape=(None))\nZ = tf.scatter_add(Z, ind_ph, X1_ph)\n\n\nwith tf.Session() as sess:\n  for _ in xrange(steps):\n    # run Z with placeholders filled in for X1_ph and ind_ph\n    sess.run(Z, feed_dict={X1_ph: ..., ind_ph: ...}) \n  # clean up -- destroy_op returns the value of Z and destroys the temporary variable\n  sess.run(destroy_op)", "body": "It wont help with the gradient bit (and this is a non-public op) but based on your example code you could do:\n\n``` python\nZ = gen_state_ops._temporary_variable(shape=..., dtype=...)\nZ_name = Z.op.name\ndestroy_op = gen_state_ops._destroy_temporary_variable(Z, var_name=Z_name)\nX1_ph = tf.placeholder(tf.float32, shape=(None, 3))\nind_ph = tf.placeholder(tf.int32, shape=(None))\nZ = tf.scatter_add(Z, ind_ph, X1_ph)\n\n\nwith tf.Session() as sess:\n  for _ in xrange(steps):\n    # run Z with placeholders filled in for X1_ph and ind_ph\n    sess.run(Z, feed_dict={X1_ph: ..., ind_ph: ...}) \n  # clean up -- destroy_op returns the value of Z and destroys the temporary variable\n  sess.run(destroy_op) \n```\n"}