{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/258934405", "html_url": "https://github.com/tensorflow/tensorflow/issues/5448#issuecomment-258934405", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5448", "id": 258934405, "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODkzNDQwNQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-07T19:19:48Z", "updated_at": "2016-11-07T19:19:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It looks like the issue here is that Python 2.7 unconditionally uses <code>os.fork()</code> in to implement <code>multiprocessing.Process.start()</code>, but the TensorFlow runtime is not fork-safe (for one thing, because it creates various internal threads and initialized static members at startup). Since in your example the parent process invokes the TensorFlow runtime, the child will be in an unspecified state when it attempts to do the first <code>sess.run()</code> call. (When I ran your code, it was blocking on a condition variable, waiting for constant propagation to finish, for example.)</p>\n<p>As far as I can tell, there is no way to make the Python 2.7 multiprocessing module do the \"right thing\" here. If you upgrade to Python 3.4, you can use <a href=\"https://docs.python.org/3/library/multiprocessing.html#multiprocessing.set_start_method\" rel=\"nofollow\"><code>multiprocessing.set_start_method('spawn')</code></a> to avoid the issues over fork-safety. Alternatively, you could structure your program so that the <code>import tensorflow as tf</code> statement only runs in child processes.</p>", "body_text": "It looks like the issue here is that Python 2.7 unconditionally uses os.fork() in to implement multiprocessing.Process.start(), but the TensorFlow runtime is not fork-safe (for one thing, because it creates various internal threads and initialized static members at startup). Since in your example the parent process invokes the TensorFlow runtime, the child will be in an unspecified state when it attempts to do the first sess.run() call. (When I ran your code, it was blocking on a condition variable, waiting for constant propagation to finish, for example.)\nAs far as I can tell, there is no way to make the Python 2.7 multiprocessing module do the \"right thing\" here. If you upgrade to Python 3.4, you can use multiprocessing.set_start_method('spawn') to avoid the issues over fork-safety. Alternatively, you could structure your program so that the import tensorflow as tf statement only runs in child processes.", "body": "It looks like the issue here is that Python 2.7 unconditionally uses `os.fork()` in to implement `multiprocessing.Process.start()`, but the TensorFlow runtime is not fork-safe (for one thing, because it creates various internal threads and initialized static members at startup). Since in your example the parent process invokes the TensorFlow runtime, the child will be in an unspecified state when it attempts to do the first `sess.run()` call. (When I ran your code, it was blocking on a condition variable, waiting for constant propagation to finish, for example.)\n\nAs far as I can tell, there is no way to make the Python 2.7 multiprocessing module do the \"right thing\" here. If you upgrade to Python 3.4, you can use [`multiprocessing.set_start_method('spawn')`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.set_start_method) to avoid the issues over fork-safety. Alternatively, you could structure your program so that the `import tensorflow as tf` statement only runs in child processes.\n"}