{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/258940888", "html_url": "https://github.com/tensorflow/tensorflow/issues/5448#issuecomment-258940888", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5448", "id": 258940888, "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODk0MDg4OA==", "user": {"login": "sherrym", "id": 12770037, "node_id": "MDQ6VXNlcjEyNzcwMDM3", "avatar_url": "https://avatars0.githubusercontent.com/u/12770037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sherrym", "html_url": "https://github.com/sherrym", "followers_url": "https://api.github.com/users/sherrym/followers", "following_url": "https://api.github.com/users/sherrym/following{/other_user}", "gists_url": "https://api.github.com/users/sherrym/gists{/gist_id}", "starred_url": "https://api.github.com/users/sherrym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sherrym/subscriptions", "organizations_url": "https://api.github.com/users/sherrym/orgs", "repos_url": "https://api.github.com/users/sherrym/repos", "events_url": "https://api.github.com/users/sherrym/events{/privacy}", "received_events_url": "https://api.github.com/users/sherrym/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-07T19:43:23Z", "updated_at": "2017-07-05T16:42:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2484842\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ramnath-k\">@ramnath-k</a> ,</p>\n<p>It appears to have hung because it's waiting for the main thread (or process) to yield the global interpreter lock. Make your processes daemon processes and it should work.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(num_procs):\n      p <span class=\"pl-k\">=</span> Process(<span class=\"pl-v\">target</span><span class=\"pl-k\">=</span>subprocess, <span class=\"pl-v\">args</span><span class=\"pl-k\">=</span>(i,))\n      p.daemon <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>            <span class=\"pl-k\">&lt;&lt;&lt;&lt;</span><span class=\"pl-k\">&lt;</span> Add this line.\n      p.start() <span class=\"pl-c\"><span class=\"pl-c\">#</span> process fails to get past initialize all variables</span>\n      procs.append(p)</pre></div>\n<p>I just tried it and it worked for me. I also made some simplifications:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">add_model</span>():\n  a <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">2</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>)\n  b <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">5</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>)\n  c <span class=\"pl-k\">=</span> tf.mul(a, b, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>c<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-k\">return</span> a, b, c\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">save_session</span>(<span class=\"pl-smi\">unused_arg</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n  <span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>tf.Graph()) <span class=\"pl-k\">as</span> sess:\n    a, b, c <span class=\"pl-k\">=</span> add_model()\n    saver <span class=\"pl-k\">=</span> tf.train.Saver(\n        tf.global_variables(),\n        <span class=\"pl-v\">max_to_keep</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n    init <span class=\"pl-k\">=</span> [\n        tf.global_variables_initializer(),\n        tf.local_variables_initializer()]\n    sess.run(init)\n    e <span class=\"pl-k\">=</span> tf.assign(a, <span class=\"pl-c1\">3</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>e<span class=\"pl-pds\">'</span></span>)\n    f <span class=\"pl-k\">=</span> tf.assign(b, <span class=\"pl-c1\">4</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>f<span class=\"pl-pds\">'</span></span>)\n    sess.run([e, f])\n    val <span class=\"pl-k\">=</span> sess.run(c)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>val=<span class=\"pl-pds\">'</span></span>, val)\n    checkpoint_dir <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./debug<span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> os.path.exists(checkpoint_dir):\n      os.makedirs(checkpoint_dir)\n    checkpoint_prefix <span class=\"pl-k\">=</span> os.path.join(checkpoint_dir, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>debug<span class=\"pl-pds\">'</span></span>)\n    path <span class=\"pl-k\">=</span> saver.save(\n        sess, checkpoint_prefix)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>save session complete<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">restore_session</span>(<span class=\"pl-smi\">unused_arg</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n  graph <span class=\"pl-k\">=</span> tf.Graph()\n  <span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>graph) <span class=\"pl-k\">as</span> sess:\n    pid <span class=\"pl-k\">=</span> os.getpid()\n    container_name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>worker<span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(pid)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>container:<span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(container_name))\n    <span class=\"pl-k\">with</span> graph.container(container_name):\n      a, b, c <span class=\"pl-k\">=</span> add_model()\n      saver <span class=\"pl-k\">=</span> tf.train.Saver(tf.global_variables())\n      <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>add model complete<span class=\"pl-pds\">'</span></span>)\n      init <span class=\"pl-k\">=</span> [\n          tf.global_variables_initializer(),\n          tf.local_variables_initializer()]\n      sess.run(init)\n      <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>init model complete<span class=\"pl-pds\">'</span></span>)\n      graph.finalize()\n      model_checkpoint <span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>debug/debug<span class=\"pl-pds\">'</span></span>\n      saver.restore(sess, model_checkpoint)\n      val <span class=\"pl-k\">=</span> sess.run(c)\n      <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>val=<span class=\"pl-pds\">'</span></span>, val)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">subprocess</span>(<span class=\"pl-smi\">i</span>):\n  <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>inside subprocess <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(i))\n  restore_session()\n  <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>exiting subprocess <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(i))\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">unused_argv</span>):\n  save_p <span class=\"pl-k\">=</span> Process(<span class=\"pl-v\">target</span><span class=\"pl-k\">=</span>save_session, <span class=\"pl-v\">args</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,))\n  save_p.start()\n  save_p.join()\n  restore_p <span class=\"pl-k\">=</span> Process(<span class=\"pl-v\">target</span><span class=\"pl-k\">=</span>restore_session, <span class=\"pl-v\">args</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,))\n  restore_p.start()\n  restore_p.join()\n  procs <span class=\"pl-k\">=</span> []\n  num_procs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>\n  <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(num_procs):\n      p <span class=\"pl-k\">=</span> Process(<span class=\"pl-v\">target</span><span class=\"pl-k\">=</span>subprocess, <span class=\"pl-v\">args</span><span class=\"pl-k\">=</span>(i,))\n      p.daemon <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n      p.start() <span class=\"pl-c\"><span class=\"pl-c\">#</span> process fails to get past initialize all variables</span>\n      procs.append(p)\n  <span class=\"pl-k\">for</span> p <span class=\"pl-k\">in</span> procs:\n      p.join()\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>:\n  tf.app.run()</pre></div>\n<p>Please` let me know if this works for you. Thanks.</p>\n<p>Sherry</p>", "body_text": "Hi @ramnath-k ,\nIt appears to have hung because it's waiting for the main thread (or process) to yield the global interpreter lock. Make your processes daemon processes and it should work.\nfor i in range(num_procs):\n      p = Process(target=subprocess, args=(i,))\n      p.daemon = True            <<<<< Add this line.\n      p.start() # process fails to get past initialize all variables\n      procs.append(p)\nI just tried it and it worked for me. I also made some simplifications:\ndef add_model():\n  a = tf.Variable(2, name='a')\n  b = tf.Variable(5, name='b')\n  c = tf.mul(a, b, name='c')\n  return a, b, c\n\ndef save_session(unused_arg=None):\n  with tf.Session(graph=tf.Graph()) as sess:\n    a, b, c = add_model()\n    saver = tf.train.Saver(\n        tf.global_variables(),\n        max_to_keep=1)\n    init = [\n        tf.global_variables_initializer(),\n        tf.local_variables_initializer()]\n    sess.run(init)\n    e = tf.assign(a, 3, name='e')\n    f = tf.assign(b, 4, name='f')\n    sess.run([e, f])\n    val = sess.run(c)\n    print('val=', val)\n    checkpoint_dir = './debug'\n    if not os.path.exists(checkpoint_dir):\n      os.makedirs(checkpoint_dir)\n    checkpoint_prefix = os.path.join(checkpoint_dir, 'debug')\n    path = saver.save(\n        sess, checkpoint_prefix)\n    print('save session complete')\n\ndef restore_session(unused_arg=None):\n  graph = tf.Graph()\n  with tf.Session(graph=graph) as sess:\n    pid = os.getpid()\n    container_name = 'worker{}'.format(pid)\n    print('container:{}'.format(container_name))\n    with graph.container(container_name):\n      a, b, c = add_model()\n      saver = tf.train.Saver(tf.global_variables())\n      print('add model complete')\n      init = [\n          tf.global_variables_initializer(),\n          tf.local_variables_initializer()]\n      sess.run(init)\n      print('init model complete')\n      graph.finalize()\n      model_checkpoint ='debug/debug'\n      saver.restore(sess, model_checkpoint)\n      val = sess.run(c)\n      print('val=', val)\n\n\ndef subprocess(i):\n  print('inside subprocess {}'.format(i))\n  restore_session()\n  print('exiting subprocess {}'.format(i))\n\n\ndef main(unused_argv):\n  save_p = Process(target=save_session, args=(1,))\n  save_p.start()\n  save_p.join()\n  restore_p = Process(target=restore_session, args=(1,))\n  restore_p.start()\n  restore_p.join()\n  procs = []\n  num_procs = 3\n  for i in range(num_procs):\n      p = Process(target=subprocess, args=(i,))\n      p.daemon = True\n      p.start() # process fails to get past initialize all variables\n      procs.append(p)\n  for p in procs:\n      p.join()\n\nif __name__ == \"__main__\":\n  tf.app.run()\nPlease` let me know if this works for you. Thanks.\nSherry", "body": "Hi @ramnath-k ,\r\n\r\nIt appears to have hung because it's waiting for the main thread (or process) to yield the global interpreter lock. Make your processes daemon processes and it should work.\r\n\r\n```python\r\nfor i in range(num_procs):\r\n      p = Process(target=subprocess, args=(i,))\r\n      p.daemon = True            <<<<< Add this line.\r\n      p.start() # process fails to get past initialize all variables\r\n      procs.append(p)\r\n```\r\n\r\nI just tried it and it worked for me. I also made some simplifications:\r\n\r\n```python\r\ndef add_model():\r\n  a = tf.Variable(2, name='a')\r\n  b = tf.Variable(5, name='b')\r\n  c = tf.mul(a, b, name='c')\r\n  return a, b, c\r\n\r\ndef save_session(unused_arg=None):\r\n  with tf.Session(graph=tf.Graph()) as sess:\r\n    a, b, c = add_model()\r\n    saver = tf.train.Saver(\r\n        tf.global_variables(),\r\n        max_to_keep=1)\r\n    init = [\r\n        tf.global_variables_initializer(),\r\n        tf.local_variables_initializer()]\r\n    sess.run(init)\r\n    e = tf.assign(a, 3, name='e')\r\n    f = tf.assign(b, 4, name='f')\r\n    sess.run([e, f])\r\n    val = sess.run(c)\r\n    print('val=', val)\r\n    checkpoint_dir = './debug'\r\n    if not os.path.exists(checkpoint_dir):\r\n      os.makedirs(checkpoint_dir)\r\n    checkpoint_prefix = os.path.join(checkpoint_dir, 'debug')\r\n    path = saver.save(\r\n        sess, checkpoint_prefix)\r\n    print('save session complete')\r\n\r\ndef restore_session(unused_arg=None):\r\n  graph = tf.Graph()\r\n  with tf.Session(graph=graph) as sess:\r\n    pid = os.getpid()\r\n    container_name = 'worker{}'.format(pid)\r\n    print('container:{}'.format(container_name))\r\n    with graph.container(container_name):\r\n      a, b, c = add_model()\r\n      saver = tf.train.Saver(tf.global_variables())\r\n      print('add model complete')\r\n      init = [\r\n          tf.global_variables_initializer(),\r\n          tf.local_variables_initializer()]\r\n      sess.run(init)\r\n      print('init model complete')\r\n      graph.finalize()\r\n      model_checkpoint ='debug/debug'\r\n      saver.restore(sess, model_checkpoint)\r\n      val = sess.run(c)\r\n      print('val=', val)\r\n\r\n\r\ndef subprocess(i):\r\n  print('inside subprocess {}'.format(i))\r\n  restore_session()\r\n  print('exiting subprocess {}'.format(i))\r\n\r\n\r\ndef main(unused_argv):\r\n  save_p = Process(target=save_session, args=(1,))\r\n  save_p.start()\r\n  save_p.join()\r\n  restore_p = Process(target=restore_session, args=(1,))\r\n  restore_p.start()\r\n  restore_p.join()\r\n  procs = []\r\n  num_procs = 3\r\n  for i in range(num_procs):\r\n      p = Process(target=subprocess, args=(i,))\r\n      p.daemon = True\r\n      p.start() # process fails to get past initialize all variables\r\n      procs.append(p)\r\n  for p in procs:\r\n      p.join()\r\n\r\nif __name__ == \"__main__\":\r\n  tf.app.run()\r\n```\r\n\r\nPlease` let me know if this works for you. Thanks.\r\n\r\nSherry\r\n"}