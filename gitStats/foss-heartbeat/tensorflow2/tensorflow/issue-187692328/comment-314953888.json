{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/314953888", "html_url": "https://github.com/tensorflow/tensorflow/issues/5448#issuecomment-314953888", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5448", "id": 314953888, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDk1Mzg4OA==", "user": {"login": "nottombrown", "id": 306655, "node_id": "MDQ6VXNlcjMwNjY1NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/306655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nottombrown", "html_url": "https://github.com/nottombrown", "followers_url": "https://api.github.com/users/nottombrown/followers", "following_url": "https://api.github.com/users/nottombrown/following{/other_user}", "gists_url": "https://api.github.com/users/nottombrown/gists{/gist_id}", "starred_url": "https://api.github.com/users/nottombrown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nottombrown/subscriptions", "organizations_url": "https://api.github.com/users/nottombrown/orgs", "repos_url": "https://api.github.com/users/nottombrown/repos", "events_url": "https://api.github.com/users/nottombrown/events{/privacy}", "received_events_url": "https://api.github.com/users/nottombrown/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-13T02:39:55Z", "updated_at": "2017-07-13T02:39:55Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>'s Python3 solution worked for me. Thanks!</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> multiprocessing\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>(<span class=\"pl-smi\">x</span>):\n    session <span class=\"pl-k\">=</span> tf.Session()\n    a <span class=\"pl-k\">=</span> tf.Variable(x, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>)\n    b <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">100</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>)\n    c <span class=\"pl-k\">=</span> tf.multiply(a, b, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>c<span class=\"pl-pds\">'</span></span>)\n    session.run(tf.global_variables_initializer())\n\n    out <span class=\"pl-k\">=</span> session.run(c)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>OK: <span class=\"pl-c1\">%s</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> out)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    multiprocessing.set_start_method(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>spawn<span class=\"pl-pds\">'</span></span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Comment me out to hang</span>\n    f(<span class=\"pl-c1\">0</span>)\n    multiprocessing.Pool().map(f, <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>))</pre></div>", "body_text": "@mrry's Python3 solution worked for me. Thanks!\nimport multiprocessing\n\nimport tensorflow as tf\n\ndef f(x):\n    session = tf.Session()\n    a = tf.Variable(x, name='a')\n    b = tf.Variable(100, name='b')\n    c = tf.multiply(a, b, name='c')\n    session.run(tf.global_variables_initializer())\n\n    out = session.run(c)\n    print(\"OK: %s\" % out)\n\nif __name__ == '__main__':\n    multiprocessing.set_start_method('spawn')  # Comment me out to hang\n    f(0)\n    multiprocessing.Pool().map(f, range(10))", "body": "@mrry's Python3 solution worked for me. Thanks!\r\n\r\n```python\r\nimport multiprocessing\r\n\r\nimport tensorflow as tf\r\n\r\ndef f(x):\r\n    session = tf.Session()\r\n    a = tf.Variable(x, name='a')\r\n    b = tf.Variable(100, name='b')\r\n    c = tf.multiply(a, b, name='c')\r\n    session.run(tf.global_variables_initializer())\r\n\r\n    out = session.run(c)\r\n    print(\"OK: %s\" % out)\r\n\r\nif __name__ == '__main__':\r\n    multiprocessing.set_start_method('spawn')  # Comment me out to hang\r\n    f(0)\r\n    multiprocessing.Pool().map(f, range(10))\r\n```"}