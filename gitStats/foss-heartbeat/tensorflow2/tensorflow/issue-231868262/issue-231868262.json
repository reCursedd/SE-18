{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10262", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10262/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10262/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10262/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10262", "id": 231868262, "node_id": "MDU6SXNzdWUyMzE4NjgyNjI=", "number": 10262, "title": "tensorflow read tfrecord not synchronize", "user": {"login": "fword", "id": 2551601, "node_id": "MDQ6VXNlcjI1NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2551601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fword", "html_url": "https://github.com/fword", "followers_url": "https://api.github.com/users/fword/followers", "following_url": "https://api.github.com/users/fword/following{/other_user}", "gists_url": "https://api.github.com/users/fword/gists{/gist_id}", "starred_url": "https://api.github.com/users/fword/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fword/subscriptions", "organizations_url": "https://api.github.com/users/fword/orgs", "repos_url": "https://api.github.com/users/fword/repos", "events_url": "https://api.github.com/users/fword/events{/privacy}", "received_events_url": "https://api.github.com/users/fword/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-28T13:16:11Z", "updated_at": "2017-05-31T03:42:20Z", "closed_at": "2017-05-31T03:42:20Z", "author_association": "NONE", "body_html": "<p>i would like to read tfrecords with two feats, but when i read it from tfrecords, it not synchronize. my data is like</p>\n<pre><code>a a_1\nb b_1\nc c_1\nd d_1\ne e_1\nf f_1\ng g_1\n</code></pre>\n<p>my code write this file to tfrecord is like this:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\nimport sys,os\n\ndef _int64_feature(value):\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\ndef _bytes_feature(value):\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\ndef float32_feature(value):\n  return tf.train.Feature(float_list=tf.train.FloatList(value=value))\n\ndef _parse_line(line, writer):\n  l = line.rstrip().split()\n  feat1=l[0].strip()\n  feat2=l[1].strip()\n\n  example = tf.train.Example(features=tf.train.Features(feature={\n      'feat1': _bytes_feature(feat1),\n      'feat2': _bytes_feature(feat2)\n    }))\n  writer.write(example.SerializeToString())\n\n\ndef convert_to(feat_file,output_file):\n    f = open(feat_file).readlines()\n    writer = tf.python_io.TFRecordWriter(output_file)\n    for line in f:\n        _parse_line(line, writer)\n    return\n\ndef main(argv):\n    convert_to(sys.argv[1],sys.argv[2])\n    \n\nif __name__ == '__main__':\n    tf.app.run()\n    pass\n</code></pre>\n<p>my code is train.py is like this:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\nimport sys,os\ndef read_and_decode(filename_queue):\n  reader = tf.TFRecordReader()\n  _, serialized_example = reader.read(filename_queue)\n  features = tf.parse_single_example(\n      serialized_example,\n      features={\n          'feat1': tf.FixedLenFeature([], tf.string),\n          'feat2': tf.FixedLenFeature([], tf.string)\n      })\n  feat1=features['feat1']\n  feat2=features['feat2']\n  return feat1,feat2\n\ndef batch_inputs():\n    tf_record_pattern = os.path.join('./', '%s*' % 'record')\n    data_files = tf.gfile.Glob(tf_record_pattern)\n    print data_files\n    filename_queue = tf.train.string_input_producer(data_files, num_epochs=1,shuffle=True)\n    feat1,feat2 = read_and_decode(filename_queue)\n    feats1,feats2 = tf.train.shuffle_batch([feat1,feat2],batch_size=1, num_threads=1,capacity=1090,min_after_dequeue=1000)\n    return feats1,feats2\nwith tf.Session() as sess:\n    feat1,feat2=batch_inputs()\n    init = tf.group(tf.global_variables_initializer(),\n\t       tf.local_variables_initializer())\n    sess.run(init)\n    coord = tf.train.Coordinator()  \n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n    print sess.run(feat1)\n    print sess.run(feat2)\n</code></pre>\n<p>when i run this train.py. it outputs<br>\n['b']<br>\n['d_1']<br>\nwhich i suppose  it should output,the feat1 is always corresponding feat2 like<br>\n['b']<br>\n['b_1']</p>", "body_text": "i would like to read tfrecords with two feats, but when i read it from tfrecords, it not synchronize. my data is like\na a_1\nb b_1\nc c_1\nd d_1\ne e_1\nf f_1\ng g_1\n\nmy code write this file to tfrecord is like this:\nimport numpy as np\nimport tensorflow as tf\nimport sys,os\n\ndef _int64_feature(value):\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\ndef _bytes_feature(value):\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\ndef float32_feature(value):\n  return tf.train.Feature(float_list=tf.train.FloatList(value=value))\n\ndef _parse_line(line, writer):\n  l = line.rstrip().split()\n  feat1=l[0].strip()\n  feat2=l[1].strip()\n\n  example = tf.train.Example(features=tf.train.Features(feature={\n      'feat1': _bytes_feature(feat1),\n      'feat2': _bytes_feature(feat2)\n    }))\n  writer.write(example.SerializeToString())\n\n\ndef convert_to(feat_file,output_file):\n    f = open(feat_file).readlines()\n    writer = tf.python_io.TFRecordWriter(output_file)\n    for line in f:\n        _parse_line(line, writer)\n    return\n\ndef main(argv):\n    convert_to(sys.argv[1],sys.argv[2])\n    \n\nif __name__ == '__main__':\n    tf.app.run()\n    pass\n\nmy code is train.py is like this:\nimport tensorflow as tf\nimport numpy as np\nimport sys,os\ndef read_and_decode(filename_queue):\n  reader = tf.TFRecordReader()\n  _, serialized_example = reader.read(filename_queue)\n  features = tf.parse_single_example(\n      serialized_example,\n      features={\n          'feat1': tf.FixedLenFeature([], tf.string),\n          'feat2': tf.FixedLenFeature([], tf.string)\n      })\n  feat1=features['feat1']\n  feat2=features['feat2']\n  return feat1,feat2\n\ndef batch_inputs():\n    tf_record_pattern = os.path.join('./', '%s*' % 'record')\n    data_files = tf.gfile.Glob(tf_record_pattern)\n    print data_files\n    filename_queue = tf.train.string_input_producer(data_files, num_epochs=1,shuffle=True)\n    feat1,feat2 = read_and_decode(filename_queue)\n    feats1,feats2 = tf.train.shuffle_batch([feat1,feat2],batch_size=1, num_threads=1,capacity=1090,min_after_dequeue=1000)\n    return feats1,feats2\nwith tf.Session() as sess:\n    feat1,feat2=batch_inputs()\n    init = tf.group(tf.global_variables_initializer(),\n\t       tf.local_variables_initializer())\n    sess.run(init)\n    coord = tf.train.Coordinator()  \n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n    print sess.run(feat1)\n    print sess.run(feat2)\n\nwhen i run this train.py. it outputs\n['b']\n['d_1']\nwhich i suppose  it should output,the feat1 is always corresponding feat2 like\n['b']\n['b_1']", "body": "i would like to read tfrecords with two feats, but when i read it from tfrecords, it not synchronize. my data is like\r\n\r\n    a a_1\r\n    b b_1\r\n    c c_1\r\n    d d_1\r\n    e e_1\r\n    f f_1\r\n    g g_1\r\nmy code write this file to tfrecord is like this:\r\n\r\n\r\n    import numpy as np\r\n    import tensorflow as tf\r\n    import sys,os\r\n    \r\n    def _int64_feature(value):\r\n      return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\r\n    \r\n    def _bytes_feature(value):\r\n      return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\r\n    def float32_feature(value):\r\n      return tf.train.Feature(float_list=tf.train.FloatList(value=value))\r\n    \r\n    def _parse_line(line, writer):\r\n      l = line.rstrip().split()\r\n      feat1=l[0].strip()\r\n      feat2=l[1].strip()\r\n    \r\n      example = tf.train.Example(features=tf.train.Features(feature={\r\n          'feat1': _bytes_feature(feat1),\r\n          'feat2': _bytes_feature(feat2)\r\n        }))\r\n      writer.write(example.SerializeToString())\r\n    \r\n    \r\n    def convert_to(feat_file,output_file):\r\n        f = open(feat_file).readlines()\r\n        writer = tf.python_io.TFRecordWriter(output_file)\r\n        for line in f:\r\n            _parse_line(line, writer)\r\n        return\r\n    \r\n    def main(argv):\r\n        convert_to(sys.argv[1],sys.argv[2])\r\n        \r\n    \r\n    if __name__ == '__main__':\r\n        tf.app.run()\r\n        pass\r\n\r\nmy code is train.py is like this:\r\n\r\n    import tensorflow as tf\r\n    import numpy as np\r\n    import sys,os\r\n    def read_and_decode(filename_queue):\r\n      reader = tf.TFRecordReader()\r\n      _, serialized_example = reader.read(filename_queue)\r\n      features = tf.parse_single_example(\r\n          serialized_example,\r\n          features={\r\n              'feat1': tf.FixedLenFeature([], tf.string),\r\n              'feat2': tf.FixedLenFeature([], tf.string)\r\n          })\r\n      feat1=features['feat1']\r\n      feat2=features['feat2']\r\n      return feat1,feat2\r\n    \r\n    def batch_inputs():\r\n        tf_record_pattern = os.path.join('./', '%s*' % 'record')\r\n        data_files = tf.gfile.Glob(tf_record_pattern)\r\n        print data_files\r\n        filename_queue = tf.train.string_input_producer(data_files, num_epochs=1,shuffle=True)\r\n        feat1,feat2 = read_and_decode(filename_queue)\r\n        feats1,feats2 = tf.train.shuffle_batch([feat1,feat2],batch_size=1, num_threads=1,capacity=1090,min_after_dequeue=1000)\r\n        return feats1,feats2\r\n    with tf.Session() as sess:\r\n        feat1,feat2=batch_inputs()\r\n        init = tf.group(tf.global_variables_initializer(),\r\n    \t       tf.local_variables_initializer())\r\n        sess.run(init)\r\n        coord = tf.train.Coordinator()  \r\n        threads = tf.train.start_queue_runners(sess=sess, coord=coord)\r\n        print sess.run(feat1)\r\n        print sess.run(feat2)\r\n\r\nwhen i run this train.py. it outputs \r\n['b']\r\n['d_1']\r\nwhich i suppose  it should output,the feat1 is always corresponding feat2 like\r\n['b']\r\n['b_1']"}