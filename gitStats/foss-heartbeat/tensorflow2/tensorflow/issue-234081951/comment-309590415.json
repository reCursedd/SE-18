{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/309590415", "html_url": "https://github.com/tensorflow/tensorflow/issues/10479#issuecomment-309590415", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10479", "id": 309590415, "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTU5MDQxNQ==", "user": {"login": "Sycor4x", "id": 17602932, "node_id": "MDQ6VXNlcjE3NjAyOTMy", "avatar_url": "https://avatars3.githubusercontent.com/u/17602932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sycor4x", "html_url": "https://github.com/Sycor4x", "followers_url": "https://api.github.com/users/Sycor4x/followers", "following_url": "https://api.github.com/users/Sycor4x/following{/other_user}", "gists_url": "https://api.github.com/users/Sycor4x/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sycor4x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sycor4x/subscriptions", "organizations_url": "https://api.github.com/users/Sycor4x/orgs", "repos_url": "https://api.github.com/users/Sycor4x/repos", "events_url": "https://api.github.com/users/Sycor4x/events{/privacy}", "received_events_url": "https://api.github.com/users/Sycor4x/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-19T22:23:29Z", "updated_at": "2017-06-19T22:32:49Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a><br>\nTo be clear, my complaint is about the software interface, not the mathematics.</p>\n<p>From a software standpoint, there are two ways to look at my bug report.</p>\n<p>One way to look at it is that the LSTM cell is defective for trying to pound a square peg (the peepholes) into a round hole (the same initializer used for the rest of the cell). Not allowing the peephole connections to be easily initialized <em>independently</em> from the rest of the LSTM weights is the origin of the problem, to my mind. For example, in TF 1.2, the method <code>GRUCell.__init__</code> has no documentation, but it appears to have two weight initialization arguments, one for kernels, and one for biases. This approach to initialization seems perfectly compatible with the LSTM, with the added benefit that the GRU and LSTM classes are brought into closer alignment.</p>\n<p>The other way is that which you point out: the orthogonal initializer needs to be smarter. But changing its behavior wholesale may not be uniformly desirable, e.g. when someone is initializing vector parameters other than peephole connections. So for this special case, I could write an initializer for this narrow corner case, and it would solve this immediate problem, but every other user would encounter the same issue when attempting to use the orthogonal initializer, or another initialization, because these initializers are not \"peephole-compatible.\"</p>", "body_text": "@ebrevdo\nTo be clear, my complaint is about the software interface, not the mathematics.\nFrom a software standpoint, there are two ways to look at my bug report.\nOne way to look at it is that the LSTM cell is defective for trying to pound a square peg (the peepholes) into a round hole (the same initializer used for the rest of the cell). Not allowing the peephole connections to be easily initialized independently from the rest of the LSTM weights is the origin of the problem, to my mind. For example, in TF 1.2, the method GRUCell.__init__ has no documentation, but it appears to have two weight initialization arguments, one for kernels, and one for biases. This approach to initialization seems perfectly compatible with the LSTM, with the added benefit that the GRU and LSTM classes are brought into closer alignment.\nThe other way is that which you point out: the orthogonal initializer needs to be smarter. But changing its behavior wholesale may not be uniformly desirable, e.g. when someone is initializing vector parameters other than peephole connections. So for this special case, I could write an initializer for this narrow corner case, and it would solve this immediate problem, but every other user would encounter the same issue when attempting to use the orthogonal initializer, or another initialization, because these initializers are not \"peephole-compatible.\"", "body": "@ebrevdo \r\nTo be clear, my complaint is about the software interface, not the mathematics.\r\n\r\nFrom a software standpoint, there are two ways to look at my bug report.\r\n\r\nOne way to look at it is that the LSTM cell is defective for trying to pound a square peg (the peepholes) into a round hole (the same initializer used for the rest of the cell). Not allowing the peephole connections to be easily initialized _independently_ from the rest of the LSTM weights is the origin of the problem, to my mind. For example, in TF 1.2, the method `GRUCell.__init__` has no documentation, but it appears to have two weight initialization arguments, one for kernels, and one for biases. This approach to initialization seems perfectly compatible with the LSTM, with the added benefit that the GRU and LSTM classes are brought into closer alignment.\r\n\r\nThe other way is that which you point out: the orthogonal initializer needs to be smarter. But changing its behavior wholesale may not be uniformly desirable, e.g. when someone is initializing vector parameters other than peephole connections. So for this special case, I could write an initializer for this narrow corner case, and it would solve this immediate problem, but every other user would encounter the same issue when attempting to use the orthogonal initializer, or another initialization, because these initializers are not \"peephole-compatible.\""}