{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11525", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11525/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11525/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11525/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11525", "id": 243211673, "node_id": "MDU6SXNzdWUyNDMyMTE2NzM=", "number": 11525, "title": "tf.where outputs the wrong tensor dtype", "user": {"login": "JustinLiang", "id": 8692966, "node_id": "MDQ6VXNlcjg2OTI5NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8692966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JustinLiang", "html_url": "https://github.com/JustinLiang", "followers_url": "https://api.github.com/users/JustinLiang/followers", "following_url": "https://api.github.com/users/JustinLiang/following{/other_user}", "gists_url": "https://api.github.com/users/JustinLiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/JustinLiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JustinLiang/subscriptions", "organizations_url": "https://api.github.com/users/JustinLiang/orgs", "repos_url": "https://api.github.com/users/JustinLiang/repos", "events_url": "https://api.github.com/users/JustinLiang/events{/privacy}", "received_events_url": "https://api.github.com/users/JustinLiang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-16T01:57:10Z", "updated_at": "2017-07-16T20:36:54Z", "closed_at": "2017-07-16T20:36:54Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution</strong>: Ubuntu 14.04</li>\n<li><strong>TensorFlow installed from</strong>: Source</li>\n<li><strong>TensorFlow version</strong>: ('v1.2.0-5-g435cdfc', '1.2.1')</li>\n<li><strong>Python version</strong>: 2.7.13</li>\n<li><strong>Bazel version</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: Cuda 8.0</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>x = tf.Variable([2, 1], dtype=tf.float32)\ny = tf.Variable(2, dtype=tf.float32)\nz = tf.where(tf.equal(x, y))\nprint z\n\n&gt;&gt; Tensor(\"Where_1:0\", shape=(?, 1), dtype=int64)\n</code></pre>\n<h3>Describe the problem</h3>\n<p>In the documentation for <a href=\"https://www.tensorflow.org/api_docs/python/tf/where\" rel=\"nofollow\">tf.where.py</a>, it states that it returns <code>A Tensor with the same type and shape as x, y if they are non-None.</code> In the example above, we see that <code>x</code> and <code>y</code> are both dtype <code>tf.float32</code>. Yet, the output is <code>tf.int64</code>. Was this intended or a bug?</p>\n<p>This bug is a bit problematic for me as I use <code>tf.where</code> in my loss function so I need to ensure that all my tensors are <code>tf.float32</code> since <code>tf.cast</code> is not a differentiable <code>ops</code>.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution: Ubuntu 14.04\nTensorFlow installed from: Source\nTensorFlow version: ('v1.2.0-5-g435cdfc', '1.2.1')\nPython version: 2.7.13\nBazel version: N/A\nCUDA/cuDNN version: Cuda 8.0\nGPU model and memory: N/A\nExact command to reproduce:\n\nx = tf.Variable([2, 1], dtype=tf.float32)\ny = tf.Variable(2, dtype=tf.float32)\nz = tf.where(tf.equal(x, y))\nprint z\n\n>> Tensor(\"Where_1:0\", shape=(?, 1), dtype=int64)\n\nDescribe the problem\nIn the documentation for tf.where.py, it states that it returns A Tensor with the same type and shape as x, y if they are non-None. In the example above, we see that x and y are both dtype tf.float32. Yet, the output is tf.int64. Was this intended or a bug?\nThis bug is a bit problematic for me as I use tf.where in my loss function so I need to ensure that all my tensors are tf.float32 since tf.cast is not a differentiable ops.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution**: Ubuntu 14.04\r\n- **TensorFlow installed from**: Source\r\n- **TensorFlow version**: ('v1.2.0-5-g435cdfc', '1.2.1')\r\n- **Python version**: 2.7.13\r\n- **Bazel version**: N/A\r\n- **CUDA/cuDNN version**: Cuda 8.0\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**:\r\n\r\n```\r\nx = tf.Variable([2, 1], dtype=tf.float32)\r\ny = tf.Variable(2, dtype=tf.float32)\r\nz = tf.where(tf.equal(x, y))\r\nprint z\r\n\r\n>> Tensor(\"Where_1:0\", shape=(?, 1), dtype=int64)\r\n```\r\n\r\n### Describe the problem\r\nIn the documentation for [tf.where.py](https://www.tensorflow.org/api_docs/python/tf/where), it states that it returns `A Tensor with the same type and shape as x, y if they are non-None.` In the example above, we see that `x` and `y` are both dtype `tf.float32`. Yet, the output is `tf.int64`. Was this intended or a bug?\r\n\r\nThis bug is a bit problematic for me as I use `tf.where` in my loss function so I need to ensure that all my tensors are `tf.float32` since `tf.cast` is not a differentiable `ops`."}