{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7284", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7284/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7284/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7284/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7284", "id": 205534882, "node_id": "MDU6SXNzdWUyMDU1MzQ4ODI=", "number": 7284, "title": "Any clear way to restore saved network and parameters?", "user": {"login": "benwu232", "id": 3946864, "node_id": "MDQ6VXNlcjM5NDY4NjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3946864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benwu232", "html_url": "https://github.com/benwu232", "followers_url": "https://api.github.com/users/benwu232/followers", "following_url": "https://api.github.com/users/benwu232/following{/other_user}", "gists_url": "https://api.github.com/users/benwu232/gists{/gist_id}", "starred_url": "https://api.github.com/users/benwu232/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benwu232/subscriptions", "organizations_url": "https://api.github.com/users/benwu232/orgs", "repos_url": "https://api.github.com/users/benwu232/repos", "events_url": "https://api.github.com/users/benwu232/events{/privacy}", "received_events_url": "https://api.github.com/users/benwu232/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-06T09:58:17Z", "updated_at": "2017-02-08T15:07:44Z", "closed_at": "2017-02-06T16:08:17Z", "author_association": "NONE", "body_html": "<p>I'm using tensorflow-gpu0.12.1 on a linux-minit18 machine.</p>\n<p>I found it is very hard to restore the saved network and its parameters. The closest answer is</p>\n<p><a href=\"http://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python\" rel=\"nofollow\">http://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python</a></p>\n<p>and</p>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/state_ops/exporting_and_importing_meta_graphs\" rel=\"nofollow\">https://www.tensorflow.org/api_docs/python/state_ops/exporting_and_importing_meta_graphs</a></p>\n<p>I followed the example in the above link using tf.train.import_meta_graph, but it didn't work.</p>\n<pre><code>with tf.Session() as sess:\n  new_saver = tf.train.import_meta_graph('my-save-dir/my-model-10000.meta')\n  new_saver.restore(sess, 'my-save-dir/my-model-10000')\n</code></pre>\n<p>All I want is something like:</p>\n<p>training ...<br>\nsave_model(model_file)<br>\nsave_parameters(par_file)<br>\n...</p>\n<p>predicting...<br>\nmodel = load_model(model_file)<br>\nmodel.load_parameters(par_file)<br>\n...</p>\n<p>I found similar implementations in Keras or Tensorlayer, etc. I like them because they split the training and predicting tasks and make them independant. In predicting task, I don't have to find and call the same def_network function in training task, which is boring and error prone.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> says it is on the roadmap, please make it faster. I'd like to test it ASAP!</p>\n<p>Many thanks!<br>\nBen</p>", "body_text": "I'm using tensorflow-gpu0.12.1 on a linux-minit18 machine.\nI found it is very hard to restore the saved network and its parameters. The closest answer is\nhttp://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python\nand\nhttps://www.tensorflow.org/api_docs/python/state_ops/exporting_and_importing_meta_graphs\nI followed the example in the above link using tf.train.import_meta_graph, but it didn't work.\nwith tf.Session() as sess:\n  new_saver = tf.train.import_meta_graph('my-save-dir/my-model-10000.meta')\n  new_saver.restore(sess, 'my-save-dir/my-model-10000')\n\nAll I want is something like:\ntraining ...\nsave_model(model_file)\nsave_parameters(par_file)\n...\npredicting...\nmodel = load_model(model_file)\nmodel.load_parameters(par_file)\n...\nI found similar implementations in Keras or Tensorlayer, etc. I like them because they split the training and predicting tasks and make them independant. In predicting task, I don't have to find and call the same def_network function in training task, which is boring and error prone.\n@yaroslavvb says it is on the roadmap, please make it faster. I'd like to test it ASAP!\nMany thanks!\nBen", "body": "I'm using tensorflow-gpu0.12.1 on a linux-minit18 machine.\r\n\r\nI found it is very hard to restore the saved network and its parameters. The closest answer is \r\n\r\nhttp://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python\r\n\r\nand \r\n\r\nhttps://www.tensorflow.org/api_docs/python/state_ops/exporting_and_importing_meta_graphs\r\n\r\nI followed the example in the above link using tf.train.import_meta_graph, but it didn't work.\r\n\r\n```\r\nwith tf.Session() as sess:\r\n  new_saver = tf.train.import_meta_graph('my-save-dir/my-model-10000.meta')\r\n  new_saver.restore(sess, 'my-save-dir/my-model-10000')\r\n```\r\n\r\n\r\n\r\nAll I want is something like:\r\n\r\ntraining ...\r\nsave_model(model_file)\r\nsave_parameters(par_file)\r\n...\r\n\r\npredicting...\r\nmodel = load_model(model_file)\r\nmodel.load_parameters(par_file)\r\n...\r\n\r\nI found similar implementations in Keras or Tensorlayer, etc. I like them because they split the training and predicting tasks and make them independant. In predicting task, I don't have to find and call the same def_network function in training task, which is boring and error prone. \r\n\r\n@yaroslavvb says it is on the roadmap, please make it faster. I'd like to test it ASAP!\r\n\r\nMany thanks!\r\nBen\r\n\r\n"}