{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6397", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6397/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6397/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6397/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6397", "id": 196399624, "node_id": "MDU6SXNzdWUxOTYzOTk2MjQ=", "number": 6397, "title": "Feature suggestion: Total Variation Denoising", "user": {"login": "Hvass-Labs", "id": 13588114, "node_id": "MDQ6VXNlcjEzNTg4MTE0", "avatar_url": "https://avatars2.githubusercontent.com/u/13588114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hvass-Labs", "html_url": "https://github.com/Hvass-Labs", "followers_url": "https://api.github.com/users/Hvass-Labs/followers", "following_url": "https://api.github.com/users/Hvass-Labs/following{/other_user}", "gists_url": "https://api.github.com/users/Hvass-Labs/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hvass-Labs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hvass-Labs/subscriptions", "organizations_url": "https://api.github.com/users/Hvass-Labs/orgs", "repos_url": "https://api.github.com/users/Hvass-Labs/repos", "events_url": "https://api.github.com/users/Hvass-Labs/events{/privacy}", "received_events_url": "https://api.github.com/users/Hvass-Labs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-12-19T12:13:48Z", "updated_at": "2017-01-05T09:28:23Z", "closed_at": "2017-01-05T09:28:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I would like to suggest the following feature be added to TensorFlow and discuss it before making the pull-request. As far as I can tell, the feature does not exist in TensorFlow.</p>\n<h3>Motivation</h3>\n<p>Total Variation Denoising (TVD) is sometimes used as a regularizer in image processing to suppress noise. It is commonly used in Style Transfer implementations. Here is my recent tutorial which uses it:</p>\n<p><a href=\"https://github.com/Hvass-Labs/TensorFlow-Tutorials/blob/master/15_Style_Transfer.ipynb\">https://github.com/Hvass-Labs/TensorFlow-Tutorials/blob/master/15_Style_Transfer.ipynb</a></p>\n<p>While researching this tutorial, I saw some bizarre implementations of TVD. In reality it is just a simple array-slicing operation. I thought it would be useful to include it in TensorFlow so it is easy to use for everyone.</p>\n<h3>Math Formula</h3>\n<p>The code below implements the 'anisotropic' version of the formula, because it should be easier to optimize. The formula can be seen here:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Total_variation_denoising#2D_digital_signals\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Total_variation_denoising#2D_digital_signals</a></p>\n<h3>Code</h3>\n<p>This is the code I propose to add to TensorFlow:</p>\n<pre><code>def total_variation(images):\n    \"\"\"\n    Calculate the Total Variation for one or more images for use in denoising.\n\n    https://en.wikipedia.org/wiki/Total_variation_denoising\n\n    Args:\n        images: `Tensor` with one or more images.\n                The shape is `[batch, height, width, channel]`.\n\n    Returns:\n        A scalar `Tensor` representing the value.\n    \"\"\"\n\n    value = tf.reduce_sum(tf.abs(images[:,1:,:,:] - images[:,:-1,:,:])) + \\\n            tf.reduce_sum(tf.abs(images[:,:,1:,:] - images[:,:,:-1,:]))\n\n    return value\n</code></pre>\n<p>Style note: For more complicated expressions like this, I prefer to assign the value before I return it. It makes the code cleaner and is helpful in debugging.</p>\n<h3>Discussion</h3>\n<p>I studied <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/losses/losses.py\">this TensorFlow module</a> but did not fully understand the design-philosophy and how to make this new function fit in.</p>\n<p>Before making the pull-request I have some questions and issues to discuss:</p>\n<ol>\n<li>\n<p>Would this belong under losses or regularizers in TensorFlow? Where specifically?</p>\n</li>\n<li>\n<p>Should I add a scope-block?</p>\n</li>\n<li>\n<p>I made an implementation that only reduced the sum for <code>axis=[1, 2, 3]</code> thus calculating the value on a per-image basis in case there are multiple images in the batch. But I don't know if it would ever be used in that way and it made the implementation more complicated. Perhaps it is best to have the simple version above and extend it if necessary.</p>\n</li>\n</ol>", "body_text": "I would like to suggest the following feature be added to TensorFlow and discuss it before making the pull-request. As far as I can tell, the feature does not exist in TensorFlow.\nMotivation\nTotal Variation Denoising (TVD) is sometimes used as a regularizer in image processing to suppress noise. It is commonly used in Style Transfer implementations. Here is my recent tutorial which uses it:\nhttps://github.com/Hvass-Labs/TensorFlow-Tutorials/blob/master/15_Style_Transfer.ipynb\nWhile researching this tutorial, I saw some bizarre implementations of TVD. In reality it is just a simple array-slicing operation. I thought it would be useful to include it in TensorFlow so it is easy to use for everyone.\nMath Formula\nThe code below implements the 'anisotropic' version of the formula, because it should be easier to optimize. The formula can be seen here:\nhttps://en.wikipedia.org/wiki/Total_variation_denoising#2D_digital_signals\nCode\nThis is the code I propose to add to TensorFlow:\ndef total_variation(images):\n    \"\"\"\n    Calculate the Total Variation for one or more images for use in denoising.\n\n    https://en.wikipedia.org/wiki/Total_variation_denoising\n\n    Args:\n        images: `Tensor` with one or more images.\n                The shape is `[batch, height, width, channel]`.\n\n    Returns:\n        A scalar `Tensor` representing the value.\n    \"\"\"\n\n    value = tf.reduce_sum(tf.abs(images[:,1:,:,:] - images[:,:-1,:,:])) + \\\n            tf.reduce_sum(tf.abs(images[:,:,1:,:] - images[:,:,:-1,:]))\n\n    return value\n\nStyle note: For more complicated expressions like this, I prefer to assign the value before I return it. It makes the code cleaner and is helpful in debugging.\nDiscussion\nI studied this TensorFlow module but did not fully understand the design-philosophy and how to make this new function fit in.\nBefore making the pull-request I have some questions and issues to discuss:\n\n\nWould this belong under losses or regularizers in TensorFlow? Where specifically?\n\n\nShould I add a scope-block?\n\n\nI made an implementation that only reduced the sum for axis=[1, 2, 3] thus calculating the value on a per-image basis in case there are multiple images in the batch. But I don't know if it would ever be used in that way and it made the implementation more complicated. Perhaps it is best to have the simple version above and extend it if necessary.", "body": "I would like to suggest the following feature be added to TensorFlow and discuss it before making the pull-request. As far as I can tell, the feature does not exist in TensorFlow.\r\n\r\n### Motivation\r\n\r\nTotal Variation Denoising (TVD) is sometimes used as a regularizer in image processing to suppress noise. It is commonly used in Style Transfer implementations. Here is my recent tutorial which uses it:\r\n\r\nhttps://github.com/Hvass-Labs/TensorFlow-Tutorials/blob/master/15_Style_Transfer.ipynb\r\n\r\nWhile researching this tutorial, I saw some bizarre implementations of TVD. In reality it is just a simple array-slicing operation. I thought it would be useful to include it in TensorFlow so it is easy to use for everyone.\r\n\r\n### Math Formula\r\n\r\nThe code below implements the 'anisotropic' version of the formula, because it should be easier to optimize. The formula can be seen here:\r\n\r\nhttps://en.wikipedia.org/wiki/Total_variation_denoising#2D_digital_signals\r\n\r\n### Code\r\n\r\nThis is the code I propose to add to TensorFlow:\r\n\r\n    def total_variation(images):\r\n        \"\"\"\r\n        Calculate the Total Variation for one or more images for use in denoising.\r\n\r\n        https://en.wikipedia.org/wiki/Total_variation_denoising\r\n\r\n        Args:\r\n            images: `Tensor` with one or more images.\r\n                    The shape is `[batch, height, width, channel]`.\r\n\r\n        Returns:\r\n            A scalar `Tensor` representing the value.\r\n        \"\"\"\r\n\r\n        value = tf.reduce_sum(tf.abs(images[:,1:,:,:] - images[:,:-1,:,:])) + \\\r\n                tf.reduce_sum(tf.abs(images[:,:,1:,:] - images[:,:,:-1,:]))\r\n    \r\n        return value\r\n\r\nStyle note: For more complicated expressions like this, I prefer to assign the value before I return it. It makes the code cleaner and is helpful in debugging.\r\n\r\n### Discussion\r\n\r\nI studied [this TensorFlow module](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/losses/losses.py) but did not fully understand the design-philosophy and how to make this new function fit in.\r\n\r\nBefore making the pull-request I have some questions and issues to discuss:\r\n\r\n1) Would this belong under losses or regularizers in TensorFlow? Where specifically?\r\n\r\n2) Should I add a scope-block?\r\n\r\n3) I made an implementation that only reduced the sum for `axis=[1, 2, 3]` thus calculating the value on a per-image basis in case there are multiple images in the batch. But I don't know if it would ever be used in that way and it made the implementation more complicated. Perhaps it is best to have the simple version above and extend it if necessary.\r\n"}