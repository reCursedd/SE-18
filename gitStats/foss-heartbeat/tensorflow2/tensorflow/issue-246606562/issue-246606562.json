{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11888", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11888/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11888/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11888/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11888", "id": 246606562, "node_id": "MDU6SXNzdWUyNDY2MDY1NjI=", "number": 11888, "title": "Can't import graph containing MutableHashTable", "user": {"login": "rubenvereecken", "id": 5216553, "node_id": "MDQ6VXNlcjUyMTY1NTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5216553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rubenvereecken", "html_url": "https://github.com/rubenvereecken", "followers_url": "https://api.github.com/users/rubenvereecken/followers", "following_url": "https://api.github.com/users/rubenvereecken/following{/other_user}", "gists_url": "https://api.github.com/users/rubenvereecken/gists{/gist_id}", "starred_url": "https://api.github.com/users/rubenvereecken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rubenvereecken/subscriptions", "organizations_url": "https://api.github.com/users/rubenvereecken/orgs", "repos_url": "https://api.github.com/users/rubenvereecken/repos", "events_url": "https://api.github.com/users/rubenvereecken/events{/privacy}", "received_events_url": "https://api.github.com/users/rubenvereecken/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "ysuematsu", "id": 15674604, "node_id": "MDQ6VXNlcjE1Njc0NjA0", "avatar_url": "https://avatars3.githubusercontent.com/u/15674604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysuematsu", "html_url": "https://github.com/ysuematsu", "followers_url": "https://api.github.com/users/ysuematsu/followers", "following_url": "https://api.github.com/users/ysuematsu/following{/other_user}", "gists_url": "https://api.github.com/users/ysuematsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysuematsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysuematsu/subscriptions", "organizations_url": "https://api.github.com/users/ysuematsu/orgs", "repos_url": "https://api.github.com/users/ysuematsu/repos", "events_url": "https://api.github.com/users/ysuematsu/events{/privacy}", "received_events_url": "https://api.github.com/users/ysuematsu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ysuematsu", "id": 15674604, "node_id": "MDQ6VXNlcjE1Njc0NjA0", "avatar_url": "https://avatars3.githubusercontent.com/u/15674604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysuematsu", "html_url": "https://github.com/ysuematsu", "followers_url": "https://api.github.com/users/ysuematsu/followers", "following_url": "https://api.github.com/users/ysuematsu/following{/other_user}", "gists_url": "https://api.github.com/users/ysuematsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysuematsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysuematsu/subscriptions", "organizations_url": "https://api.github.com/users/ysuematsu/orgs", "repos_url": "https://api.github.com/users/ysuematsu/repos", "events_url": "https://api.github.com/users/ysuematsu/events{/privacy}", "received_events_url": "https://api.github.com/users/ysuematsu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-07-30T20:23:11Z", "updated_at": "2018-11-14T19:13:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Mint 18</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary (pip)</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.3.0.0rc0</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Import a meta graph containing <code>MutableHashTable</code> operations fails. The MutableHashTable in my use case is named and inside a scope. After some digging around I found that the error is a result of a collection <code>saveable_objects</code> containing names of <code>MutableHashTable</code>s but <em>without</em> the proper scoping.</p>\n<h3>Source code / logs</h3>\n<pre><code>graph = create_eval_graph()\ntf.train.export_meta_graph('eval_model.meta', graph=graph, as_text=True)\n\n# ...\ns = tf.train.import_meta_graph('eval_model.meta') # Fails \n</code></pre>\n<p>This throws the following</p>\n<pre><code>---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n&lt;ipython-input-238-7de9a7b0d1f2&gt; in &lt;module&gt;()\n----&gt; 1 s = tf.train.import_meta_graph('eval_model.meta')\n\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/training/saver.py in import_meta_graph(meta_graph_or_file, clear_devices, import_scope, **kwargs)\n   1696                                       clear_devices=clear_devices,\n   1697                                       import_scope=import_scope,\n-&gt; 1698                                       **kwargs)\n   1699   if meta_graph_def.HasField(\"saver_def\"):\n   1700     return Saver(saver_def=meta_graph_def.saver_def, name=import_scope)\n\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/meta_graph.py in import_scoped_meta_graph(meta_graph_or_file, clear_devices, graph, import_scope, input_map, unbound_inputs_col_name, restore_collections_predicate)\n    690           for value in field.value:\n    691             col_op = graph.as_graph_element(\n--&gt; 692                 ops.prepend_name_scope(value, scope_to_prepend_to_names))\n    693             graph.add_to_collection(key, col_op)\n    694         elif kind == \"int64_list\":\n\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in as_graph_element(self, obj, allow_tensor, allow_operation)\n   2704 \n   2705     with self._lock:\n-&gt; 2706       return self._as_graph_element_locked(obj, allow_tensor, allow_operation)\n   2707 \n   2708   def _as_graph_element_locked(self, obj, allow_tensor, allow_operation):\n\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in _as_graph_element_locked(self, obj, allow_tensor, allow_operation)\n   2764         if name not in self._nodes_by_name:\n   2765           raise KeyError(\"The name %s refers to an Operation not in the \"\n-&gt; 2766                          \"graph.\" % repr(name))\n   2767         return self._nodes_by_name[name]\n   2768 \n\nKeyError: \"The name 'lstm_c_table' refers to an Operation not in the graph.\"\n</code></pre>\n<p>Where <code>lstm_c_table</code> is created as follows</p>\n<pre><code>tf.contrib.lookup.MutableHashTable(key_dtype=tf.string, value_dtype=tf.float32, default_value=value, name='lstm_c_table')\n</code></pre>\n<p>I looked at the generated proto and it contains the following node:</p>\n<pre><code>  node {\n    name: \"input/lstm_c_table\"\n    op: \"MutableHashTableOfTensorsV2\"\n    attr {\n      key: \"_output_shapes\"\n      value {\n        list {\n          shape {\n          }\n        }\n      }\n    }\n    attr {\n      key: \"container\"\n      value {\n        s: \"\"\n      }\n    }\n    attr {\n      key: \"key_dtype\"\n      value {\n        type: DT_STRING\n      }\n    }\n    attr {\n      key: \"shared_name\"\n      value {\n        s: \"\"\n      }\n    }\n    attr {\n      key: \"use_node_name_sharing\"\n      value {\n        b: true\n      }\n    }\n    attr {\n      key: \"value_dtype\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"value_shape\"\n      value {\n        shape {\n          dim {\n            size: 512\n          }\n        }\n      }\n    }\n  }\n</code></pre>\n<pre><code>collection_def {\n  key: \"saveable_objects\"\n  value {\n    node_list {\n      value: \"lstm_c_table\"\n      value: \"lstm_h_table\"\n      value: \"history_table\"\n      value: \"first_table\"\n      value: \"encode_lstm_c_table\"\n      value: \"encode_lstm_h_table\"\n    }\n  }\n}\n</code></pre>\n<p>Either removing the above collection or prefixing all the values with <code>input/</code> results in the following error:</p>\n<pre><code>TypeError: Can't convert Operation 'input/lstm_c_table' to Tensor (target dtype=None, name=None, as_ref=True)\n</code></pre>\n<p>This solution is part of an imitation of <code>batch_sequences_with_states</code> so a graph can be exported that does not rely on queues but instead uses placeholders and the <code>feed_dict</code> mechanism, for use in interactive model evaluation.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Mint 18\nTensorFlow installed from (source or binary): Binary (pip)\nTensorFlow version (use command below): v1.3.0.0rc0\nBazel version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nDescribe the problem\nImport a meta graph containing MutableHashTable operations fails. The MutableHashTable in my use case is named and inside a scope. After some digging around I found that the error is a result of a collection saveable_objects containing names of MutableHashTables but without the proper scoping.\nSource code / logs\ngraph = create_eval_graph()\ntf.train.export_meta_graph('eval_model.meta', graph=graph, as_text=True)\n\n# ...\ns = tf.train.import_meta_graph('eval_model.meta') # Fails \n\nThis throws the following\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n<ipython-input-238-7de9a7b0d1f2> in <module>()\n----> 1 s = tf.train.import_meta_graph('eval_model.meta')\n\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/training/saver.py in import_meta_graph(meta_graph_or_file, clear_devices, import_scope, **kwargs)\n   1696                                       clear_devices=clear_devices,\n   1697                                       import_scope=import_scope,\n-> 1698                                       **kwargs)\n   1699   if meta_graph_def.HasField(\"saver_def\"):\n   1700     return Saver(saver_def=meta_graph_def.saver_def, name=import_scope)\n\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/meta_graph.py in import_scoped_meta_graph(meta_graph_or_file, clear_devices, graph, import_scope, input_map, unbound_inputs_col_name, restore_collections_predicate)\n    690           for value in field.value:\n    691             col_op = graph.as_graph_element(\n--> 692                 ops.prepend_name_scope(value, scope_to_prepend_to_names))\n    693             graph.add_to_collection(key, col_op)\n    694         elif kind == \"int64_list\":\n\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in as_graph_element(self, obj, allow_tensor, allow_operation)\n   2704 \n   2705     with self._lock:\n-> 2706       return self._as_graph_element_locked(obj, allow_tensor, allow_operation)\n   2707 \n   2708   def _as_graph_element_locked(self, obj, allow_tensor, allow_operation):\n\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in _as_graph_element_locked(self, obj, allow_tensor, allow_operation)\n   2764         if name not in self._nodes_by_name:\n   2765           raise KeyError(\"The name %s refers to an Operation not in the \"\n-> 2766                          \"graph.\" % repr(name))\n   2767         return self._nodes_by_name[name]\n   2768 \n\nKeyError: \"The name 'lstm_c_table' refers to an Operation not in the graph.\"\n\nWhere lstm_c_table is created as follows\ntf.contrib.lookup.MutableHashTable(key_dtype=tf.string, value_dtype=tf.float32, default_value=value, name='lstm_c_table')\n\nI looked at the generated proto and it contains the following node:\n  node {\n    name: \"input/lstm_c_table\"\n    op: \"MutableHashTableOfTensorsV2\"\n    attr {\n      key: \"_output_shapes\"\n      value {\n        list {\n          shape {\n          }\n        }\n      }\n    }\n    attr {\n      key: \"container\"\n      value {\n        s: \"\"\n      }\n    }\n    attr {\n      key: \"key_dtype\"\n      value {\n        type: DT_STRING\n      }\n    }\n    attr {\n      key: \"shared_name\"\n      value {\n        s: \"\"\n      }\n    }\n    attr {\n      key: \"use_node_name_sharing\"\n      value {\n        b: true\n      }\n    }\n    attr {\n      key: \"value_dtype\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"value_shape\"\n      value {\n        shape {\n          dim {\n            size: 512\n          }\n        }\n      }\n    }\n  }\n\ncollection_def {\n  key: \"saveable_objects\"\n  value {\n    node_list {\n      value: \"lstm_c_table\"\n      value: \"lstm_h_table\"\n      value: \"history_table\"\n      value: \"first_table\"\n      value: \"encode_lstm_c_table\"\n      value: \"encode_lstm_h_table\"\n    }\n  }\n}\n\nEither removing the above collection or prefixing all the values with input/ results in the following error:\nTypeError: Can't convert Operation 'input/lstm_c_table' to Tensor (target dtype=None, name=None, as_ref=True)\n\nThis solution is part of an imitation of batch_sequences_with_states so a graph can be exported that does not rely on queues but instead uses placeholders and the feed_dict mechanism, for use in interactive model evaluation.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Mint 18\r\n- **TensorFlow installed from (source or binary)**: Binary (pip)\r\n- **TensorFlow version (use command below)**: v1.3.0.0rc0\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\nImport a meta graph containing `MutableHashTable` operations fails. The MutableHashTable in my use case is named and inside a scope. After some digging around I found that the error is a result of a collection `saveable_objects` containing names of `MutableHashTable`s but _without_ the proper scoping.\r\n\r\n### Source code / logs\r\n```\r\ngraph = create_eval_graph()\r\ntf.train.export_meta_graph('eval_model.meta', graph=graph, as_text=True)\r\n\r\n# ...\r\ns = tf.train.import_meta_graph('eval_model.meta') # Fails \r\n```\r\n\r\nThis throws the following\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-238-7de9a7b0d1f2> in <module>()\r\n----> 1 s = tf.train.import_meta_graph('eval_model.meta')\r\n\r\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/training/saver.py in import_meta_graph(meta_graph_or_file, clear_devices, import_scope, **kwargs)\r\n   1696                                       clear_devices=clear_devices,\r\n   1697                                       import_scope=import_scope,\r\n-> 1698                                       **kwargs)\r\n   1699   if meta_graph_def.HasField(\"saver_def\"):\r\n   1700     return Saver(saver_def=meta_graph_def.saver_def, name=import_scope)\r\n\r\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/meta_graph.py in import_scoped_meta_graph(meta_graph_or_file, clear_devices, graph, import_scope, input_map, unbound_inputs_col_name, restore_collections_predicate)\r\n    690           for value in field.value:\r\n    691             col_op = graph.as_graph_element(\r\n--> 692                 ops.prepend_name_scope(value, scope_to_prepend_to_names))\r\n    693             graph.add_to_collection(key, col_op)\r\n    694         elif kind == \"int64_list\":\r\n\r\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in as_graph_element(self, obj, allow_tensor, allow_operation)\r\n   2704 \r\n   2705     with self._lock:\r\n-> 2706       return self._as_graph_element_locked(obj, allow_tensor, allow_operation)\r\n   2707 \r\n   2708   def _as_graph_element_locked(self, obj, allow_tensor, allow_operation):\r\n\r\n/home/ruben/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in _as_graph_element_locked(self, obj, allow_tensor, allow_operation)\r\n   2764         if name not in self._nodes_by_name:\r\n   2765           raise KeyError(\"The name %s refers to an Operation not in the \"\r\n-> 2766                          \"graph.\" % repr(name))\r\n   2767         return self._nodes_by_name[name]\r\n   2768 \r\n\r\nKeyError: \"The name 'lstm_c_table' refers to an Operation not in the graph.\"\r\n```\r\n\r\nWhere `lstm_c_table` is created as follows\r\n\r\n```\r\ntf.contrib.lookup.MutableHashTable(key_dtype=tf.string, value_dtype=tf.float32, default_value=value, name='lstm_c_table')\r\n```\r\n\r\nI looked at the generated proto and it contains the following node:\r\n\r\n```\r\n  node {\r\n    name: \"input/lstm_c_table\"\r\n    op: \"MutableHashTableOfTensorsV2\"\r\n    attr {\r\n      key: \"_output_shapes\"\r\n      value {\r\n        list {\r\n          shape {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    attr {\r\n      key: \"container\"\r\n      value {\r\n        s: \"\"\r\n      }\r\n    }\r\n    attr {\r\n      key: \"key_dtype\"\r\n      value {\r\n        type: DT_STRING\r\n      }\r\n    }\r\n    attr {\r\n      key: \"shared_name\"\r\n      value {\r\n        s: \"\"\r\n      }\r\n    }\r\n    attr {\r\n      key: \"use_node_name_sharing\"\r\n      value {\r\n        b: true\r\n      }\r\n    }\r\n    attr {\r\n      key: \"value_dtype\"\r\n      value {\r\n        type: DT_FLOAT\r\n      }\r\n    }\r\n    attr {\r\n      key: \"value_shape\"\r\n      value {\r\n        shape {\r\n          dim {\r\n            size: 512\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\n```\r\ncollection_def {\r\n  key: \"saveable_objects\"\r\n  value {\r\n    node_list {\r\n      value: \"lstm_c_table\"\r\n      value: \"lstm_h_table\"\r\n      value: \"history_table\"\r\n      value: \"first_table\"\r\n      value: \"encode_lstm_c_table\"\r\n      value: \"encode_lstm_h_table\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nEither removing the above collection or prefixing all the values with `input/` results in the following error:\r\n\r\n```\r\nTypeError: Can't convert Operation 'input/lstm_c_table' to Tensor (target dtype=None, name=None, as_ref=True)\r\n```\r\n\r\nThis solution is part of an imitation of `batch_sequences_with_states` so a graph can be exported that does not rely on queues but instead uses placeholders and the `feed_dict` mechanism, for use in interactive model evaluation."}