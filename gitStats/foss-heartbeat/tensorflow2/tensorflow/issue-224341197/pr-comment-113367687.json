{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/113367687", "pull_request_review_id": 34748126, "id": 113367687, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM2NzY4Nw==", "diff_hunk": "@@ -902,43 +902,31 @@ void Tensor::FillDescription(TensorDescription* description) const {\n }\n \n gtl::InlinedVector<int64, 4> Tensor::ComputeFlatInnerDims(\n-    int64 num_out_dims) const {\n-  if (num_out_dims == dims()) {\n-    return shape_.dim_sizes();\n+    gtl::InlinedVector<int64, 4> orig, int64 num_out_dims) {\n+  if (num_out_dims == orig.size()) {\n+    return orig;\n   }\n   gtl::InlinedVector<int64, 4> out_dims(num_out_dims, 0);\n-  const int64 num_elements = NumElements();\n-  int64 prod_out_dims = 1;\n-  for (int64 out_dim = num_out_dims - 1; out_dim > 0; --out_dim) {\n-    const int64 in_dim = out_dim + (dims() - num_out_dims);\n-    out_dims[out_dim] = (in_dim >= dims() || in_dim < 0) ? 1 : dim_size(in_dim);\n-    prod_out_dims *= out_dims[out_dim];\n-  }\n-  if (prod_out_dims != 0) {\n-    out_dims[0] = num_elements / prod_out_dims;\n-  } else {\n-    out_dims[0] = 0;", "path": "tensorflow/core/framework/tensor.cc", "position": 20, "original_position": 22, "commit_id": "16271ea2fb61319554cecbd1be773a44b89d2de2", "original_commit_id": "f3ec1cc35f883f06ec917369d3229c61a1bd9b35", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "body": "Actually, I think there is a bug in the old code that is not discovered by the test case. The old code uses `prod_out_dims` to keep track of the product of the last `num_out_dims-1` elements and compute the first element of `out_dim` as `num_elements / prod_out_dims`. In the case of `prod_out_dims == 0` it don't make any sense to set the first dimension as `0`.  For example, if you have a tensor with shape `{5,3,0,0,0}` and you run a `flat_inner_dims<?,4>`, you should get a tensor with shape `{15,0,0,0}`. But the way it was computed will gives a `{0,0,0,0}`", "created_at": "2017-04-26T05:22:12Z", "updated_at": "2017-05-06T21:59:09Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9452#discussion_r113367687", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9452", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/113367687"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9452#discussion_r113367687"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9452"}}, "body_html": "<p>Actually, I think there is a bug in the old code that is not discovered by the test case. The old code uses <code>prod_out_dims</code> to keep track of the product of the last <code>num_out_dims-1</code> elements and compute the first element of <code>out_dim</code> as <code>num_elements / prod_out_dims</code>. In the case of <code>prod_out_dims == 0</code> it don't make any sense to set the first dimension as <code>0</code>.  For example, if you have a tensor with shape <code>{5,3,0,0,0}</code> and you run a <code>flat_inner_dims&lt;?,4&gt;</code>, you should get a tensor with shape <code>{15,0,0,0}</code>. But the way it was computed will gives a <code>{0,0,0,0}</code></p>", "body_text": "Actually, I think there is a bug in the old code that is not discovered by the test case. The old code uses prod_out_dims to keep track of the product of the last num_out_dims-1 elements and compute the first element of out_dim as num_elements / prod_out_dims. In the case of prod_out_dims == 0 it don't make any sense to set the first dimension as 0.  For example, if you have a tensor with shape {5,3,0,0,0} and you run a flat_inner_dims<?,4>, you should get a tensor with shape {15,0,0,0}. But the way it was computed will gives a {0,0,0,0}"}