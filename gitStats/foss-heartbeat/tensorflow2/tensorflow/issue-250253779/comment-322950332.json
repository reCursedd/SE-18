{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/322950332", "html_url": "https://github.com/tensorflow/tensorflow/issues/12289#issuecomment-322950332", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12289", "id": 322950332, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjk1MDMzMg==", "user": {"login": "luckynote", "id": 18484155, "node_id": "MDQ6VXNlcjE4NDg0MTU1", "avatar_url": "https://avatars1.githubusercontent.com/u/18484155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luckynote", "html_url": "https://github.com/luckynote", "followers_url": "https://api.github.com/users/luckynote/followers", "following_url": "https://api.github.com/users/luckynote/following{/other_user}", "gists_url": "https://api.github.com/users/luckynote/gists{/gist_id}", "starred_url": "https://api.github.com/users/luckynote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luckynote/subscriptions", "organizations_url": "https://api.github.com/users/luckynote/orgs", "repos_url": "https://api.github.com/users/luckynote/repos", "events_url": "https://api.github.com/users/luckynote/events{/privacy}", "received_events_url": "https://api.github.com/users/luckynote/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-17T02:17:17Z", "updated_at": "2017-08-17T02:17:17Z", "author_association": "NONE", "body_html": "<h1>yes. I do it.<br>\nNow, I have found method.<br>\nIt is a updating ckpt. The source is following:</h1>\n<p>def` RenameCkpt():<br>\nvars_to_rename = {<br>\n\"LSTM/basic_lstm_cell/weights\": \"LSTM/basic_lstm_cell/kernel\",<br>\n\"LSTM/basic_lstm_cell/biases\": \"LSTM/basic_lstm_cell/bias\",<br>\n}<br>\nnew_checkpoint_vars = {}<br>\nreader = tf.train.NewCheckpointReader(FLAGS.checkpoint_path)<br>\nfor old_name in reader.get_variable_to_shape_map():<br>\nif old_name in vars_to_rename:<br>\nnew_name = vars_to_rename[old_name]<br>\nelse:<br>\nnew_name = old_name<br>\nnew_checkpoint_vars[new_name] = tf.Variable(reader.get_tensor(old_name))<br>\ninit = tf.global_variables_initializer()<br>\nsaver = tf.train.Saver(new_checkpoint_vars)<br>\nwith tf.Session() as sess:<br>\nsess.run(init)<br>\nsaver.save(sess, \"/home/ndscbigdata/work/change/tf/gan/im2txt/ckpt/newmodel.ckpt-2000000\")<br>\nprint(\"checkpoint file rename successful... \")</p>\n<h1>According to that, I think LSTM variables of checkpoint is different in TF1.0 and TF1.2.<br>\nNo updating ckpt, it could be success in TF1.2. For that, I try to alter my source use to RenameCkpt(), my codes following:</h1>\n<p>restore_dict = {}<br>\nfor i in variables[:]:  # the first is global step<br>\nif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/bias':        restore_dict[i.name.replace('LSTM/basic_lstm_cell/bias:0',                                 'LSTM/basic_lstm_cell/biases')] = tf.get_variable('LSTM/basic_lstm_cell/biases',[2048,])<br>\nelif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/kernel':        restore_dict[i.name.replace('LSTM/basic_lstm_cell/kernel:0',<br>\n'LSTM/basic_lstm_cell/weights')] = tf.get_variable('LSTM/basic_lstm_cell/weights',[1536, 2048])<br>\nelse:<br>\nrestore_dict[i.name.replace(':0', '')] = i<br>\ninit = tf.global_variables_initializer()<br>\nsess = tf.Session()<br>\nsess.run(init)<br>\nsaver.restore(sess, ckpt_path)</p>\n<h1>Before altering\uff1a</h1>\n<p>restore_dict = {}<br>\nfor i in variables[:]:  # the first is global step<br>\nrestore_dict[i.name.replace(':0', '')] = i<br>\ninit = tf.global_variables_initializer()<br>\nsess = tf.Session()<br>\nsess.run(init)<br>\nsaver.restore(sess, ckpt_path)</p>\n<h1>After altering, the predict.py running have not error in TF1.2, but running results is different to TF1.0 .<br>\nThis is a multi-labels predict classification.<br>\nTF1.0 is able to be predict 2 results, but TF1.2 is just predict 1 result.<br>\nOther, I found if no using LSTM variable, it alse just predict 1 result.. The code following:</h1>\n<p>restore_dict = {}<br>\nfor i in variables[:]:  # the first is global step<br>\nif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/bias':<br>\nprint()<br>\n#restore_dict[i.name.replace('LSTM/basic_lstm_cell/bias:0','LSTM/basic_lstm_cell/biases')] = tf.get_variable('LSTM/basic_lstm_cell/biases',[2048,])<br>\nelif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/kernel':<br>\nprint()<br>\n#restore_dict[i.name.replace('LSTM/basic_lstm_cell/kernel:0', 'LSTM/basic_lstm_cell/weights')] = tf.get_variable('LSTM/basic_lstm_cell/weights',[1536, 2048])<br>\nelse:<br>\nrestore_dict[i.name.replace(':0', '')] = i<br>\ninit = tf.global_variables_initializer()<br>\nsess = tf.Session()<br>\nsess.run(init)<br>\nsaver.restore(sess, ckpt_path)</p>", "body_text": "yes. I do it.\nNow, I have found method.\nIt is a updating ckpt. The source is following:\ndef` RenameCkpt():\nvars_to_rename = {\n\"LSTM/basic_lstm_cell/weights\": \"LSTM/basic_lstm_cell/kernel\",\n\"LSTM/basic_lstm_cell/biases\": \"LSTM/basic_lstm_cell/bias\",\n}\nnew_checkpoint_vars = {}\nreader = tf.train.NewCheckpointReader(FLAGS.checkpoint_path)\nfor old_name in reader.get_variable_to_shape_map():\nif old_name in vars_to_rename:\nnew_name = vars_to_rename[old_name]\nelse:\nnew_name = old_name\nnew_checkpoint_vars[new_name] = tf.Variable(reader.get_tensor(old_name))\ninit = tf.global_variables_initializer()\nsaver = tf.train.Saver(new_checkpoint_vars)\nwith tf.Session() as sess:\nsess.run(init)\nsaver.save(sess, \"/home/ndscbigdata/work/change/tf/gan/im2txt/ckpt/newmodel.ckpt-2000000\")\nprint(\"checkpoint file rename successful... \")\nAccording to that, I think LSTM variables of checkpoint is different in TF1.0 and TF1.2.\nNo updating ckpt, it could be success in TF1.2. For that, I try to alter my source use to RenameCkpt(), my codes following:\nrestore_dict = {}\nfor i in variables[:]:  # the first is global step\nif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/bias':        restore_dict[i.name.replace('LSTM/basic_lstm_cell/bias:0',                                 'LSTM/basic_lstm_cell/biases')] = tf.get_variable('LSTM/basic_lstm_cell/biases',[2048,])\nelif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/kernel':        restore_dict[i.name.replace('LSTM/basic_lstm_cell/kernel:0',\n'LSTM/basic_lstm_cell/weights')] = tf.get_variable('LSTM/basic_lstm_cell/weights',[1536, 2048])\nelse:\nrestore_dict[i.name.replace(':0', '')] = i\ninit = tf.global_variables_initializer()\nsess = tf.Session()\nsess.run(init)\nsaver.restore(sess, ckpt_path)\nBefore altering\uff1a\nrestore_dict = {}\nfor i in variables[:]:  # the first is global step\nrestore_dict[i.name.replace(':0', '')] = i\ninit = tf.global_variables_initializer()\nsess = tf.Session()\nsess.run(init)\nsaver.restore(sess, ckpt_path)\nAfter altering, the predict.py running have not error in TF1.2, but running results is different to TF1.0 .\nThis is a multi-labels predict classification.\nTF1.0 is able to be predict 2 results, but TF1.2 is just predict 1 result.\nOther, I found if no using LSTM variable, it alse just predict 1 result.. The code following:\nrestore_dict = {}\nfor i in variables[:]:  # the first is global step\nif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/bias':\nprint()\n#restore_dict[i.name.replace('LSTM/basic_lstm_cell/bias:0','LSTM/basic_lstm_cell/biases')] = tf.get_variable('LSTM/basic_lstm_cell/biases',[2048,])\nelif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/kernel':\nprint()\n#restore_dict[i.name.replace('LSTM/basic_lstm_cell/kernel:0', 'LSTM/basic_lstm_cell/weights')] = tf.get_variable('LSTM/basic_lstm_cell/weights',[1536, 2048])\nelse:\nrestore_dict[i.name.replace(':0', '')] = i\ninit = tf.global_variables_initializer()\nsess = tf.Session()\nsess.run(init)\nsaver.restore(sess, ckpt_path)", "body": "yes. I do it. \r\nNow, I have found method.\r\nIt is a updating ckpt. The source is following:\r\n===================================================================\r\n\r\ndef` RenameCkpt():\r\n    vars_to_rename = {\r\n    \"LSTM/basic_lstm_cell/weights\": \"LSTM/basic_lstm_cell/kernel\",\r\n    \"LSTM/basic_lstm_cell/biases\": \"LSTM/basic_lstm_cell/bias\",\r\n    }\r\n    new_checkpoint_vars = {}\r\n    reader = tf.train.NewCheckpointReader(FLAGS.checkpoint_path)\r\n    for old_name in reader.get_variable_to_shape_map():\r\n      if old_name in vars_to_rename:\r\n        new_name = vars_to_rename[old_name]\r\n      else:\r\n        new_name = old_name\r\n      new_checkpoint_vars[new_name] = tf.Variable(reader.get_tensor(old_name))\r\n    init = tf.global_variables_initializer()\r\n    saver = tf.train.Saver(new_checkpoint_vars)\r\n    with tf.Session() as sess:\r\n       sess.run(init)\r\n       saver.save(sess, \"/home/ndscbigdata/work/change/tf/gan/im2txt/ckpt/newmodel.ckpt-2000000\")\r\n    print(\"checkpoint file rename successful... \")\r\n\r\nAccording to that, I think LSTM variables of checkpoint is different in TF1.0 and TF1.2. \r\nNo updating ckpt, it could be success in TF1.2. For that, I try to alter my source use to RenameCkpt(), my codes following:\r\n===================================================================\r\nrestore_dict = {}\r\nfor i in variables[:]:  # the first is global step\r\n    if i.name.replace(':0', '')=='LSTM/basic_lstm_cell/bias':        restore_dict[i.name.replace('LSTM/basic_lstm_cell/bias:0',                                 'LSTM/basic_lstm_cell/biases')] = tf.get_variable('LSTM/basic_lstm_cell/biases',[2048,])\r\nelif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/kernel':        restore_dict[i.name.replace('LSTM/basic_lstm_cell/kernel:0',\r\n                                    'LSTM/basic_lstm_cell/weights')] = tf.get_variable('LSTM/basic_lstm_cell/weights',[1536, 2048])\r\n    else:\r\n        restore_dict[i.name.replace(':0', '')] = i\r\ninit = tf.global_variables_initializer()\r\nsess = tf.Session()\r\nsess.run(init)\r\nsaver.restore(sess, ckpt_path)\r\n\r\nBefore altering\uff1a\r\n===================================================================\r\nrestore_dict = {}\r\nfor i in variables[:]:  # the first is global step\r\n      restore_dict[i.name.replace(':0', '')] = i\r\ninit = tf.global_variables_initializer()\r\nsess = tf.Session()\r\nsess.run(init)\r\nsaver.restore(sess, ckpt_path)\r\n\r\nAfter altering, the predict.py running have not error in TF1.2, but running results is different to TF1.0 .\r\nThis is a multi-labels predict classification.\r\nTF1.0 is able to be predict 2 results, but TF1.2 is just predict 1 result.\r\nOther, I found if no using LSTM variable, it alse just predict 1 result.. The code following:\r\n===================================================================\r\nrestore_dict = {}\r\nfor i in variables[:]:  # the first is global step\r\nif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/bias': \r\nprint()                                        \r\n#restore_dict[i.name.replace('LSTM/basic_lstm_cell/bias:0','LSTM/basic_lstm_cell/biases')] = tf.get_variable('LSTM/basic_lstm_cell/biases',[2048,])\r\nelif i.name.replace(':0', '')=='LSTM/basic_lstm_cell/kernel':  \r\nprint()\r\n#restore_dict[i.name.replace('LSTM/basic_lstm_cell/kernel:0', 'LSTM/basic_lstm_cell/weights')] = tf.get_variable('LSTM/basic_lstm_cell/weights',[1536, 2048])\r\n    else:\r\n        restore_dict[i.name.replace(':0', '')] = i\r\ninit = tf.global_variables_initializer()\r\nsess = tf.Session()\r\nsess.run(init)\r\nsaver.restore(sess, ckpt_path)"}