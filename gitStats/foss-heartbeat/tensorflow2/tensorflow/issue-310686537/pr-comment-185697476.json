{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185697476", "pull_request_review_id": 117137577, "id": 185697476, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTY5NzQ3Ng==", "diff_hunk": "@@ -0,0 +1,413 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <map>\n+#include <vector>\n+#include <string>\n+#include <utility>\n+\n+#include \"re2/re2.h\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/lib/strings/str_util.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+#include \"tensorflow/java/src/gen/cc/op_specs.h\"\n+\n+namespace tensorflow {\n+namespace java {\n+namespace {\n+\n+inline bool IsRealNumbers(const AttrValue& values) {\n+  if (!values.has_list()) {\n+    return RealNumberTypes().Contains(values.type());\n+  }\n+  for (int i = 0; i < values.list().type_size(); ++i) {\n+    if (!RealNumberTypes().Contains(values.list().type(i))) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n+\n+class TypeResolver {\n+ public:\n+  explicit TypeResolver(const OpDef& op_def) : op_def_(op_def) {}\n+\n+  Type TypeOf(const OpDef_ArgDef& arg_def, bool *iterable_out);\n+  std::pair<Type, Type> TypeOf(const OpDef_AttrDef& attr_def,", "path": "tensorflow/java/src/gen/cc/op_specs.cc", "position": null, "original_position": 49, "commit_id": "3c799b44b841dc8c4e83fb3fbb61ad4146464f60", "original_commit_id": "d083215fc6f6ec8a314d7980c75a66449c474df6", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "A comment explaining the pair (what do the first and second element in the pair correspond to) would be nice.\r\n\r\nAlso, perhaps call the first one `TypeOf` and this one `TypesOf` since it returns two types.\r\n(Otherwise it can be confusing that `TypeOf` returns either a single `Type` or an `std::pair` depending on the type of the arguments, which isn't obvious at the call sites).", "created_at": "2018-05-03T05:01:31Z", "updated_at": "2018-05-06T14:11:56Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18192#discussion_r185697476", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18192", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185697476"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18192#discussion_r185697476"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18192"}}, "body_html": "<p>A comment explaining the pair (what do the first and second element in the pair correspond to) would be nice.</p>\n<p>Also, perhaps call the first one <code>TypeOf</code> and this one <code>TypesOf</code> since it returns two types.<br>\n(Otherwise it can be confusing that <code>TypeOf</code> returns either a single <code>Type</code> or an <code>std::pair</code> depending on the type of the arguments, which isn't obvious at the call sites).</p>", "body_text": "A comment explaining the pair (what do the first and second element in the pair correspond to) would be nice.\nAlso, perhaps call the first one TypeOf and this one TypesOf since it returns two types.\n(Otherwise it can be confusing that TypeOf returns either a single Type or an std::pair depending on the type of the arguments, which isn't obvious at the call sites)."}