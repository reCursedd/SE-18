{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6361", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6361/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6361/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6361/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6361", "id": 196075062, "node_id": "MDU6SXNzdWUxOTYwNzUwNjI=", "number": 6361, "title": "Using Multiple CPU Threads in an op", "user": {"login": "sdrelton", "id": 6400645, "node_id": "MDQ6VXNlcjY0MDA2NDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6400645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdrelton", "html_url": "https://github.com/sdrelton", "followers_url": "https://api.github.com/users/sdrelton/followers", "following_url": "https://api.github.com/users/sdrelton/following{/other_user}", "gists_url": "https://api.github.com/users/sdrelton/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdrelton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdrelton/subscriptions", "organizations_url": "https://api.github.com/users/sdrelton/orgs", "repos_url": "https://api.github.com/users/sdrelton/repos", "events_url": "https://api.github.com/users/sdrelton/events{/privacy}", "received_events_url": "https://api.github.com/users/sdrelton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-16T14:46:34Z", "updated_at": "2016-12-19T19:19:58Z", "closed_at": "2016-12-19T19:19:58Z", "author_association": "NONE", "body_html": "<p>Hi all,</p>\n<p>I'm interested in using multithreading within a CPU op to increase speed. More specifically, I have some linear algebra code which, for batched matrix multiplies, is much faster than MKL (and probably Eigen).<br>\nI should be able to get the corresponding GPU version working without much trouble.</p>\n<p>Currently my code uses OpenMP and SIMD pragmas which, as I understand it, don't play nicely with tensorflow at the moment. I've been digging through the documentation all day but haven't found any examples of a CPU op with multithreading (that isn't just calling eigen) which I can use.</p>\n<p>Could anyone please point me in the right direction here?</p>\n<p>Cheers!</p>\n<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115928097\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/22\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/22/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/22\">#22</a> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"145342715\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1747\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1747/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1747\">#1747</a></p>\n<h3>Environment info</h3>\n<p>Operating System: Ubuntu 16.04</p>\n<p>Installed version of CUDA and cuDNN:<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):<br>\n-rw-r--r-- 1 root root   558720 Sep 15 00:02 /usr/local/cuda-8.0/lib64/libcudadevrt.a<br>\nlrwxrwxrwx 1 root root       16 Sep 15 00:05 /usr/local/cuda-8.0/lib64/libcudart.so -&gt; libcudart.so.8.0<br>\nlrwxrwxrwx 1 root root       19 Sep 15 00:05 /usr/local/cuda-8.0/lib64/libcudart.so.8.0 -&gt; libcudart.so.8.0.44<br>\n-rw-r--r-- 1 root root   415432 Sep 15 00:02 /usr/local/cuda-8.0/lib64/libcudart.so.8.0.44<br>\n-rw-r--r-- 1 root root   775162 Sep 15 00:02 /usr/local/cuda-8.0/lib64/libcudart_static.a<br>\nlrwxrwxrwx 1 root root       13 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn.so -&gt; libcudnn.so.5<br>\nlrwxrwxrwx 1 root root       17 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn.so.5 -&gt; libcudnn.so.5.1.5<br>\n-rwxr-xr-x 1 root root 79337624 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn.so.5.1.5<br>\n-rw-r--r-- 1 root root 69756172 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn_static.a</p>\n<p>If installed from source, provide</p>\n<ol>\n<li>\n<p>The commit hash (<code>git rev-parse HEAD</code>)<br>\ngit rev-parse HEAD<br>\n<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/dbe5e17e2ed307e86e1a6e79e558ec3e335d46fc/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/dbe5e17e2ed307e86e1a6e79e558ec3e335d46fc\"><tt>dbe5e17</tt></a></p>\n</li>\n<li>\n<p>The output of <code>bazel version</code><br>\nbazel version<br>\nBuild label: 0.4.2<br>\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar<br>\nBuild time: Wed Dec 7 18:47:11 2016 (1481136431)<br>\nBuild timestamp: 1481136431<br>\nBuild timestamp as int: 1481136431</p>\n</li>\n</ol>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>N/A</p>\n<h3>What other attempted solutions have you tried?</h3>\n<p>N/A</p>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment or provide link).<br>\nN/A</p>", "body_text": "Hi all,\nI'm interested in using multithreading within a CPU op to increase speed. More specifically, I have some linear algebra code which, for batched matrix multiplies, is much faster than MKL (and probably Eigen).\nI should be able to get the corresponding GPU version working without much trouble.\nCurrently my code uses OpenMP and SIMD pragmas which, as I understand it, don't play nicely with tensorflow at the moment. I've been digging through the documentation all day but haven't found any examples of a CPU op with multithreading (that isn't just calling eigen) which I can use.\nCould anyone please point me in the right direction here?\nCheers!\nWhat related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\n#22 #1747\nEnvironment info\nOperating System: Ubuntu 16.04\nInstalled version of CUDA and cuDNN:\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\n-rw-r--r-- 1 root root   558720 Sep 15 00:02 /usr/local/cuda-8.0/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 Sep 15 00:05 /usr/local/cuda-8.0/lib64/libcudart.so -> libcudart.so.8.0\nlrwxrwxrwx 1 root root       19 Sep 15 00:05 /usr/local/cuda-8.0/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\n-rw-r--r-- 1 root root   415432 Sep 15 00:02 /usr/local/cuda-8.0/lib64/libcudart.so.8.0.44\n-rw-r--r-- 1 root root   775162 Sep 15 00:02 /usr/local/cuda-8.0/lib64/libcudart_static.a\nlrwxrwxrwx 1 root root       13 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn.so -> libcudnn.so.5\nlrwxrwxrwx 1 root root       17 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5\n-rwxr-xr-x 1 root root 79337624 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn.so.5.1.5\n-rw-r--r-- 1 root root 69756172 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn_static.a\nIf installed from source, provide\n\n\nThe commit hash (git rev-parse HEAD)\ngit rev-parse HEAD\ndbe5e17\n\n\nThe output of bazel version\nbazel version\nBuild label: 0.4.2\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Wed Dec 7 18:47:11 2016 (1481136431)\nBuild timestamp: 1481136431\nBuild timestamp as int: 1481136431\n\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nN/A\nWhat other attempted solutions have you tried?\nN/A\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment or provide link).\nN/A", "body": "Hi all,\r\n\r\nI'm interested in using multithreading within a CPU op to increase speed. More specifically, I have some linear algebra code which, for batched matrix multiplies, is much faster than MKL (and probably Eigen).\r\nI should be able to get the corresponding GPU version working without much trouble.\r\n\r\nCurrently my code uses OpenMP and SIMD pragmas which, as I understand it, don't play nicely with tensorflow at the moment. I've been digging through the documentation all day but haven't found any examples of a CPU op with multithreading (that isn't just calling eigen) which I can use.\r\n\r\nCould anyone please point me in the right direction here?\r\n\r\nCheers!\r\n\r\n### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\r\n#22 #1747 \r\n\r\n### Environment info\r\nOperating System: Ubuntu 16.04\r\n\r\nInstalled version of CUDA and cuDNN: \r\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\r\n-rw-r--r-- 1 root root   558720 Sep 15 00:02 /usr/local/cuda-8.0/lib64/libcudadevrt.a\r\nlrwxrwxrwx 1 root root       16 Sep 15 00:05 /usr/local/cuda-8.0/lib64/libcudart.so -> libcudart.so.8.0\r\nlrwxrwxrwx 1 root root       19 Sep 15 00:05 /usr/local/cuda-8.0/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\r\n-rw-r--r-- 1 root root   415432 Sep 15 00:02 /usr/local/cuda-8.0/lib64/libcudart.so.8.0.44\r\n-rw-r--r-- 1 root root   775162 Sep 15 00:02 /usr/local/cuda-8.0/lib64/libcudart_static.a\r\nlrwxrwxrwx 1 root root       13 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn.so -> libcudnn.so.5\r\nlrwxrwxrwx 1 root root       17 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5\r\n-rwxr-xr-x 1 root root 79337624 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn.so.5.1.5\r\n-rw-r--r-- 1 root root 69756172 Dec 15 12:42 /usr/local/cuda-8.0/lib64/libcudnn_static.a\r\n\r\nIf installed from source, provide \r\n\r\n1. The commit hash (`git rev-parse HEAD`)\r\ngit rev-parse HEAD\r\ndbe5e17e2ed307e86e1a6e79e558ec3e335d46fc\r\n\r\n2. The output of `bazel version`\r\nbazel version\r\nBuild label: 0.4.2\r\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Wed Dec 7 18:47:11 2016 (1481136431)\r\nBuild timestamp: 1481136431\r\nBuild timestamp as int: 1481136431\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\nN/A\r\n\r\n### What other attempted solutions have you tried?\r\nN/A\r\n\r\n### Logs or other output that would be helpful\r\n(If logs are large, please upload as attachment or provide link).\r\nN/A"}