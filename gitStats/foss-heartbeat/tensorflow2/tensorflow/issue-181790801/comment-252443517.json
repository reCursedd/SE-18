{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/252443517", "html_url": "https://github.com/tensorflow/tensorflow/issues/4836#issuecomment-252443517", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4836", "id": 252443517, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQ0MzUxNw==", "user": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-08T19:28:24Z", "updated_at": "2016-10-08T19:28:24Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1381301\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppwwyyxx\">@ppwwyyxx</a> I see.</p>\n<p>It is true that most of the provided subclasses of <a href=\"https://www.tensorflow.org/versions/r0.11/api_docs/python/io_ops.html#ReaderBase\" rel=\"nofollow\">tf.ReaderBase</a> deal with reading data from the filesystem.  However note that the trivial <a href=\"https://www.tensorflow.org/versions/r0.11/api_docs/python/io_ops.html#IdentityReader\" rel=\"nofollow\">tf.IdentityReader</a> is an example of a non-filesystem implementation.</p>\n<p>A natural way to add support for other data sources is to implement a subclass of <code>tf.ReaderBase</code> for that data source.  This is a simple way extend TensorFlow to support arbitrary messaging / pubsub / raw socket layers.</p>\n<p>We welcome contributions!</p>", "body_text": "@ppwwyyxx I see.\nIt is true that most of the provided subclasses of tf.ReaderBase deal with reading data from the filesystem.  However note that the trivial tf.IdentityReader is an example of a non-filesystem implementation.\nA natural way to add support for other data sources is to implement a subclass of tf.ReaderBase for that data source.  This is a simple way extend TensorFlow to support arbitrary messaging / pubsub / raw socket layers.\nWe welcome contributions!", "body": "@ppwwyyxx I see.\n\nIt is true that most of the provided subclasses of [tf.ReaderBase](https://www.tensorflow.org/versions/r0.11/api_docs/python/io_ops.html#ReaderBase) deal with reading data from the filesystem.  However note that the trivial [tf.IdentityReader](https://www.tensorflow.org/versions/r0.11/api_docs/python/io_ops.html#IdentityReader) is an example of a non-filesystem implementation.\n\nA natural way to add support for other data sources is to implement a subclass of `tf.ReaderBase` for that data source.  This is a simple way extend TensorFlow to support arbitrary messaging / pubsub / raw socket layers.\n\nWe welcome contributions!\n"}