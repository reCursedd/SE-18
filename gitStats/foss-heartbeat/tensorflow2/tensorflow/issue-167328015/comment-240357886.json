{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/240357886", "html_url": "https://github.com/tensorflow/tensorflow/issues/3491#issuecomment-240357886", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3491", "id": 240357886, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDM1Nzg4Ng==", "user": {"login": "llhe", "id": 192829, "node_id": "MDQ6VXNlcjE5MjgyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/192829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llhe", "html_url": "https://github.com/llhe", "followers_url": "https://api.github.com/users/llhe/followers", "following_url": "https://api.github.com/users/llhe/following{/other_user}", "gists_url": "https://api.github.com/users/llhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/llhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llhe/subscriptions", "organizations_url": "https://api.github.com/users/llhe/orgs", "repos_url": "https://api.github.com/users/llhe/repos", "events_url": "https://api.github.com/users/llhe/events{/privacy}", "received_events_url": "https://api.github.com/users/llhe/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-17T09:15:10Z", "updated_at": "2016-08-17T09:15:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> It's a DFS we developed and mainly used internally: <a href=\"https://github.com/XiaoMi/galaxy-fds-sdk-cpp\">https://github.com/XiaoMi/galaxy-fds-sdk-cpp</a>. And we host it in our internal branch since the audience is quite limited right now, so it's not a problem now. We already implemented the file_system based on 0.9 and the basic train/export/serving flow can work, however many python code are broken.</p>\n<p>As you mentioned, hosting can be an issue when the DFS can't be accepted and integrated to the trunk code tree. What about supporting dynamic loading of the file system plugin, just like adding customized op? I can work on it if contribution welcome.</p>\n<p>I just found the recently release internal python interface file_io.py as you mentioned, a great progress, expecting it goes public.</p>", "body_text": "@vrv It's a DFS we developed and mainly used internally: https://github.com/XiaoMi/galaxy-fds-sdk-cpp. And we host it in our internal branch since the audience is quite limited right now, so it's not a problem now. We already implemented the file_system based on 0.9 and the basic train/export/serving flow can work, however many python code are broken.\nAs you mentioned, hosting can be an issue when the DFS can't be accepted and integrated to the trunk code tree. What about supporting dynamic loading of the file system plugin, just like adding customized op? I can work on it if contribution welcome.\nI just found the recently release internal python interface file_io.py as you mentioned, a great progress, expecting it goes public.", "body": "@vrv It's a DFS we developed and mainly used internally: https://github.com/XiaoMi/galaxy-fds-sdk-cpp. And we host it in our internal branch since the audience is quite limited right now, so it's not a problem now. We already implemented the file_system based on 0.9 and the basic train/export/serving flow can work, however many python code are broken.\n\nAs you mentioned, hosting can be an issue when the DFS can't be accepted and integrated to the trunk code tree. What about supporting dynamic loading of the file system plugin, just like adding customized op? I can work on it if contribution welcome.\n\nI just found the recently release internal python interface file_io.py as you mentioned, a great progress, expecting it goes public.\n"}