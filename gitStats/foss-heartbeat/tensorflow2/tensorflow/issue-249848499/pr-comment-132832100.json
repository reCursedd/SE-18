{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132832100", "pull_request_review_id": 55956104, "id": 132832100, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgzMjEwMA==", "diff_hunk": "@@ -71,6 +73,21 @@ private static void validateImportedGraph(Graph g, String prefix) {\n   }\n \n   @Test\n+  public void getAllOperations() {\n+    try (Graph g = new Graph()) {\n+      List<Operation> operations = g.getOperations();\n+\n+      assertEquals(0, operations.size());\n+\n+      TestUtil.transpose_A_times_X(g, new int[2][2]);", "path": "tensorflow/java/src/test/java/org/tensorflow/GraphTest.java", "position": null, "original_position": 19, "commit_id": "9fec80a40ef43cf2991bee1020061da738d3ff8a", "original_commit_id": "a1e7eaccca151a036eb086d5a6e08bd7c57793db", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "To keep the test tighter (i.e., not requiring the test reader to know what graph `transpose_A_times_X` will produce), how about changing this to add a single operation?\r\nSomething like:\r\n\r\n```java\r\nassertFalse(g.operations().hasNext());\r\nOperation op = TestUtil.constant(g, \"Const\", 1.0f).op();\r\nIterator<Operation> iter = g.operations();\r\nassertTrue(iter.hasNext());\r\nassertEquals(iter.next(), op);\r\nassertFalse(iter.hasNext());\r\n```", "created_at": "2017-08-13T04:03:26Z", "updated_at": "2017-08-14T19:16:15Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12243#discussion_r132832100", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12243", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132832100"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12243#discussion_r132832100"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12243"}}, "body_html": "<p>To keep the test tighter (i.e., not requiring the test reader to know what graph <code>transpose_A_times_X</code> will produce), how about changing this to add a single operation?<br>\nSomething like:</p>\n<div class=\"highlight highlight-source-java\"><pre>assertFalse(g<span class=\"pl-k\">.</span>operations()<span class=\"pl-k\">.</span>hasNext());\n<span class=\"pl-smi\">Operation</span> op <span class=\"pl-k\">=</span> <span class=\"pl-smi\">TestUtil</span><span class=\"pl-k\">.</span>constant(g, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1.0f</span>)<span class=\"pl-k\">.</span>op();\n<span class=\"pl-k\">Iterator&lt;<span class=\"pl-smi\">Operation</span>&gt;</span> iter <span class=\"pl-k\">=</span> g<span class=\"pl-k\">.</span>operations();\nassertTrue(iter<span class=\"pl-k\">.</span>hasNext());\nassertEquals(iter<span class=\"pl-k\">.</span>next(), op);\nassertFalse(iter<span class=\"pl-k\">.</span>hasNext());</pre></div>", "body_text": "To keep the test tighter (i.e., not requiring the test reader to know what graph transpose_A_times_X will produce), how about changing this to add a single operation?\nSomething like:\nassertFalse(g.operations().hasNext());\nOperation op = TestUtil.constant(g, \"Const\", 1.0f).op();\nIterator<Operation> iter = g.operations();\nassertTrue(iter.hasNext());\nassertEquals(iter.next(), op);\nassertFalse(iter.hasNext());"}