{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20521", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20521/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20521/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20521/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20521", "id": 337916881, "node_id": "MDU6SXNzdWUzMzc5MTY4ODE=", "number": 20521, "title": "prefetch_to_device not working with SparseTensor when fetching to GPU", "user": {"login": "gaffordb", "id": 24629625, "node_id": "MDQ6VXNlcjI0NjI5NjI1", "avatar_url": "https://avatars2.githubusercontent.com/u/24629625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaffordb", "html_url": "https://github.com/gaffordb", "followers_url": "https://api.github.com/users/gaffordb/followers", "following_url": "https://api.github.com/users/gaffordb/following{/other_user}", "gists_url": "https://api.github.com/users/gaffordb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaffordb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaffordb/subscriptions", "organizations_url": "https://api.github.com/users/gaffordb/orgs", "repos_url": "https://api.github.com/users/gaffordb/repos", "events_url": "https://api.github.com/users/gaffordb/events{/privacy}", "received_events_url": "https://api.github.com/users/gaffordb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-07-03T14:10:35Z", "updated_at": "2018-08-14T20:19:50Z", "closed_at": "2018-08-14T20:19:50Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code</strong>: yes</li>\n<li><strong>OS Platform and Distribution</strong>: Linux Ubuntu 14.04</li>\n<li><strong>TensorFlow installed from</strong>: source</li>\n<li><strong>TensorFlow version</strong>: 1.9</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version</strong>: 0.12.0</li>\n<li><strong>GCC/Compiler version</strong>: 4.8.4</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.1</li>\n<li><strong>GPU model and memory</strong>: GTX 1080, 8114MiB</li>\n<li><strong>Exact command to reproduce</strong>:<br>\n(Any sparse tensor being prefetched to GPU will work here, this is just one short example)</li>\n</ul>\n<pre><code>import tensorflow as tf\n\n# Set up simple sparse tensor\nds = tf.data.Dataset.from_tensors(tf.contrib.layers.dense_to_sparse([1], 0))\n\n# prefetch to GPU\ngpu_ds = ds.apply(tf.contrib.data.prefetch_to_device('/gpu:0'))\n\n# Get a value\ngpu_iter = gpu_ds.make_one_shot_iterator()\nval = gpu_iter.get_next()\n\n# Barf\nwith tf.Session() as sess:\n    sess.run(val)\n</code></pre>\n<h3>Describe the problem</h3>\n<p>Bug resulting from prefetch_to_device with the following conditions:</p>\n<ul>\n<li>device is GPU</li>\n<li>dataset element contains a sparse tensor</li>\n</ul>\n<p>Iterator functions appropriately, only when you try to <em>use</em> the data do you run into the error. (see log for error)</p>\n<p>Also, as a side note which may or may not be relevant, I've found that even a single sparse tensor in an element will spoil any other nice, kind, and dense tensors in the pack. So, if, in the previous example, I were to do the following, I would still run into an error:</p>\n<pre><code>import tensorflow as tf\n# Make a sparse tensor\nds = tf.data.Dataset.from_tensors(tf.contrib.layers.dense_to_sparse([1], 0))\n\n# Add in a non-sparse component\nds = ds.map(lambda x: (x,1))\n\n# Prefetch to device\ngpu_ds = ds.apply(tf.contrib.data.prefetch_to_device('/gpu:0'))\n\n# Pull out vals\ngpu_iter = gpu_ds.make_one_shot_iterator()\nval_sparse, val_normal = gpu_iter.get_next()\n\n# Uh oh!\nwith tf.Session() as sess:\n    sess.run(val_normal)\n</code></pre>\n<h3>Log</h3>\n<p>Traceback (most recent call last):<br>\nFile \"sparse_bunk.py\", line 17, in <br>\nsess.run(val_normal)<br>\nFile \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 877, in run<br>\nrun_metadata_ptr)<br>\nFile \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1100, in _run<br>\nfeed_dict_tensor, options, run_metadata)<br>\nFile \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1272, in _do_run<br>\nrun_metadata)<br>\nFile \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1291, in _do_call<br>\nraise type(e)(node_def, op, message)<br>\ntensorflow.python.framework.errors_impl.InternalError: No unary variant device copy function found for direction: 1 and Variant type_name: tensorflow::Tensor<br>\n[[Node: FunctionBufferingResourceGetNext = FunctionBufferingResourceGetNext<a href=\"FunctionBufferingResource\">output_types=[DT_VARIANT, DT_INT32], _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"</a>]]</p>\n<p>Thank you</p>", "body_text": "System information\n\nHave I written custom code: yes\nOS Platform and Distribution: Linux Ubuntu 14.04\nTensorFlow installed from: source\nTensorFlow version: 1.9\nPython version: 2.7\nBazel version: 0.12.0\nGCC/Compiler version: 4.8.4\nCUDA/cuDNN version: 9.1\nGPU model and memory: GTX 1080, 8114MiB\nExact command to reproduce:\n(Any sparse tensor being prefetched to GPU will work here, this is just one short example)\n\nimport tensorflow as tf\n\n# Set up simple sparse tensor\nds = tf.data.Dataset.from_tensors(tf.contrib.layers.dense_to_sparse([1], 0))\n\n# prefetch to GPU\ngpu_ds = ds.apply(tf.contrib.data.prefetch_to_device('/gpu:0'))\n\n# Get a value\ngpu_iter = gpu_ds.make_one_shot_iterator()\nval = gpu_iter.get_next()\n\n# Barf\nwith tf.Session() as sess:\n    sess.run(val)\n\nDescribe the problem\nBug resulting from prefetch_to_device with the following conditions:\n\ndevice is GPU\ndataset element contains a sparse tensor\n\nIterator functions appropriately, only when you try to use the data do you run into the error. (see log for error)\nAlso, as a side note which may or may not be relevant, I've found that even a single sparse tensor in an element will spoil any other nice, kind, and dense tensors in the pack. So, if, in the previous example, I were to do the following, I would still run into an error:\nimport tensorflow as tf\n# Make a sparse tensor\nds = tf.data.Dataset.from_tensors(tf.contrib.layers.dense_to_sparse([1], 0))\n\n# Add in a non-sparse component\nds = ds.map(lambda x: (x,1))\n\n# Prefetch to device\ngpu_ds = ds.apply(tf.contrib.data.prefetch_to_device('/gpu:0'))\n\n# Pull out vals\ngpu_iter = gpu_ds.make_one_shot_iterator()\nval_sparse, val_normal = gpu_iter.get_next()\n\n# Uh oh!\nwith tf.Session() as sess:\n    sess.run(val_normal)\n\nLog\nTraceback (most recent call last):\nFile \"sparse_bunk.py\", line 17, in \nsess.run(val_normal)\nFile \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 877, in run\nrun_metadata_ptr)\nFile \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1100, in _run\nfeed_dict_tensor, options, run_metadata)\nFile \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1272, in _do_run\nrun_metadata)\nFile \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1291, in _do_call\nraise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InternalError: No unary variant device copy function found for direction: 1 and Variant type_name: tensorflow::Tensor\n[[Node: FunctionBufferingResourceGetNext = FunctionBufferingResourceGetNextoutput_types=[DT_VARIANT, DT_INT32], _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"]]\nThank you", "body": "### System information\r\n- **Have I written custom code**: yes\r\n- **OS Platform and Distribution**: Linux Ubuntu 14.04\r\n- **TensorFlow installed from**: source\r\n- **TensorFlow version**: 1.9\r\n- **Python version**: 2.7\r\n- **Bazel version**: 0.12.0\r\n- **GCC/Compiler version**: 4.8.4\r\n- **CUDA/cuDNN version**: 9.1\r\n- **GPU model and memory**: GTX 1080, 8114MiB\r\n- **Exact command to reproduce**:\r\n(Any sparse tensor being prefetched to GPU will work here, this is just one short example)\r\n```\r\nimport tensorflow as tf\r\n\r\n# Set up simple sparse tensor\r\nds = tf.data.Dataset.from_tensors(tf.contrib.layers.dense_to_sparse([1], 0))\r\n\r\n# prefetch to GPU\r\ngpu_ds = ds.apply(tf.contrib.data.prefetch_to_device('/gpu:0'))\r\n\r\n# Get a value\r\ngpu_iter = gpu_ds.make_one_shot_iterator()\r\nval = gpu_iter.get_next()\r\n\r\n# Barf\r\nwith tf.Session() as sess:\r\n    sess.run(val)\r\n```\r\n### Describe the problem\r\nBug resulting from prefetch_to_device with the following conditions: \r\n* device is GPU\r\n* dataset element contains a sparse tensor\r\n\r\nIterator functions appropriately, only when you try to _use_ the data do you run into the error. (see log for error)\r\n\r\nAlso, as a side note which may or may not be relevant, I've found that even a single sparse tensor in an element will spoil any other nice, kind, and dense tensors in the pack. So, if, in the previous example, I were to do the following, I would still run into an error:\r\n```\r\nimport tensorflow as tf\r\n# Make a sparse tensor\r\nds = tf.data.Dataset.from_tensors(tf.contrib.layers.dense_to_sparse([1], 0))\r\n\r\n# Add in a non-sparse component\r\nds = ds.map(lambda x: (x,1))\r\n\r\n# Prefetch to device\r\ngpu_ds = ds.apply(tf.contrib.data.prefetch_to_device('/gpu:0'))\r\n\r\n# Pull out vals\r\ngpu_iter = gpu_ds.make_one_shot_iterator()\r\nval_sparse, val_normal = gpu_iter.get_next()\r\n\r\n# Uh oh!\r\nwith tf.Session() as sess:\r\n    sess.run(val_normal)\r\n```\r\n\r\n### Log\r\nTraceback (most recent call last):\r\n  File \"sparse_bunk.py\", line 17, in <module>\r\n    sess.run(val_normal)\r\n  File \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 877, in run\r\n    run_metadata_ptr)\r\n  File \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1100, in _run\r\n    feed_dict_tensor, options, run_metadata)\r\n  File \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1272, in _do_run\r\n    run_metadata)\r\n  File \"/local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1291, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InternalError: No unary variant device copy function found for direction: 1 and Variant type_name: tensorflow::Tensor\r\n     [[Node: FunctionBufferingResourceGetNext = FunctionBufferingResourceGetNext[output_types=[DT_VARIANT, DT_INT32], _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"](FunctionBufferingResource)]]\r\n\r\nThank you"}