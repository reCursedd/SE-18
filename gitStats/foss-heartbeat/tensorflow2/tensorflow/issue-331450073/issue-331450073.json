{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19927", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19927/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19927/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19927/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19927", "id": 331450073, "node_id": "MDU6SXNzdWUzMzE0NTAwNzM=", "number": 19927, "title": " return getattr(obj, method)(*args, **kwds) numpy.core._internal.AxisError: axis 1 is out of bounds for array of dimension 1", "user": {"login": "Munaze", "id": 25012359, "node_id": "MDQ6VXNlcjI1MDEyMzU5", "avatar_url": "https://avatars0.githubusercontent.com/u/25012359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Munaze", "html_url": "https://github.com/Munaze", "followers_url": "https://api.github.com/users/Munaze/followers", "following_url": "https://api.github.com/users/Munaze/following{/other_user}", "gists_url": "https://api.github.com/users/Munaze/gists{/gist_id}", "starred_url": "https://api.github.com/users/Munaze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Munaze/subscriptions", "organizations_url": "https://api.github.com/users/Munaze/orgs", "repos_url": "https://api.github.com/users/Munaze/repos", "events_url": "https://api.github.com/users/Munaze/events{/privacy}", "received_events_url": "https://api.github.com/users/Munaze/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-06-12T06:11:13Z", "updated_at": "2018-06-15T00:49:14Z", "closed_at": "2018-06-15T00:49:14Z", "author_association": "NONE", "body_html": "<p>Having error in the code:</p>\n<p>def accuracy(predictions,labels):<br>\nreturn(100.0*np.sum(np.argmax(predictions) == np.argmax(labels,1))/predictions.shape[0])</p>\n<p>with tf.Session(graph=graph) as session:<br>\ntf.global_variables_initializer().run()<br>\nprint('Initialized')<br>\nfor step in range(num_steps):<br>\n_, l, predictions = session.run([optimizer, loss, train_prediction])<br>\nif (step % 100 == 0):</p>\n<pre><code>        print('loss at step %d: %f'%(step,1))\n        print('Training accurecy:%.1f%%'% accuracy(\n            predictions,train_labels[:train_subset,:]))\n        print('Validation accuracy : %.1f%%' %accuracy(\n            valid_prediction.eval(),valid_labels))\nprint('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(),test_labels))\n</code></pre>", "body_text": "Having error in the code:\ndef accuracy(predictions,labels):\nreturn(100.0*np.sum(np.argmax(predictions) == np.argmax(labels,1))/predictions.shape[0])\nwith tf.Session(graph=graph) as session:\ntf.global_variables_initializer().run()\nprint('Initialized')\nfor step in range(num_steps):\n_, l, predictions = session.run([optimizer, loss, train_prediction])\nif (step % 100 == 0):\n        print('loss at step %d: %f'%(step,1))\n        print('Training accurecy:%.1f%%'% accuracy(\n            predictions,train_labels[:train_subset,:]))\n        print('Validation accuracy : %.1f%%' %accuracy(\n            valid_prediction.eval(),valid_labels))\nprint('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(),test_labels))", "body": "Having error in the code:\r\n\r\n\r\ndef accuracy(predictions,labels):\r\n    return(100.0*np.sum(np.argmax(predictions) == np.argmax(labels,1))/predictions.shape[0])\r\n\r\nwith tf.Session(graph=graph) as session:\r\n    tf.global_variables_initializer().run()\r\n    print('Initialized')\r\n    for step in range(num_steps):\r\n        _, l, predictions = session.run([optimizer, loss, train_prediction])\r\n        if (step % 100 == 0):\r\n         \r\n            \r\n            print('loss at step %d: %f'%(step,1))\r\n            print('Training accurecy:%.1f%%'% accuracy(\r\n                predictions,train_labels[:train_subset,:]))\r\n            print('Validation accuracy : %.1f%%' %accuracy(\r\n                valid_prediction.eval(),valid_labels))\r\n    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(),test_labels))\r\n    \r\n            "}