{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18094", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18094/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18094/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18094/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18094", "id": 309853029, "node_id": "MDU6SXNzdWUzMDk4NTMwMjk=", "number": 18094, "title": "`tf.keras.estimator._create_ordered_io` casts everything to floatx, which breaks non-floatx inputs", "user": {"login": "zmjjmz", "id": 1694612, "node_id": "MDQ6VXNlcjE2OTQ2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1694612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmjjmz", "html_url": "https://github.com/zmjjmz", "followers_url": "https://api.github.com/users/zmjjmz/followers", "following_url": "https://api.github.com/users/zmjjmz/following{/other_user}", "gists_url": "https://api.github.com/users/zmjjmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmjjmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmjjmz/subscriptions", "organizations_url": "https://api.github.com/users/zmjjmz/orgs", "repos_url": "https://api.github.com/users/zmjjmz/repos", "events_url": "https://api.github.com/users/zmjjmz/events{/privacy}", "received_events_url": "https://api.github.com/users/zmjjmz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-03-29T18:13:25Z", "updated_at": "2018-04-20T23:10:42Z", "closed_at": "2018-04-20T23:10:42Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Debian 3.16.36</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Installed via pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: <code>('v1.6.0-0-gd2e24b6039', '1.6.0')</code></li>\n<li><strong>Python version</strong>: 2.7.9</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>: Requires significant code, let me know if necessary</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>This is kind of a simple issue with using <code>Keras</code> models as Tensorflow Estimators. I unfortunately need to do this awkward conversion in order to use SageMaker, which is even more awkwardly behind by two versions of Tensorflow. Which is fun.</p>\n<p>Basically, I have a <code>Keras</code> model that expects a <code>tf.string</code> input <code>dtype</code>, which is then passed through to a Lookup layer for some text embeddings. This works fine as a Keras model and works fine if I extract the input layers myself and connect them into an Estimator. However, if I go to create an estimator from the model using <code>model_to_estimator</code> I run into this code path: <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/python/keras/_impl/keras/estimator.py#L80\">https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/python/keras/_impl/keras/estimator.py#L80</a></p>\n<p>This conversion then causes the model to break further down the line. I'm not sure why this float cast occurs, but this commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/4c86ece040cb96ea689f5c0d084b6959274eab91#diff-69effda952f96b36c8015cc1a3462d65/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/4c86ece040cb96ea689f5c0d084b6959274eab91#diff-69effda952f96b36c8015cc1a3462d65\"><tt>4c86ece</tt>#diff-69effda952f96b36c8015cc1a3462d65</a> seems to imply that Keras models are meant to only take floatx input, which doesn't really seem right.</p>\n<p>Would not doing this cast break anything? If so, is there a way to use a non-float32 input with Keras models that need to be converted to Estimators?</p>\n<p>Thanks!</p>\n<h3>Source code / logs</h3>\n<p>Here's the exact traceback for the issue:</p>\n<pre><code>/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument \nof issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.          \n  from ._conv import register_converters as _register_converters                                                                           \nWARNING:tensorflow:Using temporary folder as model directory: /tmp/tmp6Wogzk                                                               \n2018-03-29 14:12:41.586292: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow       \nbinary was not compiled to use: AVX2 FMA                                                                                                   \nWARNING:tensorflow:Output \"final_representation\" missing from loss dictionary. We assume this was done on purpose, and we will not be      \nexpecting any data to be passed to \"final_representation\" during training.                                                                 \nWARNING:tensorflow:Output \"oov_code\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any    \ndata to be passed to \"oov_code\" during training.                                                                                           \nTesting common_estimator_fns.py locally                                                                                                    \nMaking estimator                                                                                                                           \nModel dir: /tmp/tmp6Wogzk                                                                                                                  \nTraining estimator                                                                                                                         \nfloat64                                                                                                                                    \nTensor(\"random_shuffle_queue_DequeueMany:1\", shape=(32, 1), dtype=string, device=/device:CPU:0)                                            \nTraceback (most recent call last):                                                                                                         \n  File \"common_estimator_fns.py\", line 423, in &lt;module&gt;                                                                                    \n    hooks=[tf_debug.LocalCLIDebugHook()])                                                                                                  \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 352, in train \n    loss = self._train_model(input_fn, hooks, saving_listeners)                                                                            \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 812, in       \n_train_model                                                                                                                               \n    features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)                                                                            \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 793, in       \n_call_model_fn                                                                                                                             \n    model_fn_results = self._model_fn(features=features, **kwargs)                                                                         \n  File \"common_estimator_fns.py\", line 381, in model_fn                                                                                    \n    return keras_model_fn(features, labels, mode)                                                                                          \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py\", line 160,  \nin model_fn                                                                                                                                \n    labels)                                                                                                                                \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py\", line 109,  \nin _clone_and_build_model                                                                                                                  \n    model = models.clone_model(keras_model, input_tensors=input_tensors)                                                                   \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 1557, in \nclone_model                                                                                                                                \n    return _clone_functional_model(model, input_tensors=input_tensors)                                                                     \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 1451, in \n_clone_functional_model                                                                                                                    \n    output_tensors = topology._to_list(layer(computed_tensor, **kwargs))                                                                   \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line \n258, in __call__                                                                                                                           \n    output = super(Layer, self).__call__(inputs, **kwargs)                                                                                 \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 673, in __call__      \n    self._assert_input_compatibility(inputs)                                                                                               \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 1204, in              \n_assert_input_compatibility                                                                                                                \n    ', found dtype=' + str(x.dtype))                                                                                                       \nValueError: Input 0 of layer lookedup is incompatible with the layer: expected dtype=&lt;dtype: 'string'&gt;, found dtype=&lt;dtype: 'float32'&gt;     \n</code></pre>\n<p>I can provide code if absolutely necessary, but it'd take some work to get to a minimal reproduction.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Debian 3.16.36\nTensorFlow installed from (source or binary): Installed via pip\nTensorFlow version (use command below): ('v1.6.0-0-gd2e24b6039', '1.6.0')\nPython version: 2.7.9\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: Requires significant code, let me know if necessary\n\nDescribe the problem\nThis is kind of a simple issue with using Keras models as Tensorflow Estimators. I unfortunately need to do this awkward conversion in order to use SageMaker, which is even more awkwardly behind by two versions of Tensorflow. Which is fun.\nBasically, I have a Keras model that expects a tf.string input dtype, which is then passed through to a Lookup layer for some text embeddings. This works fine as a Keras model and works fine if I extract the input layers myself and connect them into an Estimator. However, if I go to create an estimator from the model using model_to_estimator I run into this code path: https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/python/keras/_impl/keras/estimator.py#L80\nThis conversion then causes the model to break further down the line. I'm not sure why this float cast occurs, but this commit 4c86ece#diff-69effda952f96b36c8015cc1a3462d65 seems to imply that Keras models are meant to only take floatx input, which doesn't really seem right.\nWould not doing this cast break anything? If so, is there a way to use a non-float32 input with Keras models that need to be converted to Estimators?\nThanks!\nSource code / logs\nHere's the exact traceback for the issue:\n/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument \nof issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.          \n  from ._conv import register_converters as _register_converters                                                                           \nWARNING:tensorflow:Using temporary folder as model directory: /tmp/tmp6Wogzk                                                               \n2018-03-29 14:12:41.586292: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow       \nbinary was not compiled to use: AVX2 FMA                                                                                                   \nWARNING:tensorflow:Output \"final_representation\" missing from loss dictionary. We assume this was done on purpose, and we will not be      \nexpecting any data to be passed to \"final_representation\" during training.                                                                 \nWARNING:tensorflow:Output \"oov_code\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any    \ndata to be passed to \"oov_code\" during training.                                                                                           \nTesting common_estimator_fns.py locally                                                                                                    \nMaking estimator                                                                                                                           \nModel dir: /tmp/tmp6Wogzk                                                                                                                  \nTraining estimator                                                                                                                         \nfloat64                                                                                                                                    \nTensor(\"random_shuffle_queue_DequeueMany:1\", shape=(32, 1), dtype=string, device=/device:CPU:0)                                            \nTraceback (most recent call last):                                                                                                         \n  File \"common_estimator_fns.py\", line 423, in <module>                                                                                    \n    hooks=[tf_debug.LocalCLIDebugHook()])                                                                                                  \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 352, in train \n    loss = self._train_model(input_fn, hooks, saving_listeners)                                                                            \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 812, in       \n_train_model                                                                                                                               \n    features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)                                                                            \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 793, in       \n_call_model_fn                                                                                                                             \n    model_fn_results = self._model_fn(features=features, **kwargs)                                                                         \n  File \"common_estimator_fns.py\", line 381, in model_fn                                                                                    \n    return keras_model_fn(features, labels, mode)                                                                                          \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py\", line 160,  \nin model_fn                                                                                                                                \n    labels)                                                                                                                                \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py\", line 109,  \nin _clone_and_build_model                                                                                                                  \n    model = models.clone_model(keras_model, input_tensors=input_tensors)                                                                   \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 1557, in \nclone_model                                                                                                                                \n    return _clone_functional_model(model, input_tensors=input_tensors)                                                                     \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 1451, in \n_clone_functional_model                                                                                                                    \n    output_tensors = topology._to_list(layer(computed_tensor, **kwargs))                                                                   \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line \n258, in __call__                                                                                                                           \n    output = super(Layer, self).__call__(inputs, **kwargs)                                                                                 \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 673, in __call__      \n    self._assert_input_compatibility(inputs)                                                                                               \n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 1204, in              \n_assert_input_compatibility                                                                                                                \n    ', found dtype=' + str(x.dtype))                                                                                                       \nValueError: Input 0 of layer lookedup is incompatible with the layer: expected dtype=<dtype: 'string'>, found dtype=<dtype: 'float32'>     \n\nI can provide code if absolutely necessary, but it'd take some work to get to a minimal reproduction.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Debian 3.16.36\r\n- **TensorFlow installed from (source or binary)**: Installed via pip\r\n- **TensorFlow version (use command below)**: `('v1.6.0-0-gd2e24b6039', '1.6.0')`\r\n- **Python version**: 2.7.9\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: Requires significant code, let me know if necessary\r\n\r\n### Describe the problem\r\n\r\nThis is kind of a simple issue with using `Keras` models as Tensorflow Estimators. I unfortunately need to do this awkward conversion in order to use SageMaker, which is even more awkwardly behind by two versions of Tensorflow. Which is fun.\r\n\r\nBasically, I have a `Keras` model that expects a `tf.string` input `dtype`, which is then passed through to a Lookup layer for some text embeddings. This works fine as a Keras model and works fine if I extract the input layers myself and connect them into an Estimator. However, if I go to create an estimator from the model using `model_to_estimator` I run into this code path: https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/python/keras/_impl/keras/estimator.py#L80\r\n\r\nThis conversion then causes the model to break further down the line. I'm not sure why this float cast occurs, but this commit https://github.com/tensorflow/tensorflow/commit/4c86ece040cb96ea689f5c0d084b6959274eab91#diff-69effda952f96b36c8015cc1a3462d65 seems to imply that Keras models are meant to only take floatx input, which doesn't really seem right.\r\n\r\nWould not doing this cast break anything? If so, is there a way to use a non-float32 input with Keras models that need to be converted to Estimators?\r\n\r\nThanks!\r\n\r\n### Source code / logs\r\n\r\nHere's the exact traceback for the issue:\r\n\r\n```\r\n/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument \r\nof issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.          \r\n  from ._conv import register_converters as _register_converters                                                                           \r\nWARNING:tensorflow:Using temporary folder as model directory: /tmp/tmp6Wogzk                                                               \r\n2018-03-29 14:12:41.586292: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow       \r\nbinary was not compiled to use: AVX2 FMA                                                                                                   \r\nWARNING:tensorflow:Output \"final_representation\" missing from loss dictionary. We assume this was done on purpose, and we will not be      \r\nexpecting any data to be passed to \"final_representation\" during training.                                                                 \r\nWARNING:tensorflow:Output \"oov_code\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any    \r\ndata to be passed to \"oov_code\" during training.                                                                                           \r\nTesting common_estimator_fns.py locally                                                                                                    \r\nMaking estimator                                                                                                                           \r\nModel dir: /tmp/tmp6Wogzk                                                                                                                  \r\nTraining estimator                                                                                                                         \r\nfloat64                                                                                                                                    \r\nTensor(\"random_shuffle_queue_DequeueMany:1\", shape=(32, 1), dtype=string, device=/device:CPU:0)                                            \r\nTraceback (most recent call last):                                                                                                         \r\n  File \"common_estimator_fns.py\", line 423, in <module>                                                                                    \r\n    hooks=[tf_debug.LocalCLIDebugHook()])                                                                                                  \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 352, in train \r\n    loss = self._train_model(input_fn, hooks, saving_listeners)                                                                            \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 812, in       \r\n_train_model                                                                                                                               \r\n    features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)                                                                            \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/estimator/estimator.py\", line 793, in       \r\n_call_model_fn                                                                                                                             \r\n    model_fn_results = self._model_fn(features=features, **kwargs)                                                                         \r\n  File \"common_estimator_fns.py\", line 381, in model_fn                                                                                    \r\n    return keras_model_fn(features, labels, mode)                                                                                          \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py\", line 160,  \r\nin model_fn                                                                                                                                \r\n    labels)                                                                                                                                \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/estimator.py\", line 109,  \r\nin _clone_and_build_model                                                                                                                  \r\n    model = models.clone_model(keras_model, input_tensors=input_tensors)                                                                   \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 1557, in \r\nclone_model                                                                                                                                \r\n    return _clone_functional_model(model, input_tensors=input_tensors)                                                                     \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 1451, in \r\n_clone_functional_model                                                                                                                    \r\n    output_tensors = topology._to_list(layer(computed_tensor, **kwargs))                                                                   \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line \r\n258, in __call__                                                                                                                           \r\n    output = super(Layer, self).__call__(inputs, **kwargs)                                                                                 \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 673, in __call__      \r\n    self._assert_input_compatibility(inputs)                                                                                               \r\n  File \"/home/u1/zach/proj/dataplayground2/local/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 1204, in              \r\n_assert_input_compatibility                                                                                                                \r\n    ', found dtype=' + str(x.dtype))                                                                                                       \r\nValueError: Input 0 of layer lookedup is incompatible with the layer: expected dtype=<dtype: 'string'>, found dtype=<dtype: 'float32'>     \r\n```\r\n\r\nI can provide code if absolutely necessary, but it'd take some work to get to a minimal reproduction."}