{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/250959691", "html_url": "https://github.com/tensorflow/tensorflow/issues/4715#issuecomment-250959691", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4715", "id": 250959691, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDk1OTY5MQ==", "user": {"login": "jharting", "id": 167352, "node_id": "MDQ6VXNlcjE2NzM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/167352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jharting", "html_url": "https://github.com/jharting", "followers_url": "https://api.github.com/users/jharting/followers", "following_url": "https://api.github.com/users/jharting/following{/other_user}", "gists_url": "https://api.github.com/users/jharting/gists{/gist_id}", "starred_url": "https://api.github.com/users/jharting/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jharting/subscriptions", "organizations_url": "https://api.github.com/users/jharting/orgs", "repos_url": "https://api.github.com/users/jharting/repos", "events_url": "https://api.github.com/users/jharting/events{/privacy}", "received_events_url": "https://api.github.com/users/jharting/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-02T08:17:33Z", "updated_at": "2016-10-02T08:17:33Z", "author_association": "NONE", "body_html": "<p>Minimalistic reproducer:</p>\n<pre><code>import tensorflow as tf\nfrom numpy import *\n\ntrainX = mat([[1,1], [0,0]])\ntrainY = array([1,0])\n\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=2)]\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10])\n\nclassifier.fit(x=trainX, y=trainY, steps=2000)\n\n</code></pre>", "body_text": "Minimalistic reproducer:\nimport tensorflow as tf\nfrom numpy import *\n\ntrainX = mat([[1,1], [0,0]])\ntrainY = array([1,0])\n\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=2)]\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10])\n\nclassifier.fit(x=trainX, y=trainY, steps=2000)", "body": "Minimalistic reproducer:\n\n```\nimport tensorflow as tf\nfrom numpy import *\n\ntrainX = mat([[1,1], [0,0]])\ntrainY = array([1,0])\n\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=2)]\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10])\n\nclassifier.fit(x=trainX, y=trainY, steps=2000)\n\n```\n"}