{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21975", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21975/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21975/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21975/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21975", "id": 355570724, "node_id": "MDU6SXNzdWUzNTU1NzA3MjQ=", "number": 21975, "title": "Recalculate a convolution value with the eager execution", "user": {"login": "josearcosaneas", "id": 8970750, "node_id": "MDQ6VXNlcjg5NzA3NTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8970750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josearcosaneas", "html_url": "https://github.com/josearcosaneas", "followers_url": "https://api.github.com/users/josearcosaneas/followers", "following_url": "https://api.github.com/users/josearcosaneas/following{/other_user}", "gists_url": "https://api.github.com/users/josearcosaneas/gists{/gist_id}", "starred_url": "https://api.github.com/users/josearcosaneas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josearcosaneas/subscriptions", "organizations_url": "https://api.github.com/users/josearcosaneas/orgs", "repos_url": "https://api.github.com/users/josearcosaneas/repos", "events_url": "https://api.github.com/users/josearcosaneas/events{/privacy}", "received_events_url": "https://api.github.com/users/josearcosaneas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-08-30T12:50:43Z", "updated_at": "2018-11-14T19:26:22Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Windows 10</strong>:</li>\n<li><strong>TensorFlow installed from conda</strong>:</li>\n<li><strong>TensorFlow version 1.9</strong>:</li>\n<li><strong>Python version 3.6</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I'm trying to use the eager execution.</p>\n<p>I create a training set, a weight and a convolution layer.</p>\n<p>I declare the convolution and change the weights.</p>\n<p>How can I get the convolution calculated again without having to declare the layer again?</p>\n<p>I expected it to be something like that:</p>\n<pre><code>import tensorflow as tf\n\ntf.enable_eager_execution()    \ntfe = tf.contrib.eager\n\n\nTrainingDataExample = tf.constant(0.5, shape=[8, 5, 6, 1], name=\"Inputs\") \nWeightExample = tfe.Variable(tf.truncated_normal([1, 3, 1, 4], seed=1), name=\"Weights\")\nConvExample = tf.nn.conv2d(TrainingDataExample, WeightExample, strides=[1, 1, 1, 1], padding=\"VALID\", name=\"Conv\")\n\nNewWeightExample = tf.constant(2.0, shape=[1, 3, 1, 4], name=\"NewWeights\")\nWeightExample = tf.assign(WeightExample, NewWeightExample )\nresult = ConvExample \n\nprint (result)\n</code></pre>\n<p>But it does not work, the value of the convolution is not updated.</p>\n<p>I know I can do it like this:</p>\n<pre><code>NewWeightExample = tf.constant(2.0, shape=[1, 3, 1, 4], name=\"NewWeights\")\nWeightExample = tf.assign(WeightExample, NewWeightExample )\nConvExample = tf.nn.conv2d(TrainingDataExample, WeightExample,\n                           strides=[1, 1, 1, 1], padding=\"VALID\",\n                           name=\"Conv\")\n</code></pre>\n<p>But I understand that the main class contains a <strong>call</strong> method just like the model class.</p>\n<p>Maybe this is wrong, but I would like to know if I can do this without having to recompute the convolution again.</p>", "body_text": "System information\n\nWindows 10:\nTensorFlow installed from conda:\nTensorFlow version 1.9:\nPython version 3.6:\n\nDescribe the problem\nI'm trying to use the eager execution.\nI create a training set, a weight and a convolution layer.\nI declare the convolution and change the weights.\nHow can I get the convolution calculated again without having to declare the layer again?\nI expected it to be something like that:\nimport tensorflow as tf\n\ntf.enable_eager_execution()    \ntfe = tf.contrib.eager\n\n\nTrainingDataExample = tf.constant(0.5, shape=[8, 5, 6, 1], name=\"Inputs\") \nWeightExample = tfe.Variable(tf.truncated_normal([1, 3, 1, 4], seed=1), name=\"Weights\")\nConvExample = tf.nn.conv2d(TrainingDataExample, WeightExample, strides=[1, 1, 1, 1], padding=\"VALID\", name=\"Conv\")\n\nNewWeightExample = tf.constant(2.0, shape=[1, 3, 1, 4], name=\"NewWeights\")\nWeightExample = tf.assign(WeightExample, NewWeightExample )\nresult = ConvExample \n\nprint (result)\n\nBut it does not work, the value of the convolution is not updated.\nI know I can do it like this:\nNewWeightExample = tf.constant(2.0, shape=[1, 3, 1, 4], name=\"NewWeights\")\nWeightExample = tf.assign(WeightExample, NewWeightExample )\nConvExample = tf.nn.conv2d(TrainingDataExample, WeightExample,\n                           strides=[1, 1, 1, 1], padding=\"VALID\",\n                           name=\"Conv\")\n\nBut I understand that the main class contains a call method just like the model class.\nMaybe this is wrong, but I would like to know if I can do this without having to recompute the convolution again.", "body": "### System information\r\n- **Windows 10**:\r\n- **TensorFlow installed from conda**:\r\n- **TensorFlow version 1.9**:\r\n- **Python version 3.6**:\r\n\r\n### Describe the problem\r\nI'm trying to use the eager execution.\r\n\r\nI create a training set, a weight and a convolution layer.\r\n\r\nI declare the convolution and change the weights.\r\n\r\nHow can I get the convolution calculated again without having to declare the layer again?\r\n\r\nI expected it to be something like that:\r\n\r\n\timport tensorflow as tf\r\n\r\n\ttf.enable_eager_execution()    \r\n\ttfe = tf.contrib.eager\r\n\r\n\r\n\tTrainingDataExample = tf.constant(0.5, shape=[8, 5, 6, 1], name=\"Inputs\") \r\n\tWeightExample = tfe.Variable(tf.truncated_normal([1, 3, 1, 4], seed=1), name=\"Weights\")\r\n\tConvExample = tf.nn.conv2d(TrainingDataExample, WeightExample, strides=[1, 1, 1, 1], padding=\"VALID\", name=\"Conv\")\r\n\r\n\tNewWeightExample = tf.constant(2.0, shape=[1, 3, 1, 4], name=\"NewWeights\")\r\n\tWeightExample = tf.assign(WeightExample, NewWeightExample )\r\n\tresult = ConvExample \r\n\r\n\tprint (result)\r\nBut it does not work, the value of the convolution is not updated.\r\n\r\nI know I can do it like this:\r\n\t\r\n\tNewWeightExample = tf.constant(2.0, shape=[1, 3, 1, 4], name=\"NewWeights\")\r\n\tWeightExample = tf.assign(WeightExample, NewWeightExample )\r\n\tConvExample = tf.nn.conv2d(TrainingDataExample, WeightExample,\r\n\t                           strides=[1, 1, 1, 1], padding=\"VALID\",\r\n\t                           name=\"Conv\")\r\n\r\nBut I understand that the main class contains a __call__ method just like the model class.\r\n\r\nMaybe this is wrong, but I would like to know if I can do this without having to recompute the convolution again.\r\n"}