{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62924882", "pull_request_review_id": null, "id": 62924882, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI0ODgy", "diff_hunk": "@@ -0,0 +1,187 @@\n+#include \"tensorflow/core/framework/op.h\"\n+\n+namespace tensorflow {\n+\n+REGISTER_OP(\"LSTMCellBlock\")\n+    .Attr(\"cell_size: int\")\n+    .Attr(\"forget_bias: float = 1.0\")\n+    .Attr(\"T: {float, double}\")\n+    .Input(\"x: T\")\n+    .Input(\"states_prev: T\")\n+    .Input(\"w: T\")\n+    .Input(\"b: T\")\n+    .Output(\"i: T\")\n+    .Output(\"cs: T\")\n+    .Output(\"f: T\")\n+    .Output(\"o: T\")\n+    .Output(\"ci: T\")\n+    .Output(\"co: T\")\n+    .Output(\"states: T\")\n+    .Output(\"h: T\")\n+    .Doc(R\"doc(\n+Computes the LSTM cell forward propagation for 1 time step.\n+\n+This implementation uses 1 weight matrix and 1 bias vector, there is no\n+diagonal peephole connection.\n+\n+This kernel op implements the following mathematical equations:\n+\n+```python\n+[cs_prev, h_prev] = states_prev\n+\n+xh = [x, h_prev]\n+[i, f, ci, o] = xh * w + b\n+f = f + forget_bias\n+\n+i = sigmoid(i)\n+f = sigmoid(f)\n+ci = tanh(ci)\n+o = sigmoid(o)\n+\n+cs = ci .* i + cs_prev .* f\n+co = tanh(cs)\n+\n+h = co .* o\n+states = [cs, h]\n+```\n+\n+cell_size: The LSTM cell size.\n+forget_bias: The forget gate bias.\n+x: The input to the LSTM cell.\n+states_prev: The previous LSTM state of [cs, h].\n+w: The weight matrix.\n+b: The bias vector.\n+i: The input gate.\n+cs: The cell state before the tanh.\n+f: The forget gate.\n+o: The output gate.\n+ci: The cell input.\n+co: The cell after the tanh.\n+states: The concatenation of [cs, h].\n+h: The output h vector.\n+)doc\");\n+\n+REGISTER_OP(\"LSTMCellBlockGrad\")\n+    .Attr(\"cell_size: int\")\n+    .Attr(\"T: {float, double}\")\n+    .Input(\"x: T\")\n+    .Input(\"states_prev: T\")\n+    .Input(\"w: T\")\n+    .Input(\"b: T\")\n+    .Input(\"i: T\")\n+    .Input(\"cs: T\")\n+    .Input(\"f: T\")\n+    .Input(\"o: T\")\n+    .Input(\"ci: T\")\n+    .Input(\"co: T\")\n+    .Input(\"h: T\")\n+    .Input(\"states_grad: T\")\n+    .Input(\"h_grad: T\")\n+    .Output(\"x_grad: T\")\n+    .Output(\"states_prev_grad: T\")\n+    .Output(\"dicfo: T\")\n+    .Output(\"xh: T\")\n+    .Doc(R\"doc(\n+Computes the LSTM cell backward propagation for 1 timestep.\n+\n+This implementation is to be used inconjunction of LSTMCellBlock.\n+\n+cell_size: The LSTM cell size.\n+x: The input to the LSTM cell.\n+states_prev: The previous LSTM state (it is a concatenated vector of c[t - 1]\n+  and h[t - 1].\n+w: The weight matrix.\n+b: The bias vector.\n+i: The input gate.\n+cs: The cell state before the tanh.\n+f: The forget gate.\n+o: The output gate.\n+ci: The cell input.\n+co: The cell after the tanh.\n+states: The concatenation of [cs, h].\n+h: The output h vector.\n+states_grad: The gradient of states vector.\n+h_grad: THe gradient of h vector.\n+x_grad: The gradient of x.\n+states_prev_grad: The gradient of states_prev.\n+dicfo: The derivative wrt to [i, cs, f, o].\n+xh: The concatenated vector of [x, h].\n+)doc\");\n+\n+REGISTER_OP(\"LSTMBlock\")\n+    .Attr(\"cell_size: int\")\n+    .Attr(\"forget_bias: float = 1.0\")\n+    .Attr(\"sequence_len_max: int\")\n+    .Attr(\"T: {float, double}\")\n+    .Input(\"sequence_len: int64\")\n+    .Input(\"initial_state: T\")\n+    .Input(\"x: sequence_len_max * T\")\n+    .Input(\"w: T\")\n+    .Input(\"b: T\")\n+    .Output(\"i: sequence_len_max * T\")\n+    .Output(\"cs: sequence_len_max * T\")\n+    .Output(\"f: sequence_len_max * T\")\n+    .Output(\"o: sequence_len_max * T\")\n+    .Output(\"ci: sequence_len_max * T\")\n+    .Output(\"co: sequence_len_max * T\")\n+    .Output(\"states: sequence_len_max * T\")\n+    .Output(\"h: sequence_len_max * T\")\n+    .Doc(R\"doc(\n+Computes the LSTM forward propagation for N time steps.\n+\n+This implementation uses 1 weight matrix and 1 bias vector, there is no\n+diagonal peephole connection. The computation of this op is dynamic as a\n+function of sequence_len. We compute N = max(sequence_len) timesteps.\n+\n+cell_size: The LSTM cell size.\n+forget_bias: The forget gate bias.\n+sequence_len: A vector of batch_size containing the sequence length.\n+initial_state: Initial state of the LSTM.\n+x: The list of inputs to the LSTM.\n+w: The weight matrix.\n+b: The bias vector.\n+h: The list of outputs h of the LSTM.\n+states: The list of states (it is the concatenated vector of [c, h]).\n+)doc\");\n+\n+REGISTER_OP(\"LSTMBlockGrad\")\n+    .Attr(\"cell_size: int\")\n+    .Attr(\"sequence_len_max: int\")\n+    .Attr(\"T: {float, double}\")\n+    .Input(\"sequence_len: int64\")\n+    .Input(\"initial_state: T\")\n+    .Input(\"x: sequence_len_max * T\")\n+    .Input(\"w: T\")\n+    .Input(\"b: T\")\n+    .Input(\"i: sequence_len_max * T\")\n+    .Input(\"cs: sequence_len_max * T\")\n+    .Input(\"f: sequence_len_max * T\")\n+    .Input(\"o: sequence_len_max * T\")\n+    .Input(\"ci: sequence_len_max * T\")\n+    .Input(\"co: sequence_len_max * T\")\n+    .Input(\"states: sequence_len_max * T\")\n+    .Input(\"h: sequence_len_max * T\")\n+    .Input(\"h_grad: sequence_len_max * T\")\n+    .Output(\"x_grad: sequence_len_max * T\")\n+    .Output(\"w_grad: T\")\n+    .Output(\"b_grad: T\")\n+    .Doc(R\"doc(\n+Computes the LSTM backward propagation for N time steps.\n+\n+This implementation is to be used inconjunction of LSTMBlock.", "path": "tensorflow/contrib/rnn/ops/lstm_ops.cc", "position": null, "original_position": 171, "commit_id": "258144b98730f99489437f6963737480be4f5a43", "original_commit_id": "18163fc2a0428e15079a8399ed1622b3547471c9", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "in conjunction\n", "created_at": "2016-05-11T20:54:31Z", "updated_at": "2016-05-18T21:31:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2002#discussion_r62924882", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2002", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62924882"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2002#discussion_r62924882"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2002"}}, "body_html": "<p>in conjunction</p>", "body_text": "in conjunction"}