{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62928423", "pull_request_review_id": null, "id": 62928423, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI4NDIz", "diff_hunk": "@@ -0,0 +1,554 @@\n+#define EIGEN_USE_THREADS\n+\n+#if GOOGLE_CUDA\n+#define EIGEN_USE_GPU\n+#endif  // GOOGLE_CUDA\n+\n+#include \"tensorflow/contrib/rnn/kernels/lstm_ops.h\"\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+#include \"tensorflow/core/platform/macros.h\"\n+#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+\n+#if GOOGLE_CUDA\n+#include \"tensorflow/stream_executor/stream.h\"\n+#endif  // GOOGLE_CUDA\n+\n+\n+namespace tensorflow {\n+\n+typedef Eigen::ThreadPoolDevice CPUDevice;\n+typedef Eigen::GpuDevice GPUDevice;\n+\n+#if GOOGLE_CUDA\n+\n+namespace {\n+template <typename T>\n+perftools::gputools::DeviceMemory<T> AsDeviceMemory(const T* cuda_memory) {\n+  perftools::gputools::DeviceMemoryBase wrapped(const_cast<T*>(cuda_memory));\n+  perftools::gputools::DeviceMemory<T> typed(wrapped);\n+  return typed;\n+}\n+}  // namespace\n+\n+#endif  // GOOGLE_CUDA\n+\n+namespace functor {\n+template <typename T>\n+void TensorCuBlasGemm<T>::operator()(\n+    OpKernelContext* ctx, perftools::gputools::Stream* stream,\n+    bool transa, bool transb, uint64 m, uint64 n, uint64 k, T alpha,\n+    const T* a, int lda, const T* b, int ldb, T beta, T *c, int ldc) {\n+#if GOOGLE_CUDA\n+  perftools::gputools::blas::Transpose trans[] = {\n+      perftools::gputools::blas::Transpose::kNoTranspose,\n+      perftools::gputools::blas::Transpose::kTranspose};\n+\n+  auto a_ptr = AsDeviceMemory(a);\n+  auto b_ptr = AsDeviceMemory(b);\n+  auto c_ptr = AsDeviceMemory(c);\n+\n+  bool blas_launch_status = stream->ThenBlasGemm(\n+      trans[transa], trans[transb], m, n, k, alpha, a_ptr, lda, b_ptr, ldb,\n+      beta, &c_ptr, ldc).ok();\n+  OP_REQUIRES(ctx, blas_launch_status, errors::Aborted(\"CuBlasGemm failed!\"));\n+#else\n+  ctx->SetStatus(errors::InvalidArgument(\"CuBlasGemm needs CUDA.\"));\n+#endif\n+}\n+\n+template struct TensorCuBlasGemm<float>;\n+template struct TensorCuBlasGemm<double>;\n+}  // end namespace functor\n+\n+template <typename Device, typename T, bool USE_CUBLAS>\n+class LSTMCellBlockOp : public OpKernel {\n+ public:\n+  explicit LSTMCellBlockOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n+    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"cell_size\", &cell_size_));\n+    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"forget_bias\", &forget_bias_));\n+  }\n+\n+  void Compute(OpKernelContext* ctx) override {\n+    const Tensor* x_tensor = nullptr;\n+    OP_REQUIRES_OK(ctx, ctx->input(\"x\", &x_tensor));\n+\n+    const Tensor* states_prev_tensor = nullptr;\n+    OP_REQUIRES_OK(ctx, ctx->input(\"states_prev\", &states_prev_tensor));\n+\n+    const Tensor* w_tensor = nullptr;\n+    OP_REQUIRES_OK(ctx, ctx->input(\"w\", &w_tensor));\n+\n+    const Tensor* b_tensor = nullptr;\n+    OP_REQUIRES_OK(ctx, ctx->input(\"b\", &b_tensor));\n+\n+    const int64 batch_size = x_tensor->dim_size(0);\n+    const int64 input_size = x_tensor->dim_size(1);\n+    const int64 states_size = cell_size_ * 2;\n+\n+    perftools::gputools::Stream* stream =\n+        ctx->op_device_context() ? ctx->op_device_context()->stream() : nullptr;", "path": "tensorflow/contrib/rnn/kernels/lstm_ops.cc", "position": null, "original_position": 99, "commit_id": "258144b98730f99489437f6963737480be4f5a43", "original_commit_id": "fc40971bba82762fe413b5e7d6fe12a09722876b", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "Here, perhaps you want to use `std::is_same<Device, GPUDevice>::value` ?\n", "created_at": "2016-05-11T21:16:03Z", "updated_at": "2016-05-18T21:31:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2002#discussion_r62928423", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2002", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62928423"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2002#discussion_r62928423"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2002"}}, "body_html": "<p>Here, perhaps you want to use <code>std::is_same&lt;Device, GPUDevice&gt;::value</code> ?</p>", "body_text": "Here, perhaps you want to use std::is_same<Device, GPUDevice>::value ?"}