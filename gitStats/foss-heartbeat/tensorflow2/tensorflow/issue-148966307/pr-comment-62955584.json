{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62955584", "pull_request_review_id": null, "id": 62955584, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTU1NTg0", "diff_hunk": "@@ -478,3 +533,71 @@ def _make_tf_features(self, input_feat):\n                                   [-1, self._feature_size])\n       freq_inputs.append(cur_input)\n     return freq_inputs\n+\n+\n+class LSTMCellBlock(rnn_cell.RNNCell):\n+  \"\"\"Basic LSTM recurrent network cell.\n+\n+  The implementation is based on: http://arxiv.org/abs/1409.2329.\n+\n+  We add forget_bias (default: 1) to the biases of the forget gate in order to\n+  reduce the scale of forgetting in the beginning of the training.\n+\n+  It does not allow cell clipping, a projection layer, and does not\n+  use peep-hole connections: it is the basic baseline.\n+\n+  Unlike BasicLSTMCell, this is a monolithic op and should be much faster. The\n+  weight and bias matrixes should be compatible as long as the variabel scope\n+  matches.\n+  \"\"\"\n+\n+  def __init__(self, num_units, forget_bias=1.0, input_size=None):\n+    \"\"\"Initialize the basic LSTM cell.\n+\n+    Args:\n+      num_units: int, The number of units in the LSTM cell.\n+      forget_bias: float, The bias added to forget gates (see above).\n+    \"\"\"\n+    if input_size is not None:\n+      logging.warn(\"%s: The input_size parameter is deprecated.\" % self)\n+    self._num_units = num_units\n+    self._forget_bias = forget_bias\n+\n+  @property\n+  def state_size(self):\n+    return self._num_units * 2\n+\n+  @property\n+  def output_size(self):\n+    return self._num_units\n+\n+  def __call__(self, x, states_prev, scope=None):", "path": "tensorflow/contrib/rnn/python/ops/rnn_cell.py", "position": 116, "original_position": 114, "commit_id": "258144b98730f99489437f6963737480be4f5a43", "original_commit_id": "fc40971bba82762fe413b5e7d6fe12a09722876b", "user": {"login": "wchan", "id": 1131892, "node_id": "MDQ6VXNlcjExMzE4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1131892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wchan", "html_url": "https://github.com/wchan", "followers_url": "https://api.github.com/users/wchan/followers", "following_url": "https://api.github.com/users/wchan/following{/other_user}", "gists_url": "https://api.github.com/users/wchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/wchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wchan/subscriptions", "organizations_url": "https://api.github.com/users/wchan/orgs", "repos_url": "https://api.github.com/users/wchan/repos", "events_url": "https://api.github.com/users/wchan/events{/privacy}", "received_events_url": "https://api.github.com/users/wchan/received_events", "type": "User", "site_admin": false}, "body": "unless the push is coming like tmr, i suggest we commit the CL as is for now and then push a second CL to support such feature? or do u think its better to hold off? a good thing right now is the state is /exactly/ (other than numerical differences) the same as the existing BasicLSTMCell, so the tests are very easy to write 1:1.\n", "created_at": "2016-05-12T02:00:11Z", "updated_at": "2016-05-18T21:31:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2002#discussion_r62955584", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2002", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62955584"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2002#discussion_r62955584"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2002"}}, "body_html": "<p>unless the push is coming like tmr, i suggest we commit the CL as is for now and then push a second CL to support such feature? or do u think its better to hold off? a good thing right now is the state is /exactly/ (other than numerical differences) the same as the existing BasicLSTMCell, so the tests are very easy to write 1:1.</p>", "body_text": "unless the push is coming like tmr, i suggest we commit the CL as is for now and then push a second CL to support such feature? or do u think its better to hold off? a good thing right now is the state is /exactly/ (other than numerical differences) the same as the existing BasicLSTMCell, so the tests are very easy to write 1:1."}