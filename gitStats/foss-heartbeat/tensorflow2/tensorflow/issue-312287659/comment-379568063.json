{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/379568063", "html_url": "https://github.com/tensorflow/tensorflow/issues/18323#issuecomment-379568063", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18323", "id": 379568063, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU2ODA2Mw==", "user": {"login": "VanitarNordic", "id": 18719591, "node_id": "MDQ6VXNlcjE4NzE5NTkx", "avatar_url": "https://avatars0.githubusercontent.com/u/18719591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VanitarNordic", "html_url": "https://github.com/VanitarNordic", "followers_url": "https://api.github.com/users/VanitarNordic/followers", "following_url": "https://api.github.com/users/VanitarNordic/following{/other_user}", "gists_url": "https://api.github.com/users/VanitarNordic/gists{/gist_id}", "starred_url": "https://api.github.com/users/VanitarNordic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VanitarNordic/subscriptions", "organizations_url": "https://api.github.com/users/VanitarNordic/orgs", "repos_url": "https://api.github.com/users/VanitarNordic/repos", "events_url": "https://api.github.com/users/VanitarNordic/events{/privacy}", "received_events_url": "https://api.github.com/users/VanitarNordic/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-08T17:42:58Z", "updated_at": "2018-04-08T17:42:58Z", "author_association": "NONE", "body_html": "<p>The code is not something special, just a loop and Keras guides to make reproducible results, something like this:</p>\n<div class=\"highlight highlight-text-python-traceback\"><pre>import os\nos.environ['PYTHONHASHSEED'] = '0'\nimport numpy as np\nnp.random.seed(12)\nimport random as rn\nrn.seed(123)\nimport tensorflow as tf\ntf.set_random_seed(1234)\n\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nfrom keras import backend as K\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\nK.set_session(sess)\n.\n.\n..... some other initialization and codes\n.\n\nfor cnt in range(0, 10):    \n            \n    model <span class=\"pl-k\">=</span> Sequential()        \n    model.add(LSTM(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">5</span>), <span class=\"pl-v\">return_sequences</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>))\n    model.add(Dense(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">activation</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>linear<span class=\"pl-pds\">\"</span></span>)) \n    model.compile(<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mse<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>adam<span class=\"pl-pds\">'</span></span>)\n    model.summary()\n    history <span class=\"pl-k\">=</span> model.fit(train_X, train_y, <span class=\"pl-v\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>, <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">validation_data</span><span class=\"pl-k\">=</span>(test_X, test_y), \n                    verbose <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>, shuffle <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>, callbacks<span class=\"pl-k\">=</span>[tbCallBack])          \n  \n    <span class=\"pl-k\">del</span> model\n    K.clear_session() \n    np.random.seed(<span class=\"pl-c1\">12</span>)    \n    rn.seed(<span class=\"pl-c1\">123</span>)    \n    tf.set_random_seed(<span class=\"pl-c1\">1234</span>)\n</pre></div>", "body_text": "The code is not something special, just a loop and Keras guides to make reproducible results, something like this:\nimport os\nos.environ['PYTHONHASHSEED'] = '0'\nimport numpy as np\nnp.random.seed(12)\nimport random as rn\nrn.seed(123)\nimport tensorflow as tf\ntf.set_random_seed(1234)\n\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nfrom keras import backend as K\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\nK.set_session(sess)\n.\n.\n..... some other initialization and codes\n.\n\nfor cnt in range(0, 10):    \n            \n    model = Sequential()        \n    model.add(LSTM(10, input_shape=(1, 5), return_sequences=False))\n    model.add(Dense(1, activation = \"linear\")) \n    model.compile(loss='mse', optimizer='adam')\n    model.summary()\n    history = model.fit(train_X, train_y, epochs=5, batch_size=1, validation_data=(test_X, test_y), \n                    verbose = 2, shuffle = False, callbacks=[tbCallBack])          \n  \n    del model\n    K.clear_session() \n    np.random.seed(12)    \n    rn.seed(123)    \n    tf.set_random_seed(1234)", "body": "The code is not something special, just a loop and Keras guides to make reproducible results, something like this:\r\n\r\n\r\n\r\n```python-traceback\r\n\r\nimport os\r\nos.environ['PYTHONHASHSEED'] = '0'\r\nimport numpy as np\r\nnp.random.seed(12)\r\nimport random as rn\r\nrn.seed(123)\r\nimport tensorflow as tf\r\ntf.set_random_seed(1234)\r\n\r\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\r\nfrom keras import backend as K\r\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\r\nK.set_session(sess)\r\n.\r\n.\r\n..... some other initialization and codes\r\n.\r\n\r\nfor cnt in range(0, 10):    \r\n            \r\n    model = Sequential()        \r\n    model.add(LSTM(10, input_shape=(1, 5), return_sequences=False))\r\n    model.add(Dense(1, activation = \"linear\")) \r\n    model.compile(loss='mse', optimizer='adam')\r\n    model.summary()\r\n    history = model.fit(train_X, train_y, epochs=5, batch_size=1, validation_data=(test_X, test_y), \r\n                    verbose = 2, shuffle = False, callbacks=[tbCallBack])          \r\n  \r\n    del model\r\n    K.clear_session() \r\n    np.random.seed(12)    \r\n    rn.seed(123)    \r\n    tf.set_random_seed(1234)\r\n\r\n```"}