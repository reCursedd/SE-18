{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353873838", "html_url": "https://github.com/tensorflow/tensorflow/issues/1824#issuecomment-353873838", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1824", "id": 353873838, "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mzg3MzgzOA==", "user": {"login": "MarkSonn", "id": 7654904, "node_id": "MDQ6VXNlcjc2NTQ5MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7654904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkSonn", "html_url": "https://github.com/MarkSonn", "followers_url": "https://api.github.com/users/MarkSonn/followers", "following_url": "https://api.github.com/users/MarkSonn/following{/other_user}", "gists_url": "https://api.github.com/users/MarkSonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkSonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkSonn/subscriptions", "organizations_url": "https://api.github.com/users/MarkSonn/orgs", "repos_url": "https://api.github.com/users/MarkSonn/repos", "events_url": "https://api.github.com/users/MarkSonn/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkSonn/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-25T14:48:12Z", "updated_at": "2017-12-25T15:46:06Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11547801\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/prb12\">@prb12</a> not sure if it's what you were discussing above (it was a bit over my head), but the timeline that I generated for the CIFAR10 tutorial has relatively unmeaningful labels for each time-block. I managed to make it a bit better by wrapping chunks of code with:<br>\n<code>with tf.name_scope(&lt;&lt;label&gt;&gt;):</code></p>\n<p>However, this sometimes makes some of the labels longer (could it be grouping together processes in the same name_scope?), and also doesn't make it much clearer anyway. Is there a way to set up the timeline such that each time-block will represent a function or an individual specific process?</p>\n<p>I put the timeline code mentioned above here (marked with asterisks):</p>\n<pre><code># Excerpt from CIFAR10_train.py\n\nwith tf.train.MonitoredTrainingSession(\n        checkpoint_dir=FLAGS.train_dir,\n        hooks=[tf.train.StopAtStepHook(last_step=FLAGS.max_steps),\n               tf.train.NanTensorHook(loss),\n               _LoggerHook()],\n        config=tf.ConfigProto(\n            log_device_placement=FLAGS.log_device_placement)) as mon_sess:\n  \n    while not mon_sess.should_stop():\n*       run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\n*       run_metadata = tf.RunMetadata()\n*       mon_sess.run(train_op, options=run_options, run_metadata=run_metadata)\n\n*       # Create the Timeline object, and write it to a .json file\n*       tl = timeline.Timeline(step_stats=run_metadata.step_stats)\n*       with open('./json/timeline.ctf.json', 'w') as f:\n*           f.write(tl.generate_chrome_trace_format())```\n</code></pre>", "body_text": "@prb12 not sure if it's what you were discussing above (it was a bit over my head), but the timeline that I generated for the CIFAR10 tutorial has relatively unmeaningful labels for each time-block. I managed to make it a bit better by wrapping chunks of code with:\nwith tf.name_scope(<<label>>):\nHowever, this sometimes makes some of the labels longer (could it be grouping together processes in the same name_scope?), and also doesn't make it much clearer anyway. Is there a way to set up the timeline such that each time-block will represent a function or an individual specific process?\nI put the timeline code mentioned above here (marked with asterisks):\n# Excerpt from CIFAR10_train.py\n\nwith tf.train.MonitoredTrainingSession(\n        checkpoint_dir=FLAGS.train_dir,\n        hooks=[tf.train.StopAtStepHook(last_step=FLAGS.max_steps),\n               tf.train.NanTensorHook(loss),\n               _LoggerHook()],\n        config=tf.ConfigProto(\n            log_device_placement=FLAGS.log_device_placement)) as mon_sess:\n  \n    while not mon_sess.should_stop():\n*       run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\n*       run_metadata = tf.RunMetadata()\n*       mon_sess.run(train_op, options=run_options, run_metadata=run_metadata)\n\n*       # Create the Timeline object, and write it to a .json file\n*       tl = timeline.Timeline(step_stats=run_metadata.step_stats)\n*       with open('./json/timeline.ctf.json', 'w') as f:\n*           f.write(tl.generate_chrome_trace_format())```", "body": "@prb12 not sure if it's what you were discussing above (it was a bit over my head), but the timeline that I generated for the CIFAR10 tutorial has relatively unmeaningful labels for each time-block. I managed to make it a bit better by wrapping chunks of code with: \r\n`with tf.name_scope(<<label>>):`\r\n\r\nHowever, this sometimes makes some of the labels longer (could it be grouping together processes in the same name_scope?), and also doesn't make it much clearer anyway. Is there a way to set up the timeline such that each time-block will represent a function or an individual specific process?\r\n\r\nI put the timeline code mentioned above here (marked with asterisks):\r\n\r\n```\r\n# Excerpt from CIFAR10_train.py\r\n\r\nwith tf.train.MonitoredTrainingSession(\r\n        checkpoint_dir=FLAGS.train_dir,\r\n        hooks=[tf.train.StopAtStepHook(last_step=FLAGS.max_steps),\r\n               tf.train.NanTensorHook(loss),\r\n               _LoggerHook()],\r\n        config=tf.ConfigProto(\r\n            log_device_placement=FLAGS.log_device_placement)) as mon_sess:\r\n  \r\n    while not mon_sess.should_stop():\r\n*       run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\r\n*       run_metadata = tf.RunMetadata()\r\n*       mon_sess.run(train_op, options=run_options, run_metadata=run_metadata)\r\n\r\n*       # Create the Timeline object, and write it to a .json file\r\n*       tl = timeline.Timeline(step_stats=run_metadata.step_stats)\r\n*       with open('./json/timeline.ctf.json', 'w') as f:\r\n*           f.write(tl.generate_chrome_trace_format())```"}