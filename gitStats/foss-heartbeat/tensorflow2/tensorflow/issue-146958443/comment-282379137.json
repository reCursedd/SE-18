{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/282379137", "html_url": "https://github.com/tensorflow/tensorflow/issues/1824#issuecomment-282379137", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1824", "id": 282379137, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjM3OTEzNw==", "user": {"login": "prb12", "id": 11547801, "node_id": "MDQ6VXNlcjExNTQ3ODAx", "avatar_url": "https://avatars1.githubusercontent.com/u/11547801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prb12", "html_url": "https://github.com/prb12", "followers_url": "https://api.github.com/users/prb12/followers", "following_url": "https://api.github.com/users/prb12/following{/other_user}", "gists_url": "https://api.github.com/users/prb12/gists{/gist_id}", "starred_url": "https://api.github.com/users/prb12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prb12/subscriptions", "organizations_url": "https://api.github.com/users/prb12/orgs", "repos_url": "https://api.github.com/users/prb12/repos", "events_url": "https://api.github.com/users/prb12/events{/privacy}", "received_events_url": "https://api.github.com/users/prb12/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-24T19:16:32Z", "updated_at": "2017-02-24T19:16:32Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=654434\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rizar\">@rizar</a>  The tensor (and memory) views generated by tf.Timeline for Chrome Trace Viewer do not typically represent what's going on very well, hence those options are turned off by default.</p>\n<p>As you pointed out, the NodeExecStats proto doesn't really provide enough information to track tensor dependencies accurately.  To do this you really need to know the complete dataflow graph which was executed - and this is <strong>not</strong> the same as the input GraphDef since the placer and optimizer can make quite substantial changes.</p>\n<p>When tf.Timeline was written, it was possible to get a reasonable approximation of the graph by parsing the <code>timeline_label</code> field of NodeExecStats to reconstruct some of the dataflow dependencies.  This has become less and less robust over time.</p>\n<p>However - it is now possible to programmatically retrieve the optimized graphs via the <code>partition_graphs</code> field of the <code>RunMetadata</code> proto, and these ought to provide an accurate idea of tensor lifetime.  The tensor lifetime and memory views of tf.Timeline should probably be rewritten to use these GraphDefs if available.   (however, I don't have any time to do this!)</p>", "body_text": "@rizar  The tensor (and memory) views generated by tf.Timeline for Chrome Trace Viewer do not typically represent what's going on very well, hence those options are turned off by default.\nAs you pointed out, the NodeExecStats proto doesn't really provide enough information to track tensor dependencies accurately.  To do this you really need to know the complete dataflow graph which was executed - and this is not the same as the input GraphDef since the placer and optimizer can make quite substantial changes.\nWhen tf.Timeline was written, it was possible to get a reasonable approximation of the graph by parsing the timeline_label field of NodeExecStats to reconstruct some of the dataflow dependencies.  This has become less and less robust over time.\nHowever - it is now possible to programmatically retrieve the optimized graphs via the partition_graphs field of the RunMetadata proto, and these ought to provide an accurate idea of tensor lifetime.  The tensor lifetime and memory views of tf.Timeline should probably be rewritten to use these GraphDefs if available.   (however, I don't have any time to do this!)", "body": "@rizar  The tensor (and memory) views generated by tf.Timeline for Chrome Trace Viewer do not typically represent what's going on very well, hence those options are turned off by default.\r\n\r\nAs you pointed out, the NodeExecStats proto doesn't really provide enough information to track tensor dependencies accurately.  To do this you really need to know the complete dataflow graph which was executed - and this is **not** the same as the input GraphDef since the placer and optimizer can make quite substantial changes. \r\n\r\nWhen tf.Timeline was written, it was possible to get a reasonable approximation of the graph by parsing the `timeline_label` field of NodeExecStats to reconstruct some of the dataflow dependencies.  This has become less and less robust over time.\r\n\r\nHowever - it is now possible to programmatically retrieve the optimized graphs via the `partition_graphs` field of the `RunMetadata` proto, and these ought to provide an accurate idea of tensor lifetime.  The tensor lifetime and memory views of tf.Timeline should probably be rewritten to use these GraphDefs if available.   (however, I don't have any time to do this!)"}