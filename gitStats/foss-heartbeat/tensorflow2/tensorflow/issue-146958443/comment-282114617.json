{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/282114617", "html_url": "https://github.com/tensorflow/tensorflow/issues/1824#issuecomment-282114617", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1824", "id": 282114617, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjExNDYxNw==", "user": {"login": "rizar", "id": 654434, "node_id": "MDQ6VXNlcjY1NDQzNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/654434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizar", "html_url": "https://github.com/rizar", "followers_url": "https://api.github.com/users/rizar/followers", "following_url": "https://api.github.com/users/rizar/following{/other_user}", "gists_url": "https://api.github.com/users/rizar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizar/subscriptions", "organizations_url": "https://api.github.com/users/rizar/orgs", "repos_url": "https://api.github.com/users/rizar/repos", "events_url": "https://api.github.com/users/rizar/events{/privacy}", "received_events_url": "https://api.github.com/users/rizar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-23T20:41:46Z", "updated_at": "2017-02-23T20:41:46Z", "author_association": "NONE", "body_html": "<p>Hi, is there any documentation of what different fields in <code>NodeExecStats</code> mean? All I see in the <a href=\"https://github.com/tensorflow/tensorflow/blob/714f9b74b53e3644c7be4d967feb4750fcc26fe6/tensorflow/core/framework/step_stats.proto\">respective file</a> is</p>\n<pre><code>// Time/size stats recorded for a single execution of a graph node.\nmessage NodeExecStats {\n  // TODO(tucker): Use some more compact form of node identity than\n  // the full string name.  Either all processes should agree on a\n  // global id (cost_id?) for each node, or we should use a hash of\n  // the name.\n  string node_name = 1;\n  int64 all_start_micros = 2;\n  int64 op_start_rel_micros = 3;\n  int64 op_end_rel_micros = 4;\n  int64 all_end_rel_micros = 5;\n  repeated AllocatorMemoryUsed memory = 6;\n  repeated NodeOutput output = 7;\n  string timeline_label = 8;\n  int64 scheduled_micros = 9;\n  uint32 thread_id = 10;\n  repeated AllocationDescription referenced_tensor = 11;\n};\n</code></pre>\n<p>which is not very informative.</p>\n<p>In particular I am trying to understand if these statistics allow me to see which output tensors are kept in memory until the backward pass and which are quickly garbage collected.</p>", "body_text": "Hi, is there any documentation of what different fields in NodeExecStats mean? All I see in the respective file is\n// Time/size stats recorded for a single execution of a graph node.\nmessage NodeExecStats {\n  // TODO(tucker): Use some more compact form of node identity than\n  // the full string name.  Either all processes should agree on a\n  // global id (cost_id?) for each node, or we should use a hash of\n  // the name.\n  string node_name = 1;\n  int64 all_start_micros = 2;\n  int64 op_start_rel_micros = 3;\n  int64 op_end_rel_micros = 4;\n  int64 all_end_rel_micros = 5;\n  repeated AllocatorMemoryUsed memory = 6;\n  repeated NodeOutput output = 7;\n  string timeline_label = 8;\n  int64 scheduled_micros = 9;\n  uint32 thread_id = 10;\n  repeated AllocationDescription referenced_tensor = 11;\n};\n\nwhich is not very informative.\nIn particular I am trying to understand if these statistics allow me to see which output tensors are kept in memory until the backward pass and which are quickly garbage collected.", "body": "Hi, is there any documentation of what different fields in `NodeExecStats` mean? All I see in the [respective file](https://github.com/tensorflow/tensorflow/blob/714f9b74b53e3644c7be4d967feb4750fcc26fe6/tensorflow/core/framework/step_stats.proto) is \r\n\r\n```\r\n// Time/size stats recorded for a single execution of a graph node.\r\nmessage NodeExecStats {\r\n  // TODO(tucker): Use some more compact form of node identity than\r\n  // the full string name.  Either all processes should agree on a\r\n  // global id (cost_id?) for each node, or we should use a hash of\r\n  // the name.\r\n  string node_name = 1;\r\n  int64 all_start_micros = 2;\r\n  int64 op_start_rel_micros = 3;\r\n  int64 op_end_rel_micros = 4;\r\n  int64 all_end_rel_micros = 5;\r\n  repeated AllocatorMemoryUsed memory = 6;\r\n  repeated NodeOutput output = 7;\r\n  string timeline_label = 8;\r\n  int64 scheduled_micros = 9;\r\n  uint32 thread_id = 10;\r\n  repeated AllocationDescription referenced_tensor = 11;\r\n};\r\n```\r\n\r\nwhich is not very informative.\r\n\r\nIn particular I am trying to understand if these statistics allow me to see which output tensors are kept in memory until the backward pass and which are quickly garbage collected."}