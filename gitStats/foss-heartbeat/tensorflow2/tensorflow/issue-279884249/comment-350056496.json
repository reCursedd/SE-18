{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350056496", "html_url": "https://github.com/tensorflow/tensorflow/issues/15165#issuecomment-350056496", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15165", "id": 350056496, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDA1NjQ5Ng==", "user": {"login": "jolespin", "id": 9061708, "node_id": "MDQ6VXNlcjkwNjE3MDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/9061708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolespin", "html_url": "https://github.com/jolespin", "followers_url": "https://api.github.com/users/jolespin/followers", "following_url": "https://api.github.com/users/jolespin/following{/other_user}", "gists_url": "https://api.github.com/users/jolespin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolespin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolespin/subscriptions", "organizations_url": "https://api.github.com/users/jolespin/orgs", "repos_url": "https://api.github.com/users/jolespin/repos", "events_url": "https://api.github.com/users/jolespin/events{/privacy}", "received_events_url": "https://api.github.com/users/jolespin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-07T18:39:12Z", "updated_at": "2017-12-07T18:39:12Z", "author_association": "NONE", "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> keras.__version__</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.1.2'</span>\n\nmodel <span class=\"pl-k\">=</span> Sequential()\nconv_layer <span class=\"pl-k\">=</span> Conv1D(<span class=\"pl-v\">filters</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">320</span>,\n                    <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">26</span>,\n                    <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>,\n                    <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>valid<span class=\"pl-pds\">'</span></span>,\n                    <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>,\n                    <span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1000</span>,<span class=\"pl-c1\">4</span>))\nmodel.add(conv_layer)\n<span class=\"pl-c1\">print</span>(model.layers[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>].output.get_shape())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.1.2'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (?, 975, 320)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.0.8-tf'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (?, 975, 320)</span>\n\nmodel.add(MaxPooling1D(<span class=\"pl-v\">pool_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">13</span>,\n                       <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">13</span>))\n<span class=\"pl-c1\">print</span>(model.layers[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>].output.get_shape())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.1.2'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (?, 75, 320)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.0.8-tf'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (?, 75, 320)</span>\n\nmodel.add(LSTM(<span class=\"pl-c1\">320</span>, <span class=\"pl-v\">return_sequences</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>))\n<span class=\"pl-c1\">print</span>(model.layers[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>].output.get_shape())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.1.2'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (?, ?, 320)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.0.8-tf'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (?, ?, 320)</span>\n\nmodel.add(Flatten())\n<span class=\"pl-c1\">print</span>(model.layers[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>].output.get_shape())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.1.2'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (?, ?)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.0.8-tf'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ValueError: The last dimension of the inputs to `Dense` should be defined. Found `None`.</span>\n\nmodel.add(Dense(<span class=\"pl-c1\">925</span>,\n                <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>))\n<span class=\"pl-c1\">print</span>(model.layers[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>].output.get_shape())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.1.2'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (?, 925)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.0.8-tf'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> It errored in previous layer</span>\n\nmodel.add(Dense(<span class=\"pl-c1\">919</span>,\n                <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>sigmoid<span class=\"pl-pds\">'</span></span>))\n<span class=\"pl-c1\">print</span>(model.layers[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>].output.get_shape())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.1.2'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (?, 919)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> '2.0.8-tf'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> It errored in previous layer</span>\n\nmodel.compile(<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>binary_crossentropy<span class=\"pl-pds\">'</span></span>,\n              <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>rmsprop<span class=\"pl-pds\">'</span></span>,\n              <span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>accuracy<span class=\"pl-pds\">'</span></span>])\n\n</pre></div>", "body_text": "# keras.__version__\n# '2.1.2'\n\nmodel = Sequential()\nconv_layer = Conv1D(filters=320,\n                    kernel_size=26,\n                    strides=1,\n                    padding='valid',\n                    activation='relu',\n                    input_shape=(1000,4))\nmodel.add(conv_layer)\nprint(model.layers[-1].output.get_shape())\n# '2.1.2'\n# (?, 975, 320)\n\n# '2.0.8-tf'\n# (?, 975, 320)\n\nmodel.add(MaxPooling1D(pool_size=13,\n                       strides=13))\nprint(model.layers[-1].output.get_shape())\n# '2.1.2'\n# (?, 75, 320)\n\n# '2.0.8-tf'\n# (?, 75, 320)\n\nmodel.add(LSTM(320, return_sequences=True))\nprint(model.layers[-1].output.get_shape())\n# '2.1.2'\n# (?, ?, 320)\n\n# '2.0.8-tf'\n# (?, ?, 320)\n\nmodel.add(Flatten())\nprint(model.layers[-1].output.get_shape())\n# '2.1.2'\n# (?, ?)\n\n# '2.0.8-tf'\n# ValueError: The last dimension of the inputs to `Dense` should be defined. Found `None`.\n\nmodel.add(Dense(925,\n                activation='relu'))\nprint(model.layers[-1].output.get_shape())\n# '2.1.2'\n# (?, 925)\n\n# '2.0.8-tf'\n# It errored in previous layer\n\nmodel.add(Dense(919,\n                activation='sigmoid'))\nprint(model.layers[-1].output.get_shape())\n# '2.1.2'\n# (?, 919)\n\n# '2.0.8-tf'\n# It errored in previous layer\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])", "body": "```python\r\n# keras.__version__\r\n# '2.1.2'\r\n\r\nmodel = Sequential()\r\nconv_layer = Conv1D(filters=320,\r\n                    kernel_size=26,\r\n                    strides=1,\r\n                    padding='valid',\r\n                    activation='relu',\r\n                    input_shape=(1000,4))\r\nmodel.add(conv_layer)\r\nprint(model.layers[-1].output.get_shape())\r\n# '2.1.2'\r\n# (?, 975, 320)\r\n\r\n# '2.0.8-tf'\r\n# (?, 975, 320)\r\n\r\nmodel.add(MaxPooling1D(pool_size=13,\r\n                       strides=13))\r\nprint(model.layers[-1].output.get_shape())\r\n# '2.1.2'\r\n# (?, 75, 320)\r\n\r\n# '2.0.8-tf'\r\n# (?, 75, 320)\r\n\r\nmodel.add(LSTM(320, return_sequences=True))\r\nprint(model.layers[-1].output.get_shape())\r\n# '2.1.2'\r\n# (?, ?, 320)\r\n\r\n# '2.0.8-tf'\r\n# (?, ?, 320)\r\n\r\nmodel.add(Flatten())\r\nprint(model.layers[-1].output.get_shape())\r\n# '2.1.2'\r\n# (?, ?)\r\n\r\n# '2.0.8-tf'\r\n# ValueError: The last dimension of the inputs to `Dense` should be defined. Found `None`.\r\n\r\nmodel.add(Dense(925,\r\n                activation='relu'))\r\nprint(model.layers[-1].output.get_shape())\r\n# '2.1.2'\r\n# (?, 925)\r\n\r\n# '2.0.8-tf'\r\n# It errored in previous layer\r\n\r\nmodel.add(Dense(919,\r\n                activation='sigmoid'))\r\nprint(model.layers[-1].output.get_shape())\r\n# '2.1.2'\r\n# (?, 919)\r\n\r\n# '2.0.8-tf'\r\n# It errored in previous layer\r\n\r\nmodel.compile(loss='binary_crossentropy',\r\n              optimizer='rmsprop',\r\n              metrics=['accuracy'])\r\n\r\n\r\n```"}