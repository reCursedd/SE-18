{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/214451323", "pull_request_review_id": 151519723, "id": 214451323, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ1MTMyMw==", "diff_hunk": "@@ -508,6 +511,82 @@ def has_zero():\n     else:\n       return components\n \n+def recursive_fill(mask, threshold, total_dims, max_iter=None):\n+  \"\"\"Recursively iterates until the provided 0-1s 2D or 3D mask is filled.\n+  If max_iter is provided, it will iterate for a number of times.\n+  If total_dims is 2, threshold is recommended to be 4.\n+  If total_dims is 3, threshold is recommended to be 13.\n+\n+  Args:\n+    mask: A 2D or 3D `Tensor` of 0s and 1s representing the mask to be filled.\n+    threshold: A threshold indicating sensitive the hole detector will be.\n+    total_dims: Number of dimensions of the mask. Only 2 or 3 allowed.\n+    max_iter: Number of maximum iterations performed to fill the mask. If\n+      max_iter=1 it will be the same as performing \"dilation\".\n+\n+  Returns:\n+    The mask filled.\n+\n+  Example:\n+\n+  ```python\n+  init_array = (np.random.random((10,10,10))>0.4)*1\n+  inp = tf.placeholder(tf.float32,name=\"my_input\")\n+  res_fill = recursive_mask_fill(inp,13,3)\n+\n+  sess = tf.Session()\n+  filled_mask = sess.run(res_fill,feed_dict={inp:init_array})\n+  ```\n+\n+  \"\"\"\n+  if not total_dims in [2, 3]:\n+    raise Exception(\"total_dims is expected to be 2 or 3\")\n+\n+  with ops.name_scope(\"recursive_fill\"):\n+    mask = ops.convert_to_tensor(mask, name=\"mask\")\n+    orig_dim = array_ops.shape(mask)\n+    filter_cube_size = math_ops.pow(3, total_dims)\n+\n+    filt = variables.Variable(array_ops.ones(filter_cube_size),\n+                              validate_shape=False)\n+    center_index = math_ops.cast(filter_cube_size/2, dtypes.int32)\n+    filt = state_ops.scatter_update(filt, center_index, -99)\n+    filt = array_ops.reshape(filt, [3 for _ in range(total_dims)]+[1, 1])\n+\n+    mask = array_ops.expand_dims(mask, 0)\n+    mask = array_ops.expand_dims(mask, -1)\n+    new_voxels = array_ops.ones_like(mask)\n+\n+    # Note: the \"y\" argument needs to be given because as while_loop returns\n+    # two elements, it requires two inputs as well.\n+    def loop_body(x, y): # pylint: disable=unused-argument", "path": "tensorflow/contrib/image/python/ops/image_ops.py", "position": 62, "original_position": 62, "commit_id": "7c2d20cd5f3cd456ed162b2badc11474e8b0ab07", "original_commit_id": "7c2d20cd5f3cd456ed162b2badc11474e8b0ab07", "user": {"login": "ringw", "id": 1391644, "node_id": "MDQ6VXNlcjEzOTE2NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1391644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ringw", "html_url": "https://github.com/ringw", "followers_url": "https://api.github.com/users/ringw/followers", "following_url": "https://api.github.com/users/ringw/following{/other_user}", "gists_url": "https://api.github.com/users/ringw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ringw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ringw/subscriptions", "organizations_url": "https://api.github.com/users/ringw/orgs", "repos_url": "https://api.github.com/users/ringw/repos", "events_url": "https://api.github.com/users/ringw/events{/privacy}", "received_events_url": "https://api.github.com/users/ringw/received_events", "type": "User", "site_admin": false}, "body": "Maybe rename \"x\" to \"current_mask\"", "created_at": "2018-08-31T19:15:00Z", "updated_at": "2018-08-31T19:15:24Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20076#discussion_r214451323", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20076", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/214451323"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20076#discussion_r214451323"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20076"}}, "body_html": "<p>Maybe rename \"x\" to \"current_mask\"</p>", "body_text": "Maybe rename \"x\" to \"current_mask\""}