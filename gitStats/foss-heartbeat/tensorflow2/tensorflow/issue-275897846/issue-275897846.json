{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14775", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14775/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14775/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14775/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14775", "id": 275897846, "node_id": "MDU6SXNzdWUyNzU4OTc4NDY=", "number": 14775, "title": "tf.set_random_seed doesn't work after any operations have been constructed", "user": {"login": "darknoon", "id": 355540, "node_id": "MDQ6VXNlcjM1NTU0MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/355540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darknoon", "html_url": "https://github.com/darknoon", "followers_url": "https://api.github.com/users/darknoon/followers", "following_url": "https://api.github.com/users/darknoon/following{/other_user}", "gists_url": "https://api.github.com/users/darknoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/darknoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darknoon/subscriptions", "organizations_url": "https://api.github.com/users/darknoon/orgs", "repos_url": "https://api.github.com/users/darknoon/repos", "events_url": "https://api.github.com/users/darknoon/events{/privacy}", "received_events_url": "https://api.github.com/users/darknoon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-21T23:43:47Z", "updated_at": "2018-01-19T00:47:27Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes, just switching the order of this:</li>\n</ul>\n<pre><code>tf.set_random_seed(1234)\na = tf.random_uniform([1])\nb = tf.random_normal([1])\n</code></pre>\n<p>to this:</p>\n<pre><code>a = tf.random_uniform([1])\nb = tf.random_normal([1])\ntf.set_random_seed(1234)\n</code></pre>\n<p>in this example:</p>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/set_random_seed\" rel=\"nofollow\">https://www.tensorflow.org/api_docs/python/tf/set_random_seed</a></p>\n<p>No longer sets the seed.</p>\n<ul>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:</li>\n</ul>\n<p>Binary via pip</p>\n<ul>\n<li><strong>TensorFlow version (use command below)</strong>:</li>\n</ul>\n<pre><code>$ python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nv1.3.0-rc2-20-g0787eee 1.3.0\n</code></pre>\n<ul>\n<li><strong>Python version</strong>:</li>\n</ul>\n<pre><code>$ python --version\nPython 3.6.1\n</code></pre>\n<ul>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:<br>\nn/a</p>\n</li>\n<li>\n<p><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nn/a</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:<br>\nn/a</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:<br>\nn/a</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:<br>\n<code>python tf-test.py</code></p>\n</li>\n</ul>\n<p>where tf-test is below:</p>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>If we would like to deterministically run a tensorflow graph, we want to be able to pass in the seed without rebuilding the graph from scratch (which is slow in our interactive application).</p>\n<p>Also, this ordering constraint makes it tricky to debug what's going on and no mention is given to the fact that the seed is read in the op <em>creation</em> not <em>execution</em> in the documentation as far as I can tell.</p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<p>As written on example page:</p>\n<pre><code>$ python tf-test.py \nSession 1\n2017-11-21 15:38:24.133822: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-11-21 15:38:24.133854: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n[ 0.96046877]\n[ 0.83621562]\n[ 0.4987599]\n[ 0.54880583]\nSession 2\n[ 0.96046877]\n[ 0.83621562]\n[ 0.4987599]\n[ 0.54880583]\n\n\n</code></pre>\n<p>With <code>set_random_seed</code> after:</p>\n<pre><code>$ python tf-test.py \nSession 1\n2017-11-21 15:41:57.602615: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-11-21 15:41:57.602638: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n[ 0.53137994]\n[ 0.32236636]\n[ 1.07008374]\n[ 0.49122357]\nSession 2\n[ 0.07862437]\n[ 0.18420935]\n[ 0.76287955]\n[ 0.47924194]\n</code></pre>\n<p>Full tf-test.py:</p>\n<pre><code>import tensorflow as tf\n\na = tf.random_uniform([1])\nb = tf.random_normal([1])\n\ntf.set_random_seed(1234)\n\n# Repeatedly running this block with the same graph will generate the same\n# sequences of 'a' and 'b'.\nprint(\"Session 1\")\nwith tf.Session() as sess1:\n  print(sess1.run(a))  # generates 'A1'\n  print(sess1.run(a))  # generates 'A2'\n  print(sess1.run(b))  # generates 'B1'\n  print(sess1.run(b))  # generates 'B2'\n\nprint(\"Session 2\")\nwith tf.Session() as sess2:\n  print(sess2.run(a))  # generates 'A1'\n  print(sess2.run(a))  # generates 'A2'\n  print(sess2.run(b))  # generates 'B1'\n  print(sess2.run(b))  # generates 'B2'\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes, just switching the order of this:\n\ntf.set_random_seed(1234)\na = tf.random_uniform([1])\nb = tf.random_normal([1])\n\nto this:\na = tf.random_uniform([1])\nb = tf.random_normal([1])\ntf.set_random_seed(1234)\n\nin this example:\nhttps://www.tensorflow.org/api_docs/python/tf/set_random_seed\nNo longer sets the seed.\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nTensorFlow installed from (source or binary):\n\nBinary via pip\n\nTensorFlow version (use command below):\n\n$ python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nv1.3.0-rc2-20-g0787eee 1.3.0\n\n\nPython version:\n\n$ python --version\nPython 3.6.1\n\n\n\nBazel version (if compiling from source):\nn/a\n\n\nGCC/Compiler version (if compiling from source):\nn/a\n\n\nCUDA/cuDNN version:\nn/a\n\n\nGPU model and memory:\nn/a\n\n\nExact command to reproduce:\npython tf-test.py\n\n\nwhere tf-test is below:\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nIf we would like to deterministically run a tensorflow graph, we want to be able to pass in the seed without rebuilding the graph from scratch (which is slow in our interactive application).\nAlso, this ordering constraint makes it tricky to debug what's going on and no mention is given to the fact that the seed is read in the op creation not execution in the documentation as far as I can tell.\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nAs written on example page:\n$ python tf-test.py \nSession 1\n2017-11-21 15:38:24.133822: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-11-21 15:38:24.133854: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n[ 0.96046877]\n[ 0.83621562]\n[ 0.4987599]\n[ 0.54880583]\nSession 2\n[ 0.96046877]\n[ 0.83621562]\n[ 0.4987599]\n[ 0.54880583]\n\n\n\nWith set_random_seed after:\n$ python tf-test.py \nSession 1\n2017-11-21 15:41:57.602615: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-11-21 15:41:57.602638: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n[ 0.53137994]\n[ 0.32236636]\n[ 1.07008374]\n[ 0.49122357]\nSession 2\n[ 0.07862437]\n[ 0.18420935]\n[ 0.76287955]\n[ 0.47924194]\n\nFull tf-test.py:\nimport tensorflow as tf\n\na = tf.random_uniform([1])\nb = tf.random_normal([1])\n\ntf.set_random_seed(1234)\n\n# Repeatedly running this block with the same graph will generate the same\n# sequences of 'a' and 'b'.\nprint(\"Session 1\")\nwith tf.Session() as sess1:\n  print(sess1.run(a))  # generates 'A1'\n  print(sess1.run(a))  # generates 'A2'\n  print(sess1.run(b))  # generates 'B1'\n  print(sess1.run(b))  # generates 'B2'\n\nprint(\"Session 2\")\nwith tf.Session() as sess2:\n  print(sess2.run(a))  # generates 'A1'\n  print(sess2.run(a))  # generates 'A2'\n  print(sess2.run(b))  # generates 'B1'\n  print(sess2.run(b))  # generates 'B2'", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes, just switching the order of this:\r\n```\r\ntf.set_random_seed(1234)\r\na = tf.random_uniform([1])\r\nb = tf.random_normal([1])\r\n```\r\n\r\nto this:\r\n\r\n```\r\na = tf.random_uniform([1])\r\nb = tf.random_normal([1])\r\ntf.set_random_seed(1234)\r\n```\r\n\r\nin this example:\r\n\r\nhttps://www.tensorflow.org/api_docs/python/tf/set_random_seed\r\n\r\nNo longer sets the seed.\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n- **TensorFlow installed from (source or binary)**:\r\n\r\nBinary via pip\r\n\r\n- **TensorFlow version (use command below)**:\r\n```\r\n$ python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\nv1.3.0-rc2-20-g0787eee 1.3.0\r\n```\r\n\r\n- **Python version**: \r\n```\r\n$ python --version\r\nPython 3.6.1\r\n```\r\n\r\n- **Bazel version (if compiling from source)**:\r\nn/a\r\n- **GCC/Compiler version (if compiling from source)**:\r\nn/a\r\n- **CUDA/cuDNN version**:\r\nn/a\r\n- **GPU model and memory**:\r\nn/a\r\n\r\n- **Exact command to reproduce**:\r\n`python tf-test.py`\r\n\r\nwhere tf-test is below:\r\n\r\n\r\n\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\n\r\nIf we would like to deterministically run a tensorflow graph, we want to be able to pass in the seed without rebuilding the graph from scratch (which is slow in our interactive application).\r\n\r\nAlso, this ordering constraint makes it tricky to debug what's going on and no mention is given to the fact that the seed is read in the op _creation_ not _execution_ in the documentation as far as I can tell.\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\nAs written on example page:\r\n\r\n```\r\n$ python tf-test.py \r\nSession 1\r\n2017-11-21 15:38:24.133822: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-11-21 15:38:24.133854: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\r\n[ 0.96046877]\r\n[ 0.83621562]\r\n[ 0.4987599]\r\n[ 0.54880583]\r\nSession 2\r\n[ 0.96046877]\r\n[ 0.83621562]\r\n[ 0.4987599]\r\n[ 0.54880583]\r\n\r\n\r\n```\r\n\r\n\r\nWith `set_random_seed` after:\r\n```\r\n$ python tf-test.py \r\nSession 1\r\n2017-11-21 15:41:57.602615: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-11-21 15:41:57.602638: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\r\n[ 0.53137994]\r\n[ 0.32236636]\r\n[ 1.07008374]\r\n[ 0.49122357]\r\nSession 2\r\n[ 0.07862437]\r\n[ 0.18420935]\r\n[ 0.76287955]\r\n[ 0.47924194]\r\n```\r\n\r\n\r\n\r\nFull tf-test.py:\r\n\r\n```\r\nimport tensorflow as tf\r\n\r\na = tf.random_uniform([1])\r\nb = tf.random_normal([1])\r\n\r\ntf.set_random_seed(1234)\r\n\r\n# Repeatedly running this block with the same graph will generate the same\r\n# sequences of 'a' and 'b'.\r\nprint(\"Session 1\")\r\nwith tf.Session() as sess1:\r\n  print(sess1.run(a))  # generates 'A1'\r\n  print(sess1.run(a))  # generates 'A2'\r\n  print(sess1.run(b))  # generates 'B1'\r\n  print(sess1.run(b))  # generates 'B2'\r\n\r\nprint(\"Session 2\")\r\nwith tf.Session() as sess2:\r\n  print(sess2.run(a))  # generates 'A1'\r\n  print(sess2.run(a))  # generates 'A2'\r\n  print(sess2.run(b))  # generates 'B1'\r\n  print(sess2.run(b))  # generates 'B2'\r\n```"}