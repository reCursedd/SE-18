{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11316", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11316/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11316/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11316/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11316", "id": 240844041, "node_id": "MDU6SXNzdWUyNDA4NDQwNDE=", "number": 11316, "title": "order of execution of functions in cond statement is inconsistent", "user": {"login": "BastiaanBergman", "id": 478375, "node_id": "MDQ6VXNlcjQ3ODM3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/478375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BastiaanBergman", "html_url": "https://github.com/BastiaanBergman", "followers_url": "https://api.github.com/users/BastiaanBergman/followers", "following_url": "https://api.github.com/users/BastiaanBergman/following{/other_user}", "gists_url": "https://api.github.com/users/BastiaanBergman/gists{/gist_id}", "starred_url": "https://api.github.com/users/BastiaanBergman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BastiaanBergman/subscriptions", "organizations_url": "https://api.github.com/users/BastiaanBergman/orgs", "repos_url": "https://api.github.com/users/BastiaanBergman/repos", "events_url": "https://api.github.com/users/BastiaanBergman/events{/privacy}", "received_events_url": "https://api.github.com/users/BastiaanBergman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-06T04:52:44Z", "updated_at": "2017-07-06T05:30:00Z", "closed_at": "2017-07-06T05:30:00Z", "author_association": "NONE", "body_html": "<h3>Inconsistency and/or feature request.</h3>\n<p>Tensorflows control flow method<br>\n<code>tf.cond(condition, fn1, fn2)</code><br>\nexecutes both functions fn1 and fn2 and returns only one depending on the evaluation of condition. In addition, the order in which the two functions are evaluated varies or is undefined as the following code shows:</p>\n<pre><code>var1 = tf.Variable(tf.zeros(1), trainable=False, name='var1')\nvar2 = tf.Variable(tf.zeros(1), trainable=False, name='var2')\nupdate_var1 = tf.assign(var1,var1 +1)\nupdate_var2 = tf.assign(var2,var2 +1)\ntraining = tf.placeholder(tf.bool)\ndef f1():\n  with tf.control_dependencies([update_var1]):\n    return var1 + 10*var2\ndef f2():\n  with tf.control_dependencies([update_var2]):\n    return var1 + 10*var2\n\nfinal = tf.cond(training, f1, f2)\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\nfor i in range(10):\n  print(sess.run(final, feed_dict={training: False}))\n</code></pre>\n<p>The output of this varies from run to run, but a typical example is:</p>\n<pre><code>[ 10.] \n[ 22.] \n[ 33.]\n[ 44.]\n[ 55.]\n[ 66.]\n[ 77.]\n[ 87.]\n[ 98.]\n[ 110.]\n</code></pre>\n<p>For the lines with 10, 87 and 98 the order of execution apparently was:</p>\n<ol>\n<li>update var1</li>\n<li>evaluate and return var1 * 10*var2</li>\n<li><strong>update var2</strong></li>\n</ol>\n<p>while for the lines with 22, 33, 44, 55, 66, 77 and 110 the order of execution must have been:</p>\n<ol>\n<li>update var1</li>\n<li><strong>update var2</strong></li>\n<li>evaluate and return var1 * 10*var2</li>\n</ol>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nSee code in description</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nfrom binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n('v1.2.0-rc2-21-g12f033d', '1.2.0')</li>\n<li><strong>Python version</strong>:<br>\nPython 2.7.13 |Anaconda 4.3.1 (64-bit)</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>", "body_text": "Inconsistency and/or feature request.\nTensorflows control flow method\ntf.cond(condition, fn1, fn2)\nexecutes both functions fn1 and fn2 and returns only one depending on the evaluation of condition. In addition, the order in which the two functions are evaluated varies or is undefined as the following code shows:\nvar1 = tf.Variable(tf.zeros(1), trainable=False, name='var1')\nvar2 = tf.Variable(tf.zeros(1), trainable=False, name='var2')\nupdate_var1 = tf.assign(var1,var1 +1)\nupdate_var2 = tf.assign(var2,var2 +1)\ntraining = tf.placeholder(tf.bool)\ndef f1():\n  with tf.control_dependencies([update_var1]):\n    return var1 + 10*var2\ndef f2():\n  with tf.control_dependencies([update_var2]):\n    return var1 + 10*var2\n\nfinal = tf.cond(training, f1, f2)\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\nfor i in range(10):\n  print(sess.run(final, feed_dict={training: False}))\n\nThe output of this varies from run to run, but a typical example is:\n[ 10.] \n[ 22.] \n[ 33.]\n[ 44.]\n[ 55.]\n[ 66.]\n[ 77.]\n[ 87.]\n[ 98.]\n[ 110.]\n\nFor the lines with 10, 87 and 98 the order of execution apparently was:\n\nupdate var1\nevaluate and return var1 * 10*var2\nupdate var2\n\nwhile for the lines with 22, 33, 44, 55, 66, 77 and 110 the order of execution must have been:\n\nupdate var1\nupdate var2\nevaluate and return var1 * 10*var2\n\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nSee code in description\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux\nTensorFlow installed from (source or binary):\nfrom binary\nTensorFlow version (use command below):\n('v1.2.0-rc2-21-g12f033d', '1.2.0')\nPython version:\nPython 2.7.13 |Anaconda 4.3.1 (64-bit)\nBazel version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:", "body": "### Inconsistency and/or feature request.\r\n\r\nTensorflows control flow method\r\n`tf.cond(condition, fn1, fn2)`\r\nexecutes both functions fn1 and fn2 and returns only one depending on the evaluation of condition. In addition, the order in which the two functions are evaluated varies or is undefined as the following code shows:\r\n```\r\nvar1 = tf.Variable(tf.zeros(1), trainable=False, name='var1')\r\nvar2 = tf.Variable(tf.zeros(1), trainable=False, name='var2')\r\nupdate_var1 = tf.assign(var1,var1 +1)\r\nupdate_var2 = tf.assign(var2,var2 +1)\r\ntraining = tf.placeholder(tf.bool)\r\ndef f1():\r\n  with tf.control_dependencies([update_var1]):\r\n    return var1 + 10*var2\r\ndef f2():\r\n  with tf.control_dependencies([update_var2]):\r\n    return var1 + 10*var2\r\n\r\nfinal = tf.cond(training, f1, f2)\r\nsess = tf.Session()\r\nsess.run(tf.global_variables_initializer())\r\nfor i in range(10):\r\n  print(sess.run(final, feed_dict={training: False}))\r\n```\r\nThe output of this varies from run to run, but a typical example is:\r\n```\r\n[ 10.] \r\n[ 22.] \r\n[ 33.]\r\n[ 44.]\r\n[ 55.]\r\n[ 66.]\r\n[ 77.]\r\n[ 87.]\r\n[ 98.]\r\n[ 110.]\r\n```\r\nFor the lines with 10, 87 and 98 the order of execution apparently was:\r\n1. update var1\r\n2. evaluate and return var1 * 10*var2\r\n3. **update var2**\r\n\r\nwhile for the lines with 22, 33, 44, 55, 66, 77 and 110 the order of execution must have been:\r\n1. update var1\r\n2. **update var2**\r\n3. evaluate and return var1 * 10*var2 \r\n\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nSee code in description\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux\r\n- **TensorFlow installed from (source or binary)**:\r\nfrom binary\r\n- **TensorFlow version (use command below)**:\r\n('v1.2.0-rc2-21-g12f033d', '1.2.0')\r\n- **Python version**: \r\nPython 2.7.13 |Anaconda 4.3.1 (64-bit)\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n"}