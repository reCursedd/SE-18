{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22128", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22128/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22128/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22128/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22128", "id": 357875192, "node_id": "MDU6SXNzdWUzNTc4NzUxOTI=", "number": 22128, "title": "[Feature Request] retrieving exact node names from multiple outputs (`tf.nn.top_k`)", "user": {"login": "joshsuihn", "id": 1491998, "node_id": "MDQ6VXNlcjE0OTE5OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1491998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshsuihn", "html_url": "https://github.com/joshsuihn", "followers_url": "https://api.github.com/users/joshsuihn/followers", "following_url": "https://api.github.com/users/joshsuihn/following{/other_user}", "gists_url": "https://api.github.com/users/joshsuihn/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshsuihn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshsuihn/subscriptions", "organizations_url": "https://api.github.com/users/joshsuihn/orgs", "repos_url": "https://api.github.com/users/joshsuihn/repos", "events_url": "https://api.github.com/users/joshsuihn/events{/privacy}", "received_events_url": "https://api.github.com/users/joshsuihn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-09-07T00:18:42Z", "updated_at": "2018-09-28T22:09:09Z", "closed_at": "2018-09-28T22:09:09Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>OS Platform and Distribution</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow version (use command below)</strong>: '1.9.0-rc1'  I also believe it happens r1.10</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>CUDA/cuDNN version</strong>: 7.1</li>\n<li><strong>Bazel version</strong>: 0.16.1</li>\n<li><strong>GPU model and memory</strong> : TitanV 12 G</li>\n<li><strong>Exact command to reproduce</strong>: I added python sample code</li>\n<li><strong>Mobile device</strong>:  n/a</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When a tensor op returns multiple outputs such as  <code>tf.nn.top_k</code>,<br>\nit would be great to retrieve exact individual input nodes of its output recursively.</p>\n<p>As addressed here, <a href=\"https://www.tensorflow.org/api_docs/python/tf/nn/top_k\" rel=\"nofollow\">https://www.tensorflow.org/api_docs/python/tf/nn/top_k</a>,<br>\n<code>tf.nn.top_k</code> returns</p>\n<ul>\n<li>values: The k largest elements along each last dimensional slice.</li>\n<li>indices: The indices of values within the last dimension of input.</li>\n</ul>\n<p>With below sample code,<br>\n'Namespace/TopKV2' returns two outputs: 'Namespace/probabilities', 'Namespace/indices'<br>\n(From the two output nodes, )<br>\n'Namespace/probabilities' takes 'Namespace/TopKV2' <strong>values</strong> as input,<br>\n'Namespace/indices' takes  'Namespace/TopKV2' <strong>indices</strong> as input.</p>\n<p>However, only 'Namespace/TopKV2' can be retrieved from the two output nodes.<br>\nI also checked graph structure on tensorboard; it seems that same tensor/node (i.e., 'Namespace/TopKV2') goes to 'Namespace/probabilities' and  'Namespace/indices', both, however, one is values and, the other indices.</p>\n<p>If differentiable names for multiple outputs are used, that would be great.<br>\nOr, if there is workaround, please advise me.<br>\nThis issue also causes key error in TensorRT graphsurgeon module.</p>\n<pre><code>def _map_nodes(nodes):\n    return {node.name: node for node in nodes}\n\ndef main():\n   # simple network \n    with tf.variable_scope(\"Namespace\"):\n        inputs = tf.placeholder(tf.float32, [1, 3, 16, 16], name=\"input\")\n        convolved = tf.layers.conv2d(inputs, 4, [1, 1], data_format='channels_first')\n        reshaped = tf.reshape(convolved, [1, 256, 4])\n        best_probabilities, best_indices = tf.nn.top_k(reshaped, k=1)\n        output1 = tf.reshape(best_probabilities, [256], name='probabilities')\n        output2 = tf.reshape(best_indices, [256], name='indices')\n\n    graph = tf.get_default_graph()\n    graphdef = tf.get_default_graph().as_graph_def()\n\n    # Freeze the graph.\n    output_node_names = ['Namespace/probabilities', 'Namespace/indices']\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        frozen_graph = tf.graph_util.convert_variables_to_constants(\n            sess, graphdef, output_node_names\n        )\n        # Remove training nodes.\n        infer_graph = tf.graph_util.remove_training_nodes(frozen_graph)\n        graph_io.write_graph(infer_graph, \"./\", \"test.pb\", as_text=False)\n        node_map = _map_nodes(infer_graph.node)\n        for node in infer_graph.node:\n            for input_name in node.input:\n                # Recursively check against all of this node's inputs\n                input_node = node_map[input_name]\n\nif __name__ == '__main__':\n    main()\n\n</code></pre>\n<p>I also attached TF board events file.<br>\n<a href=\"https://drive.google.com/file/d/1HdV_eqMloqXgLenZSZHmKwME_oSnJbFb/view?usp=sharing\" rel=\"nofollow\">https://drive.google.com/file/d/1HdV_eqMloqXgLenZSZHmKwME_oSnJbFb/view?usp=sharing</a></p>", "body_text": "System information\n\nOS Platform and Distribution: Linux Ubuntu 16.04\nTensorFlow version (use command below): '1.9.0-rc1'  I also believe it happens r1.10\nPython version: 2.7\nCUDA/cuDNN version: 7.1\nBazel version: 0.16.1\nGPU model and memory : TitanV 12 G\nExact command to reproduce: I added python sample code\nMobile device:  n/a\n\nDescribe the problem\nWhen a tensor op returns multiple outputs such as  tf.nn.top_k,\nit would be great to retrieve exact individual input nodes of its output recursively.\nAs addressed here, https://www.tensorflow.org/api_docs/python/tf/nn/top_k,\ntf.nn.top_k returns\n\nvalues: The k largest elements along each last dimensional slice.\nindices: The indices of values within the last dimension of input.\n\nWith below sample code,\n'Namespace/TopKV2' returns two outputs: 'Namespace/probabilities', 'Namespace/indices'\n(From the two output nodes, )\n'Namespace/probabilities' takes 'Namespace/TopKV2' values as input,\n'Namespace/indices' takes  'Namespace/TopKV2' indices as input.\nHowever, only 'Namespace/TopKV2' can be retrieved from the two output nodes.\nI also checked graph structure on tensorboard; it seems that same tensor/node (i.e., 'Namespace/TopKV2') goes to 'Namespace/probabilities' and  'Namespace/indices', both, however, one is values and, the other indices.\nIf differentiable names for multiple outputs are used, that would be great.\nOr, if there is workaround, please advise me.\nThis issue also causes key error in TensorRT graphsurgeon module.\ndef _map_nodes(nodes):\n    return {node.name: node for node in nodes}\n\ndef main():\n   # simple network \n    with tf.variable_scope(\"Namespace\"):\n        inputs = tf.placeholder(tf.float32, [1, 3, 16, 16], name=\"input\")\n        convolved = tf.layers.conv2d(inputs, 4, [1, 1], data_format='channels_first')\n        reshaped = tf.reshape(convolved, [1, 256, 4])\n        best_probabilities, best_indices = tf.nn.top_k(reshaped, k=1)\n        output1 = tf.reshape(best_probabilities, [256], name='probabilities')\n        output2 = tf.reshape(best_indices, [256], name='indices')\n\n    graph = tf.get_default_graph()\n    graphdef = tf.get_default_graph().as_graph_def()\n\n    # Freeze the graph.\n    output_node_names = ['Namespace/probabilities', 'Namespace/indices']\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        frozen_graph = tf.graph_util.convert_variables_to_constants(\n            sess, graphdef, output_node_names\n        )\n        # Remove training nodes.\n        infer_graph = tf.graph_util.remove_training_nodes(frozen_graph)\n        graph_io.write_graph(infer_graph, \"./\", \"test.pb\", as_text=False)\n        node_map = _map_nodes(infer_graph.node)\n        for node in infer_graph.node:\n            for input_name in node.input:\n                # Recursively check against all of this node's inputs\n                input_node = node_map[input_name]\n\nif __name__ == '__main__':\n    main()\n\n\nI also attached TF board events file.\nhttps://drive.google.com/file/d/1HdV_eqMloqXgLenZSZHmKwME_oSnJbFb/view?usp=sharing", "body": "### System information\r\n- **OS Platform and Distribution**: Linux Ubuntu 16.04\r\n- **TensorFlow version (use command below)**: '1.9.0-rc1'  I also believe it happens r1.10\r\n- **Python version**: 2.7 \r\n- **CUDA/cuDNN version**: 7.1\r\n- **Bazel version**: 0.16.1\r\n- **GPU model and memory** : TitanV 12 G\r\n- **Exact command to reproduce**: I added python sample code \r\n- **Mobile device**:  n/a\r\n\r\n\r\n\r\n### Describe the problem\r\nWhen a tensor op returns multiple outputs such as  `tf.nn.top_k`, \r\nit would be great to retrieve exact individual input nodes of its output recursively. \r\n\r\nAs addressed here, https://www.tensorflow.org/api_docs/python/tf/nn/top_k, \r\n`tf.nn.top_k` returns \r\n- values: The k largest elements along each last dimensional slice.\r\n- indices: The indices of values within the last dimension of input.\r\n\r\nWith below sample code, \r\n'Namespace/TopKV2' returns two outputs: 'Namespace/probabilities', 'Namespace/indices'\r\n(From the two output nodes, )\r\n'Namespace/probabilities' takes 'Namespace/TopKV2' **values** as input, \r\n'Namespace/indices' takes  'Namespace/TopKV2' **indices** as input. \r\n\r\nHowever, only 'Namespace/TopKV2' can be retrieved from the two output nodes. \r\nI also checked graph structure on tensorboard; it seems that same tensor/node (i.e., 'Namespace/TopKV2') goes to 'Namespace/probabilities' and  'Namespace/indices', both, however, one is values and, the other indices. \r\n\r\nIf differentiable names for multiple outputs are used, that would be great. \r\nOr, if there is workaround, please advise me. \r\nThis issue also causes key error in TensorRT graphsurgeon module. \r\n\r\n```\r\ndef _map_nodes(nodes):\r\n    return {node.name: node for node in nodes}\r\n\r\ndef main():\r\n   # simple network \r\n    with tf.variable_scope(\"Namespace\"):\r\n        inputs = tf.placeholder(tf.float32, [1, 3, 16, 16], name=\"input\")\r\n        convolved = tf.layers.conv2d(inputs, 4, [1, 1], data_format='channels_first')\r\n        reshaped = tf.reshape(convolved, [1, 256, 4])\r\n        best_probabilities, best_indices = tf.nn.top_k(reshaped, k=1)\r\n        output1 = tf.reshape(best_probabilities, [256], name='probabilities')\r\n        output2 = tf.reshape(best_indices, [256], name='indices')\r\n\r\n    graph = tf.get_default_graph()\r\n    graphdef = tf.get_default_graph().as_graph_def()\r\n\r\n    # Freeze the graph.\r\n    output_node_names = ['Namespace/probabilities', 'Namespace/indices']\r\n    with tf.Session() as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n        frozen_graph = tf.graph_util.convert_variables_to_constants(\r\n            sess, graphdef, output_node_names\r\n        )\r\n        # Remove training nodes.\r\n        infer_graph = tf.graph_util.remove_training_nodes(frozen_graph)\r\n        graph_io.write_graph(infer_graph, \"./\", \"test.pb\", as_text=False)\r\n        node_map = _map_nodes(infer_graph.node)\r\n        for node in infer_graph.node:\r\n            for input_name in node.input:\r\n                # Recursively check against all of this node's inputs\r\n                input_node = node_map[input_name]\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n\r\n```\r\nI also attached TF board events file. \r\nhttps://drive.google.com/file/d/1HdV_eqMloqXgLenZSZHmKwME_oSnJbFb/view?usp=sharing "}