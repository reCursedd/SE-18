{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/200620298", "html_url": "https://github.com/tensorflow/tensorflow/pull/763#issuecomment-200620298", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/763", "id": 200620298, "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDYyMDI5OA==", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-24T02:16:45Z", "updated_at": "2016-03-24T02:16:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So the first step is to fix Eigen, as we've agreed.  The second step is to make sure we have benchmarks that allow us to evaluate the merits of any implementation: we don't have those right now.  Only after that we'll be able to compare implementations of ThreadPool.</p>\n<p>I (personally) would be happy to see pluggable ThreadPool implementations.  I'm not sure the way we suggested it in this PR is ideal anymore: I am thinking it might be better to have a ThreadPoolFactory and registration mechanism like we have for Devices and Session implementations, so that anyone can dynamically register their ThreadPool implementation, rather than requiring it be checked into our codebase and selected via environment variables.  If you would be interested in helping out on making something like the ThreadPoolFactory, that would be awesome.  Otherwise, we'll try to find time to do this ourselves and then anyone can plug in their implementation if they so desire.  We can then use this to evaluate your ThreadPool and accept it as the default if the benchmarks and metrics show it shines :)</p>", "body_text": "So the first step is to fix Eigen, as we've agreed.  The second step is to make sure we have benchmarks that allow us to evaluate the merits of any implementation: we don't have those right now.  Only after that we'll be able to compare implementations of ThreadPool.\nI (personally) would be happy to see pluggable ThreadPool implementations.  I'm not sure the way we suggested it in this PR is ideal anymore: I am thinking it might be better to have a ThreadPoolFactory and registration mechanism like we have for Devices and Session implementations, so that anyone can dynamically register their ThreadPool implementation, rather than requiring it be checked into our codebase and selected via environment variables.  If you would be interested in helping out on making something like the ThreadPoolFactory, that would be awesome.  Otherwise, we'll try to find time to do this ourselves and then anyone can plug in their implementation if they so desire.  We can then use this to evaluate your ThreadPool and accept it as the default if the benchmarks and metrics show it shines :)", "body": "So the first step is to fix Eigen, as we've agreed.  The second step is to make sure we have benchmarks that allow us to evaluate the merits of any implementation: we don't have those right now.  Only after that we'll be able to compare implementations of ThreadPool.\n\nI (personally) would be happy to see pluggable ThreadPool implementations.  I'm not sure the way we suggested it in this PR is ideal anymore: I am thinking it might be better to have a ThreadPoolFactory and registration mechanism like we have for Devices and Session implementations, so that anyone can dynamically register their ThreadPool implementation, rather than requiring it be checked into our codebase and selected via environment variables.  If you would be interested in helping out on making something like the ThreadPoolFactory, that would be awesome.  Otherwise, we'll try to find time to do this ourselves and then anyone can plug in their implementation if they so desire.  We can then use this to evaluate your ThreadPool and accept it as the default if the benchmarks and metrics show it shines :)\n"}