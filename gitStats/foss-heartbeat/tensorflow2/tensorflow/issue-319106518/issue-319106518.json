{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18994", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18994/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18994/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18994/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18994", "id": 319106518, "node_id": "MDU6SXNzdWUzMTkxMDY1MTg=", "number": 18994, "title": "[r1.7][TensorRT] Will it be able to use TRT to optimized the GraphDef that gained from a TF saved_model?", "user": {"login": "oscarriddle", "id": 13745902, "node_id": "MDQ6VXNlcjEzNzQ1OTAy", "avatar_url": "https://avatars0.githubusercontent.com/u/13745902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oscarriddle", "html_url": "https://github.com/oscarriddle", "followers_url": "https://api.github.com/users/oscarriddle/followers", "following_url": "https://api.github.com/users/oscarriddle/following{/other_user}", "gists_url": "https://api.github.com/users/oscarriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/oscarriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oscarriddle/subscriptions", "organizations_url": "https://api.github.com/users/oscarriddle/orgs", "repos_url": "https://api.github.com/users/oscarriddle/repos", "events_url": "https://api.github.com/users/oscarriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/oscarriddle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 18, "created_at": "2018-05-01T03:40:59Z", "updated_at": "2018-09-28T10:42:17Z", "closed_at": "2018-05-03T07:59:21Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Red Hat 4.8.5-16, Linux version 3.10.0-693.5.2.el7.x86_64</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip (python 2.7)</li>\n<li><strong>TensorFlow version (use command below)</strong>: tensorflow-gpu==1.7.0</li>\n<li><strong>Python version</strong>:  python 2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: gcc 5.3</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA9.0, cuDNN7.0.5</li>\n<li><strong>GPU model and memory</strong>: Tesla P4, 8GB</li>\n<li><strong>Exact command to reproduce</strong>: NA</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I tried to load the saved_model and optimize it by integrated TensorRT to do the prediction. The TensorRT will optimize the GraphDef and eventually get about 50% throughput speed-up. I verified this on frozen model, but when trying to apply that on the saved_model, I encountered an error during the graph conversion like below:</p>\n<pre><code>2018-05-01 11:36:30.553143: I tensorflow/core/grappler/devices.cc:51] Number of eligible GPUs (core count &gt;= 8): 1\n2018-05-01 11:36:41.562979: W tensorflow/contrib/tensorrt/convert/convert_nodes.cc:2524] Type conversion failed for InceptionV3/Conv2d_2a_3x3/BatchNorm/moving_mean\n2018-05-01 11:36:41.563063: W tensorflow/contrib/tensorrt/convert/convert_graph.cc:412] subgraph conversion error for subgraph_index:0 due to: \"Invalid argument: Unsupported data type float_ref\" SKIPPING......( 803 nodes)\nTensor(\"input:0\", shape=(?, 299, 299, 3), dtype=float32)\n</code></pre>\n<p>I printed out the GraphDef but not found key name \"float_ref\", so not quite sure how to address this issue.</p>\n<h3>Source code / logs</h3>\n<p>Some essential part of my script:</p>\n<pre><code>    with tf.Graph().as_default():                                                                                                            \n        with tf.Session(graph=tf.Graph()) as sess:\n            if args.image:\n                import numpy as np\n                func = TestKit.preprocess_func['tensorflow'][args.network]\n                img = func(args.image)\n                img = np.expand_dims(img, axis = 0)                                                                  \n            inp, out = importer.import_graph_def(graph_def=sess.graph_def, return_elements=['input','InceptionV3/Logits/SpatialSqueeze'])\n            t0 = time.time()                                                                                                                                   \n            print sess.graph_def\n            f32_graph = trt.create_inference_graph(    #&lt;&lt;&lt;&lt;&lt; Breakpoint\n                input_graph_def=sess.graph_def,\n                #outputs=[logits],                                                                                                                                              \n                outputs=['InceptionV3/Logits/SpatialSqueeze'],\n                #  max_batch_size = int(input_dims[0]),                                                                                                                         \n                max_batch_size = 1,\n                max_workspace_size_bytes=1 &lt;&lt; 20,\n                precision_mode=\"FP32\",  # TRT Engine precision \"FP32\",\"FP16\" or \"INT8\"                                                                                          \n                minimum_segment_size=2  # minimum number of nodes in an engine      \n            )                                                                                                                                         \n        features_tensor = sess.graph.get_tensor_by_name(\"InceptionV3/Logits/SpatialSqueeze:0\")\n        data_input = sess.graph.get_tensor_by_name(\"input:0\")\n        print data_input\n    init_g = tf.global_variables_initializer()\n    init_l = tf.local_variables_initializer()\n    g = ops.Graph()\n</code></pre>\n<p>Any idea will be welcome.<br>\nThanks,</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Red Hat 4.8.5-16, Linux version 3.10.0-693.5.2.el7.x86_64\nTensorFlow installed from (source or binary): pip (python 2.7)\nTensorFlow version (use command below): tensorflow-gpu==1.7.0\nPython version:  python 2.7\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): gcc 5.3\nCUDA/cuDNN version: CUDA9.0, cuDNN7.0.5\nGPU model and memory: Tesla P4, 8GB\nExact command to reproduce: NA\n\nDescribe the problem\nI tried to load the saved_model and optimize it by integrated TensorRT to do the prediction. The TensorRT will optimize the GraphDef and eventually get about 50% throughput speed-up. I verified this on frozen model, but when trying to apply that on the saved_model, I encountered an error during the graph conversion like below:\n2018-05-01 11:36:30.553143: I tensorflow/core/grappler/devices.cc:51] Number of eligible GPUs (core count >= 8): 1\n2018-05-01 11:36:41.562979: W tensorflow/contrib/tensorrt/convert/convert_nodes.cc:2524] Type conversion failed for InceptionV3/Conv2d_2a_3x3/BatchNorm/moving_mean\n2018-05-01 11:36:41.563063: W tensorflow/contrib/tensorrt/convert/convert_graph.cc:412] subgraph conversion error for subgraph_index:0 due to: \"Invalid argument: Unsupported data type float_ref\" SKIPPING......( 803 nodes)\nTensor(\"input:0\", shape=(?, 299, 299, 3), dtype=float32)\n\nI printed out the GraphDef but not found key name \"float_ref\", so not quite sure how to address this issue.\nSource code / logs\nSome essential part of my script:\n    with tf.Graph().as_default():                                                                                                            \n        with tf.Session(graph=tf.Graph()) as sess:\n            if args.image:\n                import numpy as np\n                func = TestKit.preprocess_func['tensorflow'][args.network]\n                img = func(args.image)\n                img = np.expand_dims(img, axis = 0)                                                                  \n            inp, out = importer.import_graph_def(graph_def=sess.graph_def, return_elements=['input','InceptionV3/Logits/SpatialSqueeze'])\n            t0 = time.time()                                                                                                                                   \n            print sess.graph_def\n            f32_graph = trt.create_inference_graph(    #<<<<< Breakpoint\n                input_graph_def=sess.graph_def,\n                #outputs=[logits],                                                                                                                                              \n                outputs=['InceptionV3/Logits/SpatialSqueeze'],\n                #  max_batch_size = int(input_dims[0]),                                                                                                                         \n                max_batch_size = 1,\n                max_workspace_size_bytes=1 << 20,\n                precision_mode=\"FP32\",  # TRT Engine precision \"FP32\",\"FP16\" or \"INT8\"                                                                                          \n                minimum_segment_size=2  # minimum number of nodes in an engine      \n            )                                                                                                                                         \n        features_tensor = sess.graph.get_tensor_by_name(\"InceptionV3/Logits/SpatialSqueeze:0\")\n        data_input = sess.graph.get_tensor_by_name(\"input:0\")\n        print data_input\n    init_g = tf.global_variables_initializer()\n    init_l = tf.local_variables_initializer()\n    g = ops.Graph()\n\nAny idea will be welcome.\nThanks,", "body": "------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Red Hat 4.8.5-16, Linux version 3.10.0-693.5.2.el7.x86_64\r\n- **TensorFlow installed from (source or binary)**: pip (python 2.7)\r\n- **TensorFlow version (use command below)**: tensorflow-gpu==1.7.0\r\n- **Python version**:  python 2.7\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: gcc 5.3\r\n- **CUDA/cuDNN version**: CUDA9.0, cuDNN7.0.5\r\n- **GPU model and memory**: Tesla P4, 8GB\r\n- **Exact command to reproduce**: NA\r\n\r\n### Describe the problem\r\nI tried to load the saved_model and optimize it by integrated TensorRT to do the prediction. The TensorRT will optimize the GraphDef and eventually get about 50% throughput speed-up. I verified this on frozen model, but when trying to apply that on the saved_model, I encountered an error during the graph conversion like below:\r\n```\r\n2018-05-01 11:36:30.553143: I tensorflow/core/grappler/devices.cc:51] Number of eligible GPUs (core count >= 8): 1\r\n2018-05-01 11:36:41.562979: W tensorflow/contrib/tensorrt/convert/convert_nodes.cc:2524] Type conversion failed for InceptionV3/Conv2d_2a_3x3/BatchNorm/moving_mean\r\n2018-05-01 11:36:41.563063: W tensorflow/contrib/tensorrt/convert/convert_graph.cc:412] subgraph conversion error for subgraph_index:0 due to: \"Invalid argument: Unsupported data type float_ref\" SKIPPING......( 803 nodes)\r\nTensor(\"input:0\", shape=(?, 299, 299, 3), dtype=float32)\r\n```\r\nI printed out the GraphDef but not found key name \"float_ref\", so not quite sure how to address this issue. \r\n\r\n### Source code / logs\r\nSome essential part of my script:\r\n```\r\n    with tf.Graph().as_default():                                                                                                            \r\n        with tf.Session(graph=tf.Graph()) as sess:\r\n            if args.image:\r\n                import numpy as np\r\n                func = TestKit.preprocess_func['tensorflow'][args.network]\r\n                img = func(args.image)\r\n                img = np.expand_dims(img, axis = 0)                                                                  \r\n            inp, out = importer.import_graph_def(graph_def=sess.graph_def, return_elements=['input','InceptionV3/Logits/SpatialSqueeze'])\r\n            t0 = time.time()                                                                                                                                   \r\n            print sess.graph_def\r\n            f32_graph = trt.create_inference_graph(    #<<<<< Breakpoint\r\n                input_graph_def=sess.graph_def,\r\n                #outputs=[logits],                                                                                                                                              \r\n                outputs=['InceptionV3/Logits/SpatialSqueeze'],\r\n                #  max_batch_size = int(input_dims[0]),                                                                                                                         \r\n                max_batch_size = 1,\r\n                max_workspace_size_bytes=1 << 20,\r\n                precision_mode=\"FP32\",  # TRT Engine precision \"FP32\",\"FP16\" or \"INT8\"                                                                                          \r\n                minimum_segment_size=2  # minimum number of nodes in an engine      \r\n            )                                                                                                                                         \r\n        features_tensor = sess.graph.get_tensor_by_name(\"InceptionV3/Logits/SpatialSqueeze:0\")\r\n        data_input = sess.graph.get_tensor_by_name(\"input:0\")\r\n        print data_input\r\n    init_g = tf.global_variables_initializer()\r\n    init_l = tf.local_variables_initializer()\r\n    g = ops.Graph()\r\n```\r\n\r\nAny idea will be welcome.\r\nThanks,\r\n\r\n"}