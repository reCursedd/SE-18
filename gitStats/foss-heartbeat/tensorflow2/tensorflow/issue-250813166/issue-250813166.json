{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12345", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12345/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12345/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12345/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12345", "id": 250813166, "node_id": "MDU6SXNzdWUyNTA4MTMxNjY=", "number": 12345, "title": "PEP 484 Type Annotations (feature request)", "user": {"login": "ed-alertedh", "id": 24605895, "node_id": "MDQ6VXNlcjI0NjA1ODk1", "avatar_url": "https://avatars1.githubusercontent.com/u/24605895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ed-alertedh", "html_url": "https://github.com/ed-alertedh", "followers_url": "https://api.github.com/users/ed-alertedh/followers", "following_url": "https://api.github.com/users/ed-alertedh/following{/other_user}", "gists_url": "https://api.github.com/users/ed-alertedh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ed-alertedh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ed-alertedh/subscriptions", "organizations_url": "https://api.github.com/users/ed-alertedh/orgs", "repos_url": "https://api.github.com/users/ed-alertedh/repos", "events_url": "https://api.github.com/users/ed-alertedh/events{/privacy}", "received_events_url": "https://api.github.com/users/ed-alertedh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-08-17T02:33:49Z", "updated_at": "2018-08-15T03:50:28Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<p>N/A</p>\n<h3>Describe the problem</h3>\n<h2>Background</h2>\n<p>PEP 484 [1] added support for type hints in Python. These are purely annotations and are not enforced by the interpreter, however there are tools such as mypy [2] which can be run to check for consistency in the annotations. The typeshed initiative [3] has started to build external collections of type annotations for commonly used libraries.</p>\n<p>When adding type annotations to a codebase, it is best if you can achieve near 100% coverage, otherwise uncertainty propagates out from everywhere the \"untyped\" code is called. A codebase using TF would likely struggle to gain much benefit from type-checking in any of the core code built on top of TF.</p>\n<h2>Benefits of Adding Type Annotations</h2>\n<ul>\n<li>The expected inputs and outputs of functions become much clearer</li>\n<li>Code completion is able to provide more useful suggestions, boosting productivity by reducing amount of time spent referring to docs</li>\n<li>Static analysis can uncover latent bugs (case study here[5])</li>\n</ul>\n<h2>Difficulties/Drawbacks</h2>\n<ul>\n<li>People may be encouraged to overly constrain types, removing some of the flexibility of a dynamic language. But given that Google's Python style-guide discourages \"Power Features\" [4] I would argue that striving towards code that is explicit is a similar philosophy</li>\n<li>The protobuf compiler would need to be augmented to generate type annotations.</li>\n<li>The Tensorflow Python codebase is huge, so at this point adding the annotations would be a huge undertaking.</li>\n<li>Tensorflow still supports python 2.7, 3.3 and 3.4 which do not have the type annotation syntax. So if this were implemented it would probably have to be in external *.pyi files, which is harder to maintain compared to inline type annotations in the source code.</li>\n</ul>\n<h2>Final thoughts</h2>\n<p>I realise that this would be a major undertaking and wouldn't be likely to ship any time soon, but I'm curious to gauge Google's thoughts on this new feature in Python. I'm about to start building a new codebase from scratch and was keen to use it as a chance to try out type annotations. I probably still will give it a shot, but I suspect that unless most of the common data science libs out there adopt this standard then its usefulness will be quite limited.</p>\n<p>[1] <a href=\"https://www.python.org/dev/peps/pep-0484/\" rel=\"nofollow\">https://www.python.org/dev/peps/pep-0484/</a><br>\n[2] <a href=\"http://mypy-lang.org/\" rel=\"nofollow\">http://mypy-lang.org/</a><br>\n[3] <a href=\"https://github.com/python/typeshed\">https://github.com/python/typeshed</a><br>\n[4] <a href=\"https://google.github.io/styleguide/pyguide.html#Power_Features\" rel=\"nofollow\">https://google.github.io/styleguide/pyguide.html#Power_Features</a><br>\n[5] <a href=\"http://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/\" rel=\"nofollow\">http://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/</a></p>", "body_text": "System information\nN/A\nDescribe the problem\nBackground\nPEP 484 [1] added support for type hints in Python. These are purely annotations and are not enforced by the interpreter, however there are tools such as mypy [2] which can be run to check for consistency in the annotations. The typeshed initiative [3] has started to build external collections of type annotations for commonly used libraries.\nWhen adding type annotations to a codebase, it is best if you can achieve near 100% coverage, otherwise uncertainty propagates out from everywhere the \"untyped\" code is called. A codebase using TF would likely struggle to gain much benefit from type-checking in any of the core code built on top of TF.\nBenefits of Adding Type Annotations\n\nThe expected inputs and outputs of functions become much clearer\nCode completion is able to provide more useful suggestions, boosting productivity by reducing amount of time spent referring to docs\nStatic analysis can uncover latent bugs (case study here[5])\n\nDifficulties/Drawbacks\n\nPeople may be encouraged to overly constrain types, removing some of the flexibility of a dynamic language. But given that Google's Python style-guide discourages \"Power Features\" [4] I would argue that striving towards code that is explicit is a similar philosophy\nThe protobuf compiler would need to be augmented to generate type annotations.\nThe Tensorflow Python codebase is huge, so at this point adding the annotations would be a huge undertaking.\nTensorflow still supports python 2.7, 3.3 and 3.4 which do not have the type annotation syntax. So if this were implemented it would probably have to be in external *.pyi files, which is harder to maintain compared to inline type annotations in the source code.\n\nFinal thoughts\nI realise that this would be a major undertaking and wouldn't be likely to ship any time soon, but I'm curious to gauge Google's thoughts on this new feature in Python. I'm about to start building a new codebase from scratch and was keen to use it as a chance to try out type annotations. I probably still will give it a shot, but I suspect that unless most of the common data science libs out there adopt this standard then its usefulness will be quite limited.\n[1] https://www.python.org/dev/peps/pep-0484/\n[2] http://mypy-lang.org/\n[3] https://github.com/python/typeshed\n[4] https://google.github.io/styleguide/pyguide.html#Power_Features\n[5] http://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/", "body": "### System information\r\nN/A\r\n\r\n### Describe the problem\r\n## Background\r\nPEP 484 [1] added support for type hints in Python. These are purely annotations and are not enforced by the interpreter, however there are tools such as mypy [2] which can be run to check for consistency in the annotations. The typeshed initiative [3] has started to build external collections of type annotations for commonly used libraries.\r\n\r\nWhen adding type annotations to a codebase, it is best if you can achieve near 100% coverage, otherwise uncertainty propagates out from everywhere the \"untyped\" code is called. A codebase using TF would likely struggle to gain much benefit from type-checking in any of the core code built on top of TF.\r\n\r\n## Benefits of Adding Type Annotations\r\n * The expected inputs and outputs of functions become much clearer\r\n * Code completion is able to provide more useful suggestions, boosting productivity by reducing amount of time spent referring to docs\r\n * Static analysis can uncover latent bugs (case study here[5])\r\n\r\n## Difficulties/Drawbacks\r\n * People may be encouraged to overly constrain types, removing some of the flexibility of a dynamic language. But given that Google's Python style-guide discourages \"Power Features\" [4] I would argue that striving towards code that is explicit is a similar philosophy\r\n * The protobuf compiler would need to be augmented to generate type annotations.\r\n * The Tensorflow Python codebase is huge, so at this point adding the annotations would be a huge undertaking.\r\n * Tensorflow still supports python 2.7, 3.3 and 3.4 which do not have the type annotation syntax. So if this were implemented it would probably have to be in external *.pyi files, which is harder to maintain compared to inline type annotations in the source code.\r\n\r\n## Final thoughts\r\nI realise that this would be a major undertaking and wouldn't be likely to ship any time soon, but I'm curious to gauge Google's thoughts on this new feature in Python. I'm about to start building a new codebase from scratch and was keen to use it as a chance to try out type annotations. I probably still will give it a shot, but I suspect that unless most of the common data science libs out there adopt this standard then its usefulness will be quite limited.\r\n\r\n[1] https://www.python.org/dev/peps/pep-0484/\r\n[2] http://mypy-lang.org/\r\n[3] https://github.com/python/typeshed\r\n[4] https://google.github.io/styleguide/pyguide.html#Power_Features\r\n[5] http://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/"}