{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/329449736", "html_url": "https://github.com/tensorflow/tensorflow/issues/12345#issuecomment-329449736", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12345", "id": 329449736, "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTQ0OTczNg==", "user": {"login": "ngc92", "id": 7938269, "node_id": "MDQ6VXNlcjc5MzgyNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7938269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngc92", "html_url": "https://github.com/ngc92", "followers_url": "https://api.github.com/users/ngc92/followers", "following_url": "https://api.github.com/users/ngc92/following{/other_user}", "gists_url": "https://api.github.com/users/ngc92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngc92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngc92/subscriptions", "organizations_url": "https://api.github.com/users/ngc92/orgs", "repos_url": "https://api.github.com/users/ngc92/repos", "events_url": "https://api.github.com/users/ngc92/events{/privacy}", "received_events_url": "https://api.github.com/users/ngc92/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-14T11:07:34Z", "updated_at": "2018-01-19T20:34:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think the most significant benefit of specifying types, improved auto-completion, can be achieved by just specifying the return types.<br>\nThese are usually already there, but not in the correct format (at least for PyCharm). Simply changing</p>\n<pre><code>Returns:\n    A `Tensor`...\n</code></pre>\n<p>to</p>\n<pre><code>Returns: \n    Tensor: A `Tensor` ...\n</code></pre>\n<p>would make these hints accessible to tools.</p>\n<p>Finally, the automatic type inference just by the structure of the code should not be underestimated.<br>\nAt least in PyCharm, <code>if not isinstance(A, Type): raise TypeError()</code> is enough for code completion to know that following this line, A is of type Type. It also follows types through attribute assignments in classes and function calls. This significantly reduces the amount of places where type hints become necessary.</p>\n<p>While playing around with it, I found, for example, that for Tensor().dtype to be recognized correctly, it was sufficient to annotate the as_dtype function correctly.</p>", "body_text": "I think the most significant benefit of specifying types, improved auto-completion, can be achieved by just specifying the return types.\nThese are usually already there, but not in the correct format (at least for PyCharm). Simply changing\nReturns:\n    A `Tensor`...\n\nto\nReturns: \n    Tensor: A `Tensor` ...\n\nwould make these hints accessible to tools.\nFinally, the automatic type inference just by the structure of the code should not be underestimated.\nAt least in PyCharm, if not isinstance(A, Type): raise TypeError() is enough for code completion to know that following this line, A is of type Type. It also follows types through attribute assignments in classes and function calls. This significantly reduces the amount of places where type hints become necessary.\nWhile playing around with it, I found, for example, that for Tensor().dtype to be recognized correctly, it was sufficient to annotate the as_dtype function correctly.", "body": "I think the most significant benefit of specifying types, improved auto-completion, can be achieved by just specifying the return types. \r\nThese are usually already there, but not in the correct format (at least for PyCharm). Simply changing\r\n```\r\nReturns:\r\n    A `Tensor`...\r\n```\r\nto \r\n```\r\nReturns: \r\n    Tensor: A `Tensor` ...\r\n```\r\nwould make these hints accessible to tools.\r\n\r\nFinally, the automatic type inference just by the structure of the code should not be underestimated.\r\nAt least in PyCharm, `if not isinstance(A, Type): raise TypeError()` is enough for code completion to know that following this line, A is of type Type. It also follows types through attribute assignments in classes and function calls. This significantly reduces the amount of places where type hints become necessary.\r\n\r\nWhile playing around with it, I found, for example, that for Tensor().dtype to be recognized correctly, it was sufficient to annotate the as_dtype function correctly."}