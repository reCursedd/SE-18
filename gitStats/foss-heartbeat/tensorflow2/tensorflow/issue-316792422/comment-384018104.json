{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/384018104", "html_url": "https://github.com/tensorflow/tensorflow/issues/18795#issuecomment-384018104", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18795", "id": 384018104, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDAxODEwNA==", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-24T17:38:23Z", "updated_at": "2018-04-24T17:38:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The following code can run without issues:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ndata <span class=\"pl-k\">=</span> tf.random_normal(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">64</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">1</span>])\nlabels <span class=\"pl-k\">=</span> tf.random_normal(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">64</span>, <span class=\"pl-c1\">2</span>])\n\nflag <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">cond</span>(<span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">x</span>):\n    <span class=\"pl-k\">return</span> i <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">1</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">body</span>(<span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">x</span>):\n    x <span class=\"pl-k\">=</span> tf.layers.conv1d(x, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">7</span>, <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>same<span class=\"pl-pds\">'</span></span>)\n    x <span class=\"pl-k\">=</span> tf.contrib.layers.batch_norm(x, <span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span>flag, <span class=\"pl-v\">updates_collections</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>)\n    x <span class=\"pl-k\">=</span> tf.nn.relu(x)\n    <span class=\"pl-k\">return</span> i <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, x\n\n_, y <span class=\"pl-k\">=</span> tf.while_loop(cond, body, [<span class=\"pl-c1\">0</span>, data], <span class=\"pl-v\">back_prop</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n\ny <span class=\"pl-k\">=</span> tf.layers.flatten(y)\nlogits <span class=\"pl-k\">=</span> tf.layers.dense(y, <span class=\"pl-c1\">2</span>)\n\nloss <span class=\"pl-k\">=</span> tf.losses.mean_squared_error(labels, logits)\noptimizer <span class=\"pl-k\">=</span> tf.train.AdamOptimizer()\nupdate_ops <span class=\"pl-k\">=</span> tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">UPDATE_OPS</span>)\n<span class=\"pl-k\">assert</span> <span class=\"pl-c1\">len</span>(update_ops) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>\ntrain_op <span class=\"pl-k\">=</span> optimizer.minimize(loss, tf.train.get_global_step())\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer())\n    sess.run(train_op)</pre></div>\n<p>So it's unclear what do you mean by \"tried contrib API and it has the same result\".</p>", "body_text": "The following code can run without issues:\nimport tensorflow as tf\n\ndata = tf.random_normal(shape=[64, 10, 1])\nlabels = tf.random_normal(shape=[64, 2])\n\nflag = True\n\ndef cond(i, x):\n    return i < 1\n\ndef body(i, x):\n    x = tf.layers.conv1d(x, 1, 7, padding='same')\n    x = tf.contrib.layers.batch_norm(x, is_training=flag, updates_collections=None)\n    x = tf.nn.relu(x)\n    return i + 1, x\n\n_, y = tf.while_loop(cond, body, [0, data], back_prop=False)\n\ny = tf.layers.flatten(y)\nlogits = tf.layers.dense(y, 2)\n\nloss = tf.losses.mean_squared_error(labels, logits)\noptimizer = tf.train.AdamOptimizer()\nupdate_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\nassert len(update_ops) == 0\ntrain_op = optimizer.minimize(loss, tf.train.get_global_step())\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    sess.run(train_op)\nSo it's unclear what do you mean by \"tried contrib API and it has the same result\".", "body": "The following code can run without issues:\r\n```python\r\nimport tensorflow as tf\r\n\r\ndata = tf.random_normal(shape=[64, 10, 1])\r\nlabels = tf.random_normal(shape=[64, 2])\r\n\r\nflag = True\r\n\r\ndef cond(i, x):\r\n    return i < 1\r\n\r\ndef body(i, x):\r\n    x = tf.layers.conv1d(x, 1, 7, padding='same')\r\n    x = tf.contrib.layers.batch_norm(x, is_training=flag, updates_collections=None)\r\n    x = tf.nn.relu(x)\r\n    return i + 1, x\r\n\r\n_, y = tf.while_loop(cond, body, [0, data], back_prop=False)\r\n\r\ny = tf.layers.flatten(y)\r\nlogits = tf.layers.dense(y, 2)\r\n\r\nloss = tf.losses.mean_squared_error(labels, logits)\r\noptimizer = tf.train.AdamOptimizer()\r\nupdate_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\r\nassert len(update_ops) == 0\r\ntrain_op = optimizer.minimize(loss, tf.train.get_global_step())\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n    sess.run(train_op)\r\n```\r\nSo it's unclear what do you mean by \"tried contrib API and it has the same result\"."}