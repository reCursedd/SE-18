{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111628626", "pull_request_review_id": 32886576, "id": 111628626, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTYyODYyNg==", "diff_hunk": "@@ -651,5 +651,175 @@ def testFunctionalConv2DTransposeNoReuse(self):\n     self.assertEqual(len(variables.trainable_variables()), 4)\n \n \n+class Conv3DTransposeTest(test.TestCase):\n+\n+  def testInvalidDataFormat(self):\n+    depth, height, width = 5, 7, 9\n+    volumes = random_ops.random_uniform((5, depth, height, width, 32), seed=1)\n+    with self.assertRaisesRegexp(ValueError, 'data_format'):\n+      conv_layers.conv3d_transpose(volumes, 4, 3, data_format='invalid')\n+\n+  def testInvalidStrides(self):\n+    depth, height, width = 5, 7, 9\n+    volumes = random_ops.random_uniform((5, depth, height, width, 32), seed=1)\n+    with self.assertRaisesRegexp(ValueError, 'strides'):\n+      conv_layers.conv3d_transpose(volumes, 4, 3, strides=(1, 2))\n+\n+    with self.assertRaisesRegexp(ValueError, 'strides'):\n+      conv_layers.conv3d_transpose(volumes, 4, 3, strides=None)\n+\n+  def testInvalidKernelSize(self):\n+    depth, height, width = 5, 7, 9\n+    volumes = random_ops.random_uniform((5, depth, height, width, 32), seed=1)\n+    with self.assertRaisesRegexp(ValueError, 'kernel_size'):\n+      conv_layers.conv3d_transpose(volumes, 4, (1, 2))\n+\n+    with self.assertRaisesRegexp(ValueError, 'kernel_size'):\n+      conv_layers.conv3d_transpose(volumes, 4, None)\n+\n+  def testCreateConv3DTranspose(self):\n+    depth, height, width = 5, 7, 9\n+    volumes = random_ops.random_uniform((5, depth, height, width, 32))\n+    layer = conv_layers.Conv3DTranspose(4, [3, 3, 3], activation=nn_ops.relu)\n+    output = layer.apply(volumes)\n+    self.assertEqual(output.op.name, 'conv3d_transpose/Relu')\n+    self.assertListEqual(output.get_shape().as_list(),\n+                         [5, depth + 2, height + 2, width + 2, 4])\n+    self.assertListEqual(layer.kernel.get_shape().as_list(), [3, 3, 3, 4, 32])\n+    self.assertListEqual(layer.bias.get_shape().as_list(), [4])\n+\n+  def testCreateConv3DTransposeIntegerKernelSize(self):\n+    depth, height, width = 5, 7, 9\n+    volumes = random_ops.random_uniform((5, depth, height, width, 32))\n+    layer = conv_layers.Conv3DTranspose(4, 3)\n+    output = layer.apply(volumes)\n+    self.assertListEqual(output.get_shape().as_list(),\n+                         [5, depth + 2, height + 2, width + 2, 4])\n+    self.assertListEqual(layer.kernel.get_shape().as_list(), [3, 3, 3, 4, 32])\n+    self.assertListEqual(layer.bias.get_shape().as_list(), [4])\n+\n+  def testCreateConv3DTransposeChannelsFirst(self):\n+    depth, height, width = 5, 7, 9\n+    volumes = random_ops.random_uniform((5, 32, depth, height, width))\n+    layer = conv_layers.Conv3DTranspose(\n+        4, [3, 3, 3], data_format='channels_first')\n+    output = layer.apply(volumes)\n+    self.assertListEqual(output.get_shape().as_list(),\n+                         [5, 4, depth + 2, height + 2, width + 2])\n+    self.assertListEqual(layer.kernel.get_shape().as_list(), [3, 3, 3, 4, 32])\n+    self.assertListEqual(layer.bias.get_shape().as_list(), [4])\n+\n+  def testConv3DTransposePaddingSame(self):\n+    depth, height, width = 5, 7, 9\n+    volumes = random_ops.random_uniform((5, depth, height, width, 64), seed=1)\n+    layer = conv_layers.Conv3DTranspose(\n+        32, volumes.get_shape()[1:4], padding='same')\n+    output = layer.apply(volumes)\n+    self.assertListEqual(output.get_shape().as_list(), [5, depth, height,\n+                                                        width, 32])\n+\n+  def testCreateConv3DTransposeWithStrides(self):\n+    depth, height, width = 4, 6, 8\n+    # Test strides tuple", "path": "tensorflow/python/layers/convolutional_test.py", "position": null, "original_position": 73, "commit_id": "a2006b0284e870da65c5f3a0ffafd7d4268e3c0e", "original_commit_id": "cf43287e752a5d48badb1da7b3b61b35c634a9e4", "user": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "body": "Here and below: add punctuation", "created_at": "2017-04-14T20:07:23Z", "updated_at": "2017-04-26T14:21:13Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8461#discussion_r111628626", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8461", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111628626"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8461#discussion_r111628626"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8461"}}, "body_html": "<p>Here and below: add punctuation</p>", "body_text": "Here and below: add punctuation"}