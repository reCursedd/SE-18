{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17119", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17119/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17119/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17119/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17119", "id": 298142232, "node_id": "MDU6SXNzdWUyOTgxNDIyMzI=", "number": 17119, "title": "Apparent thread-safety issue in tensorflow/core/kernels/queue_op.h", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-02-19T01:55:41Z", "updated_at": "2018-04-07T20:36:32Z", "closed_at": "2018-04-07T20:36:32Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS 10.13.3</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: ('v1.6.0-rc1-277-g993006fa76', '1.6.0-rc1')</li>\n<li><strong>Python version</strong>: Python 2.7.14</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.10.1-homebrew</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 4.2.1</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.1 / 7.0.5</li>\n<li><strong>GPU model and memory</strong>: NVIDIA GeForce GT 750M with 2 GB device memory (CUDA compute capability 3.0)</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Clang warns about a thread-safety issue in <code>tensorflow/core/kernels/queue_op.h</code> at lines 46 and 47 which warnings appear to be valid.</p>\n<p>Here is the code around that line:</p>\n<div class=\"highlight highlight-source-c++\"><pre>  <span class=\"pl-k\">void</span> <span class=\"pl-en\">Compute</span>(OpKernelContext* context) <span class=\"pl-k\">override</span> {\n    ResourceOpKernel&lt;QueueInterface&gt;::<span class=\"pl-c1\">Compute</span>(context);\n    <span class=\"pl-k\">if</span> (resource_ &amp;&amp; context-&gt;<span class=\"pl-c1\">track_allocations</span>()) {                          <span class=\"pl-c\"><span class=\"pl-c\">//</span> Line 46</span>\n      context-&gt;<span class=\"pl-c1\">record_persistent_memory_allocation</span>(resource_-&gt;<span class=\"pl-c1\">MemoryUsed</span>());  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Line 47</span>\n    }\n  }</pre></div>\n<p>No lock is held on <code>mu_</code>.</p>\n<p>If there is no thread safety issue, I think that a comment should be added to explain why, as it's not clear.</p>\n<h3>Source code / logs</h3>\n<pre>./tensorflow/core/kernels/queue_op.h:46:9: warning: reading variable 'resource_' requires holding mutex 'mu_' [-Wthread-safety-analysis]\n    if (resource_ &amp;&amp; context-&gt;track_allocations()) {\n        ^\n./tensorflow/core/kernels/queue_op.h:47:52: warning: reading variable 'resource_' requires holding mutex 'mu_' [-Wthread-safety-analysis]\n      context-&gt;record_persistent_memory_allocation(resource_-&gt;MemoryUsed());\n                                                   ^\n</pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS 10.13.3\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): ('v1.6.0-rc1-277-g993006fa76', '1.6.0-rc1')\nPython version: Python 2.7.14\nBazel version (if compiling from source): 0.10.1-homebrew\nGCC/Compiler version (if compiling from source): 4.2.1\nCUDA/cuDNN version: 9.1 / 7.0.5\nGPU model and memory: NVIDIA GeForce GT 750M with 2 GB device memory (CUDA compute capability 3.0)\nExact command to reproduce: N/A\n\nDescribe the problem\nClang warns about a thread-safety issue in tensorflow/core/kernels/queue_op.h at lines 46 and 47 which warnings appear to be valid.\nHere is the code around that line:\n  void Compute(OpKernelContext* context) override {\n    ResourceOpKernel<QueueInterface>::Compute(context);\n    if (resource_ && context->track_allocations()) {                          // Line 46\n      context->record_persistent_memory_allocation(resource_->MemoryUsed());  // Line 47\n    }\n  }\nNo lock is held on mu_.\nIf there is no thread safety issue, I think that a comment should be added to explain why, as it's not clear.\nSource code / logs\n./tensorflow/core/kernels/queue_op.h:46:9: warning: reading variable 'resource_' requires holding mutex 'mu_' [-Wthread-safety-analysis]\n    if (resource_ && context->track_allocations()) {\n        ^\n./tensorflow/core/kernels/queue_op.h:47:52: warning: reading variable 'resource_' requires holding mutex 'mu_' [-Wthread-safety-analysis]\n      context->record_persistent_memory_allocation(resource_->MemoryUsed());\n                                                   ^", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS 10.13.3\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: ('v1.6.0-rc1-277-g993006fa76', '1.6.0-rc1')\r\n- **Python version**: Python 2.7.14\r\n- **Bazel version (if compiling from source)**: 0.10.1-homebrew\r\n- **GCC/Compiler version (if compiling from source)**: 4.2.1\r\n- **CUDA/cuDNN version**: 9.1 / 7.0.5\r\n- **GPU model and memory**: NVIDIA GeForce GT 750M with 2 GB device memory (CUDA compute capability 3.0)\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\nClang warns about a thread-safety issue in `tensorflow/core/kernels/queue_op.h` at lines 46 and 47 which warnings appear to be valid.\r\n\r\nHere is the code around that line:\r\n\r\n```c++\r\n  void Compute(OpKernelContext* context) override {\r\n    ResourceOpKernel<QueueInterface>::Compute(context);\r\n    if (resource_ && context->track_allocations()) {                          // Line 46\r\n      context->record_persistent_memory_allocation(resource_->MemoryUsed());  // Line 47\r\n    }\r\n  }\r\n```\r\n\r\nNo lock is held on `mu_`.\r\n\r\nIf there is no thread safety issue, I think that a comment should be added to explain why, as it's not clear.\r\n\r\n### Source code / logs\r\n<pre>\r\n./tensorflow/core/kernels/queue_op.h:46:9: warning: reading variable 'resource_' requires holding mutex 'mu_' [-Wthread-safety-analysis]\r\n    if (resource_ && context->track_allocations()) {\r\n        ^\r\n./tensorflow/core/kernels/queue_op.h:47:52: warning: reading variable 'resource_' requires holding mutex 'mu_' [-Wthread-safety-analysis]\r\n      context->record_persistent_memory_allocation(resource_->MemoryUsed());\r\n                                                   ^\r\n</pre>"}