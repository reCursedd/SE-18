{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8338", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8338/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8338/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8338/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8338", "id": 213669227, "node_id": "MDU6SXNzdWUyMTM2NjkyMjc=", "number": 8338, "title": "Segmentation fault after calling tf.contrib.distributions `sample().eval()` several times", "user": {"login": "taochenshh", "id": 15166943, "node_id": "MDQ6VXNlcjE1MTY2OTQz", "avatar_url": "https://avatars3.githubusercontent.com/u/15166943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taochenshh", "html_url": "https://github.com/taochenshh", "followers_url": "https://api.github.com/users/taochenshh/followers", "following_url": "https://api.github.com/users/taochenshh/following{/other_user}", "gists_url": "https://api.github.com/users/taochenshh/gists{/gist_id}", "starred_url": "https://api.github.com/users/taochenshh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taochenshh/subscriptions", "organizations_url": "https://api.github.com/users/taochenshh/orgs", "repos_url": "https://api.github.com/users/taochenshh/repos", "events_url": "https://api.github.com/users/taochenshh/events{/privacy}", "received_events_url": "https://api.github.com/users/taochenshh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-13T04:07:01Z", "updated_at": "2017-03-15T17:19:32Z", "closed_at": "2017-03-14T02:26:31Z", "author_association": "NONE", "body_html": "<p>I ran the following code and after calling <code>sample().eval()</code> several times (like 15 times), the program will crash.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nmu <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>.]\ndiag_stdev <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>.]\ndist <span class=\"pl-k\">=</span> tf.contrib.distributions.MultivariateNormalDiag(mu, diag_stdev)\nsess <span class=\"pl-k\">=</span> tf.InteractiveSession()\ndist.sample().eval()\ndist.sample().eval()\n<span class=\"pl-c1\">...</span></pre></div>\n<p>I don't know if this is a bug in memory management, just reporting it. I tried to run this short code several times, and the program all crashed after calling <code>sample()</code> several times.</p>\n<p>I am using TensorFlow 1.0.1, ubuntu 14.04, cuDNN 5.1. CUDA 8.0.<br>\nI am running the code in ipython</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-ii\">$</span> ipython\nPython <span class=\"pl-c1\">2.7</span>.6 (default, Oct <span class=\"pl-c1\">26</span> <span class=\"pl-c1\">2016</span>, <span class=\"pl-c1\">20</span>:<span class=\"pl-c1\">30</span>:<span class=\"pl-c1\">19</span>) \nType <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>copyright<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>credits<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">or</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>license<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">for</span> more information.\n\nIPython <span class=\"pl-c1\">5.1</span>.0 <span class=\"pl-ii\">--</span> An enhanced Interactive Python.\n<span class=\"pl-ii\">?</span>         <span class=\"pl-ii\">-&gt;</span> Introduction <span class=\"pl-k\">and</span> overview of IPython<span class=\"pl-s\"><span class=\"pl-pds\">'</span>s features.<span class=\"pl-ii\"></span></span>\n<span class=\"pl-k\">%</span>quickref <span class=\"pl-ii\">-&gt;</span> Quick reference.\n<span class=\"pl-c1\">help</span>      <span class=\"pl-ii\">-&gt;</span> Python<span class=\"pl-s\"><span class=\"pl-pds\">'</span>s own help system.<span class=\"pl-ii\"></span></span>\n<span class=\"pl-c1\">object</span><span class=\"pl-ii\">?</span>   <span class=\"pl-ii\">-&gt;</span> Details about <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span>, use <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object??<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">for</span> extra details.\n\nIn [<span class=\"pl-c1\">1</span>]: <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nI tensorflow<span class=\"pl-k\">/</span>stream_executor<span class=\"pl-k\">/</span>dso_loader.cc:<span class=\"pl-c1\">135</span>] successfully opened <span class=\"pl-c1\">CUDA</span> library libcublas.so.8.0 locally\nI tensorflow<span class=\"pl-k\">/</span>stream_executor<span class=\"pl-k\">/</span>dso_loader.cc:<span class=\"pl-c1\">135</span>] successfully opened <span class=\"pl-c1\">CUDA</span> library libcudnn.so.5 locally\nI tensorflow<span class=\"pl-k\">/</span>stream_executor<span class=\"pl-k\">/</span>dso_loader.cc:<span class=\"pl-c1\">135</span>] successfully opened <span class=\"pl-c1\">CUDA</span> library libcufft.so.8.0 locally\nI tensorflow<span class=\"pl-k\">/</span>stream_executor<span class=\"pl-k\">/</span>dso_loader.cc:<span class=\"pl-c1\">135</span>] successfully opened <span class=\"pl-c1\">CUDA</span> library libcuda.so.1 locally\nI tensorflow<span class=\"pl-k\">/</span>stream_executor<span class=\"pl-k\">/</span>dso_loader.cc:<span class=\"pl-c1\">135</span>] successfully opened <span class=\"pl-c1\">CUDA</span> library libcurand.so.8.0 locally\n\nIn [<span class=\"pl-c1\">2</span>]: tf.<span class=\"pl-c1\">__version__</span>\nOut[<span class=\"pl-c1\">2</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>1.0.1<span class=\"pl-pds\">'</span></span>\n\nIn [<span class=\"pl-c1\">3</span>]: <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n   <span class=\"pl-c1\">...</span>: mu <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>.]\n   <span class=\"pl-c1\">...</span>: diag_stdev <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>.]\n   <span class=\"pl-c1\">...</span>: dist <span class=\"pl-k\">=</span> tf.contrib.distributions.MultivariateNormalDiag(mu, diag_stdev)\n   <span class=\"pl-c1\">...</span>: sess <span class=\"pl-k\">=</span> tf.InteractiveSession()\n   <span class=\"pl-c1\">...</span>: dist.sample().eval()\n   <span class=\"pl-c1\">...</span>: \nW tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>platform<span class=\"pl-k\">/</span>cpu_feature_guard.cc:<span class=\"pl-c1\">45</span>] The TensorFlow library wasn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.<span class=\"pl-ii\"></span></span>\nW tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>platform<span class=\"pl-k\">/</span>cpu_feature_guard.cc:<span class=\"pl-c1\">45</span>] The TensorFlow library wasn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.<span class=\"pl-ii\"></span></span>\nW tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>platform<span class=\"pl-k\">/</span>cpu_feature_guard.cc:<span class=\"pl-c1\">45</span>] The TensorFlow library wasn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.<span class=\"pl-ii\"></span></span>\nW tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>platform<span class=\"pl-k\">/</span>cpu_feature_guard.cc:<span class=\"pl-c1\">45</span>] The TensorFlow library wasn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.<span class=\"pl-ii\"></span></span>\nW tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>platform<span class=\"pl-k\">/</span>cpu_feature_guard.cc:<span class=\"pl-c1\">45</span>] The TensorFlow library wasn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.<span class=\"pl-ii\"></span></span>\nW tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>platform<span class=\"pl-k\">/</span>cpu_feature_guard.cc:<span class=\"pl-c1\">45</span>] The TensorFlow library wasn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.<span class=\"pl-ii\"></span></span>\nI tensorflow<span class=\"pl-k\">/</span>stream_executor<span class=\"pl-k\">/</span>cuda<span class=\"pl-k\">/</span>cuda_gpu_executor.cc:<span class=\"pl-c1\">910</span>] successful <span class=\"pl-c1\">NUMA</span> node read <span class=\"pl-k\">from</span> SysFS had negative value (<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>), but there must be at least one <span class=\"pl-c1\">NUMA</span> node, so returning <span class=\"pl-c1\">NUMA</span> node zero\nI tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>common_runtime<span class=\"pl-k\">/</span>gpu<span class=\"pl-k\">/</span>gpu_device.cc:<span class=\"pl-c1\">885</span>] Found device <span class=\"pl-c1\">0</span> <span class=\"pl-k\">with</span> properties: \nname: <span class=\"pl-c1\">TITAN</span> X (Pascal)\nmajor: <span class=\"pl-c1\">6</span> minor: <span class=\"pl-c1\">1</span> memoryClockRate (GHz) <span class=\"pl-c1\">1.531</span>\npciBusID <span class=\"pl-c1\">0000</span>:<span class=\"pl-c1\">0<span class=\"pl-ii\">1</span></span>:<span class=\"pl-c1\">00.0</span>\nTotal memory: <span class=\"pl-c1\">11.</span><span class=\"pl-ii\">90GiB</span>\nFree memory: <span class=\"pl-c1\">11.</span><span class=\"pl-ii\">18GiB</span>\nI tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>common_runtime<span class=\"pl-k\">/</span>gpu<span class=\"pl-k\">/</span>gpu_device.cc:<span class=\"pl-c1\">906</span>] <span class=\"pl-c1\">DMA</span>: <span class=\"pl-c1\">0</span> \nI tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>common_runtime<span class=\"pl-k\">/</span>gpu<span class=\"pl-k\">/</span>gpu_device.cc:<span class=\"pl-c1\">916</span>] <span class=\"pl-c1\">0</span>:   Y \nI tensorflow<span class=\"pl-k\">/</span>core<span class=\"pl-k\">/</span>common_runtime<span class=\"pl-k\">/</span>gpu<span class=\"pl-k\">/</span>gpu_device.cc:<span class=\"pl-c1\">975</span>] Creating TensorFlow device (<span class=\"pl-k\">/</span>gpu:<span class=\"pl-c1\">0</span>) <span class=\"pl-ii\">-&gt;</span> (device: <span class=\"pl-c1\">0</span>, name: <span class=\"pl-c1\">TITAN</span> X (Pascal), pci bus <span class=\"pl-c1\">id</span>: <span class=\"pl-c1\">0000</span>:<span class=\"pl-c1\">0<span class=\"pl-ii\">1</span></span>:<span class=\"pl-c1\">00.0</span>)\nOut[<span class=\"pl-c1\">3</span>]: array([<span class=\"pl-k\">-</span><span class=\"pl-c1\">3.5554738</span> , <span class=\"pl-k\">-</span><span class=\"pl-c1\">9.19613838</span>,  <span class=\"pl-c1\">0.99159908</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">4</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">4</span>]: array([  <span class=\"pl-c1\">3.23878694</span>,  <span class=\"pl-c1\">10.00256252</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.83450556</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">5</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">5</span>]: array([<span class=\"pl-k\">-</span><span class=\"pl-c1\">3.07549763</span>,  <span class=\"pl-c1\">2.88274646</span>,  <span class=\"pl-c1\">1.73206449</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">6</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">6</span>]: array([<span class=\"pl-k\">-</span><span class=\"pl-c1\">6.32968855</span>,  <span class=\"pl-c1\">5.16116142</span>,  <span class=\"pl-c1\">3.4088428</span> ], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">7</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">7</span>]: array([<span class=\"pl-k\">-</span><span class=\"pl-c1\">10.45146465</span>,   <span class=\"pl-c1\">8.00740719</span>,  <span class=\"pl-c1\">12.19320011</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">8</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">8</span>]: array([ <span class=\"pl-c1\">2.50515604</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.90315008</span>,  <span class=\"pl-c1\">8.30728722</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">9</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">9</span>]: array([ <span class=\"pl-c1\">1.11648369</span>,  <span class=\"pl-c1\">2.883286</span>  ,  <span class=\"pl-c1\">5.3753109</span> ], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">10</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">10</span>]: array([ <span class=\"pl-c1\">1.42068732</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.55020142</span>,  <span class=\"pl-c1\">7.90944004</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">11</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">11</span>]: array([<span class=\"pl-k\">-</span><span class=\"pl-c1\">2.47698998</span>,  <span class=\"pl-c1\">5.00640774</span>,  <span class=\"pl-c1\">9.55048275</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">12</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">12</span>]: array([<span class=\"pl-k\">-</span><span class=\"pl-c1\">2.72261739</span>,  <span class=\"pl-c1\">8.12374115</span>,  <span class=\"pl-c1\">6.6374836</span> ], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">13</span>]: dist.sample().eval()\nOut[<span class=\"pl-c1\">13</span>]: array([<span class=\"pl-k\">-</span><span class=\"pl-c1\">5.90653419</span>,  <span class=\"pl-c1\">2.76514864</span>,  <span class=\"pl-c1\">1.68261075</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n\nIn [<span class=\"pl-c1\">14</span>]: dist.sample().eval()\nSegmentation fault (core dumped)</pre></div>", "body_text": "I ran the following code and after calling sample().eval() several times (like 15 times), the program will crash.\nimport tensorflow as tf\nmu = [1, 2, 3.]\ndiag_stdev = [4, 5, 6.]\ndist = tf.contrib.distributions.MultivariateNormalDiag(mu, diag_stdev)\nsess = tf.InteractiveSession()\ndist.sample().eval()\ndist.sample().eval()\n...\nI don't know if this is a bug in memory management, just reporting it. I tried to run this short code several times, and the program all crashed after calling sample() several times.\nI am using TensorFlow 1.0.1, ubuntu 14.04, cuDNN 5.1. CUDA 8.0.\nI am running the code in ipython\n$ ipython\nPython 2.7.6 (default, Oct 26 2016, 20:30:19) \nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 5.1.0 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object', use 'object??' for extra details.\n\nIn [1]: import tensorflow as tf\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcublas.so.8.0 locally\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcudnn.so.5 locally\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcufft.so.8.0 locally\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcurand.so.8.0 locally\n\nIn [2]: tf.__version__\nOut[2]: '1.0.1'\n\nIn [3]: import tensorflow as tf\n   ...: mu = [1, 2, 3.]\n   ...: diag_stdev = [4, 5, 6.]\n   ...: dist = tf.contrib.distributions.MultivariateNormalDiag(mu, diag_stdev)\n   ...: sess = tf.InteractiveSession()\n   ...: dist.sample().eval()\n   ...: \nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:910] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: \nname: TITAN X (Pascal)\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.531\npciBusID 0000:01:00.0\nTotal memory: 11.90GiB\nFree memory: 11.18GiB\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 \nI tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y \nI tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:01:00.0)\nOut[3]: array([-3.5554738 , -9.19613838,  0.99159908], dtype=float32)\n\nIn [4]: dist.sample().eval()\nOut[4]: array([  3.23878694,  10.00256252,  -1.83450556], dtype=float32)\n\nIn [5]: dist.sample().eval()\nOut[5]: array([-3.07549763,  2.88274646,  1.73206449], dtype=float32)\n\nIn [6]: dist.sample().eval()\nOut[6]: array([-6.32968855,  5.16116142,  3.4088428 ], dtype=float32)\n\nIn [7]: dist.sample().eval()\nOut[7]: array([-10.45146465,   8.00740719,  12.19320011], dtype=float32)\n\nIn [8]: dist.sample().eval()\nOut[8]: array([ 2.50515604, -0.90315008,  8.30728722], dtype=float32)\n\nIn [9]: dist.sample().eval()\nOut[9]: array([ 1.11648369,  2.883286  ,  5.3753109 ], dtype=float32)\n\nIn [10]: dist.sample().eval()\nOut[10]: array([ 1.42068732, -1.55020142,  7.90944004], dtype=float32)\n\nIn [11]: dist.sample().eval()\nOut[11]: array([-2.47698998,  5.00640774,  9.55048275], dtype=float32)\n\nIn [12]: dist.sample().eval()\nOut[12]: array([-2.72261739,  8.12374115,  6.6374836 ], dtype=float32)\n\nIn [13]: dist.sample().eval()\nOut[13]: array([-5.90653419,  2.76514864,  1.68261075], dtype=float32)\n\nIn [14]: dist.sample().eval()\nSegmentation fault (core dumped)", "body": "I ran the following code and after calling `sample().eval()` several times (like 15 times), the program will crash.\r\n```python\r\nimport tensorflow as tf\r\nmu = [1, 2, 3.]\r\ndiag_stdev = [4, 5, 6.]\r\ndist = tf.contrib.distributions.MultivariateNormalDiag(mu, diag_stdev)\r\nsess = tf.InteractiveSession()\r\ndist.sample().eval()\r\ndist.sample().eval()\r\n...\r\n```\r\nI don't know if this is a bug in memory management, just reporting it. I tried to run this short code several times, and the program all crashed after calling `sample()` several times.\r\n\r\nI am using TensorFlow 1.0.1, ubuntu 14.04, cuDNN 5.1. CUDA 8.0.\r\nI am running the code in ipython\r\n```python\r\n$ ipython\r\nPython 2.7.6 (default, Oct 26 2016, 20:30:19) \r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 5.1.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython's features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python's own help system.\r\nobject?   -> Details about 'object', use 'object??' for extra details.\r\n\r\nIn [1]: import tensorflow as tf\r\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcublas.so.8.0 locally\r\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcudnn.so.5 locally\r\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcufft.so.8.0 locally\r\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcuda.so.1 locally\r\nI tensorflow/stream_executor/dso_loader.cc:135] successfully opened CUDA library libcurand.so.8.0 locally\r\n\r\nIn [2]: tf.__version__\r\nOut[2]: '1.0.1'\r\n\r\nIn [3]: import tensorflow as tf\r\n   ...: mu = [1, 2, 3.]\r\n   ...: diag_stdev = [4, 5, 6.]\r\n   ...: dist = tf.contrib.distributions.MultivariateNormalDiag(mu, diag_stdev)\r\n   ...: sess = tf.InteractiveSession()\r\n   ...: dist.sample().eval()\r\n   ...: \r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\r\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:910] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: \r\nname: TITAN X (Pascal)\r\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.531\r\npciBusID 0000:01:00.0\r\nTotal memory: 11.90GiB\r\nFree memory: 11.18GiB\r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 \r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y \r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:01:00.0)\r\nOut[3]: array([-3.5554738 , -9.19613838,  0.99159908], dtype=float32)\r\n\r\nIn [4]: dist.sample().eval()\r\nOut[4]: array([  3.23878694,  10.00256252,  -1.83450556], dtype=float32)\r\n\r\nIn [5]: dist.sample().eval()\r\nOut[5]: array([-3.07549763,  2.88274646,  1.73206449], dtype=float32)\r\n\r\nIn [6]: dist.sample().eval()\r\nOut[6]: array([-6.32968855,  5.16116142,  3.4088428 ], dtype=float32)\r\n\r\nIn [7]: dist.sample().eval()\r\nOut[7]: array([-10.45146465,   8.00740719,  12.19320011], dtype=float32)\r\n\r\nIn [8]: dist.sample().eval()\r\nOut[8]: array([ 2.50515604, -0.90315008,  8.30728722], dtype=float32)\r\n\r\nIn [9]: dist.sample().eval()\r\nOut[9]: array([ 1.11648369,  2.883286  ,  5.3753109 ], dtype=float32)\r\n\r\nIn [10]: dist.sample().eval()\r\nOut[10]: array([ 1.42068732, -1.55020142,  7.90944004], dtype=float32)\r\n\r\nIn [11]: dist.sample().eval()\r\nOut[11]: array([-2.47698998,  5.00640774,  9.55048275], dtype=float32)\r\n\r\nIn [12]: dist.sample().eval()\r\nOut[12]: array([-2.72261739,  8.12374115,  6.6374836 ], dtype=float32)\r\n\r\nIn [13]: dist.sample().eval()\r\nOut[13]: array([-5.90653419,  2.76514864,  1.68261075], dtype=float32)\r\n\r\nIn [14]: dist.sample().eval()\r\nSegmentation fault (core dumped)\r\n```"}