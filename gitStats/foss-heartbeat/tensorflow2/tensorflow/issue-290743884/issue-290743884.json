{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16316", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16316/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16316/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16316/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16316", "id": 290743884, "node_id": "MDU6SXNzdWUyOTA3NDM4ODQ=", "number": 16316, "title": "Lack of clarity in tf.while_loop documentation", "user": {"login": "mholzel", "id": 7227349, "node_id": "MDQ6VXNlcjcyMjczNDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7227349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mholzel", "html_url": "https://github.com/mholzel", "followers_url": "https://api.github.com/users/mholzel/followers", "following_url": "https://api.github.com/users/mholzel/following{/other_user}", "gists_url": "https://api.github.com/users/mholzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mholzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mholzel/subscriptions", "organizations_url": "https://api.github.com/users/mholzel/orgs", "repos_url": "https://api.github.com/users/mholzel/repos", "events_url": "https://api.github.com/users/mholzel/events{/privacy}", "received_events_url": "https://api.github.com/users/mholzel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 284443156, "node_id": "MDU6TGFiZWwyODQ0NDMxNTY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:docs", "name": "type:docs", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-23T08:07:11Z", "updated_at": "2018-01-27T00:00:02Z", "closed_at": "2018-01-27T00:00:02Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I believe that the documentation for tf.while_loop is lacking usage clarity, and actually provides contradictory statements.</p>\n<p>Specifically, it seems that many people are using the tf.while_loop as a \"for loop\" (<a href=\"https://stackoverflow.com/questions/35330117/how-can-i-run-a-loop-with-a-tensor-as-its-range-in-tensorflow\" rel=\"nofollow\">see stackoverflow</a>). However, the <a href=\"https://www.tensorflow.org/versions/r0.12/api_docs/python/control_flow_ops/control_flow_operations#while_loop\" rel=\"nofollow\">tf.while_loop</a> docs state:</p>\n<blockquote>\n<p>For correct programs, while_loop should return the same result for any parallel_iterations &gt; 0.</p>\n</blockquote>\n<p>A loop counter inside of the \"while loop\" body, seems to violate this constraint despite the fact that this is given as an example usage in the docs:</p>\n<blockquote>\n<p>python i = tf.constant(0) c = lambda i: tf.less(i, 10) b = lambda i: tf.add(i, 1) r = tf.while_loop(c, b, [i])</p>\n</blockquote>\n<p>So it seems that there are two bad outcomes here:</p>\n<ol>\n<li>\n<p>If this is indeed the canonical way of creating a \"for loop\", then the example explicitly creates a dependency between iterations, meaning that the \"while loop\" iterations cannot be run in parallel.</p>\n</li>\n<li>\n<p>The example is incorrect?</p>\n</li>\n</ol>\n<p>It seems like the while_loop docs should have an example which better illustrates how to use it as a \"for loop\", if such usage is indeed intended, or a warning on the implications of the provided example.</p>", "body_text": "I believe that the documentation for tf.while_loop is lacking usage clarity, and actually provides contradictory statements.\nSpecifically, it seems that many people are using the tf.while_loop as a \"for loop\" (see stackoverflow). However, the tf.while_loop docs state:\n\nFor correct programs, while_loop should return the same result for any parallel_iterations > 0.\n\nA loop counter inside of the \"while loop\" body, seems to violate this constraint despite the fact that this is given as an example usage in the docs:\n\npython i = tf.constant(0) c = lambda i: tf.less(i, 10) b = lambda i: tf.add(i, 1) r = tf.while_loop(c, b, [i])\n\nSo it seems that there are two bad outcomes here:\n\n\nIf this is indeed the canonical way of creating a \"for loop\", then the example explicitly creates a dependency between iterations, meaning that the \"while loop\" iterations cannot be run in parallel.\n\n\nThe example is incorrect?\n\n\nIt seems like the while_loop docs should have an example which better illustrates how to use it as a \"for loop\", if such usage is indeed intended, or a warning on the implications of the provided example.", "body": "I believe that the documentation for tf.while_loop is lacking usage clarity, and actually provides contradictory statements. \r\n\r\nSpecifically, it seems that many people are using the tf.while_loop as a \"for loop\" ([see stackoverflow](https://stackoverflow.com/questions/35330117/how-can-i-run-a-loop-with-a-tensor-as-its-range-in-tensorflow)). However, the [tf.while_loop](https://www.tensorflow.org/versions/r0.12/api_docs/python/control_flow_ops/control_flow_operations#while_loop) docs state:\r\n\r\n> For correct programs, while_loop should return the same result for any parallel_iterations > 0.\r\n\r\nA loop counter inside of the \"while loop\" body, seems to violate this constraint despite the fact that this is given as an example usage in the docs:\r\n\r\n> python i = tf.constant(0) c = lambda i: tf.less(i, 10) b = lambda i: tf.add(i, 1) r = tf.while_loop(c, b, [i])\r\n\r\nSo it seems that there are two bad outcomes here:\r\n\r\n1. If this is indeed the canonical way of creating a \"for loop\", then the example explicitly creates a dependency between iterations, meaning that the \"while loop\" iterations cannot be run in parallel. \r\n\r\n1. The example is incorrect? \r\n\r\nIt seems like the while_loop docs should have an example which better illustrates how to use it as a \"for loop\", if such usage is indeed intended, or a warning on the implications of the provided example.  \r\n"}