{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9069", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9069/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9069/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9069/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9069", "id": 220417980, "node_id": "MDU6SXNzdWUyMjA0MTc5ODA=", "number": 9069, "title": "Does Tensorflow support learning of embeddings for output classes in multi-class classification? ", "user": {"login": "techscientist", "id": 7275205, "node_id": "MDQ6VXNlcjcyNzUyMDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7275205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/techscientist", "html_url": "https://github.com/techscientist", "followers_url": "https://api.github.com/users/techscientist/followers", "following_url": "https://api.github.com/users/techscientist/following{/other_user}", "gists_url": "https://api.github.com/users/techscientist/gists{/gist_id}", "starred_url": "https://api.github.com/users/techscientist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/techscientist/subscriptions", "organizations_url": "https://api.github.com/users/techscientist/orgs", "repos_url": "https://api.github.com/users/techscientist/repos", "events_url": "https://api.github.com/users/techscientist/events{/privacy}", "received_events_url": "https://api.github.com/users/techscientist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-08T18:27:23Z", "updated_at": "2017-04-08T20:07:11Z", "closed_at": "2017-04-08T20:07:11Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>I came across this research paper released by YouTube, on how they use deep learning neural networks for recommendations. It's located here: <a href=\"https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45530.pdf\" rel=\"nofollow\">https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45530.pdf</a></p>\n<p>In the paper, the candidate generation neural network model outputs a softmax with 256 dimensions, which acts as an \"output embedding\" of each of the 1M video classes.</p>\n<p>How is this possible to implement in Tensorflow, for example? Isn't softmax supposed to be only 1-Dimensional. If the model outputs an \"embedding\" like this, as they say it does, how would the training data's labels be formatted as 256-dimensional? In other words, how do they compute the 256-dimensional vector for each of the videos in their training dataset?</p>\n<p>Also, is it possible to create an output embedding layer when the labels in the training dataset are one-hot encodings of a particular class. In other words, can the output layer automatically learn embeddings for the output class?</p>\n<p>Thank you so much for your time and help, guys! I have also asked this question on StackOverflow here: <a href=\"http://stackoverflow.com/questions/43297567/how-to-create-a-multi-dimensional-softmax-output-in-tensorflow\" rel=\"nofollow\">http://stackoverflow.com/questions/43297567/how-to-create-a-multi-dimensional-softmax-output-in-tensorflow</a></p>\n<p>Tensorflow details: Windows, version 1.01, binary (via pip)</p>", "body_text": "Hi,\nI came across this research paper released by YouTube, on how they use deep learning neural networks for recommendations. It's located here: https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45530.pdf\nIn the paper, the candidate generation neural network model outputs a softmax with 256 dimensions, which acts as an \"output embedding\" of each of the 1M video classes.\nHow is this possible to implement in Tensorflow, for example? Isn't softmax supposed to be only 1-Dimensional. If the model outputs an \"embedding\" like this, as they say it does, how would the training data's labels be formatted as 256-dimensional? In other words, how do they compute the 256-dimensional vector for each of the videos in their training dataset?\nAlso, is it possible to create an output embedding layer when the labels in the training dataset are one-hot encodings of a particular class. In other words, can the output layer automatically learn embeddings for the output class?\nThank you so much for your time and help, guys! I have also asked this question on StackOverflow here: http://stackoverflow.com/questions/43297567/how-to-create-a-multi-dimensional-softmax-output-in-tensorflow\nTensorflow details: Windows, version 1.01, binary (via pip)", "body": "Hi,\r\n\r\nI came across this research paper released by YouTube, on how they use deep learning neural networks for recommendations. It's located here: https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45530.pdf\r\n\r\nIn the paper, the candidate generation neural network model outputs a softmax with 256 dimensions, which acts as an \"output embedding\" of each of the 1M video classes.\r\n\r\nHow is this possible to implement in Tensorflow, for example? Isn't softmax supposed to be only 1-Dimensional. If the model outputs an \"embedding\" like this, as they say it does, how would the training data's labels be formatted as 256-dimensional? In other words, how do they compute the 256-dimensional vector for each of the videos in their training dataset?\r\n\r\nAlso, is it possible to create an output embedding layer when the labels in the training dataset are one-hot encodings of a particular class. In other words, can the output layer automatically learn embeddings for the output class?\r\n\r\nThank you so much for your time and help, guys! I have also asked this question on StackOverflow here: http://stackoverflow.com/questions/43297567/how-to-create-a-multi-dimensional-softmax-output-in-tensorflow\r\n\r\nTensorflow details: Windows, version 1.01, binary (via pip)"}