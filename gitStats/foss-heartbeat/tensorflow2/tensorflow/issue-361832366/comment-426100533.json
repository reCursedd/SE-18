{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/426100533", "html_url": "https://github.com/tensorflow/tensorflow/pull/22386#issuecomment-426100533", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22386", "id": 426100533, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjEwMDUzMw==", "user": {"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-01T23:49:03Z", "updated_at": "2018-10-01T23:49:03Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a> re: \"If I were to add XLA support for stateless random uniform ints, what's the right set of types? Also: should I extend the existing float XLA ops to do bfloat16?\"</p>\n<p>In general, the TF -&gt; XLA \"kernels\" are written to be as type-generic as possible. These ops (since they do bit manipulations) are some of the few exceptions that actually require some amount of type-specific code.</p>\n<p>In general, the right thing to do would be to implement them at all types where they make sense; if some backend does not support a particular type then that case will simply not be triggered by that backend. Unlike the TF core kernels, since the TF/XLA kernels are doing JIT compilation, typically you still have a single \"kernel\" for all types, with a switch statement choosing between different implementations. So it's just a question of which cases you stick in that switch statement.</p>\n<p>Yes, it makes perfect sense to implement bfloat16 \u2014 I implemented only float32 out of expediency, not because there's any reason the ops don't make sense for other types. I'm happy to give further pointers or review a follow-up PR implementing the XLA variants of these ops.</p>", "body_text": "@girving re: \"If I were to add XLA support for stateless random uniform ints, what's the right set of types? Also: should I extend the existing float XLA ops to do bfloat16?\"\nIn general, the TF -> XLA \"kernels\" are written to be as type-generic as possible. These ops (since they do bit manipulations) are some of the few exceptions that actually require some amount of type-specific code.\nIn general, the right thing to do would be to implement them at all types where they make sense; if some backend does not support a particular type then that case will simply not be triggered by that backend. Unlike the TF core kernels, since the TF/XLA kernels are doing JIT compilation, typically you still have a single \"kernel\" for all types, with a switch statement choosing between different implementations. So it's just a question of which cases you stick in that switch statement.\nYes, it makes perfect sense to implement bfloat16 \u2014 I implemented only float32 out of expediency, not because there's any reason the ops don't make sense for other types. I'm happy to give further pointers or review a follow-up PR implementing the XLA variants of these ops.", "body": "@girving re: \"If I were to add XLA support for stateless random uniform ints, what's the right set of types? Also: should I extend the existing float XLA ops to do bfloat16?\"\r\n\r\nIn general, the TF -> XLA \"kernels\" are written to be as type-generic as possible. These ops (since they do bit manipulations) are some of the few exceptions that actually require some amount of type-specific code.\r\n\r\nIn general, the right thing to do would be to implement them at all types where they make sense; if some backend does not support a particular type then that case will simply not be triggered by that backend. Unlike the TF core kernels, since the TF/XLA kernels are doing JIT compilation, typically you still have a single \"kernel\" for all types, with a switch statement choosing between different implementations. So it's just a question of which cases you stick in that switch statement.\r\n\r\nYes, it makes perfect sense to implement bfloat16 \u2014 I implemented only float32 out of expediency, not because there's any reason the ops don't make sense for other types. I'm happy to give further pointers or review a follow-up PR implementing the XLA variants of these ops."}