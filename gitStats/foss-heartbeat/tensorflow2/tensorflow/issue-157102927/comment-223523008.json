{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/223523008", "html_url": "https://github.com/tensorflow/tensorflow/issues/2525#issuecomment-223523008", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2525", "id": 223523008, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzUyMzAwOA==", "user": {"login": "3XX0", "id": 3028125, "node_id": "MDQ6VXNlcjMwMjgxMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3028125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3XX0", "html_url": "https://github.com/3XX0", "followers_url": "https://api.github.com/users/3XX0/followers", "following_url": "https://api.github.com/users/3XX0/following{/other_user}", "gists_url": "https://api.github.com/users/3XX0/gists{/gist_id}", "starred_url": "https://api.github.com/users/3XX0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3XX0/subscriptions", "organizations_url": "https://api.github.com/users/3XX0/orgs", "repos_url": "https://api.github.com/users/3XX0/repos", "events_url": "https://api.github.com/users/3XX0/events{/privacy}", "received_events_url": "https://api.github.com/users/3XX0/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-03T08:38:07Z", "updated_at": "2016-06-03T08:38:07Z", "author_association": "NONE", "body_html": "<p>Symlinks like those are only useful for development purposes and we actually include them in our <code>devel</code> images (e.g. <code>cuda:7.5-cudnn4-devel</code>). When compiling, the linker will look up the soname of the library pointed by the symlink (in this case it will be <code>libcudnn.so.4</code>) and use it to build the binary dependencies.</p>\n<p>The <a href=\"https://en.wikipedia.org/wiki/Soname\" rel=\"nofollow\">soname</a> of a library defines its ABI compatibility, if it changes it means the ABI broke. With <code>dlopen</code> you are asking the dynamic linking loader to load a specific file. If you use the symlink, you are effectively giving up on enforcing a specific ABI. This can lead to undefined behaviors if the symlink points to something that you don't expect.</p>\n<p>Now the cuDNN versionning scheme is confusing and they broke the ABI every single time (hence the bump in the soname). I raised the issue internally a while ago and they said they will probably provide backward compatibility in the future.<br>\nSo for example, we might see cuDNN 4.5 with the same soname (<code>libcudnn.so.4</code>).</p>\n<p>Using the constant is a good idea, hopefully <code>CUDNN_MAJOR</code> is akin to the soname and will only change if the ABI breaks (I will warn the cuDNN team about that). For CUDA, I think it is safe to just hardcode \"1\" because libcuda has always provided backward compatibilty.</p>", "body_text": "Symlinks like those are only useful for development purposes and we actually include them in our devel images (e.g. cuda:7.5-cudnn4-devel). When compiling, the linker will look up the soname of the library pointed by the symlink (in this case it will be libcudnn.so.4) and use it to build the binary dependencies.\nThe soname of a library defines its ABI compatibility, if it changes it means the ABI broke. With dlopen you are asking the dynamic linking loader to load a specific file. If you use the symlink, you are effectively giving up on enforcing a specific ABI. This can lead to undefined behaviors if the symlink points to something that you don't expect.\nNow the cuDNN versionning scheme is confusing and they broke the ABI every single time (hence the bump in the soname). I raised the issue internally a while ago and they said they will probably provide backward compatibility in the future.\nSo for example, we might see cuDNN 4.5 with the same soname (libcudnn.so.4).\nUsing the constant is a good idea, hopefully CUDNN_MAJOR is akin to the soname and will only change if the ABI breaks (I will warn the cuDNN team about that). For CUDA, I think it is safe to just hardcode \"1\" because libcuda has always provided backward compatibilty.", "body": "Symlinks like those are only useful for development purposes and we actually include them in our `devel` images (e.g. `cuda:7.5-cudnn4-devel`). When compiling, the linker will look up the soname of the library pointed by the symlink (in this case it will be `libcudnn.so.4`) and use it to build the binary dependencies.\n\nThe [soname](https://en.wikipedia.org/wiki/Soname) of a library defines its ABI compatibility, if it changes it means the ABI broke. With `dlopen` you are asking the dynamic linking loader to load a specific file. If you use the symlink, you are effectively giving up on enforcing a specific ABI. This can lead to undefined behaviors if the symlink points to something that you don't expect.\n\nNow the cuDNN versionning scheme is confusing and they broke the ABI every single time (hence the bump in the soname). I raised the issue internally a while ago and they said they will probably provide backward compatibility in the future.\nSo for example, we might see cuDNN 4.5 with the same soname (`libcudnn.so.4`).\n\nUsing the constant is a good idea, hopefully `CUDNN_MAJOR` is akin to the soname and will only change if the ABI breaks (I will warn the cuDNN team about that). For CUDA, I think it is safe to just hardcode \"1\" because libcuda has always provided backward compatibilty.\n"}