{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2834", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2834/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2834/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2834/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2834", "id": 160000891, "node_id": "MDU6SXNzdWUxNjAwMDA4OTE=", "number": 2834, "title": "Defining shape of 1-D variable-size placeholder with tuple doesn't enforce the actual shape", "user": {"login": "erickrf", "id": 294483, "node_id": "MDQ6VXNlcjI5NDQ4Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/294483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickrf", "html_url": "https://github.com/erickrf", "followers_url": "https://api.github.com/users/erickrf/followers", "following_url": "https://api.github.com/users/erickrf/following{/other_user}", "gists_url": "https://api.github.com/users/erickrf/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickrf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickrf/subscriptions", "organizations_url": "https://api.github.com/users/erickrf/orgs", "repos_url": "https://api.github.com/users/erickrf/repos", "events_url": "https://api.github.com/users/erickrf/events{/privacy}", "received_events_url": "https://api.github.com/users/erickrf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-13T17:16:04Z", "updated_at": "2016-06-13T20:37:23Z", "closed_at": "2016-06-13T20:37:23Z", "author_association": "NONE", "body_html": "<p>I noticed that defining a 1-D batch-sized placeholder with a tuple instead of a list doesn't enforce its shape:</p>\n<pre><code>ph = tf.placeholder(tf.int32, (None))\nop = 2 * ph\nx = np.random.randint(0, 9, (5, 5))\nsess.run(op, feed_dict={ph: x})\n</code></pre>\n<p>This outputs:</p>\n<pre><code>array([[ 0, 10, 10, 12,  4],\n       [12, 12, 16,  2,  2],\n       [ 4, 14, 10, 14,  6],\n       [ 6,  8,  2, 10, 10],\n       [ 4, 14,  6,  6,  4]], dtype=int32)\n</code></pre>\n<p>While with <code>[None]</code>:</p>\n<pre><code>ph = tf.placeholder(tf.int32, [None])\nop = 2 * ph\nsess.run(op, feed_dict={ph: x})\n</code></pre>\n<p>results in <code>ValueError: Cannot feed value of shape (5, 5) for Tensor u'Placeholder_5:0', which has shape '(?,)'</code>, as I would expect.</p>\n<p>Is the behavior with the tuple intended to work like this? I really don't think it's a good idea (I spent a few hours tracking a bug in my code caused by feeding a 2-D array to a supposedly 1-D placeholder). Anyway, the documentation on placeholders says the following about the argument <code>shape</code>: <em>The shape of the tensor to be fed (optional). If the shape is not specified, you can feed a tensor of any shape</em>.</p>", "body_text": "I noticed that defining a 1-D batch-sized placeholder with a tuple instead of a list doesn't enforce its shape:\nph = tf.placeholder(tf.int32, (None))\nop = 2 * ph\nx = np.random.randint(0, 9, (5, 5))\nsess.run(op, feed_dict={ph: x})\n\nThis outputs:\narray([[ 0, 10, 10, 12,  4],\n       [12, 12, 16,  2,  2],\n       [ 4, 14, 10, 14,  6],\n       [ 6,  8,  2, 10, 10],\n       [ 4, 14,  6,  6,  4]], dtype=int32)\n\nWhile with [None]:\nph = tf.placeholder(tf.int32, [None])\nop = 2 * ph\nsess.run(op, feed_dict={ph: x})\n\nresults in ValueError: Cannot feed value of shape (5, 5) for Tensor u'Placeholder_5:0', which has shape '(?,)', as I would expect.\nIs the behavior with the tuple intended to work like this? I really don't think it's a good idea (I spent a few hours tracking a bug in my code caused by feeding a 2-D array to a supposedly 1-D placeholder). Anyway, the documentation on placeholders says the following about the argument shape: The shape of the tensor to be fed (optional). If the shape is not specified, you can feed a tensor of any shape.", "body": "I noticed that defining a 1-D batch-sized placeholder with a tuple instead of a list doesn't enforce its shape:\n\n```\nph = tf.placeholder(tf.int32, (None))\nop = 2 * ph\nx = np.random.randint(0, 9, (5, 5))\nsess.run(op, feed_dict={ph: x})\n```\n\nThis outputs:\n\n```\narray([[ 0, 10, 10, 12,  4],\n       [12, 12, 16,  2,  2],\n       [ 4, 14, 10, 14,  6],\n       [ 6,  8,  2, 10, 10],\n       [ 4, 14,  6,  6,  4]], dtype=int32)\n```\n\nWhile with `[None]`:\n\n```\nph = tf.placeholder(tf.int32, [None])\nop = 2 * ph\nsess.run(op, feed_dict={ph: x})\n```\n\nresults in `ValueError: Cannot feed value of shape (5, 5) for Tensor u'Placeholder_5:0', which has shape '(?,)'`, as I would expect.\n\nIs the behavior with the tuple intended to work like this? I really don't think it's a good idea (I spent a few hours tracking a bug in my code caused by feeding a 2-D array to a supposedly 1-D placeholder). Anyway, the documentation on placeholders says the following about the argument `shape`: _The shape of the tensor to be fed (optional). If the shape is not specified, you can feed a tensor of any shape_.\n"}