{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/225700689", "html_url": "https://github.com/tensorflow/tensorflow/issues/2834#issuecomment-225700689", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2834", "id": 225700689, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTcwMDY4OQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-13T20:37:23Z", "updated_at": "2016-06-13T20:37:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The problem is that <code>(None)</code> evaluates to <code>None</code>, and not a <code>tuple</code> containing a single element that is <code>None</code>. To define a single element tuple, you need to type <code>(None,)</code>.</p>\n<p>This is due to Python's syntax, not the placeholder implementation:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span> <span class=\"pl-c1\">type</span>(<span class=\"pl-c1\">None</span>)\n<span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">type</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>NoneType<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span> <span class=\"pl-c1\">type</span>((<span class=\"pl-c1\">None</span>))\n<span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">type</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>NoneType<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span> <span class=\"pl-c1\">type</span>((<span class=\"pl-c1\">None</span>,))\n<span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">type</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>tuple<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span> <span class=\"pl-c1\">type</span>([<span class=\"pl-c1\">None</span>])\n<span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">type</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>list<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span> <span class=\"pl-c1\">type</span>([<span class=\"pl-c1\">None</span>,])\n<span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">type</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>list<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span></pre></div>", "body_text": "The problem is that (None) evaluates to None, and not a tuple containing a single element that is None. To define a single element tuple, you need to type (None,).\nThis is due to Python's syntax, not the placeholder implementation:\n>>> print type(None)\n<type 'NoneType'>\n>>> print type((None))\n<type 'NoneType'>\n>>> print type((None,))\n<type 'tuple'>\n>>> print type([None])\n<type 'list'>\n>>> print type([None,])\n<type 'list'>", "body": "The problem is that `(None)` evaluates to `None`, and not a `tuple` containing a single element that is `None`. To define a single element tuple, you need to type `(None,)`. \n\nThis is due to Python's syntax, not the placeholder implementation:\n\n``` python\n>>> print type(None)\n<type 'NoneType'>\n>>> print type((None))\n<type 'NoneType'>\n>>> print type((None,))\n<type 'tuple'>\n>>> print type([None])\n<type 'list'>\n>>> print type([None,])\n<type 'list'>\n```\n"}