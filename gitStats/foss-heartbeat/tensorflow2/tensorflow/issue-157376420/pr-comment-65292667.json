{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/65292667", "pull_request_review_id": null, "id": 65292667, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjkyNjY3", "diff_hunk": "@@ -1428,4 +1428,140 @@ REGISTER_KERNELS(GPU, double);\n #endif\n #undef REGISTER_KERNELS\n \n+\n+// Note, this op works on cpu only.\n+template <typename T, typename Tindex>\n+class SparseApplyRMSPropOp : public OpKernel {\n+ public:\n+  explicit SparseApplyRMSPropOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n+    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"use_locking\", &use_exclusive_lock_));\n+  }\n+\n+  void Compute(OpKernelContext* ctx) override NO_THREAD_SAFETY_ANALYSIS {\n+    auto locks = MaybeLockMutexesInOrder(ctx, use_exclusive_lock_, {0, 1, 2});\n+\n+    Tensor var = ctx->mutable_input(0, use_exclusive_lock_);\n+    Tensor ms = ctx->mutable_input(1, use_exclusive_lock_);\n+    Tensor mom = ctx->mutable_input(2, use_exclusive_lock_);\n+\n+    OP_REQUIRES(\n+        ctx, var.IsInitialized(),\n+        errors::FailedPrecondition(\n+            \"Attempting to use uninitialized variables: \", def().input(0)));\n+    OP_REQUIRES(\n+        ctx, ms.IsInitialized(),\n+        errors::FailedPrecondition(\n+            \"Attempting to use uninitialized variables: \", def().input(1)));\n+    OP_REQUIRES(\n+        ctx, mom.IsInitialized(),\n+        errors::FailedPrecondition(\n+            \"Attempting to use uninitialized variables: \", def().input(2)));\n+\n+    const Tensor& lr = ctx->input(3);\n+    const Tensor& rho = ctx->input(4);\n+    const Tensor& momentum = ctx->input(5);\n+    const Tensor& epsilon = ctx->input(6);\n+    const Tensor& grad = ctx->input(7);\n+    const Tensor& indices = ctx->input(8);\n+\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(lr.shape()),\n+                errors::InvalidArgument(\"lr is not a scalar: \",\n+                                        lr.shape().DebugString()));\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(rho.shape()),\n+                errors::InvalidArgument(\"rho is not a scalar: \",\n+                                        rho.shape().DebugString()));\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(momentum.shape()),\n+                errors::InvalidArgument(\"momentum is not a scalar: \",\n+                                        momentum.shape().DebugString()));\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(epsilon.shape()),\n+                errors::InvalidArgument(\"epsilon is not a scalar: \",\n+                                        epsilon.shape().DebugString()));\n+\n+    OP_REQUIRES(ctx, var.shape().IsSameSize(ms.shape()),\n+                errors::InvalidArgument(\"var and ms do not have the same shape\",\n+                                        var.shape().DebugString(), \" \",\n+                                        ms.shape().DebugString()));\n+\n+    OP_REQUIRES(ctx, var.shape().IsSameSize(mom.shape()),\n+                errors::InvalidArgument(\n+                    \"var and mom do not have the same shape\",\n+                    var.shape().DebugString(), \" \", mom.shape().DebugString()));\n+\n+    OP_REQUIRES(\n+        ctx, var.shape().IsSameSize(grad.shape()),\n+        errors::InvalidArgument(\"var and grad do not have the same shape\",\n+                                var.shape().DebugString(), \" \",\n+                                grad.shape().DebugString()));\n+\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(indices.shape()),\n+                errors::InvalidArgument(\"indices must be one-dimensional\"));\n+\n+    const Tindex N = indices.dim_size(0);\n+    OP_REQUIRES(\n+        ctx, grad.dim_size(0) == N,\n+        errors::InvalidArgument(\n+            \"grad must be the same size as indices in the first dimension.\"));\n+\n+    if (N > 0) {\n+      const Tindex first_dim_size = var.dim_size(0);\n+      // Validate all the indices are in range\n+      auto indices_vec = indices.vec<Tindex>();\n+      for (Tindex i = 0; i < N; i++) {\n+        const Tindex index = indices_vec(i);\n+        OP_REQUIRES(ctx, index >= 0 && index < first_dim_size,\n+                    errors::InvalidArgument(\n+                        strings::StrCat(\"Index \", index, \" at offset \", i,\n+                                        \" in indices is out of range\")));\n+      }\n+\n+      auto var_flat = var.flat_outer_dims<T>();\n+      auto ms_flat = ms.flat_outer_dims<T>();\n+      auto mom_flat = mom.flat_outer_dims<T>();\n+      auto grad_flat = grad.flat_outer_dims<T>();\n+      const T lr_scalar = lr.scalar<T>()();\n+      const T rho_scalar = rho.scalar<T>()();\n+      const T epsilon_scalar = epsilon.scalar<T>()();\n+      const T momentum_scalar = momentum.scalar<T>()();\n+\n+      for (Tindex i = 0; i < N; i++) {\n+\tconst Tindex index = indices_vec(i);", "path": "tensorflow/core/kernels/training_ops.cc", "position": null, "original_position": 100, "commit_id": "44203c4a072cbe5fa2dcda69b3c6541db188b987", "original_commit_id": "3327593ab465c1a8e25e261374a28afb1358d39e", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "can you run clang-format (style google) on this file to fix a lot of the alignment issues in this file?\n\n(rather, just on the portion of this file that you've added).\n", "created_at": "2016-06-01T02:04:43Z", "updated_at": "2016-06-08T04:24:07Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2564#discussion_r65292667", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2564", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/65292667"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2564#discussion_r65292667"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2564"}}, "body_html": "<p>can you run clang-format (style google) on this file to fix a lot of the alignment issues in this file?</p>\n<p>(rather, just on the portion of this file that you've added).</p>", "body_text": "can you run clang-format (style google) on this file to fix a lot of the alignment issues in this file?\n(rather, just on the portion of this file that you've added)."}