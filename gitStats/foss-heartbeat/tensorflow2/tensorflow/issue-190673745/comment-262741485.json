{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/262741485", "html_url": "https://github.com/tensorflow/tensorflow/issues/5745#issuecomment-262741485", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5745", "id": 262741485, "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mjc0MTQ4NQ==", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-24T10:23:34Z", "updated_at": "2016-11-24T10:23:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ok.  I can see that you've already considered this.  There is code for doing what I would like, but it is failing to activate due to the simplicity of this 'IsGeneratorNode' function.  There is a comment that describes the solution already.  I will see about producing a pull request that solves this 'TODO'</p>\n<pre><code>// TODO(vrv): Currently this handles only nodes with one output, but\n// this could be extended to handle the case where a node has many\n// outputs that are connected to nodes in the same colocation group.\nbool IsGeneratorNode(const Node* node) {\n  return node-&gt;num_inputs() == 0 &amp;&amp; node-&gt;num_outputs() == 1 &amp;&amp;\n         node-&gt;out_edges().size() == 1 &amp;&amp; !IsRefType(node-&gt;output_type(0));\n}\n</code></pre>", "body_text": "Ok.  I can see that you've already considered this.  There is code for doing what I would like, but it is failing to activate due to the simplicity of this 'IsGeneratorNode' function.  There is a comment that describes the solution already.  I will see about producing a pull request that solves this 'TODO'\n// TODO(vrv): Currently this handles only nodes with one output, but\n// this could be extended to handle the case where a node has many\n// outputs that are connected to nodes in the same colocation group.\nbool IsGeneratorNode(const Node* node) {\n  return node->num_inputs() == 0 && node->num_outputs() == 1 &&\n         node->out_edges().size() == 1 && !IsRefType(node->output_type(0));\n}", "body": "Ok.  I can see that you've already considered this.  There is code for doing what I would like, but it is failing to activate due to the simplicity of this 'IsGeneratorNode' function.  There is a comment that describes the solution already.  I will see about producing a pull request that solves this 'TODO'\r\n\r\n```\r\n// TODO(vrv): Currently this handles only nodes with one output, but\r\n// this could be extended to handle the case where a node has many\r\n// outputs that are connected to nodes in the same colocation group.\r\nbool IsGeneratorNode(const Node* node) {\r\n  return node->num_inputs() == 0 && node->num_outputs() == 1 &&\r\n         node->out_edges().size() == 1 && !IsRefType(node->output_type(0));\r\n}\r\n```"}