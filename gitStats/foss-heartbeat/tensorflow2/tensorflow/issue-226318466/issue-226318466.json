{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9666", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9666/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9666/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9666/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/9666", "id": 226318466, "node_id": "MDExOlB1bGxSZXF1ZXN0MTE5MDAwNDY2", "number": 9666, "title": "Allows direct builds from a Visual Studio solution & Enables Debug builds", "user": {"login": "markslwong", "id": 704814, "node_id": "MDQ6VXNlcjcwNDgxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/704814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markslwong", "html_url": "https://github.com/markslwong", "followers_url": "https://api.github.com/users/markslwong/followers", "following_url": "https://api.github.com/users/markslwong/following{/other_user}", "gists_url": "https://api.github.com/users/markslwong/gists{/gist_id}", "starred_url": "https://api.github.com/users/markslwong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markslwong/subscriptions", "organizations_url": "https://api.github.com/users/markslwong/orgs", "repos_url": "https://api.github.com/users/markslwong/repos", "events_url": "https://api.github.com/users/markslwong/events{/privacy}", "received_events_url": "https://api.github.com/users/markslwong/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-04T15:25:05Z", "updated_at": "2017-05-15T22:24:05Z", "closed_at": "2017-05-15T22:24:04Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9666", "html_url": "https://github.com/tensorflow/tensorflow/pull/9666", "diff_url": "https://github.com/tensorflow/tensorflow/pull/9666.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/9666.patch"}, "body_html": "<p><strong>Problem1</strong>: When using CMake GUI, it by default generates a Visual Studio solution.  Visual Studio solutions cannot be built within Visual Studio because the <code>${CMAKE_BUILD_TYPE}</code> symbol is not defined for multi-configuration environments like Visual Studio.<br>\n<strong>Solution1</strong>: Replace the <code>${CMAKE_BUILD_TYPE}</code> symbol with <code>$(Configuration)</code>.  The latter symbol works on both command line building and building within Visual Studio.</p>\n<p><strong>Problem2</strong>: The build scripts were written for Windows to assume only optimized builds.  There are references to libraries (eg: \"<em>zlibstatic.lib</em>\").  However on a debug build these references have a different name (eg: \"<em>zlibstaticd.lib</em>\").  There are also some warnings as errors that needed to be fixed.  <em>(A function that asserts and does not return any value.)</em>  Lastly one of the kernels did not compile because Eigen does not define a double code path on a Debug build.<br>\n<strong>Solution2</strong>: Use the CMake 'debug' and 'optimized' keywords to specify different libraries depending on the build.  Adds <code>return NULL</code> to functions that have not return values.  Wraps the declaration of kernels that have double precision definitions in pre-processor statements that will prevent it from being build on Windows.</p>", "body_text": "Problem1: When using CMake GUI, it by default generates a Visual Studio solution.  Visual Studio solutions cannot be built within Visual Studio because the ${CMAKE_BUILD_TYPE} symbol is not defined for multi-configuration environments like Visual Studio.\nSolution1: Replace the ${CMAKE_BUILD_TYPE} symbol with $(Configuration).  The latter symbol works on both command line building and building within Visual Studio.\nProblem2: The build scripts were written for Windows to assume only optimized builds.  There are references to libraries (eg: \"zlibstatic.lib\").  However on a debug build these references have a different name (eg: \"zlibstaticd.lib\").  There are also some warnings as errors that needed to be fixed.  (A function that asserts and does not return any value.)  Lastly one of the kernels did not compile because Eigen does not define a double code path on a Debug build.\nSolution2: Use the CMake 'debug' and 'optimized' keywords to specify different libraries depending on the build.  Adds return NULL to functions that have not return values.  Wraps the declaration of kernels that have double precision definitions in pre-processor statements that will prevent it from being build on Windows.", "body": "**Problem1**: When using CMake GUI, it by default generates a Visual Studio solution.  Visual Studio solutions cannot be built within Visual Studio because the `${CMAKE_BUILD_TYPE}` symbol is not defined for multi-configuration environments like Visual Studio.\r\n**Solution1**: Replace the `${CMAKE_BUILD_TYPE}` symbol with `$(Configuration)`.  The latter symbol works on both command line building and building within Visual Studio.\r\n\r\n**Problem2**: The build scripts were written for Windows to assume only optimized builds.  There are references to libraries (eg: \"_zlibstatic.lib_\").  However on a debug build these references have a different name (eg: \"_zlibstaticd.lib_\").  There are also some warnings as errors that needed to be fixed.  _(A function that asserts and does not return any value.)_  Lastly one of the kernels did not compile because Eigen does not define a double code path on a Debug build.\r\n**Solution2**: Use the CMake 'debug' and 'optimized' keywords to specify different libraries depending on the build.  Adds `return NULL` to functions that have not return values.  Wraps the declaration of kernels that have double precision definitions in pre-processor statements that will prevent it from being build on Windows."}