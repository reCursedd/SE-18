{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280410573", "html_url": "https://github.com/tensorflow/tensorflow/issues/7456#issuecomment-280410573", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7456", "id": 280410573, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDQxMDU3Mw==", "user": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-16T18:07:58Z", "updated_at": "2017-02-16T18:07:58Z", "author_association": "MEMBER", "body_html": "<p>In my case I changed the TensorFlow source code in C++.   I'm working on a part of the internal system that is not (yet) open source, so I can't give you a code snippet to apply, but the basic idea is to copy values into a temporary write-once buffer and use that for the source whenever a Tensor is to be used by an Op on another device..     There is not a system config in TF to do this,  If it turns out to be a general problem affecting many users, I could make one.</p>\n<p>The easiest way to try this would be to examine your program and look for every place where the output of an Op on one device becomes an input to an Op on a different device.  In each such case, create a distinct, identical value not with Id (because that doesn't force a copy), but by adding 0 (or mul by 1.0), then use that copy value as the input to the other Op.  Make sure that the copy is local to the  device where the first value was produced, so the DMA from one device to another reads from the copy.</p>", "body_text": "In my case I changed the TensorFlow source code in C++.   I'm working on a part of the internal system that is not (yet) open source, so I can't give you a code snippet to apply, but the basic idea is to copy values into a temporary write-once buffer and use that for the source whenever a Tensor is to be used by an Op on another device..     There is not a system config in TF to do this,  If it turns out to be a general problem affecting many users, I could make one.\nThe easiest way to try this would be to examine your program and look for every place where the output of an Op on one device becomes an input to an Op on a different device.  In each such case, create a distinct, identical value not with Id (because that doesn't force a copy), but by adding 0 (or mul by 1.0), then use that copy value as the input to the other Op.  Make sure that the copy is local to the  device where the first value was produced, so the DMA from one device to another reads from the copy.", "body": "In my case I changed the TensorFlow source code in C++.   I'm working on a part of the internal system that is not (yet) open source, so I can't give you a code snippet to apply, but the basic idea is to copy values into a temporary write-once buffer and use that for the source whenever a Tensor is to be used by an Op on another device..     There is not a system config in TF to do this,  If it turns out to be a general problem affecting many users, I could make one. \r\n\r\nThe easiest way to try this would be to examine your program and look for every place where the output of an Op on one device becomes an input to an Op on a different device.  In each such case, create a distinct, identical value not with Id (because that doesn't force a copy), but by adding 0 (or mul by 1.0), then use that copy value as the input to the other Op.  Make sure that the copy is local to the  device where the first value was produced, so the DMA from one device to another reads from the copy."}