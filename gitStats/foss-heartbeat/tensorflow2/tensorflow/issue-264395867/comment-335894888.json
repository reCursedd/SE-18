{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335894888", "html_url": "https://github.com/tensorflow/tensorflow/issues/13616#issuecomment-335894888", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13616", "id": 335894888, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTg5NDg4OA==", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-11T17:55:16Z", "updated_at": "2017-10-11T17:55:16Z", "author_association": "MEMBER", "body_html": "<p>Let me make sure I understand what you're requesting: you would like a tensor computed from variables to have a new updated value every time it's executed in a while loop.</p>\n<p>This is a reasonable expectation. However, I don't think we'll change this behavior. Right now, only tensors defined inside the loop will be evaluated every loop iteration. All tensors defined outside a loop will be evaluated exactly once. So you would have to write something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">cond</span>(<span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">_x</span>):\n      <span class=\"pl-k\">return</span> tf.less(i, <span class=\"pl-c1\">10</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">gen_body</span>(<span class=\"pl-smi\">v</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">body</span>(<span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">x</span>):\n        x <span class=\"pl-k\">=</span> tf.Print(x, [x], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x: <span class=\"pl-pds\">\"</span></span>)\n        v_assign <span class=\"pl-k\">=</span> v.assign(x <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>)\n        v_assign <span class=\"pl-k\">=</span> tf.Print(v_assign, [v_assign], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v_assign: <span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-k\">with</span> tf.control_dependencies([v_assign]):\n          sq <span class=\"pl-k\">=</span> tf.square(v)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;---- put 'sq' definition inside loop</span>\n          sq <span class=\"pl-k\">=</span> tf.Print(sq, [sq], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sq: <span class=\"pl-pds\">\"</span></span>)\n          sq_neg <span class=\"pl-k\">=</span> tf.negative(sq)\n        sq_neg <span class=\"pl-k\">=</span> tf.Print(sq_neg, [i, sq_neg], <span class=\"pl-v\">message</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>i and sq_neg:<span class=\"pl-pds\">'</span></span>)\n        <span class=\"pl-k\">return</span> tf.add(i, <span class=\"pl-c1\">1</span>), sq_neg\n    <span class=\"pl-k\">return</span> body\n\nsess <span class=\"pl-k\">=</span> tf.InteractiveSession()\n\nv <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">2</span>)\nl <span class=\"pl-k\">=</span> tf.while_loop(cond, gen_body(v), (<span class=\"pl-c1\">1</span>, v))\nsess.run(tf.global_variables_initializer())\nsess.run(l)</pre></div>\n<p>Note that I moved the <code>sq = ...</code> inside the loop (and also made it depend on v_assign, to make sure we pick up the new assignment).</p>\n<p>Does this help?</p>", "body_text": "Let me make sure I understand what you're requesting: you would like a tensor computed from variables to have a new updated value every time it's executed in a while loop.\nThis is a reasonable expectation. However, I don't think we'll change this behavior. Right now, only tensors defined inside the loop will be evaluated every loop iteration. All tensors defined outside a loop will be evaluated exactly once. So you would have to write something like:\nimport tensorflow as tf\nimport numpy as np\n\ndef cond(i, _x):\n      return tf.less(i, 10)\n\ndef gen_body(v):\n    def body(i, x):\n        x = tf.Print(x, [x], \"x: \")\n        v_assign = v.assign(x + 1)\n        v_assign = tf.Print(v_assign, [v_assign], \"v_assign: \")\n        with tf.control_dependencies([v_assign]):\n          sq = tf.square(v)  # <---- put 'sq' definition inside loop\n          sq = tf.Print(sq, [sq], \"sq: \")\n          sq_neg = tf.negative(sq)\n        sq_neg = tf.Print(sq_neg, [i, sq_neg], message='i and sq_neg:')\n        return tf.add(i, 1), sq_neg\n    return body\n\nsess = tf.InteractiveSession()\n\nv = tf.Variable(2)\nl = tf.while_loop(cond, gen_body(v), (1, v))\nsess.run(tf.global_variables_initializer())\nsess.run(l)\nNote that I moved the sq = ... inside the loop (and also made it depend on v_assign, to make sure we pick up the new assignment).\nDoes this help?", "body": "Let me make sure I understand what you're requesting: you would like a tensor computed from variables to have a new updated value every time it's executed in a while loop.\r\n\r\nThis is a reasonable expectation. However, I don't think we'll change this behavior. Right now, only tensors defined inside the loop will be evaluated every loop iteration. All tensors defined outside a loop will be evaluated exactly once. So you would have to write something like:\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndef cond(i, _x):\r\n      return tf.less(i, 10)\r\n\r\ndef gen_body(v):\r\n    def body(i, x):\r\n        x = tf.Print(x, [x], \"x: \")\r\n        v_assign = v.assign(x + 1)\r\n        v_assign = tf.Print(v_assign, [v_assign], \"v_assign: \")\r\n        with tf.control_dependencies([v_assign]):\r\n          sq = tf.square(v)  # <---- put 'sq' definition inside loop\r\n          sq = tf.Print(sq, [sq], \"sq: \")\r\n          sq_neg = tf.negative(sq)\r\n        sq_neg = tf.Print(sq_neg, [i, sq_neg], message='i and sq_neg:')\r\n        return tf.add(i, 1), sq_neg\r\n    return body\r\n\r\nsess = tf.InteractiveSession()\r\n\r\nv = tf.Variable(2)\r\nl = tf.while_loop(cond, gen_body(v), (1, v))\r\nsess.run(tf.global_variables_initializer())\r\nsess.run(l)\r\n``` \r\nNote that I moved the `sq = ...` inside the loop (and also made it depend on v_assign, to make sure we pick up the new assignment).\r\n\r\nDoes this help?"}