{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/336085184", "html_url": "https://github.com/tensorflow/tensorflow/issues/13616#issuecomment-336085184", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13616", "id": 336085184, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjA4NTE4NA==", "user": {"login": "awav", "id": 24483645, "node_id": "MDQ6VXNlcjI0NDgzNjQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/24483645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awav", "html_url": "https://github.com/awav", "followers_url": "https://api.github.com/users/awav/followers", "following_url": "https://api.github.com/users/awav/following{/other_user}", "gists_url": "https://api.github.com/users/awav/gists{/gist_id}", "starred_url": "https://api.github.com/users/awav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awav/subscriptions", "organizations_url": "https://api.github.com/users/awav/orgs", "repos_url": "https://api.github.com/users/awav/repos", "events_url": "https://api.github.com/users/awav/events{/privacy}", "received_events_url": "https://api.github.com/users/awav/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-12T10:15:18Z", "updated_at": "2017-10-12T10:52:17Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88808\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/skye\">@skye</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> I'm sorry for bombarding you with multiple messages, here is a proof that assigning inside loop is not a problem:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">cond</span>(<span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">_x</span>):\n      <span class=\"pl-k\">return</span> tf.less(i, <span class=\"pl-c1\">10000</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">gen_body</span>(<span class=\"pl-smi\">x</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">body</span>(<span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">xa_prev</span>):\n        xa <span class=\"pl-k\">=</span> x.assign(xa_prev <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>)\n        <span class=\"pl-k\">with</span> tf.control_dependencies([xa]):\n            <span class=\"pl-k\">with</span> tf.control_dependencies([tf.assert_equal(x, xa)]):\n                i <span class=\"pl-k\">=</span> tf.add(i, <span class=\"pl-c1\">1</span>)\n        <span class=\"pl-k\">return</span> i, xa\n    <span class=\"pl-k\">return</span> body\n\ntf.reset_default_graph()\ni <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>i<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">use_resource</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nv <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>v<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">use_resource</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nsess <span class=\"pl-k\">=</span> tf.InteractiveSession()\nloop <span class=\"pl-k\">=</span> tf.while_loop(cond, gen_body(v), [i, v])\nsess.run(tf.global_variables_initializer())\nsess.run([loop])\n\nOut[<span class=\"pl-c1\">203</span>]: [(<span class=\"pl-c1\">10000</span>, <span class=\"pl-c1\">10000</span>)]</pre></div>\n<p>The issue is that there is no way to recompute tensors which depend on it and were constructed outside of the <code>while_loop</code>. :)</p>", "body_text": "@skye, @mrry, @ebrevdo I'm sorry for bombarding you with multiple messages, here is a proof that assigning inside loop is not a problem:\nimport tensorflow as tf\nimport numpy as np\n\ndef cond(i, _x):\n      return tf.less(i, 10000)\n\ndef gen_body(x):\n    def body(i, xa_prev):\n        xa = x.assign(xa_prev + 1)\n        with tf.control_dependencies([xa]):\n            with tf.control_dependencies([tf.assert_equal(x, xa)]):\n                i = tf.add(i, 1)\n        return i, xa\n    return body\n\ntf.reset_default_graph()\ni = tf.get_variable('i', initializer=0, use_resource=True)\nv = tf.get_variable('v', initializer=0, use_resource=True)\nsess = tf.InteractiveSession()\nloop = tf.while_loop(cond, gen_body(v), [i, v])\nsess.run(tf.global_variables_initializer())\nsess.run([loop])\n\nOut[203]: [(10000, 10000)]\nThe issue is that there is no way to recompute tensors which depend on it and were constructed outside of the while_loop. :)", "body": "@skye, @mrry, @ebrevdo I'm sorry for bombarding you with multiple messages, here is a proof that assigning inside loop is not a problem:\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndef cond(i, _x):\r\n      return tf.less(i, 10000)\r\n\r\ndef gen_body(x):\r\n    def body(i, xa_prev):\r\n        xa = x.assign(xa_prev + 1)\r\n        with tf.control_dependencies([xa]):\r\n            with tf.control_dependencies([tf.assert_equal(x, xa)]):\r\n                i = tf.add(i, 1)\r\n        return i, xa\r\n    return body\r\n\r\ntf.reset_default_graph()\r\ni = tf.get_variable('i', initializer=0, use_resource=True)\r\nv = tf.get_variable('v', initializer=0, use_resource=True)\r\nsess = tf.InteractiveSession()\r\nloop = tf.while_loop(cond, gen_body(v), [i, v])\r\nsess.run(tf.global_variables_initializer())\r\nsess.run([loop])\r\n\r\nOut[203]: [(10000, 10000)]\r\n```\r\n\r\nThe issue is that there is no way to recompute tensors which depend on it and were constructed outside of the `while_loop`. :)"}