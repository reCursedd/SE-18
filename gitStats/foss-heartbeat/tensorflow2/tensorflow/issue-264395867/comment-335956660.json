{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335956660", "html_url": "https://github.com/tensorflow/tensorflow/issues/13616#issuecomment-335956660", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13616", "id": 335956660, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTk1NjY2MA==", "user": {"login": "awav", "id": 24483645, "node_id": "MDQ6VXNlcjI0NDgzNjQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/24483645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awav", "html_url": "https://github.com/awav", "followers_url": "https://api.github.com/users/awav/followers", "following_url": "https://api.github.com/users/awav/following{/other_user}", "gists_url": "https://api.github.com/users/awav/gists{/gist_id}", "starred_url": "https://api.github.com/users/awav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awav/subscriptions", "organizations_url": "https://api.github.com/users/awav/orgs", "repos_url": "https://api.github.com/users/awav/repos", "events_url": "https://api.github.com/users/awav/events{/privacy}", "received_events_url": "https://api.github.com/users/awav/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-11T21:38:48Z", "updated_at": "2017-10-11T23:41:23Z", "author_association": "NONE", "body_html": "<p>I can be wrong, but in example below I never got different values for assign operation <code>b</code> and <code>a</code> variable outputs. I'm sure it <em>can</em> be a <em>coincidence</em>. Anyway, I got different values for <code>c</code>, and it is obvious because control_dependencies does <strong>not</strong> work in that case. I guess, that it would be useful to be able to construct an operation like <code>read_value()</code>, but for any tensor, so that whenever it is called it would re-evaluate that tensor.</p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">91</span>]: tf.reset_default_graph()\n    <span class=\"pl-c1\">...</span>: a <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">use_resource</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    <span class=\"pl-c1\">...</span>: c <span class=\"pl-k\">=</span> a <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>\n    <span class=\"pl-c1\">...</span>: b <span class=\"pl-k\">=</span> a.assign(a <span class=\"pl-k\">*</span> <span class=\"pl-c1\">10</span>)\n    <span class=\"pl-c1\">...</span>: <span class=\"pl-k\">with</span> tf.control_dependencies([b]):\n    <span class=\"pl-c1\">...</span>:     c <span class=\"pl-k\">=</span> c <span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; </span>\n    <span class=\"pl-c1\">...</span>:              <span class=\"pl-c\"><span class=\"pl-c\">#</span> here should be `c.eval_tensor()` or `c.read_tensor()`, </span>\n    <span class=\"pl-c1\">...</span>:              <span class=\"pl-c\"><span class=\"pl-c\">#</span> which constructs an operation being equivalent</span>\n    <span class=\"pl-c1\">...</span>:              <span class=\"pl-c\"><span class=\"pl-c\">#</span> to read_value() for variables.</span>\n    <span class=\"pl-c1\">...</span>:              <span class=\"pl-c\"><span class=\"pl-c\">#</span> ***Edited***: tf.identity() doesn't work here!</span>\n    <span class=\"pl-c1\">...</span>: sess <span class=\"pl-k\">=</span> tf.InteractiveSession()\n    <span class=\"pl-c1\">...</span>: sess.run(tf.global_variables_initializer())\n    <span class=\"pl-c1\">...</span>: sess.run([a, b, c])\n<span class=\"pl-c1\">...</span>\nOut[<span class=\"pl-c1\">91</span>]: [<span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">3</span>]   <span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;&lt;&lt; 3 </span>\n<span class=\"pl-c1\">...</span>\nOut[<span class=\"pl-c1\">92</span>]: [<span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">21</span>]   <span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;&lt;&lt; 21</span></pre></div>", "body_text": "I can be wrong, but in example below I never got different values for assign operation b and a variable outputs. I'm sure it can be a coincidence. Anyway, I got different values for c, and it is obvious because control_dependencies does not work in that case. I guess, that it would be useful to be able to construct an operation like read_value(), but for any tensor, so that whenever it is called it would re-evaluate that tensor.\nIn [91]: tf.reset_default_graph()\n    ...: a = tf.get_variable('a', initializer=2, use_resource=True)\n    ...: c = a + 1\n    ...: b = a.assign(a * 10)\n    ...: with tf.control_dependencies([b]):\n    ...:     c = c # <<<<<<<<<<<<<<< \n    ...:              # here should be `c.eval_tensor()` or `c.read_tensor()`, \n    ...:              # which constructs an operation being equivalent\n    ...:              # to read_value() for variables.\n    ...:              # ***Edited***: tf.identity() doesn't work here!\n    ...: sess = tf.InteractiveSession()\n    ...: sess.run(tf.global_variables_initializer())\n    ...: sess.run([a, b, c])\n...\nOut[91]: [20, 20, 3]   # <<< 3 \n...\nOut[92]: [20, 20, 21]   # <<< 21", "body": "I can be wrong, but in example below I never got different values for assign operation `b` and `a` variable outputs. I'm sure it *can* be a _coincidence_. Anyway, I got different values for `c`, and it is obvious because control_dependencies does **not** work in that case. I guess, that it would be useful to be able to construct an operation like `read_value()`, but for any tensor, so that whenever it is called it would re-evaluate that tensor.\r\n\r\n```python\r\nIn [91]: tf.reset_default_graph()\r\n    ...: a = tf.get_variable('a', initializer=2, use_resource=True)\r\n    ...: c = a + 1\r\n    ...: b = a.assign(a * 10)\r\n    ...: with tf.control_dependencies([b]):\r\n    ...:     c = c # <<<<<<<<<<<<<<< \r\n    ...:              # here should be `c.eval_tensor()` or `c.read_tensor()`, \r\n    ...:              # which constructs an operation being equivalent\r\n    ...:              # to read_value() for variables.\r\n    ...:              # ***Edited***: tf.identity() doesn't work here!\r\n    ...: sess = tf.InteractiveSession()\r\n    ...: sess.run(tf.global_variables_initializer())\r\n    ...: sess.run([a, b, c])\r\n...\r\nOut[91]: [20, 20, 3]   # <<< 3 \r\n...\r\nOut[92]: [20, 20, 21]   # <<< 21\r\n```"}