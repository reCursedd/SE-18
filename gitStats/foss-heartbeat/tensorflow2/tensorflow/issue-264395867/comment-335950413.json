{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335950413", "html_url": "https://github.com/tensorflow/tensorflow/issues/13616#issuecomment-335950413", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13616", "id": 335950413, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTk1MDQxMw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-11T21:13:59Z", "updated_at": "2017-10-11T21:13:59Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>should we reset the caching identity tensor of a Variable after each assign?</p>\n</blockquote>\n<p>I think this gets tricky because (from the perspective of a <code>tf.Variable</code> object) only some subset of the <code>Variable.assign()</code> (etc.) calls run in an any particular step, and so you can't use control dependencies to ensure that the identity is ordered after an assign. (Perhaps I am being too pessimistic and you have a more cunning solution in mind?)</p>\n<blockquote>\n<p>If this already just \"works\" with ResourceVariable, then that's a sign that the Variable semantics are just broken.</p>\n</blockquote>\n<p>+1. I'd strongly encourage people to switch to ResourceVariable in new code, and it's more compatible with other recent features like <code>tf.data</code> and some of the <code>Estimator</code> variants. I'm not sure what it would take to switch the default, however.</p>", "body_text": "should we reset the caching identity tensor of a Variable after each assign?\n\nI think this gets tricky because (from the perspective of a tf.Variable object) only some subset of the Variable.assign() (etc.) calls run in an any particular step, and so you can't use control dependencies to ensure that the identity is ordered after an assign. (Perhaps I am being too pessimistic and you have a more cunning solution in mind?)\n\nIf this already just \"works\" with ResourceVariable, then that's a sign that the Variable semantics are just broken.\n\n+1. I'd strongly encourage people to switch to ResourceVariable in new code, and it's more compatible with other recent features like tf.data and some of the Estimator variants. I'm not sure what it would take to switch the default, however.", "body": "> should we reset the caching identity tensor of a Variable after each assign?\r\n\r\nI think this gets tricky because (from the perspective of a `tf.Variable` object) only some subset of the `Variable.assign()` (etc.) calls run in an any particular step, and so you can't use control dependencies to ensure that the identity is ordered after an assign. (Perhaps I am being too pessimistic and you have a more cunning solution in mind?)\r\n\r\n> If this already just \"works\" with ResourceVariable, then that's a sign that the Variable semantics are just broken.\r\n\r\n+1. I'd strongly encourage people to switch to ResourceVariable in new code, and it's more compatible with other recent features like `tf.data` and some of the `Estimator` variants. I'm not sure what it would take to switch the default, however."}