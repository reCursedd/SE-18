{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10766", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10766/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10766/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10766/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10766", "id": 236499677, "node_id": "MDU6SXNzdWUyMzY0OTk2Nzc=", "number": 10766, "title": "MultivariateNormalDiag probability gradient fails", "user": {"login": "ktarplee", "id": 3164343, "node_id": "MDQ6VXNlcjMxNjQzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3164343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktarplee", "html_url": "https://github.com/ktarplee", "followers_url": "https://api.github.com/users/ktarplee/followers", "following_url": "https://api.github.com/users/ktarplee/following{/other_user}", "gists_url": "https://api.github.com/users/ktarplee/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktarplee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktarplee/subscriptions", "organizations_url": "https://api.github.com/users/ktarplee/orgs", "repos_url": "https://api.github.com/users/ktarplee/repos", "events_url": "https://api.github.com/users/ktarplee/events{/privacy}", "received_events_url": "https://api.github.com/users/ktarplee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2017-06-16T14:29:34Z", "updated_at": "2017-07-11T22:02:58Z", "closed_at": "2017-07-02T11:22:33Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOS 10.12.5</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.2.0-rc2-0-gce1d6ec49 1.2.0-rc2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.5.1-homebrew</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: python test_diag.py</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The gradients for the tensorflow.contrib.distributions.MultiVariateNormalDiag throw an error.  This might be related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"230896165\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/10149\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/10149/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/10149\">#10149</a>.  Notice that the tensorflow.contrib.distributions.Normal works as expected so I think this is a bug in the gradient implementation of the MultiVarateNormalDiag.</p>\n<h3>Source code</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib.distributions <span class=\"pl-k\">as</span> td\n\nassert_args <span class=\"pl-k\">=</span> <span class=\"pl-c1\">dict</span>(<span class=\"pl-v\">validate_args</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">allow_nan_stats</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> tf Graph Input</span>\nx <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">6</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>X<span class=\"pl-pds\">\"</span></span>)\ny <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">2</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Y<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Set model weights</span>\nb <span class=\"pl-k\">=</span> tf.Variable(np.ones((<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">6</span>)), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>)\nW <span class=\"pl-k\">=</span> tf.Variable(np.ones((<span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">6</span>)), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>W<span class=\"pl-pds\">\"</span></span>)\n\npred_mu <span class=\"pl-k\">=</span> tf.reshape(x<span class=\"pl-k\">@</span>W <span class=\"pl-k\">+</span> b, (<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>))\npred_sigma <span class=\"pl-k\">=</span> tf.reshape(tf.exp(x<span class=\"pl-k\">@</span>W <span class=\"pl-k\">+</span> b), (<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> fails below</span>\ndist <span class=\"pl-k\">=</span> td.MultivariateNormalDiag(<span class=\"pl-v\">loc</span><span class=\"pl-k\">=</span>pred_mu, <span class=\"pl-v\">scale_diag</span><span class=\"pl-k\">=</span>pred_sigma, <span class=\"pl-k\">**</span>assert_args)\nprob <span class=\"pl-k\">=</span> dist.prob(y[:, tf.newaxis])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> this works fine</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> dist_x = td.Normal(loc=pred_mu[:, :, 0], scale=pred_sigma[:, :, 0], **assert_args)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> dist_y = td.Normal(loc=pred_mu[:, :, 1], scale=pred_sigma[:, :, 1], **assert_args)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> prob = dist_x.prob(y[:, 0, tf.newaxis]) * dist_y.prob(y[:, 1, tf.newaxis])</span>\n\ngradients <span class=\"pl-k\">=</span> tf.gradients(prob, [b, W])\n\nfeed_dict <span class=\"pl-k\">=</span> {\n    x: np.ones((<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">6</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32),\n    y: np.ones((<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">2</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\n}\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer())\n    sess.run(prob, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>feed_dict)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> works fine</span>\n    retval <span class=\"pl-k\">=</span> sess.run(gradients, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>feed_dict)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> throws</span>\n    <span class=\"pl-c1\">print</span>(retval)</pre></div>\n<h3>Output</h3>\n<pre><code>Traceback (most recent call last):\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1139, in _do_call\n    return fn(*args)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1121, in _run_fn\n    status, run_metadata)\n  File \"/usr/local/Cellar/python3/3.6.1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/contextlib.py\", line 89, in __exit__\n    next(self.gen)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py\", line 466, in raise_exception_on_not_ok_status\n    pywrap_tensorflow.TF_GetCode(status))\ntensorflow.python.framework.errors_impl.InvalidArgumentError: indices[0] = -1 is not in [0, 3)\n\t [[Node: gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather = Gather[Tindices=DT_INT32, Tparams=DT_INT32, validate_indices=true, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](gradients/MultivariateNormalDiag_3/prob/Prod_grad/Shape, gradients/MultivariateNormalDiag_3/prob/Prod_grad/Reshape)]]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"test_diag.py\", line 41, in &lt;module&gt;\n    retval = sess.run(gradients, feed_dict=feed_dict) # throws\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 789, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 997, in _run\n    feed_dict_string, options, run_metadata)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\n    target_list, options, run_metadata)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: indices[0] = -1 is not in [0, 3)\n\t [[Node: gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather = Gather[Tindices=DT_INT32, Tparams=DT_INT32, validate_indices=true, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](gradients/MultivariateNormalDiag_3/prob/Prod_grad/Shape, gradients/MultivariateNormalDiag_3/prob/Prod_grad/Reshape)]]\n\nCaused by op 'gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather', defined at:\n  File \"test_diag.py\", line 31, in &lt;module&gt;\n    gradients = tf.gradients(prob, [b, W])\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 540, in gradients\n    grad_scope, op, func_call, lambda: grad_fn(op, *out_grads))\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 346, in _MaybeCompile\n    return grad_fn()  # Exit early\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 540, in &lt;lambda&gt;\n    grad_scope, op, func_call, lambda: grad_fn(op, *out_grads))\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/math_grad.py\", line 129, in _ProdGrad\n    reduced_num = math_ops.reduce_prod(array_ops.gather(input_shape, reduced))\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 1179, in gather\n    validate_indices=validate_indices, name=name)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\n    op_def=op_def)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 2506, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 1269, in __init__\n    self._traceback = _extract_stack()\n\n...which was originally created as op 'MultivariateNormalDiag_3/prob/Prod', defined at:\n  File \"test_diag.py\", line 24, in &lt;module&gt;\n    prob = dist.prob(y[:,tf.newaxis])\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/distribution.py\", line 712, in prob\n    return self._call_prob(value, name)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/distribution.py\", line 694, in _call_prob\n    return self._prob(value, **kwargs)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/util.py\", line 688, in _fn\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/mvn_linear_operator.py\", line 216, in _prob\n    return super(MultivariateNormalLinearOperator, self)._prob(x)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/transformed_distribution.py\", line 406, in _prob\n    prob = math_ops.reduce_prod(prob, self._reduce_event_indices)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/math_ops.py\", line 1392, in reduce_prod\n    name=name)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_math_ops.py\", line 1488, in _prod\n    keep_dims=keep_dims, name=name)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\n    op_def=op_def)\n\nInvalidArgumentError (see above for traceback): indices[0] = -1 is not in [0, 3)\n\t [[Node: gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather = Gather[Tindices=DT_INT32, Tparams=DT_INT32, validate_indices=true, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](gradients/MultivariateNormalDiag_3/prob/Prod_grad/Shape, gradients/MultivariateNormalDiag_3/prob/Prod_grad/Reshape)]]\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.12.5\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): v1.2.0-rc2-0-gce1d6ec49 1.2.0-rc2\nBazel version (if compiling from source): 0.5.1-homebrew\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: python test_diag.py\n\nDescribe the problem\nThe gradients for the tensorflow.contrib.distributions.MultiVariateNormalDiag throw an error.  This might be related to #10149.  Notice that the tensorflow.contrib.distributions.Normal works as expected so I think this is a bug in the gradient implementation of the MultiVarateNormalDiag.\nSource code\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.contrib.distributions as td\n\nassert_args = dict(validate_args=True, allow_nan_stats=False)\n\n# tf Graph Input\nx = tf.placeholder(shape=(4, 6), dtype=tf.float32, name=\"X\")\ny = tf.placeholder(shape=(4, 2), dtype=tf.float32, name=\"Y\")\n\n# Set model weights\nb = tf.Variable(np.ones((4, 6)), dtype=np.float32, name=\"b\")\nW = tf.Variable(np.ones((6, 6)), dtype=np.float32, name=\"W\")\n\npred_mu = tf.reshape(x@W + b, (4, 3, 2))\npred_sigma = tf.reshape(tf.exp(x@W + b), (4, 3, 2))\n\n# fails below\ndist = td.MultivariateNormalDiag(loc=pred_mu, scale_diag=pred_sigma, **assert_args)\nprob = dist.prob(y[:, tf.newaxis])\n\n# this works fine\n# dist_x = td.Normal(loc=pred_mu[:, :, 0], scale=pred_sigma[:, :, 0], **assert_args)\n# dist_y = td.Normal(loc=pred_mu[:, :, 1], scale=pred_sigma[:, :, 1], **assert_args)\n# prob = dist_x.prob(y[:, 0, tf.newaxis]) * dist_y.prob(y[:, 1, tf.newaxis])\n\ngradients = tf.gradients(prob, [b, W])\n\nfeed_dict = {\n    x: np.ones((4, 6), dtype=np.float32),\n    y: np.ones((4, 2), dtype=np.float32)\n}\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    sess.run(prob, feed_dict=feed_dict)  # works fine\n    retval = sess.run(gradients, feed_dict=feed_dict)  # throws\n    print(retval)\nOutput\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1139, in _do_call\n    return fn(*args)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1121, in _run_fn\n    status, run_metadata)\n  File \"/usr/local/Cellar/python3/3.6.1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/contextlib.py\", line 89, in __exit__\n    next(self.gen)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py\", line 466, in raise_exception_on_not_ok_status\n    pywrap_tensorflow.TF_GetCode(status))\ntensorflow.python.framework.errors_impl.InvalidArgumentError: indices[0] = -1 is not in [0, 3)\n\t [[Node: gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather = Gather[Tindices=DT_INT32, Tparams=DT_INT32, validate_indices=true, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](gradients/MultivariateNormalDiag_3/prob/Prod_grad/Shape, gradients/MultivariateNormalDiag_3/prob/Prod_grad/Reshape)]]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"test_diag.py\", line 41, in <module>\n    retval = sess.run(gradients, feed_dict=feed_dict) # throws\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 789, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 997, in _run\n    feed_dict_string, options, run_metadata)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\n    target_list, options, run_metadata)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: indices[0] = -1 is not in [0, 3)\n\t [[Node: gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather = Gather[Tindices=DT_INT32, Tparams=DT_INT32, validate_indices=true, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](gradients/MultivariateNormalDiag_3/prob/Prod_grad/Shape, gradients/MultivariateNormalDiag_3/prob/Prod_grad/Reshape)]]\n\nCaused by op 'gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather', defined at:\n  File \"test_diag.py\", line 31, in <module>\n    gradients = tf.gradients(prob, [b, W])\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 540, in gradients\n    grad_scope, op, func_call, lambda: grad_fn(op, *out_grads))\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 346, in _MaybeCompile\n    return grad_fn()  # Exit early\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 540, in <lambda>\n    grad_scope, op, func_call, lambda: grad_fn(op, *out_grads))\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/math_grad.py\", line 129, in _ProdGrad\n    reduced_num = math_ops.reduce_prod(array_ops.gather(input_shape, reduced))\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 1179, in gather\n    validate_indices=validate_indices, name=name)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\n    op_def=op_def)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 2506, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 1269, in __init__\n    self._traceback = _extract_stack()\n\n...which was originally created as op 'MultivariateNormalDiag_3/prob/Prod', defined at:\n  File \"test_diag.py\", line 24, in <module>\n    prob = dist.prob(y[:,tf.newaxis])\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/distribution.py\", line 712, in prob\n    return self._call_prob(value, name)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/distribution.py\", line 694, in _call_prob\n    return self._prob(value, **kwargs)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/util.py\", line 688, in _fn\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/mvn_linear_operator.py\", line 216, in _prob\n    return super(MultivariateNormalLinearOperator, self)._prob(x)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/transformed_distribution.py\", line 406, in _prob\n    prob = math_ops.reduce_prod(prob, self._reduce_event_indices)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/math_ops.py\", line 1392, in reduce_prod\n    name=name)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_math_ops.py\", line 1488, in _prod\n    keep_dims=keep_dims, name=name)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\n    op_def=op_def)\n\nInvalidArgumentError (see above for traceback): indices[0] = -1 is not in [0, 3)\n\t [[Node: gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather = Gather[Tindices=DT_INT32, Tparams=DT_INT32, validate_indices=true, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](gradients/MultivariateNormalDiag_3/prob/Prod_grad/Shape, gradients/MultivariateNormalDiag_3/prob/Prod_grad/Reshape)]]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOS 10.12.5\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: v1.2.0-rc2-0-gce1d6ec49 1.2.0-rc2\r\n- **Bazel version (if compiling from source)**: 0.5.1-homebrew\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: python test_diag.py\r\n\r\n### Describe the problem\r\nThe gradients for the tensorflow.contrib.distributions.MultiVariateNormalDiag throw an error.  This might be related to #10149.  Notice that the tensorflow.contrib.distributions.Normal works as expected so I think this is a bug in the gradient implementation of the MultiVarateNormalDiag.\r\n\r\n### Source code\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.distributions as td\r\n\r\nassert_args = dict(validate_args=True, allow_nan_stats=False)\r\n\r\n# tf Graph Input\r\nx = tf.placeholder(shape=(4, 6), dtype=tf.float32, name=\"X\")\r\ny = tf.placeholder(shape=(4, 2), dtype=tf.float32, name=\"Y\")\r\n\r\n# Set model weights\r\nb = tf.Variable(np.ones((4, 6)), dtype=np.float32, name=\"b\")\r\nW = tf.Variable(np.ones((6, 6)), dtype=np.float32, name=\"W\")\r\n\r\npred_mu = tf.reshape(x@W + b, (4, 3, 2))\r\npred_sigma = tf.reshape(tf.exp(x@W + b), (4, 3, 2))\r\n\r\n# fails below\r\ndist = td.MultivariateNormalDiag(loc=pred_mu, scale_diag=pred_sigma, **assert_args)\r\nprob = dist.prob(y[:, tf.newaxis])\r\n\r\n# this works fine\r\n# dist_x = td.Normal(loc=pred_mu[:, :, 0], scale=pred_sigma[:, :, 0], **assert_args)\r\n# dist_y = td.Normal(loc=pred_mu[:, :, 1], scale=pred_sigma[:, :, 1], **assert_args)\r\n# prob = dist_x.prob(y[:, 0, tf.newaxis]) * dist_y.prob(y[:, 1, tf.newaxis])\r\n\r\ngradients = tf.gradients(prob, [b, W])\r\n\r\nfeed_dict = {\r\n    x: np.ones((4, 6), dtype=np.float32),\r\n    y: np.ones((4, 2), dtype=np.float32)\r\n}\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n    sess.run(prob, feed_dict=feed_dict)  # works fine\r\n    retval = sess.run(gradients, feed_dict=feed_dict)  # throws\r\n    print(retval)\r\n```\r\n\r\n### Output\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1139, in _do_call\r\n    return fn(*args)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1121, in _run_fn\r\n    status, run_metadata)\r\n  File \"/usr/local/Cellar/python3/3.6.1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/contextlib.py\", line 89, in __exit__\r\n    next(self.gen)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py\", line 466, in raise_exception_on_not_ok_status\r\n    pywrap_tensorflow.TF_GetCode(status))\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: indices[0] = -1 is not in [0, 3)\r\n\t [[Node: gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather = Gather[Tindices=DT_INT32, Tparams=DT_INT32, validate_indices=true, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](gradients/MultivariateNormalDiag_3/prob/Prod_grad/Shape, gradients/MultivariateNormalDiag_3/prob/Prod_grad/Reshape)]]\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"test_diag.py\", line 41, in <module>\r\n    retval = sess.run(gradients, feed_dict=feed_dict) # throws\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 789, in run\r\n    run_metadata_ptr)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 997, in _run\r\n    feed_dict_string, options, run_metadata)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\r\n    target_list, options, run_metadata)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: indices[0] = -1 is not in [0, 3)\r\n\t [[Node: gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather = Gather[Tindices=DT_INT32, Tparams=DT_INT32, validate_indices=true, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](gradients/MultivariateNormalDiag_3/prob/Prod_grad/Shape, gradients/MultivariateNormalDiag_3/prob/Prod_grad/Reshape)]]\r\n\r\nCaused by op 'gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather', defined at:\r\n  File \"test_diag.py\", line 31, in <module>\r\n    gradients = tf.gradients(prob, [b, W])\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 540, in gradients\r\n    grad_scope, op, func_call, lambda: grad_fn(op, *out_grads))\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 346, in _MaybeCompile\r\n    return grad_fn()  # Exit early\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 540, in <lambda>\r\n    grad_scope, op, func_call, lambda: grad_fn(op, *out_grads))\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/math_grad.py\", line 129, in _ProdGrad\r\n    reduced_num = math_ops.reduce_prod(array_ops.gather(input_shape, reduced))\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 1179, in gather\r\n    validate_indices=validate_indices, name=name)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\r\n    op_def=op_def)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 2506, in create_op\r\n    original_op=self._default_original_op, op_def=op_def)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 1269, in __init__\r\n    self._traceback = _extract_stack()\r\n\r\n...which was originally created as op 'MultivariateNormalDiag_3/prob/Prod', defined at:\r\n  File \"test_diag.py\", line 24, in <module>\r\n    prob = dist.prob(y[:,tf.newaxis])\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/distribution.py\", line 712, in prob\r\n    return self._call_prob(value, name)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/distribution.py\", line 694, in _call_prob\r\n    return self._prob(value, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/util.py\", line 688, in _fn\r\n    return fn(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/contrib/distributions/python/ops/mvn_linear_operator.py\", line 216, in _prob\r\n    return super(MultivariateNormalLinearOperator, self)._prob(x)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/distributions/transformed_distribution.py\", line 406, in _prob\r\n    prob = math_ops.reduce_prod(prob, self._reduce_event_indices)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/math_ops.py\", line 1392, in reduce_prod\r\n    name=name)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_math_ops.py\", line 1488, in _prod\r\n    keep_dims=keep_dims, name=name)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\r\n    op_def=op_def)\r\n\r\nInvalidArgumentError (see above for traceback): indices[0] = -1 is not in [0, 3)\r\n\t [[Node: gradients/MultivariateNormalDiag_3/prob/Prod_grad/Gather = Gather[Tindices=DT_INT32, Tparams=DT_INT32, validate_indices=true, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](gradients/MultivariateNormalDiag_3/prob/Prod_grad/Shape, gradients/MultivariateNormalDiag_3/prob/Prod_grad/Reshape)]]\r\n```"}