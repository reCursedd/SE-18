{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/343641550", "html_url": "https://github.com/tensorflow/tensorflow/pull/9995#issuecomment-343641550", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9995", "id": 343641550, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzY0MTU1MA==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-11T05:10:19Z", "updated_at": "2017-11-11T05:10:19Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Wrapper</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">rnn_cell</span>.<span class=\"pl-e\">RNNCell</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">inner_cell</span>):\n     <span class=\"pl-c1\">super</span>(<span class=\"pl-c1\">self</span>, Wrapper).<span class=\"pl-c1\">__init__</span>()\n     <span class=\"pl-c1\">self</span>._inner_cell <span class=\"pl-k\">=</span> inner_cell\n  <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">state_size</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n     <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._inner_cell.state_size\n  <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">output_size</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-k\">return</span> (<span class=\"pl-c1\">self</span>._inner_cell.state_size, <span class=\"pl-c1\">self</span>._inner_cell.output_size)\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">call</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input</span>, <span class=\"pl-smi\">state</span>)\n    output, next_state <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._inner_cell(<span class=\"pl-c1\">input</span>, state)\n    emit_output <span class=\"pl-k\">=</span> (next_state, output)\n    <span class=\"pl-k\">return</span> emit_output, next_state</pre></div>\n<p>something like this</p>", "body_text": "class Wrapper(tf.nn.rnn_cell.RNNCell):\n  def __init__(self, inner_cell):\n     super(self, Wrapper).__init__()\n     self._inner_cell = inner_cell\n  @property\n  def state_size(self):\n     return self._inner_cell.state_size\n  @property\n  def output_size(self):\n    return (self._inner_cell.state_size, self._inner_cell.output_size)\n  def call(self, input, state)\n    output, next_state = self._inner_cell(input, state)\n    emit_output = (next_state, output)\n    return emit_output, next_state\nsomething like this", "body": "```python\r\nclass Wrapper(tf.nn.rnn_cell.RNNCell):\r\n  def __init__(self, inner_cell):\r\n     super(self, Wrapper).__init__()\r\n     self._inner_cell = inner_cell\r\n  @property\r\n  def state_size(self):\r\n     return self._inner_cell.state_size\r\n  @property\r\n  def output_size(self):\r\n    return (self._inner_cell.state_size, self._inner_cell.output_size)\r\n  def call(self, input, state)\r\n    output, next_state = self._inner_cell(input, state)\r\n    emit_output = (next_state, output)\r\n    return emit_output, next_state\r\n```\r\n\r\nsomething like this"}