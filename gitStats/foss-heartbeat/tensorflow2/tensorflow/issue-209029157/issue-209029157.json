{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7719", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7719/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7719/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7719/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7719", "id": 209029157, "node_id": "MDU6SXNzdWUyMDkwMjkxNTc=", "number": 7719, "title": "Feature request: convenience functions for getting variables from scopes", "user": {"login": "cooijmanstim", "id": 206920, "node_id": "MDQ6VXNlcjIwNjkyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/206920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cooijmanstim", "html_url": "https://github.com/cooijmanstim", "followers_url": "https://api.github.com/users/cooijmanstim/followers", "following_url": "https://api.github.com/users/cooijmanstim/following{/other_user}", "gists_url": "https://api.github.com/users/cooijmanstim/gists{/gist_id}", "starred_url": "https://api.github.com/users/cooijmanstim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cooijmanstim/subscriptions", "organizations_url": "https://api.github.com/users/cooijmanstim/orgs", "repos_url": "https://api.github.com/users/cooijmanstim/repos", "events_url": "https://api.github.com/users/cooijmanstim/events{/privacy}", "received_events_url": "https://api.github.com/users/cooijmanstim/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}, {"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-21T02:57:20Z", "updated_at": "2017-06-16T18:40:18Z", "closed_at": "2017-06-16T18:40:18Z", "author_association": "NONE", "body_html": "<p>There does not currently seem to be a good way to get a collection of variables that belong to a given scope. I've seen issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"205640833\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/7295\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/7295/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/7295\">#7295</a>, but the answer given by Yaroslav (at <a href=\"http://stackoverflow.com/questions/42073239/tf-get-collection-to-extract-variables-of-one-scope\" rel=\"nofollow\">http://stackoverflow.com/questions/42073239/tf-get-collection-to-extract-variables-of-one-scope</a>) does not nest:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">bar</span>():\n  <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> scope:\n    x <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-c1\">print</span> <span class=\"pl-c1\">list</span>(<span class=\"pl-c1\">map</span>(<span class=\"pl-c1\">str</span>, tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">TRAINABLE_VARIABLES</span>, <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span>scope.name)))\n    <span class=\"pl-c1\">print</span> <span class=\"pl-c1\">list</span>(<span class=\"pl-c1\">map</span>(<span class=\"pl-c1\">str</span>, tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">TRAINABLE_VARIABLES</span>, <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span>scope.name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>)))\n  <span class=\"pl-c1\">print</span> <span class=\"pl-c1\">list</span>(<span class=\"pl-c1\">map</span>(<span class=\"pl-c1\">str</span>, tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">TRAINABLE_VARIABLES</span>, <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>)))\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>():\n  <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> scope:\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar_<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> scope:\n      y <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>y<span class=\"pl-pds\">\"</span></span>)\n    bar()\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n  bar()\n<span class=\"pl-c1\">print</span>\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n  foo()</pre></div>\n<p>The snippet above outputs (on TF 1.0):</p>\n<pre><code>['Tensor(\"bar/x/read:0\", shape=(), dtype=int32)']\n['Tensor(\"bar/x/read:0\", shape=(), dtype=int32)']\n['Tensor(\"bar/x/read:0\", shape=(), dtype=int32)']\n\n['Tensor(\"foo/bar_/y/read:0\", shape=(), dtype=int32)', 'Tensor(\"foo/bar/x/read:0\", shape=(), dtype=int32)']\n['Tensor(\"foo/bar/x/read:0\", shape=(), dtype=int32)']\n[]\n</code></pre>\n<p>The output shows that wrapping the scope \"bar\" in another scope (\"foo\") breaks Yaroslav's proposal of using <code>tf.get_collection(..., \"bar\")</code>. It also breaks <code>tf.get_collection(..., scope.name)</code> by including variables from outside the scope. The only version that works regardless of context is <code>tf.get_collection(..., scope.name + \"/\")</code>, which is ugly and too informed.</p>\n<p>It would be great to have <code>scope.trainable_variables()</code>, or <code>scope.get_collection(...)</code>, or even <code>tf.get_collection(..., scope)</code>.</p>", "body_text": "There does not currently seem to be a good way to get a collection of variables that belong to a given scope. I've seen issue #7295, but the answer given by Yaroslav (at http://stackoverflow.com/questions/42073239/tf-get-collection-to-extract-variables-of-one-scope) does not nest:\nimport tensorflow as tf\n\ndef bar():\n  with tf.variable_scope(\"bar\") as scope:\n    x = tf.Variable(0, name=\"x\")\n    print list(map(str, tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=scope.name)))\n    print list(map(str, tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=scope.name + \"/\")))\n  print list(map(str, tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=\"bar\")))\n\ndef foo():\n  with tf.variable_scope(\"foo\") as scope:\n    with tf.variable_scope(\"bar_\") as scope:\n      y = tf.Variable(0, name=\"y\")\n    bar()\n\nwith tf.Graph().as_default():\n  bar()\nprint\nwith tf.Graph().as_default():\n  foo()\nThe snippet above outputs (on TF 1.0):\n['Tensor(\"bar/x/read:0\", shape=(), dtype=int32)']\n['Tensor(\"bar/x/read:0\", shape=(), dtype=int32)']\n['Tensor(\"bar/x/read:0\", shape=(), dtype=int32)']\n\n['Tensor(\"foo/bar_/y/read:0\", shape=(), dtype=int32)', 'Tensor(\"foo/bar/x/read:0\", shape=(), dtype=int32)']\n['Tensor(\"foo/bar/x/read:0\", shape=(), dtype=int32)']\n[]\n\nThe output shows that wrapping the scope \"bar\" in another scope (\"foo\") breaks Yaroslav's proposal of using tf.get_collection(..., \"bar\"). It also breaks tf.get_collection(..., scope.name) by including variables from outside the scope. The only version that works regardless of context is tf.get_collection(..., scope.name + \"/\"), which is ugly and too informed.\nIt would be great to have scope.trainable_variables(), or scope.get_collection(...), or even tf.get_collection(..., scope).", "body": "There does not currently seem to be a good way to get a collection of variables that belong to a given scope. I've seen issue #7295, but the answer given by Yaroslav (at http://stackoverflow.com/questions/42073239/tf-get-collection-to-extract-variables-of-one-scope) does not nest:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\ndef bar():\r\n  with tf.variable_scope(\"bar\") as scope:\r\n    x = tf.Variable(0, name=\"x\")\r\n    print list(map(str, tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=scope.name)))\r\n    print list(map(str, tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=scope.name + \"/\")))\r\n  print list(map(str, tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=\"bar\")))\r\n\r\ndef foo():\r\n  with tf.variable_scope(\"foo\") as scope:\r\n    with tf.variable_scope(\"bar_\") as scope:\r\n      y = tf.Variable(0, name=\"y\")\r\n    bar()\r\n\r\nwith tf.Graph().as_default():\r\n  bar()\r\nprint\r\nwith tf.Graph().as_default():\r\n  foo()\r\n```\r\n\r\nThe snippet above outputs (on TF 1.0):\r\n```\r\n['Tensor(\"bar/x/read:0\", shape=(), dtype=int32)']\r\n['Tensor(\"bar/x/read:0\", shape=(), dtype=int32)']\r\n['Tensor(\"bar/x/read:0\", shape=(), dtype=int32)']\r\n\r\n['Tensor(\"foo/bar_/y/read:0\", shape=(), dtype=int32)', 'Tensor(\"foo/bar/x/read:0\", shape=(), dtype=int32)']\r\n['Tensor(\"foo/bar/x/read:0\", shape=(), dtype=int32)']\r\n[]\r\n```\r\n\r\nThe output shows that wrapping the scope \"bar\" in another scope (\"foo\") breaks Yaroslav's proposal of using `tf.get_collection(..., \"bar\")`. It also breaks `tf.get_collection(..., scope.name)` by including variables from outside the scope. The only version that works regardless of context is `tf.get_collection(..., scope.name + \"/\")`, which is ugly and too informed.\r\n\r\nIt would be great to have `scope.trainable_variables()`, or `scope.get_collection(...)`, or even `tf.get_collection(..., scope)`."}