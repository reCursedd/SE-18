{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/131783432", "pull_request_review_id": 54793117, "id": 131783432, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTc4MzQzMg==", "diff_hunk": "@@ -46,8 +50,17 @@ class SYCLAllocator : public Allocator {\n   // AllocatedSize(void* ptr) by default.\n   size_t RequestedSize(void* ptr) override;\n   Eigen::SyclDevice* getSyclDevice() { return sycl_device_; }\n+  // Clear the SYCL device used by the Allocator\n+  void ClearSYCLDevice() {\n+    if(sycl_device_) {\n+      mutex_lock lock(mu_);", "path": "tensorflow/core/common_runtime/sycl/sycl_allocator.h", "position": null, "original_position": 32, "commit_id": "8070cad004e77e5e28ab3c8e291336f995aae94c", "original_commit_id": "d75b94f3e42eb88c4f0428499be11cce13abe87a", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "body": "This only helps if all the reads and uses of sycl_device_ are guarded by the mutex. For example \r\n\r\nThread 1 calls, e.g., Synchronize, reads non-zero sycl_device_ in  line 40.\r\nThread 2 calls ClearSYCLDevice, deletes the object, sets sycl_device_ = nullptr;\r\nThread 1 Tries to call sycl_device_->synchronize()\r\nBoom!\r\n\r\nI'm not sure if this is a scenario that we need to guard against?", "created_at": "2017-08-07T22:49:51Z", "updated_at": "2017-08-09T14:36:12Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11968#discussion_r131783432", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11968", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/131783432"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11968#discussion_r131783432"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11968"}}, "body_html": "<p>This only helps if all the reads and uses of sycl_device_ are guarded by the mutex. For example</p>\n<p>Thread 1 calls, e.g., Synchronize, reads non-zero sycl_device_ in  line 40.<br>\nThread 2 calls ClearSYCLDevice, deletes the object, sets sycl_device_ = nullptr;<br>\nThread 1 Tries to call sycl_device_-&gt;synchronize()<br>\nBoom!</p>\n<p>I'm not sure if this is a scenario that we need to guard against?</p>", "body_text": "This only helps if all the reads and uses of sycl_device_ are guarded by the mutex. For example\nThread 1 calls, e.g., Synchronize, reads non-zero sycl_device_ in  line 40.\nThread 2 calls ClearSYCLDevice, deletes the object, sets sycl_device_ = nullptr;\nThread 1 Tries to call sycl_device_->synchronize()\nBoom!\nI'm not sure if this is a scenario that we need to guard against?"}