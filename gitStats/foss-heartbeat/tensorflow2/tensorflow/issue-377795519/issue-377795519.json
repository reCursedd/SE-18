{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23551", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23551/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23551/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23551/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23551", "id": 377795519, "node_id": "MDU6SXNzdWUzNzc3OTU1MTk=", "number": 23551, "title": "[Resolved] Inconsistent output shape for tf.image.resize_images() when preserve_aspect_ratio=True", "user": {"login": "KosukeArase", "id": 13608980, "node_id": "MDQ6VXNlcjEzNjA4OTgw", "avatar_url": "https://avatars2.githubusercontent.com/u/13608980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KosukeArase", "html_url": "https://github.com/KosukeArase", "followers_url": "https://api.github.com/users/KosukeArase/followers", "following_url": "https://api.github.com/users/KosukeArase/following{/other_user}", "gists_url": "https://api.github.com/users/KosukeArase/gists{/gist_id}", "starred_url": "https://api.github.com/users/KosukeArase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KosukeArase/subscriptions", "organizations_url": "https://api.github.com/users/KosukeArase/orgs", "repos_url": "https://api.github.com/users/KosukeArase/repos", "events_url": "https://api.github.com/users/KosukeArase/events{/privacy}", "received_events_url": "https://api.github.com/users/KosukeArase/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-06T11:02:03Z", "updated_at": "2018-11-06T12:06:23Z", "closed_at": "2018-11-06T11:05:16Z", "author_association": "NONE", "body_html": "<p>TF Version: r1.11</p>\n<p>I found a bug in <code>tf.image.resize_images() </code> when specifying <code>preserve_aspect_ratio=True</code>.<br>\nThis is how to reproduce the problem.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">resize_images_issue</span>(<span class=\"pl-smi\">img_shape</span>, <span class=\"pl-smi\">target</span>):\n    img_ph <span class=\"pl-k\">=</span> tf.placeholder(tf.uint8, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>img<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">3</span>])\n    img <span class=\"pl-k\">=</span> tf.image.resize_images(img_ph, [target, target], <span class=\"pl-v\">preserve_aspect_ratio</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n        img_np  <span class=\"pl-k\">=</span> np.zeros(img_shape, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.uint8)\n        result <span class=\"pl-k\">=</span> sess.run(img, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{img_ph: img_np})\n\n    <span class=\"pl-k\">if</span> np.max(result.shape) <span class=\"pl-k\">!=</span> target:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Error!! Length of the longer edge is <span class=\"pl-c1\">{}</span> though target size is <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(np.max(result.shape), target))\n    <span class=\"pl-k\">else</span>:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ok<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>For some sets of input shape and output shape, it returns inconsistent shape.</p>\n<div class=\"highlight highlight-source-python\"><pre>resize_images_issue((<span class=\"pl-c1\">200</span>, <span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">3</span>), <span class=\"pl-c1\">50</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ok</span>\n\nresize_images_issue((<span class=\"pl-c1\">437</span>, <span class=\"pl-c1\">779</span>, <span class=\"pl-c1\">3</span>), <span class=\"pl-c1\">225</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ok</span>\n\nresize_images_issue((<span class=\"pl-c1\">437</span>, <span class=\"pl-c1\">779</span>, <span class=\"pl-c1\">3</span>), <span class=\"pl-c1\">224</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Error!! Length of the longer edge is 223 though target size is 224</span></pre></div>", "body_text": "TF Version: r1.11\nI found a bug in tf.image.resize_images()  when specifying preserve_aspect_ratio=True.\nThis is how to reproduce the problem.\ndef resize_images_issue(img_shape, target):\n    img_ph = tf.placeholder(tf.uint8, name=\"img\", shape=[None, None, 3])\n    img = tf.image.resize_images(img_ph, [target, target], preserve_aspect_ratio=True)\n\n    with tf.Session() as sess:\n        img_np  = np.zeros(img_shape, dtype=np.uint8)\n        result = sess.run(img, feed_dict={img_ph: img_np})\n\n    if np.max(result.shape) != target:\n        print(\"Error!! Length of the longer edge is {} though target size is {}\".format(np.max(result.shape), target))\n    else:\n        print(\"ok\")\nFor some sets of input shape and output shape, it returns inconsistent shape.\nresize_images_issue((200, 100, 3), 50)\n# ok\n\nresize_images_issue((437, 779, 3), 225)\n# ok\n\nresize_images_issue((437, 779, 3), 224)\n# Error!! Length of the longer edge is 223 though target size is 224", "body": "TF Version: r1.11\r\n\r\nI found a bug in `tf.image.resize_images() ` when specifying `preserve_aspect_ratio=True`.\r\nThis is how to reproduce the problem.\r\n\r\n```python\r\ndef resize_images_issue(img_shape, target):\r\n    img_ph = tf.placeholder(tf.uint8, name=\"img\", shape=[None, None, 3])\r\n    img = tf.image.resize_images(img_ph, [target, target], preserve_aspect_ratio=True)\r\n\r\n    with tf.Session() as sess:\r\n        img_np  = np.zeros(img_shape, dtype=np.uint8)\r\n        result = sess.run(img, feed_dict={img_ph: img_np})\r\n\r\n    if np.max(result.shape) != target:\r\n        print(\"Error!! Length of the longer edge is {} though target size is {}\".format(np.max(result.shape), target))\r\n    else:\r\n        print(\"ok\")\r\n```\r\n\r\nFor some sets of input shape and output shape, it returns inconsistent shape.\r\n\r\n```python\r\nresize_images_issue((200, 100, 3), 50)\r\n# ok\r\n\r\nresize_images_issue((437, 779, 3), 225)\r\n# ok\r\n\r\nresize_images_issue((437, 779, 3), 224)\r\n# Error!! Length of the longer edge is 223 though target size is 224\r\n```"}