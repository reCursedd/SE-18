{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4250", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4250/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4250/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4250/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4250", "id": 175470854, "node_id": "MDU6SXNzdWUxNzU0NzA4NTQ=", "number": 4250, "title": "Warning produced by Logging and Monitoring Basics with tf.contrib.learn example", "user": {"login": "ReaddyEddy", "id": 3310960, "node_id": "MDQ6VXNlcjMzMTA5NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3310960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ReaddyEddy", "html_url": "https://github.com/ReaddyEddy", "followers_url": "https://api.github.com/users/ReaddyEddy/followers", "following_url": "https://api.github.com/users/ReaddyEddy/following{/other_user}", "gists_url": "https://api.github.com/users/ReaddyEddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ReaddyEddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ReaddyEddy/subscriptions", "organizations_url": "https://api.github.com/users/ReaddyEddy/orgs", "repos_url": "https://api.github.com/users/ReaddyEddy/repos", "events_url": "https://api.github.com/users/ReaddyEddy/events{/privacy}", "received_events_url": "https://api.github.com/users/ReaddyEddy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-09-07T10:44:14Z", "updated_at": "2016-10-17T22:12:04Z", "closed_at": "2016-09-16T16:44:00Z", "author_association": "NONE", "body_html": "<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p>Similar issue here:</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column\" rel=\"nofollow\">http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column</a></li>\n<li>have tried example at<br>\n<a href=\"https://www.tensorflow.org/versions/master/tutorials/monitors/index.html\" rel=\"nofollow\">https://www.tensorflow.org/versions/master/tutorials/monitors/index.html</a><br>\nstill exhibits same issue</li>\n<li>I will look at github deltas in 0.10.0rc0 between 1 above head and see if same fix applied to tf.contrib.learn</li>\n</ol>\n<h3>Environment info</h3>\n<p>Operating System:<br>\nOS-X 10.11.6 Python 3.5 vi Homebrew<br>\nInstalled version of CUDA and cuDNN:<br>\nN/A</p>\n<h2>installed from binary pip package:</h2>\n<ol>\n<li>link to the pip package you installed:<br>\n<a href=\"https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.10.0rc0-py3-none-any.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.10.0rc0-py3-none-any.whl</a></li>\n<li>The output from <code>python -c \"import tensorflow; print(tensorflow.__version__)\"</code>.<br>\n0.10.0rc0</li>\n</ol>\n<h3>minimal reproducible example (</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Data sets</span>\n<span class=\"pl-c1\">IRIS_TRAINING</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>iris_training.csv<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-c1\">IRIS_TEST</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>iris_test.csv<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Load datasets.</span>\ntraining_set <span class=\"pl-k\">=</span> tf.contrib.learn.datasets.base.load_csv(<span class=\"pl-v\">filename</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">IRIS_TRAINING</span>,\n                                                       <span class=\"pl-v\">target_dtype</span><span class=\"pl-k\">=</span>np.int)\ntest_set <span class=\"pl-k\">=</span> tf.contrib.learn.datasets.base.load_csv(<span class=\"pl-v\">filename</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">IRIS_TEST</span>,\n                                                   <span class=\"pl-v\">target_dtype</span><span class=\"pl-k\">=</span>np.int)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Specify that all features have real-value data</span>\nfeature_columns <span class=\"pl-k\">=</span> [tf.contrib.layers.real_valued_column(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">dimension</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>)]\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Build 3 layer DNN with 10, 20, 10 units respectively.</span>\nclassifier <span class=\"pl-k\">=</span> tf.contrib.learn.DNNClassifier(<span class=\"pl-v\">feature_columns</span><span class=\"pl-k\">=</span>feature_columns,\n                                            <span class=\"pl-v\">hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">10</span>],\n                                            <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>,\n                                            <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/tmp/iris_model<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Fit model.</span>\nclassifier.fit(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>training_set.data,\n               <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>training_set.target,\n               <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2000</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Evaluate accuracy.</span>\naccuracy_score <span class=\"pl-k\">=</span> classifier.evaluate(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>test_set.data,\n                                     <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>test_set.target)[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>accuracy<span class=\"pl-pds\">\"</span></span>]\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Accuracy: <span class=\"pl-c1\">{0<span class=\"pl-k\">:f</span>}</span><span class=\"pl-pds\">'</span></span>.format(accuracy_score))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Classify two new flower samples.</span>\nnew_samples <span class=\"pl-k\">=</span> np.array(\n    [[<span class=\"pl-c1\">6.4</span>, <span class=\"pl-c1\">3.2</span>, <span class=\"pl-c1\">4.5</span>, <span class=\"pl-c1\">1.5</span>], [<span class=\"pl-c1\">5.8</span>, <span class=\"pl-c1\">3.1</span>, <span class=\"pl-c1\">5.0</span>, <span class=\"pl-c1\">1.7</span>]], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">float</span>)\ny <span class=\"pl-k\">=</span> classifier.predict(new_samples)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Predictions: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(<span class=\"pl-c1\">str</span>(y)))</pre></div>\n<h3>What other attempted solutions have you tried?</h3>\n<p>Referenced head example</p>\n<h3>Logs or other output that would be helpful</h3>\n<p>WARNING:tensorflow:Setting feature info to TensorSignature(dtype=tf.float32, shape=TensorShape([Dimension(None), Dimension(4)]), is_sparse=False)<br>\nWARNING:tensorflow:Setting targets info to TensorSignature(dtype=tf.int64, shape=TensorShape([Dimension(None)]), is_sparse=False)<br>\nWARNING:tensorflow:Given features: Tensor(\"input:0\", shape=(?, 4), dtype=float32), required signatures: TensorSignature(dtype=tf.float32, shape=TensorShape([Dimension(None), Dimension(4)]), is_sparse=False).<br>\nWARNING:tensorflow:Given targets: Tensor(\"output:0\", shape=(?,), dtype=int64), required signatures: TensorSignature(dtype=tf.int64, shape=TensorShape([Dimension(None)]), is_sparse=False).</p>", "body_text": "What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\nSimilar issue here:\n\nhttp://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column\nhave tried example at\nhttps://www.tensorflow.org/versions/master/tutorials/monitors/index.html\nstill exhibits same issue\nI will look at github deltas in 0.10.0rc0 between 1 above head and see if same fix applied to tf.contrib.learn\n\nEnvironment info\nOperating System:\nOS-X 10.11.6 Python 3.5 vi Homebrew\nInstalled version of CUDA and cuDNN:\nN/A\ninstalled from binary pip package:\n\nlink to the pip package you installed:\nhttps://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.10.0rc0-py3-none-any.whl\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\".\n0.10.0rc0\n\nminimal reproducible example (\nimport tensorflow as tf\nimport numpy as np\n\n# Data sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TEST = \"iris_test.csv\"\n\n# Load datasets.\ntraining_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TRAINING,\n                                                       target_dtype=np.int)\ntest_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TEST,\n                                                   target_dtype=np.int)\n\n# Specify that all features have real-value data\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=4)]\n\n# Build 3 layer DNN with 10, 20, 10 units respectively.\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\")\n\n# Fit model.\nclassifier.fit(x=training_set.data,\n               y=training_set.target,\n               steps=2000)\n\n# Evaluate accuracy.\naccuracy_score = classifier.evaluate(x=test_set.data,\n                                     y=test_set.target)[\"accuracy\"]\nprint('Accuracy: {0:f}'.format(accuracy_score))\n\n# Classify two new flower samples.\nnew_samples = np.array(\n    [[6.4, 3.2, 4.5, 1.5], [5.8, 3.1, 5.0, 1.7]], dtype=float)\ny = classifier.predict(new_samples)\nprint('Predictions: {}'.format(str(y)))\nWhat other attempted solutions have you tried?\nReferenced head example\nLogs or other output that would be helpful\nWARNING:tensorflow:Setting feature info to TensorSignature(dtype=tf.float32, shape=TensorShape([Dimension(None), Dimension(4)]), is_sparse=False)\nWARNING:tensorflow:Setting targets info to TensorSignature(dtype=tf.int64, shape=TensorShape([Dimension(None)]), is_sparse=False)\nWARNING:tensorflow:Given features: Tensor(\"input:0\", shape=(?, 4), dtype=float32), required signatures: TensorSignature(dtype=tf.float32, shape=TensorShape([Dimension(None), Dimension(4)]), is_sparse=False).\nWARNING:tensorflow:Given targets: Tensor(\"output:0\", shape=(?,), dtype=int64), required signatures: TensorSignature(dtype=tf.int64, shape=TensorShape([Dimension(None)]), is_sparse=False).", "body": "### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\n\nSimilar issue here:\n1. http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column\n2. have tried example at \nhttps://www.tensorflow.org/versions/master/tutorials/monitors/index.html\nstill exhibits same issue\n3. I will look at github deltas in 0.10.0rc0 between 1 above head and see if same fix applied to tf.contrib.learn \n### Environment info\n\nOperating System:\nOS-X 10.11.6 Python 3.5 vi Homebrew \nInstalled version of CUDA and cuDNN: \nN/A\n## installed from binary pip package:\n1. link to the pip package you installed:\n   https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.10.0rc0-py3-none-any.whl\n2. The output from `python -c \"import tensorflow; print(tensorflow.__version__)\"`.\n   0.10.0rc0\n### minimal reproducible example (\n\n``` python\n\nimport tensorflow as tf\nimport numpy as np\n\n# Data sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TEST = \"iris_test.csv\"\n\n# Load datasets.\ntraining_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TRAINING,\n                                                       target_dtype=np.int)\ntest_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TEST,\n                                                   target_dtype=np.int)\n\n# Specify that all features have real-value data\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=4)]\n\n# Build 3 layer DNN with 10, 20, 10 units respectively.\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\")\n\n# Fit model.\nclassifier.fit(x=training_set.data,\n               y=training_set.target,\n               steps=2000)\n\n# Evaluate accuracy.\naccuracy_score = classifier.evaluate(x=test_set.data,\n                                     y=test_set.target)[\"accuracy\"]\nprint('Accuracy: {0:f}'.format(accuracy_score))\n\n# Classify two new flower samples.\nnew_samples = np.array(\n    [[6.4, 3.2, 4.5, 1.5], [5.8, 3.1, 5.0, 1.7]], dtype=float)\ny = classifier.predict(new_samples)\nprint('Predictions: {}'.format(str(y)))\n```\n### What other attempted solutions have you tried?\n\nReferenced head example \n### Logs or other output that would be helpful\n\nWARNING:tensorflow:Setting feature info to TensorSignature(dtype=tf.float32, shape=TensorShape([Dimension(None), Dimension(4)]), is_sparse=False)\nWARNING:tensorflow:Setting targets info to TensorSignature(dtype=tf.int64, shape=TensorShape([Dimension(None)]), is_sparse=False)\nWARNING:tensorflow:Given features: Tensor(\"input:0\", shape=(?, 4), dtype=float32), required signatures: TensorSignature(dtype=tf.float32, shape=TensorShape([Dimension(None), Dimension(4)]), is_sparse=False).\nWARNING:tensorflow:Given targets: Tensor(\"output:0\", shape=(?,), dtype=int64), required signatures: TensorSignature(dtype=tf.int64, shape=TensorShape([Dimension(None)]), is_sparse=False).\n"}