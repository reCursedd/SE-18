{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/347070193", "html_url": "https://github.com/tensorflow/tensorflow/issues/14897#issuecomment-347070193", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14897", "id": 347070193, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzA3MDE5Mw==", "user": {"login": "arixlin", "id": 14324353, "node_id": "MDQ6VXNlcjE0MzI0MzUz", "avatar_url": "https://avatars0.githubusercontent.com/u/14324353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arixlin", "html_url": "https://github.com/arixlin", "followers_url": "https://api.github.com/users/arixlin/followers", "following_url": "https://api.github.com/users/arixlin/following{/other_user}", "gists_url": "https://api.github.com/users/arixlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/arixlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arixlin/subscriptions", "organizations_url": "https://api.github.com/users/arixlin/orgs", "repos_url": "https://api.github.com/users/arixlin/repos", "events_url": "https://api.github.com/users/arixlin/events{/privacy}", "received_events_url": "https://api.github.com/users/arixlin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-27T03:30:39Z", "updated_at": "2018-04-28T02:34:34Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code> def get_a_cell(lstm_size, keep_prob):\n            lstm = tf.nn.rnn_cell.BasicLSTMCell(lstm_size)\n            drop = tf.nn.rnn_cell.DropoutWrapper(lstm, output_keep_prob=keep_prob)\n            return drop\n        \n with tf.name_scope('lstm'):\n     cell = tf.nn.rnn_cell.MultiRNNCell(\n     [get_a_cell(self.lstm_size, self.keep_prob) for _ in range(self.num_layers)]\n     )\n</code></pre>", "body_text": "def get_a_cell(lstm_size, keep_prob):\n            lstm = tf.nn.rnn_cell.BasicLSTMCell(lstm_size)\n            drop = tf.nn.rnn_cell.DropoutWrapper(lstm, output_keep_prob=keep_prob)\n            return drop\n        \n with tf.name_scope('lstm'):\n     cell = tf.nn.rnn_cell.MultiRNNCell(\n     [get_a_cell(self.lstm_size, self.keep_prob) for _ in range(self.num_layers)]\n     )", "body": "```\r\n def get_a_cell(lstm_size, keep_prob):\r\n            lstm = tf.nn.rnn_cell.BasicLSTMCell(lstm_size)\r\n            drop = tf.nn.rnn_cell.DropoutWrapper(lstm, output_keep_prob=keep_prob)\r\n            return drop\r\n        \r\n with tf.name_scope('lstm'):\r\n     cell = tf.nn.rnn_cell.MultiRNNCell(\r\n     [get_a_cell(self.lstm_size, self.keep_prob) for _ in range(self.num_layers)]\r\n     )\r\n```"}