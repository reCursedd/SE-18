{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/258982527", "html_url": "https://github.com/tensorflow/tensorflow/issues/5406#issuecomment-258982527", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5406", "id": 258982527, "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODk4MjUyNw==", "user": {"login": "juraj-bicikl", "id": 22090096, "node_id": "MDQ6VXNlcjIyMDkwMDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/22090096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juraj-bicikl", "html_url": "https://github.com/juraj-bicikl", "followers_url": "https://api.github.com/users/juraj-bicikl/followers", "following_url": "https://api.github.com/users/juraj-bicikl/following{/other_user}", "gists_url": "https://api.github.com/users/juraj-bicikl/gists{/gist_id}", "starred_url": "https://api.github.com/users/juraj-bicikl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juraj-bicikl/subscriptions", "organizations_url": "https://api.github.com/users/juraj-bicikl/orgs", "repos_url": "https://api.github.com/users/juraj-bicikl/repos", "events_url": "https://api.github.com/users/juraj-bicikl/events{/privacy}", "received_events_url": "https://api.github.com/users/juraj-bicikl/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-07T22:22:56Z", "updated_at": "2016-11-07T22:22:56Z", "author_association": "NONE", "body_html": "<p>I am using Mac OS X 10.11.6, and Python 3.5.1 with tensorflow 0.11.0rc0 version.<br>\nI compiled the following C++ code on top of 0.11.0rc0 version (commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/2dea76c0b8eb5b8302454137c055f9e7b7dcea39/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/2dea76c0b8eb5b8302454137c055f9e7b7dcea39\"><tt>2dea76c</tt></a>).</p>\n<p>Python code where I create a graph and serialize it as GraphDef</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> sys\n\ngraph <span class=\"pl-k\">=</span> tf.get_default_graph()\n\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float64, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">3</span>])\nw <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float64))\nh <span class=\"pl-k\">=</span> tf.matmul(x, w)\n\nis_training <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">True</span>, <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\nh_dropout <span class=\"pl-k\">=</span> tf.contrib.layers.dropout(h, <span class=\"pl-v\">keep_prob</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span>is_training)\n\nsys.stdout.buffer.write(graph.as_graph_def().SerializeToString())</pre></div>\n<p>C++ code where I import the graph:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>cstdio<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>cstdlib<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>cstring<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>fstream<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>string<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>iostream<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/c/c_api.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/graph.pb.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/graph_def_util.h<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">int</span> argc, <span class=\"pl-k\">char</span>* argv[]) {\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> loading graph proto</span>\n    tensorflow::GraphDef graph_def;\n    std::ifstream <span class=\"pl-smi\">f_in</span>(argv[<span class=\"pl-c1\">1</span>]);\n    <span class=\"pl-k\">bool</span> ctrl = graph_def.<span class=\"pl-c1\">ParseFromIstream</span>(&amp;f_in);\n    f_in.<span class=\"pl-c1\">close</span>();\n    <span class=\"pl-k\">if</span> (ctrl) std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>deserialization successful<span class=\"pl-cce\">\\n\\n</span><span class=\"pl-pds\">\"</span></span>;\n\n    std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Graph contents:<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>;\n    std::cout &lt;&lt; <span class=\"pl-c1\">tensorflow::SummarizeGraphDef</span>(graph_def) &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>;\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> loading graph_def as TF_Graph</span>\n    TF_ImportGraphDefOptions* opts = <span class=\"pl-c1\">TF_NewImportGraphDefOptions</span>();\n    TF_Status* status = <span class=\"pl-c1\">TF_NewStatus</span>();\n    TF_Graph* tf_graph = <span class=\"pl-c1\">TF_NewGraph</span>();\n    std::string gd_as_string = <span class=\"pl-c1\">std::string</span>();\n    graph_def.<span class=\"pl-c1\">SerializeToString</span>(&amp;gd_as_string);\n    TF_Buffer* gd_as_buffer = <span class=\"pl-c1\">TF_NewBufferFromString</span>(gd_as_string.<span class=\"pl-c1\">c_str</span>(), gd_as_string.<span class=\"pl-c1\">length</span>());\n    <span class=\"pl-c1\">TF_GraphImportGraphDef</span>(tf_graph, gd_as_buffer, opts, status);\n\n    <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">TF_GetCode</span>(status) == <span class=\"pl-c1\">0</span>)\n      std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>graph_def succesfully loaded into tf_graph<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-k\">else</span>\n      std::cout &lt;&lt; <span class=\"pl-c1\">TF_Message</span>(status) &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">'</span></span>;\n\n    <span class=\"pl-c1\">TF_DeleteImportGraphDefOptions</span>(opts);\n    <span class=\"pl-c1\">TF_DeleteStatus</span>(status);\n    <span class=\"pl-c1\">TF_DeleteGraph</span>(tf_graph);\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n}</pre></div>\n<p>When I run the C++ program and try to load GraphDef generated by the python code (which<br>\nincludes dropout), I get:</p>\n<p><em>Segmentation fault: 11</em></p>\n<p>If I do not include the dropout layer, everything works fine.</p>", "body_text": "I am using Mac OS X 10.11.6, and Python 3.5.1 with tensorflow 0.11.0rc0 version.\nI compiled the following C++ code on top of 0.11.0rc0 version (commit 2dea76c).\nPython code where I create a graph and serialize it as GraphDef\nimport tensorflow as tf\nimport numpy as np\nimport sys\n\ngraph = tf.get_default_graph()\n\nx = tf.placeholder(tf.float64, [None, 3])\nw = tf.Variable(tf.random_normal([3, 3], dtype=tf.float64))\nh = tf.matmul(x, w)\n\nis_training = tf.Variable(True, trainable=False)\nh_dropout = tf.contrib.layers.dropout(h, keep_prob=0.5, is_training=is_training)\n\nsys.stdout.buffer.write(graph.as_graph_def().SerializeToString())\nC++ code where I import the graph:\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <fstream>\n#include <string>\n#include <iostream>\n#include \"tensorflow/c/c_api.h\"\n#include \"tensorflow/core/framework/graph.pb.h\"\n#include \"tensorflow/core/framework/graph_def_util.h\"\n\nint main(int argc, char* argv[]) {\n\n    // loading graph proto\n    tensorflow::GraphDef graph_def;\n    std::ifstream f_in(argv[1]);\n    bool ctrl = graph_def.ParseFromIstream(&f_in);\n    f_in.close();\n    if (ctrl) std::cout << \"deserialization successful\\n\\n\";\n\n    std::cout << \"Graph contents:\\n\";\n    std::cout << tensorflow::SummarizeGraphDef(graph_def) << \"\\n\";\n\n    // loading graph_def as TF_Graph\n    TF_ImportGraphDefOptions* opts = TF_NewImportGraphDefOptions();\n    TF_Status* status = TF_NewStatus();\n    TF_Graph* tf_graph = TF_NewGraph();\n    std::string gd_as_string = std::string();\n    graph_def.SerializeToString(&gd_as_string);\n    TF_Buffer* gd_as_buffer = TF_NewBufferFromString(gd_as_string.c_str(), gd_as_string.length());\n    TF_GraphImportGraphDef(tf_graph, gd_as_buffer, opts, status);\n\n    if (TF_GetCode(status) == 0)\n      std::cout << \"graph_def succesfully loaded into tf_graph\\n\";\n    else\n      std::cout << TF_Message(status) << '\\n';\n\n    TF_DeleteImportGraphDefOptions(opts);\n    TF_DeleteStatus(status);\n    TF_DeleteGraph(tf_graph);\n\n    return 0;\n}\nWhen I run the C++ program and try to load GraphDef generated by the python code (which\nincludes dropout), I get:\nSegmentation fault: 11\nIf I do not include the dropout layer, everything works fine.", "body": "I am using Mac OS X 10.11.6, and Python 3.5.1 with tensorflow 0.11.0rc0 version.\nI compiled the following C++ code on top of 0.11.0rc0 version (commit 2dea76c).\n\nPython code where I create a graph and serialize it as GraphDef\n\n``` python\nimport tensorflow as tf\nimport numpy as np\nimport sys\n\ngraph = tf.get_default_graph()\n\nx = tf.placeholder(tf.float64, [None, 3])\nw = tf.Variable(tf.random_normal([3, 3], dtype=tf.float64))\nh = tf.matmul(x, w)\n\nis_training = tf.Variable(True, trainable=False)\nh_dropout = tf.contrib.layers.dropout(h, keep_prob=0.5, is_training=is_training)\n\nsys.stdout.buffer.write(graph.as_graph_def().SerializeToString())\n```\n\nC++ code where I import the graph:\n\n``` C++\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <fstream>\n#include <string>\n#include <iostream>\n#include \"tensorflow/c/c_api.h\"\n#include \"tensorflow/core/framework/graph.pb.h\"\n#include \"tensorflow/core/framework/graph_def_util.h\"\n\nint main(int argc, char* argv[]) {\n\n    // loading graph proto\n    tensorflow::GraphDef graph_def;\n    std::ifstream f_in(argv[1]);\n    bool ctrl = graph_def.ParseFromIstream(&f_in);\n    f_in.close();\n    if (ctrl) std::cout << \"deserialization successful\\n\\n\";\n\n    std::cout << \"Graph contents:\\n\";\n    std::cout << tensorflow::SummarizeGraphDef(graph_def) << \"\\n\";\n\n    // loading graph_def as TF_Graph\n    TF_ImportGraphDefOptions* opts = TF_NewImportGraphDefOptions();\n    TF_Status* status = TF_NewStatus();\n    TF_Graph* tf_graph = TF_NewGraph();\n    std::string gd_as_string = std::string();\n    graph_def.SerializeToString(&gd_as_string);\n    TF_Buffer* gd_as_buffer = TF_NewBufferFromString(gd_as_string.c_str(), gd_as_string.length());\n    TF_GraphImportGraphDef(tf_graph, gd_as_buffer, opts, status);\n\n    if (TF_GetCode(status) == 0)\n      std::cout << \"graph_def succesfully loaded into tf_graph\\n\";\n    else\n      std::cout << TF_Message(status) << '\\n';\n\n    TF_DeleteImportGraphDefOptions(opts);\n    TF_DeleteStatus(status);\n    TF_DeleteGraph(tf_graph);\n\n    return 0;\n}\n```\n\nWhen I run the C++ program and try to load GraphDef generated by the python code (which \nincludes dropout), I get:\n\n_Segmentation fault: 11_\n\nIf I do not include the dropout layer, everything works fine.\n"}