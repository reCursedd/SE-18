{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/285505805", "html_url": "https://github.com/tensorflow/tensorflow/issues/8051#issuecomment-285505805", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8051", "id": 285505805, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTUwNTgwNQ==", "user": {"login": "ageron", "id": 76661, "node_id": "MDQ6VXNlcjc2NjYx", "avatar_url": "https://avatars3.githubusercontent.com/u/76661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ageron", "html_url": "https://github.com/ageron", "followers_url": "https://api.github.com/users/ageron/followers", "following_url": "https://api.github.com/users/ageron/following{/other_user}", "gists_url": "https://api.github.com/users/ageron/gists{/gist_id}", "starred_url": "https://api.github.com/users/ageron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ageron/subscriptions", "organizations_url": "https://api.github.com/users/ageron/orgs", "repos_url": "https://api.github.com/users/ageron/repos", "events_url": "https://api.github.com/users/ageron/events{/privacy}", "received_events_url": "https://api.github.com/users/ageron/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-09T22:35:22Z", "updated_at": "2017-03-09T22:35:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Apparently there's already a <code>_tensor_conversion_func_registry</code> containing various base types and their corresponding conversion functions to Tensors, located in <code>tensorflow.python.framework</code>.<br>\nNew conversion functions can be registered using <code>register_tensor_conversion_function()</code>, which is part of the <a href=\"https://www.tensorflow.org/api_docs/python/tf/register_tensor_conversion_function\" rel=\"nofollow\">public API</a>.<br>\nSo I guess there's already quite a lot of flexibility. The only thing missing is a way to delegate binary ops to the RHS. Perhaps the first option would be sufficient after all: just return <code>NotImplemented</code> if a <code>TypeError</code> is raised. I'll make the change in the Pull Request.</p>", "body_text": "Apparently there's already a _tensor_conversion_func_registry containing various base types and their corresponding conversion functions to Tensors, located in tensorflow.python.framework.\nNew conversion functions can be registered using register_tensor_conversion_function(), which is part of the public API.\nSo I guess there's already quite a lot of flexibility. The only thing missing is a way to delegate binary ops to the RHS. Perhaps the first option would be sufficient after all: just return NotImplemented if a TypeError is raised. I'll make the change in the Pull Request.", "body": "Apparently there's already a `_tensor_conversion_func_registry` containing various base types and their corresponding conversion functions to Tensors, located in `tensorflow.python.framework`.\r\nNew conversion functions can be registered using `register_tensor_conversion_function()`, which is part of the [public API](https://www.tensorflow.org/api_docs/python/tf/register_tensor_conversion_function).\r\nSo I guess there's already quite a lot of flexibility. The only thing missing is a way to delegate binary ops to the RHS. Perhaps the first option would be sufficient after all: just return `NotImplemented` if a `TypeError` is raised. I'll make the change in the Pull Request."}