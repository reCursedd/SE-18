{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/285463336", "html_url": "https://github.com/tensorflow/tensorflow/issues/8051#issuecomment-285463336", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8051", "id": 285463336, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQ2MzMzNg==", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-09T19:57:53Z", "updated_at": "2017-03-09T19:57:53Z", "author_association": "MEMBER", "body_html": "<blockquote>\n<p>The only problem I see is that the user cannot easily get control in the case where other is a subtype of a supported type (the only option would be to somehow force convert_to_tensor(other) to raise a TypeError, not sure how.</p>\n</blockquote>\n<p>The simple solution is to switch <code>isinstance(obj, cls)</code> checks to exact type checks <code>type(obj) is cls</code>. But I'm not sure it really makes sense to even worry about subclasses of normal TensorFlow types. They aren't really meant for subclassing AFAICT, but python doesn't let you declare a type as \"final\" so there's not much we can do to stop.</p>", "body_text": "The only problem I see is that the user cannot easily get control in the case where other is a subtype of a supported type (the only option would be to somehow force convert_to_tensor(other) to raise a TypeError, not sure how.\n\nThe simple solution is to switch isinstance(obj, cls) checks to exact type checks type(obj) is cls. But I'm not sure it really makes sense to even worry about subclasses of normal TensorFlow types. They aren't really meant for subclassing AFAICT, but python doesn't let you declare a type as \"final\" so there's not much we can do to stop.", "body": "> The only problem I see is that the user cannot easily get control in the case where other is a subtype of a supported type (the only option would be to somehow force convert_to_tensor(other) to raise a TypeError, not sure how. \r\n\r\nThe simple solution is to switch `isinstance(obj, cls)` checks to exact type checks `type(obj) is cls`. But I'm not sure it really makes sense to even worry about subclasses of normal TensorFlow types. They aren't really meant for subclassing AFAICT, but python doesn't let you declare a type as \"final\" so there's not much we can do to stop."}