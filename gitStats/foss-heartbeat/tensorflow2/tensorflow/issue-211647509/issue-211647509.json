{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8051", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8051/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8051/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8051/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8051", "id": 211647509, "node_id": "MDU6SXNzdWUyMTE2NDc1MDk=", "number": 8051, "title": "Make tf.Tensor's magic functions (e.g., `__add__()`) play nice with unknown types", "user": {"login": "ageron", "id": 76661, "node_id": "MDQ6VXNlcjc2NjYx", "avatar_url": "https://avatars3.githubusercontent.com/u/76661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ageron", "html_url": "https://github.com/ageron", "followers_url": "https://api.github.com/users/ageron/followers", "following_url": "https://api.github.com/users/ageron/following{/other_user}", "gists_url": "https://api.github.com/users/ageron/gists{/gist_id}", "starred_url": "https://api.github.com/users/ageron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ageron/subscriptions", "organizations_url": "https://api.github.com/users/ageron/orgs", "repos_url": "https://api.github.com/users/ageron/repos", "events_url": "https://api.github.com/users/ageron/events{/privacy}", "received_events_url": "https://api.github.com/users/ageron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-03-03T10:15:23Z", "updated_at": "2017-04-27T17:25:18Z", "closed_at": "2017-04-27T17:25:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>tf.Tensor</code>'s magic functions should return <code>NotImplemented</code> rather than raising an exception when they are given an object of an unsupported type (i.e., an object that TensorFlow cannot <code>convert_to_tensor()</code>). This would give that object a chance to perform the operation with its reverse magic function (e.g., <code>__radd__()</code>). See the code example below. Note that this is what NumPy arrays do.</p>\n<h3>Environment info</h3>\n<p>Operating System: <strong>Ubuntu 16.10</strong><br>\nInstalled version of CUDA and cuDNN:  <strong>N/A</strong><br>\nInstalled pip package:<br>\n<a href=\"https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.0-cp35-cp35m-linux_x86_64.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.0-cp35-cp35m-linux_x86_64.whl</a><br>\nTensorFlow version: <strong>1.0.0</strong></p>\n<h3>Reproducible example</h3>\n<pre><code>&gt;&gt;&gt; class AmazingMatrix(object):\n...   def __add__(self, b):\n...     print(\"I know how to handle TensorFlow Tensors!\")\n...   def __radd__(self, a):\n...     print(\"I know how to handle TensorFlow Tensors!\")\n... \n&gt;&gt;&gt; am = AmazingMatrix()\n&gt;&gt;&gt; t = tf.constant([[0.]])\n&gt;&gt;&gt; am + t\nI know how to handle TensorFlow Tensors!\n&gt;&gt;&gt; t + am\nTraceback (most recent call last):\n[...]/python/ops/math_ops.py\", line 799, in binary_op_wrapper\n    y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name=\"y\")\n[...]\nTypeError: Expected float32, got &lt;__main__.AmazingMatrix object at 0x7f5999a73518&gt; of type 'AmazingMatrix' instead.\n</code></pre>\n<h3>Related GitHub issues or StackOverflow threads</h3>\n<p><a href=\"http://stackoverflow.com/questions/38599637/overloading-tensorflow-tensor-magic-method-priority-similar-to-numpys-array\" rel=\"nofollow\">http://stackoverflow.com/questions/38599637/overloading-tensorflow-tensor-magic-method-priority-similar-to-numpys-array</a></p>\n<h3>What other attempted solutions have you tried?</h3>\n<p>None. I guess one could create Tensor wrappers, with the appropriate behavior, but it would be quite cumbersome to use.</p>\n<h3>Logs or other output that would be helpful</h3>\n<p>None</p>", "body_text": "tf.Tensor's magic functions should return NotImplemented rather than raising an exception when they are given an object of an unsupported type (i.e., an object that TensorFlow cannot convert_to_tensor()). This would give that object a chance to perform the operation with its reverse magic function (e.g., __radd__()). See the code example below. Note that this is what NumPy arrays do.\nEnvironment info\nOperating System: Ubuntu 16.10\nInstalled version of CUDA and cuDNN:  N/A\nInstalled pip package:\nhttps://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.0-cp35-cp35m-linux_x86_64.whl\nTensorFlow version: 1.0.0\nReproducible example\n>>> class AmazingMatrix(object):\n...   def __add__(self, b):\n...     print(\"I know how to handle TensorFlow Tensors!\")\n...   def __radd__(self, a):\n...     print(\"I know how to handle TensorFlow Tensors!\")\n... \n>>> am = AmazingMatrix()\n>>> t = tf.constant([[0.]])\n>>> am + t\nI know how to handle TensorFlow Tensors!\n>>> t + am\nTraceback (most recent call last):\n[...]/python/ops/math_ops.py\", line 799, in binary_op_wrapper\n    y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name=\"y\")\n[...]\nTypeError: Expected float32, got <__main__.AmazingMatrix object at 0x7f5999a73518> of type 'AmazingMatrix' instead.\n\nRelated GitHub issues or StackOverflow threads\nhttp://stackoverflow.com/questions/38599637/overloading-tensorflow-tensor-magic-method-priority-similar-to-numpys-array\nWhat other attempted solutions have you tried?\nNone. I guess one could create Tensor wrappers, with the appropriate behavior, but it would be quite cumbersome to use.\nLogs or other output that would be helpful\nNone", "body": "`tf.Tensor`'s magic functions should return `NotImplemented` rather than raising an exception when they are given an object of an unsupported type (i.e., an object that TensorFlow cannot `convert_to_tensor()`). This would give that object a chance to perform the operation with its reverse magic function (e.g., `__radd__()`). See the code example below. Note that this is what NumPy arrays do.\r\n\r\n### Environment info\r\nOperating System: **Ubuntu 16.10**\r\nInstalled version of CUDA and cuDNN:  **N/A**\r\nInstalled pip package:\r\nhttps://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.0-cp35-cp35m-linux_x86_64.whl\r\nTensorFlow version: **1.0.0**\r\n\r\n### Reproducible example\r\n\r\n```\r\n>>> class AmazingMatrix(object):\r\n...   def __add__(self, b):\r\n...     print(\"I know how to handle TensorFlow Tensors!\")\r\n...   def __radd__(self, a):\r\n...     print(\"I know how to handle TensorFlow Tensors!\")\r\n... \r\n>>> am = AmazingMatrix()\r\n>>> t = tf.constant([[0.]])\r\n>>> am + t\r\nI know how to handle TensorFlow Tensors!\r\n>>> t + am\r\nTraceback (most recent call last):\r\n[...]/python/ops/math_ops.py\", line 799, in binary_op_wrapper\r\n    y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name=\"y\")\r\n[...]\r\nTypeError: Expected float32, got <__main__.AmazingMatrix object at 0x7f5999a73518> of type 'AmazingMatrix' instead.\r\n```\r\n\r\n### Related GitHub issues or StackOverflow threads\r\nhttp://stackoverflow.com/questions/38599637/overloading-tensorflow-tensor-magic-method-priority-similar-to-numpys-array\r\n\r\n### What other attempted solutions have you tried?\r\nNone. I guess one could create Tensor wrappers, with the appropriate behavior, but it would be quite cumbersome to use.\r\n\r\n### Logs or other output that would be helpful\r\nNone\r\n"}