{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/285295552", "html_url": "https://github.com/tensorflow/tensorflow/issues/8051#issuecomment-285295552", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8051", "id": 285295552, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTI5NTU1Mg==", "user": {"login": "ageron", "id": 76661, "node_id": "MDQ6VXNlcjc2NjYx", "avatar_url": "https://avatars3.githubusercontent.com/u/76661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ageron", "html_url": "https://github.com/ageron", "followers_url": "https://api.github.com/users/ageron/followers", "following_url": "https://api.github.com/users/ageron/following{/other_user}", "gists_url": "https://api.github.com/users/ageron/gists{/gist_id}", "starred_url": "https://api.github.com/users/ageron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ageron/subscriptions", "organizations_url": "https://api.github.com/users/ageron/orgs", "repos_url": "https://api.github.com/users/ageron/repos", "events_url": "https://api.github.com/users/ageron/events{/privacy}", "received_events_url": "https://api.github.com/users/ageron/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-09T09:09:51Z", "updated_at": "2017-03-09T09:09:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks Stephan, awesome insights.  I initially proposed the first solution you suggest. The only problem I see is that the user cannot easily get control in the case where <code>other</code> is a subtype of a supported type (the only option would be to somehow force <code>convert_to_tensor(other)</code> to raise a <code>TypeError</code>, not sure how.  The same is true for the second option you suggest.</p>\n<p>Perhaps it's not such a big deal.<br>\nAlso, I'm wondering, what is the point of trying <code>convert_to_tensor(other)</code> if <code>other</code> is not a known type? Perhaps we should just return <code>NotImplemented</code> systematically in that case?</p>", "body_text": "Thanks Stephan, awesome insights.  I initially proposed the first solution you suggest. The only problem I see is that the user cannot easily get control in the case where other is a subtype of a supported type (the only option would be to somehow force convert_to_tensor(other) to raise a TypeError, not sure how.  The same is true for the second option you suggest.\nPerhaps it's not such a big deal.\nAlso, I'm wondering, what is the point of trying convert_to_tensor(other) if other is not a known type? Perhaps we should just return NotImplemented systematically in that case?", "body": "Thanks Stephan, awesome insights.  I initially proposed the first solution you suggest. The only problem I see is that the user cannot easily get control in the case where `other` is a subtype of a supported type (the only option would be to somehow force `convert_to_tensor(other)` to raise a `TypeError`, not sure how.  The same is true for the second option you suggest.\r\n\r\nPerhaps it's not such a big deal.\r\nAlso, I'm wondering, what is the point of trying `convert_to_tensor(other)` if `other` is not a known type? Perhaps we should just return `NotImplemented` systematically in that case?\r\n"}