{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/285490198", "html_url": "https://github.com/tensorflow/tensorflow/issues/8051#issuecomment-285490198", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8051", "id": 285490198, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQ5MDE5OA==", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-09T21:32:59Z", "updated_at": "2017-03-09T21:33:05Z", "author_association": "MEMBER", "body_html": "<blockquote>\n<p>Also, I'm wondering, what is the point of trying convert_to_tensor(other) if other is not a known type? Perhaps we should just return NotImplemented systematically in that case</p>\n</blockquote>\n<p>Here I was trying to handle other types that can be converted into Tensors but don't know anything about TensorFlow, like built-in Python number and NumPy arrays.</p>\n<p>Maybe explicitly listing types to convert is a better idea, e.g.,</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">TYPES_TO_CONVERT</span> <span class=\"pl-k\">=</span> (tf.Variable, number.Number, numpy.ndarray)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-c1\">__add__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">other</span>):\n  <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(other, <span class=\"pl-c1\">TYPES_TO_CONVERT</span>):\n    other <span class=\"pl-k\">=</span> ops.convert_to_tensor(other)\n  <span class=\"pl-k\">elif</span> <span class=\"pl-c1\">type</span>(other) <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">type</span>(<span class=\"pl-c1\">self</span>):\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">NotImplemented</span>\n  <span class=\"pl-k\">return</span> add_impl(<span class=\"pl-c1\">self</span>, other)</pre></div>", "body_text": "Also, I'm wondering, what is the point of trying convert_to_tensor(other) if other is not a known type? Perhaps we should just return NotImplemented systematically in that case\n\nHere I was trying to handle other types that can be converted into Tensors but don't know anything about TensorFlow, like built-in Python number and NumPy arrays.\nMaybe explicitly listing types to convert is a better idea, e.g.,\nTYPES_TO_CONVERT = (tf.Variable, number.Number, numpy.ndarray)\n\ndef __add__(self, other):\n  if isinstance(other, TYPES_TO_CONVERT):\n    other = ops.convert_to_tensor(other)\n  elif type(other) is not type(self):\n    return NotImplemented\n  return add_impl(self, other)", "body": "> Also, I'm wondering, what is the point of trying convert_to_tensor(other) if other is not a known type? Perhaps we should just return NotImplemented systematically in that case\r\n\r\nHere I was trying to handle other types that can be converted into Tensors but don't know anything about TensorFlow, like built-in Python number and NumPy arrays.\r\n\r\nMaybe explicitly listing types to convert is a better idea, e.g.,\r\n```python\r\nTYPES_TO_CONVERT = (tf.Variable, number.Number, numpy.ndarray)\r\n\r\ndef __add__(self, other):\r\n  if isinstance(other, TYPES_TO_CONVERT):\r\n    other = ops.convert_to_tensor(other)\r\n  elif type(other) is not type(self):\r\n    return NotImplemented\r\n  return add_impl(self, other)\r\n```"}