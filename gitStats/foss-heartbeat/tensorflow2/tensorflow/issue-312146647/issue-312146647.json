{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18302", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18302/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18302/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18302/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18302", "id": 312146647, "node_id": "MDU6SXNzdWUzMTIxNDY2NDc=", "number": 18302, "title": "Add sparse tensor support to Dataset.padded_batch()", "user": {"login": "thomasquintana", "id": 1891840, "node_id": "MDQ6VXNlcjE4OTE4NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1891840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasquintana", "html_url": "https://github.com/thomasquintana", "followers_url": "https://api.github.com/users/thomasquintana/followers", "following_url": "https://api.github.com/users/thomasquintana/following{/other_user}", "gists_url": "https://api.github.com/users/thomasquintana/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasquintana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasquintana/subscriptions", "organizations_url": "https://api.github.com/users/thomasquintana/orgs", "repos_url": "https://api.github.com/users/thomasquintana/repos", "events_url": "https://api.github.com/users/thomasquintana/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasquintana/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "jsimsa", "id": 1072079, "node_id": "MDQ6VXNlcjEwNzIwNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1072079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsimsa", "html_url": "https://github.com/jsimsa", "followers_url": "https://api.github.com/users/jsimsa/followers", "following_url": "https://api.github.com/users/jsimsa/following{/other_user}", "gists_url": "https://api.github.com/users/jsimsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsimsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsimsa/subscriptions", "organizations_url": "https://api.github.com/users/jsimsa/orgs", "repos_url": "https://api.github.com/users/jsimsa/repos", "events_url": "https://api.github.com/users/jsimsa/events{/privacy}", "received_events_url": "https://api.github.com/users/jsimsa/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jsimsa", "id": 1072079, "node_id": "MDQ6VXNlcjEwNzIwNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1072079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsimsa", "html_url": "https://github.com/jsimsa", "followers_url": "https://api.github.com/users/jsimsa/followers", "following_url": "https://api.github.com/users/jsimsa/following{/other_user}", "gists_url": "https://api.github.com/users/jsimsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsimsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsimsa/subscriptions", "organizations_url": "https://api.github.com/users/jsimsa/orgs", "repos_url": "https://api.github.com/users/jsimsa/repos", "events_url": "https://api.github.com/users/jsimsa/events{/privacy}", "received_events_url": "https://api.github.com/users/jsimsa/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-04-06T23:18:33Z", "updated_at": "2018-07-06T20:51:05Z", "closed_at": "2018-07-06T20:51:04Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1072079\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jsimsa\">@jsimsa</a> Please help :) Thx</p>\n<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.7.0</li>\n<li><strong>Python version</strong>:  3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0/7.0.3.11</li>\n<li><strong>GPU model and memory</strong>: TitanX 12Gb</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<pre><code>Traceback (most recent call last):\n  File \"trainer.py\", line 70, in &lt;module&gt;\n    main(ARGS)\n  File \"trainer.py\", line 20, in main\n    train(source, meta, args.destination)\n  File \"trainer.py\", line 49, in train\n    dataset = dataset.padded_batch(batch_size, padded_shapes=(0, None, 0, None))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/data/ops/dataset_ops.py\", line 821, in padded_batch\n    return PaddedBatchDataset(self, batch_size, padded_shapes, padding_values)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/data/ops/dataset_ops.py\", line 1713, in __init__\n    \"Batching of padded sparse tensors is not currently supported\")\nTypeError: Batching of padded sparse tensors is not currently supported\n</code></pre>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> argparse <span class=\"pl-k\">import</span> ArgumentParser\n<span class=\"pl-k\">import</span> pickle\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">args</span>):\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Generate the complete source and meta paths.</span>\n    source <span class=\"pl-k\">=</span> args.source\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> source.endswith(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>.tfrecords<span class=\"pl-pds\">'</span></span>):\n        source <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">{}</span>.tfrecords<span class=\"pl-pds\">'</span></span>.format(source)\n\n    meta <span class=\"pl-k\">=</span> args.source\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> source.endswith(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>.tfrecords<span class=\"pl-pds\">'</span></span>):\n        meta <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">{}</span>.meta.pkl<span class=\"pl-pds\">'</span></span>.format(meta)\n    <span class=\"pl-k\">else</span>:\n        meta <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">{}</span>.meta.pkl<span class=\"pl-pds\">'</span></span>.format(meta.rsplit(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>.<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>)[<span class=\"pl-c1\">0</span>])\n    \n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Train the model.</span>\n    train(source, meta, args.destination)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">parse</span>(<span class=\"pl-smi\">example_proto</span>):\n\n    features <span class=\"pl-k\">=</span> {\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bucket<span class=\"pl-pds\">'</span></span>: tf.FixedLenFeature([], tf.int64),\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>coefficients<span class=\"pl-pds\">'</span></span>: tf.FixedLenFeature([], tf.string),\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>coefficients_length<span class=\"pl-pds\">'</span></span>: tf.FixedLenFeature([], tf.int64),\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>label<span class=\"pl-pds\">'</span></span>: tf.VarLenFeature(tf.int64)\n    }\n    parsed_features <span class=\"pl-k\">=</span> tf.parse_single_example(example_proto, features)\n\n    bucket <span class=\"pl-k\">=</span> tf.cast(parsed_features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>bucket<span class=\"pl-pds\">'</span></span>], tf.int32)\n    coefficients <span class=\"pl-k\">=</span> tf.decode_raw(parsed_features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>coefficients<span class=\"pl-pds\">'</span></span>], tf.float32)\n    coefficients_length <span class=\"pl-k\">=</span> tf.cast(parsed_features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>coefficients_length<span class=\"pl-pds\">'</span></span>], tf.int32)\n    label <span class=\"pl-k\">=</span> tf.cast(parsed_features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>label<span class=\"pl-pds\">'</span></span>], tf.int32)\n\n    <span class=\"pl-k\">return</span> bucket, coefficients, coefficients_length, label\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">train</span>(<span class=\"pl-smi\">source</span>, <span class=\"pl-smi\">meta</span>, <span class=\"pl-smi\">destination</span>, <span class=\"pl-smi\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">64</span>, <span class=\"pl-smi\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>):\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Load the training meta data.</span>\n    <span class=\"pl-v\">file</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">open</span>(meta, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>)\n    meta <span class=\"pl-k\">=</span> pickle.load(<span class=\"pl-v\">file</span>)\n    <span class=\"pl-v\">file</span>.close()\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Create a tf.data input pipe line.</span>\n    dataset <span class=\"pl-k\">=</span> tf.data.TFRecordDataset([source])\n    dataset <span class=\"pl-k\">=</span> dataset.map(parse)\n    dataset <span class=\"pl-k\">=</span> dataset.padded_batch(batch_size, <span class=\"pl-v\">padded_shapes</span><span class=\"pl-k\">=</span>([], [<span class=\"pl-c1\">None</span>], [], [<span class=\"pl-c1\">None</span>]))\n    dataset <span class=\"pl-k\">=</span> dataset.repeat(epochs) \n    iterator <span class=\"pl-k\">=</span> dataset.make_initializable_iterator()\n\n    bucket, coefficients, coefficients_length, label <span class=\"pl-k\">=</span> iterator.get_next()\n\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> session:\n        \n        session.run(iterator.initializer)\n        \n        <span class=\"pl-c1\">print</span>(session.run([bucket, coefficients, coefficients_length, label]))\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    \n    <span class=\"pl-c1\">PARSER</span> <span class=\"pl-k\">=</span> ArgumentParser(<span class=\"pl-v\">description</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Trains a model.<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c1\">PARSER</span>.add_argument(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>--destination<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">required</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">type</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">str</span>,\n    \t\t\t\t\t<span class=\"pl-v\">help</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>The path where the trained model should be stored.<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c1\">PARSER</span>.add_argument(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>--source<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">required</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">type</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">str</span>,\n    \t\t\t\t\t<span class=\"pl-v\">help</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>The path to the training data.<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c1\">ARGS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">PARSER</span>.parse_args()\n\n    main(<span class=\"pl-c1\">ARGS</span>)\n</pre></div>", "body_text": "@jsimsa Please help :) Thx\nPlease go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.7.0\nPython version:  3.5.2\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: 9.0/7.0.3.11\nGPU model and memory: TitanX 12Gb\nExact command to reproduce:\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nTraceback (most recent call last):\n  File \"trainer.py\", line 70, in <module>\n    main(ARGS)\n  File \"trainer.py\", line 20, in main\n    train(source, meta, args.destination)\n  File \"trainer.py\", line 49, in train\n    dataset = dataset.padded_batch(batch_size, padded_shapes=(0, None, 0, None))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/data/ops/dataset_ops.py\", line 821, in padded_batch\n    return PaddedBatchDataset(self, batch_size, padded_shapes, padding_values)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/data/ops/dataset_ops.py\", line 1713, in __init__\n    \"Batching of padded sparse tensors is not currently supported\")\nTypeError: Batching of padded sparse tensors is not currently supported\n\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nfrom argparse import ArgumentParser\nimport pickle\n\nimport tensorflow as tf\n\ndef main(args):\n\n    # Generate the complete source and meta paths.\n    source = args.source\n    if not source.endswith('.tfrecords'):\n        source = '{}.tfrecords'.format(source)\n\n    meta = args.source\n    if not source.endswith('.tfrecords'):\n        meta = '{}.meta.pkl'.format(meta)\n    else:\n        meta = '{}.meta.pkl'.format(meta.rsplit('.', 1)[0])\n    \n    # Train the model.\n    train(source, meta, args.destination)\n\ndef parse(example_proto):\n\n    features = {\n        'bucket': tf.FixedLenFeature([], tf.int64),\n        'coefficients': tf.FixedLenFeature([], tf.string),\n        'coefficients_length': tf.FixedLenFeature([], tf.int64),\n        'label': tf.VarLenFeature(tf.int64)\n    }\n    parsed_features = tf.parse_single_example(example_proto, features)\n\n    bucket = tf.cast(parsed_features['bucket'], tf.int32)\n    coefficients = tf.decode_raw(parsed_features['coefficients'], tf.float32)\n    coefficients_length = tf.cast(parsed_features['coefficients_length'], tf.int32)\n    label = tf.cast(parsed_features['label'], tf.int32)\n\n    return bucket, coefficients, coefficients_length, label\n\ndef train(source, meta, destination, batch_size=64, epochs=1):\n\n    # Load the training meta data.\n    file = open(meta, 'rb')\n    meta = pickle.load(file)\n    file.close()\n\n    # Create a tf.data input pipe line.\n    dataset = tf.data.TFRecordDataset([source])\n    dataset = dataset.map(parse)\n    dataset = dataset.padded_batch(batch_size, padded_shapes=([], [None], [], [None]))\n    dataset = dataset.repeat(epochs) \n    iterator = dataset.make_initializable_iterator()\n\n    bucket, coefficients, coefficients_length, label = iterator.get_next()\n\n    with tf.Session() as session:\n        \n        session.run(iterator.initializer)\n        \n        print(session.run([bucket, coefficients, coefficients_length, label]))\n\nif __name__ == '__main__':\n    \n    PARSER = ArgumentParser(description='Trains a model.')\n    PARSER.add_argument('--destination', required=True, type=str,\n    \t\t\t\t\thelp='The path where the trained model should be stored.')\n    PARSER.add_argument('--source', required=True, type=str,\n    \t\t\t\t\thelp='The path to the training data.')\n    ARGS = PARSER.parse_args()\n\n    main(ARGS)", "body": "@jsimsa Please help :) Thx\r\n\r\nPlease go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.7.0\r\n- **Python version**:  3.5.2\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: 9.0/7.0.3.11\r\n- **GPU model and memory**: TitanX 12Gb\r\n- **Exact command to reproduce**:\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n```\r\nTraceback (most recent call last):\r\n  File \"trainer.py\", line 70, in <module>\r\n    main(ARGS)\r\n  File \"trainer.py\", line 20, in main\r\n    train(source, meta, args.destination)\r\n  File \"trainer.py\", line 49, in train\r\n    dataset = dataset.padded_batch(batch_size, padded_shapes=(0, None, 0, None))\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/data/ops/dataset_ops.py\", line 821, in padded_batch\r\n    return PaddedBatchDataset(self, batch_size, padded_shapes, padding_values)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/data/ops/dataset_ops.py\", line 1713, in __init__\r\n    \"Batching of padded sparse tensors is not currently supported\")\r\nTypeError: Batching of padded sparse tensors is not currently supported\r\n```\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n```python\r\nfrom argparse import ArgumentParser\r\nimport pickle\r\n\r\nimport tensorflow as tf\r\n\r\ndef main(args):\r\n\r\n    # Generate the complete source and meta paths.\r\n    source = args.source\r\n    if not source.endswith('.tfrecords'):\r\n        source = '{}.tfrecords'.format(source)\r\n\r\n    meta = args.source\r\n    if not source.endswith('.tfrecords'):\r\n        meta = '{}.meta.pkl'.format(meta)\r\n    else:\r\n        meta = '{}.meta.pkl'.format(meta.rsplit('.', 1)[0])\r\n    \r\n    # Train the model.\r\n    train(source, meta, args.destination)\r\n\r\ndef parse(example_proto):\r\n\r\n    features = {\r\n        'bucket': tf.FixedLenFeature([], tf.int64),\r\n        'coefficients': tf.FixedLenFeature([], tf.string),\r\n        'coefficients_length': tf.FixedLenFeature([], tf.int64),\r\n        'label': tf.VarLenFeature(tf.int64)\r\n    }\r\n    parsed_features = tf.parse_single_example(example_proto, features)\r\n\r\n    bucket = tf.cast(parsed_features['bucket'], tf.int32)\r\n    coefficients = tf.decode_raw(parsed_features['coefficients'], tf.float32)\r\n    coefficients_length = tf.cast(parsed_features['coefficients_length'], tf.int32)\r\n    label = tf.cast(parsed_features['label'], tf.int32)\r\n\r\n    return bucket, coefficients, coefficients_length, label\r\n\r\ndef train(source, meta, destination, batch_size=64, epochs=1):\r\n\r\n    # Load the training meta data.\r\n    file = open(meta, 'rb')\r\n    meta = pickle.load(file)\r\n    file.close()\r\n\r\n    # Create a tf.data input pipe line.\r\n    dataset = tf.data.TFRecordDataset([source])\r\n    dataset = dataset.map(parse)\r\n    dataset = dataset.padded_batch(batch_size, padded_shapes=([], [None], [], [None]))\r\n    dataset = dataset.repeat(epochs) \r\n    iterator = dataset.make_initializable_iterator()\r\n\r\n    bucket, coefficients, coefficients_length, label = iterator.get_next()\r\n\r\n    with tf.Session() as session:\r\n        \r\n        session.run(iterator.initializer)\r\n        \r\n        print(session.run([bucket, coefficients, coefficients_length, label]))\r\n\r\nif __name__ == '__main__':\r\n    \r\n    PARSER = ArgumentParser(description='Trains a model.')\r\n    PARSER.add_argument('--destination', required=True, type=str,\r\n    \t\t\t\t\thelp='The path where the trained model should be stored.')\r\n    PARSER.add_argument('--source', required=True, type=str,\r\n    \t\t\t\t\thelp='The path to the training data.')\r\n    ARGS = PARSER.parse_args()\r\n\r\n    main(ARGS)\r\n\r\n```"}