{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19493", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19493/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19493/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19493/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19493", "id": 325638955, "node_id": "MDU6SXNzdWUzMjU2Mzg5NTU=", "number": 19493, "title": "How to get the output of a layer when making predictions?", "user": {"login": "universewill", "id": 6790730, "node_id": "MDQ6VXNlcjY3OTA3MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/6790730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/universewill", "html_url": "https://github.com/universewill", "followers_url": "https://api.github.com/users/universewill/followers", "following_url": "https://api.github.com/users/universewill/following{/other_user}", "gists_url": "https://api.github.com/users/universewill/gists{/gist_id}", "starred_url": "https://api.github.com/users/universewill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/universewill/subscriptions", "organizations_url": "https://api.github.com/users/universewill/orgs", "repos_url": "https://api.github.com/users/universewill/repos", "events_url": "https://api.github.com/users/universewill/events{/privacy}", "received_events_url": "https://api.github.com/users/universewill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-05-23T10:12:11Z", "updated_at": "2018-05-28T15:18:07Z", "closed_at": "2018-05-28T15:18:07Z", "author_association": "NONE", "body_html": "<p>My code is something like this:</p>\n<pre><code>        from tensorflow.contrib.layers import fully_connected\n\n        hidden1 = fully_connected(train_inputs, hidden[0], scope=\"hidden1\") \n        hidden2 = fully_connected(hidden1, hidden[1], scope=\"hidden2\")\n        u = fully_connected(hidden2, hidden[2], scope=\"u\")\n\n        loss = tf.reduce_mean(\n            tf.nn.sampled_softmax_loss(\n                weights=nce_weights,\n                biases=nce_biases,\n                labels=train_labels,\n                inputs=u,\n                num_sampled=sample_num,\n                num_classes=class_num,\n                remove_accidental_hits=True),\n            name='loss')\n</code></pre>\n<p>After training, i loaded the model and make predictions for my data. I want to get the 'u' scope layer output in the net as output. How can i achieve that?<br>\nNotice that 'u' is a scope define, so i can not just use sess.run(['u:0'])</p>\n<p>I load the model as follows:</p>\n<pre><code>    sess = tf.Session()\n    saver = tf.train.import_meta_graph(meta_path)\n    saver.restore(sess, model_path)\n</code></pre>", "body_text": "My code is something like this:\n        from tensorflow.contrib.layers import fully_connected\n\n        hidden1 = fully_connected(train_inputs, hidden[0], scope=\"hidden1\") \n        hidden2 = fully_connected(hidden1, hidden[1], scope=\"hidden2\")\n        u = fully_connected(hidden2, hidden[2], scope=\"u\")\n\n        loss = tf.reduce_mean(\n            tf.nn.sampled_softmax_loss(\n                weights=nce_weights,\n                biases=nce_biases,\n                labels=train_labels,\n                inputs=u,\n                num_sampled=sample_num,\n                num_classes=class_num,\n                remove_accidental_hits=True),\n            name='loss')\n\nAfter training, i loaded the model and make predictions for my data. I want to get the 'u' scope layer output in the net as output. How can i achieve that?\nNotice that 'u' is a scope define, so i can not just use sess.run(['u:0'])\nI load the model as follows:\n    sess = tf.Session()\n    saver = tf.train.import_meta_graph(meta_path)\n    saver.restore(sess, model_path)", "body": "My code is something like this:\r\n```\r\n        from tensorflow.contrib.layers import fully_connected\r\n\r\n        hidden1 = fully_connected(train_inputs, hidden[0], scope=\"hidden1\") \r\n        hidden2 = fully_connected(hidden1, hidden[1], scope=\"hidden2\")\r\n        u = fully_connected(hidden2, hidden[2], scope=\"u\")\r\n\r\n        loss = tf.reduce_mean(\r\n            tf.nn.sampled_softmax_loss(\r\n                weights=nce_weights,\r\n                biases=nce_biases,\r\n                labels=train_labels,\r\n                inputs=u,\r\n                num_sampled=sample_num,\r\n                num_classes=class_num,\r\n                remove_accidental_hits=True),\r\n            name='loss')\r\n```\r\n\r\nAfter training, i loaded the model and make predictions for my data. I want to get the 'u' scope layer output in the net as output. How can i achieve that?\r\nNotice that 'u' is a scope define, so i can not just use sess.run(['u:0'])\r\n\r\nI load the model as follows:\r\n```\r\n    sess = tf.Session()\r\n    saver = tf.train.import_meta_graph(meta_path)\r\n    saver.restore(sess, model_path)\r\n```\r\n"}