{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13306", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13306/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13306/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13306/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13306", "id": 260524748, "node_id": "MDU6SXNzdWUyNjA1MjQ3NDg=", "number": 13306, "title": "How to set include path and lib path when building custom code on macOS", "user": {"login": "formath", "id": 6040127, "node_id": "MDQ6VXNlcjYwNDAxMjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6040127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/formath", "html_url": "https://github.com/formath", "followers_url": "https://api.github.com/users/formath/followers", "following_url": "https://api.github.com/users/formath/following{/other_user}", "gists_url": "https://api.github.com/users/formath/gists{/gist_id}", "starred_url": "https://api.github.com/users/formath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/formath/subscriptions", "organizations_url": "https://api.github.com/users/formath/orgs", "repos_url": "https://api.github.com/users/formath/repos", "events_url": "https://api.github.com/users/formath/events{/privacy}", "received_events_url": "https://api.github.com/users/formath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-26T07:50:26Z", "updated_at": "2017-10-09T04:27:59Z", "closed_at": "2017-10-09T04:27:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Firstly, I set CC=/usr/local/bin/gcc-6 and CXX=/usr/local/bin/g++-6. Then I built tensorflow from source using <code>sh tensorflow/contrib/makefile/build_all_ios.sh</code> on macOS 10.12.5 and it done successfully. Lastly, I built a test cpp using CMake but it failed.</p>\n<p>The reasons I guess maybe:</p>\n<ol>\n<li>Tensorflow built using default clang but not g++-6. So how to set compiler when using <code>tensorflow/contrib/makefile/build_all_ios.sh</code>?</li>\n<li>The include and lib path in CMakeLists.txt may be wrong.</li>\n</ol>\n<pre><code>#include \"tensorflow/core/public/session.h\"\n#include \"tensorflow/core/platform/env.h\"\nusing namespace tensorflow;\nint main(int argc, char* argv[]) {\n  // Initialize a tensorflow session\n  Session* session;\n  Status status = NewSession(SessionOptions(), &amp;session);\n  if (!status.ok()) {\n    std::cout &lt;&lt; status.ToString() &lt;&lt; \"\\n\";\n    return 1;\n  }\n  session-&gt;Close();\n  return 0;\n}\n</code></pre>\n<p>In my CMakeLists.txt, I set include path</p>\n<pre><code>${PROJECT_SOURCE_DIR}/../tensorflow\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/proto\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/protobuf-host/include\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/downloads/eigen\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/downloads/nsync/public\n</code></pre>\n<p>and the library path</p>\n<pre><code>link_directories(\n\t${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/lib/ios_X86_64\n\t${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/protobuf_ios/lib/iossim_x86_64/lib)\nset(DEMO_LINKER_LIBS \"\")\nlist(APPEND DEMO_LINKER_LIBS libtensorflow-core-x86_64.a libprotobuf-lite.a libprotobuf.a)\n</code></pre>\n<p>Compile ok but errors occur when linking. What's wrong in my use? Thanks.</p>\n<pre><code>ld: warning: URGENT: building for OSX, but linking in object file (/Users/formath/github/tensorflow/tensorflow/contrib/makefile/gen/lib/ios_X86_64/libtensorflow-core-x86_64.a(session.o)) built for iOS. Note: This will be an error in the future.\nld: warning: URGENT: building for OSX, but linking in object file (/Users/formath/github/tensorflow/tensorflow/contrib/makefile/gen/lib/ios_X86_64/libtensorflow-core-x86_64.a(config.pb.o)) built for iOS. Note: This will be an error in the future.(/Users/formath/github/tensorflow/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a(config.pb.o)) built for iOS. Note: This will be an error in the future.\nUndefined symbols for architecture x86_64:\n  \"tensorflow::internal::CheckOpMessageBuilder::NewString[abi:cxx11]()\", referenced from:\n      std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* tensorflow::internal::MakeCheckOpString&lt;int, int&gt;(int const&amp;, int const&amp;, char const*) in test.cc.o\n  \"nsync::nsync_mu_init(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::SessionFactory::Register(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, tensorflow::SessionFactory*) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::SessionFactory::GetFactory(tensorflow::SessionOptions const&amp;, tensorflow::SessionFactory**) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::Env::Env()   in libtensorflow-core-x86_64.a(env.o)\n  \"nsync::nsync_mu_lock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::SessionFactory::Register(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, tensorflow::SessionFactory*) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::SessionFactory::GetFactory(tensorflow::SessionOptions const&amp;, tensorflow::SessionFactory**) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::FileSystemRegistryImpl::Register(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::function&lt;tensorflow::FileSystem* ()&gt;) in libtensorflow-core-x86_64.a(env.o)\n      tensorflow::FileSystemRegistryImpl::Lookup(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) in libtensorflow-core-x86_64.a(env.o)\n      tensorflow::FileSystemRegistryImpl::GetRegisteredFileSystemSchemes(std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;*) in libtensorflow-core-x86_64.a(env.o)\n  \"nsync::nsync_mu_unlock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::SessionFactory::Register(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, tensorflow::SessionFactory*) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::SessionFactory::GetFactory(tensorflow::SessionOptions const&amp;, tensorflow::SessionFactory**) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::FileSystemRegistryImpl::Register(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::function&lt;tensorflow::FileSystem* ()&gt;) in libtensorflow-core-x86_64.a(env.o)\n      tensorflow::FileSystemRegistryImpl::Lookup(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) in libtensorflow-core-x86_64.a(env.o)\n      tensorflow::FileSystemRegistryImpl::GetRegisteredFileSystemSchemes(std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt;*) in libtensorflow-core-x86_64.a(env.o)\n  \"tensorflow::Status::ToString[abi:cxx11]() const\", referenced from:\n      _main in test.cc.o\n  \"std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::at(unsigned long) const\", referenced from:\n      google::protobuf::io::Tokenizer::IsIdentifier(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) in libprotobuf.a(tokenizer.o)\n  \"std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::find(char const*, unsigned long, unsigned long) const\", referenced from:\n      google::protobuf::GlobalReplaceSubstring(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) in libprotobuf-lite.a(strutil.o)\n      tensorflow::str_util::StringReplace(tensorflow::StringPiece, tensorflow::StringPiece, tensorflow::StringPiece, bool) in libtensorflow-core-x86_64.a(str_util.o)\n</code></pre>", "body_text": "Firstly, I set CC=/usr/local/bin/gcc-6 and CXX=/usr/local/bin/g++-6. Then I built tensorflow from source using sh tensorflow/contrib/makefile/build_all_ios.sh on macOS 10.12.5 and it done successfully. Lastly, I built a test cpp using CMake but it failed.\nThe reasons I guess maybe:\n\nTensorflow built using default clang but not g++-6. So how to set compiler when using tensorflow/contrib/makefile/build_all_ios.sh?\nThe include and lib path in CMakeLists.txt may be wrong.\n\n#include \"tensorflow/core/public/session.h\"\n#include \"tensorflow/core/platform/env.h\"\nusing namespace tensorflow;\nint main(int argc, char* argv[]) {\n  // Initialize a tensorflow session\n  Session* session;\n  Status status = NewSession(SessionOptions(), &session);\n  if (!status.ok()) {\n    std::cout << status.ToString() << \"\\n\";\n    return 1;\n  }\n  session->Close();\n  return 0;\n}\n\nIn my CMakeLists.txt, I set include path\n${PROJECT_SOURCE_DIR}/../tensorflow\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/proto\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/protobuf-host/include\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/downloads/eigen\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/downloads/nsync/public\n\nand the library path\nlink_directories(\n\t${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/lib/ios_X86_64\n\t${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/protobuf_ios/lib/iossim_x86_64/lib)\nset(DEMO_LINKER_LIBS \"\")\nlist(APPEND DEMO_LINKER_LIBS libtensorflow-core-x86_64.a libprotobuf-lite.a libprotobuf.a)\n\nCompile ok but errors occur when linking. What's wrong in my use? Thanks.\nld: warning: URGENT: building for OSX, but linking in object file (/Users/formath/github/tensorflow/tensorflow/contrib/makefile/gen/lib/ios_X86_64/libtensorflow-core-x86_64.a(session.o)) built for iOS. Note: This will be an error in the future.\nld: warning: URGENT: building for OSX, but linking in object file (/Users/formath/github/tensorflow/tensorflow/contrib/makefile/gen/lib/ios_X86_64/libtensorflow-core-x86_64.a(config.pb.o)) built for iOS. Note: This will be an error in the future.(/Users/formath/github/tensorflow/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a(config.pb.o)) built for iOS. Note: This will be an error in the future.\nUndefined symbols for architecture x86_64:\n  \"tensorflow::internal::CheckOpMessageBuilder::NewString[abi:cxx11]()\", referenced from:\n      std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* tensorflow::internal::MakeCheckOpString<int, int>(int const&, int const&, char const*) in test.cc.o\n  \"nsync::nsync_mu_init(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::SessionFactory::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, tensorflow::SessionFactory*) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::SessionFactory::GetFactory(tensorflow::SessionOptions const&, tensorflow::SessionFactory**) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::Env::Env()   in libtensorflow-core-x86_64.a(env.o)\n  \"nsync::nsync_mu_lock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::SessionFactory::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, tensorflow::SessionFactory*) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::SessionFactory::GetFactory(tensorflow::SessionOptions const&, tensorflow::SessionFactory**) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::FileSystemRegistryImpl::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::function<tensorflow::FileSystem* ()>) in libtensorflow-core-x86_64.a(env.o)\n      tensorflow::FileSystemRegistryImpl::Lookup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in libtensorflow-core-x86_64.a(env.o)\n      tensorflow::FileSystemRegistryImpl::GetRegisteredFileSystemSchemes(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*) in libtensorflow-core-x86_64.a(env.o)\n  \"nsync::nsync_mu_unlock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::SessionFactory::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, tensorflow::SessionFactory*) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::SessionFactory::GetFactory(tensorflow::SessionOptions const&, tensorflow::SessionFactory**) in libtensorflow-core-x86_64.a(session_factory.o)\n      tensorflow::FileSystemRegistryImpl::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::function<tensorflow::FileSystem* ()>) in libtensorflow-core-x86_64.a(env.o)\n      tensorflow::FileSystemRegistryImpl::Lookup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in libtensorflow-core-x86_64.a(env.o)\n      tensorflow::FileSystemRegistryImpl::GetRegisteredFileSystemSchemes(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*) in libtensorflow-core-x86_64.a(env.o)\n  \"tensorflow::Status::ToString[abi:cxx11]() const\", referenced from:\n      _main in test.cc.o\n  \"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::at(unsigned long) const\", referenced from:\n      google::protobuf::io::Tokenizer::IsIdentifier(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in libprotobuf.a(tokenizer.o)\n  \"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::find(char const*, unsigned long, unsigned long) const\", referenced from:\n      google::protobuf::GlobalReplaceSubstring(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) in libprotobuf-lite.a(strutil.o)\n      tensorflow::str_util::StringReplace(tensorflow::StringPiece, tensorflow::StringPiece, tensorflow::StringPiece, bool) in libtensorflow-core-x86_64.a(str_util.o)", "body": "Firstly, I set CC=/usr/local/bin/gcc-6 and CXX=/usr/local/bin/g++-6. Then I built tensorflow from source using `sh tensorflow/contrib/makefile/build_all_ios.sh` on macOS 10.12.5 and it done successfully. Lastly, I built a test cpp using CMake but it failed. \r\n\r\nThe reasons I guess maybe:\r\n1. Tensorflow built using default clang but not g++-6. So how to set compiler when using `tensorflow/contrib/makefile/build_all_ios.sh`?\r\n2. The include and lib path in CMakeLists.txt may be wrong.\r\n\r\n```\r\n#include \"tensorflow/core/public/session.h\"\r\n#include \"tensorflow/core/platform/env.h\"\r\nusing namespace tensorflow;\r\nint main(int argc, char* argv[]) {\r\n  // Initialize a tensorflow session\r\n  Session* session;\r\n  Status status = NewSession(SessionOptions(), &session);\r\n  if (!status.ok()) {\r\n    std::cout << status.ToString() << \"\\n\";\r\n    return 1;\r\n  }\r\n  session->Close();\r\n  return 0;\r\n}\r\n```\r\nIn my CMakeLists.txt, I set include path \r\n```\r\n${PROJECT_SOURCE_DIR}/../tensorflow\r\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/proto\r\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/protobuf-host/include\r\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/downloads/eigen\r\n${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/downloads/nsync/public\r\n```\r\nand the library path\r\n```\r\nlink_directories(\r\n\t${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/lib/ios_X86_64\r\n\t${PROJECT_SOURCE_DIR}/../tensorflow/tensorflow/contrib/makefile/gen/protobuf_ios/lib/iossim_x86_64/lib)\r\nset(DEMO_LINKER_LIBS \"\")\r\nlist(APPEND DEMO_LINKER_LIBS libtensorflow-core-x86_64.a libprotobuf-lite.a libprotobuf.a)\r\n```\r\n\r\nCompile ok but errors occur when linking. What's wrong in my use? Thanks.\r\n```\r\nld: warning: URGENT: building for OSX, but linking in object file (/Users/formath/github/tensorflow/tensorflow/contrib/makefile/gen/lib/ios_X86_64/libtensorflow-core-x86_64.a(session.o)) built for iOS. Note: This will be an error in the future.\r\nld: warning: URGENT: building for OSX, but linking in object file (/Users/formath/github/tensorflow/tensorflow/contrib/makefile/gen/lib/ios_X86_64/libtensorflow-core-x86_64.a(config.pb.o)) built for iOS. Note: This will be an error in the future.(/Users/formath/github/tensorflow/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a(config.pb.o)) built for iOS. Note: This will be an error in the future.\r\nUndefined symbols for architecture x86_64:\r\n  \"tensorflow::internal::CheckOpMessageBuilder::NewString[abi:cxx11]()\", referenced from:\r\n      std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* tensorflow::internal::MakeCheckOpString<int, int>(int const&, int const&, char const*) in test.cc.o\r\n  \"nsync::nsync_mu_init(nsync::nsync_mu_s_*)\", referenced from:\r\n      tensorflow::SessionFactory::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, tensorflow::SessionFactory*) in libtensorflow-core-x86_64.a(session_factory.o)\r\n      tensorflow::SessionFactory::GetFactory(tensorflow::SessionOptions const&, tensorflow::SessionFactory**) in libtensorflow-core-x86_64.a(session_factory.o)\r\n      tensorflow::Env::Env()   in libtensorflow-core-x86_64.a(env.o)\r\n  \"nsync::nsync_mu_lock(nsync::nsync_mu_s_*)\", referenced from:\r\n      tensorflow::SessionFactory::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, tensorflow::SessionFactory*) in libtensorflow-core-x86_64.a(session_factory.o)\r\n      tensorflow::SessionFactory::GetFactory(tensorflow::SessionOptions const&, tensorflow::SessionFactory**) in libtensorflow-core-x86_64.a(session_factory.o)\r\n      tensorflow::FileSystemRegistryImpl::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::function<tensorflow::FileSystem* ()>) in libtensorflow-core-x86_64.a(env.o)\r\n      tensorflow::FileSystemRegistryImpl::Lookup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in libtensorflow-core-x86_64.a(env.o)\r\n      tensorflow::FileSystemRegistryImpl::GetRegisteredFileSystemSchemes(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*) in libtensorflow-core-x86_64.a(env.o)\r\n  \"nsync::nsync_mu_unlock(nsync::nsync_mu_s_*)\", referenced from:\r\n      tensorflow::SessionFactory::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, tensorflow::SessionFactory*) in libtensorflow-core-x86_64.a(session_factory.o)\r\n      tensorflow::SessionFactory::GetFactory(tensorflow::SessionOptions const&, tensorflow::SessionFactory**) in libtensorflow-core-x86_64.a(session_factory.o)\r\n      tensorflow::FileSystemRegistryImpl::Register(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::function<tensorflow::FileSystem* ()>) in libtensorflow-core-x86_64.a(env.o)\r\n      tensorflow::FileSystemRegistryImpl::Lookup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in libtensorflow-core-x86_64.a(env.o)\r\n      tensorflow::FileSystemRegistryImpl::GetRegisteredFileSystemSchemes(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*) in libtensorflow-core-x86_64.a(env.o)\r\n  \"tensorflow::Status::ToString[abi:cxx11]() const\", referenced from:\r\n      _main in test.cc.o\r\n  \"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::at(unsigned long) const\", referenced from:\r\n      google::protobuf::io::Tokenizer::IsIdentifier(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in libprotobuf.a(tokenizer.o)\r\n  \"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::find(char const*, unsigned long, unsigned long) const\", referenced from:\r\n      google::protobuf::GlobalReplaceSubstring(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) in libprotobuf-lite.a(strutil.o)\r\n      tensorflow::str_util::StringReplace(tensorflow::StringPiece, tensorflow::StringPiece, tensorflow::StringPiece, bool) in libtensorflow-core-x86_64.a(str_util.o)\r\n```"}