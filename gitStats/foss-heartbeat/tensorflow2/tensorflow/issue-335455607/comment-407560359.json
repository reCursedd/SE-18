{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/407560359", "html_url": "https://github.com/tensorflow/tensorflow/pull/20277#issuecomment-407560359", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20277", "id": 407560359, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU2MDM1OQ==", "user": {"login": "bensander", "id": 2494978, "node_id": "MDQ6VXNlcjI0OTQ5Nzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2494978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bensander", "html_url": "https://github.com/bensander", "followers_url": "https://api.github.com/users/bensander/followers", "following_url": "https://api.github.com/users/bensander/following{/other_user}", "gists_url": "https://api.github.com/users/bensander/gists{/gist_id}", "starred_url": "https://api.github.com/users/bensander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bensander/subscriptions", "organizations_url": "https://api.github.com/users/bensander/orgs", "repos_url": "https://api.github.com/users/bensander/repos", "events_url": "https://api.github.com/users/bensander/events{/privacy}", "received_events_url": "https://api.github.com/users/bensander/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T21:37:13Z", "updated_at": "2018-07-24T21:38:44Z", "author_association": "NONE", "body_html": "<p>Hi, I work with Jack <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1673574\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/whchung\">@whchung</a> here at AMD.    Jack suggested the command-line below - is this what is desired?    So would produce 3 PIPs at the end of the build, but the overall build would be faster since we only compile the common code once?</p>\n<p>'# bazel build //tensorflow/tools/pip_package:build_cpu_pip_package //tensorflow/tools/pip_package:build_cuda_pip_package //tensorflow/tools/pip_package:build_rocm_pip_package'</p>\n<p>We are not bazel experts so implementing this looks fairly scary, but perhaps not for someone with proper understanding of the build architecture and access to internal test frameworks.    Can someone provide a reference implementation for the existing targets (CPU, CUDA, etc) - then we could modify this PR to fit into that template?  Or we can treat the unified build steps as a separate feature/PR ?</p>", "body_text": "Hi, I work with Jack @whchung here at AMD.    Jack suggested the command-line below - is this what is desired?    So would produce 3 PIPs at the end of the build, but the overall build would be faster since we only compile the common code once?\n'# bazel build //tensorflow/tools/pip_package:build_cpu_pip_package //tensorflow/tools/pip_package:build_cuda_pip_package //tensorflow/tools/pip_package:build_rocm_pip_package'\nWe are not bazel experts so implementing this looks fairly scary, but perhaps not for someone with proper understanding of the build architecture and access to internal test frameworks.    Can someone provide a reference implementation for the existing targets (CPU, CUDA, etc) - then we could modify this PR to fit into that template?  Or we can treat the unified build steps as a separate feature/PR ?", "body": "Hi, I work with Jack @whchung here at AMD.    Jack suggested the command-line below - is this what is desired?    So would produce 3 PIPs at the end of the build, but the overall build would be faster since we only compile the common code once?\r\n\r\n'# bazel build //tensorflow/tools/pip_package:build_cpu_pip_package //tensorflow/tools/pip_package:build_cuda_pip_package //tensorflow/tools/pip_package:build_rocm_pip_package'\r\n\r\nWe are not bazel experts so implementing this looks fairly scary, but perhaps not for someone with proper understanding of the build architecture and access to internal test frameworks.    Can someone provide a reference implementation for the existing targets (CPU, CUDA, etc) - then we could modify this PR to fit into that template?  Or we can treat the unified build steps as a separate feature/PR ?"}