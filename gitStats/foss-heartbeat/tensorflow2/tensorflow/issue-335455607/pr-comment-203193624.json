{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/203193624", "pull_request_review_id": 138035843, "id": 203193624, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzE5MzYyNA==", "diff_hunk": "@@ -0,0 +1,277 @@\n+major_version: \"local\"\n+minor_version: \"\"\n+default_target_cpu: \"same_as_host\"\n+\n+default_toolchain {\n+  cpu: \"k8\"\n+  toolchain_identifier: \"local_linux\"\n+}\n+default_toolchain {\n+  cpu: \"piii\"\n+  toolchain_identifier: \"local_linux\"\n+}\n+default_toolchain {\n+  cpu: \"arm\"\n+  toolchain_identifier: \"local_linux\"\n+}\n+default_toolchain {\n+  cpu: \"darwin\"\n+  toolchain_identifier: \"local_darwin\"\n+}\n+default_toolchain {\n+  cpu: \"ppc\"\n+  toolchain_identifier: \"local_linux\"\n+}\n+\n+toolchain {\n+  abi_version: \"local\"\n+  abi_libc_version: \"local\"\n+  builtin_sysroot: \"\"\n+  compiler: \"compiler\"\n+  host_system_name: \"local\"\n+  needsPic: true\n+  supports_gold_linker: false\n+  supports_incremental_linker: false\n+  supports_fission: false\n+  supports_interface_shared_objects: false\n+  supports_normalizing_ar: false\n+  supports_start_end_lib: false\n+  supports_thin_archives: false\n+  target_libc: \"local\"\n+  target_cpu: \"local\"\n+  target_system_name: \"local\"\n+  toolchain_identifier: \"local_linux\"\n+\n+  tool_path { name: \"ar\" path: \"/usr/bin/ar\" }\n+  tool_path { name: \"compat-ld\" path: \"/usr/bin/ld\" }\n+  tool_path { name: \"cpp\" path: \"/usr/bin/cpp\" }\n+  tool_path { name: \"dwp\" path: \"/usr/bin/dwp\" }\n+  # As part of the TensorFlow release, we place some ROCm-related compilation\n+  # files in @local_config_rocm//crosstool/clang/bin, and this relative\n+  # path, combined with the rest of our Bazel configuration causes our\n+  # compilation to use those files.\n+  tool_path { name: \"gcc\" path: \"clang/bin/crosstool_wrapper_driver_rocm\" }\n+  # Use \"-std=c++11\" for hipcc. For consistency, force both the host compiler\n+  # and the device compiler to use \"-std=c++11\".\n+  cxx_flag: \"-std=c++11\"\n+  linker_flag: \"-Wl,-no-as-needed\"\n+  linker_flag: \"-lstdc++\"\n+  #linker_flag: \"-B/usr/bin/\"\n+  linker_flag: \"-B/opt/rocm/hcc/compiler/bin\"\n+\n+%{host_compiler_includes}\n+  tool_path { name: \"gcov\" path: \"/usr/bin/gcov\" }\n+\n+  # C(++) compiles invoke the compiler (as that is the one knowing where\n+  # to find libraries), but we provide LD so other rules can invoke the linker.\n+  tool_path { name: \"ld\" path: \"/usr/bin/ld\" }\n+\n+  tool_path { name: \"nm\" path: \"/usr/bin/nm\" }\n+  tool_path { name: \"objcopy\" path: \"/usr/bin/objcopy\" }\n+  objcopy_embed_flag: \"-I\"\n+  objcopy_embed_flag: \"binary\"\n+  tool_path { name: \"objdump\" path: \"/usr/bin/objdump\" }\n+  tool_path { name: \"strip\" path: \"/usr/bin/strip\" }\n+\n+  # Anticipated future default.\n+  unfiltered_cxx_flag: \"-no-canonical-prefixes\"\n+\n+  # Make C++ compilation deterministic. Use linkstamping instead of these\n+  # compiler symbols.\n+  unfiltered_cxx_flag: \"-Wno-builtin-macro-redefined\"\n+  unfiltered_cxx_flag: \"-D__DATE__=\\\"redacted\\\"\"\n+  unfiltered_cxx_flag: \"-D__TIMESTAMP__=\\\"redacted\\\"\"\n+  unfiltered_cxx_flag: \"-D__TIME__=\\\"redacted\\\"\"\n+  unfiltered_cxx_flag: \"-D__HIP_PLATFORM_HCC__\"\n+  # The macro EIGEN_USE_HIP is used to tell Eigen to use the HIP platform headers\n+  # It needs to be always set when compiling Eigen headers\n+  # (irrespective of whether the source file is being compiled via HIPCC)\n+  # so adding -DEIGEN_USE_HIP as a default CXX flag here\n+  unfiltered_cxx_flag: \"-DEIGEN_USE_HIP\"\n+\n+    \n+  # Security hardening on by default.\n+  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.\n+  # We need to undef it before redefining it as some distributions now have\n+  # it enabled by default.\n+  #compiler_flag: \"-U_FORTIFY_SOURCE\"\n+  #compiler_flag: \"-D_FORTIFY_SOURCE=1\"\n+  #compiler_flag: \"-fstack-protector\"\n+  #compiler_flag: \"-fPIE\"\n+  #linker_flag: \"-pie\"\n+  #linker_flag: \"-Wl,-z,relro,-z,now\"\n+\n+  # Enable coloring even if there's no attached terminal. Bazel removes the\n+  # escape sequences if --nocolor is specified. This isn't supported by gcc\n+  # on Ubuntu 14.04.\n+  # compiler_flag: \"-fcolor-diagnostics\"\n+\n+  # All warnings are enabled. Maybe enable -Werror as well?\n+  compiler_flag: \"-Wall\"\n+  # Enable a few more warnings that aren't part of -Wall.\n+  compiler_flag: \"-Wunused-but-set-parameter\"\n+  # But disable some that are problematic.\n+  compiler_flag: \"-Wno-free-nonheap-object\" # has false positives\n+\n+  # Keep stack frames for debugging, even in opt mode.\n+  compiler_flag: \"-fno-omit-frame-pointer\"\n+\n+  # Anticipated future default.\n+  linker_flag: \"-no-canonical-prefixes\"\n+  unfiltered_cxx_flag: \"-fno-canonical-system-headers\"\n+  # Have gcc return the exit code from ld.\n+  linker_flag: \"-pass-exit-codes\"\n+  # Stamp the binary with a unique identifier.\n+  linker_flag: \"-Wl,--build-id=md5\"\n+  linker_flag: \"-Wl,--hash-style=gnu\"\n+  # Gold linker only? Can we enable this by default?\n+  # linker_flag: \"-Wl,--warn-execstack\"\n+  # linker_flag: \"-Wl,--detect-odr-violations\"\n+\n+  # Include directory for ROCm headers.\n+  cxx_builtin_include_directory: \"/opt/rocm/hsa/include\"", "path": "third_party/gpus/crosstool/CROSSTOOL_hipcc.tpl", "position": null, "original_position": 132, "commit_id": "69d3b8faf41791834301a74a05e288964940427d", "original_commit_id": "4885f5e61c204ddc79d2a48cfe91c6c4b7688b18", "user": {"login": "whchung", "id": 1673574, "node_id": "MDQ6VXNlcjE2NzM1NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1673574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whchung", "html_url": "https://github.com/whchung", "followers_url": "https://api.github.com/users/whchung/followers", "following_url": "https://api.github.com/users/whchung/following{/other_user}", "gists_url": "https://api.github.com/users/whchung/gists{/gist_id}", "starred_url": "https://api.github.com/users/whchung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whchung/subscriptions", "organizations_url": "https://api.github.com/users/whchung/orgs", "repos_url": "https://api.github.com/users/whchung/repos", "events_url": "https://api.github.com/users/whchung/events{/privacy}", "received_events_url": "https://api.github.com/users/whchung/received_events", "type": "User", "site_admin": false}, "body": "thanks. let me see how to remove these `cxx_builtin_include_directory` and have them populated from `rocm_configure.bzl`.", "created_at": "2018-07-17T21:53:03Z", "updated_at": "2018-09-06T00:48:23Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20277#discussion_r203193624", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20277", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/203193624"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20277#discussion_r203193624"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20277"}}, "body_html": "<p>thanks. let me see how to remove these <code>cxx_builtin_include_directory</code> and have them populated from <code>rocm_configure.bzl</code>.</p>", "body_text": "thanks. let me see how to remove these cxx_builtin_include_directory and have them populated from rocm_configure.bzl.", "in_reply_to_id": 201598289}