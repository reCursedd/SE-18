{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4683", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4683/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4683/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4683/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4683", "id": 180319803, "node_id": "MDU6SXNzdWUxODAzMTk4MDM=", "number": 4683, "title": "sigmoid_cross_entropy shape compatible check bug (setting n_classes=2 in DNNClassifier)", "user": {"login": "chmlxj", "id": 12673732, "node_id": "MDQ6VXNlcjEyNjczNzMy", "avatar_url": "https://avatars3.githubusercontent.com/u/12673732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chmlxj", "html_url": "https://github.com/chmlxj", "followers_url": "https://api.github.com/users/chmlxj/followers", "following_url": "https://api.github.com/users/chmlxj/following{/other_user}", "gists_url": "https://api.github.com/users/chmlxj/gists{/gist_id}", "starred_url": "https://api.github.com/users/chmlxj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chmlxj/subscriptions", "organizations_url": "https://api.github.com/users/chmlxj/orgs", "repos_url": "https://api.github.com/users/chmlxj/repos", "events_url": "https://api.github.com/users/chmlxj/events{/privacy}", "received_events_url": "https://api.github.com/users/chmlxj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-30T14:36:05Z", "updated_at": "2016-10-04T21:13:28Z", "closed_at": "2016-10-04T21:13:28Z", "author_association": "NONE", "body_html": "<h3>Environment info</h3>\n<p>Operating System: Ubuntu 16.04</p>\n<p>Installed version of CUDA and cuDNN:<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):<br>\n-rw-r--r-- 1 root root    558720 Sep 15 07:02 /usr/local/cuda/lib64/libcudadevrt.a<br>\nlrwxrwxrwx 1 root root        16 Sep 15 07:05 /usr/local/cuda/lib64/libcudart.so -&gt; libcudart.so.8.0<br>\nlrwxrwxrwx 1 root root        19 Sep 15 07:05 /usr/local/cuda/lib64/libcudart.so.8.0 -&gt; libcudart.so.8.0.44<br>\n-rw-r--r-- 1 root root    415432 Sep 15 07:02 /usr/local/cuda/lib64/libcudart.so.8.0.44<br>\n-rw-r--r-- 1 root root    775162 Sep 15 07:02 /usr/local/cuda/lib64/libcudart_static.a<br>\nlrwxrwxrwx 1 xj   users       13 Jul 27 13:55 /usr/local/cuda/lib64/libcudnn.so -&gt; libcudnn.so.5<br>\nlrwxrwxrwx 1 xj   users       17 Jul 27 13:55 /usr/local/cuda/lib64/libcudnn.so.5 -&gt; libcudnn.so.5.1.5<br>\n-rwxr-xr-x 1 xj   xj    78065952 Apr 23 03:17 /usr/local/cuda/lib64/libcudnn.so.5.0.5<br>\n-rwxrwxr-x 1 xj   users 79337624 Jul 27 13:53 /usr/local/cuda/lib64/libcudnn.so.5.1.5<br>\n-rw-rw-r-- 1 xj   users 69756172 Jul 27 13:53 /usr/local/cuda/lib64/libcudnn_static.a</p>\n<p>If installed from source, provide</p>\n<ol>\n<li>The commit hash (<code>git rev-parse HEAD</code>)<br>\n<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/bad7c50b9dc9789ad7dd0a62daca40b7269841ed/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/bad7c50b9dc9789ad7dd0a62daca40b7269841ed\"><tt>bad7c50</tt></a></li>\n<li>The output of <code>bazel version</code><br>\n.<br>\nBuild label: 0.3.1<br>\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar<br>\nBuild time: Fri Jul 29 09:09:52 2016 (1469783392)<br>\nBuild timestamp: 1469783392<br>\nBuild timestamp as int: 1469783392</li>\n</ol>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>from <strong>future</strong> import absolute_import<br>\nfrom <strong>future</strong> import division<br>\nfrom <strong>future</strong> import print_function</p>\n<p>import tensorflow as tf<br>\nimport tensorflow.contrib as contrib<br>\nimport numpy as np</p>\n<h1>Data sets</h1>\n<p>IRIS_TRAINING = \"iris_training.csv\"<br>\nIRIS_TEST = \"iris_test.csv\"</p>\n<h1>Load datasets.</h1>\n<p>training_set = contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TRAINING,<br>\ntarget_dtype=np.int,<br>\nfeatures_dtype=np.float32)<br>\ntest_set = contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TEST,<br>\ntarget_dtype=np.int,<br>\nfeatures_dtype=np.float32)</p>\n<h1>Specify that all features have real-value data</h1>\n<p>feature_columns = [contrib.layers.real_valued_column(\"\", dimension=4)]</p>\n<h1>Build 3 layer DNN with 10, 20, 10 units respectively.</h1>\n<p>classifier = contrib.learn.DNNClassifier(feature_columns=feature_columns,<br>\nhidden_units=[10, 20, 10],<br>\nn_classes=2,<br>\nmodel_dir=\"/tmp/iris_model\")</p>\n<h1>Fit model.</h1>\n<p>classifier.fit(x=training_set.data,<br>\ny=training_set.target.astype(np.int),<br>\nsteps=200)</p>", "body_text": "Environment info\nOperating System: Ubuntu 16.04\nInstalled version of CUDA and cuDNN:\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\n-rw-r--r-- 1 root root    558720 Sep 15 07:02 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root        16 Sep 15 07:05 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.8.0\nlrwxrwxrwx 1 root root        19 Sep 15 07:05 /usr/local/cuda/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\n-rw-r--r-- 1 root root    415432 Sep 15 07:02 /usr/local/cuda/lib64/libcudart.so.8.0.44\n-rw-r--r-- 1 root root    775162 Sep 15 07:02 /usr/local/cuda/lib64/libcudart_static.a\nlrwxrwxrwx 1 xj   users       13 Jul 27 13:55 /usr/local/cuda/lib64/libcudnn.so -> libcudnn.so.5\nlrwxrwxrwx 1 xj   users       17 Jul 27 13:55 /usr/local/cuda/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5\n-rwxr-xr-x 1 xj   xj    78065952 Apr 23 03:17 /usr/local/cuda/lib64/libcudnn.so.5.0.5\n-rwxrwxr-x 1 xj   users 79337624 Jul 27 13:53 /usr/local/cuda/lib64/libcudnn.so.5.1.5\n-rw-rw-r-- 1 xj   users 69756172 Jul 27 13:53 /usr/local/cuda/lib64/libcudnn_static.a\nIf installed from source, provide\n\nThe commit hash (git rev-parse HEAD)\nbad7c50\nThe output of bazel version\n.\nBuild label: 0.3.1\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Fri Jul 29 09:09:52 2016 (1469783392)\nBuild timestamp: 1469783392\nBuild timestamp as int: 1469783392\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nfrom future import absolute_import\nfrom future import division\nfrom future import print_function\nimport tensorflow as tf\nimport tensorflow.contrib as contrib\nimport numpy as np\nData sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TEST = \"iris_test.csv\"\nLoad datasets.\ntraining_set = contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TRAINING,\ntarget_dtype=np.int,\nfeatures_dtype=np.float32)\ntest_set = contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TEST,\ntarget_dtype=np.int,\nfeatures_dtype=np.float32)\nSpecify that all features have real-value data\nfeature_columns = [contrib.layers.real_valued_column(\"\", dimension=4)]\nBuild 3 layer DNN with 10, 20, 10 units respectively.\nclassifier = contrib.learn.DNNClassifier(feature_columns=feature_columns,\nhidden_units=[10, 20, 10],\nn_classes=2,\nmodel_dir=\"/tmp/iris_model\")\nFit model.\nclassifier.fit(x=training_set.data,\ny=training_set.target.astype(np.int),\nsteps=200)", "body": "### Environment info\n\nOperating System: Ubuntu 16.04\n\nInstalled version of CUDA and cuDNN: \n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\n-rw-r--r-- 1 root root    558720 Sep 15 07:02 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root        16 Sep 15 07:05 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.8.0\nlrwxrwxrwx 1 root root        19 Sep 15 07:05 /usr/local/cuda/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\n-rw-r--r-- 1 root root    415432 Sep 15 07:02 /usr/local/cuda/lib64/libcudart.so.8.0.44\n-rw-r--r-- 1 root root    775162 Sep 15 07:02 /usr/local/cuda/lib64/libcudart_static.a\nlrwxrwxrwx 1 xj   users       13 Jul 27 13:55 /usr/local/cuda/lib64/libcudnn.so -> libcudnn.so.5\nlrwxrwxrwx 1 xj   users       17 Jul 27 13:55 /usr/local/cuda/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5\n-rwxr-xr-x 1 xj   xj    78065952 Apr 23 03:17 /usr/local/cuda/lib64/libcudnn.so.5.0.5\n-rwxrwxr-x 1 xj   users 79337624 Jul 27 13:53 /usr/local/cuda/lib64/libcudnn.so.5.1.5\n-rw-rw-r-- 1 xj   users 69756172 Jul 27 13:53 /usr/local/cuda/lib64/libcudnn_static.a\n\nIf installed from source, provide \n1. The commit hash (`git rev-parse HEAD`)\n   bad7c50b9dc9789ad7dd0a62daca40b7269841ed\n2. The output of `bazel version`\n   .\n   Build label: 0.3.1\n   Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\n   Build time: Fri Jul 29 09:09:52 2016 (1469783392)\n   Build timestamp: 1469783392\n   Build timestamp as int: 1469783392\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\n\nfrom **future** import absolute_import\nfrom **future** import division\nfrom **future** import print_function\n\nimport tensorflow as tf\nimport tensorflow.contrib as contrib\nimport numpy as np\n# Data sets\n\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TEST = \"iris_test.csv\"\n# Load datasets.\n\ntraining_set = contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TRAINING,\n                                                                target_dtype=np.int,\n                                                                features_dtype=np.float32)\ntest_set = contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TEST,\n                                                            target_dtype=np.int,\n                                                            features_dtype=np.float32)\n# Specify that all features have real-value data\n\nfeature_columns = [contrib.layers.real_valued_column(\"\", dimension=4)]\n# Build 3 layer DNN with 10, 20, 10 units respectively.\n\nclassifier = contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=2,\n                                            model_dir=\"/tmp/iris_model\")\n# Fit model.\n\nclassifier.fit(x=training_set.data,\n               y=training_set.target.astype(np.int),\n               steps=200)\n"}