{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17867", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17867/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17867/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17867/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17867", "id": 307047018, "node_id": "MDU6SXNzdWUzMDcwNDcwMTg=", "number": 17867, "title": "Tensorflow Projector - nearest points in original space", "user": {"login": "ironv", "id": 4298134, "node_id": "MDQ6VXNlcjQyOTgxMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4298134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ironv", "html_url": "https://github.com/ironv", "followers_url": "https://api.github.com/users/ironv/followers", "following_url": "https://api.github.com/users/ironv/following{/other_user}", "gists_url": "https://api.github.com/users/ironv/gists{/gist_id}", "starred_url": "https://api.github.com/users/ironv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ironv/subscriptions", "organizations_url": "https://api.github.com/users/ironv/orgs", "repos_url": "https://api.github.com/users/ironv/repos", "events_url": "https://api.github.com/users/ironv/events{/privacy}", "received_events_url": "https://api.github.com/users/ironv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2018-03-20T21:33:41Z", "updated_at": "2018-06-13T15:49:30Z", "closed_at": "2018-06-13T15:49:22Z", "author_association": "NONE", "body_html": "<p>In <a href=\"http://projector.tensorflow.org\" rel=\"nofollow\">Tensorflow Projector</a>, the cosine and euclidean distance, and the ranking based on that seems to be incorrect when the number of dimensions for the points is 50 or more.  It is fine when the number of dimensions is 49 or less.  Here's some code to test</p>\n<pre><code>import numpy as np\nfrom sklearn.metrics.pairwise import cosine_distances, euclidean_distances\n\nnpoints,ndims = 4,49\nnclose = npoints-1\nfunc = cosine_distances\n\nnp.random.seed(seed=123456)\nembed = np.random.uniform(size=npoints*ndims).reshape((npoints,ndims))\nlabels = np.array(['pt%03d'%n for n in range(1,npoints+1)])\n\nnp.savetxt('embed-%d-%d.tsv'%(npoints,ndims), embed, delimiter='\\t', fmt='%.6f')\nnp.savetxt('labels-%d.tsv'%(npoints), labels, fmt='%s')\n\ndist = func(embed)\nind = np.argsort(dist)[:,1:nclose+1]\n\nnames = labels[ind]\ndist = dist[np.arange(labels.shape[0])[:,None],ind]\n\nnp.concatenate((labels[:,None],\n                np.dstack((names,np.around(dist,4))).reshape((dist.shape[0],-1))), axis=1)\n</code></pre>\n<p>The output of the above code is shown below.  For <code>pt001</code>, the closest is <code>pt004</code> with cosine distance 0.1695, etc.</p>\n<pre><code>array([['pt001', 'pt004', '0.1695', 'pt003', '0.2716', 'pt002', '0.2897'],\n       ['pt002', 'pt003', '0.2345', 'pt004', '0.2365', 'pt001', '0.2897'],\n       ['pt003', 'pt004', '0.2099', 'pt002', '0.2345', 'pt001', '0.2716'],\n       ['pt004', 'pt001', '0.1695', 'pt003', '0.2099', 'pt002', '0.2365']],\n      dtype='&lt;U32')\n</code></pre>\n<p>The above code also generates files which can be uploaded to the projector website for confirmation.  The output there is:</p>\n<pre><code>Nearest points in the original space:\npt004 0.169\npt003 0.272\npt002 0.290\n</code></pre>\n<p>Now change ndims to 50 in the above code and re-run.  The output is</p>\n<pre><code>array([['pt001', 'pt002', '0.1675', 'pt004', '0.1968', 'pt003', '0.2571'],\n       ['pt002', 'pt001', '0.1675', 'pt004', '0.2444', 'pt003', '0.246'],\n       ['pt003', 'pt004', '0.1943', 'pt002', '0.246', 'pt001', '0.2571'],\n       ['pt004', 'pt003', '0.1943', 'pt001', '0.1968', 'pt002', '0.2444']],\n      dtype='&lt;U32')\n</code></pre>\n<p>Once the new files are loaded, the output from the website is:</p>\n<pre><code>Nearest points in the original space: \npt002 1.040\npt004 1.304\npt003 1.538\n</code></pre>\n<p>The website does report the number of dimensions correctly at the top (first 49 and then 50).  Also, <code>Spherize Data</code> was turned on and off that makes a very slight difference.</p>", "body_text": "In Tensorflow Projector, the cosine and euclidean distance, and the ranking based on that seems to be incorrect when the number of dimensions for the points is 50 or more.  It is fine when the number of dimensions is 49 or less.  Here's some code to test\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_distances, euclidean_distances\n\nnpoints,ndims = 4,49\nnclose = npoints-1\nfunc = cosine_distances\n\nnp.random.seed(seed=123456)\nembed = np.random.uniform(size=npoints*ndims).reshape((npoints,ndims))\nlabels = np.array(['pt%03d'%n for n in range(1,npoints+1)])\n\nnp.savetxt('embed-%d-%d.tsv'%(npoints,ndims), embed, delimiter='\\t', fmt='%.6f')\nnp.savetxt('labels-%d.tsv'%(npoints), labels, fmt='%s')\n\ndist = func(embed)\nind = np.argsort(dist)[:,1:nclose+1]\n\nnames = labels[ind]\ndist = dist[np.arange(labels.shape[0])[:,None],ind]\n\nnp.concatenate((labels[:,None],\n                np.dstack((names,np.around(dist,4))).reshape((dist.shape[0],-1))), axis=1)\n\nThe output of the above code is shown below.  For pt001, the closest is pt004 with cosine distance 0.1695, etc.\narray([['pt001', 'pt004', '0.1695', 'pt003', '0.2716', 'pt002', '0.2897'],\n       ['pt002', 'pt003', '0.2345', 'pt004', '0.2365', 'pt001', '0.2897'],\n       ['pt003', 'pt004', '0.2099', 'pt002', '0.2345', 'pt001', '0.2716'],\n       ['pt004', 'pt001', '0.1695', 'pt003', '0.2099', 'pt002', '0.2365']],\n      dtype='<U32')\n\nThe above code also generates files which can be uploaded to the projector website for confirmation.  The output there is:\nNearest points in the original space:\npt004 0.169\npt003 0.272\npt002 0.290\n\nNow change ndims to 50 in the above code and re-run.  The output is\narray([['pt001', 'pt002', '0.1675', 'pt004', '0.1968', 'pt003', '0.2571'],\n       ['pt002', 'pt001', '0.1675', 'pt004', '0.2444', 'pt003', '0.246'],\n       ['pt003', 'pt004', '0.1943', 'pt002', '0.246', 'pt001', '0.2571'],\n       ['pt004', 'pt003', '0.1943', 'pt001', '0.1968', 'pt002', '0.2444']],\n      dtype='<U32')\n\nOnce the new files are loaded, the output from the website is:\nNearest points in the original space: \npt002 1.040\npt004 1.304\npt003 1.538\n\nThe website does report the number of dimensions correctly at the top (first 49 and then 50).  Also, Spherize Data was turned on and off that makes a very slight difference.", "body": "In [Tensorflow Projector](http://projector.tensorflow.org), the cosine and euclidean distance, and the ranking based on that seems to be incorrect when the number of dimensions for the points is 50 or more.  It is fine when the number of dimensions is 49 or less.  Here's some code to test\r\n\r\n```\r\nimport numpy as np\r\nfrom sklearn.metrics.pairwise import cosine_distances, euclidean_distances\r\n\r\nnpoints,ndims = 4,49\r\nnclose = npoints-1\r\nfunc = cosine_distances\r\n\r\nnp.random.seed(seed=123456)\r\nembed = np.random.uniform(size=npoints*ndims).reshape((npoints,ndims))\r\nlabels = np.array(['pt%03d'%n for n in range(1,npoints+1)])\r\n\r\nnp.savetxt('embed-%d-%d.tsv'%(npoints,ndims), embed, delimiter='\\t', fmt='%.6f')\r\nnp.savetxt('labels-%d.tsv'%(npoints), labels, fmt='%s')\r\n\r\ndist = func(embed)\r\nind = np.argsort(dist)[:,1:nclose+1]\r\n\r\nnames = labels[ind]\r\ndist = dist[np.arange(labels.shape[0])[:,None],ind]\r\n\r\nnp.concatenate((labels[:,None],\r\n                np.dstack((names,np.around(dist,4))).reshape((dist.shape[0],-1))), axis=1)\r\n```\r\n\r\nThe output of the above code is shown below.  For `pt001`, the closest is `pt004` with cosine distance 0.1695, etc.\r\n```\r\narray([['pt001', 'pt004', '0.1695', 'pt003', '0.2716', 'pt002', '0.2897'],\r\n       ['pt002', 'pt003', '0.2345', 'pt004', '0.2365', 'pt001', '0.2897'],\r\n       ['pt003', 'pt004', '0.2099', 'pt002', '0.2345', 'pt001', '0.2716'],\r\n       ['pt004', 'pt001', '0.1695', 'pt003', '0.2099', 'pt002', '0.2365']],\r\n      dtype='<U32')\r\n```\r\nThe above code also generates files which can be uploaded to the projector website for confirmation.  The output there is:\r\n```\r\nNearest points in the original space:\r\npt004 0.169\r\npt003 0.272\r\npt002 0.290\r\n```\r\nNow change ndims to 50 in the above code and re-run.  The output is\r\n```\r\narray([['pt001', 'pt002', '0.1675', 'pt004', '0.1968', 'pt003', '0.2571'],\r\n       ['pt002', 'pt001', '0.1675', 'pt004', '0.2444', 'pt003', '0.246'],\r\n       ['pt003', 'pt004', '0.1943', 'pt002', '0.246', 'pt001', '0.2571'],\r\n       ['pt004', 'pt003', '0.1943', 'pt001', '0.1968', 'pt002', '0.2444']],\r\n      dtype='<U32')\r\n```\r\nOnce the new files are loaded, the output from the website is:\r\n```\r\nNearest points in the original space: \r\npt002 1.040\r\npt004 1.304\r\npt003 1.538\r\n```\r\nThe website does report the number of dimensions correctly at the top (first 49 and then 50).  Also, `Spherize Data` was turned on and off that makes a very slight difference."}