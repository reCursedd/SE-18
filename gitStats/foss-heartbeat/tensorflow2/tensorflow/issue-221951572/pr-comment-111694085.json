{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111694085", "pull_request_review_id": 32953283, "id": 111694085, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTY5NDA4NQ==", "diff_hunk": "@@ -0,0 +1,52 @@\n+import math\n+\n+from six.moves import xrange\n+\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import ops\n+\n+def frames(signal, frame_length, frame_step, name=\"frames\"):\n+  \"\"\"Frame a signal into overlapping frames.\n+  May be used in front of spectral functions.\n+  \n+  For example:\n+  \n+  ```python\n+  pcm = tf.placeholder(tf.float32, [None, 9152])\n+  frames = tf.frames(pcm, 512, 180)\n+  magspec = tf.abs(tf.spectral.rfft(frames, tf.constant(512, shape=[1])))\n+  image = tf.reshape(magspec, [-1, 49, 257, 1])\n+  ```\n+  \n+  Args:\n+    signal: A `Tensor` of shape [batch_size, signal_length].\n+    frame_length: An `int32` or `int64` `Tensor`. The length of each frame.\n+    frame_step: An `int32` or `int64` `Tensor`. The step between frames.\n+    name: A name for the operation (optional).\n+  \n+  Returns:\n+    A `Tensor` of frames with shape [batch_size, num_frames, frame_length].\n+  \"\"\"\n+  signal = ops.convert_to_tensor(signal)\n+  frame_length = ops.convert_to_tensor(frame_length)\n+  frame_step = ops.convert_to_tensor(frame_step)\n+  \n+  signal_rank = signal.shape.ndims\n+  \n+  if signal_rank != 2:\n+    raise ValueError(\"expected signal to have rank 2 but was \" + signal_rank)\n+  \n+  signal_length = int(signal_shape[1])\n+  \n+  with ops.name_scope(name, \"frames\", [signal]) as name:\n+    num_frames = ops.add(1, ops.cast(ops.ceil(ops.divide(ops.subtract(signal_length, frame_length), frame_step)), dtypes.int32))\n+    pad_length = ops.add(ops.multiply(ops.subtract(num_frames, 1), frame_step), frame_length)\n+    pad_signal = ops.pad(signal, [[0, 0], [0, ops.subtract(pad_length, signal_length)]])\n+    \n+    frames = []\n+    \n+    for index in xrange(49): # TODO(Androbin) use num_frames dynamically", "path": "tensorflow/contrib/spectral/python/ops/shape_ops.py", "position": null, "original_position": 48, "commit_id": "40e9dd335712e39e9967e38221ca14096f5f7dab", "original_commit_id": "dcdb87dd71a89970b893e74468c0001840e341a6", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "Their approach looks right. Transpose so the columns are axis 0, Create indices into the new rows the way they do, and use gather() to index into the transposed array.  then transpose the result.", "created_at": "2017-04-16T23:17:34Z", "updated_at": "2017-05-01T21:43:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9236#discussion_r111694085", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9236", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111694085"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9236#discussion_r111694085"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9236"}}, "body_html": "<p>Their approach looks right. Transpose so the columns are axis 0, Create indices into the new rows the way they do, and use gather() to index into the transposed array.  then transpose the result.</p>", "body_text": "Their approach looks right. Transpose so the columns are axis 0, Create indices into the new rows the way they do, and use gather() to index into the transposed array.  then transpose the result.", "in_reply_to_id": 111692104}