{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/113785319", "pull_request_review_id": 35204580, "id": 113785319, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc4NTMxOQ==", "diff_hunk": "@@ -0,0 +1,82 @@\n+# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import ops\n+\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import math_ops\n+\n+def frames(signal, frame_length, frame_step, name=None):\n+  \"\"\"Frame a signal into overlapping frames.\n+  May be used in front of spectral functions.\n+  \n+  For example:\n+  \n+  ```python\n+  pcm = tf.placeholder(tf.float32, [None, 9152])\n+  frames = tf.contrib.signal.frames(pcm, 512, 180)\n+  magspec = tf.abs(tf.spectral.rfft(frames, [512]))\n+  image = tf.expand_dims(magspec, 3)\n+  ```\n+  \n+  Args:\n+    signal: A `Tensor` of shape `[batch_size, signal_length]`.\n+    frame_length: An `int32` or `int64` `Tensor`. The length of each frame.\n+    frame_step: An `int32` or `int64` `Tensor`. The step between frames.\n+    name: A name for the operation (optional).\n+  \n+  Returns:\n+    A `Tensor` of frames with shape `[batch_size, num_frames, frame_length]`.\n+  \"\"\"\n+  with ops.name_scope(name, \"frames\",\n+                      [signal, frame_length, frame_step]) as name:\n+    signal = ops.convert_to_tensor(signal, name=\"signal\")\n+    frame_length = ops.convert_to_tensor(frame_length, name=\"frame_length\")\n+    frame_step = ops.convert_to_tensor(frame_step, name=\"frame_step\")\n+    \n+    signal_rank = signal.shape.ndims\n+    \n+    if signal_rank != 2:\n+      raise ValueError(\"expected signal to have rank 2 but was \" + signal_rank)\n+    \n+    signal_length = array_ops.shape(signal)[1]\n+    \n+    num_frames = math_ops.ceil((signal_length - frame_length) / frame_step)\n+    num_frames = 1 + math_ops.cast(num_frames, dtypes.int32)\n+    \n+    pad_length = (num_frames - 1) * frame_step + frame_length\n+    pad_signal = array_ops.pad(\n+        signal, [[0, 0], [0, pad_length - signal_length]])\n+    \n+    indices_frame = array_ops.expand_dims(math_ops.range(frame_length), 0)\n+    indices_frames = array_ops.tile(indices_frame, [num_frames, 1])\n+    \n+    indices_step = array_ops.expand_dims(\n+        math_ops.range(num_frames) * frame_step, 1)\n+    indices_steps = array_ops.tile(indices_step, [1, frame_length])\n+    \n+    indices = indices_frames + indices_steps\n+    \n+    # TODO(Androbin) remove `transpose` when `gather` gets `axis` support\n+    pad_signal = array_ops.transpose(pad_signal)\n+    frames = array_ops.gather(pad_signal, indices)\n+    frames = array_ops.transpose(frames, perm=[2, 0, 1], name=name)", "path": "tensorflow/contrib/signal/python/ops/shape_ops.py", "position": null, "original_position": 80, "commit_id": "40e9dd335712e39e9967e38221ca14096f5f7dab", "original_commit_id": "d643d707a78a8cd3f3ee6810c7614e6db788d4e6", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "remove the name=name parameter.", "created_at": "2017-04-27T19:43:30Z", "updated_at": "2017-05-01T21:43:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9236#discussion_r113785319", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9236", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/113785319"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9236#discussion_r113785319"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9236"}}, "body_html": "<p>remove the name=name parameter.</p>", "body_text": "remove the name=name parameter."}