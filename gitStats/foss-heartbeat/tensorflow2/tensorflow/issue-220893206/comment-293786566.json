{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/293786566", "html_url": "https://github.com/tensorflow/tensorflow/issues/9132#issuecomment-293786566", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9132", "id": 293786566, "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mzc4NjU2Ng==", "user": {"login": "qazmichaelgw", "id": 8761378, "node_id": "MDQ6VXNlcjg3NjEzNzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8761378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qazmichaelgw", "html_url": "https://github.com/qazmichaelgw", "followers_url": "https://api.github.com/users/qazmichaelgw/followers", "following_url": "https://api.github.com/users/qazmichaelgw/following{/other_user}", "gists_url": "https://api.github.com/users/qazmichaelgw/gists{/gist_id}", "starred_url": "https://api.github.com/users/qazmichaelgw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qazmichaelgw/subscriptions", "organizations_url": "https://api.github.com/users/qazmichaelgw/orgs", "repos_url": "https://api.github.com/users/qazmichaelgw/repos", "events_url": "https://api.github.com/users/qazmichaelgw/events{/privacy}", "received_events_url": "https://api.github.com/users/qazmichaelgw/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-13T05:35:58Z", "updated_at": "2017-04-13T05:48:21Z", "author_association": "NONE", "body_html": "<p>Tensorflow: 1.1.0, no matter install from binary or source<br>\nKeras: 2.0.3</p>\n<pre><code># -*- coding: utf-8 -*-\n'''ResNet50 model for Keras.\n\n# Reference:\n\n- [Deep Residual Learning for Image Recognition](https://arxiv.org/abs/1512.03385)\n\nAdapted from code contributed by BigMoyan.\n'''\nfrom __future__ import print_function\n\nimport numpy as np\nimport warnings\n\nfrom keras.layers import Input\nfrom keras import layers\nfrom keras.layers import Dense\nfrom keras.layers import Activation\nfrom keras.layers import Flatten\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.layers import ZeroPadding2D\nfrom keras.layers import AveragePooling2D\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.layers import BatchNormalization\nfrom keras.models import Model\nfrom keras.preprocessing import image\nimport keras.backend as K\nfrom keras.utils import layer_utils\nfrom keras.utils.data_utils import get_file\nfrom keras.applications.imagenet_utils import _obtain_input_shape\nfrom keras.applications.imagenet_utils import decode_predictions\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.engine.topology import get_source_inputs\n\n\nWEIGHTS_PATH = 'https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels.h5'\nWEIGHTS_PATH_NO_TOP = 'https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\n\ndef identity_block(input_tensor, kernel_size, filters, stage, block, name=None):\n    \"\"\"The identity block is the block that has no conv layer at shortcut.\n\n    # Arguments\n        input_tensor: input tensor\n        kernel_size: defualt 3, the kernel size of middle conv layer at main path\n        filters: list of integers, the filterss of 3 conv layer at main path\n        stage: integer, current stage label, used for generating layer names\n        block: 'a','b'..., current block label, used for generating layer names\n\n    # Returns\n        Output tensor for the block.\n    \"\"\"\n    filters1, filters2, filters3 = filters\n    if K.image_data_format() == 'channels_last':\n        bn_axis = 3\n    else:\n        bn_axis = 1\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n\n    x = Conv2D(filters1, (1, 1), name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n\n    x = Conv2D(filters2, kernel_size,\n               padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n\n    x = Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)\n\n    x = layers.add([x, input_tensor])\n    if name:\n        x = Activation('relu', name=name)(x)\n    else:\n        x = Activation('relu')(x)\n    return x\n\n\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\n    \"\"\"conv_block is the block that has a conv layer at shortcut\n\n    # Arguments\n        input_tensor: input tensor\n        kernel_size: defualt 3, the kernel size of middle conv layer at main path\n        filters: list of integers, the filterss of 3 conv layer at main path\n        stage: integer, current stage label, used for generating layer names\n        block: 'a','b'..., current block label, used for generating layer names\n\n    # Returns\n        Output tensor for the block.\n\n    Note that from stage 3, the first conv layer at main path is with strides=(2,2)\n    And the shortcut should have strides=(2,2) as well\n    \"\"\"\n    filters1, filters2, filters3 = filters\n    if K.image_data_format() == 'channels_last':\n        bn_axis = 3\n    else:\n        bn_axis = 1\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n\n    x = Conv2D(filters1, (1, 1), strides=strides,\n               name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n\n    x = Conv2D(filters2, kernel_size, padding='same',\n               name=conv_name_base + '2b')(x)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n\n    x = Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)\n\n    shortcut = Conv2D(filters3, (1, 1), strides=strides,\n                      name=conv_name_base + '1')(input_tensor)\n    shortcut = BatchNormalization(axis=bn_axis, name=bn_name_base + '1')(shortcut)\n\n    x = layers.add([x, shortcut])\n    x = Activation('relu')(x)\n    return x\n\n\ndef ResNet50(include_top=True, weights='imagenet',\n             input_tensor=None, input_shape=None,\n             pooling=None,\n             classes=1000):\n    \"\"\"Instantiates the ResNet50 architecture.\n\n    Optionally loads weights pre-trained\n    on ImageNet. Note that when using TensorFlow,\n    for best performance you should set\n    `image_data_format=\"channels_last\"` in your Keras config\n    at ~/.keras/keras.json.\n\n    The model and the weights are compatible with both\n    TensorFlow and Theano. The data format\n    convention used by the model is the one\n    specified in your Keras config file.\n\n    # Arguments\n        include_top: whether to include the fully-connected\n            layer at the top of the network.\n        weights: one of `None` (random initialization)\n            or \"imagenet\" (pre-training on ImageNet).\n        input_tensor: optional Keras tensor (i.e. output of `layers.Input()`)\n            to use as image input for the model.\n        input_shape: optional shape tuple, only to be specified\n            if `include_top` is False (otherwise the input shape\n            has to be `(224, 224, 3)` (with `channels_last` data format)\n            or `(3, 224, 244)` (with `channels_first` data format).\n            It should have exactly 3 inputs channels,\n            and width and height should be no smaller than 197.\n            E.g. `(200, 200, 3)` would be one valid value.\n        pooling: Optional pooling mode for feature extraction\n            when `include_top` is `False`.\n            - `None` means that the output of the model will be\n                the 4D tensor output of the\n                last convolutional layer.\n            - `avg` means that global average pooling\n                will be applied to the output of the\n                last convolutional layer, and thus\n                the output of the model will be a 2D tensor.\n            - `max` means that global max pooling will\n                be applied.\n        classes: optional number of classes to classify images\n            into, only to be specified if `include_top` is True, and\n            if no `weights` argument is specified.\n\n    # Returns\n        A Keras model instance.\n\n    # Raises\n        ValueError: in case of invalid argument for `weights`,\n            or invalid input shape.\n    \"\"\"\n    if weights not in {'imagenet', None}:\n        raise ValueError('The `weights` argument should be either '\n                         '`None` (random initialization) or `imagenet` '\n                         '(pre-training on ImageNet).')\n\n    if weights == 'imagenet' and include_top and classes != 1000:\n        raise ValueError('If using `weights` as imagenet with `include_top`'\n                         ' as true, `classes` should be 1000')\n\n    # Determine proper input shape\n    input_shape = _obtain_input_shape(input_shape,\n                                      default_size=224,\n                                      min_size=197,\n                                      data_format=K.image_data_format(),\n                                      include_top=include_top)\n\n    if input_tensor is None:\n        img_input = Input(shape=input_shape)\n    else:\n        if not K.is_keras_tensor(input_tensor):\n            img_input = Input(tensor=input_tensor, shape=input_shape)\n        else:\n            img_input = input_tensor\n    if K.image_data_format() == 'channels_last':\n        bn_axis = 3\n    else:\n        bn_axis = 1\n\n    x = ZeroPadding2D((3, 3))(img_input)\n    x = Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)\n    x = BatchNormalization(axis=bn_axis, name='bn_conv1')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n\n    x = conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='b')\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='c')\n\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block='a')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='b')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='c')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='d', name='feat1')\n\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block='a')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='b')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='c')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='d')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='e')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='f', name='feat2')\n\n    x = conv_block(x, 3, [512, 512, 2048], stage=5, block='a')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='b')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='c', name='feat_layer')\n\n    x = AveragePooling2D((7, 7), name='avg_pool')(x)\n\n    if include_top:\n        x = Flatten()(x)\n        x = Dense(classes, activation='softmax', name='fc1000')(x)\n    else:\n        if pooling == 'avg':\n            x = GlobalAveragePooling2D()(x)\n        elif pooling == 'max':\n            x = GlobalMaxPooling2D()(x)\n\n    # Ensure that the model takes into account\n    # any potential predecessors of `input_tensor`.\n    if input_tensor is not None:\n        inputs = get_source_inputs(input_tensor)\n    else:\n        inputs = img_input\n    # Create model.\n    model = Model(inputs, x, name='resnet50')\n\n    # load weights\n    if weights == 'imagenet':\n        if include_top:\n            weights_path = get_file('resnet50_weights_tf_dim_ordering_tf_kernels.h5',\n                                    WEIGHTS_PATH,\n                                    cache_subdir='models',\n                                    md5_hash='a7b3fe01876f51b976af0dea6bc144eb')\n        else:\n            weights_path = get_file('resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5',\n                                    WEIGHTS_PATH_NO_TOP,\n                                    cache_subdir='models',\n                                    md5_hash='a268eb855778b3df3c7506639542a6af')\n        model.load_weights(weights_path)\n        if K.backend() == 'theano':\n            layer_utils.convert_all_kernels_in_model(model)\n\n        if K.image_data_format() == 'channels_first':\n            if include_top:\n                maxpool = model.get_layer(name='avg_pool')\n                shape = maxpool.output_shape[1:]\n                dense = model.get_layer(name='fc1000')\n                layer_utils.convert_dense_weights_data_format(dense, shape, 'channels_first')\n\n            if K.backend() == 'tensorflow':\n                warnings.warn('You are using the TensorFlow backend, yet you '\n                              'are using the Theano '\n                              'image data format convention '\n                              '(`image_data_format=\"channels_first\"`). '\n                              'For best performance, set '\n                              '`image_data_format=\"channels_last\"` in '\n                              'your Keras config '\n                              'at ~/.keras/keras.json.')\n    return model\n\ndef preprocess_input(x, dim_ordering='default'):\n     if dim_ordering == 'default':\n         dim_ordering = K.image_dim_ordering()\n     assert dim_ordering in {'tf', 'th'}\n\n     if dim_ordering == 'th':\n         x[0, :, :] -= 103.939\n         x[1, :, :] -= 116.779\n         x[2, :, :] -= 123.68\n         # 'RGB'-&gt;'BGR'\n         x = x[::-1, :, :]\n     else:\n         x[:, :, 0] -= 103.939\n         x[:, :, 1] -= 116.779\n         x[:, :, 2] -= 123.68\n         # 'RGB'-&gt;'BGR'\n         x = x[:, :, ::-1]\n     return x\n\ndef preprocess_image(im):\n     import cv2\n     im = cv2.resize(im, (224, 224)).astype(np.float32)\n     im = preprocess_input(im)\n\n     dim_ordering = K.image_dim_ordering()\n     assert dim_ordering in {'tf', 'th'}\n\n     if dim_ordering == 'th':\n         im = im.transpose((2,0,1))\n     return im\n\ndef test():\n    model = ResNet50(include_top=True, weights='imagenet')\n    img_path = 'elephant.jpg'\n    img = image.load_img(img_path, target_size=(224, 224))\n    x = image.img_to_array(img)\n    #x = preprocess_input(x)\n    #x = np.expand_dims(x, axis=0)\n    x = preprocess_image(x)\n    x = np.expand_dims(x, axis=0)\n\n    pred = model.predict(x)\n\nif __name__ == '__main__':\n    test()\n</code></pre>\n<p>When I call preprocess_image() in the test() function, I got the error:<br>\n2017-04-12 11:29:55.861593: E tensorflow/stream_executor/cuda/cuda_dnn.cc:359] could not create cudnn handle: CUDNN_STATUS_INTERNAL_ERROR<br>\n2017-04-12 11:29:55.861630: E tensorflow/stream_executor/cuda/cuda_dnn.cc:326] could not destroy cudnn handle: CUDNN_STATUS_BAD_PARAM<br>\n2017-04-12 11:29:55.861639: F tensorflow/core/kernels/conv_ops.cc:665] Check failed: stream-&gt;parent()-&gt;GetConvolveAlgorithms(&amp;algorithms)<br>\nAborted (core dumped)<br>\nBut If I call preprocess_input(), there is no error. It's very weired.<br>\nThanks a lot.</p>", "body_text": "Tensorflow: 1.1.0, no matter install from binary or source\nKeras: 2.0.3\n# -*- coding: utf-8 -*-\n'''ResNet50 model for Keras.\n\n# Reference:\n\n- [Deep Residual Learning for Image Recognition](https://arxiv.org/abs/1512.03385)\n\nAdapted from code contributed by BigMoyan.\n'''\nfrom __future__ import print_function\n\nimport numpy as np\nimport warnings\n\nfrom keras.layers import Input\nfrom keras import layers\nfrom keras.layers import Dense\nfrom keras.layers import Activation\nfrom keras.layers import Flatten\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.layers import ZeroPadding2D\nfrom keras.layers import AveragePooling2D\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.layers import BatchNormalization\nfrom keras.models import Model\nfrom keras.preprocessing import image\nimport keras.backend as K\nfrom keras.utils import layer_utils\nfrom keras.utils.data_utils import get_file\nfrom keras.applications.imagenet_utils import _obtain_input_shape\nfrom keras.applications.imagenet_utils import decode_predictions\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.engine.topology import get_source_inputs\n\n\nWEIGHTS_PATH = 'https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels.h5'\nWEIGHTS_PATH_NO_TOP = 'https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\n\ndef identity_block(input_tensor, kernel_size, filters, stage, block, name=None):\n    \"\"\"The identity block is the block that has no conv layer at shortcut.\n\n    # Arguments\n        input_tensor: input tensor\n        kernel_size: defualt 3, the kernel size of middle conv layer at main path\n        filters: list of integers, the filterss of 3 conv layer at main path\n        stage: integer, current stage label, used for generating layer names\n        block: 'a','b'..., current block label, used for generating layer names\n\n    # Returns\n        Output tensor for the block.\n    \"\"\"\n    filters1, filters2, filters3 = filters\n    if K.image_data_format() == 'channels_last':\n        bn_axis = 3\n    else:\n        bn_axis = 1\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n\n    x = Conv2D(filters1, (1, 1), name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n\n    x = Conv2D(filters2, kernel_size,\n               padding='same', name=conv_name_base + '2b')(x)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n\n    x = Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)\n\n    x = layers.add([x, input_tensor])\n    if name:\n        x = Activation('relu', name=name)(x)\n    else:\n        x = Activation('relu')(x)\n    return x\n\n\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\n    \"\"\"conv_block is the block that has a conv layer at shortcut\n\n    # Arguments\n        input_tensor: input tensor\n        kernel_size: defualt 3, the kernel size of middle conv layer at main path\n        filters: list of integers, the filterss of 3 conv layer at main path\n        stage: integer, current stage label, used for generating layer names\n        block: 'a','b'..., current block label, used for generating layer names\n\n    # Returns\n        Output tensor for the block.\n\n    Note that from stage 3, the first conv layer at main path is with strides=(2,2)\n    And the shortcut should have strides=(2,2) as well\n    \"\"\"\n    filters1, filters2, filters3 = filters\n    if K.image_data_format() == 'channels_last':\n        bn_axis = 3\n    else:\n        bn_axis = 1\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n\n    x = Conv2D(filters1, (1, 1), strides=strides,\n               name=conv_name_base + '2a')(input_tensor)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)\n    x = Activation('relu')(x)\n\n    x = Conv2D(filters2, kernel_size, padding='same',\n               name=conv_name_base + '2b')(x)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)\n    x = Activation('relu')(x)\n\n    x = Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)\n\n    shortcut = Conv2D(filters3, (1, 1), strides=strides,\n                      name=conv_name_base + '1')(input_tensor)\n    shortcut = BatchNormalization(axis=bn_axis, name=bn_name_base + '1')(shortcut)\n\n    x = layers.add([x, shortcut])\n    x = Activation('relu')(x)\n    return x\n\n\ndef ResNet50(include_top=True, weights='imagenet',\n             input_tensor=None, input_shape=None,\n             pooling=None,\n             classes=1000):\n    \"\"\"Instantiates the ResNet50 architecture.\n\n    Optionally loads weights pre-trained\n    on ImageNet. Note that when using TensorFlow,\n    for best performance you should set\n    `image_data_format=\"channels_last\"` in your Keras config\n    at ~/.keras/keras.json.\n\n    The model and the weights are compatible with both\n    TensorFlow and Theano. The data format\n    convention used by the model is the one\n    specified in your Keras config file.\n\n    # Arguments\n        include_top: whether to include the fully-connected\n            layer at the top of the network.\n        weights: one of `None` (random initialization)\n            or \"imagenet\" (pre-training on ImageNet).\n        input_tensor: optional Keras tensor (i.e. output of `layers.Input()`)\n            to use as image input for the model.\n        input_shape: optional shape tuple, only to be specified\n            if `include_top` is False (otherwise the input shape\n            has to be `(224, 224, 3)` (with `channels_last` data format)\n            or `(3, 224, 244)` (with `channels_first` data format).\n            It should have exactly 3 inputs channels,\n            and width and height should be no smaller than 197.\n            E.g. `(200, 200, 3)` would be one valid value.\n        pooling: Optional pooling mode for feature extraction\n            when `include_top` is `False`.\n            - `None` means that the output of the model will be\n                the 4D tensor output of the\n                last convolutional layer.\n            - `avg` means that global average pooling\n                will be applied to the output of the\n                last convolutional layer, and thus\n                the output of the model will be a 2D tensor.\n            - `max` means that global max pooling will\n                be applied.\n        classes: optional number of classes to classify images\n            into, only to be specified if `include_top` is True, and\n            if no `weights` argument is specified.\n\n    # Returns\n        A Keras model instance.\n\n    # Raises\n        ValueError: in case of invalid argument for `weights`,\n            or invalid input shape.\n    \"\"\"\n    if weights not in {'imagenet', None}:\n        raise ValueError('The `weights` argument should be either '\n                         '`None` (random initialization) or `imagenet` '\n                         '(pre-training on ImageNet).')\n\n    if weights == 'imagenet' and include_top and classes != 1000:\n        raise ValueError('If using `weights` as imagenet with `include_top`'\n                         ' as true, `classes` should be 1000')\n\n    # Determine proper input shape\n    input_shape = _obtain_input_shape(input_shape,\n                                      default_size=224,\n                                      min_size=197,\n                                      data_format=K.image_data_format(),\n                                      include_top=include_top)\n\n    if input_tensor is None:\n        img_input = Input(shape=input_shape)\n    else:\n        if not K.is_keras_tensor(input_tensor):\n            img_input = Input(tensor=input_tensor, shape=input_shape)\n        else:\n            img_input = input_tensor\n    if K.image_data_format() == 'channels_last':\n        bn_axis = 3\n    else:\n        bn_axis = 1\n\n    x = ZeroPadding2D((3, 3))(img_input)\n    x = Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)\n    x = BatchNormalization(axis=bn_axis, name='bn_conv1')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\n\n    x = conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='b')\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='c')\n\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block='a')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='b')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='c')\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='d', name='feat1')\n\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block='a')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='b')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='c')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='d')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='e')\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='f', name='feat2')\n\n    x = conv_block(x, 3, [512, 512, 2048], stage=5, block='a')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='b')\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='c', name='feat_layer')\n\n    x = AveragePooling2D((7, 7), name='avg_pool')(x)\n\n    if include_top:\n        x = Flatten()(x)\n        x = Dense(classes, activation='softmax', name='fc1000')(x)\n    else:\n        if pooling == 'avg':\n            x = GlobalAveragePooling2D()(x)\n        elif pooling == 'max':\n            x = GlobalMaxPooling2D()(x)\n\n    # Ensure that the model takes into account\n    # any potential predecessors of `input_tensor`.\n    if input_tensor is not None:\n        inputs = get_source_inputs(input_tensor)\n    else:\n        inputs = img_input\n    # Create model.\n    model = Model(inputs, x, name='resnet50')\n\n    # load weights\n    if weights == 'imagenet':\n        if include_top:\n            weights_path = get_file('resnet50_weights_tf_dim_ordering_tf_kernels.h5',\n                                    WEIGHTS_PATH,\n                                    cache_subdir='models',\n                                    md5_hash='a7b3fe01876f51b976af0dea6bc144eb')\n        else:\n            weights_path = get_file('resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5',\n                                    WEIGHTS_PATH_NO_TOP,\n                                    cache_subdir='models',\n                                    md5_hash='a268eb855778b3df3c7506639542a6af')\n        model.load_weights(weights_path)\n        if K.backend() == 'theano':\n            layer_utils.convert_all_kernels_in_model(model)\n\n        if K.image_data_format() == 'channels_first':\n            if include_top:\n                maxpool = model.get_layer(name='avg_pool')\n                shape = maxpool.output_shape[1:]\n                dense = model.get_layer(name='fc1000')\n                layer_utils.convert_dense_weights_data_format(dense, shape, 'channels_first')\n\n            if K.backend() == 'tensorflow':\n                warnings.warn('You are using the TensorFlow backend, yet you '\n                              'are using the Theano '\n                              'image data format convention '\n                              '(`image_data_format=\"channels_first\"`). '\n                              'For best performance, set '\n                              '`image_data_format=\"channels_last\"` in '\n                              'your Keras config '\n                              'at ~/.keras/keras.json.')\n    return model\n\ndef preprocess_input(x, dim_ordering='default'):\n     if dim_ordering == 'default':\n         dim_ordering = K.image_dim_ordering()\n     assert dim_ordering in {'tf', 'th'}\n\n     if dim_ordering == 'th':\n         x[0, :, :] -= 103.939\n         x[1, :, :] -= 116.779\n         x[2, :, :] -= 123.68\n         # 'RGB'->'BGR'\n         x = x[::-1, :, :]\n     else:\n         x[:, :, 0] -= 103.939\n         x[:, :, 1] -= 116.779\n         x[:, :, 2] -= 123.68\n         # 'RGB'->'BGR'\n         x = x[:, :, ::-1]\n     return x\n\ndef preprocess_image(im):\n     import cv2\n     im = cv2.resize(im, (224, 224)).astype(np.float32)\n     im = preprocess_input(im)\n\n     dim_ordering = K.image_dim_ordering()\n     assert dim_ordering in {'tf', 'th'}\n\n     if dim_ordering == 'th':\n         im = im.transpose((2,0,1))\n     return im\n\ndef test():\n    model = ResNet50(include_top=True, weights='imagenet')\n    img_path = 'elephant.jpg'\n    img = image.load_img(img_path, target_size=(224, 224))\n    x = image.img_to_array(img)\n    #x = preprocess_input(x)\n    #x = np.expand_dims(x, axis=0)\n    x = preprocess_image(x)\n    x = np.expand_dims(x, axis=0)\n\n    pred = model.predict(x)\n\nif __name__ == '__main__':\n    test()\n\nWhen I call preprocess_image() in the test() function, I got the error:\n2017-04-12 11:29:55.861593: E tensorflow/stream_executor/cuda/cuda_dnn.cc:359] could not create cudnn handle: CUDNN_STATUS_INTERNAL_ERROR\n2017-04-12 11:29:55.861630: E tensorflow/stream_executor/cuda/cuda_dnn.cc:326] could not destroy cudnn handle: CUDNN_STATUS_BAD_PARAM\n2017-04-12 11:29:55.861639: F tensorflow/core/kernels/conv_ops.cc:665] Check failed: stream->parent()->GetConvolveAlgorithms(&algorithms)\nAborted (core dumped)\nBut If I call preprocess_input(), there is no error. It's very weired.\nThanks a lot.", "body": "Tensorflow: 1.1.0, no matter install from binary or source\r\nKeras: 2.0.3\r\n~~~~\r\n# -*- coding: utf-8 -*-\r\n'''ResNet50 model for Keras.\r\n\r\n# Reference:\r\n\r\n- [Deep Residual Learning for Image Recognition](https://arxiv.org/abs/1512.03385)\r\n\r\nAdapted from code contributed by BigMoyan.\r\n'''\r\nfrom __future__ import print_function\r\n\r\nimport numpy as np\r\nimport warnings\r\n\r\nfrom keras.layers import Input\r\nfrom keras import layers\r\nfrom keras.layers import Dense\r\nfrom keras.layers import Activation\r\nfrom keras.layers import Flatten\r\nfrom keras.layers import Conv2D\r\nfrom keras.layers import MaxPooling2D\r\nfrom keras.layers import GlobalMaxPooling2D\r\nfrom keras.layers import ZeroPadding2D\r\nfrom keras.layers import AveragePooling2D\r\nfrom keras.layers import GlobalAveragePooling2D\r\nfrom keras.layers import BatchNormalization\r\nfrom keras.models import Model\r\nfrom keras.preprocessing import image\r\nimport keras.backend as K\r\nfrom keras.utils import layer_utils\r\nfrom keras.utils.data_utils import get_file\r\nfrom keras.applications.imagenet_utils import _obtain_input_shape\r\nfrom keras.applications.imagenet_utils import decode_predictions\r\nfrom keras.applications.imagenet_utils import preprocess_input\r\nfrom keras.engine.topology import get_source_inputs\r\n\r\n\r\nWEIGHTS_PATH = 'https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels.h5'\r\nWEIGHTS_PATH_NO_TOP = 'https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\r\n\r\n\r\ndef identity_block(input_tensor, kernel_size, filters, stage, block, name=None):\r\n    \"\"\"The identity block is the block that has no conv layer at shortcut.\r\n\r\n    # Arguments\r\n        input_tensor: input tensor\r\n        kernel_size: defualt 3, the kernel size of middle conv layer at main path\r\n        filters: list of integers, the filterss of 3 conv layer at main path\r\n        stage: integer, current stage label, used for generating layer names\r\n        block: 'a','b'..., current block label, used for generating layer names\r\n\r\n    # Returns\r\n        Output tensor for the block.\r\n    \"\"\"\r\n    filters1, filters2, filters3 = filters\r\n    if K.image_data_format() == 'channels_last':\r\n        bn_axis = 3\r\n    else:\r\n        bn_axis = 1\r\n    conv_name_base = 'res' + str(stage) + block + '_branch'\r\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\r\n\r\n    x = Conv2D(filters1, (1, 1), name=conv_name_base + '2a')(input_tensor)\r\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)\r\n    x = Activation('relu')(x)\r\n\r\n    x = Conv2D(filters2, kernel_size,\r\n               padding='same', name=conv_name_base + '2b')(x)\r\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)\r\n    x = Activation('relu')(x)\r\n\r\n    x = Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)\r\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)\r\n\r\n    x = layers.add([x, input_tensor])\r\n    if name:\r\n        x = Activation('relu', name=name)(x)\r\n    else:\r\n        x = Activation('relu')(x)\r\n    return x\r\n\r\n\r\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\r\n    \"\"\"conv_block is the block that has a conv layer at shortcut\r\n\r\n    # Arguments\r\n        input_tensor: input tensor\r\n        kernel_size: defualt 3, the kernel size of middle conv layer at main path\r\n        filters: list of integers, the filterss of 3 conv layer at main path\r\n        stage: integer, current stage label, used for generating layer names\r\n        block: 'a','b'..., current block label, used for generating layer names\r\n\r\n    # Returns\r\n        Output tensor for the block.\r\n\r\n    Note that from stage 3, the first conv layer at main path is with strides=(2,2)\r\n    And the shortcut should have strides=(2,2) as well\r\n    \"\"\"\r\n    filters1, filters2, filters3 = filters\r\n    if K.image_data_format() == 'channels_last':\r\n        bn_axis = 3\r\n    else:\r\n        bn_axis = 1\r\n    conv_name_base = 'res' + str(stage) + block + '_branch'\r\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\r\n\r\n    x = Conv2D(filters1, (1, 1), strides=strides,\r\n               name=conv_name_base + '2a')(input_tensor)\r\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)\r\n    x = Activation('relu')(x)\r\n\r\n    x = Conv2D(filters2, kernel_size, padding='same',\r\n               name=conv_name_base + '2b')(x)\r\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)\r\n    x = Activation('relu')(x)\r\n\r\n    x = Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)\r\n    x = BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)\r\n\r\n    shortcut = Conv2D(filters3, (1, 1), strides=strides,\r\n                      name=conv_name_base + '1')(input_tensor)\r\n    shortcut = BatchNormalization(axis=bn_axis, name=bn_name_base + '1')(shortcut)\r\n\r\n    x = layers.add([x, shortcut])\r\n    x = Activation('relu')(x)\r\n    return x\r\n\r\n\r\ndef ResNet50(include_top=True, weights='imagenet',\r\n             input_tensor=None, input_shape=None,\r\n             pooling=None,\r\n             classes=1000):\r\n    \"\"\"Instantiates the ResNet50 architecture.\r\n\r\n    Optionally loads weights pre-trained\r\n    on ImageNet. Note that when using TensorFlow,\r\n    for best performance you should set\r\n    `image_data_format=\"channels_last\"` in your Keras config\r\n    at ~/.keras/keras.json.\r\n\r\n    The model and the weights are compatible with both\r\n    TensorFlow and Theano. The data format\r\n    convention used by the model is the one\r\n    specified in your Keras config file.\r\n\r\n    # Arguments\r\n        include_top: whether to include the fully-connected\r\n            layer at the top of the network.\r\n        weights: one of `None` (random initialization)\r\n            or \"imagenet\" (pre-training on ImageNet).\r\n        input_tensor: optional Keras tensor (i.e. output of `layers.Input()`)\r\n            to use as image input for the model.\r\n        input_shape: optional shape tuple, only to be specified\r\n            if `include_top` is False (otherwise the input shape\r\n            has to be `(224, 224, 3)` (with `channels_last` data format)\r\n            or `(3, 224, 244)` (with `channels_first` data format).\r\n            It should have exactly 3 inputs channels,\r\n            and width and height should be no smaller than 197.\r\n            E.g. `(200, 200, 3)` would be one valid value.\r\n        pooling: Optional pooling mode for feature extraction\r\n            when `include_top` is `False`.\r\n            - `None` means that the output of the model will be\r\n                the 4D tensor output of the\r\n                last convolutional layer.\r\n            - `avg` means that global average pooling\r\n                will be applied to the output of the\r\n                last convolutional layer, and thus\r\n                the output of the model will be a 2D tensor.\r\n            - `max` means that global max pooling will\r\n                be applied.\r\n        classes: optional number of classes to classify images\r\n            into, only to be specified if `include_top` is True, and\r\n            if no `weights` argument is specified.\r\n\r\n    # Returns\r\n        A Keras model instance.\r\n\r\n    # Raises\r\n        ValueError: in case of invalid argument for `weights`,\r\n            or invalid input shape.\r\n    \"\"\"\r\n    if weights not in {'imagenet', None}:\r\n        raise ValueError('The `weights` argument should be either '\r\n                         '`None` (random initialization) or `imagenet` '\r\n                         '(pre-training on ImageNet).')\r\n\r\n    if weights == 'imagenet' and include_top and classes != 1000:\r\n        raise ValueError('If using `weights` as imagenet with `include_top`'\r\n                         ' as true, `classes` should be 1000')\r\n\r\n    # Determine proper input shape\r\n    input_shape = _obtain_input_shape(input_shape,\r\n                                      default_size=224,\r\n                                      min_size=197,\r\n                                      data_format=K.image_data_format(),\r\n                                      include_top=include_top)\r\n\r\n    if input_tensor is None:\r\n        img_input = Input(shape=input_shape)\r\n    else:\r\n        if not K.is_keras_tensor(input_tensor):\r\n            img_input = Input(tensor=input_tensor, shape=input_shape)\r\n        else:\r\n            img_input = input_tensor\r\n    if K.image_data_format() == 'channels_last':\r\n        bn_axis = 3\r\n    else:\r\n        bn_axis = 1\r\n\r\n    x = ZeroPadding2D((3, 3))(img_input)\r\n    x = Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)\r\n    x = BatchNormalization(axis=bn_axis, name='bn_conv1')(x)\r\n    x = Activation('relu')(x)\r\n    x = MaxPooling2D((3, 3), strides=(2, 2))(x)\r\n\r\n    x = conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))\r\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='b')\r\n    x = identity_block(x, 3, [64, 64, 256], stage=2, block='c')\r\n\r\n    x = conv_block(x, 3, [128, 128, 512], stage=3, block='a')\r\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='b')\r\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='c')\r\n    x = identity_block(x, 3, [128, 128, 512], stage=3, block='d', name='feat1')\r\n\r\n    x = conv_block(x, 3, [256, 256, 1024], stage=4, block='a')\r\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='b')\r\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='c')\r\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='d')\r\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='e')\r\n    x = identity_block(x, 3, [256, 256, 1024], stage=4, block='f', name='feat2')\r\n\r\n    x = conv_block(x, 3, [512, 512, 2048], stage=5, block='a')\r\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='b')\r\n    x = identity_block(x, 3, [512, 512, 2048], stage=5, block='c', name='feat_layer')\r\n\r\n    x = AveragePooling2D((7, 7), name='avg_pool')(x)\r\n\r\n    if include_top:\r\n        x = Flatten()(x)\r\n        x = Dense(classes, activation='softmax', name='fc1000')(x)\r\n    else:\r\n        if pooling == 'avg':\r\n            x = GlobalAveragePooling2D()(x)\r\n        elif pooling == 'max':\r\n            x = GlobalMaxPooling2D()(x)\r\n\r\n    # Ensure that the model takes into account\r\n    # any potential predecessors of `input_tensor`.\r\n    if input_tensor is not None:\r\n        inputs = get_source_inputs(input_tensor)\r\n    else:\r\n        inputs = img_input\r\n    # Create model.\r\n    model = Model(inputs, x, name='resnet50')\r\n\r\n    # load weights\r\n    if weights == 'imagenet':\r\n        if include_top:\r\n            weights_path = get_file('resnet50_weights_tf_dim_ordering_tf_kernels.h5',\r\n                                    WEIGHTS_PATH,\r\n                                    cache_subdir='models',\r\n                                    md5_hash='a7b3fe01876f51b976af0dea6bc144eb')\r\n        else:\r\n            weights_path = get_file('resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5',\r\n                                    WEIGHTS_PATH_NO_TOP,\r\n                                    cache_subdir='models',\r\n                                    md5_hash='a268eb855778b3df3c7506639542a6af')\r\n        model.load_weights(weights_path)\r\n        if K.backend() == 'theano':\r\n            layer_utils.convert_all_kernels_in_model(model)\r\n\r\n        if K.image_data_format() == 'channels_first':\r\n            if include_top:\r\n                maxpool = model.get_layer(name='avg_pool')\r\n                shape = maxpool.output_shape[1:]\r\n                dense = model.get_layer(name='fc1000')\r\n                layer_utils.convert_dense_weights_data_format(dense, shape, 'channels_first')\r\n\r\n            if K.backend() == 'tensorflow':\r\n                warnings.warn('You are using the TensorFlow backend, yet you '\r\n                              'are using the Theano '\r\n                              'image data format convention '\r\n                              '(`image_data_format=\"channels_first\"`). '\r\n                              'For best performance, set '\r\n                              '`image_data_format=\"channels_last\"` in '\r\n                              'your Keras config '\r\n                              'at ~/.keras/keras.json.')\r\n    return model\r\n\r\ndef preprocess_input(x, dim_ordering='default'):\r\n     if dim_ordering == 'default':\r\n         dim_ordering = K.image_dim_ordering()\r\n     assert dim_ordering in {'tf', 'th'}\r\n\r\n     if dim_ordering == 'th':\r\n         x[0, :, :] -= 103.939\r\n         x[1, :, :] -= 116.779\r\n         x[2, :, :] -= 123.68\r\n         # 'RGB'->'BGR'\r\n         x = x[::-1, :, :]\r\n     else:\r\n         x[:, :, 0] -= 103.939\r\n         x[:, :, 1] -= 116.779\r\n         x[:, :, 2] -= 123.68\r\n         # 'RGB'->'BGR'\r\n         x = x[:, :, ::-1]\r\n     return x\r\n\r\ndef preprocess_image(im):\r\n     import cv2\r\n     im = cv2.resize(im, (224, 224)).astype(np.float32)\r\n     im = preprocess_input(im)\r\n\r\n     dim_ordering = K.image_dim_ordering()\r\n     assert dim_ordering in {'tf', 'th'}\r\n\r\n     if dim_ordering == 'th':\r\n         im = im.transpose((2,0,1))\r\n     return im\r\n\r\ndef test():\r\n    model = ResNet50(include_top=True, weights='imagenet')\r\n    img_path = 'elephant.jpg'\r\n    img = image.load_img(img_path, target_size=(224, 224))\r\n    x = image.img_to_array(img)\r\n    #x = preprocess_input(x)\r\n    #x = np.expand_dims(x, axis=0)\r\n    x = preprocess_image(x)\r\n    x = np.expand_dims(x, axis=0)\r\n\r\n    pred = model.predict(x)\r\n\r\nif __name__ == '__main__':\r\n    test()\r\n~~~~\r\nWhen I call preprocess_image() in the test() function, I got the error:\r\n2017-04-12 11:29:55.861593: E tensorflow/stream_executor/cuda/cuda_dnn.cc:359] could not create cudnn handle: CUDNN_STATUS_INTERNAL_ERROR\r\n2017-04-12 11:29:55.861630: E tensorflow/stream_executor/cuda/cuda_dnn.cc:326] could not destroy cudnn handle: CUDNN_STATUS_BAD_PARAM\r\n2017-04-12 11:29:55.861639: F tensorflow/core/kernels/conv_ops.cc:665] Check failed: stream->parent()->GetConvolveAlgorithms(&algorithms)\r\nAborted (core dumped)\r\nBut If I call preprocess_input(), there is no error. It's very weired.\r\nThanks a lot."}