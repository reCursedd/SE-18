{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11690", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11690/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11690/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11690/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11690", "id": 244906967, "node_id": "MDU6SXNzdWUyNDQ5MDY5Njc=", "number": 11690, "title": "[Feature request] Instance Normalization", "user": {"login": "Zardinality", "id": 13702822, "node_id": "MDQ6VXNlcjEzNzAyODIy", "avatar_url": "https://avatars2.githubusercontent.com/u/13702822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zardinality", "html_url": "https://github.com/Zardinality", "followers_url": "https://api.github.com/users/Zardinality/followers", "following_url": "https://api.github.com/users/Zardinality/following{/other_user}", "gists_url": "https://api.github.com/users/Zardinality/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zardinality/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zardinality/subscriptions", "organizations_url": "https://api.github.com/users/Zardinality/orgs", "repos_url": "https://api.github.com/users/Zardinality/repos", "events_url": "https://api.github.com/users/Zardinality/events{/privacy}", "received_events_url": "https://api.github.com/users/Zardinality/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-07-23T12:24:01Z", "updated_at": "2018-06-18T13:23:28Z", "closed_at": "2017-07-26T03:24:06Z", "author_association": "NONE", "body_html": "<p><a href=\"https://arxiv.org/abs/1607.08022\" rel=\"nofollow\">Instance Normalization</a> is recently widely used in style transfer and GAN, since it avoid the drawback of batch normalization which brings in-batch correlations. Tensorflow only has quantized version instance norm right now, but a full version is also easy to implement, I am interested in it.<br>\nAlso I wonder if it is better to implemented in C++ using eigen or simply add some lines in <code>nn_impls.py</code> with the benefit of being able to use <code>fused_batch_norm</code>. <a href=\"https://github.com/dmlc/mxnet/blob/03b7d1402ab8d1142391c601fddbc4081632aa3c/src/operator/instance_norm-inl.h\">Mxnet</a> does the first way while <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/instancenorm.py\">Pytorch</a> use the latter method.</p>", "body_text": "Instance Normalization is recently widely used in style transfer and GAN, since it avoid the drawback of batch normalization which brings in-batch correlations. Tensorflow only has quantized version instance norm right now, but a full version is also easy to implement, I am interested in it.\nAlso I wonder if it is better to implemented in C++ using eigen or simply add some lines in nn_impls.py with the benefit of being able to use fused_batch_norm. Mxnet does the first way while Pytorch use the latter method.", "body": "[Instance Normalization](https://arxiv.org/abs/1607.08022) is recently widely used in style transfer and GAN, since it avoid the drawback of batch normalization which brings in-batch correlations. Tensorflow only has quantized version instance norm right now, but a full version is also easy to implement, I am interested in it. \r\nAlso I wonder if it is better to implemented in C++ using eigen or simply add some lines in `nn_impls.py` with the benefit of being able to use `fused_batch_norm`. [Mxnet](https://github.com/dmlc/mxnet/blob/03b7d1402ab8d1142391c601fddbc4081632aa3c/src/operator/instance_norm-inl.h) does the first way while [Pytorch](https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/instancenorm.py) use the latter method."}