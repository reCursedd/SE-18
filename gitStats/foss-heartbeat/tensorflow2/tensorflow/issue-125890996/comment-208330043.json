{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/208330043", "html_url": "https://github.com/tensorflow/tensorflow/issues/739#issuecomment-208330043", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/739", "id": 208330043, "node_id": "MDEyOklzc3VlQ29tbWVudDIwODMzMDA0Mw==", "user": {"login": "yixuanren", "id": 5889787, "node_id": "MDQ6VXNlcjU4ODk3ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5889787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yixuanren", "html_url": "https://github.com/yixuanren", "followers_url": "https://api.github.com/users/yixuanren/followers", "following_url": "https://api.github.com/users/yixuanren/following{/other_user}", "gists_url": "https://api.github.com/users/yixuanren/gists{/gist_id}", "starred_url": "https://api.github.com/users/yixuanren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yixuanren/subscriptions", "organizations_url": "https://api.github.com/users/yixuanren/orgs", "repos_url": "https://api.github.com/users/yixuanren/repos", "events_url": "https://api.github.com/users/yixuanren/events{/privacy}", "received_events_url": "https://api.github.com/users/yixuanren/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-11T13:04:02Z", "updated_at": "2016-04-11T13:04:02Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8815753\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Irtza\">@Irtza</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13210626\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/parhartanvir\">@parhartanvir</a> Sorry to reply so late. I'm a Chinese and it was the Spring Festival shortly after I finished my work on this. And now I've turned to my graduation project. But I still think I should provide some introduction to my progress here.</p>\n<p>In fact I didn't get to the expected destination. <strong>I only implemented the test part (i.e. the forward calculation part) of Fast-RCNN.</strong> The whole graph has to be split into three phases: before the <code>roi_pooling</code>, after it and itself.</p>\n<ul>\n<li><em>Part one</em> is just constructed in TensorFlow operations and executed by <code>Session.run()</code>.</li>\n<li>And <em>part two</em>, i.e. <code>roi_pooling</code> itself is written in native Python. In other words, I implement a Python function playing the same role as the <a href=\"https://github.com/rbgirshick/caffe-fast-rcnn/blob/fast-rcnn/src/caffe/layers/roi_pooling_layer.cpp\">roi_pooling_layer.cpp</a>, which leads to a definitely slow speed.</li>\n<li>Additionally, <em>part three</em>, which is also a native Python loop (for each ROI) with TensorFlow <code>run()</code> inside, makes some contributions to the poor performance too.</li>\n<li>Approximately it would take about 70s to process one image, where the first part less than 1s and third part about 6s.</li>\n</ul>\n<p>Then I spent some more time to change the Python <code>roi_pooling</code> function back in C, and use Cython to linked them together. Due to the efficiency of C, the time cost per image takes a great step to 7s or 8s. Actually, the main 60s of old <em>part two</em> has become to 1/300, which is 0.2s, and faster than any other part now.</p>\n<p>I'm not sure if my reply is too long, but I hope it can be helpful to you. :D</p>", "body_text": "@Irtza @parhartanvir Sorry to reply so late. I'm a Chinese and it was the Spring Festival shortly after I finished my work on this. And now I've turned to my graduation project. But I still think I should provide some introduction to my progress here.\nIn fact I didn't get to the expected destination. I only implemented the test part (i.e. the forward calculation part) of Fast-RCNN. The whole graph has to be split into three phases: before the roi_pooling, after it and itself.\n\nPart one is just constructed in TensorFlow operations and executed by Session.run().\nAnd part two, i.e. roi_pooling itself is written in native Python. In other words, I implement a Python function playing the same role as the roi_pooling_layer.cpp, which leads to a definitely slow speed.\nAdditionally, part three, which is also a native Python loop (for each ROI) with TensorFlow run() inside, makes some contributions to the poor performance too.\nApproximately it would take about 70s to process one image, where the first part less than 1s and third part about 6s.\n\nThen I spent some more time to change the Python roi_pooling function back in C, and use Cython to linked them together. Due to the efficiency of C, the time cost per image takes a great step to 7s or 8s. Actually, the main 60s of old part two has become to 1/300, which is 0.2s, and faster than any other part now.\nI'm not sure if my reply is too long, but I hope it can be helpful to you. :D", "body": "@Irtza @parhartanvir Sorry to reply so late. I'm a Chinese and it was the Spring Festival shortly after I finished my work on this. And now I've turned to my graduation project. But I still think I should provide some introduction to my progress here.\n\nIn fact I didn't get to the expected destination. **I only implemented the test part (i.e. the forward calculation part) of Fast-RCNN.** The whole graph has to be split into three phases: before the `roi_pooling`, after it and itself. \n- _Part one_ is just constructed in TensorFlow operations and executed by `Session.run()`.\n- And _part two_, i.e. `roi_pooling` itself is written in native Python. In other words, I implement a Python function playing the same role as the [roi_pooling_layer.cpp](https://github.com/rbgirshick/caffe-fast-rcnn/blob/fast-rcnn/src/caffe/layers/roi_pooling_layer.cpp), which leads to a definitely slow speed. \n- Additionally, _part three_, which is also a native Python loop (for each ROI) with TensorFlow `run()` inside, makes some contributions to the poor performance too. \n- Approximately it would take about 70s to process one image, where the first part less than 1s and third part about 6s.\n\nThen I spent some more time to change the Python `roi_pooling` function back in C, and use Cython to linked them together. Due to the efficiency of C, the time cost per image takes a great step to 7s or 8s. Actually, the main 60s of old _part two_ has become to 1/300, which is 0.2s, and faster than any other part now.\n\nI'm not sure if my reply is too long, but I hope it can be helpful to you. :D\n"}