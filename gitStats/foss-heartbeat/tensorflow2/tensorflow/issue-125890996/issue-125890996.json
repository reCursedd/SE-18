{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/739", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/739/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/739/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/739", "id": 125890996, "node_id": "MDU6SXNzdWUxMjU4OTA5OTY=", "number": 739, "title": "Does TensorFlow support Fast R-CNN currenly?", "user": {"login": "yixuanren", "id": 5889787, "node_id": "MDQ6VXNlcjU4ODk3ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5889787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yixuanren", "html_url": "https://github.com/yixuanren", "followers_url": "https://api.github.com/users/yixuanren/followers", "following_url": "https://api.github.com/users/yixuanren/following{/other_user}", "gists_url": "https://api.github.com/users/yixuanren/gists{/gist_id}", "starred_url": "https://api.github.com/users/yixuanren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yixuanren/subscriptions", "organizations_url": "https://api.github.com/users/yixuanren/orgs", "repos_url": "https://api.github.com/users/yixuanren/repos", "events_url": "https://api.github.com/users/yixuanren/events{/privacy}", "received_events_url": "https://api.github.com/users/yixuanren/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2016-01-11T08:00:39Z", "updated_at": "2016-08-24T07:36:39Z", "closed_at": "2016-01-12T05:46:56Z", "author_association": "NONE", "body_html": "<p>I've been working on transplanting Fast R-CNN to a TensorFlow version. And I came across 2 problems as below:</p>\n<ol>\n<li>In <a href=\"https://github.com/rbgirshick/caffe-fast-rcnn/blob/fast-rcnn/src/caffe/layers/roi_pooling_layer.cpp\">roi_pooling_layer.cpp</a>, the C++ implementation of RoI Pooling layer, a dynamic variable <code>num_rois</code> is used to control a loop to process each roi of each picture. Its value is stored in the original dataset and will only be valid during the graph is running. However, since the graph in TensorFlow has to be settled before it being run, I don't know what to put in the loop control as the iteration limit.</li>\n<li>After the roi_pooling_layer, there follows a InnerProduct layer (in Caffe), the shape of whose input depends on the output shape of the roi_pooling_layer, which ultimately depends on <code>num_rois</code>. So the shape of the corresponding <code>weight_variable</code> and <code>bias_variable</code> for the following operation <code>matmul</code>, which is going to act as the InnerProduct layer, cannot be settled before the graph is running.</li>\n</ol>\n<p>In addition, in the RoI Pooling layer, there are some other loop control variables based on the former calculation, like <code>hstart</code>, <code>hend</code>, <code>wstart</code> and <code>wend</code>. They are even harder to get valid values before the graph is built, because the <code>num_rois</code> is part of the input after all.</p>\n<p>So may I ask if TensorFlow supports Fast R-CNN (currently)? Or are there any possible specific tips to solve these problems?</p>\n<p>Thank you!</p>", "body_text": "I've been working on transplanting Fast R-CNN to a TensorFlow version. And I came across 2 problems as below:\n\nIn roi_pooling_layer.cpp, the C++ implementation of RoI Pooling layer, a dynamic variable num_rois is used to control a loop to process each roi of each picture. Its value is stored in the original dataset and will only be valid during the graph is running. However, since the graph in TensorFlow has to be settled before it being run, I don't know what to put in the loop control as the iteration limit.\nAfter the roi_pooling_layer, there follows a InnerProduct layer (in Caffe), the shape of whose input depends on the output shape of the roi_pooling_layer, which ultimately depends on num_rois. So the shape of the corresponding weight_variable and bias_variable for the following operation matmul, which is going to act as the InnerProduct layer, cannot be settled before the graph is running.\n\nIn addition, in the RoI Pooling layer, there are some other loop control variables based on the former calculation, like hstart, hend, wstart and wend. They are even harder to get valid values before the graph is built, because the num_rois is part of the input after all.\nSo may I ask if TensorFlow supports Fast R-CNN (currently)? Or are there any possible specific tips to solve these problems?\nThank you!", "body": "I've been working on transplanting Fast R-CNN to a TensorFlow version. And I came across 2 problems as below:\n1. In [roi_pooling_layer.cpp](https://github.com/rbgirshick/caffe-fast-rcnn/blob/fast-rcnn/src/caffe/layers/roi_pooling_layer.cpp), the C++ implementation of RoI Pooling layer, a dynamic variable `num_rois` is used to control a loop to process each roi of each picture. Its value is stored in the original dataset and will only be valid during the graph is running. However, since the graph in TensorFlow has to be settled before it being run, I don't know what to put in the loop control as the iteration limit.\n2. After the roi_pooling_layer, there follows a InnerProduct layer (in Caffe), the shape of whose input depends on the output shape of the roi_pooling_layer, which ultimately depends on `num_rois`. So the shape of the corresponding `weight_variable` and `bias_variable` for the following operation `matmul`, which is going to act as the InnerProduct layer, cannot be settled before the graph is running.\n\nIn addition, in the RoI Pooling layer, there are some other loop control variables based on the former calculation, like `hstart`, `hend`, `wstart` and `wend`. They are even harder to get valid values before the graph is built, because the `num_rois` is part of the input after all.\n\nSo may I ask if TensorFlow supports Fast R-CNN (currently)? Or are there any possible specific tips to solve these problems?\n\nThank you!\n"}