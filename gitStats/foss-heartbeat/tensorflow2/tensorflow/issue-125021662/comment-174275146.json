{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/174275146", "html_url": "https://github.com/tensorflow/tensorflow/issues/696#issuecomment-174275146", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/696", "id": 174275146, "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDI3NTE0Ng==", "user": {"login": "jramapuram", "id": 8204807, "node_id": "MDQ6VXNlcjgyMDQ4MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/8204807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jramapuram", "html_url": "https://github.com/jramapuram", "followers_url": "https://api.github.com/users/jramapuram/followers", "following_url": "https://api.github.com/users/jramapuram/following{/other_user}", "gists_url": "https://api.github.com/users/jramapuram/gists{/gist_id}", "starred_url": "https://api.github.com/users/jramapuram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jramapuram/subscriptions", "organizations_url": "https://api.github.com/users/jramapuram/orgs", "repos_url": "https://api.github.com/users/jramapuram/repos", "events_url": "https://api.github.com/users/jramapuram/events{/privacy}", "received_events_url": "https://api.github.com/users/jramapuram/received_events", "type": "User", "site_admin": false}, "created_at": "2016-01-24T10:06:00Z", "updated_at": "2016-01-24T10:06:00Z", "author_association": "NONE", "body_html": "<p>To provide an example, it would be great to be able to do something like this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\ntest_input <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">1</span>)\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default() <span class=\"pl-k\">as</span> g_1:\n    inputs <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>i<span class=\"pl-pds\">'</span></span>)\n    w <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">1</span>]), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>w<span class=\"pl-pds\">'</span></span>)\n    b <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([<span class=\"pl-c1\">10</span>]), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>)\n    output <span class=\"pl-k\">=</span> tf.identity(tf.mul(inputs, w) <span class=\"pl-k\">+</span> b, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>o<span class=\"pl-pds\">'</span></span>)\n\ngdef_1 <span class=\"pl-k\">=</span> g_1.as_graph_def()\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default() <span class=\"pl-k\">as</span> g_combined:\n    x <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>inputs<span class=\"pl-pds\">'</span></span>)\n    y, <span class=\"pl-k\">=</span> tf.import_graph_def(gdef_1, <span class=\"pl-v\">input_map</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>i:0<span class=\"pl-pds\">\"</span></span>: x}\n                             , <span class=\"pl-v\">return_elements</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>o:0<span class=\"pl-pds\">\"</span></span>])\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Maybe do some other imports here...</span>\n    cost <span class=\"pl-k\">=</span> tf.nn.l2_loss(y<span class=\"pl-k\">-</span>x)\n    optimizer <span class=\"pl-k\">=</span> tf.train.AdamOptimizer()\n    trainer <span class=\"pl-k\">=</span> optimizer.minimize(cost)\n\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n        sess.run(tf.initialize_all_variables())\n        _, c <span class=\"pl-k\">=</span> sess.run([trainer, cost], <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x: test_input})\n        <span class=\"pl-c1\">print</span> c</pre></div>", "body_text": "To provide an example, it would be great to be able to do something like this:\nimport tensorflow as tf\nimport numpy as np\n\ntest_input = np.random.rand(10, 1)\n\nwith tf.Graph().as_default() as g_1:\n    inputs = tf.placeholder(tf.float32, [10, 1], name='i')\n    w = tf.Variable(tf.random_normal([10,1]), name='w')\n    b = tf.Variable(tf.random_normal([10]), name='b')\n    output = tf.identity(tf.mul(inputs, w) + b, name='o')\n\ngdef_1 = g_1.as_graph_def()\n\nwith tf.Graph().as_default() as g_combined:\n    x = tf.placeholder(tf.float32, name='inputs')\n    y, = tf.import_graph_def(gdef_1, input_map={\"i:0\": x}\n                             , return_elements=[\"o:0\"])\n    # Maybe do some other imports here...\n    cost = tf.nn.l2_loss(y-x)\n    optimizer = tf.train.AdamOptimizer()\n    trainer = optimizer.minimize(cost)\n\n    with tf.Session() as sess:\n        sess.run(tf.initialize_all_variables())\n        _, c = sess.run([trainer, cost], feed_dict={x: test_input})\n        print c", "body": "To provide an example, it would be great to be able to do something like this:\n\n``` python\nimport tensorflow as tf\nimport numpy as np\n\ntest_input = np.random.rand(10, 1)\n\nwith tf.Graph().as_default() as g_1:\n    inputs = tf.placeholder(tf.float32, [10, 1], name='i')\n    w = tf.Variable(tf.random_normal([10,1]), name='w')\n    b = tf.Variable(tf.random_normal([10]), name='b')\n    output = tf.identity(tf.mul(inputs, w) + b, name='o')\n\ngdef_1 = g_1.as_graph_def()\n\nwith tf.Graph().as_default() as g_combined:\n    x = tf.placeholder(tf.float32, name='inputs')\n    y, = tf.import_graph_def(gdef_1, input_map={\"i:0\": x}\n                             , return_elements=[\"o:0\"])\n    # Maybe do some other imports here...\n    cost = tf.nn.l2_loss(y-x)\n    optimizer = tf.train.AdamOptimizer()\n    trainer = optimizer.minimize(cost)\n\n    with tf.Session() as sess:\n        sess.run(tf.initialize_all_variables())\n        _, c = sess.run([trainer, cost], feed_dict={x: test_input})\n        print c\n```\n"}