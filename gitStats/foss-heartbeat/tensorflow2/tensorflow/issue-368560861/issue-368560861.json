{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22861", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22861/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22861/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22861/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22861", "id": 368560861, "node_id": "MDU6SXNzdWUzNjg1NjA4NjE=", "number": 22861, "title": "Variable names created by tf.kera.Model.build() is inconsistent with that by tf.keras.Model.call()", "user": {"login": "laket", "id": 1290076, "node_id": "MDQ6VXNlcjEyOTAwNzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1290076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laket", "html_url": "https://github.com/laket", "followers_url": "https://api.github.com/users/laket/followers", "following_url": "https://api.github.com/users/laket/following{/other_user}", "gists_url": "https://api.github.com/users/laket/gists{/gist_id}", "starred_url": "https://api.github.com/users/laket/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laket/subscriptions", "organizations_url": "https://api.github.com/users/laket/orgs", "repos_url": "https://api.github.com/users/laket/repos", "events_url": "https://api.github.com/users/laket/events{/privacy}", "received_events_url": "https://api.github.com/users/laket/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097546578, "node_id": "MDU6TGFiZWwxMDk3NTQ2NTc4", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:keras", "name": "comp:keras", "color": "0052cc", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-10T08:59:19Z", "updated_at": "2018-10-24T13:08:34Z", "closed_at": "2018-10-24T13:08:34Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: 16.04.4 LTS</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: No</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:  v1.11.0-0-gc19e29306c 1.11.0</li>\n<li><strong>Python version</strong>: Python 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: No</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: No</li>\n<li><strong>CUDA/cuDNN version</strong>: 7.2.1</li>\n<li><strong>GPU model and memory</strong>: GTX 1060 6GB</li>\n<li><strong>Exact command to reproduce</strong>: Please see the below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>tf.keras.Model makes Variables of its weights, when its build() or call() is called first.</p>\n<p>While I found call() makes Variables with the prefix \"MyModel/\", build() make Variables without any prefix.</p>\n<p>That is inconvenient to manage non-object based checkpoint.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.keras <span class=\"pl-k\">as</span> keras\n\nlayers <span class=\"pl-k\">=</span> keras.layers\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Model</span>(<span class=\"pl-e\">keras</span>.<span class=\"pl-e\">Model</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MyModel<span class=\"pl-pds\">\"</span></span>):\n        <span class=\"pl-c1\">super</span>().<span class=\"pl-c1\">__init__</span>(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name)\n        <span class=\"pl-c1\">self</span>.conv1 <span class=\"pl-k\">=</span> layers.Conv2D(<span class=\"pl-c1\">32</span>, [<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>], <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conv1<span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-c1\">self</span>.conv2 <span class=\"pl-k\">=</span> layers.Conv2D(<span class=\"pl-c1\">64</span>, [<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>], <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conv2<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">call</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">images</span>):\n        featmap <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.conv1(images)\n        featmap <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.conv2(featmap)\n        <span class=\"pl-k\">return</span> featmap\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">inference</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">images</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">__call__</span>(images)\n\n\nmodel <span class=\"pl-k\">=</span> Model()\nflags <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>build<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">if</span> flags <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>build<span class=\"pl-pds\">\"</span></span>:\n    model.build(<span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>tf.TensorShape([<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>]))\n\n    <span class=\"pl-k\">for</span> w <span class=\"pl-k\">in</span> model.weights:\n        <span class=\"pl-c1\">print</span> (w.op.name)\n<span class=\"pl-k\">else</span>:\n    dummy <span class=\"pl-k\">=</span> tf.zeros([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>])\n    model(dummy)\n\n    <span class=\"pl-k\">for</span> w <span class=\"pl-k\">in</span> model.weights:\n        <span class=\"pl-c1\">print</span> (w.op.name)</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): 16.04.4 LTS\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below):  v1.11.0-0-gc19e29306c 1.11.0\nPython version: Python 3.5.2\nBazel version (if compiling from source): No\nGCC/Compiler version (if compiling from source): No\nCUDA/cuDNN version: 7.2.1\nGPU model and memory: GTX 1060 6GB\nExact command to reproduce: Please see the below\n\nDescribe the problem\ntf.keras.Model makes Variables of its weights, when its build() or call() is called first.\nWhile I found call() makes Variables with the prefix \"MyModel/\", build() make Variables without any prefix.\nThat is inconvenient to manage non-object based checkpoint.\nimport tensorflow as tf\nimport tensorflow.keras as keras\n\nlayers = keras.layers\n\nclass Model(keras.Model):\n    def __init__(self, name=\"MyModel\"):\n        super().__init__(name=name)\n        self.conv1 = layers.Conv2D(32, [5,5], activation=tf.nn.relu, name=\"conv1\")\n        self.conv2 = layers.Conv2D(64, [5,5], activation=tf.nn.relu, name=\"conv2\")\n\n    def call(self, images):\n        featmap = self.conv1(images)\n        featmap = self.conv2(featmap)\n        return featmap\n\n    def inference(self, images):\n        return self.__call__(images)\n\n\nmodel = Model()\nflags = \"build\"\n\nif flags == \"build\":\n    model.build(input_shape=tf.TensorShape([None, 32, 32, 3]))\n\n    for w in model.weights:\n        print (w.op.name)\nelse:\n    dummy = tf.zeros([1, 32, 32, 3])\n    model(dummy)\n\n    for w in model.weights:\n        print (w.op.name)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: 16.04.4 LTS\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: No\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**:  v1.11.0-0-gc19e29306c 1.11.0\r\n- **Python version**: Python 3.5.2\r\n- **Bazel version (if compiling from source)**: No\r\n- **GCC/Compiler version (if compiling from source)**: No\r\n- **CUDA/cuDNN version**: 7.2.1\r\n- **GPU model and memory**: GTX 1060 6GB\r\n- **Exact command to reproduce**: Please see the below\r\n\r\n### Describe the problem\r\ntf.keras.Model makes Variables of its weights, when its build() or call() is called first.\r\n\r\nWhile I found call() makes Variables with the prefix \"MyModel/\", build() make Variables without any prefix.\r\n\r\nThat is inconvenient to manage non-object based checkpoint.\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow.keras as keras\r\n\r\nlayers = keras.layers\r\n\r\nclass Model(keras.Model):\r\n    def __init__(self, name=\"MyModel\"):\r\n        super().__init__(name=name)\r\n        self.conv1 = layers.Conv2D(32, [5,5], activation=tf.nn.relu, name=\"conv1\")\r\n        self.conv2 = layers.Conv2D(64, [5,5], activation=tf.nn.relu, name=\"conv2\")\r\n\r\n    def call(self, images):\r\n        featmap = self.conv1(images)\r\n        featmap = self.conv2(featmap)\r\n        return featmap\r\n\r\n    def inference(self, images):\r\n        return self.__call__(images)\r\n\r\n\r\nmodel = Model()\r\nflags = \"build\"\r\n\r\nif flags == \"build\":\r\n    model.build(input_shape=tf.TensorShape([None, 32, 32, 3]))\r\n\r\n    for w in model.weights:\r\n        print (w.op.name)\r\nelse:\r\n    dummy = tf.zeros([1, 32, 32, 3])\r\n    model(dummy)\r\n\r\n    for w in model.weights:\r\n        print (w.op.name)\r\n```\r\n"}