{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1927", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1927/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1927/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1927/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1927", "id": 148160839, "node_id": "MDU6SXNzdWUxNDgxNjA4Mzk=", "number": 1927, "title": "libpng error when plotting in notebook after importing tensorflow", "user": {"login": "bnaul", "id": 903655, "node_id": "MDQ6VXNlcjkwMzY1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/903655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnaul", "html_url": "https://github.com/bnaul", "followers_url": "https://api.github.com/users/bnaul/followers", "following_url": "https://api.github.com/users/bnaul/following{/other_user}", "gists_url": "https://api.github.com/users/bnaul/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnaul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnaul/subscriptions", "organizations_url": "https://api.github.com/users/bnaul/orgs", "repos_url": "https://api.github.com/users/bnaul/repos", "events_url": "https://api.github.com/users/bnaul/events{/privacy}", "received_events_url": "https://api.github.com/users/bnaul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-13T19:29:58Z", "updated_at": "2016-07-08T09:33:35Z", "closed_at": "2016-04-15T15:59:21Z", "author_association": "NONE", "body_html": "<h3>Environment info</h3>\n<p>Operating System: CentOS Linux 7 x86_64</p>\n<h3>Tensorflow version</h3>\n<p>0.8.0rc0 (from binary)</p>\n<h3>Steps to reproduce</h3>\n<ol>\n<li>Fresh conda environment: <code>conda create -y -n plt_tf python=3.4 jupyter notebook matplotlib numpy &amp;&amp; source activate plt_tf</code></li>\n<li><code>pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.8.0rc0-cp34-cp34m-linux_x86_64.whl</code></li>\n<li>Launch a notebook server and execute the following:</li>\n</ol>\n<pre><code>import tensorflow as tf\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot([1,2], [1,2])\n</code></pre>\n<h3>Logs or other output that would be helpful</h3>\n<p>Traceback:</p>\n<pre><code>---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/IPython/core/formatters.py in __call__(self, obj)\n    337                 pass\n    338             else:\n--&gt; 339                 return printer(obj)\n    340             # Finally look for special method names\n    341             method = _safe_get_formatter_method(obj, self.print_method)\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/IPython/core/pylabtools.py in &lt;lambda&gt;(fig)\n    224 \n    225     if 'png' in formats:\n--&gt; 226         png_formatter.for_type(Figure, lambda fig: print_figure(fig, 'png', **kwargs))\n    227     if 'retina' in formats or 'png2x' in formats:\n    228         png_formatter.for_type(Figure, lambda fig: retina_figure(fig, **kwargs))\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/IPython/core/pylabtools.py in print_figure(fig, fmt, bbox_inches, **kwargs)\n    115 \n    116     bytes_io = BytesIO()\n--&gt; 117     fig.canvas.print_figure(bytes_io, **kw)\n    118     data = bytes_io.getvalue()\n    119     if fmt == 'svg':\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, **kwargs)\n   2178                     orientation=orientation,\n   2179                     dryrun=True,\n-&gt; 2180                     **kwargs)\n   2181                 renderer = self.figure._cachedRenderer\n   2182                 bbox_inches = self.figure.get_tightbbox(renderer)\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py in print_png(self, filename_or_obj, *args, **kwargs)\n    535             close = False\n    536         try:\n--&gt; 537             _png.write_png(renderer._renderer, filename_or_obj, self.figure.dpi)\n    538         finally:\n    539             if close:\n\nRuntimeError: Could not create write struct\n</code></pre>\n<p>Server log:</p>\n<pre><code>libpng warning: Application was compiled with png.h from libpng-1.6.17\nlibpng warning: Application  is  running with png.c from libpng-1.2.53\nlibpng error: Incompatible libpng version in application and library\n</code></pre>\n<h3>Workaround</h3>\n<p>Importing <code>tensorflow</code> after <code>matplotlib</code> prevents this from happening.</p>", "body_text": "Environment info\nOperating System: CentOS Linux 7 x86_64\nTensorflow version\n0.8.0rc0 (from binary)\nSteps to reproduce\n\nFresh conda environment: conda create -y -n plt_tf python=3.4 jupyter notebook matplotlib numpy && source activate plt_tf\npip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.8.0rc0-cp34-cp34m-linux_x86_64.whl\nLaunch a notebook server and execute the following:\n\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot([1,2], [1,2])\n\nLogs or other output that would be helpful\nTraceback:\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/IPython/core/formatters.py in __call__(self, obj)\n    337                 pass\n    338             else:\n--> 339                 return printer(obj)\n    340             # Finally look for special method names\n    341             method = _safe_get_formatter_method(obj, self.print_method)\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/IPython/core/pylabtools.py in <lambda>(fig)\n    224 \n    225     if 'png' in formats:\n--> 226         png_formatter.for_type(Figure, lambda fig: print_figure(fig, 'png', **kwargs))\n    227     if 'retina' in formats or 'png2x' in formats:\n    228         png_formatter.for_type(Figure, lambda fig: retina_figure(fig, **kwargs))\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/IPython/core/pylabtools.py in print_figure(fig, fmt, bbox_inches, **kwargs)\n    115 \n    116     bytes_io = BytesIO()\n--> 117     fig.canvas.print_figure(bytes_io, **kw)\n    118     data = bytes_io.getvalue()\n    119     if fmt == 'svg':\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, **kwargs)\n   2178                     orientation=orientation,\n   2179                     dryrun=True,\n-> 2180                     **kwargs)\n   2181                 renderer = self.figure._cachedRenderer\n   2182                 bbox_inches = self.figure.get_tightbbox(renderer)\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py in print_png(self, filename_or_obj, *args, **kwargs)\n    535             close = False\n    536         try:\n--> 537             _png.write_png(renderer._renderer, filename_or_obj, self.figure.dpi)\n    538         finally:\n    539             if close:\n\nRuntimeError: Could not create write struct\n\nServer log:\nlibpng warning: Application was compiled with png.h from libpng-1.6.17\nlibpng warning: Application  is  running with png.c from libpng-1.2.53\nlibpng error: Incompatible libpng version in application and library\n\nWorkaround\nImporting tensorflow after matplotlib prevents this from happening.", "body": "### Environment info\n\nOperating System: CentOS Linux 7 x86_64\n### Tensorflow version\n\n0.8.0rc0 (from binary)\n### Steps to reproduce\n1. Fresh conda environment: `conda create -y -n plt_tf python=3.4 jupyter notebook matplotlib numpy && source activate plt_tf`\n2. `pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.8.0rc0-cp34-cp34m-linux_x86_64.whl`\n3. Launch a notebook server and execute the following:\n\n```\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot([1,2], [1,2])\n```\n### Logs or other output that would be helpful\n\nTraceback:\n\n```\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/IPython/core/formatters.py in __call__(self, obj)\n    337                 pass\n    338             else:\n--> 339                 return printer(obj)\n    340             # Finally look for special method names\n    341             method = _safe_get_formatter_method(obj, self.print_method)\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/IPython/core/pylabtools.py in <lambda>(fig)\n    224 \n    225     if 'png' in formats:\n--> 226         png_formatter.for_type(Figure, lambda fig: print_figure(fig, 'png', **kwargs))\n    227     if 'retina' in formats or 'png2x' in formats:\n    228         png_formatter.for_type(Figure, lambda fig: retina_figure(fig, **kwargs))\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/IPython/core/pylabtools.py in print_figure(fig, fmt, bbox_inches, **kwargs)\n    115 \n    116     bytes_io = BytesIO()\n--> 117     fig.canvas.print_figure(bytes_io, **kw)\n    118     data = bytes_io.getvalue()\n    119     if fmt == 'svg':\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, **kwargs)\n   2178                     orientation=orientation,\n   2179                     dryrun=True,\n-> 2180                     **kwargs)\n   2181                 renderer = self.figure._cachedRenderer\n   2182                 bbox_inches = self.figure.get_tightbbox(renderer)\n\n/home/bnaul/miniconda3/envs/plt_tf/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py in print_png(self, filename_or_obj, *args, **kwargs)\n    535             close = False\n    536         try:\n--> 537             _png.write_png(renderer._renderer, filename_or_obj, self.figure.dpi)\n    538         finally:\n    539             if close:\n\nRuntimeError: Could not create write struct\n```\n\nServer log:\n\n```\nlibpng warning: Application was compiled with png.h from libpng-1.6.17\nlibpng warning: Application  is  running with png.c from libpng-1.2.53\nlibpng error: Incompatible libpng version in application and library\n```\n### Workaround\n\nImporting `tensorflow` after `matplotlib` prevents this from happening.\n"}