{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/254261734", "html_url": "https://github.com/tensorflow/tensorflow/issues/4932#issuecomment-254261734", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4932", "id": 254261734, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDI2MTczNA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-17T16:38:49Z", "updated_at": "2016-10-17T16:38:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1122127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mbz\">@mbz</a> Here's where it would block (on the first <code>sess.run()</code> call) in Python: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/f794cd393b1e7821fcc3cdcee9b6a4400f2540bf/tensorflow/python/client/session.py#L998\">tensorflow/tensorflow/python/client/session.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 998\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/f794cd393b1e7821fcc3cdcee9b6a4400f2540bf\">f794cd3</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L998\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"998\"></td>\n          <td id=\"LC998\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> tf_session.TF_ExtendGraph( </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n. Here's where it would block in the C++ runtime: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/f794cd393b1e7821fcc3cdcee9b6a4400f2540bf/tensorflow/core/distributed_runtime/master.cc#L168\">tensorflow/tensorflow/core/distributed_runtime/master.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 168\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/f794cd393b1e7821fcc3cdcee9b6a4400f2540bf\">f794cd3</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L168\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"168\"></td>\n          <td id=\"LC168\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> pending_zero_.<span class=\"pl-c1\">wait</span>(l); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n.</p>\n<p>It's also possible that the chief has made it past these points, and some connection has dropped. We disable fail_fast on the RPCs so gRPC will retry until it gets a response... this means that if a process fails we assume something (e.g. a cluster manager like Kubernetes) will restart the process for us. These might be a little harder to see though, because almost all of the Master-&gt;Worker RPCs are asynchronous, but there are various places where a stack trace would be informative.</p>", "body_text": "@mbz Here's where it would block (on the first sess.run() call) in Python: \n  \n    \n      tensorflow/tensorflow/python/client/session.py\n    \n    \n         Line 998\n      in\n      f794cd3\n    \n    \n    \n    \n\n        \n          \n           tf_session.TF_ExtendGraph( \n        \n    \n  \n\n. Here's where it would block in the C++ runtime: \n  \n    \n      tensorflow/tensorflow/core/distributed_runtime/master.cc\n    \n    \n         Line 168\n      in\n      f794cd3\n    \n    \n    \n    \n\n        \n          \n           pending_zero_.wait(l); \n        \n    \n  \n\n.\nIt's also possible that the chief has made it past these points, and some connection has dropped. We disable fail_fast on the RPCs so gRPC will retry until it gets a response... this means that if a process fails we assume something (e.g. a cluster manager like Kubernetes) will restart the process for us. These might be a little harder to see though, because almost all of the Master->Worker RPCs are asynchronous, but there are various places where a stack trace would be informative.", "body": "@mbz Here's where it would block (on the first `sess.run()` call) in Python: https://github.com/tensorflow/tensorflow/blob/f794cd393b1e7821fcc3cdcee9b6a4400f2540bf/tensorflow/python/client/session.py#L998. Here's where it would block in the C++ runtime: https://github.com/tensorflow/tensorflow/blob/f794cd393b1e7821fcc3cdcee9b6a4400f2540bf/tensorflow/core/distributed_runtime/master.cc#L168.\n\nIt's also possible that the chief has made it past these points, and some connection has dropped. We disable fail_fast on the RPCs so gRPC will retry until it gets a response... this means that if a process fails we assume something (e.g. a cluster manager like Kubernetes) will restart the process for us. These might be a little harder to see though, because almost all of the Master->Worker RPCs are asynchronous, but there are various places where a stack trace would be informative.\n"}