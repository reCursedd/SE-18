{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108487811", "pull_request_review_id": 29522051, "id": 108487811, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODQ4NzgxMQ==", "diff_hunk": "@@ -181,7 +181,16 @@ Step-by-step Windows build\n    More? -Dtensorflow_ENABLE_GPU=ON ^\n    More? -DCUDNN_HOME=\"D:\\...\\cudnn\"\n    ```\n-    \n+   To enable SIMD instructions with MSVC, as AVX and SSE, define them as follows:\n+   ```\n+   More? -Dtensorflow_WIN_CPU_SIMD_OPTIONS=/arch:AVX\n+   ```     \n+   or if more than one as in:\n+   ```\n+   More? -Dtensorflow_WIN_CPU_SIMD_OPTIONS=/arhc:[AVX2|SSE2]", "path": "tensorflow/contrib/cmake/README.md", "position": null, "original_position": 11, "commit_id": "e1b4a7a274ce05a68f8640476ff7b47b7075a40f", "original_commit_id": "a594a87fe0e429aa453424c80bffc613ec8fc0f8", "user": {"login": "Carmezim", "id": 16518410, "node_id": "MDQ6VXNlcjE2NTE4NDEw", "avatar_url": "https://avatars0.githubusercontent.com/u/16518410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Carmezim", "html_url": "https://github.com/Carmezim", "followers_url": "https://api.github.com/users/Carmezim/followers", "following_url": "https://api.github.com/users/Carmezim/following{/other_user}", "gists_url": "https://api.github.com/users/Carmezim/gists{/gist_id}", "starred_url": "https://api.github.com/users/Carmezim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Carmezim/subscriptions", "organizations_url": "https://api.github.com/users/Carmezim/orgs", "repos_url": "https://api.github.com/users/Carmezim/repos", "events_url": "https://api.github.com/users/Carmezim/events{/privacy}", "received_events_url": "https://api.github.com/users/Carmezim/received_events", "type": "User", "site_admin": false}, "body": "Oops, it was late ;)\r\n\r\nI had the same reading of this syntax. When looking at [1] it seems that is how you define the set of instructions but you are right. I tested on x64 at least, which supports AVX and AVX2 and using both passing as value to CMake option it yelled at me. \r\nRight at the moment I don't know an optimal solution of how multiple instructions can be handled, if there is a way to cache the first value if re-using the option with a different instruction for instance or something like that. \r\n\r\nI will change it leaving only the first option `/arch:ARG`, what do you think?\r\n\r\n[1] https://msdn.microsoft.com/en-us/library/7t5yh4fd.aspx ", "created_at": "2017-03-28T17:43:01Z", "updated_at": "2017-03-28T18:33:26Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8737#discussion_r108487811", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8737", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108487811"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8737#discussion_r108487811"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8737"}}, "body_html": "<p>Oops, it was late ;)</p>\n<p>I had the same reading of this syntax. When looking at [1] it seems that is how you define the set of instructions but you are right. I tested on x64 at least, which supports AVX and AVX2 and using both passing as value to CMake option it yelled at me.<br>\nRight at the moment I don't know an optimal solution of how multiple instructions can be handled, if there is a way to cache the first value if re-using the option with a different instruction for instance or something like that.</p>\n<p>I will change it leaving only the first option <code>/arch:ARG</code>, what do you think?</p>\n<p>[1] <a href=\"https://msdn.microsoft.com/en-us/library/7t5yh4fd.aspx\" rel=\"nofollow\">https://msdn.microsoft.com/en-us/library/7t5yh4fd.aspx</a></p>", "body_text": "Oops, it was late ;)\nI had the same reading of this syntax. When looking at [1] it seems that is how you define the set of instructions but you are right. I tested on x64 at least, which supports AVX and AVX2 and using both passing as value to CMake option it yelled at me.\nRight at the moment I don't know an optimal solution of how multiple instructions can be handled, if there is a way to cache the first value if re-using the option with a different instruction for instance or something like that.\nI will change it leaving only the first option /arch:ARG, what do you think?\n[1] https://msdn.microsoft.com/en-us/library/7t5yh4fd.aspx", "in_reply_to_id": 108478506}