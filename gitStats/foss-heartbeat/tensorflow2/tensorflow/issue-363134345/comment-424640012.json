{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424640012", "html_url": "https://github.com/tensorflow/tensorflow/issues/22482#issuecomment-424640012", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22482", "id": 424640012, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDY0MDAxMg==", "user": {"login": "maitreya2954", "id": 23173338, "node_id": "MDQ6VXNlcjIzMTczMzM4", "avatar_url": "https://avatars0.githubusercontent.com/u/23173338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maitreya2954", "html_url": "https://github.com/maitreya2954", "followers_url": "https://api.github.com/users/maitreya2954/followers", "following_url": "https://api.github.com/users/maitreya2954/following{/other_user}", "gists_url": "https://api.github.com/users/maitreya2954/gists{/gist_id}", "starred_url": "https://api.github.com/users/maitreya2954/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maitreya2954/subscriptions", "organizations_url": "https://api.github.com/users/maitreya2954/orgs", "repos_url": "https://api.github.com/users/maitreya2954/repos", "events_url": "https://api.github.com/users/maitreya2954/events{/privacy}", "received_events_url": "https://api.github.com/users/maitreya2954/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-26T08:59:15Z", "updated_at": "2018-09-28T04:23:40Z", "author_association": "NONE", "body_html": "<p>Hey <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=42781361\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/harshini-gadige\">@harshini-gadige</a><br>\nHere is the code for which i am facing the issue</p>\n<h2>Keras model</h2>\n<pre><code>model = Sequential()\nmodel.add(Reshape((image_dim, image_dim, 3), input_shape=(image_dim * image_dim * 3,)))\nmodel.add(Conv2D(32, (5, 5), padding='same', kernel_regularizer=l2(reg_strength)))\nmodel.add(LeakyReLU(alpha=alpha_LReLU))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(dropout_rate))\nmodel.add(Flatten())\nmodel.add(Dense(512, kernel_constraint=maxnorm(1), kernel_regularizer=l2(reg_strength)))\nmodel.add(LeakyReLU(alpha=alpha_LReLU))\nmodel.add(Dropout(dropout_rate))\nmodel.add(Dense(64, kernel_constraint=maxnorm(1), kernel_regularizer=l2(reg_strength)))\nmodel.add(LeakyReLU(alpha=alpha_LReLU))\nmodel.add(Dropout(dropout_rate))\nmodel.add(Dense(num_of_classes, activation='softmax', kernel_regularizer=l2(reg_strength)))\n</code></pre>\n<h2>Inferencing into protobuf file</h2>\n<pre><code>from tensorflow.python.framework import graph_util\nfrom tensorflow.python.framework import graph_io\nif args.quantize:\n    from tensorflow.tools.graph_transforms import TransformGraph\n    transforms = [\"quantize_weights\", \"quantize_nodes\"]\n    transformed_graph_def = TransformGraph(sess.graph.as_graph_def(), [], pred_node_names, transforms)\n    constant_graph = graph_util.convert_variables_to_constants(sess, transformed_graph_def, pred_node_names)\nelse:\n    constant_graph = graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), pred_node_names)    \ngraph_io.write_graph(constant_graph, output_fld, args.output_model_file, as_text=False)\n</code></pre>\n<h2>Android</h2>\n<pre><code>inferenceInterface = new TensorFlowInferenceInterface(getAssets(), \"CNNMODEL.pb\");                Log.d(\"GETREP\", \"Tensorflow model loaded...Input size: \" + String.valueOf(input.length));\n//dimensions of input is (1, 3072)\nfloat[] output = predict(input);\n\nprivate float[] predict(float[] input){\n        // model has only 2 output neuron\n        float output[] = new float[2];\n        inferenceInterface.feed(\"reshape_1_input\", input, 1, input.length);\n        Log.d(\"GETREP\", \"Feed completed\");\n        inferenceInterface.run(new String[]{\"dense_2/Softmax\"});\n        Log.d(\"GETREP\", \"Run completed\");\n        inferenceInterface.fetch(\"dense_2/Softmax\", output);\n        // return prediction\n        return output;\n    }\n</code></pre>", "body_text": "Hey @harshini-gadige\nHere is the code for which i am facing the issue\nKeras model\nmodel = Sequential()\nmodel.add(Reshape((image_dim, image_dim, 3), input_shape=(image_dim * image_dim * 3,)))\nmodel.add(Conv2D(32, (5, 5), padding='same', kernel_regularizer=l2(reg_strength)))\nmodel.add(LeakyReLU(alpha=alpha_LReLU))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(dropout_rate))\nmodel.add(Flatten())\nmodel.add(Dense(512, kernel_constraint=maxnorm(1), kernel_regularizer=l2(reg_strength)))\nmodel.add(LeakyReLU(alpha=alpha_LReLU))\nmodel.add(Dropout(dropout_rate))\nmodel.add(Dense(64, kernel_constraint=maxnorm(1), kernel_regularizer=l2(reg_strength)))\nmodel.add(LeakyReLU(alpha=alpha_LReLU))\nmodel.add(Dropout(dropout_rate))\nmodel.add(Dense(num_of_classes, activation='softmax', kernel_regularizer=l2(reg_strength)))\n\nInferencing into protobuf file\nfrom tensorflow.python.framework import graph_util\nfrom tensorflow.python.framework import graph_io\nif args.quantize:\n    from tensorflow.tools.graph_transforms import TransformGraph\n    transforms = [\"quantize_weights\", \"quantize_nodes\"]\n    transformed_graph_def = TransformGraph(sess.graph.as_graph_def(), [], pred_node_names, transforms)\n    constant_graph = graph_util.convert_variables_to_constants(sess, transformed_graph_def, pred_node_names)\nelse:\n    constant_graph = graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), pred_node_names)    \ngraph_io.write_graph(constant_graph, output_fld, args.output_model_file, as_text=False)\n\nAndroid\ninferenceInterface = new TensorFlowInferenceInterface(getAssets(), \"CNNMODEL.pb\");                Log.d(\"GETREP\", \"Tensorflow model loaded...Input size: \" + String.valueOf(input.length));\n//dimensions of input is (1, 3072)\nfloat[] output = predict(input);\n\nprivate float[] predict(float[] input){\n        // model has only 2 output neuron\n        float output[] = new float[2];\n        inferenceInterface.feed(\"reshape_1_input\", input, 1, input.length);\n        Log.d(\"GETREP\", \"Feed completed\");\n        inferenceInterface.run(new String[]{\"dense_2/Softmax\"});\n        Log.d(\"GETREP\", \"Run completed\");\n        inferenceInterface.fetch(\"dense_2/Softmax\", output);\n        // return prediction\n        return output;\n    }", "body": "Hey @harshini-gadige \r\nHere is the code for which i am facing the issue\r\n## Keras model\r\n```\r\nmodel = Sequential()\r\nmodel.add(Reshape((image_dim, image_dim, 3), input_shape=(image_dim * image_dim * 3,)))\r\nmodel.add(Conv2D(32, (5, 5), padding='same', kernel_regularizer=l2(reg_strength)))\r\nmodel.add(LeakyReLU(alpha=alpha_LReLU))\r\nmodel.add(MaxPooling2D(pool_size=(2,2)))\r\nmodel.add(Dropout(dropout_rate))\r\nmodel.add(Flatten())\r\nmodel.add(Dense(512, kernel_constraint=maxnorm(1), kernel_regularizer=l2(reg_strength)))\r\nmodel.add(LeakyReLU(alpha=alpha_LReLU))\r\nmodel.add(Dropout(dropout_rate))\r\nmodel.add(Dense(64, kernel_constraint=maxnorm(1), kernel_regularizer=l2(reg_strength)))\r\nmodel.add(LeakyReLU(alpha=alpha_LReLU))\r\nmodel.add(Dropout(dropout_rate))\r\nmodel.add(Dense(num_of_classes, activation='softmax', kernel_regularizer=l2(reg_strength)))\r\n```\r\n## Inferencing into protobuf file\r\n```\r\nfrom tensorflow.python.framework import graph_util\r\nfrom tensorflow.python.framework import graph_io\r\nif args.quantize:\r\n    from tensorflow.tools.graph_transforms import TransformGraph\r\n    transforms = [\"quantize_weights\", \"quantize_nodes\"]\r\n    transformed_graph_def = TransformGraph(sess.graph.as_graph_def(), [], pred_node_names, transforms)\r\n    constant_graph = graph_util.convert_variables_to_constants(sess, transformed_graph_def, pred_node_names)\r\nelse:\r\n    constant_graph = graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), pred_node_names)    \r\ngraph_io.write_graph(constant_graph, output_fld, args.output_model_file, as_text=False)\r\n```\r\n## Android\r\n```\r\ninferenceInterface = new TensorFlowInferenceInterface(getAssets(), \"CNNMODEL.pb\");                Log.d(\"GETREP\", \"Tensorflow model loaded...Input size: \" + String.valueOf(input.length));\r\n//dimensions of input is (1, 3072)\r\nfloat[] output = predict(input);\r\n\r\nprivate float[] predict(float[] input){\r\n        // model has only 2 output neuron\r\n        float output[] = new float[2];\r\n        inferenceInterface.feed(\"reshape_1_input\", input, 1, input.length);\r\n        Log.d(\"GETREP\", \"Feed completed\");\r\n        inferenceInterface.run(new String[]{\"dense_2/Softmax\"});\r\n        Log.d(\"GETREP\", \"Run completed\");\r\n        inferenceInterface.fetch(\"dense_2/Softmax\", output);\r\n        // return prediction\r\n        return output;\r\n    }\r\n```"}