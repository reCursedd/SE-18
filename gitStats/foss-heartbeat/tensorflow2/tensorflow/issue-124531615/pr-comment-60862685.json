{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60862685", "pull_request_review_id": null, "id": 60862685, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODYyNjg1", "diff_hunk": "@@ -127,25 +146,35 @@ while true; do\n     fi\n     # Result returned from \"read\" will be used unexpanded. That make \"~\" unuseable.\n     # Going through one more level of expansion to handle that.\n-    CUDNN_INSTALL_PATH=$(bash -c \"readlink -f $CUDNN_INSTALL_PATH\")\n+    CUDNN_INSTALL_PATH=`${PYTHON_BIN_PATH} -c \"import os; print(os.path.realpath(os.path.expanduser('${CUDNN_INSTALL_PATH}')))\"`\n   fi\n-  if [[ -z \"$TF_CUDNN_VERSION\" ]]; then\n-    TF_CUDNN_EXT=\"\"\n-  else\n-    TF_CUDNN_EXT=\".$TF_CUDNN_VERSION\"\n+\n+  if [ \"$OSNAME\" == \"Linux\" ]; then\n+    CUDA_DNN_LIB_PATH=\"lib64/libcudnn.so.${TF_CUDNN_VERSION}\"\n+    CUDA_DNN_LIB_ALT_PATH=\"libcudnn.so.${TF_CUDNN_VERSION}\"\n+  elif [ \"$OSNAME\" == \"Darwin\" ]; then\n+    CUDA_DNN_LIB_PATH=\"lib/libcudnn.${TF_CUDNN_VERSION}.dylib\"\n+    CUDA_DNN_LIB_ALT_PATH=\"libcudnn.${TF_CUDNN_VERSION}.dylib\"\n   fi\n-  if [ -e \"$CUDNN_INSTALL_PATH/libcudnn.so${TF_CUDNN_EXT}\" -o -e \"$CUDNN_INSTALL_PATH/lib64/libcudnn.so${TF_CUDNN_EXT}\" ]; then", "path": "configure", "position": null, "original_position": 81, "commit_id": "e11c8b3dbd6ee4f3f4b3030916ec8efe356b34b3", "original_commit_id": "20985da1720fa5f2b00bacabcf59121164eaac44", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "So the error here is: \n\nERROR: /workspace/third_party/gpus/cuda/BUILD:94:12: in srcs attribute of cc_library rule //third_party/gpus/cuda:cudnn: file '//third_party/gpus/cuda:lib64/libcudnn.so.' is misplaced here (expected .cc, .cpp, .cxx, .c++, .C, .c, .h, .hh, .hpp, .hxx, .inc, .S, .s, .asm, .a, .pic.a, .lo, .pic.lo, .so, .dylib, .o or .pic.o).\n\nPrior to your change, if the user did not set a version, it would default to libcudnn.so, which is a symlink to whatever the latest installed version is (and this is what our tests use).  Now it's being set to libcudnn.so.${TF_CUDNN_VERSION} and that variable is empty.\n\nIs it possible to switch back to the old mode of doing things, where the default is the empty version and the user can specify a specific version (OS X users will manually type in 4 and 7.5 for the versions).  That will also make sure that existing users who depend on the current behavior aren't broken by this change.\n", "created_at": "2016-04-25T04:58:18Z", "updated_at": "2016-04-27T06:43:33Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/664#discussion_r60862685", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/664", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60862685"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/664#discussion_r60862685"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/664"}}, "body_html": "<p>So the error here is:</p>\n<p>ERROR: /workspace/third_party/gpus/cuda/BUILD:94:12: in srcs attribute of cc_library rule //third_party/gpus/cuda:cudnn: file '//third_party/gpus/cuda:lib64/libcudnn.so.' is misplaced here (expected .cc, .cpp, .cxx, .c++, .C, .c, .h, .hh, .hpp, .hxx, .inc, .S, .s, .asm, .a, .pic.a, .lo, .pic.lo, .so, .dylib, .o or .pic.o).</p>\n<p>Prior to your change, if the user did not set a version, it would default to libcudnn.so, which is a symlink to whatever the latest installed version is (and this is what our tests use).  Now it's being set to libcudnn.so.${TF_CUDNN_VERSION} and that variable is empty.</p>\n<p>Is it possible to switch back to the old mode of doing things, where the default is the empty version and the user can specify a specific version (OS X users will manually type in 4 and 7.5 for the versions).  That will also make sure that existing users who depend on the current behavior aren't broken by this change.</p>", "body_text": "So the error here is:\nERROR: /workspace/third_party/gpus/cuda/BUILD:94:12: in srcs attribute of cc_library rule //third_party/gpus/cuda:cudnn: file '//third_party/gpus/cuda:lib64/libcudnn.so.' is misplaced here (expected .cc, .cpp, .cxx, .c++, .C, .c, .h, .hh, .hpp, .hxx, .inc, .S, .s, .asm, .a, .pic.a, .lo, .pic.lo, .so, .dylib, .o or .pic.o).\nPrior to your change, if the user did not set a version, it would default to libcudnn.so, which is a symlink to whatever the latest installed version is (and this is what our tests use).  Now it's being set to libcudnn.so.${TF_CUDNN_VERSION} and that variable is empty.\nIs it possible to switch back to the old mode of doing things, where the default is the empty version and the user can specify a specific version (OS X users will manually type in 4 and 7.5 for the versions).  That will also make sure that existing users who depend on the current behavior aren't broken by this change."}