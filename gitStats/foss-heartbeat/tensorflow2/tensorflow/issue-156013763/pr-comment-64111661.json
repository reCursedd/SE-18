{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/64111661", "pull_request_review_id": null, "id": 64111661, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTExNjYx", "diff_hunk": "@@ -84,3 +86,49 @@ def exponential_decay(learning_rate, global_step, decay_steps, decay_rate,\n     if staircase:\n       p = math_ops.floor(p)\n     return math_ops.mul(learning_rate, math_ops.pow(decay_rate, p), name=name)\n+\n+def piecewise_constant(x, boundaries, values, name=None):\n+  \"\"\" Piecewise constant from boundaries and interval values.\n+  \n+  Example: use a learning rate that's 1.0 for the first 100000 steps, 0.5\n+    for steps 100001 to 110000, and 0.1 for any additional steps.\n+  \n+  ```python\n+  global_step = tf.Variable(0, trainable=False)\n+  boundaries = [100000, 110000]\n+  values = [1.0, 0.5, 0.1]\n+  learning_rate = tf.train.piecewise_constant(global_step, boundaries, values)\n+  \n+  # Later, whenever we perform an optimization step, we increment global_step.\n+  ```\n+  \n+  Args:\n+    x: A 0-D scalar Tensor. Must be one of the following types: `float32`,\n+    `float64`, `uint8`, `int8`, `int16`, `int32`, `int64`.\n+    boundaries: A list of `float`s or `int`s with strictly increasing entries.\n+    values: A list of `float`s or `int`s that specifies the values for the\n+      intervals defined by `boundaries`. (It should therefore have one more\n+      element than `boundaries`.", "path": "tensorflow/python/training/learning_rate_decay.py", "position": null, "original_position": 35, "commit_id": "917f3a71e2fa81257423109480d4a419fdeb9ac4", "original_commit_id": "93503e197d55260f96b88465e37550650ddb3b6e", "user": {"login": "rdipietro", "id": 5150559, "node_id": "MDQ6VXNlcjUxNTA1NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5150559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdipietro", "html_url": "https://github.com/rdipietro", "followers_url": "https://api.github.com/users/rdipietro/followers", "following_url": "https://api.github.com/users/rdipietro/following{/other_user}", "gists_url": "https://api.github.com/users/rdipietro/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdipietro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdipietro/subscriptions", "organizations_url": "https://api.github.com/users/rdipietro/orgs", "repos_url": "https://api.github.com/users/rdipietro/repos", "events_url": "https://api.github.com/users/rdipietro/events{/privacy}", "received_events_url": "https://api.github.com/users/rdipietro/received_events", "type": "User", "site_admin": false}, "body": "It seems like `convert_n_to_tensor` simply loops over the list, calling `convert_to_tensor` on each element. Does this really end up adding fewer nodes to the graph?\n\nIf not, I suppose it could be useful to accept a list of `Tensor`s, but maybe it'd be worth waiting to see if this is a needed use case? I say this because it's easy to include error checks for Python lists, for example throwing an `InvalidArgumentError` if types don't match, or if `boundaries` isn't strictly increasing, but it's not straightforward (at least for me) to do this error checking with a list of `Tensor`s.\n\nIf you'd very much prefer the list-of-`Tensor`s route, can you please point to some code which checks `Tensor`s for conditions and generates an `InvalidArgumentError` if necessary?\n\nEdit: If `convert_n_to_tensor` does add fewer nodes, then one more option is to accept a list of floats/integers, error check, and then use `convert_n_to_tensor` ...\n", "created_at": "2016-05-20T21:44:19Z", "updated_at": "2016-05-24T17:50:20Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2442#discussion_r64111661", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2442", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/64111661"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2442#discussion_r64111661"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2442"}}, "body_html": "<p>It seems like <code>convert_n_to_tensor</code> simply loops over the list, calling <code>convert_to_tensor</code> on each element. Does this really end up adding fewer nodes to the graph?</p>\n<p>If not, I suppose it could be useful to accept a list of <code>Tensor</code>s, but maybe it'd be worth waiting to see if this is a needed use case? I say this because it's easy to include error checks for Python lists, for example throwing an <code>InvalidArgumentError</code> if types don't match, or if <code>boundaries</code> isn't strictly increasing, but it's not straightforward (at least for me) to do this error checking with a list of <code>Tensor</code>s.</p>\n<p>If you'd very much prefer the list-of-<code>Tensor</code>s route, can you please point to some code which checks <code>Tensor</code>s for conditions and generates an <code>InvalidArgumentError</code> if necessary?</p>\n<p>Edit: If <code>convert_n_to_tensor</code> does add fewer nodes, then one more option is to accept a list of floats/integers, error check, and then use <code>convert_n_to_tensor</code> ...</p>", "body_text": "It seems like convert_n_to_tensor simply loops over the list, calling convert_to_tensor on each element. Does this really end up adding fewer nodes to the graph?\nIf not, I suppose it could be useful to accept a list of Tensors, but maybe it'd be worth waiting to see if this is a needed use case? I say this because it's easy to include error checks for Python lists, for example throwing an InvalidArgumentError if types don't match, or if boundaries isn't strictly increasing, but it's not straightforward (at least for me) to do this error checking with a list of Tensors.\nIf you'd very much prefer the list-of-Tensors route, can you please point to some code which checks Tensors for conditions and generates an InvalidArgumentError if necessary?\nEdit: If convert_n_to_tensor does add fewer nodes, then one more option is to accept a list of floats/integers, error check, and then use convert_n_to_tensor ..."}