{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8416", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8416/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8416/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8416/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8416", "id": 214259326, "node_id": "MDU6SXNzdWUyMTQyNTkzMjY=", "number": 8416, "title": "CPU resources of Tensorflow's docker containers could not be controlled by --cup-shares  ", "user": {"login": "yoshihingis", "id": 18341725, "node_id": "MDQ6VXNlcjE4MzQxNzI1", "avatar_url": "https://avatars2.githubusercontent.com/u/18341725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshihingis", "html_url": "https://github.com/yoshihingis", "followers_url": "https://api.github.com/users/yoshihingis/followers", "following_url": "https://api.github.com/users/yoshihingis/following{/other_user}", "gists_url": "https://api.github.com/users/yoshihingis/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshihingis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshihingis/subscriptions", "organizations_url": "https://api.github.com/users/yoshihingis/orgs", "repos_url": "https://api.github.com/users/yoshihingis/repos", "events_url": "https://api.github.com/users/yoshihingis/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshihingis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-03-15T01:59:13Z", "updated_at": "2018-11-22T18:51:39Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>Environment info</h3>\n<p>OS:Ubuntu14.04LTS<br>\nGPU:Nvidia Pascal TITUN X<br>\nCUDA8.0<br>\ncuDNN CUDA8.0 V5.1<br>\nDocker Verison:17.03.0-ce<br>\nNvidia docker : 1.0.1<br>\nCPU Intel Core i7 6900K , Hyper-THreading off , Turbo boost off</p>\n<p>####Docker file<br>\nI installed Tensorflow by Dockerfile as below;</p>\n<p>================================<br>\nFROM nvidia/cuda:8.0-cudnn5-devel</p>\n<p>ENV http_proxy <a href=\"http://mycompany.proxy:8080\" rel=\"nofollow\">http://mycompany.proxy:8080</a><br>\nENV https_proxy <a href=\"http://mycompany.proxyp:8080\" rel=\"nofollow\">http://mycompany.proxyp:8080</a></p>\n<p>RUN     apt-get update  &amp;&amp;  apt-get install -y <br>\npython-dev <br>\npython-pip <br>\nnano <br>\ngit</p>\n<p>RUN    rm -rf /var/lib/apt/lists/* /var/cache/apt/archieves/*</p>\n<p>RUN    pip install --upgrade --user <a href=\"https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.0-cp27-none-linux_x86_64.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.0-cp27-none-linux_x86_64.whl</a></p>\n<p>WORKDIR /root/.local/lib/python2.7/site-packages/tensorflow</p>\n<p>RUN git clone <a href=\"https://github.com/tensorflow/models.git\">https://github.com/tensorflow/models.git</a></p>\n<p>WORKDIR /root/.local/lib/python2.7/site-packages/tensorflow/models/tutorials/image/cifar10</p>\n<p>####My Procedure[a]<br>\n(1) At first ,I build Dockerfile<br>\n$ nvidia-docker build -t cpu:tensorflow0.</p>\n<pre><code> Tensorflow docker image was build with no-problem and no-erros.\n</code></pre>\n<p>(2)Next  I run two docker container and log in two container via Bash<br>\n$ nvidia-docker run --cpuset-cpus=0-5 --cpu-shares=2048 -it cpu:tensorflow0<br>\n$nvidia-docker run --cpuset-cpus=0-5 --cpu-shares=1024 -it cpu:tensorflow0</p>\n<pre><code>I used all CPU cores(6 cores).\n</code></pre>\n<p>(3) I did \"python cifar10_train.py\" on two containers ,and check cpu-resources by docker stats.<br>\nBy the way, tow python examples\"cifar10_train.py\" were same code.<br>\nCPU Resource of one container was  339.86%<br>\nCPU Resources of another on another container was 230.19%</p>\n<pre><code>  CPU Resouce Rate 339.86 : 230.19 was not different from --cpu-shares Rate 2048:1024 \n</code></pre>\n<p>####My Procedure[b]<br>\nTo make sure, I did same procedure by using CPU 5cores.</p>\n<p>(1)Next  I run two docker container and log in two container via Bash<br>\n$ nvidia-docker run --cpuset-cpus=0-4 --cpu-shares=2048 -it cpu:tensorflow0<br>\n$nvidia-docker run --cpuset-cpus=0-4 --cpu-shares=1024 -it cpu:tensorflow0</p>\n<pre><code>I used only 5 CPU cores. because --cpuset-cpus=0-4\n</code></pre>\n<p>(2) I did \"python cifar10_train.py\" on two containers ,and check cpu-resources by docker stats.<br>\nBy the way, tow python examples\"cifar10_train.py\" were same code.<br>\nCPU Resource of one container was  278.13%<br>\nCPU Resources of another on another container was 195.80%</p>\n<pre><code>  CPU Resources Rate 278.13 :195.80 was not different from --cpu-shares Rate 2048:1024 \n</code></pre>\n<p>####My Procedure[c]<br>\nI did same process by Chainer Containers :Chainer Version 1.21.0</p>\n<p>(1)6cores :Two Chainer containers ,--cpusets-cpu=0-5,--cpu-shares=2048 and --cpu-shares=1024</p>\n<pre><code> CPU resources   394.23 : 195.41 nealy 2:1 , It is as same as 2048:1024\n</code></pre>\n<p>(2) 5cores :Two Chainer containers ,--cpusets-cpu=0-4,--cpu-shares=2048 and --cpu-shares=1024</p>\n<pre><code> CPU resources   330 .82: 166.13 nealy 2:1 , It is as same as 2048:1024\n</code></pre>\n<p>####My additional Procedure[d]<br>\nI run 4 docker container at --cpu-shares setting at 2048,1024,1024 ,and 512.</p>\n<p>*Tensoflow 4 Container CPU resources : 205.21 : 135.68 : 142.71 : 97.94<br>\nThey were not rates of --cpu-shares ; 2.09 : 1.39 : 1.46 : 1.0</p>\n<p>*Chainer 4 Containers CPU resources : 267.44 : 133.93 :129.59 : 59.98<br>\nThey ware nearly equal rate of --cpu-shares ; 4.45 : 2.23 : 2.26 : 1.0</p>\n<p>####Result</p>\n<p>Two Chainer's docker containers operated according with the setting of --cpu-shares.<br>\nBut  Two Tensorflow's docker containers did not operate according with the setting of --cpu-shares.</p>\n<p>####My Question<br>\nDo you know the reason why two Tensorflow's containers did not operate according with the setting of --cpu-shares?</p>", "body_text": "Environment info\nOS:Ubuntu14.04LTS\nGPU:Nvidia Pascal TITUN X\nCUDA8.0\ncuDNN CUDA8.0 V5.1\nDocker Verison:17.03.0-ce\nNvidia docker : 1.0.1\nCPU Intel Core i7 6900K , Hyper-THreading off , Turbo boost off\n####Docker file\nI installed Tensorflow by Dockerfile as below;\n================================\nFROM nvidia/cuda:8.0-cudnn5-devel\nENV http_proxy http://mycompany.proxy:8080\nENV https_proxy http://mycompany.proxyp:8080\nRUN     apt-get update  &&  apt-get install -y \npython-dev \npython-pip \nnano \ngit\nRUN    rm -rf /var/lib/apt/lists/* /var/cache/apt/archieves/*\nRUN    pip install --upgrade --user https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.0-cp27-none-linux_x86_64.whl\nWORKDIR /root/.local/lib/python2.7/site-packages/tensorflow\nRUN git clone https://github.com/tensorflow/models.git\nWORKDIR /root/.local/lib/python2.7/site-packages/tensorflow/models/tutorials/image/cifar10\n####My Procedure[a]\n(1) At first ,I build Dockerfile\n$ nvidia-docker build -t cpu:tensorflow0.\n Tensorflow docker image was build with no-problem and no-erros.\n\n(2)Next  I run two docker container and log in two container via Bash\n$ nvidia-docker run --cpuset-cpus=0-5 --cpu-shares=2048 -it cpu:tensorflow0\n$nvidia-docker run --cpuset-cpus=0-5 --cpu-shares=1024 -it cpu:tensorflow0\nI used all CPU cores(6 cores).\n\n(3) I did \"python cifar10_train.py\" on two containers ,and check cpu-resources by docker stats.\nBy the way, tow python examples\"cifar10_train.py\" were same code.\nCPU Resource of one container was  339.86%\nCPU Resources of another on another container was 230.19%\n  CPU Resouce Rate 339.86 : 230.19 was not different from --cpu-shares Rate 2048:1024 \n\n####My Procedure[b]\nTo make sure, I did same procedure by using CPU 5cores.\n(1)Next  I run two docker container and log in two container via Bash\n$ nvidia-docker run --cpuset-cpus=0-4 --cpu-shares=2048 -it cpu:tensorflow0\n$nvidia-docker run --cpuset-cpus=0-4 --cpu-shares=1024 -it cpu:tensorflow0\nI used only 5 CPU cores. because --cpuset-cpus=0-4\n\n(2) I did \"python cifar10_train.py\" on two containers ,and check cpu-resources by docker stats.\nBy the way, tow python examples\"cifar10_train.py\" were same code.\nCPU Resource of one container was  278.13%\nCPU Resources of another on another container was 195.80%\n  CPU Resources Rate 278.13 :195.80 was not different from --cpu-shares Rate 2048:1024 \n\n####My Procedure[c]\nI did same process by Chainer Containers :Chainer Version 1.21.0\n(1)6cores :Two Chainer containers ,--cpusets-cpu=0-5,--cpu-shares=2048 and --cpu-shares=1024\n CPU resources   394.23 : 195.41 nealy 2:1 , It is as same as 2048:1024\n\n(2) 5cores :Two Chainer containers ,--cpusets-cpu=0-4,--cpu-shares=2048 and --cpu-shares=1024\n CPU resources   330 .82: 166.13 nealy 2:1 , It is as same as 2048:1024\n\n####My additional Procedure[d]\nI run 4 docker container at --cpu-shares setting at 2048,1024,1024 ,and 512.\n*Tensoflow 4 Container CPU resources : 205.21 : 135.68 : 142.71 : 97.94\nThey were not rates of --cpu-shares ; 2.09 : 1.39 : 1.46 : 1.0\n*Chainer 4 Containers CPU resources : 267.44 : 133.93 :129.59 : 59.98\nThey ware nearly equal rate of --cpu-shares ; 4.45 : 2.23 : 2.26 : 1.0\n####Result\nTwo Chainer's docker containers operated according with the setting of --cpu-shares.\nBut  Two Tensorflow's docker containers did not operate according with the setting of --cpu-shares.\n####My Question\nDo you know the reason why two Tensorflow's containers did not operate according with the setting of --cpu-shares?", "body": "### Environment info\r\nOS:Ubuntu14.04LTS\r\nGPU:Nvidia Pascal TITUN X\r\nCUDA8.0\r\ncuDNN CUDA8.0 V5.1\r\nDocker Verison:17.03.0-ce\r\nNvidia docker : 1.0.1\r\nCPU Intel Core i7 6900K , Hyper-THreading off , Turbo boost off\r\n\r\n\r\n####Docker file\r\nI installed Tensorflow by Dockerfile as below;\r\n\r\n================================\r\n FROM nvidia/cuda:8.0-cudnn5-devel\r\n\r\nENV http_proxy http://mycompany.proxy:8080\r\nENV https_proxy http://mycompany.proxyp:8080\r\n\r\n\r\nRUN     apt-get update  &&  apt-get install -y \\\r\n        python-dev \\\r\n        python-pip \\\r\n        nano \\\r\n        git \r\n    \r\nRUN    rm -rf /var/lib/apt/lists/* /var/cache/apt/archieves/* \r\n\r\nRUN    pip install --upgrade --user https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.0-cp27-none-linux_x86_64.whl\r\n\r\nWORKDIR /root/.local/lib/python2.7/site-packages/tensorflow\r\n\r\nRUN git clone https://github.com/tensorflow/models.git\r\n\r\nWORKDIR /root/.local/lib/python2.7/site-packages/tensorflow/models/tutorials/image/cifar10\r\n\r\n####My Procedure[a]\r\n(1) At first ,I build Dockerfile \r\n     $ nvidia-docker build -t cpu:tensorflow0.\r\n\r\n     Tensorflow docker image was build with no-problem and no-erros.\r\n\r\n(2)Next  I run two docker container and log in two container via Bash\r\n  $ nvidia-docker run --cpuset-cpus=0-5 --cpu-shares=2048 -it cpu:tensorflow0\r\n  $nvidia-docker run --cpuset-cpus=0-5 --cpu-shares=1024 -it cpu:tensorflow0\r\n\r\n    I used all CPU cores(6 cores).\r\n\r\n(3) I did \"python cifar10_train.py\" on two containers ,and check cpu-resources by docker stats.\r\n     By the way, tow python examples\"cifar10_train.py\" were same code.  \r\n     CPU Resource of one container was  339.86%\r\n     CPU Resources of another on another container was 230.19% \r\n   \r\n      CPU Resouce Rate 339.86 : 230.19 was not different from --cpu-shares Rate 2048:1024 \r\n\r\n  ####My Procedure[b]\r\nTo make sure, I did same procedure by using CPU 5cores.   \r\n\r\n(1)Next  I run two docker container and log in two container via Bash\r\n  $ nvidia-docker run --cpuset-cpus=0-4 --cpu-shares=2048 -it cpu:tensorflow0\r\n  $nvidia-docker run --cpuset-cpus=0-4 --cpu-shares=1024 -it cpu:tensorflow0\r\n\r\n    I used only 5 CPU cores. because --cpuset-cpus=0-4\r\n\r\n(2) I did \"python cifar10_train.py\" on two containers ,and check cpu-resources by docker stats.\r\n     By the way, tow python examples\"cifar10_train.py\" were same code.  \r\n     CPU Resource of one container was  278.13%\r\n     CPU Resources of another on another container was 195.80% \r\n   \r\n      CPU Resources Rate 278.13 :195.80 was not different from --cpu-shares Rate 2048:1024 \r\n\r\n ####My Procedure[c]\r\n I did same process by Chainer Containers :Chainer Version 1.21.0\r\n\r\n (1)6cores :Two Chainer containers ,--cpusets-cpu=0-5,--cpu-shares=2048 and --cpu-shares=1024\r\n\r\n     CPU resources   394.23 : 195.41 nealy 2:1 , It is as same as 2048:1024\r\n\r\n(2) 5cores :Two Chainer containers ,--cpusets-cpu=0-4,--cpu-shares=2048 and --cpu-shares=1024\r\n\r\n     CPU resources   330 .82: 166.13 nealy 2:1 , It is as same as 2048:1024\r\n\r\n ####My additional Procedure[d]\r\nI run 4 docker container at --cpu-shares setting at 2048,1024,1024 ,and 512.\r\n\r\n*Tensoflow 4 Container CPU resources : 205.21 : 135.68 : 142.71 : 97.94\r\n  They were not rates of --cpu-shares ; 2.09 : 1.39 : 1.46 : 1.0\r\n\r\n*Chainer 4 Containers CPU resources : 267.44 : 133.93 :129.59 : 59.98\r\n  They ware nearly equal rate of --cpu-shares ; 4.45 : 2.23 : 2.26 : 1.0   \r\n\r\n####Result\r\n\r\nTwo Chainer's docker containers operated according with the setting of --cpu-shares.\r\nBut  Two Tensorflow's docker containers did not operate according with the setting of --cpu-shares.\r\n\r\n ####My Question\r\nDo you know the reason why two Tensorflow's containers did not operate according with the setting of --cpu-shares?\r\n\r\n\r\n\r\n"}