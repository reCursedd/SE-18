{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/333581898", "html_url": "https://github.com/tensorflow/tensorflow/pull/13274#issuecomment-333581898", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13274", "id": 333581898, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzU4MTg5OA==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-02T16:07:17Z", "updated_at": "2017-10-02T16:07:17Z", "author_association": "MEMBER", "body_html": "<div class=\"email-fragment\">Yes, I'm ok with that.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Mon, Oct 2, 2017 at 9:05 AM, Ilya Edrenkin ***@***.***&gt; wrote:\n Hmm, for me that feels a little bit not right. In this case we'd lose the\n \"drop-in-replacement\" feature: users will have to rewrite their client code\n to access private methods, and, given the nature of Python, probably get\n disturbing runtime errors if they forget to do that.\n If I were doing composition in this case I'd rather override __getattr__\n for the wrapper, although inheritance would be in my opinion somewhat more\n idiomatic.\n\n Does composition with overriden __getattr__ sound good for you?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"260100900\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13274\" href=\"https://github.com/tensorflow/tensorflow/pull/13274#issuecomment-333580359\">#13274 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAATxZD2QogN_eBbAd_hMH5TKbOKpuyXks5soQnlgaJpZM4Ph9bf\">https://github.com/notifications/unsubscribe-auth/AAATxZD2QogN_eBbAd_hMH5TKbOKpuyXks5soQnlgaJpZM4Ph9bf</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n<div class=\"email-signature-reply\">-- \n - Alex</div>\n</div>", "body_text": "Yes, I'm ok with that.\n\u2026\nOn Mon, Oct 2, 2017 at 9:05 AM, Ilya Edrenkin ***@***.***> wrote:\n Hmm, for me that feels a little bit not right. In this case we'd lose the\n \"drop-in-replacement\" feature: users will have to rewrite their client code\n to access private methods, and, given the nature of Python, probably get\n disturbing runtime errors if they forget to do that.\n If I were doing composition in this case I'd rather override __getattr__\n for the wrapper, although inheritance would be in my opinion somewhat more\n idiomatic.\n\n Does composition with overriden __getattr__ sound good for you?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#13274 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AAATxZD2QogN_eBbAd_hMH5TKbOKpuyXks5soQnlgaJpZM4Ph9bf>\n .\n\n\n-- \n - Alex", "body": "Yes, I'm ok with that.\n\nOn Mon, Oct 2, 2017 at 9:05 AM, Ilya Edrenkin <notifications@github.com>\nwrote:\n\n> Hmm, for me that feels a little bit not right. In this case we'd lose the\n> \"drop-in-replacement\" feature: users will have to rewrite their client code\n> to access private methods, and, given the nature of Python, probably get\n> disturbing runtime errors if they forget to do that.\n> If I were doing composition in this case I'd rather override __getattr__\n> for the wrapper, although inheritance would be in my opinion somewhat more\n> idiomatic.\n>\n> Does composition with overriden __getattr__ sound good for you?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/pull/13274#issuecomment-333580359>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAATxZD2QogN_eBbAd_hMH5TKbOKpuyXks5soQnlgaJpZM4Ph9bf>\n> .\n>\n\n\n\n-- \n - Alex\n"}