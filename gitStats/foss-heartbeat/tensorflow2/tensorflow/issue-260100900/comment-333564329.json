{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/333564329", "html_url": "https://github.com/tensorflow/tensorflow/pull/13274#issuecomment-333564329", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13274", "id": 333564329, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzU2NDMyOQ==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-02T15:11:17Z", "updated_at": "2017-10-02T15:11:17Z", "author_association": "MEMBER", "body_html": "<div class=\"email-fragment\">You can override __getattr__ on the wrapped object to handle these extra\nmethods.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Mon, Oct 2, 2017 at 8:05 AM, Ilya Edrenkin ***@***.***&gt; wrote:\n <a class=\"user-mention\" href=\"https://github.com/sb2nov\">@sb2nov</a> &lt;<a href=\"https://github.com/sb2nov\">https://github.com/sb2nov</a>&gt;: OK, I will add tests next weekend.\n\n <a class=\"user-mention\" href=\"https://github.com/alextp\">@alextp</a> &lt;<a href=\"https://github.com/alextp\">https://github.com/alextp</a>&gt;:\n I can do it both ways. However, have chosen this particular way to keep\n the code minimal.\n If I use composition, I will have to add a considerable amount of\n boilerplate code to proxy requests like get_slot etc to the wrapped\n optimizer instance. This can be easily avoided by the proposed solution.\n\n Moreover, if the wrapped optimizer instance does provide some arbitrary\n non-standard interface (actually anything not defined in the abstract\n tf.train.Optimizer superclass), I don't see an easy way to proxy it at all\n (at least without magic that would override method/field lookups).\n So the client will have to use wrapper._opt.custom_call() instead of\n wrapper.custom_call(). Therefore, the wrapper will no longer be a drop-in\n replacement to the original optimizer, as the client code will have to be\n modified in this manner.\n\n Am I missing something?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"260100900\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13274\" href=\"https://github.com/tensorflow/tensorflow/pull/13274#issuecomment-333561402\">#13274 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAATxVYf1H_pageT2O2oHwTfG_JEIq9Mks5soPvMgaJpZM4Ph9bf\">https://github.com/notifications/unsubscribe-auth/AAATxVYf1H_pageT2O2oHwTfG_JEIq9Mks5soPvMgaJpZM4Ph9bf</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n<div class=\"email-signature-reply\">-- \n - Alex</div>\n</div>", "body_text": "You can override __getattr__ on the wrapped object to handle these extra\nmethods.\n\u2026\nOn Mon, Oct 2, 2017 at 8:05 AM, Ilya Edrenkin ***@***.***> wrote:\n @sb2nov <https://github.com/sb2nov>: OK, I will add tests next weekend.\n\n @alextp <https://github.com/alextp>:\n I can do it both ways. However, have chosen this particular way to keep\n the code minimal.\n If I use composition, I will have to add a considerable amount of\n boilerplate code to proxy requests like get_slot etc to the wrapped\n optimizer instance. This can be easily avoided by the proposed solution.\n\n Moreover, if the wrapped optimizer instance does provide some arbitrary\n non-standard interface (actually anything not defined in the abstract\n tf.train.Optimizer superclass), I don't see an easy way to proxy it at all\n (at least without magic that would override method/field lookups).\n So the client will have to use wrapper._opt.custom_call() instead of\n wrapper.custom_call(). Therefore, the wrapper will no longer be a drop-in\n replacement to the original optimizer, as the client code will have to be\n modified in this manner.\n\n Am I missing something?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#13274 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AAATxVYf1H_pageT2O2oHwTfG_JEIq9Mks5soPvMgaJpZM4Ph9bf>\n .\n\n\n-- \n - Alex", "body": "You can override __getattr__ on the wrapped object to handle these extra\nmethods.\n\nOn Mon, Oct 2, 2017 at 8:05 AM, Ilya Edrenkin <notifications@github.com>\nwrote:\n\n> @sb2nov <https://github.com/sb2nov>: OK, I will add tests next weekend.\n>\n> @alextp <https://github.com/alextp>:\n> I can do it both ways. However, have chosen this particular way to keep\n> the code minimal.\n> If I use composition, I will have to add a considerable amount of\n> boilerplate code to proxy requests like get_slot etc to the wrapped\n> optimizer instance. This can be easily avoided by the proposed solution.\n>\n> Moreover, if the wrapped optimizer instance does provide some arbitrary\n> non-standard interface (actually anything not defined in the abstract\n> tf.train.Optimizer superclass), I don't see an easy way to proxy it at all\n> (at least without magic that would override method/field lookups).\n> So the client will have to use wrapper._opt.custom_call() instead of\n> wrapper.custom_call(). Therefore, the wrapper will no longer be a drop-in\n> replacement to the original optimizer, as the client code will have to be\n> modified in this manner.\n>\n> Am I missing something?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/pull/13274#issuecomment-333561402>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAATxVYf1H_pageT2O2oHwTfG_JEIq9Mks5soPvMgaJpZM4Ph9bf>\n> .\n>\n\n\n\n-- \n - Alex\n"}