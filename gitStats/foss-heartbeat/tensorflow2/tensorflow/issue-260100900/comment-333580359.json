{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/333580359", "html_url": "https://github.com/tensorflow/tensorflow/pull/13274#issuecomment-333580359", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13274", "id": 333580359, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzU4MDM1OQ==", "user": {"login": "ilya-edrenkin", "id": 13562803, "node_id": "MDQ6VXNlcjEzNTYyODAz", "avatar_url": "https://avatars2.githubusercontent.com/u/13562803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilya-edrenkin", "html_url": "https://github.com/ilya-edrenkin", "followers_url": "https://api.github.com/users/ilya-edrenkin/followers", "following_url": "https://api.github.com/users/ilya-edrenkin/following{/other_user}", "gists_url": "https://api.github.com/users/ilya-edrenkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilya-edrenkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilya-edrenkin/subscriptions", "organizations_url": "https://api.github.com/users/ilya-edrenkin/orgs", "repos_url": "https://api.github.com/users/ilya-edrenkin/repos", "events_url": "https://api.github.com/users/ilya-edrenkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ilya-edrenkin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-02T16:01:56Z", "updated_at": "2017-10-02T16:01:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hmm, for me that feels a little bit not right. In this case we'd lose the \"drop-in-replacement\" feature: users will have to rewrite their client code to access private methods, and, given the nature of Python, probably get disturbing runtime errors if they forget to do that.<br>\nIf I were doing composition in this case I'd rather override <code>__getattr__</code> for the wrapper, although inheritance would be in my opinion somewhat more idiomatic.</p>\n<p>Does composition with overriden <code>__getattr__</code> sound good for you?</p>", "body_text": "Hmm, for me that feels a little bit not right. In this case we'd lose the \"drop-in-replacement\" feature: users will have to rewrite their client code to access private methods, and, given the nature of Python, probably get disturbing runtime errors if they forget to do that.\nIf I were doing composition in this case I'd rather override __getattr__ for the wrapper, although inheritance would be in my opinion somewhat more idiomatic.\nDoes composition with overriden __getattr__ sound good for you?", "body": "Hmm, for me that feels a little bit not right. In this case we'd lose the \"drop-in-replacement\" feature: users will have to rewrite their client code to access private methods, and, given the nature of Python, probably get disturbing runtime errors if they forget to do that.\r\nIf I were doing composition in this case I'd rather override `__getattr__` for the wrapper, although inheritance would be in my opinion somewhat more idiomatic.\r\n\r\nDoes composition with overriden `__getattr__` sound good for you?"}