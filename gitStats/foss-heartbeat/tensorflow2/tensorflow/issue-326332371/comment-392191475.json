{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/392191475", "html_url": "https://github.com/tensorflow/tensorflow/issues/19546#issuecomment-392191475", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19546", "id": 392191475, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjE5MTQ3NQ==", "user": {"login": "daogiang993", "id": 16729921, "node_id": "MDQ6VXNlcjE2NzI5OTIx", "avatar_url": "https://avatars0.githubusercontent.com/u/16729921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daogiang993", "html_url": "https://github.com/daogiang993", "followers_url": "https://api.github.com/users/daogiang993/followers", "following_url": "https://api.github.com/users/daogiang993/following{/other_user}", "gists_url": "https://api.github.com/users/daogiang993/gists{/gist_id}", "starred_url": "https://api.github.com/users/daogiang993/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daogiang993/subscriptions", "organizations_url": "https://api.github.com/users/daogiang993/orgs", "repos_url": "https://api.github.com/users/daogiang993/repos", "events_url": "https://api.github.com/users/daogiang993/events{/privacy}", "received_events_url": "https://api.github.com/users/daogiang993/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-25T21:26:25Z", "updated_at": "2018-05-25T21:29:01Z", "author_association": "NONE", "body_html": "<p>Thank you very much <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a><br>\nCouple of change, that I did, make the code work:</p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_model_fn</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">mode</span>, <span class=\"pl-smi\">params</span>):\n        s <span class=\"pl-k\">=</span> features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>s<span class=\"pl-pds\">'</span></span>]\n        a <span class=\"pl-k\">=</span> features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>]\n        r <span class=\"pl-k\">=</span> features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>r<span class=\"pl-pds\">'</span></span>]\n        ns <span class=\"pl-k\">=</span> features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ns<span class=\"pl-pds\">'</span></span>]\n        d <span class=\"pl-k\">=</span> features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>d<span class=\"pl-pds\">'</span></span>]</pre></div>\n<p>and also need to change the type of input:</p>\n<div class=\"highlight highlight-source-python\"><pre>    s <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">84</span>, <span class=\"pl-c1\">84</span>, <span class=\"pl-c1\">4</span>).astype(np.float32)\n    ns <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">84</span>, <span class=\"pl-c1\">84</span>, <span class=\"pl-c1\">4</span>).astype(np.float32)\n    a <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">4</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>).astype(np.int32)\n    r <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">30</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>).reshape(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>).astype(np.float32)\n    d <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">2</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>).reshape(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>).astype(np.float32)</pre></div>\n<p><strong>Couple things that does not work yet</strong>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n    s <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">84</span>, <span class=\"pl-c1\">84</span>, <span class=\"pl-c1\">4</span>).astype(np.float32)\n    ns <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">84</span>, <span class=\"pl-c1\">84</span>, <span class=\"pl-c1\">4</span>).astype(np.float32)\n    a <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">4</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>).astype(np.int32)\n    r <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">30</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>).reshape(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>).astype(np.float32)\n    d <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">2</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>).reshape(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>).astype(np.float32)\n    inp <span class=\"pl-k\">=</span> {}\n    inp[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>s<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> np.array(s)\n    inp[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> np.array(a)\n    inp[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>r<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> np.array(r)\n    inp[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ns<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> np.array(ns)\n    inp[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>d<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> np.array(d)\n\n    input_f <span class=\"pl-k\">=</span> tf.estimator.inputs.numpy_input_fn(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>inp, <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>, <span class=\"pl-v\">shuffle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n    nn.model.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>input_f)</pre></div>\n<p>Tensorflow seems to run initialization every iteration:</p>\n<div class=\"highlight highlight-source-shell\"><pre>INFO:tensorflow:Running local_init_op.\nINFO:tensorflow:Done running local_init_op.</pre></div>\n<p>Also prediction doesn't seem to work:</p>\n<div class=\"highlight highlight-source-python\"><pre>inp <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>s<span class=\"pl-pds\">'</span></span>:np.array(s)}\npred_f <span class=\"pl-k\">=</span> tf.estimator.inputs.numpy_input_fn(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>inp, <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">shuffle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\npre <span class=\"pl-k\">=</span> nn.model.predict(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>pred_f) <span class=\"pl-c\"><span class=\"pl-c\">#</span> This return a \"generator object Estimator.predict\" instead</span></pre></div>\n<p>Any helps are appreciated!!!</p>", "body_text": "Thank you very much @mrry\nCouple of change, that I did, make the code work:\n    def _model_fn(self, features, labels, mode, params):\n        s = features['s']\n        a = features['a']\n        r = features['r']\n        ns = features['ns']\n        d = features['d']\nand also need to change the type of input:\n    s = np.random.rand(32, 84, 84, 4).astype(np.float32)\n    ns = np.random.rand(32, 84, 84, 4).astype(np.float32)\n    a = np.random.randint(4, size=32).astype(np.int32)\n    r = np.random.randint(30, size=32).reshape(-1,1).astype(np.float32)\n    d = np.random.randint(2, size=32).reshape(-1,1).astype(np.float32)\nCouple things that does not work yet:\nfor _ in range(10):\n    s = np.random.rand(32, 84, 84, 4).astype(np.float32)\n    ns = np.random.rand(32, 84, 84, 4).astype(np.float32)\n    a = np.random.randint(4, size=32).astype(np.int32)\n    r = np.random.randint(30, size=32).reshape(-1,1).astype(np.float32)\n    d = np.random.randint(2, size=32).reshape(-1,1).astype(np.float32)\n    inp = {}\n    inp['s'] = np.array(s)\n    inp['a'] = np.array(a)\n    inp['r'] = np.array(r)\n    inp['ns'] = np.array(ns)\n    inp['d'] = np.array(d)\n\n    input_f = tf.estimator.inputs.numpy_input_fn(x=inp, batch_size=32, shuffle=False)\n    nn.model.train(input_fn=input_f)\nTensorflow seems to run initialization every iteration:\nINFO:tensorflow:Running local_init_op.\nINFO:tensorflow:Done running local_init_op.\nAlso prediction doesn't seem to work:\ninp = {'s':np.array(s)}\npred_f = tf.estimator.inputs.numpy_input_fn(x=inp, batch_size=1, shuffle=False)\npre = nn.model.predict(input_fn=pred_f) # This return a \"generator object Estimator.predict\" instead\nAny helps are appreciated!!!", "body": "Thank you very much @mrry \r\nCouple of change, that I did, make the code work:\r\n```python\r\n    def _model_fn(self, features, labels, mode, params):\r\n        s = features['s']\r\n        a = features['a']\r\n        r = features['r']\r\n        ns = features['ns']\r\n        d = features['d']\r\n```\r\nand also need to change the type of input:\r\n```python\r\n    s = np.random.rand(32, 84, 84, 4).astype(np.float32)\r\n    ns = np.random.rand(32, 84, 84, 4).astype(np.float32)\r\n    a = np.random.randint(4, size=32).astype(np.int32)\r\n    r = np.random.randint(30, size=32).reshape(-1,1).astype(np.float32)\r\n    d = np.random.randint(2, size=32).reshape(-1,1).astype(np.float32)\r\n```\r\n\r\n\r\n**Couple things that does not work yet**:\r\n```python\r\nfor _ in range(10):\r\n    s = np.random.rand(32, 84, 84, 4).astype(np.float32)\r\n    ns = np.random.rand(32, 84, 84, 4).astype(np.float32)\r\n    a = np.random.randint(4, size=32).astype(np.int32)\r\n    r = np.random.randint(30, size=32).reshape(-1,1).astype(np.float32)\r\n    d = np.random.randint(2, size=32).reshape(-1,1).astype(np.float32)\r\n    inp = {}\r\n    inp['s'] = np.array(s)\r\n    inp['a'] = np.array(a)\r\n    inp['r'] = np.array(r)\r\n    inp['ns'] = np.array(ns)\r\n    inp['d'] = np.array(d)\r\n\r\n    input_f = tf.estimator.inputs.numpy_input_fn(x=inp, batch_size=32, shuffle=False)\r\n    nn.model.train(input_fn=input_f)\r\n```\r\nTensorflow seems to run initialization every iteration:\r\n```bash\r\nINFO:tensorflow:Running local_init_op.\r\nINFO:tensorflow:Done running local_init_op.\r\n```\r\n\r\nAlso prediction doesn't seem to work:\r\n```python\r\ninp = {'s':np.array(s)}\r\npred_f = tf.estimator.inputs.numpy_input_fn(x=inp, batch_size=1, shuffle=False)\r\npre = nn.model.predict(input_fn=pred_f) # This return a \"generator object Estimator.predict\" instead\r\n```\r\nAny helps are appreciated!!!"}