{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228959496", "pull_request_review_id": 169343332, "id": 228959496, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODk1OTQ5Ng==", "diff_hunk": "@@ -0,0 +1,134 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow;\n+\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+/**\n+ * An in-process TensorFlow server, for use in distributed training.\n+ *\n+ * A {@code Server} instance encapsulates a set of devices and a\n+ * {@link org.tensorflow.Session} target that can participate in distributed\n+ * training. A server belongs to a cluster (specified by a\n+ * {@code ClusterSpec}), and corresponds to a particular task in a named job.\n+ * The server can communicate with any other server in the same cluster.\n+ *\n+ * <p><b>WARNING:</b> A {@code Server} owns resources that <b>must</b> be\n+ * explicitly freed by invoking {@link #close()}.\n+ *\n+ * <p>Instances of a {@code Server} are thread-safe.\n+ *\n+ * <p>Using example:\n+ * <pre>\n+ * {@code\n+ * ClusterDef clusterDef = ClusterDef.newBuilder()\n+ *   .addJob(JobDef.newBuilder()\n+ *   .setName(\"worker\")\n+ *   .putTasks(0, \"localhost:4321\")\n+ *   .build()\n+ * ).build();\n+ *\n+ * ServerDef serverDef = ServerDef.newBuilder()\n+ *   .setCluster(clusterDef)\n+ *   .setJobName(\"worker\")\n+ *   .setTaskIndex(0)\n+ *   .setProtocol(\"grpc\")\n+ * .build();\n+ *\n+ * try (Server srv = new Server(serverDef.toByteArray())) {\n+ *   srv.start();\n+ *   srv.join();\n+ * }\n+ * }\n+ * </pre>\n+ */\n+public final class Server implements AutoCloseable {\n+\n+  /** \n+   * Constructs a new instance of server. \n+   *\n+   * @param serverDef Server definition specified as a serialized\n+   *        <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/protobuf/tensorflow_server.proto\">ServerDef</a>\n+   *        protocol buffer.\n+   */\n+  public Server(byte[] serverDef) {\n+    nativeHandle = allocate(serverDef);\n+  }\n+\n+  /** Starts this server. */\n+  public void start() {\n+    lock.readLock().lock();\n+    try {\n+      start(nativeHandle);\n+    }\n+    finally {\n+      lock.readLock().unlock();\n+    }\n+  }\n+\n+  /** Stops this server. */\n+  public void stop() {\n+    lock.readLock().lock();\n+    try {\n+      stop(nativeHandle);\n+    }\n+    finally {\n+      lock.readLock().unlock();\n+    }\n+  }\n+\n+  /** Blocks until the server has shut down (currently blocks forever). */\n+  public void join() {\n+    lock.readLock().lock();", "path": "tensorflow/java/src/main/java/org/tensorflow/Server.java", "position": null, "original_position": 95, "commit_id": "41311db125e6b5caf30c88bd3697ac7dd18e94fe", "original_commit_id": "e16181f0f423df1861351fc725095468f6bf600b", "user": {"login": "dmitrievanthony", "id": 1028969, "node_id": "MDQ6VXNlcjEwMjg5Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1028969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmitrievanthony", "html_url": "https://github.com/dmitrievanthony", "followers_url": "https://api.github.com/users/dmitrievanthony/followers", "following_url": "https://api.github.com/users/dmitrievanthony/following{/other_user}", "gists_url": "https://api.github.com/users/dmitrievanthony/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmitrievanthony/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmitrievanthony/subscriptions", "organizations_url": "https://api.github.com/users/dmitrievanthony/orgs", "repos_url": "https://api.github.com/users/dmitrievanthony/repos", "events_url": "https://api.github.com/users/dmitrievanthony/events{/privacy}", "received_events_url": "https://api.github.com/users/dmitrievanthony/received_events", "type": "User", "site_admin": false}, "body": "Do you think it's better than a simple `RWLock`? I see at least one issue in you example (`notifyAll` should be called instead of `notify`) and two tricky danger parts (`numJoining` and `wait`/`while`). `RWLock` looks much easier.", "created_at": "2018-10-29T14:53:10Z", "updated_at": "2018-11-08T20:31:45Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23022#discussion_r228959496", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23022", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228959496"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23022#discussion_r228959496"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23022"}}, "body_html": "<p>Do you think it's better than a simple <code>RWLock</code>? I see at least one issue in you example (<code>notifyAll</code> should be called instead of <code>notify</code>) and two tricky danger parts (<code>numJoining</code> and <code>wait</code>/<code>while</code>). <code>RWLock</code> looks much easier.</p>", "body_text": "Do you think it's better than a simple RWLock? I see at least one issue in you example (notifyAll should be called instead of notify) and two tricky danger parts (numJoining and wait/while). RWLock looks much easier.", "in_reply_to_id": 228693208}