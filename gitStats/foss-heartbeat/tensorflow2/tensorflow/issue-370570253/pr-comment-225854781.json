{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/225854781", "pull_request_review_id": 165542402, "id": 225854781, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTg1NDc4MQ==", "diff_hunk": "@@ -0,0 +1,82 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow;\n+\n+/**\n+ * An in-process TensorFlow server, for use in distributed training.\n+ *\n+ * A {@code tf.train.Server} instance encapsulates a set of devices and a\n+ * {@code tf.Session} target that can participate in distributed training. A\n+ * server belongs to a cluster (specified by a {@code tf.train.ClusterSpec}),\n+ * and corresponds to a particular task in a named job. The server can\n+ * communicate with any other server in the same cluster.\n+ *\n+ * <p><b>WARNING:</b>A {@code Server} owns resources that <b>must</b> be\n+ * explicitly freed by invoking {@link #close()}.\n+ *\n+ * <p>Instances of a {@code Server} are thread-safe.\n+ */\n+public final class Server implements AutoCloseable {\n+\n+  /** \n+   * Constructs a new instance of server. \n+   *\n+   * @param config Server definition specified as a serialized\n+   *        <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/protobuf/tensorflow_server.proto\">ServerDef</a>\n+   *        protocol buffer.\n+   */\n+  public Server(byte[] serverDef) {\n+    nativeHandle = allocate(serverDef);\n+  }\n+\n+  /** Starts this server. */\n+  public synchronized void start() {\n+    start(nativeHandle);\n+  }\n+\n+  /** Stops this server. */\n+  public synchronized void stop() {\n+    stop(nativeHandle);\n+  }\n+\n+  /** Blocks until the server has shut down (currently blocks forever). */\n+  public synchronized void join() {", "path": "tensorflow/java/src/main/java/org/tensorflow/Server.java", "position": null, "original_position": 56, "commit_id": "41311db125e6b5caf30c88bd3697ac7dd18e94fe", "original_commit_id": "231ef238b5e9047ce85ba30e340e09b1a21a585a", "user": {"login": "dmitrievanthony", "id": 1028969, "node_id": "MDQ6VXNlcjEwMjg5Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1028969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmitrievanthony", "html_url": "https://github.com/dmitrievanthony", "followers_url": "https://api.github.com/users/dmitrievanthony/followers", "following_url": "https://api.github.com/users/dmitrievanthony/following{/other_user}", "gists_url": "https://api.github.com/users/dmitrievanthony/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmitrievanthony/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmitrievanthony/subscriptions", "organizations_url": "https://api.github.com/users/dmitrievanthony/orgs", "repos_url": "https://api.github.com/users/dmitrievanthony/repos", "events_url": "https://api.github.com/users/dmitrievanthony/events{/privacy}", "received_events_url": "https://api.github.com/users/dmitrievanthony/received_events", "type": "User", "site_admin": false}, "body": "I've checked code and looks like `Server` methods `start`, `stop` and `join` are synchronized on underlying layer (I didn't know that). So, we only need to prohibit parallel calls of `delete` and other functions. Do do that I added rw-lock, so please have a look.\r\n\r\nUsing this lock, user will be able to call `stop` method from other thread when current thread is locked by `join` method.", "created_at": "2018-10-17T09:46:57Z", "updated_at": "2018-11-08T20:31:45Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23022#discussion_r225854781", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23022", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/225854781"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23022#discussion_r225854781"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23022"}}, "body_html": "<p>I've checked code and looks like <code>Server</code> methods <code>start</code>, <code>stop</code> and <code>join</code> are synchronized on underlying layer (I didn't know that). So, we only need to prohibit parallel calls of <code>delete</code> and other functions. Do do that I added rw-lock, so please have a look.</p>\n<p>Using this lock, user will be able to call <code>stop</code> method from other thread when current thread is locked by <code>join</code> method.</p>", "body_text": "I've checked code and looks like Server methods start, stop and join are synchronized on underlying layer (I didn't know that). So, we only need to prohibit parallel calls of delete and other functions. Do do that I added rw-lock, so please have a look.\nUsing this lock, user will be able to call stop method from other thread when current thread is locked by join method.", "in_reply_to_id": 225781054}