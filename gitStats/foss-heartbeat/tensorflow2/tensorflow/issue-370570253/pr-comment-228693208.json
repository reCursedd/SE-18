{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228693208", "pull_request_review_id": 169029425, "id": 228693208, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODY5MzIwOA==", "diff_hunk": "@@ -0,0 +1,134 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow;\n+\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+/**\n+ * An in-process TensorFlow server, for use in distributed training.\n+ *\n+ * A {@code Server} instance encapsulates a set of devices and a\n+ * {@link org.tensorflow.Session} target that can participate in distributed\n+ * training. A server belongs to a cluster (specified by a\n+ * {@code ClusterSpec}), and corresponds to a particular task in a named job.\n+ * The server can communicate with any other server in the same cluster.\n+ *\n+ * <p><b>WARNING:</b> A {@code Server} owns resources that <b>must</b> be\n+ * explicitly freed by invoking {@link #close()}.\n+ *\n+ * <p>Instances of a {@code Server} are thread-safe.\n+ *\n+ * <p>Using example:\n+ * <pre>\n+ * {@code\n+ * ClusterDef clusterDef = ClusterDef.newBuilder()\n+ *   .addJob(JobDef.newBuilder()\n+ *   .setName(\"worker\")\n+ *   .putTasks(0, \"localhost:4321\")\n+ *   .build()\n+ * ).build();\n+ *\n+ * ServerDef serverDef = ServerDef.newBuilder()\n+ *   .setCluster(clusterDef)\n+ *   .setJobName(\"worker\")\n+ *   .setTaskIndex(0)\n+ *   .setProtocol(\"grpc\")\n+ * .build();\n+ *\n+ * try (Server srv = new Server(serverDef.toByteArray())) {\n+ *   srv.start();\n+ *   srv.join();\n+ * }\n+ * }\n+ * </pre>\n+ */\n+public final class Server implements AutoCloseable {\n+\n+  /** \n+   * Constructs a new instance of server. \n+   *\n+   * @param serverDef Server definition specified as a serialized\n+   *        <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/protobuf/tensorflow_server.proto\">ServerDef</a>\n+   *        protocol buffer.\n+   */\n+  public Server(byte[] serverDef) {\n+    nativeHandle = allocate(serverDef);\n+  }\n+\n+  /** Starts this server. */\n+  public void start() {\n+    lock.readLock().lock();\n+    try {\n+      start(nativeHandle);\n+    }\n+    finally {\n+      lock.readLock().unlock();\n+    }\n+  }\n+\n+  /** Stops this server. */\n+  public void stop() {\n+    lock.readLock().lock();\n+    try {\n+      stop(nativeHandle);\n+    }\n+    finally {\n+      lock.readLock().unlock();\n+    }\n+  }\n+\n+  /** Blocks until the server has shut down (currently blocks forever). */\n+  public void join() {\n+    lock.readLock().lock();", "path": "tensorflow/java/src/main/java/org/tensorflow/Server.java", "position": null, "original_position": 95, "commit_id": "41311db125e6b5caf30c88bd3697ac7dd18e94fe", "original_commit_id": "e16181f0f423df1861351fc725095468f6bf600b", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Can we do without `java.util.concurrent` and all this locking and instead use just the `Object` primitives?\r\nI'd imagine something like this:\r\n\r\n```java\r\nprivate int numJoining = 0;\r\n\r\npublic synchronized void stop() {\r\n  stop(nativeHandle);\r\n}\r\n\r\npublic synchronized void start() {\r\n  start(nativeHandle);\r\n}\r\n\r\npublic void join() {\r\n  long handle = 0;\r\n  synchronized(this) {\r\n    handle = nativeHandle;\r\n    if (handle != 0) {\r\n      numJoining++;\r\n    }\r\n  }\r\n  try {\r\n    join(handle);\r\n  } finally {\r\n    synchronized(this) {\r\n      if (handle != 0) {\r\n        numJoining--;\r\n      } \r\n      notify();\r\n    }\r\n  }\r\n}\r\n\r\npublic synchronized void close() {\r\n  stop();\r\n  while (numJoining > 0) {\r\n    wait();\r\n  }\r\n  delete(nativeHandle);\r\n  nativeHandle = 0;\r\n}\r\n```\r\n\r\nThis isolates any implementation complexity to the one method that blocks.", "created_at": "2018-10-27T00:11:42Z", "updated_at": "2018-11-08T20:31:45Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23022#discussion_r228693208", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23022", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228693208"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23022#discussion_r228693208"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23022"}}, "body_html": "<p>Can we do without <code>java.util.concurrent</code> and all this locking and instead use just the <code>Object</code> primitives?<br>\nI'd imagine something like this:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">int</span> numJoining <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">synchronized</span> <span class=\"pl-k\">void</span> stop() {\n  stop(nativeHandle);\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">synchronized</span> <span class=\"pl-k\">void</span> start() {\n  start(nativeHandle);\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> join() {\n  <span class=\"pl-k\">long</span> handle <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-k\">synchronized</span>(<span class=\"pl-c1\">this</span>) {\n    handle <span class=\"pl-k\">=</span> nativeHandle;\n    <span class=\"pl-k\">if</span> (handle <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">0</span>) {\n      numJoining<span class=\"pl-k\">++</span>;\n    }\n  }\n  <span class=\"pl-k\">try</span> {\n    join(handle);\n  } <span class=\"pl-k\">finally</span> {\n    <span class=\"pl-k\">synchronized</span>(<span class=\"pl-c1\">this</span>) {\n      <span class=\"pl-k\">if</span> (handle <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">0</span>) {\n        numJoining<span class=\"pl-k\">--</span>;\n      } \n      notify();\n    }\n  }\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">synchronized</span> <span class=\"pl-k\">void</span> close() {\n  stop();\n  <span class=\"pl-k\">while</span> (numJoining <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) {\n    wait();\n  }\n  delete(nativeHandle);\n  nativeHandle <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n}</pre></div>\n<p>This isolates any implementation complexity to the one method that blocks.</p>", "body_text": "Can we do without java.util.concurrent and all this locking and instead use just the Object primitives?\nI'd imagine something like this:\nprivate int numJoining = 0;\n\npublic synchronized void stop() {\n  stop(nativeHandle);\n}\n\npublic synchronized void start() {\n  start(nativeHandle);\n}\n\npublic void join() {\n  long handle = 0;\n  synchronized(this) {\n    handle = nativeHandle;\n    if (handle != 0) {\n      numJoining++;\n    }\n  }\n  try {\n    join(handle);\n  } finally {\n    synchronized(this) {\n      if (handle != 0) {\n        numJoining--;\n      } \n      notify();\n    }\n  }\n}\n\npublic synchronized void close() {\n  stop();\n  while (numJoining > 0) {\n    wait();\n  }\n  delete(nativeHandle);\n  nativeHandle = 0;\n}\nThis isolates any implementation complexity to the one method that blocks."}