{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14683", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14683/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14683/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14683/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14683", "id": 275045189, "node_id": "MDU6SXNzdWUyNzUwNDUxODk=", "number": 14683, "title": "Cannot convert a string input to combination of tensors as defined in the Input function", "user": {"login": "gaganmalhotra", "id": 10791093, "node_id": "MDQ6VXNlcjEwNzkxMDkz", "avatar_url": "https://avatars3.githubusercontent.com/u/10791093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaganmalhotra", "html_url": "https://github.com/gaganmalhotra", "followers_url": "https://api.github.com/users/gaganmalhotra/followers", "following_url": "https://api.github.com/users/gaganmalhotra/following{/other_user}", "gists_url": "https://api.github.com/users/gaganmalhotra/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaganmalhotra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaganmalhotra/subscriptions", "organizations_url": "https://api.github.com/users/gaganmalhotra/orgs", "repos_url": "https://api.github.com/users/gaganmalhotra/repos", "events_url": "https://api.github.com/users/gaganmalhotra/events{/privacy}", "received_events_url": "https://api.github.com/users/gaganmalhotra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-18T02:15:09Z", "updated_at": "2017-12-01T02:21:33Z", "closed_at": "2017-12-01T02:21:33Z", "author_association": "NONE", "body_html": "<p>While working on the tensor flow java api, I trained a model in python and saved it using the code below -</p>\n<p>There are two problems I'm facing now while making predictions in Python and Java as below -</p>\n<ol>\n<li>Making predictions in Python</li>\n<li>Making prediction in Java with input as string</li>\n<li>How to convert data to complex input types like CrossColumn tensors, bucketized tensors, embedding tensors etc in Java</li>\n</ol>\n<p><strong><em>1] Making predictions in Python -</em></strong></p>\n<p>Gist for training code can be found at - <a href=\"https://gist.github.com/gaganmalhotra/8c40e7650f27cf3f894bad092fbe01ab\">https://gist.github.com/gaganmalhotra/8c40e7650f27cf3f894bad092fbe01ab</a></p>\n<p>While loading the model using the Predictor and making predictions as :</p>\n<pre><code># Preparing the single test dataframe to be used for prediction\ninput_single_predict = df_test[2:3] #this is just a single row from the test dataframe I'm using to test for prediction\n\nK_CATEGORICAL_COLUMNS = [\"gender\", \"native_country\", \"education\", \"occupation\", \"workclass\", \"marital_status\", \"race\"]\n\ndef predict_ip_fn(df):\n  categorical_cols = {k: tf.SparseTensor(\n      indices=[[i, 0] for i in range(df[k].size)],\n      values=df[k].values,\n      dense_shape=[df[k].size, 1])\n                      for k in K_CATEGORICAL_COLUMNS}\n  return categorical_cols\n\ndict_predict = predict_ip_fn(input_single_predict)\n\n# Loading the model from disk\nfrom tensorflow.contrib import predictor\nexport_dir = \"/Users/Documents/SampleTF_projects/temp/1510957027\"\npredict_fn = predictor.from_saved_model(export_dir, signature_def_key=None)\n\npredictions = predict_fn(dict_predict) . #&lt;&lt;&lt;&lt;&lt;&lt; ****** Error is caused here ******\nprint(predictions['probabilities'])\n\n</code></pre>\n<p><strong>But it leads to the error as below -</strong><br>\n<code>ValueError: Got unexpected keys in input_dict: set(['workclass', 'gender', 'marital_status', 'race', 'native_country', 'education', 'occupation'])</code></p>\n<p><strong>Just to cross verify with the model features, you can find the feature columns used in the model as below -</strong></p>\n<pre><code>LinearClassifier(params = {\n\t'gradient_clip_norm': None,\n\t'head': &lt; tensorflow.contrib.learn.python.learn.estimators.head._BinaryLogisticHead object at 0x121e5a310 &gt; ,\n\t'joint_weights': False,\n\t'optimizer': None,\n\t'feature_columns': [_SparseColumn(column_name = 'gender', is_integerized = False, bucket_size = None, lookup_config = _SparseIdLookupConfig(vocabulary_file = None, keys = ('Female', 'Male'), num_oov_buckets = 0, vocab_size = 2, default_value = -1), combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'native_country', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string),\n  _SparseColumn(column_name = 'education', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'occupation', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'workclass', is_integerized = False, bucket_size = 100, lookup_config = None, combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'marital_status', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'race', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string)]\n})\n</code></pre>\n<p><strong><em>2] Making predictions in Java</em></strong></p>\n<p>Below is the java code for making the predictions from the loaded model:</p>\n<pre><code>\npublic static void main(String[] args) throws UnsupportedEncodingException {\nTensorFlow.loadLibrary(\"/Users/gagandeep.malhotra/Documents/gcTensorFlowPredictIncome/census_keras/lib/python2.7/site-packages/tensorflow/contrib/layers/python/ops/_sparse_feature_cross_op.so\");\n\t\t\n\t\t  try (SavedModelBundle b = SavedModelBundle.load(\"/Users/Documents/SampleTF_projects/temp/1510957027/\", \"serve\")) {\n\n\t          \n\t          /**\n\t\t\t * \n\t\t\t * The given SavedModel SignatureDef contains the following input(s):\n\t\t\t * inputs['inputs'] tensor_info: dtype: DT_STRING shape: (-1) name:\n\t\t\t * input_example_tensor:0 The given SavedModel SignatureDef contains the\n\t\t\t * following output(s): outputs['classes'] tensor_info: dtype: DT_STRING shape:\n\t\t\t * (-1, -1) name:\n\t\t\t * linear/binary_logistic_head/_classification_output_alternatives/classes_tensor:0\n\t\t\t * outputs['scores'] tensor_info: dtype: DT_FLOAT shape: (-1, 2) name:\n\t\t\t * linear/binary_logistic_head/predictions/probabilities:0 Method name is:\n\t\t\t * tensorflow/serving/classify\n\t\t\t * \n\t\t\t * \n\t\t\t */\n\t\t\tString[] inputs = new String[] { \"HS-grad\", \"Male\", \"Divorced\", \"United-States\", \"Handlers-cleaners\",\n\t\t\t\t\t\"White\", \"Private\" };\n\n\t\t\tbyte[][][] stringMatrix = new byte[7][1][];\n\t\t\tfor (int i = 0; i &lt; 7; ++i) {\n\t\t\t\tstringMatrix[i][0] = String.format(inputs[i]).getBytes(\"UTF-8\");\n\t\t\t}\n\n\t\t\tTensor&lt;String&gt; t = Tensors.create(stringMatrix);\n\n\t\t\tSession sess = b.session();\n\n\t\t\tfinal String xName = \"input_example_tensor:0\";\n\t\t\tfinal String scoresName = \"linear/binary_logistic_head/predictions/probabilities:0\";\n\t\t\tList&lt;Tensor&lt;?&gt;&gt; outputs = s.runner().feed(xName, t).fetch(scoresName).run();\n\n\t\t\tfloat[][] classes = new float[2][2];\n\t\t\toutputs.get(0).copyTo(classes);\n\n\t      }\n\t\t  \n</code></pre>\n<p><strong><em>3] How to create a Complex Input data types in JAVA</em></strong></p>\n<p>In python, we can create different input tensors like CrossedColumn, Bucketized etc , Is there a way that we can convert similarly in Java as we dont have estimators or contrib libraries present in JAVA API.</p>\n<p>If anyone you could help or guide in the right direction.. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1122\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/eggie5\">@eggie5</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=80\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ry\">@ry</a></p>", "body_text": "While working on the tensor flow java api, I trained a model in python and saved it using the code below -\nThere are two problems I'm facing now while making predictions in Python and Java as below -\n\nMaking predictions in Python\nMaking prediction in Java with input as string\nHow to convert data to complex input types like CrossColumn tensors, bucketized tensors, embedding tensors etc in Java\n\n1] Making predictions in Python -\nGist for training code can be found at - https://gist.github.com/gaganmalhotra/8c40e7650f27cf3f894bad092fbe01ab\nWhile loading the model using the Predictor and making predictions as :\n# Preparing the single test dataframe to be used for prediction\ninput_single_predict = df_test[2:3] #this is just a single row from the test dataframe I'm using to test for prediction\n\nK_CATEGORICAL_COLUMNS = [\"gender\", \"native_country\", \"education\", \"occupation\", \"workclass\", \"marital_status\", \"race\"]\n\ndef predict_ip_fn(df):\n  categorical_cols = {k: tf.SparseTensor(\n      indices=[[i, 0] for i in range(df[k].size)],\n      values=df[k].values,\n      dense_shape=[df[k].size, 1])\n                      for k in K_CATEGORICAL_COLUMNS}\n  return categorical_cols\n\ndict_predict = predict_ip_fn(input_single_predict)\n\n# Loading the model from disk\nfrom tensorflow.contrib import predictor\nexport_dir = \"/Users/Documents/SampleTF_projects/temp/1510957027\"\npredict_fn = predictor.from_saved_model(export_dir, signature_def_key=None)\n\npredictions = predict_fn(dict_predict) . #<<<<<< ****** Error is caused here ******\nprint(predictions['probabilities'])\n\n\nBut it leads to the error as below -\nValueError: Got unexpected keys in input_dict: set(['workclass', 'gender', 'marital_status', 'race', 'native_country', 'education', 'occupation'])\nJust to cross verify with the model features, you can find the feature columns used in the model as below -\nLinearClassifier(params = {\n\t'gradient_clip_norm': None,\n\t'head': < tensorflow.contrib.learn.python.learn.estimators.head._BinaryLogisticHead object at 0x121e5a310 > ,\n\t'joint_weights': False,\n\t'optimizer': None,\n\t'feature_columns': [_SparseColumn(column_name = 'gender', is_integerized = False, bucket_size = None, lookup_config = _SparseIdLookupConfig(vocabulary_file = None, keys = ('Female', 'Male'), num_oov_buckets = 0, vocab_size = 2, default_value = -1), combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'native_country', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string),\n  _SparseColumn(column_name = 'education', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'occupation', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'workclass', is_integerized = False, bucket_size = 100, lookup_config = None, combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'marital_status', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string), \n  _SparseColumn(column_name = 'race', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string)]\n})\n\n2] Making predictions in Java\nBelow is the java code for making the predictions from the loaded model:\n\npublic static void main(String[] args) throws UnsupportedEncodingException {\nTensorFlow.loadLibrary(\"/Users/gagandeep.malhotra/Documents/gcTensorFlowPredictIncome/census_keras/lib/python2.7/site-packages/tensorflow/contrib/layers/python/ops/_sparse_feature_cross_op.so\");\n\t\t\n\t\t  try (SavedModelBundle b = SavedModelBundle.load(\"/Users/Documents/SampleTF_projects/temp/1510957027/\", \"serve\")) {\n\n\t          \n\t          /**\n\t\t\t * \n\t\t\t * The given SavedModel SignatureDef contains the following input(s):\n\t\t\t * inputs['inputs'] tensor_info: dtype: DT_STRING shape: (-1) name:\n\t\t\t * input_example_tensor:0 The given SavedModel SignatureDef contains the\n\t\t\t * following output(s): outputs['classes'] tensor_info: dtype: DT_STRING shape:\n\t\t\t * (-1, -1) name:\n\t\t\t * linear/binary_logistic_head/_classification_output_alternatives/classes_tensor:0\n\t\t\t * outputs['scores'] tensor_info: dtype: DT_FLOAT shape: (-1, 2) name:\n\t\t\t * linear/binary_logistic_head/predictions/probabilities:0 Method name is:\n\t\t\t * tensorflow/serving/classify\n\t\t\t * \n\t\t\t * \n\t\t\t */\n\t\t\tString[] inputs = new String[] { \"HS-grad\", \"Male\", \"Divorced\", \"United-States\", \"Handlers-cleaners\",\n\t\t\t\t\t\"White\", \"Private\" };\n\n\t\t\tbyte[][][] stringMatrix = new byte[7][1][];\n\t\t\tfor (int i = 0; i < 7; ++i) {\n\t\t\t\tstringMatrix[i][0] = String.format(inputs[i]).getBytes(\"UTF-8\");\n\t\t\t}\n\n\t\t\tTensor<String> t = Tensors.create(stringMatrix);\n\n\t\t\tSession sess = b.session();\n\n\t\t\tfinal String xName = \"input_example_tensor:0\";\n\t\t\tfinal String scoresName = \"linear/binary_logistic_head/predictions/probabilities:0\";\n\t\t\tList<Tensor<?>> outputs = s.runner().feed(xName, t).fetch(scoresName).run();\n\n\t\t\tfloat[][] classes = new float[2][2];\n\t\t\toutputs.get(0).copyTo(classes);\n\n\t      }\n\t\t  \n\n3] How to create a Complex Input data types in JAVA\nIn python, we can create different input tensors like CrossedColumn, Bucketized etc , Is there a way that we can convert similarly in Java as we dont have estimators or contrib libraries present in JAVA API.\nIf anyone you could help or guide in the right direction.. @eggie5 @asimshankar @ry", "body": "While working on the tensor flow java api, I trained a model in python and saved it using the code below -\r\n\r\nThere are two problems I'm facing now while making predictions in Python and Java as below - \r\n\r\n1. Making predictions in Python\r\n2.  Making prediction in Java with input as string \r\n3.  How to convert data to complex input types like CrossColumn tensors, bucketized tensors, embedding tensors etc in Java\r\n\r\n**_1] Making predictions in Python -_** \r\n\r\nGist for training code can be found at - https://gist.github.com/gaganmalhotra/8c40e7650f27cf3f894bad092fbe01ab\r\n\r\nWhile loading the model using the Predictor and making predictions as : \r\n\r\n```\r\n# Preparing the single test dataframe to be used for prediction\r\ninput_single_predict = df_test[2:3] #this is just a single row from the test dataframe I'm using to test for prediction\r\n\r\nK_CATEGORICAL_COLUMNS = [\"gender\", \"native_country\", \"education\", \"occupation\", \"workclass\", \"marital_status\", \"race\"]\r\n\r\ndef predict_ip_fn(df):\r\n  categorical_cols = {k: tf.SparseTensor(\r\n      indices=[[i, 0] for i in range(df[k].size)],\r\n      values=df[k].values,\r\n      dense_shape=[df[k].size, 1])\r\n                      for k in K_CATEGORICAL_COLUMNS}\r\n  return categorical_cols\r\n\r\ndict_predict = predict_ip_fn(input_single_predict)\r\n\r\n# Loading the model from disk\r\nfrom tensorflow.contrib import predictor\r\nexport_dir = \"/Users/Documents/SampleTF_projects/temp/1510957027\"\r\npredict_fn = predictor.from_saved_model(export_dir, signature_def_key=None)\r\n\r\npredictions = predict_fn(dict_predict) . #<<<<<< ****** Error is caused here ******\r\nprint(predictions['probabilities'])\r\n\r\n```\r\n**But it leads to the error as below -** \r\n`\r\nValueError: Got unexpected keys in input_dict: set(['workclass', 'gender', 'marital_status', 'race', 'native_country', 'education', 'occupation'])\r\n`\r\n\r\n**Just to cross verify with the model features, you can find the feature columns used in the model as below -** \r\n\r\n```\r\nLinearClassifier(params = {\r\n\t'gradient_clip_norm': None,\r\n\t'head': < tensorflow.contrib.learn.python.learn.estimators.head._BinaryLogisticHead object at 0x121e5a310 > ,\r\n\t'joint_weights': False,\r\n\t'optimizer': None,\r\n\t'feature_columns': [_SparseColumn(column_name = 'gender', is_integerized = False, bucket_size = None, lookup_config = _SparseIdLookupConfig(vocabulary_file = None, keys = ('Female', 'Male'), num_oov_buckets = 0, vocab_size = 2, default_value = -1), combiner = 'sum', dtype = tf.string), \r\n  _SparseColumn(column_name = 'native_country', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string),\r\n  _SparseColumn(column_name = 'education', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string), \r\n  _SparseColumn(column_name = 'occupation', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string), \r\n  _SparseColumn(column_name = 'workclass', is_integerized = False, bucket_size = 100, lookup_config = None, combiner = 'sum', dtype = tf.string), \r\n  _SparseColumn(column_name = 'marital_status', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string), \r\n  _SparseColumn(column_name = 'race', is_integerized = False, bucket_size = 1000, lookup_config = None, combiner = 'sum', dtype = tf.string)]\r\n})\r\n```\r\n\r\n**_2] Making predictions in Java_** \r\n\r\nBelow is the java code for making the predictions from the loaded model:\r\n```\r\n\r\npublic static void main(String[] args) throws UnsupportedEncodingException {\r\nTensorFlow.loadLibrary(\"/Users/gagandeep.malhotra/Documents/gcTensorFlowPredictIncome/census_keras/lib/python2.7/site-packages/tensorflow/contrib/layers/python/ops/_sparse_feature_cross_op.so\");\r\n\t\t\r\n\t\t  try (SavedModelBundle b = SavedModelBundle.load(\"/Users/Documents/SampleTF_projects/temp/1510957027/\", \"serve\")) {\r\n\r\n\t          \r\n\t          /**\r\n\t\t\t * \r\n\t\t\t * The given SavedModel SignatureDef contains the following input(s):\r\n\t\t\t * inputs['inputs'] tensor_info: dtype: DT_STRING shape: (-1) name:\r\n\t\t\t * input_example_tensor:0 The given SavedModel SignatureDef contains the\r\n\t\t\t * following output(s): outputs['classes'] tensor_info: dtype: DT_STRING shape:\r\n\t\t\t * (-1, -1) name:\r\n\t\t\t * linear/binary_logistic_head/_classification_output_alternatives/classes_tensor:0\r\n\t\t\t * outputs['scores'] tensor_info: dtype: DT_FLOAT shape: (-1, 2) name:\r\n\t\t\t * linear/binary_logistic_head/predictions/probabilities:0 Method name is:\r\n\t\t\t * tensorflow/serving/classify\r\n\t\t\t * \r\n\t\t\t * \r\n\t\t\t */\r\n\t\t\tString[] inputs = new String[] { \"HS-grad\", \"Male\", \"Divorced\", \"United-States\", \"Handlers-cleaners\",\r\n\t\t\t\t\t\"White\", \"Private\" };\r\n\r\n\t\t\tbyte[][][] stringMatrix = new byte[7][1][];\r\n\t\t\tfor (int i = 0; i < 7; ++i) {\r\n\t\t\t\tstringMatrix[i][0] = String.format(inputs[i]).getBytes(\"UTF-8\");\r\n\t\t\t}\r\n\r\n\t\t\tTensor<String> t = Tensors.create(stringMatrix);\r\n\r\n\t\t\tSession sess = b.session();\r\n\r\n\t\t\tfinal String xName = \"input_example_tensor:0\";\r\n\t\t\tfinal String scoresName = \"linear/binary_logistic_head/predictions/probabilities:0\";\r\n\t\t\tList<Tensor<?>> outputs = s.runner().feed(xName, t).fetch(scoresName).run();\r\n\r\n\t\t\tfloat[][] classes = new float[2][2];\r\n\t\t\toutputs.get(0).copyTo(classes);\r\n\r\n\t      }\r\n\t\t  \r\n```\r\n\r\n**_3] How to create a Complex Input data types in JAVA_**\r\n\r\nIn python, we can create different input tensors like CrossedColumn, Bucketized etc , Is there a way that we can convert similarly in Java as we dont have estimators or contrib libraries present in JAVA API.\r\n\r\n\r\nIf anyone you could help or guide in the right direction.. @eggie5 @asimshankar @ry"}