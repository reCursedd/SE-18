{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20308", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20308/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20308/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20308/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20308", "id": 335887442, "node_id": "MDU6SXNzdWUzMzU4ODc0NDI=", "number": 20308, "title": "Results are different on MacOS for fixed data", "user": {"login": "madrugado", "id": 3098853, "node_id": "MDQ6VXNlcjMwOTg4NTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3098853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madrugado", "html_url": "https://github.com/madrugado", "followers_url": "https://api.github.com/users/madrugado/followers", "following_url": "https://api.github.com/users/madrugado/following{/other_user}", "gists_url": "https://api.github.com/users/madrugado/gists{/gist_id}", "starred_url": "https://api.github.com/users/madrugado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madrugado/subscriptions", "organizations_url": "https://api.github.com/users/madrugado/orgs", "repos_url": "https://api.github.com/users/madrugado/repos", "events_url": "https://api.github.com/users/madrugado/events{/privacy}", "received_events_url": "https://api.github.com/users/madrugado/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": {"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-06-26T15:59:12Z", "updated_at": "2018-11-10T18:49:20Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Hello.</p>\n<p>We've encountered strange behaviour of TF (tested on versions 1.7.0 and 1.8.0) on MacOS (tested on 10.11.6) with Python 2.7 (tested on 2.7.10). While running this code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Model</span>(<span class=\"pl-c1\">object</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        one_hot <span class=\"pl-k\">=</span> tf.constant([[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>]])\n        logits <span class=\"pl-k\">=</span> tf.constant([[<span class=\"pl-c1\">0.3</span>, <span class=\"pl-c1\">0.2</span>, <span class=\"pl-c1\">0</span>], [<span class=\"pl-c1\">0.1</span>, <span class=\"pl-c1\">0.0004</span>, <span class=\"pl-c1\">0</span>], [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0.02</span>, <span class=\"pl-c1\">0.2</span>]])\n\n        <span class=\"pl-c1\">self</span>.one_hot <span class=\"pl-k\">=</span> one_hot\n        <span class=\"pl-c1\">self</span>.logits <span class=\"pl-k\">=</span> logits\n        <span class=\"pl-c1\">self</span>.rec_at_k <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._recall_at_k()\n        <span class=\"pl-c1\">self</span>.prec_at_k <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._precision_at_k()\n\n        config <span class=\"pl-k\">=</span> tf.ConfigProto()\n        config.gpu_options.allow_growth <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n        <span class=\"pl-c1\">self</span>.sess <span class=\"pl-k\">=</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config)\n        <span class=\"pl-c1\">self</span>.sess.run(tf.global_variables_initializer())\n        <span class=\"pl-c1\">self</span>.sess.run(tf.local_variables_initializer())\n\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_recall_at_k</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">top</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>):\n        recalls <span class=\"pl-k\">=</span> []\n        <span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1</span>,top<span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span>):\n            recalls.append(tf.metrics.recall_at_k(tf.cast(<span class=\"pl-c1\">self</span>.one_hot, tf.int64), tf.cast(<span class=\"pl-c1\">self</span>.logits, tf.float32), <span class=\"pl-v\">k</span><span class=\"pl-k\">=</span>k))\n        <span class=\"pl-k\">return</span> recalls\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_precision_at_k</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">top</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>):\n        precs <span class=\"pl-k\">=</span> []\n        <span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1</span>,top<span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span>):\n            precs.append(tf.metrics.recall_at_k(tf.cast(<span class=\"pl-c1\">self</span>.one_hot, tf.int64), <span class=\"pl-c1\">self</span>.logits, <span class=\"pl-v\">k</span><span class=\"pl-k\">=</span>k))\n        <span class=\"pl-k\">return</span> precs\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">fit</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        recalls, precs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.sess.run([<span class=\"pl-c1\">self</span>.rec_at_k, <span class=\"pl-c1\">self</span>.prec_at_k])\n        <span class=\"pl-k\">for</span> rec,prec <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(recalls,precs):\n            <span class=\"pl-c1\">print</span> rec[<span class=\"pl-c1\">0</span>],rec, prec\n        l,o <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.sess.run([<span class=\"pl-c1\">self</span>.logits, <span class=\"pl-c1\">self</span>.one_hot])\n        <span class=\"pl-c1\">print</span> l\n        <span class=\"pl-c1\">print</span> o, o[:,:<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]\n\n\nmodel <span class=\"pl-k\">=</span> Model()\nmodel.fit()</pre></div>\n<p>we receive results which are different from run to run, like:</p>\n<pre><code>0.2857142857142857 ('0.2857142857142857', '0.2857142857142857') ('1.0', '0.2857142857142857')\n0.7142857142857143 ('0.7142857142857143', '0.7142857142857143') ('1.0', '0.7142857142857143')\n0.0 ('0.0', '0.8571428571428571') ('1.0', '0.8571428571428571')\n[[0.3    0.2    0.    ]\n [0.1    0.0004 0.    ]\n [0.     0.02   0.2   ]]\n[[1 0 0 1]\n [0 1 1 2]\n [1 1 1 3]] [[1 0 0]\n [0 1 1]\n [1 1 1]]\n</code></pre>\n<p>and</p>\n<pre><code>0.4 ('0.4', '0.2857142857142857') ('1.0', '0.2857142857142857')\n1.0 ('1.0', '0.7142857142857143') ('0.7142857142857143', '0.7142857142857143')\n0.0 ('0.0', '0.8571428571428571') ('1.0', '0.8571428571428571')\n[[0.3    0.2    0.    ]\n [0.1    0.0004 0.    ]\n [0.     0.02   0.2   ]]\n[[1 0 0 1]\n [0 1 1 2]\n [1 1 1 3]] [[1 0 0]\n [0 1 1]\n [1 1 1]]\n</code></pre>\n<p>On linux (Ubuntu 16.04 4.13.0-45-generic) and Python (2.7.14) results are stable.</p>", "body_text": "Hello.\nWe've encountered strange behaviour of TF (tested on versions 1.7.0 and 1.8.0) on MacOS (tested on 10.11.6) with Python 2.7 (tested on 2.7.10). While running this code:\nimport tensorflow as tf\n\nclass Model(object):\n    def __init__(self):\n        one_hot = tf.constant([[1, 0, 0, 1], [0, 1, 1, 2], [1, 1, 1, 3]])\n        logits = tf.constant([[0.3, 0.2, 0], [0.1, 0.0004, 0], [0, 0.02, 0.2]])\n\n        self.one_hot = one_hot\n        self.logits = logits\n        self.rec_at_k = self._recall_at_k()\n        self.prec_at_k = self._precision_at_k()\n\n        config = tf.ConfigProto()\n        config.gpu_options.allow_growth = True\n        self.sess = tf.Session(config=config)\n        self.sess.run(tf.global_variables_initializer())\n        self.sess.run(tf.local_variables_initializer())\n\n\n    def _recall_at_k(self, top=3):\n        recalls = []\n        for k in range(1,top+1):\n            recalls.append(tf.metrics.recall_at_k(tf.cast(self.one_hot, tf.int64), tf.cast(self.logits, tf.float32), k=k))\n        return recalls\n\n    def _precision_at_k(self, top=3):\n        precs = []\n        for k in range(1,top+1):\n            precs.append(tf.metrics.recall_at_k(tf.cast(self.one_hot, tf.int64), self.logits, k=k))\n        return precs\n\n    def fit(self):\n        recalls, precs = self.sess.run([self.rec_at_k, self.prec_at_k])\n        for rec,prec in zip(recalls,precs):\n            print rec[0],rec, prec\n        l,o = self.sess.run([self.logits, self.one_hot])\n        print l\n        print o, o[:,:-1]\n\n\nmodel = Model()\nmodel.fit()\nwe receive results which are different from run to run, like:\n0.2857142857142857 ('0.2857142857142857', '0.2857142857142857') ('1.0', '0.2857142857142857')\n0.7142857142857143 ('0.7142857142857143', '0.7142857142857143') ('1.0', '0.7142857142857143')\n0.0 ('0.0', '0.8571428571428571') ('1.0', '0.8571428571428571')\n[[0.3    0.2    0.    ]\n [0.1    0.0004 0.    ]\n [0.     0.02   0.2   ]]\n[[1 0 0 1]\n [0 1 1 2]\n [1 1 1 3]] [[1 0 0]\n [0 1 1]\n [1 1 1]]\n\nand\n0.4 ('0.4', '0.2857142857142857') ('1.0', '0.2857142857142857')\n1.0 ('1.0', '0.7142857142857143') ('0.7142857142857143', '0.7142857142857143')\n0.0 ('0.0', '0.8571428571428571') ('1.0', '0.8571428571428571')\n[[0.3    0.2    0.    ]\n [0.1    0.0004 0.    ]\n [0.     0.02   0.2   ]]\n[[1 0 0 1]\n [0 1 1 2]\n [1 1 1 3]] [[1 0 0]\n [0 1 1]\n [1 1 1]]\n\nOn linux (Ubuntu 16.04 4.13.0-45-generic) and Python (2.7.14) results are stable.", "body": "Hello.\r\n\r\nWe've encountered strange behaviour of TF (tested on versions 1.7.0 and 1.8.0) on MacOS (tested on 10.11.6) with Python 2.7 (tested on 2.7.10). While running this code:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nclass Model(object):\r\n    def __init__(self):\r\n        one_hot = tf.constant([[1, 0, 0, 1], [0, 1, 1, 2], [1, 1, 1, 3]])\r\n        logits = tf.constant([[0.3, 0.2, 0], [0.1, 0.0004, 0], [0, 0.02, 0.2]])\r\n\r\n        self.one_hot = one_hot\r\n        self.logits = logits\r\n        self.rec_at_k = self._recall_at_k()\r\n        self.prec_at_k = self._precision_at_k()\r\n\r\n        config = tf.ConfigProto()\r\n        config.gpu_options.allow_growth = True\r\n        self.sess = tf.Session(config=config)\r\n        self.sess.run(tf.global_variables_initializer())\r\n        self.sess.run(tf.local_variables_initializer())\r\n\r\n\r\n    def _recall_at_k(self, top=3):\r\n        recalls = []\r\n        for k in range(1,top+1):\r\n            recalls.append(tf.metrics.recall_at_k(tf.cast(self.one_hot, tf.int64), tf.cast(self.logits, tf.float32), k=k))\r\n        return recalls\r\n\r\n    def _precision_at_k(self, top=3):\r\n        precs = []\r\n        for k in range(1,top+1):\r\n            precs.append(tf.metrics.recall_at_k(tf.cast(self.one_hot, tf.int64), self.logits, k=k))\r\n        return precs\r\n\r\n    def fit(self):\r\n        recalls, precs = self.sess.run([self.rec_at_k, self.prec_at_k])\r\n        for rec,prec in zip(recalls,precs):\r\n            print rec[0],rec, prec\r\n        l,o = self.sess.run([self.logits, self.one_hot])\r\n        print l\r\n        print o, o[:,:-1]\r\n\r\n\r\nmodel = Model()\r\nmodel.fit()\r\n```\r\n\r\n\r\nwe receive results which are different from run to run, like:\r\n\r\n\r\n```\r\n0.2857142857142857 ('0.2857142857142857', '0.2857142857142857') ('1.0', '0.2857142857142857')\r\n0.7142857142857143 ('0.7142857142857143', '0.7142857142857143') ('1.0', '0.7142857142857143')\r\n0.0 ('0.0', '0.8571428571428571') ('1.0', '0.8571428571428571')\r\n[[0.3    0.2    0.    ]\r\n [0.1    0.0004 0.    ]\r\n [0.     0.02   0.2   ]]\r\n[[1 0 0 1]\r\n [0 1 1 2]\r\n [1 1 1 3]] [[1 0 0]\r\n [0 1 1]\r\n [1 1 1]]\r\n```\r\n\r\n\r\nand\r\n\r\n\r\n```\r\n0.4 ('0.4', '0.2857142857142857') ('1.0', '0.2857142857142857')\r\n1.0 ('1.0', '0.7142857142857143') ('0.7142857142857143', '0.7142857142857143')\r\n0.0 ('0.0', '0.8571428571428571') ('1.0', '0.8571428571428571')\r\n[[0.3    0.2    0.    ]\r\n [0.1    0.0004 0.    ]\r\n [0.     0.02   0.2   ]]\r\n[[1 0 0 1]\r\n [0 1 1 2]\r\n [1 1 1 3]] [[1 0 0]\r\n [0 1 1]\r\n [1 1 1]]\r\n```\r\n\r\n\r\nOn linux (Ubuntu 16.04 4.13.0-45-generic) and Python (2.7.14) results are stable."}