{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15367", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15367/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15367/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15367/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15367", "id": 282134289, "node_id": "MDU6SXNzdWUyODIxMzQyODk=", "number": 15367, "title": "tf.keras.backend.set_learning_phase doesn't work during evaluating model", "user": {"login": "CasiaFan", "id": 10608984, "node_id": "MDQ6VXNlcjEwNjA4OTg0", "avatar_url": "https://avatars3.githubusercontent.com/u/10608984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CasiaFan", "html_url": "https://github.com/CasiaFan", "followers_url": "https://api.github.com/users/CasiaFan/followers", "following_url": "https://api.github.com/users/CasiaFan/following{/other_user}", "gists_url": "https://api.github.com/users/CasiaFan/gists{/gist_id}", "starred_url": "https://api.github.com/users/CasiaFan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CasiaFan/subscriptions", "organizations_url": "https://api.github.com/users/CasiaFan/orgs", "repos_url": "https://api.github.com/users/CasiaFan/repos", "events_url": "https://api.github.com/users/CasiaFan/events{/privacy}", "received_events_url": "https://api.github.com/users/CasiaFan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-12-14T15:15:40Z", "updated_at": "2018-02-04T10:01:50Z", "closed_at": "2018-01-11T22:31:41Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip install tensorflow-gpu</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.0</li>\n<li><strong>Python version</strong>: 3.5.2</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When I run following script\uff0cerror  <code>InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'block1_conv1_bn/keras_learning_phase' with dtype bool</code>  occured.  After searching in keras repository and stackoverflow, I find it is caused by the design of learning phase parameter of BN layers which behave differently at training and testing time (See <a href=\"https://blog.keras.io/keras-as-a-simplified-interface-to-tensorflow-tutorial.html\" rel=\"nofollow\">here</a>). fchollet have added <code>K.set_learning_phase()</code> for tensorflow to solve this problem. So when I use <code>keras</code> instead of <code>tf.keras</code>, no issue is reported. I wonder if this part is still not integrated into tensorflow completely.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> import keras  # work normally</span>\nkeras <span class=\"pl-k\">=</span> tf.keras\nXception <span class=\"pl-k\">=</span> keras.applications.Xception\n<span class=\"pl-k\">from</span> keras <span class=\"pl-k\">import</span> backend <span class=\"pl-k\">as</span> K\n\ndata_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>val.tfrecord<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">isinstance</span>(data_path, (<span class=\"pl-c1\">tuple</span>, <span class=\"pl-c1\">list</span>)):\n    data_path <span class=\"pl-k\">=</span> [data_path]\nfeature <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>image/encoded<span class=\"pl-pds\">'</span></span>: tf.FixedLenFeature([], tf.string),\n           <span class=\"pl-s\"><span class=\"pl-pds\">'</span>image/class_id<span class=\"pl-pds\">'</span></span>: tf.FixedLenFeature([], tf.int64)}\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> create file queue</span>\nfilename_queue <span class=\"pl-k\">=</span> tf.train.string_input_producer(data_path)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> tfrecord file reader</span>\nreader <span class=\"pl-k\">=</span> tf.TFRecordReader()\n_, example_string <span class=\"pl-k\">=</span> reader.read(filename_queue)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> decode record</span>\nfeatures <span class=\"pl-k\">=</span> tf.parse_single_example(example_string, <span class=\"pl-v\">features</span><span class=\"pl-k\">=</span>feature)\nimage <span class=\"pl-k\">=</span> tf.decode_raw(features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>image/encoded<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">out_type</span><span class=\"pl-k\">=</span>tf.uint8)\nimage <span class=\"pl-k\">=</span> tf.cast(image, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> restore shape</span>\nimage <span class=\"pl-k\">=</span> tf.reshape(image, (<span class=\"pl-c1\">96</span>, <span class=\"pl-c1\">96</span>, <span class=\"pl-c1\">3</span>))\nlabel <span class=\"pl-k\">=</span> tf.cast(features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>image/class_id<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64)\nimage_batch, label_batch <span class=\"pl-k\">=</span> tf.train.shuffle_batch(<span class=\"pl-v\">tensors</span><span class=\"pl-k\">=</span>[image, label],\n                                                  <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">128</span>,\n                                                  <span class=\"pl-v\">capacity</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10000</span>,\n                                                  <span class=\"pl-v\">min_after_dequeue</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3000</span>,\n                                                  <span class=\"pl-v\">num_threads</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">8</span>,\n                                                  <span class=\"pl-v\">allow_smaller_final_batch</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> convert label to one hot label</span>\nsess <span class=\"pl-k\">=</span> K.get_session()\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> declare learning phase for BN/dropout</span>\nK.set_learning_phase(<span class=\"pl-c1\">0</span>)\nlabel_batch <span class=\"pl-k\">=</span> tf.one_hot(label_batch, <span class=\"pl-c1\">2</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nmodel_input <span class=\"pl-k\">=</span> keras.layers.Input(<span class=\"pl-v\">tensor</span><span class=\"pl-k\">=</span>image_batch)\nbase_model <span class=\"pl-k\">=</span> Xception(<span class=\"pl-v\">include_top</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n                      <span class=\"pl-v\">weights</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>,   <span class=\"pl-c\"><span class=\"pl-c\">#</span> no pre-trained weights used</span>\n                      <span class=\"pl-v\">pooling</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>avg<span class=\"pl-pds\">\"</span></span>,\n                      <span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">96</span>, <span class=\"pl-c1\">96</span>, <span class=\"pl-c1\">3</span>),  <span class=\"pl-c\"><span class=\"pl-c\">#</span> modify first layer</span>\n                      <span class=\"pl-v\">classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\nmodel_output <span class=\"pl-k\">=</span> base_model(model_input)\ntest_model <span class=\"pl-k\">=</span> keras.models.Model(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>model_input, <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>model_output)\ntest_model.load_weights(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weights.h5<span class=\"pl-pds\">\"</span></span>)\noptimizer <span class=\"pl-k\">=</span> tf.train.RMSPropOptimizer(<span class=\"pl-v\">learning_rate</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2e-3</span>, <span class=\"pl-v\">decay</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.9</span>)\ntest_model.compile(<span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span>optimizer,\n                   <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>categorical_crossentropy<span class=\"pl-pds\">\"</span></span>,\n                   <span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>accuracy<span class=\"pl-pds\">'</span></span>])\nacc_value <span class=\"pl-k\">=</span> keras.metrics.categorical_accuracy(label_batch, model_output)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Fit model using data from tf records queue</span>\ncoord <span class=\"pl-k\">=</span> tf.train.Coordinator()\nthreads <span class=\"pl-k\">=</span> tf.train.start_queue_runners(<span class=\"pl-v\">sess</span><span class=\"pl-k\">=</span>sess, <span class=\"pl-v\">coord</span><span class=\"pl-k\">=</span>coord)\nacc_value_batch <span class=\"pl-k\">=</span> sess.run([acc_value])\n<span class=\"pl-c1\">print</span>(acc_value_batch)\ncoord.request_stop()\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> wait for threads to stop</span>\ncoord.join(<span class=\"pl-v\">threads</span><span class=\"pl-k\">=</span>threads)\nsess.close()</pre></div>\n<p>logs:</p>\n<pre><code>Caused by op 'block1_conv1_bn/keras_learning_phase', defined at:\n  File \"/home/arkenstone/PycharmProjects/startdt/face_liveness_detect/model/patch_based_cnn/test_image.py\", line 66, in &lt;module&gt;\n    classes=2)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/applications/xception.py\", line 161, in Xception\n    x = BatchNormalization(name='block1_conv1_bn')(x)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 252, in __call__\n    output = super(Layer, self).__call__(inputs, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 575, in __call__\n    outputs = self.call(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/layers/normalization.py\", line 109, in call\n    training = K.learning_phase()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/backend.py\", line 325, in learning_phase\n    phase = array_ops.placeholder(dtype='bool', name='keras_learning_phase')\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/array_ops.py\", line 1599, in placeholder\n    return gen_array_ops._placeholder(dtype=dtype, shape=shape, name=name)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 3091, in _placeholder\n    \"Placeholder\", dtype=dtype, shape=shape, name=name)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 2956, in create_op\n    op_def=op_def)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1470, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'block1_conv1_bn/keras_learning_phase' with dtype bool\n\t [[Node: block1_conv1_bn/keras_learning_phase = Placeholder[dtype=DT_BOOL, shape=&lt;unknown&gt;, _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"]()]]\n\t [[Node: Cast_2/_23 = _Recv[client_terminated=false, recv_device=\"/job:localhost/replica:0/task:0/device:CPU:0\", send_device=\"/job:localhost/replica:0/task:0/device:GPU:0\", send_device_incarnation=1, tensor_name=\"edge_1603_Cast_2\", tensor_type=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): pip install tensorflow-gpu\nTensorFlow version (use command below): 1.4.0\nPython version: 3.5.2\nExact command to reproduce:\n\nDescribe the problem\nWhen I run following script\uff0cerror  InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'block1_conv1_bn/keras_learning_phase' with dtype bool  occured.  After searching in keras repository and stackoverflow, I find it is caused by the design of learning phase parameter of BN layers which behave differently at training and testing time (See here). fchollet have added K.set_learning_phase() for tensorflow to solve this problem. So when I use keras instead of tf.keras, no issue is reported. I wonder if this part is still not integrated into tensorflow completely.\nSource code / logs\nimport tensorflow as tf\n# import keras  # work normally\nkeras = tf.keras\nXception = keras.applications.Xception\nfrom keras import backend as K\n\ndata_path = \"val.tfrecord\"\nif not isinstance(data_path, (tuple, list)):\n    data_path = [data_path]\nfeature = {'image/encoded': tf.FixedLenFeature([], tf.string),\n           'image/class_id': tf.FixedLenFeature([], tf.int64)}\n# create file queue\nfilename_queue = tf.train.string_input_producer(data_path)\n# tfrecord file reader\nreader = tf.TFRecordReader()\n_, example_string = reader.read(filename_queue)\n# decode record\nfeatures = tf.parse_single_example(example_string, features=feature)\nimage = tf.decode_raw(features['image/encoded'], out_type=tf.uint8)\nimage = tf.cast(image, dtype=tf.float32)\n# restore shape\nimage = tf.reshape(image, (96, 96, 3))\nlabel = tf.cast(features['image/class_id'], dtype=tf.int64)\nimage_batch, label_batch = tf.train.shuffle_batch(tensors=[image, label],\n                                                  batch_size=128,\n                                                  capacity=10000,\n                                                  min_after_dequeue=3000,\n                                                  num_threads=8,\n                                                  allow_smaller_final_batch=True)\n\n# convert label to one hot label\nsess = K.get_session()\n# declare learning phase for BN/dropout\nK.set_learning_phase(0)\nlabel_batch = tf.one_hot(label_batch, 2, dtype=tf.float32)\nmodel_input = keras.layers.Input(tensor=image_batch)\nbase_model = Xception(include_top=True,\n                      weights=None,   # no pre-trained weights used\n                      pooling=\"avg\",\n                      input_shape=(96, 96, 3),  # modify first layer\n                      classes=2)\nmodel_output = base_model(model_input)\ntest_model = keras.models.Model(inputs=model_input, outputs=model_output)\ntest_model.load_weights(\"weights.h5\")\noptimizer = tf.train.RMSPropOptimizer(learning_rate=2e-3, decay=0.9)\ntest_model.compile(optimizer=optimizer,\n                   loss=\"categorical_crossentropy\",\n                   metrics=['accuracy'])\nacc_value = keras.metrics.categorical_accuracy(label_batch, model_output)\n# Fit model using data from tf records queue\ncoord = tf.train.Coordinator()\nthreads = tf.train.start_queue_runners(sess=sess, coord=coord)\nacc_value_batch = sess.run([acc_value])\nprint(acc_value_batch)\ncoord.request_stop()\n# wait for threads to stop\ncoord.join(threads=threads)\nsess.close()\nlogs:\nCaused by op 'block1_conv1_bn/keras_learning_phase', defined at:\n  File \"/home/arkenstone/PycharmProjects/startdt/face_liveness_detect/model/patch_based_cnn/test_image.py\", line 66, in <module>\n    classes=2)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/applications/xception.py\", line 161, in Xception\n    x = BatchNormalization(name='block1_conv1_bn')(x)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 252, in __call__\n    output = super(Layer, self).__call__(inputs, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 575, in __call__\n    outputs = self.call(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/layers/normalization.py\", line 109, in call\n    training = K.learning_phase()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/backend.py\", line 325, in learning_phase\n    phase = array_ops.placeholder(dtype='bool', name='keras_learning_phase')\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/array_ops.py\", line 1599, in placeholder\n    return gen_array_ops._placeholder(dtype=dtype, shape=shape, name=name)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 3091, in _placeholder\n    \"Placeholder\", dtype=dtype, shape=shape, name=name)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 2956, in create_op\n    op_def=op_def)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1470, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'block1_conv1_bn/keras_learning_phase' with dtype bool\n\t [[Node: block1_conv1_bn/keras_learning_phase = Placeholder[dtype=DT_BOOL, shape=<unknown>, _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"]()]]\n\t [[Node: Cast_2/_23 = _Recv[client_terminated=false, recv_device=\"/job:localhost/replica:0/task:0/device:CPU:0\", send_device=\"/job:localhost/replica:0/task:0/device:GPU:0\", send_device_incarnation=1, tensor_name=\"edge_1603_Cast_2\", tensor_type=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: pip install tensorflow-gpu\r\n- **TensorFlow version (use command below)**: 1.4.0\r\n- **Python version**: 3.5.2\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nWhen I run following script\uff0cerror  `InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'block1_conv1_bn/keras_learning_phase' with dtype bool`  occured.  After searching in keras repository and stackoverflow, I find it is caused by the design of learning phase parameter of BN layers which behave differently at training and testing time (See [here](https://blog.keras.io/keras-as-a-simplified-interface-to-tensorflow-tutorial.html)). fchollet have added `K.set_learning_phase()` for tensorflow to solve this problem. So when I use `keras` instead of `tf.keras`, no issue is reported. I wonder if this part is still not integrated into tensorflow completely. \r\n\r\n### Source code / logs\r\n```python\r\nimport tensorflow as tf\r\n# import keras  # work normally\r\nkeras = tf.keras\r\nXception = keras.applications.Xception\r\nfrom keras import backend as K\r\n\r\ndata_path = \"val.tfrecord\"\r\nif not isinstance(data_path, (tuple, list)):\r\n    data_path = [data_path]\r\nfeature = {'image/encoded': tf.FixedLenFeature([], tf.string),\r\n           'image/class_id': tf.FixedLenFeature([], tf.int64)}\r\n# create file queue\r\nfilename_queue = tf.train.string_input_producer(data_path)\r\n# tfrecord file reader\r\nreader = tf.TFRecordReader()\r\n_, example_string = reader.read(filename_queue)\r\n# decode record\r\nfeatures = tf.parse_single_example(example_string, features=feature)\r\nimage = tf.decode_raw(features['image/encoded'], out_type=tf.uint8)\r\nimage = tf.cast(image, dtype=tf.float32)\r\n# restore shape\r\nimage = tf.reshape(image, (96, 96, 3))\r\nlabel = tf.cast(features['image/class_id'], dtype=tf.int64)\r\nimage_batch, label_batch = tf.train.shuffle_batch(tensors=[image, label],\r\n                                                  batch_size=128,\r\n                                                  capacity=10000,\r\n                                                  min_after_dequeue=3000,\r\n                                                  num_threads=8,\r\n                                                  allow_smaller_final_batch=True)\r\n\r\n# convert label to one hot label\r\nsess = K.get_session()\r\n# declare learning phase for BN/dropout\r\nK.set_learning_phase(0)\r\nlabel_batch = tf.one_hot(label_batch, 2, dtype=tf.float32)\r\nmodel_input = keras.layers.Input(tensor=image_batch)\r\nbase_model = Xception(include_top=True,\r\n                      weights=None,   # no pre-trained weights used\r\n                      pooling=\"avg\",\r\n                      input_shape=(96, 96, 3),  # modify first layer\r\n                      classes=2)\r\nmodel_output = base_model(model_input)\r\ntest_model = keras.models.Model(inputs=model_input, outputs=model_output)\r\ntest_model.load_weights(\"weights.h5\")\r\noptimizer = tf.train.RMSPropOptimizer(learning_rate=2e-3, decay=0.9)\r\ntest_model.compile(optimizer=optimizer,\r\n                   loss=\"categorical_crossentropy\",\r\n                   metrics=['accuracy'])\r\nacc_value = keras.metrics.categorical_accuracy(label_batch, model_output)\r\n# Fit model using data from tf records queue\r\ncoord = tf.train.Coordinator()\r\nthreads = tf.train.start_queue_runners(sess=sess, coord=coord)\r\nacc_value_batch = sess.run([acc_value])\r\nprint(acc_value_batch)\r\ncoord.request_stop()\r\n# wait for threads to stop\r\ncoord.join(threads=threads)\r\nsess.close()\r\n```\r\n\r\nlogs:\r\n```\r\nCaused by op 'block1_conv1_bn/keras_learning_phase', defined at:\r\n  File \"/home/arkenstone/PycharmProjects/startdt/face_liveness_detect/model/patch_based_cnn/test_image.py\", line 66, in <module>\r\n    classes=2)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/applications/xception.py\", line 161, in Xception\r\n    x = BatchNormalization(name='block1_conv1_bn')(x)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 252, in __call__\r\n    output = super(Layer, self).__call__(inputs, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 575, in __call__\r\n    outputs = self.call(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/layers/normalization.py\", line 109, in call\r\n    training = K.learning_phase()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/backend.py\", line 325, in learning_phase\r\n    phase = array_ops.placeholder(dtype='bool', name='keras_learning_phase')\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/array_ops.py\", line 1599, in placeholder\r\n    return gen_array_ops._placeholder(dtype=dtype, shape=shape, name=name)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 3091, in _placeholder\r\n    \"Placeholder\", dtype=dtype, shape=shape, name=name)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\r\n    op_def=op_def)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 2956, in create_op\r\n    op_def=op_def)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1470, in __init__\r\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\r\n\r\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'block1_conv1_bn/keras_learning_phase' with dtype bool\r\n\t [[Node: block1_conv1_bn/keras_learning_phase = Placeholder[dtype=DT_BOOL, shape=<unknown>, _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"]()]]\r\n\t [[Node: Cast_2/_23 = _Recv[client_terminated=false, recv_device=\"/job:localhost/replica:0/task:0/device:CPU:0\", send_device=\"/job:localhost/replica:0/task:0/device:GPU:0\", send_device_incarnation=1, tensor_name=\"edge_1603_Cast_2\", tensor_type=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\r\n```"}