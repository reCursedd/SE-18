{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/298670178", "html_url": "https://github.com/tensorflow/tensorflow/issues/9518#issuecomment-298670178", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9518", "id": 298670178, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODY3MDE3OA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-02T15:29:33Z", "updated_at": "2017-05-02T15:38:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6136274\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Celelibi\">@Celelibi</a> you need to make sure you are using MKL and not OpenBLAS. 5.6 seconds was for full SVD and it was peaking at 20 cores. Because of a feature of python installers, every time you install tensorflow, it'll overwrite fast MKL scipy with slow OpenBLAS scipy so you will need to restore MKL (conda install scipy).</p>\n<p>BTW, for a symmetric matrix, SVD gives eigenvectors and eigenvalues. It's more numerically stable than Eigendecomposition. For instance, applying to covariance based on 500 examples, I got all eigenvalues past 500 exactly zero using SVD in float64. Using spectral decomposition gives me numerical noise on the order of 1e-15</p>\n<p>To check if you have MKL, make sure this talks about MKL and not OpenBLAS<br>\n<code>python -c 'import numpy; numpy.__config__.show()'</code></p>", "body_text": "@Celelibi you need to make sure you are using MKL and not OpenBLAS. 5.6 seconds was for full SVD and it was peaking at 20 cores. Because of a feature of python installers, every time you install tensorflow, it'll overwrite fast MKL scipy with slow OpenBLAS scipy so you will need to restore MKL (conda install scipy).\nBTW, for a symmetric matrix, SVD gives eigenvectors and eigenvalues. It's more numerically stable than Eigendecomposition. For instance, applying to covariance based on 500 examples, I got all eigenvalues past 500 exactly zero using SVD in float64. Using spectral decomposition gives me numerical noise on the order of 1e-15\nTo check if you have MKL, make sure this talks about MKL and not OpenBLAS\npython -c 'import numpy; numpy.__config__.show()'", "body": "@Celelibi you need to make sure you are using MKL and not OpenBLAS. 5.6 seconds was for full SVD and it was peaking at 20 cores. Because of a feature of python installers, every time you install tensorflow, it'll overwrite fast MKL scipy with slow OpenBLAS scipy so you will need to restore MKL (conda install scipy).\r\n\r\nBTW, for a symmetric matrix, SVD gives eigenvectors and eigenvalues. It's more numerically stable than Eigendecomposition. For instance, applying to covariance based on 500 examples, I got all eigenvalues past 500 exactly zero using SVD in float64. Using spectral decomposition gives me numerical noise on the order of 1e-15\r\n\r\nTo check if you have MKL, make sure this talks about MKL and not OpenBLAS\r\n`python -c 'import numpy; numpy.__config__.show()'`"}