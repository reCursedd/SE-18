{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/341448726", "html_url": "https://github.com/tensorflow/tensorflow/issues/14185#issuecomment-341448726", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14185", "id": 341448726, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTQ0ODcyNg==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-02T14:58:44Z", "updated_at": "2017-11-02T14:58:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In regular TensorFlow, calling <code>tf.image.encode_jpeg()</code> (or any TensorFlow op function) in a loop will append it to a graph. Furthermore, each value of <code>im</code> will be embedded in the graph as a constant. There are a few options here:</p>\n<ul>\n<li>\n<p>Try the recently announced <a href=\"https://research.googleblog.com/2017/10/eager-execution-imperative-define-by.html\" rel=\"nofollow\">eager execution</a> mode, which makes code like this work the way you would expect, and prevents your code from leaking memory.</p>\n</li>\n<li>\n<p>Create a <code>tf.data</code> pipeline to do the conversion:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">generator</span>():\n  <span class=\"pl-k\">for</span> imagefile <span class=\"pl-k\">in</span> image_list:\n    <span class=\"pl-k\">yield</span> cv2.imread(imagefile)\n\ndataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_generator(generator, tf.uint8).map(tf.image.encode_jpeg)</pre></div>\n</li>\n<li>\n<p>Create a single <code>tf.image.encode_jpeg()</code> op that takes its input from a <code>tf.placeholder()</code> and feed that placeholder with each image.</p>\n</li>\n</ul>", "body_text": "In regular TensorFlow, calling tf.image.encode_jpeg() (or any TensorFlow op function) in a loop will append it to a graph. Furthermore, each value of im will be embedded in the graph as a constant. There are a few options here:\n\n\nTry the recently announced eager execution mode, which makes code like this work the way you would expect, and prevents your code from leaking memory.\n\n\nCreate a tf.data pipeline to do the conversion:\ndef generator():\n  for imagefile in image_list:\n    yield cv2.imread(imagefile)\n\ndataset = tf.data.Dataset.from_generator(generator, tf.uint8).map(tf.image.encode_jpeg)\n\n\nCreate a single tf.image.encode_jpeg() op that takes its input from a tf.placeholder() and feed that placeholder with each image.", "body": "In regular TensorFlow, calling `tf.image.encode_jpeg()` (or any TensorFlow op function) in a loop will append it to a graph. Furthermore, each value of `im` will be embedded in the graph as a constant. There are a few options here:\r\n\r\n* Try the recently announced [eager execution](https://research.googleblog.com/2017/10/eager-execution-imperative-define-by.html) mode, which makes code like this work the way you would expect, and prevents your code from leaking memory.\r\n\r\n* Create a `tf.data` pipeline to do the conversion:\r\n\r\n  ```python\r\n  def generator():\r\n    for imagefile in image_list:\r\n      yield cv2.imread(imagefile)\r\n\r\n  dataset = tf.data.Dataset.from_generator(generator, tf.uint8).map(tf.image.encode_jpeg)\r\n  ```\r\n\r\n* Create a single `tf.image.encode_jpeg()` op that takes its input from a `tf.placeholder()` and feed that placeholder with each image."}