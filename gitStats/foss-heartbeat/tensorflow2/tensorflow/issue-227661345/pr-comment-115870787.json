{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/115870787", "pull_request_review_id": 37425150, "id": 115870787, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg3MDc4Nw==", "diff_hunk": "@@ -149,6 +151,36 @@ public void setAttrShape() {\n     }\n   }\n \n+  @Test\n+  public void addControlInput() {\n+    assertEquals(0, lessEqualControl(2, 3).size());\n+    try {\n+      lessEqualControl(3, 2);", "path": "tensorflow/java/src/test/java/org/tensorflow/OperationBuilderTest.java", "position": null, "original_position": 17, "commit_id": "c81c81685ba98f05699a1eb88090b30e974419aa", "original_commit_id": "73c28b5d8c944c3a3026d0363abb3abfb2ea37b6", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "There is a lot happening in lessEqualControl to be able to tie the exception to the specific line we want.\r\nIt might be better to create a simpler graph with a placeholder and have the `try{}` block around just the session run call. Something like:\r\n\r\n```java\r\npublic void addControlInput() {\r\n  try (Graph g = new Graph();\r\n         Session s = new Session(g);\r\n         Tensor yes = Tensor.create(true);\r\n         Tensor no = Tensor.create(false)) {\r\n    Output placeholder = TestUtil.placeholder(g, \"boolean\", DataType.BOOL);\r\n    Output assert = g.opBuilder(\"Assert\", \"assert\")\r\n       .addInput(placeholder)\r\n       .addInputList(new Output[]{})\r\n       .build();\r\n      Output noop = g.opBuilder(\"NoOp\", \"noop\")\r\n          .addControlInput(assert)\r\n          .build();\r\n\r\n     // No problems when the assert succeeds\r\n     s.runner().feed(placeholder, yes).addTarget(noop).run();\r\n\r\n     // Exception thrown by the execution of the Assert node\r\n     try {\r\n        s.runner().feed(placeholder, no).addTarget(noop).run();\r\n        fail(...);\r\n      } catch (IllegalArgumentException e) {\r\n        // expected\r\n      }\r\n  }\r\n}\r\n```", "created_at": "2017-05-10T22:47:59Z", "updated_at": "2017-05-10T23:58:00Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9815#discussion_r115870787", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9815", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/115870787"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9815#discussion_r115870787"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9815"}}, "body_html": "<p>There is a lot happening in lessEqualControl to be able to tie the exception to the specific line we want.<br>\nIt might be better to create a simpler graph with a placeholder and have the <code>try{}</code> block around just the session run call. Something like:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> addControlInput() {\n  <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Graph</span> g <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Graph</span>();\n         <span class=\"pl-smi\">Session</span> s <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Session</span>(g);\n         <span class=\"pl-smi\">Tensor</span> yes <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Tensor</span><span class=\"pl-k\">.</span>create(<span class=\"pl-c1\">true</span>);\n         <span class=\"pl-smi\">Tensor</span> no <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Tensor</span><span class=\"pl-k\">.</span>create(<span class=\"pl-c1\">false</span>)) {\n    <span class=\"pl-smi\">Output</span> placeholder <span class=\"pl-k\">=</span> <span class=\"pl-smi\">TestUtil</span><span class=\"pl-k\">.</span>placeholder(g, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>boolean<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">DataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>BOOL</span>);\n    <span class=\"pl-smi\">Output</span> <span class=\"pl-k\">assert</span> <span class=\"pl-k\">=</span> g<span class=\"pl-k\">.</span>opBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Assert<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>assert<span class=\"pl-pds\">\"</span></span>)\n       .addInput(placeholder)\n       .addInputList(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Output</span>[]{})\n       .build();\n      <span class=\"pl-smi\">Output</span> noop <span class=\"pl-k\">=</span> g<span class=\"pl-k\">.</span>opBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NoOp<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>noop<span class=\"pl-pds\">\"</span></span>)\n          .addControlInput(assert)\n          .build();\n\n     <span class=\"pl-c\"><span class=\"pl-c\">//</span> No problems when the assert succeeds</span>\n     s<span class=\"pl-k\">.</span>runner()<span class=\"pl-k\">.</span>feed(placeholder, yes)<span class=\"pl-k\">.</span>addTarget(noop)<span class=\"pl-k\">.</span>run();\n\n     <span class=\"pl-c\"><span class=\"pl-c\">//</span> Exception thrown by the execution of the Assert node</span>\n     <span class=\"pl-k\">try</span> {\n        s<span class=\"pl-k\">.</span>runner()<span class=\"pl-k\">.</span>feed(placeholder, no)<span class=\"pl-k\">.</span>addTarget(noop)<span class=\"pl-k\">.</span>run();\n        fail(<span class=\"pl-c1\">...</span>);\n      } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IllegalArgumentException</span> e) {\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> expected</span>\n      }\n  }\n}</pre></div>", "body_text": "There is a lot happening in lessEqualControl to be able to tie the exception to the specific line we want.\nIt might be better to create a simpler graph with a placeholder and have the try{} block around just the session run call. Something like:\npublic void addControlInput() {\n  try (Graph g = new Graph();\n         Session s = new Session(g);\n         Tensor yes = Tensor.create(true);\n         Tensor no = Tensor.create(false)) {\n    Output placeholder = TestUtil.placeholder(g, \"boolean\", DataType.BOOL);\n    Output assert = g.opBuilder(\"Assert\", \"assert\")\n       .addInput(placeholder)\n       .addInputList(new Output[]{})\n       .build();\n      Output noop = g.opBuilder(\"NoOp\", \"noop\")\n          .addControlInput(assert)\n          .build();\n\n     // No problems when the assert succeeds\n     s.runner().feed(placeholder, yes).addTarget(noop).run();\n\n     // Exception thrown by the execution of the Assert node\n     try {\n        s.runner().feed(placeholder, no).addTarget(noop).run();\n        fail(...);\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n  }\n}"}