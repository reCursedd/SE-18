{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/313799895", "html_url": "https://github.com/tensorflow/tensorflow/pull/11251#issuecomment-313799895", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11251", "id": 313799895, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzc5OTg5NQ==", "user": {"login": "kbsriram", "id": 1495065, "node_id": "MDQ6VXNlcjE0OTUwNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1495065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbsriram", "html_url": "https://github.com/kbsriram", "followers_url": "https://api.github.com/users/kbsriram/followers", "following_url": "https://api.github.com/users/kbsriram/following{/other_user}", "gists_url": "https://api.github.com/users/kbsriram/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbsriram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbsriram/subscriptions", "organizations_url": "https://api.github.com/users/kbsriram/orgs", "repos_url": "https://api.github.com/users/kbsriram/repos", "events_url": "https://api.github.com/users/kbsriram/events{/privacy}", "received_events_url": "https://api.github.com/users/kbsriram/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-07T21:41:31Z", "updated_at": "2017-07-07T21:41:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Regarding typed helper constructors - if you decide to support them (either as part of this CL or as a breakout change) then in addition to the classes above, at least the Constant and Variable op-wrappers would want to include such blocks to avoid the caller needing to pass in a Tensor that must then be closed. With these we'd have at least four \"special-case\" classes, so it seems useful to automate their generation as part of the standard build.</p>\n<p>As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10109534\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/karllessard\">@karllessard</a> notes, we'll be using some form of templating in both C++ and Java. An option might be to re-purpose one or the other to generate these - neither would eliminate the extra build-step of course, but it might minimize the number of template systems in use and avoid a dependency on perl.</p>", "body_text": "Regarding typed helper constructors - if you decide to support them (either as part of this CL or as a breakout change) then in addition to the classes above, at least the Constant and Variable op-wrappers would want to include such blocks to avoid the caller needing to pass in a Tensor that must then be closed. With these we'd have at least four \"special-case\" classes, so it seems useful to automate their generation as part of the standard build.\nAs @karllessard notes, we'll be using some form of templating in both C++ and Java. An option might be to re-purpose one or the other to generate these - neither would eliminate the extra build-step of course, but it might minimize the number of template systems in use and avoid a dependency on perl.", "body": "Regarding typed helper constructors - if you decide to support them (either as part of this CL or as a breakout change) then in addition to the classes above, at least the Constant and Variable op-wrappers would want to include such blocks to avoid the caller needing to pass in a Tensor that must then be closed. With these we'd have at least four \"special-case\" classes, so it seems useful to automate their generation as part of the standard build.\r\n\r\nAs @karllessard notes, we'll be using some form of templating in both C++ and Java. An option might be to re-purpose one or the other to generate these - neither would eliminate the extra build-step of course, but it might minimize the number of template systems in use and avoid a dependency on perl."}