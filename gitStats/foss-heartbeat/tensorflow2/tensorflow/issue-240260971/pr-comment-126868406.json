{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/126868406", "pull_request_review_id": 49393447, "id": 126868406, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjg2ODQwNg==", "diff_hunk": "@@ -0,0 +1,138 @@\n+#!/usr/bin/perl\n+\n+use strict;\n+my $count;\n+\n+my $option = '-t', my $template;\n+\n+sub usage {\n+    print \"Usage: tftypes [-ctdT] <type desc file> <tmpl file>\\n\\n\"\n+         .\"This script generates parts of various .java files that depend on which\"\n+         .\"TensorFlow types are supported by the Java API and how much. For each\"\n+         .\"such .java file, there is a .tmpl file in the same source directory in\"\n+         .\"which the strings \\@TYPEINFO\\@ and \\@IMPORTS\\@ are replaced with\"\n+         .\"appropriate Java code. Output code is sent to standard output.\\n\\n\";\n+\n+    print \"Modulo putting in the correct directory names, it can be invoked as follows:\\n\";\n+    print \"tftypes -c tftypes.csv Tensors.java.tmpl > Tensors.java\\n\";\n+    print \"tftypes -d tftypes.csv DataType.java.tmpl > DataType.java\\n\";\n+    print \"tftypes -t tftypes.csv <dir>                                   [outputs files to dir]\\n\";\n+}\n+\n+if ($ARGV[0] =~ m/^-/) {\n+    $option = shift;\n+}\n+my $typedesc = shift;\n+my $tmpl = shift;\n+\n+my $dirname;\n+\n+if ($option eq '-t') {\n+    $dirname = $tmpl;\n+}\n+\n+open (TMPL, \"<$tmpl\") || die \"Cannot open $tmpl for reading\\n\";\n+\n+my $text = do { local $/; <TMPL> };\n+\n+my %jtypecount;\n+\n+my $typeinfo, my $imports;\n+\n+open (TYPEDESC, $typedesc);\n+\n+my @info = ([]);\n+\n+while (<TYPEDESC>) {\n+    chomp;\n+    my $line = $_;\n+    if ($line =~ m/^TF type/) { next }\n+    $line =~ s/\\r$//;\n+    (my $name, my $index, my $jtype, my $jbox, my $creat, my $default, my $desc) =\n+        split /,/, $line, 7;\n+    $desc =~ s/^ *//g;\n+    $desc =~ s/ *$//g;\n+    $jtypecount{$jtype}++;\n+    if ($jtypecount{$jtype} > 1) {\n+# currently allowing Java types to stand for more than one TF type, but\n+# may want to revisit this.\n+#       print STDERR \"Ambiguous Java type for $name : $jtype\\n\";\n+#       exit 1\n+    }\n+\n+    push @info, [$name, $index, $jtype, $jbox, $creat, $default, $desc];\n+}\n+\n+my $first = 1;\n+\n+for (my $i = 1; $i <= $#info; $first = 0, $i++) {\n+    (my $name, my $index, my $jtype, my $jbox, my $creat, my $default, my $desc) =\n+        @{$info[$i]};\n+    my $tfname = \"TF\".$name;\n+    my $ucname = uc $name;\n+\n+    if ($option eq '-t') {\n+        if ($jtype eq '') { next }\n+        # Generate class declarations\n+        # print STDERR \"Creating $dirname/$tfname.java\\n\";\n+        open (CLASSFILE, \">$dirname/$tfname.java\") || die \"Can't open $tfname.java\";\n+        print CLASSFILE \"// GENERATED FILE. Edit tftypes.pl instead.\\n\";\n+        print CLASSFILE \"package org.tensorflow.types;\\n\\n\";\n+        print CLASSFILE  \"/** The class $tfname represents $desc. */\\n\"\n+                        .\"public class $tfname implements Types.TFType {\\n\"\n+                        .\"  /** Represents the type $tfname at run time. */\\n\"\n+                        .\"  public static final Class<$tfname> T = $tfname.class;\\n\"\n+                        .\"  static {\\n\"\n+                        .\"    Types.typeCodes.put($tfname.T, $index);\\n\"\n+                        .\"  }\\n\";\n+        if ($default ne '') {\n+            print CLASSFILE\n+                         \"  static {\\n\"\n+                        .\"    Types.scalars.put($tfname.T, $default);\\n\"\n+                        .\"  }\\n\";\n+        }\n+        print CLASSFILE  \"}\\n\";\n+        close(CLASSFILE);\n+    } elsif ($option eq '-d') {\n+      # Generate datatype enums for DataType.java\n+      # TODO: implement\n+      if ($jtype ne '') {\n+        if (!$first) {\n+            $typeinfo .= \",\\n\\n\";\n+        }\n+        if ($desc ne '') {\n+            $typeinfo .= \"  /** $desc. */\\n\";\n+        }\n+        $typeinfo .=   \"  $ucname($index)\";\n+      }\n+    } elsif ($option eq '-c') { # creators\n+      # Generate creator declarations for Tensors.java\n+      if ($jtype ne '' && $creat eq 'y') {\n+        for (my $brackets = ''; length $brackets <= 12; $brackets .= '[]') {\n+            $typeinfo .=\n+                \"  public static Tensor<$tfname> create($jtype$brackets data) {\\n\"\n+               .\"    return Tensor.create(data, $tfname.T);\\n\"\n+               .\"  }\\n\";\n+        }\n+      }\n+      if ($text =~ m/\\b$tfname\\b/ || $creat eq 'y') {\n+            $imports .= \"import org.tensorflow.types.$tfname;\\n\";\n+      }\n+      #if ($text =~ m/\\b$ucname\\b/ || $creat eq 'y') {\n+      #  $imports .= \"import static org.tensorflow.Types.$ucname;\\n\";\n+      #}\n+    } elsif ($option eq '-T') { # Tensor.java", "path": "tensorflow/java/src/gen/perl/tftypes.pl", "position": null, "original_position": 124, "commit_id": "1020ee116d2bf99bc90e95730a8431fb001fbb40", "original_commit_id": "ab4ddab453cf220994a5da055beefcaa423993a3", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I believe we agreed to not generate `Tensor.java`, right? Remove?", "created_at": "2017-07-12T05:46:59Z", "updated_at": "2017-07-12T23:42:42Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11251#discussion_r126868406", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11251", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/126868406"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11251#discussion_r126868406"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11251"}}, "body_html": "<p>I believe we agreed to not generate <code>Tensor.java</code>, right? Remove?</p>", "body_text": "I believe we agreed to not generate Tensor.java, right? Remove?"}