{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23837", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23837/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23837/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23837/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23837", "id": 381968610, "node_id": "MDU6SXNzdWUzODE5Njg2MTA=", "number": 23837, "title": "The accuracy of the CNN I made is 0.1. It seems to be a matter of function used", "user": {"login": "pervin0527", "id": 43873288, "node_id": "MDQ6VXNlcjQzODczMjg4", "avatar_url": "https://avatars1.githubusercontent.com/u/43873288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pervin0527", "html_url": "https://github.com/pervin0527", "followers_url": "https://api.github.com/users/pervin0527/followers", "following_url": "https://api.github.com/users/pervin0527/following{/other_user}", "gists_url": "https://api.github.com/users/pervin0527/gists{/gist_id}", "starred_url": "https://api.github.com/users/pervin0527/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pervin0527/subscriptions", "organizations_url": "https://api.github.com/users/pervin0527/orgs", "repos_url": "https://api.github.com/users/pervin0527/repos", "events_url": "https://api.github.com/users/pervin0527/events{/privacy}", "received_events_url": "https://api.github.com/users/pervin0527/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-18T15:05:14Z", "updated_at": "2018-11-18T15:05:14Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>It's a cnn I made, and no matter how much I learn or test, the accuracy is 0.1. My guess is, I've probably correct 1/10, so the accuracy is 0.1. What do you think? Where do i have to modify it to get like this \"100% accuracy\"</p>\n<p>i think The cause seems to be this part.</p>\n<p>onehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)<br>\nloss = tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)<br>\n(Note, training accuracy increases with execution.)</p>\n<p>def cnn_model_fn(features, labels, mode):<br>\n\"\"\"Model function for CNN.\"\"\"</p>\n<h1>Input Layer</h1>\n<p>input_layer = tf.reshape(features[\"image\"], [-1, 28, 28, 3])</p>\n<h1>Convolutional Layer <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115886302\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1\">#1</a></h1>\n<p>conv1 = tf.layers.conv2d(<br>\ninputs=input_layer,<br>\nfilters=32,<br>\nkernel_size=[5, 5],<br>\npadding=\"SAME\",<br>\nactivation=tf.nn.relu)</p>\n<h1>Pooling Layer <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115886302\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1\">#1</a></h1>\n<p>pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)</p>\n<h1>Convolutional Layer <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115894138\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/2\">#2</a> and Pooling Layer <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115894138\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/2\">#2</a></h1>\n<p>conv2 = tf.layers.conv2d(<br>\ninputs=pool1,<br>\nfilters=64,<br>\nkernel_size=[5, 5],<br>\npadding=\"SAME\",<br>\nactivation=tf.nn.relu)<br>\npool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)</p>\n<h1>Dense Layer</h1>\n<p>pool2_flat = tf.reshape(pool2, [-1, 7 * 7 * 64])<br>\ndense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)<br>\ndropout = tf.layers.dropout(inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)</p>\n<h1>Logits Layer</h1>\n<p>logits = tf.layers.dense(inputs=dropout, units=10)</p>\n<p>predictions = {<br>\n# Generate predictions (for PREDICT and EVAL mode)<br>\n\"classes\": tf.argmax(input=logits, axis=1),<br>\n# Add <code>softmax_tensor</code> to the graph. It is used for PREDICT and by the<br>\n# <code>logging_hook</code>.<br>\n\"probabilities\": tf.nn.softmax(logits, name=\"softmax_tensor\")<br>\n}</p>\n<p>if mode == tf.estimator.ModeKeys.PREDICT:<br>\nreturn tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)</p>\n<p>onehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)<br>\nloss = tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)</p>\n<h1>Configure the Training Op (for TRAIN mode)</h1>\n<p>if mode == tf.estimator.ModeKeys.TRAIN:<br>\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)<br>\ntrain_op = optimizer.minimize(<br>\nloss=loss,<br>\nglobal_step=tf.train.get_global_step())<br>\nreturn tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)</p>\n<h1>Add evaluation metrics (for EVAL mode)</h1>\n<p>eval_metric_ops = {<br>\n\"accuracy\": tf.metrics.accuracy(<br>\nlabels=labels, predictions=predictions[\"classes\"])}<br>\nreturn tf.estimator.EstimatorSpec(<br>\nmode=mode, loss=loss, eval_metric_ops=eval_metric_ops)</p>", "body_text": "It's a cnn I made, and no matter how much I learn or test, the accuracy is 0.1. My guess is, I've probably correct 1/10, so the accuracy is 0.1. What do you think? Where do i have to modify it to get like this \"100% accuracy\"\ni think The cause seems to be this part.\nonehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)\nloss = tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)\n(Note, training accuracy increases with execution.)\ndef cnn_model_fn(features, labels, mode):\n\"\"\"Model function for CNN.\"\"\"\nInput Layer\ninput_layer = tf.reshape(features[\"image\"], [-1, 28, 28, 3])\nConvolutional Layer #1\nconv1 = tf.layers.conv2d(\ninputs=input_layer,\nfilters=32,\nkernel_size=[5, 5],\npadding=\"SAME\",\nactivation=tf.nn.relu)\nPooling Layer #1\npool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)\nConvolutional Layer #2 and Pooling Layer #2\nconv2 = tf.layers.conv2d(\ninputs=pool1,\nfilters=64,\nkernel_size=[5, 5],\npadding=\"SAME\",\nactivation=tf.nn.relu)\npool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)\nDense Layer\npool2_flat = tf.reshape(pool2, [-1, 7 * 7 * 64])\ndense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)\ndropout = tf.layers.dropout(inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)\nLogits Layer\nlogits = tf.layers.dense(inputs=dropout, units=10)\npredictions = {\n# Generate predictions (for PREDICT and EVAL mode)\n\"classes\": tf.argmax(input=logits, axis=1),\n# Add softmax_tensor to the graph. It is used for PREDICT and by the\n# logging_hook.\n\"probabilities\": tf.nn.softmax(logits, name=\"softmax_tensor\")\n}\nif mode == tf.estimator.ModeKeys.PREDICT:\nreturn tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)\nonehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)\nloss = tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)\nConfigure the Training Op (for TRAIN mode)\nif mode == tf.estimator.ModeKeys.TRAIN:\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)\ntrain_op = optimizer.minimize(\nloss=loss,\nglobal_step=tf.train.get_global_step())\nreturn tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)\nAdd evaluation metrics (for EVAL mode)\neval_metric_ops = {\n\"accuracy\": tf.metrics.accuracy(\nlabels=labels, predictions=predictions[\"classes\"])}\nreturn tf.estimator.EstimatorSpec(\nmode=mode, loss=loss, eval_metric_ops=eval_metric_ops)", "body": "It's a cnn I made, and no matter how much I learn or test, the accuracy is 0.1. My guess is, I've probably correct 1/10, so the accuracy is 0.1. What do you think? Where do i have to modify it to get like this \"100% accuracy\"\r\n\r\ni think The cause seems to be this part.\r\n\r\nonehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)\r\nloss = tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)\r\n(Note, training accuracy increases with execution.)\r\n\r\ndef cnn_model_fn(features, labels, mode):\r\n\"\"\"Model function for CNN.\"\"\"\r\n# Input Layer\r\ninput_layer = tf.reshape(features[\"image\"], [-1, 28, 28, 3])\r\n\r\n# Convolutional Layer #1\r\nconv1 = tf.layers.conv2d(\r\n    inputs=input_layer,\r\n    filters=32,\r\n    kernel_size=[5, 5],\r\n    padding=\"SAME\",\r\n    activation=tf.nn.relu)\r\n\r\n# Pooling Layer #1\r\npool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)\r\n\r\n# Convolutional Layer #2 and Pooling Layer #2\r\nconv2 = tf.layers.conv2d(\r\n    inputs=pool1,\r\n    filters=64,\r\n    kernel_size=[5, 5],\r\n    padding=\"SAME\",\r\n    activation=tf.nn.relu)\r\npool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)\r\n\r\n# Dense Layer\r\npool2_flat = tf.reshape(pool2, [-1, 7 * 7 * 64])\r\ndense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)\r\ndropout = tf.layers.dropout(inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)\r\n\r\n# Logits Layer\r\nlogits = tf.layers.dense(inputs=dropout, units=10)\r\n\r\npredictions = {\r\n    # Generate predictions (for PREDICT and EVAL mode)\r\n    \"classes\": tf.argmax(input=logits, axis=1),\r\n    # Add `softmax_tensor` to the graph. It is used for PREDICT and by the\r\n    # `logging_hook`.\r\n    \"probabilities\": tf.nn.softmax(logits, name=\"softmax_tensor\")\r\n}\r\n\r\nif mode == tf.estimator.ModeKeys.PREDICT:\r\n    return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)\r\n\r\nonehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)\r\nloss = tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)\r\n\r\n# Configure the Training Op (for TRAIN mode)\r\nif mode == tf.estimator.ModeKeys.TRAIN:\r\n    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)\r\n    train_op = optimizer.minimize(\r\n        loss=loss,\r\n        global_step=tf.train.get_global_step())\r\n    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)\r\n\r\n# Add evaluation metrics (for EVAL mode)\r\neval_metric_ops = {\r\n    \"accuracy\": tf.metrics.accuracy(\r\n        labels=labels, predictions=predictions[\"classes\"])}\r\nreturn tf.estimator.EstimatorSpec(\r\n    mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)"}