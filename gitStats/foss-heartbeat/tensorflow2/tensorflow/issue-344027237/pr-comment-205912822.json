{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/205912822", "pull_request_review_id": 141285141, "id": 205912822, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkxMjgyMg==", "diff_hunk": "@@ -74,7 +74,41 @@ public int numDimensions() {\n    * @return The size of the requested dimension or -1 if it is unknown.\n    */\n   public long size(int i) {\n-    return shape[i];\n+    return shape == null ? -1 : shape[i];\n+  }\n+\n+  /**\n+   * The total number of elements found in a tensor of this shape.\n+   * \n+   * <p>If the size of some dimensions is unknown, the total number of elements cannot be calculated and -1 is returned.\n+   * \n+   * @return the number of elements or -1 if size of some dimension are unknown\n+   */\n+  public int numElements() {\n+    if (shape == null) {\n+       return -1;\n+    }\n+    int total = 1;\n+    for (int i = 0; i < shape.length; ++i) {\n+      // TODO (karllessard): There might be a lossy conversion here from 'long' sizes to 'int' total, but this issue\n+      // seems ubiquitous in the current Java client implementation. It should be adressed all at once.\n+      int size = (int) size(i);\n+      if (size < 0) {\n+        return -1;\n+      }\n+      total *= size;\n+    }\n+    return total;\n+  }\n+\n+  /**\n+   * Returns the shape as an array.\n+   * \n+   * <p>Each element represent the size of the dimension at the given index. For example,\n+   * {@code shape.asArray()[2]} is equal to the size of the third dimension of this shape.\n+   */\n+  public long[] asArray() {", "path": "tensorflow/java/src/main/java/org/tensorflow/Shape.java", "position": null, "original_position": 38, "commit_id": "e3bc2b0e764cacafb1156bc84299790fd9e60b89", "original_commit_id": "e5231a18a70064edc37aa12c7c7bbe9d0412cbd0", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "That one bugged me too, but I had to because the Tensor interface only accepts shape as arrays and converting a `Shape` to an array manually is not a pretty option (thinking that users might have to do the same).\r\n\r\nIMHO, I right way to address this is to modify the `Tensor` interface as well to accept their shapes as `Shape` objects instead. Actually, I did it and then revert it to keep my PR small :)\r\n\r\nSince we do not guarantee API stability for the Java client yet, can we just change the signature of those methods in `Tensor` or should we add a new variant for each of them?", "created_at": "2018-07-27T22:20:35Z", "updated_at": "2018-08-03T19:04:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r205912822", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/205912822"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r205912822"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092"}}, "body_html": "<p>That one bugged me too, but I had to because the Tensor interface only accepts shape as arrays and converting a <code>Shape</code> to an array manually is not a pretty option (thinking that users might have to do the same).</p>\n<p>IMHO, I right way to address this is to modify the <code>Tensor</code> interface as well to accept their shapes as <code>Shape</code> objects instead. Actually, I did it and then revert it to keep my PR small :)</p>\n<p>Since we do not guarantee API stability for the Java client yet, can we just change the signature of those methods in <code>Tensor</code> or should we add a new variant for each of them?</p>", "body_text": "That one bugged me too, but I had to because the Tensor interface only accepts shape as arrays and converting a Shape to an array manually is not a pretty option (thinking that users might have to do the same).\nIMHO, I right way to address this is to modify the Tensor interface as well to accept their shapes as Shape objects instead. Actually, I did it and then revert it to keep my PR small :)\nSince we do not guarantee API stability for the Java client yet, can we just change the signature of those methods in Tensor or should we add a new variant for each of them?", "in_reply_to_id": 205208547}