{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/207290082", "pull_request_review_id": 142872680, "id": 207290082, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI5MDA4Mg==", "diff_hunk": "@@ -0,0 +1,54 @@\n+package org.tensorflow.op.core;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.tensorflow.DataType;\n+import org.tensorflow.Operand;\n+import org.tensorflow.Output;\n+import org.tensorflow.op.Op;\n+import org.tensorflow.op.Scope;\n+import org.tensorflow.op.annotation.Operator;\n+\n+/**\n+ * An operator creating a constant initialized with zeros of the shape given by `dims`.\n+ * \n+ * <p>For example, the following expression\n+ * <pre>{@code ops.zeros(ops.constant(new long[]{2, 2}), Float.class)</pre>\n+ * is the equivalent of\n+ * <pre>{@code ops.fill(ops.constant(new long[]{2, 2}), ops.constant(0.0f))</pre>\n+ *\n+ * @param <T> constant type\n+ */\n+@Operator\n+public class Zeros<T> implements Op, Operand<T> {\n+\n+  /**\n+   * Creates a zeroed tensor given its type and shape.\n+   *\n+   * @param scope is a scope used to add the underlying operation\n+   * @param dims a 1-D operand that represents the shape of the output tensor\n+   * @param type the output tensor datatype\n+   * @return a constant tensor initialized with zeros\n+   * @throws IllegalArgumentException if the tensor type or shape cannot be initialized with zeros.\n+   */\n+  public static <T, U extends Number> Zeros<T> create(Scope scope, Operand<U> dims, Class<T> type) {", "path": "tensorflow/java/src/main/java/org/tensorflow/op/core/Zeros.java", "position": 48, "original_position": 34, "commit_id": "e3bc2b0e764cacafb1156bc84299790fd9e60b89", "original_commit_id": "dde0bf5051591b013b9eee131cd18af9a5c50ebf", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "You can't, because of type-erasure, you'll end up with two methods `create` with the same signature.\r\n\r\nThat is why when Andrew added generic support, we discussed about using TF types instead of Java ones so we can gain flexibility on the granularity of the operand types (e.g. `TFInt` and `TFLong` would both extends from `TFNonDecimalNumber` so we could accept only `Operand<T extends TFNonDecimalNumber`, something like that).\r\n\r\nI can't use a different method name neither otherwise it won't be part of the `Ops` aggregator.", "created_at": "2018-08-02T16:23:11Z", "updated_at": "2018-08-03T19:04:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r207290082", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/207290082"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r207290082"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092"}}, "body_html": "<p>You can't, because of type-erasure, you'll end up with two methods <code>create</code> with the same signature.</p>\n<p>That is why when Andrew added generic support, we discussed about using TF types instead of Java ones so we can gain flexibility on the granularity of the operand types (e.g. <code>TFInt</code> and <code>TFLong</code> would both extends from <code>TFNonDecimalNumber</code> so we could accept only <code>Operand&lt;T extends TFNonDecimalNumber</code>, something like that).</p>\n<p>I can't use a different method name neither otherwise it won't be part of the <code>Ops</code> aggregator.</p>", "body_text": "You can't, because of type-erasure, you'll end up with two methods create with the same signature.\nThat is why when Andrew added generic support, we discussed about using TF types instead of Java ones so we can gain flexibility on the granularity of the operand types (e.g. TFInt and TFLong would both extends from TFNonDecimalNumber so we could accept only Operand<T extends TFNonDecimalNumber, something like that).\nI can't use a different method name neither otherwise it won't be part of the Ops aggregator.", "in_reply_to_id": 207236165}