{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/205988962", "pull_request_review_id": 141362033, "id": 205988962, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk4ODk2Mg==", "diff_hunk": "@@ -64,10 +48,24 @@\n    * @param scope is a scope used to add the underlying operation.\n    * @param shape the tensor shape.\n    * @param data a buffer containing the tensor data.\n+   * @return an integer constant\n    * @throws IllegalArgumentException If the tensor shape is not compatible with the buffer\n    */\n-  public static Constant<Integer> create(Scope scope, long[] shape, IntBuffer data) {\n-    try (Tensor<Integer> value = Tensor.create(shape, data)) {\n+  public static Constant<Integer> create(Scope scope, Shape shape, IntBuffer data) {", "path": "tensorflow/java/src/main/java/org/tensorflow/op/core/Constant.java", "position": null, "original_position": 52, "commit_id": "e3bc2b0e764cacafb1156bc84299790fd9e60b89", "original_commit_id": "e5231a18a70064edc37aa12c7c7bbe9d0412cbd0", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Didn't quite follow the comment about `Shape.byteSize()`, but I'm guessing you mean utility methods like `numElements()`?\r\n\r\nAuto generated operators accept `Shape` as arguments because the operations work with partially known shapes. `Constant` objects require a fully known shape, no?\r\n\r\nI appreciate the interest in standardizing, but I'm not sold on it here just yet. Perhaps some sample code that we'd expect users to write where providing a `Shape` object would be better would make this clearer? Naively, I'm thinking that the type mismatch will make the developer think about the difference, vs. providing a `Shape` object and then observing a runtime error if `Shape` isn't fully specified.", "created_at": "2018-07-29T22:09:07Z", "updated_at": "2018-08-03T19:04:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r205988962", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/205988962"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r205988962"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092"}}, "body_html": "<p>Didn't quite follow the comment about <code>Shape.byteSize()</code>, but I'm guessing you mean utility methods like <code>numElements()</code>?</p>\n<p>Auto generated operators accept <code>Shape</code> as arguments because the operations work with partially known shapes. <code>Constant</code> objects require a fully known shape, no?</p>\n<p>I appreciate the interest in standardizing, but I'm not sold on it here just yet. Perhaps some sample code that we'd expect users to write where providing a <code>Shape</code> object would be better would make this clearer? Naively, I'm thinking that the type mismatch will make the developer think about the difference, vs. providing a <code>Shape</code> object and then observing a runtime error if <code>Shape</code> isn't fully specified.</p>", "body_text": "Didn't quite follow the comment about Shape.byteSize(), but I'm guessing you mean utility methods like numElements()?\nAuto generated operators accept Shape as arguments because the operations work with partially known shapes. Constant objects require a fully known shape, no?\nI appreciate the interest in standardizing, but I'm not sold on it here just yet. Perhaps some sample code that we'd expect users to write where providing a Shape object would be better would make this clearer? Naively, I'm thinking that the type mismatch will make the developer think about the difference, vs. providing a Shape object and then observing a runtime error if Shape isn't fully specified.", "in_reply_to_id": 205212326}