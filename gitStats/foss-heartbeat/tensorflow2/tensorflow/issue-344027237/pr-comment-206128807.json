{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/206128807", "pull_request_review_id": 141527697, "id": 206128807, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyODgwNw==", "diff_hunk": "@@ -64,10 +48,24 @@\n    * @param scope is a scope used to add the underlying operation.\n    * @param shape the tensor shape.\n    * @param data a buffer containing the tensor data.\n+   * @return an integer constant\n    * @throws IllegalArgumentException If the tensor shape is not compatible with the buffer\n    */\n-  public static Constant<Integer> create(Scope scope, long[] shape, IntBuffer data) {\n-    try (Tensor<Integer> value = Tensor.create(shape, data)) {\n+  public static Constant<Integer> create(Scope scope, Shape shape, IntBuffer data) {", "path": "tensorflow/java/src/main/java/org/tensorflow/op/core/Constant.java", "position": null, "original_position": 52, "commit_id": "e3bc2b0e764cacafb1156bc84299790fd9e60b89", "original_commit_id": "e5231a18a70064edc37aa12c7c7bbe9d0412cbd0", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "Yes, I meant `numElements()` here, sorry for the confusion. \r\n\r\nWhat I tried to explain is that manipulating primitive arrays as we do here can be restrictive when we want to extend the functionalities of the API. It could also lead to confusion that there is two way to represent the same thing and conversion from one to another can be required (I'll try to provide you an example of that).\r\n\r\nHaving a `Shape` object make sense to me as it is ubiquitous in TF domain. Just throwing ideas here : would it make sense to have a `FixedShape` class that extends from `Shape` to enforce that a shape must be known for some operations?", "created_at": "2018-07-30T13:18:26Z", "updated_at": "2018-08-03T19:04:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r206128807", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/206128807"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r206128807"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092"}}, "body_html": "<p>Yes, I meant <code>numElements()</code> here, sorry for the confusion.</p>\n<p>What I tried to explain is that manipulating primitive arrays as we do here can be restrictive when we want to extend the functionalities of the API. It could also lead to confusion that there is two way to represent the same thing and conversion from one to another can be required (I'll try to provide you an example of that).</p>\n<p>Having a <code>Shape</code> object make sense to me as it is ubiquitous in TF domain. Just throwing ideas here : would it make sense to have a <code>FixedShape</code> class that extends from <code>Shape</code> to enforce that a shape must be known for some operations?</p>", "body_text": "Yes, I meant numElements() here, sorry for the confusion.\nWhat I tried to explain is that manipulating primitive arrays as we do here can be restrictive when we want to extend the functionalities of the API. It could also lead to confusion that there is two way to represent the same thing and conversion from one to another can be required (I'll try to provide you an example of that).\nHaving a Shape object make sense to me as it is ubiquitous in TF domain. Just throwing ideas here : would it make sense to have a FixedShape class that extends from Shape to enforce that a shape must be known for some operations?", "in_reply_to_id": 205212326}