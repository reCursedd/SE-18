{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/206335936", "pull_request_review_id": 141733457, "id": 206335936, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMzNTkzNg==", "diff_hunk": "@@ -64,10 +48,24 @@\n    * @param scope is a scope used to add the underlying operation.\n    * @param shape the tensor shape.\n    * @param data a buffer containing the tensor data.\n+   * @return an integer constant\n    * @throws IllegalArgumentException If the tensor shape is not compatible with the buffer\n    */\n-  public static Constant<Integer> create(Scope scope, long[] shape, IntBuffer data) {\n-    try (Tensor<Integer> value = Tensor.create(shape, data)) {\n+  public static Constant<Integer> create(Scope scope, Shape shape, IntBuffer data) {", "path": "tensorflow/java/src/main/java/org/tensorflow/op/core/Constant.java", "position": null, "original_position": 52, "commit_id": "e3bc2b0e764cacafb1156bc84299790fd9e60b89", "original_commit_id": "e5231a18a70064edc37aa12c7c7bbe9d0412cbd0", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "No, I think it's a good idea to keep enforcing only known shapes for some operations, such as `Tensor` or `Constant` creation. My last proposal was to replace the less-flexible primitive arrays by another concrete type (`FixedShape` or something similar) so we can easily retrieve properties of that shape. \r\n\r\nFor example, to retrieve the number of elements in a tensors, it is easier to do `tensor.shape().numElements()` than doing the computation manually from a `long[]` like the `Tensor` class is doing right now. Of course, we could have those utilities exposed as a static method of some final object, for instance `Shapes.numElements(tensor.shape())`, but I always had a personal preference for more object-oriented programming.\r\n\r\nJust to give a quick example out-of-my-head-right-now (sorry if it's a bad one...) but someone who would like to initialize his NxM tensor of floats to `1.0f` would benefit from this utility as well instead of iterating through shape dimensions and sizes himself.\r\n\r\nAlso, I was not aware at first that a `long[]` shape means that it can only be concrete, maybe having another type would also make that concept more obvious to the user?  ", "created_at": "2018-07-30T21:58:32Z", "updated_at": "2018-08-03T19:04:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r206335936", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/206335936"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r206335936"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092"}}, "body_html": "<p>No, I think it's a good idea to keep enforcing only known shapes for some operations, such as <code>Tensor</code> or <code>Constant</code> creation. My last proposal was to replace the less-flexible primitive arrays by another concrete type (<code>FixedShape</code> or something similar) so we can easily retrieve properties of that shape.</p>\n<p>For example, to retrieve the number of elements in a tensors, it is easier to do <code>tensor.shape().numElements()</code> than doing the computation manually from a <code>long[]</code> like the <code>Tensor</code> class is doing right now. Of course, we could have those utilities exposed as a static method of some final object, for instance <code>Shapes.numElements(tensor.shape())</code>, but I always had a personal preference for more object-oriented programming.</p>\n<p>Just to give a quick example out-of-my-head-right-now (sorry if it's a bad one...) but someone who would like to initialize his NxM tensor of floats to <code>1.0f</code> would benefit from this utility as well instead of iterating through shape dimensions and sizes himself.</p>\n<p>Also, I was not aware at first that a <code>long[]</code> shape means that it can only be concrete, maybe having another type would also make that concept more obvious to the user?</p>", "body_text": "No, I think it's a good idea to keep enforcing only known shapes for some operations, such as Tensor or Constant creation. My last proposal was to replace the less-flexible primitive arrays by another concrete type (FixedShape or something similar) so we can easily retrieve properties of that shape.\nFor example, to retrieve the number of elements in a tensors, it is easier to do tensor.shape().numElements() than doing the computation manually from a long[] like the Tensor class is doing right now. Of course, we could have those utilities exposed as a static method of some final object, for instance Shapes.numElements(tensor.shape()), but I always had a personal preference for more object-oriented programming.\nJust to give a quick example out-of-my-head-right-now (sorry if it's a bad one...) but someone who would like to initialize his NxM tensor of floats to 1.0f would benefit from this utility as well instead of iterating through shape dimensions and sizes himself.\nAlso, I was not aware at first that a long[] shape means that it can only be concrete, maybe having another type would also make that concept more obvious to the user?", "in_reply_to_id": 205212326}