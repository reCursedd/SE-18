{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/206341406", "pull_request_review_id": 141739909, "id": 206341406, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjM0MTQwNg==", "diff_hunk": "@@ -64,10 +48,24 @@\n    * @param scope is a scope used to add the underlying operation.\n    * @param shape the tensor shape.\n    * @param data a buffer containing the tensor data.\n+   * @return an integer constant\n    * @throws IllegalArgumentException If the tensor shape is not compatible with the buffer\n    */\n-  public static Constant<Integer> create(Scope scope, long[] shape, IntBuffer data) {\n-    try (Tensor<Integer> value = Tensor.create(shape, data)) {\n+  public static Constant<Integer> create(Scope scope, Shape shape, IntBuffer data) {", "path": "tensorflow/java/src/main/java/org/tensorflow/op/core/Constant.java", "position": null, "original_position": 52, "commit_id": "e3bc2b0e764cacafb1156bc84299790fd9e60b89", "original_commit_id": "e5231a18a70064edc37aa12c7c7bbe9d0412cbd0", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I see. Adding a separate class and type for something this ... \"primitive\" ... seems a bit much to me. What would the API of this class be - would it provide both a constructor and a getter for the underlying array? I don't think it would be worthwhile to add something like the following, unless there is some more sophisticated functionality you have in mine:\r\n\r\n```java\r\npublic final class FixedShape {\r\n  public FixedShape(long[] shape) { this.shape = shape; }\r\n  public long[] shape() { return this.shape; }\r\n  public long numElements() {\r\n    long ret = 1;\r\n    for (int i = 0; i < this.shape.length; ++i) {\r\n      ret *= this.shape[i];\r\n    }\r\n    return ret;\r\n  }\r\n  private final long[] shape;\r\n}\r\n```\r\n\r\nFor `numElements()`, adding a `Tensor.numElements()` seems fine, if we see that this will be a commonly used/useful method. Or `Shape.numElements(long[])` as you suggested.", "created_at": "2018-07-30T22:22:16Z", "updated_at": "2018-08-03T19:04:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r206341406", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/206341406"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21092#discussion_r206341406"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21092"}}, "body_html": "<p>I see. Adding a separate class and type for something this ... \"primitive\" ... seems a bit much to me. What would the API of this class be - would it provide both a constructor and a getter for the underlying array? I don't think it would be worthwhile to add something like the following, unless there is some more sophisticated functionality you have in mine:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">FixedShape</span> {\n  <span class=\"pl-k\">public</span> <span class=\"pl-en\">FixedShape</span>(<span class=\"pl-k\">long</span>[] <span class=\"pl-v\">shape</span>) { <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>shape <span class=\"pl-k\">=</span> shape; }\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">long</span>[] <span class=\"pl-en\">shape</span>() { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>shape; }\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">long</span> <span class=\"pl-en\">numElements</span>() {\n    <span class=\"pl-k\">long</span> ret <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>;\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>shape<span class=\"pl-k\">.</span>length; <span class=\"pl-k\">++</span>i) {\n      ret <span class=\"pl-k\">*=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>shape[i];\n    }\n    <span class=\"pl-k\">return</span> ret;\n  }\n  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span>[] shape;\n}</pre></div>\n<p>For <code>numElements()</code>, adding a <code>Tensor.numElements()</code> seems fine, if we see that this will be a commonly used/useful method. Or <code>Shape.numElements(long[])</code> as you suggested.</p>", "body_text": "I see. Adding a separate class and type for something this ... \"primitive\" ... seems a bit much to me. What would the API of this class be - would it provide both a constructor and a getter for the underlying array? I don't think it would be worthwhile to add something like the following, unless there is some more sophisticated functionality you have in mine:\npublic final class FixedShape {\n  public FixedShape(long[] shape) { this.shape = shape; }\n  public long[] shape() { return this.shape; }\n  public long numElements() {\n    long ret = 1;\n    for (int i = 0; i < this.shape.length; ++i) {\n      ret *= this.shape[i];\n    }\n    return ret;\n  }\n  private final long[] shape;\n}\nFor numElements(), adding a Tensor.numElements() seems fine, if we see that this will be a commonly used/useful method. Or Shape.numElements(long[]) as you suggested.", "in_reply_to_id": 205212326}