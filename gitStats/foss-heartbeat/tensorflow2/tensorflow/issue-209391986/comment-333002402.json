{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/333002402", "html_url": "https://github.com/tensorflow/tensorflow/issues/7769#issuecomment-333002402", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7769", "id": 333002402, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzAwMjQwMg==", "user": {"login": "gongzhitaao", "id": 704995, "node_id": "MDQ6VXNlcjcwNDk5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/704995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gongzhitaao", "html_url": "https://github.com/gongzhitaao", "followers_url": "https://api.github.com/users/gongzhitaao/followers", "following_url": "https://api.github.com/users/gongzhitaao/following{/other_user}", "gists_url": "https://api.github.com/users/gongzhitaao/gists{/gist_id}", "starred_url": "https://api.github.com/users/gongzhitaao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gongzhitaao/subscriptions", "organizations_url": "https://api.github.com/users/gongzhitaao/orgs", "repos_url": "https://api.github.com/users/gongzhitaao/repos", "events_url": "https://api.github.com/users/gongzhitaao/events{/privacy}", "received_events_url": "https://api.github.com/users/gongzhitaao/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-29T00:56:55Z", "updated_at": "2017-09-29T01:02:10Z", "author_association": "NONE", "body_html": "<p>I came to the same problem.</p>\n<p>Just quickly scanned through the <a href=\"https://github.com/tensorflow/tensorflow/blob/107cc777af7880c140d089e44ad898a6ba929286/tensorflow/python/estimator/estimator.py#L629\">code</a>, and it seems that there are no ways other than <strong>hacking the internal implementation</strong>.</p>\n<p>My 2 cents on this issue is that maybe the <code>Estimator</code> could be more flexible.</p>\n<p>For example, one possible solution on top of my head is that the <code>Estimator.train</code> function may take another optional argument, i.e., the <code>mode</code>, so that in the <code>Estimator.__init__</code>, we could create multiple <code>train_op</code> based on user-defined modes.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">model_fn</span>(<span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">mode</span>, <span class=\"pl-smi\">params</span>):\n  <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train.discriminator<span class=\"pl-pds\">'</span></span>:\n    train_op <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n    loss <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n  <span class=\"pl-k\">elif</span> mode <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train.generator<span class=\"pl-pds\">'</span></span>:\n    train_op <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\n    loss <span class=\"pl-k\">=</span> \n  <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(<span class=\"pl-c1\">...</span>)\n\ngan <span class=\"pl-k\">=</span> tf.estimator.Estimator(<span class=\"pl-v\">model_fn</span><span class=\"pl-k\">=</span>model_fn, <span class=\"pl-c1\">...</span>)\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n  gan.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>input_fn, <span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>train.discriminator<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\n  gan.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>input_fn, <span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>train.generator<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)</pre></div>", "body_text": "I came to the same problem.\nJust quickly scanned through the code, and it seems that there are no ways other than hacking the internal implementation.\nMy 2 cents on this issue is that maybe the Estimator could be more flexible.\nFor example, one possible solution on top of my head is that the Estimator.train function may take another optional argument, i.e., the mode, so that in the Estimator.__init__, we could create multiple train_op based on user-defined modes.\ndef model_fn(features, labels, mode, params):\n  if mode == 'train.discriminator':\n    train_op = ...\n    loss = ...\n  elif mode == 'train.generator':\n    train_op = ...\n    loss = \n  return tf.estimator.EstimatorSpec(...)\n\ngan = tf.estimator.Estimator(model_fn=model_fn, ...)\nfor _ in range(10):\n  gan.train(input_fn=input_fn, mode='train.discriminator', steps=2)\n  gan.train(input_fn=input_fn, mode='train.generator', steps=2)", "body": "I came to the same problem.  \r\n\r\nJust quickly scanned through the [code](https://github.com/tensorflow/tensorflow/blob/107cc777af7880c140d089e44ad898a6ba929286/tensorflow/python/estimator/estimator.py#L629), and it seems that there are no ways other than **hacking the internal implementation**.\r\n\r\nMy 2 cents on this issue is that maybe the `Estimator` could be more flexible.\r\n\r\nFor example, one possible solution on top of my head is that the `Estimator.train` function may take another optional argument, i.e., the `mode`, so that in the `Estimator.__init__`, we could create multiple `train_op` based on user-defined modes. \r\n\r\n```python\r\ndef model_fn(features, labels, mode, params):\r\n  if mode == 'train.discriminator':\r\n    train_op = ...\r\n    loss = ...\r\n  elif mode == 'train.generator':\r\n    train_op = ...\r\n    loss = \r\n  return tf.estimator.EstimatorSpec(...)\r\n\r\ngan = tf.estimator.Estimator(model_fn=model_fn, ...)\r\nfor _ in range(10):\r\n  gan.train(input_fn=input_fn, mode='train.discriminator', steps=2)\r\n  gan.train(input_fn=input_fn, mode='train.generator', steps=2)\r\n```"}