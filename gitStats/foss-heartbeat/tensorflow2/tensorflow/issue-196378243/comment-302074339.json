{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302074339", "html_url": "https://github.com/tensorflow/tensorflow/issues/6396#issuecomment-302074339", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6396", "id": 302074339, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjA3NDMzOQ==", "user": {"login": "sylvain-bougnoux", "id": 6706662, "node_id": "MDQ6VXNlcjY3MDY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6706662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sylvain-bougnoux", "html_url": "https://github.com/sylvain-bougnoux", "followers_url": "https://api.github.com/users/sylvain-bougnoux/followers", "following_url": "https://api.github.com/users/sylvain-bougnoux/following{/other_user}", "gists_url": "https://api.github.com/users/sylvain-bougnoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/sylvain-bougnoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sylvain-bougnoux/subscriptions", "organizations_url": "https://api.github.com/users/sylvain-bougnoux/orgs", "repos_url": "https://api.github.com/users/sylvain-bougnoux/repos", "events_url": "https://api.github.com/users/sylvain-bougnoux/events{/privacy}", "received_events_url": "https://api.github.com/users/sylvain-bougnoux/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-17T12:27:18Z", "updated_at": "2017-05-17T12:27:18Z", "author_association": "NONE", "body_html": "<p>I can compile successively adding manually all the *.obj of some libraries. But it is quite awkward because link is slow, and updating the library requires to check whether a new file is added... Therefore I've tried the /WHOLEARCHIVE trick.</p>\n<p>It works for all the libraries I was linking with (through *.obj) <strong>but not for tf_core_gpu_kernels.lib</strong>; a symbol (TensorCuBlasGemm) keeps missing. This symbol comes from blas_gemm.cc (explicit template instantiation) either from _gru_ops or _lstm_ops libraries. But linking with any of this does not fix the missing symbol. Hence my question: which library should I link against (dumpbin does not tell it)?</p>", "body_text": "I can compile successively adding manually all the *.obj of some libraries. But it is quite awkward because link is slow, and updating the library requires to check whether a new file is added... Therefore I've tried the /WHOLEARCHIVE trick.\nIt works for all the libraries I was linking with (through *.obj) but not for tf_core_gpu_kernels.lib; a symbol (TensorCuBlasGemm) keeps missing. This symbol comes from blas_gemm.cc (explicit template instantiation) either from _gru_ops or _lstm_ops libraries. But linking with any of this does not fix the missing symbol. Hence my question: which library should I link against (dumpbin does not tell it)?", "body": "I can compile successively adding manually all the *.obj of some libraries. But it is quite awkward because link is slow, and updating the library requires to check whether a new file is added... Therefore I've tried the /WHOLEARCHIVE trick. \r\n\r\nIt works for all the libraries I was linking with (through *.obj) **but not for tf_core_gpu_kernels.lib**; a symbol (TensorCuBlasGemm<float>) keeps missing. This symbol comes from blas_gemm.cc (explicit template instantiation) either from _gru_ops or _lstm_ops libraries. But linking with any of this does not fix the missing symbol. Hence my question: which library should I link against (dumpbin does not tell it)?"}