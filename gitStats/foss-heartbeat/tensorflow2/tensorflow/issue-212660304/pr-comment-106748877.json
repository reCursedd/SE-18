{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/106748877", "pull_request_review_id": 27691968, "id": 106748877, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjc0ODg3Nw==", "diff_hunk": "@@ -0,0 +1,254 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+// See docs in ../ops/nn_ops.cc.\n+\n+#ifdef INTEL_MKL\n+\n+#define USE_EIGEN_TENSOR\n+#define EIGEN_USE_THREADS\n+\n+#include \"tensorflow/core/framework/numeric_op.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor_slice.h\"\n+#include \"tensorflow/core/kernels/conv_2d.h\"\n+#include \"tensorflow/core/kernels/conv_grad_ops.h\"\n+#include \"tensorflow/core/kernels/ops_util.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/lib/gtl/array_slice.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+#include \"tensorflow/core/platform/macros.h\"\n+#include \"tensorflow/core/util/padding.h\"\n+#include \"tensorflow/core/util/tensor_format.h\"\n+#include \"tensorflow/core/util/use_cudnn.h\"\n+#include \"tensorflow/core/util/work_sharder.h\"\n+\n+#include \"tensorflow/core/util/mkl_util.h\"\n+#include \"third_party/mkl/include/mkl_dnn.h\"\n+#include \"third_party/mkl/include/mkl_dnn_types.h\"\n+\n+namespace tensorflow {\n+\n+typedef Eigen::ThreadPoolDevice CPUDevice;\n+typedef Eigen::GpuDevice GPUDevice;\n+\n+template <typename Device, class T>\n+class MklConv2DCustomBackpropBiasOp : public OpKernel {\n+ public:\n+  explicit MklConv2DCustomBackpropBiasOp(OpKernelConstruction* context)\n+      : OpKernel(context) {\n+    string data_format;\n+    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n+    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n+                errors::InvalidArgument(\"Invalid data format\"));\n+  }\n+  ~MklConv2DCustomBackpropBiasOp() {}\n+\n+  typedef struct {\n+    int in_dims;\n+    int c_size;\n+    size_t in_sizes[4];\n+    size_t in_strides[4];\n+    size_t out_sizes[4];\n+    size_t out_strides[4];\n+    size_t filter_sizes[4];\n+    size_t filter_strides[4];\n+    int input_offset[2];\n+    size_t conv_stride[2];\n+    MklShape mkl_input_shape;\n+  } MklConvBackBiasOpParams;\n+\n+  void MklCreateInputLayouts(OpKernelContext* context) {\n+    bool input_is_mkl = mkl_params_.mkl_input_shape.IsMklTensor();\n+    CHECK_EQ(dnnLayoutCreate_F32(&mkl_lt_outbackprop_, 1,\n+        mkl_params_.out_sizes, mkl_params_.out_strides), E_SUCCESS);\n+    if (input_is_mkl) {\n+      mkl_lt_input_ = static_cast<dnnLayout_t>\n+          (mkl_params_.mkl_input_shape.GetCurLayout());\n+    } else {\n+      CHECK_EQ(dnnLayoutCreate_F32(&mkl_lt_input_,\n+          mkl_params_.in_dims, mkl_params_.in_sizes,\n+          mkl_params_.in_strides), E_SUCCESS);\n+    }\n+  }\n+  void MklPrepareConvolutionOutputs(OpKernelContext* context,\n+      Tensor* mkl_tmp_outbackprop_buf_, Tensor* bias_backprop) {\n+    dnnLayout_t mkl_prim_internal_outbackprop = nullptr;\n+    CHECK_EQ(dnnLayoutCreateFromPrimitive_F32(\n+        &mkl_prim_internal_outbackprop, mkl_convolution_bwd_bias_,\n+        dnnResourceDiffBias), E_SUCCESS);\n+\n+    if (!dnnLayoutCompare_F32(mkl_lt_outbackprop_,\n+        mkl_prim_internal_outbackprop)) {\n+      CHECK_EQ(dnnConversionCreate_F32(&mkl_convert_outbackprop_,\n+          mkl_prim_internal_outbackprop,\n+          mkl_lt_outbackprop_), E_SUCCESS);\n+      AllocTmpBuffer(context, mkl_tmp_outbackprop_buf_,\n+          mkl_prim_internal_outbackprop,\n+          &outbackprop_buf_);\n+    }\n+\n+    if (mkl_convert_outbackprop_ == nullptr) {\n+      conv_res_[dnnResourceDiffBias] =\n+          static_cast<void*>(const_cast<T*>(bias_backprop->flat<T>().data()));\n+    } else {\n+       conv_res_[dnnResourceDiffBias] = outbackprop_buf_;\n+    }\n+\n+    dnnLayoutDelete_F32(mkl_prim_internal_outbackprop);\n+  }\n+\n+  void MklPrepareConvolutionInputs(OpKernelContext* context,\n+                             Tensor* mkl_tmp_input_buf) {\n+    dnnLayout_t mkl_prim_internal_input = nullptr;\n+    dnnPrimitive_t mkl_convert_input = nullptr;\n+    void *input_buf = nullptr;\n+\n+    CHECK_EQ(dnnLayoutCreateFromPrimitive_F32(&mkl_prim_internal_input,\n+        mkl_convolution_bwd_bias_, dnnResourceDiffDst), E_SUCCESS);\n+\n+\n+    if (!dnnLayoutCompare_F32(mkl_lt_input_, mkl_prim_internal_input)) {\n+      CHECK_EQ(dnnConversionCreate_F32(&mkl_convert_input, mkl_lt_input_,\n+                                  mkl_prim_internal_input), E_SUCCESS);\n+      AllocTmpBuffer(context, mkl_tmp_input_buf,\n+          mkl_prim_internal_input, &input_buf);\n+    }\n+\n+    const Tensor& input = MklGetInput(context, 0);\n+    // performs conversions\n+    if (mkl_convert_input == nullptr) {\n+      conv_res_[dnnResourceDiffDst] =\n+          static_cast<void*>(const_cast<T*>(input.flat<T>().data()));\n+    } else {\n+      CHECK_EQ(dnnConversionExecute_F32(\n+          mkl_convert_input,\n+          static_cast<void*>(const_cast<T*>(input.flat<T>().data())),\n+          input_buf), E_SUCCESS);\n+\n+      conv_res_[dnnResourceDiffDst] = input_buf;\n+      dnnDelete_F32(mkl_convert_input);\n+    }\n+    dnnLayoutDelete_F32(mkl_prim_internal_input);\n+  }\n+\n+  void MklCleanup() {\n+    bool input_is_mkl = mkl_params_.mkl_input_shape.IsMklTensor();\n+    if (!input_is_mkl) dnnLayoutDelete_F32(mkl_lt_input_);\n+    dnnLayoutDelete_F32(mkl_lt_outbackprop_);\n+\n+    if (mkl_convert_outbackprop_) dnnDelete_F32(mkl_convert_outbackprop_);\n+    dnnDelete_F32(mkl_convolution_bwd_bias_);\n+  }\n+\n+  void Compute(OpKernelContext* context) override {\n+    const Tensor& input = MklGetInput(context, 0);\n+    GetMklShape(context, 0, &mkl_params_.mkl_input_shape);\n+    bool input_is_mkl = mkl_params_.mkl_input_shape.IsMklTensor();\n+\n+    if (input_is_mkl) {\n+      OP_REQUIRES(context, mkl_params_.mkl_input_shape.GetDimension() == 4,\n+     errors::InvalidArgument(\"Input tensor must be 4-dimensional\"));", "path": "tensorflow/core/kernels/mkl_conv_grad_bias_ops.cc", "position": null, "original_position": 166, "commit_id": "3c2192fc868ddc99a3f39fec14a497c156499b88", "original_commit_id": "d7c6d240ece8313bda0a1b3bf50925aafe6470b8", "user": {"login": "andydavis1", "id": 15696327, "node_id": "MDQ6VXNlcjE1Njk2MzI3", "avatar_url": "https://avatars0.githubusercontent.com/u/15696327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andydavis1", "html_url": "https://github.com/andydavis1", "followers_url": "https://api.github.com/users/andydavis1/followers", "following_url": "https://api.github.com/users/andydavis1/following{/other_user}", "gists_url": "https://api.github.com/users/andydavis1/gists{/gist_id}", "starred_url": "https://api.github.com/users/andydavis1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andydavis1/subscriptions", "organizations_url": "https://api.github.com/users/andydavis1/orgs", "repos_url": "https://api.github.com/users/andydavis1/repos", "events_url": "https://api.github.com/users/andydavis1/events{/privacy}", "received_events_url": "https://api.github.com/users/andydavis1/received_events", "type": "User", "site_admin": false}, "body": "spacing looks funny.", "created_at": "2017-03-17T21:26:42Z", "updated_at": "2017-03-22T22:13:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8184#discussion_r106748877", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8184", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/106748877"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8184#discussion_r106748877"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8184"}}, "body_html": "<p>spacing looks funny.</p>", "body_text": "spacing looks funny."}