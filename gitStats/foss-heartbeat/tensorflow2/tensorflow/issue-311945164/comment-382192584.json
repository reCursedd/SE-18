{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/382192584", "html_url": "https://github.com/tensorflow/tensorflow/pull/18293#issuecomment-382192584", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18293", "id": 382192584, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjE5MjU4NA==", "user": {"login": "rongjiecomputer", "id": 13115060, "node_id": "MDQ6VXNlcjEzMTE1MDYw", "avatar_url": "https://avatars2.githubusercontent.com/u/13115060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rongjiecomputer", "html_url": "https://github.com/rongjiecomputer", "followers_url": "https://api.github.com/users/rongjiecomputer/followers", "following_url": "https://api.github.com/users/rongjiecomputer/following{/other_user}", "gists_url": "https://api.github.com/users/rongjiecomputer/gists{/gist_id}", "starred_url": "https://api.github.com/users/rongjiecomputer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rongjiecomputer/subscriptions", "organizations_url": "https://api.github.com/users/rongjiecomputer/orgs", "repos_url": "https://api.github.com/users/rongjiecomputer/repos", "events_url": "https://api.github.com/users/rongjiecomputer/events{/privacy}", "received_events_url": "https://api.github.com/users/rongjiecomputer/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-17T23:40:13Z", "updated_at": "2018-04-17T23:40:13Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>IIUC with your change it is possible (and easy!) for a Googler to accidentally add a <code>cc_library</code>, have it work internally but break your windows build.</p>\n</blockquote>\n<p>Yes, it is possible that anyone can accidentally add <code>cc_library</code> instead of <code>llvm_cc_library</code>, but it might not immediately break Windows build since <code>LLVM_COPTS</code> are mostly warning flags and C++ standard compliance flags (<code>-Zc:*</code>). However, I believe that everyone will know he/she should use <code>llvm_cc_library</code> just by looking at one small section of <code>llvm.BUILD</code> file.</p>\n<p>I argue that people are more likely to overlook <code>cc_library(copts = LLVM_COPTS, ...)</code> than <code>llvm_cc_library</code>, though for some reason Tensorflow team opposes the use of macro (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"283089723\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/15466\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/15466/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/15466\">#15466</a> wants to introduce <code>tf_cc_library</code>, that will solve the issue that many Tensorflow targets not getting Windows specific <code>-D</code> and cause compile errors, LLVM has less of such issue since <code>LLVM_COPTS</code> does not have <code>-D</code>).</p>\n<p>It looks like the internal version Blaze's <code>package</code> rule has <a href=\"https://github.com/google/cpu_features/blob/439d371594c49d35b66493c8d2c33f2d16144f6d/BUILD#L2\"><code>default_copts</code></a>, I wonder why it is not in Bazel. This feature is so useful in open-source world.</p>\n<pre><code>package(\n    default_copts = [\n        \"-DDISABLE_GOOGLE_GLOBAL_USING_DECLARATIONS\",\n        \"-Wno-implicit-fallthrough\",\n        \"-Ithird_party/cpu_features/include\",\n    ],\n    default_visibility = [\"//visibility:public\"],\n    features = [\n        \"-parse_headers\",  # disabled because tests (C++) depends on C target compiled with -std=gnu89.\n        \"-layering_check\",  # disabled because it depends on parse_headers.\n    ],\n)\n</code></pre>\n<blockquote>\n<p>Did you consider using <code>cc_library(copts = LLVM_COPTS, ...)</code> instead of a <code>llvm_cc_library</code>? Defining a new function for this seems more powerful that necessary.</p>\n</blockquote>\n<p>Yes I have, but it is harder to do such transformation in my code editor. Ctrl+H \"cc_library(\" to \"llvm_cc_library(\" is faster for me.</p>\n<blockquote>\n<p>I'm not a blaze/bazel expert, but talking to some folks internally it seems like the right thing to do here is to add a custom MSVC toolchain that has all the compiler / linker flags you need.</p>\n</blockquote>\n<p>You mean writing Tensorflow-specific <code>CROSSTOOL</code> for MSVC toolchain? Firstly, Bazel team is trying to move away from <code>CROSSTOOL</code> to something better (because it is so hard to write, lack of documentation, and does not fit into the world outside Google). Secondly, more burden to Tensorflow team (or I should say myself, Tensorflow team probably won't want to maintain it).</p>", "body_text": "IIUC with your change it is possible (and easy!) for a Googler to accidentally add a cc_library, have it work internally but break your windows build.\n\nYes, it is possible that anyone can accidentally add cc_library instead of llvm_cc_library, but it might not immediately break Windows build since LLVM_COPTS are mostly warning flags and C++ standard compliance flags (-Zc:*). However, I believe that everyone will know he/she should use llvm_cc_library just by looking at one small section of llvm.BUILD file.\nI argue that people are more likely to overlook cc_library(copts = LLVM_COPTS, ...) than llvm_cc_library, though for some reason Tensorflow team opposes the use of macro (#15466 wants to introduce tf_cc_library, that will solve the issue that many Tensorflow targets not getting Windows specific -D and cause compile errors, LLVM has less of such issue since LLVM_COPTS does not have -D).\nIt looks like the internal version Blaze's package rule has default_copts, I wonder why it is not in Bazel. This feature is so useful in open-source world.\npackage(\n    default_copts = [\n        \"-DDISABLE_GOOGLE_GLOBAL_USING_DECLARATIONS\",\n        \"-Wno-implicit-fallthrough\",\n        \"-Ithird_party/cpu_features/include\",\n    ],\n    default_visibility = [\"//visibility:public\"],\n    features = [\n        \"-parse_headers\",  # disabled because tests (C++) depends on C target compiled with -std=gnu89.\n        \"-layering_check\",  # disabled because it depends on parse_headers.\n    ],\n)\n\n\nDid you consider using cc_library(copts = LLVM_COPTS, ...) instead of a llvm_cc_library? Defining a new function for this seems more powerful that necessary.\n\nYes I have, but it is harder to do such transformation in my code editor. Ctrl+H \"cc_library(\" to \"llvm_cc_library(\" is faster for me.\n\nI'm not a blaze/bazel expert, but talking to some folks internally it seems like the right thing to do here is to add a custom MSVC toolchain that has all the compiler / linker flags you need.\n\nYou mean writing Tensorflow-specific CROSSTOOL for MSVC toolchain? Firstly, Bazel team is trying to move away from CROSSTOOL to something better (because it is so hard to write, lack of documentation, and does not fit into the world outside Google). Secondly, more burden to Tensorflow team (or I should say myself, Tensorflow team probably won't want to maintain it).", "body": "> IIUC with your change it is possible (and easy!) for a Googler to accidentally add a `cc_library`, have it work internally but break your windows build.\r\n\r\nYes, it is possible that anyone can accidentally add `cc_library` instead of `llvm_cc_library`, but it might not immediately break Windows build since `LLVM_COPTS` are mostly warning flags and C++ standard compliance flags (`-Zc:*`). However, I believe that everyone will know he/she should use `llvm_cc_library` just by looking at one small section of `llvm.BUILD` file.\r\n\r\nI argue that people are more likely to overlook `cc_library(copts = LLVM_COPTS, ...)` than `llvm_cc_library`, though for some reason Tensorflow team opposes the use of macro (#15466 wants to introduce `tf_cc_library`, that will solve the issue that many Tensorflow targets not getting Windows specific `-D` and cause compile errors, LLVM has less of such issue since `LLVM_COPTS` does not have `-D`).\r\n\r\nIt looks like the internal version Blaze's `package` rule has [`default_copts`](https://github.com/google/cpu_features/blob/439d371594c49d35b66493c8d2c33f2d16144f6d/BUILD#L2), I wonder why it is not in Bazel. This feature is so useful in open-source world.\r\n\r\n```\r\npackage(\r\n    default_copts = [\r\n        \"-DDISABLE_GOOGLE_GLOBAL_USING_DECLARATIONS\",\r\n        \"-Wno-implicit-fallthrough\",\r\n        \"-Ithird_party/cpu_features/include\",\r\n    ],\r\n    default_visibility = [\"//visibility:public\"],\r\n    features = [\r\n        \"-parse_headers\",  # disabled because tests (C++) depends on C target compiled with -std=gnu89.\r\n        \"-layering_check\",  # disabled because it depends on parse_headers.\r\n    ],\r\n)\r\n```\r\n\r\n> Did you consider using `cc_library(copts = LLVM_COPTS, ...)` instead of a `llvm_cc_library`? Defining a new function for this seems more powerful that necessary.\r\n\r\nYes I have, but it is harder to do such transformation in my code editor. Ctrl+H \"cc_library(\" to \"llvm_cc_library(\" is faster for me. \r\n\r\n>  I'm not a blaze/bazel expert, but talking to some folks internally it seems like the right thing to do here is to add a custom MSVC toolchain that has all the compiler / linker flags you need.\r\n\r\nYou mean writing Tensorflow-specific `CROSSTOOL` for MSVC toolchain? Firstly, Bazel team is trying to move away from `CROSSTOOL` to something better (because it is so hard to write, lack of documentation, and does not fit into the world outside Google). Secondly, more burden to Tensorflow team (or I should say myself, Tensorflow team probably won't want to maintain it)."}