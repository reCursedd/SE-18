{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9360", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9360/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9360/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9360/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9360", "id": 223364361, "node_id": "MDU6SXNzdWUyMjMzNjQzNjE=", "number": 9360, "title": "Understanding cast() in tensorflow", "user": {"login": "sandipmgiri", "id": 16284232, "node_id": "MDQ6VXNlcjE2Mjg0MjMy", "avatar_url": "https://avatars0.githubusercontent.com/u/16284232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandipmgiri", "html_url": "https://github.com/sandipmgiri", "followers_url": "https://api.github.com/users/sandipmgiri/followers", "following_url": "https://api.github.com/users/sandipmgiri/following{/other_user}", "gists_url": "https://api.github.com/users/sandipmgiri/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandipmgiri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandipmgiri/subscriptions", "organizations_url": "https://api.github.com/users/sandipmgiri/orgs", "repos_url": "https://api.github.com/users/sandipmgiri/repos", "events_url": "https://api.github.com/users/sandipmgiri/events{/privacy}", "received_events_url": "https://api.github.com/users/sandipmgiri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2017-04-21T12:06:47Z", "updated_at": "2017-06-30T07:15:08Z", "closed_at": "2017-06-30T07:15:08Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System Information</h3>\n<ul>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 16.04 (ppc64le)</li>\n<li><strong>TensorFlow installed from (source or binary):</strong><br>\nInstalled from source (v1.0.1)</li>\n<li><strong>TensorFlow version (use command below):</strong><br>\n('v1.0.1-0-ge895d5c-dirty', '1.0.1')</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nbazel release 0.4.4-2017-04-10 (@80a07b5)</li>\n<li><strong>CUDA/cuDNN version:</strong><br>\nIn disable mode</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nbazel test //tensorflow/python/kernel_tests:cast_op_test</li>\n</ul>\n<h3>Describe the problem clearly</h3>\n<p>This is regarding failure of test case testInfNan in cast_op_test.py file.While executing this test case on ppc64le, it was observed that following line returns unexpected results:</p>\n<p><code>self._compare(np.inf, np.int32, i4.min, False)</code></p>\n<p>i4.min value on x86 as well as on ppc64le is -2147483648. However \"np.inf\" on x86 is \"signed\" by default whereas on ppc64le it is \"unsigned\" by default. To make the results compatible with x86, somehow np.inf should be cast as \"signed\" on ppc64le. In my opinion there could be two ways of doing this.</p>\n<ol>\n<li>Use a proper cast (python equivalent of \"(signed int) var\" in C) which    would always interprete np.inf as of type \"signed\" on ppc64le<br>\n-- or --</li>\n<li>if we are on ppc64le platform, when dealing with np.inf, convert it explicitly to signed as \"-np.inf\" and then perform subsequent operations</li>\n</ol>\n<p>Though I have not yet decided on which one to implement, I am trying to find a right place first to put this fix in tensorflow code. I guess the right place would be somewhere in the code related to following 2 lines in cast_op_test.py (line# 57 and 58, in function _cast):</p>\n<pre><code>val = constant_op.constant(x, self._toDataType(np.array([x]).dtype))\nreturn math_ops.cast(val, self._toDataType(dtype), name=\"cast\").eval()\n\n</code></pre>\n<p>However I am unable to grasp code details about constant() in python/framework/constant_op.py and cast() in python/ops/math_ops.py, similarly there is REGISTER_OP(\"Cast\") in core/ops/math_ops.cc which I guess is the heart of cast functionality. Is my understanding correct?</p>\n<p>So if I have to implement the changes for ppc64le, which could be the right place to do so?</p>\n<h3>Source Code / Logs</h3>\n<pre><code>`$ bazel test //tensorflow/python/kernel_tests:cast_op_test\n\n\nexec ${PAGER:-/usr/bin/less} \"$0\" || exit 1\n-----------------------------------------------------------------------------\nI tensorflow/compiler/xla/service/platform_util.cc:58] platform Host present with 16 visible devices\nI tensorflow/compiler/xla/service/service.cc:180] XLA service executing computations on platform Host. Devices:\nI tensorflow/compiler/xla/service/service.cc:187]   StreamExecutor device (0): &lt;undefined&gt;, &lt;undefined&gt;\n/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py:62: ComplexWarning: Casting complex values to real discards the imaginary part\n  np_ans = x.astype(dtype)\n....F.W tensorflow/core/framework/op_kernel.cc:983] Unimplemented: Cast int64 to string is not supported\nE tensorflow/core/common_runtime/executor.cc:594] Executor failed to create kernel. Unimplemented: Cast int64 to string is not supported\n         [[Node: Cast = Cast[DstT=DT_STRING, SrcT=DT_INT64, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Cast/x)]]\n........\n======================================================================\nFAIL: testInfNan (__main__.CastOpTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py\", line 150, in testInfNan\n    self._compare(np.inf, np.int32, i4.min, False)\n  File \"/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py\", line 124, in _compare\n    x, dst_dtype, use_gpu=use_gpu), dst_dtype(expected))\n  File \"/usr/lib64/python2.7/site-packages/numpy/testing/utils.py\", line 425, in assert_equal\n    raise AssertionError(msg)\nAssertionError:\nItems are not equal:\n ACTUAL: 2147483647\n DESIRED: -2147483648\n\n----------------------------------------------------------------------\nRan 14 tests in 2.485s\n\nFAILED (failures=1)`\n</code></pre>", "body_text": "System Information\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 16.04 (ppc64le)\nTensorFlow installed from (source or binary):\nInstalled from source (v1.0.1)\nTensorFlow version (use command below):\n('v1.0.1-0-ge895d5c-dirty', '1.0.1')\nBazel version (if compiling from source):\nbazel release 0.4.4-2017-04-10 (@80a07b5)\nCUDA/cuDNN version:\nIn disable mode\nExact command to reproduce:\nbazel test //tensorflow/python/kernel_tests:cast_op_test\n\nDescribe the problem clearly\nThis is regarding failure of test case testInfNan in cast_op_test.py file.While executing this test case on ppc64le, it was observed that following line returns unexpected results:\nself._compare(np.inf, np.int32, i4.min, False)\ni4.min value on x86 as well as on ppc64le is -2147483648. However \"np.inf\" on x86 is \"signed\" by default whereas on ppc64le it is \"unsigned\" by default. To make the results compatible with x86, somehow np.inf should be cast as \"signed\" on ppc64le. In my opinion there could be two ways of doing this.\n\nUse a proper cast (python equivalent of \"(signed int) var\" in C) which    would always interprete np.inf as of type \"signed\" on ppc64le\n-- or --\nif we are on ppc64le platform, when dealing with np.inf, convert it explicitly to signed as \"-np.inf\" and then perform subsequent operations\n\nThough I have not yet decided on which one to implement, I am trying to find a right place first to put this fix in tensorflow code. I guess the right place would be somewhere in the code related to following 2 lines in cast_op_test.py (line# 57 and 58, in function _cast):\nval = constant_op.constant(x, self._toDataType(np.array([x]).dtype))\nreturn math_ops.cast(val, self._toDataType(dtype), name=\"cast\").eval()\n\n\nHowever I am unable to grasp code details about constant() in python/framework/constant_op.py and cast() in python/ops/math_ops.py, similarly there is REGISTER_OP(\"Cast\") in core/ops/math_ops.cc which I guess is the heart of cast functionality. Is my understanding correct?\nSo if I have to implement the changes for ppc64le, which could be the right place to do so?\nSource Code / Logs\n`$ bazel test //tensorflow/python/kernel_tests:cast_op_test\n\n\nexec ${PAGER:-/usr/bin/less} \"$0\" || exit 1\n-----------------------------------------------------------------------------\nI tensorflow/compiler/xla/service/platform_util.cc:58] platform Host present with 16 visible devices\nI tensorflow/compiler/xla/service/service.cc:180] XLA service executing computations on platform Host. Devices:\nI tensorflow/compiler/xla/service/service.cc:187]   StreamExecutor device (0): <undefined>, <undefined>\n/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py:62: ComplexWarning: Casting complex values to real discards the imaginary part\n  np_ans = x.astype(dtype)\n....F.W tensorflow/core/framework/op_kernel.cc:983] Unimplemented: Cast int64 to string is not supported\nE tensorflow/core/common_runtime/executor.cc:594] Executor failed to create kernel. Unimplemented: Cast int64 to string is not supported\n         [[Node: Cast = Cast[DstT=DT_STRING, SrcT=DT_INT64, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Cast/x)]]\n........\n======================================================================\nFAIL: testInfNan (__main__.CastOpTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py\", line 150, in testInfNan\n    self._compare(np.inf, np.int32, i4.min, False)\n  File \"/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py\", line 124, in _compare\n    x, dst_dtype, use_gpu=use_gpu), dst_dtype(expected))\n  File \"/usr/lib64/python2.7/site-packages/numpy/testing/utils.py\", line 425, in assert_equal\n    raise AssertionError(msg)\nAssertionError:\nItems are not equal:\n ACTUAL: 2147483647\n DESIRED: -2147483648\n\n----------------------------------------------------------------------\nRan 14 tests in 2.485s\n\nFAILED (failures=1)`", "body": "### System Information\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 16.04 (ppc64le)\r\n- **TensorFlow installed from (source or binary):**\r\nInstalled from source (v1.0.1)\r\n- **TensorFlow version (use command below):**\r\n('v1.0.1-0-ge895d5c-dirty', '1.0.1')\r\n- **Bazel version (if compiling from source)**:\r\n bazel release 0.4.4-2017-04-10 (@80a07b5)\r\n- **CUDA/cuDNN version:**\r\nIn disable mode\r\n- **Exact command to reproduce**:\r\nbazel test //tensorflow/python/kernel_tests:cast_op_test\r\n\r\n\r\n### Describe the problem clearly \r\nThis is regarding failure of test case testInfNan in cast_op_test.py file.While executing this test case on ppc64le, it was observed that following line returns unexpected results:\r\n\r\n`self._compare(np.inf, np.int32, i4.min, False)`\r\n\r\ni4.min value on x86 as well as on ppc64le is -2147483648. However \"np.inf\" on x86 is \"signed\" by default whereas on ppc64le it is \"unsigned\" by default. To make the results compatible with x86, somehow np.inf should be cast as \"signed\" on ppc64le. In my opinion there could be two ways of doing this.\r\n\r\n1. Use a proper cast (python equivalent of \"(signed int) var\" in C) which    would always interprete np.inf as of type \"signed\" on ppc64le\r\n-- or --\r\n2. if we are on ppc64le platform, when dealing with np.inf, convert it explicitly to signed as \"-np.inf\" and then perform subsequent operations\r\n\r\nThough I have not yet decided on which one to implement, I am trying to find a right place first to put this fix in tensorflow code. I guess the right place would be somewhere in the code related to following 2 lines in cast_op_test.py (line# 57 and 58, in function _cast):\r\n\r\n```\r\nval = constant_op.constant(x, self._toDataType(np.array([x]).dtype))\r\nreturn math_ops.cast(val, self._toDataType(dtype), name=\"cast\").eval()\r\n\r\n```\r\nHowever I am unable to grasp code details about constant() in python/framework/constant_op.py and cast() in python/ops/math_ops.py, similarly there is REGISTER_OP(\"Cast\") in core/ops/math_ops.cc which I guess is the heart of cast functionality. Is my understanding correct?\r\n\r\nSo if I have to implement the changes for ppc64le, which could be the right place to do so?\r\n\r\n### Source Code / Logs\r\n```\r\n`$ bazel test //tensorflow/python/kernel_tests:cast_op_test\r\n\r\n\r\nexec ${PAGER:-/usr/bin/less} \"$0\" || exit 1\r\n-----------------------------------------------------------------------------\r\nI tensorflow/compiler/xla/service/platform_util.cc:58] platform Host present with 16 visible devices\r\nI tensorflow/compiler/xla/service/service.cc:180] XLA service executing computations on platform Host. Devices:\r\nI tensorflow/compiler/xla/service/service.cc:187]   StreamExecutor device (0): <undefined>, <undefined>\r\n/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py:62: ComplexWarning: Casting complex values to real discards the imaginary part\r\n  np_ans = x.astype(dtype)\r\n....F.W tensorflow/core/framework/op_kernel.cc:983] Unimplemented: Cast int64 to string is not supported\r\nE tensorflow/core/common_runtime/executor.cc:594] Executor failed to create kernel. Unimplemented: Cast int64 to string is not supported\r\n         [[Node: Cast = Cast[DstT=DT_STRING, SrcT=DT_INT64, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Cast/x)]]\r\n........\r\n======================================================================\r\nFAIL: testInfNan (__main__.CastOpTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py\", line 150, in testInfNan\r\n    self._compare(np.inf, np.int32, i4.min, False)\r\n  File \"/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/python/kernel_tests/cast_op_test.runfiles/org_tensorflow/tensorflow/python/kernel_tests/cast_op_test.py\", line 124, in _compare\r\n    x, dst_dtype, use_gpu=use_gpu), dst_dtype(expected))\r\n  File \"/usr/lib64/python2.7/site-packages/numpy/testing/utils.py\", line 425, in assert_equal\r\n    raise AssertionError(msg)\r\nAssertionError:\r\nItems are not equal:\r\n ACTUAL: 2147483647\r\n DESIRED: -2147483648\r\n\r\n----------------------------------------------------------------------\r\nRan 14 tests in 2.485s\r\n\r\nFAILED (failures=1)`\r\n```"}