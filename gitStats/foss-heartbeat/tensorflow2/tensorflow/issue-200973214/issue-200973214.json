{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6875", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6875/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6875/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6875/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6875", "id": 200973214, "node_id": "MDU6SXNzdWUyMDA5NzMyMTQ=", "number": 6875, "title": "Tensorflow require Protobuf 3.1 while attempting to use incompatible 3.0 function calls", "user": {"login": "allannk", "id": 640662, "node_id": "MDQ6VXNlcjY0MDY2Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/640662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allannk", "html_url": "https://github.com/allannk", "followers_url": "https://api.github.com/users/allannk/followers", "following_url": "https://api.github.com/users/allannk/following{/other_user}", "gists_url": "https://api.github.com/users/allannk/gists{/gist_id}", "starred_url": "https://api.github.com/users/allannk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allannk/subscriptions", "organizations_url": "https://api.github.com/users/allannk/orgs", "repos_url": "https://api.github.com/users/allannk/repos", "events_url": "https://api.github.com/users/allannk/events{/privacy}", "received_events_url": "https://api.github.com/users/allannk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-16T09:51:49Z", "updated_at": "2018-04-09T04:14:41Z", "closed_at": "2017-01-16T12:28:00Z", "author_association": "NONE", "body_html": "<p><strong>Environment:</strong><br>\nArch Linux with CUDA 8.0 and cuDNN 5.1</p>\n<pre><code>/opt/cuda/lib64/libcudadevrt.a\n/opt/cuda/lib64/libcudart.so -&gt; libcudart.so.8.0\n/opt/cuda/lib64/libcudart.so.8.0 -&gt; libcudart.so.8.0.44\n/opt/cuda/lib64/libcudart.so.8.0.44\n/opt/cuda/lib64/libcudart_static.a\n/opt/cuda/lib64/libcudnn.so -&gt; libcudnn.so.5\n/opt/cuda/lib64/libcudnn.so.5 -&gt; libcudnn.so.5.1.5\n/opt/cuda/lib64/libcudnn.so.5.0.5\n/opt/cuda/lib64/libcudnn.so.5.1.5\n/opt/cuda/lib64/libcudnn_static.a\n</code></pre>\n<p>Tensorflow was succesfully compiled from source for a C++ pipeline using<br>\n<strong>Bazel</strong> 0.4.3<br>\n<strong>Protobuf</strong> 3.1.x (also tried 3.2.x)<br>\n<strong>Tensorflow</strong> r1.0 (as well as master &lt;9830ed87d46245a72a9d0c2dce854e6732c5542a&gt;)</p>\n<p>with the command:<br>\n<code>bazel build -c opt --config=cuda --copt=-march=native --verbose_failures //tensorflow/core:tensorflow //tensorflow/cc:cc_ops tensorflow:libtensorflow_cc.so</code></p>\n<p>In <em>my</em> CPP pipeline, the following include breaks the compile process<br>\n<code>#include &lt;tensorflow/core/public/session.h&gt;</code></p>\n<pre><code>/srv/builds/tensorflow/bazel-genfiles/tensorflow/core/protobuf/config.pb.h:1490:95: error: no matching function for call to \u2018google::protobuf::internal::ArenaStringPtr::Get(const string*) const\u2019\n return visible_device_list_.Get(&amp;::google::protobuf::internal::GetEmptyStringAlreadyInited());\n                                                                                             ^\nIn file included from /srv/builds/tensorflow/bazel-genfiles/tensorflow/core/framework/graph.pb.h:23:0,\n                 from /srv/builds/tensorflow/tensorflow/core/public/session.h:22,\n                 from src/fragments/tensorflow.h:48,\n                 from src/blocks/detector.h:27,\n                 from src/json_deserializer.h:22,\n                 from src/blocks/assign_camera.cpp:2:\n/usr/include/google/protobuf/arenastring.h:66:31: note: candidate: const string&amp; google::protobuf::internal::ArenaStringPtr::Get() const\n   inline const ::std::string&amp; Get() const { return *ptr_; }\n                               ^~~\n/usr/include/google/protobuf/arenastring.h:66:31: note:   candidate expects 0 arguments, 1 provided\n</code></pre>\n<hr>\n<p>Digging in the documentation, I see for the python part that Protobuf 3.1.x is required, however 3.1.x had an API change from 3.0.X for the ArenaStringPtr::Get(), where the former takes a string as argument while the newer doesn't. I could downgrade to Protobuf 3.0.X, but macro's in e.g. error_codes.pb.h specifies a requirement for 3.1.X <code>#if 3001000 &lt; GOOGLE_PROTOBUF_MIN_PROTOC_VERSION</code></p>", "body_text": "Environment:\nArch Linux with CUDA 8.0 and cuDNN 5.1\n/opt/cuda/lib64/libcudadevrt.a\n/opt/cuda/lib64/libcudart.so -> libcudart.so.8.0\n/opt/cuda/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\n/opt/cuda/lib64/libcudart.so.8.0.44\n/opt/cuda/lib64/libcudart_static.a\n/opt/cuda/lib64/libcudnn.so -> libcudnn.so.5\n/opt/cuda/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5\n/opt/cuda/lib64/libcudnn.so.5.0.5\n/opt/cuda/lib64/libcudnn.so.5.1.5\n/opt/cuda/lib64/libcudnn_static.a\n\nTensorflow was succesfully compiled from source for a C++ pipeline using\nBazel 0.4.3\nProtobuf 3.1.x (also tried 3.2.x)\nTensorflow r1.0 (as well as master <9830ed87d46245a72a9d0c2dce854e6732c5542a>)\nwith the command:\nbazel build -c opt --config=cuda --copt=-march=native --verbose_failures //tensorflow/core:tensorflow //tensorflow/cc:cc_ops tensorflow:libtensorflow_cc.so\nIn my CPP pipeline, the following include breaks the compile process\n#include <tensorflow/core/public/session.h>\n/srv/builds/tensorflow/bazel-genfiles/tensorflow/core/protobuf/config.pb.h:1490:95: error: no matching function for call to \u2018google::protobuf::internal::ArenaStringPtr::Get(const string*) const\u2019\n return visible_device_list_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());\n                                                                                             ^\nIn file included from /srv/builds/tensorflow/bazel-genfiles/tensorflow/core/framework/graph.pb.h:23:0,\n                 from /srv/builds/tensorflow/tensorflow/core/public/session.h:22,\n                 from src/fragments/tensorflow.h:48,\n                 from src/blocks/detector.h:27,\n                 from src/json_deserializer.h:22,\n                 from src/blocks/assign_camera.cpp:2:\n/usr/include/google/protobuf/arenastring.h:66:31: note: candidate: const string& google::protobuf::internal::ArenaStringPtr::Get() const\n   inline const ::std::string& Get() const { return *ptr_; }\n                               ^~~\n/usr/include/google/protobuf/arenastring.h:66:31: note:   candidate expects 0 arguments, 1 provided\n\n\nDigging in the documentation, I see for the python part that Protobuf 3.1.x is required, however 3.1.x had an API change from 3.0.X for the ArenaStringPtr::Get(), where the former takes a string as argument while the newer doesn't. I could downgrade to Protobuf 3.0.X, but macro's in e.g. error_codes.pb.h specifies a requirement for 3.1.X #if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION", "body": "**Environment:**\r\nArch Linux with CUDA 8.0 and cuDNN 5.1\r\n\r\n```\r\n/opt/cuda/lib64/libcudadevrt.a\r\n/opt/cuda/lib64/libcudart.so -> libcudart.so.8.0\r\n/opt/cuda/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\r\n/opt/cuda/lib64/libcudart.so.8.0.44\r\n/opt/cuda/lib64/libcudart_static.a\r\n/opt/cuda/lib64/libcudnn.so -> libcudnn.so.5\r\n/opt/cuda/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5\r\n/opt/cuda/lib64/libcudnn.so.5.0.5\r\n/opt/cuda/lib64/libcudnn.so.5.1.5\r\n/opt/cuda/lib64/libcudnn_static.a\r\n```\r\n\r\nTensorflow was succesfully compiled from source for a C++ pipeline using\r\n**Bazel** 0.4.3\r\n**Protobuf** 3.1.x (also tried 3.2.x)\r\n**Tensorflow** r1.0 (as well as master <9830ed87d46245a72a9d0c2dce854e6732c5542a>)\r\n\r\nwith the command: \r\n`bazel build -c opt --config=cuda --copt=-march=native --verbose_failures //tensorflow/core:tensorflow //tensorflow/cc:cc_ops tensorflow:libtensorflow_cc.so`\r\n\r\nIn _my_ CPP pipeline, the following include breaks the compile process\r\n`#include <tensorflow/core/public/session.h>`\r\n\r\n```\r\n/srv/builds/tensorflow/bazel-genfiles/tensorflow/core/protobuf/config.pb.h:1490:95: error: no matching function for call to \u2018google::protobuf::internal::ArenaStringPtr::Get(const string*) const\u2019\r\n return visible_device_list_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());\r\n                                                                                             ^\r\nIn file included from /srv/builds/tensorflow/bazel-genfiles/tensorflow/core/framework/graph.pb.h:23:0,\r\n                 from /srv/builds/tensorflow/tensorflow/core/public/session.h:22,\r\n                 from src/fragments/tensorflow.h:48,\r\n                 from src/blocks/detector.h:27,\r\n                 from src/json_deserializer.h:22,\r\n                 from src/blocks/assign_camera.cpp:2:\r\n/usr/include/google/protobuf/arenastring.h:66:31: note: candidate: const string& google::protobuf::internal::ArenaStringPtr::Get() const\r\n   inline const ::std::string& Get() const { return *ptr_; }\r\n                               ^~~\r\n/usr/include/google/protobuf/arenastring.h:66:31: note:   candidate expects 0 arguments, 1 provided\r\n```\r\n\r\n----------------------------------------------\r\n\r\nDigging in the documentation, I see for the python part that Protobuf 3.1.x is required, however 3.1.x had an API change from 3.0.X for the ArenaStringPtr::Get(), where the former takes a string as argument while the newer doesn't. I could downgrade to Protobuf 3.0.X, but macro's in e.g. error_codes.pb.h specifies a requirement for 3.1.X `#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION`"}