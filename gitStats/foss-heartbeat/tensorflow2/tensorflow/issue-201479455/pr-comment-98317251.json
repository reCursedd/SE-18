{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/98317251", "pull_request_review_id": 18960491, "id": 98317251, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4MzE3MjUx", "diff_hunk": "@@ -474,46 +521,46 @@ bool NodeMergeRewritePass::IsApplicableRewriteNode(const Node *n) const {\n   return match_found;\n }\n \n-bool NodeMergeRewritePass::DoNodeMerge(std::unique_ptr<Graph>* g) {\n+bool NodeMergeRewritePass::RunNodeMergeRewritePass(std::unique_ptr<Graph>* g) {\n   bool result = false;\n   CHECK_NOTNULL(g);\n \n   DumpGraph(\"Before OptimizeMerge\", &**g);\n \n   std::vector<Node*> order;\n   GetReversePostOrder(**g, &order);\n-  std::vector<std::pair<Node*, Node*>> to_be_merged;\n-  std::vector<Node*> to_be_rewritten;\n+  std::vector<std::pair<Node*, Node*>> nodes_to_be_merged;\n+  std::vector<Node*> nodes_to_be_rewritten;\n \n   VLOG(1) << \"Running NodeMerge Optimization\";\n \n   for (Node* n : order) {\n     if (!n->IsOp()) continue;\n-    Node *n1 = nullptr;\n+    Node* n1 = nullptr;\n     if ((n1 = FindNodeForMerge(n)) != nullptr) {\n       VLOG(1) << \"Scheduled nodes \" << n->name() << \" and \"\n               << n1->name() << \" for merging\";\n-      to_be_merged.push_back(std::make_pair(n, n1));\n+      nodes_to_be_merged.push_back(std::make_pair(n, n1));\n     } else if (IsApplicableRewriteNode(n)) {\n       VLOG(1) << \"Scheduled node \" << n->name() << \" for rewrite\";\n-      to_be_rewritten.push_back(n);\n+      nodes_to_be_rewritten.push_back(n);\n     }\n   }\n \n-  for (std::pair < Node*, Node* > i : to_be_merged) {\n+  for (std::pair < Node*, Node* > i : nodes_to_be_merged) {\n     // Even if MergeNode merges single pair of nodes, we\n     // need to return true.\n-    string n1name = i.first->name();\n-    string n2name = i.second->name();\n+    string n1_name = i.first->name();\n+    string n2_name = i.second->name();\n     if (MergeNode(g, i.first, i.second)) {\n-      VLOG(1) << \"Merged nodes \" << n1name << \" and \" << n2name;\n+      VLOG(1) << \"Merged nodes \" << n1_name << \" and \" << n2_name;", "path": "tensorflow/core/graph/mkl_optimizer_merge.cc", "position": null, "original_position": 536, "commit_id": "59ce7353e2e69a03eb65c7953b0c1e970b1a465b", "original_commit_id": "045e26a166cee9ecdd5232138655cbea876b6096", "user": {"login": "nhasabni", "id": 22304502, "node_id": "MDQ6VXNlcjIyMzA0NTAy", "avatar_url": "https://avatars0.githubusercontent.com/u/22304502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhasabni", "html_url": "https://github.com/nhasabni", "followers_url": "https://api.github.com/users/nhasabni/followers", "following_url": "https://api.github.com/users/nhasabni/following{/other_user}", "gists_url": "https://api.github.com/users/nhasabni/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhasabni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhasabni/subscriptions", "organizations_url": "https://api.github.com/users/nhasabni/orgs", "repos_url": "https://api.github.com/users/nhasabni/repos", "events_url": "https://api.github.com/users/nhasabni/events{/privacy}", "received_events_url": "https://api.github.com/users/nhasabni/received_events", "type": "User", "site_admin": false}, "body": "Do you mean VLOG(2)?", "created_at": "2017-01-28T00:55:06Z", "updated_at": "2017-02-03T22:04:44Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6921#discussion_r98317251", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6921", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/98317251"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6921#discussion_r98317251"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6921"}}, "body_html": "<p>Do you mean VLOG(2)?</p>", "body_text": "Do you mean VLOG(2)?", "in_reply_to_id": 98079495}