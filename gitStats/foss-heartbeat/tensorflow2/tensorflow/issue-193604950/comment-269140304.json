{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269140304", "html_url": "https://github.com/tensorflow/tensorflow/issues/6095#issuecomment-269140304", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6095", "id": 269140304, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTE0MDMwNA==", "user": {"login": "tesfaldet", "id": 5014902, "node_id": "MDQ6VXNlcjUwMTQ5MDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5014902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesfaldet", "html_url": "https://github.com/tesfaldet", "followers_url": "https://api.github.com/users/tesfaldet/followers", "following_url": "https://api.github.com/users/tesfaldet/following{/other_user}", "gists_url": "https://api.github.com/users/tesfaldet/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesfaldet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesfaldet/subscriptions", "organizations_url": "https://api.github.com/users/tesfaldet/orgs", "repos_url": "https://api.github.com/users/tesfaldet/repos", "events_url": "https://api.github.com/users/tesfaldet/events{/privacy}", "received_events_url": "https://api.github.com/users/tesfaldet/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-25T22:40:28Z", "updated_at": "2016-12-25T22:41:41Z", "author_association": "NONE", "body_html": "<p>Oh, and if anyone's coming here to look for an atan2 function for their own flow visualization function, here's what I made (I know this isn't the point of this issue!):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">normalize</span>(<span class=\"pl-smi\">tensor</span>, <span class=\"pl-smi\">a</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-smi\">b</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>):\n    <span class=\"pl-k\">return</span> tf.div(tf.mul(tf.sub(tensor, tf.reduce_min(tensor)), b <span class=\"pl-k\">-</span> a),\n                  tf.sub(tf.reduce_max(tensor), tf.reduce_min(tensor)))\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">cart_to_polar_ocv</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">y</span>, <span class=\"pl-smi\">angle_in_degrees</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    v <span class=\"pl-k\">=</span> tf.sqrt(tf.add(tf.square(x), tf.square(y)))\n    ang <span class=\"pl-k\">=</span> atan2_ocv(y, x)\n    scale <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">if</span> angle_in_degrees <span class=\"pl-k\">else</span> np.pi <span class=\"pl-k\">/</span> <span class=\"pl-c1\">180</span>\n    <span class=\"pl-k\">return</span> v, tf.mul(ang, scale)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">cart_to_polar</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">y</span>, <span class=\"pl-smi\">angle_in_degrees</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    v <span class=\"pl-k\">=</span> tf.sqrt(tf.add(tf.square(x), tf.square(y)))\n    ang <span class=\"pl-k\">=</span> atan2(y, x)\n    scale <span class=\"pl-k\">=</span> <span class=\"pl-c1\">180</span> <span class=\"pl-k\">/</span> np.pi <span class=\"pl-k\">if</span> angle_in_degrees <span class=\"pl-k\">else</span> <span class=\"pl-c1\">1</span>\n    <span class=\"pl-k\">return</span> v, tf.mul(ang, scale)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">draw_hsv</span>(<span class=\"pl-smi\">flow</span>):\n    fx, fy <span class=\"pl-k\">=</span> flow[:, :, :, <span class=\"pl-c1\">0</span>], flow[:, :, :, <span class=\"pl-c1\">1</span>]\n    v, ang <span class=\"pl-k\">=</span> cart_to_polar_ocv(fx, fy)\n\n    h <span class=\"pl-k\">=</span> normalize(tf.mul(ang, <span class=\"pl-c1\">180</span> <span class=\"pl-k\">/</span> np.pi))\n    s <span class=\"pl-k\">=</span> tf.ones_like(h)\n    v <span class=\"pl-k\">=</span> normalize(v)\n\n    hsv <span class=\"pl-k\">=</span> tf.pack([h, s, v], <span class=\"pl-c1\">3</span>)\n    rgb <span class=\"pl-k\">=</span> tf.image.hsv_to_rgb(hsv) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">255</span>\n\n    <span class=\"pl-k\">return</span> tf.cast(rgb, tf.uint8)</pre></div>", "body_text": "Oh, and if anyone's coming here to look for an atan2 function for their own flow visualization function, here's what I made (I know this isn't the point of this issue!):\ndef normalize(tensor, a=0, b=1):\n    return tf.div(tf.mul(tf.sub(tensor, tf.reduce_min(tensor)), b - a),\n                  tf.sub(tf.reduce_max(tensor), tf.reduce_min(tensor)))\n\n\ndef cart_to_polar_ocv(x, y, angle_in_degrees=False):\n    v = tf.sqrt(tf.add(tf.square(x), tf.square(y)))\n    ang = atan2_ocv(y, x)\n    scale = 1 if angle_in_degrees else np.pi / 180\n    return v, tf.mul(ang, scale)\n\n\ndef cart_to_polar(x, y, angle_in_degrees=False):\n    v = tf.sqrt(tf.add(tf.square(x), tf.square(y)))\n    ang = atan2(y, x)\n    scale = 180 / np.pi if angle_in_degrees else 1\n    return v, tf.mul(ang, scale)\n\n\ndef draw_hsv(flow):\n    fx, fy = flow[:, :, :, 0], flow[:, :, :, 1]\n    v, ang = cart_to_polar_ocv(fx, fy)\n\n    h = normalize(tf.mul(ang, 180 / np.pi))\n    s = tf.ones_like(h)\n    v = normalize(v)\n\n    hsv = tf.pack([h, s, v], 3)\n    rgb = tf.image.hsv_to_rgb(hsv) * 255\n\n    return tf.cast(rgb, tf.uint8)", "body": "Oh, and if anyone's coming here to look for an atan2 function for their own flow visualization function, here's what I made (I know this isn't the point of this issue!):\r\n\r\n```python\r\ndef normalize(tensor, a=0, b=1):\r\n    return tf.div(tf.mul(tf.sub(tensor, tf.reduce_min(tensor)), b - a),\r\n                  tf.sub(tf.reduce_max(tensor), tf.reduce_min(tensor)))\r\n\r\n\r\ndef cart_to_polar_ocv(x, y, angle_in_degrees=False):\r\n    v = tf.sqrt(tf.add(tf.square(x), tf.square(y)))\r\n    ang = atan2_ocv(y, x)\r\n    scale = 1 if angle_in_degrees else np.pi / 180\r\n    return v, tf.mul(ang, scale)\r\n\r\n\r\ndef cart_to_polar(x, y, angle_in_degrees=False):\r\n    v = tf.sqrt(tf.add(tf.square(x), tf.square(y)))\r\n    ang = atan2(y, x)\r\n    scale = 180 / np.pi if angle_in_degrees else 1\r\n    return v, tf.mul(ang, scale)\r\n\r\n\r\ndef draw_hsv(flow):\r\n    fx, fy = flow[:, :, :, 0], flow[:, :, :, 1]\r\n    v, ang = cart_to_polar_ocv(fx, fy)\r\n\r\n    h = normalize(tf.mul(ang, 180 / np.pi))\r\n    s = tf.ones_like(h)\r\n    v = normalize(v)\r\n\r\n    hsv = tf.pack([h, s, v], 3)\r\n    rgb = tf.image.hsv_to_rgb(hsv) * 255\r\n\r\n    return tf.cast(rgb, tf.uint8)\r\n```"}