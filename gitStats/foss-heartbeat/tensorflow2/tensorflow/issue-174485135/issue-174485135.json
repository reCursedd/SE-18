{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4149", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4149/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4149/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4149/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4149", "id": 174485135, "node_id": "MDU6SXNzdWUxNzQ0ODUxMzU=", "number": 4149, "title": "Wide and Deep Learning tutorial example fails on Python 3.4", "user": {"login": "jpangburn", "id": 4357286, "node_id": "MDQ6VXNlcjQzNTcyODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4357286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpangburn", "html_url": "https://github.com/jpangburn", "followers_url": "https://api.github.com/users/jpangburn/followers", "following_url": "https://api.github.com/users/jpangburn/following{/other_user}", "gists_url": "https://api.github.com/users/jpangburn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpangburn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpangburn/subscriptions", "organizations_url": "https://api.github.com/users/jpangburn/orgs", "repos_url": "https://api.github.com/users/jpangburn/repos", "events_url": "https://api.github.com/users/jpangburn/events{/privacy}", "received_events_url": "https://api.github.com/users/jpangburn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2016-09-01T10:07:09Z", "updated_at": "2016-09-09T23:18:25Z", "closed_at": "2016-09-02T22:23:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>When using the \"deep\" functionality in the Wide and Deep Learning tutorial on Python 3.4, I get the following error:</p>\n<pre><code>ValueError: Duplicate feature column key found for column: education_embedding. This usually means that the column is almost identical to another column, and one must be discarded.\n</code></pre>\n<p>Looks like a bug in tensorflow/contrib/layers/python/layers/feature_column.py in the _EmbeddingColumn class. The key(self) property is plagued by this bug: <a href=\"https://bugs.python.org/issue24931\" rel=\"nofollow\">https://bugs.python.org/issue24931</a></p>\n<p>So instead of coming out with a nice unique key, we get the following key for all _EmbeddingColumn instances: '_EmbeddingColumn()'</p>\n<p>This causes the feature_column_ops.py's check_feature_columns() function to determine that the second _EmbeddingColumn instance is a duplicate since they keys of all of them are the same.</p>\n<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p>I found this StackOverflow thread <a href=\"http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column/\" rel=\"nofollow\">http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column/</a> where someone had the same problem, with no answers.  So I did the debugging and answered the question.</p>\n<h3>Environment info</h3>\n<p>Operating System: Fedora Core 23</p>\n<p>Installed version of CUDA and cuDNN: 8 and 5.1<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):</p>\n<pre><code>[jpangburn@localhost examples]$ ls /usr/local/cuda/lib64/libcud*\n/usr/local/cuda/lib64/libcudadevrt.a\n/usr/local/cuda/lib64/libcudart.so\n/usr/local/cuda/lib64/libcudart.so.8.0\n/usr/local/cuda/lib64/libcudart.so.8.0.27\n/usr/local/cuda/lib64/libcudart_static.a\n/usr/local/cuda/lib64/libcudnn.so\n/usr/local/cuda/lib64/libcudnn.so.5\n/usr/local/cuda/lib64/libcudnn.so.5.1.5\n/usr/local/cuda/lib64/libcudnn_static.a\n\n</code></pre>\n<p>If installed from source, provide</p>\n<ol>\n<li>The commit hash (<code>git rev-parse HEAD</code>)</li>\n</ol>\n<pre><code>[jpangburn@localhost examples]$ pwd\n/home/jpangburn/open_source/tensorflow/tensorflow/examples\n[jpangburn@localhost examples]$ git rev-parse HEAD\n17d0e46e6cc31af0bcf6e80ff4c5670d233b4940\n\n</code></pre>\n<ol>\n<li>The output of <code>bazel version</code></li>\n</ol>\n<pre><code>[jpangburn@localhost examples]$ bazel version\n.\nBuild label: 0.3.1\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Fri Jul 29 09:09:52 2016 (1469783392)\nBuild timestamp: 1469783392\nBuild timestamp as int: 1469783392\n\n</code></pre>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>Be in the \"tensorflow/tensorflow/examples/learn\" directory.  Patch the wide_n_deep_tutorial.py to work in Python 3 by replacing \"urllib\" instances with \"urllib.request\".  Then run it \"python3 wide_n_deep_tutorial_py3.py --train_data=train_data --test_data=test_data --model_type=wide_n_deep\", obviously replacing the train_data and test_data files with your own copies, or omitting those switches altogether to download the files fresh.</p>\n<h3>What other attempted solutions have you tried?</h3>\n<p>I worked around the problem by creating a subclass of _EmbeddedColumn and using that, but not sure my key(self) property implementation is working because the accuracy result with wide_n_deep is worse than with just \"wide\".  You can see this in my answer to the StackOverflow question at <a href=\"http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column/39268045#39268045\" rel=\"nofollow\">http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column/39268045#39268045</a></p>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment or provide link).</p>\n<pre><code>Traceback (most recent call last):\n  File \"wide_n_deep_tutorial_py3.py\", line 220, in &lt;module&gt;\n    tf.app.run()\n  File \"/usr/lib/python3.4/site-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial_py3.py\", line 216, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial_py3.py\", line 204, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 219, in fit\n    max_steps=max_steps)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 479, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 166, in _get_train_ops\n    logits = self._logits(features, is_training=True)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 244, in _logits\n    dnn_feature_columns = self._get_dnn_feature_columns()\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 208, in _get_dnn_feature_columns\n    feature_column_ops.check_feature_columns(self._dnn_feature_columns)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/layers/python/layers/feature_column_ops.py\", line 318, in check_feature_columns\n    f.name))\nValueError: Duplicate feature column key found for column: education_embedding. This usually means that the column is almost identical to another column, and one must be discarded.\n\n</code></pre>", "body_text": "When using the \"deep\" functionality in the Wide and Deep Learning tutorial on Python 3.4, I get the following error:\nValueError: Duplicate feature column key found for column: education_embedding. This usually means that the column is almost identical to another column, and one must be discarded.\n\nLooks like a bug in tensorflow/contrib/layers/python/layers/feature_column.py in the _EmbeddingColumn class. The key(self) property is plagued by this bug: https://bugs.python.org/issue24931\nSo instead of coming out with a nice unique key, we get the following key for all _EmbeddingColumn instances: '_EmbeddingColumn()'\nThis causes the feature_column_ops.py's check_feature_columns() function to determine that the second _EmbeddingColumn instance is a duplicate since they keys of all of them are the same.\nWhat related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\nI found this StackOverflow thread http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column/ where someone had the same problem, with no answers.  So I did the debugging and answered the question.\nEnvironment info\nOperating System: Fedora Core 23\nInstalled version of CUDA and cuDNN: 8 and 5.1\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\n[jpangburn@localhost examples]$ ls /usr/local/cuda/lib64/libcud*\n/usr/local/cuda/lib64/libcudadevrt.a\n/usr/local/cuda/lib64/libcudart.so\n/usr/local/cuda/lib64/libcudart.so.8.0\n/usr/local/cuda/lib64/libcudart.so.8.0.27\n/usr/local/cuda/lib64/libcudart_static.a\n/usr/local/cuda/lib64/libcudnn.so\n/usr/local/cuda/lib64/libcudnn.so.5\n/usr/local/cuda/lib64/libcudnn.so.5.1.5\n/usr/local/cuda/lib64/libcudnn_static.a\n\n\nIf installed from source, provide\n\nThe commit hash (git rev-parse HEAD)\n\n[jpangburn@localhost examples]$ pwd\n/home/jpangburn/open_source/tensorflow/tensorflow/examples\n[jpangburn@localhost examples]$ git rev-parse HEAD\n17d0e46e6cc31af0bcf6e80ff4c5670d233b4940\n\n\n\nThe output of bazel version\n\n[jpangburn@localhost examples]$ bazel version\n.\nBuild label: 0.3.1\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Fri Jul 29 09:09:52 2016 (1469783392)\nBuild timestamp: 1469783392\nBuild timestamp as int: 1469783392\n\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nBe in the \"tensorflow/tensorflow/examples/learn\" directory.  Patch the wide_n_deep_tutorial.py to work in Python 3 by replacing \"urllib\" instances with \"urllib.request\".  Then run it \"python3 wide_n_deep_tutorial_py3.py --train_data=train_data --test_data=test_data --model_type=wide_n_deep\", obviously replacing the train_data and test_data files with your own copies, or omitting those switches altogether to download the files fresh.\nWhat other attempted solutions have you tried?\nI worked around the problem by creating a subclass of _EmbeddedColumn and using that, but not sure my key(self) property implementation is working because the accuracy result with wide_n_deep is worse than with just \"wide\".  You can see this in my answer to the StackOverflow question at http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column/39268045#39268045\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment or provide link).\nTraceback (most recent call last):\n  File \"wide_n_deep_tutorial_py3.py\", line 220, in <module>\n    tf.app.run()\n  File \"/usr/lib/python3.4/site-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial_py3.py\", line 216, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial_py3.py\", line 204, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 219, in fit\n    max_steps=max_steps)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 479, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 166, in _get_train_ops\n    logits = self._logits(features, is_training=True)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 244, in _logits\n    dnn_feature_columns = self._get_dnn_feature_columns()\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 208, in _get_dnn_feature_columns\n    feature_column_ops.check_feature_columns(self._dnn_feature_columns)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/layers/python/layers/feature_column_ops.py\", line 318, in check_feature_columns\n    f.name))\nValueError: Duplicate feature column key found for column: education_embedding. This usually means that the column is almost identical to another column, and one must be discarded.", "body": "When using the \"deep\" functionality in the Wide and Deep Learning tutorial on Python 3.4, I get the following error:\n\n```\nValueError: Duplicate feature column key found for column: education_embedding. This usually means that the column is almost identical to another column, and one must be discarded.\n```\n\nLooks like a bug in tensorflow/contrib/layers/python/layers/feature_column.py in the _EmbeddingColumn class. The key(self) property is plagued by this bug: https://bugs.python.org/issue24931\n\nSo instead of coming out with a nice unique key, we get the following key for all _EmbeddingColumn instances: '_EmbeddingColumn()'\n\nThis causes the feature_column_ops.py's check_feature_columns() function to determine that the second _EmbeddingColumn instance is a duplicate since they keys of all of them are the same.\n### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\n\nI found this StackOverflow thread http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column/ where someone had the same problem, with no answers.  So I did the debugging and answered the question.\n### Environment info\n\nOperating System: Fedora Core 23\n\nInstalled version of CUDA and cuDNN: 8 and 5.1\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\n\n```\n[jpangburn@localhost examples]$ ls /usr/local/cuda/lib64/libcud*\n/usr/local/cuda/lib64/libcudadevrt.a\n/usr/local/cuda/lib64/libcudart.so\n/usr/local/cuda/lib64/libcudart.so.8.0\n/usr/local/cuda/lib64/libcudart.so.8.0.27\n/usr/local/cuda/lib64/libcudart_static.a\n/usr/local/cuda/lib64/libcudnn.so\n/usr/local/cuda/lib64/libcudnn.so.5\n/usr/local/cuda/lib64/libcudnn.so.5.1.5\n/usr/local/cuda/lib64/libcudnn_static.a\n\n```\n\nIf installed from source, provide \n1. The commit hash (`git rev-parse HEAD`)\n\n```\n[jpangburn@localhost examples]$ pwd\n/home/jpangburn/open_source/tensorflow/tensorflow/examples\n[jpangburn@localhost examples]$ git rev-parse HEAD\n17d0e46e6cc31af0bcf6e80ff4c5670d233b4940\n\n```\n1. The output of `bazel version`\n\n```\n[jpangburn@localhost examples]$ bazel version\n.\nBuild label: 0.3.1\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Fri Jul 29 09:09:52 2016 (1469783392)\nBuild timestamp: 1469783392\nBuild timestamp as int: 1469783392\n\n```\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\n\nBe in the \"tensorflow/tensorflow/examples/learn\" directory.  Patch the wide_n_deep_tutorial.py to work in Python 3 by replacing \"urllib\" instances with \"urllib.request\".  Then run it \"python3 wide_n_deep_tutorial_py3.py --train_data=train_data --test_data=test_data --model_type=wide_n_deep\", obviously replacing the train_data and test_data files with your own copies, or omitting those switches altogether to download the files fresh.\n### What other attempted solutions have you tried?\n\nI worked around the problem by creating a subclass of _EmbeddedColumn and using that, but not sure my key(self) property implementation is working because the accuracy result with wide_n_deep is worse than with just \"wide\".  You can see this in my answer to the StackOverflow question at http://stackoverflow.com/questions/39249704/tensorflow-valueerror-duplicate-feature-column-key-found-for-column/39268045#39268045\n### Logs or other output that would be helpful\n\n(If logs are large, please upload as attachment or provide link).\n\n```\nTraceback (most recent call last):\n  File \"wide_n_deep_tutorial_py3.py\", line 220, in <module>\n    tf.app.run()\n  File \"/usr/lib/python3.4/site-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial_py3.py\", line 216, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial_py3.py\", line 204, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 219, in fit\n    max_steps=max_steps)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 479, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 166, in _get_train_ops\n    logits = self._logits(features, is_training=True)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 244, in _logits\n    dnn_feature_columns = self._get_dnn_feature_columns()\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 208, in _get_dnn_feature_columns\n    feature_column_ops.check_feature_columns(self._dnn_feature_columns)\n  File \"/usr/lib/python3.4/site-packages/tensorflow/contrib/layers/python/layers/feature_column_ops.py\", line 318, in check_feature_columns\n    f.name))\nValueError: Duplicate feature column key found for column: education_embedding. This usually means that the column is almost identical to another column, and one must be discarded.\n\n```\n"}