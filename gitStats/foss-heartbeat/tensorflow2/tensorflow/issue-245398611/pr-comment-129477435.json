{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/129477435", "pull_request_review_id": 52252063, "id": 129477435, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTQ3NzQzNQ==", "diff_hunk": "@@ -0,0 +1,136 @@\n+# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Functional test for sgdr learning rate decay.\"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import math\n+\n+from sgdr_learning_rate_decay import sgdr_decay\n+from tensorflow.python.platform import googletest\n+from tensorflow.python.framework import test_util\n+from tensorflow.python.ops import gen_state_ops\n+from tensorflow.python.ops import state_ops\n+from tensorflow.python.framework import dtypes\n+\n+\n+class SGDRDecayTest(test_util.TensorFlowTestCase):\n+\n+  # Original iterative approach\n+  # https://github.com/loshchil/SGDR/blob/master/SGDR_WRNs.py\n+  def get_original_values(self, lr, Te, multFactor, iter_per_epoch, epochs):\n+    t0 = math.pi / 2.0\n+    tt = 0\n+    TeNext = Te\n+\n+    lr_values = []\n+    sh_lr = lr\n+    for epoch in range(epochs):\n+      for iteration in range(iter_per_epoch):\n+        # In the original approach training function is executed here\n+        lr_values.append(sh_lr)\n+\n+        dt = 2.0 * math.pi / float(2.0 * Te)\n+        tt = tt + float(dt) / iter_per_epoch\n+        if tt >= math.pi:\n+          tt = tt - math.pi\n+        curT = t0 + tt\n+        new_lr = lr * (1.0 + math.sin(curT)) / 2.0  # lr_min = 0, lr_max = lr\n+        sh_lr = new_lr\n+      if (epoch + 1) == TeNext:  # time to restart\n+        sh_lr = lr\n+        tt = 0                # by setting to 0 we set lr to lr_max, see above\n+        Te = Te * multFactor  # change the period of restarts\n+        TeNext = TeNext + Te  # note the next restart's epoch\n+\n+    return lr_values\n+\n+  def get_sgdr_values(self, lr, Te, multFactor, iters):\n+    step = gen_state_ops._variable(shape=[], dtype=dtypes.int32,\n+                                   name=\"step\", container=\"\", shared_name=\"\")\n+    state_ops.assign(step, 0).op.run()\n+\n+    decay = sgdr_decay(lr, step, Te, multFactor)\n+    lr_values = []\n+    for i in range(iters):\n+      lr_values.append(decay.eval())\n+      state_ops.assign(step, step + 1).op.run()\n+\n+    return lr_values\n+\n+  def testCompareToOriginal(self):\n+    with self.test_session():\n+      lr = 10.0\n+      t_e = 2\n+      t_mul = 3\n+      iters = 10\n+      epochs = 50\n+\n+      org_lr = self.get_original_values(lr, t_e, t_mul, iters, epochs)\n+      sgdr_lr = self.get_sgdr_values(lr, t_e*iters, t_mul, iters*epochs)\n+\n+      for org, sgdr in zip(org_lr, sgdr_lr):\n+        self.assertAllClose(org, sgdr)\n+\n+  def testMDecay(self):", "path": "tensorflow/contrib/training/python/training/sgdr_learning_rate_decay_test.py", "position": 92, "original_position": 89, "commit_id": "d330eb5eac6ba848842ee6966fa47cccefed33d9", "original_commit_id": "871a2c05b14decbff7b67b0ff0a2133a9ac10e72", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "These test names aren't very descriptive, can you add comments to each test explaining what scenario they are trying to test?  For example, my guess is in this one you are validating that an m_mul < 1 is properly computed according to the LR equation.", "created_at": "2017-07-26T03:59:29Z", "updated_at": "2017-08-08T19:53:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11749#discussion_r129477435", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11749", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/129477435"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11749#discussion_r129477435"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11749"}}, "body_html": "<p>These test names aren't very descriptive, can you add comments to each test explaining what scenario they are trying to test?  For example, my guess is in this one you are validating that an m_mul &lt; 1 is properly computed according to the LR equation.</p>", "body_text": "These test names aren't very descriptive, can you add comments to each test explaining what scenario they are trying to test?  For example, my guess is in this one you are validating that an m_mul < 1 is properly computed according to the LR equation."}