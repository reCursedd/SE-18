{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338056900", "html_url": "https://github.com/tensorflow/tensorflow/issues/11807#issuecomment-338056900", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11807", "id": 338056900, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODA1NjkwMA==", "user": {"login": "traviscross", "id": 1076834, "node_id": "MDQ6VXNlcjEwNzY4MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1076834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/traviscross", "html_url": "https://github.com/traviscross", "followers_url": "https://api.github.com/users/traviscross/followers", "following_url": "https://api.github.com/users/traviscross/following{/other_user}", "gists_url": "https://api.github.com/users/traviscross/gists{/gist_id}", "starred_url": "https://api.github.com/users/traviscross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/traviscross/subscriptions", "organizations_url": "https://api.github.com/users/traviscross/orgs", "repos_url": "https://api.github.com/users/traviscross/repos", "events_url": "https://api.github.com/users/traviscross/events{/privacy}", "received_events_url": "https://api.github.com/users/traviscross/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-19T22:35:09Z", "updated_at": "2017-10-19T22:35:09Z", "author_association": "NONE", "body_html": "<p>The issue here, which remains a problem on <code>master</code> as of commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/89f15928293f62b63404ffbdabbb6a3b07274ff8/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/89f15928293f62b63404ffbdabbb6a3b07274ff8\"><tt>89f1592</tt></a>, is that when you:</p>\n<pre><code>export TF_CUDA_CLANG=1\n./configure\n</code></pre>\n<p>...then we create broken bazel <code>select</code> blocks like this:</p>\n<pre><code>def _cuda_copts():\n  \"\"\"Gets the appropriate set of copts for (maybe) CUDA compilation.\n\n    If we're doing CUDA compilation, returns copts for our particular CUDA\n    compiler.  If we're not doing CUDA compilation, returns an empty list.\n\n    \"\"\"\n  return cuda_default_copts() + select({\n      \"//conditions:default\": [],\n      \"@local_config_cuda//cuda:using_nvcc\": ([\n          \"-nvcc_options=relaxed-constexpr\",\n          \"-nvcc_options=ftz=true\",\n      ]),\n      \"@local_config_cuda//cuda:using_clang\": ([\n          \"-fcuda-flush-denormals-to-zero\",\n      ]),\n  })\n</code></pre>\n<p>A build with this configuration reliably fails as documented above.  We can prove to ourselves this must be the issue by \"correcting\" the configuration and hard-coding the result we want for each <code>select</code>:</p>\n<pre><code>diff --git a/tensorflow/core/platform/default/build_config/BUILD b/tensorflow/core/platform/default/build_config/BUILD\nindex f746b15fe..6e9da1179 100644\n--- a/tensorflow/core/platform/default/build_config/BUILD\n+++ b/tensorflow/core/platform/default/build_config/BUILD\n@@ -34,11 +34,7 @@ tf_cuda_library(\n     deps = [\n         \"//tensorflow/stream_executor\",\n     ] + select({\n-        \"//tensorflow:using_cuda_clang\": [\"//tensorflow/stream_executor:cuda_platform\"],\n-        \"//tensorflow:using_cuda_nvcc\": [\"//tensorflow/stream_executor:cuda_platform\"],\n-        \"//tensorflow:using_cuda_clang_with_dynamic_build\": [],\n-        \"//tensorflow:using_cuda_nvcc_with_dynamic_build\": [],\n-        \"//conditions:default\": [],\n+        \"//conditions:default\": [\"//tensorflow/stream_executor:cuda_platform\"],\n     }) + select({\n         \"@local_config_cuda//cuda:darwin\": [\"IOKit\"],\n         \"//conditions:default\": [],\ndiff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl\nindex 3001a3747..2398abd34 100644\n--- a/tensorflow/tensorflow.bzl\n+++ b/tensorflow/tensorflow.bzl\n@@ -725,12 +725,7 @@ def _cuda_copts():\n \n     \"\"\"\n   return cuda_default_copts() + select({\n-      \"//conditions:default\": [],\n-      \"@local_config_cuda//cuda:using_nvcc\": ([\n-          \"-nvcc_options=relaxed-constexpr\",\n-          \"-nvcc_options=ftz=true\",\n-      ]),\n-      \"@local_config_cuda//cuda:using_clang\": ([\n+      \"//conditions:default\": ([\n           \"-fcuda-flush-denormals-to-zero\",\n       ]),\n   })\ndiff --git a/third_party/gpus/cuda/build_defs.bzl.tpl b/third_party/gpus/cuda/build_defs.bzl.tpl\nindex ca8bbc1ee..6d9ad452d 100644\n--- a/third_party/gpus/cuda/build_defs.bzl.tpl\n+++ b/third_party/gpus/cuda/build_defs.bzl.tpl\n@@ -7,9 +7,7 @@ def if_cuda(if_true, if_false = []):\n \n     \"\"\"\n     return select({\n-        \"@local_config_cuda//cuda:using_nvcc\": if_true,\n-        \"@local_config_cuda//cuda:using_clang\": if_true,\n-        \"//conditions:default\": if_false\n+        \"//conditions:default\": if_true\n     })\n \n \ndiff --git a/third_party/toolchains/gpus/cuda/build_defs.bzl b/third_party/toolchains/gpus/cuda/build_defs.bzl\nindex badaf4301..1b7aac066 100644\n--- a/third_party/toolchains/gpus/cuda/build_defs.bzl\n+++ b/third_party/toolchains/gpus/cuda/build_defs.bzl\n@@ -10,9 +10,7 @@ def if_cuda(if_true, if_false = []):\n \n     \"\"\"\n     return select({\n-        \"@local_config_cuda//cuda:using_nvcc\": if_true,\n-        \"@local_config_cuda//cuda:using_clang\": if_true,\n-        \"//conditions:default\": if_false\n+        \"//conditions:default\": if_true\n     })\n</code></pre>\n<p>That's a workaround, and clearly not the right way to fix it, but it does allow the build to get past this issue (and then, in my testing with <code>TF_CUDA_CLANG=1</code>, to fail in myriad other places for unrelated reasons).</p>", "body_text": "The issue here, which remains a problem on master as of commit 89f1592, is that when you:\nexport TF_CUDA_CLANG=1\n./configure\n\n...then we create broken bazel select blocks like this:\ndef _cuda_copts():\n  \"\"\"Gets the appropriate set of copts for (maybe) CUDA compilation.\n\n    If we're doing CUDA compilation, returns copts for our particular CUDA\n    compiler.  If we're not doing CUDA compilation, returns an empty list.\n\n    \"\"\"\n  return cuda_default_copts() + select({\n      \"//conditions:default\": [],\n      \"@local_config_cuda//cuda:using_nvcc\": ([\n          \"-nvcc_options=relaxed-constexpr\",\n          \"-nvcc_options=ftz=true\",\n      ]),\n      \"@local_config_cuda//cuda:using_clang\": ([\n          \"-fcuda-flush-denormals-to-zero\",\n      ]),\n  })\n\nA build with this configuration reliably fails as documented above.  We can prove to ourselves this must be the issue by \"correcting\" the configuration and hard-coding the result we want for each select:\ndiff --git a/tensorflow/core/platform/default/build_config/BUILD b/tensorflow/core/platform/default/build_config/BUILD\nindex f746b15fe..6e9da1179 100644\n--- a/tensorflow/core/platform/default/build_config/BUILD\n+++ b/tensorflow/core/platform/default/build_config/BUILD\n@@ -34,11 +34,7 @@ tf_cuda_library(\n     deps = [\n         \"//tensorflow/stream_executor\",\n     ] + select({\n-        \"//tensorflow:using_cuda_clang\": [\"//tensorflow/stream_executor:cuda_platform\"],\n-        \"//tensorflow:using_cuda_nvcc\": [\"//tensorflow/stream_executor:cuda_platform\"],\n-        \"//tensorflow:using_cuda_clang_with_dynamic_build\": [],\n-        \"//tensorflow:using_cuda_nvcc_with_dynamic_build\": [],\n-        \"//conditions:default\": [],\n+        \"//conditions:default\": [\"//tensorflow/stream_executor:cuda_platform\"],\n     }) + select({\n         \"@local_config_cuda//cuda:darwin\": [\"IOKit\"],\n         \"//conditions:default\": [],\ndiff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl\nindex 3001a3747..2398abd34 100644\n--- a/tensorflow/tensorflow.bzl\n+++ b/tensorflow/tensorflow.bzl\n@@ -725,12 +725,7 @@ def _cuda_copts():\n \n     \"\"\"\n   return cuda_default_copts() + select({\n-      \"//conditions:default\": [],\n-      \"@local_config_cuda//cuda:using_nvcc\": ([\n-          \"-nvcc_options=relaxed-constexpr\",\n-          \"-nvcc_options=ftz=true\",\n-      ]),\n-      \"@local_config_cuda//cuda:using_clang\": ([\n+      \"//conditions:default\": ([\n           \"-fcuda-flush-denormals-to-zero\",\n       ]),\n   })\ndiff --git a/third_party/gpus/cuda/build_defs.bzl.tpl b/third_party/gpus/cuda/build_defs.bzl.tpl\nindex ca8bbc1ee..6d9ad452d 100644\n--- a/third_party/gpus/cuda/build_defs.bzl.tpl\n+++ b/third_party/gpus/cuda/build_defs.bzl.tpl\n@@ -7,9 +7,7 @@ def if_cuda(if_true, if_false = []):\n \n     \"\"\"\n     return select({\n-        \"@local_config_cuda//cuda:using_nvcc\": if_true,\n-        \"@local_config_cuda//cuda:using_clang\": if_true,\n-        \"//conditions:default\": if_false\n+        \"//conditions:default\": if_true\n     })\n \n \ndiff --git a/third_party/toolchains/gpus/cuda/build_defs.bzl b/third_party/toolchains/gpus/cuda/build_defs.bzl\nindex badaf4301..1b7aac066 100644\n--- a/third_party/toolchains/gpus/cuda/build_defs.bzl\n+++ b/third_party/toolchains/gpus/cuda/build_defs.bzl\n@@ -10,9 +10,7 @@ def if_cuda(if_true, if_false = []):\n \n     \"\"\"\n     return select({\n-        \"@local_config_cuda//cuda:using_nvcc\": if_true,\n-        \"@local_config_cuda//cuda:using_clang\": if_true,\n-        \"//conditions:default\": if_false\n+        \"//conditions:default\": if_true\n     })\n\nThat's a workaround, and clearly not the right way to fix it, but it does allow the build to get past this issue (and then, in my testing with TF_CUDA_CLANG=1, to fail in myriad other places for unrelated reasons).", "body": "The issue here, which remains a problem on `master` as of commit 89f15928293f62b63404ffbdabbb6a3b07274ff8, is that when you:\r\n\r\n```\r\nexport TF_CUDA_CLANG=1\r\n./configure\r\n```\r\n\r\n...then we create broken bazel `select` blocks like this:\r\n\r\n```\r\ndef _cuda_copts():\r\n  \"\"\"Gets the appropriate set of copts for (maybe) CUDA compilation.\r\n\r\n    If we're doing CUDA compilation, returns copts for our particular CUDA\r\n    compiler.  If we're not doing CUDA compilation, returns an empty list.\r\n\r\n    \"\"\"\r\n  return cuda_default_copts() + select({\r\n      \"//conditions:default\": [],\r\n      \"@local_config_cuda//cuda:using_nvcc\": ([\r\n          \"-nvcc_options=relaxed-constexpr\",\r\n          \"-nvcc_options=ftz=true\",\r\n      ]),\r\n      \"@local_config_cuda//cuda:using_clang\": ([\r\n          \"-fcuda-flush-denormals-to-zero\",\r\n      ]),\r\n  })\r\n```\r\n\r\nA build with this configuration reliably fails as documented above.  We can prove to ourselves this must be the issue by \"correcting\" the configuration and hard-coding the result we want for each `select`:\r\n\r\n```\r\ndiff --git a/tensorflow/core/platform/default/build_config/BUILD b/tensorflow/core/platform/default/build_config/BUILD\r\nindex f746b15fe..6e9da1179 100644\r\n--- a/tensorflow/core/platform/default/build_config/BUILD\r\n+++ b/tensorflow/core/platform/default/build_config/BUILD\r\n@@ -34,11 +34,7 @@ tf_cuda_library(\r\n     deps = [\r\n         \"//tensorflow/stream_executor\",\r\n     ] + select({\r\n-        \"//tensorflow:using_cuda_clang\": [\"//tensorflow/stream_executor:cuda_platform\"],\r\n-        \"//tensorflow:using_cuda_nvcc\": [\"//tensorflow/stream_executor:cuda_platform\"],\r\n-        \"//tensorflow:using_cuda_clang_with_dynamic_build\": [],\r\n-        \"//tensorflow:using_cuda_nvcc_with_dynamic_build\": [],\r\n-        \"//conditions:default\": [],\r\n+        \"//conditions:default\": [\"//tensorflow/stream_executor:cuda_platform\"],\r\n     }) + select({\r\n         \"@local_config_cuda//cuda:darwin\": [\"IOKit\"],\r\n         \"//conditions:default\": [],\r\ndiff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl\r\nindex 3001a3747..2398abd34 100644\r\n--- a/tensorflow/tensorflow.bzl\r\n+++ b/tensorflow/tensorflow.bzl\r\n@@ -725,12 +725,7 @@ def _cuda_copts():\r\n \r\n     \"\"\"\r\n   return cuda_default_copts() + select({\r\n-      \"//conditions:default\": [],\r\n-      \"@local_config_cuda//cuda:using_nvcc\": ([\r\n-          \"-nvcc_options=relaxed-constexpr\",\r\n-          \"-nvcc_options=ftz=true\",\r\n-      ]),\r\n-      \"@local_config_cuda//cuda:using_clang\": ([\r\n+      \"//conditions:default\": ([\r\n           \"-fcuda-flush-denormals-to-zero\",\r\n       ]),\r\n   })\r\ndiff --git a/third_party/gpus/cuda/build_defs.bzl.tpl b/third_party/gpus/cuda/build_defs.bzl.tpl\r\nindex ca8bbc1ee..6d9ad452d 100644\r\n--- a/third_party/gpus/cuda/build_defs.bzl.tpl\r\n+++ b/third_party/gpus/cuda/build_defs.bzl.tpl\r\n@@ -7,9 +7,7 @@ def if_cuda(if_true, if_false = []):\r\n \r\n     \"\"\"\r\n     return select({\r\n-        \"@local_config_cuda//cuda:using_nvcc\": if_true,\r\n-        \"@local_config_cuda//cuda:using_clang\": if_true,\r\n-        \"//conditions:default\": if_false\r\n+        \"//conditions:default\": if_true\r\n     })\r\n \r\n \r\ndiff --git a/third_party/toolchains/gpus/cuda/build_defs.bzl b/third_party/toolchains/gpus/cuda/build_defs.bzl\r\nindex badaf4301..1b7aac066 100644\r\n--- a/third_party/toolchains/gpus/cuda/build_defs.bzl\r\n+++ b/third_party/toolchains/gpus/cuda/build_defs.bzl\r\n@@ -10,9 +10,7 @@ def if_cuda(if_true, if_false = []):\r\n \r\n     \"\"\"\r\n     return select({\r\n-        \"@local_config_cuda//cuda:using_nvcc\": if_true,\r\n-        \"@local_config_cuda//cuda:using_clang\": if_true,\r\n-        \"//conditions:default\": if_false\r\n+        \"//conditions:default\": if_true\r\n     })\r\n```\r\n\r\nThat's a workaround, and clearly not the right way to fix it, but it does allow the build to get past this issue (and then, in my testing with `TF_CUDA_CLANG=1`, to fail in myriad other places for unrelated reasons)."}