{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353651628", "html_url": "https://github.com/tensorflow/tensorflow/issues/152#issuecomment-353651628", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/152", "id": 353651628, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzY1MTYyOA==", "user": {"login": "cliffwoolley", "id": 9682398, "node_id": "MDQ6VXNlcjk2ODIzOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/9682398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cliffwoolley", "html_url": "https://github.com/cliffwoolley", "followers_url": "https://api.github.com/users/cliffwoolley/followers", "following_url": "https://api.github.com/users/cliffwoolley/following{/other_user}", "gists_url": "https://api.github.com/users/cliffwoolley/gists{/gist_id}", "starred_url": "https://api.github.com/users/cliffwoolley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cliffwoolley/subscriptions", "organizations_url": "https://api.github.com/users/cliffwoolley/orgs", "repos_url": "https://api.github.com/users/cliffwoolley/repos", "events_url": "https://api.github.com/users/cliffwoolley/events{/privacy}", "received_events_url": "https://api.github.com/users/cliffwoolley/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-22T18:26:31Z", "updated_at": "2017-12-22T18:26:31Z", "author_association": "NONE", "body_html": "<p>Of course it's <em>possible</em>.  Just as in C you'd use setenv().  I was just saying that for those particular environment variables, the choice is a bit specific to the combination of application and machine the application is run on.  So usually the user (or script) invoking the application would set those env vars rather than having the application set them unilaterally.  I'd argue for example that it's unwise for TF itself to set CUDA_DEVICE_ORDER, because it would undo the CUDA feature that this variable sits on top of, which is to, by default, have the \"best\" device be device 0; this is handy when you don't know much about the system you're running on and are just trying things out.  More sophisticated users just pick a GPU or, if really fancy, pick one based on NVML output as we're discussing here.  But we shouldn't, IMO, assume all users are so sophisticated.</p>", "body_text": "Of course it's possible.  Just as in C you'd use setenv().  I was just saying that for those particular environment variables, the choice is a bit specific to the combination of application and machine the application is run on.  So usually the user (or script) invoking the application would set those env vars rather than having the application set them unilaterally.  I'd argue for example that it's unwise for TF itself to set CUDA_DEVICE_ORDER, because it would undo the CUDA feature that this variable sits on top of, which is to, by default, have the \"best\" device be device 0; this is handy when you don't know much about the system you're running on and are just trying things out.  More sophisticated users just pick a GPU or, if really fancy, pick one based on NVML output as we're discussing here.  But we shouldn't, IMO, assume all users are so sophisticated.", "body": "Of course it's _possible_.  Just as in C you'd use setenv().  I was just saying that for those particular environment variables, the choice is a bit specific to the combination of application and machine the application is run on.  So usually the user (or script) invoking the application would set those env vars rather than having the application set them unilaterally.  I'd argue for example that it's unwise for TF itself to set CUDA_DEVICE_ORDER, because it would undo the CUDA feature that this variable sits on top of, which is to, by default, have the \"best\" device be device 0; this is handy when you don't know much about the system you're running on and are just trying things out.  More sophisticated users just pick a GPU or, if really fancy, pick one based on NVML output as we're discussing here.  But we shouldn't, IMO, assume all users are so sophisticated."}