{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11546", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11546/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11546/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11546/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11546", "id": 243331437, "node_id": "MDU6SXNzdWUyNDMzMzE0Mzc=", "number": 11546, "title": "PyImport_Import crash", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-17T08:56:26Z", "updated_at": "2017-07-18T04:38:51Z", "closed_at": "2017-07-18T04:38:51Z", "author_association": "NONE", "body_html": "<p>I recently ran into a problem, while using bazel to build a project.  This project is compiled as a dynamic linking library, using PyImport_Import to import python module. when there is \"import tensorflow as tf\" in the python file , application who calls the dynamic linking library crashed everytime, but when it\u2018s not there ,everything works just fine. where is the problem?<br>\nmy tensorflow version is 1.0.0,python 2.7.0,bazel 0.4.3</p>\n<p>here is the console information when the application crashes:</p>\n<blockquote>\n<p>F tensorflow/core/framework/function.cc:1015] Check failed: GetOpGradFactory()-&gt;insert({op, func}).second Duplicated gradient for Softmax</p>\n</blockquote>\n<p>here is the test python file looks like:<br>\n`from <strong>future</strong> import print_function<br>\nimport tensorflow as tf<br>\nimport os<br>\nimport time<br>\nfrom itertools import izip<br>\nimport numpy as np<br>\nimport wrapt<br>\nimport cv2<br>\ndef get_int( ):<br>\na = 10<br>\nb = 20<br>\nreturn a + b</p>\n<p>def get_str( s1, s2 ):<br>\n#return s1 + s2<br>\n#return 'Hello , TY'<br>\nreturn ('Hello, World', 10, 20)`</p>\n<p>here is the source code of .so file:<br>\n<code>   Py_Initialize(); if ( !Py_IsInitialized() ) { return -1; } PyEval_InitThreads(); PyThreadState *mainThreadState = NULL; //  save a pointer to the main PyThreadState object  mainThreadState = PyThreadState_Get(); //  release the lock  PyEval_ReleaseLock(); char* mockargv[1]={(char*)\"\"}; PySys_SetArgv(1,mockargv); PyRun_SimpleString(\"import sys\"); PyRun_SimpleString(\"sys.path.append('./')\"); pName_ = PyString_FromString(\"test_py\"); displayPyObject(pName_); if(pName_ == NULL){ return -1; } pModule_ = PyImport_Import(pName_); displayPyObject(pModule_);</code></p>\n<p>and here is the dynamic linking library part of my BUILD file<br>\n<code>cc_binary( name = \"test.so\", linkshared = 1, deps = [ \":test_lib\", ], ) cc_library( name = \"test_lib\", visibility = [\"//visibility:__subpackages__\"], srcs = glob([\"test.cpp\" ], ), includes=[\"test.h\"], linkopts = [ \"-lm -lpthread -L/usr/lib/python2.7 -lpython2.7 -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_ml -lfreeimage\" ], deps = [ \"//tensorflow/cc:cc_ops\", \"//tensorflow/core:framework\", \"//tensorflow/core:framework_internal\", \"//tensorflow/core:tensorflow\", ], ) </code></p>", "body_text": "I recently ran into a problem, while using bazel to build a project.  This project is compiled as a dynamic linking library, using PyImport_Import to import python module. when there is \"import tensorflow as tf\" in the python file , application who calls the dynamic linking library crashed everytime, but when it\u2018s not there ,everything works just fine. where is the problem?\nmy tensorflow version is 1.0.0,python 2.7.0,bazel 0.4.3\nhere is the console information when the application crashes:\n\nF tensorflow/core/framework/function.cc:1015] Check failed: GetOpGradFactory()->insert({op, func}).second Duplicated gradient for Softmax\n\nhere is the test python file looks like:\n`from future import print_function\nimport tensorflow as tf\nimport os\nimport time\nfrom itertools import izip\nimport numpy as np\nimport wrapt\nimport cv2\ndef get_int( ):\na = 10\nb = 20\nreturn a + b\ndef get_str( s1, s2 ):\n#return s1 + s2\n#return 'Hello , TY'\nreturn ('Hello, World', 10, 20)`\nhere is the source code of .so file:\n   Py_Initialize(); if ( !Py_IsInitialized() ) { return -1; } PyEval_InitThreads(); PyThreadState *mainThreadState = NULL; //  save a pointer to the main PyThreadState object  mainThreadState = PyThreadState_Get(); //  release the lock  PyEval_ReleaseLock(); char* mockargv[1]={(char*)\"\"}; PySys_SetArgv(1,mockargv); PyRun_SimpleString(\"import sys\"); PyRun_SimpleString(\"sys.path.append('./')\"); pName_ = PyString_FromString(\"test_py\"); displayPyObject(pName_); if(pName_ == NULL){ return -1; } pModule_ = PyImport_Import(pName_); displayPyObject(pModule_);\nand here is the dynamic linking library part of my BUILD file\ncc_binary( name = \"test.so\", linkshared = 1, deps = [ \":test_lib\", ], ) cc_library( name = \"test_lib\", visibility = [\"//visibility:__subpackages__\"], srcs = glob([\"test.cpp\" ], ), includes=[\"test.h\"], linkopts = [ \"-lm -lpthread -L/usr/lib/python2.7 -lpython2.7 -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_ml -lfreeimage\" ], deps = [ \"//tensorflow/cc:cc_ops\", \"//tensorflow/core:framework\", \"//tensorflow/core:framework_internal\", \"//tensorflow/core:tensorflow\", ], )", "body": "I recently ran into a problem, while using bazel to build a project.  This project is compiled as a dynamic linking library, using PyImport_Import to import python module. when there is \"import tensorflow as tf\" in the python file , application who calls the dynamic linking library crashed everytime, but when it\u2018s not there ,everything works just fine. where is the problem?\r\nmy tensorflow version is 1.0.0,python 2.7.0,bazel 0.4.3\r\n\r\n\r\nhere is the console information when the application crashes:\r\n\r\n> F tensorflow/core/framework/function.cc:1015] Check failed: GetOpGradFactory()->insert({op, func}).second Duplicated gradient for Softmax\r\n\r\n\r\nhere is the test python file looks like: \r\n`from __future__ import print_function\r\nimport tensorflow as tf\r\nimport os\r\nimport time\r\nfrom itertools import izip\r\nimport numpy as np\r\nimport wrapt\r\nimport cv2\r\ndef get_int( ):\r\n    a = 10\r\n    b = 20\r\n    return a + b\r\n\r\ndef get_str( s1, s2 ):\r\n    #return s1 + s2  \r\n    #return 'Hello , TY'  \r\n    return ('Hello, World', 10, 20)`\r\n\r\nhere is the source code of .so file:\r\n`   Py_Initialize();\r\n    if ( !Py_IsInitialized() ) {\r\n        return -1;\r\n    }\r\n    PyEval_InitThreads();\r\n    PyThreadState *mainThreadState = NULL;\r\n    //  save a pointer to the main PyThreadState object \r\n    mainThreadState = PyThreadState_Get();\r\n    //  release the lock \r\n    PyEval_ReleaseLock();\r\n    char* mockargv[1]={(char*)\"\"};\r\n    PySys_SetArgv(1,mockargv);\r\n    PyRun_SimpleString(\"import sys\");\r\n    PyRun_SimpleString(\"sys.path.append('./')\");\r\n    pName_ = PyString_FromString(\"test_py\");\r\n    displayPyObject(pName_);\r\n    if(pName_ == NULL){\r\n        return -1;\r\n    }\r\n    pModule_ = PyImport_Import(pName_);\r\n    displayPyObject(pModule_);`\r\n\r\nand here is the dynamic linking library part of my BUILD file\r\n`cc_binary(\r\n    name = \"test.so\",\r\n    linkshared = 1,\r\n    deps = [\r\n        \":test_lib\",\r\n    ],\r\n)\r\ncc_library(\r\n    name = \"test_lib\",\r\n    visibility = [\"//visibility:__subpackages__\"],\r\n    srcs = glob([\"test.cpp\"\r\n             ],\r\n        ),\r\n    includes=[\"test.h\"],\r\n    linkopts = [\r\n\"-lm -lpthread -L/usr/lib/python2.7 -lpython2.7 -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_ml -lfreeimage\"\r\n    ],\r\n    deps = [\r\n        \"//tensorflow/cc:cc_ops\",\r\n        \"//tensorflow/core:framework\",\r\n        \"//tensorflow/core:framework_internal\",\r\n        \"//tensorflow/core:tensorflow\",\r\n    ],\r\n)\r\n`\r\n\r\n\r\n"}