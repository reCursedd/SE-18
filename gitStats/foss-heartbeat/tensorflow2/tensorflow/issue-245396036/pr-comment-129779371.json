{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/129779371", "pull_request_review_id": 52586051, "id": 129779371, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTc3OTM3MQ==", "diff_hunk": "@@ -522,6 +522,39 @@ XLA_TEST_F(FusionTest, DISABLED_ON_CPU(ReduceWindow)) {\n       *ExecuteAndTransfer(std::move(hlo_module), {}));\n }\n \n+XLA_TEST_F(FusionTest, SharedConstant) {\n+  auto hlo_module = CreateNewModule();", "path": "tensorflow/compiler/xla/tests/fusion_test.cc", "position": null, "original_position": 5, "commit_id": "75f742cf464848dffd1dcd0c30b47b9f8cf09070", "original_commit_id": "ce3b9bb0e06ecf3ca1f517c5fe64b5e639b2891a", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "body": "done.  \r\n\r\nas it happens, the CreateFusionInstruction does the right thing at the moment (provided the list of operations is in the right order).  but nowhere it is asserted that the contents of the fusion will be the same in this case. \r\n\r\nI came upon it because I had the constant at a different place in the list at first, and in that case you get duplication - the CreateFusionInstruction is iterative, and can make quite a mess when partially complete.\r\n\r\n", "created_at": "2017-07-27T08:18:40Z", "updated_at": "2017-07-27T08:21:16Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11748#discussion_r129779371", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11748", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/129779371"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11748#discussion_r129779371"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11748"}}, "body_html": "<p>done.</p>\n<p>as it happens, the CreateFusionInstruction does the right thing at the moment (provided the list of operations is in the right order).  but nowhere it is asserted that the contents of the fusion will be the same in this case.</p>\n<p>I came upon it because I had the constant at a different place in the list at first, and in that case you get duplication - the CreateFusionInstruction is iterative, and can make quite a mess when partially complete.</p>", "body_text": "done.\nas it happens, the CreateFusionInstruction does the right thing at the moment (provided the list of operations is in the right order).  but nowhere it is asserted that the contents of the fusion will be the same in this case.\nI came upon it because I had the constant at a different place in the list at first, and in that case you get duplication - the CreateFusionInstruction is iterative, and can make quite a mess when partially complete.", "in_reply_to_id": 129648650}