{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22454", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22454/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22454/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22454/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22454", "id": 362763318, "node_id": "MDU6SXNzdWUzNjI3NjMzMTg=", "number": 22454, "title": "Dynamic loading of CUDA libraries", "user": {"login": "superbobry", "id": 185856, "node_id": "MDQ6VXNlcjE4NTg1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/185856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/superbobry", "html_url": "https://github.com/superbobry", "followers_url": "https://api.github.com/users/superbobry/followers", "following_url": "https://api.github.com/users/superbobry/following{/other_user}", "gists_url": "https://api.github.com/users/superbobry/gists{/gist_id}", "starred_url": "https://api.github.com/users/superbobry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/superbobry/subscriptions", "organizations_url": "https://api.github.com/users/superbobry/orgs", "repos_url": "https://api.github.com/users/superbobry/repos", "events_url": "https://api.github.com/users/superbobry/events{/privacy}", "received_events_url": "https://api.github.com/users/superbobry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-09-21T20:27:44Z", "updated_at": "2018-09-24T07:09:08Z", "closed_at": "2018-09-24T07:09:08Z", "author_association": "MEMBER", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: N/A</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: N/A</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: N/A</li>\n<li><strong>TensorFlow version (use command below)</strong>: N/A</li>\n<li><strong>Python version</strong>: N/A</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Currently, the TensorFlow Python library is released in two flavours: CPU-only and CPU/GPU. The latter is dynamically linked with CUDA libraries and fails to load if they are not available in the linker path.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">ImportError</span>: dlopen([<span class=\"pl-c1\">...</span>]<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>_pywrap_tensorflow_internal.so, <span class=\"pl-c1\">10</span>): Library <span class=\"pl-k\">not</span> loaded: <span class=\"pl-k\">@</span>rpath<span class=\"pl-k\">/</span>libcublas.8.0.dylib\n  Referenced <span class=\"pl-k\">from</span>: [<span class=\"pl-c1\">...</span>]<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>_pywrap_tensorflow_internal.so\n  Reason: image <span class=\"pl-k\">not</span> found</pre></div>\n<p>I suspect that it might be possible to load CUDA libraries dynamically at runtime. This would allow having a single TensorFlow build which attempts to load CUDA, and if it is not available, falls back to CPU-only ops.</p>\n<p>It hard for me to estimate the feasibility of the proposal for the current TensorFlow runtime implementation, so it might as well be the case, that the proposed change is too big/intrusive to be practical.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): N/A\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): N/A\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): N/A\nTensorFlow version (use command below): N/A\nPython version: N/A\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nDescribe the problem\nCurrently, the TensorFlow Python library is released in two flavours: CPU-only and CPU/GPU. The latter is dynamically linked with CUDA libraries and fails to load if they are not available in the linker path.\nImportError: dlopen([...]/tensorflow/python/_pywrap_tensorflow_internal.so, 10): Library not loaded: @rpath/libcublas.8.0.dylib\n  Referenced from: [...]/tensorflow/python/_pywrap_tensorflow_internal.so\n  Reason: image not found\nI suspect that it might be possible to load CUDA libraries dynamically at runtime. This would allow having a single TensorFlow build which attempts to load CUDA, and if it is not available, falls back to CPU-only ops.\nIt hard for me to estimate the feasibility of the proposal for the current TensorFlow runtime implementation, so it might as well be the case, that the proposed change is too big/intrusive to be practical.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: N/A\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: N/A\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: N/A\r\n- **TensorFlow installed from (source or binary)**: N/A\r\n- **TensorFlow version (use command below)**: N/A\r\n- **Python version**: N/A\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\n\r\nCurrently, the TensorFlow Python library is released in two flavours: CPU-only and CPU/GPU. The latter is dynamically linked with CUDA libraries and fails to load if they are not available in the linker path.\r\n\r\n```python\r\nImportError: dlopen([...]/tensorflow/python/_pywrap_tensorflow_internal.so, 10): Library not loaded: @rpath/libcublas.8.0.dylib\r\n  Referenced from: [...]/tensorflow/python/_pywrap_tensorflow_internal.so\r\n  Reason: image not found\r\n```\r\n\r\nI suspect that it might be possible to load CUDA libraries dynamically at runtime. This would allow having a single TensorFlow build which attempts to load CUDA, and if it is not available, falls back to CPU-only ops. \r\n\r\nIt hard for me to estimate the feasibility of the proposal for the current TensorFlow runtime implementation, so it might as well be the case, that the proposed change is too big/intrusive to be practical. "}