{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/465", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/465/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/465/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/465", "id": 121493618, "node_id": "MDU6SXNzdWUxMjE0OTM2MTg=", "number": 465, "title": "Allow mixing values with tensors in lists that specify the shape of a Tensor.", "user": {"login": "cesarsalgado", "id": 1115209, "node_id": "MDQ6VXNlcjExMTUyMDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1115209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarsalgado", "html_url": "https://github.com/cesarsalgado", "followers_url": "https://api.github.com/users/cesarsalgado/followers", "following_url": "https://api.github.com/users/cesarsalgado/following{/other_user}", "gists_url": "https://api.github.com/users/cesarsalgado/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarsalgado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarsalgado/subscriptions", "organizations_url": "https://api.github.com/users/cesarsalgado/orgs", "repos_url": "https://api.github.com/users/cesarsalgado/repos", "events_url": "https://api.github.com/users/cesarsalgado/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarsalgado/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-10T14:11:58Z", "updated_at": "2017-02-09T22:37:48Z", "closed_at": "2016-05-16T18:37:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>There are many methods that expect a list or a tensor specifying a shape as argument. It is often the case that I want to pass an argument such as shape=[t1, v2] where t1 is a tensor with shape = TensorShape([]) and v2 is a value. This is currently not possible in many (maybe all) methods.</p>\n<p>My current work around is the following.<br>\n1- convert v2 to a tensor t2 with tf.convert_to_tensor<br>\n2- use t1 = tf.expand_dims(0, t1) and t2 = tf.expand_dims(0, t2) to add a dimension of size 1 to the tensors<br>\n3- pass the argument as shape=tf.concat(0, [t1, t2])</p>\n<p>Am I missing a simpler way to accomplish that? Is it a good idea to add a feature that allows passing mixture of tensors and values inside a list as argument?</p>\n<p>Edit: I just found out that the method tf.pack allows lists with tensors and values as argument. But the method tf.truncated_normal for instance, doesn't allow.<br>\nI also realized that I can use tf.pack to replace the steps (1,2,3) above. But it still would be nice if all methods had the same behaviour.</p>", "body_text": "There are many methods that expect a list or a tensor specifying a shape as argument. It is often the case that I want to pass an argument such as shape=[t1, v2] where t1 is a tensor with shape = TensorShape([]) and v2 is a value. This is currently not possible in many (maybe all) methods.\nMy current work around is the following.\n1- convert v2 to a tensor t2 with tf.convert_to_tensor\n2- use t1 = tf.expand_dims(0, t1) and t2 = tf.expand_dims(0, t2) to add a dimension of size 1 to the tensors\n3- pass the argument as shape=tf.concat(0, [t1, t2])\nAm I missing a simpler way to accomplish that? Is it a good idea to add a feature that allows passing mixture of tensors and values inside a list as argument?\nEdit: I just found out that the method tf.pack allows lists with tensors and values as argument. But the method tf.truncated_normal for instance, doesn't allow.\nI also realized that I can use tf.pack to replace the steps (1,2,3) above. But it still would be nice if all methods had the same behaviour.", "body": "There are many methods that expect a list or a tensor specifying a shape as argument. It is often the case that I want to pass an argument such as shape=[t1, v2] where t1 is a tensor with shape = TensorShape([]) and v2 is a value. This is currently not possible in many (maybe all) methods.\n\nMy current work around is the following.\n1- convert v2 to a tensor t2 with tf.convert_to_tensor\n2- use t1 = tf.expand_dims(0, t1) and t2 = tf.expand_dims(0, t2) to add a dimension of size 1 to the tensors\n3- pass the argument as shape=tf.concat(0, [t1, t2])\n\nAm I missing a simpler way to accomplish that? Is it a good idea to add a feature that allows passing mixture of tensors and values inside a list as argument?\n\nEdit: I just found out that the method tf.pack allows lists with tensors and values as argument. But the method tf.truncated_normal for instance, doesn't allow.\nI also realized that I can use tf.pack to replace the steps (1,2,3) above. But it still would be nice if all methods had the same behaviour.\n"}