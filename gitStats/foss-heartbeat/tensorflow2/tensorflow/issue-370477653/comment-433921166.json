{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/433921166", "html_url": "https://github.com/tensorflow/tensorflow/pull/23011#issuecomment-433921166", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23011", "id": 433921166, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzkyMTE2Ng==", "user": {"login": "Dref360", "id": 8976546, "node_id": "MDQ6VXNlcjg5NzY1NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8976546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dref360", "html_url": "https://github.com/Dref360", "followers_url": "https://api.github.com/users/Dref360/followers", "following_url": "https://api.github.com/users/Dref360/following{/other_user}", "gists_url": "https://api.github.com/users/Dref360/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dref360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dref360/subscriptions", "organizations_url": "https://api.github.com/users/Dref360/orgs", "repos_url": "https://api.github.com/users/Dref360/repos", "events_url": "https://api.github.com/users/Dref360/events{/privacy}", "received_events_url": "https://api.github.com/users/Dref360/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-29T14:02:34Z", "updated_at": "2018-10-29T14:02:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ubuntu 16.04 Python 3.6<br>\nI'm able to reproduce the bug with this script:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tensorflow.keras.utils <span class=\"pl-k\">import</span> GeneratorEnqueuer, OrderedEnqueuer, Sequence\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> time\n\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MySeq</span>(<span class=\"pl-e\">Sequence</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">idx</span>):\n        time.sleep(<span class=\"pl-c1\">1</span>)\n        <span class=\"pl-k\">return</span> idx\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__len__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">100</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">my_gen</span>(<span class=\"pl-smi\">seq</span>):\n    <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n        <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> seq:\n            <span class=\"pl-k\">yield</span> i\n\n\nmyseq <span class=\"pl-k\">=</span> MySeq()\ngen <span class=\"pl-k\">=</span> GeneratorEnqueuer(my_gen(myseq),<span class=\"pl-v\">use_multiprocessing</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ngen.start(<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">10</span>)\ng <span class=\"pl-k\">=</span> gen.get()\n\ns <span class=\"pl-k\">=</span> time.time()\nacc <span class=\"pl-k\">=</span> [i <span class=\"pl-k\">for</span> i,_ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(g,<span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>))]\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Gen<span class=\"pl-pds\">\"</span></span>, time.time() <span class=\"pl-k\">-</span> s)\n\ngen <span class=\"pl-k\">=</span> OrderedEnqueuer(myseq,<span class=\"pl-v\">use_multiprocessing</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ngen.start(<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">10</span>)\ng <span class=\"pl-k\">=</span> gen.get()\n\ns <span class=\"pl-k\">=</span> time.time()\nacc <span class=\"pl-k\">=</span> [i <span class=\"pl-k\">for</span> i,_ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(g,<span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>))]\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Seq<span class=\"pl-pds\">\"</span></span>, time.time() <span class=\"pl-k\">-</span> s)</pre></div>\n<p>I get a bunch of exception like EOFError, BrokenPipe.</p>\n<p>Running the CI takes 5-10 days on TF, if you submit this PR on keras-team/keras, we would be able to iterate faster on your PR.<br>\nAlso, I don't get how we could get a speedup with your implementation of GeneratorEnqueuer? If we take the lock between each next call we won't get a speedup?</p>", "body_text": "Ubuntu 16.04 Python 3.6\nI'm able to reproduce the bug with this script:\nfrom tensorflow.keras.utils import GeneratorEnqueuer, OrderedEnqueuer, Sequence\nimport numpy as np\nimport time\n\n\nclass MySeq(Sequence):\n    def __getitem__(self, idx):\n        time.sleep(1)\n        return idx\n    def __len__(self):\n        return 100\n\ndef my_gen(seq):\n    while True:\n        for i in seq:\n            yield i\n\n\nmyseq = MySeq()\ngen = GeneratorEnqueuer(my_gen(myseq),use_multiprocessing=True)\ngen.start(10,10)\ng = gen.get()\n\ns = time.time()\nacc = [i for i,_ in zip(g,range(100))]\nprint(\"Gen\", time.time() - s)\n\ngen = OrderedEnqueuer(myseq,use_multiprocessing=True)\ngen.start(10,10)\ng = gen.get()\n\ns = time.time()\nacc = [i for i,_ in zip(g,range(100))]\nprint(\"Seq\", time.time() - s)\nI get a bunch of exception like EOFError, BrokenPipe.\nRunning the CI takes 5-10 days on TF, if you submit this PR on keras-team/keras, we would be able to iterate faster on your PR.\nAlso, I don't get how we could get a speedup with your implementation of GeneratorEnqueuer? If we take the lock between each next call we won't get a speedup?", "body": "Ubuntu 16.04 Python 3.6\r\nI'm able to reproduce the bug with this script:\r\n```python\r\nfrom tensorflow.keras.utils import GeneratorEnqueuer, OrderedEnqueuer, Sequence\r\nimport numpy as np\r\nimport time\r\n\r\n\r\nclass MySeq(Sequence):\r\n    def __getitem__(self, idx):\r\n        time.sleep(1)\r\n        return idx\r\n    def __len__(self):\r\n        return 100\r\n\r\ndef my_gen(seq):\r\n    while True:\r\n        for i in seq:\r\n            yield i\r\n\r\n\r\nmyseq = MySeq()\r\ngen = GeneratorEnqueuer(my_gen(myseq),use_multiprocessing=True)\r\ngen.start(10,10)\r\ng = gen.get()\r\n\r\ns = time.time()\r\nacc = [i for i,_ in zip(g,range(100))]\r\nprint(\"Gen\", time.time() - s)\r\n\r\ngen = OrderedEnqueuer(myseq,use_multiprocessing=True)\r\ngen.start(10,10)\r\ng = gen.get()\r\n\r\ns = time.time()\r\nacc = [i for i,_ in zip(g,range(100))]\r\nprint(\"Seq\", time.time() - s)\r\n```\r\n\r\nI get a bunch of exception like EOFError, BrokenPipe.\r\n\r\nRunning the CI takes 5-10 days on TF, if you submit this PR on keras-team/keras, we would be able to iterate faster on your PR.\r\nAlso, I don't get how we could get a speedup with your implementation of GeneratorEnqueuer? If we take the lock between each next call we won't get a speedup?\r\n\r\n"}