{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12065", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12065/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12065/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12065/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12065", "id": 248275793, "node_id": "MDU6SXNzdWUyNDgyNzU3OTM=", "number": 12065, "title": "Feature Request - Seq2Seq Inference Helper w/o Embeddings", "user": {"login": "RylanSchaeffer", "id": 8942987, "node_id": "MDQ6VXNlcjg5NDI5ODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8942987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RylanSchaeffer", "html_url": "https://github.com/RylanSchaeffer", "followers_url": "https://api.github.com/users/RylanSchaeffer/followers", "following_url": "https://api.github.com/users/RylanSchaeffer/following{/other_user}", "gists_url": "https://api.github.com/users/RylanSchaeffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/RylanSchaeffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RylanSchaeffer/subscriptions", "organizations_url": "https://api.github.com/users/RylanSchaeffer/orgs", "repos_url": "https://api.github.com/users/RylanSchaeffer/repos", "events_url": "https://api.github.com/users/RylanSchaeffer/events{/privacy}", "received_events_url": "https://api.github.com/users/RylanSchaeffer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 42, "created_at": "2017-08-06T22:18:57Z", "updated_at": "2018-11-12T21:23:44Z", "closed_at": "2017-08-17T17:05:59Z", "author_association": "NONE", "body_html": "<p><code>tf.contrib.seq2seq</code> has two <code>Helper</code> classes to use during inference, <code>SampleEmbeddingHelper</code> and <code>GreedyEmbeddingHelper</code>. However, both make use of embeddings, which is unhelpful when building sequence-to-sequence models that operate on non-embedded target sequences (my target sequence already consists of meaningful vectors).</p>\n<p>I'd like a new <code>Helper</code> class that pipes the output of the decoder RNN at one time step into the decoder RNN at the following time step. It should permit the <code>start_tokens</code> to be vectors (tensors?) and the <code>end_token</code> to be a vector (tensor?) as well. Right now, I'm attempting to use <code>ScheduledOutputTrainingHelper</code> with <code>sampling_probability</code> set equal to 1.0, but I'm struggling to get it to work. Something like a simple <code>OutputInferenceHelper</code> would be very nice :)</p>\n<p>If there already exists an easy way to do what I'm suggesting, please let me know!</p>", "body_text": "tf.contrib.seq2seq has two Helper classes to use during inference, SampleEmbeddingHelper and GreedyEmbeddingHelper. However, both make use of embeddings, which is unhelpful when building sequence-to-sequence models that operate on non-embedded target sequences (my target sequence already consists of meaningful vectors).\nI'd like a new Helper class that pipes the output of the decoder RNN at one time step into the decoder RNN at the following time step. It should permit the start_tokens to be vectors (tensors?) and the end_token to be a vector (tensor?) as well. Right now, I'm attempting to use ScheduledOutputTrainingHelper with sampling_probability set equal to 1.0, but I'm struggling to get it to work. Something like a simple OutputInferenceHelper would be very nice :)\nIf there already exists an easy way to do what I'm suggesting, please let me know!", "body": "`tf.contrib.seq2seq` has two `Helper` classes to use during inference, `SampleEmbeddingHelper` and `GreedyEmbeddingHelper`. However, both make use of embeddings, which is unhelpful when building sequence-to-sequence models that operate on non-embedded target sequences (my target sequence already consists of meaningful vectors).\r\n\r\nI'd like a new `Helper` class that pipes the output of the decoder RNN at one time step into the decoder RNN at the following time step. It should permit the `start_tokens` to be vectors (tensors?) and the `end_token` to be a vector (tensor?) as well. Right now, I'm attempting to use `ScheduledOutputTrainingHelper` with `sampling_probability` set equal to 1.0, but I'm struggling to get it to work. Something like a simple `OutputInferenceHelper` would be very nice :)\r\n\r\nIf there already exists an easy way to do what I'm suggesting, please let me know!\r\n\r\n"}