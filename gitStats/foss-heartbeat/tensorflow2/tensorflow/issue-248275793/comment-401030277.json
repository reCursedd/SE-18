{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/401030277", "html_url": "https://github.com/tensorflow/tensorflow/issues/12065#issuecomment-401030277", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12065", "id": 401030277, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTAzMDI3Nw==", "user": {"login": "MrfksIv", "id": 10939319, "node_id": "MDQ6VXNlcjEwOTM5MzE5", "avatar_url": "https://avatars2.githubusercontent.com/u/10939319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrfksIv", "html_url": "https://github.com/MrfksIv", "followers_url": "https://api.github.com/users/MrfksIv/followers", "following_url": "https://api.github.com/users/MrfksIv/following{/other_user}", "gists_url": "https://api.github.com/users/MrfksIv/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrfksIv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrfksIv/subscriptions", "organizations_url": "https://api.github.com/users/MrfksIv/orgs", "repos_url": "https://api.github.com/users/MrfksIv/repos", "events_url": "https://api.github.com/users/MrfksIv/events{/privacy}", "received_events_url": "https://api.github.com/users/MrfksIv/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-28T13:14:50Z", "updated_at": "2018-06-28T13:14:50Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20181107\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/VinoJose\">@VinoJose</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=34604047\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fritzfitzpatrick\">@fritzfitzpatrick</a><br>\nBy following <a href=\"https://stackoverflow.com/questions/44639647/tensorflow-1-2-how-to-setup-time-series-prediction-at-inference-time-using-seq2s\" rel=\"nofollow\">this code</a> I have successfully trained the network with a RMSE of 0.02.<br>\nThe problem with the code is that the training-helper expects and requires the true +1 timesteps which are of course unknown during inference. My naive solution to this was to give  to the network the predicted sequence as the correct one.<br>\nThe <code>predict_sequence_end</code> below is test data neither trained, nor validated on.</p>\n<p><code>for i in range(steps_ahead): predict_sequence_end = sess.run(h, feed_dict={enc_inp:  predict_sequence_end.reshape((1,batch_steps,1)),  expect:predict_sequence_end.reshape((1,batch_steps,1)),  expect_length: [n_steps]* predict_sequence_end.shape[0], keep_prob: keepprob})</code></p>\n<p>From my limited understanding, this bypasses the problem of the training helper, does it not? By not running the train_op, I assume that the network weights remain constant. This gives quite good results, although I am not sure if I am 'cheating' in any way. Do you have any ideas on this?<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/10939319/42036454-3f5157f6-7aee-11e8-9e69-c5b63d140cec.png\"><img src=\"https://user-images.githubusercontent.com/10939319/42036454-3f5157f6-7aee-11e8-9e69-c5b63d140cec.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>", "body_text": "@VinoJose @fritzfitzpatrick\nBy following this code I have successfully trained the network with a RMSE of 0.02.\nThe problem with the code is that the training-helper expects and requires the true +1 timesteps which are of course unknown during inference. My naive solution to this was to give  to the network the predicted sequence as the correct one.\nThe predict_sequence_end below is test data neither trained, nor validated on.\nfor i in range(steps_ahead): predict_sequence_end = sess.run(h, feed_dict={enc_inp:  predict_sequence_end.reshape((1,batch_steps,1)),  expect:predict_sequence_end.reshape((1,batch_steps,1)),  expect_length: [n_steps]* predict_sequence_end.shape[0], keep_prob: keepprob})\nFrom my limited understanding, this bypasses the problem of the training helper, does it not? By not running the train_op, I assume that the network weights remain constant. This gives quite good results, although I am not sure if I am 'cheating' in any way. Do you have any ideas on this?", "body": "@VinoJose @fritzfitzpatrick \r\nBy following [this code](https://stackoverflow.com/questions/44639647/tensorflow-1-2-how-to-setup-time-series-prediction-at-inference-time-using-seq2s) I have successfully trained the network with a RMSE of 0.02. \r\nThe problem with the code is that the training-helper expects and requires the true +1 timesteps which are of course unknown during inference. My naive solution to this was to give  to the network the predicted sequence as the correct one. \r\nThe `predict_sequence_end` below is test data neither trained, nor validated on. \r\n\r\n`for i in range(steps_ahead):\r\n    predict_sequence_end = sess.run(h, feed_dict={enc_inp: \r\n    predict_sequence_end.reshape((1,batch_steps,1)), \r\n                                                                 expect:predict_sequence_end.reshape((1,batch_steps,1)), \r\n                                                                 expect_length: [n_steps]* predict_sequence_end.shape[0],\r\n                                                                 keep_prob: keepprob})` \r\n\r\nFrom my limited understanding, this bypasses the problem of the training helper, does it not? By not running the train_op, I assume that the network weights remain constant. This gives quite good results, although I am not sure if I am 'cheating' in any way. Do you have any ideas on this?  \r\n![image](https://user-images.githubusercontent.com/10939319/42036454-3f5157f6-7aee-11e8-9e69-c5b63d140cec.png)\r\n"}