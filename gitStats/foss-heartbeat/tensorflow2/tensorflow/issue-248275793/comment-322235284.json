{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/322235284", "html_url": "https://github.com/tensorflow/tensorflow/issues/12065#issuecomment-322235284", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12065", "id": 322235284, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjIzNTI4NA==", "user": {"login": "RylanSchaeffer", "id": 8942987, "node_id": "MDQ6VXNlcjg5NDI5ODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8942987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RylanSchaeffer", "html_url": "https://github.com/RylanSchaeffer", "followers_url": "https://api.github.com/users/RylanSchaeffer/followers", "following_url": "https://api.github.com/users/RylanSchaeffer/following{/other_user}", "gists_url": "https://api.github.com/users/RylanSchaeffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/RylanSchaeffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RylanSchaeffer/subscriptions", "organizations_url": "https://api.github.com/users/RylanSchaeffer/orgs", "repos_url": "https://api.github.com/users/RylanSchaeffer/repos", "events_url": "https://api.github.com/users/RylanSchaeffer/events{/privacy}", "received_events_url": "https://api.github.com/users/RylanSchaeffer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-14T16:15:19Z", "updated_at": "2017-08-14T16:18:47Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=25152111\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppyht2\">@ppyht2</a> That's correct. However, I think there's an easier solution if all you want is the decoder's output to be passed as input at the next time step and you don't care about sample_ids.</p>\n<p>If you look at <code>dynamic_decode</code>, you'll see that the function <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/decoder.py#L234\">calls its decoder's step method</a>. Assuming you're using a <code>BasicDecoder</code>, the <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/basic_decoder.py#L126\">step method does three things</a>:</p>\n<ol>\n<li>Runs the decoder's cell for 1 step (<a href=\"https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/basic_decoder.py#L139\">139</a>)</li>\n<li>Feeds the cell's output to the <code>Helper</code>'s <code>sample_fn</code> to generate <code>sample_ids</code> (<a href=\"https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/basic_decoder.py#L142\">142</a>)</li>\n<li>Feeds the cell's output and the sample_ids (and a few other parameters) to the <code>Helper</code>'s <code>next_input_fn</code> (<a href=\"https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/basic_decoder.py#L144\">144</a>)</li>\n</ol>\n<p>If all you want is the cell's outputs to be the decoder's inputs at the next time step, you can write a <code>CustomHelper</code> with a <code>sample_fn</code> that returns arbitrary integers (to pass a type and shape later check) and then write a <code>next_inputs_fn</code> that returns <code>outputs</code> as <code>next_inputs</code> if the decoder isn't done.</p>\n<p>Hope that makes sense!</p>\n<p>Disclaimer: My <code>CustomHelper</code> isn't working, so I'm not sure if this is a viable solution.</p>", "body_text": "@ppyht2 That's correct. However, I think there's an easier solution if all you want is the decoder's output to be passed as input at the next time step and you don't care about sample_ids.\nIf you look at dynamic_decode, you'll see that the function calls its decoder's step method. Assuming you're using a BasicDecoder, the step method does three things:\n\nRuns the decoder's cell for 1 step (139)\nFeeds the cell's output to the Helper's sample_fn to generate sample_ids (142)\nFeeds the cell's output and the sample_ids (and a few other parameters) to the Helper's next_input_fn (144)\n\nIf all you want is the cell's outputs to be the decoder's inputs at the next time step, you can write a CustomHelper with a sample_fn that returns arbitrary integers (to pass a type and shape later check) and then write a next_inputs_fn that returns outputs as next_inputs if the decoder isn't done.\nHope that makes sense!\nDisclaimer: My CustomHelper isn't working, so I'm not sure if this is a viable solution.", "body": "@ppyht2 That's correct. However, I think there's an easier solution if all you want is the decoder's output to be passed as input at the next time step and you don't care about sample_ids.\r\n\r\nIf you look at `dynamic_decode`, you'll see that the function [calls its decoder's step method](https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/decoder.py#L234). Assuming you're using a `BasicDecoder`, the [step method does three things](https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/basic_decoder.py#L126):\r\n\r\n1) Runs the decoder's cell for 1 step ([139](https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/basic_decoder.py#L139))\r\n2) Feeds the cell's output to the `Helper`'s `sample_fn` to generate `sample_ids` ([142](https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/basic_decoder.py#L142))\r\n3) Feeds the cell's output and the sample_ids (and a few other parameters) to the `Helper`'s `next_input_fn` ([144](https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/seq2seq/python/ops/basic_decoder.py#L144))\r\n\r\nIf all you want is the cell's outputs to be the decoder's inputs at the next time step, you can write a `CustomHelper` with a `sample_fn` that returns arbitrary integers (to pass a type and shape later check) and then write a `next_inputs_fn` that returns `outputs` as `next_inputs` if the decoder isn't done.\r\n\r\nHope that makes sense!\r\n\r\nDisclaimer: My `CustomHelper` isn't working, so I'm not sure if this is a viable solution."}