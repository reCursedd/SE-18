{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355516288", "html_url": "https://github.com/tensorflow/tensorflow/issues/15767#issuecomment-355516288", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15767", "id": 355516288, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTUxNjI4OA==", "user": {"login": "namrata-ibm", "id": 21953668, "node_id": "MDQ6VXNlcjIxOTUzNjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/21953668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/namrata-ibm", "html_url": "https://github.com/namrata-ibm", "followers_url": "https://api.github.com/users/namrata-ibm/followers", "following_url": "https://api.github.com/users/namrata-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/namrata-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/namrata-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/namrata-ibm/subscriptions", "organizations_url": "https://api.github.com/users/namrata-ibm/orgs", "repos_url": "https://api.github.com/users/namrata-ibm/repos", "events_url": "https://api.github.com/users/namrata-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/namrata-ibm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-05T09:59:06Z", "updated_at": "2018-01-05T09:59:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10000148\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jiefangxuanyan\">@jiefangxuanyan</a>, thank you for your inputs.</p>\n<p>As you pointed out, output of <code>tostring</code> on x86 and s390x as seen is:</p>\n<pre><code>x86:\n expected_result.tostring() --  ['0x0', '0x3c', '0x0', '0xc0', '0x0', '0xc2', '0x0', '0x44']\ns390x:\n expected_result.tostring() --  ['0x3c', '0x0', '0xc0', '0x0', '0xc2', '0x0', '0x44', '0x0']\n</code></pre>\n<p>I tried below change in that test case:</p>\n<pre><code>if sys.byteorder == \"big\":\n  result = decode.eval(feed_dict={in_bytes: [expected_result.byteswap().tostring()]})\nelse:\n   result = decode.eval(feed_dict={in_bytes: [expected_result.tostring()]})\n</code></pre>\n<p>With this change, test passes on both platforms.</p>\n<p>But I wonder if the functionality of decode_raw is correct for float? What will happen in actual scenario during decode_raw operation for float? Will <code>decode_raw_op.cc</code> need changes when input is not a byte array?</p>", "body_text": "@jiefangxuanyan, thank you for your inputs.\nAs you pointed out, output of tostring on x86 and s390x as seen is:\nx86:\n expected_result.tostring() --  ['0x0', '0x3c', '0x0', '0xc0', '0x0', '0xc2', '0x0', '0x44']\ns390x:\n expected_result.tostring() --  ['0x3c', '0x0', '0xc0', '0x0', '0xc2', '0x0', '0x44', '0x0']\n\nI tried below change in that test case:\nif sys.byteorder == \"big\":\n  result = decode.eval(feed_dict={in_bytes: [expected_result.byteswap().tostring()]})\nelse:\n   result = decode.eval(feed_dict={in_bytes: [expected_result.tostring()]})\n\nWith this change, test passes on both platforms.\nBut I wonder if the functionality of decode_raw is correct for float? What will happen in actual scenario during decode_raw operation for float? Will decode_raw_op.cc need changes when input is not a byte array?", "body": "@jiefangxuanyan, thank you for your inputs.\r\n\r\nAs you pointed out, output of `tostring` on x86 and s390x as seen is: \r\n```\r\nx86:\r\n expected_result.tostring() --  ['0x0', '0x3c', '0x0', '0xc0', '0x0', '0xc2', '0x0', '0x44']\r\ns390x:\r\n expected_result.tostring() --  ['0x3c', '0x0', '0xc0', '0x0', '0xc2', '0x0', '0x44', '0x0']\r\n```\r\nI tried below change in that test case:\r\n```\r\nif sys.byteorder == \"big\":\r\n  result = decode.eval(feed_dict={in_bytes: [expected_result.byteswap().tostring()]})\r\nelse:\r\n   result = decode.eval(feed_dict={in_bytes: [expected_result.tostring()]})\r\n```\r\nWith this change, test passes on both platforms.\r\n\r\nBut I wonder if the functionality of decode_raw is correct for float? What will happen in actual scenario during decode_raw operation for float? Will `decode_raw_op.cc` need changes when input is not a byte array?\r\n\r\n"}