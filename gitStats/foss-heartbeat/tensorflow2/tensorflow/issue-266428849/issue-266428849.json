{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13802", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13802/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13802/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13802/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13802", "id": 266428849, "node_id": "MDU6SXNzdWUyNjY0Mjg4NDk=", "number": 13802, "title": "deadlock in fork() because of OpenBlas", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-10-18T09:47:29Z", "updated_at": "2017-10-23T16:05:21Z", "closed_at": "2017-10-23T16:05:20Z", "author_association": "NONE", "body_html": "<p>TensorFlow: 1.3.0 (v1.3.0-rc2-20-g0787eee)</p>\n<p>I'm not exactly sure whether this is a TF specific problem, or OpenBlas specific, or at what place this should be fixed.</p>\n<p>At some part in my code, I want to start a subprocess, via <code>Popen</code>, and it uses <code>fork()</code> internally. Before that, I already initialized the TF session and thus have initialized the thread pools.</p>\n<p>The <code>fork()</code> will cause a deadlock because OpenBlas has used <code>pthread_atfork()</code> to register <code>blas_thread_shutdown_()</code> to do some cleanup, which will wait for a lock, which probably was acquired by some of the other threads at that time. Stacktrace:</p>\n<pre><code>#0  0x00002b289b1702ad in __lll_lock_wait () from /u/zeyer/tools/glibc217/libpthread.so.0\n#1  0x00002b289b16dabd in pthread_cond_signal@@GLIBC_2.3.2 () from /u/zeyer/tools/glibc217/libpthread.so.0\n#2  0x00002b294d9fb68e in blas_thread_shutdown_ () from /usr/lib/libopenblas.so.0\n#3  0x00002b289b44b965 in fork () from /u/zeyer/tools/glibc217/libc.so.6\n#4  0x00002b28ae1f1c47 in subprocess_fork_exec (self=&lt;optimized out&gt;, args=&lt;optimized out&gt;)\n    at /tmp/python3-20170710-4344-zt9hmb/Python-3.6.1/Modules/_posixsubprocess.c:672\n#5  0x00002b289acf79c9 in _PyCFunction_FastCallDict (func_obj=0x2b28adfa34c8, args=0x1653030, nargs=&lt;optimized out&gt;, \n    kwargs=kwargs@entry=0x0) at Objects/methodobject.c:234\n#6  0x00002b289acf7c97 in _PyCFunction_FastCallKeywords (func=func@entry=0x2b28adfa34c8, stack=stack@entry=0x1653030, \n    nargs=&lt;optimized out&gt;, kwnames=kwnames@entry=0x0) at Objects/methodobject.c:295\n#7  0x00002b289ad8b171 in call_function (pp_stack=pp_stack@entry=0x7ffe97057f30, oparg=oparg@entry=17, \n    kwnames=kwnames@entry=0x0) at Python/ceval.c:4798\n#8  0x00002b289ad8eeb7 in _PyEval_EvalFrameDefault (f=&lt;optimized out&gt;, throwflag=&lt;optimized out&gt;) at Python/ceval.c:3284\n...\n</code></pre>\n<p><a href=\"https://github.com/xianyi/OpenBLAS/issues/240\" data-hovercard-type=\"issue\" data-hovercard-url=\"/xianyi/OpenBLAS/issues/240/hovercard\">This OpenBLAS issue</a> and <a href=\"https://trac.sagemath.org/ticket/22021\" rel=\"nofollow\">this Sage issue</a> might be related. Basically the Sage solution is to disable the multi-threading support of OpenBLAS by setting <code>OMP_NUM_THREADS=1</code> but I actually want to use the multi-threading support if possible.</p>", "body_text": "TensorFlow: 1.3.0 (v1.3.0-rc2-20-g0787eee)\nI'm not exactly sure whether this is a TF specific problem, or OpenBlas specific, or at what place this should be fixed.\nAt some part in my code, I want to start a subprocess, via Popen, and it uses fork() internally. Before that, I already initialized the TF session and thus have initialized the thread pools.\nThe fork() will cause a deadlock because OpenBlas has used pthread_atfork() to register blas_thread_shutdown_() to do some cleanup, which will wait for a lock, which probably was acquired by some of the other threads at that time. Stacktrace:\n#0  0x00002b289b1702ad in __lll_lock_wait () from /u/zeyer/tools/glibc217/libpthread.so.0\n#1  0x00002b289b16dabd in pthread_cond_signal@@GLIBC_2.3.2 () from /u/zeyer/tools/glibc217/libpthread.so.0\n#2  0x00002b294d9fb68e in blas_thread_shutdown_ () from /usr/lib/libopenblas.so.0\n#3  0x00002b289b44b965 in fork () from /u/zeyer/tools/glibc217/libc.so.6\n#4  0x00002b28ae1f1c47 in subprocess_fork_exec (self=<optimized out>, args=<optimized out>)\n    at /tmp/python3-20170710-4344-zt9hmb/Python-3.6.1/Modules/_posixsubprocess.c:672\n#5  0x00002b289acf79c9 in _PyCFunction_FastCallDict (func_obj=0x2b28adfa34c8, args=0x1653030, nargs=<optimized out>, \n    kwargs=kwargs@entry=0x0) at Objects/methodobject.c:234\n#6  0x00002b289acf7c97 in _PyCFunction_FastCallKeywords (func=func@entry=0x2b28adfa34c8, stack=stack@entry=0x1653030, \n    nargs=<optimized out>, kwnames=kwnames@entry=0x0) at Objects/methodobject.c:295\n#7  0x00002b289ad8b171 in call_function (pp_stack=pp_stack@entry=0x7ffe97057f30, oparg=oparg@entry=17, \n    kwnames=kwnames@entry=0x0) at Python/ceval.c:4798\n#8  0x00002b289ad8eeb7 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3284\n...\n\nThis OpenBLAS issue and this Sage issue might be related. Basically the Sage solution is to disable the multi-threading support of OpenBLAS by setting OMP_NUM_THREADS=1 but I actually want to use the multi-threading support if possible.", "body": "TensorFlow: 1.3.0 (v1.3.0-rc2-20-g0787eee)\r\n\r\nI'm not exactly sure whether this is a TF specific problem, or OpenBlas specific, or at what place this should be fixed.\r\n\r\nAt some part in my code, I want to start a subprocess, via `Popen`, and it uses `fork()` internally. Before that, I already initialized the TF session and thus have initialized the thread pools.\r\n\r\nThe `fork()` will cause a deadlock because OpenBlas has used `pthread_atfork()` to register `blas_thread_shutdown_()` to do some cleanup, which will wait for a lock, which probably was acquired by some of the other threads at that time. Stacktrace:\r\n\r\n```\r\n#0  0x00002b289b1702ad in __lll_lock_wait () from /u/zeyer/tools/glibc217/libpthread.so.0\r\n#1  0x00002b289b16dabd in pthread_cond_signal@@GLIBC_2.3.2 () from /u/zeyer/tools/glibc217/libpthread.so.0\r\n#2  0x00002b294d9fb68e in blas_thread_shutdown_ () from /usr/lib/libopenblas.so.0\r\n#3  0x00002b289b44b965 in fork () from /u/zeyer/tools/glibc217/libc.so.6\r\n#4  0x00002b28ae1f1c47 in subprocess_fork_exec (self=<optimized out>, args=<optimized out>)\r\n    at /tmp/python3-20170710-4344-zt9hmb/Python-3.6.1/Modules/_posixsubprocess.c:672\r\n#5  0x00002b289acf79c9 in _PyCFunction_FastCallDict (func_obj=0x2b28adfa34c8, args=0x1653030, nargs=<optimized out>, \r\n    kwargs=kwargs@entry=0x0) at Objects/methodobject.c:234\r\n#6  0x00002b289acf7c97 in _PyCFunction_FastCallKeywords (func=func@entry=0x2b28adfa34c8, stack=stack@entry=0x1653030, \r\n    nargs=<optimized out>, kwnames=kwnames@entry=0x0) at Objects/methodobject.c:295\r\n#7  0x00002b289ad8b171 in call_function (pp_stack=pp_stack@entry=0x7ffe97057f30, oparg=oparg@entry=17, \r\n    kwnames=kwnames@entry=0x0) at Python/ceval.c:4798\r\n#8  0x00002b289ad8eeb7 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3284\r\n...\r\n```\r\n\r\n[This OpenBLAS issue](https://github.com/xianyi/OpenBLAS/issues/240) and [this Sage issue](https://trac.sagemath.org/ticket/22021) might be related. Basically the Sage solution is to disable the multi-threading support of OpenBLAS by setting `OMP_NUM_THREADS=1` but I actually want to use the multi-threading support if possible.\r\n"}