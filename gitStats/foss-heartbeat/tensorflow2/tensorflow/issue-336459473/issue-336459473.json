{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20367", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20367/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20367/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20367/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20367", "id": 336459473, "node_id": "MDU6SXNzdWUzMzY0NTk0NzM=", "number": 20367, "title": "Using new tensorflow op for matrix exponential in a c++ library that already uses tensorflow as third party", "user": {"login": "juncy", "id": 3078809, "node_id": "MDQ6VXNlcjMwNzg4MDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3078809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juncy", "html_url": "https://github.com/juncy", "followers_url": "https://api.github.com/users/juncy/followers", "following_url": "https://api.github.com/users/juncy/following{/other_user}", "gists_url": "https://api.github.com/users/juncy/gists{/gist_id}", "starred_url": "https://api.github.com/users/juncy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juncy/subscriptions", "organizations_url": "https://api.github.com/users/juncy/orgs", "repos_url": "https://api.github.com/users/juncy/repos", "events_url": "https://api.github.com/users/juncy/events{/privacy}", "received_events_url": "https://api.github.com/users/juncy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-28T03:24:30Z", "updated_at": "2018-06-28T03:26:33Z", "closed_at": "2018-06-28T03:26:33Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code</strong>: I'm using ZeroOut CPU versionfrom <a href=\"https://github.com/MatteoRagni/tf.ZeroOut.gpu\">https://github.com/MatteoRagni/tf.ZeroOut.gpu</a></li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04 LTS</li>\n<li><strong>TensorFlow installed from</strong>: source</li>\n<li><strong>TensorFlow version</strong> : 1.8.0</li>\n<li><strong>Python version</strong>: Python 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.14.1</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: gcc 5.4.0,  cmake 3.5.1</li>\n<li><strong>CUDA/cuDNN version</strong>: release 9.0, V9.0.176</li>\n<li><strong>GPU model and memory</strong>: GeForce GT 730/PCIe/SSE2</li>\n</ul>\n<p>Hallo to everyone! That's my first time asking a question in tensorflow. I will try my best to formulate my question properly.</p>\n<p>My plan is:</p>\n<ul>\n<li>implement a new tensorflow GPU op for the matrix exponential,using Eigen unsupported MatrixFunctions or the already existing tensorflow matrix exponential op</li>\n<li>add the gradient</li>\n<li>use the new op in a c++ library, which already uses tensorflow as third party.</li>\n</ul>\n<p>I have started from the basics, and I realized that I don't know how to use my custom operation in c++. I registered the ZeroOut op for cpu from tensorflow c++ tutorial as in <a href=\"https://github.com/MatteoRagni/tf.ZeroOut.gpu\">https://github.com/MatteoRagni/tf.ZeroOut.gpu</a> but now I don't know how to use that in my c++ code.</p>\n<p>I tried to add the ZeroOut.so file to my lib as shared library, but it didn't work. Maybe I'm doing something wrong? My CMakeList.txt is attached. And including  ZeroOut.cpp in my c++ files hasn't make any difference until now.<br>\nI looked in tensorflow documentation, stackoverflow and the internet but I couln't find an answer to my questions. Hopefully I didn't miss anything.</p>\n<p>Can you help me? Maybe giving an example of the required CMakeList.txt, even if not related to mine?</p>\n<p>Speaking about my general plan, I would also like to have some advices from more experienced programmers. I know tensorflow has a matrix exponential op, but as far as I know it doesn't work for GPU (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"283082243\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/15465\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/15465/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/15465\">#15465</a>) and has no gradient implementation. Should I add this features to the existing op rather than registering a new one? And what about using Eigen unsupported MatrixFunctions in a new user op?</p>\n<h3>Source code / logs</h3>\n<p>Here is my CMakeList.txt, which also creates the whole library I'm working with:</p>\n<pre><code>cmake_minimum_required(VERSION 2.8)\nproject(Project1)\n\nset(CMAKE_BUILD_TYPE \"Release\") # Debug Release\nset(CMAKE_CXX_FLAGS_RELEASE \"$ENV{CXXFLAGS} -std=c++14 -O3 -Wall                 -fopenmp\")\nSET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n\n#-------------path of 3rd party libraries-------------\n# special libs.\nfind_package(Boost COMPONENTS filesystem iostreams regex)\nfind_package(FFTW)\nfind_package(NLopt)\nfind_package(HDF5 COMPONENTS CXX)\n\nset(EXTERN_LIB_ROOT ${PROJECT_SOURCE_DIR}/3rd-party)\n\nset(TENSORFLOW_ROOT /.../tensorflow)\nset(TF_INCLUDE_DIRS \"${TENSORFLOW_ROOT}\" \"${TENSORFLOW_ROOT}/bazel-  genfiles\" \"${TENSORFLOW_ROOT}/bazel-tensorflow/external/protobuf_archive/src\")\n\n# lib dirs.\nset(LUA_LIBRARIES \"${EXTERN_LIB_ROOT}/lua/liblua53.so\") #5.3.4\nset(LINENOISE_LIBRARIES \"${EXTERN_LIB_ROOT}/linenoise-ng/build/liblinenoise.so\")\nset(YACAS_LIBRARIES \"${EXTERN_LIB_ROOT}/yacas/cyacas/libyacas/build/libyacas.so\")\n\n\nset(TF_LIBRARIES ${TENSORFLOW_ROOT}/bazel-bin/tensorflow/libtensorflow_cc.so\n    ${TENSORFLOW_ROOT}/tensorflow/core/user_ops/tf.ZeroOut.gpu-master/zero_out.so) \n#-------------ssl headers-------------\ninclude_directories(${PROJECT_SOURCE_DIR}/src\n    ${EXTERN_LIB_ROOT}/eigen\n    ${EXTERN_LIB_ROOT}/gnuplot-iostream\n    ${EXTERN_LIB_ROOT}/\n    ${EXTERN_LIB_ROOT}/linenoise-ng/include\n    ${EXTERN_LIB_ROOT}/yacas/cyacas/libyacas/include\n    ${EXTERN_LIB_ROOT}/lua/src\n    ${NLOPT_INCLUDE_DIRS}\n    ${FFTW_INCLUDES}\n    ${TF_INCLUDE_DIRS}\n    ${Boost_INCLUDE_DIRS}\n    ${HDF5_INCLUDE_DIRS}\n    ${TENSORFLOW_ROOT}) \n\noption(BUILD_SHARED_LIBS \"build shared library\" ON)\nset(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)\n\n#-------------ssl kernel lib-------------\nfile(GLOB_RECURSE _src_list\n    LIST_DIRECTORIES false\n    RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"${PROJECT_SOURCE_DIR}/src/*.h\" \"${PROJECT_SOURCE_DIR}/src/*.cpp\" \"\")\n\nadd_library(ssl SHARED ${_src_list})\n\nset(SSL_LIBRARIES ${TF_LIBRARIES} ${LUA_LIBRARIES} ${Boost_LIBRARIES}     ${NLOPT_LIBRARIES} ${FFTW_LIBRARIES} ${LINENOISE_LIBRARIES} ${YACAS_LIBRARIES} ${HDF5_CXX_LIBRARIES}) #${TF_LIBRARIES}\n\ntarget_link_libraries(ssl ${SSL_LIBRARIES} dl)\n\nadd_executable(Project1 main.cpp)\ntarget_link_libraries(Project1 ssl)\n</code></pre>", "body_text": "System information\n\nHave I written custom code: I'm using ZeroOut CPU versionfrom https://github.com/MatteoRagni/tf.ZeroOut.gpu\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04 LTS\nTensorFlow installed from: source\nTensorFlow version : 1.8.0\nPython version: Python 3.5.2\nBazel version (if compiling from source): 0.14.1\nGCC/Compiler version (if compiling from source): gcc 5.4.0,  cmake 3.5.1\nCUDA/cuDNN version: release 9.0, V9.0.176\nGPU model and memory: GeForce GT 730/PCIe/SSE2\n\nHallo to everyone! That's my first time asking a question in tensorflow. I will try my best to formulate my question properly.\nMy plan is:\n\nimplement a new tensorflow GPU op for the matrix exponential,using Eigen unsupported MatrixFunctions or the already existing tensorflow matrix exponential op\nadd the gradient\nuse the new op in a c++ library, which already uses tensorflow as third party.\n\nI have started from the basics, and I realized that I don't know how to use my custom operation in c++. I registered the ZeroOut op for cpu from tensorflow c++ tutorial as in https://github.com/MatteoRagni/tf.ZeroOut.gpu but now I don't know how to use that in my c++ code.\nI tried to add the ZeroOut.so file to my lib as shared library, but it didn't work. Maybe I'm doing something wrong? My CMakeList.txt is attached. And including  ZeroOut.cpp in my c++ files hasn't make any difference until now.\nI looked in tensorflow documentation, stackoverflow and the internet but I couln't find an answer to my questions. Hopefully I didn't miss anything.\nCan you help me? Maybe giving an example of the required CMakeList.txt, even if not related to mine?\nSpeaking about my general plan, I would also like to have some advices from more experienced programmers. I know tensorflow has a matrix exponential op, but as far as I know it doesn't work for GPU (see #15465) and has no gradient implementation. Should I add this features to the existing op rather than registering a new one? And what about using Eigen unsupported MatrixFunctions in a new user op?\nSource code / logs\nHere is my CMakeList.txt, which also creates the whole library I'm working with:\ncmake_minimum_required(VERSION 2.8)\nproject(Project1)\n\nset(CMAKE_BUILD_TYPE \"Release\") # Debug Release\nset(CMAKE_CXX_FLAGS_RELEASE \"$ENV{CXXFLAGS} -std=c++14 -O3 -Wall                 -fopenmp\")\nSET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n\n#-------------path of 3rd party libraries-------------\n# special libs.\nfind_package(Boost COMPONENTS filesystem iostreams regex)\nfind_package(FFTW)\nfind_package(NLopt)\nfind_package(HDF5 COMPONENTS CXX)\n\nset(EXTERN_LIB_ROOT ${PROJECT_SOURCE_DIR}/3rd-party)\n\nset(TENSORFLOW_ROOT /.../tensorflow)\nset(TF_INCLUDE_DIRS \"${TENSORFLOW_ROOT}\" \"${TENSORFLOW_ROOT}/bazel-  genfiles\" \"${TENSORFLOW_ROOT}/bazel-tensorflow/external/protobuf_archive/src\")\n\n# lib dirs.\nset(LUA_LIBRARIES \"${EXTERN_LIB_ROOT}/lua/liblua53.so\") #5.3.4\nset(LINENOISE_LIBRARIES \"${EXTERN_LIB_ROOT}/linenoise-ng/build/liblinenoise.so\")\nset(YACAS_LIBRARIES \"${EXTERN_LIB_ROOT}/yacas/cyacas/libyacas/build/libyacas.so\")\n\n\nset(TF_LIBRARIES ${TENSORFLOW_ROOT}/bazel-bin/tensorflow/libtensorflow_cc.so\n    ${TENSORFLOW_ROOT}/tensorflow/core/user_ops/tf.ZeroOut.gpu-master/zero_out.so) \n#-------------ssl headers-------------\ninclude_directories(${PROJECT_SOURCE_DIR}/src\n    ${EXTERN_LIB_ROOT}/eigen\n    ${EXTERN_LIB_ROOT}/gnuplot-iostream\n    ${EXTERN_LIB_ROOT}/\n    ${EXTERN_LIB_ROOT}/linenoise-ng/include\n    ${EXTERN_LIB_ROOT}/yacas/cyacas/libyacas/include\n    ${EXTERN_LIB_ROOT}/lua/src\n    ${NLOPT_INCLUDE_DIRS}\n    ${FFTW_INCLUDES}\n    ${TF_INCLUDE_DIRS}\n    ${Boost_INCLUDE_DIRS}\n    ${HDF5_INCLUDE_DIRS}\n    ${TENSORFLOW_ROOT}) \n\noption(BUILD_SHARED_LIBS \"build shared library\" ON)\nset(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)\n\n#-------------ssl kernel lib-------------\nfile(GLOB_RECURSE _src_list\n    LIST_DIRECTORIES false\n    RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"${PROJECT_SOURCE_DIR}/src/*.h\" \"${PROJECT_SOURCE_DIR}/src/*.cpp\" \"\")\n\nadd_library(ssl SHARED ${_src_list})\n\nset(SSL_LIBRARIES ${TF_LIBRARIES} ${LUA_LIBRARIES} ${Boost_LIBRARIES}     ${NLOPT_LIBRARIES} ${FFTW_LIBRARIES} ${LINENOISE_LIBRARIES} ${YACAS_LIBRARIES} ${HDF5_CXX_LIBRARIES}) #${TF_LIBRARIES}\n\ntarget_link_libraries(ssl ${SSL_LIBRARIES} dl)\n\nadd_executable(Project1 main.cpp)\ntarget_link_libraries(Project1 ssl)", "body": "### System information\r\n- **Have I written custom code**: I'm using ZeroOut CPU versionfrom https://github.com/MatteoRagni/tf.ZeroOut.gpu\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04 LTS\r\n- **TensorFlow installed from**: source\r\n- **TensorFlow version** : 1.8.0\r\n- **Python version**: Python 3.5.2\r\n- **Bazel version (if compiling from source)**: 0.14.1\r\n- **GCC/Compiler version (if compiling from source)**: gcc 5.4.0,  cmake 3.5.1\r\n- **CUDA/cuDNN version**: release 9.0, V9.0.176\r\n- **GPU model and memory**: GeForce GT 730/PCIe/SSE2\r\n\r\n\r\nHallo to everyone! That's my first time asking a question in tensorflow. I will try my best to formulate my question properly.\r\n\r\nMy plan is: \r\n\r\n - implement a new tensorflow GPU op for the matrix exponential,using Eigen unsupported MatrixFunctions or the already existing tensorflow matrix exponential op\r\n - add the gradient\r\n - use the new op in a c++ library, which already uses tensorflow as third party.\r\n\r\nI have started from the basics, and I realized that I don't know how to use my custom operation in c++. I registered the ZeroOut op for cpu from tensorflow c++ tutorial as in https://github.com/MatteoRagni/tf.ZeroOut.gpu but now I don't know how to use that in my c++ code. \r\n\r\nI tried to add the ZeroOut.so file to my lib as shared library, but it didn't work. Maybe I'm doing something wrong? My CMakeList.txt is attached. And including  ZeroOut.cpp in my c++ files hasn't make any difference until now.\r\nI looked in tensorflow documentation, stackoverflow and the internet but I couln't find an answer to my questions. Hopefully I didn't miss anything.\r\n\r\nCan you help me? Maybe giving an example of the required CMakeList.txt, even if not related to mine?\r\n\r\nSpeaking about my general plan, I would also like to have some advices from more experienced programmers. I know tensorflow has a matrix exponential op, but as far as I know it doesn't work for GPU (see #15465) and has no gradient implementation. Should I add this features to the existing op rather than registering a new one? And what about using Eigen unsupported MatrixFunctions in a new user op?\r\n\r\n### Source code / logs\r\nHere is my CMakeList.txt, which also creates the whole library I'm working with:\r\n\r\n    cmake_minimum_required(VERSION 2.8)\r\n    project(Project1)\r\n\r\n    set(CMAKE_BUILD_TYPE \"Release\") # Debug Release\r\n    set(CMAKE_CXX_FLAGS_RELEASE \"$ENV{CXXFLAGS} -std=c++14 -O3 -Wall                 -fopenmp\")\r\n    SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\r\n\r\n    #-------------path of 3rd party libraries-------------\r\n    # special libs.\r\n    find_package(Boost COMPONENTS filesystem iostreams regex)\r\n    find_package(FFTW)\r\n    find_package(NLopt)\r\n    find_package(HDF5 COMPONENTS CXX)\r\n\r\n    set(EXTERN_LIB_ROOT ${PROJECT_SOURCE_DIR}/3rd-party)\r\n\r\n    set(TENSORFLOW_ROOT /.../tensorflow)\r\n    set(TF_INCLUDE_DIRS \"${TENSORFLOW_ROOT}\" \"${TENSORFLOW_ROOT}/bazel-  genfiles\" \"${TENSORFLOW_ROOT}/bazel-tensorflow/external/protobuf_archive/src\")\r\n\r\n    # lib dirs.\r\n    set(LUA_LIBRARIES \"${EXTERN_LIB_ROOT}/lua/liblua53.so\") #5.3.4\r\n    set(LINENOISE_LIBRARIES \"${EXTERN_LIB_ROOT}/linenoise-ng/build/liblinenoise.so\")\r\n    set(YACAS_LIBRARIES \"${EXTERN_LIB_ROOT}/yacas/cyacas/libyacas/build/libyacas.so\")\r\n\r\n\r\n    set(TF_LIBRARIES ${TENSORFLOW_ROOT}/bazel-bin/tensorflow/libtensorflow_cc.so\r\n        ${TENSORFLOW_ROOT}/tensorflow/core/user_ops/tf.ZeroOut.gpu-master/zero_out.so) \r\n    #-------------ssl headers-------------\r\n    include_directories(${PROJECT_SOURCE_DIR}/src\r\n        ${EXTERN_LIB_ROOT}/eigen\r\n        ${EXTERN_LIB_ROOT}/gnuplot-iostream\r\n        ${EXTERN_LIB_ROOT}/\r\n        ${EXTERN_LIB_ROOT}/linenoise-ng/include\r\n        ${EXTERN_LIB_ROOT}/yacas/cyacas/libyacas/include\r\n        ${EXTERN_LIB_ROOT}/lua/src\r\n        ${NLOPT_INCLUDE_DIRS}\r\n        ${FFTW_INCLUDES}\r\n        ${TF_INCLUDE_DIRS}\r\n        ${Boost_INCLUDE_DIRS}\r\n        ${HDF5_INCLUDE_DIRS}\r\n        ${TENSORFLOW_ROOT}) \r\n\r\n    option(BUILD_SHARED_LIBS \"build shared library\" ON)\r\n    set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)\r\n\r\n    #-------------ssl kernel lib-------------\r\n    file(GLOB_RECURSE _src_list\r\n        LIST_DIRECTORIES false\r\n        RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"${PROJECT_SOURCE_DIR}/src/*.h\" \"${PROJECT_SOURCE_DIR}/src/*.cpp\" \"\")\r\n\r\n    add_library(ssl SHARED ${_src_list})\r\n\r\n    set(SSL_LIBRARIES ${TF_LIBRARIES} ${LUA_LIBRARIES} ${Boost_LIBRARIES}     ${NLOPT_LIBRARIES} ${FFTW_LIBRARIES} ${LINENOISE_LIBRARIES} ${YACAS_LIBRARIES} ${HDF5_CXX_LIBRARIES}) #${TF_LIBRARIES}\r\n\r\n    target_link_libraries(ssl ${SSL_LIBRARIES} dl)\r\n\r\n    add_executable(Project1 main.cpp)\r\n    target_link_libraries(Project1 ssl)\r\n"}