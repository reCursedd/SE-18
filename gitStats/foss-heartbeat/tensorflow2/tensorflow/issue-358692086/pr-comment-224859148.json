{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224859148", "pull_request_review_id": 164327566, "id": 224859148, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDg1OTE0OA==", "diff_hunk": "@@ -0,0 +1,141 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/contrib/igfs/kernels/igfs_extended_tcp_client.h\"\n+\n+namespace tensorflow {\n+\n+ExtendedTCPClient::ExtendedTCPClient(const string &host, int port,\n+                                     bool big_endian)\n+    : PlainClient(host, port, big_endian), pos_(0) {}\n+\n+Status ExtendedTCPClient::ReadData(uint8_t *buf, const int32_t length) {\n+  TF_RETURN_IF_ERROR(PlainClient::ReadData(buf, length));\n+  pos_ += length;\n+\n+  return Status::OK();\n+}\n+\n+Status ExtendedTCPClient::WriteData(const uint8_t *buf, const int32_t length) {\n+  TF_RETURN_IF_ERROR(PlainClient::WriteData(buf, length));\n+  pos_ += length;\n+\n+  return Status::OK();\n+}\n+\n+Status ExtendedTCPClient::Ignore(int n) {\n+  uint8_t buf[n];\n+  return ReadData(buf, n);\n+}\n+\n+Status ExtendedTCPClient::SkipToPos(int target_pos) {\n+  return Ignore(std::max(0, target_pos - pos_));\n+};\n+\n+Status ExtendedTCPClient::ReadBool(bool *res) {\n+  uint8_t buf = 0;\n+  TF_RETURN_IF_ERROR(ReadData(&buf, 1));\n+  *res = buf != 0;\n+\n+  return Status::OK();\n+}\n+\n+Status ExtendedTCPClient::ReadNullableString(string *res) {\n+  bool is_empty = false;\n+  TF_RETURN_IF_ERROR(ReadBool(&is_empty));\n+\n+  if (!is_empty) {\n+    TF_RETURN_IF_ERROR(ReadString(res));\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status ExtendedTCPClient::ReadString(string *res) {\n+  int16_t length;\n+  TF_RETURN_IF_ERROR(ReadShort(&length));\n+\n+  uint8_t *buf = new uint8_t[length];\n+  Status status = ReadData(buf, length);\n+\n+  if (status.ok()) res->assign(reinterpret_cast<char *>(buf), length);\n+\n+  delete[] buf;\n+  return status;\n+}\n+\n+Status ExtendedTCPClient::ReadStringMap(std::map<string, string> *res) {\n+  int size;\n+  TF_RETURN_IF_ERROR(ReadInt(&size));\n+\n+  for (int i = 0; i < size; i++) {\n+    string key;\n+    string val;\n+    TF_RETURN_IF_ERROR(ReadString(&key));\n+    TF_RETURN_IF_ERROR(ReadString(&val));\n+\n+    res->insert(std::pair<string, string>(key, val));\n+  }\n+\n+  return Status::OK();\n+};\n+\n+Status ExtendedTCPClient::WriteSize(std::map<string, string>::size_type s) {\n+  return WriteInt(s);\n+}\n+\n+Status ExtendedTCPClient::FillWithZerosUntil(int n) {\n+  int to_skip = std::max(0, n - pos_);\n+\n+  for (int i = 0; i < to_skip; i++) {\n+    TF_RETURN_IF_ERROR(WriteByte(0));\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status ExtendedTCPClient::WriteBool(bool val) {\n+  return WriteByte((char)(val ? 1 : 0));\n+}\n+\n+Status ExtendedTCPClient::WriteString(string str) {\n+  if (!str.empty()) {\n+    TF_RETURN_IF_ERROR(WriteBool(false));\n+    unsigned short l = str.length();", "path": "tensorflow/contrib/igfs/kernels/igfs_extended_tcp_client.cc", "position": null, "original_position": 116, "commit_id": "24579bc55c379ea1d43b3d3b9d319038aa12f091", "original_commit_id": "273abe3bd46ce505b610b0bcf88d9c6afc472fce", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "This is an unsafe cast and should raise a compiler warning: `str.length()` returns a `size_t`. You need to check that it fits in the range of an `unsigned short` before casting.", "created_at": "2018-10-12T17:22:06Z", "updated_at": "2018-11-07T11:35:25Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22194#discussion_r224859148", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22194", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224859148"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22194#discussion_r224859148"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22194"}}, "body_html": "<p>This is an unsafe cast and should raise a compiler warning: <code>str.length()</code> returns a <code>size_t</code>. You need to check that it fits in the range of an <code>unsigned short</code> before casting.</p>", "body_text": "This is an unsafe cast and should raise a compiler warning: str.length() returns a size_t. You need to check that it fits in the range of an unsigned short before casting."}