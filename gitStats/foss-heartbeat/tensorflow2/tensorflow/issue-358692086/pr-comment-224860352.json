{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224860352", "pull_request_review_id": 164327566, "id": 224860352, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDg2MDM1Mg==", "diff_hunk": "@@ -0,0 +1,356 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifndef TENSORFLOW_CONTRIB_IGFS_KERNELS_IGFS_MESSAGES_H_\n+#define TENSORFLOW_CONTRIB_IGFS_KERNELS_IGFS_MESSAGES_H_\n+\n+#include \"tensorflow/contrib/igfs/kernels/igfs_extended_tcp_client.h\"\n+\n+namespace tensorflow {\n+\n+enum CommandId {\n+  HANDSHAKE_ID = 0,\n+  EXISTS_ID = 2,\n+  INFO_ID = 3,\n+  RENAME_ID = 6,\n+  DELETE_ID = 7,\n+  MKDIR_ID = 8,\n+  LIST_PATHS_ID = 9,\n+  LIST_FILES_ID = 10,\n+  OPEN_READ_ID = 13,\n+  OPEN_APPEND_ID = 14,\n+  OPEN_CREATE_ID = 15,\n+  CLOSE_ID = 16,\n+  READ_BLOCK_ID = 17,\n+  WRITE_BLOCK_ID = 18,\n+};\n+\n+class IGFSPath {\n+ public:\n+  Status Read(ExtendedTCPClient *client);\n+\n+  string path;\n+};\n+\n+class IGFSFile {\n+ public:\n+  Status Read(ExtendedTCPClient *client);\n+\n+  int64_t length;\n+  int64_t modification_time;\n+  uint8_t flags;\n+};\n+\n+class Request {\n+ public:\n+  Request(int32_t command_id);\n+  virtual Status Write(ExtendedTCPClient *client) const;\n+\n+ protected:\n+  const int32_t command_id_;\n+};\n+\n+class Response {\n+ public:\n+  virtual Status Read(ExtendedTCPClient *client);\n+\n+  int32_t res_type;\n+  int32_t req_id;\n+  int32_t length;\n+\n+ protected:\n+  static const int32_t header_size_ = 24;\n+  static const int32_t response_header_size_ = 9;\n+};\n+\n+class PathCtrlRequest : public Request {\n+ public:\n+  PathCtrlRequest(int32_t command_id, const string &user_name,\n+                  const string &path, const string &destination_path, bool flag,\n+                  bool collocate, const std::map<string, string> &properties);\n+  Status Write(ExtendedTCPClient *client) const override;\n+\n+ protected:\n+  Status WritePath(ExtendedTCPClient *client, const string &path) const;\n+\n+  const string user_name_;\n+  const string path_;\n+  const string destination_path_;\n+  const bool flag_;\n+  const bool collocate_;\n+  const std::map<string, string> props_;\n+};\n+\n+class StreamCtrlRequest : public Request {\n+ public:\n+  StreamCtrlRequest(int32_t command_id, int64_t stream_id, int32_t length);\n+  Status Write(ExtendedTCPClient *client) const override;\n+\n+ protected:\n+  int64_t stream_id_;\n+  int32_t length_;\n+};\n+\n+template <class R>\n+class CtrlResponse : public Response {\n+ public:\n+  CtrlResponse(bool optional) : optional_(optional){};\n+  Status Read(ExtendedTCPClient *client) override {\n+    TF_RETURN_IF_ERROR(Response::Read(client));\n+\n+    if (optional_) {\n+      TF_RETURN_IF_ERROR(client->ReadBool(&has_content));\n+\n+      if (!has_content) return Status::OK();\n+    }\n+\n+    res = R();\n+    has_content = true;\n+    TF_RETURN_IF_ERROR(res.Read(client));\n+\n+    return Status::OK();\n+  }\n+\n+  R res;\n+  bool has_content;\n+\n+ private:\n+  bool optional_;\n+};\n+\n+template <class T>\n+class ListResponse {\n+ public:\n+  Status Read(ExtendedTCPClient *client) {\n+    int32_t len;\n+    TF_RETURN_IF_ERROR(client->ReadInt(&len));\n+\n+    entries = std::vector<T>();", "path": "tensorflow/contrib/igfs/kernels/igfs_messages.h", "position": null, "original_position": 140, "commit_id": "24579bc55c379ea1d43b3d3b9d319038aa12f091", "original_commit_id": "273abe3bd46ce505b610b0bcf88d9c6afc472fce", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "Suggestion: `entries.clear()` is slightly more readable, since the object must already have been constructed.", "created_at": "2018-10-12T17:26:25Z", "updated_at": "2018-11-07T11:35:25Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22194#discussion_r224860352", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22194", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224860352"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22194#discussion_r224860352"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22194"}}, "body_html": "<p>Suggestion: <code>entries.clear()</code> is slightly more readable, since the object must already have been constructed.</p>", "body_text": "Suggestion: entries.clear() is slightly more readable, since the object must already have been constructed."}