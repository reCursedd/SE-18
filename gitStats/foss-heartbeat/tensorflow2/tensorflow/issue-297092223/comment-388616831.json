{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/388616831", "html_url": "https://github.com/tensorflow/tensorflow/issues/17009#issuecomment-388616831", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17009", "id": 388616831, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODYxNjgzMQ==", "user": {"login": "burglarhobbit", "id": 15987266, "node_id": "MDQ6VXNlcjE1OTg3MjY2", "avatar_url": "https://avatars2.githubusercontent.com/u/15987266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burglarhobbit", "html_url": "https://github.com/burglarhobbit", "followers_url": "https://api.github.com/users/burglarhobbit/followers", "following_url": "https://api.github.com/users/burglarhobbit/following{/other_user}", "gists_url": "https://api.github.com/users/burglarhobbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/burglarhobbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burglarhobbit/subscriptions", "organizations_url": "https://api.github.com/users/burglarhobbit/orgs", "repos_url": "https://api.github.com/users/burglarhobbit/repos", "events_url": "https://api.github.com/users/burglarhobbit/events{/privacy}", "received_events_url": "https://api.github.com/users/burglarhobbit/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-13T10:31:48Z", "updated_at": "2018-05-13T10:31:48Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5117188\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/protoget\">@protoget</a> Here it is:</p>\n<pre><code>import tensorflow as tf\nmax_para = tf.placeholder(tf.int32)\nnum_units = 150\ninputs = tf.placeholder(tf.float32,shape=[15,8,num_units])\nclass cudnn_gru:\n    def __init__(self):\n        self.gru_fw = tf.contrib.cudnn_rnn.CudnnGRU(1, num_units, \n            kernel_initializer=tf.random_normal_initializer(stddev=0.1))\n        with tf.variable_scope('CUDNN_GRU', reuse=tf.AUTO_REUSE):\n            self.init_fw = tf.get_variable(\"init_fw\",shape=[1, 8, num_units],initializer=\n                tf.zeros_initializer())\n            self.init_bw = tf.get_variable(\"init_bw\",shape=[1, 8, num_units],initializer=\n                tf.zeros_initializer())\n    def __call__(self,inputs):\n        out_fw, _ = self.gru_fw(inputs, initial_state=(self.init_fw,))\n\nclass cudnn_gru2:\n    def __init__(self):\n        self.gru_fw = tf.contrib.cudnn_rnn.CudnnGRU(1, num_units-1, \n            kernel_initializer=tf.random_normal_initializer(stddev=0.1))\n        with tf.variable_scope('CUDNN_GRU', reuse=tf.AUTO_REUSE):\n            self.init_fw = tf.get_variable(\"init_fw\",shape=[1, 8, num_units],initializer=\n                tf.zeros_initializer())\n            self.init_bw = tf.get_variable(\"init_bw\",shape=[1, 8, num_units],initializer=\n                tf.zeros_initializer())\n    def __call__(self,inputs):\n        out_fw, _ = self.gru_fw(inputs, initial_state=(self.init_fw,))\n\ndef get_output():\n    gru = cudnn_gru()\n    out = gru(inputs)\n    return tf.constant(1)\n\ndef get_output2():\n    gru = cudnn_gru2()\n    out = gru(inputs)\n    return tf.constant(2)\n\nfor i in range(3):\n    i_ = tf.constant(i)\n    out = tf.cond(i_&lt;max_para,get_output,get_output2)\n</code></pre>", "body_text": "@protoget Here it is:\nimport tensorflow as tf\nmax_para = tf.placeholder(tf.int32)\nnum_units = 150\ninputs = tf.placeholder(tf.float32,shape=[15,8,num_units])\nclass cudnn_gru:\n    def __init__(self):\n        self.gru_fw = tf.contrib.cudnn_rnn.CudnnGRU(1, num_units, \n            kernel_initializer=tf.random_normal_initializer(stddev=0.1))\n        with tf.variable_scope('CUDNN_GRU', reuse=tf.AUTO_REUSE):\n            self.init_fw = tf.get_variable(\"init_fw\",shape=[1, 8, num_units],initializer=\n                tf.zeros_initializer())\n            self.init_bw = tf.get_variable(\"init_bw\",shape=[1, 8, num_units],initializer=\n                tf.zeros_initializer())\n    def __call__(self,inputs):\n        out_fw, _ = self.gru_fw(inputs, initial_state=(self.init_fw,))\n\nclass cudnn_gru2:\n    def __init__(self):\n        self.gru_fw = tf.contrib.cudnn_rnn.CudnnGRU(1, num_units-1, \n            kernel_initializer=tf.random_normal_initializer(stddev=0.1))\n        with tf.variable_scope('CUDNN_GRU', reuse=tf.AUTO_REUSE):\n            self.init_fw = tf.get_variable(\"init_fw\",shape=[1, 8, num_units],initializer=\n                tf.zeros_initializer())\n            self.init_bw = tf.get_variable(\"init_bw\",shape=[1, 8, num_units],initializer=\n                tf.zeros_initializer())\n    def __call__(self,inputs):\n        out_fw, _ = self.gru_fw(inputs, initial_state=(self.init_fw,))\n\ndef get_output():\n    gru = cudnn_gru()\n    out = gru(inputs)\n    return tf.constant(1)\n\ndef get_output2():\n    gru = cudnn_gru2()\n    out = gru(inputs)\n    return tf.constant(2)\n\nfor i in range(3):\n    i_ = tf.constant(i)\n    out = tf.cond(i_<max_para,get_output,get_output2)", "body": "@protoget Here it is:\r\n\r\n```\r\nimport tensorflow as tf\r\nmax_para = tf.placeholder(tf.int32)\r\nnum_units = 150\r\ninputs = tf.placeholder(tf.float32,shape=[15,8,num_units])\r\nclass cudnn_gru:\r\n    def __init__(self):\r\n        self.gru_fw = tf.contrib.cudnn_rnn.CudnnGRU(1, num_units, \r\n            kernel_initializer=tf.random_normal_initializer(stddev=0.1))\r\n        with tf.variable_scope('CUDNN_GRU', reuse=tf.AUTO_REUSE):\r\n            self.init_fw = tf.get_variable(\"init_fw\",shape=[1, 8, num_units],initializer=\r\n                tf.zeros_initializer())\r\n            self.init_bw = tf.get_variable(\"init_bw\",shape=[1, 8, num_units],initializer=\r\n                tf.zeros_initializer())\r\n    def __call__(self,inputs):\r\n        out_fw, _ = self.gru_fw(inputs, initial_state=(self.init_fw,))\r\n\r\nclass cudnn_gru2:\r\n    def __init__(self):\r\n        self.gru_fw = tf.contrib.cudnn_rnn.CudnnGRU(1, num_units-1, \r\n            kernel_initializer=tf.random_normal_initializer(stddev=0.1))\r\n        with tf.variable_scope('CUDNN_GRU', reuse=tf.AUTO_REUSE):\r\n            self.init_fw = tf.get_variable(\"init_fw\",shape=[1, 8, num_units],initializer=\r\n                tf.zeros_initializer())\r\n            self.init_bw = tf.get_variable(\"init_bw\",shape=[1, 8, num_units],initializer=\r\n                tf.zeros_initializer())\r\n    def __call__(self,inputs):\r\n        out_fw, _ = self.gru_fw(inputs, initial_state=(self.init_fw,))\r\n\r\ndef get_output():\r\n    gru = cudnn_gru()\r\n    out = gru(inputs)\r\n    return tf.constant(1)\r\n\r\ndef get_output2():\r\n    gru = cudnn_gru2()\r\n    out = gru(inputs)\r\n    return tf.constant(2)\r\n\r\nfor i in range(3):\r\n    i_ = tf.constant(i)\r\n    out = tf.cond(i_<max_para,get_output,get_output2)\r\n```"}