{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17009", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17009/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17009/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17009/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17009", "id": 297092223, "node_id": "MDU6SXNzdWUyOTcwOTIyMjM=", "number": 17009, "title": "Failed to call cudnnRNNBackwardData: CUDNN_STATUS_INTERNAL_ERROR", "user": {"login": "burglarhobbit", "id": 15987266, "node_id": "MDQ6VXNlcjE1OTg3MjY2", "avatar_url": "https://avatars2.githubusercontent.com/u/15987266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burglarhobbit", "html_url": "https://github.com/burglarhobbit", "followers_url": "https://api.github.com/users/burglarhobbit/followers", "following_url": "https://api.github.com/users/burglarhobbit/following{/other_user}", "gists_url": "https://api.github.com/users/burglarhobbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/burglarhobbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burglarhobbit/subscriptions", "organizations_url": "https://api.github.com/users/burglarhobbit/orgs", "repos_url": "https://api.github.com/users/burglarhobbit/repos", "events_url": "https://api.github.com/users/burglarhobbit/events{/privacy}", "received_events_url": "https://api.github.com/users/burglarhobbit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 14, "created_at": "2018-02-14T13:17:55Z", "updated_at": "2018-11-14T19:15:24Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code</strong>: Yes</li>\n<li><strong>OS Platform and Distribution</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from</strong>: binary</li>\n<li><strong>TensorFlow version</strong>: 1.4.1</li>\n<li><strong>Python version</strong>: 3.5.2</li>\n<li><strong>Bazel version:</strong> Not compiled from source</li>\n<li><strong>GCC/Compiler version</strong>: Not compiled from source</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0/v6</li>\n<li><strong>GPU model and memory</strong>: GeForce GTX 1080 (8GB x 4)</li>\n<li><strong>Exact command to reproduce</strong>: Code as per below</li>\n</ul>\n<p>The code starts training and after an arbitrary number of iterations on batches, it gives the following error:</p>\n<pre><code>2018-02-14 23:51:31.591963: E tensorflow/stream_executor/cuda/cuda_event.cc:49] Error polling for event status: failed to query event: CUDA_ERROR_ILLEGAL_ADDRESS\n2018-02-14 23:51:31.592000: F tensorflow/core/common_runtime/gpu/gpu_event_mgr.cc:203] Unexpected Event status: 1\n2018-02-14 23:51:31.592023: E tensorflow/stream_executor/cuda/cuda_dnn.cc:1679] Failed to call cudnnRNNBackwardData: CUDNN_STATUS_INTERNAL_ERROR\nAborted (core dumped)\n</code></pre>\n<p>I'm using <code>cudnn_gru</code> in a <code>tf.while_loop</code> control flow operation and using initializers from outside the <code>tf.while</code> scope since variables aren't allowed to be instantiated within the <code>tf.while</code> scope:</p>\n<pre><code>import tensorflow as tf\n\ngru_fw = tf.contrib.cudnn_rnn.CudnnGRU(num_layers=1, num_units=150, input_size=500)\ngru_fw_1 = tf.contrib.cudnn_rnn.CudnnGRU(num_layers=1, num_units=150, input_size=1800)\ne = tf.random_uniform([gru_fw.params_size()], -0.1, 0.1)\nf = tf.random_uniform([gru_fw.params_size()], -0.1, 0.1)\ng = tf.zeros([1, 4, 150])\nh = tf.zeros([1, 4, 150])\nzeros_i = tf.zeros([4, 150])\n\nclass cudnn_gru:\n\tdef __init__(self, num_layers, num_units, batch_size, input_size, keep_prob=1.0, is_train=None, scope=None):\n\t\tself.num_layers = num_layers\n\t\tself.grus = []\n\t\tself.params = []\n\t\tself.inits = []\n\t\tself.dropout_mask = []\n\t\tfor layer in range(num_layers):\n\t\t\tinput_size_ = input_size if layer == 0 else 2 * num_units\n\t\t\tgru_fw = tf.contrib.cudnn_rnn.CudnnGRU(\n\t\t\t\tnum_layers=1, num_units=num_units, input_size=input_size_)\n\t\t\tgru_bw = tf.contrib.cudnn_rnn.CudnnGRU(\n\t\t\t\tnum_layers=1, num_units=num_units, input_size=input_size_)\n\t\t\twith tf.variable_scope('CUDNN_GRU', reuse=tf.AUTO_REUSE):\n\t\t\t\tparam_fw = tf.get_variable(\"param_fw\",initializer=e,validate_shape=False)\n\t\t\t\tparam_bw = tf.get_variable(\"param_bw\",initializer=f,validate_shape=False)\n\t\t\t\tinit_fw = tf.get_variable(\"init_fw\", initializer=g)\n\t\t\t\tinit_bw = tf.get_variable(\"init_bw\", initializer=h)\n\tdef __call__(self, inputs, seq_len, keep_prob=1.0, is_train=None, concat_layers=True):\n\t\toutputs = [tf.transpose(inputs, [1, 0, 2])]\n\t\tfor layer in range(self.num_layers):\n\t\t\tgru_fw, gru_bw = self.grus[layer]\n\t\t\tparam_fw, param_bw = self.params[layer]\n\t\t\tinit_fw, init_bw = self.inits[layer]\n\t\t\tmask_fw, mask_bw = self.dropout_mask[layer]\n\t\t\twith tf.variable_scope(\"fw\"):\n\t\t\t\tout_fw, _ = gru_fw(outputs[-1] * mask_fw, init_fw, param_fw)\n\t\t\twith tf.variable_scope(\"bw\"):\n\t\t\t\tinputs_bw = tf.reverse_sequence(\n\t\t\t\t\toutputs[-1] * mask_bw, seq_lengths=seq_len, seq_dim=0, batch_dim=1)\n\t\t\t\tout_bw, _ = gru_bw(inputs_bw, init_bw, param_bw)\n\t\t\t\tout_bw = tf.reverse_sequence(\n\t\t\t\t\tout_bw, seq_lengths=seq_len, seq_dim=0, batch_dim=1)\n\t\t\toutputs.append(tf.concat([out_fw, out_bw], axis=2))\n\t\tif concat_layers:\n\t\t\tres = tf.concat(outputs[1:], axis=2)\n\t\telse:\n\t\t\tres = outputs[-1]\n\t\tres = tf.transpose(res, [1, 0, 2])\n\t\treturn res\n\nclass native_gru:\n\tdef __init__(self, num_layers, num_units, batch_size, input_size, keep_prob=1.0, is_train=None, scope=\"native_gru\"):\n\t\tself.num_layers = num_layers\n\t\tself.grus = []\n\t\tself.inits = []\n\t\tself.dropout_mask = []\n\t\tself.scope = scope\n\t\tfor layer in range(num_layers):\n\t\t\tinput_size_ = input_size if layer == 0 else 2 * num_units\n\t\t\tgru_fw = tf.contrib.rnn.GRUCell(num_units)\n\t\t\tgru_bw = tf.contrib.rnn.GRUCell(num_units)\n\t\t\twith tf.variable_scope('native_GRU', reuse=tf.AUTO_REUSE):\n\n\t\t\t\tinit_fw = tf.get_variable(\"init_fw\", initializer=zeros_i)\n\t\t\t\tinit_bw = tf.get_variable(\"init_bw\", initializer=zeros_i)\n\t\t\t\t\n\t\t\t#init_fw = tf.Variable(tf.zeros([batch_size, num_units]))\n\t\t\t#init_bw = tf.Variable(tf.zeros([batch_size, num_units]))\n\t\t\tmask_fw = dropout(tf.ones([batch_size, 1, input_size_], dtype=tf.float32),\n\t\t\t\t\t\t\t  keep_prob=keep_prob, is_train=is_train, mode=None)\n\t\t\tmask_bw = dropout(tf.ones([batch_size, 1, input_size_], dtype=tf.float32),\n\t\t\t\t\t\t\t  keep_prob=keep_prob, is_train=is_train, mode=None)\n\t\t\tself.grus.append((gru_fw, gru_bw, ))\n\t\t\tself.inits.append((init_fw, init_bw, ))\n\t\t\tself.dropout_mask.append((mask_fw, mask_bw, ))\n\n\tdef __call__(self, inputs, seq_len, keep_prob=1.0, is_train=None, concat_layers=True):\n\t\toutputs = [inputs]\n\t\twith tf.variable_scope(self.scope):\n\t\t\tfor layer in range(self.num_layers):\n\t\t\t\tgru_fw, gru_bw = self.grus[layer]\n\t\t\t\tinit_fw, init_bw = self.inits[layer]\n\t\t\t\tmask_fw, mask_bw = self.dropout_mask[layer]\n\t\t\t\twith tf.variable_scope(\"fw_{}\".format(layer)):\n\t\t\t\t\tout_fw, _ = tf.nn.dynamic_rnn(\n\t\t\t\t\t\tgru_fw, outputs[-1] * mask_fw, seq_len, initial_state=init_fw, dtype=tf.float32)\n\t\t\t\twith tf.variable_scope(\"bw_{}\".format(layer)):\n\t\t\t\t\tinputs_bw = tf.reverse_sequence(\n\t\t\t\t\t\toutputs[-1] * mask_bw, seq_lengths=seq_len, seq_dim=1, batch_dim=0)\n\t\t\t\t\tout_bw, _ = tf.nn.dynamic_rnn(\n\t\t\t\t\t\tgru_fw, inputs_bw, seq_len, initial_state=init_bw, dtype=tf.float32)\n\t\t\t\t\tout_bw = tf.reverse_sequence(\n\t\t\t\t\t\tout_bw, seq_lengths=seq_len, seq_dim=1, batch_dim=0)\n\t\t\t\toutputs.append(tf.concat([out_fw, out_bw], axis=2))\n\t\tif concat_layers:\n\t\t\tres = tf.concat(outputs[1:], axis=2)\n\t\telse:\n\t\t\tres = outputs[-1]\n\t\treturn res\n</code></pre>\n<p>This has not happened before, when the project structure was sequential and not within a control flow mechanism. Also, if I change the implementation to use native GRU instead of cudnn_gru, it works perfectly fine.</p>", "body_text": "System information\n\nHave I written custom code: Yes\nOS Platform and Distribution: Ubuntu 16.04\nTensorFlow installed from: binary\nTensorFlow version: 1.4.1\nPython version: 3.5.2\nBazel version: Not compiled from source\nGCC/Compiler version: Not compiled from source\nCUDA/cuDNN version: 8.0/v6\nGPU model and memory: GeForce GTX 1080 (8GB x 4)\nExact command to reproduce: Code as per below\n\nThe code starts training and after an arbitrary number of iterations on batches, it gives the following error:\n2018-02-14 23:51:31.591963: E tensorflow/stream_executor/cuda/cuda_event.cc:49] Error polling for event status: failed to query event: CUDA_ERROR_ILLEGAL_ADDRESS\n2018-02-14 23:51:31.592000: F tensorflow/core/common_runtime/gpu/gpu_event_mgr.cc:203] Unexpected Event status: 1\n2018-02-14 23:51:31.592023: E tensorflow/stream_executor/cuda/cuda_dnn.cc:1679] Failed to call cudnnRNNBackwardData: CUDNN_STATUS_INTERNAL_ERROR\nAborted (core dumped)\n\nI'm using cudnn_gru in a tf.while_loop control flow operation and using initializers from outside the tf.while scope since variables aren't allowed to be instantiated within the tf.while scope:\nimport tensorflow as tf\n\ngru_fw = tf.contrib.cudnn_rnn.CudnnGRU(num_layers=1, num_units=150, input_size=500)\ngru_fw_1 = tf.contrib.cudnn_rnn.CudnnGRU(num_layers=1, num_units=150, input_size=1800)\ne = tf.random_uniform([gru_fw.params_size()], -0.1, 0.1)\nf = tf.random_uniform([gru_fw.params_size()], -0.1, 0.1)\ng = tf.zeros([1, 4, 150])\nh = tf.zeros([1, 4, 150])\nzeros_i = tf.zeros([4, 150])\n\nclass cudnn_gru:\n\tdef __init__(self, num_layers, num_units, batch_size, input_size, keep_prob=1.0, is_train=None, scope=None):\n\t\tself.num_layers = num_layers\n\t\tself.grus = []\n\t\tself.params = []\n\t\tself.inits = []\n\t\tself.dropout_mask = []\n\t\tfor layer in range(num_layers):\n\t\t\tinput_size_ = input_size if layer == 0 else 2 * num_units\n\t\t\tgru_fw = tf.contrib.cudnn_rnn.CudnnGRU(\n\t\t\t\tnum_layers=1, num_units=num_units, input_size=input_size_)\n\t\t\tgru_bw = tf.contrib.cudnn_rnn.CudnnGRU(\n\t\t\t\tnum_layers=1, num_units=num_units, input_size=input_size_)\n\t\t\twith tf.variable_scope('CUDNN_GRU', reuse=tf.AUTO_REUSE):\n\t\t\t\tparam_fw = tf.get_variable(\"param_fw\",initializer=e,validate_shape=False)\n\t\t\t\tparam_bw = tf.get_variable(\"param_bw\",initializer=f,validate_shape=False)\n\t\t\t\tinit_fw = tf.get_variable(\"init_fw\", initializer=g)\n\t\t\t\tinit_bw = tf.get_variable(\"init_bw\", initializer=h)\n\tdef __call__(self, inputs, seq_len, keep_prob=1.0, is_train=None, concat_layers=True):\n\t\toutputs = [tf.transpose(inputs, [1, 0, 2])]\n\t\tfor layer in range(self.num_layers):\n\t\t\tgru_fw, gru_bw = self.grus[layer]\n\t\t\tparam_fw, param_bw = self.params[layer]\n\t\t\tinit_fw, init_bw = self.inits[layer]\n\t\t\tmask_fw, mask_bw = self.dropout_mask[layer]\n\t\t\twith tf.variable_scope(\"fw\"):\n\t\t\t\tout_fw, _ = gru_fw(outputs[-1] * mask_fw, init_fw, param_fw)\n\t\t\twith tf.variable_scope(\"bw\"):\n\t\t\t\tinputs_bw = tf.reverse_sequence(\n\t\t\t\t\toutputs[-1] * mask_bw, seq_lengths=seq_len, seq_dim=0, batch_dim=1)\n\t\t\t\tout_bw, _ = gru_bw(inputs_bw, init_bw, param_bw)\n\t\t\t\tout_bw = tf.reverse_sequence(\n\t\t\t\t\tout_bw, seq_lengths=seq_len, seq_dim=0, batch_dim=1)\n\t\t\toutputs.append(tf.concat([out_fw, out_bw], axis=2))\n\t\tif concat_layers:\n\t\t\tres = tf.concat(outputs[1:], axis=2)\n\t\telse:\n\t\t\tres = outputs[-1]\n\t\tres = tf.transpose(res, [1, 0, 2])\n\t\treturn res\n\nclass native_gru:\n\tdef __init__(self, num_layers, num_units, batch_size, input_size, keep_prob=1.0, is_train=None, scope=\"native_gru\"):\n\t\tself.num_layers = num_layers\n\t\tself.grus = []\n\t\tself.inits = []\n\t\tself.dropout_mask = []\n\t\tself.scope = scope\n\t\tfor layer in range(num_layers):\n\t\t\tinput_size_ = input_size if layer == 0 else 2 * num_units\n\t\t\tgru_fw = tf.contrib.rnn.GRUCell(num_units)\n\t\t\tgru_bw = tf.contrib.rnn.GRUCell(num_units)\n\t\t\twith tf.variable_scope('native_GRU', reuse=tf.AUTO_REUSE):\n\n\t\t\t\tinit_fw = tf.get_variable(\"init_fw\", initializer=zeros_i)\n\t\t\t\tinit_bw = tf.get_variable(\"init_bw\", initializer=zeros_i)\n\t\t\t\t\n\t\t\t#init_fw = tf.Variable(tf.zeros([batch_size, num_units]))\n\t\t\t#init_bw = tf.Variable(tf.zeros([batch_size, num_units]))\n\t\t\tmask_fw = dropout(tf.ones([batch_size, 1, input_size_], dtype=tf.float32),\n\t\t\t\t\t\t\t  keep_prob=keep_prob, is_train=is_train, mode=None)\n\t\t\tmask_bw = dropout(tf.ones([batch_size, 1, input_size_], dtype=tf.float32),\n\t\t\t\t\t\t\t  keep_prob=keep_prob, is_train=is_train, mode=None)\n\t\t\tself.grus.append((gru_fw, gru_bw, ))\n\t\t\tself.inits.append((init_fw, init_bw, ))\n\t\t\tself.dropout_mask.append((mask_fw, mask_bw, ))\n\n\tdef __call__(self, inputs, seq_len, keep_prob=1.0, is_train=None, concat_layers=True):\n\t\toutputs = [inputs]\n\t\twith tf.variable_scope(self.scope):\n\t\t\tfor layer in range(self.num_layers):\n\t\t\t\tgru_fw, gru_bw = self.grus[layer]\n\t\t\t\tinit_fw, init_bw = self.inits[layer]\n\t\t\t\tmask_fw, mask_bw = self.dropout_mask[layer]\n\t\t\t\twith tf.variable_scope(\"fw_{}\".format(layer)):\n\t\t\t\t\tout_fw, _ = tf.nn.dynamic_rnn(\n\t\t\t\t\t\tgru_fw, outputs[-1] * mask_fw, seq_len, initial_state=init_fw, dtype=tf.float32)\n\t\t\t\twith tf.variable_scope(\"bw_{}\".format(layer)):\n\t\t\t\t\tinputs_bw = tf.reverse_sequence(\n\t\t\t\t\t\toutputs[-1] * mask_bw, seq_lengths=seq_len, seq_dim=1, batch_dim=0)\n\t\t\t\t\tout_bw, _ = tf.nn.dynamic_rnn(\n\t\t\t\t\t\tgru_fw, inputs_bw, seq_len, initial_state=init_bw, dtype=tf.float32)\n\t\t\t\t\tout_bw = tf.reverse_sequence(\n\t\t\t\t\t\tout_bw, seq_lengths=seq_len, seq_dim=1, batch_dim=0)\n\t\t\t\toutputs.append(tf.concat([out_fw, out_bw], axis=2))\n\t\tif concat_layers:\n\t\t\tres = tf.concat(outputs[1:], axis=2)\n\t\telse:\n\t\t\tres = outputs[-1]\n\t\treturn res\n\nThis has not happened before, when the project structure was sequential and not within a control flow mechanism. Also, if I change the implementation to use native GRU instead of cudnn_gru, it works perfectly fine.", "body": "### System information\r\n- **Have I written custom code**: Yes\r\n- **OS Platform and Distribution**: Ubuntu 16.04\r\n- **TensorFlow installed from**: binary\r\n- **TensorFlow version**: 1.4.1\r\n- **Python version**: 3.5.2\r\n- **Bazel version:** Not compiled from source\r\n- **GCC/Compiler version**: Not compiled from source\r\n- **CUDA/cuDNN version**: 8.0/v6\r\n- **GPU model and memory**: GeForce GTX 1080 (8GB x 4)\r\n- **Exact command to reproduce**: Code as per below\r\n\r\nThe code starts training and after an arbitrary number of iterations on batches, it gives the following error:\r\n\r\n```\r\n2018-02-14 23:51:31.591963: E tensorflow/stream_executor/cuda/cuda_event.cc:49] Error polling for event status: failed to query event: CUDA_ERROR_ILLEGAL_ADDRESS\r\n2018-02-14 23:51:31.592000: F tensorflow/core/common_runtime/gpu/gpu_event_mgr.cc:203] Unexpected Event status: 1\r\n2018-02-14 23:51:31.592023: E tensorflow/stream_executor/cuda/cuda_dnn.cc:1679] Failed to call cudnnRNNBackwardData: CUDNN_STATUS_INTERNAL_ERROR\r\nAborted (core dumped)\r\n```\r\n\r\nI'm using `cudnn_gru` in a `tf.while_loop` control flow operation and using initializers from outside the `tf.while` scope since variables aren't allowed to be instantiated within the `tf.while` scope:\r\n\r\n```\r\nimport tensorflow as tf\r\n\r\ngru_fw = tf.contrib.cudnn_rnn.CudnnGRU(num_layers=1, num_units=150, input_size=500)\r\ngru_fw_1 = tf.contrib.cudnn_rnn.CudnnGRU(num_layers=1, num_units=150, input_size=1800)\r\ne = tf.random_uniform([gru_fw.params_size()], -0.1, 0.1)\r\nf = tf.random_uniform([gru_fw.params_size()], -0.1, 0.1)\r\ng = tf.zeros([1, 4, 150])\r\nh = tf.zeros([1, 4, 150])\r\nzeros_i = tf.zeros([4, 150])\r\n\r\nclass cudnn_gru:\r\n\tdef __init__(self, num_layers, num_units, batch_size, input_size, keep_prob=1.0, is_train=None, scope=None):\r\n\t\tself.num_layers = num_layers\r\n\t\tself.grus = []\r\n\t\tself.params = []\r\n\t\tself.inits = []\r\n\t\tself.dropout_mask = []\r\n\t\tfor layer in range(num_layers):\r\n\t\t\tinput_size_ = input_size if layer == 0 else 2 * num_units\r\n\t\t\tgru_fw = tf.contrib.cudnn_rnn.CudnnGRU(\r\n\t\t\t\tnum_layers=1, num_units=num_units, input_size=input_size_)\r\n\t\t\tgru_bw = tf.contrib.cudnn_rnn.CudnnGRU(\r\n\t\t\t\tnum_layers=1, num_units=num_units, input_size=input_size_)\r\n\t\t\twith tf.variable_scope('CUDNN_GRU', reuse=tf.AUTO_REUSE):\r\n\t\t\t\tparam_fw = tf.get_variable(\"param_fw\",initializer=e,validate_shape=False)\r\n\t\t\t\tparam_bw = tf.get_variable(\"param_bw\",initializer=f,validate_shape=False)\r\n\t\t\t\tinit_fw = tf.get_variable(\"init_fw\", initializer=g)\r\n\t\t\t\tinit_bw = tf.get_variable(\"init_bw\", initializer=h)\r\n\tdef __call__(self, inputs, seq_len, keep_prob=1.0, is_train=None, concat_layers=True):\r\n\t\toutputs = [tf.transpose(inputs, [1, 0, 2])]\r\n\t\tfor layer in range(self.num_layers):\r\n\t\t\tgru_fw, gru_bw = self.grus[layer]\r\n\t\t\tparam_fw, param_bw = self.params[layer]\r\n\t\t\tinit_fw, init_bw = self.inits[layer]\r\n\t\t\tmask_fw, mask_bw = self.dropout_mask[layer]\r\n\t\t\twith tf.variable_scope(\"fw\"):\r\n\t\t\t\tout_fw, _ = gru_fw(outputs[-1] * mask_fw, init_fw, param_fw)\r\n\t\t\twith tf.variable_scope(\"bw\"):\r\n\t\t\t\tinputs_bw = tf.reverse_sequence(\r\n\t\t\t\t\toutputs[-1] * mask_bw, seq_lengths=seq_len, seq_dim=0, batch_dim=1)\r\n\t\t\t\tout_bw, _ = gru_bw(inputs_bw, init_bw, param_bw)\r\n\t\t\t\tout_bw = tf.reverse_sequence(\r\n\t\t\t\t\tout_bw, seq_lengths=seq_len, seq_dim=0, batch_dim=1)\r\n\t\t\toutputs.append(tf.concat([out_fw, out_bw], axis=2))\r\n\t\tif concat_layers:\r\n\t\t\tres = tf.concat(outputs[1:], axis=2)\r\n\t\telse:\r\n\t\t\tres = outputs[-1]\r\n\t\tres = tf.transpose(res, [1, 0, 2])\r\n\t\treturn res\r\n\r\nclass native_gru:\r\n\tdef __init__(self, num_layers, num_units, batch_size, input_size, keep_prob=1.0, is_train=None, scope=\"native_gru\"):\r\n\t\tself.num_layers = num_layers\r\n\t\tself.grus = []\r\n\t\tself.inits = []\r\n\t\tself.dropout_mask = []\r\n\t\tself.scope = scope\r\n\t\tfor layer in range(num_layers):\r\n\t\t\tinput_size_ = input_size if layer == 0 else 2 * num_units\r\n\t\t\tgru_fw = tf.contrib.rnn.GRUCell(num_units)\r\n\t\t\tgru_bw = tf.contrib.rnn.GRUCell(num_units)\r\n\t\t\twith tf.variable_scope('native_GRU', reuse=tf.AUTO_REUSE):\r\n\r\n\t\t\t\tinit_fw = tf.get_variable(\"init_fw\", initializer=zeros_i)\r\n\t\t\t\tinit_bw = tf.get_variable(\"init_bw\", initializer=zeros_i)\r\n\t\t\t\t\r\n\t\t\t#init_fw = tf.Variable(tf.zeros([batch_size, num_units]))\r\n\t\t\t#init_bw = tf.Variable(tf.zeros([batch_size, num_units]))\r\n\t\t\tmask_fw = dropout(tf.ones([batch_size, 1, input_size_], dtype=tf.float32),\r\n\t\t\t\t\t\t\t  keep_prob=keep_prob, is_train=is_train, mode=None)\r\n\t\t\tmask_bw = dropout(tf.ones([batch_size, 1, input_size_], dtype=tf.float32),\r\n\t\t\t\t\t\t\t  keep_prob=keep_prob, is_train=is_train, mode=None)\r\n\t\t\tself.grus.append((gru_fw, gru_bw, ))\r\n\t\t\tself.inits.append((init_fw, init_bw, ))\r\n\t\t\tself.dropout_mask.append((mask_fw, mask_bw, ))\r\n\r\n\tdef __call__(self, inputs, seq_len, keep_prob=1.0, is_train=None, concat_layers=True):\r\n\t\toutputs = [inputs]\r\n\t\twith tf.variable_scope(self.scope):\r\n\t\t\tfor layer in range(self.num_layers):\r\n\t\t\t\tgru_fw, gru_bw = self.grus[layer]\r\n\t\t\t\tinit_fw, init_bw = self.inits[layer]\r\n\t\t\t\tmask_fw, mask_bw = self.dropout_mask[layer]\r\n\t\t\t\twith tf.variable_scope(\"fw_{}\".format(layer)):\r\n\t\t\t\t\tout_fw, _ = tf.nn.dynamic_rnn(\r\n\t\t\t\t\t\tgru_fw, outputs[-1] * mask_fw, seq_len, initial_state=init_fw, dtype=tf.float32)\r\n\t\t\t\twith tf.variable_scope(\"bw_{}\".format(layer)):\r\n\t\t\t\t\tinputs_bw = tf.reverse_sequence(\r\n\t\t\t\t\t\toutputs[-1] * mask_bw, seq_lengths=seq_len, seq_dim=1, batch_dim=0)\r\n\t\t\t\t\tout_bw, _ = tf.nn.dynamic_rnn(\r\n\t\t\t\t\t\tgru_fw, inputs_bw, seq_len, initial_state=init_bw, dtype=tf.float32)\r\n\t\t\t\t\tout_bw = tf.reverse_sequence(\r\n\t\t\t\t\t\tout_bw, seq_lengths=seq_len, seq_dim=1, batch_dim=0)\r\n\t\t\t\toutputs.append(tf.concat([out_fw, out_bw], axis=2))\r\n\t\tif concat_layers:\r\n\t\t\tres = tf.concat(outputs[1:], axis=2)\r\n\t\telse:\r\n\t\t\tres = outputs[-1]\r\n\t\treturn res\r\n```\r\nThis has not happened before, when the project structure was sequential and not within a control flow mechanism. Also, if I change the implementation to use native GRU instead of cudnn_gru, it works perfectly fine."}