{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/362896172", "html_url": "https://github.com/tensorflow/tensorflow/issues/16541#issuecomment-362896172", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16541", "id": 362896172, "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjg5NjE3Mg==", "user": {"login": "daisylab", "id": 31073109, "node_id": "MDQ6VXNlcjMxMDczMTA5", "avatar_url": "https://avatars3.githubusercontent.com/u/31073109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daisylab", "html_url": "https://github.com/daisylab", "followers_url": "https://api.github.com/users/daisylab/followers", "following_url": "https://api.github.com/users/daisylab/following{/other_user}", "gists_url": "https://api.github.com/users/daisylab/gists{/gist_id}", "starred_url": "https://api.github.com/users/daisylab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daisylab/subscriptions", "organizations_url": "https://api.github.com/users/daisylab/orgs", "repos_url": "https://api.github.com/users/daisylab/repos", "events_url": "https://api.github.com/users/daisylab/events{/privacy}", "received_events_url": "https://api.github.com/users/daisylab/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-04T10:20:26Z", "updated_at": "2018-02-04T10:24:58Z", "author_association": "NONE", "body_html": "<p>I think I found a workaround.</p>\n<p>Although I could not find the exact location where SSE is added, I guessed that if the configure script sets machine architecture correctly, then there must be a point during the build process where SSE check is irrelevantly added, so I did a wild experiment, that is:</p>\n<ol>\n<li>changed the log level from <code>FATAL</code> to <code>WARNING</code> in the <code>cpu_feature_guard.cc</code>, to bypass CPU feature check routine.</li>\n</ol>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/bdea071e68fa3f5dfcffdd26523d5825f21620fe/tensorflow/core/platform/cpu_feature_guard.cc#L36\">tensorflow/tensorflow/core/platform/cpu_feature_guard.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 36\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/bdea071e68fa3f5dfcffdd26523d5825f21620fe\">bdea071</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L36\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"36\"></td>\n          <td id=\"LC36\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">LOG</span>(FATAL) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<ol start=\"2\">\n<li>ran <code>./configure</code> script as usual, and set <code>-march=i686</code> near the end of the script (not using explicit <code>--copt=-march=i686</code> in the bazel command line).</li>\n</ol>\n<p>This time I could get the compiled wheel package. I installed the package, and ran a sample code (<a href=\"https://www.tensorflow.org/get_started/premade_estimators\" rel=\"nofollow\">https://www.tensorflow.org/get_started/premade_estimators</a>), which worked flawlessly. Also now I get auto-completion in my emacs session with elpy to review TF codes (which was the first reason to use this ancient 32-bit laptop, thinkpad x60).</p>\n<p>I thought if somethings are broken in the compilation process, so wrong binary code is generated, then calling TF would crash hopelessly, but so far I get no errors.</p>\n<p>Definitely I know that this is not a good solution. Changing log level can be dangerous, just saying that this workaround helped my situation.</p>\n<p>Thank you for your concern.</p>\n<p>Sungjin.</p>", "body_text": "I think I found a workaround.\nAlthough I could not find the exact location where SSE is added, I guessed that if the configure script sets machine architecture correctly, then there must be a point during the build process where SSE check is irrelevantly added, so I did a wild experiment, that is:\n\nchanged the log level from FATAL to WARNING in the cpu_feature_guard.cc, to bypass CPU feature check routine.\n\n\n  \n    \n      tensorflow/tensorflow/core/platform/cpu_feature_guard.cc\n    \n    \n         Line 36\n      in\n      bdea071\n    \n    \n    \n    \n\n        \n          \n           LOG(FATAL) \n        \n    \n  \n\n\n\nran ./configure script as usual, and set -march=i686 near the end of the script (not using explicit --copt=-march=i686 in the bazel command line).\n\nThis time I could get the compiled wheel package. I installed the package, and ran a sample code (https://www.tensorflow.org/get_started/premade_estimators), which worked flawlessly. Also now I get auto-completion in my emacs session with elpy to review TF codes (which was the first reason to use this ancient 32-bit laptop, thinkpad x60).\nI thought if somethings are broken in the compilation process, so wrong binary code is generated, then calling TF would crash hopelessly, but so far I get no errors.\nDefinitely I know that this is not a good solution. Changing log level can be dangerous, just saying that this workaround helped my situation.\nThank you for your concern.\nSungjin.", "body": "I think I found a workaround. \r\n\r\nAlthough I could not find the exact location where SSE is added, I guessed that if the configure script sets machine architecture correctly, then there must be a point during the build process where SSE check is irrelevantly added, so I did a wild experiment, that is:\r\n\r\n1. changed the log level from `FATAL` to `WARNING` in the `cpu_feature_guard.cc`, to bypass CPU feature check routine.\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/bdea071e68fa3f5dfcffdd26523d5825f21620fe/tensorflow/core/platform/cpu_feature_guard.cc#L36\r\n\r\n2. ran `./configure` script as usual, and set `-march=i686` near the end of the script (not using explicit `--copt=-march=i686` in the bazel command line).\r\n\r\nThis time I could get the compiled wheel package. I installed the package, and ran a sample code (https://www.tensorflow.org/get_started/premade_estimators), which worked flawlessly. Also now I get auto-completion in my emacs session with elpy to review TF codes (which was the first reason to use this ancient 32-bit laptop, thinkpad x60).\r\n\r\nI thought if somethings are broken in the compilation process, so wrong binary code is generated, then calling TF would crash hopelessly, but so far I get no errors.\r\n\r\nDefinitely I know that this is not a good solution. Changing log level can be dangerous, just saying that this workaround helped my situation.\r\n\r\nThank you for your concern.\r\n\r\nSungjin.\r\n"}