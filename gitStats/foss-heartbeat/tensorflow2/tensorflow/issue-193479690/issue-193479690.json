{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6085", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6085/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6085/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6085/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6085", "id": 193479690, "node_id": "MDU6SXNzdWUxOTM0Nzk2OTA=", "number": 6085, "title": "Tensorflow SVD inaccurate.  U is not orthogonal.", "user": {"login": "kstant0725", "id": 9817643, "node_id": "MDQ6VXNlcjk4MTc2NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9817643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kstant0725", "html_url": "https://github.com/kstant0725", "followers_url": "https://api.github.com/users/kstant0725/followers", "following_url": "https://api.github.com/users/kstant0725/following{/other_user}", "gists_url": "https://api.github.com/users/kstant0725/gists{/gist_id}", "starred_url": "https://api.github.com/users/kstant0725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kstant0725/subscriptions", "organizations_url": "https://api.github.com/users/kstant0725/orgs", "repos_url": "https://api.github.com/users/kstant0725/repos", "events_url": "https://api.github.com/users/kstant0725/events{/privacy}", "received_events_url": "https://api.github.com/users/kstant0725/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-12-05T12:03:59Z", "updated_at": "2016-12-06T18:53:14Z", "closed_at": "2016-12-06T18:53:14Z", "author_association": "NONE", "body_html": "<p>NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.</p>\n<p>For general support from the community, see <a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">StackOverflow</a>.<br>\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed<br>\nout of scope for GitHub Issues and point people to StackOverflow.</p>\n<p>For bugs or installation issues, please provide the following information.<br>\nThe more information you provide, the more easily we will be able to offer<br>\nhelp and advice.</p>\n<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"152864995\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2207\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2207/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/2207\">#2207</a></h3>\n<h3>Environment info</h3>\n<p>Operating System: Linux Mint 17.3 a.k.a. Ubuntu 14.04.4 LTS, Trusty Tahr</p>\n<p>Installed version of CUDA and cuDNN:<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):<br>\nCUDA 7.5<br>\ncuDNN 5.5<br>\n-rw-r--r-- 1 root root 322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a<br>\nlrwxrwxrwx 1 root root     16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -&gt; libcudart.so.7.5<br>\nlrwxrwxrwx 1 root root     19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -&gt; libcudart.so.7.5.18<br>\n-rwxr-xr-x 1 root root 383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18<br>\n-rw-r--r-- 1 root root 720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a</p>\n<p>If installed from binary pip package, provide:</p>\n<ol>\n<li>A link to the pip package you installed:<br>\nexport TF_BINARY_URL=<a href=\"https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.10.0-cp34-cp34m-linux_x86_64.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.10.0-cp34-cp34m-linux_x86_64.whl</a></li>\n<li>The output from <code>python -c \"import tensorflow; print(tensorflow.__version__)\"</code>.<br>\nkps3@newton ~ $ python3 -c \"import tensorflow; print(tensorflow.<strong>version</strong>)\"<br>\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally<br>\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally<br>\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally<br>\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcuda.so.1 locally<br>\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally<br>\n0.10.0</li>\n</ol>\n<p>If installed from source, provide</p>\n<ol>\n<li>The commit hash (<code>git rev-parse HEAD</code>)</li>\n<li>The output of <code>bazel version</code></li>\n</ol>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>import pickle<br>\nimport tensorflow as tf<br>\nimport numpy as np<br>\n#pickle.dump( u_np, open( \"A.txt\", \"wb\" ) )<br>\nA = pickle.load( open( \"A.txt\", \"rb\" ) )</p>\n<p>u_np, s, V = np.linalg.svd(A, full_matrices=False)<br>\nnp.dot(np.transpose(u_np), u_np)<br>\n#orthogonal in numpy<br>\narray([[  1.00000024e+00,  -9.31322575e-09],<br>\n[ -9.31322575e-09,   1.00000036e+00]], dtype=float32)</p>\n<p>#analysis of orthogonality<br>\nsess = tf.Session()<br>\nA = tf.constant(A)<br>\nS,U,V = tf.svd(A)<br>\n#singular values look ok<br>\nsess.run(S)<br>\nu_np = sess.run(U)<br>\nnp.dot(np.transpose(u_np), u_np)<br>\n#This should give the identity but does not, indicating<br>\n#U is not orthonormal<br>\narray([[  9.99998868e-01,  -1.16007868e-07],<br>\n[ -1.16007868e-07,   1.00000167e+00]], dtype=float32)</p>\n<h3>What other attempted solutions have you tried?</h3>\n<p>I need to obtain orthonormal vectors such as output by a QR decomposition.<br>\nI have tried getting orthonormal vectors using the Cholesky operation to do a QR (still missing in tensorflow).<br>\nL=Cholesky(A^T<em>A)<br>\nU=A</em>L^-1<br>\nIn this case the matrix inverse operation introduces stochastic variation into a completely deterministic net with identity weights and the results is slightly not orthonormal.  Additionally using the tf.assign operation (to save L^-1) on the results of the L^-1 output from the cholesky actually changes its value.  tf.assign seems to work in other cases.</p>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment or provide link).<br>\nThe following is the pickled matrix needed for the example</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/files/630980/A.txt\">A.txt</a></p>", "body_text": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\nFor general support from the community, see StackOverflow.\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\nout of scope for GitHub Issues and point people to StackOverflow.\nFor bugs or installation issues, please provide the following information.\nThe more information you provide, the more easily we will be able to offer\nhelp and advice.\nWhat related GitHub issues or StackOverflow threads have you found by searching the web for #2207\nEnvironment info\nOperating System: Linux Mint 17.3 a.k.a. Ubuntu 14.04.4 LTS, Trusty Tahr\nInstalled version of CUDA and cuDNN:\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\nCUDA 7.5\ncuDNN 5.5\n-rw-r--r-- 1 root root 322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root     16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5\nlrwxrwxrwx 1 root root     19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\n-rwxr-xr-x 1 root root 383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root 720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a\nIf installed from binary pip package, provide:\n\nA link to the pip package you installed:\nexport TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.10.0-cp34-cp34m-linux_x86_64.whl\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\".\nkps3@newton ~ $ python3 -c \"import tensorflow; print(tensorflow.version)\"\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\n0.10.0\n\nIf installed from source, provide\n\nThe commit hash (git rev-parse HEAD)\nThe output of bazel version\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nimport pickle\nimport tensorflow as tf\nimport numpy as np\n#pickle.dump( u_np, open( \"A.txt\", \"wb\" ) )\nA = pickle.load( open( \"A.txt\", \"rb\" ) )\nu_np, s, V = np.linalg.svd(A, full_matrices=False)\nnp.dot(np.transpose(u_np), u_np)\n#orthogonal in numpy\narray([[  1.00000024e+00,  -9.31322575e-09],\n[ -9.31322575e-09,   1.00000036e+00]], dtype=float32)\n#analysis of orthogonality\nsess = tf.Session()\nA = tf.constant(A)\nS,U,V = tf.svd(A)\n#singular values look ok\nsess.run(S)\nu_np = sess.run(U)\nnp.dot(np.transpose(u_np), u_np)\n#This should give the identity but does not, indicating\n#U is not orthonormal\narray([[  9.99998868e-01,  -1.16007868e-07],\n[ -1.16007868e-07,   1.00000167e+00]], dtype=float32)\nWhat other attempted solutions have you tried?\nI need to obtain orthonormal vectors such as output by a QR decomposition.\nI have tried getting orthonormal vectors using the Cholesky operation to do a QR (still missing in tensorflow).\nL=Cholesky(A^TA)\nU=AL^-1\nIn this case the matrix inverse operation introduces stochastic variation into a completely deterministic net with identity weights and the results is slightly not orthonormal.  Additionally using the tf.assign operation (to save L^-1) on the results of the L^-1 output from the cholesky actually changes its value.  tf.assign seems to work in other cases.\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment or provide link).\nThe following is the pickled matrix needed for the example\nA.txt", "body": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\r\n\r\nFor general support from the community, see [StackOverflow](https://stackoverflow.com/questions/tagged/tensorflow).\r\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\r\nout of scope for GitHub Issues and point people to StackOverflow.\r\n\r\nFor bugs or installation issues, please provide the following information.\r\nThe more information you provide, the more easily we will be able to offer\r\nhelp and advice.\r\n\r\n### What related GitHub issues or StackOverflow threads have you found by searching the web for https://github.com/tensorflow/tensorflow/issues/2207\r\n\r\n### Environment info\r\nOperating System: Linux Mint 17.3 a.k.a. Ubuntu 14.04.4 LTS, Trusty Tahr\r\n\r\nInstalled version of CUDA and cuDNN: \r\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\r\nCUDA 7.5\r\ncuDNN 5.5\r\n-rw-r--r-- 1 root root 322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a\r\nlrwxrwxrwx 1 root root     16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5\r\nlrwxrwxrwx 1 root root     19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\r\n-rwxr-xr-x 1 root root 383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18\r\n-rw-r--r-- 1 root root 720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a\r\n\r\nIf installed from binary pip package, provide:\r\n\r\n1. A link to the pip package you installed:\r\nexport TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.10.0-cp34-cp34m-linux_x86_64.whl\r\n2. The output from `python -c \"import tensorflow; print(tensorflow.__version__)\"`.\r\nkps3@newton ~ $ python3 -c \"import tensorflow; print(tensorflow.__version__)\"\r\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\r\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\r\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\r\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcuda.so.1 locally\r\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\r\n0.10.0\r\n\r\nIf installed from source, provide \r\n\r\n1. The commit hash (`git rev-parse HEAD`)\r\n2. The output of `bazel version`\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n\r\nimport pickle\r\nimport tensorflow as tf\r\nimport numpy as np\r\n#pickle.dump( u_np, open( \"A.txt\", \"wb\" ) )\r\nA = pickle.load( open( \"A.txt\", \"rb\" ) )\r\n\r\nu_np, s, V = np.linalg.svd(A, full_matrices=False)\r\nnp.dot(np.transpose(u_np), u_np)\r\n#orthogonal in numpy\r\narray([[  1.00000024e+00,  -9.31322575e-09],\r\n       [ -9.31322575e-09,   1.00000036e+00]], dtype=float32)\r\n\r\n#analysis of orthogonality\r\nsess = tf.Session()\r\nA = tf.constant(A)\r\nS,U,V = tf.svd(A)\r\n#singular values look ok\r\nsess.run(S)\r\nu_np = sess.run(U)\r\nnp.dot(np.transpose(u_np), u_np)\r\n#This should give the identity but does not, indicating\r\n#U is not orthonormal\r\narray([[  9.99998868e-01,  -1.16007868e-07],\r\n       [ -1.16007868e-07,   1.00000167e+00]], dtype=float32)\r\n\r\n### What other attempted solutions have you tried?\r\nI need to obtain orthonormal vectors such as output by a QR decomposition.\r\nI have tried getting orthonormal vectors using the Cholesky operation to do a QR (still missing in tensorflow). \r\nL=Cholesky(A^T*A)\r\nU=A*L^-1\r\n In this case the matrix inverse operation introduces stochastic variation into a completely deterministic net with identity weights and the results is slightly not orthonormal.  Additionally using the tf.assign operation (to save L^-1) on the results of the L^-1 output from the cholesky actually changes its value.  tf.assign seems to work in other cases.\r\n\r\n### Logs or other output that would be helpful\r\n(If logs are large, please upload as attachment or provide link).\r\nThe following is the pickled matrix needed for the example\r\n\r\n[A.txt](https://github.com/tensorflow/tensorflow/files/630980/A.txt)\r\n"}