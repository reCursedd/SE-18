{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/328322934", "html_url": "https://github.com/tensorflow/tensorflow/issues/12901#issuecomment-328322934", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12901", "id": 328322934, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODMyMjkzNA==", "user": {"login": "gaohuazuo", "id": 10446514, "node_id": "MDQ6VXNlcjEwNDQ2NTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/10446514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaohuazuo", "html_url": "https://github.com/gaohuazuo", "followers_url": "https://api.github.com/users/gaohuazuo/followers", "following_url": "https://api.github.com/users/gaohuazuo/following{/other_user}", "gists_url": "https://api.github.com/users/gaohuazuo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaohuazuo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaohuazuo/subscriptions", "organizations_url": "https://api.github.com/users/gaohuazuo/orgs", "repos_url": "https://api.github.com/users/gaohuazuo/repos", "events_url": "https://api.github.com/users/gaohuazuo/events{/privacy}", "received_events_url": "https://api.github.com/users/gaohuazuo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-10T06:24:49Z", "updated_at": "2017-09-10T06:24:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> Looks like python wrapper is irrelevant.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python <span class=\"pl-k\">import</span> pywrap_tensorflow\n<span class=\"pl-k\">from</span> tensorflow.python.ops <span class=\"pl-k\">import</span> gen_data_flow_ops\n\nconfig <span class=\"pl-k\">=</span> tf.ConfigProto(<span class=\"pl-v\">graph_options</span><span class=\"pl-k\">=</span>tf.GraphOptions(<span class=\"pl-v\">optimizer_options</span><span class=\"pl-k\">=</span>tf.OptimizerOptions(<span class=\"pl-v\">opt_level</span><span class=\"pl-k\">=</span>tf.OptimizerOptions.L0)))\n<span class=\"pl-c1\">print</span>(config)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> graph_options {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   optimizer_options {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>     opt_level: L0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> }</span>\n\nsess <span class=\"pl-k\">=</span> tf.InteractiveSession(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config)\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>(<span class=\"pl-smi\">x</span>):\n    sess._extend_graph()\n    <span class=\"pl-k\">with</span> tf.errors.raise_exception_on_not_ok_status() <span class=\"pl-k\">as</span> status:\n        result, <span class=\"pl-k\">=</span> pywrap_tensorflow.TF_Run(\n            sess._session, <span class=\"pl-c1\">None</span>, {}, [x.name.encode()], [], status, <span class=\"pl-c1\">None</span>)\n    <span class=\"pl-k\">return</span> result\n\nhandle_tensor <span class=\"pl-k\">=</span> gen_data_flow_ops._get_session_handle(tf.constant(<span class=\"pl-c1\">0</span>))\nindirect_handle_tensor <span class=\"pl-k\">=</span> tf.identity(handle_tensor)\nhandle_ph <span class=\"pl-k\">=</span> tf.placeholder(tf.string, [])\nsession_tensor <span class=\"pl-k\">=</span> gen_data_flow_ops._get_session_tensor(handle_ph, tf.int32)\n\nhandle <span class=\"pl-k\">=</span> run(handle_tensor)\nindirect_handle <span class=\"pl-k\">=</span> run(indirect_handle_tensor)\n\nsession_tensor.eval(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{handle_ph: handle}) <span class=\"pl-c\"><span class=\"pl-c\">#</span> OK</span>\nsession_tensor.eval(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{handle_ph: indirect_handle}) <span class=\"pl-c\"><span class=\"pl-c\">#</span> InvalidArgumentError</span></pre></div>", "body_text": "@yaroslavvb Looks like python wrapper is irrelevant.\nimport tensorflow as tf\nfrom tensorflow.python import pywrap_tensorflow\nfrom tensorflow.python.ops import gen_data_flow_ops\n\nconfig = tf.ConfigProto(graph_options=tf.GraphOptions(optimizer_options=tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)))\nprint(config)\n# graph_options {\n#   optimizer_options {\n#     opt_level: L0\n#   }\n# }\n\nsess = tf.InteractiveSession(config=config)\ndef run(x):\n    sess._extend_graph()\n    with tf.errors.raise_exception_on_not_ok_status() as status:\n        result, = pywrap_tensorflow.TF_Run(\n            sess._session, None, {}, [x.name.encode()], [], status, None)\n    return result\n\nhandle_tensor = gen_data_flow_ops._get_session_handle(tf.constant(0))\nindirect_handle_tensor = tf.identity(handle_tensor)\nhandle_ph = tf.placeholder(tf.string, [])\nsession_tensor = gen_data_flow_ops._get_session_tensor(handle_ph, tf.int32)\n\nhandle = run(handle_tensor)\nindirect_handle = run(indirect_handle_tensor)\n\nsession_tensor.eval(feed_dict={handle_ph: handle}) # OK\nsession_tensor.eval(feed_dict={handle_ph: indirect_handle}) # InvalidArgumentError", "body": "@yaroslavvb Looks like python wrapper is irrelevant.\r\n\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow.python import pywrap_tensorflow\r\nfrom tensorflow.python.ops import gen_data_flow_ops\r\n\r\nconfig = tf.ConfigProto(graph_options=tf.GraphOptions(optimizer_options=tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)))\r\nprint(config)\r\n# graph_options {\r\n#   optimizer_options {\r\n#     opt_level: L0\r\n#   }\r\n# }\r\n\r\nsess = tf.InteractiveSession(config=config)\r\ndef run(x):\r\n    sess._extend_graph()\r\n    with tf.errors.raise_exception_on_not_ok_status() as status:\r\n        result, = pywrap_tensorflow.TF_Run(\r\n            sess._session, None, {}, [x.name.encode()], [], status, None)\r\n    return result\r\n\r\nhandle_tensor = gen_data_flow_ops._get_session_handle(tf.constant(0))\r\nindirect_handle_tensor = tf.identity(handle_tensor)\r\nhandle_ph = tf.placeholder(tf.string, [])\r\nsession_tensor = gen_data_flow_ops._get_session_tensor(handle_ph, tf.int32)\r\n\r\nhandle = run(handle_tensor)\r\nindirect_handle = run(indirect_handle_tensor)\r\n\r\nsession_tensor.eval(feed_dict={handle_ph: handle}) # OK\r\nsession_tensor.eval(feed_dict={handle_ph: indirect_handle}) # InvalidArgumentError\r\n```"}