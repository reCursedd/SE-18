{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350566158", "html_url": "https://github.com/tensorflow/tensorflow/pull/15248#issuecomment-350566158", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15248", "id": 350566158, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDU2NjE1OA==", "user": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-10T17:59:13Z", "updated_at": "2017-12-10T17:59:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Help me understand why this change is necessary. The current approach (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"280550250\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/15217\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/15217/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/15217\">#15217</a>) works.<br>\n<code>python -m virtualenv</code> can be used to create virtualenvs containing any desired Python versions, regardless of the Python version of the <code>python</code> binary. The desired Python version is specified with the <code>-p &lt;PATH_TO_PYTHON_BIN&gt;</code> argument, as in the current approach. For example, if <code>PATH_TO_PYTHON_BIN</code> is /usr/bin/python3.6, the created virtualenv will have Python 3.6 inside it, even though the <code>python</code> in <code>python -m virtualenv -p ...</code> is Python 2.7.</p>\n<p>I verified this with the CPU and GPU builds that we have, e.g.,<br>\n<a href=\"http://ci.tensorflow.org/view/Experimental/job/experimental-cais-linux-gpu/7/\" rel=\"nofollow\">http://ci.tensorflow.org/view/Experimental/job/experimental-cais-linux-gpu/7/</a> (the python 3.6 build failure there is unrelated)<br>\n<a href=\"http://ci.tensorflow.org/view/Tensorflow%20Jenkins%20Monitored%20builds/job/nightly-matrix-linux-gpu/734/\" rel=\"nofollow\">http://ci.tensorflow.org/view/Tensorflow%20Jenkins%20Monitored%20builds/job/nightly-matrix-linux-gpu/734/</a> (The no_pip build failure there is unrelated).</p>\n<p>The approach in this PR has the following problems</p>\n<ol>\n<li>it is less economical because it requires installation of more packages.</li>\n<li><code>python3.6 -m virtualenv ...</code> probably doesn't work, because <code>venv</code> is required instead.</li>\n</ol>", "body_text": "Help me understand why this change is necessary. The current approach (#15217) works.\npython -m virtualenv can be used to create virtualenvs containing any desired Python versions, regardless of the Python version of the python binary. The desired Python version is specified with the -p <PATH_TO_PYTHON_BIN> argument, as in the current approach. For example, if PATH_TO_PYTHON_BIN is /usr/bin/python3.6, the created virtualenv will have Python 3.6 inside it, even though the python in python -m virtualenv -p ... is Python 2.7.\nI verified this with the CPU and GPU builds that we have, e.g.,\nhttp://ci.tensorflow.org/view/Experimental/job/experimental-cais-linux-gpu/7/ (the python 3.6 build failure there is unrelated)\nhttp://ci.tensorflow.org/view/Tensorflow%20Jenkins%20Monitored%20builds/job/nightly-matrix-linux-gpu/734/ (The no_pip build failure there is unrelated).\nThe approach in this PR has the following problems\n\nit is less economical because it requires installation of more packages.\npython3.6 -m virtualenv ... probably doesn't work, because venv is required instead.", "body": "Help me understand why this change is necessary. The current approach (https://github.com/tensorflow/tensorflow/pull/15217) works. \r\n`python -m virtualenv` can be used to create virtualenvs containing any desired Python versions, regardless of the Python version of the `python` binary. The desired Python version is specified with the `-p <PATH_TO_PYTHON_BIN>` argument, as in the current approach. For example, if `PATH_TO_PYTHON_BIN` is /usr/bin/python3.6, the created virtualenv will have Python 3.6 inside it, even though the `python` in `python -m virtualenv -p ...` is Python 2.7.\r\n\r\nI verified this with the CPU and GPU builds that we have, e.g.,\r\nhttp://ci.tensorflow.org/view/Experimental/job/experimental-cais-linux-gpu/7/ (the python 3.6 build failure there is unrelated)\r\nhttp://ci.tensorflow.org/view/Tensorflow%20Jenkins%20Monitored%20builds/job/nightly-matrix-linux-gpu/734/ (The no_pip build failure there is unrelated).\r\n\r\nThe approach in this PR has the following problems\r\n1) it is less economical because it requires installation of more packages.\r\n2) `python3.6 -m virtualenv ...` probably doesn't work, because `venv` is required instead.\r\n"}