{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/312485929", "html_url": "https://github.com/tensorflow/tensorflow/issues/10824#issuecomment-312485929", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10824", "id": 312485929, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQ4NTkyOQ==", "user": {"login": "fesun", "id": 23738439, "node_id": "MDQ6VXNlcjIzNzM4NDM5", "avatar_url": "https://avatars3.githubusercontent.com/u/23738439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fesun", "html_url": "https://github.com/fesun", "followers_url": "https://api.github.com/users/fesun/followers", "following_url": "https://api.github.com/users/fesun/following{/other_user}", "gists_url": "https://api.github.com/users/fesun/gists{/gist_id}", "starred_url": "https://api.github.com/users/fesun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fesun/subscriptions", "organizations_url": "https://api.github.com/users/fesun/orgs", "repos_url": "https://api.github.com/users/fesun/repos", "events_url": "https://api.github.com/users/fesun/events{/privacy}", "received_events_url": "https://api.github.com/users/fesun/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-02T11:23:54Z", "updated_at": "2017-07-02T11:23:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=326106\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aselle\">@aselle</a> I saw ones_initializer and zeros_initializer have been changed in latest version, I haven't read the latest code carefully. But for v1.0.1, <a href=\"https://github.com/tensorflow/tensorflow/blob/v1.0.1/tensorflow/python/ops/init_ops.py#L62\">https://github.com/tensorflow/tensorflow/blob/v1.0.1/tensorflow/python/ops/init_ops.py#L62</a>, ones_initializer and zeros_initializer calls constant_op.constant to create constant tensors storing a bunch of ones and zeros inside them. Constant tensors prevent assign op to transfer buffer ownership from input tensor to input variable.</p>\n<p><code>a = tf.get_variable(\"BigVar\", [1024 * 1024 * 1024], dtype=tf.float32, initializer=tf.zeros_initializer(dtype=tf.float32))</code> will first create one constant tensor with shape [1024 * 1024 * 1024], then assign it to variable \"BigVar\", assign op can't transfer buffer ownership from the constant tensor to \"BigVar\" even it's only used for creating \"BigVar\" because constant tensor reference count is always greater than 1. This wastes a lot of memory when creating very large variables.<br>\nMy suggestion is adding operators creating non-constant tensors for one_initializer and zeros_intializer, then assign op could try it's best to avoid memory copy.</p>", "body_text": "@aselle I saw ones_initializer and zeros_initializer have been changed in latest version, I haven't read the latest code carefully. But for v1.0.1, https://github.com/tensorflow/tensorflow/blob/v1.0.1/tensorflow/python/ops/init_ops.py#L62, ones_initializer and zeros_initializer calls constant_op.constant to create constant tensors storing a bunch of ones and zeros inside them. Constant tensors prevent assign op to transfer buffer ownership from input tensor to input variable.\na = tf.get_variable(\"BigVar\", [1024 * 1024 * 1024], dtype=tf.float32, initializer=tf.zeros_initializer(dtype=tf.float32)) will first create one constant tensor with shape [1024 * 1024 * 1024], then assign it to variable \"BigVar\", assign op can't transfer buffer ownership from the constant tensor to \"BigVar\" even it's only used for creating \"BigVar\" because constant tensor reference count is always greater than 1. This wastes a lot of memory when creating very large variables.\nMy suggestion is adding operators creating non-constant tensors for one_initializer and zeros_intializer, then assign op could try it's best to avoid memory copy.", "body": "@aselle I saw ones_initializer and zeros_initializer have been changed in latest version, I haven't read the latest code carefully. But for v1.0.1, https://github.com/tensorflow/tensorflow/blob/v1.0.1/tensorflow/python/ops/init_ops.py#L62, ones_initializer and zeros_initializer calls constant_op.constant to create constant tensors storing a bunch of ones and zeros inside them. Constant tensors prevent assign op to transfer buffer ownership from input tensor to input variable.\r\n\r\n`a = tf.get_variable(\"BigVar\", [1024 * 1024 * 1024], dtype=tf.float32, initializer=tf.zeros_initializer(dtype=tf.float32))` will first create one constant tensor with shape [1024 * 1024 * 1024], then assign it to variable \"BigVar\", assign op can't transfer buffer ownership from the constant tensor to \"BigVar\" even it's only used for creating \"BigVar\" because constant tensor reference count is always greater than 1. This wastes a lot of memory when creating very large variables.\r\nMy suggestion is adding operators creating non-constant tensors for one_initializer and zeros_intializer, then assign op could try it's best to avoid memory copy."}