{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/363695237", "html_url": "https://github.com/tensorflow/tensorflow/issues/15924#issuecomment-363695237", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15924", "id": 363695237, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzY5NTIzNw==", "user": {"login": "arun-kumark", "id": 13482732, "node_id": "MDQ6VXNlcjEzNDgyNzMy", "avatar_url": "https://avatars1.githubusercontent.com/u/13482732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arun-kumark", "html_url": "https://github.com/arun-kumark", "followers_url": "https://api.github.com/users/arun-kumark/followers", "following_url": "https://api.github.com/users/arun-kumark/following{/other_user}", "gists_url": "https://api.github.com/users/arun-kumark/gists{/gist_id}", "starred_url": "https://api.github.com/users/arun-kumark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arun-kumark/subscriptions", "organizations_url": "https://api.github.com/users/arun-kumark/orgs", "repos_url": "https://api.github.com/users/arun-kumark/repos", "events_url": "https://api.github.com/users/arun-kumark/events{/privacy}", "received_events_url": "https://api.github.com/users/arun-kumark/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-07T08:36:07Z", "updated_at": "2018-02-07T08:36:07Z", "author_association": "NONE", "body_html": "<p>python touch.py -m res101_faster_rcnn_iter_5600.ckpt.meta -o res101_faster_rcnn_iter_5600.pb -b</p>\n<p>and my touch.py has following contents, which I took from some repository:</p>\n<pre><code>#! /usr/bin/python3\n#generate a pb file !\nfrom __future__ import print_function\nimport tensorflow as tf\nimport argparse\nimport os\n\nif __name__ == '__main__':\n\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-m','--model',required=True, type=str, metavar='' ,help=\"model meta graph AKA .ckpt.meta file to start with\")\n    parser.add_argument('-o', '--output_file', type=str, required=True, metavar='',help=\"Where to save the output file \")\n    parser.add_argument('-b','--bin',dest='binary_file',action='store_true', help=\"saves file as binary instead of default text file\")\n    parser.add_argument('-v','--verbose',dest='verbosity',action='store_true',help=\"trigger the verbose output (show tensorflow debug info)\")\n    args = parser.parse_args()\n    #get output dir from output file name\n    output_dir = os.path.dirname(args.output_file)\n    if output_dir == \"\":\n        output_dir=\".\"\n    output_file_name = os.path.basename(args.output_file)\n    #setting verbosity    \n    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n    if args.verbosity:\n        os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'\n    print (\"Welcome to tensorflow graph saver\")\n    print (\"loading \",os.path.basename(args.model))\n    #opening a new session\n    with tf.Session() as sess:\n        new_saver = tf.train.import_meta_graph(args.model)\n        new_saver.restore(sess,args.model.replace(\".meta\",\"\") )\n        print (\"model\",os.path.basename(args.model),\"loaded correctly... converting it to graph\")\n        tf.train.write_graph(sess.graph, output_dir ,output_file_name, as_text=not args.binary_file)\n        print(\"conversion done, output file saved as\",args.output_file)\n</code></pre>", "body_text": "python touch.py -m res101_faster_rcnn_iter_5600.ckpt.meta -o res101_faster_rcnn_iter_5600.pb -b\nand my touch.py has following contents, which I took from some repository:\n#! /usr/bin/python3\n#generate a pb file !\nfrom __future__ import print_function\nimport tensorflow as tf\nimport argparse\nimport os\n\nif __name__ == '__main__':\n\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-m','--model',required=True, type=str, metavar='' ,help=\"model meta graph AKA .ckpt.meta file to start with\")\n    parser.add_argument('-o', '--output_file', type=str, required=True, metavar='',help=\"Where to save the output file \")\n    parser.add_argument('-b','--bin',dest='binary_file',action='store_true', help=\"saves file as binary instead of default text file\")\n    parser.add_argument('-v','--verbose',dest='verbosity',action='store_true',help=\"trigger the verbose output (show tensorflow debug info)\")\n    args = parser.parse_args()\n    #get output dir from output file name\n    output_dir = os.path.dirname(args.output_file)\n    if output_dir == \"\":\n        output_dir=\".\"\n    output_file_name = os.path.basename(args.output_file)\n    #setting verbosity    \n    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n    if args.verbosity:\n        os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'\n    print (\"Welcome to tensorflow graph saver\")\n    print (\"loading \",os.path.basename(args.model))\n    #opening a new session\n    with tf.Session() as sess:\n        new_saver = tf.train.import_meta_graph(args.model)\n        new_saver.restore(sess,args.model.replace(\".meta\",\"\") )\n        print (\"model\",os.path.basename(args.model),\"loaded correctly... converting it to graph\")\n        tf.train.write_graph(sess.graph, output_dir ,output_file_name, as_text=not args.binary_file)\n        print(\"conversion done, output file saved as\",args.output_file)", "body": "python touch.py -m res101_faster_rcnn_iter_5600.ckpt.meta -o res101_faster_rcnn_iter_5600.pb -b\r\n\r\nand my touch.py has following contents, which I took from some repository: \r\n```\r\n#! /usr/bin/python3\r\n#generate a pb file !\r\nfrom __future__ import print_function\r\nimport tensorflow as tf\r\nimport argparse\r\nimport os\r\n\r\nif __name__ == '__main__':\r\n\r\n\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument('-m','--model',required=True, type=str, metavar='' ,help=\"model meta graph AKA .ckpt.meta file to start with\")\r\n    parser.add_argument('-o', '--output_file', type=str, required=True, metavar='',help=\"Where to save the output file \")\r\n    parser.add_argument('-b','--bin',dest='binary_file',action='store_true', help=\"saves file as binary instead of default text file\")\r\n    parser.add_argument('-v','--verbose',dest='verbosity',action='store_true',help=\"trigger the verbose output (show tensorflow debug info)\")\r\n    args = parser.parse_args()\r\n    #get output dir from output file name\r\n    output_dir = os.path.dirname(args.output_file)\r\n    if output_dir == \"\":\r\n        output_dir=\".\"\r\n    output_file_name = os.path.basename(args.output_file)\r\n    #setting verbosity    \r\n    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\r\n    if args.verbosity:\r\n        os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'\r\n    print (\"Welcome to tensorflow graph saver\")\r\n    print (\"loading \",os.path.basename(args.model))\r\n    #opening a new session\r\n    with tf.Session() as sess:\r\n        new_saver = tf.train.import_meta_graph(args.model)\r\n        new_saver.restore(sess,args.model.replace(\".meta\",\"\") )\r\n        print (\"model\",os.path.basename(args.model),\"loaded correctly... converting it to graph\")\r\n        tf.train.write_graph(sess.graph, output_dir ,output_file_name, as_text=not args.binary_file)\r\n        print(\"conversion done, output file saved as\",args.output_file)\r\n```\r\n"}