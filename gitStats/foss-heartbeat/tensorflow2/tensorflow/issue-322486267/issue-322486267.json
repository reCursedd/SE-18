{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19242", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19242/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19242/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19242/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19242", "id": 322486267, "node_id": "MDU6SXNzdWUzMjI0ODYyNjc=", "number": 19242, "title": "Can TFLite treat input/output tensors as flat buffers just like TFMobile used to?", "user": {"login": "radoye", "id": 6981187, "node_id": "MDQ6VXNlcjY5ODExODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6981187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radoye", "html_url": "https://github.com/radoye", "followers_url": "https://api.github.com/users/radoye/followers", "following_url": "https://api.github.com/users/radoye/following{/other_user}", "gists_url": "https://api.github.com/users/radoye/gists{/gist_id}", "starred_url": "https://api.github.com/users/radoye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radoye/subscriptions", "organizations_url": "https://api.github.com/users/radoye/orgs", "repos_url": "https://api.github.com/users/radoye/repos", "events_url": "https://api.github.com/users/radoye/events{/privacy}", "received_events_url": "https://api.github.com/users/radoye/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750616506, "node_id": "MDU6TGFiZWw3NTA2MTY1MDY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:lite", "name": "comp:lite", "color": "0052cc", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-05-12T06:06:53Z", "updated_at": "2018-08-23T18:17:56Z", "closed_at": "2018-08-23T18:17:56Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 17.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.7.0</li>\n<li><strong>Python version</strong>:  3.5.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n/a</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: n/a</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>:  feature?</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>TF Mobile allows treating input/output as flat arrays (e.g. float[]). Why does the TF Lite design deviate? Moreover, TF Lite treats inputs differently from outputs which feels odd, especially when chaining models.</p>\n<p>Is there a way to get the old behavior back? Essentially, treating input/output tensor as flat buffers (appropriately sized) enables abstracting over the exact network input/output shapes in app code, making it more reusable. One can think of the network + shape as an existential package, which is quite convenient.</p>\n<h3>Source code / logs</h3>\n<p><a href=\"https://github.com/googlecodelabs/tensorflow-for-poets-2/blob/end_of_first_codelab/android/tflite/app/src/main/java/com/example/android/tflitecamerademo/ImageClassifier.java#L103\">TF Lite Android example</a> requires instantiating <code>float[][]</code> which is hard-coding network output shape into the app.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 17.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.7.0\nPython version:  3.5.4\nBazel version (if compiling from source): n/a\nGCC/Compiler version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce:  feature?\n\nDescribe the problem\nTF Mobile allows treating input/output as flat arrays (e.g. float[]). Why does the TF Lite design deviate? Moreover, TF Lite treats inputs differently from outputs which feels odd, especially when chaining models.\nIs there a way to get the old behavior back? Essentially, treating input/output tensor as flat buffers (appropriately sized) enables abstracting over the exact network input/output shapes in app code, making it more reusable. One can think of the network + shape as an existential package, which is quite convenient.\nSource code / logs\nTF Lite Android example requires instantiating float[][] which is hard-coding network output shape into the app.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 17.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.7.0\r\n- **Python version**:  3.5.4\r\n- **Bazel version (if compiling from source)**: n/a\r\n- **GCC/Compiler version (if compiling from source)**: n/a\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**:  feature?\r\n\r\n### Describe the problem\r\nTF Mobile allows treating input/output as flat arrays (e.g. float[]). Why does the TF Lite design deviate? Moreover, TF Lite treats inputs differently from outputs which feels odd, especially when chaining models.\r\n\r\nIs there a way to get the old behavior back? Essentially, treating input/output tensor as flat buffers (appropriately sized) enables abstracting over the exact network input/output shapes in app code, making it more reusable. One can think of the network + shape as an existential package, which is quite convenient.\r\n\r\n### Source code / logs\r\n[TF Lite Android example](https://github.com/googlecodelabs/tensorflow-for-poets-2/blob/end_of_first_codelab/android/tflite/app/src/main/java/com/example/android/tflitecamerademo/ImageClassifier.java#L103) requires instantiating `float[][]` which is hard-coding network output shape into the app. \r\n"}