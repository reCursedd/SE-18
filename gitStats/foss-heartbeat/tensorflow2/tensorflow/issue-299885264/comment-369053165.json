{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/369053165", "html_url": "https://github.com/tensorflow/tensorflow/issues/17233#issuecomment-369053165", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17233", "id": 369053165, "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTA1MzE2NQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-27T22:41:22Z", "updated_at": "2018-02-27T22:42:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> is there any other place that copy can happen? I'm finding that there's significant penalty in feeding read-only numpy arrays, and I can't see anything in that c_api.cc logic that checks for read-only attrs . This comes up when trying to feed data from Ray which uses read-only memory buffers</p>\n<p>IE,</p>\n<pre><code>sess.run(some_op, feed_dict={a:arr})  # 12.6 GB/sec\narr.flags['WRITEABLE']=False\nsess.run(some_op, feed_dict={a:arr})  # 1.2 GB/sec\n</code></pre>\n<p><a href=\"https://github.com/diux-dev/cluster/blob/ee5c07056a9d1dadb118aaa93e721bc81a962428/yuxin_numpy/tf_numpy_benchmark.py\">tf_numpy_benchmark.py</a></p>\n<pre><code>python tf_numpy_benchmark.py --benchmark=feed_cpu_tensor --allocator=tf --num-iters=51\nfeed_cpu_tensor               :  12.9 GB/sec, min:  7.75, median:  8.98, mean:  9.01\n\npython tf_numpy_benchmark.py --benchmark=feed_cpu_tensor --allocator=tf_readonly --num-iters=51\nfeed_cpu_tensor               :   1.1 GB/sec, min: 88.48, median: 91.55, mean: 93.30\n\n\n</code></pre>", "body_text": "@alextp is there any other place that copy can happen? I'm finding that there's significant penalty in feeding read-only numpy arrays, and I can't see anything in that c_api.cc logic that checks for read-only attrs . This comes up when trying to feed data from Ray which uses read-only memory buffers\nIE,\nsess.run(some_op, feed_dict={a:arr})  # 12.6 GB/sec\narr.flags['WRITEABLE']=False\nsess.run(some_op, feed_dict={a:arr})  # 1.2 GB/sec\n\ntf_numpy_benchmark.py\npython tf_numpy_benchmark.py --benchmark=feed_cpu_tensor --allocator=tf --num-iters=51\nfeed_cpu_tensor               :  12.9 GB/sec, min:  7.75, median:  8.98, mean:  9.01\n\npython tf_numpy_benchmark.py --benchmark=feed_cpu_tensor --allocator=tf_readonly --num-iters=51\nfeed_cpu_tensor               :   1.1 GB/sec, min: 88.48, median: 91.55, mean: 93.30", "body": "@alextp is there any other place that copy can happen? I'm finding that there's significant penalty in feeding read-only numpy arrays, and I can't see anything in that c_api.cc logic that checks for read-only attrs . This comes up when trying to feed data from Ray which uses read-only memory buffers\r\n\r\nIE,\r\n```\r\nsess.run(some_op, feed_dict={a:arr})  # 12.6 GB/sec\r\narr.flags['WRITEABLE']=False\r\nsess.run(some_op, feed_dict={a:arr})  # 1.2 GB/sec\r\n```\r\n\r\n[tf_numpy_benchmark.py](https://github.com/diux-dev/cluster/blob/ee5c07056a9d1dadb118aaa93e721bc81a962428/yuxin_numpy/tf_numpy_benchmark.py)\r\n\r\n```\r\npython tf_numpy_benchmark.py --benchmark=feed_cpu_tensor --allocator=tf --num-iters=51\r\nfeed_cpu_tensor               :  12.9 GB/sec, min:  7.75, median:  8.98, mean:  9.01\r\n\r\npython tf_numpy_benchmark.py --benchmark=feed_cpu_tensor --allocator=tf_readonly --num-iters=51\r\nfeed_cpu_tensor               :   1.1 GB/sec, min: 88.48, median: 91.55, mean: 93.30\r\n\r\n\r\n```"}