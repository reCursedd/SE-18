{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/106966038", "pull_request_review_id": 27901342, "id": 106966038, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNjk2NjAzOA==", "diff_hunk": "@@ -597,6 +598,38 @@ def _CompareMaxPoolingBk(self, input_shape, output_shape, ksize, strides,\n       else:\n         self.assertAllClose(cpu_val, gpu_val)\n \n+  def _CompareMaxPoolingGradBk(self, input_shape, output_shape, ksize, strides,\n+                               padding):\n+    for dtype in np.float64, np.float32, np.float16:\n+      # Generate numbers in a narrow range, so that there are many duplicates\n+      # in the input.\n+      tensor_input = np.random.random_integers(0, 3, input_shape).astype(dtype)\n+      tensor_output = np.random.rand(*output_shape).astype(dtype)\n+      with self.test_session(use_gpu=True):\n+        t = constant_op.constant(tensor_input, shape=input_shape)\n+        _, argmax_op = nn_ops.max_pool_with_argmax(t, ksize, strides, padding)\n+        argmax = argmax_op.eval()\n+        grad_in = constant_op.constant(tensor_input, shape=input_shape)\n+        out_op = gen_nn_ops._max_pool_grad_grad_with_argmax(t, grad_in, argmax,\n+                                                            ksize, strides, padding)\n+        gpu_val = out_op.eval()\n+        self.assertShapeEqual(gpu_val, out_op)\n+      with self.test_session(use_gpu=False):\n+        t = constant_op.constant(tensor_input, shape=input_shape)\n+        out_op = nn_ops.max_pool(t, ksize, strides, padding)\n+        orig_out = out_op.eval()\n+        grad_in = constant_op.constant(tensor_input, shape=input_shape)\n+        out_op = gen_nn_ops._max_pool_grad_grad(t, orig_out, grad_in, ksize, strides,\n+                                                padding)\n+        cpu_val = out_op.eval()\n+        self.assertShapeEqual(cpu_val, out_op)\n+      if dtype == np.float16:", "path": "tensorflow/python/kernel_tests/pooling_ops_test.py", "position": null, "original_position": 55, "commit_id": "44449164baa4a004f69b5975a23c6335bc09797f", "original_commit_id": "3fdc5a2152162c0854194b3a84e4f2f89296e1a7", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "body": "You can simplify this by using assertAllCloseAccordingToType().", "created_at": "2017-03-20T17:34:53Z", "updated_at": "2017-03-28T04:33:24Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6664#discussion_r106966038", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6664", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/106966038"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6664#discussion_r106966038"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6664"}}, "body_html": "<p>You can simplify this by using assertAllCloseAccordingToType().</p>", "body_text": "You can simplify this by using assertAllCloseAccordingToType()."}