{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9710", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9710/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9710/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9710/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9710", "id": 226729690, "node_id": "MDU6SXNzdWUyMjY3Mjk2OTA=", "number": 9710, "title": "Error restoring checkpoints using tf.estimator.Estimator or tf.contrib.learn.Estimator, If moved since training", "user": {"login": "lw394", "id": 15891975, "node_id": "MDQ6VXNlcjE1ODkxOTc1", "avatar_url": "https://avatars3.githubusercontent.com/u/15891975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lw394", "html_url": "https://github.com/lw394", "followers_url": "https://api.github.com/users/lw394/followers", "following_url": "https://api.github.com/users/lw394/following{/other_user}", "gists_url": "https://api.github.com/users/lw394/gists{/gist_id}", "starred_url": "https://api.github.com/users/lw394/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lw394/subscriptions", "organizations_url": "https://api.github.com/users/lw394/orgs", "repos_url": "https://api.github.com/users/lw394/repos", "events_url": "https://api.github.com/users/lw394/events{/privacy}", "received_events_url": "https://api.github.com/users/lw394/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-06T02:04:21Z", "updated_at": "2017-05-12T15:51:55Z", "closed_at": "2017-05-06T18:57:39Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.1</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0/5.1</li>\n<li><strong>GPU model and memory</strong>: Titan X</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre>output_dir <span class=\"pl-k\">=</span> <span class=\"pl-k\">/</span>location1\nestimator <span class=\"pl-k\">=</span> learn.Estimator(<span class=\"pl-v\">model_fn</span><span class=\"pl-k\">=</span>model_fn, <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span>output_dir,\n                                <span class=\"pl-v\">params</span><span class=\"pl-k\">=</span>params, <span class=\"pl-v\">config</span> <span class=\"pl-k\">=</span> config)\nestimator.fit(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>train_input_fn, <span class=\"pl-v\">steps</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1000</span>)</pre></div>\n<div class=\"highlight highlight-source-shell\"><pre>$ cp -r /location1 /location2\n$ rm -rf /location1</pre></div>\n<div class=\"highlight highlight-source-python\"><pre>output_dir <span class=\"pl-k\">=</span> <span class=\"pl-k\">/</span>location2\nestimator <span class=\"pl-k\">=</span> learn.Estimator(<span class=\"pl-v\">model_fn</span><span class=\"pl-k\">=</span>model_fn, <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span>output_dir,\n                                <span class=\"pl-v\">params</span><span class=\"pl-k\">=</span>params, <span class=\"pl-v\">config</span> <span class=\"pl-k\">=</span> config)\nestimator.fit(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>train_input_fn, <span class=\"pl-v\">steps</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1000</span>)</pre></div>\n<div class=\"highlight highlight-source-shell\"><pre>InvalidArgumentError (see above <span class=\"pl-k\">for</span> traceback): Unsuccessful TensorSliceReader constructor: Failed to get matching files on /location1</pre></div>\n<h3>Describe the problem</h3>\n<p>I had a need to copy my checkpoints to continue training on another machine, without access to the original location.<br>\nThe root cause seems to be in tensorflow/python/training/session_manager.py  at line 177 where<br>\n<code>ckpt = saver_mode.get_checkpoint_state(checkpoint_dir)</code> is used to find the checkpoint path used at training, and then line 188<br>\n<code>saver.restore(sess, ckpt.model_checkpoint_path)</code> is used to restore, instead of using, for example, the latest checkpoint available provided by the model_dir argument to estimator.fit, which is the behavior I expected.<br>\nIn any case, it would be nice to be able to point an estimator.fit() or .train() (v1.1) call to continue at a specific checkpoint file.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.1\nBazel version (if compiling from source):\nCUDA/cuDNN version: 8.0/5.1\nGPU model and memory: Titan X\nExact command to reproduce:\n\noutput_dir = /location1\nestimator = learn.Estimator(model_fn=model_fn, model_dir=output_dir,\n                                params=params, config = config)\nestimator.fit(input_fn=train_input_fn, steps = 1000)\n$ cp -r /location1 /location2\n$ rm -rf /location1\noutput_dir = /location2\nestimator = learn.Estimator(model_fn=model_fn, model_dir=output_dir,\n                                params=params, config = config)\nestimator.fit(input_fn=train_input_fn, steps = 1000)\nInvalidArgumentError (see above for traceback): Unsuccessful TensorSliceReader constructor: Failed to get matching files on /location1\nDescribe the problem\nI had a need to copy my checkpoints to continue training on another machine, without access to the original location.\nThe root cause seems to be in tensorflow/python/training/session_manager.py  at line 177 where\nckpt = saver_mode.get_checkpoint_state(checkpoint_dir) is used to find the checkpoint path used at training, and then line 188\nsaver.restore(sess, ckpt.model_checkpoint_path) is used to restore, instead of using, for example, the latest checkpoint available provided by the model_dir argument to estimator.fit, which is the behavior I expected.\nIn any case, it would be nice to be able to point an estimator.fit() or .train() (v1.1) call to continue at a specific checkpoint file.", "body": "\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.1\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: 8.0/5.1\r\n- **GPU model and memory**: Titan X\r\n- **Exact command to reproduce**:\r\n\r\n```python\r\noutput_dir = /location1\r\nestimator = learn.Estimator(model_fn=model_fn, model_dir=output_dir,\r\n                                params=params, config = config)\r\nestimator.fit(input_fn=train_input_fn, steps = 1000)\r\n```\r\n```bash\r\n$ cp -r /location1 /location2\r\n$ rm -rf /location1\r\n```\r\n```python\r\noutput_dir = /location2\r\nestimator = learn.Estimator(model_fn=model_fn, model_dir=output_dir,\r\n                                params=params, config = config)\r\nestimator.fit(input_fn=train_input_fn, steps = 1000)\r\n```\r\n```bash\r\nInvalidArgumentError (see above for traceback): Unsuccessful TensorSliceReader constructor: Failed to get matching files on /location1\r\n```\r\n### Describe the problem\r\nI had a need to copy my checkpoints to continue training on another machine, without access to the original location. \r\nThe root cause seems to be in tensorflow/python/training/session_manager.py  at line 177 where \r\n`ckpt = saver_mode.get_checkpoint_state(checkpoint_dir)` is used to find the checkpoint path used at training, and then line 188\r\n`saver.restore(sess, ckpt.model_checkpoint_path)` is used to restore, instead of using, for example, the latest checkpoint available provided by the model_dir argument to estimator.fit, which is the behavior I expected. \r\nIn any case, it would be nice to be able to point an estimator.fit() or .train() (v1.1) call to continue at a specific checkpoint file.\r\n\r\n"}