{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/219903483", "pull_request_review_id": 158189530, "id": 219903483, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTkwMzQ4Mw==", "diff_hunk": "@@ -91,8 +91,11 @@ def reduce_dataset(dataset, reducer):\n     raise TypeError(\"`dataset` must be a `tf.data.Dataset` object.\")\n \n   # The sentinel dataset is used in case the reduced dataset is empty.\n+  initial_state = reducer.init_func(np.int64(0))\n+  if not isinstance(initial_state, tuple):\n+      initial_state = (initial_state,)\n   sentinel_dataset = dataset_ops.Dataset.from_tensors(\n-      reducer.finalize_func(reducer.init_func(np.int64(0))))\n+      reducer.finalize_func(*initial_state))", "path": "tensorflow/contrib/data/python/ops/get_single_element.py", "position": null, "original_position": 9, "commit_id": "c9564fda904fb82be64d7cc70f662d02d6f9574b", "original_commit_id": "1ab81d98b51ba6aaf71a6adde18995965ceb950d", "user": {"login": "omoindrot", "id": 13662086, "node_id": "MDQ6VXNlcjEzNjYyMDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/13662086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omoindrot", "html_url": "https://github.com/omoindrot", "followers_url": "https://api.github.com/users/omoindrot/followers", "following_url": "https://api.github.com/users/omoindrot/following{/other_user}", "gists_url": "https://api.github.com/users/omoindrot/gists{/gist_id}", "starred_url": "https://api.github.com/users/omoindrot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omoindrot/subscriptions", "organizations_url": "https://api.github.com/users/omoindrot/orgs", "repos_url": "https://api.github.com/users/omoindrot/repos", "events_url": "https://api.github.com/users/omoindrot/events{/privacy}", "received_events_url": "https://api.github.com/users/omoindrot/received_events", "type": "User", "site_admin": false}, "body": "Good point, I've looked into it and if the output of `reducer.init_func()` is a dictionary, `initial_state` will not be a tuple so we will convert it to a tuple with one element which will be passed to:\r\n```python\r\nreducer.finalize_func(*initial_state)\r\n```\r\nso it should be ok.\r\n\r\n\r\nI've looked into the code you linked:\r\n```python\r\nif not _should_unpack_args(nested_args): \r\n  nested_args = (nested_args,) \r\n```\r\n\r\nand the actual code of `_should_unpack_args` is:\r\n```python\r\ndef _should_unpack_args(args):\r\n  \"\"\"Returns `True` if `args` should be `*args` when passed to a callable.\"\"\"\r\n  return type(args) is tuple  # pylint: disable=unidiomatic-typecheck\r\n```\r\n\r\nso this is the same as what I did.\r\n\r\nLet me know what you think, I can definitely add a test with a dictionary state, and also refactor with a function named `_should_unpack_args` for clarity.", "created_at": "2018-09-24T16:32:43Z", "updated_at": "2018-09-24T16:32:43Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22405#discussion_r219903483", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22405", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/219903483"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22405#discussion_r219903483"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22405"}}, "body_html": "<p>Good point, I've looked into it and if the output of <code>reducer.init_func()</code> is a dictionary, <code>initial_state</code> will not be a tuple so we will convert it to a tuple with one element which will be passed to:</p>\n<div class=\"highlight highlight-source-python\"><pre>reducer.finalize_func(<span class=\"pl-k\">*</span>initial_state)</pre></div>\n<p>so it should be ok.</p>\n<p>I've looked into the code you linked:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> _should_unpack_args(nested_args): \n  nested_args <span class=\"pl-k\">=</span> (nested_args,) </pre></div>\n<p>and the actual code of <code>_should_unpack_args</code> is:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">_should_unpack_args</span>(<span class=\"pl-smi\">args</span>):\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Returns `True` if `args` should be `*args` when passed to a callable.<span class=\"pl-pds\">\"\"\"</span></span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">type</span>(args) <span class=\"pl-k\">is</span> <span class=\"pl-c1\">tuple</span>  <span class=\"pl-c\"><span class=\"pl-c\">#</span> pylint: disable=unidiomatic-typecheck</span></pre></div>\n<p>so this is the same as what I did.</p>\n<p>Let me know what you think, I can definitely add a test with a dictionary state, and also refactor with a function named <code>_should_unpack_args</code> for clarity.</p>", "body_text": "Good point, I've looked into it and if the output of reducer.init_func() is a dictionary, initial_state will not be a tuple so we will convert it to a tuple with one element which will be passed to:\nreducer.finalize_func(*initial_state)\nso it should be ok.\nI've looked into the code you linked:\nif not _should_unpack_args(nested_args): \n  nested_args = (nested_args,) \nand the actual code of _should_unpack_args is:\ndef _should_unpack_args(args):\n  \"\"\"Returns `True` if `args` should be `*args` when passed to a callable.\"\"\"\n  return type(args) is tuple  # pylint: disable=unidiomatic-typecheck\nso this is the same as what I did.\nLet me know what you think, I can definitely add a test with a dictionary state, and also refactor with a function named _should_unpack_args for clarity.", "in_reply_to_id": 219856206}