{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/232044100", "html_url": "https://github.com/tensorflow/tensorflow/issues/2237#issuecomment-232044100", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2237", "id": 232044100, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjA0NDEwMA==", "user": {"login": "ibab", "id": 890531, "node_id": "MDQ6VXNlcjg5MDUzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/890531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibab", "html_url": "https://github.com/ibab", "followers_url": "https://api.github.com/users/ibab/followers", "following_url": "https://api.github.com/users/ibab/following{/other_user}", "gists_url": "https://api.github.com/users/ibab/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibab/subscriptions", "organizations_url": "https://api.github.com/users/ibab/orgs", "repos_url": "https://api.github.com/users/ibab/repos", "events_url": "https://api.github.com/users/ibab/events{/privacy}", "received_events_url": "https://api.github.com/users/ibab/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-12T13:18:15Z", "updated_at": "2016-07-12T13:18:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a>: I thought about doing that at first, for example using heap indexing (or something more clever to deal with trees that are not complete).<br>\nThe problem I had is that each single example in the dataset can have a different shape.<br>\nE.g. if we want to do sentiment analysis on sentences, then the number of words can be different in each sentence and the structure of each tree depends on how the corresponding sentence was parsed.<br>\nOr maybe I've misunderstood your idea?</p>\n<p>I think a <code>TensorTrees</code> data structure that's similar in spirit to <code>TensorArray</code> could be a nice API.<br>\nIt could hold a number of trees (different tree structure for each example), and batch together all inputs/outputs that can currently be evaluated.<br>\n(Note that not all nodes inside a tree can be evaluated at the same time, as we need don't know the inputs for the upper levels of the tree at first).<br>\nThen a while loop could be used to manage the step by step evaluation of all trees.<br>\nIt could work something like this (in pseudocode):</p>\n<pre><code>trees = TensorTrees()\nwhile not trees.is_fully_evaluated():\n  inputs, outputs = trees.get_batch(max_batch_size=1000)\n  # Process inputs and store result in outputs\n</code></pre>\n<p>This would evaluate the lower levels of the trees in the first few batches, and then move upwards in later batches.<br>\nNot sure whether it would make sense to put this into the tensorflow core, maybe <a href=\"https://github.com/tensorflow/models\">tensorflow/models</a> would be a better location.</p>", "body_text": "@ebrevdo: I thought about doing that at first, for example using heap indexing (or something more clever to deal with trees that are not complete).\nThe problem I had is that each single example in the dataset can have a different shape.\nE.g. if we want to do sentiment analysis on sentences, then the number of words can be different in each sentence and the structure of each tree depends on how the corresponding sentence was parsed.\nOr maybe I've misunderstood your idea?\nI think a TensorTrees data structure that's similar in spirit to TensorArray could be a nice API.\nIt could hold a number of trees (different tree structure for each example), and batch together all inputs/outputs that can currently be evaluated.\n(Note that not all nodes inside a tree can be evaluated at the same time, as we need don't know the inputs for the upper levels of the tree at first).\nThen a while loop could be used to manage the step by step evaluation of all trees.\nIt could work something like this (in pseudocode):\ntrees = TensorTrees()\nwhile not trees.is_fully_evaluated():\n  inputs, outputs = trees.get_batch(max_batch_size=1000)\n  # Process inputs and store result in outputs\n\nThis would evaluate the lower levels of the trees in the first few batches, and then move upwards in later batches.\nNot sure whether it would make sense to put this into the tensorflow core, maybe tensorflow/models would be a better location.", "body": "@ebrevdo: I thought about doing that at first, for example using heap indexing (or something more clever to deal with trees that are not complete).\nThe problem I had is that each single example in the dataset can have a different shape.\nE.g. if we want to do sentiment analysis on sentences, then the number of words can be different in each sentence and the structure of each tree depends on how the corresponding sentence was parsed.\nOr maybe I've misunderstood your idea?\n\nI think a `TensorTrees` data structure that's similar in spirit to `TensorArray` could be a nice API.\nIt could hold a number of trees (different tree structure for each example), and batch together all inputs/outputs that can currently be evaluated.\n(Note that not all nodes inside a tree can be evaluated at the same time, as we need don't know the inputs for the upper levels of the tree at first).\nThen a while loop could be used to manage the step by step evaluation of all trees.\nIt could work something like this (in pseudocode):\n\n```\ntrees = TensorTrees()\nwhile not trees.is_fully_evaluated():\n  inputs, outputs = trees.get_batch(max_batch_size=1000)\n  # Process inputs and store result in outputs\n```\n\nThis would evaluate the lower levels of the trees in the first few batches, and then move upwards in later batches.\nNot sure whether it would make sense to put this into the tensorflow core, maybe [tensorflow/models](https://github.com/tensorflow/models) would be a better location.\n"}