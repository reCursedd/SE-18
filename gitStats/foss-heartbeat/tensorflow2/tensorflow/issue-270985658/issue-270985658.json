{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14213", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14213/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14213/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14213/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14213", "id": 270985658, "node_id": "MDU6SXNzdWUyNzA5ODU2NTg=", "number": 14213, "title": "Feature tf.image : scale image and keep aspect/ratio", "user": {"login": "Kayoku", "id": 14290069, "node_id": "MDQ6VXNlcjE0MjkwMDY5", "avatar_url": "https://avatars3.githubusercontent.com/u/14290069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kayoku", "html_url": "https://github.com/Kayoku", "followers_url": "https://api.github.com/users/Kayoku/followers", "following_url": "https://api.github.com/users/Kayoku/following{/other_user}", "gists_url": "https://api.github.com/users/Kayoku/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kayoku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kayoku/subscriptions", "organizations_url": "https://api.github.com/users/Kayoku/orgs", "repos_url": "https://api.github.com/users/Kayoku/repos", "events_url": "https://api.github.com/users/Kayoku/events{/privacy}", "received_events_url": "https://api.github.com/users/Kayoku/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-03T13:54:28Z", "updated_at": "2017-11-03T15:31:29Z", "closed_at": "2017-11-03T15:26:42Z", "author_association": "NONE", "body_html": "<p>Hi, I'm working on a FCN (Fully Convolutional Network) and use Tensorflow for this work. I have a lot of images in input, and they have very different dimensions, like 2340x4160 or 512x512. So my input need to be dynamic. It's why I search a way to resize images for having the greater dimension to a specific value, with respect to the aspect/ratio.</p>\n<p>Unfortunatly, Tensorflow doesn't provide this feature or, if I'm wrong, please just ignore this issue.</p>\n<p>So I write my own code. (It's probably not the most beautiful way to write this, sorry if this code seems ugly!)</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python</span>\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c1\">MAX_SIZE</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">512</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Image (for example: 2340x4160)</span>\nimage_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>your_image.jpg<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Open image</span>\nimage_string <span class=\"pl-k\">=</span> tf.read_file(image_path)\nimage        <span class=\"pl-k\">=</span> tf.image.decode_jpeg(image_string, <span class=\"pl-v\">channels</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Take width/height</span>\ninitial_width <span class=\"pl-k\">=</span> tf.shape(image)[<span class=\"pl-c1\">0</span>]\ninitial_height <span class=\"pl-k\">=</span> tf.shape(image)[<span class=\"pl-c1\">1</span>]\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Function for resizing </span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">_resize</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">y</span>):\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Take the greater value, and use it for the ratio </span>\n  max_ <span class=\"pl-k\">=</span> tf.maximum(initial_width, initial_height)\n  ratio <span class=\"pl-k\">=</span> tf.to_float(max_) <span class=\"pl-k\">/</span> tf.constant(<span class=\"pl-c1\">MAX_SIZE</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n\n  new_width <span class=\"pl-k\">=</span> tf.to_float(initial_width) <span class=\"pl-k\">/</span> ratio\n  new_height <span class=\"pl-k\">=</span> tf.to_float(initial_height) <span class=\"pl-k\">/</span> ratio\n\n  <span class=\"pl-k\">return</span> tf.to_int32(new_width), tf.to_int32(new_height)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Useless function for the next condition</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">_useless</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">y</span>):\n  <span class=\"pl-k\">return</span> x, y\n\nnew_w, new_h <span class=\"pl-k\">=</span> tf.cond(tf.logical_or(\n                         tf.greater(initial_width, tf.constant(<span class=\"pl-c1\">MAX_SIZE</span>)),\n                         tf.greater(initial_height, tf.constant(<span class=\"pl-c1\">MAX_SIZE</span>))\n                       ),\n        <span class=\"pl-k\">lambda</span>: _resize(initial_width, initial_height),\n        <span class=\"pl-k\">lambda</span>: _useless(initial_width, initial_height))\n\nresized_image <span class=\"pl-k\">=</span> tf.image.resize_images(image, [new_w, new_h])\nimage_int     <span class=\"pl-k\">=</span> tf.cast(resized_image, tf.uint8)\nimage_enc     <span class=\"pl-k\">=</span> tf.image.encode_jpeg(image_int)\nfwrite        <span class=\"pl-k\">=</span> tf.write_file(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my_resized_image.jpeg<span class=\"pl-pds\">\"</span></span>, image_enc)\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run([fwrite])</pre></div>\n<p>I think this feature could be very useful when working with image input to have a function (here: <strong>\"tf.image.resize_image_keep_aspect\"</strong>) which allow us to do the operation more quickly (and I hope more efficiently!)</p>\n<pre><code>#!/usr/bin/env python\nimport tensorflow as tf\n\nMAX_SIZE = 512\n\n# Image (for example: 2340x4160)\nimage_path = \"your_image.jpg\"\n\n# Open image\nimage_string  = tf.read_file(image_path)\nimage         = tf.image.decode_jpeg(image_string, channels=3)\nresized_image = tf.image.resize_image_keep_aspect(image, MAX_SIZE)\nimage_enc     = tf.image.encode_jpeg(resized_image)\nfwrite        = tf.write_file(\"my_resized_image.jpeg\", image_enc)\n\nsess = tf.Session()\nsess.run([fwrite])\n</code></pre>\n<p>If the feature already exist, sorry but I search on git/stackoverflow/google and didn't find any viable solution.</p>\n<p>If you have any question or if I'm not clear, ask to me.<br>\nHave a nice day :)</p>", "body_text": "Hi, I'm working on a FCN (Fully Convolutional Network) and use Tensorflow for this work. I have a lot of images in input, and they have very different dimensions, like 2340x4160 or 512x512. So my input need to be dynamic. It's why I search a way to resize images for having the greater dimension to a specific value, with respect to the aspect/ratio.\nUnfortunatly, Tensorflow doesn't provide this feature or, if I'm wrong, please just ignore this issue.\nSo I write my own code. (It's probably not the most beautiful way to write this, sorry if this code seems ugly!)\n#!/usr/bin/env python\nimport tensorflow as tf\n\nMAX_SIZE = 512\n\n# Image (for example: 2340x4160)\nimage_path = \"your_image.jpg\"\n\n# Open image\nimage_string = tf.read_file(image_path)\nimage        = tf.image.decode_jpeg(image_string, channels=3)\n\n# Take width/height\ninitial_width = tf.shape(image)[0]\ninitial_height = tf.shape(image)[1]\n\n# Function for resizing \ndef _resize(x, y):\n  # Take the greater value, and use it for the ratio \n  max_ = tf.maximum(initial_width, initial_height)\n  ratio = tf.to_float(max_) / tf.constant(MAX_SIZE, dtype=tf.float32)\n\n  new_width = tf.to_float(initial_width) / ratio\n  new_height = tf.to_float(initial_height) / ratio\n\n  return tf.to_int32(new_width), tf.to_int32(new_height)\n\n# Useless function for the next condition\ndef _useless(x, y):\n  return x, y\n\nnew_w, new_h = tf.cond(tf.logical_or(\n                         tf.greater(initial_width, tf.constant(MAX_SIZE)),\n                         tf.greater(initial_height, tf.constant(MAX_SIZE))\n                       ),\n        lambda: _resize(initial_width, initial_height),\n        lambda: _useless(initial_width, initial_height))\n\nresized_image = tf.image.resize_images(image, [new_w, new_h])\nimage_int     = tf.cast(resized_image, tf.uint8)\nimage_enc     = tf.image.encode_jpeg(image_int)\nfwrite        = tf.write_file(\"my_resized_image.jpeg\", image_enc)\n\nsess = tf.Session()\nsess.run([fwrite])\nI think this feature could be very useful when working with image input to have a function (here: \"tf.image.resize_image_keep_aspect\") which allow us to do the operation more quickly (and I hope more efficiently!)\n#!/usr/bin/env python\nimport tensorflow as tf\n\nMAX_SIZE = 512\n\n# Image (for example: 2340x4160)\nimage_path = \"your_image.jpg\"\n\n# Open image\nimage_string  = tf.read_file(image_path)\nimage         = tf.image.decode_jpeg(image_string, channels=3)\nresized_image = tf.image.resize_image_keep_aspect(image, MAX_SIZE)\nimage_enc     = tf.image.encode_jpeg(resized_image)\nfwrite        = tf.write_file(\"my_resized_image.jpeg\", image_enc)\n\nsess = tf.Session()\nsess.run([fwrite])\n\nIf the feature already exist, sorry but I search on git/stackoverflow/google and didn't find any viable solution.\nIf you have any question or if I'm not clear, ask to me.\nHave a nice day :)", "body": "Hi, I'm working on a FCN (Fully Convolutional Network) and use Tensorflow for this work. I have a lot of images in input, and they have very different dimensions, like 2340x4160 or 512x512. So my input need to be dynamic. It's why I search a way to resize images for having the greater dimension to a specific value, with respect to the aspect/ratio.\r\n\r\nUnfortunatly, Tensorflow doesn't provide this feature or, if I'm wrong, please just ignore this issue.\r\n\r\nSo I write my own code. (It's probably not the most beautiful way to write this, sorry if this code seems ugly!)\r\n\r\n``` python3\r\n#!/usr/bin/env python\r\nimport tensorflow as tf\r\n\r\nMAX_SIZE = 512\r\n\r\n# Image (for example: 2340x4160)\r\nimage_path = \"your_image.jpg\"\r\n\r\n# Open image\r\nimage_string = tf.read_file(image_path)\r\nimage        = tf.image.decode_jpeg(image_string, channels=3)\r\n\r\n# Take width/height\r\ninitial_width = tf.shape(image)[0]\r\ninitial_height = tf.shape(image)[1]\r\n\r\n# Function for resizing \r\ndef _resize(x, y):\r\n  # Take the greater value, and use it for the ratio \r\n  max_ = tf.maximum(initial_width, initial_height)\r\n  ratio = tf.to_float(max_) / tf.constant(MAX_SIZE, dtype=tf.float32)\r\n\r\n  new_width = tf.to_float(initial_width) / ratio\r\n  new_height = tf.to_float(initial_height) / ratio\r\n\r\n  return tf.to_int32(new_width), tf.to_int32(new_height)\r\n\r\n# Useless function for the next condition\r\ndef _useless(x, y):\r\n  return x, y\r\n\r\nnew_w, new_h = tf.cond(tf.logical_or(\r\n                         tf.greater(initial_width, tf.constant(MAX_SIZE)),\r\n                         tf.greater(initial_height, tf.constant(MAX_SIZE))\r\n                       ),\r\n        lambda: _resize(initial_width, initial_height),\r\n        lambda: _useless(initial_width, initial_height))\r\n\r\nresized_image = tf.image.resize_images(image, [new_w, new_h])\r\nimage_int     = tf.cast(resized_image, tf.uint8)\r\nimage_enc     = tf.image.encode_jpeg(image_int)\r\nfwrite        = tf.write_file(\"my_resized_image.jpeg\", image_enc)\r\n\r\nsess = tf.Session()\r\nsess.run([fwrite])\r\n```\r\n\r\nI think this feature could be very useful when working with image input to have a function (here: **\"tf.image.resize_image_keep_aspect\"**) which allow us to do the operation more quickly (and I hope more efficiently!)\r\n\r\n```\r\n#!/usr/bin/env python\r\nimport tensorflow as tf\r\n\r\nMAX_SIZE = 512\r\n\r\n# Image (for example: 2340x4160)\r\nimage_path = \"your_image.jpg\"\r\n\r\n# Open image\r\nimage_string  = tf.read_file(image_path)\r\nimage         = tf.image.decode_jpeg(image_string, channels=3)\r\nresized_image = tf.image.resize_image_keep_aspect(image, MAX_SIZE)\r\nimage_enc     = tf.image.encode_jpeg(resized_image)\r\nfwrite        = tf.write_file(\"my_resized_image.jpeg\", image_enc)\r\n\r\nsess = tf.Session()\r\nsess.run([fwrite])\r\n```\r\n\r\nIf the feature already exist, sorry but I search on git/stackoverflow/google and didn't find any viable solution.\r\n\r\nIf you have any question or if I'm not clear, ask to me.\r\nHave a nice day :)\r\n"}