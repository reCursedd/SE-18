{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338417043", "html_url": "https://github.com/tensorflow/tensorflow/issues/4863#issuecomment-338417043", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4863", "id": 338417043, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODQxNzA0Mw==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-21T17:03:02Z", "updated_at": "2017-10-21T17:03:02Z", "author_association": "MEMBER", "body_html": "<p>I take a look at the <code>tensorflow/core/kernels/cwise_ops_common.h</code> and <code>tensorflow/core/framework/register_types.h</code>.</p>\n<p>I don't have a android or iOS build but correct me if I am wrong: it seems that we could just use <code>TF_CALL_float</code>, <code>TF_CALL_int32</code> explicitly for all types without worrying about the platform, and moves <code>__ANDROID_TYPES_SLIM__</code> to <code>register_types.h</code> so that different platform only register a subset of the ops.</p>\n<p>For example, in <code>register_types.h</code>:</p>\n<ul>\n<li>only half, float, int32, int64, bool, and quantized types are supported for <code>defined(__ANDROID_TYPES_FULL__)</code></li>\n<li>Only float, int32, and bool are supported are supported for <code>defined(IS_MOBILE_PLATFORM) &amp;&amp; !defined(__ANDROID_TYPES_FULL__)</code></li>\n</ul>\n<p>I don't see an explicit <code>__ANDROID_TYPES_SLIM__</code> but if <code>__ANDROID_TYPES_SLIM__ == !__ANDROID_TYPES_FULL__</code> then we could just use TF_CALL_xxx for all types and it should have already been handled.</p>\n<p>If <code>__ANDROID_TYPES_SLIM__</code> means we only want to register <code>float</code> (not even int32) then we could add additional defines in <code>register_types.h</code>.</p>\n<p>I think that should be better than order-dependent <code>REGISTER2</code>, <code>REGISTER3</code>, <code>REGISTER4</code>?</p>", "body_text": "I take a look at the tensorflow/core/kernels/cwise_ops_common.h and tensorflow/core/framework/register_types.h.\nI don't have a android or iOS build but correct me if I am wrong: it seems that we could just use TF_CALL_float, TF_CALL_int32 explicitly for all types without worrying about the platform, and moves __ANDROID_TYPES_SLIM__ to register_types.h so that different platform only register a subset of the ops.\nFor example, in register_types.h:\n\nonly half, float, int32, int64, bool, and quantized types are supported for defined(__ANDROID_TYPES_FULL__)\nOnly float, int32, and bool are supported are supported for defined(IS_MOBILE_PLATFORM) && !defined(__ANDROID_TYPES_FULL__)\n\nI don't see an explicit __ANDROID_TYPES_SLIM__ but if __ANDROID_TYPES_SLIM__ == !__ANDROID_TYPES_FULL__ then we could just use TF_CALL_xxx for all types and it should have already been handled.\nIf __ANDROID_TYPES_SLIM__ means we only want to register float (not even int32) then we could add additional defines in register_types.h.\nI think that should be better than order-dependent REGISTER2, REGISTER3, REGISTER4?", "body": "I take a look at the `tensorflow/core/kernels/cwise_ops_common.h` and `tensorflow/core/framework/register_types.h`.\r\n\r\nI don't have a android or iOS build but correct me if I am wrong: it seems that we could just use `TF_CALL_float`, `TF_CALL_int32` explicitly for all types without worrying about the platform, and moves `__ANDROID_TYPES_SLIM__` to `register_types.h` so that different platform only register a subset of the ops.\r\n\r\nFor example, in `register_types.h`:\r\n- only half, float, int32, int64, bool, and quantized types are supported for `defined(__ANDROID_TYPES_FULL__)`\r\n- Only float, int32, and bool are supported are supported for `defined(IS_MOBILE_PLATFORM) && !defined(__ANDROID_TYPES_FULL__)`\r\n\r\nI don't see an explicit `__ANDROID_TYPES_SLIM__` but if `__ANDROID_TYPES_SLIM__ == !__ANDROID_TYPES_FULL__` then we could just use TF_CALL_xxx for all types and it should have already been handled.\r\n\r\nIf `__ANDROID_TYPES_SLIM__` means we only want to register `float` (not even int32) then we could add additional defines in `register_types.h`.\r\n\r\nI think that should be better than order-dependent `REGISTER2`, `REGISTER3`, `REGISTER4`?"}