{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14047", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14047/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14047/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14047/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14047", "id": 269244609, "node_id": "MDU6SXNzdWUyNjkyNDQ2MDk=", "number": 14047, "title": "Feature Request (API Design review) tf.get_shape(), tf.get_size(), tf.Tensor.size, tf.Tensor.get_size(), etc", "user": {"login": "ozabluda", "id": 14060629, "node_id": "MDQ6VXNlcjE0MDYwNjI5", "avatar_url": "https://avatars3.githubusercontent.com/u/14060629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozabluda", "html_url": "https://github.com/ozabluda", "followers_url": "https://api.github.com/users/ozabluda/followers", "following_url": "https://api.github.com/users/ozabluda/following{/other_user}", "gists_url": "https://api.github.com/users/ozabluda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozabluda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozabluda/subscriptions", "organizations_url": "https://api.github.com/users/ozabluda/orgs", "repos_url": "https://api.github.com/users/ozabluda/repos", "events_url": "https://api.github.com/users/ozabluda/events{/privacy}", "received_events_url": "https://api.github.com/users/ozabluda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-27T21:44:04Z", "updated_at": "2017-12-18T20:51:49Z", "closed_at": "2017-12-18T20:51:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Below, everything with <code>get</code> in the name refers to dynamic (symbolic), everything without to static (integer).</p>\n<ol>\n<li>Introduce <code>tf.get_shape(x)</code>. Then <code>tf.get_shape(x) &lt;=&gt; tf.shape(x)</code> will be analogous to existing <code>tf.Tensor.get_shape() &lt;=&gt; tf.Tensor.shape</code></li>\n<li>Introduce <code>tf.set_shape(x)</code>, matching <code>tf.get_shape(x)</code></li>\n<li>Introduce <code>tf.get_size(x)</code>. Then  <code>tf.get_size(x) &lt;=&gt; tf.size(x)</code>  will be analogous to <code>tf.get_shape(x) &lt;=&gt; tf.shape(x)</code></li>\n<li>Ditto for <code>tf.get_shape_n(x)</code>, see <code>tf.shape_n(x)</code>.</li>\n<li>Introduce <code>tf.Tensor.size</code> for compatibility with <code>np.ndarray.size</code>. <code>tf.size(x) &lt;=&gt; x.size</code> will be analogous to <code>tf.shape(x) &lt;=&gt; x.shape</code></li>\n<li>Ditto for <code>tf.Tensor.get_size()</code></li>\n<li>Should there also be <code>tf.size_n(x)</code> and <code>tf.get_size_n(x)</code>?</li>\n</ol>", "body_text": "Below, everything with get in the name refers to dynamic (symbolic), everything without to static (integer).\n\nIntroduce tf.get_shape(x). Then tf.get_shape(x) <=> tf.shape(x) will be analogous to existing tf.Tensor.get_shape() <=> tf.Tensor.shape\nIntroduce tf.set_shape(x), matching tf.get_shape(x)\nIntroduce tf.get_size(x). Then  tf.get_size(x) <=> tf.size(x)  will be analogous to tf.get_shape(x) <=> tf.shape(x)\nDitto for tf.get_shape_n(x), see tf.shape_n(x).\nIntroduce tf.Tensor.size for compatibility with np.ndarray.size. tf.size(x) <=> x.size will be analogous to tf.shape(x) <=> x.shape\nDitto for tf.Tensor.get_size()\nShould there also be tf.size_n(x) and tf.get_size_n(x)?", "body": "Below, everything with `get` in the name refers to dynamic (symbolic), everything without to static (integer).\r\n\r\n1. Introduce `tf.get_shape(x)`. Then `tf.get_shape(x) <=> tf.shape(x)` will be analogous to existing `tf.Tensor.get_shape() <=> tf.Tensor.shape`\r\n2. Introduce `tf.set_shape(x)`, matching `tf.get_shape(x)`\r\n3. Introduce `tf.get_size(x)`. Then  `tf.get_size(x) <=> tf.size(x)`  will be analogous to `tf.get_shape(x) <=> tf.shape(x)`\r\n4. Ditto for `tf.get_shape_n(x)`, see `tf.shape_n(x)`.\r\n5. Introduce `tf.Tensor.size` for compatibility with `np.ndarray.size`. `tf.size(x) <=> x.size` will be analogous to `tf.shape(x) <=> x.shape`\r\n6. Ditto for `tf.Tensor.get_size()`\r\n7. Should there also be `tf.size_n(x)` and `tf.get_size_n(x)`?"}