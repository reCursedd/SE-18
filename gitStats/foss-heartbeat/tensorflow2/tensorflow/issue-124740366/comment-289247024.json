{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/289247024", "html_url": "https://github.com/tensorflow/tensorflow/issues/675#issuecomment-289247024", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/675", "id": 289247024, "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTI0NzAyNA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-25T23:34:08Z", "updated_at": "2017-03-25T23:34:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=12017880\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/isabeaups\">@isabeaups</a> the two gradients can differ significantly when there are non-linear operators, as is the case for neural networks.</p>\n<p>As a toy example, suppose there's some operation that when f(x)=1, and you compute gradient, one of the backprop operators hits limits of its numeric range and produces a NaN, which is a valid float32 value. If you want to backprop from vector [1,2], you are going to have to do full backprop from 1, and from 2, to determine which value causes a NaN. There's no shortcut that'll let you keep same size intermediate matrices and be able to backprop from both values in parallel</p>", "body_text": "@isabeaups the two gradients can differ significantly when there are non-linear operators, as is the case for neural networks.\nAs a toy example, suppose there's some operation that when f(x)=1, and you compute gradient, one of the backprop operators hits limits of its numeric range and produces a NaN, which is a valid float32 value. If you want to backprop from vector [1,2], you are going to have to do full backprop from 1, and from 2, to determine which value causes a NaN. There's no shortcut that'll let you keep same size intermediate matrices and be able to backprop from both values in parallel", "body": "@isabeaups the two gradients can differ significantly when there are non-linear operators, as is the case for neural networks.\r\n\r\nAs a toy example, suppose there's some operation that when f(x)=1, and you compute gradient, one of the backprop operators hits limits of its numeric range and produces a NaN, which is a valid float32 value. If you want to backprop from vector [1,2], you are going to have to do full backprop from 1, and from 2, to determine which value causes a NaN. There's no shortcut that'll let you keep same size intermediate matrices and be able to backprop from both values in parallel"}