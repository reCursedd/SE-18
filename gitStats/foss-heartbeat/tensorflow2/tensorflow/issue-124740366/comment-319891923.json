{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/319891923", "html_url": "https://github.com/tensorflow/tensorflow/issues/675#issuecomment-319891923", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/675", "id": 319891923, "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTg5MTkyMw==", "user": {"login": "jeisses", "id": 1128863, "node_id": "MDQ6VXNlcjExMjg4NjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1128863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeisses", "html_url": "https://github.com/jeisses", "followers_url": "https://api.github.com/users/jeisses/followers", "following_url": "https://api.github.com/users/jeisses/following{/other_user}", "gists_url": "https://api.github.com/users/jeisses/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeisses/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeisses/subscriptions", "organizations_url": "https://api.github.com/users/jeisses/orgs", "repos_url": "https://api.github.com/users/jeisses/repos", "events_url": "https://api.github.com/users/jeisses/events{/privacy}", "received_events_url": "https://api.github.com/users/jeisses/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-03T07:32:14Z", "updated_at": "2017-08-03T07:32:14Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6804598\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/liber145\">@liber145</a> I have to compute semi-large Jacobians and am also having performance issues using a for loop.</p>\n<p>After looking at the code by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=966348\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tillahoffmann\">@tillahoffmann</a> I came up with the following function, which gives a decent speedup for larger N:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">jacobian</span>(<span class=\"pl-smi\">y_flat</span>, <span class=\"pl-smi\">x</span>):\n    n <span class=\"pl-k\">=</span> y_flat.shape[<span class=\"pl-c1\">0</span>]\n\n    loop_vars <span class=\"pl-k\">=</span> [\n        tf.constant(<span class=\"pl-c1\">0</span>, tf.int32),\n        tf.TensorArray(tf.float32, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>n),\n    ]\n\n    _, jacobian <span class=\"pl-k\">=</span> tf.while_loop(\n        <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">j</span>, <span class=\"pl-smi\">_</span>: j <span class=\"pl-k\">&lt;</span> n,\n        <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">j</span>, <span class=\"pl-smi\">result</span>: (j<span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span>, result.write(j, tf.gradients(y_flat[j], x))),\n        loop_vars)\n\n    <span class=\"pl-k\">return</span> jacobian.stack()</pre></div>\n<p>In my case speed is similar to Theano's <a href=\"http://deeplearning.net/software/theano/library/gradient.html#theano.gradient.jacobian\" rel=\"nofollow\"><code>jacobian</code></a> function</p>", "body_text": "@liber145 I have to compute semi-large Jacobians and am also having performance issues using a for loop.\nAfter looking at the code by @tillahoffmann I came up with the following function, which gives a decent speedup for larger N:\ndef jacobian(y_flat, x):\n    n = y_flat.shape[0]\n\n    loop_vars = [\n        tf.constant(0, tf.int32),\n        tf.TensorArray(tf.float32, size=n),\n    ]\n\n    _, jacobian = tf.while_loop(\n        lambda j, _: j < n,\n        lambda j, result: (j+1, result.write(j, tf.gradients(y_flat[j], x))),\n        loop_vars)\n\n    return jacobian.stack()\nIn my case speed is similar to Theano's jacobian function", "body": "@liber145 I have to compute semi-large Jacobians and am also having performance issues using a for loop.\r\n\r\nAfter looking at the code by @tillahoffmann I came up with the following function, which gives a decent speedup for larger N:\r\n\r\n``` python\r\ndef jacobian(y_flat, x):\r\n    n = y_flat.shape[0]\r\n\r\n    loop_vars = [\r\n        tf.constant(0, tf.int32),\r\n        tf.TensorArray(tf.float32, size=n),\r\n    ]\r\n\r\n    _, jacobian = tf.while_loop(\r\n        lambda j, _: j < n,\r\n        lambda j, result: (j+1, result.write(j, tf.gradients(y_flat[j], x))),\r\n        loop_vars)\r\n\r\n    return jacobian.stack()\r\n```\r\nIn my case speed is similar to Theano's [`jacobian`](http://deeplearning.net/software/theano/library/gradient.html#theano.gradient.jacobian) function\r\n"}