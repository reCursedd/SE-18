{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/285753659", "html_url": "https://github.com/tensorflow/tensorflow/issues/8256#issuecomment-285753659", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8256", "id": 285753659, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTc1MzY1OQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-10T18:54:48Z", "updated_at": "2017-03-10T18:54:48Z", "author_association": "MEMBER", "body_html": "<p>You're absolutely right on both counts :) - The Go API doesn't provide the equivalent of <code>tf.Variable</code> but it does provide enough to build that functionality.</p>\n<p>I took at stab at a quick implementation, see: <a href=\"https://github.com/asimshankar/go-tensorflow/tree/master/variable\">https://github.com/asimshankar/go-tensorflow/tree/master/variable</a></p>\n<p>There are a few caveats here, such as:</p>\n<ul>\n<li>This example is using an in-progress, not-yet-finalized implementation for variables using the <code>DT_RESOURCE</code> type</li>\n<li>The Python <code>tf.Variable</code> class does a few more things, like explicitly colocating all the ops on the same device and adding the created variable to a list of variables kept in the <code>MetaGraphDef</code> (using Collections).</li>\n</ul>\n<p>Depending on your use case, these may not matter.</p>\n<p>I'm going to mark this as \"Contributions Welcome\" as we don't have any immediate plans to pursue this, but if anyone else wants to, we'd be happy to guide them.</p>\n<p>(FYI <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=170179\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jhseu\">@jhseu</a>)</p>", "body_text": "You're absolutely right on both counts :) - The Go API doesn't provide the equivalent of tf.Variable but it does provide enough to build that functionality.\nI took at stab at a quick implementation, see: https://github.com/asimshankar/go-tensorflow/tree/master/variable\nThere are a few caveats here, such as:\n\nThis example is using an in-progress, not-yet-finalized implementation for variables using the DT_RESOURCE type\nThe Python tf.Variable class does a few more things, like explicitly colocating all the ops on the same device and adding the created variable to a list of variables kept in the MetaGraphDef (using Collections).\n\nDepending on your use case, these may not matter.\nI'm going to mark this as \"Contributions Welcome\" as we don't have any immediate plans to pursue this, but if anyone else wants to, we'd be happy to guide them.\n(FYI @jhseu)", "body": "You're absolutely right on both counts :) - The Go API doesn't provide the equivalent of `tf.Variable` but it does provide enough to build that functionality.\r\n\r\nI took at stab at a quick implementation, see: https://github.com/asimshankar/go-tensorflow/tree/master/variable\r\n\r\nThere are a few caveats here, such as:\r\n- This example is using an in-progress, not-yet-finalized implementation for variables using the `DT_RESOURCE` type\r\n- The Python `tf.Variable` class does a few more things, like explicitly colocating all the ops on the same device and adding the created variable to a list of variables kept in the `MetaGraphDef` (using Collections).\r\n\r\nDepending on your use case, these may not matter. \r\n\r\nI'm going to mark this as \"Contributions Welcome\" as we don't have any immediate plans to pursue this, but if anyone else wants to, we'd be happy to guide them.\r\n\r\n(FYI @jhseu)"}