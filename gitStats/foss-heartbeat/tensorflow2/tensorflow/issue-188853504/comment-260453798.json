{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/260453798", "html_url": "https://github.com/tensorflow/tensorflow/issues/5552#issuecomment-260453798", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5552", "id": 260453798, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDQ1Mzc5OA==", "user": {"login": "dgoerger", "id": 1427345, "node_id": "MDQ6VXNlcjE0MjczNDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1427345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgoerger", "html_url": "https://github.com/dgoerger", "followers_url": "https://api.github.com/users/dgoerger/followers", "following_url": "https://api.github.com/users/dgoerger/following{/other_user}", "gists_url": "https://api.github.com/users/dgoerger/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgoerger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgoerger/subscriptions", "organizations_url": "https://api.github.com/users/dgoerger/orgs", "repos_url": "https://api.github.com/users/dgoerger/repos", "events_url": "https://api.github.com/users/dgoerger/events{/privacy}", "received_events_url": "https://api.github.com/users/dgoerger/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-14T20:32:17Z", "updated_at": "2016-11-14T20:32:17Z", "author_association": "NONE", "body_html": "<p>Hmm. Further testing suggests this may be more serious than I'd thought. Type inconsistency, not just documentation.</p>\n<pre><code>$ python3\n&gt;&gt;&gt; type('Hello, TensorFlow!')\n&lt;class 'str'&gt;\n&gt;&gt;&gt; type(tf.constant('Hello, TensorFlow!'))\n&lt;class 'tensorflow.python.framework.ops.Tensor'&gt;\n&gt;&gt;&gt; type(tf.Session().run(tf.constant('Hello, TensorFlow!')))\n&lt;class 'bytes'&gt;\n</code></pre>\n<p>According to <a href=\"https://www.tensorflow.org/versions/master/api_docs/python/client.html#Session.run\" rel=\"nofollow\">the docs</a>, input type Tensor outputs via numpy ndarray, which appears not to output type string. Reformatting Session.run(Tensor) when output type is bytes, to new output type string, might give the intended behaviour here. Compare non-ASCII:</p>\n<pre><code>$ python3\n&gt;&gt;&gt; import tensorflow, sys\n&gt;&gt;&gt; type('\u00bfC\u00f3mo se ve?')\n&lt;class 'str'&gt;\n&gt;&gt;&gt; type(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\n&lt;class 'tensorflow.python.framework.ops.Tensor'&gt;\n&gt;&gt;&gt; type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')))\n&lt;class 'bytes'&gt;\n&gt;&gt;&gt; type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode(sys.getdefaultencoding()))\n&lt;class 'str'&gt;\n&gt;&gt;&gt; tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\nb'\\xc2\\xbfC\\xc3\\xb3mo se ve?'\n&gt;&gt;&gt; tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode(sys.getdefaultencoding())\n'\u00bfC\u00f3mo se ve?'\n</code></pre>\n<p>... and of course the same doesn't work on python2:</p>\n<pre><code>$ python2\n&gt;&gt;&gt; import tensorflow, sys\n&gt;&gt;&gt; type('\u00bfC\u00f3mo se ve?')\n&lt;type 'str'&gt;\n&gt;&gt;&gt; type(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\n&lt;class 'tensorflow.python.framework.ops.Tensor'&gt;\n&gt;&gt;&gt; type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')))\n&lt;type 'str'&gt;\n&gt;&gt;&gt; type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode(sys.getdefaultencoding()))\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 0: ordinal not in range(128)\n&gt;&gt;&gt; # yikes, python2 default encoding is ascii\n&gt;&gt;&gt; type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode('utf-8'))\n&lt;type 'unicode'&gt;\n&gt;&gt;&gt; tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\n'\\xc2\\xbfC\\xc3\\xb3mo se ve?'\n&gt;&gt;&gt; tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode('utf-8')\nu'\\xbfC\\xf3mo se ve?'\n</code></pre>\n<p>So I guess fixing this discrepancy will require evaluating what type object should be output by tensorflow.Session().run(Tensor(string)). On the other hand, is it possible non-ASCII doesn't work at all under the current Session.run() python2 implementation? The python2 output seems non-ideal, but maybe I'm missing a common trick.</p>", "body_text": "Hmm. Further testing suggests this may be more serious than I'd thought. Type inconsistency, not just documentation.\n$ python3\n>>> type('Hello, TensorFlow!')\n<class 'str'>\n>>> type(tf.constant('Hello, TensorFlow!'))\n<class 'tensorflow.python.framework.ops.Tensor'>\n>>> type(tf.Session().run(tf.constant('Hello, TensorFlow!')))\n<class 'bytes'>\n\nAccording to the docs, input type Tensor outputs via numpy ndarray, which appears not to output type string. Reformatting Session.run(Tensor) when output type is bytes, to new output type string, might give the intended behaviour here. Compare non-ASCII:\n$ python3\n>>> import tensorflow, sys\n>>> type('\u00bfC\u00f3mo se ve?')\n<class 'str'>\n>>> type(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\n<class 'tensorflow.python.framework.ops.Tensor'>\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')))\n<class 'bytes'>\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode(sys.getdefaultencoding()))\n<class 'str'>\n>>> tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\nb'\\xc2\\xbfC\\xc3\\xb3mo se ve?'\n>>> tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode(sys.getdefaultencoding())\n'\u00bfC\u00f3mo se ve?'\n\n... and of course the same doesn't work on python2:\n$ python2\n>>> import tensorflow, sys\n>>> type('\u00bfC\u00f3mo se ve?')\n<type 'str'>\n>>> type(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\n<class 'tensorflow.python.framework.ops.Tensor'>\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')))\n<type 'str'>\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode(sys.getdefaultencoding()))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 0: ordinal not in range(128)\n>>> # yikes, python2 default encoding is ascii\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode('utf-8'))\n<type 'unicode'>\n>>> tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\n'\\xc2\\xbfC\\xc3\\xb3mo se ve?'\n>>> tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode('utf-8')\nu'\\xbfC\\xf3mo se ve?'\n\nSo I guess fixing this discrepancy will require evaluating what type object should be output by tensorflow.Session().run(Tensor(string)). On the other hand, is it possible non-ASCII doesn't work at all under the current Session.run() python2 implementation? The python2 output seems non-ideal, but maybe I'm missing a common trick.", "body": "Hmm. Further testing suggests this may be more serious than I'd thought. Type inconsistency, not just documentation.\n\n```\n$ python3\n>>> type('Hello, TensorFlow!')\n<class 'str'>\n>>> type(tf.constant('Hello, TensorFlow!'))\n<class 'tensorflow.python.framework.ops.Tensor'>\n>>> type(tf.Session().run(tf.constant('Hello, TensorFlow!')))\n<class 'bytes'>\n```\n\nAccording to [the docs](https://www.tensorflow.org/versions/master/api_docs/python/client.html#Session.run), input type Tensor outputs via numpy ndarray, which appears not to output type string. Reformatting Session.run(Tensor) when output type is bytes, to new output type string, might give the intended behaviour here. Compare non-ASCII:\n\n```\n$ python3\n>>> import tensorflow, sys\n>>> type('\u00bfC\u00f3mo se ve?')\n<class 'str'>\n>>> type(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\n<class 'tensorflow.python.framework.ops.Tensor'>\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')))\n<class 'bytes'>\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode(sys.getdefaultencoding()))\n<class 'str'>\n>>> tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\nb'\\xc2\\xbfC\\xc3\\xb3mo se ve?'\n>>> tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode(sys.getdefaultencoding())\n'\u00bfC\u00f3mo se ve?'\n```\n\n... and of course the same doesn't work on python2:\n\n```\n$ python2\n>>> import tensorflow, sys\n>>> type('\u00bfC\u00f3mo se ve?')\n<type 'str'>\n>>> type(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\n<class 'tensorflow.python.framework.ops.Tensor'>\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')))\n<type 'str'>\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode(sys.getdefaultencoding()))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 0: ordinal not in range(128)\n>>> # yikes, python2 default encoding is ascii\n>>> type(tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode('utf-8'))\n<type 'unicode'>\n>>> tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?'))\n'\\xc2\\xbfC\\xc3\\xb3mo se ve?'\n>>> tensorflow.Session().run(tensorflow.constant('\u00bfC\u00f3mo se ve?')).decode('utf-8')\nu'\\xbfC\\xf3mo se ve?'\n```\n\nSo I guess fixing this discrepancy will require evaluating what type object should be output by tensorflow.Session().run(Tensor(string)). On the other hand, is it possible non-ASCII doesn't work at all under the current Session.run() python2 implementation? The python2 output seems non-ideal, but maybe I'm missing a common trick.\n"}