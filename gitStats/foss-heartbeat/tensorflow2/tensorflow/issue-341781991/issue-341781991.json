{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20870", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20870/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20870/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20870/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20870", "id": 341781991, "node_id": "MDU6SXNzdWUzNDE3ODE5OTE=", "number": 20870, "title": "[Question/Feature request] How to stack variable length tensors in a TensorArray?", "user": {"login": "nxphi47", "id": 19323568, "node_id": "MDQ6VXNlcjE5MzIzNTY4", "avatar_url": "https://avatars3.githubusercontent.com/u/19323568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nxphi47", "html_url": "https://github.com/nxphi47", "followers_url": "https://api.github.com/users/nxphi47/followers", "following_url": "https://api.github.com/users/nxphi47/following{/other_user}", "gists_url": "https://api.github.com/users/nxphi47/gists{/gist_id}", "starred_url": "https://api.github.com/users/nxphi47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nxphi47/subscriptions", "organizations_url": "https://api.github.com/users/nxphi47/orgs", "repos_url": "https://api.github.com/users/nxphi47/repos", "events_url": "https://api.github.com/users/nxphi47/events{/privacy}", "received_events_url": "https://api.github.com/users/nxphi47/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-07-17T06:26:02Z", "updated_at": "2018-11-14T19:22:52Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOs Sierra</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:v1.8.0-0-g93bc2e2072 1.8.0</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:no</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>How to stack variable length tensors in a TensorArray cleanly and efficiently?</p>\n<p>I am implementing a form of RNN that produce variable length (time step dimension) tensors using tf.while_loop and tf.TensorArray to store the tensors. I need when <code>tf.while_loop</code> is done, all tensors are stacked into 1 tensor and the length dimension for each individual tensor is padded with 0 (or any constant) to the maximum length of the array.</p>\n<p>Note that the time dimension is unknown at compile time</p>\n<h3>Source code / logs</h3>\n<p>It would be something like this.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c1\">BATCH</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>\n<span class=\"pl-c1\">DIM</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4</span>\n\n<span class=\"pl-c1\">TIME_X</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> unknown at compile time</span>\n<span class=\"pl-c1\">TIME_Y</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> unknown at compile time</span>\n\ntensor_array <span class=\"pl-k\">=</span> tf.TensorArray(<span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">infer_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>x.dtype)\nx <span class=\"pl-k\">=</span> tf.random_uniform(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">BATCH</span>, <span class=\"pl-c1\">TIME_X</span>, <span class=\"pl-c1\">DIM</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> at this point, x is created but y is not created yet</span>\noutput_ta <span class=\"pl-k\">=</span> tensor_array.write(<span class=\"pl-c1\">0</span>, x)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> at this point, y is created</span>\ny <span class=\"pl-k\">=</span> tf.random_uniform(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">BATCH</span>, <span class=\"pl-c1\">TIME_Y</span>, <span class=\"pl-c1\">DIM</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>y<span class=\"pl-pds\">'</span></span>)\noutput_ta <span class=\"pl-k\">=</span> output_ta.write(<span class=\"pl-c1\">1</span>, y)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> the maximum time dimension shape is unknown when the tensor is written to the TensorArray</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> meaning that we can't pad each individual tensor beforehand.</span>\n\noutput <span class=\"pl-k\">=</span> output_ta.stack()\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    <span class=\"pl-c1\">print</span>(sess.run(output)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> this will raise exception as shape is not compatible</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> expected output shape: [2, BATCH, max(TIME_X, TIME_Y), DIM] = [2, 2, 4, 4]</span></pre></div>\n<p>Thank you</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOs Sierra\nTensorFlow installed from (source or binary):binary\nTensorFlow version (use command below):v1.8.0-0-g93bc2e2072 1.8.0\nPython version: 3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:no\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nHow to stack variable length tensors in a TensorArray cleanly and efficiently?\nI am implementing a form of RNN that produce variable length (time step dimension) tensors using tf.while_loop and tf.TensorArray to store the tensors. I need when tf.while_loop is done, all tensors are stacked into 1 tensor and the length dimension for each individual tensor is padded with 0 (or any constant) to the maximum length of the array.\nNote that the time dimension is unknown at compile time\nSource code / logs\nIt would be something like this.\nimport numpy as np\nimport tensorflow as tf\n\nBATCH = 2\nDIM = 4\n\nTIME_X = 2 # unknown at compile time\nTIME_Y = 4 # unknown at compile time\n\ntensor_array = tf.TensorArray(size=2, infer_shape=False, dtype=x.dtype)\nx = tf.random_uniform(shape=[BATCH, TIME_X, DIM], name='x')\n# at this point, x is created but y is not created yet\noutput_ta = tensor_array.write(0, x)\n\n# at this point, y is created\ny = tf.random_uniform(shape=[BATCH, TIME_Y, DIM], name='y')\noutput_ta = output_ta.write(1, y)\n\n# the maximum time dimension shape is unknown when the tensor is written to the TensorArray\n# meaning that we can't pad each individual tensor beforehand.\n\noutput = output_ta.stack()\n\nwith tf.Session() as sess:\n    print(sess.run(output)) # this will raise exception as shape is not compatible\n\n# expected output shape: [2, BATCH, max(TIME_X, TIME_Y), DIM] = [2, 2, 4, 4]\nThank you", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOs Sierra\r\n- **TensorFlow installed from (source or binary)**:binary\r\n- **TensorFlow version (use command below)**:v1.8.0-0-g93bc2e2072 1.8.0\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:no\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nHow to stack variable length tensors in a TensorArray cleanly and efficiently?\r\n\r\nI am implementing a form of RNN that produce variable length (time step dimension) tensors using tf.while_loop and tf.TensorArray to store the tensors. I need when `tf.while_loop` is done, all tensors are stacked into 1 tensor and the length dimension for each individual tensor is padded with 0 (or any constant) to the maximum length of the array.\r\n\r\nNote that the time dimension is unknown at compile time\r\n\r\n### Source code / logs\r\nIt would be something like this.\r\n\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nBATCH = 2\r\nDIM = 4\r\n\r\nTIME_X = 2 # unknown at compile time\r\nTIME_Y = 4 # unknown at compile time\r\n\r\ntensor_array = tf.TensorArray(size=2, infer_shape=False, dtype=x.dtype)\r\nx = tf.random_uniform(shape=[BATCH, TIME_X, DIM], name='x')\r\n# at this point, x is created but y is not created yet\r\noutput_ta = tensor_array.write(0, x)\r\n\r\n# at this point, y is created\r\ny = tf.random_uniform(shape=[BATCH, TIME_Y, DIM], name='y')\r\noutput_ta = output_ta.write(1, y)\r\n\r\n# the maximum time dimension shape is unknown when the tensor is written to the TensorArray\r\n# meaning that we can't pad each individual tensor beforehand.\r\n\r\noutput = output_ta.stack()\r\n\r\nwith tf.Session() as sess:\r\n    print(sess.run(output)) # this will raise exception as shape is not compatible\r\n\r\n# expected output shape: [2, BATCH, max(TIME_X, TIME_Y), DIM] = [2, 2, 4, 4]\r\n```\r\n\r\nThank you"}