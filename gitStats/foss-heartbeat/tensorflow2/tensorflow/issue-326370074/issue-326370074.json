{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19548", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19548/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19548/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19548/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19548", "id": 326370074, "node_id": "MDU6SXNzdWUzMjYzNzAwNzQ=", "number": 19548, "title": "Inference accuracy depends on batch size", "user": {"login": "HwMohanLiu", "id": 34759453, "node_id": "MDQ6VXNlcjM0NzU5NDUz", "avatar_url": "https://avatars3.githubusercontent.com/u/34759453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HwMohanLiu", "html_url": "https://github.com/HwMohanLiu", "followers_url": "https://api.github.com/users/HwMohanLiu/followers", "following_url": "https://api.github.com/users/HwMohanLiu/following{/other_user}", "gists_url": "https://api.github.com/users/HwMohanLiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/HwMohanLiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HwMohanLiu/subscriptions", "organizations_url": "https://api.github.com/users/HwMohanLiu/orgs", "repos_url": "https://api.github.com/users/HwMohanLiu/repos", "events_url": "https://api.github.com/users/HwMohanLiu/events{/privacy}", "received_events_url": "https://api.github.com/users/HwMohanLiu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-05-25T03:39:25Z", "updated_at": "2018-09-28T20:49:07Z", "closed_at": "2018-09-28T20:49:07Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: r1.8</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.11.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 4.9</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0</li>\n<li><strong>GPU model and memory</strong>: 16GB</li>\n<li><strong>Exact command to reproduce</strong>: pip3 install tensorflow_gpu-1.8.0-cp35-cp35m-manylinux1_x86_64.whl</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The inference accuracy of a trained model for image recognition, e.g. ResNet-18, Incpetion_v3, depends on the batch size. For example, if the batch size of the input is set to one, the accuracy is around 0.2. However, if feed 32 images at ones, the accuracy becomes over 0.82... If feed even more images at ones, the accuracy can even increase... This is really strange.</p>\n<h3>Source code / logs</h3>\n<p>The model will classify 16 categories.  Images for training and validating are subsets of imagenet. (Over 223,918 training images and 22, 016 validating images)</p>\n<ol>\n<li>The input size for training is set as:</li>\n</ol>\n<pre><code>tf.placeholder(tf.float32, [None im_height, im_width, n_channel], name = \"input_x\")\n</code></pre>\n<ol start=\"2\">\n<li>data is feeded by dataset  from tfrecord.</li>\n</ol>\n<pre><code>dataset = tf.data.TFRecordDataset(filename)\ndataset = dataset.map(tfrecord_parser).prefetch(buffer_size = 4 * batch_size).batch(batch_size)\n</code></pre>\n<ol start=\"3\">\n<li>model loading from pb file</li>\n</ol>\n<pre><code>def load_pb_graph(frozen_graph_file):\n    with tf.gfile.GFile(frozen_graph_file, 'rb') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n        \n    with tf.Graph().as_default() as graph:\n        tf.import_graph_def(graph_def, name=\"\")\n    \n    return graph, graph_def\n</code></pre>\n<ol start=\"4\">\n<li>Computation of accuracy</li>\n</ol>\n<pre><code>with g2.as_default():        \n    in_logits = tf.placeholder(tf.float32, [None, FLAGS.n_class])\n    in_labels = tf.placeholder(tf.float32, [None, FLAGS.n_class])\n    accuracy = tf.metrics.accuracy(tf.argmax(in_logits, 1), tf.argmax(in_labels, 1))[1]\n        \n    sess2 = tf.Session(graph = g2, config = config)\n    sess2.run(tf.global_variables_initializer())\n    sess2.run( tf.local_variables_initializer())\n....\n_logits = sess.run(logits, feed_dict = val_feed_dict) \n_accuacy = sess2.run(accuracy, {in_logits: _logits, in_labels: val_batch_y})\n</code></pre>\n<p>Feeding one image for inference:</p>\n<blockquote>\n<p>2018-05-24 21:14:36 Step 22016 : Validation Accuracy:0.21825</p>\n</blockquote>\n<p>Feeding 16 images for inference\uff1a</p>\n<blockquote>\n<p>2018-05-24 21:16:22 Step 22016 : Validation Accuracy:0.80069</p>\n</blockquote>\n<p>Feeding 32 images for inference :</p>\n<blockquote>\n<p>2018-05-24 21:18:14 Step 22016 : Validation Accuracy:0.81486</p>\n</blockquote>\n<p>Feeding 128 images for inference:</p>\n<blockquote>\n<p>2018-05-24 21:22:42 Step 22016 : Validation Accuracy:0.82744</p>\n</blockquote>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): r1.8\nPython version: 3.5\nBazel version (if compiling from source): 0.11.0\nGCC/Compiler version (if compiling from source): 4.9\nCUDA/cuDNN version: 9.0\nGPU model and memory: 16GB\nExact command to reproduce: pip3 install tensorflow_gpu-1.8.0-cp35-cp35m-manylinux1_x86_64.whl\n\nDescribe the problem\nThe inference accuracy of a trained model for image recognition, e.g. ResNet-18, Incpetion_v3, depends on the batch size. For example, if the batch size of the input is set to one, the accuracy is around 0.2. However, if feed 32 images at ones, the accuracy becomes over 0.82... If feed even more images at ones, the accuracy can even increase... This is really strange.\nSource code / logs\nThe model will classify 16 categories.  Images for training and validating are subsets of imagenet. (Over 223,918 training images and 22, 016 validating images)\n\nThe input size for training is set as:\n\ntf.placeholder(tf.float32, [None im_height, im_width, n_channel], name = \"input_x\")\n\n\ndata is feeded by dataset  from tfrecord.\n\ndataset = tf.data.TFRecordDataset(filename)\ndataset = dataset.map(tfrecord_parser).prefetch(buffer_size = 4 * batch_size).batch(batch_size)\n\n\nmodel loading from pb file\n\ndef load_pb_graph(frozen_graph_file):\n    with tf.gfile.GFile(frozen_graph_file, 'rb') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n        \n    with tf.Graph().as_default() as graph:\n        tf.import_graph_def(graph_def, name=\"\")\n    \n    return graph, graph_def\n\n\nComputation of accuracy\n\nwith g2.as_default():        \n    in_logits = tf.placeholder(tf.float32, [None, FLAGS.n_class])\n    in_labels = tf.placeholder(tf.float32, [None, FLAGS.n_class])\n    accuracy = tf.metrics.accuracy(tf.argmax(in_logits, 1), tf.argmax(in_labels, 1))[1]\n        \n    sess2 = tf.Session(graph = g2, config = config)\n    sess2.run(tf.global_variables_initializer())\n    sess2.run( tf.local_variables_initializer())\n....\n_logits = sess.run(logits, feed_dict = val_feed_dict) \n_accuacy = sess2.run(accuracy, {in_logits: _logits, in_labels: val_batch_y})\n\nFeeding one image for inference:\n\n2018-05-24 21:14:36 Step 22016 : Validation Accuracy:0.21825\n\nFeeding 16 images for inference\uff1a\n\n2018-05-24 21:16:22 Step 22016 : Validation Accuracy:0.80069\n\nFeeding 32 images for inference :\n\n2018-05-24 21:18:14 Step 22016 : Validation Accuracy:0.81486\n\nFeeding 128 images for inference:\n\n2018-05-24 21:22:42 Step 22016 : Validation Accuracy:0.82744", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: r1.8\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**: 0.11.0\r\n- **GCC/Compiler version (if compiling from source)**: 4.9\r\n- **CUDA/cuDNN version**: 9.0\r\n- **GPU model and memory**: 16GB\r\n- **Exact command to reproduce**: pip3 install tensorflow_gpu-1.8.0-cp35-cp35m-manylinux1_x86_64.whl\r\n\r\n### Describe the problem\r\nThe inference accuracy of a trained model for image recognition, e.g. ResNet-18, Incpetion_v3, depends on the batch size. For example, if the batch size of the input is set to one, the accuracy is around 0.2. However, if feed 32 images at ones, the accuracy becomes over 0.82... If feed even more images at ones, the accuracy can even increase... This is really strange.\r\n\r\n### Source code / logs\r\nThe model will classify 16 categories.  Images for training and validating are subsets of imagenet. (Over 223,918 training images and 22, 016 validating images)\r\n\r\n1. The input size for training is set as:\r\n```\r\ntf.placeholder(tf.float32, [None im_height, im_width, n_channel], name = \"input_x\")\r\n```\r\n\r\n2. data is feeded by dataset  from tfrecord. \r\n```\r\ndataset = tf.data.TFRecordDataset(filename)\r\ndataset = dataset.map(tfrecord_parser).prefetch(buffer_size = 4 * batch_size).batch(batch_size)\r\n```\r\n\r\n3. model loading from pb file\r\n```\r\ndef load_pb_graph(frozen_graph_file):\r\n    with tf.gfile.GFile(frozen_graph_file, 'rb') as f:\r\n        graph_def = tf.GraphDef()\r\n        graph_def.ParseFromString(f.read())\r\n        \r\n    with tf.Graph().as_default() as graph:\r\n        tf.import_graph_def(graph_def, name=\"\")\r\n    \r\n    return graph, graph_def\r\n```\r\n\r\n4. Computation of accuracy\r\n```\r\nwith g2.as_default():        \r\n    in_logits = tf.placeholder(tf.float32, [None, FLAGS.n_class])\r\n    in_labels = tf.placeholder(tf.float32, [None, FLAGS.n_class])\r\n    accuracy = tf.metrics.accuracy(tf.argmax(in_logits, 1), tf.argmax(in_labels, 1))[1]\r\n        \r\n    sess2 = tf.Session(graph = g2, config = config)\r\n    sess2.run(tf.global_variables_initializer())\r\n    sess2.run( tf.local_variables_initializer())\r\n....\r\n_logits = sess.run(logits, feed_dict = val_feed_dict) \r\n_accuacy = sess2.run(accuracy, {in_logits: _logits, in_labels: val_batch_y})\r\n```\r\n\r\nFeeding one image for inference:\r\n> 2018-05-24 21:14:36 Step 22016 : Validation Accuracy:0.21825 \r\n\r\nFeeding 16 images for inference\uff1a\r\n> 2018-05-24 21:16:22 Step 22016 : Validation Accuracy:0.80069\r\n\r\nFeeding 32 images for inference :\r\n> 2018-05-24 21:18:14 Step 22016 : Validation Accuracy:0.81486\r\n\r\nFeeding 128 images for inference:\r\n> 2018-05-24 21:22:42 Step 22016 : Validation Accuracy:0.82744\r\n\r\n"}