{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21835", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21835/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21835/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21835/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21835", "id": 353535738, "node_id": "MDU6SXNzdWUzNTM1MzU3Mzg=", "number": 21835, "title": "New feature request: LOBPCG in addition to Lanczos?", "user": {"login": "lobpcg", "id": 42650045, "node_id": "MDQ6VXNlcjQyNjUwMDQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/42650045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lobpcg", "html_url": "https://github.com/lobpcg", "followers_url": "https://api.github.com/users/lobpcg/followers", "following_url": "https://api.github.com/users/lobpcg/following{/other_user}", "gists_url": "https://api.github.com/users/lobpcg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lobpcg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lobpcg/subscriptions", "organizations_url": "https://api.github.com/users/lobpcg/orgs", "repos_url": "https://api.github.com/users/lobpcg/repos", "events_url": "https://api.github.com/users/lobpcg/events{/privacy}", "received_events_url": "https://api.github.com/users/lobpcg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-08-23T20:12:05Z", "updated_at": "2018-11-22T18:57:52Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nN/A</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nall</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:<br>\nall</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nN/A</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nN/A</li>\n<li><strong>Python version</strong>:<br>\nN/A</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nN/A</li>\n<li><strong>GPU model and memory</strong>:<br>\nN/A</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nN/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>TensorFlow now has a native implementation of Lanczos <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/solvers/python/ops/lanczos.py\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/solvers/python/ops/lanczos.py</a></p>\n<p>It could be useful to add a native TensorFlow implementation of LOBPCG, see <a href=\"https://en.wikipedia.org/wiki/LOBPCG\" rel=\"nofollow\">https://en.wikipedia.org/wiki/LOBPCG</a> which is an alternative to Lanczos  and has some advantages, e.g., warm-starts. SciPy has the Python native implementation <a href=\"https://docs.scipy.org/doc/scipy-1.1.0/reference/generated/scipy.sparse.linalg.lobpcg.html\" rel=\"nofollow\">https://docs.scipy.org/doc/scipy-1.1.0/reference/generated/scipy.sparse.linalg.lobpcg.html</a> used in Scikit for manifold spectral embedding <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.manifold.spectral_embedding.html\" rel=\"nofollow\">http://scikit-learn.org/stable/modules/generated/sklearn.manifold.spectral_embedding.html</a> and for spectral clustering <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralClustering.html\" rel=\"nofollow\">http://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralClustering.html</a></p>\n<p>Reference implementations of LOBPCG are described in</p>\n<ol>\n<li>Knyazev, Andrew V. (2001). \"Toward the Optimal Preconditioned Eigensolver: Locally Optimal Block Preconditioned Conjugate Gradient Method\". SIAM Journal on Scientific Computing. 23 (2): 517\u2013541. doi:10.1137/S1064827500366124</li>\n<li>Knyazev, A. V.; Argentati, M. E.; Lashuk, I.; Ovtchinnikov, E. E. (2007). \"Block Locally Optimal Preconditioned Eigenvalue Xolvers (BLOPEX) in Hypre and PETSc\". SIAM Journal on Scientific Computing. 29 (5): 2224. arXiv:0705.2626\u202fFreely accessible. doi:10.1137/060661624</li>\n</ol>\n<p>LOBPCG can be easily adopted to compute partial SVD and PCA for a data matrix X without ever computing its covariance matrix X'*X, i.e. in matrix-free fashion, see comments at <a href=\"https://www.mathworks.com/matlabcentral/fileexchange/48-lobpcg-m\" rel=\"nofollow\">https://www.mathworks.com/matlabcentral/fileexchange/48-lobpcg-m</a></p>\n<p>NVIDIA has implemented LOBPCG in its nvGRAPH library introduced in CUDA 8.</p>\n<p>A first simple step could be to write a single-vector (non-block) version LOPCG, which would be very similar to already existing <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/solvers/python/ops/linear_equations.py\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/solvers/python/ops/linear_equations.py</a><br>\nbut instead of solving Ax=rhs would produce a single eigenvector of selfadjoint matrix <code>A</code>  matrix-free where the action of the matrix A is represented by  <code>operator</code>, corresponding to the largest (or smallest) eigenvalue, possibly constrained to be orthogonal to a set of given vectors Y. The latter would allow computing several main eigenvectors one-by-one, putting all previously computed eigenvectors into Y.</p>\n<p>I can help with the implementation if numerical issues arise.</p>\n<h3>Source code / logs</h3>\n<p>N/A</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nN/A\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nall\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nall\nTensorFlow installed from (source or binary):\nN/A\nTensorFlow version (use command below):\nN/A\nPython version:\nN/A\nBazel version (if compiling from source):\nN/A\nGCC/Compiler version (if compiling from source):\nN/A\nCUDA/cuDNN version:\nN/A\nGPU model and memory:\nN/A\nExact command to reproduce:\nN/A\n\nDescribe the problem\nTensorFlow now has a native implementation of Lanczos https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/solvers/python/ops/lanczos.py\nIt could be useful to add a native TensorFlow implementation of LOBPCG, see https://en.wikipedia.org/wiki/LOBPCG which is an alternative to Lanczos  and has some advantages, e.g., warm-starts. SciPy has the Python native implementation https://docs.scipy.org/doc/scipy-1.1.0/reference/generated/scipy.sparse.linalg.lobpcg.html used in Scikit for manifold spectral embedding http://scikit-learn.org/stable/modules/generated/sklearn.manifold.spectral_embedding.html and for spectral clustering http://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralClustering.html\nReference implementations of LOBPCG are described in\n\nKnyazev, Andrew V. (2001). \"Toward the Optimal Preconditioned Eigensolver: Locally Optimal Block Preconditioned Conjugate Gradient Method\". SIAM Journal on Scientific Computing. 23 (2): 517\u2013541. doi:10.1137/S1064827500366124\nKnyazev, A. V.; Argentati, M. E.; Lashuk, I.; Ovtchinnikov, E. E. (2007). \"Block Locally Optimal Preconditioned Eigenvalue Xolvers (BLOPEX) in Hypre and PETSc\". SIAM Journal on Scientific Computing. 29 (5): 2224. arXiv:0705.2626\u202fFreely accessible. doi:10.1137/060661624\n\nLOBPCG can be easily adopted to compute partial SVD and PCA for a data matrix X without ever computing its covariance matrix X'*X, i.e. in matrix-free fashion, see comments at https://www.mathworks.com/matlabcentral/fileexchange/48-lobpcg-m\nNVIDIA has implemented LOBPCG in its nvGRAPH library introduced in CUDA 8.\nA first simple step could be to write a single-vector (non-block) version LOPCG, which would be very similar to already existing https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/solvers/python/ops/linear_equations.py\nbut instead of solving Ax=rhs would produce a single eigenvector of selfadjoint matrix A  matrix-free where the action of the matrix A is represented by  operator, corresponding to the largest (or smallest) eigenvalue, possibly constrained to be orthogonal to a set of given vectors Y. The latter would allow computing several main eigenvectors one-by-one, putting all previously computed eigenvectors into Y.\nI can help with the implementation if numerical issues arise.\nSource code / logs\nN/A", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nN/A\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nall\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\nall\r\n- **TensorFlow installed from (source or binary)**:\r\nN/A\r\n- **TensorFlow version (use command below)**:\r\nN/A\r\n- **Python version**:\r\nN/A\r\n- **Bazel version (if compiling from source)**:\r\nN/A\r\n- **GCC/Compiler version (if compiling from source)**:\r\nN/A\r\n- **CUDA/cuDNN version**:\r\nN/A\r\n- **GPU model and memory**:\r\nN/A\r\n- **Exact command to reproduce**:\r\nN/A\r\n\r\n### Describe the problem\r\nTensorFlow now has a native implementation of Lanczos https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/solvers/python/ops/lanczos.py\r\n\r\nIt could be useful to add a native TensorFlow implementation of LOBPCG, see https://en.wikipedia.org/wiki/LOBPCG which is an alternative to Lanczos  and has some advantages, e.g., warm-starts. SciPy has the Python native implementation https://docs.scipy.org/doc/scipy-1.1.0/reference/generated/scipy.sparse.linalg.lobpcg.html used in Scikit for manifold spectral embedding http://scikit-learn.org/stable/modules/generated/sklearn.manifold.spectral_embedding.html and for spectral clustering http://scikit-learn.org/stable/modules/generated/sklearn.cluster.SpectralClustering.html\r\n\r\nReference implementations of LOBPCG are described in \r\n\r\n1. Knyazev, Andrew V. (2001). \"Toward the Optimal Preconditioned Eigensolver: Locally Optimal Block Preconditioned Conjugate Gradient Method\". SIAM Journal on Scientific Computing. 23 (2): 517\u2013541. doi:10.1137/S1064827500366124\r\n2. Knyazev, A. V.; Argentati, M. E.; Lashuk, I.; Ovtchinnikov, E. E. (2007). \"Block Locally Optimal Preconditioned Eigenvalue Xolvers (BLOPEX) in Hypre and PETSc\". SIAM Journal on Scientific Computing. 29 (5): 2224. arXiv:0705.2626\u202fFreely accessible. doi:10.1137/060661624\r\n\r\nLOBPCG can be easily adopted to compute partial SVD and PCA for a data matrix X without ever computing its covariance matrix X'*X, i.e. in matrix-free fashion, see comments at https://www.mathworks.com/matlabcentral/fileexchange/48-lobpcg-m\r\n\r\nNVIDIA has implemented LOBPCG in its nvGRAPH library introduced in CUDA 8.\r\n\r\nA first simple step could be to write a single-vector (non-block) version LOPCG, which would be very similar to already existing https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/solvers/python/ops/linear_equations.py\r\nbut instead of solving Ax=rhs would produce a single eigenvector of selfadjoint matrix `A`  matrix-free where the action of the matrix A is represented by  `operator`, corresponding to the largest (or smallest) eigenvalue, possibly constrained to be orthogonal to a set of given vectors Y. The latter would allow computing several main eigenvectors one-by-one, putting all previously computed eigenvectors into Y.\r\n\r\nI can help with the implementation if numerical issues arise.\r\n\r\n### Source code / logs\r\nN/A\r\n"}