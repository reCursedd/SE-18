{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/156878484", "html_url": "https://github.com/tensorflow/tensorflow/issues/220#issuecomment-156878484", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/220", "id": 156878484, "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njg3ODQ4NA==", "user": {"login": "Yangqing", "id": 551151, "node_id": "MDQ6VXNlcjU1MTE1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/551151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yangqing", "html_url": "https://github.com/Yangqing", "followers_url": "https://api.github.com/users/Yangqing/followers", "following_url": "https://api.github.com/users/Yangqing/following{/other_user}", "gists_url": "https://api.github.com/users/Yangqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yangqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yangqing/subscriptions", "organizations_url": "https://api.github.com/users/Yangqing/orgs", "repos_url": "https://api.github.com/users/Yangqing/repos", "events_url": "https://api.github.com/users/Yangqing/events{/privacy}", "received_events_url": "https://api.github.com/users/Yangqing/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-16T00:20:58Z", "updated_at": "2015-11-16T00:21:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Currently, the android demo is built with Bazel - one way to go is to put your android app under bazel, and follow a similar build rule as highlighted by the Android example.</p>\n<p>If that is not possible, you can manually copy the header files and the pre-built .so file to your Android Studio project. The libtensorflow_demo.so can be found in the bazel cache. If you use Linux, it is usually located at ~/.cache/bazel. Build the target first using</p>\n<div class=\"highlight highlight-source-shell\"><pre>bazel build //tensorflow/examples/android:tensorflow_demo -c opt --copt=-mfpu=neon</pre></div>\n<p>, and find the file with:</p>\n<div class=\"highlight highlight-source-shell\"><pre>find <span class=\"pl-k\">~</span>/.cache/bazel -name <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>libtensorflow_demo.so<span class=\"pl-pds\">\"</span></span></pre></div>\n<p>(Another way is to rename the *.apk to *.apk.zip and unzip it. The resulting .so file is the same as the one found above.)</p>", "body_text": "Currently, the android demo is built with Bazel - one way to go is to put your android app under bazel, and follow a similar build rule as highlighted by the Android example.\nIf that is not possible, you can manually copy the header files and the pre-built .so file to your Android Studio project. The libtensorflow_demo.so can be found in the bazel cache. If you use Linux, it is usually located at ~/.cache/bazel. Build the target first using\nbazel build //tensorflow/examples/android:tensorflow_demo -c opt --copt=-mfpu=neon\n, and find the file with:\nfind ~/.cache/bazel -name \"libtensorflow_demo.so\"\n(Another way is to rename the *.apk to *.apk.zip and unzip it. The resulting .so file is the same as the one found above.)", "body": "Currently, the android demo is built with Bazel - one way to go is to put your android app under bazel, and follow a similar build rule as highlighted by the Android example.\n\nIf that is not possible, you can manually copy the header files and the pre-built .so file to your Android Studio project. The libtensorflow_demo.so can be found in the bazel cache. If you use Linux, it is usually located at ~/.cache/bazel. Build the target first using\n\n``` shell\nbazel build //tensorflow/examples/android:tensorflow_demo -c opt --copt=-mfpu=neon\n```\n\n, and find the file with:\n\n``` shell\nfind ~/.cache/bazel -name \"libtensorflow_demo.so\"\n```\n\n(Another way is to rename the *.apk to *.apk.zip and unzip it. The resulting .so file is the same as the one found above.)\n"}