{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/297616501", "html_url": "https://github.com/tensorflow/tensorflow/pull/9335#issuecomment-297616501", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9335", "id": 297616501, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzYxNjUwMQ==", "user": {"login": "vmarkovtsev", "id": 2793551, "node_id": "MDQ6VXNlcjI3OTM1NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2793551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmarkovtsev", "html_url": "https://github.com/vmarkovtsev", "followers_url": "https://api.github.com/users/vmarkovtsev/followers", "following_url": "https://api.github.com/users/vmarkovtsev/following{/other_user}", "gists_url": "https://api.github.com/users/vmarkovtsev/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmarkovtsev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmarkovtsev/subscriptions", "organizations_url": "https://api.github.com/users/vmarkovtsev/orgs", "repos_url": "https://api.github.com/users/vmarkovtsev/repos", "events_url": "https://api.github.com/users/vmarkovtsev/events{/privacy}", "received_events_url": "https://api.github.com/users/vmarkovtsev/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-27T05:35:45Z", "updated_at": "2017-04-27T05:45:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Disagree. The problem is that there are many inherited errors. Combined exc type and message is the standard way of reporting (see how python reports uncaught exceptions). This allows the exact diagnosis of the problem. Besides, that would break <code>logging.exception</code> since it explicitly includes the exception type - the standard practice. <code>tf.logging</code> is based on <code>logging</code>.</p>\n<p>Having extra information for every <code>OpError</code> inheriter goes out of the scope of this PR.</p>", "body_text": "Disagree. The problem is that there are many inherited errors. Combined exc type and message is the standard way of reporting (see how python reports uncaught exceptions). This allows the exact diagnosis of the problem. Besides, that would break logging.exception since it explicitly includes the exception type - the standard practice. tf.logging is based on logging.\nHaving extra information for every OpError inheriter goes out of the scope of this PR.", "body": "Disagree. The problem is that there are many inherited errors. Combined exc type and message is the standard way of reporting (see how python reports uncaught exceptions). This allows the exact diagnosis of the problem. Besides, that would break `logging.exception` since it explicitly includes the exception type - the standard practice. `tf.logging` is based on `logging`.\r\n\r\nHaving extra information for every `OpError` inheriter goes out of the scope of this PR."}