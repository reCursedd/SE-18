{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/170706075", "pull_request_review_id": 99428924, "id": 170706075, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDcwNjA3NQ==", "diff_hunk": "@@ -14,19 +14,47 @@ limitations under the License.\n ==============================================================================*/\n \n #include <string>\n+#include <algorithm>\n+#include <deque>\n \n #include \"tensorflow/java/src/gen/cc/source_writer.h\"\n \n namespace tensorflow {\n+namespace java {\n+namespace {\n \n-SourceWriter& SourceWriter::Append(const StringPiece& str) {\n-  if (!str.empty()) {\n-    if (newline_) {\n-      DoAppend(left_margin_ + line_prefix_);\n-      newline_ = false;\n-    }\n-    DoAppend(str);\n+template <typename TypeVisitor>\n+void VisitType(const Type& type, TypeVisitor* visitor) {", "path": "tensorflow/java/src/gen/cc/source_writer.cc", "position": null, "original_position": 21, "commit_id": "b780d74444e89375e49e45b184f182db354fdc72", "original_commit_id": "d63dd2e128c7baa3627ae78c4f8f2b4ed3c6428b", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Can we do away with a templated definition and instead define a clear interface for type visitor? I was thinking of something like this:\r\n\r\n```c++\r\nclass TypeVisitor {\r\n  public:\r\n    void Visit(const Type& type) {\r\n       DoVisit(type);\r\n       for (const Type& t : type.parameters()) {\r\n          DoVisit(t);\r\n       }\r\n       for (const Type& t : type.annotations()) {\r\n          DoVisit(t);\r\n       }\r\n       for (const Type& t : type.supertypes()) {\r\n          DoVisit(t);\r\n       }\r\n     }\r\n  protected:\r\n    virtual void DoVisit(const Type& t) = 0;   \r\n}\r\n```\r\n\r\nAnd then `GenericNamespace` and `ImportScanner` can implement this interface.\r\nThat makes the contract easier, avoids possible confusion with operator overloads. What do you think?", "created_at": "2018-02-26T19:24:29Z", "updated_at": "2018-03-27T03:00:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16120#discussion_r170706075", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16120", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/170706075"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16120#discussion_r170706075"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16120"}}, "body_html": "<p>Can we do away with a templated definition and instead define a clear interface for type visitor? I was thinking of something like this:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">TypeVisitor</span> {\n  <span class=\"pl-k\">public:</span>\n    <span class=\"pl-k\">void</span> <span class=\"pl-en\">Visit</span>(<span class=\"pl-k\">const</span> Type&amp; type) {\n       <span class=\"pl-c1\">DoVisit</span>(type);\n       <span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> Type&amp; t : type.<span class=\"pl-c1\">parameters</span>()) {\n          <span class=\"pl-c1\">DoVisit</span>(t);\n       }\n       <span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> Type&amp; t : type.<span class=\"pl-c1\">annotations</span>()) {\n          <span class=\"pl-c1\">DoVisit</span>(t);\n       }\n       <span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> Type&amp; t : type.<span class=\"pl-c1\">supertypes</span>()) {\n          <span class=\"pl-c1\">DoVisit</span>(t);\n       }\n     }\n  <span class=\"pl-k\">protected:</span>\n    <span class=\"pl-k\">virtual</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">DoVisit</span>(<span class=\"pl-k\">const</span> Type&amp; t) = 0;   \n}<span class=\"pl-ii\"></span></pre></div>\n<p>And then <code>GenericNamespace</code> and <code>ImportScanner</code> can implement this interface.<br>\nThat makes the contract easier, avoids possible confusion with operator overloads. What do you think?</p>", "body_text": "Can we do away with a templated definition and instead define a clear interface for type visitor? I was thinking of something like this:\nclass TypeVisitor {\n  public:\n    void Visit(const Type& type) {\n       DoVisit(type);\n       for (const Type& t : type.parameters()) {\n          DoVisit(t);\n       }\n       for (const Type& t : type.annotations()) {\n          DoVisit(t);\n       }\n       for (const Type& t : type.supertypes()) {\n          DoVisit(t);\n       }\n     }\n  protected:\n    virtual void DoVisit(const Type& t) = 0;   \n}\nAnd then GenericNamespace and ImportScanner can implement this interface.\nThat makes the contract easier, avoids possible confusion with operator overloads. What do you think?"}