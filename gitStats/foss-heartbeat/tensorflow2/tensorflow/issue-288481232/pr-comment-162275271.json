{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/162275271", "pull_request_review_id": 88992091, "id": 162275271, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjI3NTI3MQ==", "diff_hunk": "@@ -0,0 +1,190 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifndef TENSORFLOW_JAVA_SRC_GEN_CC_JAVA_OSTREAM_H_\n+#define TENSORFLOW_JAVA_SRC_GEN_CC_JAVA_OSTREAM_H_\n+\n+#include <string>\n+#include <set>\n+#include <vector>\n+\n+#include \"tensorflow/java/src/gen/cc/source_writer.h\"\n+#include \"tensorflow/java/src/gen/cc/java_defs.h\"\n+\n+namespace tensorflow {\n+namespace java {\n+\n+// A base class for writing Java source code using a stream-like API.\n+//\n+// It wraps a SourceWriter and exposes a set of basic operations for writing\n+// Java-specific features.\n+class JavaOutputStream {", "path": "tensorflow/java/src/gen/cc/java_ostream.h", "position": null, "original_position": 33, "commit_id": "b780d74444e89375e49e45b184f182db354fdc72", "original_commit_id": "e24bcd9ffec00a8a51f86f44a6c274c4a02d62e3", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "To be honest, I'm not yet sold on this output-stream business. It's adding a lot of indirection that I haven't internalized the need for. \r\n\r\nAlso, is the method chaining of the `SourceWriter` class used at all? \r\n\r\nWould it make sense to instead have the code generator use methods directly, like `BeginMethod(SourceWriter&, method_name, ...)` etc? Or perhaps we have one `JavaOutputStream` and methods like `BeginMethod(JavaOutputStream&, ...)` instead of many sub-classes with custom APIs?  Perhaps we can brainstorm in a Google Doc?", "created_at": "2018-01-18T08:30:47Z", "updated_at": "2018-03-27T03:00:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16120#discussion_r162275271", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16120", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/162275271"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16120#discussion_r162275271"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16120"}}, "body_html": "<p>To be honest, I'm not yet sold on this output-stream business. It's adding a lot of indirection that I haven't internalized the need for.</p>\n<p>Also, is the method chaining of the <code>SourceWriter</code> class used at all?</p>\n<p>Would it make sense to instead have the code generator use methods directly, like <code>BeginMethod(SourceWriter&amp;, method_name, ...)</code> etc? Or perhaps we have one <code>JavaOutputStream</code> and methods like <code>BeginMethod(JavaOutputStream&amp;, ...)</code> instead of many sub-classes with custom APIs?  Perhaps we can brainstorm in a Google Doc?</p>", "body_text": "To be honest, I'm not yet sold on this output-stream business. It's adding a lot of indirection that I haven't internalized the need for.\nAlso, is the method chaining of the SourceWriter class used at all?\nWould it make sense to instead have the code generator use methods directly, like BeginMethod(SourceWriter&, method_name, ...) etc? Or perhaps we have one JavaOutputStream and methods like BeginMethod(JavaOutputStream&, ...) instead of many sub-classes with custom APIs?  Perhaps we can brainstorm in a Google Doc?"}