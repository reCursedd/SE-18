{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/376869113", "html_url": "https://github.com/tensorflow/tensorflow/pull/16120#issuecomment-376869113", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16120", "id": 376869113, "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njg2OTExMw==", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-28T12:29:50Z", "updated_at": "2018-03-28T12:29:50Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>but if the simpler fix of just removing the add_arguments function works with the previous vector and deques then that might be preferable.</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> : Well that's what I thought at first but on my Mac, the compiler was complaining about the <code>std::deque&lt;Type&gt; supertypes_</code>, trying to compute the <code>sizeof(Type)</code> at construct time for some reason, which of course failed since this field is a member of <code>Type</code> itself. Replacing it by a <code>list</code> fixed my problem and I thought that, since they are more convenient than <code>vector</code> for finding elements etc. and optimization of this generator is not critical, why not applying it everywhere.</p>\n<blockquote>\n<p>In fact, I think it would have also been fixed by changing add_arguments's implementation to use begin() and end() instead of cbegin() and cend().</p>\n</blockquote>\n<p>I simply removed the method because while preparing the next PR, I figured out that I don't need it anymore.</p>", "body_text": "but if the simpler fix of just removing the add_arguments function works with the previous vector and deques then that might be preferable.\n\n@asimshankar : Well that's what I thought at first but on my Mac, the compiler was complaining about the std::deque<Type> supertypes_, trying to compute the sizeof(Type) at construct time for some reason, which of course failed since this field is a member of Type itself. Replacing it by a list fixed my problem and I thought that, since they are more convenient than vector for finding elements etc. and optimization of this generator is not critical, why not applying it everywhere.\n\nIn fact, I think it would have also been fixed by changing add_arguments's implementation to use begin() and end() instead of cbegin() and cend().\n\nI simply removed the method because while preparing the next PR, I figured out that I don't need it anymore.", "body": "> but if the simpler fix of just removing the add_arguments function works with the previous vector and deques then that might be preferable.\r\n\r\n@asimshankar : Well that's what I thought at first but on my Mac, the compiler was complaining about the `std::deque<Type> supertypes_`, trying to compute the `sizeof(Type)` at construct time for some reason, which of course failed since this field is a member of `Type` itself. Replacing it by a `list` fixed my problem and I thought that, since they are more convenient than `vector` for finding elements etc. and optimization of this generator is not critical, why not applying it everywhere.\r\n\r\n>  In fact, I think it would have also been fixed by changing add_arguments's implementation to use begin() and end() instead of cbegin() and cend().\r\n\r\nI simply removed the method because while preparing the next PR, I figured out that I don't need it anymore."}