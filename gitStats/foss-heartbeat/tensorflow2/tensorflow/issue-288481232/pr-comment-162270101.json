{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/162270101", "pull_request_review_id": 88992091, "id": 162270101, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjI3MDEwMQ==", "diff_hunk": "@@ -43,6 +46,11 @@ class Annotation;\n // supertypes are only useful when declaring a type.\n class Type {\n  public:\n+  struct Comparator {\n+    bool operator() (const Type& type1, const Type& type2) {\n+      return type1.name_ < type2.name_ || type1.package_ < type2.package_;", "path": "tensorflow/java/src/gen/cc/java_defs.h", "position": null, "original_position": 16, "commit_id": "b780d74444e89375e49e45b184f182db354fdc72", "original_commit_id": "e24bcd9ffec00a8a51f86f44a6c274c4a02d62e3", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I don't think this yields a strict-weak-ordering. For example, consider:\r\n\r\nT1 = (\"a\", \"b\")\r\nT2 = (\"b\", \"a\")\r\n\r\nThen `ByName(T1, T2)` is true and `ByName(T2, T1)` is also true, violating the asymmetry requirement of the strict-weak ordering expected of comparators.\r\n\r\nI think you want this to be:\r\n\r\n```c++\r\nif (type1.name_ == type2.name_) {\r\n  return type1.package_ < type2.package;\r\n}\r\nreturn type1.name_ < type2.name_;\r\n```", "created_at": "2018-01-18T07:58:43Z", "updated_at": "2018-03-27T03:00:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16120#discussion_r162270101", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16120", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/162270101"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16120#discussion_r162270101"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16120"}}, "body_html": "<p>I don't think this yields a strict-weak-ordering. For example, consider:</p>\n<p>T1 = (\"a\", \"b\")<br>\nT2 = (\"b\", \"a\")</p>\n<p>Then <code>ByName(T1, T2)</code> is true and <code>ByName(T2, T1)</code> is also true, violating the asymmetry requirement of the strict-weak ordering expected of comparators.</p>\n<p>I think you want this to be:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">if</span> (type1.name_ == type2.name_) {\n  <span class=\"pl-k\">return</span> type1.<span class=\"pl-smi\">package_</span> &lt; type2.<span class=\"pl-smi\">package</span>;\n}\n<span class=\"pl-k\">return</span> type1.name_ &lt; type2.name_;</pre></div>", "body_text": "I don't think this yields a strict-weak-ordering. For example, consider:\nT1 = (\"a\", \"b\")\nT2 = (\"b\", \"a\")\nThen ByName(T1, T2) is true and ByName(T2, T1) is also true, violating the asymmetry requirement of the strict-weak ordering expected of comparators.\nI think you want this to be:\nif (type1.name_ == type2.name_) {\n  return type1.package_ < type2.package;\n}\nreturn type1.name_ < type2.name_;"}