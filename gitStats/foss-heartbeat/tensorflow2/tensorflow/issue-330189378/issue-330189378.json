{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19830", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19830/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19830/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19830/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19830", "id": 330189378, "node_id": "MDU6SXNzdWUzMzAxODkzNzg=", "number": 19830, "title": "After encoded to tfrecords and decoded, .jpg quality descend", "user": {"login": "czx94", "id": 37045266, "node_id": "MDQ6VXNlcjM3MDQ1MjY2", "avatar_url": "https://avatars3.githubusercontent.com/u/37045266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czx94", "html_url": "https://github.com/czx94", "followers_url": "https://api.github.com/users/czx94/followers", "following_url": "https://api.github.com/users/czx94/following{/other_user}", "gists_url": "https://api.github.com/users/czx94/gists{/gist_id}", "starred_url": "https://api.github.com/users/czx94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czx94/subscriptions", "organizations_url": "https://api.github.com/users/czx94/orgs", "repos_url": "https://api.github.com/users/czx94/repos", "events_url": "https://api.github.com/users/czx94/events{/privacy}", "received_events_url": "https://api.github.com/users/czx94/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-06-07T09:27:08Z", "updated_at": "2018-07-23T16:43:24Z", "closed_at": "2018-07-23T16:43:24Z", "author_association": "NONE", "body_html": "<p>I'm not sure if somebody has noticed or it's just an exception that after the procedure of encoding and decoding, the .jpg loss some information. I havn't figured it out.... So strange..........<br>\nHope someone can find the answer...</p>\n<p>The part to encode:</p>\n<pre><code>def encode_tfrecords(file_path, output_path):\n    classes = os.listdir(file_path)\n\n    with tf.python_io.TFRecordWriter(output_path) as writer:\n        for index, name in enumerate(classes):\n            class_path = file_path + name + \"/\"\n            for img_name in os.listdir(class_path):\n                img_path = class_path + img_name\n\n                img_raw = tf.gfile.FastGFile(img_path, 'rb').read()\n\n                example = tf.train.Example(features=tf.train.Features(feature={\n                    \"label\": tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),\n                    'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img_raw]))\n                }))\n                writer.write(example.SerializeToString())  \n</code></pre>\n<p>The part to decode:</p>\n<pre><code>def read_and_decode(filename, output_path, iters):\n    filename_queue = tf.train.string_input_producer([filename])  \n    reader = tf.TFRecordReader()\n    _, serialized_example = reader.read(filename_queue) \n    features = tf.parse_single_example(serialized_example,\n                                       features={\n                                           'label': tf.FixedLenFeature([], tf.int64),\n                                           'img_raw': tf.FixedLenFeature([], tf.string),\n                                       }) \n    # image = tf.decode_raw(features['img_raw'], t.uint8)\n    image = tf.image.decode_jpeg(features['img_raw'], channels=3)\n    label  = tf.cast(features['label'], tf.int64)\n    with tf.Session() as sess:  \n        init_op = tf.global_variables_initializer()\n        sess.run(init_op)\n        coord = tf.train.Coordinator()\n        threads = tf.train.start_queue_runners(coord=coord)\n        for i in range(iters):\n            example, l = sess.run([image, label]) \n            img = Image.fromarray(example, 'RGB')\n            img.save(output_path + str(i) + '_''Label_' + str(l) + '.jpg')\n        coord.request_stop()\n        coord.join(threads)\n</code></pre>", "body_text": "I'm not sure if somebody has noticed or it's just an exception that after the procedure of encoding and decoding, the .jpg loss some information. I havn't figured it out.... So strange..........\nHope someone can find the answer...\nThe part to encode:\ndef encode_tfrecords(file_path, output_path):\n    classes = os.listdir(file_path)\n\n    with tf.python_io.TFRecordWriter(output_path) as writer:\n        for index, name in enumerate(classes):\n            class_path = file_path + name + \"/\"\n            for img_name in os.listdir(class_path):\n                img_path = class_path + img_name\n\n                img_raw = tf.gfile.FastGFile(img_path, 'rb').read()\n\n                example = tf.train.Example(features=tf.train.Features(feature={\n                    \"label\": tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),\n                    'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img_raw]))\n                }))\n                writer.write(example.SerializeToString())  \n\nThe part to decode:\ndef read_and_decode(filename, output_path, iters):\n    filename_queue = tf.train.string_input_producer([filename])  \n    reader = tf.TFRecordReader()\n    _, serialized_example = reader.read(filename_queue) \n    features = tf.parse_single_example(serialized_example,\n                                       features={\n                                           'label': tf.FixedLenFeature([], tf.int64),\n                                           'img_raw': tf.FixedLenFeature([], tf.string),\n                                       }) \n    # image = tf.decode_raw(features['img_raw'], t.uint8)\n    image = tf.image.decode_jpeg(features['img_raw'], channels=3)\n    label  = tf.cast(features['label'], tf.int64)\n    with tf.Session() as sess:  \n        init_op = tf.global_variables_initializer()\n        sess.run(init_op)\n        coord = tf.train.Coordinator()\n        threads = tf.train.start_queue_runners(coord=coord)\n        for i in range(iters):\n            example, l = sess.run([image, label]) \n            img = Image.fromarray(example, 'RGB')\n            img.save(output_path + str(i) + '_''Label_' + str(l) + '.jpg')\n        coord.request_stop()\n        coord.join(threads)", "body": "I'm not sure if somebody has noticed or it's just an exception that after the procedure of encoding and decoding, the .jpg loss some information. I havn't figured it out.... So strange..........\r\nHope someone can find the answer...\r\n\r\nThe part to encode:\r\n```\r\ndef encode_tfrecords(file_path, output_path):\r\n    classes = os.listdir(file_path)\r\n\r\n    with tf.python_io.TFRecordWriter(output_path) as writer:\r\n        for index, name in enumerate(classes):\r\n            class_path = file_path + name + \"/\"\r\n            for img_name in os.listdir(class_path):\r\n                img_path = class_path + img_name\r\n\r\n                img_raw = tf.gfile.FastGFile(img_path, 'rb').read()\r\n\r\n                example = tf.train.Example(features=tf.train.Features(feature={\r\n                    \"label\": tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),\r\n                    'img_raw': tf.train.Feature(bytes_list=tf.train.BytesList(value=[img_raw]))\r\n                }))\r\n                writer.write(example.SerializeToString())  \r\n```\r\n\r\n\r\nThe part to decode:\r\n```\r\ndef read_and_decode(filename, output_path, iters):\r\n    filename_queue = tf.train.string_input_producer([filename])  \r\n    reader = tf.TFRecordReader()\r\n    _, serialized_example = reader.read(filename_queue) \r\n    features = tf.parse_single_example(serialized_example,\r\n                                       features={\r\n                                           'label': tf.FixedLenFeature([], tf.int64),\r\n                                           'img_raw': tf.FixedLenFeature([], tf.string),\r\n                                       }) \r\n    # image = tf.decode_raw(features['img_raw'], t.uint8)\r\n    image = tf.image.decode_jpeg(features['img_raw'], channels=3)\r\n    label  = tf.cast(features['label'], tf.int64)\r\n    with tf.Session() as sess:  \r\n        init_op = tf.global_variables_initializer()\r\n        sess.run(init_op)\r\n        coord = tf.train.Coordinator()\r\n        threads = tf.train.start_queue_runners(coord=coord)\r\n        for i in range(iters):\r\n            example, l = sess.run([image, label]) \r\n            img = Image.fromarray(example, 'RGB')\r\n            img.save(output_path + str(i) + '_''Label_' + str(l) + '.jpg')\r\n        coord.request_stop()\r\n        coord.join(threads)\r\n```"}