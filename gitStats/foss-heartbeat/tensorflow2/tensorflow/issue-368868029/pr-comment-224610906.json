{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224610906", "pull_request_review_id": 163972600, "id": 224610906, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDYxMDkwNg==", "diff_hunk": "@@ -0,0 +1,183 @@\n+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Basic tests for TF-TensorRT integration.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import numpy as np\n+\n+from tensorflow.contrib.tensorrt.python import trt_convert\n+from tensorflow.contrib.tensorrt.test import tf_trt_integration_test_base as trt_test\n+from tensorflow.python.framework import constant_op\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import ops\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import math_ops\n+from tensorflow.python.ops import nn\n+from tensorflow.python.ops import nn_ops\n+from tensorflow.python.platform import test\n+\n+\n+class SimpleReshapeTest(trt_test.TfTrtIntegrationTestBase):\n+\n+  def GetParams(self):\n+    \"\"\"Create a graph containing single segment.\"\"\"\n+    dtype = dtypes.float32\n+    input_name = \"input\"\n+    input_dims = [100, 24, 24, 2]\n+    output_name = \"output\"\n+    g = ops.Graph()\n+    with g.as_default():\n+      inp = array_ops.placeholder(\n+          dtype=dtype, shape=[None] + input_dims[1:], name=input_name)\n+      with g.device(\"/GPU:0\"):\n+        reshape = array_ops.reshape(inp, [-1, 24*24*2])\n+        print('RESHAPE SHAPE', reshape.get_shape().as_list())\n+        identity = array_ops.identity(reshape, \"identity\")\n+      array_ops.identity(identity, name=output_name)\n+    return trt_test.TfTrtIntegrationTestParams(\n+        gdef=g.as_graph_def(),\n+        input_names=[input_name],\n+        input_dims=[input_dims],\n+        output_names=[output_name],\n+        expected_output_dims=[(100, 24*24*2)])\n+\n+  def ExpectedEnginesToBuild(self, run_params):\n+    \"\"\"Return the expected engines to build.\"\"\"\n+    return [\"my_trt_op_0\"]\n+\n+class ReshapeInverseTest(trt_test.TfTrtIntegrationTestBase):\n+\n+  def GetParams(self):\n+    \"\"\"Create a graph containing single segment.\"\"\"\n+    dtype = dtypes.float32\n+    input_name = \"input\"\n+    input_dims = [100, 24, 24, 2]\n+    output_name = \"output\"\n+    g = ops.Graph()\n+    with g.as_default():\n+      inp = array_ops.placeholder(\n+          dtype=dtype, shape=[None] + input_dims[1:], name=input_name)\n+      with g.device(\"/GPU:0\"):\n+        reshape = array_ops.reshape(inp, [-1, 24*24*2])\n+        reshape = array_ops.reshape(reshape, [-1, 24, 24, 2])\n+        identity = array_ops.identity(reshape, \"identity\")\n+      array_ops.identity(identity, name=output_name)\n+    return trt_test.TfTrtIntegrationTestParams(\n+        gdef=g.as_graph_def(),\n+        input_names=[input_name],\n+        input_dims=[input_dims],\n+        output_names=[output_name],\n+        expected_output_dims=[(100, 24, 24, 2)])\n+\n+  def ExpectedEnginesToBuild(self, run_params):\n+    \"\"\"Return the expected engines to build.\"\"\"\n+    return [\"my_trt_op_0\"]\n+\n+class ManyReshapeTest(trt_test.TfTrtIntegrationTestBase):\n+\n+  def GetParams(self):\n+    \"\"\"Create a graph containing single segment.\"\"\"\n+    dtype = dtypes.float32\n+    input_name = \"input\"\n+    input_dims = [100, 24, 24, 2]\n+    output_name = \"output\"\n+    g = ops.Graph()\n+    with g.as_default():\n+      inp = array_ops.placeholder(\n+          dtype=dtype, shape=[None] + input_dims[1:], name=input_name)\n+      with g.device(\"/GPU:0\"):\n+        reshape = array_ops.reshape(inp, [-1, 24*24, 2])\n+        reshape = array_ops.reshape(reshape, [-1, 24*2, 24])\n+        reshape = array_ops.reshape(reshape, [-1, 24, 24*2])\n+        reshape = array_ops.reshape(reshape, [-1, 6, 4, 24, 2])\n+        reshape = array_ops.reshape(reshape, [-1, 6, 4, 6, 4, 2])\n+        reshape = array_ops.reshape(reshape, [-1, 6, 4, 6, 4, 2, 1])\n+        reshape = array_ops.reshape(reshape, [-1, 24, 24, 2])\n+        identity = array_ops.identity(reshape, \"identity\")\n+      array_ops.identity(identity, name=output_name)\n+    return trt_test.TfTrtIntegrationTestParams(\n+        gdef=g.as_graph_def(),\n+        input_names=[input_name],\n+        input_dims=[input_dims],\n+        output_names=[output_name],\n+        expected_output_dims=[(100, 24, 24, 2)])\n+\n+  def ExpectedEnginesToBuild(self, run_params):\n+    \"\"\"Return the expected engines to build.\"\"\"\n+    return [\"my_trt_op_0\"]\n+\n+class SimpleTransposeTest(trt_test.TfTrtIntegrationTestBase):", "path": "tensorflow/contrib/tensorrt/test/reshape_transpose_test.py", "position": null, "original_position": 124, "commit_id": "77456c6611fd2faa07d6efabafb3f61f82a24eed", "original_commit_id": "307ef84f3c53bb35222182afaf40385fae88ec73", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "As mentioned above please add tests for the case where first element of the permutation is not 0.", "created_at": "2018-10-11T21:31:43Z", "updated_at": "2018-10-16T17:06:56Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22874#discussion_r224610906", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22874", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224610906"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22874#discussion_r224610906"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22874"}}, "body_html": "<p>As mentioned above please add tests for the case where first element of the permutation is not 0.</p>", "body_text": "As mentioned above please add tests for the case where first element of the permutation is not 0."}