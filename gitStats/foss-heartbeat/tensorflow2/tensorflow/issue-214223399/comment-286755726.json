{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/286755726", "html_url": "https://github.com/tensorflow/tensorflow/issues/8410#issuecomment-286755726", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8410", "id": 286755726, "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njc1NTcyNg==", "user": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-15T14:20:00Z", "updated_at": "2017-03-15T16:39:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22507798\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Lan1991Xu\">@Lan1991Xu</a></p>\n<p>Regarding your first question, if the nodes in your DQN network have a common naming pattern, maybe you can use the <code>-n</code> option of <code>lt</code>, such as:</p>\n<pre><code>tfdbg&gt; lt -f has_inf_or_nan -n \"^DQN/.*\"\n</code></pre>\n<p>This will ignore all the Tensors with NaNs and Infs whose name do not begin with DQN.</p>\n<p>If you want to write a tensor_filter (i.e., conditional breakpoint between runs) similar to tf_debug.has_inf_or_nan, but checks only the \"^DQN/.*\" notes, you can do:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">has_inf_or_nan_in_dqn</span>(<span class=\"pl-smi\">datum</span>, <span class=\"pl-smi\">tensor</span>):\n  <span class=\"pl-k\">return</span> datum.node_name.startswith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DQN<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">and</span> tf_debug.has_inf_or_nan(datum, tensor)\n\nsess <span class=\"pl-k\">=</span> tf_debug.LocalCLIDebugWrapperSession(sess)\nsess.add_tensor_filter(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>has_inf_or_nan_in_dqn<span class=\"pl-pds\">\"</span></span>, has_inf_or_nan_in_dqn)</pre></div>\n<p>Then when you do <code>run -f has_inf_or_nan_in_dqn</code>, tfdbg will only break if the DQN network part of your model contains NaNs or Infs.</p>\n<p>Regarding your second question, yes, if you use the <code>run -f ...</code> command, the initial screen automatically does <code>lt -f ...</code> for you.</p>", "body_text": "@Lan1991Xu\nRegarding your first question, if the nodes in your DQN network have a common naming pattern, maybe you can use the -n option of lt, such as:\ntfdbg> lt -f has_inf_or_nan -n \"^DQN/.*\"\n\nThis will ignore all the Tensors with NaNs and Infs whose name do not begin with DQN.\nIf you want to write a tensor_filter (i.e., conditional breakpoint between runs) similar to tf_debug.has_inf_or_nan, but checks only the \"^DQN/.*\" notes, you can do:\ndef has_inf_or_nan_in_dqn(datum, tensor):\n  return datum.node_name.startswith(\"DQN\") and tf_debug.has_inf_or_nan(datum, tensor)\n\nsess = tf_debug.LocalCLIDebugWrapperSession(sess)\nsess.add_tensor_filter(\"has_inf_or_nan_in_dqn\", has_inf_or_nan_in_dqn)\nThen when you do run -f has_inf_or_nan_in_dqn, tfdbg will only break if the DQN network part of your model contains NaNs or Infs.\nRegarding your second question, yes, if you use the run -f ... command, the initial screen automatically does lt -f ... for you.", "body": "@Lan1991Xu \r\n\r\nRegarding your first question, if the nodes in your DQN network have a common naming pattern, maybe you can use the `-n` option of `lt`, such as:\r\n```\r\ntfdbg> lt -f has_inf_or_nan -n \"^DQN/.*\"\r\n```\r\n\r\nThis will ignore all the Tensors with NaNs and Infs whose name do not begin with DQN.\r\n\r\nIf you want to write a tensor_filter (i.e., conditional breakpoint between runs) similar to tf_debug.has_inf_or_nan, but checks only the \"^DQN/.*\" notes, you can do:\r\n```python\r\ndef has_inf_or_nan_in_dqn(datum, tensor):\r\n  return datum.node_name.startswith(\"DQN\") and tf_debug.has_inf_or_nan(datum, tensor)\r\n\r\nsess = tf_debug.LocalCLIDebugWrapperSession(sess)\r\nsess.add_tensor_filter(\"has_inf_or_nan_in_dqn\", has_inf_or_nan_in_dqn)\r\n```\r\n\r\nThen when you do `run -f has_inf_or_nan_in_dqn`, tfdbg will only break if the DQN network part of your model contains NaNs or Infs.\r\n\r\nRegarding your second question, yes, if you use the `run -f ...` command, the initial screen automatically does `lt -f ...` for you."}