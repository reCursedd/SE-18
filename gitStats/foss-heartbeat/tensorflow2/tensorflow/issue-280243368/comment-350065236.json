{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350065236", "html_url": "https://github.com/tensorflow/tensorflow/issues/15190#issuecomment-350065236", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15190", "id": 350065236, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDA2NTIzNg==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-07T19:11:37Z", "updated_at": "2017-12-07T19:11:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I suspect the problem is this line:</p>\n<div class=\"highlight highlight-source-python\"><pre>                  res <span class=\"pl-k\">=</span> sess.run(iterator.get_next())</pre></div>\n<p><code>iterator.get_next()</code> creates a new op each time it's called, and this op happens to be an especially heavyweight one that owns a thread, so calling it in a loop will eventually cause a resource leak. The fix is  simple, and we'll shortly start printing a warning message to advise users to do it when we detect this situation:</p>\n<div class=\"highlight highlight-source-python\"><pre>      <span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span>\n      next_element <span class=\"pl-k\">=</span> iterator.get_next()\n      <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n            sess.run(iterator.initializer)\n            <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(num_steps):\n                  res <span class=\"pl-k\">=</span> sess.run(next_element)\n                  <span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>", "body_text": "I suspect the problem is this line:\n                  res = sess.run(iterator.get_next())\niterator.get_next() creates a new op each time it's called, and this op happens to be an especially heavyweight one that owns a thread, so calling it in a loop will eventually cause a resource leak. The fix is  simple, and we'll shortly start printing a warning message to advise users to do it when we detect this situation:\n      # ...\n      next_element = iterator.get_next()\n      with tf.Session() as sess:\n            sess.run(iterator.initializer)\n            for i in xrange(num_steps):\n                  res = sess.run(next_element)\n                  # ...", "body": "I suspect the problem is this line:\r\n\r\n```python\r\n                  res = sess.run(iterator.get_next())\r\n```\r\n\r\n`iterator.get_next()` creates a new op each time it's called, and this op happens to be an especially heavyweight one that owns a thread, so calling it in a loop will eventually cause a resource leak. The fix is  simple, and we'll shortly start printing a warning message to advise users to do it when we detect this situation:\r\n\r\n```python\r\n      # ...\r\n      next_element = iterator.get_next()\r\n      with tf.Session() as sess:\r\n            sess.run(iterator.initializer)\r\n            for i in xrange(num_steps):\r\n                  res = sess.run(next_element)\r\n                  # ...\r\n```"}