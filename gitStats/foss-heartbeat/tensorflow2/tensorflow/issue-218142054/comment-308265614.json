{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/308265614", "html_url": "https://github.com/tensorflow/tensorflow/issues/8833#issuecomment-308265614", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8833", "id": 308265614, "node_id": "MDEyOklzc3VlQ29tbWVudDMwODI2NTYxNA==", "user": {"login": "RylanSchaeffer", "id": 8942987, "node_id": "MDQ6VXNlcjg5NDI5ODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8942987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RylanSchaeffer", "html_url": "https://github.com/RylanSchaeffer", "followers_url": "https://api.github.com/users/RylanSchaeffer/followers", "following_url": "https://api.github.com/users/RylanSchaeffer/following{/other_user}", "gists_url": "https://api.github.com/users/RylanSchaeffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/RylanSchaeffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RylanSchaeffer/subscriptions", "organizations_url": "https://api.github.com/users/RylanSchaeffer/orgs", "repos_url": "https://api.github.com/users/RylanSchaeffer/repos", "events_url": "https://api.github.com/users/RylanSchaeffer/events{/privacy}", "received_events_url": "https://api.github.com/users/RylanSchaeffer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-13T22:20:45Z", "updated_at": "2017-06-13T22:20:59Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4604464\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/oahziur\">@oahziur</a> , let me try to explain what my current understanding is, and you can tell me if I'm correct. A BasicDecoder accepts only one cell. One cell corresponds to one LSTMStateTuple (consisting of c and h). My problem is that I have two LSTMStateTuples. To reduce the two LSTMStateTuples down to one LSTMStateTuple, I need to separately concatenate the c states (i.e. c = c1 concat c2) and the h states (i.e. h = h1 concat h2), and then pass the newly created c and h states into a new LSTMStateTuple.</p>\n<p>If that's correct, my next question is where I would use this new LSTMStateTuple? BasicDecoder accepts a cell, not a LSTMStateTuple. Would I pass the LSTMStateTuple in as the initial state? That makes the most sense. But then how do I do this? Do I change my code from <code>init_state = attention_zero.clone(cell_state=encoder_final_states)</code> to <code>init_state = attention_zero.clone(cell_state=new_lstm_state_tuple)</code>?</p>", "body_text": "@oahziur , let me try to explain what my current understanding is, and you can tell me if I'm correct. A BasicDecoder accepts only one cell. One cell corresponds to one LSTMStateTuple (consisting of c and h). My problem is that I have two LSTMStateTuples. To reduce the two LSTMStateTuples down to one LSTMStateTuple, I need to separately concatenate the c states (i.e. c = c1 concat c2) and the h states (i.e. h = h1 concat h2), and then pass the newly created c and h states into a new LSTMStateTuple.\nIf that's correct, my next question is where I would use this new LSTMStateTuple? BasicDecoder accepts a cell, not a LSTMStateTuple. Would I pass the LSTMStateTuple in as the initial state? That makes the most sense. But then how do I do this? Do I change my code from init_state = attention_zero.clone(cell_state=encoder_final_states) to init_state = attention_zero.clone(cell_state=new_lstm_state_tuple)?", "body": "@oahziur , let me try to explain what my current understanding is, and you can tell me if I'm correct. A BasicDecoder accepts only one cell. One cell corresponds to one LSTMStateTuple (consisting of c and h). My problem is that I have two LSTMStateTuples. To reduce the two LSTMStateTuples down to one LSTMStateTuple, I need to separately concatenate the c states (i.e. c = c1 concat c2) and the h states (i.e. h = h1 concat h2), and then pass the newly created c and h states into a new LSTMStateTuple.\r\n\r\nIf that's correct, my next question is where I would use this new LSTMStateTuple? BasicDecoder accepts a cell, not a LSTMStateTuple. Would I pass the LSTMStateTuple in as the initial state? That makes the most sense. But then how do I do this? Do I change my code from `init_state = attention_zero.clone(cell_state=encoder_final_states)` to `init_state = attention_zero.clone(cell_state=new_lstm_state_tuple)`?"}