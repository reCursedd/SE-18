{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19208", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19208/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19208/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19208/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19208", "id": 322059612, "node_id": "MDU6SXNzdWUzMjIwNTk2MTI=", "number": 19208, "title": "rnn_cell not Checkpointable", "user": {"login": "sleighsoft", "id": 9438971, "node_id": "MDQ6VXNlcjk0Mzg5NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9438971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleighsoft", "html_url": "https://github.com/sleighsoft", "followers_url": "https://api.github.com/users/sleighsoft/followers", "following_url": "https://api.github.com/users/sleighsoft/following{/other_user}", "gists_url": "https://api.github.com/users/sleighsoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleighsoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleighsoft/subscriptions", "organizations_url": "https://api.github.com/users/sleighsoft/orgs", "repos_url": "https://api.github.com/users/sleighsoft/repos", "events_url": "https://api.github.com/users/sleighsoft/events{/privacy}", "received_events_url": "https://api.github.com/users/sleighsoft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 20, "created_at": "2018-05-10T19:46:53Z", "updated_at": "2018-07-17T14:24:20Z", "closed_at": "2018-05-19T03:32:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p>tf-nightly: 1.8.0.dev20180329 (latest Windows 10 build)</p>\n<p>Sample Code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib.eager <span class=\"pl-k\">as</span> tfe\n<span class=\"pl-k\">from</span> tensorflow.python.training <span class=\"pl-k\">import</span> checkpointable\n\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MyModel</span>(<span class=\"pl-e\">checkpointable</span>.<span class=\"pl-e\">Checkpointable</span>):\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-c1\">self</span>.cell <span class=\"pl-k\">=</span> tf.nn.rnn_cell.DropoutWrapper(\n        tf.nn.rnn_cell.BasicLSTMCell(<span class=\"pl-c1\">10</span>), <span class=\"pl-c1\">0.5</span>)\n    <span class=\"pl-c1\">self</span>.cell2 <span class=\"pl-k\">=</span> tf.nn.rnn_cell.BasicLSTMCell(<span class=\"pl-c1\">10</span>)\n\n\nmodel <span class=\"pl-k\">=</span> MyModel()\nstate <span class=\"pl-k\">=</span> tf.nn.rnn_cell.LSTMStateTuple(\n    <span class=\"pl-v\">c</span><span class=\"pl-k\">=</span>tf.constant([[<span class=\"pl-c1\">10</span>] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">10</span>] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">10</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32),\n    <span class=\"pl-v\">h</span><span class=\"pl-k\">=</span>tf.constant([[<span class=\"pl-c1\">10</span>] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">10</span>] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">10</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32))\nmodel.cell(tf.constant([[<span class=\"pl-c1\">10</span>]] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">10</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32), state)\nmodel.cell2(tf.constant([[<span class=\"pl-c1\">10</span>]] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">10</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32), state)\n\ncheckpoint_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>modeldir/test/<span class=\"pl-pds\">'</span></span>\ncheckpoint <span class=\"pl-k\">=</span> tfe.Checkpoint(<span class=\"pl-v\">model</span><span class=\"pl-k\">=</span>model)\nsaver <span class=\"pl-k\">=</span> tfe.CheckpointableSaver(checkpoint)\n\n<span class=\"pl-k\">from</span> tensorflow.contrib.eager.python <span class=\"pl-k\">import</span> checkpointable_utils\n<span class=\"pl-c1\">print</span>(checkpointable_utils._serialize_object_graph(saver._root_checkpointable))\n</pre></div>\n<p>Prints:</p>\n<pre><code>({'model/cell2/kernel/.ATTRIBUTES/VARIABLE_VALUE': &lt;tf.Variable 'basic_lstm_cell_1/kernel:0' shape=(11, 40) dtype=float32_ref&gt;, 'model/cell2/bias/.ATTRIBUTES/VARIABLE_VALUE': &lt;tf.Variable 'basic_lstm_cell_1/bias:0' shape=(40,) dtype=float32_ref&gt;}, nodes {\n  children {\n    node_id: 1\n    local_name: \"model\"\n  }\n}\nnodes {\n  children {\n    node_id: 2\n    local_name: \"cell\"\n  }\n  children {\n    node_id: 3\n    local_name: \"cell2\"\n  }\n}\nnodes {\n}\nnodes {\n  children {\n    node_id: 4\n    local_name: \"kernel\"\n  }\n  children {\n    node_id: 5\n    local_name: \"bias\"\n  }\n}\nnodes {\n  attributes {\n    name: \"VARIABLE_VALUE\"\n    full_name: \"basic_lstm_cell_1/kernel\"\n    checkpoint_key: \"model/cell2/kernel/.ATTRIBUTES/VARIABLE_VALUE\"\n  }\n}\nnodes {\n  attributes {\n    name: \"VARIABLE_VALUE\"\n    full_name: \"basic_lstm_cell_1/bias\"\n    checkpoint_key: \"model/cell2/bias/.ATTRIBUTES/VARIABLE_VALUE\"\n  }\n}\n)\n</code></pre>\n<p>Expected to contain <code>bias</code> and <code>kernel</code> for both <code>cell</code> and <code>cell2</code> but only contains them for the cell without <code>DropoutWrapper</code>.</p>", "body_text": "tf-nightly: 1.8.0.dev20180329 (latest Windows 10 build)\nSample Code:\nimport tensorflow as tf\nimport tensorflow.contrib.eager as tfe\nfrom tensorflow.python.training import checkpointable\n\n\nclass MyModel(checkpointable.Checkpointable):\n\n  def __init__(self):\n    self.cell = tf.nn.rnn_cell.DropoutWrapper(\n        tf.nn.rnn_cell.BasicLSTMCell(10), 0.5)\n    self.cell2 = tf.nn.rnn_cell.BasicLSTMCell(10)\n\n\nmodel = MyModel()\nstate = tf.nn.rnn_cell.LSTMStateTuple(\n    c=tf.constant([[10] * 10] * 10, dtype=tf.float32),\n    h=tf.constant([[10] * 10] * 10, dtype=tf.float32))\nmodel.cell(tf.constant([[10]] * 10, dtype=tf.float32), state)\nmodel.cell2(tf.constant([[10]] * 10, dtype=tf.float32), state)\n\ncheckpoint_path = 'modeldir/test/'\ncheckpoint = tfe.Checkpoint(model=model)\nsaver = tfe.CheckpointableSaver(checkpoint)\n\nfrom tensorflow.contrib.eager.python import checkpointable_utils\nprint(checkpointable_utils._serialize_object_graph(saver._root_checkpointable))\n\nPrints:\n({'model/cell2/kernel/.ATTRIBUTES/VARIABLE_VALUE': <tf.Variable 'basic_lstm_cell_1/kernel:0' shape=(11, 40) dtype=float32_ref>, 'model/cell2/bias/.ATTRIBUTES/VARIABLE_VALUE': <tf.Variable 'basic_lstm_cell_1/bias:0' shape=(40,) dtype=float32_ref>}, nodes {\n  children {\n    node_id: 1\n    local_name: \"model\"\n  }\n}\nnodes {\n  children {\n    node_id: 2\n    local_name: \"cell\"\n  }\n  children {\n    node_id: 3\n    local_name: \"cell2\"\n  }\n}\nnodes {\n}\nnodes {\n  children {\n    node_id: 4\n    local_name: \"kernel\"\n  }\n  children {\n    node_id: 5\n    local_name: \"bias\"\n  }\n}\nnodes {\n  attributes {\n    name: \"VARIABLE_VALUE\"\n    full_name: \"basic_lstm_cell_1/kernel\"\n    checkpoint_key: \"model/cell2/kernel/.ATTRIBUTES/VARIABLE_VALUE\"\n  }\n}\nnodes {\n  attributes {\n    name: \"VARIABLE_VALUE\"\n    full_name: \"basic_lstm_cell_1/bias\"\n    checkpoint_key: \"model/cell2/bias/.ATTRIBUTES/VARIABLE_VALUE\"\n  }\n}\n)\n\nExpected to contain bias and kernel for both cell and cell2 but only contains them for the cell without DropoutWrapper.", "body": "tf-nightly: 1.8.0.dev20180329 (latest Windows 10 build)\r\n\r\nSample Code:\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.eager as tfe\r\nfrom tensorflow.python.training import checkpointable\r\n\r\n\r\nclass MyModel(checkpointable.Checkpointable):\r\n\r\n  def __init__(self):\r\n    self.cell = tf.nn.rnn_cell.DropoutWrapper(\r\n        tf.nn.rnn_cell.BasicLSTMCell(10), 0.5)\r\n    self.cell2 = tf.nn.rnn_cell.BasicLSTMCell(10)\r\n\r\n\r\nmodel = MyModel()\r\nstate = tf.nn.rnn_cell.LSTMStateTuple(\r\n    c=tf.constant([[10] * 10] * 10, dtype=tf.float32),\r\n    h=tf.constant([[10] * 10] * 10, dtype=tf.float32))\r\nmodel.cell(tf.constant([[10]] * 10, dtype=tf.float32), state)\r\nmodel.cell2(tf.constant([[10]] * 10, dtype=tf.float32), state)\r\n\r\ncheckpoint_path = 'modeldir/test/'\r\ncheckpoint = tfe.Checkpoint(model=model)\r\nsaver = tfe.CheckpointableSaver(checkpoint)\r\n\r\nfrom tensorflow.contrib.eager.python import checkpointable_utils\r\nprint(checkpointable_utils._serialize_object_graph(saver._root_checkpointable))\r\n\r\n```\r\n\r\nPrints:\r\n```\r\n({'model/cell2/kernel/.ATTRIBUTES/VARIABLE_VALUE': <tf.Variable 'basic_lstm_cell_1/kernel:0' shape=(11, 40) dtype=float32_ref>, 'model/cell2/bias/.ATTRIBUTES/VARIABLE_VALUE': <tf.Variable 'basic_lstm_cell_1/bias:0' shape=(40,) dtype=float32_ref>}, nodes {\r\n  children {\r\n    node_id: 1\r\n    local_name: \"model\"\r\n  }\r\n}\r\nnodes {\r\n  children {\r\n    node_id: 2\r\n    local_name: \"cell\"\r\n  }\r\n  children {\r\n    node_id: 3\r\n    local_name: \"cell2\"\r\n  }\r\n}\r\nnodes {\r\n}\r\nnodes {\r\n  children {\r\n    node_id: 4\r\n    local_name: \"kernel\"\r\n  }\r\n  children {\r\n    node_id: 5\r\n    local_name: \"bias\"\r\n  }\r\n}\r\nnodes {\r\n  attributes {\r\n    name: \"VARIABLE_VALUE\"\r\n    full_name: \"basic_lstm_cell_1/kernel\"\r\n    checkpoint_key: \"model/cell2/kernel/.ATTRIBUTES/VARIABLE_VALUE\"\r\n  }\r\n}\r\nnodes {\r\n  attributes {\r\n    name: \"VARIABLE_VALUE\"\r\n    full_name: \"basic_lstm_cell_1/bias\"\r\n    checkpoint_key: \"model/cell2/bias/.ATTRIBUTES/VARIABLE_VALUE\"\r\n  }\r\n}\r\n)\r\n```\r\n\r\nExpected to contain `bias` and `kernel` for both `cell` and `cell2` but only contains them for the cell without `DropoutWrapper`."}