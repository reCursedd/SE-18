{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/389929692", "html_url": "https://github.com/tensorflow/tensorflow/issues/19208#issuecomment-389929692", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19208", "id": 389929692, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTkyOTY5Mg==", "user": {"login": "sleighsoft", "id": 9438971, "node_id": "MDQ6VXNlcjk0Mzg5NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9438971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleighsoft", "html_url": "https://github.com/sleighsoft", "followers_url": "https://api.github.com/users/sleighsoft/followers", "following_url": "https://api.github.com/users/sleighsoft/following{/other_user}", "gists_url": "https://api.github.com/users/sleighsoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleighsoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleighsoft/subscriptions", "organizations_url": "https://api.github.com/users/sleighsoft/orgs", "repos_url": "https://api.github.com/users/sleighsoft/repos", "events_url": "https://api.github.com/users/sleighsoft/events{/privacy}", "received_events_url": "https://api.github.com/users/sleighsoft/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-17T16:34:45Z", "updated_at": "2018-05-17T16:40:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Would this be a valid approach to support lists of variables for checkpointing?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyModel</span>(<span class=\"pl-e\">checkpointable</span>.<span class=\"pl-e\">Checkpointable</span>):\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    variables <span class=\"pl-k\">=</span> [tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>var<span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(i), []) <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>)]\n    <span class=\"pl-k\">for</span> var <span class=\"pl-k\">in</span> variables:\n      <span class=\"pl-c1\">setattr</span>(<span class=\"pl-c1\">self</span>, var.name, var)</pre></div>\n<p>To answer my own question, probably not due to scope names with <code>/</code>.</p>\n<p>Update: Interestingly this works <code>setattr</code> seems to circumvent the python naming conventions and your restoration code does not care about the <code>/</code> and <code>:</code>.</p>", "body_text": "Would this be a valid approach to support lists of variables for checkpointing?\nclass MyModel(checkpointable.Checkpointable):\n\n  def __init__(self):\n    variables = [tf.get_variable('var{}'.format(i), []) for i in range(10)]\n    for var in variables:\n      setattr(self, var.name, var)\nTo answer my own question, probably not due to scope names with /.\nUpdate: Interestingly this works setattr seems to circumvent the python naming conventions and your restoration code does not care about the / and :.", "body": "Would this be a valid approach to support lists of variables for checkpointing?\r\n```python\r\nclass MyModel(checkpointable.Checkpointable):\r\n\r\n  def __init__(self):\r\n    variables = [tf.get_variable('var{}'.format(i), []) for i in range(10)]\r\n    for var in variables:\r\n      setattr(self, var.name, var)\r\n```\r\n\r\nTo answer my own question, probably not due to scope names with `/`.\r\n\r\nUpdate: Interestingly this works `setattr` seems to circumvent the python naming conventions and your restoration code does not care about the `/` and `:`."}