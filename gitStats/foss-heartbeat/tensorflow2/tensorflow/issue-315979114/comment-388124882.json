{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/388124882", "html_url": "https://github.com/tensorflow/tensorflow/pull/18704#issuecomment-388124882", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18704", "id": 388124882, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODEyNDg4Mg==", "user": {"login": "sabbakumov", "id": 1623466, "node_id": "MDQ6VXNlcjE2MjM0NjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1623466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sabbakumov", "html_url": "https://github.com/sabbakumov", "followers_url": "https://api.github.com/users/sabbakumov/followers", "following_url": "https://api.github.com/users/sabbakumov/following{/other_user}", "gists_url": "https://api.github.com/users/sabbakumov/gists{/gist_id}", "starred_url": "https://api.github.com/users/sabbakumov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sabbakumov/subscriptions", "organizations_url": "https://api.github.com/users/sabbakumov/orgs", "repos_url": "https://api.github.com/users/sabbakumov/repos", "events_url": "https://api.github.com/users/sabbakumov/events{/privacy}", "received_events_url": "https://api.github.com/users/sabbakumov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-10T17:29:18Z", "updated_at": "2018-05-10T17:29:18Z", "author_association": "NONE", "body_html": "<p>The thing is that there's a lot of code doing just:</p>\n<pre><code>Bar&amp; Foo() {\n  static Bar bar;\n  return bar;\n}\n</code></pre>\n<p>which also has all the drawbacks you mentioned. But it also has dynamic initializers whereas NoDestructor doesn't.</p>\n<p>There are two major solutions on this:</p>\n<ol>\n<li>Use NoDestructor everywhere.</li>\n<li>Convert every static object allocation to static T* t = new T;</li>\n</ol>", "body_text": "The thing is that there's a lot of code doing just:\nBar& Foo() {\n  static Bar bar;\n  return bar;\n}\n\nwhich also has all the drawbacks you mentioned. But it also has dynamic initializers whereas NoDestructor doesn't.\nThere are two major solutions on this:\n\nUse NoDestructor everywhere.\nConvert every static object allocation to static T* t = new T;", "body": "The thing is that there's a lot of code doing just:\r\n```\r\nBar& Foo() {\r\n  static Bar bar;\r\n  return bar;\r\n}\r\n```\r\n\r\nwhich also has all the drawbacks you mentioned. But it also has dynamic initializers whereas NoDestructor doesn't.\r\n\r\nThere are two major solutions on this:\r\n1. Use NoDestructor everywhere.\r\n2. Convert every static object allocation to static T* t = new T;"}