{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/331411161", "html_url": "https://github.com/tensorflow/tensorflow/issues/13213#issuecomment-331411161", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13213", "id": 331411161, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTQxMTE2MQ==", "user": {"login": "utkrist", "id": 3055617, "node_id": "MDQ6VXNlcjMwNTU2MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3055617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/utkrist", "html_url": "https://github.com/utkrist", "followers_url": "https://api.github.com/users/utkrist/followers", "following_url": "https://api.github.com/users/utkrist/following{/other_user}", "gists_url": "https://api.github.com/users/utkrist/gists{/gist_id}", "starred_url": "https://api.github.com/users/utkrist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/utkrist/subscriptions", "organizations_url": "https://api.github.com/users/utkrist/orgs", "repos_url": "https://api.github.com/users/utkrist/repos", "events_url": "https://api.github.com/users/utkrist/events{/privacy}", "received_events_url": "https://api.github.com/users/utkrist/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-22T10:27:12Z", "updated_at": "2017-09-22T13:03:48Z", "author_association": "NONE", "body_html": "<p>(2) Yes I am using initializable  iterator to get local End-of-epoch signal for every worker. In my case the 'epoch' count is a python variable that is local to the worker. It does not interfere with the 'global_step' and the 'local_step' that  'SyncReplicasOptimizer' uses. When some worker is initializing its iterator, other workers need to wait for brief time, but the training runs as expected afterwards. All original assumptions of SyncReplicasOptimizer seems to hold true. The problem seems to arise in grpc.</p>\n<p>(1.) Are you suggesting to update the C++ library or python version of grpc. I updated python package, it does not solve it. I am guessing I should compile tensorflow (1.2) with bazel to use latest grpc.</p>\n<p>And, I will provide you with minimum reproducible code if (1.) does not fix it.</p>", "body_text": "(2) Yes I am using initializable  iterator to get local End-of-epoch signal for every worker. In my case the 'epoch' count is a python variable that is local to the worker. It does not interfere with the 'global_step' and the 'local_step' that  'SyncReplicasOptimizer' uses. When some worker is initializing its iterator, other workers need to wait for brief time, but the training runs as expected afterwards. All original assumptions of SyncReplicasOptimizer seems to hold true. The problem seems to arise in grpc.\n(1.) Are you suggesting to update the C++ library or python version of grpc. I updated python package, it does not solve it. I am guessing I should compile tensorflow (1.2) with bazel to use latest grpc.\nAnd, I will provide you with minimum reproducible code if (1.) does not fix it.", "body": "(2) Yes I am using initializable  iterator to get local End-of-epoch signal for every worker. In my case the 'epoch' count is a python variable that is local to the worker. It does not interfere with the 'global_step' and the 'local_step' that  'SyncReplicasOptimizer' uses. When some worker is initializing its iterator, other workers need to wait for brief time, but the training runs as expected afterwards. All original assumptions of SyncReplicasOptimizer seems to hold true. The problem seems to arise in grpc.\r\n\r\n(1.) Are you suggesting to update the C++ library or python version of grpc. I updated python package, it does not solve it. I am guessing I should compile tensorflow (1.2) with bazel to use latest grpc.  \r\n\r\nAnd, I will provide you with minimum reproducible code if (1.) does not fix it."}