{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/381260584", "html_url": "https://github.com/tensorflow/tensorflow/issues/18380#issuecomment-381260584", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18380", "id": 381260584, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTI2MDU4NA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-13T21:06:15Z", "updated_at": "2018-04-13T21:06:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6510203\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/reedwm\">@reedwm</a> I think that's correct, yes. Here's where the copy happens:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/0c1ea2db7fb137dd4cf6f334dda9eb9623935d9d/tensorflow/core/kernels/assign_op.h#L106-L121\">tensorflow/tensorflow/core/kernels/assign_op.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 106 to 121\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/0c1ea2db7fb137dd4cf6f334dda9eb9623935d9d\">0c1ea2d</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L106\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"106\"></td>\n          <td id=\"LC106\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> Create a new persistent tensor whose shape matches the right hand</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L107\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"107\"></td>\n          <td id=\"LC107\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> side, hand off to lhs and copy the rhs into it.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L108\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"108\"></td>\n          <td id=\"LC108\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   PersistentTensor copy; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L109\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"109\"></td>\n          <td id=\"LC109\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   Tensor* copyTensor = <span class=\"pl-c1\">nullptr</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L110\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"110\"></td>\n          <td id=\"LC110\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">OP_REQUIRES_OK</span>( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L111\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"111\"></td>\n          <td id=\"LC111\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       context, context-&gt;<span class=\"pl-c1\">allocate_persistent</span>(old_lhs.<span class=\"pl-c1\">dtype</span>(), rhs.<span class=\"pl-c1\">shape</span>(), </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L112\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"112\"></td>\n          <td id=\"LC112\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                                             &amp;copy, &amp;copyTensor, attr)); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L113\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"113\"></td>\n          <td id=\"LC113\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> We track memory of variables in variable ops instead of in this</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L114\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"114\"></td>\n          <td id=\"LC114\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> assign op.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L115\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"115\"></td>\n          <td id=\"LC115\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   context-&gt;<span class=\"pl-c1\">clear_recorded_memory</span>(); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L116\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"116\"></td>\n          <td id=\"LC116\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   context-&gt;<span class=\"pl-c1\">replace_ref_input</span>(<span class=\"pl-c1\">0</span>, *copyTensor, <span class=\"pl-c\"><span class=\"pl-c\">/*</span> lock_held <span class=\"pl-c\">*/</span></span> <span class=\"pl-c1\">true</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L117\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"117\"></td>\n          <td id=\"LC117\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (use_exclusive_lock_) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L118\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"118\"></td>\n          <td id=\"LC118\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">Copy</span>(context, copyTensor, rhs); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L119\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"119\"></td>\n          <td id=\"LC119\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L120\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"120\"></td>\n          <td id=\"LC120\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L121\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"121\"></td>\n          <td id=\"LC121\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>You might be able to avoid this using <code>tf.get_variable(..., use_resource=True)</code>, because a <code>ResourceVariable</code> will reuse the fed-in value (as long as it has no other users in the same step):</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/0c1ea2db7fb137dd4cf6f334dda9eb9623935d9d/tensorflow/core/kernels/resource_variable_ops.cc#L251-L261\">tensorflow/tensorflow/core/kernels/resource_variable_ops.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 251 to 261\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/0c1ea2db7fb137dd4cf6f334dda9eb9623935d9d\">0c1ea2d</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L251\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"251\"></td>\n          <td id=\"LC251\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> Copying is unnecessary if we are the last user of the value</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L252\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"252\"></td>\n          <td id=\"LC252\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> tensor, we can just adopt the input tensor's buffer instead.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L253\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"253\"></td>\n          <td id=\"LC253\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> std::unique_ptr&lt;Tensor&gt; input_alias = context-&gt;<span class=\"pl-c1\">forward_input</span>( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L254\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"254\"></td>\n          <td id=\"LC254\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">1</span>, OpKernelContext::Params::<span class=\"pl-c1\">kNoReservation</span> <span class=\"pl-c\"><span class=\"pl-c\">/*</span>output_index<span class=\"pl-c\">*/</span></span>, dtype_, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L255\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"255\"></td>\n          <td id=\"LC255\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     value.<span class=\"pl-c1\">shape</span>(), DEVICE_MEMORY, attr); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L256\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"256\"></td>\n          <td id=\"LC256\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> mutex_lock <span class=\"pl-smi\">ml</span>(*variable-&gt;<span class=\"pl-c1\">mu</span>()); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L257\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"257\"></td>\n          <td id=\"LC257\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> variable-&gt;<span class=\"pl-smi\">is_initialized</span> = <span class=\"pl-c1\">true</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L258\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"258\"></td>\n          <td id=\"LC258\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> (input_alias) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L259\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"259\"></td>\n          <td id=\"LC259\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   *variable-&gt;<span class=\"pl-c1\">tensor</span>() = *input_alias; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L260\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"260\"></td>\n          <td id=\"LC260\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L261\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"261\"></td>\n          <td id=\"LC261\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "@reedwm I think that's correct, yes. Here's where the copy happens:\n\n  \n    \n      tensorflow/tensorflow/core/kernels/assign_op.h\n    \n    \n        Lines 106 to 121\n      in\n      0c1ea2d\n    \n    \n    \n    \n\n        \n          \n             // Create a new persistent tensor whose shape matches the right hand \n        \n\n        \n          \n             // side, hand off to lhs and copy the rhs into it. \n        \n\n        \n          \n             PersistentTensor copy; \n        \n\n        \n          \n             Tensor* copyTensor = nullptr; \n        \n\n        \n          \n             OP_REQUIRES_OK( \n        \n\n        \n          \n                 context, context->allocate_persistent(old_lhs.dtype(), rhs.shape(), \n        \n\n        \n          \n                                                       &copy, &copyTensor, attr)); \n        \n\n        \n          \n             // We track memory of variables in variable ops instead of in this \n        \n\n        \n          \n             // assign op. \n        \n\n        \n          \n             context->clear_recorded_memory(); \n        \n\n        \n          \n             context->replace_ref_input(0, *copyTensor, /* lock_held */ true); \n        \n\n        \n          \n             if (use_exclusive_lock_) { \n        \n\n        \n          \n               Copy(context, copyTensor, rhs); \n        \n\n        \n          \n               return; \n        \n\n        \n          \n             } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nYou might be able to avoid this using tf.get_variable(..., use_resource=True), because a ResourceVariable will reuse the fed-in value (as long as it has no other users in the same step):\n\n  \n    \n      tensorflow/tensorflow/core/kernels/resource_variable_ops.cc\n    \n    \n        Lines 251 to 261\n      in\n      0c1ea2d\n    \n    \n    \n    \n\n        \n          \n           // Copying is unnecessary if we are the last user of the value \n        \n\n        \n          \n           // tensor, we can just adopt the input tensor's buffer instead. \n        \n\n        \n          \n           std::unique_ptr<Tensor> input_alias = context->forward_input( \n        \n\n        \n          \n               1, OpKernelContext::Params::kNoReservation /*output_index*/, dtype_, \n        \n\n        \n          \n               value.shape(), DEVICE_MEMORY, attr); \n        \n\n        \n          \n           mutex_lock ml(*variable->mu()); \n        \n\n        \n          \n           variable->is_initialized = true; \n        \n\n        \n          \n           if (input_alias) { \n        \n\n        \n          \n             *variable->tensor() = *input_alias; \n        \n\n        \n          \n             return; \n        \n\n        \n          \n           }", "body": "@reedwm I think that's correct, yes. Here's where the copy happens:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/0c1ea2db7fb137dd4cf6f334dda9eb9623935d9d/tensorflow/core/kernels/assign_op.h#L106-L121\r\n\r\nYou might be able to avoid this using `tf.get_variable(..., use_resource=True)`, because a `ResourceVariable` will reuse the fed-in value (as long as it has no other users in the same step):\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/0c1ea2db7fb137dd4cf6f334dda9eb9623935d9d/tensorflow/core/kernels/resource_variable_ops.cc#L251-L261"}