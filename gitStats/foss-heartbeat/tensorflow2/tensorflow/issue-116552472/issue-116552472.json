{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/174", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/174/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/174/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/174", "id": 116552472, "node_id": "MDU6SXNzdWUxMTY1NTI0NzI=", "number": 174, "title": "run from script only instead of compiling with bazel?", "user": {"login": "evanthebouncy", "id": 1041553, "node_id": "MDQ6VXNlcjEwNDE1NTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1041553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evanthebouncy", "html_url": "https://github.com/evanthebouncy", "followers_url": "https://api.github.com/users/evanthebouncy/followers", "following_url": "https://api.github.com/users/evanthebouncy/following{/other_user}", "gists_url": "https://api.github.com/users/evanthebouncy/gists{/gist_id}", "starred_url": "https://api.github.com/users/evanthebouncy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evanthebouncy/subscriptions", "organizations_url": "https://api.github.com/users/evanthebouncy/orgs", "repos_url": "https://api.github.com/users/evanthebouncy/repos", "events_url": "https://api.github.com/users/evanthebouncy/events{/privacy}", "received_events_url": "https://api.github.com/users/evanthebouncy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2015-11-12T13:52:53Z", "updated_at": "2015-11-14T00:45:56Z", "closed_at": "2015-11-14T00:45:56Z", "author_association": "NONE", "body_html": "<p>I posted in the google discussion group but I think the turn-over rate is faster here. Hopefully I get a faster response.</p>\n<p>In the RNN example tutorial, we're compiling the python script with bazel before executing it, instead of executing the script directory as in the simple MNIST example. Is it possible to do the RNN example purely in python script instead of using bazel? I used a binary installation instead of cloning the repo, so many of the file structures are different. I tried to hack it so I can run it from script instead of compiling with bazel, but I'm getting this error:</p>\n<pre><code>$ python ptb_word_lm.py --data_path=simple-examples/data --model small\n   File \"ptb_word_lm.py\", line 128, in __init__\n   self._cost = cost = tf.reduce_sum(loss) / batch_size\n   TypeError: unsupported operand type(s) for /: 'Tensor' and 'int'\n</code></pre>\n<p>Or is learning bazel the only way (which I don't mind but would like to avoid)?</p>", "body_text": "I posted in the google discussion group but I think the turn-over rate is faster here. Hopefully I get a faster response.\nIn the RNN example tutorial, we're compiling the python script with bazel before executing it, instead of executing the script directory as in the simple MNIST example. Is it possible to do the RNN example purely in python script instead of using bazel? I used a binary installation instead of cloning the repo, so many of the file structures are different. I tried to hack it so I can run it from script instead of compiling with bazel, but I'm getting this error:\n$ python ptb_word_lm.py --data_path=simple-examples/data --model small\n   File \"ptb_word_lm.py\", line 128, in __init__\n   self._cost = cost = tf.reduce_sum(loss) / batch_size\n   TypeError: unsupported operand type(s) for /: 'Tensor' and 'int'\n\nOr is learning bazel the only way (which I don't mind but would like to avoid)?", "body": "I posted in the google discussion group but I think the turn-over rate is faster here. Hopefully I get a faster response.\n\nIn the RNN example tutorial, we're compiling the python script with bazel before executing it, instead of executing the script directory as in the simple MNIST example. Is it possible to do the RNN example purely in python script instead of using bazel? I used a binary installation instead of cloning the repo, so many of the file structures are different. I tried to hack it so I can run it from script instead of compiling with bazel, but I'm getting this error:\n\n```\n$ python ptb_word_lm.py --data_path=simple-examples/data --model small\n   File \"ptb_word_lm.py\", line 128, in __init__\n   self._cost = cost = tf.reduce_sum(loss) / batch_size\n   TypeError: unsupported operand type(s) for /: 'Tensor' and 'int'\n```\n\nOr is learning bazel the only way (which I don't mind but would like to avoid)? \n"}