{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1396", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1396/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1396/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1396/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1396", "id": 138741613, "node_id": "MDU6SXNzdWUxMzg3NDE2MTM=", "number": 1396, "title": "Throw out exception to python when errors happen in c++ code", "user": {"login": "shawnLeeZX", "id": 2428233, "node_id": "MDQ6VXNlcjI0MjgyMzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2428233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shawnLeeZX", "html_url": "https://github.com/shawnLeeZX", "followers_url": "https://api.github.com/users/shawnLeeZX/followers", "following_url": "https://api.github.com/users/shawnLeeZX/following{/other_user}", "gists_url": "https://api.github.com/users/shawnLeeZX/gists{/gist_id}", "starred_url": "https://api.github.com/users/shawnLeeZX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shawnLeeZX/subscriptions", "organizations_url": "https://api.github.com/users/shawnLeeZX/orgs", "repos_url": "https://api.github.com/users/shawnLeeZX/repos", "events_url": "https://api.github.com/users/shawnLeeZX/events{/privacy}", "received_events_url": "https://api.github.com/users/shawnLeeZX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "josh11b", "id": 15258583, "node_id": "MDQ6VXNlcjE1MjU4NTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/15258583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh11b", "html_url": "https://github.com/josh11b", "followers_url": "https://api.github.com/users/josh11b/followers", "following_url": "https://api.github.com/users/josh11b/following{/other_user}", "gists_url": "https://api.github.com/users/josh11b/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh11b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh11b/subscriptions", "organizations_url": "https://api.github.com/users/josh11b/orgs", "repos_url": "https://api.github.com/users/josh11b/repos", "events_url": "https://api.github.com/users/josh11b/events{/privacy}", "received_events_url": "https://api.github.com/users/josh11b/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "josh11b", "id": 15258583, "node_id": "MDQ6VXNlcjE1MjU4NTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/15258583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh11b", "html_url": "https://github.com/josh11b", "followers_url": "https://api.github.com/users/josh11b/followers", "following_url": "https://api.github.com/users/josh11b/following{/other_user}", "gists_url": "https://api.github.com/users/josh11b/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh11b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh11b/subscriptions", "organizations_url": "https://api.github.com/users/josh11b/orgs", "repos_url": "https://api.github.com/users/josh11b/repos", "events_url": "https://api.github.com/users/josh11b/events{/privacy}", "received_events_url": "https://api.github.com/users/josh11b/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2016-03-06T01:19:47Z", "updated_at": "2017-02-09T22:37:30Z", "closed_at": "2016-06-08T22:33:02Z", "author_association": "NONE", "body_html": "<p>Required information is after the description.</p>\n<p>Hi tensorflow team,</p>\n<p>I have enjoyed using tensorflow much. Thanks for the commitment to make this happen.</p>\n<p>After writing many code based on it, I found it is very inconvenient that when the C++ code meets an error, it just breaks instead of passing the error to the python front end, so it is impossible to deal with the error gracefully.</p>\n<p>For example, when training a network with a large learning rate with ReLU without BN, the activations could easily go out of range. As this is unavoidable since learning rate has to be tuned. It would be great to catch the out of range error in python, so things could be logged and shut down properly, instead of just break.</p>\n<p>A log could be</p>\n<pre><code>W tensorflow/core/common_runtime/executor.cc:1102] 0x33ea350 Compute status: Out of range: Nan in summary histogram for: maxout-relu-cifar10/conv2/HistogramSummary_2\n</code></pre>\n<p>Hope this suggestion could be taken into consideration.</p>\n<h3>Environment info</h3>\n<p>Operating System:</p>\n<pre><code>3.13.0-74-generic #118-Ubuntu SMP x86_64 x86_64 x86_64 GNU/Linux\n</code></pre>\n<p>If installed from binary pip package, provide:</p>\n<ol>\n<li>Which pip package you installed.</li>\n</ol>\n<pre><code>sudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.7.1-cp27-none-linux_x86_64.whl\n</code></pre>\n<ol>\n<li>The output from python -c \"import tensorflow; print(tensorflow.<strong>version</strong>)\".</li>\n</ol>\n<pre><code>I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.7.1\n</code></pre>", "body_text": "Required information is after the description.\nHi tensorflow team,\nI have enjoyed using tensorflow much. Thanks for the commitment to make this happen.\nAfter writing many code based on it, I found it is very inconvenient that when the C++ code meets an error, it just breaks instead of passing the error to the python front end, so it is impossible to deal with the error gracefully.\nFor example, when training a network with a large learning rate with ReLU without BN, the activations could easily go out of range. As this is unavoidable since learning rate has to be tuned. It would be great to catch the out of range error in python, so things could be logged and shut down properly, instead of just break.\nA log could be\nW tensorflow/core/common_runtime/executor.cc:1102] 0x33ea350 Compute status: Out of range: Nan in summary histogram for: maxout-relu-cifar10/conv2/HistogramSummary_2\n\nHope this suggestion could be taken into consideration.\nEnvironment info\nOperating System:\n3.13.0-74-generic #118-Ubuntu SMP x86_64 x86_64 x86_64 GNU/Linux\n\nIf installed from binary pip package, provide:\n\nWhich pip package you installed.\n\nsudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.7.1-cp27-none-linux_x86_64.whl\n\n\nThe output from python -c \"import tensorflow; print(tensorflow.version)\".\n\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.7.1", "body": "Required information is after the description.\n\nHi tensorflow team,\n\nI have enjoyed using tensorflow much. Thanks for the commitment to make this happen.\n\nAfter writing many code based on it, I found it is very inconvenient that when the C++ code meets an error, it just breaks instead of passing the error to the python front end, so it is impossible to deal with the error gracefully.\n\nFor example, when training a network with a large learning rate with ReLU without BN, the activations could easily go out of range. As this is unavoidable since learning rate has to be tuned. It would be great to catch the out of range error in python, so things could be logged and shut down properly, instead of just break.\n\nA log could be\n\n```\nW tensorflow/core/common_runtime/executor.cc:1102] 0x33ea350 Compute status: Out of range: Nan in summary histogram for: maxout-relu-cifar10/conv2/HistogramSummary_2\n```\n\nHope this suggestion could be taken into consideration.\n### Environment info\n\nOperating System:\n\n```\n3.13.0-74-generic #118-Ubuntu SMP x86_64 x86_64 x86_64 GNU/Linux\n```\n\nIf installed from binary pip package, provide:\n1. Which pip package you installed.\n\n```\nsudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.7.1-cp27-none-linux_x86_64.whl\n```\n1. The output from python -c \"import tensorflow; print(tensorflow.**version**)\".\n\n```\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.7.1\n```\n"}