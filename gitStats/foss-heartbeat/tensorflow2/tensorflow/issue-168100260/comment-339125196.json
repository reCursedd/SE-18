{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/339125196", "html_url": "https://github.com/tensorflow/tensorflow/issues/3549#issuecomment-339125196", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3549", "id": 339125196, "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTEyNTE5Ng==", "user": {"login": "cwhipkey", "id": 17578177, "node_id": "MDQ6VXNlcjE3NTc4MTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/17578177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwhipkey", "html_url": "https://github.com/cwhipkey", "followers_url": "https://api.github.com/users/cwhipkey/followers", "following_url": "https://api.github.com/users/cwhipkey/following{/other_user}", "gists_url": "https://api.github.com/users/cwhipkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwhipkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwhipkey/subscriptions", "organizations_url": "https://api.github.com/users/cwhipkey/orgs", "repos_url": "https://api.github.com/users/cwhipkey/repos", "events_url": "https://api.github.com/users/cwhipkey/events{/privacy}", "received_events_url": "https://api.github.com/users/cwhipkey/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-24T20:44:21Z", "updated_at": "2017-10-24T20:44:21Z", "author_association": "MEMBER", "body_html": "<p>There are at least couple reasons this could happen:</p>\n<ol>\n<li>\n<p>the kernel for round isn't being compiled on android.  you could add a compilation error in tensorflow/core/kernels/cwise_op_round.cc and then run the android build again, to see if it actually compiles that file.</p>\n</li>\n<li>\n<p>the kernel is being compiled, but for some reason the ops_to_register.h is causing it to not use the Round op.  ops_to_register.h works by comparing the string name of the class to the string in the ops_to_register.h.  It's possible the compiler for the device is using a different name than the compiler for the host (used to make ops_to_register.h).  It can be tricky to get the names out of the device compilation -- one way could be to change the cwise_op_round.cc kernel file and</p>\n</li>\n</ol>\n<p>Add:<br>\n#define CLAZ_NAME(x) #x<br>\nstatic_assert(false, CLAZ_NAME(UnaryOp));</p>\n<p>then build and look for the class name printed by the assertion failure.</p>", "body_text": "There are at least couple reasons this could happen:\n\n\nthe kernel for round isn't being compiled on android.  you could add a compilation error in tensorflow/core/kernels/cwise_op_round.cc and then run the android build again, to see if it actually compiles that file.\n\n\nthe kernel is being compiled, but for some reason the ops_to_register.h is causing it to not use the Round op.  ops_to_register.h works by comparing the string name of the class to the string in the ops_to_register.h.  It's possible the compiler for the device is using a different name than the compiler for the host (used to make ops_to_register.h).  It can be tricky to get the names out of the device compilation -- one way could be to change the cwise_op_round.cc kernel file and\n\n\nAdd:\n#define CLAZ_NAME(x) #x\nstatic_assert(false, CLAZ_NAME(UnaryOp));\nthen build and look for the class name printed by the assertion failure.", "body": "There are at least couple reasons this could happen:\r\n1. the kernel for round isn't being compiled on android.  you could add a compilation error in tensorflow/core/kernels/cwise_op_round.cc and then run the android build again, to see if it actually compiles that file.\r\n\r\n2. the kernel is being compiled, but for some reason the ops_to_register.h is causing it to not use the Round op.  ops_to_register.h works by comparing the string name of the class to the string in the ops_to_register.h.  It's possible the compiler for the device is using a different name than the compiler for the host (used to make ops_to_register.h).  It can be tricky to get the names out of the device compilation -- one way could be to change the cwise_op_round.cc kernel file and\r\n\r\nAdd:\r\n#define CLAZ_NAME(x) #x\r\nstatic_assert(false, CLAZ_NAME(UnaryOp<float>)); \r\n\r\nthen build and look for the class name printed by the assertion failure."}