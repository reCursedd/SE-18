{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19156", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19156/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19156/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19156/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19156", "id": 321272089, "node_id": "MDU6SXNzdWUzMjEyNzIwODk=", "number": 19156, "title": "Tensorflow silently renaming variables on implicitly defined scope", "user": {"login": "mgbckr", "id": 1241516, "node_id": "MDQ6VXNlcjEyNDE1MTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1241516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgbckr", "html_url": "https://github.com/mgbckr", "followers_url": "https://api.github.com/users/mgbckr/followers", "following_url": "https://api.github.com/users/mgbckr/following{/other_user}", "gists_url": "https://api.github.com/users/mgbckr/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgbckr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgbckr/subscriptions", "organizations_url": "https://api.github.com/users/mgbckr/orgs", "repos_url": "https://api.github.com/users/mgbckr/repos", "events_url": "https://api.github.com/users/mgbckr/events{/privacy}", "received_events_url": "https://api.github.com/users/mgbckr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-05-08T17:13:01Z", "updated_at": "2018-06-11T17:13:42Z", "closed_at": "2018-06-11T17:13:42Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:  Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.8.0-0-g93bc2e2072 1.8.0</li>\n<li><strong>Python version</strong>: 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>:  N/A</li>\n<li><strong>GPU model and memory</strong>:  N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ntf.logging.set_verbosity(tf.logging.<span class=\"pl-c1\">DEBUG</span>)\n\nn_input <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>\n<span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, (<span class=\"pl-c1\">None</span>, n_input), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>input<span class=\"pl-pds\">'</span></span>)\noutput <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, (<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>output<span class=\"pl-pds\">'</span></span>)\ncheck <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, (<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>check<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scope1<span class=\"pl-pds\">\"</span></span>,\n                       <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.random_normal_initializer(<span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)):\n    w <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>w<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(n_input, <span class=\"pl-c1\">1</span>))\n    y_predicted <span class=\"pl-k\">=</span> tf.matmul(<span class=\"pl-c1\">input</span>, w)\n\ncost <span class=\"pl-k\">=</span> tf.losses.mean_squared_error(check, y_predicted)\ncost <span class=\"pl-k\">=</span> tf.reduce_mean(cost, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mean_squared_error<span class=\"pl-pds\">\"</span></span>)\n\ntf.get_default_graph().get_tensor_by_name(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mean_squared_error:0<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h3>Describe the problem</h3>\n<p>When using losses from <code>tf.losses</code> various scopes a defined implicitly. For example for <code>tf.losses.mean_squared_error</code> the scope <code>mean_squared_error</code> is defined. If I now try to define a variable named <code>mean_squared_error</code>, e.g., for later showing results in Tensorboard, then I get a <code>KeyError</code>:</p>\n<pre><code>KeyError: \"The name 'mean_squared_error:0' refers to a Tensor which does not exist. The operation, 'mean_squared_error', does not exist in the graph.\"\n</code></pre>\n<p>This is due to Tensorflow silently renaming my explicitly defined variable because of the implicitly defined scope (by <code>tf.losses.mean_squared_error</code>). This is rather counter intuitive and potentially can easily result in unexpected behavior. I suggest throwing an error or at least printing a warning in such a case.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.8.0-0-g93bc2e2072 1.8.0\nPython version: 3.5.2\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version:  N/A\nGPU model and memory:  N/A\nExact command to reproduce:\n\nimport tensorflow as tf\n\ntf.logging.set_verbosity(tf.logging.DEBUG)\n\nn_input = 5\ninput = tf.placeholder(tf.float32, (None, n_input), 'input')\noutput = tf.placeholder(tf.float32, (None, 1), 'output')\ncheck = tf.placeholder(tf.float32, (None, 1), 'check')\n\nwith tf.variable_scope(\"scope1\",\n                       initializer=tf.random_normal_initializer(mean=0, stddev=1)):\n    w = tf.get_variable(name=\"w\", shape=(n_input, 1))\n    y_predicted = tf.matmul(input, w)\n\ncost = tf.losses.mean_squared_error(check, y_predicted)\ncost = tf.reduce_mean(cost, name=\"mean_squared_error\")\n\ntf.get_default_graph().get_tensor_by_name(\"mean_squared_error:0\")\nDescribe the problem\nWhen using losses from tf.losses various scopes a defined implicitly. For example for tf.losses.mean_squared_error the scope mean_squared_error is defined. If I now try to define a variable named mean_squared_error, e.g., for later showing results in Tensorboard, then I get a KeyError:\nKeyError: \"The name 'mean_squared_error:0' refers to a Tensor which does not exist. The operation, 'mean_squared_error', does not exist in the graph.\"\n\nThis is due to Tensorflow silently renaming my explicitly defined variable because of the implicitly defined scope (by tf.losses.mean_squared_error). This is rather counter intuitive and potentially can easily result in unexpected behavior. I suggest throwing an error or at least printing a warning in such a case.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:  Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.8.0-0-g93bc2e2072 1.8.0\r\n- **Python version**: 3.5.2\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**:  N/A\r\n- **GPU model and memory**:  N/A\r\n- **Exact command to reproduce**:\r\n```python\r\nimport tensorflow as tf\r\n\r\ntf.logging.set_verbosity(tf.logging.DEBUG)\r\n\r\nn_input = 5\r\ninput = tf.placeholder(tf.float32, (None, n_input), 'input')\r\noutput = tf.placeholder(tf.float32, (None, 1), 'output')\r\ncheck = tf.placeholder(tf.float32, (None, 1), 'check')\r\n\r\nwith tf.variable_scope(\"scope1\",\r\n                       initializer=tf.random_normal_initializer(mean=0, stddev=1)):\r\n    w = tf.get_variable(name=\"w\", shape=(n_input, 1))\r\n    y_predicted = tf.matmul(input, w)\r\n\r\ncost = tf.losses.mean_squared_error(check, y_predicted)\r\ncost = tf.reduce_mean(cost, name=\"mean_squared_error\")\r\n\r\ntf.get_default_graph().get_tensor_by_name(\"mean_squared_error:0\")\r\n```\r\n\r\n### Describe the problem\r\nWhen using losses from `tf.losses` various scopes a defined implicitly. For example for `tf.losses.mean_squared_error` the scope `mean_squared_error` is defined. If I now try to define a variable named `mean_squared_error`, e.g., for later showing results in Tensorboard, then I get a `KeyError`:\r\n```\r\nKeyError: \"The name 'mean_squared_error:0' refers to a Tensor which does not exist. The operation, 'mean_squared_error', does not exist in the graph.\"\r\n```\r\nThis is due to Tensorflow silently renaming my explicitly defined variable because of the implicitly defined scope (by `tf.losses.mean_squared_error`). This is rather counter intuitive and potentially can easily result in unexpected behavior. I suggest throwing an error or at least printing a warning in such a case. "}