{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/333733914", "html_url": "https://github.com/tensorflow/tensorflow/issues/13439#issuecomment-333733914", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13439", "id": 333733914, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzczMzkxNA==", "user": {"login": "OscarDPan", "id": 10855426, "node_id": "MDQ6VXNlcjEwODU1NDI2", "avatar_url": "https://avatars0.githubusercontent.com/u/10855426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OscarDPan", "html_url": "https://github.com/OscarDPan", "followers_url": "https://api.github.com/users/OscarDPan/followers", "following_url": "https://api.github.com/users/OscarDPan/following{/other_user}", "gists_url": "https://api.github.com/users/OscarDPan/gists{/gist_id}", "starred_url": "https://api.github.com/users/OscarDPan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OscarDPan/subscriptions", "organizations_url": "https://api.github.com/users/OscarDPan/orgs", "repos_url": "https://api.github.com/users/OscarDPan/repos", "events_url": "https://api.github.com/users/OscarDPan/events{/privacy}", "received_events_url": "https://api.github.com/users/OscarDPan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-03T04:13:19Z", "updated_at": "2017-10-03T04:15:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1381301\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppwwyyxx\">@ppwwyyxx</a><br>\nThank you for your response.<br>\nThe weird thing is:</p>\n<ol>\n<li>If using batch size 1, I will have identical results even after 1000 batches.</li>\n<li>I did try using dense tensor to see if I can get rid of the differences, but I got the same outcome as with sparse tensor.</li>\n</ol>\n<p>Using tf.float64 for both w and b  gave me a slightly better result than Keras, but only on the first batch, then things spiraled out after 1st batch and never converged while Keras did.</p>\n<p>I know I can just make TF's learning rate smaller and get a convergence, but<br>\nI really want to know what's making Keras so good (or what's making the my TF version so bad) as they are both essentially using TF.</p>", "body_text": "@ppwwyyxx\nThank you for your response.\nThe weird thing is:\n\nIf using batch size 1, I will have identical results even after 1000 batches.\nI did try using dense tensor to see if I can get rid of the differences, but I got the same outcome as with sparse tensor.\n\nUsing tf.float64 for both w and b  gave me a slightly better result than Keras, but only on the first batch, then things spiraled out after 1st batch and never converged while Keras did.\nI know I can just make TF's learning rate smaller and get a convergence, but\nI really want to know what's making Keras so good (or what's making the my TF version so bad) as they are both essentially using TF.", "body": "@ppwwyyxx \r\nThank you for your response.\r\nThe weird thing is:\r\n1. If using batch size 1, I will have identical results even after 1000 batches.\r\n2. I did try using dense tensor to see if I can get rid of the differences, but I got the same outcome as with sparse tensor.\r\n\r\nUsing tf.float64 for both w and b  gave me a slightly better result than Keras, but only on the first batch, then things spiraled out after 1st batch and never converged while Keras did.\r\n\r\nI know I can just make TF's learning rate smaller and get a convergence, but\r\nI really want to know what's making Keras so good (or what's making the my TF version so bad) as they are both essentially using TF."}