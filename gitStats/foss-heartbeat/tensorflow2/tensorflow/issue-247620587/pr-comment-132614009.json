{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132614009", "pull_request_review_id": 55714030, "id": 132614009, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjYxNDAwOQ==", "diff_hunk": "@@ -0,0 +1,236 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <memory>\n+#include <vector>\n+#include <string>\n+\n+#include \"tensorflow/core/common_runtime/device.h\"\n+#include \"tensorflow/core/common_runtime/device_factory.h\"\n+#include \"tensorflow/core/framework/allocator.h\"\n+#include \"tensorflow/core/framework/fake_input.h\"\n+#include \"tensorflow/core/framework/node_def_builder.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/framework/types.pb.h\"\n+#include \"tensorflow/core/kernels/ops_testutil.h\"\n+#include \"tensorflow/core/kernels/ops_util.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+\n+namespace tensorflow {\n+namespace {\n+\n+class SerializeTensorOpTest : public OpsTestBase {\n+ protected:\n+  template <typename T>\n+  void MakeOp() {\n+    TF_ASSERT_OK(\n+        NodeDefBuilder(\"myop\", \"SerializeTensor\")\n+            .Input(FakeInput(DataTypeToEnum<T>::value))\n+            .Finalize(node_def()));\n+    TF_ASSERT_OK(InitOp());\n+  }\n+  template <typename T>\n+  void BuildParseNodeDef(NodeDef* parse) {\n+    TF_ASSERT_OK(NodeDefBuilder(\"parse\", \"ParseTensor\")\n+                     .Input(FakeInput(DT_STRING))\n+                     .Attr(\"out_type\", DataTypeToEnum<T>::value)\n+                     .Finalize(parse));\n+  }\n+  Tensor ParseSerialized(const NodeDef& parse_node_def, Tensor* serialized) {\n+    std::unique_ptr<Device> device(\n+        DeviceFactory::NewDevice(\"CPU\", {}, \"/job:a/replica:0/task:0\"));\n+    gtl::InlinedVector<TensorValue, 4> inputs;\n+    inputs.push_back({nullptr, serialized});\n+    Status status;\n+    std::unique_ptr<OpKernel> op(\n+        CreateOpKernel(DEVICE_CPU, device.get(),\n+                       cpu_allocator(), parse_node_def,\n+                       TF_GRAPH_DEF_VERSION, &status));\n+    TF_EXPECT_OK(status);\n+    OpKernelContext::Params params;\n+    params.device = device.get();\n+    params.inputs = &inputs;\n+    params.frame_iter = FrameAndIter(0, 0);\n+    params.op_kernel = op.get();\n+    std::vector<AllocatorAttributes> attrs;\n+    test::SetOutputAttrs(&params, &attrs);\n+    OpKernelContext ctx(&params);\n+    op->Compute(&ctx);\n+    TF_EXPECT_OK(status);\n+    Tensor* output = ctx.mutable_output(0);\n+    return *output;\n+  }\n+};\n+\n+TEST_F(SerializeTensorOpTest, SerializeTensorOpTest_half) {\n+  MakeOp<Eigen::half>();", "path": "tensorflow/core/kernels/parse_tensor_test.cc", "position": null, "original_position": 80, "commit_id": "cafe147ccd170b8e891870559d1b712f565a3c3d", "original_commit_id": "7276c0ce101012e1e88255e96299aa2d2a2a4bb0", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "Thanks for doing this!  I like that you can see the names of the tests, which to me was the most important thing to have.\r\n\r\nNow that I see the repetition more clearly, I think it might be fine to do the following to reduce it a little bit:\r\n\r\nAdd a function:\r\n\r\n```\r\ntemplate <typename T>\r\nvoid ConstructOp(std::function<T(int)> functor) {\r\n  MakeOp<T>();\r\n  AddInput<T>(TensorShape({10}), functor);\r\n}\r\n```\r\nand another function called ParseSerializedOutput<T>() which does:\r\n\r\nNodeDef parse;\r\ncode in BuildParseNodeDef\r\nreturn ParseSerialized(parse, GetOutput(0));\r\n\r\nSo that each test looks like:\r\n\r\n```\r\nConstructOp<float>([](int x) -> float { ... };);\r\nTF_ASSERT_OK(RunOpKernel());\r\nTensor parse_output = ParseSerializedOutput<float>();\r\ntest::ExpectTensorEqual<float>(parse_putput, GetInput(0));\r\n```\r\n\r\nThere's still some duplication, but I think it makes the code a bit more readable; the first statement indicates that you are building the op, the second says you are running it.  The third is all the code required to produce the Tensor that is the inverse of the output, and the last statement shows that you expect the expression to be reversible.\r\n\r\nLet me know what you think of this!", "created_at": "2017-08-11T04:00:46Z", "updated_at": "2017-09-05T06:33:12Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11992#discussion_r132614009", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11992", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132614009"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11992#discussion_r132614009"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11992"}}, "body_html": "<p>Thanks for doing this!  I like that you can see the names of the tests, which to me was the most important thing to have.</p>\n<p>Now that I see the repetition more clearly, I think it might be fine to do the following to reduce it a little bit:</p>\n<p>Add a function:</p>\n<pre><code>template &lt;typename T&gt;\nvoid ConstructOp(std::function&lt;T(int)&gt; functor) {\n  MakeOp&lt;T&gt;();\n  AddInput&lt;T&gt;(TensorShape({10}), functor);\n}\n</code></pre>\n<p>and another function called ParseSerializedOutput() which does:</p>\n<p>NodeDef parse;<br>\ncode in BuildParseNodeDef<br>\nreturn ParseSerialized(parse, GetOutput(0));</p>\n<p>So that each test looks like:</p>\n<pre><code>ConstructOp&lt;float&gt;([](int x) -&gt; float { ... };);\nTF_ASSERT_OK(RunOpKernel());\nTensor parse_output = ParseSerializedOutput&lt;float&gt;();\ntest::ExpectTensorEqual&lt;float&gt;(parse_putput, GetInput(0));\n</code></pre>\n<p>There's still some duplication, but I think it makes the code a bit more readable; the first statement indicates that you are building the op, the second says you are running it.  The third is all the code required to produce the Tensor that is the inverse of the output, and the last statement shows that you expect the expression to be reversible.</p>\n<p>Let me know what you think of this!</p>", "body_text": "Thanks for doing this!  I like that you can see the names of the tests, which to me was the most important thing to have.\nNow that I see the repetition more clearly, I think it might be fine to do the following to reduce it a little bit:\nAdd a function:\ntemplate <typename T>\nvoid ConstructOp(std::function<T(int)> functor) {\n  MakeOp<T>();\n  AddInput<T>(TensorShape({10}), functor);\n}\n\nand another function called ParseSerializedOutput() which does:\nNodeDef parse;\ncode in BuildParseNodeDef\nreturn ParseSerialized(parse, GetOutput(0));\nSo that each test looks like:\nConstructOp<float>([](int x) -> float { ... };);\nTF_ASSERT_OK(RunOpKernel());\nTensor parse_output = ParseSerializedOutput<float>();\ntest::ExpectTensorEqual<float>(parse_putput, GetInput(0));\n\nThere's still some duplication, but I think it makes the code a bit more readable; the first statement indicates that you are building the op, the second says you are running it.  The third is all the code required to produce the Tensor that is the inverse of the output, and the last statement shows that you expect the expression to be reversible.\nLet me know what you think of this!"}