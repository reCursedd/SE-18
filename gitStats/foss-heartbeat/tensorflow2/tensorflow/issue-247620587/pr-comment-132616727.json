{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132616727", "pull_request_review_id": 55717038, "id": 132616727, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjYxNjcyNw==", "diff_hunk": "@@ -0,0 +1,236 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <memory>\n+#include <vector>\n+#include <string>\n+\n+#include \"tensorflow/core/common_runtime/device.h\"\n+#include \"tensorflow/core/common_runtime/device_factory.h\"\n+#include \"tensorflow/core/framework/allocator.h\"\n+#include \"tensorflow/core/framework/fake_input.h\"\n+#include \"tensorflow/core/framework/node_def_builder.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/framework/types.pb.h\"\n+#include \"tensorflow/core/kernels/ops_testutil.h\"\n+#include \"tensorflow/core/kernels/ops_util.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+\n+namespace tensorflow {\n+namespace {\n+\n+class SerializeTensorOpTest : public OpsTestBase {\n+ protected:\n+  template <typename T>\n+  void MakeOp() {\n+    TF_ASSERT_OK(\n+        NodeDefBuilder(\"myop\", \"SerializeTensor\")\n+            .Input(FakeInput(DataTypeToEnum<T>::value))\n+            .Finalize(node_def()));\n+    TF_ASSERT_OK(InitOp());\n+  }\n+  template <typename T>\n+  void BuildParseNodeDef(NodeDef* parse) {\n+    TF_ASSERT_OK(NodeDefBuilder(\"parse\", \"ParseTensor\")\n+                     .Input(FakeInput(DT_STRING))\n+                     .Attr(\"out_type\", DataTypeToEnum<T>::value)\n+                     .Finalize(parse));\n+  }\n+  Tensor ParseSerialized(const NodeDef& parse_node_def, Tensor* serialized) {\n+    std::unique_ptr<Device> device(\n+        DeviceFactory::NewDevice(\"CPU\", {}, \"/job:a/replica:0/task:0\"));\n+    gtl::InlinedVector<TensorValue, 4> inputs;\n+    inputs.push_back({nullptr, serialized});\n+    Status status;\n+    std::unique_ptr<OpKernel> op(\n+        CreateOpKernel(DEVICE_CPU, device.get(),\n+                       cpu_allocator(), parse_node_def,\n+                       TF_GRAPH_DEF_VERSION, &status));\n+    TF_EXPECT_OK(status);\n+    OpKernelContext::Params params;\n+    params.device = device.get();\n+    params.inputs = &inputs;\n+    params.frame_iter = FrameAndIter(0, 0);\n+    params.op_kernel = op.get();\n+    std::vector<AllocatorAttributes> attrs;\n+    test::SetOutputAttrs(&params, &attrs);\n+    OpKernelContext ctx(&params);\n+    op->Compute(&ctx);\n+    TF_EXPECT_OK(status);\n+    Tensor* output = ctx.mutable_output(0);\n+    return *output;\n+  }\n+};\n+\n+TEST_F(SerializeTensorOpTest, SerializeTensorOpTest_half) {\n+  MakeOp<Eigen::half>();", "path": "tensorflow/core/kernels/parse_tensor_test.cc", "position": null, "original_position": 80, "commit_id": "cafe147ccd170b8e891870559d1b712f565a3c3d", "original_commit_id": "7276c0ce101012e1e88255e96299aa2d2a2a4bb0", "user": {"login": "mavenlin", "id": 1367713, "node_id": "MDQ6VXNlcjEzNjc3MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1367713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mavenlin", "html_url": "https://github.com/mavenlin", "followers_url": "https://api.github.com/users/mavenlin/followers", "following_url": "https://api.github.com/users/mavenlin/following{/other_user}", "gists_url": "https://api.github.com/users/mavenlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mavenlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mavenlin/subscriptions", "organizations_url": "https://api.github.com/users/mavenlin/orgs", "repos_url": "https://api.github.com/users/mavenlin/repos", "events_url": "https://api.github.com/users/mavenlin/events{/privacy}", "received_events_url": "https://api.github.com/users/mavenlin/received_events", "type": "User", "site_admin": false}, "body": "Thanks for the suggestion! Sure, that make it more succinct, but I would like to also keep the `TensorShape` as an input parameter for `ConstructOp`, that it is possible to test with different shapes.", "created_at": "2017-08-11T04:57:07Z", "updated_at": "2017-09-05T06:33:12Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11992#discussion_r132616727", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11992", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132616727"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11992#discussion_r132616727"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11992"}}, "body_html": "<p>Thanks for the suggestion! Sure, that make it more succinct, but I would like to also keep the <code>TensorShape</code> as an input parameter for <code>ConstructOp</code>, that it is possible to test with different shapes.</p>", "body_text": "Thanks for the suggestion! Sure, that make it more succinct, but I would like to also keep the TensorShape as an input parameter for ConstructOp, that it is possible to test with different shapes.", "in_reply_to_id": 132614009}