{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/58502835", "pull_request_review_id": null, "id": 58502835, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyODM1", "diff_hunk": "@@ -0,0 +1,164 @@\n+/* Copyright 2015 Google Inc. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"third_party/eigen3/Eigen/Core\"\n+\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+\n+#include \"tensorflow/core/kernels/linalg_ops_common.h\"\n+#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+#include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+\n+namespace tensorflow {\n+\n+template <typename T>\n+class CholeskyGrad : public OpKernel {\n+ public:\n+  explicit CholeskyGrad(OpKernelConstruction* context) : OpKernel(context) {}\n+  using Matrix = Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic,\n+                               Eigen::RowMajor>;\n+  using ConstMatrixMap = Eigen::Map<const Matrix>;\n+  using MatrixMap = Eigen::Map<Matrix>;\n+  using ConstRef = Eigen::Ref<const Matrix>;\n+  using Ref = Eigen::Ref<Matrix>;\n+\n+  void Compute(OpKernelContext* context) override {\n+    const Tensor& input_tensor_l = context->input(0);\n+    const Tensor& input_tensor_grad = context->input(1);\n+    // Check that input tensors represent a matrix.\n+    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_tensor_l.shape()),\n+                errors::InvalidArgument(\"In[0] is not a matrix\"));\n+    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(input_tensor_grad.shape()),\n+                errors::InvalidArgument(\"In[1] is not a matrix\"));\n+    // Check that input tensors are square.\n+    OP_REQUIRES(context,\n+                input_tensor_l.dim_size(0) == input_tensor_l.dim_size(1),\n+                errors::InvalidArgument(\"Input matrix must be square.\"));\n+    OP_REQUIRES(context,\n+                input_tensor_grad.dim_size(0) == input_tensor_grad.dim_size(1),\n+                errors::InvalidArgument(\"Input matrix must be square.\"));\n+\n+    // Check that input tensors are of same size.\n+    OP_REQUIRES(context,\n+                input_tensor_l.dim_size(0) == input_tensor_grad.dim_size(0),\n+                errors::InvalidArgument(\"Input matrices must be same size.\"));\n+\n+    // Create an output tensor\n+    Tensor* output_tensor = NULL;\n+    OP_REQUIRES_OK(context,\n+                   context->allocate_output(0, input_tensor_grad.shape(),\n+                   &output_tensor));\n+\n+    if (output_tensor->NumElements() == 0) {\n+      // the output shape is a 0-element matrix, so there is nothing to do.\n+      return;\n+    }\n+    // The next lines are necessary to get Eigen matrix behaviour.\n+    const ConstMatrixMap input_matrix_l_full(input_tensor_l.flat<T>().data(),\n+                                        input_tensor_l.dim_size(0),\n+                                        input_tensor_l.dim_size(1));\n+    const ConstMatrixMap input_matrix_grad(input_tensor_grad.flat<T>().data(),\n+                                           input_tensor_grad.dim_size(0),\n+                                           input_tensor_grad.dim_size(1));\n+    MatrixMap output_matrix(output_tensor->template flat<T>().data(),\n+                            input_tensor_l.dim_size(0),\n+                            input_tensor_l.dim_size(1) );\n+\n+    // Algorithm only depends on lower triangular half on input_tensor_l.\n+    const Matrix input_matrix_l = input_matrix_l_full\n+                                  .template triangularView<Eigen::Lower>();\n+    // Algorithm only depends on lower triangular half on input_matrix_grad.\n+    output_matrix = input_matrix_grad.template triangularView<Eigen::Lower>();\n+\n+    const int64 kMatrixSize = input_matrix_l.rows();\n+    const int64 kMaxBlockSize = 32;\n+\n+    for (int64 block_end = kMatrixSize;\n+               block_end > 0;\n+               block_end -= kMaxBlockSize) {\n+      const int64 block_begin = std::max(0ll, block_end - kMaxBlockSize);\n+      const int64 block_size = block_end - block_begin;\n+      const int64 trailing_size = kMatrixSize - block_end;\n+      output_matrix.block(block_end, block_begin, trailing_size , block_size)", "path": "tensorflow/core/kernels/cholesky_grad.cc", "position": null, "original_position": 96, "commit_id": "175ba60ec638665b1165b7e9e806c59a4ed5b8d1", "original_commit_id": "37f2bb7b24fd41dec1b5d5d1c2dc1b4c99ef4de7", "user": {"login": "alexggmatthews", "id": 6596998, "node_id": "MDQ6VXNlcjY1OTY5OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6596998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexggmatthews", "html_url": "https://github.com/alexggmatthews", "followers_url": "https://api.github.com/users/alexggmatthews/followers", "following_url": "https://api.github.com/users/alexggmatthews/following{/other_user}", "gists_url": "https://api.github.com/users/alexggmatthews/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexggmatthews/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexggmatthews/subscriptions", "organizations_url": "https://api.github.com/users/alexggmatthews/orgs", "repos_url": "https://api.github.com/users/alexggmatthews/repos", "events_url": "https://api.github.com/users/alexggmatthews/events{/privacy}", "received_events_url": "https://api.github.com/users/alexggmatthews/received_events", "type": "User", "site_admin": false}, "body": "This was a particularly helpful comment that significantly improved the clarity of the code.  I was initially concerned about using temps for speed reasons but there weren't any when we did it in the way suggested here. \n", "created_at": "2016-04-05T08:20:40Z", "updated_at": "2016-04-07T16:48:06Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1465#discussion_r58502835", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1465", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/58502835"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1465#discussion_r58502835"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1465"}}, "body_html": "<p>This was a particularly helpful comment that significantly improved the clarity of the code.  I was initially concerned about using temps for speed reasons but there weren't any when we did it in the way suggested here.</p>", "body_text": "This was a particularly helpful comment that significantly improved the clarity of the code.  I was initially concerned about using temps for speed reasons but there weren't any when we did it in the way suggested here."}