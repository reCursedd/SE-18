{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/356727802", "html_url": "https://github.com/tensorflow/tensorflow/issues/15777#issuecomment-356727802", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15777", "id": 356727802, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjcyNzgwMg==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-10T20:33:26Z", "updated_at": "2018-01-10T20:33:26Z", "author_association": "MEMBER", "body_html": "<p>I'm pretty sure at this point it's impossible to build TF binaries on Ubuntu 16 that work on Ubuntu 14. The <a href=\"https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html\" rel=\"nofollow\">dual ABI</a> macro is able to remove a lot of the newer __cxx11 symbols, but no matter what I try, dependencies on new libc and libc++ interfaces just keep sneaking in.</p>\n<p>Probably the only way it'd be possible to maintain Ubuntu 14 support, would be if our Ubuntu 16 machines used an Ubuntu 14 docker container to build the CPU package.</p>\n<p>For posterity's sake, here's what I did to experiment:</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Build TensorFlow pip package on Ubuntu 16.04</span>\ndocker run --name=build -v /home/jart/filez:/filez -t -d ubuntu:16.04\ndocker <span class=\"pl-c1\">exec</span> -i -t build /bin/bash\n<span class=\"pl-c1\">cd</span> /root\napt-get update\napt-get install -y --no-install-recommends build-essential python python-dev pkg-config zip g++ zlib1g-dev unzip wget git-core python-numpy python-pip\nwget https://github.com/bazelbuild/bazel/releases/download/0.9.0/bazel-0.9.0-installer-linux-x86_64.sh\nchmod +x bazel-0.9.0-installer-linux-x86_64.sh\n./bazel-0.9.0-installer-linux-x86_64.sh\ngit clone https://github.com/tensorflow/tensorflow\n<span class=\"pl-c1\">cd</span> tensorflow\n./configure\nbazel build -s --copt=-fabi-version=7 --host_copt=-fabi-version=7 --copt=-D_GLIBCXX_USE_CXX11_ABI=0 --host_copt=-D_GLIBCXX_USE_CXX11_ABI=0 --config=opt //tensorflow/tools/pip_package:build_pip_package\nbazel-bin/tensorflow/tools/pip_package/build_pip_package /filez/tf\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Test it works with Ubuntu 14.04 C++ ABI</span>\ndocker run --name=user -v /usr/local/google/home/jart/filez:/filez -t -d ubuntu:14.04\ndocker <span class=\"pl-c1\">exec</span> -i -t user /bin/bash\n<span class=\"pl-c1\">cd</span> /root\napt-get update\napt-get install -y --no-install-recommends python python-virtualenv\nvirtualenv tf\n<span class=\"pl-c1\">cd</span> tf\n<span class=\"pl-c1\">source</span> bin/activate\neasy_install -U pip\npip install -U /filez/tf/tensorflow-1.5.0rc0-cp27-cp27mu-linux_x86_64.whl\npython -c <span class=\"pl-s\"><span class=\"pl-pds\">'</span>import tensorflow<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Cleanup</span>\ndocker stop build\ndocker rm build\ndocker stop user\ndocker rm user</pre></div>", "body_text": "I'm pretty sure at this point it's impossible to build TF binaries on Ubuntu 16 that work on Ubuntu 14. The dual ABI macro is able to remove a lot of the newer __cxx11 symbols, but no matter what I try, dependencies on new libc and libc++ interfaces just keep sneaking in.\nProbably the only way it'd be possible to maintain Ubuntu 14 support, would be if our Ubuntu 16 machines used an Ubuntu 14 docker container to build the CPU package.\nFor posterity's sake, here's what I did to experiment:\n# Build TensorFlow pip package on Ubuntu 16.04\ndocker run --name=build -v /home/jart/filez:/filez -t -d ubuntu:16.04\ndocker exec -i -t build /bin/bash\ncd /root\napt-get update\napt-get install -y --no-install-recommends build-essential python python-dev pkg-config zip g++ zlib1g-dev unzip wget git-core python-numpy python-pip\nwget https://github.com/bazelbuild/bazel/releases/download/0.9.0/bazel-0.9.0-installer-linux-x86_64.sh\nchmod +x bazel-0.9.0-installer-linux-x86_64.sh\n./bazel-0.9.0-installer-linux-x86_64.sh\ngit clone https://github.com/tensorflow/tensorflow\ncd tensorflow\n./configure\nbazel build -s --copt=-fabi-version=7 --host_copt=-fabi-version=7 --copt=-D_GLIBCXX_USE_CXX11_ABI=0 --host_copt=-D_GLIBCXX_USE_CXX11_ABI=0 --config=opt //tensorflow/tools/pip_package:build_pip_package\nbazel-bin/tensorflow/tools/pip_package/build_pip_package /filez/tf\n\n# Test it works with Ubuntu 14.04 C++ ABI\ndocker run --name=user -v /usr/local/google/home/jart/filez:/filez -t -d ubuntu:14.04\ndocker exec -i -t user /bin/bash\ncd /root\napt-get update\napt-get install -y --no-install-recommends python python-virtualenv\nvirtualenv tf\ncd tf\nsource bin/activate\neasy_install -U pip\npip install -U /filez/tf/tensorflow-1.5.0rc0-cp27-cp27mu-linux_x86_64.whl\npython -c 'import tensorflow'\n\n# Cleanup\ndocker stop build\ndocker rm build\ndocker stop user\ndocker rm user", "body": "I'm pretty sure at this point it's impossible to build TF binaries on Ubuntu 16 that work on Ubuntu 14. The [dual ABI](https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html) macro is able to remove a lot of the newer __cxx11 symbols, but no matter what I try, dependencies on new libc and libc++ interfaces just keep sneaking in.\r\n\r\nProbably the only way it'd be possible to maintain Ubuntu 14 support, would be if our Ubuntu 16 machines used an Ubuntu 14 docker container to build the CPU package.\r\n\r\nFor posterity's sake, here's what I did to experiment:\r\n\r\n```sh\r\n# Build TensorFlow pip package on Ubuntu 16.04\r\ndocker run --name=build -v /home/jart/filez:/filez -t -d ubuntu:16.04\r\ndocker exec -i -t build /bin/bash\r\ncd /root\r\napt-get update\r\napt-get install -y --no-install-recommends build-essential python python-dev pkg-config zip g++ zlib1g-dev unzip wget git-core python-numpy python-pip\r\nwget https://github.com/bazelbuild/bazel/releases/download/0.9.0/bazel-0.9.0-installer-linux-x86_64.sh\r\nchmod +x bazel-0.9.0-installer-linux-x86_64.sh\r\n./bazel-0.9.0-installer-linux-x86_64.sh\r\ngit clone https://github.com/tensorflow/tensorflow\r\ncd tensorflow\r\n./configure\r\nbazel build -s --copt=-fabi-version=7 --host_copt=-fabi-version=7 --copt=-D_GLIBCXX_USE_CXX11_ABI=0 --host_copt=-D_GLIBCXX_USE_CXX11_ABI=0 --config=opt //tensorflow/tools/pip_package:build_pip_package\r\nbazel-bin/tensorflow/tools/pip_package/build_pip_package /filez/tf\r\n\r\n# Test it works with Ubuntu 14.04 C++ ABI\r\ndocker run --name=user -v /usr/local/google/home/jart/filez:/filez -t -d ubuntu:14.04\r\ndocker exec -i -t user /bin/bash\r\ncd /root\r\napt-get update\r\napt-get install -y --no-install-recommends python python-virtualenv\r\nvirtualenv tf\r\ncd tf\r\nsource bin/activate\r\neasy_install -U pip\r\npip install -U /filez/tf/tensorflow-1.5.0rc0-cp27-cp27mu-linux_x86_64.whl\r\npython -c 'import tensorflow'\r\n\r\n# Cleanup\r\ndocker stop build\r\ndocker rm build\r\ndocker stop user\r\ndocker rm user\r\n```"}