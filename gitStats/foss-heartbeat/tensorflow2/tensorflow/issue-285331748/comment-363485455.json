{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/363485455", "html_url": "https://github.com/tensorflow/tensorflow/issues/15777#issuecomment-363485455", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15777", "id": 363485455, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzQ4NTQ1NQ==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-06T16:44:53Z", "updated_at": "2018-02-06T16:44:53Z", "author_association": "MEMBER", "body_html": "<p>Oh, for posterity, here are some facts we uncovered for anyone who's interested in using Debian 8 with Clang. This could potentially be useful for other people in the industry who are interested in distributing TensorFlow.</p>\n<hr>\n<p>Debian 8 Jessie (lifetime 2015\u21922020) is my personal favorite. Clang team maintains an apt repo for Debian 8. The two have a surprising degree of synergy.</p>\n<p>Unlike the GCC 4.9.2 which comes included with Debian 8, Clang 6.0 is able to generate opcodes for more recent instruction sets, e.g. AVX-512. Those can make TF potentially 10x faster on CPUs like Skylake Xeons (c. 2015) assuming <code>-march=native</code> is used.</p>\n<p>If one's goal is compatibility, <code>-msse3</code> is a safe optimization that works on nearly every x86_64 CPU in existence. For example, the optional <a href=\"https://github.com/tensorflow/tensorflow/pull/16173\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/16173/hovercard\">TF Debian 8 Clang 6 Bazel CROSSTOOL</a> should in theory create binaries that are compatible with:</p>\n<ul>\n<li>Ubuntu 14+</li>\n<li>CentOS 7+</li>\n<li>Debian 8+</li>\n<li>SuSE 13.2+</li>\n<li>Mint 17.3+</li>\n<li>Manjaro 0.8.11</li>\n</ul>\n<p>Proof:</p>\n<pre><code>jart@tomservo:/tmp/pip$ find . -name \\*.so | xargs ldd -v | grep -Po '(?:GCC|GLIBC|CXXABI)_[.\\d]+' | sort -n | sort -u\nCXXABI_1.3.7 (GCC 4.8.3)\nGCC_4.2.0\nGLIBC_2.18\njart@tomservo:/tmp/pip$ ldd tensorflow-1.5.0rc0.data/purelib/tensorflow/libtensorflow_framework.so \n        linux-vdso.so.1 (0x00007ffe70f80000)\n        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f4487259000)\n        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f4486f58000)\n        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f4486d3b000)\n        libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f4486a30000)\n        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4486685000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f448801b000)\n        libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f448646f000)\n</code></pre>\n<p>Some facts we uncovered about Linux distributions:</p>\n<pre><code># Linux distro versions\n2014 CentOS 5.11 (EOL 2019-08)    gcc4.1 libc2.5 libc++4.1.2 sqlite3.3.6\n2015 Wheezy 7.0 (EOL 2018-05)     gcc4.7 libc2.13 libc++4.7.2 sqlite3.7.13\n2014 CentOS 7 (EOL 2019-08)       gcc4.8 libc2.17 libc++4.8.5 sqlite3.7.17\n2014 Trusty 14.04 (EOL 2019-04)   gcc4.8 libc2.19 libc++4.8.4 sqlite3.8.2\n2015 Jessie 8.0 (EOL 2020-05)     gcc4.9 libc2.19 libc++4.8.4 sqlite3.8.7\n2016 Xenial 16.04 (EOL 2021-04)   gcc5.3 libc2.23 libc++5.4.0 sqlite3.11.0\n\n# C++ ABIs\nCXXABI_1.3.7 &lt;-- max on ubuntu 14?\nCXXABI_1.3.8 &lt;-- where the C++11 ABI break happened for GCC 5.x\nstrings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX\n</code></pre>\n<p>Some facts we uncovered about x86 CPUs (w.r.t. scientific computing):</p>\n<pre><code># Noteworthy CPU Features\nSSE      128-bit vector instructions (e.g. addps http://www.felixcloutier.com/x86/ADDPS.html)\nSSE4.1   Makes SSE good\nSSE4.2   Makes SSE do strings and CRC32\nAVX      Makes SSE 256-bit (e.g. vaddps)\nAVX2     Adds features to AVX\nAVX-512  Makes SSE 512-bit\nSHA      Makes SSE do SHA1 and SHA256\nFMA      Fused multiply\u2013add\nCLMUL    Carry-less multiplication https://goo.gl/ritKJX\nTSX      Transactional memory instructions for threads http://www.intel.com/software/tsx\n\n# Intel CPU Line\n2003 P6 M           SSE SSE2\n2004 prescott       SSE3 SSSE3 (-march=prescott)\n2006 core           X64 SSE4.1 (only on 45nm variety) (-march=core2)\n2008 nehalem        SSE4.2 VT-x VT-d (-march=nehalem)\n2010 westmere       CLMUL AES (-march=westmere)\n2012 sandybridge    AVX TXT (-march=sandybridge)\n2012 ivybridge      F16C MOVBE (-march=ivybridge)\n2013 haswell        AVX2 TSX BMI2 FMA (-march=haswell)\n2014 broadwell      RDSEED ADCX PREFETCHW (-march=broadwell - works on trusty gcc4.9)\n2015 skylake        SGX ADX MPX AVX-512[xeon-only] (-march=skylake / -march=skylake-avx512 - needs gcc7)\n2018 cannonlake     AVX-512 SHA (-march=cannonlake - needs clang5)\n\n# Intel Low Power CPU Line\n2013 silvermont     SSE4.1 SSE4.2 VT-x (-march=silvermont)\n2016 goldmont       SHA (-march=goldmont - needs clang5)\n\n# AMD CPU Line\n2003 k8             SSE SSE2 (-march=k8)\n2005 k8 (Venus)     SSE3 (-march=k8-sse3)\n2008 barcelona      SSE4a?! (-march=barcelona)\n2011 bulldozer      SSE4.1 SSE4.2 CLMUL AVX AES FMA4?! (-march=bdver1)\n2011 piledriver     FMA (-march=bdver2)\n2015 excavator      AVX2 BMI2 MOVBE (-march=bdver4)\n\n# Google Compute Engine Supported CPUs\n# https://cloud.google.com/compute/docs/cpu-platforms\n2012 sandybridge 2.6gHz -march=sandybridge\n2012 ivybridge   2.5gHz -march=ivybridge\n2013 haswell     2.3gHz -march=haswell\n2014 broadwell   2.2gHz -march=broadwell\n2015 skylake     2.0gHz -march=skylake-avx512\n</code></pre>\n<p>One possibility Debian/Ubuntu distributors could explore is:</p>\n<pre><code># We might be able to say something like this in /etc/apt/sources.list\n# so folks can get a package for their specific microarchitecture.\ndeb [arch=skylake] https://apt.tensorflow.org/ stretch stable\n</code></pre>\n<p>Please note <code>-msse3</code> or <code>-march=native</code> is not a binary dilemma. It's possible to use a single Debian 8 machine to cross-compile to <code>-march=whatever</code>.</p>\n<p>There also appear to be sweet-spot combinations where you can build binaries that support large subsets in-between. For example, the following optimized CFLAGS have been carefully selected to represent the points in time where Intel and AMD microarchitectures came into alignment.</p>\n<pre><code>oldcpu: Nearly all x86_64 microarchitectures\n  $ intersect &lt;(march-copts core2) &lt;(march-copts k8-sse3)\n  -msse3\ndefault: x86_64 + SSE4\n  $ intersect &lt;(march-copts nehalem) &lt;(march-copts bdver1)\n  -mcx16\n  -mpopcnt\n  -msahf\n  -msse3\n  -msse4\n  -msse4.1\n  -msse4.2\n  -mssse3\navx: x86_64 + AVX\n  $ intersect &lt;(march-copts sandybridge) &lt;(march-copts bdver1)\n  -maes\n  -mavx\n  -mavx256-split-unaligned-store\n  -mcx16\n  -mpclmul\n  -mpopcnt\n  -msahf\n  -msse3\n  -msse4\n  -msse4.1\n  -msse4.2\n  -mssse3\n  -mxsave\navx2: x86_64 + AVX2\n  $ intersect &lt;(march-copts haswell) &lt;(march-copts bdver4)\n  -maes\n  -mavx\n  -mavx2\n  -mbmi\n  -mbmi2\n  -mcx16\n  -mf16c\n  -mfma\n  -mfsgsbase\n  -mlzcnt\n  -mmovbe\n  -mpclmul\n  -mpopcnt\n  -mrdrnd\n  -msahf\n  -msse3\n  -msse4\n  -msse4.1\n  -msse4.2\n  -mssse3\n  -mxsave\n  -mxsaveopt\navx3: x86_64 + AVX-512\n  $ march-copts skylake-avx512\n  -madx\n  -maes\n  -mavx\n  -mavx2\n  -mavx512bw\n  -mavx512cd\n  -mavx512dq\n  -mavx512f\n  -mavx512vl\n  -mbmi\n  -mbmi2\n  -mclflushopt\n  -mcx16\n  -mf16c\n  -mfma\n  -mfsgsbase\n  -mhle\n  -mlzcnt\n  -mmovbe\n  -mpclmul\n  -mpku\n  -mpopcnt\n  -mprfchw\n  -mrdrnd\n  -mrdseed\n  -msahf\n  -msse3\n  -msse4\n  -msse4.1\n  -msse4.2\n  -mssse3\n  -mxsave\n  -mxsavec\n  -mxsaveopt\n  -mxsaves\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://distrowatch.com/table.php?distribution=ubuntu\" rel=\"nofollow\">https://distrowatch.com/table.php?distribution=ubuntu</a></li>\n<li><a href=\"https://distrowatch.com/table.php?distribution=redhat\" rel=\"nofollow\">https://distrowatch.com/table.php?distribution=redhat</a></li>\n<li><a href=\"http://vault.centos.org/5.11/os/x86_64/CentOS/\" rel=\"nofollow\">http://vault.centos.org/5.11/os/x86_64/CentOS/</a></li>\n</ul>", "body_text": "Oh, for posterity, here are some facts we uncovered for anyone who's interested in using Debian 8 with Clang. This could potentially be useful for other people in the industry who are interested in distributing TensorFlow.\n\nDebian 8 Jessie (lifetime 2015\u21922020) is my personal favorite. Clang team maintains an apt repo for Debian 8. The two have a surprising degree of synergy.\nUnlike the GCC 4.9.2 which comes included with Debian 8, Clang 6.0 is able to generate opcodes for more recent instruction sets, e.g. AVX-512. Those can make TF potentially 10x faster on CPUs like Skylake Xeons (c. 2015) assuming -march=native is used.\nIf one's goal is compatibility, -msse3 is a safe optimization that works on nearly every x86_64 CPU in existence. For example, the optional TF Debian 8 Clang 6 Bazel CROSSTOOL should in theory create binaries that are compatible with:\n\nUbuntu 14+\nCentOS 7+\nDebian 8+\nSuSE 13.2+\nMint 17.3+\nManjaro 0.8.11\n\nProof:\njart@tomservo:/tmp/pip$ find . -name \\*.so | xargs ldd -v | grep -Po '(?:GCC|GLIBC|CXXABI)_[.\\d]+' | sort -n | sort -u\nCXXABI_1.3.7 (GCC 4.8.3)\nGCC_4.2.0\nGLIBC_2.18\njart@tomservo:/tmp/pip$ ldd tensorflow-1.5.0rc0.data/purelib/tensorflow/libtensorflow_framework.so \n        linux-vdso.so.1 (0x00007ffe70f80000)\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f4487259000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f4486f58000)\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f4486d3b000)\n        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f4486a30000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4486685000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f448801b000)\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f448646f000)\n\nSome facts we uncovered about Linux distributions:\n# Linux distro versions\n2014 CentOS 5.11 (EOL 2019-08)    gcc4.1 libc2.5 libc++4.1.2 sqlite3.3.6\n2015 Wheezy 7.0 (EOL 2018-05)     gcc4.7 libc2.13 libc++4.7.2 sqlite3.7.13\n2014 CentOS 7 (EOL 2019-08)       gcc4.8 libc2.17 libc++4.8.5 sqlite3.7.17\n2014 Trusty 14.04 (EOL 2019-04)   gcc4.8 libc2.19 libc++4.8.4 sqlite3.8.2\n2015 Jessie 8.0 (EOL 2020-05)     gcc4.9 libc2.19 libc++4.8.4 sqlite3.8.7\n2016 Xenial 16.04 (EOL 2021-04)   gcc5.3 libc2.23 libc++5.4.0 sqlite3.11.0\n\n# C++ ABIs\nCXXABI_1.3.7 <-- max on ubuntu 14?\nCXXABI_1.3.8 <-- where the C++11 ABI break happened for GCC 5.x\nstrings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX\n\nSome facts we uncovered about x86 CPUs (w.r.t. scientific computing):\n# Noteworthy CPU Features\nSSE      128-bit vector instructions (e.g. addps http://www.felixcloutier.com/x86/ADDPS.html)\nSSE4.1   Makes SSE good\nSSE4.2   Makes SSE do strings and CRC32\nAVX      Makes SSE 256-bit (e.g. vaddps)\nAVX2     Adds features to AVX\nAVX-512  Makes SSE 512-bit\nSHA      Makes SSE do SHA1 and SHA256\nFMA      Fused multiply\u2013add\nCLMUL    Carry-less multiplication https://goo.gl/ritKJX\nTSX      Transactional memory instructions for threads http://www.intel.com/software/tsx\n\n# Intel CPU Line\n2003 P6 M           SSE SSE2\n2004 prescott       SSE3 SSSE3 (-march=prescott)\n2006 core           X64 SSE4.1 (only on 45nm variety) (-march=core2)\n2008 nehalem        SSE4.2 VT-x VT-d (-march=nehalem)\n2010 westmere       CLMUL AES (-march=westmere)\n2012 sandybridge    AVX TXT (-march=sandybridge)\n2012 ivybridge      F16C MOVBE (-march=ivybridge)\n2013 haswell        AVX2 TSX BMI2 FMA (-march=haswell)\n2014 broadwell      RDSEED ADCX PREFETCHW (-march=broadwell - works on trusty gcc4.9)\n2015 skylake        SGX ADX MPX AVX-512[xeon-only] (-march=skylake / -march=skylake-avx512 - needs gcc7)\n2018 cannonlake     AVX-512 SHA (-march=cannonlake - needs clang5)\n\n# Intel Low Power CPU Line\n2013 silvermont     SSE4.1 SSE4.2 VT-x (-march=silvermont)\n2016 goldmont       SHA (-march=goldmont - needs clang5)\n\n# AMD CPU Line\n2003 k8             SSE SSE2 (-march=k8)\n2005 k8 (Venus)     SSE3 (-march=k8-sse3)\n2008 barcelona      SSE4a?! (-march=barcelona)\n2011 bulldozer      SSE4.1 SSE4.2 CLMUL AVX AES FMA4?! (-march=bdver1)\n2011 piledriver     FMA (-march=bdver2)\n2015 excavator      AVX2 BMI2 MOVBE (-march=bdver4)\n\n# Google Compute Engine Supported CPUs\n# https://cloud.google.com/compute/docs/cpu-platforms\n2012 sandybridge 2.6gHz -march=sandybridge\n2012 ivybridge   2.5gHz -march=ivybridge\n2013 haswell     2.3gHz -march=haswell\n2014 broadwell   2.2gHz -march=broadwell\n2015 skylake     2.0gHz -march=skylake-avx512\n\nOne possibility Debian/Ubuntu distributors could explore is:\n# We might be able to say something like this in /etc/apt/sources.list\n# so folks can get a package for their specific microarchitecture.\ndeb [arch=skylake] https://apt.tensorflow.org/ stretch stable\n\nPlease note -msse3 or -march=native is not a binary dilemma. It's possible to use a single Debian 8 machine to cross-compile to -march=whatever.\nThere also appear to be sweet-spot combinations where you can build binaries that support large subsets in-between. For example, the following optimized CFLAGS have been carefully selected to represent the points in time where Intel and AMD microarchitectures came into alignment.\noldcpu: Nearly all x86_64 microarchitectures\n  $ intersect <(march-copts core2) <(march-copts k8-sse3)\n  -msse3\ndefault: x86_64 + SSE4\n  $ intersect <(march-copts nehalem) <(march-copts bdver1)\n  -mcx16\n  -mpopcnt\n  -msahf\n  -msse3\n  -msse4\n  -msse4.1\n  -msse4.2\n  -mssse3\navx: x86_64 + AVX\n  $ intersect <(march-copts sandybridge) <(march-copts bdver1)\n  -maes\n  -mavx\n  -mavx256-split-unaligned-store\n  -mcx16\n  -mpclmul\n  -mpopcnt\n  -msahf\n  -msse3\n  -msse4\n  -msse4.1\n  -msse4.2\n  -mssse3\n  -mxsave\navx2: x86_64 + AVX2\n  $ intersect <(march-copts haswell) <(march-copts bdver4)\n  -maes\n  -mavx\n  -mavx2\n  -mbmi\n  -mbmi2\n  -mcx16\n  -mf16c\n  -mfma\n  -mfsgsbase\n  -mlzcnt\n  -mmovbe\n  -mpclmul\n  -mpopcnt\n  -mrdrnd\n  -msahf\n  -msse3\n  -msse4\n  -msse4.1\n  -msse4.2\n  -mssse3\n  -mxsave\n  -mxsaveopt\navx3: x86_64 + AVX-512\n  $ march-copts skylake-avx512\n  -madx\n  -maes\n  -mavx\n  -mavx2\n  -mavx512bw\n  -mavx512cd\n  -mavx512dq\n  -mavx512f\n  -mavx512vl\n  -mbmi\n  -mbmi2\n  -mclflushopt\n  -mcx16\n  -mf16c\n  -mfma\n  -mfsgsbase\n  -mhle\n  -mlzcnt\n  -mmovbe\n  -mpclmul\n  -mpku\n  -mpopcnt\n  -mprfchw\n  -mrdrnd\n  -mrdseed\n  -msahf\n  -msse3\n  -msse4\n  -msse4.1\n  -msse4.2\n  -mssse3\n  -mxsave\n  -mxsavec\n  -mxsaveopt\n  -mxsaves\n\nSee also:\n\nhttps://distrowatch.com/table.php?distribution=ubuntu\nhttps://distrowatch.com/table.php?distribution=redhat\nhttp://vault.centos.org/5.11/os/x86_64/CentOS/", "body": "Oh, for posterity, here are some facts we uncovered for anyone who's interested in using Debian 8 with Clang. This could potentially be useful for other people in the industry who are interested in distributing TensorFlow.\r\n\r\n----\r\n\r\nDebian 8 Jessie (lifetime 2015\u21922020) is my personal favorite. Clang team maintains an apt repo for Debian 8. The two have a surprising degree of synergy.\r\n\r\nUnlike the GCC 4.9.2 which comes included with Debian 8, Clang 6.0 is able to generate opcodes for more recent instruction sets, e.g. AVX-512. Those can make TF potentially 10x faster on CPUs like Skylake Xeons (c. 2015) assuming `-march=native` is used.\r\n\r\nIf one's goal is compatibility, `-msse3` is a safe optimization that works on nearly every x86_64 CPU in existence. For example, the optional [TF Debian 8 Clang 6 Bazel CROSSTOOL](https://github.com/tensorflow/tensorflow/pull/16173) should in theory create binaries that are compatible with:\r\n\r\n- Ubuntu 14+\r\n- CentOS 7+\r\n- Debian 8+\r\n- SuSE 13.2+\r\n- Mint 17.3+\r\n- Manjaro 0.8.11\r\n\r\nProof:\r\n\r\n```\r\njart@tomservo:/tmp/pip$ find . -name \\*.so | xargs ldd -v | grep -Po '(?:GCC|GLIBC|CXXABI)_[.\\d]+' | sort -n | sort -u\r\nCXXABI_1.3.7 (GCC 4.8.3)\r\nGCC_4.2.0\r\nGLIBC_2.18\r\njart@tomservo:/tmp/pip$ ldd tensorflow-1.5.0rc0.data/purelib/tensorflow/libtensorflow_framework.so \r\n        linux-vdso.so.1 (0x00007ffe70f80000)\r\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f4487259000)\r\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f4486f58000)\r\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f4486d3b000)\r\n        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f4486a30000)\r\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4486685000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f448801b000)\r\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f448646f000)\r\n```\r\n\r\nSome facts we uncovered about Linux distributions:\r\n\r\n```\r\n# Linux distro versions\r\n2014 CentOS 5.11 (EOL 2019-08)    gcc4.1 libc2.5 libc++4.1.2 sqlite3.3.6\r\n2015 Wheezy 7.0 (EOL 2018-05)     gcc4.7 libc2.13 libc++4.7.2 sqlite3.7.13\r\n2014 CentOS 7 (EOL 2019-08)       gcc4.8 libc2.17 libc++4.8.5 sqlite3.7.17\r\n2014 Trusty 14.04 (EOL 2019-04)   gcc4.8 libc2.19 libc++4.8.4 sqlite3.8.2\r\n2015 Jessie 8.0 (EOL 2020-05)     gcc4.9 libc2.19 libc++4.8.4 sqlite3.8.7\r\n2016 Xenial 16.04 (EOL 2021-04)   gcc5.3 libc2.23 libc++5.4.0 sqlite3.11.0\r\n\r\n# C++ ABIs\r\nCXXABI_1.3.7 <-- max on ubuntu 14?\r\nCXXABI_1.3.8 <-- where the C++11 ABI break happened for GCC 5.x\r\nstrings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX\r\n```\r\n\r\nSome facts we uncovered about x86 CPUs (w.r.t. scientific computing):\r\n\r\n```\r\n# Noteworthy CPU Features\r\nSSE      128-bit vector instructions (e.g. addps http://www.felixcloutier.com/x86/ADDPS.html)\r\nSSE4.1   Makes SSE good\r\nSSE4.2   Makes SSE do strings and CRC32\r\nAVX      Makes SSE 256-bit (e.g. vaddps)\r\nAVX2     Adds features to AVX\r\nAVX-512  Makes SSE 512-bit\r\nSHA      Makes SSE do SHA1 and SHA256\r\nFMA      Fused multiply\u2013add\r\nCLMUL    Carry-less multiplication https://goo.gl/ritKJX\r\nTSX      Transactional memory instructions for threads http://www.intel.com/software/tsx\r\n\r\n# Intel CPU Line\r\n2003 P6 M           SSE SSE2\r\n2004 prescott       SSE3 SSSE3 (-march=prescott)\r\n2006 core           X64 SSE4.1 (only on 45nm variety) (-march=core2)\r\n2008 nehalem        SSE4.2 VT-x VT-d (-march=nehalem)\r\n2010 westmere       CLMUL AES (-march=westmere)\r\n2012 sandybridge    AVX TXT (-march=sandybridge)\r\n2012 ivybridge      F16C MOVBE (-march=ivybridge)\r\n2013 haswell        AVX2 TSX BMI2 FMA (-march=haswell)\r\n2014 broadwell      RDSEED ADCX PREFETCHW (-march=broadwell - works on trusty gcc4.9)\r\n2015 skylake        SGX ADX MPX AVX-512[xeon-only] (-march=skylake / -march=skylake-avx512 - needs gcc7)\r\n2018 cannonlake     AVX-512 SHA (-march=cannonlake - needs clang5)\r\n\r\n# Intel Low Power CPU Line\r\n2013 silvermont     SSE4.1 SSE4.2 VT-x (-march=silvermont)\r\n2016 goldmont       SHA (-march=goldmont - needs clang5)\r\n\r\n# AMD CPU Line\r\n2003 k8             SSE SSE2 (-march=k8)\r\n2005 k8 (Venus)     SSE3 (-march=k8-sse3)\r\n2008 barcelona      SSE4a?! (-march=barcelona)\r\n2011 bulldozer      SSE4.1 SSE4.2 CLMUL AVX AES FMA4?! (-march=bdver1)\r\n2011 piledriver     FMA (-march=bdver2)\r\n2015 excavator      AVX2 BMI2 MOVBE (-march=bdver4)\r\n\r\n# Google Compute Engine Supported CPUs\r\n# https://cloud.google.com/compute/docs/cpu-platforms\r\n2012 sandybridge 2.6gHz -march=sandybridge\r\n2012 ivybridge   2.5gHz -march=ivybridge\r\n2013 haswell     2.3gHz -march=haswell\r\n2014 broadwell   2.2gHz -march=broadwell\r\n2015 skylake     2.0gHz -march=skylake-avx512\r\n```\r\n\r\nOne possibility Debian/Ubuntu distributors could explore is:\r\n\r\n```\r\n# We might be able to say something like this in /etc/apt/sources.list\r\n# so folks can get a package for their specific microarchitecture.\r\ndeb [arch=skylake] https://apt.tensorflow.org/ stretch stable\r\n```\r\n\r\nPlease note `-msse3` or `-march=native` is not a binary dilemma. It's possible to use a single Debian 8 machine to cross-compile to `-march=whatever`.\r\n\r\nThere also appear to be sweet-spot combinations where you can build binaries that support large subsets in-between. For example, the following optimized CFLAGS have been carefully selected to represent the points in time where Intel and AMD microarchitectures came into alignment.\r\n\r\n```\r\noldcpu: Nearly all x86_64 microarchitectures\r\n  $ intersect <(march-copts core2) <(march-copts k8-sse3)\r\n  -msse3\r\ndefault: x86_64 + SSE4\r\n  $ intersect <(march-copts nehalem) <(march-copts bdver1)\r\n  -mcx16\r\n  -mpopcnt\r\n  -msahf\r\n  -msse3\r\n  -msse4\r\n  -msse4.1\r\n  -msse4.2\r\n  -mssse3\r\navx: x86_64 + AVX\r\n  $ intersect <(march-copts sandybridge) <(march-copts bdver1)\r\n  -maes\r\n  -mavx\r\n  -mavx256-split-unaligned-store\r\n  -mcx16\r\n  -mpclmul\r\n  -mpopcnt\r\n  -msahf\r\n  -msse3\r\n  -msse4\r\n  -msse4.1\r\n  -msse4.2\r\n  -mssse3\r\n  -mxsave\r\navx2: x86_64 + AVX2\r\n  $ intersect <(march-copts haswell) <(march-copts bdver4)\r\n  -maes\r\n  -mavx\r\n  -mavx2\r\n  -mbmi\r\n  -mbmi2\r\n  -mcx16\r\n  -mf16c\r\n  -mfma\r\n  -mfsgsbase\r\n  -mlzcnt\r\n  -mmovbe\r\n  -mpclmul\r\n  -mpopcnt\r\n  -mrdrnd\r\n  -msahf\r\n  -msse3\r\n  -msse4\r\n  -msse4.1\r\n  -msse4.2\r\n  -mssse3\r\n  -mxsave\r\n  -mxsaveopt\r\navx3: x86_64 + AVX-512\r\n  $ march-copts skylake-avx512\r\n  -madx\r\n  -maes\r\n  -mavx\r\n  -mavx2\r\n  -mavx512bw\r\n  -mavx512cd\r\n  -mavx512dq\r\n  -mavx512f\r\n  -mavx512vl\r\n  -mbmi\r\n  -mbmi2\r\n  -mclflushopt\r\n  -mcx16\r\n  -mf16c\r\n  -mfma\r\n  -mfsgsbase\r\n  -mhle\r\n  -mlzcnt\r\n  -mmovbe\r\n  -mpclmul\r\n  -mpku\r\n  -mpopcnt\r\n  -mprfchw\r\n  -mrdrnd\r\n  -mrdseed\r\n  -msahf\r\n  -msse3\r\n  -msse4\r\n  -msse4.1\r\n  -msse4.2\r\n  -mssse3\r\n  -mxsave\r\n  -mxsavec\r\n  -mxsaveopt\r\n  -mxsaves\r\n```\r\n\r\nSee also:\r\n\r\n- https://distrowatch.com/table.php?distribution=ubuntu\r\n- https://distrowatch.com/table.php?distribution=redhat\r\n- http://vault.centos.org/5.11/os/x86_64/CentOS/"}