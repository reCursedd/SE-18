{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9911", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9911/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9911/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9911/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9911", "id": 228665445, "node_id": "MDU6SXNzdWUyMjg2NjU0NDU=", "number": 9911, "title": "Estimator predict() fails after fit() or evaluate()", "user": {"login": "sunsided", "id": 495335, "node_id": "MDQ6VXNlcjQ5NTMzNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/495335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunsided", "html_url": "https://github.com/sunsided", "followers_url": "https://api.github.com/users/sunsided/followers", "following_url": "https://api.github.com/users/sunsided/following{/other_user}", "gists_url": "https://api.github.com/users/sunsided/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunsided/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunsided/subscriptions", "organizations_url": "https://api.github.com/users/sunsided/orgs", "repos_url": "https://api.github.com/users/sunsided/repos", "events_url": "https://api.github.com/users/sunsided/events{/privacy}", "received_events_url": "https://api.github.com/users/sunsided/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-15T10:03:30Z", "updated_at": "2017-09-22T01:06:30Z", "closed_at": "2017-09-22T01:06:24Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes, I did write an <code>input_fn</code> based code based on the <a href=\"https://www.tensorflow.org/extend/estimators\" rel=\"nofollow\">Abalone</a> example. Specifically, I replaced the <code>x</code> and <code>y</code> parameters with custom <code>input_fn</code> implementations loading images and applying <code>map_fn</code> to them before batching. This resulted in a batch of unknown tensor shape (<code>None</code>).</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.1.0-1-g10ec24a</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.4.5</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0, 5.1</li>\n<li><strong>GPU model and memory</strong>: GeForce 1080 Ti</li>\n<li><strong>Exact command to reproduce</strong>:  running the code</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When calling <code>predict()</code> after calling <code>fit()</code> or <code>evaluate()</code> on an <code>Estimator</code> instance (an unlikely scenario, but shown in the example), the call crashes with</p>\n<pre><code>Traceback (most recent call last):\n  File \"/home/mmayer/dev/everybag/orientation_network/orientation.py\", line 169, in &lt;module&gt;\n    main()\n  File \"/home/mmayer/dev/everybag/orientation_network/orientation.py\", line 35, in main\n    as_iterable=False)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py\", line 281, in new_func\n    return func(*args, **kwargs)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 565, in predict\n    as_iterable=as_iterable)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 857, in _infer_model\n    infer_ops = self._get_predict_ops(features)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1187, in _get_predict_ops\n    self._labels_info)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 164, in create_placeholders_from_signatures\n    return signatures.get_placeholder()\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 89, in get_placeholder\n    shape=[None] + list(self.shape[1:]))\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 478, in __iter__\n    raise ValueError(\"Cannot iterate over a shape with unknown rank.\")\nValueError: Cannot iterate over a shape with unknown rank.\n</code></pre>\n<p>if <code>self._labels_info</code> of the <code>Estimator</code> has unknown shape (e.g. as an effect of using <code>map_fn</code> on images to obtain both feature and target from them. This is due to</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">def</span> <span class=\"pl-en\">get_placeholder</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.is_sparse:\n      <span class=\"pl-k\">return</span> array_ops.sparse_placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.dtype)\n    <span class=\"pl-k\">return</span> array_ops.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.dtype,\n                                 <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>] <span class=\"pl-k\">+</span> <span class=\"pl-c1\">list</span>(<span class=\"pl-c1\">self</span>.shape[<span class=\"pl-c1\">1</span>:]))</pre></div>\n<p>in <code>tensor_signature.py</code>, since <code>self.shape[1:]</code> is <code>None</code>.</p>\n<p>The call comes through</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">def</span> <span class=\"pl-en\">_get_predict_ops</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">features</span>):\n    labels <span class=\"pl-k\">=</span> tensor_signature.create_placeholders_from_signatures(\n        <span class=\"pl-c1\">self</span>._labels_info)\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._call_model_fn(features, labels, model_fn_lib.ModeKeys.<span class=\"pl-c1\">INFER</span>)</pre></div>\n<p>which uses the labels to construct the inference graph, when it probably shouldn't.</p>\n<p>The <code>predict()</code> operation succeeds if it is called without prior calls to <code>fit()</code> or <code>evaluate()</code> as in this case the method</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">create_placeholders_from_signatures</span>(<span class=\"pl-smi\">signatures</span>):\n  <span class=\"pl-k\">if</span> signatures <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">None</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">isinstance</span>(signatures, <span class=\"pl-c1\">dict</span>):\n    <span class=\"pl-k\">return</span> signatures.get_placeholder()\n  <span class=\"pl-k\">return</span> {\n      key: signatures[key].get_placeholder()\n      <span class=\"pl-k\">for</span> key <span class=\"pl-k\">in</span> signatures}</pre></div>\n<p>early exits.</p>\n<h3>Source code / logs</h3>\n<p>Example code that triggers the problem; requires images in <code>img</code> directory. The problem can be resolved by explicitly setting the <code>indices</code> Tensor's shape in <code>input_fn</code> using a <code>tf.reshape</code> to <code>[-1]</code>, but given that it works for training and evaluation and that inference probably shouldn't use the targets at all (especially not from previous runs), I consider this a bug.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> os\n<span class=\"pl-k\">import</span> time\n<span class=\"pl-k\">from</span> typing <span class=\"pl-k\">import</span> Dict, Optional, Any\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib.learn <span class=\"pl-k\">as</span> tfl\n<span class=\"pl-k\">import</span> tensorflow.contrib.slim <span class=\"pl-k\">as</span> slim\n<span class=\"pl-k\">from</span> tensorflow.contrib.slim.python.slim.nets <span class=\"pl-k\">import</span> inception_v3 <span class=\"pl-k\">as</span> inception\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    model_params <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>learning_rate<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">0.001</span>,\n                    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>batch_size<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">16</span>,\n                    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>num_epochs<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">None</span>}\n\n    nn <span class=\"pl-k\">=</span> tfl.Estimator(<span class=\"pl-v\">model_fn</span><span class=\"pl-k\">=</span>model_fn, <span class=\"pl-v\">params</span><span class=\"pl-k\">=</span>model_params)\n    nn.fit(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: input_fn(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>img<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">params</span><span class=\"pl-k\">=</span>model_params), <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)\n    ev <span class=\"pl-k\">=</span> nn.evaluate(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: input_fn(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>img<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">params</span><span class=\"pl-k\">=</span>model_params), <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n    predictions <span class=\"pl-k\">=</span> nn.predict(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: input_fn(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>img<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">params</span><span class=\"pl-k\">=</span>model_params), <span class=\"pl-v\">as_iterable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">model_fn</span>(<span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">targets</span>, <span class=\"pl-smi\">mode</span>, <span class=\"pl-smi\">params</span>):\n    training <span class=\"pl-k\">=</span> (mode <span class=\"pl-k\">==</span> tfl.ModeKeys.<span class=\"pl-c1\">TRAIN</span>)\n    num_classes <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>\n\n    image <span class=\"pl-k\">=</span> features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>image<span class=\"pl-pds\">'</span></span>]\n    image.set_shape((<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">299</span>, <span class=\"pl-c1\">299</span>, <span class=\"pl-c1\">3</span>))\n    targets.set_shape((<span class=\"pl-c1\">None</span>, num_classes))\n\n    <span class=\"pl-k\">with</span> tf.contrib.slim.arg_scope(inception.inception_v3_arg_scope()):\n        _, end_points <span class=\"pl-k\">=</span> inception.inception_v3(image, <span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span>training, <span class=\"pl-v\">num_classes</span><span class=\"pl-k\">=</span>num_classes)\n\n        logits <span class=\"pl-k\">=</span> end_points[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Logits<span class=\"pl-pds\">'</span></span>]\n        predictions <span class=\"pl-k\">=</span> end_points[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Predictions<span class=\"pl-pds\">'</span></span>]\n\n    predictions_dict <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>predictions<span class=\"pl-pds\">'</span></span>: predictions}\n\n    loss <span class=\"pl-k\">=</span> tf.losses.softmax_cross_entropy(targets, logits)\n    eval_metric_ops <span class=\"pl-k\">=</span> {\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rmse<span class=\"pl-pds\">'</span></span>: tf.metrics.root_mean_squared_error(targets, predictions)\n    }\n\n    train_op <span class=\"pl-k\">=</span> tf.contrib.layers.optimize_loss(\n        <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss,\n        <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>tf.contrib.framework.get_global_step(),\n        <span class=\"pl-v\">learning_rate</span><span class=\"pl-k\">=</span>params[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>learning_rate<span class=\"pl-pds\">'</span></span>],\n        <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Adam<span class=\"pl-pds\">'</span></span>)\n\n    <span class=\"pl-k\">return</span> tfl.ModelFnOps(\n        <span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span>mode,\n        <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>predictions_dict,\n        <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss,\n        <span class=\"pl-v\">train_op</span><span class=\"pl-k\">=</span>train_op,\n        <span class=\"pl-v\">eval_metric_ops</span><span class=\"pl-k\">=</span>eval_metric_ops)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">input_fn</span>(<span class=\"pl-smi\">dataset_dir</span>, <span class=\"pl-smi\">params</span>):\n    pattern <span class=\"pl-k\">=</span> os.path.join(dataset_dir, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>*.jpg<span class=\"pl-pds\">'</span></span>)\n    filename_queue <span class=\"pl-k\">=</span> tf.train.string_input_producer(\n        tf.train.match_filenames_once(pattern),\n        <span class=\"pl-v\">num_epochs</span><span class=\"pl-k\">=</span>params[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>num_epochs<span class=\"pl-pds\">'</span></span>])\n\n    image_reader <span class=\"pl-k\">=</span> tf.WholeFileReader()\n    _, image_file <span class=\"pl-k\">=</span> image_reader.read_up_to(filename_queue, <span class=\"pl-c1\">10</span>)\n\n    image_batch <span class=\"pl-k\">=</span> tf.train.shuffle_batch([image_file], params[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>batch_size<span class=\"pl-pds\">'</span></span>], <span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">100</span>,\n                                         <span class=\"pl-v\">num_threads</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>,\n                                         <span class=\"pl-v\">enqueue_many</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n                                         <span class=\"pl-v\">allow_smaller_final_batch</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    images, indices <span class=\"pl-k\">=</span> tf.map_fn(image_fn, image_batch,\n                                <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>(tf.float32, tf.int32),\n                                <span class=\"pl-v\">infer_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n\n    images <span class=\"pl-k\">=</span> tf.reshape(images, [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">299</span>, <span class=\"pl-c1\">299</span>, <span class=\"pl-c1\">3</span>])\n\n    features <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>image<span class=\"pl-pds\">'</span></span>: images}\n    targets <span class=\"pl-k\">=</span> tf.one_hot(<span class=\"pl-v\">indices</span><span class=\"pl-k\">=</span>indices, <span class=\"pl-v\">depth</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    <span class=\"pl-k\">return</span> features, targets\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">image_fn</span>(<span class=\"pl-smi\">image_file</span>):\n    image <span class=\"pl-k\">=</span> tf.image.decode_jpeg(image_file, <span class=\"pl-v\">channels</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n\n    image <span class=\"pl-k\">=</span> tf.expand_dims(image, <span class=\"pl-c1\">0</span>)\n    image <span class=\"pl-k\">=</span> tf.image.resize_bilinear(image, [<span class=\"pl-c1\">299</span>, <span class=\"pl-c1\">299</span>])\n    image <span class=\"pl-k\">=</span> tf.squeeze(image, [<span class=\"pl-c1\">0</span>])\n\n    k <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>\n    image <span class=\"pl-k\">=</span> tf.image.rot90(image, <span class=\"pl-v\">k</span><span class=\"pl-k\">=</span>k, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>rotate<span class=\"pl-pds\">'</span></span>)\n    image <span class=\"pl-k\">=</span> tf.cast(image, tf.float32)\n    image <span class=\"pl-k\">=</span> tf.subtract(tf.divide(image, <span class=\"pl-c1\">128</span>.), <span class=\"pl-c1\">1</span>.)\n\n    <span class=\"pl-k\">return</span> image, k\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    main()</pre></div>\n<p>Full output:</p>\n<pre><code>WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpv1o9e6jk\n2017-05-15 11:55:54.834870: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:901] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n2017-05-15 11:55:54.835292: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 0 with properties: \nname: GeForce GTX 1080 Ti\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.6325\npciBusID 0000:01:00.0\nTotal memory: 10.91GiB\nFree memory: 9.24GiB\n2017-05-15 11:55:54.835305: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 \n2017-05-15 11:55:54.835309: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0:   Y \n2017-05-15 11:55:54.835315: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -&gt; (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:01:00.0)\n2017-05-15 11:56:03.923926: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:247] PoolAllocator: After 1546 get requests, put_count=1200 evicted_count=1000 eviction_rate=0.833333 and unsatisfied allocation rate=0.935317\n2017-05-15 11:56:03.923951: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:259] Raising pool_size_limit_ from 100 to 110\n2017-05-15 11:57:49.153141: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -&gt; (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:01:00.0)\nWARNING:tensorflow:Skipping summary for global_step, must be a float or np.float32.\nWARNING:tensorflow:From untitled.py:18: calling BaseEstimator.predict (from tensorflow.contrib.learn.python.learn.estimators.estimator) with as_iterable is deprecated and will be removed after 2016-12-01.\nInstructions for updating:\nEstimator is decoupled from Scikit Learn interface by moving into\nseparate class SKCompat. Arguments x, y and batch_size are only\navailable in the SKCompat class, Estimator will only accept input_fn.\nExample conversion:\n  est = Estimator(...) -&gt; est = SKCompat(Estimator(...))\nTraceback (most recent call last):\n  File \"untitled.py\", line 97, in &lt;module&gt;\n  File \"untitled.py\", line 18, in main\n    predictions = nn.predict(input_fn=lambda: input_fn('img', params=model_params), as_iterable=False)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py\", line 281, in new_func\n    return func(*args, **kwargs)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 565, in predict\n    as_iterable=as_iterable)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 857, in _infer_model\n    infer_ops = self._get_predict_ops(features)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1187, in _get_predict_ops\n    self._labels_info)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 164, in create_placeholders_from_signatures\n    return signatures.get_placeholder()\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 89, in get_placeholder\n    shape=[None] + list(self.shape[1:]))\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 478, in __iter__\n    raise ValueError(\"Cannot iterate over a shape with unknown rank.\")\nValueError: Cannot iterate over a shape with unknown rank.\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, I did write an input_fn based code based on the Abalone example. Specifically, I replaced the x and y parameters with custom input_fn implementations loading images and applying map_fn to them before batching. This resulted in a batch of unknown tensor shape (None).\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): v1.1.0-1-g10ec24a\nBazel version (if compiling from source): 0.4.5\nCUDA/cuDNN version: 8.0, 5.1\nGPU model and memory: GeForce 1080 Ti\nExact command to reproduce:  running the code\n\nDescribe the problem\nWhen calling predict() after calling fit() or evaluate() on an Estimator instance (an unlikely scenario, but shown in the example), the call crashes with\nTraceback (most recent call last):\n  File \"/home/mmayer/dev/everybag/orientation_network/orientation.py\", line 169, in <module>\n    main()\n  File \"/home/mmayer/dev/everybag/orientation_network/orientation.py\", line 35, in main\n    as_iterable=False)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py\", line 281, in new_func\n    return func(*args, **kwargs)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 565, in predict\n    as_iterable=as_iterable)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 857, in _infer_model\n    infer_ops = self._get_predict_ops(features)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1187, in _get_predict_ops\n    self._labels_info)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 164, in create_placeholders_from_signatures\n    return signatures.get_placeholder()\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 89, in get_placeholder\n    shape=[None] + list(self.shape[1:]))\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 478, in __iter__\n    raise ValueError(\"Cannot iterate over a shape with unknown rank.\")\nValueError: Cannot iterate over a shape with unknown rank.\n\nif self._labels_info of the Estimator has unknown shape (e.g. as an effect of using map_fn on images to obtain both feature and target from them. This is due to\n  def get_placeholder(self):\n    if self.is_sparse:\n      return array_ops.sparse_placeholder(dtype=self.dtype)\n    return array_ops.placeholder(dtype=self.dtype,\n                                 shape=[None] + list(self.shape[1:]))\nin tensor_signature.py, since self.shape[1:] is None.\nThe call comes through\n  def _get_predict_ops(self, features):\n    labels = tensor_signature.create_placeholders_from_signatures(\n        self._labels_info)\n    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.INFER)\nwhich uses the labels to construct the inference graph, when it probably shouldn't.\nThe predict() operation succeeds if it is called without prior calls to fit() or evaluate() as in this case the method\ndef create_placeholders_from_signatures(signatures):\n  if signatures is None:\n    return None\n  if not isinstance(signatures, dict):\n    return signatures.get_placeholder()\n  return {\n      key: signatures[key].get_placeholder()\n      for key in signatures}\nearly exits.\nSource code / logs\nExample code that triggers the problem; requires images in img directory. The problem can be resolved by explicitly setting the indices Tensor's shape in input_fn using a tf.reshape to [-1], but given that it works for training and evaluation and that inference probably shouldn't use the targets at all (especially not from previous runs), I consider this a bug.\nimport os\nimport time\nfrom typing import Dict, Optional, Any\nimport tensorflow as tf\nimport tensorflow.contrib.learn as tfl\nimport tensorflow.contrib.slim as slim\nfrom tensorflow.contrib.slim.python.slim.nets import inception_v3 as inception\n\n\ndef main():\n    model_params = {'learning_rate': 0.001,\n                    'batch_size': 16,\n                    'num_epochs': None}\n\n    nn = tfl.Estimator(model_fn=model_fn, params=model_params)\n    nn.fit(input_fn=lambda: input_fn('img', params=model_params), steps=10)\n    ev = nn.evaluate(input_fn=lambda: input_fn('img', params=model_params), steps=1)\n    predictions = nn.predict(input_fn=lambda: input_fn('img', params=model_params), as_iterable=False)\n\n\ndef model_fn(features, targets, mode, params):\n    training = (mode == tfl.ModeKeys.TRAIN)\n    num_classes = 5\n\n    image = features['image']\n    image.set_shape((None, 299, 299, 3))\n    targets.set_shape((None, num_classes))\n\n    with tf.contrib.slim.arg_scope(inception.inception_v3_arg_scope()):\n        _, end_points = inception.inception_v3(image, is_training=training, num_classes=num_classes)\n\n        logits = end_points['Logits']\n        predictions = end_points['Predictions']\n\n    predictions_dict = {'predictions': predictions}\n\n    loss = tf.losses.softmax_cross_entropy(targets, logits)\n    eval_metric_ops = {\n        'rmse': tf.metrics.root_mean_squared_error(targets, predictions)\n    }\n\n    train_op = tf.contrib.layers.optimize_loss(\n        loss=loss,\n        global_step=tf.contrib.framework.get_global_step(),\n        learning_rate=params['learning_rate'],\n        optimizer='Adam')\n\n    return tfl.ModelFnOps(\n        mode=mode,\n        predictions=predictions_dict,\n        loss=loss,\n        train_op=train_op,\n        eval_metric_ops=eval_metric_ops)\n\n\ndef input_fn(dataset_dir, params):\n    pattern = os.path.join(dataset_dir, '*.jpg')\n    filename_queue = tf.train.string_input_producer(\n        tf.train.match_filenames_once(pattern),\n        num_epochs=params['num_epochs'])\n\n    image_reader = tf.WholeFileReader()\n    _, image_file = image_reader.read_up_to(filename_queue, 10)\n\n    image_batch = tf.train.shuffle_batch([image_file], params['batch_size'], 1000, 100,\n                                         num_threads=2,\n                                         enqueue_many=True,\n                                         allow_smaller_final_batch=True)\n    images, indices = tf.map_fn(image_fn, image_batch,\n                                dtype=(tf.float32, tf.int32),\n                                infer_shape=False)\n\n    images = tf.reshape(images, [-1, 299, 299, 3])\n\n    features = {'image': images}\n    targets = tf.one_hot(indices=indices, depth=5, dtype=tf.float32)\n    return features, targets\n\n\ndef image_fn(image_file):\n    image = tf.image.decode_jpeg(image_file, channels=3)\n\n    image = tf.expand_dims(image, 0)\n    image = tf.image.resize_bilinear(image, [299, 299])\n    image = tf.squeeze(image, [0])\n\n    k = 2\n    image = tf.image.rot90(image, k=k, name='rotate')\n    image = tf.cast(image, tf.float32)\n    image = tf.subtract(tf.divide(image, 128.), 1.)\n\n    return image, k\n\n\nif __name__ == '__main__':\n    main()\nFull output:\nWARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpv1o9e6jk\n2017-05-15 11:55:54.834870: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:901] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n2017-05-15 11:55:54.835292: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 0 with properties: \nname: GeForce GTX 1080 Ti\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.6325\npciBusID 0000:01:00.0\nTotal memory: 10.91GiB\nFree memory: 9.24GiB\n2017-05-15 11:55:54.835305: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 \n2017-05-15 11:55:54.835309: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0:   Y \n2017-05-15 11:55:54.835315: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:01:00.0)\n2017-05-15 11:56:03.923926: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:247] PoolAllocator: After 1546 get requests, put_count=1200 evicted_count=1000 eviction_rate=0.833333 and unsatisfied allocation rate=0.935317\n2017-05-15 11:56:03.923951: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:259] Raising pool_size_limit_ from 100 to 110\n2017-05-15 11:57:49.153141: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:01:00.0)\nWARNING:tensorflow:Skipping summary for global_step, must be a float or np.float32.\nWARNING:tensorflow:From untitled.py:18: calling BaseEstimator.predict (from tensorflow.contrib.learn.python.learn.estimators.estimator) with as_iterable is deprecated and will be removed after 2016-12-01.\nInstructions for updating:\nEstimator is decoupled from Scikit Learn interface by moving into\nseparate class SKCompat. Arguments x, y and batch_size are only\navailable in the SKCompat class, Estimator will only accept input_fn.\nExample conversion:\n  est = Estimator(...) -> est = SKCompat(Estimator(...))\nTraceback (most recent call last):\n  File \"untitled.py\", line 97, in <module>\n  File \"untitled.py\", line 18, in main\n    predictions = nn.predict(input_fn=lambda: input_fn('img', params=model_params), as_iterable=False)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py\", line 281, in new_func\n    return func(*args, **kwargs)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 565, in predict\n    as_iterable=as_iterable)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 857, in _infer_model\n    infer_ops = self._get_predict_ops(features)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1187, in _get_predict_ops\n    self._labels_info)\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 164, in create_placeholders_from_signatures\n    return signatures.get_placeholder()\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 89, in get_placeholder\n    shape=[None] + list(self.shape[1:]))\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 478, in __iter__\n    raise ValueError(\"Cannot iterate over a shape with unknown rank.\")\nValueError: Cannot iterate over a shape with unknown rank.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes, I did write an `input_fn` based code based on the [Abalone](https://www.tensorflow.org/extend/estimators) example. Specifically, I replaced the `x` and `y` parameters with custom `input_fn` implementations loading images and applying `map_fn` to them before batching. This resulted in a batch of unknown tensor shape (`None`).\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: v1.1.0-1-g10ec24a\r\n- **Bazel version (if compiling from source)**: 0.4.5\r\n- **CUDA/cuDNN version**: 8.0, 5.1\r\n- **GPU model and memory**: GeForce 1080 Ti\r\n- **Exact command to reproduce**:  running the code\r\n\r\n### Describe the problem\r\n When calling `predict()` after calling `fit()` or `evaluate()` on an `Estimator` instance (an unlikely scenario, but shown in the example), the call crashes with \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/mmayer/dev/everybag/orientation_network/orientation.py\", line 169, in <module>\r\n    main()\r\n  File \"/home/mmayer/dev/everybag/orientation_network/orientation.py\", line 35, in main\r\n    as_iterable=False)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py\", line 281, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 565, in predict\r\n    as_iterable=as_iterable)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 857, in _infer_model\r\n    infer_ops = self._get_predict_ops(features)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1187, in _get_predict_ops\r\n    self._labels_info)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 164, in create_placeholders_from_signatures\r\n    return signatures.get_placeholder()\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 89, in get_placeholder\r\n    shape=[None] + list(self.shape[1:]))\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 478, in __iter__\r\n    raise ValueError(\"Cannot iterate over a shape with unknown rank.\")\r\nValueError: Cannot iterate over a shape with unknown rank.\r\n```\r\n\r\nif `self._labels_info` of the `Estimator` has unknown shape (e.g. as an effect of using `map_fn` on images to obtain both feature and target from them. This is due to\r\n\r\n```python\r\n  def get_placeholder(self):\r\n    if self.is_sparse:\r\n      return array_ops.sparse_placeholder(dtype=self.dtype)\r\n    return array_ops.placeholder(dtype=self.dtype,\r\n                                 shape=[None] + list(self.shape[1:]))\r\n```\r\n\r\nin `tensor_signature.py`, since `self.shape[1:]` is `None`.\r\n\r\nThe call comes through\r\n\r\n```python\r\n  def _get_predict_ops(self, features):\r\n    labels = tensor_signature.create_placeholders_from_signatures(\r\n        self._labels_info)\r\n    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.INFER)\r\n```\r\n\r\nwhich uses the labels to construct the inference graph, when it probably shouldn't.\r\n\r\nThe `predict()` operation succeeds if it is called without prior calls to `fit()` or `evaluate()` as in this case the method\r\n\r\n```python\r\ndef create_placeholders_from_signatures(signatures):\r\n  if signatures is None:\r\n    return None\r\n  if not isinstance(signatures, dict):\r\n    return signatures.get_placeholder()\r\n  return {\r\n      key: signatures[key].get_placeholder()\r\n      for key in signatures}\r\n```\r\n\r\nearly exits.\r\n\r\n\r\n### Source code / logs\r\n\r\nExample code that triggers the problem; requires images in `img` directory. The problem can be resolved by explicitly setting the `indices` Tensor's shape in `input_fn` using a `tf.reshape` to `[-1]`, but given that it works for training and evaluation and that inference probably shouldn't use the targets at all (especially not from previous runs), I consider this a bug.\r\n\r\n```python\r\nimport os\r\nimport time\r\nfrom typing import Dict, Optional, Any\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.learn as tfl\r\nimport tensorflow.contrib.slim as slim\r\nfrom tensorflow.contrib.slim.python.slim.nets import inception_v3 as inception\r\n\r\n\r\ndef main():\r\n    model_params = {'learning_rate': 0.001,\r\n                    'batch_size': 16,\r\n                    'num_epochs': None}\r\n\r\n    nn = tfl.Estimator(model_fn=model_fn, params=model_params)\r\n    nn.fit(input_fn=lambda: input_fn('img', params=model_params), steps=10)\r\n    ev = nn.evaluate(input_fn=lambda: input_fn('img', params=model_params), steps=1)\r\n    predictions = nn.predict(input_fn=lambda: input_fn('img', params=model_params), as_iterable=False)\r\n\r\n\r\ndef model_fn(features, targets, mode, params):\r\n    training = (mode == tfl.ModeKeys.TRAIN)\r\n    num_classes = 5\r\n\r\n    image = features['image']\r\n    image.set_shape((None, 299, 299, 3))\r\n    targets.set_shape((None, num_classes))\r\n\r\n    with tf.contrib.slim.arg_scope(inception.inception_v3_arg_scope()):\r\n        _, end_points = inception.inception_v3(image, is_training=training, num_classes=num_classes)\r\n\r\n        logits = end_points['Logits']\r\n        predictions = end_points['Predictions']\r\n\r\n    predictions_dict = {'predictions': predictions}\r\n\r\n    loss = tf.losses.softmax_cross_entropy(targets, logits)\r\n    eval_metric_ops = {\r\n        'rmse': tf.metrics.root_mean_squared_error(targets, predictions)\r\n    }\r\n\r\n    train_op = tf.contrib.layers.optimize_loss(\r\n        loss=loss,\r\n        global_step=tf.contrib.framework.get_global_step(),\r\n        learning_rate=params['learning_rate'],\r\n        optimizer='Adam')\r\n\r\n    return tfl.ModelFnOps(\r\n        mode=mode,\r\n        predictions=predictions_dict,\r\n        loss=loss,\r\n        train_op=train_op,\r\n        eval_metric_ops=eval_metric_ops)\r\n\r\n\r\ndef input_fn(dataset_dir, params):\r\n    pattern = os.path.join(dataset_dir, '*.jpg')\r\n    filename_queue = tf.train.string_input_producer(\r\n        tf.train.match_filenames_once(pattern),\r\n        num_epochs=params['num_epochs'])\r\n\r\n    image_reader = tf.WholeFileReader()\r\n    _, image_file = image_reader.read_up_to(filename_queue, 10)\r\n\r\n    image_batch = tf.train.shuffle_batch([image_file], params['batch_size'], 1000, 100,\r\n                                         num_threads=2,\r\n                                         enqueue_many=True,\r\n                                         allow_smaller_final_batch=True)\r\n    images, indices = tf.map_fn(image_fn, image_batch,\r\n                                dtype=(tf.float32, tf.int32),\r\n                                infer_shape=False)\r\n\r\n    images = tf.reshape(images, [-1, 299, 299, 3])\r\n\r\n    features = {'image': images}\r\n    targets = tf.one_hot(indices=indices, depth=5, dtype=tf.float32)\r\n    return features, targets\r\n\r\n\r\ndef image_fn(image_file):\r\n    image = tf.image.decode_jpeg(image_file, channels=3)\r\n\r\n    image = tf.expand_dims(image, 0)\r\n    image = tf.image.resize_bilinear(image, [299, 299])\r\n    image = tf.squeeze(image, [0])\r\n\r\n    k = 2\r\n    image = tf.image.rot90(image, k=k, name='rotate')\r\n    image = tf.cast(image, tf.float32)\r\n    image = tf.subtract(tf.divide(image, 128.), 1.)\r\n\r\n    return image, k\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nFull output:\r\n\r\n```\r\nWARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpv1o9e6jk\r\n2017-05-15 11:55:54.834870: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:901] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\r\n2017-05-15 11:55:54.835292: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 0 with properties: \r\nname: GeForce GTX 1080 Ti\r\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.6325\r\npciBusID 0000:01:00.0\r\nTotal memory: 10.91GiB\r\nFree memory: 9.24GiB\r\n2017-05-15 11:55:54.835305: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 \r\n2017-05-15 11:55:54.835309: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0:   Y \r\n2017-05-15 11:55:54.835315: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:01:00.0)\r\n2017-05-15 11:56:03.923926: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:247] PoolAllocator: After 1546 get requests, put_count=1200 evicted_count=1000 eviction_rate=0.833333 and unsatisfied allocation rate=0.935317\r\n2017-05-15 11:56:03.923951: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:259] Raising pool_size_limit_ from 100 to 110\r\n2017-05-15 11:57:49.153141: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:01:00.0)\r\nWARNING:tensorflow:Skipping summary for global_step, must be a float or np.float32.\r\nWARNING:tensorflow:From untitled.py:18: calling BaseEstimator.predict (from tensorflow.contrib.learn.python.learn.estimators.estimator) with as_iterable is deprecated and will be removed after 2016-12-01.\r\nInstructions for updating:\r\nEstimator is decoupled from Scikit Learn interface by moving into\r\nseparate class SKCompat. Arguments x, y and batch_size are only\r\navailable in the SKCompat class, Estimator will only accept input_fn.\r\nExample conversion:\r\n  est = Estimator(...) -> est = SKCompat(Estimator(...))\r\nTraceback (most recent call last):\r\n  File \"untitled.py\", line 97, in <module>\r\n  File \"untitled.py\", line 18, in main\r\n    predictions = nn.predict(input_fn=lambda: input_fn('img', params=model_params), as_iterable=False)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py\", line 281, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 565, in predict\r\n    as_iterable=as_iterable)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 857, in _infer_model\r\n    infer_ops = self._get_predict_ops(features)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1187, in _get_predict_ops\r\n    self._labels_info)\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 164, in create_placeholders_from_signatures\r\n    return signatures.get_placeholder()\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/tensor_signature.py\", line 89, in get_placeholder\r\n    shape=[None] + list(self.shape[1:]))\r\n  File \"/home/mmayer/.conda/envs/tensorflow/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 478, in __iter__\r\n    raise ValueError(\"Cannot iterate over a shape with unknown rank.\")\r\nValueError: Cannot iterate over a shape with unknown rank.\r\n```"}