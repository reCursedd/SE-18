{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/324827691", "html_url": "https://github.com/tensorflow/tensorflow/issues/12556#issuecomment-324827691", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12556", "id": 324827691, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDgyNzY5MQ==", "user": {"login": "kinsumliu", "id": 8632201, "node_id": "MDQ6VXNlcjg2MzIyMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/8632201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kinsumliu", "html_url": "https://github.com/kinsumliu", "followers_url": "https://api.github.com/users/kinsumliu/followers", "following_url": "https://api.github.com/users/kinsumliu/following{/other_user}", "gists_url": "https://api.github.com/users/kinsumliu/gists{/gist_id}", "starred_url": "https://api.github.com/users/kinsumliu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kinsumliu/subscriptions", "organizations_url": "https://api.github.com/users/kinsumliu/orgs", "repos_url": "https://api.github.com/users/kinsumliu/repos", "events_url": "https://api.github.com/users/kinsumliu/events{/privacy}", "received_events_url": "https://api.github.com/users/kinsumliu/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-25T05:31:41Z", "updated_at": "2017-08-25T05:31:41Z", "author_association": "NONE", "body_html": "<pre><code>import tensorflow as tf\n\nfilename_queue = tf.train.string_input_producer([\"file0.csv\", \"file1.csv\"])\n\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\n\nrecord_defaults = [[1], [1], [1], [1], [1]]\ncol1, col2, col3, col4, col5 = tf.decode_csv(\n    value, record_defaults=record_defaults)\nfeatures = tf.stack([col1, col2, col3, col4])\ntf.summary.scalar(\"label\", col5)\nglobal_step = tf.get_variable('global_step', [],initializer = tf.constant_initializer(0),dtype=tf.int32)\n\nserver = tf.train.Server.create_local_server()\nsummary_op = tf.summary.merge_all()\nsummary_hook = tf.train.SummarySaverHook(save_secs=1,output_dir='.',summary_op=summary_op)\n\nwith tf.train.MonitoredTrainingSession(master=server.target, hooks=[summary_hook], is_chief=True) as sess:\n#     tf.train.start_queue_runners(sess=sess)\n\n    for i in range(30):\n    # Retrieve a single instance:\n        example, label, step = sess.run([features, col5, global_step])\n        print example, label, step\n</code></pre>\n<p>Can you try my code in your environment?</p>\n<ol>\n<li>Create two csv <code>file0.csv</code>, <code>file1.csv</code>. Each entry is just 5 ints separated by \",\". (Example is 1,2,3,4,5)</li>\n<li>Run the code with <code>tf.train.start_queue_runners(sess=sess)</code> commented out and not commented out.</li>\n<li>Check whether <code>events.out.tfevents.XXXXXX</code> is created in the same directory.</li>\n</ol>", "body_text": "import tensorflow as tf\n\nfilename_queue = tf.train.string_input_producer([\"file0.csv\", \"file1.csv\"])\n\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\n\nrecord_defaults = [[1], [1], [1], [1], [1]]\ncol1, col2, col3, col4, col5 = tf.decode_csv(\n    value, record_defaults=record_defaults)\nfeatures = tf.stack([col1, col2, col3, col4])\ntf.summary.scalar(\"label\", col5)\nglobal_step = tf.get_variable('global_step', [],initializer = tf.constant_initializer(0),dtype=tf.int32)\n\nserver = tf.train.Server.create_local_server()\nsummary_op = tf.summary.merge_all()\nsummary_hook = tf.train.SummarySaverHook(save_secs=1,output_dir='.',summary_op=summary_op)\n\nwith tf.train.MonitoredTrainingSession(master=server.target, hooks=[summary_hook], is_chief=True) as sess:\n#     tf.train.start_queue_runners(sess=sess)\n\n    for i in range(30):\n    # Retrieve a single instance:\n        example, label, step = sess.run([features, col5, global_step])\n        print example, label, step\n\nCan you try my code in your environment?\n\nCreate two csv file0.csv, file1.csv. Each entry is just 5 ints separated by \",\". (Example is 1,2,3,4,5)\nRun the code with tf.train.start_queue_runners(sess=sess) commented out and not commented out.\nCheck whether events.out.tfevents.XXXXXX is created in the same directory.", "body": "```\r\nimport tensorflow as tf\r\n\r\nfilename_queue = tf.train.string_input_producer([\"file0.csv\", \"file1.csv\"])\r\n\r\nreader = tf.TextLineReader()\r\nkey, value = reader.read(filename_queue)\r\n\r\nrecord_defaults = [[1], [1], [1], [1], [1]]\r\ncol1, col2, col3, col4, col5 = tf.decode_csv(\r\n    value, record_defaults=record_defaults)\r\nfeatures = tf.stack([col1, col2, col3, col4])\r\ntf.summary.scalar(\"label\", col5)\r\nglobal_step = tf.get_variable('global_step', [],initializer = tf.constant_initializer(0),dtype=tf.int32)\r\n\r\nserver = tf.train.Server.create_local_server()\r\nsummary_op = tf.summary.merge_all()\r\nsummary_hook = tf.train.SummarySaverHook(save_secs=1,output_dir='.',summary_op=summary_op)\r\n\r\nwith tf.train.MonitoredTrainingSession(master=server.target, hooks=[summary_hook], is_chief=True) as sess:\r\n#     tf.train.start_queue_runners(sess=sess)\r\n\r\n    for i in range(30):\r\n    # Retrieve a single instance:\r\n        example, label, step = sess.run([features, col5, global_step])\r\n        print example, label, step\r\n```\r\nCan you try my code in your environment?\r\n\r\n1. Create two csv `file0.csv`, `file1.csv`. Each entry is just 5 ints separated by \",\". (Example is 1,2,3,4,5)\r\n2. Run the code with `tf.train.start_queue_runners(sess=sess)` commented out and not commented out.\r\n3. Check whether `events.out.tfevents.XXXXXX` is created in the same directory."}