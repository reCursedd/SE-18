{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/181524650", "pull_request_review_id": 112177336, "id": 181524650, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTUyNDY1MA==", "diff_hunk": "@@ -0,0 +1,89 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/contrib/tensorrt/plugin/trt_plugin.h\"\n+#include <cassert>\n+#include <cstring>\n+#include \"tensorflow/contrib/tensorrt/plugin/trt_plugin_utils.h\"\n+\n+#if GOOGLE_CUDA\n+#if GOOGLE_TENSORRT\n+\n+namespace tensorflow {\n+namespace tensorrt {\n+\n+PluginTensorRT::PluginTensorRT(const void* serialized_data, size_t length) {\n+  // sanity check.\n+  assert(EncodeOpName(GetPluginName()) !=", "path": "tensorflow/contrib/tensorrt/plugin/trt_plugin.cc", "position": null, "original_position": 29, "commit_id": "82a0695ccf59b6903ba36875f9f335bac710322d", "original_commit_id": "9d1aa895adda8644ddbb55b5e1dbb0797ea6cbb0", "user": {"login": "jjsjann123", "id": 3709243, "node_id": "MDQ6VXNlcjM3MDkyNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsjann123", "html_url": "https://github.com/jjsjann123", "followers_url": "https://api.github.com/users/jjsjann123/followers", "following_url": "https://api.github.com/users/jjsjann123/following{/other_user}", "gists_url": "https://api.github.com/users/jjsjann123/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsjann123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsjann123/subscriptions", "organizations_url": "https://api.github.com/users/jjsjann123/orgs", "repos_url": "https://api.github.com/users/jjsjann123/repos", "events_url": "https://api.github.com/users/jjsjann123/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsjann123/received_events", "type": "User", "site_admin": false}, "body": "The assert does not really matter here, since it has already been checked by PluginFactoryTensorRT::createPlulgin(...)\r\n\r\nI should have used ExtractOpName, since I'm trying to consume the first couple bytes of serializaed_data inserted by the serialize().\r\nI'm doing this simply because of current TRT plugin API. I could wrap it differently to pass serialized_data as (void**) to allow data consumption marked by each deserialize function call.\r\n\r\nPluginTensorRT is an abstract class. We could have multiple child-classes utilizing the same serialize() & parent constructor. Each would have different op name that was throw at the serialized_data.", "created_at": "2018-04-13T22:38:17Z", "updated_at": "2018-05-15T17:09:29Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18433#discussion_r181524650", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18433", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/181524650"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18433#discussion_r181524650"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18433"}}, "body_html": "<p>The assert does not really matter here, since it has already been checked by PluginFactoryTensorRT::createPlulgin(...)</p>\n<p>I should have used ExtractOpName, since I'm trying to consume the first couple bytes of serializaed_data inserted by the serialize().<br>\nI'm doing this simply because of current TRT plugin API. I could wrap it differently to pass serialized_data as (void**) to allow data consumption marked by each deserialize function call.</p>\n<p>PluginTensorRT is an abstract class. We could have multiple child-classes utilizing the same serialize() &amp; parent constructor. Each would have different op name that was throw at the serialized_data.</p>", "body_text": "The assert does not really matter here, since it has already been checked by PluginFactoryTensorRT::createPlulgin(...)\nI should have used ExtractOpName, since I'm trying to consume the first couple bytes of serializaed_data inserted by the serialize().\nI'm doing this simply because of current TRT plugin API. I could wrap it differently to pass serialized_data as (void**) to allow data consumption marked by each deserialize function call.\nPluginTensorRT is an abstract class. We could have multiple child-classes utilizing the same serialize() & parent constructor. Each would have different op name that was throw at the serialized_data.", "in_reply_to_id": 181507848}