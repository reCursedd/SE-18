{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185684900", "pull_request_review_id": 117123009, "id": 185684900, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTY4NDkwMA==", "diff_hunk": "@@ -67,6 +67,7 @@ tf_cuda_library(\n     visibility = [\"//visibility:public\"],\n     deps = [\n         \":trt_logging\",\n+        \":trt_plugins\",", "path": "tensorflow/contrib/tensorrt/BUILD", "position": 4, "original_position": 4, "commit_id": "82a0695ccf59b6903ba36875f9f335bac710322d", "original_commit_id": "9d1aa895adda8644ddbb55b5e1dbb0797ea6cbb0", "user": {"login": "jjsjann123", "id": 3709243, "node_id": "MDQ6VXNlcjM3MDkyNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsjann123", "html_url": "https://github.com/jjsjann123", "followers_url": "https://api.github.com/users/jjsjann123/followers", "following_url": "https://api.github.com/users/jjsjann123/following{/other_user}", "gists_url": "https://api.github.com/users/jjsjann123/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsjann123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsjann123/subscriptions", "organizations_url": "https://api.github.com/users/jjsjann123/orgs", "repos_url": "https://api.github.com/users/jjsjann123/repos", "events_url": "https://api.github.com/users/jjsjann123/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsjann123/received_events", "type": "User", "site_admin": false}, "body": "Was digging a bit more into this. Since we will remove the code, so it's not related anymore.\r\n\r\nI start to think this might not be an issue. Member function from an ordinary class has external linkage and could be accessed in other translation units. http://en.cppreference.com/w/cpp/language/storage_duration \r\nI tested it locally on with gcc. \r\nI have two shared libraries (lib1.so, lib2.so) all linked against a singleton library (libstg.so) . My client application could access the singleton through interfaces exposed in lib1.so & lib2.so. I think dynamic linker takes the first encounter of the getInstance and uses it for both (Windows might behave differently tho).\r\n\r\nOne side thing I caught is that I didn't guard my singleton initialization between threads. Will update that.", "created_at": "2018-05-03T02:05:16Z", "updated_at": "2018-05-15T17:09:29Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18433#discussion_r185684900", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18433", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185684900"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18433#discussion_r185684900"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18433"}}, "body_html": "<p>Was digging a bit more into this. Since we will remove the code, so it's not related anymore.</p>\n<p>I start to think this might not be an issue. Member function from an ordinary class has external linkage and could be accessed in other translation units. <a href=\"http://en.cppreference.com/w/cpp/language/storage_duration\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/storage_duration</a><br>\nI tested it locally on with gcc.<br>\nI have two shared libraries (lib1.so, lib2.so) all linked against a singleton library (libstg.so) . My client application could access the singleton through interfaces exposed in lib1.so &amp; lib2.so. I think dynamic linker takes the first encounter of the getInstance and uses it for both (Windows might behave differently tho).</p>\n<p>One side thing I caught is that I didn't guard my singleton initialization between threads. Will update that.</p>", "body_text": "Was digging a bit more into this. Since we will remove the code, so it's not related anymore.\nI start to think this might not be an issue. Member function from an ordinary class has external linkage and could be accessed in other translation units. http://en.cppreference.com/w/cpp/language/storage_duration\nI tested it locally on with gcc.\nI have two shared libraries (lib1.so, lib2.so) all linked against a singleton library (libstg.so) . My client application could access the singleton through interfaces exposed in lib1.so & lib2.so. I think dynamic linker takes the first encounter of the getInstance and uses it for both (Windows might behave differently tho).\nOne side thing I caught is that I didn't guard my singleton initialization between threads. Will update that.", "in_reply_to_id": 181515507}