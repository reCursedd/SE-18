{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/373007127", "html_url": "https://github.com/tensorflow/tensorflow/issues/17702#issuecomment-373007127", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17702", "id": 373007127, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzAwNzEyNw==", "user": {"login": "dketterer", "id": 26778610, "node_id": "MDQ6VXNlcjI2Nzc4NjEw", "avatar_url": "https://avatars2.githubusercontent.com/u/26778610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dketterer", "html_url": "https://github.com/dketterer", "followers_url": "https://api.github.com/users/dketterer/followers", "following_url": "https://api.github.com/users/dketterer/following{/other_user}", "gists_url": "https://api.github.com/users/dketterer/gists{/gist_id}", "starred_url": "https://api.github.com/users/dketterer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dketterer/subscriptions", "organizations_url": "https://api.github.com/users/dketterer/orgs", "repos_url": "https://api.github.com/users/dketterer/repos", "events_url": "https://api.github.com/users/dketterer/events{/privacy}", "received_events_url": "https://api.github.com/users/dketterer/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-14T12:42:21Z", "updated_at": "2018-03-14T13:47:12Z", "author_association": "NONE", "body_html": "<p>I have the same problem. I build from source against CUDA 8.0 and cuDNN 6.0.<br>\nI used <code>git checkout r1.6</code> before compiling.</p>\n<pre><code>flags = tf.app.flags\nflags.FLAGS.train_dir = '../data/ckpt'\n</code></pre>\n<p><code>print(flags.FLAGS)</code> gives a valid a valid output:</p>\n<pre><code>object_detection.dataset_tools.create_pet_tf_record:\n  --data_dir: Root directory to raw pet dataset.\n    (default: '')\n  --[no]faces_only: If True, generates bounding boxes for pet faces.  Otherwise\n    generates bounding boxes (as well as segmentations for full pet bodies).\n    Note that in the latter case, the resulting files are much larger.\n    (default: 'true')\n  --label_map_path: Path to label map proto\n    (default: 'data/pet_label_map.pbtxt')\n  --mask_type: How to represent instance segmentation masks. Options are \"png\"\n    or \"numerical\".\n    (default: 'png')\n  --output_dir: Path to directory to output TFRecords.\n    (default: '')\n\nobject_detection.train:\n  --[no]clone_on_cpu: Force clones to be deployed on CPU.  Note that even if set\n    to False (allowing ops to run on gpu), some ops may still be run on the CPU\n    if they have no GPU kernel.\n    (default: 'false')\n  --input_config_path: Path to an input_reader_pb2.InputReader config file.\n    (default: '')\n  --master: Name of the TensorFlow master to use.\n    (default: '')\n  --model_config_path: Path to a model_pb2.DetectionModel config file.\n    (default: '')\n  --num_clones: Number of clones to deploy per worker.\n    (default: '1')\n    (an integer)\n  --pipeline_config_path: Path to a pipeline_pb2.TrainEvalPipelineConfig config\n    file. If provided, other configs are ignored\n    (default: '')\n  --ps_tasks: Number of parameter server tasks. If None, does not use a\n    parameter server.\n    (default: '0')\n    (an integer)\n  --task: task id\n    (default: '0')\n    (an integer)\n  --train_config_path: Path to a train_pb2.TrainConfig config file.\n    (default: '')\n  --train_dir: Directory to save the checkpoints and training summaries.\n    (default: '')\n  --worker_replicas: Number of worker+trainer replicas.\n    (default: '1')\n    (an integer)\n\nabsl.flags:\n  --flagfile: Insert flag definitions from the given file into the command line.\n    (default: '')\n  --undefok: comma-separated list of flag names that it is okay to specify on\n    the command line even if the program does not define a flag with that name.\n    IMPORTANT: flags in this list that have arguments MUST use the --flag=value\n    format.\n    (default: '')\n</code></pre>\n<p><code>print(flags.FLAGS.train_dir)</code> gives an error:</p>\n<pre><code>---------------------------------------------------------------------------\nUnrecognizedFlagError                     Traceback (most recent call last)\n&lt;ipython-input-23-d8c0abc56bc4&gt; in &lt;module&gt;()\n----&gt; 1 print(flags.FLAGS.train_dir)\n\n~/workspace/marvin-workspace/.env/lib/python3.6/site-packages/tensorflow/python/platform/flags.py in __getattr__(self, name)\n     82     # a flag.\n     83     if not wrapped.is_parsed():\n---&gt; 84       wrapped(_sys.argv)\n     85     return wrapped.__getattr__(name)\n     86 \n\n~/workspace/marvin-workspace/.env/lib/python3.6/site-packages/absl/flags/_flagvalues.py in __call__(self, argv, known_only)\n    628       suggestions = _helpers.get_flag_suggestions(name, list(self))\n    629       raise _exceptions.UnrecognizedFlagError(\n--&gt; 630           name, value, suggestions=suggestions)\n    631 \n    632     self.mark_as_parsed()\n\nUnrecognizedFlagError: Unknown command line flag 'f'\n</code></pre>\n<p>This example works directly on the command line python interpreter but it does not work in my jupyter notebook</p>\n<pre><code>import tensorflow as tf\nflags = tf.app.flags\nflags.DEFINE_integer(\"age\", 17, \"age of user(default:20)\")\nprint(flags.FLAGS.age)\n</code></pre>", "body_text": "I have the same problem. I build from source against CUDA 8.0 and cuDNN 6.0.\nI used git checkout r1.6 before compiling.\nflags = tf.app.flags\nflags.FLAGS.train_dir = '../data/ckpt'\n\nprint(flags.FLAGS) gives a valid a valid output:\nobject_detection.dataset_tools.create_pet_tf_record:\n  --data_dir: Root directory to raw pet dataset.\n    (default: '')\n  --[no]faces_only: If True, generates bounding boxes for pet faces.  Otherwise\n    generates bounding boxes (as well as segmentations for full pet bodies).\n    Note that in the latter case, the resulting files are much larger.\n    (default: 'true')\n  --label_map_path: Path to label map proto\n    (default: 'data/pet_label_map.pbtxt')\n  --mask_type: How to represent instance segmentation masks. Options are \"png\"\n    or \"numerical\".\n    (default: 'png')\n  --output_dir: Path to directory to output TFRecords.\n    (default: '')\n\nobject_detection.train:\n  --[no]clone_on_cpu: Force clones to be deployed on CPU.  Note that even if set\n    to False (allowing ops to run on gpu), some ops may still be run on the CPU\n    if they have no GPU kernel.\n    (default: 'false')\n  --input_config_path: Path to an input_reader_pb2.InputReader config file.\n    (default: '')\n  --master: Name of the TensorFlow master to use.\n    (default: '')\n  --model_config_path: Path to a model_pb2.DetectionModel config file.\n    (default: '')\n  --num_clones: Number of clones to deploy per worker.\n    (default: '1')\n    (an integer)\n  --pipeline_config_path: Path to a pipeline_pb2.TrainEvalPipelineConfig config\n    file. If provided, other configs are ignored\n    (default: '')\n  --ps_tasks: Number of parameter server tasks. If None, does not use a\n    parameter server.\n    (default: '0')\n    (an integer)\n  --task: task id\n    (default: '0')\n    (an integer)\n  --train_config_path: Path to a train_pb2.TrainConfig config file.\n    (default: '')\n  --train_dir: Directory to save the checkpoints and training summaries.\n    (default: '')\n  --worker_replicas: Number of worker+trainer replicas.\n    (default: '1')\n    (an integer)\n\nabsl.flags:\n  --flagfile: Insert flag definitions from the given file into the command line.\n    (default: '')\n  --undefok: comma-separated list of flag names that it is okay to specify on\n    the command line even if the program does not define a flag with that name.\n    IMPORTANT: flags in this list that have arguments MUST use the --flag=value\n    format.\n    (default: '')\n\nprint(flags.FLAGS.train_dir) gives an error:\n---------------------------------------------------------------------------\nUnrecognizedFlagError                     Traceback (most recent call last)\n<ipython-input-23-d8c0abc56bc4> in <module>()\n----> 1 print(flags.FLAGS.train_dir)\n\n~/workspace/marvin-workspace/.env/lib/python3.6/site-packages/tensorflow/python/platform/flags.py in __getattr__(self, name)\n     82     # a flag.\n     83     if not wrapped.is_parsed():\n---> 84       wrapped(_sys.argv)\n     85     return wrapped.__getattr__(name)\n     86 \n\n~/workspace/marvin-workspace/.env/lib/python3.6/site-packages/absl/flags/_flagvalues.py in __call__(self, argv, known_only)\n    628       suggestions = _helpers.get_flag_suggestions(name, list(self))\n    629       raise _exceptions.UnrecognizedFlagError(\n--> 630           name, value, suggestions=suggestions)\n    631 \n    632     self.mark_as_parsed()\n\nUnrecognizedFlagError: Unknown command line flag 'f'\n\nThis example works directly on the command line python interpreter but it does not work in my jupyter notebook\nimport tensorflow as tf\nflags = tf.app.flags\nflags.DEFINE_integer(\"age\", 17, \"age of user(default:20)\")\nprint(flags.FLAGS.age)", "body": "I have the same problem. I build from source against CUDA 8.0 and cuDNN 6.0.\r\nI used `git checkout r1.6` before compiling.\r\n\r\n```\r\nflags = tf.app.flags\r\nflags.FLAGS.train_dir = '../data/ckpt'\r\n```\r\n\r\n`print(flags.FLAGS)` gives a valid a valid output:\r\n```\r\nobject_detection.dataset_tools.create_pet_tf_record:\r\n  --data_dir: Root directory to raw pet dataset.\r\n    (default: '')\r\n  --[no]faces_only: If True, generates bounding boxes for pet faces.  Otherwise\r\n    generates bounding boxes (as well as segmentations for full pet bodies).\r\n    Note that in the latter case, the resulting files are much larger.\r\n    (default: 'true')\r\n  --label_map_path: Path to label map proto\r\n    (default: 'data/pet_label_map.pbtxt')\r\n  --mask_type: How to represent instance segmentation masks. Options are \"png\"\r\n    or \"numerical\".\r\n    (default: 'png')\r\n  --output_dir: Path to directory to output TFRecords.\r\n    (default: '')\r\n\r\nobject_detection.train:\r\n  --[no]clone_on_cpu: Force clones to be deployed on CPU.  Note that even if set\r\n    to False (allowing ops to run on gpu), some ops may still be run on the CPU\r\n    if they have no GPU kernel.\r\n    (default: 'false')\r\n  --input_config_path: Path to an input_reader_pb2.InputReader config file.\r\n    (default: '')\r\n  --master: Name of the TensorFlow master to use.\r\n    (default: '')\r\n  --model_config_path: Path to a model_pb2.DetectionModel config file.\r\n    (default: '')\r\n  --num_clones: Number of clones to deploy per worker.\r\n    (default: '1')\r\n    (an integer)\r\n  --pipeline_config_path: Path to a pipeline_pb2.TrainEvalPipelineConfig config\r\n    file. If provided, other configs are ignored\r\n    (default: '')\r\n  --ps_tasks: Number of parameter server tasks. If None, does not use a\r\n    parameter server.\r\n    (default: '0')\r\n    (an integer)\r\n  --task: task id\r\n    (default: '0')\r\n    (an integer)\r\n  --train_config_path: Path to a train_pb2.TrainConfig config file.\r\n    (default: '')\r\n  --train_dir: Directory to save the checkpoints and training summaries.\r\n    (default: '')\r\n  --worker_replicas: Number of worker+trainer replicas.\r\n    (default: '1')\r\n    (an integer)\r\n\r\nabsl.flags:\r\n  --flagfile: Insert flag definitions from the given file into the command line.\r\n    (default: '')\r\n  --undefok: comma-separated list of flag names that it is okay to specify on\r\n    the command line even if the program does not define a flag with that name.\r\n    IMPORTANT: flags in this list that have arguments MUST use the --flag=value\r\n    format.\r\n    (default: '')\r\n```\r\n\r\n `print(flags.FLAGS.train_dir)` gives an error:\r\n```\r\n---------------------------------------------------------------------------\r\nUnrecognizedFlagError                     Traceback (most recent call last)\r\n<ipython-input-23-d8c0abc56bc4> in <module>()\r\n----> 1 print(flags.FLAGS.train_dir)\r\n\r\n~/workspace/marvin-workspace/.env/lib/python3.6/site-packages/tensorflow/python/platform/flags.py in __getattr__(self, name)\r\n     82     # a flag.\r\n     83     if not wrapped.is_parsed():\r\n---> 84       wrapped(_sys.argv)\r\n     85     return wrapped.__getattr__(name)\r\n     86 \r\n\r\n~/workspace/marvin-workspace/.env/lib/python3.6/site-packages/absl/flags/_flagvalues.py in __call__(self, argv, known_only)\r\n    628       suggestions = _helpers.get_flag_suggestions(name, list(self))\r\n    629       raise _exceptions.UnrecognizedFlagError(\r\n--> 630           name, value, suggestions=suggestions)\r\n    631 \r\n    632     self.mark_as_parsed()\r\n\r\nUnrecognizedFlagError: Unknown command line flag 'f'\r\n```\r\n\r\nThis example works directly on the command line python interpreter but it does not work in my jupyter notebook\r\n```\r\nimport tensorflow as tf\r\nflags = tf.app.flags\r\nflags.DEFINE_integer(\"age\", 17, \"age of user(default:20)\")\r\nprint(flags.FLAGS.age)\r\n```\r\n\r\n"}