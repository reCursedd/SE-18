{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/373276641", "html_url": "https://github.com/tensorflow/tensorflow/issues/17702#issuecomment-373276641", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17702", "id": 373276641, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzI3NjY0MQ==", "user": {"login": "magicmutal", "id": 17216714, "node_id": "MDQ6VXNlcjE3MjE2NzE0", "avatar_url": "https://avatars2.githubusercontent.com/u/17216714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magicmutal", "html_url": "https://github.com/magicmutal", "followers_url": "https://api.github.com/users/magicmutal/followers", "following_url": "https://api.github.com/users/magicmutal/following{/other_user}", "gists_url": "https://api.github.com/users/magicmutal/gists{/gist_id}", "starred_url": "https://api.github.com/users/magicmutal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magicmutal/subscriptions", "organizations_url": "https://api.github.com/users/magicmutal/orgs", "repos_url": "https://api.github.com/users/magicmutal/repos", "events_url": "https://api.github.com/users/magicmutal/events{/privacy}", "received_events_url": "https://api.github.com/users/magicmutal/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-15T06:42:53Z", "updated_at": "2018-03-15T06:42:53Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23441322\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/PiyushDatta\">@PiyushDatta</a><br>\nThanks a lot. There was a progress!!<br>\nI upgraded Tensorflow to 1.6.0 and ran the codes but I got another error message.</p>\n<p><strong>the first code</strong></p>\n<pre><code>import tensorflow as tf\n\nflags = tf.app.flags\nFLAGS = flags.FLAGS\nflags.DEFINE_float('learning_rate', 0.01, 'Initial learning rate.')\nflags.DEFINE_integer('max_steps', 2000, 'Number of steps to run trainer.')\nflags.DEFINE_integer('hidden1', 128, 'Number of units in hidden layer 1.')\nflags.DEFINE_integer('hidden2', 32, 'Number of units in hidden layer 2.')\nflags.DEFINE_integer('batch_size', 100, 'Batch size. '\n'Must divide evenly into the dataset sizes.')\nflags.DEFINE_string('train_dir', 'data', 'Directory to put the training data.')\nflags.DEFINE_boolean('fake_data', False, 'If true, uses fake data '\n'for unit testing.')\n\nFLAGS = flags.FLAGS\nprint(FLAGS.learning_rate)\n</code></pre>\n<pre><code>--------------------------------------------------------------------------------\nDuplicateFlagError                        Traceback (most recent call last)\n&lt;ipython-input-5-95226cf0354f&gt; in &lt;module&gt;()\n      3 flags = tf.app.flags\n      4 FLAGS = flags.FLAGS\n----&gt; 5 flags.DEFINE_float('learning_rate', 0.01, 'Initial learning rate.')\n      6 flags.DEFINE_integer('max_steps', 2000, 'Number of steps to run trainer.')\n      7 flags.DEFINE_integer('hidden1', 128, 'Number of units in hidden layer 1.')\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\tensorflow\\python\\platform\\flags.py in wrapper(*args, **kwargs)\n     56           'Use of the keyword argument names (flag_name, default_value, '\n     57           'docstring) is deprecated, please use (name, default, help) instead.')\n---&gt; 58     return original_function(*args, **kwargs)\n     59 \n     60   return tf_decorator.make_decorator(original_function, wrapper)\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_float(name, default, help, lower_bound, upper_bound, flag_values, **args)\n    289   parser = _argument_parser.FloatParser(lower_bound, upper_bound)\n    290   serializer = _argument_parser.ArgumentSerializer()\n--&gt; 291   DEFINE(parser, name, default, help, flag_values, serializer, **args)\n    292   _register_bounds_validator_if_needed(parser, name, flag_values=flag_values)\n    293 \n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE(parser, name, default, help, flag_values, serializer, module_name, **args)\n     80   \"\"\"\n     81   DEFINE_flag(_flag.Flag(parser, serializer, name, default, help, **args),\n---&gt; 82               flag_values, module_name)\n     83 \n     84 \n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_flag(flag, flag_values, module_name)\n    102   # Copying the reference to flag_values prevents pychecker warnings.\n    103   fv = flag_values\n--&gt; 104   fv[flag.name] = flag\n    105   # Tell flag_values who's defining the flag.\n    106   if module_name:\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_flagvalues.py in __setitem__(self, name, flag)\n    425         # module is simply being imported a subsequent time.\n    426         return\n--&gt; 427       raise _exceptions.DuplicateFlagError.from_flag(name, self)\n    428     short_name = flag.short_name\n    429     # If a new flag overrides an old one, we need to cleanup the old flag's\n\nDuplicateFlagError: The flag 'learning_rate' is defined twice. First from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py, Second from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py.  Description from first occurrence: Initial learning rate.\n</code></pre>\n<p>the second code</p>\n<pre><code>import tensorflow as tf\n\nflags = tf.app.flags \nFLAGS = tf.app.flags.FLAGS\nflags.DEFINE_float('learning_rate', 0.02, 'Initial learning rate.')\nflags.DEFINE_string('name', 'test', 'The name of our flag')\n# FLAGS.learning_rate = 0.03\n# FLAGS.name = 'Testing'\n\nprint(FLAGS.learning_rate)\nprint(FLAGS.name)\n</code></pre>\n<pre><code>--------------------------------------------------------------------------------\nDuplicateFlagError                        Traceback (most recent call last)\n&lt;ipython-input-6-19d9c11b9a80&gt; in &lt;module&gt;()\n      3 flags = tf.app.flags\n      4 FLAGS = tf.app.flags.FLAGS\n----&gt; 5 flags.DEFINE_float('learning_rate', 0.02, 'Initial learning rate.')\n      6 flags.DEFINE_string('name', 'test', 'The name of our flag')\n      7 # FLAGS.learning_rate = 0.03\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\tensorflow\\python\\platform\\flags.py in wrapper(*args, **kwargs)\n     56           'Use of the keyword argument names (flag_name, default_value, '\n     57           'docstring) is deprecated, please use (name, default, help) instead.')\n---&gt; 58     return original_function(*args, **kwargs)\n     59 \n     60   return tf_decorator.make_decorator(original_function, wrapper)\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_float(name, default, help, lower_bound, upper_bound, flag_values, **args)\n    289   parser = _argument_parser.FloatParser(lower_bound, upper_bound)\n    290   serializer = _argument_parser.ArgumentSerializer()\n--&gt; 291   DEFINE(parser, name, default, help, flag_values, serializer, **args)\n    292   _register_bounds_validator_if_needed(parser, name, flag_values=flag_values)\n    293 \n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE(parser, name, default, help, flag_values, serializer, module_name, **args)\n     80   \"\"\"\n     81   DEFINE_flag(_flag.Flag(parser, serializer, name, default, help, **args),\n---&gt; 82               flag_values, module_name)\n     83 \n     84 \n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_flag(flag, flag_values, module_name)\n    102   # Copying the reference to flag_values prevents pychecker warnings.\n    103   fv = flag_values\n--&gt; 104   fv[flag.name] = flag\n    105   # Tell flag_values who's defining the flag.\n    106   if module_name:\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_flagvalues.py in __setitem__(self, name, flag)\n    425         # module is simply being imported a subsequent time.\n    426         return\n--&gt; 427       raise _exceptions.DuplicateFlagError.from_flag(name, self)\n    428     short_name = flag.short_name\n    429     # If a new flag overrides an old one, we need to cleanup the old flag's\n\nDuplicateFlagError: The flag 'learning_rate' is defined twice. First from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py, Second from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py.  Description from first occurrence: Initial learning rate.\n\n</code></pre>\n<p>Actually, I got same error message.<br>\nShould I edit the ipykernel_launcher.py file??</p>", "body_text": "@PiyushDatta\nThanks a lot. There was a progress!!\nI upgraded Tensorflow to 1.6.0 and ran the codes but I got another error message.\nthe first code\nimport tensorflow as tf\n\nflags = tf.app.flags\nFLAGS = flags.FLAGS\nflags.DEFINE_float('learning_rate', 0.01, 'Initial learning rate.')\nflags.DEFINE_integer('max_steps', 2000, 'Number of steps to run trainer.')\nflags.DEFINE_integer('hidden1', 128, 'Number of units in hidden layer 1.')\nflags.DEFINE_integer('hidden2', 32, 'Number of units in hidden layer 2.')\nflags.DEFINE_integer('batch_size', 100, 'Batch size. '\n'Must divide evenly into the dataset sizes.')\nflags.DEFINE_string('train_dir', 'data', 'Directory to put the training data.')\nflags.DEFINE_boolean('fake_data', False, 'If true, uses fake data '\n'for unit testing.')\n\nFLAGS = flags.FLAGS\nprint(FLAGS.learning_rate)\n\n--------------------------------------------------------------------------------\nDuplicateFlagError                        Traceback (most recent call last)\n<ipython-input-5-95226cf0354f> in <module>()\n      3 flags = tf.app.flags\n      4 FLAGS = flags.FLAGS\n----> 5 flags.DEFINE_float('learning_rate', 0.01, 'Initial learning rate.')\n      6 flags.DEFINE_integer('max_steps', 2000, 'Number of steps to run trainer.')\n      7 flags.DEFINE_integer('hidden1', 128, 'Number of units in hidden layer 1.')\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\tensorflow\\python\\platform\\flags.py in wrapper(*args, **kwargs)\n     56           'Use of the keyword argument names (flag_name, default_value, '\n     57           'docstring) is deprecated, please use (name, default, help) instead.')\n---> 58     return original_function(*args, **kwargs)\n     59 \n     60   return tf_decorator.make_decorator(original_function, wrapper)\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_float(name, default, help, lower_bound, upper_bound, flag_values, **args)\n    289   parser = _argument_parser.FloatParser(lower_bound, upper_bound)\n    290   serializer = _argument_parser.ArgumentSerializer()\n--> 291   DEFINE(parser, name, default, help, flag_values, serializer, **args)\n    292   _register_bounds_validator_if_needed(parser, name, flag_values=flag_values)\n    293 \n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE(parser, name, default, help, flag_values, serializer, module_name, **args)\n     80   \"\"\"\n     81   DEFINE_flag(_flag.Flag(parser, serializer, name, default, help, **args),\n---> 82               flag_values, module_name)\n     83 \n     84 \n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_flag(flag, flag_values, module_name)\n    102   # Copying the reference to flag_values prevents pychecker warnings.\n    103   fv = flag_values\n--> 104   fv[flag.name] = flag\n    105   # Tell flag_values who's defining the flag.\n    106   if module_name:\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_flagvalues.py in __setitem__(self, name, flag)\n    425         # module is simply being imported a subsequent time.\n    426         return\n--> 427       raise _exceptions.DuplicateFlagError.from_flag(name, self)\n    428     short_name = flag.short_name\n    429     # If a new flag overrides an old one, we need to cleanup the old flag's\n\nDuplicateFlagError: The flag 'learning_rate' is defined twice. First from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py, Second from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py.  Description from first occurrence: Initial learning rate.\n\nthe second code\nimport tensorflow as tf\n\nflags = tf.app.flags \nFLAGS = tf.app.flags.FLAGS\nflags.DEFINE_float('learning_rate', 0.02, 'Initial learning rate.')\nflags.DEFINE_string('name', 'test', 'The name of our flag')\n# FLAGS.learning_rate = 0.03\n# FLAGS.name = 'Testing'\n\nprint(FLAGS.learning_rate)\nprint(FLAGS.name)\n\n--------------------------------------------------------------------------------\nDuplicateFlagError                        Traceback (most recent call last)\n<ipython-input-6-19d9c11b9a80> in <module>()\n      3 flags = tf.app.flags\n      4 FLAGS = tf.app.flags.FLAGS\n----> 5 flags.DEFINE_float('learning_rate', 0.02, 'Initial learning rate.')\n      6 flags.DEFINE_string('name', 'test', 'The name of our flag')\n      7 # FLAGS.learning_rate = 0.03\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\tensorflow\\python\\platform\\flags.py in wrapper(*args, **kwargs)\n     56           'Use of the keyword argument names (flag_name, default_value, '\n     57           'docstring) is deprecated, please use (name, default, help) instead.')\n---> 58     return original_function(*args, **kwargs)\n     59 \n     60   return tf_decorator.make_decorator(original_function, wrapper)\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_float(name, default, help, lower_bound, upper_bound, flag_values, **args)\n    289   parser = _argument_parser.FloatParser(lower_bound, upper_bound)\n    290   serializer = _argument_parser.ArgumentSerializer()\n--> 291   DEFINE(parser, name, default, help, flag_values, serializer, **args)\n    292   _register_bounds_validator_if_needed(parser, name, flag_values=flag_values)\n    293 \n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE(parser, name, default, help, flag_values, serializer, module_name, **args)\n     80   \"\"\"\n     81   DEFINE_flag(_flag.Flag(parser, serializer, name, default, help, **args),\n---> 82               flag_values, module_name)\n     83 \n     84 \n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_flag(flag, flag_values, module_name)\n    102   # Copying the reference to flag_values prevents pychecker warnings.\n    103   fv = flag_values\n--> 104   fv[flag.name] = flag\n    105   # Tell flag_values who's defining the flag.\n    106   if module_name:\n\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_flagvalues.py in __setitem__(self, name, flag)\n    425         # module is simply being imported a subsequent time.\n    426         return\n--> 427       raise _exceptions.DuplicateFlagError.from_flag(name, self)\n    428     short_name = flag.short_name\n    429     # If a new flag overrides an old one, we need to cleanup the old flag's\n\nDuplicateFlagError: The flag 'learning_rate' is defined twice. First from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py, Second from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py.  Description from first occurrence: Initial learning rate.\n\n\nActually, I got same error message.\nShould I edit the ipykernel_launcher.py file??", "body": "@PiyushDatta \r\nThanks a lot. There was a progress!!\r\nI upgraded Tensorflow to 1.6.0 and ran the codes but I got another error message.\r\n\r\n**the first code**\r\n```\r\nimport tensorflow as tf\r\n\r\nflags = tf.app.flags\r\nFLAGS = flags.FLAGS\r\nflags.DEFINE_float('learning_rate', 0.01, 'Initial learning rate.')\r\nflags.DEFINE_integer('max_steps', 2000, 'Number of steps to run trainer.')\r\nflags.DEFINE_integer('hidden1', 128, 'Number of units in hidden layer 1.')\r\nflags.DEFINE_integer('hidden2', 32, 'Number of units in hidden layer 2.')\r\nflags.DEFINE_integer('batch_size', 100, 'Batch size. '\r\n'Must divide evenly into the dataset sizes.')\r\nflags.DEFINE_string('train_dir', 'data', 'Directory to put the training data.')\r\nflags.DEFINE_boolean('fake_data', False, 'If true, uses fake data '\r\n'for unit testing.')\r\n\r\nFLAGS = flags.FLAGS\r\nprint(FLAGS.learning_rate)\r\n```\r\n```\r\n--------------------------------------------------------------------------------\r\nDuplicateFlagError                        Traceback (most recent call last)\r\n<ipython-input-5-95226cf0354f> in <module>()\r\n      3 flags = tf.app.flags\r\n      4 FLAGS = flags.FLAGS\r\n----> 5 flags.DEFINE_float('learning_rate', 0.01, 'Initial learning rate.')\r\n      6 flags.DEFINE_integer('max_steps', 2000, 'Number of steps to run trainer.')\r\n      7 flags.DEFINE_integer('hidden1', 128, 'Number of units in hidden layer 1.')\r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\tensorflow\\python\\platform\\flags.py in wrapper(*args, **kwargs)\r\n     56           'Use of the keyword argument names (flag_name, default_value, '\r\n     57           'docstring) is deprecated, please use (name, default, help) instead.')\r\n---> 58     return original_function(*args, **kwargs)\r\n     59 \r\n     60   return tf_decorator.make_decorator(original_function, wrapper)\r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_float(name, default, help, lower_bound, upper_bound, flag_values, **args)\r\n    289   parser = _argument_parser.FloatParser(lower_bound, upper_bound)\r\n    290   serializer = _argument_parser.ArgumentSerializer()\r\n--> 291   DEFINE(parser, name, default, help, flag_values, serializer, **args)\r\n    292   _register_bounds_validator_if_needed(parser, name, flag_values=flag_values)\r\n    293 \r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE(parser, name, default, help, flag_values, serializer, module_name, **args)\r\n     80   \"\"\"\r\n     81   DEFINE_flag(_flag.Flag(parser, serializer, name, default, help, **args),\r\n---> 82               flag_values, module_name)\r\n     83 \r\n     84 \r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_flag(flag, flag_values, module_name)\r\n    102   # Copying the reference to flag_values prevents pychecker warnings.\r\n    103   fv = flag_values\r\n--> 104   fv[flag.name] = flag\r\n    105   # Tell flag_values who's defining the flag.\r\n    106   if module_name:\r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_flagvalues.py in __setitem__(self, name, flag)\r\n    425         # module is simply being imported a subsequent time.\r\n    426         return\r\n--> 427       raise _exceptions.DuplicateFlagError.from_flag(name, self)\r\n    428     short_name = flag.short_name\r\n    429     # If a new flag overrides an old one, we need to cleanup the old flag's\r\n\r\nDuplicateFlagError: The flag 'learning_rate' is defined twice. First from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py, Second from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py.  Description from first occurrence: Initial learning rate.\r\n```\r\n\r\nthe second code\r\n```\r\nimport tensorflow as tf\r\n\r\nflags = tf.app.flags \r\nFLAGS = tf.app.flags.FLAGS\r\nflags.DEFINE_float('learning_rate', 0.02, 'Initial learning rate.')\r\nflags.DEFINE_string('name', 'test', 'The name of our flag')\r\n# FLAGS.learning_rate = 0.03\r\n# FLAGS.name = 'Testing'\r\n\r\nprint(FLAGS.learning_rate)\r\nprint(FLAGS.name)\r\n```\r\n```\r\n--------------------------------------------------------------------------------\r\nDuplicateFlagError                        Traceback (most recent call last)\r\n<ipython-input-6-19d9c11b9a80> in <module>()\r\n      3 flags = tf.app.flags\r\n      4 FLAGS = tf.app.flags.FLAGS\r\n----> 5 flags.DEFINE_float('learning_rate', 0.02, 'Initial learning rate.')\r\n      6 flags.DEFINE_string('name', 'test', 'The name of our flag')\r\n      7 # FLAGS.learning_rate = 0.03\r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\tensorflow\\python\\platform\\flags.py in wrapper(*args, **kwargs)\r\n     56           'Use of the keyword argument names (flag_name, default_value, '\r\n     57           'docstring) is deprecated, please use (name, default, help) instead.')\r\n---> 58     return original_function(*args, **kwargs)\r\n     59 \r\n     60   return tf_decorator.make_decorator(original_function, wrapper)\r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_float(name, default, help, lower_bound, upper_bound, flag_values, **args)\r\n    289   parser = _argument_parser.FloatParser(lower_bound, upper_bound)\r\n    290   serializer = _argument_parser.ArgumentSerializer()\r\n--> 291   DEFINE(parser, name, default, help, flag_values, serializer, **args)\r\n    292   _register_bounds_validator_if_needed(parser, name, flag_values=flag_values)\r\n    293 \r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE(parser, name, default, help, flag_values, serializer, module_name, **args)\r\n     80   \"\"\"\r\n     81   DEFINE_flag(_flag.Flag(parser, serializer, name, default, help, **args),\r\n---> 82               flag_values, module_name)\r\n     83 \r\n     84 \r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_defines.py in DEFINE_flag(flag, flag_values, module_name)\r\n    102   # Copying the reference to flag_values prevents pychecker warnings.\r\n    103   fv = flag_values\r\n--> 104   fv[flag.name] = flag\r\n    105   # Tell flag_values who's defining the flag.\r\n    106   if module_name:\r\n\r\nc:\\users\\jinsu\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\absl\\flags\\_flagvalues.py in __setitem__(self, name, flag)\r\n    425         # module is simply being imported a subsequent time.\r\n    426         return\r\n--> 427       raise _exceptions.DuplicateFlagError.from_flag(name, self)\r\n    428     short_name = flag.short_name\r\n    429     # If a new flag overrides an old one, we need to cleanup the old flag's\r\n\r\nDuplicateFlagError: The flag 'learning_rate' is defined twice. First from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py, Second from C:\\Users\\Jinsu\\python code\\MEMN2N\\ipykernel_launcher.py.  Description from first occurrence: Initial learning rate.\r\n\r\n```\r\n\r\nActually, I got same error message. \r\nShould I edit the ipykernel_launcher.py file??"}