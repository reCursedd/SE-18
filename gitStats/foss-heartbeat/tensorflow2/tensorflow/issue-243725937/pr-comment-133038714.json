{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/133038714", "pull_request_review_id": 56177155, "id": 133038714, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzAzODcxNA==", "diff_hunk": "@@ -0,0 +1,147 @@\n+# Contrib 2017.\n+# ==============================================================================\n+\"\"\"Device function for model-average training.\"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import six\n+\n+from tensorflow.core.framework import node_def_pb2\n+from tensorflow.python.framework import device as pydev\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.training import server_lib\n+from tensorflow.python.training import device_setter\n+\n+\n+class _ModelAverageDeviceChooser(object):\n+  \"\"\"Class to choose devices for Ops in a model average training setup.\n+\n+  This class is not to be used directly by users.  See instead\n+  `model_average_device_setter()` below.\n+  \"\"\"\n+\n+  def __init__(self, ps_tasks, ps_device, worker_device, merge_devices, ps_ops,\n+               ps_strategy):\n+    \"\"\"Create a new `_ReplicaDeviceChooser`.\n+\n+    Args:\n+      ps_tasks: Number of tasks in the `ps` job.\n+      ps_device: String.  Name of the `ps` job.\n+      worker_device: String.  Name of the `worker` job.\n+      merge_devices: Boolean. Set to True to allow merging of device specs.\n+      ps_ops: List of strings representing `Operation` types that need to be\n+        placed on `ps` devices.\n+      ps_strategy: A callable invoked for every ps `Operation` (i.e. matched by\n+        `ps_ops`), that takes the `Operation` and returns the ps task index to\n+        use.\n+    \"\"\"\n+    self._ps_tasks = ps_tasks\n+    self._ps_device = ps_device\n+    self._worker_device = worker_device\n+    self._merge_devices = merge_devices\n+    self._ps_ops = ps_ops\n+    self._ps_strategy = ps_strategy\n+\n+  def device_function(self, op):\n+    \"\"\"Choose a device for `op`.\n+\n+    Args:\n+      op: an `Operation`.\n+\n+    Returns:\n+      The device to use for the `Operation`.\n+    \"\"\"\n+    if not self._merge_devices and op.device:\n+      return op.device\n+\n+    current_device = pydev.DeviceSpec.from_string(op.device or \"\")\n+\n+    node_def = op if isinstance(op, node_def_pb2.NodeDef) else op.node_def\n+    # ma global variables\n+    # TODO(chen meng): only global variables should be placed on ps.\n+    if self._ps_tasks and self._ps_device and node_def.op in self._ps_ops \\\n+       and node_def.name.find('modelAverage') != -1:\n+      device_string = \"%s/task:%d\" % (\n+        self._ps_device, self._ps_strategy(op))\n+      if self._merge_devices:\n+        spec = pydev.DeviceSpec.from_string(device_string)\n+        spec.merge_from(current_device)\n+        return spec.to_string()\n+      else:\n+        return device_string\n+    else:\n+      if self._worker_device:\n+        if not self._merge_devices:\n+          return self._worker_device\n+        spec = pydev.DeviceSpec.from_string(self._worker_device)\n+\n+      if not self._merge_devices:\n+        return \"\"\n+\n+    spec.merge_from(current_device)\n+    return spec.to_string()\n+\n+def model_average_device_setter(ps_tasks=0, ps_device=\"/job:ps\",\n+                          worker_device=\"/job:worker\", merge_devices=True,\n+                          cluster=None, ps_ops=None, ps_strategy=None):\n+  \"\"\"Return a `device function` to use when building a Graph for model average.\n+\n+  There is only one difference between model_average_device_setter and\n+  replica_device_setter : replica_device_setter placed all variables\n+  (including global/local variables) on ps, while in model average, each worker\n+  own its local variables (local model parameters), these local variables\n+  should be placed in each worker.\n+  Args:\n+    ps_tasks: Number of tasks in the `ps` job.  Ignored if `cluster` is\n+      provided.\n+    ps_device: String.  Device of the `ps` job.  If empty no `ps` job is used.\n+      Defaults to `ps`.\n+    worker_device: String.  Device of the `worker` job.  If empty no `worker`\n+      job is used.\n+    merge_devices: `Boolean`. If `True`, merges or only sets a device if the\n+      device constraint is completely unset. merges device specification rather\n+      than overriding them.\n+    cluster: `ClusterDef` proto or `ClusterSpec`.\n+    ps_ops: List of strings representing `Operation` types that need to be\n+      placed on `ps` devices.  If `None`, defaults to `[\"Variable\"]`.\n+    ps_strategy: A callable invoked for every ps `Operation` (i.e. matched by\n+      `ps_ops`), that takes the `Operation` and returns the ps task index to\n+      use.  If `None`, defaults to a round-robin strategy across all `ps`\n+      devices.\n+\n+  Returns:\n+    A function to pass to `tf.device()`.\n+\n+  Raises:\n+    TypeError if `cluster` is not a dictionary or `ClusterDef` protocol buffer,\n+    or if `ps_strategy` is provided but not a callable.\n+  \"\"\"\n+  if cluster is not None:\n+    if isinstance(cluster, server_lib.ClusterSpec):\n+      cluster_spec = cluster.as_dict()\n+    else:\n+      cluster_spec = server_lib.ClusterSpec(cluster).as_dict()\n+    # Get ps_job_name from ps_device by striping \"/job:\".\n+    ps_job_name = pydev.DeviceSpec.from_string(ps_device).job\n+    if ps_job_name not in cluster_spec or cluster_spec[ps_job_name] is None:\n+      return None\n+    ps_tasks = len(cluster_spec[ps_job_name])\n+\n+  if ps_tasks == 0:\n+    return None\n+\n+  if ps_ops is None:\n+    ps_ops = [\"Variable\", \"VariableV2\", \"VarHandleOp\"]\n+\n+  if not merge_devices:\n+    logging.warning(\n+        \"DEPRECATION: It is recommended to set merge_devices=true in \"\n+        \"replica_device_setter\")", "path": "tensorflow/contrib/opt/python/training/model_average_device_setter.py", "position": null, "original_position": 140, "commit_id": "86498c37a589fe38a9464b15b2f39b1576b8cbec", "original_commit_id": "9f7b2fe99e5d63ae14f03d0ab02bbe3839d6021a", "user": {"login": "ry", "id": 80, "node_id": "MDQ6VXNlcjgw", "avatar_url": "https://avatars1.githubusercontent.com/u/80?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ry", "html_url": "https://github.com/ry", "followers_url": "https://api.github.com/users/ry/followers", "following_url": "https://api.github.com/users/ry/following{/other_user}", "gists_url": "https://api.github.com/users/ry/gists{/gist_id}", "starred_url": "https://api.github.com/users/ry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ry/subscriptions", "organizations_url": "https://api.github.com/users/ry/orgs", "repos_url": "https://api.github.com/users/ry/repos", "events_url": "https://api.github.com/users/ry/events{/privacy}", "received_events_url": "https://api.github.com/users/ry/received_events", "type": "User", "site_admin": false}, "body": "Please don't add deprecation warnings to new code. Should one be using `merge_devices` or not? If it should be true, remove the parameter.", "created_at": "2017-08-14T19:24:00Z", "updated_at": "2017-09-28T04:17:13Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11581#discussion_r133038714", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11581", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/133038714"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11581#discussion_r133038714"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11581"}}, "body_html": "<p>Please don't add deprecation warnings to new code. Should one be using <code>merge_devices</code> or not? If it should be true, remove the parameter.</p>", "body_text": "Please don't add deprecation warnings to new code. Should one be using merge_devices or not? If it should be true, remove the parameter."}