{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3246", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3246/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3246/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3246/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3246", "id": 164677030, "node_id": "MDU6SXNzdWUxNjQ2NzcwMzA=", "number": 3246, "title": "tf.matmul() fails when matrices are sparse, even if a_is_sparse is set.  Cryptic error.", "user": {"login": "davidbernat", "id": 5396131, "node_id": "MDQ6VXNlcjUzOTYxMzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5396131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbernat", "html_url": "https://github.com/davidbernat", "followers_url": "https://api.github.com/users/davidbernat/followers", "following_url": "https://api.github.com/users/davidbernat/following{/other_user}", "gists_url": "https://api.github.com/users/davidbernat/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbernat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbernat/subscriptions", "organizations_url": "https://api.github.com/users/davidbernat/orgs", "repos_url": "https://api.github.com/users/davidbernat/repos", "events_url": "https://api.github.com/users/davidbernat/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbernat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-09T17:32:26Z", "updated_at": "2017-06-28T16:19:54Z", "closed_at": "2016-07-11T17:36:53Z", "author_association": "NONE", "body_html": "<p>tf.matmul(A, B, a_is_sparse=True) fails on a = ops.convert_to_tensor(a, name=\"a\") with cryptic error.</p>\n<p>Example code:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\nx = tf.sparse_placeholder(tf.float32)\ny = tf.Variable(tf.random_uniform([9, 9], minval=0.0, maxval=1.0, dtype=tf.float32))\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    indices = np.array([[3, 2], [4, 5]], dtype=np.int64)\n    values = np.array([1.0, 2.0], dtype=np.float32)\n    shape = np.array([9, 9], dtype=np.int64)\n    _ = sess.run(tf.matmul(x, y), feed_dict={\n        x: tf.SparseTensorValue(indices, values, shape)})\n</code></pre>\n<p>Error:<br>\nline 12, in <br>\n_ = sess.run(tf.matmul(x, y, a_is_sparse=True), feed_dict={<br>\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/math_ops.py\", line 1189, in matmul<br>\na = ops.convert_to_tensor(a, name=\"a\")<br>\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 620, in convert_to_tensor<br>\nret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)<br>\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/constant_op.py\", line 179, in _constant_tensor_conversion_function<br>\nreturn constant(v, dtype=dtype, name=name)<br>\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/constant_op.py\", line 162, in constant<br>\ntensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))<br>\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.py\", line 421, in make_tensor_proto<br>\ntensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])<br>\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/util/compat.py\", line 44, in as_bytes<br>\nraise TypeError('Expected binary or unicode string, got %r' % bytes_or_text)<br>\nTypeError: Expected binary or unicode string, got &lt;tensorflow.python.framework.ops.SparseTensor object at 0x11d952d90&gt;</p>\n<p>Is fixed by explicitly converting from sparse to dense tensor before multiplication:</p>\n<pre><code>\nimport tensorflow as tf\nimport numpy as np\n\nx = tf.sparse_placeholder(tf.float32)\nz = tf.sparse_tensor_to_dense(x)\ny = tf.Variable(tf.random_uniform([9, 9], minval=0.0, maxval=1.0, dtype=tf.float32))\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    indices = np.array([[3, 2], [4, 5]], dtype=np.int64)\n    values = np.array([1.0, 2.0], dtype=np.float32)\n    shape = np.array([9, 9], dtype=np.int64)\n    _ = sess.run(tf.matmul(z, y), feed_dict={\n        x: tf.SparseTensorValue(indices, values, shape)})\n</code></pre>", "body_text": "tf.matmul(A, B, a_is_sparse=True) fails on a = ops.convert_to_tensor(a, name=\"a\") with cryptic error.\nExample code:\nimport tensorflow as tf\nimport numpy as np\n\nx = tf.sparse_placeholder(tf.float32)\ny = tf.Variable(tf.random_uniform([9, 9], minval=0.0, maxval=1.0, dtype=tf.float32))\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    indices = np.array([[3, 2], [4, 5]], dtype=np.int64)\n    values = np.array([1.0, 2.0], dtype=np.float32)\n    shape = np.array([9, 9], dtype=np.int64)\n    _ = sess.run(tf.matmul(x, y), feed_dict={\n        x: tf.SparseTensorValue(indices, values, shape)})\n\nError:\nline 12, in \n_ = sess.run(tf.matmul(x, y, a_is_sparse=True), feed_dict={\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/math_ops.py\", line 1189, in matmul\na = ops.convert_to_tensor(a, name=\"a\")\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 620, in convert_to_tensor\nret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/constant_op.py\", line 179, in _constant_tensor_conversion_function\nreturn constant(v, dtype=dtype, name=name)\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/constant_op.py\", line 162, in constant\ntensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.py\", line 421, in make_tensor_proto\ntensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])\nFile \"/usr/local/lib/python2.7/site-packages/tensorflow/python/util/compat.py\", line 44, in as_bytes\nraise TypeError('Expected binary or unicode string, got %r' % bytes_or_text)\nTypeError: Expected binary or unicode string, got <tensorflow.python.framework.ops.SparseTensor object at 0x11d952d90>\nIs fixed by explicitly converting from sparse to dense tensor before multiplication:\n\nimport tensorflow as tf\nimport numpy as np\n\nx = tf.sparse_placeholder(tf.float32)\nz = tf.sparse_tensor_to_dense(x)\ny = tf.Variable(tf.random_uniform([9, 9], minval=0.0, maxval=1.0, dtype=tf.float32))\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    indices = np.array([[3, 2], [4, 5]], dtype=np.int64)\n    values = np.array([1.0, 2.0], dtype=np.float32)\n    shape = np.array([9, 9], dtype=np.int64)\n    _ = sess.run(tf.matmul(z, y), feed_dict={\n        x: tf.SparseTensorValue(indices, values, shape)})", "body": "tf.matmul(A, B, a_is_sparse=True) fails on a = ops.convert_to_tensor(a, name=\"a\") with cryptic error.\n\nExample code:\n\n```\nimport tensorflow as tf\nimport numpy as np\n\nx = tf.sparse_placeholder(tf.float32)\ny = tf.Variable(tf.random_uniform([9, 9], minval=0.0, maxval=1.0, dtype=tf.float32))\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    indices = np.array([[3, 2], [4, 5]], dtype=np.int64)\n    values = np.array([1.0, 2.0], dtype=np.float32)\n    shape = np.array([9, 9], dtype=np.int64)\n    _ = sess.run(tf.matmul(x, y), feed_dict={\n        x: tf.SparseTensorValue(indices, values, shape)})\n```\n\nError:\n line 12, in <module>\n    _ = sess.run(tf.matmul(x, y, a_is_sparse=True), feed_dict={\n  File \"/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/math_ops.py\", line 1189, in matmul\n    a = ops.convert_to_tensor(a, name=\"a\")\n  File \"/usr/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 620, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/constant_op.py\", line 179, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/local/lib/python2.7/site-packages/tensorflow/python/ops/constant_op.py\", line 162, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.py\", line 421, in make_tensor_proto\n    tensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])\n  File \"/usr/local/lib/python2.7/site-packages/tensorflow/python/util/compat.py\", line 44, in as_bytes\n    raise TypeError('Expected binary or unicode string, got %r' % bytes_or_text)\nTypeError: Expected binary or unicode string, got <tensorflow.python.framework.ops.SparseTensor object at 0x11d952d90>\n\nIs fixed by explicitly converting from sparse to dense tensor before multiplication:\n\n```\n\nimport tensorflow as tf\nimport numpy as np\n\nx = tf.sparse_placeholder(tf.float32)\nz = tf.sparse_tensor_to_dense(x)\ny = tf.Variable(tf.random_uniform([9, 9], minval=0.0, maxval=1.0, dtype=tf.float32))\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    indices = np.array([[3, 2], [4, 5]], dtype=np.int64)\n    values = np.array([1.0, 2.0], dtype=np.float32)\n    shape = np.array([9, 9], dtype=np.int64)\n    _ = sess.run(tf.matmul(z, y), feed_dict={\n        x: tf.SparseTensorValue(indices, values, shape)})\n```\n"}