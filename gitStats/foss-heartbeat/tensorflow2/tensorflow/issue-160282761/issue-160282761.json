{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2865", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2865/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2865/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2865/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2865", "id": 160282761, "node_id": "MDU6SXNzdWUxNjAyODI3NjE=", "number": 2865, "title": "Docker GPU CUDA failure fails to be caught by CI", "user": {"login": "rdadolf", "id": 6673605, "node_id": "MDQ6VXNlcjY2NzM2MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6673605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdadolf", "html_url": "https://github.com/rdadolf", "followers_url": "https://api.github.com/users/rdadolf/followers", "following_url": "https://api.github.com/users/rdadolf/following{/other_user}", "gists_url": "https://api.github.com/users/rdadolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdadolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdadolf/subscriptions", "organizations_url": "https://api.github.com/users/rdadolf/orgs", "repos_url": "https://api.github.com/users/rdadolf/repos", "events_url": "https://api.github.com/users/rdadolf/events{/privacy}", "received_events_url": "https://api.github.com/users/rdadolf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2016-06-14T21:00:21Z", "updated_at": "2017-02-09T22:37:10Z", "closed_at": "2016-09-01T06:04:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Two issues:</p>\n<ol>\n<li>It looks like the recent docker images, including <code>r0.9rc0-devel-gpu</code> and <code>nightly-devel-gpu</code> (as of June 14) are failing to load libcuda. The <code>latest-devel-gpu</code> seems to work fine.</li>\n<li>The CI tests seem to be missing these failures and reporting success.</li>\n</ol>\n<h3>Environment info</h3>\n<p><strong>Host:</strong><br>\nUbuntu 15.10<br>\nGTX 980, driver version 352.63<br>\ndocker 1.11.2 build b9f10c9<br>\nusing nvidia-docker 1.0.0.rc.2-1_amd64</p>\n<p><strong>Container images</strong> (a la <a href=\"https://hub.docker.com/r/tensorflow/tensorflow/tags/\" rel=\"nofollow\">https://hub.docker.com/r/tensorflow/tensorflow/tags/</a>):<br>\n<code>r0.9rc0-devel-gpu</code> (bff7093a7715, built ~June 6)<br>\n<code>nightly-devel-gpu</code> (d285481a3e65, built ~June 14)<br>\n<code>latest-devel-gpu</code> (9e12b89c50bb, built ~two months ago)</p>\n<h3>Steps to reproduce</h3>\n<p>(and installed CUDA versions)</p>\n<p>Here's where the fun starts. I'll do this via the docker commands I ran, per container.</p>\n<p>For container <code>r0.9rc0-devel-gpu</code>:</p>\n<pre><code>$ nvidia-docker run -it tensorflow/tensorflow:r0.9rc0-devel-gpu bash -c echo LD_LIBRARY_PATH: $LD_LIBRARY_PATH\nLD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\n\n$ nvidia-docker run -it tensorflow/tensorflow:r0.9rc0-devel-gpu bash -c ls -l /usr/local/nvidia/lib64/libcuda*\nlrwxrwxrwx 1  999  999       41 Jun 13 21:38 /usr/local/nvidia/lib64/libcuda.so.1 -&gt; /usr/local/nvidia/lib64/libcuda.so.352.63\n-rw-r--r-- 2 root root 14283432 Nov  8  2015 /usr/local/nvidia/lib64/libcuda.so.352.63\n\n$ nvidia-docker run -it tensorflow/tensorflow:r0.9rc0-devel-gpu bash -c python -c \"import tensorflow; print tensorflow.__version__\"\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:102] Couldn't open CUDA library libcuda.so. LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: 03e202e5d433\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:347] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.63  Sat Nov  7 21:25:42 PST 2015\nGCC version:  gcc version 4.9.3 (Ubuntu 4.9.3-5ubuntu1) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 352.63.0\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1076] LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1077] failed to find libcuda.so on this system: Failed precondition: could not dlopen DSO: libcuda.so; dlerror: libcuda.so: cannot open shared object file: No such file or directory\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\n0.9.0rc0\n</code></pre>\n<p>For container <code>nightly-devel-gpu</code>:</p>\n<pre><code>$ nvidia-docker run -it tensorflow/tensorflow:nightly-devel-gpu bash -c echo LD_LIBRARY_PATH: $LD_LIBRARY_PATH\nLD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\n\n$ nvidia-docker run -it tensorflow/tensorflow:nightly-devel-gpu bash -c ls -l /usr/local/nvidia/lib64/libcuda*\nlrwxrwxrwx 1  999  999       41 Jun 13 21:38 /usr/local/nvidia/lib64/libcuda.so.1 -&gt; /usr/local/nvidia/lib64/libcuda.so.352.63\n-rw-r--r-- 2 root root 14283432 Nov  8  2015 /usr/local/nvidia/lib64/libcuda.so.352.63\n\n$ nvidia-docker run -it tensorflow/tensorflow:nightly-devel-gpu bash -c python -c \"import tensorflow; print tensorflow.__version__\"\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:102] Couldn't open CUDA library libcuda.so. LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: 1a40427098ed\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:347] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.63  Sat Nov  7 21:25:42 PST 2015\nGCC version:  gcc version 4.9.3 (Ubuntu 4.9.3-5ubuntu1) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 352.63.0\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1077] LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1078] failed to find libcuda.so on this system: Failed precondition: could not dlopen DSO: libcuda.so; dlerror: libcuda.so: cannot open shared object file: No such file or directory\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\n0.8.0\n</code></pre>\n<p>For container <code>latest-devel-gpu</code>:</p>\n<pre><code>$ nvidia-docker run -it tensorflow/tensorflow:latest-devel-gpu bash -c echo LD_LIBRARY_PATH: $LD_LIBRARY_PATH\nLD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\n\n$ nvidia-docker run -it tensorflow/tensorflow:latest-devel-gpu bash -c ls -l /usr/local/nvidia/lib64/libcuda*\nlrwxrwxrwx 1  999  999       41 Jun 13 21:38 /usr/local/nvidia/lib64/libcuda.so.1 -&gt; /usr/local/nvidia/lib64/libcuda.so.352.63\n-rw-r--r-- 2 root root 14283432 Nov  8  2015 /usr/local/nvidia/lib64/libcuda.so.352.63\n\n$ nvidia-docker run -it tensorflow/tensorflow:latest-devel-gpu bash -c python -c \"import tensorflow; print tensorflow.__version__\"\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.8.0\n</code></pre>\n<p>So it looks like the GPU libraries are failing on the first two docker images. What's interesting to note here is also that all three python statements still execute without error. I.E., running <code>print tensorflow.__version__</code> completes (and prints the correct version) and python exits with return code 0, even though the GPU failed to load properly. This is not a bug, since the fallback behavior of running on the CPU should still work. However, it also seems this is causing problems for the CI tests, since it isn't detecting a failure:</p>\n<p>It seemed odd to me that these docker images weren't working, since you use them for CI. So I checked the CI logs, and <em>they're the same</em>. For instance, for the docker CI build for the nightly GPU devel image, this is a snippet from the log showing the output from the seventh test:</p>\n<p>(full source is <a href=\"http://ci.tensorflow.org/view/Nightly/job/nightly-docker-gpu/TF_DOCKER_BUILD_IS_DEVEL=YES,TF_DOCKER_BUILD_TYPE=GPU,label=gpu-linux/lastBuild/consoleFull\" rel=\"nofollow\">http://ci.tensorflow.org/view/Nightly/job/nightly-docker-gpu/TF_DOCKER_BUILD_IS_DEVEL=YES,TF_DOCKER_BUILD_TYPE=GPU,label=gpu-linux/lastBuild/consoleFull</a>)</p>\n<pre><code>I tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:102] Couldn't open CUDA library libcuda.so. LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: 883e6f728cb9\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:347] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.79  Wed Jan 13 16:17:53 PST 2016\nGCC version:  gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.1) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 352.79.0\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1077] LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1078] failed to find libcuda.so on this system: Failed precondition: could not dlopen DSO: libcuda.so; dlerror: libcuda.so: cannot open shared object file: No such file or directory\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\nE tensorflow/stream_executor/cuda/cuda_driver.cc:491] failed call to cuInit: CUDA_ERROR_NO_DEVICE\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:147] no NVIDIA GPU device is present: /dev/nvidia0 does not exist\nI tensorflow/core/common_runtime/gpu/gpu_init.cc:81] No GPU devices available on machine.\n(7 / 7) tutorial test-on-install PASSED: translate_test  (Elapsed time: 8997 ms)\ntutorial test-on-install test(s):  7 passed; 0 failed; 0 skipped\n</code></pre>\n<p>I'm still learning Docker, so it's entirely possible that I've made some blunder here, but it does seem like there's something going on here between the docker images.</p>", "body_text": "Two issues:\n\nIt looks like the recent docker images, including r0.9rc0-devel-gpu and nightly-devel-gpu (as of June 14) are failing to load libcuda. The latest-devel-gpu seems to work fine.\nThe CI tests seem to be missing these failures and reporting success.\n\nEnvironment info\nHost:\nUbuntu 15.10\nGTX 980, driver version 352.63\ndocker 1.11.2 build b9f10c9\nusing nvidia-docker 1.0.0.rc.2-1_amd64\nContainer images (a la https://hub.docker.com/r/tensorflow/tensorflow/tags/):\nr0.9rc0-devel-gpu (bff7093a7715, built ~June 6)\nnightly-devel-gpu (d285481a3e65, built ~June 14)\nlatest-devel-gpu (9e12b89c50bb, built ~two months ago)\nSteps to reproduce\n(and installed CUDA versions)\nHere's where the fun starts. I'll do this via the docker commands I ran, per container.\nFor container r0.9rc0-devel-gpu:\n$ nvidia-docker run -it tensorflow/tensorflow:r0.9rc0-devel-gpu bash -c echo LD_LIBRARY_PATH: $LD_LIBRARY_PATH\nLD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\n\n$ nvidia-docker run -it tensorflow/tensorflow:r0.9rc0-devel-gpu bash -c ls -l /usr/local/nvidia/lib64/libcuda*\nlrwxrwxrwx 1  999  999       41 Jun 13 21:38 /usr/local/nvidia/lib64/libcuda.so.1 -> /usr/local/nvidia/lib64/libcuda.so.352.63\n-rw-r--r-- 2 root root 14283432 Nov  8  2015 /usr/local/nvidia/lib64/libcuda.so.352.63\n\n$ nvidia-docker run -it tensorflow/tensorflow:r0.9rc0-devel-gpu bash -c python -c \"import tensorflow; print tensorflow.__version__\"\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:102] Couldn't open CUDA library libcuda.so. LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: 03e202e5d433\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:347] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.63  Sat Nov  7 21:25:42 PST 2015\nGCC version:  gcc version 4.9.3 (Ubuntu 4.9.3-5ubuntu1) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 352.63.0\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1076] LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1077] failed to find libcuda.so on this system: Failed precondition: could not dlopen DSO: libcuda.so; dlerror: libcuda.so: cannot open shared object file: No such file or directory\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\n0.9.0rc0\n\nFor container nightly-devel-gpu:\n$ nvidia-docker run -it tensorflow/tensorflow:nightly-devel-gpu bash -c echo LD_LIBRARY_PATH: $LD_LIBRARY_PATH\nLD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\n\n$ nvidia-docker run -it tensorflow/tensorflow:nightly-devel-gpu bash -c ls -l /usr/local/nvidia/lib64/libcuda*\nlrwxrwxrwx 1  999  999       41 Jun 13 21:38 /usr/local/nvidia/lib64/libcuda.so.1 -> /usr/local/nvidia/lib64/libcuda.so.352.63\n-rw-r--r-- 2 root root 14283432 Nov  8  2015 /usr/local/nvidia/lib64/libcuda.so.352.63\n\n$ nvidia-docker run -it tensorflow/tensorflow:nightly-devel-gpu bash -c python -c \"import tensorflow; print tensorflow.__version__\"\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:102] Couldn't open CUDA library libcuda.so. LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: 1a40427098ed\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:347] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.63  Sat Nov  7 21:25:42 PST 2015\nGCC version:  gcc version 4.9.3 (Ubuntu 4.9.3-5ubuntu1) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 352.63.0\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1077] LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1078] failed to find libcuda.so on this system: Failed precondition: could not dlopen DSO: libcuda.so; dlerror: libcuda.so: cannot open shared object file: No such file or directory\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\n0.8.0\n\nFor container latest-devel-gpu:\n$ nvidia-docker run -it tensorflow/tensorflow:latest-devel-gpu bash -c echo LD_LIBRARY_PATH: $LD_LIBRARY_PATH\nLD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\n\n$ nvidia-docker run -it tensorflow/tensorflow:latest-devel-gpu bash -c ls -l /usr/local/nvidia/lib64/libcuda*\nlrwxrwxrwx 1  999  999       41 Jun 13 21:38 /usr/local/nvidia/lib64/libcuda.so.1 -> /usr/local/nvidia/lib64/libcuda.so.352.63\n-rw-r--r-- 2 root root 14283432 Nov  8  2015 /usr/local/nvidia/lib64/libcuda.so.352.63\n\n$ nvidia-docker run -it tensorflow/tensorflow:latest-devel-gpu bash -c python -c \"import tensorflow; print tensorflow.__version__\"\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.8.0\n\nSo it looks like the GPU libraries are failing on the first two docker images. What's interesting to note here is also that all three python statements still execute without error. I.E., running print tensorflow.__version__ completes (and prints the correct version) and python exits with return code 0, even though the GPU failed to load properly. This is not a bug, since the fallback behavior of running on the CPU should still work. However, it also seems this is causing problems for the CI tests, since it isn't detecting a failure:\nIt seemed odd to me that these docker images weren't working, since you use them for CI. So I checked the CI logs, and they're the same. For instance, for the docker CI build for the nightly GPU devel image, this is a snippet from the log showing the output from the seventh test:\n(full source is http://ci.tensorflow.org/view/Nightly/job/nightly-docker-gpu/TF_DOCKER_BUILD_IS_DEVEL=YES,TF_DOCKER_BUILD_TYPE=GPU,label=gpu-linux/lastBuild/consoleFull)\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:102] Couldn't open CUDA library libcuda.so. LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: 883e6f728cb9\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:347] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.79  Wed Jan 13 16:17:53 PST 2016\nGCC version:  gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.1) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 352.79.0\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1077] LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1078] failed to find libcuda.so on this system: Failed precondition: could not dlopen DSO: libcuda.so; dlerror: libcuda.so: cannot open shared object file: No such file or directory\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\nE tensorflow/stream_executor/cuda/cuda_driver.cc:491] failed call to cuInit: CUDA_ERROR_NO_DEVICE\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:147] no NVIDIA GPU device is present: /dev/nvidia0 does not exist\nI tensorflow/core/common_runtime/gpu/gpu_init.cc:81] No GPU devices available on machine.\n(7 / 7) tutorial test-on-install PASSED: translate_test  (Elapsed time: 8997 ms)\ntutorial test-on-install test(s):  7 passed; 0 failed; 0 skipped\n\nI'm still learning Docker, so it's entirely possible that I've made some blunder here, but it does seem like there's something going on here between the docker images.", "body": "Two issues:\n1. It looks like the recent docker images, including `r0.9rc0-devel-gpu` and `nightly-devel-gpu` (as of June 14) are failing to load libcuda. The `latest-devel-gpu` seems to work fine.\n2. The CI tests seem to be missing these failures and reporting success.\n### Environment info\n\n**Host:**\n  Ubuntu 15.10\n  GTX 980, driver version 352.63\n  docker 1.11.2 build b9f10c9\n  using nvidia-docker 1.0.0.rc.2-1_amd64\n\n**Container images** (a la https://hub.docker.com/r/tensorflow/tensorflow/tags/):\n  `r0.9rc0-devel-gpu` (bff7093a7715, built ~June 6)\n  `nightly-devel-gpu` (d285481a3e65, built ~June 14)\n  `latest-devel-gpu` (9e12b89c50bb, built ~two months ago)\n### Steps to reproduce\n\n(and installed CUDA versions)\n\nHere's where the fun starts. I'll do this via the docker commands I ran, per container.\n\nFor container `r0.9rc0-devel-gpu`:\n\n```\n$ nvidia-docker run -it tensorflow/tensorflow:r0.9rc0-devel-gpu bash -c echo LD_LIBRARY_PATH: $LD_LIBRARY_PATH\nLD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\n\n$ nvidia-docker run -it tensorflow/tensorflow:r0.9rc0-devel-gpu bash -c ls -l /usr/local/nvidia/lib64/libcuda*\nlrwxrwxrwx 1  999  999       41 Jun 13 21:38 /usr/local/nvidia/lib64/libcuda.so.1 -> /usr/local/nvidia/lib64/libcuda.so.352.63\n-rw-r--r-- 2 root root 14283432 Nov  8  2015 /usr/local/nvidia/lib64/libcuda.so.352.63\n\n$ nvidia-docker run -it tensorflow/tensorflow:r0.9rc0-devel-gpu bash -c python -c \"import tensorflow; print tensorflow.__version__\"\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:102] Couldn't open CUDA library libcuda.so. LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: 03e202e5d433\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:347] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.63  Sat Nov  7 21:25:42 PST 2015\nGCC version:  gcc version 4.9.3 (Ubuntu 4.9.3-5ubuntu1) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 352.63.0\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1076] LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1077] failed to find libcuda.so on this system: Failed precondition: could not dlopen DSO: libcuda.so; dlerror: libcuda.so: cannot open shared object file: No such file or directory\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\n0.9.0rc0\n```\n\nFor container `nightly-devel-gpu`:\n\n```\n$ nvidia-docker run -it tensorflow/tensorflow:nightly-devel-gpu bash -c echo LD_LIBRARY_PATH: $LD_LIBRARY_PATH\nLD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\n\n$ nvidia-docker run -it tensorflow/tensorflow:nightly-devel-gpu bash -c ls -l /usr/local/nvidia/lib64/libcuda*\nlrwxrwxrwx 1  999  999       41 Jun 13 21:38 /usr/local/nvidia/lib64/libcuda.so.1 -> /usr/local/nvidia/lib64/libcuda.so.352.63\n-rw-r--r-- 2 root root 14283432 Nov  8  2015 /usr/local/nvidia/lib64/libcuda.so.352.63\n\n$ nvidia-docker run -it tensorflow/tensorflow:nightly-devel-gpu bash -c python -c \"import tensorflow; print tensorflow.__version__\"\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:102] Couldn't open CUDA library libcuda.so. LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: 1a40427098ed\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:347] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.63  Sat Nov  7 21:25:42 PST 2015\nGCC version:  gcc version 4.9.3 (Ubuntu 4.9.3-5ubuntu1) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 352.63.0\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1077] LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1078] failed to find libcuda.so on this system: Failed precondition: could not dlopen DSO: libcuda.so; dlerror: libcuda.so: cannot open shared object file: No such file or directory\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\n0.8.0\n```\n\nFor container `latest-devel-gpu`:\n\n```\n$ nvidia-docker run -it tensorflow/tensorflow:latest-devel-gpu bash -c echo LD_LIBRARY_PATH: $LD_LIBRARY_PATH\nLD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\n\n$ nvidia-docker run -it tensorflow/tensorflow:latest-devel-gpu bash -c ls -l /usr/local/nvidia/lib64/libcuda*\nlrwxrwxrwx 1  999  999       41 Jun 13 21:38 /usr/local/nvidia/lib64/libcuda.so.1 -> /usr/local/nvidia/lib64/libcuda.so.352.63\n-rw-r--r-- 2 root root 14283432 Nov  8  2015 /usr/local/nvidia/lib64/libcuda.so.352.63\n\n$ nvidia-docker run -it tensorflow/tensorflow:latest-devel-gpu bash -c python -c \"import tensorflow; print tensorflow.__version__\"\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.8.0\n```\n\nSo it looks like the GPU libraries are failing on the first two docker images. What's interesting to note here is also that all three python statements still execute without error. I.E., running `print tensorflow.__version__` completes (and prints the correct version) and python exits with return code 0, even though the GPU failed to load properly. This is not a bug, since the fallback behavior of running on the CPU should still work. However, it also seems this is causing problems for the CI tests, since it isn't detecting a failure:\n\nIt seemed odd to me that these docker images weren't working, since you use them for CI. So I checked the CI logs, and _they're the same_. For instance, for the docker CI build for the nightly GPU devel image, this is a snippet from the log showing the output from the seventh test:\n\n(full source is http://ci.tensorflow.org/view/Nightly/job/nightly-docker-gpu/TF_DOCKER_BUILD_IS_DEVEL=YES,TF_DOCKER_BUILD_TYPE=GPU,label=gpu-linux/lastBuild/consoleFull)\n\n```\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:102] Couldn't open CUDA library libcuda.so. LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:160] hostname: 883e6f728cb9\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:185] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:347] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.79  Wed Jan 13 16:17:53 PST 2016\nGCC version:  gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.1) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] kernel reported version is: 352.79.0\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1077] LD_LIBRARY_PATH: /usr/local/nvidia/lib:/usr/local/nvidia/lib64:\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:1078] failed to find libcuda.so on this system: Failed precondition: could not dlopen DSO: libcuda.so; dlerror: libcuda.so: cannot open shared object file: No such file or directory\nI tensorflow/stream_executor/dso_loader.cc:108] successfully opened CUDA library libcurand.so locally\nE tensorflow/stream_executor/cuda/cuda_driver.cc:491] failed call to cuInit: CUDA_ERROR_NO_DEVICE\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:147] no NVIDIA GPU device is present: /dev/nvidia0 does not exist\nI tensorflow/core/common_runtime/gpu/gpu_init.cc:81] No GPU devices available on machine.\n(7 / 7) tutorial test-on-install PASSED: translate_test  (Elapsed time: 8997 ms)\ntutorial test-on-install test(s):  7 passed; 0 failed; 0 skipped\n```\n\nI'm still learning Docker, so it's entirely possible that I've made some blunder here, but it does seem like there's something going on here between the docker images.\n"}