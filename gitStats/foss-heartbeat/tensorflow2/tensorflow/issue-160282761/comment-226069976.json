{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/226069976", "html_url": "https://github.com/tensorflow/tensorflow/issues/2865#issuecomment-226069976", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2865", "id": 226069976, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjA2OTk3Ng==", "user": {"login": "rdadolf", "id": 6673605, "node_id": "MDQ6VXNlcjY2NzM2MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6673605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdadolf", "html_url": "https://github.com/rdadolf", "followers_url": "https://api.github.com/users/rdadolf/followers", "following_url": "https://api.github.com/users/rdadolf/following{/other_user}", "gists_url": "https://api.github.com/users/rdadolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdadolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdadolf/subscriptions", "organizations_url": "https://api.github.com/users/rdadolf/orgs", "repos_url": "https://api.github.com/users/rdadolf/repos", "events_url": "https://api.github.com/users/rdadolf/events{/privacy}", "received_events_url": "https://api.github.com/users/rdadolf/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-15T02:14:33Z", "updated_at": "2016-06-15T02:14:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ahh, it seems I didn't read that issue carefully enough. I had seen the resolution on cudnn, but the libcuda conclusion was different.</p>\n<blockquote>\n<p>Using the constant is a good idea, hopefully CUDNN_MAJOR is akin to the soname and will only change if the ABI breaks (I will warn the cuDNN team about that). For CUDA, I think it is safe to just hardcode \"1\" because libcuda has always provided backward compatibilty.</p>\n</blockquote>\n<p>I'll submit a pull request to do just that.</p>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"127390667\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/808\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/808/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/808\">#808</a> also had this issue, but the conclusion was to use nvidia-docker (which is not the solution here, since I'm already using it). I should note that adding a <code>RUN ln -s /usr/local/nvidia/lib64/libcuda.so.1 /usr/lib/x86_64-linux-gnu/libcuda.so</code> to the Dockerfile as suggested in that thread <em>does</em> work and is another solution, but specifying the correct soname version in <code>dso_loader.cc</code> solves both and seems to be cleaner. If NVidia ever does break ABI compatibility on libcuda, then we should have a <code>GetLibcudaVesionNumber()</code> function in <code>dso_loader.cc</code> anyways. (And if someone wants to add that during the process of solving <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"160318660\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2873\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2873/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/2873\">#2873</a>, then all the better.)</p>\n<p>The CI tests should really be detecting this, though, and I'm unsure where to start on fixing that.</p>", "body_text": "Ahh, it seems I didn't read that issue carefully enough. I had seen the resolution on cudnn, but the libcuda conclusion was different.\n\nUsing the constant is a good idea, hopefully CUDNN_MAJOR is akin to the soname and will only change if the ABI breaks (I will warn the cuDNN team about that). For CUDA, I think it is safe to just hardcode \"1\" because libcuda has always provided backward compatibilty.\n\nI'll submit a pull request to do just that.\n#808 also had this issue, but the conclusion was to use nvidia-docker (which is not the solution here, since I'm already using it). I should note that adding a RUN ln -s /usr/local/nvidia/lib64/libcuda.so.1 /usr/lib/x86_64-linux-gnu/libcuda.so to the Dockerfile as suggested in that thread does work and is another solution, but specifying the correct soname version in dso_loader.cc solves both and seems to be cleaner. If NVidia ever does break ABI compatibility on libcuda, then we should have a GetLibcudaVesionNumber() function in dso_loader.cc anyways. (And if someone wants to add that during the process of solving #2873, then all the better.)\nThe CI tests should really be detecting this, though, and I'm unsure where to start on fixing that.", "body": "Ahh, it seems I didn't read that issue carefully enough. I had seen the resolution on cudnn, but the libcuda conclusion was different.\n\n> Using the constant is a good idea, hopefully CUDNN_MAJOR is akin to the soname and will only change if the ABI breaks (I will warn the cuDNN team about that). For CUDA, I think it is safe to just hardcode \"1\" because libcuda has always provided backward compatibilty.\n\nI'll submit a pull request to do just that.\n\n#808 also had this issue, but the conclusion was to use nvidia-docker (which is not the solution here, since I'm already using it). I should note that adding a `RUN ln -s /usr/local/nvidia/lib64/libcuda.so.1 /usr/lib/x86_64-linux-gnu/libcuda.so` to the Dockerfile as suggested in that thread _does_ work and is another solution, but specifying the correct soname version in `dso_loader.cc` solves both and seems to be cleaner. If NVidia ever does break ABI compatibility on libcuda, then we should have a `GetLibcudaVesionNumber()` function in `dso_loader.cc` anyways. (And if someone wants to add that during the process of solving #2873, then all the better.)\n\nThe CI tests should really be detecting this, though, and I'm unsure where to start on fixing that.\n"}