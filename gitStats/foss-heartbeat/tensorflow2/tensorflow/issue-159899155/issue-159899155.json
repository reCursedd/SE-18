{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2827", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2827/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2827/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2827/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2827", "id": 159899155, "node_id": "MDU6SXNzdWUxNTk4OTkxNTU=", "number": 2827, "title": "_reverse_seq in rnn.py", "user": {"login": "yanghoonkim", "id": 9985986, "node_id": "MDQ6VXNlcjk5ODU5ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9985986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanghoonkim", "html_url": "https://github.com/yanghoonkim", "followers_url": "https://api.github.com/users/yanghoonkim/followers", "following_url": "https://api.github.com/users/yanghoonkim/following{/other_user}", "gists_url": "https://api.github.com/users/yanghoonkim/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanghoonkim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanghoonkim/subscriptions", "organizations_url": "https://api.github.com/users/yanghoonkim/orgs", "repos_url": "https://api.github.com/users/yanghoonkim/repos", "events_url": "https://api.github.com/users/yanghoonkim/events{/privacy}", "received_events_url": "https://api.github.com/users/yanghoonkim/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-13T08:40:49Z", "updated_at": "2016-06-14T03:19:35Z", "closed_at": "2016-06-14T03:19:35Z", "author_association": "NONE", "body_html": "<p>I can't figure out the usage of _reverse_seq in rnn.py</p>\n<p>followings are my code</p>\n<div class=\"highlight highlight-source-js\"><pre>encoder_inputs <span class=\"pl-k\">=</span> []\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-en\">range</span>(<span class=\"pl-c1\">3</span>)<span class=\"pl-k\">:</span>\n            <span class=\"pl-smi\">encoder_inputs</span>.<span class=\"pl-c1\">append</span>(<span class=\"pl-smi\">tf</span>.<span class=\"pl-en\">placeholder</span>(<span class=\"pl-smi\">tf</span>.<span class=\"pl-smi\">int32</span>, shape <span class=\"pl-k\">=</span> [None,<span class=\"pl-c1\">3</span>], name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>encoder{}<span class=\"pl-pds\">'</span></span>.<span class=\"pl-en\">format</span>(i)))\n\ntrain_encoder_batches, train_decoder_batches, train_target_batches, train_target_weight_batches <span class=\"pl-k\">=</span> train_data\ninput_feed <span class=\"pl-k\">=</span> <span class=\"pl-en\">dict</span>()\nencoder_data <span class=\"pl-k\">=</span> <span class=\"pl-smi\">np</span>.<span class=\"pl-en\">array</span>([[[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>],[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>]],[[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>],[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>]],[[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>],[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>]]])\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-en\">xrange</span>(<span class=\"pl-c1\">3</span>)<span class=\"pl-k\">:</span>\n    input_feed[encoder_inputs[i].<span class=\"pl-c1\">name</span>] <span class=\"pl-k\">=</span> encoder_data[i]\n\noutput_feed <span class=\"pl-k\">=</span> [<span class=\"pl-smi\">rnn</span>.<span class=\"pl-en\">_reverse_seq</span>(encoder_inputs,<span class=\"pl-smi\">tf</span>.<span class=\"pl-en\">Variable</span>([<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>]))]\nprint <span class=\"pl-smi\">np</span>.<span class=\"pl-en\">asarray</span>([[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>],[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>]])\n\nsess <span class=\"pl-k\">=</span> <span class=\"pl-smi\">tf</span>.<span class=\"pl-en\">InteractiveSession</span>()\nprint <span class=\"pl-smi\">sess</span>.<span class=\"pl-en\">run</span>(output_feed,input_feed)</pre></div>\n<p>tf.Variable([2,2]) means that (batch size : 2) each length of elements in batch is 2<br>\ndata : vector size 3, total length 3, useful length 2</p>\n<p>errors are as follows :</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">--------------------------------------------------------------------------</span><span class=\"pl-k\">-</span>\n<span class=\"pl-c1\">TypeError</span>                                 <span class=\"pl-en\">Traceback</span> (most recent call last)\n<span class=\"pl-k\">&lt;</span>ipython<span class=\"pl-k\">-</span>input<span class=\"pl-k\">-</span><span class=\"pl-c1\">28</span><span class=\"pl-k\">-</span>b8ae6f496e18<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">module</span><span class=\"pl-k\">&gt;</span>()\n      <span class=\"pl-c1\">1</span> sess <span class=\"pl-k\">=</span> <span class=\"pl-smi\">tf</span>.<span class=\"pl-en\">InteractiveSession</span>()\n<span class=\"pl-k\">--</span><span class=\"pl-c\"><span class=\"pl-c\">--&gt;</span></span> <span class=\"pl-c1\">2</span> print <span class=\"pl-smi\">sess</span>.<span class=\"pl-en\">run</span>(output_feed,input_feed)\n\n<span class=\"pl-sr\"><span class=\"pl-pds\">/</span>opt<span class=\"pl-pds\">/</span></span>anaconda2<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python2.<span class=\"pl-ii\">7</span><span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>client<span class=\"pl-k\">/</span><span class=\"pl-smi\">session</span>.<span class=\"pl-smi\">pyc</span> <span class=\"pl-k\">in</span> <span class=\"pl-en\">run</span>(self, fetches, feed_dict, options, run_metadata)\n    <span class=\"pl-c1\">338</span>     try<span class=\"pl-k\">:</span>\n    <span class=\"pl-c1\">339</span>       result <span class=\"pl-k\">=</span> <span class=\"pl-smi\">self</span>.<span class=\"pl-en\">_run</span>(None, fetches, feed_dict, options_ptr,\n<span class=\"pl-c\"><span class=\"pl-c\">--&gt;</span></span> <span class=\"pl-c1\">340</span>                          run_metadata_ptr)\n    <span class=\"pl-c1\">341</span>       <span class=\"pl-k\">if</span> run_metadata<span class=\"pl-k\">:</span>\n    <span class=\"pl-c1\">342</span>         proto_data <span class=\"pl-k\">=</span> <span class=\"pl-smi\">tf_session</span>.<span class=\"pl-en\">TF_GetBuffer</span>(run_metadata_ptr)\n\n<span class=\"pl-sr\"><span class=\"pl-pds\">/</span>opt<span class=\"pl-pds\">/</span></span>anaconda2<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python2.<span class=\"pl-ii\">7</span><span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>client<span class=\"pl-k\">/</span><span class=\"pl-smi\">session</span>.<span class=\"pl-smi\">pyc</span> <span class=\"pl-k\">in</span> <span class=\"pl-en\">_run</span>(self, handle, fetches, feed_dict, options, run_metadata)\n    <span class=\"pl-c1\">521</span> \n    <span class=\"pl-c1\">522</span>     # Validate and <span class=\"pl-c1\">process</span> fetches.\n<span class=\"pl-c\"><span class=\"pl-c\">--&gt;</span></span> <span class=\"pl-c1\">523</span>     processed_fetches <span class=\"pl-k\">=</span> <span class=\"pl-smi\">self</span>.<span class=\"pl-en\">_process_fetches</span>(fetches)\n    <span class=\"pl-c1\">524</span>     unique_fetches <span class=\"pl-k\">=</span> processed_fetches[<span class=\"pl-c1\">0</span>]\n    <span class=\"pl-c1\">525</span>     target_list <span class=\"pl-k\">=</span> processed_fetches[<span class=\"pl-c1\">1</span>]\n\n<span class=\"pl-sr\"><span class=\"pl-pds\">/</span>opt<span class=\"pl-pds\">/</span></span>anaconda2<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python2.<span class=\"pl-ii\">7</span><span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>client<span class=\"pl-k\">/</span><span class=\"pl-smi\">session</span>.<span class=\"pl-smi\">pyc</span> <span class=\"pl-k\">in</span> <span class=\"pl-en\">_process_fetches</span>(self, fetches)\n    <span class=\"pl-c1\">491</span>           raise <span class=\"pl-c1\">TypeError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Fetch argument %r of %r has invalid type %r, <span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-c1\">492</span>                           <span class=\"pl-s\"><span class=\"pl-pds\">'</span>must be a string or Tensor. (%s)<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">--&gt;</span></span> <span class=\"pl-c1\">493</span>                           <span class=\"pl-k\">%</span> (subfetch, fetch, <span class=\"pl-en\">type</span>(subfetch), <span class=\"pl-en\">str</span>(e)))\n    <span class=\"pl-c1\">494</span>         except ValueError as e<span class=\"pl-k\">:</span>\n    <span class=\"pl-c1\">495</span>           raise <span class=\"pl-en\">ValueError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Fetch argument %r of %r cannot be interpreted as a <span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-c1\">TypeError</span><span class=\"pl-k\">:</span> Fetch argument [<span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">tf</span>.<span class=\"pl-smi\">Tensor</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>unpack_4:0<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>) dtype<span class=\"pl-k\">=</span>int32<span class=\"pl-k\">&gt;</span>, <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">tf</span>.<span class=\"pl-smi\">Tensor</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>unpack_4:1<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>) dtype<span class=\"pl-k\">=</span>int32<span class=\"pl-k\">&gt;</span>, <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">tf</span>.<span class=\"pl-smi\">Tensor</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>unpack_4:2<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>) dtype<span class=\"pl-k\">=</span>int32<span class=\"pl-k\">&gt;</span>] <span class=\"pl-k\">of</span> [<span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">tf</span>.<span class=\"pl-smi\">Tensor</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>unpack_4:0<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>) dtype<span class=\"pl-k\">=</span>int32<span class=\"pl-k\">&gt;</span>, <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">tf</span>.<span class=\"pl-smi\">Tensor</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>unpack_4:1<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>) dtype<span class=\"pl-k\">=</span>int32<span class=\"pl-k\">&gt;</span>, <span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">tf</span>.<span class=\"pl-smi\">Tensor</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>unpack_4:2<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>) dtype<span class=\"pl-k\">=</span>int32<span class=\"pl-k\">&gt;</span>] has invalid type <span class=\"pl-k\">&lt;</span>type <span class=\"pl-s\"><span class=\"pl-pds\">'</span>list<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>, must be a string or Tensor. (Can not convert a list into a Tensor or Operation.)</pre></div>", "body_text": "I can't figure out the usage of _reverse_seq in rnn.py\nfollowings are my code\nencoder_inputs = []\nfor i in range(3):\n            encoder_inputs.append(tf.placeholder(tf.int32, shape = [None,3], name = 'encoder{}'.format(i)))\n\ntrain_encoder_batches, train_decoder_batches, train_target_batches, train_target_weight_batches = train_data\ninput_feed = dict()\nencoder_data = np.array([[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]],[[0,0,0],[0,0,0]]])\nfor i in xrange(3):\n    input_feed[encoder_inputs[i].name] = encoder_data[i]\n\noutput_feed = [rnn._reverse_seq(encoder_inputs,tf.Variable([2,2]))]\nprint np.asarray([[1,2,3],[1,2,3]])\n\nsess = tf.InteractiveSession()\nprint sess.run(output_feed,input_feed)\ntf.Variable([2,2]) means that (batch size : 2) each length of elements in batch is 2\ndata : vector size 3, total length 3, useful length 2\nerrors are as follows :\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-28-b8ae6f496e18> in <module>()\n      1 sess = tf.InteractiveSession()\n----> 2 print sess.run(output_feed,input_feed)\n\n/opt/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in run(self, fetches, feed_dict, options, run_metadata)\n    338     try:\n    339       result = self._run(None, fetches, feed_dict, options_ptr,\n--> 340                          run_metadata_ptr)\n    341       if run_metadata:\n    342         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\n/opt/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _run(self, handle, fetches, feed_dict, options, run_metadata)\n    521 \n    522     # Validate and process fetches.\n--> 523     processed_fetches = self._process_fetches(fetches)\n    524     unique_fetches = processed_fetches[0]\n    525     target_list = processed_fetches[1]\n\n/opt/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _process_fetches(self, fetches)\n    491           raise TypeError('Fetch argument %r of %r has invalid type %r, '\n    492                           'must be a string or Tensor. (%s)'\n--> 493                           % (subfetch, fetch, type(subfetch), str(e)))\n    494         except ValueError as e:\n    495           raise ValueError('Fetch argument %r of %r cannot be interpreted as a '\n\nTypeError: Fetch argument [<tf.Tensor 'unpack_4:0' shape=(2, 3) dtype=int32>, <tf.Tensor 'unpack_4:1' shape=(2, 3) dtype=int32>, <tf.Tensor 'unpack_4:2' shape=(2, 3) dtype=int32>] of [<tf.Tensor 'unpack_4:0' shape=(2, 3) dtype=int32>, <tf.Tensor 'unpack_4:1' shape=(2, 3) dtype=int32>, <tf.Tensor 'unpack_4:2' shape=(2, 3) dtype=int32>] has invalid type <type 'list'>, must be a string or Tensor. (Can not convert a list into a Tensor or Operation.)", "body": "I can't figure out the usage of _reverse_seq in rnn.py\n\nfollowings are my code\n\n``` javascript\n\nencoder_inputs = []\nfor i in range(3):\n            encoder_inputs.append(tf.placeholder(tf.int32, shape = [None,3], name = 'encoder{}'.format(i)))\n\ntrain_encoder_batches, train_decoder_batches, train_target_batches, train_target_weight_batches = train_data\ninput_feed = dict()\nencoder_data = np.array([[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]],[[0,0,0],[0,0,0]]])\nfor i in xrange(3):\n    input_feed[encoder_inputs[i].name] = encoder_data[i]\n\noutput_feed = [rnn._reverse_seq(encoder_inputs,tf.Variable([2,2]))]\nprint np.asarray([[1,2,3],[1,2,3]])\n\nsess = tf.InteractiveSession()\nprint sess.run(output_feed,input_feed)\n```\n\ntf.Variable([2,2]) means that (batch size : 2) each length of elements in batch is 2 \ndata : vector size 3, total length 3, useful length 2\n\nerrors are as follows :\n\n``` javascript\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-28-b8ae6f496e18> in <module>()\n      1 sess = tf.InteractiveSession()\n----> 2 print sess.run(output_feed,input_feed)\n\n/opt/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in run(self, fetches, feed_dict, options, run_metadata)\n    338     try:\n    339       result = self._run(None, fetches, feed_dict, options_ptr,\n--> 340                          run_metadata_ptr)\n    341       if run_metadata:\n    342         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\n/opt/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _run(self, handle, fetches, feed_dict, options, run_metadata)\n    521 \n    522     # Validate and process fetches.\n--> 523     processed_fetches = self._process_fetches(fetches)\n    524     unique_fetches = processed_fetches[0]\n    525     target_list = processed_fetches[1]\n\n/opt/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _process_fetches(self, fetches)\n    491           raise TypeError('Fetch argument %r of %r has invalid type %r, '\n    492                           'must be a string or Tensor. (%s)'\n--> 493                           % (subfetch, fetch, type(subfetch), str(e)))\n    494         except ValueError as e:\n    495           raise ValueError('Fetch argument %r of %r cannot be interpreted as a '\n\nTypeError: Fetch argument [<tf.Tensor 'unpack_4:0' shape=(2, 3) dtype=int32>, <tf.Tensor 'unpack_4:1' shape=(2, 3) dtype=int32>, <tf.Tensor 'unpack_4:2' shape=(2, 3) dtype=int32>] of [<tf.Tensor 'unpack_4:0' shape=(2, 3) dtype=int32>, <tf.Tensor 'unpack_4:1' shape=(2, 3) dtype=int32>, <tf.Tensor 'unpack_4:2' shape=(2, 3) dtype=int32>] has invalid type <type 'list'>, must be a string or Tensor. (Can not convert a list into a Tensor or Operation.)\n```\n"}