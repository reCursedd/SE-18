{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302826884", "html_url": "https://github.com/tensorflow/tensorflow/issues/8220#issuecomment-302826884", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8220", "id": 302826884, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjgyNjg4NA==", "user": {"login": "suharshs", "id": 1450614, "node_id": "MDQ6VXNlcjE0NTA2MTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1450614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suharshs", "html_url": "https://github.com/suharshs", "followers_url": "https://api.github.com/users/suharshs/followers", "following_url": "https://api.github.com/users/suharshs/following{/other_user}", "gists_url": "https://api.github.com/users/suharshs/gists{/gist_id}", "starred_url": "https://api.github.com/users/suharshs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suharshs/subscriptions", "organizations_url": "https://api.github.com/users/suharshs/orgs", "repos_url": "https://api.github.com/users/suharshs/repos", "events_url": "https://api.github.com/users/suharshs/events{/privacy}", "received_events_url": "https://api.github.com/users/suharshs/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-19T22:39:42Z", "updated_at": "2017-05-19T22:39:42Z", "author_association": "MEMBER", "body_html": "<p>The python multiprocessing package seems to just call fork when creating a child process. This cannot work when the child process calls async code (i.e TensorFlow is multithreaded). From the posix <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/fork.html\" rel=\"nofollow\">spec</a> for fork:</p>\n<blockquote>\n<p>If a multi-threaded process calls fork(), the new process shall contain a replica of the calling thread and its entire address space, possibly including the states of mutexes and other resources. Consequently, to avoid errors, the child process may only execute async-signal-safe operations until such time as one of the exec functions is called.</p>\n</blockquote>\n<p>So long story short, don't use python multiprocessing for anything non-trivial and expect it to work :)</p>", "body_text": "The python multiprocessing package seems to just call fork when creating a child process. This cannot work when the child process calls async code (i.e TensorFlow is multithreaded). From the posix spec for fork:\n\nIf a multi-threaded process calls fork(), the new process shall contain a replica of the calling thread and its entire address space, possibly including the states of mutexes and other resources. Consequently, to avoid errors, the child process may only execute async-signal-safe operations until such time as one of the exec functions is called.\n\nSo long story short, don't use python multiprocessing for anything non-trivial and expect it to work :)", "body": "The python multiprocessing package seems to just call fork when creating a child process. This cannot work when the child process calls async code (i.e TensorFlow is multithreaded). From the posix [spec](http://pubs.opengroup.org/onlinepubs/009695399/functions/fork.html) for fork:\r\n\r\n>  If a multi-threaded process calls fork(), the new process shall contain a replica of the calling thread and its entire address space, possibly including the states of mutexes and other resources. Consequently, to avoid errors, the child process may only execute async-signal-safe operations until such time as one of the exec functions is called.\r\n\r\nSo long story short, don't use python multiprocessing for anything non-trivial and expect it to work :)\r\n"}