{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/364879715", "html_url": "https://github.com/tensorflow/tensorflow/issues/16942#issuecomment-364879715", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16942", "id": 364879715, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDg3OTcxNQ==", "user": {"login": "Joshuaalbert", "id": 14807032, "node_id": "MDQ6VXNlcjE0ODA3MDMy", "avatar_url": "https://avatars2.githubusercontent.com/u/14807032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Joshuaalbert", "html_url": "https://github.com/Joshuaalbert", "followers_url": "https://api.github.com/users/Joshuaalbert/followers", "following_url": "https://api.github.com/users/Joshuaalbert/following{/other_user}", "gists_url": "https://api.github.com/users/Joshuaalbert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Joshuaalbert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Joshuaalbert/subscriptions", "organizations_url": "https://api.github.com/users/Joshuaalbert/orgs", "repos_url": "https://api.github.com/users/Joshuaalbert/repos", "events_url": "https://api.github.com/users/Joshuaalbert/events{/privacy}", "received_events_url": "https://api.github.com/users/Joshuaalbert/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-12T10:14:55Z", "updated_at": "2018-02-12T10:15:59Z", "author_association": "NONE", "body_html": "<p>I find the same behaviour.<br>\nI include a slight modified copy-pastable MVCE.<br>\nI get 9s and 3 s with the below on CPU.</p>\n<h2>MVCE</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> timeit <span class=\"pl-k\">import</span> default_timer\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">func</span>(<span class=\"pl-smi\">nums</span>):\n    <span class=\"pl-k\">return</span> tf.reduce_sum(tf.multiply(tf.add(nums,<span class=\"pl-c1\">1</span>), nums))\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">v1</span>():\n    graph <span class=\"pl-k\">=</span> tf.Graph()\n    <span class=\"pl-k\">with</span> graph.as_default(), tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/cpu:0<span class=\"pl-pds\">'</span></span>):\n        nums <span class=\"pl-k\">=</span> tf.range(<span class=\"pl-c1\">200000000</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n        dot_product <span class=\"pl-k\">=</span> func(nums)\n    <span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>graph) <span class=\"pl-k\">as</span> sess:\n        <span class=\"pl-c1\">print</span>(sess.run(dot_product))\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">v2</span>():\n    graph <span class=\"pl-k\">=</span> tf.Graph()\n    <span class=\"pl-k\">with</span> graph.as_default(), tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/cpu:0<span class=\"pl-pds\">'</span></span>):\n        arr <span class=\"pl-k\">=</span> tf.TensorArray(<span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n        nums <span class=\"pl-k\">=</span> tf.range(<span class=\"pl-c1\">200000000</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n        i <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">0</span>)\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">body</span>(<span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">arr</span>):\n            arr <span class=\"pl-k\">=</span> arr.write(i, func(nums))\n            <span class=\"pl-k\">return</span> i<span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span>, arr\n        i, arr <span class=\"pl-k\">=</span> tf.while_loop(\n            <span class=\"pl-v\">cond</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">x</span>: i <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">1</span>,\n            <span class=\"pl-v\">body</span><span class=\"pl-k\">=</span>body,\n            <span class=\"pl-v\">loop_vars</span><span class=\"pl-k\">=</span>[i, arr],\n            <span class=\"pl-v\">parallel_iterations</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n        dot_product <span class=\"pl-k\">=</span> arr.read(<span class=\"pl-c1\">0</span>)\n    <span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>graph) <span class=\"pl-k\">as</span> sess:\n        <span class=\"pl-c1\">print</span>(sess.run(dot_product))\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    t1 <span class=\"pl-k\">=</span> default_timer()\n    v1()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>time v1: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(default_timer() <span class=\"pl-k\">-</span> t1))\n    t1 <span class=\"pl-k\">=</span> default_timer()\n    v2()\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>time v2: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(default_timer() <span class=\"pl-k\">-</span> t1))</pre></div>", "body_text": "I find the same behaviour.\nI include a slight modified copy-pastable MVCE.\nI get 9s and 3 s with the below on CPU.\nMVCE\nimport tensorflow as tf\nfrom timeit import default_timer\n\ndef func(nums):\n    return tf.reduce_sum(tf.multiply(tf.add(nums,1), nums))\n\ndef v1():\n    graph = tf.Graph()\n    with graph.as_default(), tf.device('/cpu:0'):\n        nums = tf.range(200000000, dtype=tf.float32)\n        dot_product = func(nums)\n    with tf.Session(graph=graph) as sess:\n        print(sess.run(dot_product))\n\ndef v2():\n    graph = tf.Graph()\n    with graph.as_default(), tf.device('/cpu:0'):\n        arr = tf.TensorArray(size=1, dtype=tf.float32)\n        nums = tf.range(200000000, dtype=tf.float32)\n        i = tf.constant(0)\n        def body(i, arr):\n            arr = arr.write(i, func(nums))\n            return i+1, arr\n        i, arr = tf.while_loop(\n            cond=lambda i, x: i < 1,\n            body=body,\n            loop_vars=[i, arr],\n            parallel_iterations=1)\n        dot_product = arr.read(0)\n    with tf.Session(graph=graph) as sess:\n        print(sess.run(dot_product))\n\nif __name__ == '__main__':\n    t1 = default_timer()\n    v1()\n    print(\"time v1: {}\".format(default_timer() - t1))\n    t1 = default_timer()\n    v2()\n    print(\"time v2: {}\".format(default_timer() - t1))", "body": "I find the same behaviour.\r\nI include a slight modified copy-pastable MVCE.\r\nI get 9s and 3 s with the below on CPU.\r\n\r\n## MVCE\r\n``` python\r\nimport tensorflow as tf\r\nfrom timeit import default_timer\r\n\r\ndef func(nums):\r\n    return tf.reduce_sum(tf.multiply(tf.add(nums,1), nums))\r\n\r\ndef v1():\r\n    graph = tf.Graph()\r\n    with graph.as_default(), tf.device('/cpu:0'):\r\n        nums = tf.range(200000000, dtype=tf.float32)\r\n        dot_product = func(nums)\r\n    with tf.Session(graph=graph) as sess:\r\n        print(sess.run(dot_product))\r\n\r\ndef v2():\r\n    graph = tf.Graph()\r\n    with graph.as_default(), tf.device('/cpu:0'):\r\n        arr = tf.TensorArray(size=1, dtype=tf.float32)\r\n        nums = tf.range(200000000, dtype=tf.float32)\r\n        i = tf.constant(0)\r\n        def body(i, arr):\r\n            arr = arr.write(i, func(nums))\r\n            return i+1, arr\r\n        i, arr = tf.while_loop(\r\n            cond=lambda i, x: i < 1,\r\n            body=body,\r\n            loop_vars=[i, arr],\r\n            parallel_iterations=1)\r\n        dot_product = arr.read(0)\r\n    with tf.Session(graph=graph) as sess:\r\n        print(sess.run(dot_product))\r\n\r\nif __name__ == '__main__':\r\n    t1 = default_timer()\r\n    v1()\r\n    print(\"time v1: {}\".format(default_timer() - t1))\r\n    t1 = default_timer()\r\n    v2()\r\n    print(\"time v2: {}\".format(default_timer() - t1))\r\n```"}