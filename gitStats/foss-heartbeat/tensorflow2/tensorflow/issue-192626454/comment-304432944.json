{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/304432944", "html_url": "https://github.com/tensorflow/tensorflow/issues/5987#issuecomment-304432944", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5987", "id": 304432944, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDQzMjk0NA==", "user": {"login": "liavassif", "id": 15338760, "node_id": "MDQ6VXNlcjE1MzM4NzYw", "avatar_url": "https://avatars1.githubusercontent.com/u/15338760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liavassif", "html_url": "https://github.com/liavassif", "followers_url": "https://api.github.com/users/liavassif/followers", "following_url": "https://api.github.com/users/liavassif/following{/other_user}", "gists_url": "https://api.github.com/users/liavassif/gists{/gist_id}", "starred_url": "https://api.github.com/users/liavassif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liavassif/subscriptions", "organizations_url": "https://api.github.com/users/liavassif/orgs", "repos_url": "https://api.github.com/users/liavassif/repos", "events_url": "https://api.github.com/users/liavassif/events{/privacy}", "received_events_url": "https://api.github.com/users/liavassif/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-27T06:50:48Z", "updated_at": "2017-06-01T06:41:49Z", "author_association": "NONE", "body_html": "<p>In the meantime I've been using the (pre-trained) classification models (vgg, resnet) created by slim, with a regular tensorflow train+val loop. This works well.<br>\nWhen creating the model, for resnet use something like</p>\n<p><code>is_training = tf.Variable(True, name='is_training')</code><br>\n<code>with slim.arg_scope(resnet_v1.resnet_arg_scope(is_training=is_training)):</code><br>\n<code>    net = resnet_v1.resnet_v1_101</code><br>\n<code>    y_est, _ = net(images_in, num_classes=nclasses)</code><br>\n<code>...</code></p>\n<p>At the training part in each epoch run:<br>\n<code>sess.run(is_training.assign(True))</code><br>\nand at the validation:<br>\n<code>sess.run(is_training.assign(False))</code></p>", "body_text": "In the meantime I've been using the (pre-trained) classification models (vgg, resnet) created by slim, with a regular tensorflow train+val loop. This works well.\nWhen creating the model, for resnet use something like\nis_training = tf.Variable(True, name='is_training')\nwith slim.arg_scope(resnet_v1.resnet_arg_scope(is_training=is_training)):\n    net = resnet_v1.resnet_v1_101\n    y_est, _ = net(images_in, num_classes=nclasses)\n...\nAt the training part in each epoch run:\nsess.run(is_training.assign(True))\nand at the validation:\nsess.run(is_training.assign(False))", "body": "In the meantime I've been using the (pre-trained) classification models (vgg, resnet) created by slim, with a regular tensorflow train+val loop. This works well. \r\nWhen creating the model, for resnet use something like\r\n\r\n`is_training = tf.Variable(True, name='is_training')`\r\n`with slim.arg_scope(resnet_v1.resnet_arg_scope(is_training=is_training)):`\r\n`    net = resnet_v1.resnet_v1_101`\r\n`    y_est, _ = net(images_in, num_classes=nclasses)`\r\n`...`\r\n\r\nAt the training part in each epoch run:\r\n    `sess.run(is_training.assign(True))`\r\nand at the validation:\r\n    `sess.run(is_training.assign(False))`\r\n"}