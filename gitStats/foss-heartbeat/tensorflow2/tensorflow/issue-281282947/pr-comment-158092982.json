{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/158092982", "pull_request_review_id": 82798231, "id": 158092982, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA5Mjk4Mg==", "diff_hunk": "@@ -0,0 +1,299 @@\n+# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Wrapper optimizer for Model Average \"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.framework import ops\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import constant_op\n+from tensorflow.python.training import optimizer\n+from tensorflow.python.training import session_run_hook\n+from tensorflow.python.ops import math_ops\n+from tensorflow.python.ops import control_flow_ops\n+from tensorflow.python.ops import variable_scope\n+from tensorflow.python.ops import variables\n+from tensorflow.python.ops import state_ops\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import data_flow_ops\n+\n+GLOBAL_VARIABLE_NAME = 'global_center_variable'\n+\n+\n+class ModelAverageCustomGetter(object):\n+  \"\"\"Custom_getter class is used to do:\n+  1. Change trainable variables to local collection and place them at worker\n+    device\n+  2. Generate global variables\n+    Notice that the class should be used with tf.replica_device_setter,\n+    so that the global center variables and global step variable can be placed\n+    at ps device. Besides, use 'tf.get_variable' instead of 'tf.Variable' to\n+    use this custom getter.\n+\n+  For example,\n+  ma_custom_getter = ModelAverageCustomGetter(worker_device)\n+  with tf.device(\n+    tf.train.replica_device_setter(\n+      worker_device=worker_device,\n+      ps_device=\"/job:ps/cpu:0\",\n+      cluster=cluster)),\n+    tf.variable_scope('',custom_getter=ma_custom_getter):\n+    hid_w = tf.get_variable(\n+      initializer=tf.truncated_normal(\n+          [IMAGE_PIXELS * IMAGE_PIXELS, FLAGS.hidden_units],\n+          stddev=1.0 / IMAGE_PIXELS),\n+      name=\"hid_w\")\n+    hid_b = tf.get_variable(initializer=tf.zeros([FLAGS.hidden_units]),\n+                            name=\"hid_b\")\n+  \"\"\"\n+\n+  def __init__(self, worker_device):\n+    \"\"\"Create a new `ElasticAverageCustomGetter`.\n+\n+    Args:\n+      worker_device: String.  Name of the `worker` job.\n+    \"\"\"\n+    self._worker_device = worker_device\n+    self._map = {}\n+\n+  def __call__(self, getter, name, trainable, collections, *args, **kwargs):\n+    if trainable:\n+      with ops.device(self._worker_device):\n+        local_var = getter(name, trainable=True,\n+                           collections=[ops.GraphKeys.LOCAL_VARIABLES],\n+                           *args, **kwargs)\n+\n+      global_variable = variable_scope.variable(\n+        name='%s/%s' % (GLOBAL_VARIABLE_NAME, name),\n+        initial_value=local_var.initialized_value(),\n+        trainable=False,\n+        collections=[ops.GraphKeys.GLOBAL_VARIABLES])\n+\n+      self._map[local_var] = global_variable\n+      return local_var\n+    else:\n+      return getter(name, trainable, collections, *args, **kwargs)\n+\n+\n+class ModelAverageOptimizer(optimizer.Optimizer):\n+  \"\"\"Wrapper optimizer that implements the Model Average algorithm.\n+  This is a sync optimizer. During the training, each worker will update\n+  the local variables and maintains its own local_step, which starts from 0\n+  and is incremented by 1 after each update of local variables. Whenever the\n+  interval_steps divides the local step, the local variables from all the\n+  workers will be averaged and assigned to global center variables. Then the\n+  local variables will be assigned by global center variables.\n+  \"\"\"\n+\n+  def __init__(\n+      self,\n+      opt,\n+      num_worker,\n+      is_chief,\n+      ma_custom_getter,\n+      interval_steps=100,\n+      use_locking=True,\n+      name=\"ModelAverageOptimizer\"):\n+    \"\"\"Construct a new model average optimizer.\n+\n+    Args:\n+      opt: The actual optimizer that will be used to update local variables\n+      num_worker: The number of workers\n+      is_chief: whether chief worker\n+      ma_custom_getter: ModelAverageCustomGetter\n+      interval_steps: An int point value to controls the frequency of the\n+        average of local variables\n+      use_locking: If True use locks for update operations\n+      name: string. Optional name of the returned operation\n+    \"\"\"\n+    super(ModelAverageOptimizer, self).__init__(use_locking, name)\n+    self._opt = opt\n+    self._num_worker = num_worker\n+    self._is_chief = is_chief\n+    self._map = ma_custom_getter._map\n+    self._interval_steps = interval_steps\n+    self._accumulator_list = []\n+    self._chief_init_op = None\n+\n+    self._local_step = variable_scope.get_variable(\n+      initializer=0,\n+      trainable=False,\n+      collections=[ops.GraphKeys.LOCAL_VARIABLES],\n+      name=\"local_step\")\n+\n+    self._opt._prepare()\n+\n+  def compute_gradients(self, *args, **kwargs):\n+    \"\"\"Compute gradients of \"loss\" for the variables in \"var_list\".\n+\n+    This simply wraps the compute_gradients() from the real optimizer.\n+\n+    Args:\n+      *args: Arguments for compute_gradients().\n+      **kwargs: Keyword arguments for compute_gradients().\n+\n+    Returns:\n+      A list of (gradient, variable) pairs.\n+    \"\"\"\n+    return self._opt.compute_gradients(*args, **kwargs)\n+\n+  def _local_vars_update(self, var_list):\n+    \"\"\"Get the update ops for the local variables in \"var_list\".\n+\n+    Args:\n+      var_list: Optional list or tuple of 'tf.Variable' to update\n+\n+    Returns:\n+      An update op\n+    \"\"\"\n+    if not var_list:\n+      raise ValueError(\n+        'The list of local_variables should not be empty')\n+    update_ops = []\n+    global_center_vars = [self._map[var] for var in var_list]\n+    for lvar, gvar in zip(var_list, global_center_vars):\n+      with ops.device(lvar.device):\n+        update_ops.append(state_ops.assign(lvar, gvar.read_value()))\n+    return control_flow_ops.group(*(update_ops))\n+\n+  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n+    \"\"\"Apply gradients to variables.\n+\n+    This contains most of the synchronization implementation and also wraps the\n+    apply_gradients() from the real optimizer. The chief work updates global\n+    variables.\n+\n+    Args:\n+      grads_and_vars: List of (gradient, variable) pairs as returned by\n+        compute_gradients().\n+      global_step: Optional Variable to increment by one after the\n+        variables have been updated.\n+      name: Optional name for the returned operation.  Default to the\n+        name passed to the Optimizer constructor.\n+\n+    Returns:\n+      A conditional 'Operation' that update both local and global varibales or", "path": "tensorflow/contrib/opt/python/training/model_average_optimizer.py", "position": null, "original_position": 189, "commit_id": "4a602f116c000fbfa291d32971ecc55650e6112e", "original_commit_id": "d915d00cb81b33a246d4abb87e193b2bdd85665f", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "body": "s/varibales/variables", "created_at": "2017-12-20T17:56:23Z", "updated_at": "2017-12-21T01:34:17Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/15299#discussion_r158092982", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15299", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/158092982"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/15299#discussion_r158092982"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15299"}}, "body_html": "<p>s/varibales/variables</p>", "body_text": "s/varibales/variables"}