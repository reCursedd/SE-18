{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/328310582", "html_url": "https://github.com/tensorflow/tensorflow/issues/12761#issuecomment-328310582", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12761", "id": 328310582, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODMxMDU4Mg==", "user": {"login": "Mistobaan", "id": 112599, "node_id": "MDQ6VXNlcjExMjU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/112599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mistobaan", "html_url": "https://github.com/Mistobaan", "followers_url": "https://api.github.com/users/Mistobaan/followers", "following_url": "https://api.github.com/users/Mistobaan/following{/other_user}", "gists_url": "https://api.github.com/users/Mistobaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mistobaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mistobaan/subscriptions", "organizations_url": "https://api.github.com/users/Mistobaan/orgs", "repos_url": "https://api.github.com/users/Mistobaan/repos", "events_url": "https://api.github.com/users/Mistobaan/events{/privacy}", "received_events_url": "https://api.github.com/users/Mistobaan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-09T23:56:39Z", "updated_at": "2017-09-09T23:56:39Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I tried to create a simple Python library that depends on the <code>./tensorflow</code> workspace configured like in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"254507806\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12735\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12735/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12735\">#12735</a>,  and then I try to create a pip package that contains everything embedded (tensorflow + your library).<br>\nA simple rule like this will fail with the advanced options enabled.</p>\n<div class=\"highlight highlight-source-python\"><pre>py_library(\n<span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>mylibrary<span class=\"pl-pds\">'</span></span>,\n<span class=\"pl-v\">deps</span> <span class=\"pl-k\">=</span> [\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@org_tensorflow//tensorflow/tensorflow_py<span class=\"pl-pds\">\"</span></span>\n])</pre></div>\n<p>This is useful for training on Google ML Engine because you can have a single bazel target that packages everything and runs the job from a single project with the exact binary configuration. Otherwise, you have to do many steps separately (package Tensorflow, then package your library) and then specify it on the google cloud ml job library target both zips.</p>\n<p>Maybe I am doing something wrong. A small GitHub repo showing how is done using the extra configurations (XLA, MLK, CUDA) parameters would be useful as a reference.</p>", "body_text": "I tried to create a simple Python library that depends on the ./tensorflow workspace configured like in #12735,  and then I try to create a pip package that contains everything embedded (tensorflow + your library).\nA simple rule like this will fail with the advanced options enabled.\npy_library(\nname = 'mylibrary',\ndeps = [\n    \"@org_tensorflow//tensorflow/tensorflow_py\"\n])\nThis is useful for training on Google ML Engine because you can have a single bazel target that packages everything and runs the job from a single project with the exact binary configuration. Otherwise, you have to do many steps separately (package Tensorflow, then package your library) and then specify it on the google cloud ml job library target both zips.\nMaybe I am doing something wrong. A small GitHub repo showing how is done using the extra configurations (XLA, MLK, CUDA) parameters would be useful as a reference.", "body": "I tried to create a simple Python library that depends on the `./tensorflow` workspace configured like in #12735,  and then I try to create a pip package that contains everything embedded (tensorflow + your library). \r\nA simple rule like this will fail with the advanced options enabled. \r\n```python\r\npy_library(\r\nname = 'mylibrary',\r\ndeps = [\r\n    \"@org_tensorflow//tensorflow/tensorflow_py\"\r\n])\r\n```\r\nThis is useful for training on Google ML Engine because you can have a single bazel target that packages everything and runs the job from a single project with the exact binary configuration. Otherwise, you have to do many steps separately (package Tensorflow, then package your library) and then specify it on the google cloud ml job library target both zips.  \r\n\r\nMaybe I am doing something wrong. A small GitHub repo showing how is done using the extra configurations (XLA, MLK, CUDA) parameters would be useful as a reference. \r\n"}