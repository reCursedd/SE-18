{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/382506746", "html_url": "https://github.com/tensorflow/tensorflow/issues/18669#issuecomment-382506746", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18669", "id": 382506746, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjUwNjc0Ng==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-18T19:46:16Z", "updated_at": "2018-04-18T19:46:16Z", "author_association": "MEMBER", "body_html": "<p>I think the following diff might be able to fix the issue:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git a/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py b/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py</span>\nindex 00d9544..d58198f 100644\n<span class=\"pl-md\">--- a/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py</span>\n<span class=\"pl-mi1\">+++ b/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py</span>\n<span class=\"pl-mdr\">@@ -358,7 +358,8 @@</span> class _CudnnRNN(base_layer.Layer):\n             \"CUDA/CuDNN generations.\")\n       # Initialize opaque params with a tensor.\n       self.kernel = vs.get_variable(\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>          \"opaque_kernel\", initializer=opaque_params_t, validate_shape=False)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>          \"opaque_kernel\", dtype=self._plain_dtype,</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>          initializer=opaque_params_t, validate_shape=False)</span>\n     # Create saveable in the outer scope of the cudnn subgraph, such that\n     # alternative subgraph with platform-independent rnn cells can load the\n     # checkpoints directly.</pre></div>", "body_text": "I think the following diff might be able to fix the issue:\ndiff --git a/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py b/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py\nindex 00d9544..d58198f 100644\n--- a/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py\n+++ b/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py\n@@ -358,7 +358,8 @@ class _CudnnRNN(base_layer.Layer):\n             \"CUDA/CuDNN generations.\")\n       # Initialize opaque params with a tensor.\n       self.kernel = vs.get_variable(\n-          \"opaque_kernel\", initializer=opaque_params_t, validate_shape=False)\n+          \"opaque_kernel\", dtype=self._plain_dtype,\n+          initializer=opaque_params_t, validate_shape=False)\n     # Create saveable in the outer scope of the cudnn subgraph, such that\n     # alternative subgraph with platform-independent rnn cells can load the\n     # checkpoints directly.", "body": "I think the following diff might be able to fix the issue:\r\n```diff\r\ndiff --git a/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py b/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py\r\nindex 00d9544..d58198f 100644\r\n--- a/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py\r\n+++ b/tensorflow/contrib/cudnn_rnn/python/layers/cudnn_rnn.py\r\n@@ -358,7 +358,8 @@ class _CudnnRNN(base_layer.Layer):\r\n             \"CUDA/CuDNN generations.\")\r\n       # Initialize opaque params with a tensor.\r\n       self.kernel = vs.get_variable(\r\n-          \"opaque_kernel\", initializer=opaque_params_t, validate_shape=False)\r\n+          \"opaque_kernel\", dtype=self._plain_dtype,\r\n+          initializer=opaque_params_t, validate_shape=False)\r\n     # Create saveable in the outer scope of the cudnn subgraph, such that\r\n     # alternative subgraph with platform-independent rnn cells can load the\r\n     # checkpoints directly.\r\n```"}