{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/241272716", "html_url": "https://github.com/tensorflow/tensorflow/issues/175#issuecomment-241272716", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/175", "id": 241272716, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTI3MjcxNg==", "user": {"login": "nikhilmishra000", "id": 9015977, "node_id": "MDQ6VXNlcjkwMTU5Nzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/9015977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikhilmishra000", "html_url": "https://github.com/nikhilmishra000", "followers_url": "https://api.github.com/users/nikhilmishra000/followers", "following_url": "https://api.github.com/users/nikhilmishra000/following{/other_user}", "gists_url": "https://api.github.com/users/nikhilmishra000/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikhilmishra000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikhilmishra000/subscriptions", "organizations_url": "https://api.github.com/users/nikhilmishra000/orgs", "repos_url": "https://api.github.com/users/nikhilmishra000/repos", "events_url": "https://api.github.com/users/nikhilmishra000/events{/privacy}", "received_events_url": "https://api.github.com/users/nikhilmishra000/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-21T18:17:51Z", "updated_at": "2016-08-21T18:21:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm taking a stab at this, but running into the following issue:</p>\n<p>I want to call the templated method tensorflow::Tensor::tensor&lt;T, NDIMS&gt;  and then use Eigen's contract (<a href=\"https://bitbucket.org/eigen/eigen/src/default/unsupported/Eigen/CXX11/src/Tensor/README.md?fileviewer=file-view-default#markdown-header-contraction\" rel=\"nofollow\">https://bitbucket.org/eigen/eigen/src/default/unsupported/Eigen/CXX11/src/Tensor/README.md?fileviewer=file-view-default#markdown-header-contraction</a>),<br>\nbut the number of dimensions will not be known at compile time.</p>\n<p>I noticed that in other parts of the codebase, the following pattern is used:</p>\n<p>Tensor input_a = ....<br>\nswitch (input_a.dims()) {<br>\ncase 1: &lt;do stuff with input_a.tensor&lt;T, 1&gt;() &gt;<br>\ncase 2: &lt;do stuff with input_a.tensor&lt;T, 2&gt;() &gt;<br>\n...</p>\n<p>But in this case there would be 3 tensors (2 inputs and the output) whose number of dimensions are not known at compile time, so doing something like this would be rather messy.</p>\n<p>Thoughts on the preferred / most elegant way to do this?</p>", "body_text": "I'm taking a stab at this, but running into the following issue:\nI want to call the templated method tensorflow::Tensor::tensor<T, NDIMS>  and then use Eigen's contract (https://bitbucket.org/eigen/eigen/src/default/unsupported/Eigen/CXX11/src/Tensor/README.md?fileviewer=file-view-default#markdown-header-contraction),\nbut the number of dimensions will not be known at compile time.\nI noticed that in other parts of the codebase, the following pattern is used:\nTensor input_a = ....\nswitch (input_a.dims()) {\ncase 1: <do stuff with input_a.tensor<T, 1>() >\ncase 2: <do stuff with input_a.tensor<T, 2>() >\n...\nBut in this case there would be 3 tensors (2 inputs and the output) whose number of dimensions are not known at compile time, so doing something like this would be rather messy.\nThoughts on the preferred / most elegant way to do this?", "body": "I'm taking a stab at this, but running into the following issue:\n\nI want to call the templated method tensorflow::Tensor::tensor<T, NDIMS>  and then use Eigen's contract (https://bitbucket.org/eigen/eigen/src/default/unsupported/Eigen/CXX11/src/Tensor/README.md?fileviewer=file-view-default#markdown-header-contraction),\n but the number of dimensions will not be known at compile time.\n\nI noticed that in other parts of the codebase, the following pattern is used:\n\nTensor input_a = ....\nswitch (input_a.dims()) {\ncase 1: <do stuff with input_a.tensor<T, 1>() >\ncase 2: <do stuff with input_a.tensor<T, 2>() >\n...\n\nBut in this case there would be 3 tensors (2 inputs and the output) whose number of dimensions are not known at compile time, so doing something like this would be rather messy.\n\nThoughts on the preferred / most elegant way to do this?\n"}