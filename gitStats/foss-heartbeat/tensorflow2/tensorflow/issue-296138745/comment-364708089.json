{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/364708089", "html_url": "https://github.com/tensorflow/tensorflow/issues/16924#issuecomment-364708089", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16924", "id": 364708089, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDcwODA4OQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-11T00:29:41Z", "updated_at": "2018-02-11T00:29:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for reporting this. There is a forthcoming change (submitted internally, but not yet merged into the Git master) that moves the <code>DatasetOpKernel</code> implementation for <code>tf.contrib.data.ignore_errors()</code> into a shared library. As far as I can tell from the presubmits, that code is working, but it's possible that there's a gap in test coverage for this case. We may have to wait a few days until the code is merged into Git to confirm this.</p>\n<p>In the meantime, I'm a little confused about why the <code>typeid</code> has to cross the shared object boundary at all. As far as I understand, the <code>DatasetVariantWrapper</code> class and code that manipulates it should be entirely internal to dataset.cc, and hence libtensorflow_framework.so; and the symbol should neither be visible to nor used in the custom op library. Do you have some example code that exhibits the problem?</p>", "body_text": "Thanks for reporting this. There is a forthcoming change (submitted internally, but not yet merged into the Git master) that moves the DatasetOpKernel implementation for tf.contrib.data.ignore_errors() into a shared library. As far as I can tell from the presubmits, that code is working, but it's possible that there's a gap in test coverage for this case. We may have to wait a few days until the code is merged into Git to confirm this.\nIn the meantime, I'm a little confused about why the typeid has to cross the shared object boundary at all. As far as I understand, the DatasetVariantWrapper class and code that manipulates it should be entirely internal to dataset.cc, and hence libtensorflow_framework.so; and the symbol should neither be visible to nor used in the custom op library. Do you have some example code that exhibits the problem?", "body": "Thanks for reporting this. There is a forthcoming change (submitted internally, but not yet merged into the Git master) that moves the `DatasetOpKernel` implementation for `tf.contrib.data.ignore_errors()` into a shared library. As far as I can tell from the presubmits, that code is working, but it's possible that there's a gap in test coverage for this case. We may have to wait a few days until the code is merged into Git to confirm this.\r\n\r\nIn the meantime, I'm a little confused about why the `typeid` has to cross the shared object boundary at all. As far as I understand, the `DatasetVariantWrapper` class and code that manipulates it should be entirely internal to dataset.cc, and hence libtensorflow_framework.so; and the symbol should neither be visible to nor used in the custom op library. Do you have some example code that exhibits the problem?  "}