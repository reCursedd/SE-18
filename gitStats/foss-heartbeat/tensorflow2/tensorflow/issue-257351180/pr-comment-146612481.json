{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/146612481", "pull_request_review_id": 71579432, "id": 146612481, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjYxMjQ4MQ==", "diff_hunk": "@@ -0,0 +1,279 @@\n+# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Wrapper optimizer for Elastic Average SGD \"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.framework import ops\n+from tensorflow.python.ops import math_ops\n+\n+from tensorflow.python.ops import gen_nn_ops\n+from tensorflow.python.ops import control_flow_ops\n+from tensorflow.python.ops import variable_scope\n+from tensorflow.python.ops import variables\n+from tensorflow.python.training import optimizer\n+from tensorflow.python.training import session_run_hook\n+from tensorflow.python.ops import state_ops\n+from tensorflow.python.ops import data_flow_ops\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import constant_op\n+\n+\n+class ElasticAverageCustomGetter(object):\n+  \"\"\"Custom_getter class is used to do:\n+  1. Change trainable variables to local collection and place them at worker\n+    device\n+  2. Generate global variables(global center variables)\n+  3. Generate local variables(local center variables) which record the global\n+    variables and place them at worker device\n+  4. Remain global step variable as global variable\n+    Notice that the class should be used with tf.replica_device_setter,\n+    so that the global center variables and global step variable can be placed\n+    at ps device. Besides, use 'tf.get_variable' instead of 'tf.Variable' to\n+    use this custom getter.\n+    \n+  For example,\n+  ea_custom_getter = ElasticAverageCustomGetter(worker_device)\n+  with tf.device(\n+    tf.train.replica_device_setter(\n+      worker_device=worker_device,\n+      ps_device=\"/job:ps/cpu:0\",\n+      cluster=cluster)),\n+    tf.variable_scope('',custom_getter=ea_custom_getter):\n+    hid_w = tf.get_variable(\n+      initializer=tf.truncated_normal(\n+          [IMAGE_PIXELS * IMAGE_PIXELS, FLAGS.hidden_units],\n+          stddev=1.0 / IMAGE_PIXELS),\n+      name=\"hid_w\")\n+    hid_b = tf.get_variable(initializer=tf.zeros([FLAGS.hidden_units]),\n+                            name=\"hid_b\")\n+  \"\"\"\n+\n+  def __init__(self, worker_device):\n+    \"\"\"Create a new `ElasticAverageCustomGetter`.\n+\n+    Args:\n+      worker_device: String.  Name of the `worker` job.\n+    \"\"\"\n+    self._worker_device = worker_device\n+\n+  def __call__(self, getter, name, *args, **kwargs):\n+    if name.find('global_step') != -1:\n+      return getter(name, *args, **kwargs)\n+\n+    kwargs['collections'] = [ops.GraphKeys.LOCAL_VARIABLES]\n+    with ops.device(self._worker_device):\n+      local_var = getter(name, *args, **kwargs)\n+\n+    if kwargs['trainable']:", "path": "tensorflow/contrib/opt/python/training/elastic_average_optimizer.py", "position": null, "original_position": 82, "commit_id": "632eec0e3064232671de62517a7905242a7e6ecb", "original_commit_id": "f117069ce76ca955f6e79e370b2e6fc3d2dcf94b", "user": {"login": "DjangoPeng", "id": 16943353, "node_id": "MDQ6VXNlcjE2OTQzMzUz", "avatar_url": "https://avatars3.githubusercontent.com/u/16943353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DjangoPeng", "html_url": "https://github.com/DjangoPeng", "followers_url": "https://api.github.com/users/DjangoPeng/followers", "following_url": "https://api.github.com/users/DjangoPeng/following{/other_user}", "gists_url": "https://api.github.com/users/DjangoPeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/DjangoPeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DjangoPeng/subscriptions", "organizations_url": "https://api.github.com/users/DjangoPeng/orgs", "repos_url": "https://api.github.com/users/DjangoPeng/repos", "events_url": "https://api.github.com/users/DjangoPeng/events{/privacy}", "received_events_url": "https://api.github.com/users/DjangoPeng/received_events", "type": "User", "site_admin": false}, "body": "I think this may cause a KeyError when missing the key `trainable` in the kwargs. You'd better implement it in a more safe way.", "created_at": "2017-10-24T16:09:16Z", "updated_at": "2017-12-11T05:39:16Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13012#discussion_r146612481", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13012", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/146612481"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13012#discussion_r146612481"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13012"}}, "body_html": "<p>I think this may cause a KeyError when missing the key <code>trainable</code> in the kwargs. You'd better implement it in a more safe way.</p>", "body_text": "I think this may cause a KeyError when missing the key trainable in the kwargs. You'd better implement it in a more safe way."}