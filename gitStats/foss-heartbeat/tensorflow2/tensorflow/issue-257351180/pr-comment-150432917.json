{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/150432917", "pull_request_review_id": 75981043, "id": 150432917, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDQzMjkxNw==", "diff_hunk": "@@ -0,0 +1,337 @@\n+# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Wrapper optimizer for Elastic Average SGD \"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.framework import ops\n+from tensorflow.python.ops import math_ops\n+\n+from tensorflow.python.ops import gen_nn_ops\n+from tensorflow.python.ops import control_flow_ops\n+from tensorflow.python.ops import variable_scope\n+from tensorflow.python.ops import variables\n+from tensorflow.python.training import optimizer\n+from tensorflow.python.training import session_run_hook\n+from tensorflow.python.ops import state_ops\n+from tensorflow.python.ops import data_flow_ops\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import constant_op\n+\n+LOCAL_CENTER_VARIABLE = '_local_center_variable'\n+GLOBAL_CENTER_VARIABLE = '_global_center_variable'\n+LOCAL_VARIABLE_NAME = 'local_center_variable'\n+GLOBAL_VARIABLE_NAME = 'global_center_variable'\n+\n+\n+class ElasticAverageCustomGetter(object):\n+  \"\"\"Custom_getter class is used to do:\n+  1. Change trainable variables to local collection and place them at worker\n+    device\n+  2. Generate global variables(global center variables)\n+  3. Generate local variables(local center variables) which record the global\n+    variables and place them at worker device\n+    Notice that the class should be used with tf.replica_device_setter,\n+    so that the global center variables and global step variable can be placed\n+    at ps device. Besides, use 'tf.get_variable' instead of 'tf.Variable' to\n+    use this custom getter.\n+\n+  For example,\n+  ea_custom_getter = ElasticAverageCustomGetter(worker_device)\n+  with tf.device(\n+    tf.train.replica_device_setter(\n+      worker_device=worker_device,\n+      ps_device=\"/job:ps/cpu:0\",\n+      cluster=cluster)),\n+    tf.variable_scope('',custom_getter=ea_custom_getter):\n+    hid_w = tf.get_variable(\n+      initializer=tf.truncated_normal(\n+          [IMAGE_PIXELS * IMAGE_PIXELS, FLAGS.hidden_units],\n+          stddev=1.0 / IMAGE_PIXELS),\n+      name=\"hid_w\")\n+    hid_b = tf.get_variable(initializer=tf.zeros([FLAGS.hidden_units]),\n+                            name=\"hid_b\")\n+  \"\"\"\n+\n+  def __init__(self, worker_device):\n+    \"\"\"Create a new `ElasticAverageCustomGetter`.\n+\n+    Args:\n+      worker_device: String.  Name of the `worker` job.\n+    \"\"\"\n+    self._worker_device = worker_device\n+\n+  def __call__(self, getter, name, *args, **kwargs):\n+    if kwargs['trainable']:\n+      kwargs['collections'] = [ops.GraphKeys.LOCAL_VARIABLES]\n+      with ops.device(self._worker_device):\n+        local_var = getter(name, *args, **kwargs)\n+        \n+      global_center_variable = variable_scope.variable(\n+        name='%s/%s' %\n+             (GLOBAL_VARIABLE_NAME,\n+              name),\n+        initial_value=local_var.initialized_value(),\n+        trainable=False,\n+        collections=[\n+          ops.GraphKeys.GLOBAL_VARIABLES,\n+          GLOBAL_CENTER_VARIABLE])\n+\n+      with ops.device(self._worker_device):\n+        local_center_variable = variable_scope.variable(\n+          name='%s/%s' % (LOCAL_VARIABLE_NAME, name),\n+          initial_value=local_var.initialized_value(),\n+          trainable=False,\n+          collections=[ops.GraphKeys.LOCAL_VARIABLES,\n+                       LOCAL_CENTER_VARIABLE])\n+      return local_var\n+    else:\n+      return getter(name, *args, **kwargs)\n+\n+\n+class ElasticAverageOptimizer(optimizer.Optimizer):\n+  \"\"\"Wrapper optimizer that implements the Elastic Average SGD algorithm.\n+  This is an async optimizer. During the training, Each worker will update\n+  the local variables and maintains its own local_step, which starts from 0\n+  and is incremented by 1 after each update of local variables. Whenever\n+  the communication period divides the local step, the worker requests\n+  the current global center variables and then computed the elastic difference\n+  between global center variables and local variables. The elastic difference\n+  then be used to update both local variables and global variables.\n+  \"\"\"\n+\n+  # Default value as paper described\n+  BETA = 0.9\n+\n+  def __init__(\n+      self,\n+      opt,\n+      num_worker,\n+      communication_period=10,\n+      moving_rate=None,\n+      rho=None,\n+      use_locking=True,\n+      name=\"ElasticAverageOptimizer\"):\n+    \"\"\"Construct a new gradient descent optimizer.\n+\n+    Args:\n+      opt: The actual optimizer that will be used to update local variables.\n+        Must be one of the Optimizer classes.\n+      communication_period: An int point value to controls the frequency\n+        of the communication between every worker and the ps.\n+      num_worker: The number of workers\n+      moving_rate: A floating point value to control the elastic difference.\n+      rho: the amount of exploration we allow ine the model. The default\n+        value is moving_rate/learning_rate\n+      use_locking: If True use locks for update operations.\n+      name: Optional name prefix for the operations created when applying\n+        gradients. Defaults to \"GradientDescent\".\n+    \"\"\"\n+    super(ElasticAverageOptimizer, self).__init__(use_locking, name)\n+    self._opt = opt\n+    self._num_worker = num_worker\n+    self._period = communication_period\n+\n+    if moving_rate is None:\n+      self._moving_rate = BETA / communication_period / num_worker\n+    else:\n+      self._moving_rate = moving_rate\n+    if rho is None:\n+      self._rho = self._moving_rate / self._opt._learning_rate\n+    else:\n+      self._rho = rho\n+\n+    self._local_step = variable_scope.get_variable(\n+      initializer=0,\n+      trainable=False,\n+      collections=[ops.GraphKeys.LOCAL_VARIABLES],\n+      name=\"local_step\")\n+    self._opt._prepare()\n+\n+  def compute_gradients(self, loss, var_list=None,\n+                        gate_gradients=optimizer.Optimizer.GATE_OP,\n+                        aggregation_method=None,\n+                        colocate_gradients_with_ops=False,\n+                        grad_loss=None):\n+    \"\"\"Compute gradients of `loss` for the variables in `var_list`.\n+    \n+    Add rho*elastic_difference to loss to control the exploration\n+    This is the first part of `minimize()`.  It returns a list\n+    of (gradient, variable) pairs where \"gradient\" is the gradient\n+    for \"variable\".  Note that \"gradient\" can be a `Tensor`, an\n+    `IndexedSlices`, or `None` if there is no gradient for the\n+    given variable.\n+\n+    Args:\n+      loss: A Tensor containing the value to minimize.\n+      var_list: Optional list or tuple of `tf.Variable` to update to minimize\n+        `loss`.  Defaults to the list of variables collected in the graph\n+        under the key `GraphKey.TRAINABLE_VARIABLES`.\n+      gate_gradients: How to gate the computation of gradients.  Can be\n+        `GATE_NONE`, `GATE_OP`, or `GATE_GRAPH`.\n+      aggregation_method: Specifies the method used to combine gradient terms.\n+        Valid values are defined in the class `AggregationMethod`.\n+      colocate_gradients_with_ops: If True, try colocating gradients with\n+        the corresponding op.\n+      grad_loss: Optional. A `Tensor` holding the gradient computed for `loss`.\n+\n+    Returns:\n+      A list of (gradient, variable) pairs. Variable is always present, but\n+      gradient can be `None`.\n+\n+    Raises:\n+      TypeError: If `var_list` contains anything else than `Variable` objects.\n+      ValueError: If some arguments are invalid.\n+    \"\"\"\n+    elastic_difference = [math_ops.subtract(v, lv) for v, lv in zip(\n+      variables.trainable_variables(),\n+      ops.get_collection_ref(LOCAL_CENTER_VARIABLE))]\n+\n+    distance_loss = self._rho * math_ops.add_n(\n+                      [gen_nn_ops.l2_loss(ed) for ed in elastic_difference])\n+\n+    total_loss = loss + distance_loss\n+    return self._opt.compute_gradients(total_loss, var_list,\n+                                       gate_gradients, aggregation_method,\n+                                       colocate_gradients_with_ops, grad_loss)\n+\n+  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n+    \"\"\"Apply gradients to global variables.\n+\n+    This is the second part of `minimize()`. It returns an `Operation` that\n+    applies gradients.\n+\n+    Args:\n+      grads_and_vars: List of (gradient, variable) pairs as returned by\n+        `compute_gradients()`.\n+      global_step: Optional `Variable` to increment by one after the\n+        variables have been updated.\n+      name: Optional name for the returned operation.  Default to the\n+        name passed to the `Optimizer` constructor.\n+\n+    Returns:\n+      An `Operation` that applies the specified gradients. If `global_step`\n+      was not None, that operation also increments `global_step`.\n+\n+    Raises:\n+      TypeError: If `grads_and_vars` is malformed.\n+      ValueError: If none of the variables have gradients.\n+    \"\"\"\n+    apply_updates = self._opt.apply_gradients(grads_and_vars)\n+    with ops.control_dependencies([apply_updates]):\n+      local_update = state_ops.assign_add(\n+        self._local_step, 1, name='local_step_update').op\n+\n+    # update global variables.\n+    def _Update_global_variables():\n+      local_vars = variables.trainable_variables()\n+      global_center_vars = ops.get_collection_ref(GLOBAL_CENTER_VARIABLE)", "path": "tensorflow/contrib/opt/python/training/elastic_average_optimizer.py", "position": null, "original_position": 242, "commit_id": "632eec0e3064232671de62517a7905242a7e6ecb", "original_commit_id": "5a0f3d8e4a400482d43b7c431aeb2cfb33d4843d", "user": {"login": "jinxin0924", "id": 8096033, "node_id": "MDQ6VXNlcjgwOTYwMzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/8096033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinxin0924", "html_url": "https://github.com/jinxin0924", "followers_url": "https://api.github.com/users/jinxin0924/followers", "following_url": "https://api.github.com/users/jinxin0924/following{/other_user}", "gists_url": "https://api.github.com/users/jinxin0924/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinxin0924/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinxin0924/subscriptions", "organizations_url": "https://api.github.com/users/jinxin0924/orgs", "repos_url": "https://api.github.com/users/jinxin0924/repos", "events_url": "https://api.github.com/users/jinxin0924/events{/privacy}", "received_events_url": "https://api.github.com/users/jinxin0924/received_events", "type": "User", "site_admin": false}, "body": "In EASGD, the vars in grads_and_vars should be updated at each step, and the global variables will be updated when the step is divided by communication_period. I think these variables update should be placed in apply_gradients function. Should I add local_vars and global_center_vars to the apply_gradients function as arguments?", "created_at": "2017-11-13T01:17:46Z", "updated_at": "2017-12-11T05:39:16Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13012#discussion_r150432917", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13012", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/150432917"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13012#discussion_r150432917"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13012"}}, "body_html": "<p>In EASGD, the vars in grads_and_vars should be updated at each step, and the global variables will be updated when the step is divided by communication_period. I think these variables update should be placed in apply_gradients function. Should I add local_vars and global_center_vars to the apply_gradients function as arguments?</p>", "body_text": "In EASGD, the vars in grads_and_vars should be updated at each step, and the global variables will be updated when the step is divided by communication_period. I think these variables update should be placed in apply_gradients function. Should I add local_vars and global_center_vars to the apply_gradients function as arguments?", "in_reply_to_id": 150361634}