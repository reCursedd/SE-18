{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108812667", "pull_request_review_id": 29870346, "id": 108812667, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODgxMjY2Nw==", "diff_hunk": "@@ -0,0 +1,86 @@\n+/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.", "path": "tensorflow/java/src/test/java/org/tensorflow/TensorMatcher.java", "position": 1, "original_position": 1, "commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "original_commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I appreciate the value of matchers in general and how their use is a judgement call in any given situations. In this case, I would like to avoid additional indirection and maintenance burden.\r\n\r\n```java\r\nassertEquals(0, tensor.numDimensions());\r\nassertEquals(0, tensor.shape().length());\r\n```\r\nvery explicitly tells the reader what properties of the `Tensor` object are being validated.\r\nOn the other hand `assertThat(tensor, is(scalar()))` doesn't. Is it looking at all relevant properties? Which ones are relevant? I think on balance, I'd prefer the explicit calls here.", "created_at": "2017-03-29T23:36:49Z", "updated_at": "2017-03-29T23:36:49Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r108812667", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108812667"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r108812667"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400"}}, "body_html": "<p>I appreciate the value of matchers in general and how their use is a judgement call in any given situations. In this case, I would like to avoid additional indirection and maintenance burden.</p>\n<div class=\"highlight highlight-source-java\"><pre>assertEquals(<span class=\"pl-c1\">0</span>, tensor<span class=\"pl-k\">.</span>numDimensions());\nassertEquals(<span class=\"pl-c1\">0</span>, tensor<span class=\"pl-k\">.</span>shape()<span class=\"pl-k\">.</span>length());</pre></div>\n<p>very explicitly tells the reader what properties of the <code>Tensor</code> object are being validated.<br>\nOn the other hand <code>assertThat(tensor, is(scalar()))</code> doesn't. Is it looking at all relevant properties? Which ones are relevant? I think on balance, I'd prefer the explicit calls here.</p>", "body_text": "I appreciate the value of matchers in general and how their use is a judgement call in any given situations. In this case, I would like to avoid additional indirection and maintenance burden.\nassertEquals(0, tensor.numDimensions());\nassertEquals(0, tensor.shape().length());\nvery explicitly tells the reader what properties of the Tensor object are being validated.\nOn the other hand assertThat(tensor, is(scalar())) doesn't. Is it looking at all relevant properties? Which ones are relevant? I think on balance, I'd prefer the explicit calls here.", "in_reply_to_id": 107839240}