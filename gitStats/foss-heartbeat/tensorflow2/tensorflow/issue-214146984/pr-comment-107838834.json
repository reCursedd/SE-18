{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/107838834", "pull_request_review_id": 28767115, "id": 107838834, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNzgzODgzNA==", "diff_hunk": "@@ -256,82 +302,114 @@ public void writeTo() {\n         assertArrayEquals(doubles, actual, EPSILON);\n       }\n \n-      // validate that incompatible buffers are rejected\n-      {\n-        IntBuffer badbuf1 = IntBuffer.allocate(128);\n-        try {\n-          tbools.writeTo(badbuf1);\n-          fail(\"should have failed on incompatible buffer\");\n-        } catch (IllegalArgumentException e) {\n-          // expected\n-        }\n-        FloatBuffer badbuf2 = FloatBuffer.allocate(128);\n-        try {\n-          tbools.writeTo(badbuf2);\n-          fail(\"should have failed on incompatible buffer\");\n-        } catch (IllegalArgumentException e) {\n-          // expected\n-        }\n-        DoubleBuffer badbuf3 = DoubleBuffer.allocate(128);\n-        try {\n-          tbools.writeTo(badbuf3);\n-          fail(\"should have failed on incompatible buffer\");\n-        } catch (IllegalArgumentException e) {\n-          // expected\n-        }\n-        LongBuffer badbuf4 = LongBuffer.allocate(128);\n-        try {\n-          tbools.writeTo(badbuf4);\n-          fail(\"should have failed on incompatible buffer\");\n-        } catch (IllegalArgumentException e) {\n-          // expected\n-        }\n-      }\n     }\n   }\n \n   @Test\n-  public void scalars() {\n-    try (Tensor t = Tensor.create(2.718f)) {\n-      assertEquals(DataType.FLOAT, t.dataType());\n-      assertEquals(0, t.numDimensions());\n-      assertEquals(0, t.shape().length);\n-      assertEquals(2.718f, t.floatValue(), EPSILON_F);\n+  public void whenWriteToIncompatibleDoubleBufferThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"cannot use java.nio.HeapDoubleBuffer with Tensor of type BOOL\");\n+    final boolean[] bools = {true, false, true};\n+\n+    try (Tensor tensor = Tensor.create(bools)) {\n+      final DoubleBuffer badBuffer = DoubleBuffer.allocate(128);\n+      tensor.writeTo(badBuffer);\n     }\n+  }\n \n-    try (Tensor t = Tensor.create(3.1415)) {\n-      assertEquals(DataType.DOUBLE, t.dataType());\n-      assertEquals(0, t.numDimensions());\n-      assertEquals(0, t.shape().length);\n-      assertEquals(3.1415, t.doubleValue(), EPSILON);\n+  @Test\n+  public void whenWriteToIncompatibleFloatBufferThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"cannot use java.nio.HeapFloatBuffer with Tensor of type BOOL\");\n+    final boolean[] bools = {true, false, true};\n+\n+    try (Tensor tensor = Tensor.create(bools)) {\n+      final FloatBuffer badBuffer = FloatBuffer.allocate(128);\n+      tensor.writeTo(badBuffer);\n     }\n+  }\n \n-    try (Tensor t = Tensor.create(-33)) {\n-      assertEquals(DataType.INT32, t.dataType());\n-      assertEquals(0, t.numDimensions());\n-      assertEquals(0, t.shape().length);\n-      assertEquals(-33, t.intValue());\n+  @Test\n+  public void whenWriteToIncompatibleIntBufferThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"cannot use java.nio.HeapIntBuffer with Tensor of type BOOL\");\n+    final boolean[] bools = {true, false, true};\n+\n+    try (Tensor tensor = Tensor.create(bools)) {\n+      final IntBuffer badBuffer = IntBuffer.allocate(128);\n+      tensor.writeTo(badBuffer);\n+    } \n+  }\n+\n+  @Test\n+  public void whenWriteToIncompatibleLongBufferThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"cannot use java.nio.HeapLongBuffer with Tensor of type BOOL\");\n+    final boolean[] bools = {true, false, true};\n+\n+    try (Tensor tensor = Tensor.create(bools)) {\n+      final LongBuffer badBuffer = LongBuffer.allocate(128);\n+      tensor.writeTo(badBuffer);\n     }\n+  }\n \n-    try (Tensor t = Tensor.create(8589934592L)) {\n-      assertEquals(DataType.INT64, t.dataType());\n-      assertEquals(0, t.numDimensions());\n-      assertEquals(0, t.shape().length);\n-      assertEquals(8589934592L, t.longValue());\n+  @Test\n+  public void whenCreateUsingDoubleThenReturnDoubleScalarWithExpectedValue() {", "path": "tensorflow/java/src/test/java/org/tensorflow/TensorTest.java", "position": 285, "original_position": 285, "commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "original_commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Can we shorten these and other test names where possible. For example, this can be just\r\n```java\r\n@Test\r\npublic void createScalarDoubleTensor()\r\n```\r\n", "created_at": "2017-03-24T05:48:55Z", "updated_at": "2017-03-24T05:58:54Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r107838834", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/107838834"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r107838834"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400"}}, "body_html": "<p>Can we shorten these and other test names where possible. For example, this can be just</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">@Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> createScalarDoubleTensor()</pre></div>", "body_text": "Can we shorten these and other test names where possible. For example, this can be just\n@Test\npublic void createScalarDoubleTensor()"}