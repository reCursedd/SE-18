{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108038392", "pull_request_review_id": 29049722, "id": 108038392, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODAzODM5Mg==", "diff_hunk": "@@ -401,71 +479,74 @@ public void failCreateOnMismatchedDimensions() {\n   }\n \n   @Test\n-  public void failCopyToOnIncompatibleDestination() {\n+  public void whenCopyToWithDimensionMismatchThenThrowExpectedException() {", "path": "tensorflow/java/src/test/java/org/tensorflow/TensorTest.java", "position": 393, "original_position": 393, "commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "original_commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "user": {"login": "craykg", "id": 15415443, "node_id": "MDQ6VXNlcjE1NDE1NDQz", "avatar_url": "https://avatars1.githubusercontent.com/u/15415443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/craykg", "html_url": "https://github.com/craykg", "followers_url": "https://api.github.com/users/craykg/followers", "following_url": "https://api.github.com/users/craykg/following{/other_user}", "gists_url": "https://api.github.com/users/craykg/gists{/gist_id}", "starred_url": "https://api.github.com/users/craykg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/craykg/subscriptions", "organizations_url": "https://api.github.com/users/craykg/orgs", "repos_url": "https://api.github.com/users/craykg/repos", "events_url": "https://api.github.com/users/craykg/events{/privacy}", "received_events_url": "https://api.github.com/users/craykg/received_events", "type": "User", "site_admin": false}, "body": "Generally I aim to write test method names so that when they show up in a failure report, you don't have to look at the test code to work out what went wrong. The whenXThenY is a shorted version of behaviour driven development's Given When Then format.\r\n\r\nIn the case of failCopyToOnIncompatibleDestination() you know it should fail, but it doesn't tell you how its should fail, nor does it tell you what specific thing you were expecting to cause the failure. Anyone who has dug into the Tensor class will know that you can fail on a type mismatch, a dimension mismatch, or a shape mismatch, and all of these throw a IllegalArgumentException with different exception messages (or at least should do). \r\n\r\nWe could change it to failCopyToOnIncompatibleDestinationShape() although that still doesn't tell us how its supposed to fail.", "created_at": "2017-03-25T15:22:58Z", "updated_at": "2017-03-25T15:22:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r108038392", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108038392"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r108038392"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400"}}, "body_html": "<p>Generally I aim to write test method names so that when they show up in a failure report, you don't have to look at the test code to work out what went wrong. The whenXThenY is a shorted version of behaviour driven development's Given When Then format.</p>\n<p>In the case of failCopyToOnIncompatibleDestination() you know it should fail, but it doesn't tell you how its should fail, nor does it tell you what specific thing you were expecting to cause the failure. Anyone who has dug into the Tensor class will know that you can fail on a type mismatch, a dimension mismatch, or a shape mismatch, and all of these throw a IllegalArgumentException with different exception messages (or at least should do).</p>\n<p>We could change it to failCopyToOnIncompatibleDestinationShape() although that still doesn't tell us how its supposed to fail.</p>", "body_text": "Generally I aim to write test method names so that when they show up in a failure report, you don't have to look at the test code to work out what went wrong. The whenXThenY is a shorted version of behaviour driven development's Given When Then format.\nIn the case of failCopyToOnIncompatibleDestination() you know it should fail, but it doesn't tell you how its should fail, nor does it tell you what specific thing you were expecting to cause the failure. Anyone who has dug into the Tensor class will know that you can fail on a type mismatch, a dimension mismatch, or a shape mismatch, and all of these throw a IllegalArgumentException with different exception messages (or at least should do).\nWe could change it to failCopyToOnIncompatibleDestinationShape() although that still doesn't tell us how its supposed to fail.", "in_reply_to_id": 107839012}