{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108037808", "pull_request_review_id": 29049088, "id": 108037808, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODAzNzgwOA==", "diff_hunk": "@@ -105,55 +116,90 @@ public void createFromBufferWithNonNativeByteOrder() {\n   }\n \n   @Test\n-  public void createWithTypedBuffer() {\n-    int[] ints = {1, 2, 3, 4};\n-    float[] floats = {1f, 2f, 3f, 4f};\n-    double[] doubles = {1d, 2d, 3d, 4d};\n-    long[] longs = {1L, 2L, 3L, 4L};\n-    long[] shape = {4};\n+  public void whenCreateUsingDoubleBufferThenExpectedMatrixIsStoredInTensor() {\n+    final double[] expected = {1d, 2d, 3d, 4d};\n+    final long[] shape = {4};\n+\n+    try (final Tensor t = Tensor.create(shape, DoubleBuffer.wrap(expected))) {\n+      final double[] actual = new double[expected.length];\n+      t.copyTo(actual);\n+      assertArrayEquals(expected, actual, EPSILON);\n+    }\n+  }\n \n-    // validate creating a tensor using a typed buffer\n-    {\n-      try (Tensor t = Tensor.create(shape, DoubleBuffer.wrap(doubles))) {\n-        double[] actual = new double[doubles.length];\n-        assertArrayEquals(doubles, t.copyTo(actual), EPSILON);\n-      }\n-      try (Tensor t = Tensor.create(shape, FloatBuffer.wrap(floats))) {\n-        float[] actual = new float[floats.length];\n-        assertArrayEquals(floats, t.copyTo(actual), EPSILON_F);\n-      }\n-      try (Tensor t = Tensor.create(shape, IntBuffer.wrap(ints))) {\n-        int[] actual = new int[ints.length];\n-        assertArrayEquals(ints, t.copyTo(actual));\n-      }\n-      try (Tensor t = Tensor.create(shape, LongBuffer.wrap(longs))) {\n-        long[] actual = new long[longs.length];\n-        assertArrayEquals(longs, t.copyTo(actual));\n-      }\n+  @Test\n+  public void whenCreateUsingFloatBufferThenExpectedMatrixIsStoredInTensor() {\n+    final float[] expected = {1f, 2f, 3f, 4f};\n+    final long[] shape = {4};\n+\n+    try (Tensor t = Tensor.create(shape, FloatBuffer.wrap(expected))) {\n+      final float[] actual = new float[expected.length];\n+      t.copyTo(actual);\n+      assertArrayEquals(expected, actual, EPSILON_F);\n+    }\n+  }\n+  \n+  @Test\n+  public void whenCreateUsingIntBufferThenExpectedMatrixIsStoredInTensor() {\n+    final int[] expected = {1, 2, 3, 4};\n+    final long[] shape = {4};\n+\n+    try (Tensor t = Tensor.create(shape, IntBuffer.wrap(expected))) {\n+      final int[] actual = new int[expected.length];\n+      t.copyTo(actual);\n+      assertArrayEquals(expected, actual);\n     }\n+  }\n \n-    // validate shape-checking\n-    {\n-      try (Tensor t = Tensor.create(new long[doubles.length + 1], DoubleBuffer.wrap(doubles))) {\n-        fail(\"should have failed on incompatible buffer\");\n-      } catch (IllegalArgumentException e) {\n-        // expected\n-      }\n-      try (Tensor t = Tensor.create(new long[floats.length + 1], FloatBuffer.wrap(floats))) {\n-        fail(\"should have failed on incompatible buffer\");\n-      } catch (IllegalArgumentException e) {\n-        // expected\n-      }\n-      try (Tensor t = Tensor.create(new long[ints.length + 1], IntBuffer.wrap(ints))) {\n-        fail(\"should have failed on incompatible buffer\");\n-      } catch (IllegalArgumentException e) {\n-        // expected\n-      }\n-      try (Tensor t = Tensor.create(new long[longs.length + 1], LongBuffer.wrap(longs))) {\n-        fail(\"should have failed on incompatible buffer\");\n-      } catch (IllegalArgumentException e) {\n-        // expected\n-      }\n+  @Test\n+  public void whenCreateUsingLongBufferThenExpectedMatrixIsStoredInTensor() {\n+    final long[] expected = {1L, 2L, 3L, 4L};\n+    final long[] shape = {4};\n+\n+    try (Tensor t = Tensor.create(shape, LongBuffer.wrap(expected))) {\n+      final long[] actual = new long[expected.length];\n+      t.copyTo(actual);\n+      assertArrayEquals(expected, actual);\n+    }\n+  }\n+\n+  @Test\n+  public void whenCreateUsingDoubleBufferWithIncorrectShapeThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"buffer with 4 elements is not compatible with a Tensor with shape [0, 0, 0, 0, 0]\");\n+    final double[] expected = {1D, 2D, 3D, 4D};\n+\n+    try(Tensor t = Tensor.create(new long[expected.length + 1], DoubleBuffer.wrap(expected))) {\n+    }\n+  }\n+\n+  @Test\n+  public void whenCreateUsingFloatBufferWithIncorrectShapeThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"buffer with 4 elements is not compatible with a Tensor with shape [0, 0, 0, 0, 0]\");", "path": "tensorflow/java/src/test/java/org/tensorflow/TensorTest.java", "position": 150, "original_position": 150, "commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "original_commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "user": {"login": "craykg", "id": 15415443, "node_id": "MDQ6VXNlcjE1NDE1NDQz", "avatar_url": "https://avatars1.githubusercontent.com/u/15415443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/craykg", "html_url": "https://github.com/craykg", "followers_url": "https://api.github.com/users/craykg/followers", "following_url": "https://api.github.com/users/craykg/following{/other_user}", "gists_url": "https://api.github.com/users/craykg/gists{/gist_id}", "starred_url": "https://api.github.com/users/craykg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/craykg/subscriptions", "organizations_url": "https://api.github.com/users/craykg/orgs", "repos_url": "https://api.github.com/users/craykg/repos", "events_url": "https://api.github.com/users/craykg/events{/privacy}", "received_events_url": "https://api.github.com/users/craykg/received_events", "type": "User", "site_admin": false}, "body": "Certainly could. My general aim, given how invasive the changes were to the structure of the files, was to leave the test data intact in case it was like it was for a reason.", "created_at": "2017-03-25T14:45:00Z", "updated_at": "2017-03-25T14:45:00Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r108037808", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108037808"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r108037808"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400"}}, "body_html": "<p>Certainly could. My general aim, given how invasive the changes were to the structure of the files, was to leave the test data intact in case it was like it was for a reason.</p>", "body_text": "Certainly could. My general aim, given how invasive the changes were to the structure of the files, was to leave the test data intact in case it was like it was for a reason.", "in_reply_to_id": 107838688}