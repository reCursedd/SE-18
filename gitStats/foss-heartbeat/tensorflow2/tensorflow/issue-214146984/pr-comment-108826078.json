{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108826078", "pull_request_review_id": 29884512, "id": 108826078, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODgyNjA3OA==", "diff_hunk": "@@ -256,82 +302,114 @@ public void writeTo() {\n         assertArrayEquals(doubles, actual, EPSILON);\n       }\n \n-      // validate that incompatible buffers are rejected\n-      {\n-        IntBuffer badbuf1 = IntBuffer.allocate(128);\n-        try {\n-          tbools.writeTo(badbuf1);\n-          fail(\"should have failed on incompatible buffer\");\n-        } catch (IllegalArgumentException e) {\n-          // expected\n-        }\n-        FloatBuffer badbuf2 = FloatBuffer.allocate(128);\n-        try {\n-          tbools.writeTo(badbuf2);\n-          fail(\"should have failed on incompatible buffer\");\n-        } catch (IllegalArgumentException e) {\n-          // expected\n-        }\n-        DoubleBuffer badbuf3 = DoubleBuffer.allocate(128);\n-        try {\n-          tbools.writeTo(badbuf3);\n-          fail(\"should have failed on incompatible buffer\");\n-        } catch (IllegalArgumentException e) {\n-          // expected\n-        }\n-        LongBuffer badbuf4 = LongBuffer.allocate(128);\n-        try {\n-          tbools.writeTo(badbuf4);\n-          fail(\"should have failed on incompatible buffer\");\n-        } catch (IllegalArgumentException e) {\n-          // expected\n-        }\n-      }\n     }\n   }\n \n   @Test\n-  public void scalars() {\n-    try (Tensor t = Tensor.create(2.718f)) {\n-      assertEquals(DataType.FLOAT, t.dataType());\n-      assertEquals(0, t.numDimensions());\n-      assertEquals(0, t.shape().length);\n-      assertEquals(2.718f, t.floatValue(), EPSILON_F);\n+  public void whenWriteToIncompatibleDoubleBufferThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"cannot use java.nio.HeapDoubleBuffer with Tensor of type BOOL\");\n+    final boolean[] bools = {true, false, true};\n+\n+    try (Tensor tensor = Tensor.create(bools)) {\n+      final DoubleBuffer badBuffer = DoubleBuffer.allocate(128);\n+      tensor.writeTo(badBuffer);\n     }\n+  }\n \n-    try (Tensor t = Tensor.create(3.1415)) {\n-      assertEquals(DataType.DOUBLE, t.dataType());\n-      assertEquals(0, t.numDimensions());\n-      assertEquals(0, t.shape().length);\n-      assertEquals(3.1415, t.doubleValue(), EPSILON);\n+  @Test\n+  public void whenWriteToIncompatibleFloatBufferThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"cannot use java.nio.HeapFloatBuffer with Tensor of type BOOL\");\n+    final boolean[] bools = {true, false, true};\n+\n+    try (Tensor tensor = Tensor.create(bools)) {\n+      final FloatBuffer badBuffer = FloatBuffer.allocate(128);\n+      tensor.writeTo(badBuffer);\n     }\n+  }\n \n-    try (Tensor t = Tensor.create(-33)) {\n-      assertEquals(DataType.INT32, t.dataType());\n-      assertEquals(0, t.numDimensions());\n-      assertEquals(0, t.shape().length);\n-      assertEquals(-33, t.intValue());\n+  @Test\n+  public void whenWriteToIncompatibleIntBufferThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"cannot use java.nio.HeapIntBuffer with Tensor of type BOOL\");\n+    final boolean[] bools = {true, false, true};\n+\n+    try (Tensor tensor = Tensor.create(bools)) {\n+      final IntBuffer badBuffer = IntBuffer.allocate(128);\n+      tensor.writeTo(badBuffer);\n+    } \n+  }\n+\n+  @Test\n+  public void whenWriteToIncompatibleLongBufferThenThrowExpectedException() {\n+    expectedException.expect(IllegalArgumentException.class);\n+    expectedException.expectMessage(\"cannot use java.nio.HeapLongBuffer with Tensor of type BOOL\");\n+    final boolean[] bools = {true, false, true};\n+\n+    try (Tensor tensor = Tensor.create(bools)) {\n+      final LongBuffer badBuffer = LongBuffer.allocate(128);\n+      tensor.writeTo(badBuffer);\n     }\n+  }\n \n-    try (Tensor t = Tensor.create(8589934592L)) {\n-      assertEquals(DataType.INT64, t.dataType());\n-      assertEquals(0, t.numDimensions());\n-      assertEquals(0, t.shape().length);\n-      assertEquals(8589934592L, t.longValue());\n+  @Test\n+  public void whenCreateUsingDoubleThenReturnDoubleScalarWithExpectedValue() {", "path": "tensorflow/java/src/test/java/org/tensorflow/TensorTest.java", "position": 285, "original_position": 285, "commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "original_commit_id": "0404ac06d5d0d07e08b97e987106b9096c6cb045", "user": {"login": "RealTimeDeployment", "id": 24883463, "node_id": "MDQ6VXNlcjI0ODgzNDYz", "avatar_url": "https://avatars0.githubusercontent.com/u/24883463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RealTimeDeployment", "html_url": "https://github.com/RealTimeDeployment", "followers_url": "https://api.github.com/users/RealTimeDeployment/followers", "following_url": "https://api.github.com/users/RealTimeDeployment/following{/other_user}", "gists_url": "https://api.github.com/users/RealTimeDeployment/gists{/gist_id}", "starred_url": "https://api.github.com/users/RealTimeDeployment/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RealTimeDeployment/subscriptions", "organizations_url": "https://api.github.com/users/RealTimeDeployment/orgs", "repos_url": "https://api.github.com/users/RealTimeDeployment/repos", "events_url": "https://api.github.com/users/RealTimeDeployment/events{/privacy}", "received_events_url": "https://api.github.com/users/RealTimeDeployment/received_events", "type": "User", "site_admin": false}, "body": "Shortening names sounds good to me", "created_at": "2017-03-30T01:48:58Z", "updated_at": "2017-03-30T01:48:58Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r108826078", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108826078"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8400#discussion_r108826078"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8400"}}, "body_html": "<p>Shortening names sounds good to me</p>", "body_text": "Shortening names sounds good to me", "in_reply_to_id": 107838834}