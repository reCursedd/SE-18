{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/161019498", "html_url": "https://github.com/tensorflow/tensorflow/issues/388#issuecomment-161019498", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/388", "id": 161019498, "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTAxOTQ5OA==", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-01T16:20:29Z", "updated_at": "2015-12-01T16:20:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Moving email discussion here:</p>\n<p>Rust bindings would be cool!  I don't think there's anyone working on rust bindings so far, though it might be worth an email to <a href=\"mailto:discuss@tensorflow.org\">discuss@tensorflow.org</a> to check.  Agreed that a separate project is probably good to start out.</p>\n<p>To start the conversation, there are a couple different levels of bindings:</p>\n<ol>\n<li>Bindings that do not know about specific ops, but can create graphs \"manually\" or load them from GraphDefs, evaluate graphs (so that tensorflow models can be run inside rust servers), etc.  There's hopefully nothing blocking that.</li>\n<li>Autogenerated bindings for each C++ op.  We do this for Python, and similar things should work for Rust (ideally with a lot more type safety).  I have limited intuition for rust's handling of ad-hoc polymorphism, so I can't judge how easy it'll be to fit tensorflow's notions of polymorphism into rust's.  Again, there's hopefully nothing blocking this.</li>\n<li>Idiomatic bindings.  We currently have a lot of logic in pure Python, including both per-op sugar and key features such as automatic differentiation.  We will likely eventually move this to C++, but until then it will be difficult to capture this functionality in rust bindings without duplicating a ton of effort.  Unfortunately, automatic differentiation in particular is (mostly) necessary if you want to train models.</li>\n</ol>\n<p>It's probably best to shoot for (1) to start and only move to (2) once it's clear how much of (3) will be a blocker for the desired applications.</p>", "body_text": "Moving email discussion here:\nRust bindings would be cool!  I don't think there's anyone working on rust bindings so far, though it might be worth an email to discuss@tensorflow.org to check.  Agreed that a separate project is probably good to start out.\nTo start the conversation, there are a couple different levels of bindings:\n\nBindings that do not know about specific ops, but can create graphs \"manually\" or load them from GraphDefs, evaluate graphs (so that tensorflow models can be run inside rust servers), etc.  There's hopefully nothing blocking that.\nAutogenerated bindings for each C++ op.  We do this for Python, and similar things should work for Rust (ideally with a lot more type safety).  I have limited intuition for rust's handling of ad-hoc polymorphism, so I can't judge how easy it'll be to fit tensorflow's notions of polymorphism into rust's.  Again, there's hopefully nothing blocking this.\nIdiomatic bindings.  We currently have a lot of logic in pure Python, including both per-op sugar and key features such as automatic differentiation.  We will likely eventually move this to C++, but until then it will be difficult to capture this functionality in rust bindings without duplicating a ton of effort.  Unfortunately, automatic differentiation in particular is (mostly) necessary if you want to train models.\n\nIt's probably best to shoot for (1) to start and only move to (2) once it's clear how much of (3) will be a blocker for the desired applications.", "body": "Moving email discussion here:\n\nRust bindings would be cool!  I don't think there's anyone working on rust bindings so far, though it might be worth an email to discuss@tensorflow.org to check.  Agreed that a separate project is probably good to start out.\n\nTo start the conversation, there are a couple different levels of bindings:\n1. Bindings that do not know about specific ops, but can create graphs \"manually\" or load them from GraphDefs, evaluate graphs (so that tensorflow models can be run inside rust servers), etc.  There's hopefully nothing blocking that.\n2. Autogenerated bindings for each C++ op.  We do this for Python, and similar things should work for Rust (ideally with a lot more type safety).  I have limited intuition for rust's handling of ad-hoc polymorphism, so I can't judge how easy it'll be to fit tensorflow's notions of polymorphism into rust's.  Again, there's hopefully nothing blocking this.\n3. Idiomatic bindings.  We currently have a lot of logic in pure Python, including both per-op sugar and key features such as automatic differentiation.  We will likely eventually move this to C++, but until then it will be difficult to capture this functionality in rust bindings without duplicating a ton of effort.  Unfortunately, automatic differentiation in particular is (mostly) necessary if you want to train models.\n\nIt's probably best to shoot for (1) to start and only move to (2) once it's clear how much of (3) will be a blocker for the desired applications.\n"}