{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/381153193", "html_url": "https://github.com/tensorflow/tensorflow/issues/12252#issuecomment-381153193", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12252", "id": 381153193, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTE1MzE5Mw==", "user": {"login": "gissemari", "id": 20429614, "node_id": "MDQ6VXNlcjIwNDI5NjE0", "avatar_url": "https://avatars3.githubusercontent.com/u/20429614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gissemari", "html_url": "https://github.com/gissemari", "followers_url": "https://api.github.com/users/gissemari/followers", "following_url": "https://api.github.com/users/gissemari/following{/other_user}", "gists_url": "https://api.github.com/users/gissemari/gists{/gist_id}", "starred_url": "https://api.github.com/users/gissemari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gissemari/subscriptions", "organizations_url": "https://api.github.com/users/gissemari/orgs", "repos_url": "https://api.github.com/users/gissemari/repos", "events_url": "https://api.github.com/users/gissemari/events{/privacy}", "received_events_url": "https://api.github.com/users/gissemari/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-13T14:29:00Z", "updated_at": "2018-04-13T14:29:00Z", "author_association": "NONE", "body_html": "<p>Sure. According to the example here, <em>cost</em> can be used for the optimization, while <em>performance</em> can be just the metric (as the module tf.metrics suggest).<br>\ncost = tf.losses.mean_squared_error(y, predictions)<br>\noptimizer = tf.train.AdadeltaOptimizer(learning_rate=learning_rate).minimize(cost)<br>\nperformance  = tf.metrics.mean_absolute_error(pred, y)[0]</p>", "body_text": "Sure. According to the example here, cost can be used for the optimization, while performance can be just the metric (as the module tf.metrics suggest).\ncost = tf.losses.mean_squared_error(y, predictions)\noptimizer = tf.train.AdadeltaOptimizer(learning_rate=learning_rate).minimize(cost)\nperformance  = tf.metrics.mean_absolute_error(pred, y)[0]", "body": "Sure. According to the example here, _cost_ can be used for the optimization, while _performance_ can be just the metric (as the module tf.metrics suggest).\r\ncost = tf.losses.mean_squared_error(y, predictions)\r\noptimizer = tf.train.AdadeltaOptimizer(learning_rate=learning_rate).minimize(cost)\r\nperformance  = tf.metrics.mean_absolute_error(pred, y)[0]"}