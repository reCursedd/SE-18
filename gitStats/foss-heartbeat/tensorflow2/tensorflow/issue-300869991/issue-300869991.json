{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17316", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17316/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17316/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17316/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17316", "id": 300869991, "node_id": "MDU6SXNzdWUzMDA4Njk5OTE=", "number": 17316, "title": "ABI for `tensorflow::core::RefCounted` is error-prone", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-28T02:43:03Z", "updated_at": "2018-07-23T21:17:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: tf-nightly</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: (see above)</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>For performance, the implementation of <code>RefCounted</code> comprises a set of inline methods. Furthermore, it contains a cunning optimization that avoids updating the refcount when the caller to <code>Unref()</code> is the only owner:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/3ba1f72f8829c566372208062fcea04ab5695dc6/tensorflow/core/lib/core/refcount.h#L88-L89\">tensorflow/tensorflow/core/lib/core/refcount.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 88 to 89\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/3ba1f72f8829c566372208062fcea04ab5695dc6\">3ba1f72</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L88\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"88\"></td>\n          <td id=\"LC88\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> If ref_==1, this object is owned only by the caller. Bypass a locked op</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L89\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"89\"></td>\n          <td id=\"LC89\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> in that case.</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>It also includes some <code>DCHECK</code> macros to ensure that various invariants hold:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/3ba1f72f8829c566372208062fcea04ab5695dc6/tensorflow/core/lib/core/refcount.h#L79\">tensorflow/tensorflow/core/lib/core/refcount.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 79\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/3ba1f72f8829c566372208062fcea04ab5695dc6\">3ba1f72</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L79\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"79\"></td>\n          <td id=\"LC79\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">inline</span> <span class=\"pl-en\">RefCounted::~RefCounted</span>() { <span class=\"pl-c1\">DCHECK_EQ</span>(ref_.<span class=\"pl-c1\">load</span>(), <span class=\"pl-c1\">0</span>); } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/3ba1f72f8829c566372208062fcea04ab5695dc6/tensorflow/core/lib/core/refcount.h#L90-L92\">tensorflow/tensorflow/core/lib/core/refcount.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 90 to 92\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/3ba1f72f8829c566372208062fcea04ab5695dc6\">3ba1f72</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L90\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"90\"></td>\n          <td id=\"LC90\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">RefCountIsOne</span>() || ref_.<span class=\"pl-c1\">fetch_sub</span>(<span class=\"pl-c1\">1</span>) == <span class=\"pl-c1\">1</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L91\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"91\"></td>\n          <td id=\"LC91\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> Make DCHECK in ~RefCounted happy</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L92\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"92\"></td>\n          <td id=\"LC92\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">DCHECK</span>((ref_.<span class=\"pl-c1\">store</span>(<span class=\"pl-c1\">0</span>), <span class=\"pl-c1\">true</span>)); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>Note that that second <code>DCHECK</code> performs a side-effect to make the first one succeed.</p>\n<p>The release build is built with <code>NDEBUG</code> defined, so the <code>DCHECK</code> code doesn't execute. However, the default flags you get when following the <a href=\"https://www.tensorflow.org/versions/r1.6/extend/adding_an_op\" rel=\"nofollow\">Adding an New Op</a> tutorial to build an extension do not include <code>-DNDEBUG</code>.</p>\n<p>Recall that the methods are marked <code>inline</code>.  This means that some code in the release binary might call (an inlined version of) <code>Unref()</code> and the store to <code>ref_</code> will be elided, but some code in an extension (e.g. one that creates a custom <code>ResourceBase</code>, which inherits from <code>RefCounted</code>) might call <code>~RefCounted()</code> and the <code>DCHECK</code> will be performed, leading to a failure.</p>\n<p>The workaround is to add <code>-DNDEBUG</code> to the compiler flags when adding a new op. Should we update the documentation, update the <code>tf.sysconfig.get_compile_flags()</code> implementation, or modify how <code>RefCounted</code> is implemented to avoid this problem altogether?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): tf-nightly\nPython version: 2.7\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: (see above)\n\nDescribe the problem\nFor performance, the implementation of RefCounted comprises a set of inline methods. Furthermore, it contains a cunning optimization that avoids updating the refcount when the caller to Unref() is the only owner:\n\n  \n    \n      tensorflow/tensorflow/core/lib/core/refcount.h\n    \n    \n        Lines 88 to 89\n      in\n      3ba1f72\n    \n    \n    \n    \n\n        \n          \n           // If ref_==1, this object is owned only by the caller. Bypass a locked op \n        \n\n        \n          \n           // in that case. \n        \n    \n  \n\n\nIt also includes some DCHECK macros to ensure that various invariants hold:\n\n  \n    \n      tensorflow/tensorflow/core/lib/core/refcount.h\n    \n    \n         Line 79\n      in\n      3ba1f72\n    \n    \n    \n    \n\n        \n          \n           inline RefCounted::~RefCounted() { DCHECK_EQ(ref_.load(), 0); } \n        \n    \n  \n\n\n\n  \n    \n      tensorflow/tensorflow/core/lib/core/refcount.h\n    \n    \n        Lines 90 to 92\n      in\n      3ba1f72\n    \n    \n    \n    \n\n        \n          \n           if (RefCountIsOne() || ref_.fetch_sub(1) == 1) { \n        \n\n        \n          \n             // Make DCHECK in ~RefCounted happy \n        \n\n        \n          \n             DCHECK((ref_.store(0), true)); \n        \n    \n  \n\n\nNote that that second DCHECK performs a side-effect to make the first one succeed.\nThe release build is built with NDEBUG defined, so the DCHECK code doesn't execute. However, the default flags you get when following the Adding an New Op tutorial to build an extension do not include -DNDEBUG.\nRecall that the methods are marked inline.  This means that some code in the release binary might call (an inlined version of) Unref() and the store to ref_ will be elided, but some code in an extension (e.g. one that creates a custom ResourceBase, which inherits from RefCounted) might call ~RefCounted() and the DCHECK will be performed, leading to a failure.\nThe workaround is to add -DNDEBUG to the compiler flags when adding a new op. Should we update the documentation, update the tf.sysconfig.get_compile_flags() implementation, or modify how RefCounted is implemented to avoid this problem altogether?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: tf-nightly\r\n- **Python version**: 2.7\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: (see above)\r\n\r\n### Describe the problem\r\n\r\nFor performance, the implementation of `RefCounted` comprises a set of inline methods. Furthermore, it contains a cunning optimization that avoids updating the refcount when the caller to `Unref()` is the only owner:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/3ba1f72f8829c566372208062fcea04ab5695dc6/tensorflow/core/lib/core/refcount.h#L88-L89\r\n\r\nIt also includes some `DCHECK` macros to ensure that various invariants hold:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/3ba1f72f8829c566372208062fcea04ab5695dc6/tensorflow/core/lib/core/refcount.h#L79\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/3ba1f72f8829c566372208062fcea04ab5695dc6/tensorflow/core/lib/core/refcount.h#L90-L92\r\n\r\nNote that that second `DCHECK` performs a side-effect to make the first one succeed. \r\n\r\nThe release build is built with `NDEBUG` defined, so the `DCHECK` code doesn't execute. However, the default flags you get when following the [Adding an New Op](https://www.tensorflow.org/versions/r1.6/extend/adding_an_op) tutorial to build an extension do not include `-DNDEBUG`. \r\n\r\nRecall that the methods are marked `inline`.  This means that some code in the release binary might call (an inlined version of) `Unref()` and the store to `ref_` will be elided, but some code in an extension (e.g. one that creates a custom `ResourceBase`, which inherits from `RefCounted`) might call `~RefCounted()` and the `DCHECK` will be performed, leading to a failure.\r\n\r\nThe workaround is to add `-DNDEBUG` to the compiler flags when adding a new op. Should we update the documentation, update the `tf.sysconfig.get_compile_flags()` implementation, or modify how `RefCounted` is implemented to avoid this problem altogether? \r\n"}