{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/250788570", "html_url": "https://github.com/tensorflow/tensorflow/issues/4588#issuecomment-250788570", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4588", "id": 250788570, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDc4ODU3MA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-30T16:22:32Z", "updated_at": "2016-09-30T16:22:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> <code>TensorShape.__eq__()</code> and <code>TensorShape.__ne__()</code> probably don't have the behavior you'd expect when some of the dimensions are unknown. (In particular, <code>(None, x) == (None, x)</code> and <code>(None, x) != (None, x)</code> both return <code>None</code> because the value is unknown.)</p>\n<p>So this library code probably shouldn't be using <code>==</code> or <code>!=</code> to compare shapes. Use <code>merge_with()</code>, <code>assert_compatible_with()</code> etc. instead.</p>", "body_text": "@ebrevdo TensorShape.__eq__() and TensorShape.__ne__() probably don't have the behavior you'd expect when some of the dimensions are unknown. (In particular, (None, x) == (None, x) and (None, x) != (None, x) both return None because the value is unknown.)\nSo this library code probably shouldn't be using == or != to compare shapes. Use merge_with(), assert_compatible_with() etc. instead.", "body": "@ebrevdo `TensorShape.__eq__()` and `TensorShape.__ne__()` probably don't have the behavior you'd expect when some of the dimensions are unknown. (In particular, `(None, x) == (None, x)` and `(None, x) != (None, x)` both return `None` because the value is unknown.)\n\nSo this library code probably shouldn't be using `==` or `!=` to compare shapes. Use `merge_with()`, `assert_compatible_with()` etc. instead.\n"}