{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/235319713", "html_url": "https://github.com/tensorflow/tensorflow/issues/3420#issuecomment-235319713", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3420", "id": 235319713, "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTMxOTcxMw==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-26T16:12:46Z", "updated_at": "2016-07-26T16:12:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p>When using a dynamic_rnn, there is an \"execution barrier\" between calls to dynamic_rnn; because of the way that data is processed at input &amp; output to the RNN while_loop.  The bidirectional_dynamic_rnn just calls dynamic_rnn twice, much the way you do in <code>bi_lstm_no_sql</code>.  In fact, it also uses <code>reverse_sequence</code>, which <em>also</em> forms a barrier between any two RNN calls.  There's no way around <code>reverse_sequence</code>: all its inputs must be available to properly verse time according to the counts in <code>sequence_length</code>.  If you can suggest a way to improve performance or, e.g., make a simpler dynamic sequence reversal system (which does not rely on a monolithic op) then I would like to hear it.</p>", "body_text": "When using a dynamic_rnn, there is an \"execution barrier\" between calls to dynamic_rnn; because of the way that data is processed at input & output to the RNN while_loop.  The bidirectional_dynamic_rnn just calls dynamic_rnn twice, much the way you do in bi_lstm_no_sql.  In fact, it also uses reverse_sequence, which also forms a barrier between any two RNN calls.  There's no way around reverse_sequence: all its inputs must be available to properly verse time according to the counts in sequence_length.  If you can suggest a way to improve performance or, e.g., make a simpler dynamic sequence reversal system (which does not rely on a monolithic op) then I would like to hear it.", "body": "When using a dynamic_rnn, there is an \"execution barrier\" between calls to dynamic_rnn; because of the way that data is processed at input & output to the RNN while_loop.  The bidirectional_dynamic_rnn just calls dynamic_rnn twice, much the way you do in `bi_lstm_no_sql`.  In fact, it also uses `reverse_sequence`, which _also_ forms a barrier between any two RNN calls.  There's no way around `reverse_sequence`: all its inputs must be available to properly verse time according to the counts in `sequence_length`.  If you can suggest a way to improve performance or, e.g., make a simpler dynamic sequence reversal system (which does not rely on a monolithic op) then I would like to hear it.\n"}