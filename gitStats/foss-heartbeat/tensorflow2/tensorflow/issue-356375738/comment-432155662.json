{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/432155662", "html_url": "https://github.com/tensorflow/tensorflow/issues/22019#issuecomment-432155662", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22019", "id": 432155662, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjE1NTY2Mg==", "user": {"login": "IMBurbank", "id": 21133719, "node_id": "MDQ6VXNlcjIxMTMzNzE5", "avatar_url": "https://avatars1.githubusercontent.com/u/21133719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IMBurbank", "html_url": "https://github.com/IMBurbank", "followers_url": "https://api.github.com/users/IMBurbank/followers", "following_url": "https://api.github.com/users/IMBurbank/following{/other_user}", "gists_url": "https://api.github.com/users/IMBurbank/gists{/gist_id}", "starred_url": "https://api.github.com/users/IMBurbank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IMBurbank/subscriptions", "organizations_url": "https://api.github.com/users/IMBurbank/orgs", "repos_url": "https://api.github.com/users/IMBurbank/repos", "events_url": "https://api.github.com/users/IMBurbank/events{/privacy}", "received_events_url": "https://api.github.com/users/IMBurbank/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-23T08:47:49Z", "updated_at": "2018-10-23T17:53:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This is a bit of a stream-of-consciousness response. I slowly typed it as I dug back into this issue.</p>\n<p>First, I decided to go back and confirm your error in 1.10 - and if it still existed in the current 1.11.</p>\n<p>I cloned the tensorflow repo, entered it and built a current dockerfile</p>\n<div class=\"highlight highlight-source-shell\"><pre>docker build -f tensorflow/tools/dockerfiles/dockerfiles/nvidia.Dockerfile -t tf tensorflow/tools/dockerfiles/\n\ndocker run --rm --runtime=nvidia -u <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>id -u<span class=\"pl-pds\">)</span></span>:<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>id -g<span class=\"pl-pds\">)</span></span> -v <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>pwd<span class=\"pl-pds\">)</span></span>:/my-devel -it tf</pre></div>\n<p>I entered the directory and ran <code>freeze_graph.py</code></p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c1\">cd</span> my-devel/\npython3 tensorflow/python/tools/freeze_graph.py</pre></div>\n<p>And received the expected message</p>\n<pre><code>Input checkpoint '' doesn't exist!\n</code></pre>\n<p>I added a <code>TF_PACKAGE</code> <code>build-arg</code> the <code>nvidia.Dockerfile</code> to install tensorflow 1.10.1 and rebuilt.</p>\n<div class=\"highlight highlight-source-shell\"><pre>docker build -f tensorflow/tools/dockerfiles/dockerfiles/nvidia.Dockerfile -t tf --build-arg TF_PACKAGE=tensorflow-gpu==1.10.1 tensorflow/tools/dockerfiles/\n\ndocker run --rm --runtime=nvidia -u <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>id -u<span class=\"pl-pds\">)</span></span>:<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>id -g<span class=\"pl-pds\">)</span></span> -v <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>pwd<span class=\"pl-pds\">)</span></span>:/my-devel -it tf</pre></div>\n<p>This time running gave the same error originally reported.</p>\n<div class=\"highlight highlight-source-shell\"><pre>Traceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/python/tools/freeze_graph.py<span class=\"pl-pds\">\"</span></span>, line 58, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    from tensorflow.python.training import checkpoint_management\nImportError: cannot import name <span class=\"pl-s\"><span class=\"pl-pds\">'</span>checkpoint_management<span class=\"pl-pds\">'</span></span></pre></div>\n<p>The changes I proposed above fixed the issue.</p>\n<p>Next, I started digging through the diff between 1.10 and 1.11 branches...</p>\n<p>I was hoping to find the specific fix that was applied between 1.10 and 1.11 in case it could be used to patch 1.10. It was bugging me that I hadn't tracked down how it was fixed in 1.11.</p>\n<p>While looking through the <code>freeze_graph.py</code>commit history, it slowly dawned on me that the <code>checkpoint_management</code> system changed significantly between 1.10 and 1.11. So much so that <code>checkpoint_managment.py</code> didn't exist when 1.10 was released.</p>\n<p>I decided that the problem might be an issue of calling <code>freeze_graph.py</code> in a local uncompiled branch that was newer than the 1.10 binary in the python lib.</p>\n<p>I switched the the git r1.10 branch. Then started back up the container with tf-1.10.1 installed.</p>\n<div class=\"highlight highlight-source-shell\"><pre>git checkout r1.10\ndocker run --rm --runtime=nvidia -u <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>id -u<span class=\"pl-pds\">)</span></span>:<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>id -g<span class=\"pl-pds\">)</span></span> -v <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>pwd<span class=\"pl-pds\">)</span></span>:/my-devel -it tf</pre></div>\n<p>And ran <code>free_graph.py</code> using tensorflow 1.10.1 on the r1.10 branch - it worked!</p>\n<p>The fix I originally proposed is only papering over this compatibility issue by pointing to the <code>tf_export</code>'ed <code>checkpoint_exist</code> module made available in the python API.</p>\n<hr>\n<p>To be honest - I was excited about putting in another PR, but I don't think it will help here.</p>\n<p>I should have noticed this last time I looked at the issue. If you want to run files in the uncompiled tensorflow project with a legacy tensorflow version installed locally, make sure to checkout the branch that matches the local version.</p>\n<p>The issue can also be avoided by updating to the current release locally, or doing development using the tensorflow dockerfiles to ensure a supported environment.</p>\n<p>If I missed something, please let me know.</p>", "body_text": "This is a bit of a stream-of-consciousness response. I slowly typed it as I dug back into this issue.\nFirst, I decided to go back and confirm your error in 1.10 - and if it still existed in the current 1.11.\nI cloned the tensorflow repo, entered it and built a current dockerfile\ndocker build -f tensorflow/tools/dockerfiles/dockerfiles/nvidia.Dockerfile -t tf tensorflow/tools/dockerfiles/\n\ndocker run --rm --runtime=nvidia -u $(id -u):$(id -g) -v $(pwd):/my-devel -it tf\nI entered the directory and ran freeze_graph.py\ncd my-devel/\npython3 tensorflow/python/tools/freeze_graph.py\nAnd received the expected message\nInput checkpoint '' doesn't exist!\n\nI added a TF_PACKAGE build-arg the nvidia.Dockerfile to install tensorflow 1.10.1 and rebuilt.\ndocker build -f tensorflow/tools/dockerfiles/dockerfiles/nvidia.Dockerfile -t tf --build-arg TF_PACKAGE=tensorflow-gpu==1.10.1 tensorflow/tools/dockerfiles/\n\ndocker run --rm --runtime=nvidia -u $(id -u):$(id -g) -v $(pwd):/my-devel -it tf\nThis time running gave the same error originally reported.\nTraceback (most recent call last):\n  File \"tensorflow/python/tools/freeze_graph.py\", line 58, in <module>\n    from tensorflow.python.training import checkpoint_management\nImportError: cannot import name 'checkpoint_management'\nThe changes I proposed above fixed the issue.\nNext, I started digging through the diff between 1.10 and 1.11 branches...\nI was hoping to find the specific fix that was applied between 1.10 and 1.11 in case it could be used to patch 1.10. It was bugging me that I hadn't tracked down how it was fixed in 1.11.\nWhile looking through the freeze_graph.pycommit history, it slowly dawned on me that the checkpoint_management system changed significantly between 1.10 and 1.11. So much so that checkpoint_managment.py didn't exist when 1.10 was released.\nI decided that the problem might be an issue of calling freeze_graph.py in a local uncompiled branch that was newer than the 1.10 binary in the python lib.\nI switched the the git r1.10 branch. Then started back up the container with tf-1.10.1 installed.\ngit checkout r1.10\ndocker run --rm --runtime=nvidia -u $(id -u):$(id -g) -v $(pwd):/my-devel -it tf\nAnd ran free_graph.py using tensorflow 1.10.1 on the r1.10 branch - it worked!\nThe fix I originally proposed is only papering over this compatibility issue by pointing to the tf_export'ed checkpoint_exist module made available in the python API.\n\nTo be honest - I was excited about putting in another PR, but I don't think it will help here.\nI should have noticed this last time I looked at the issue. If you want to run files in the uncompiled tensorflow project with a legacy tensorflow version installed locally, make sure to checkout the branch that matches the local version.\nThe issue can also be avoided by updating to the current release locally, or doing development using the tensorflow dockerfiles to ensure a supported environment.\nIf I missed something, please let me know.", "body": "This is a bit of a stream-of-consciousness response. I slowly typed it as I dug back into this issue.\r\n\r\nFirst, I decided to go back and confirm your error in 1.10 - and if it still existed in the current 1.11. \r\n\r\nI cloned the tensorflow repo, entered it and built a current dockerfile\r\n```bash\r\ndocker build -f tensorflow/tools/dockerfiles/dockerfiles/nvidia.Dockerfile -t tf tensorflow/tools/dockerfiles/\r\n\r\ndocker run --rm --runtime=nvidia -u $(id -u):$(id -g) -v $(pwd):/my-devel -it tf\r\n```\r\n\r\nI entered the directory and ran `freeze_graph.py`\r\n```bash\r\ncd my-devel/\r\npython3 tensorflow/python/tools/freeze_graph.py\r\n```\r\n\r\nAnd received the expected message\r\n```\r\nInput checkpoint '' doesn't exist!\r\n```\r\n\r\nI added a `TF_PACKAGE` `build-arg` the `nvidia.Dockerfile` to install tensorflow 1.10.1 and rebuilt.\r\n```bash\r\ndocker build -f tensorflow/tools/dockerfiles/dockerfiles/nvidia.Dockerfile -t tf --build-arg TF_PACKAGE=tensorflow-gpu==1.10.1 tensorflow/tools/dockerfiles/\r\n\r\ndocker run --rm --runtime=nvidia -u $(id -u):$(id -g) -v $(pwd):/my-devel -it tf\r\n```\r\nThis time running gave the same error originally reported.\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"tensorflow/python/tools/freeze_graph.py\", line 58, in <module>\r\n    from tensorflow.python.training import checkpoint_management\r\nImportError: cannot import name 'checkpoint_management'\r\n```\r\n\r\nThe changes I proposed above fixed the issue.\r\n\r\nNext, I started digging through the diff between 1.10 and 1.11 branches... \r\n\r\nI was hoping to find the specific fix that was applied between 1.10 and 1.11 in case it could be used to patch 1.10. It was bugging me that I hadn't tracked down how it was fixed in 1.11.\r\n\r\nWhile looking through the `freeze_graph.py`commit history, it slowly dawned on me that the `checkpoint_management` system changed significantly between 1.10 and 1.11. So much so that `checkpoint_managment.py` didn't exist when 1.10 was released. \r\n\r\nI decided that the problem might be an issue of calling `freeze_graph.py` in a local uncompiled branch that was newer than the 1.10 binary in the python lib. \r\n\r\nI switched the the git r1.10 branch. Then started back up the container with tf-1.10.1 installed.\r\n```bash\r\ngit checkout r1.10\r\ndocker run --rm --runtime=nvidia -u $(id -u):$(id -g) -v $(pwd):/my-devel -it tf\r\n```\r\nAnd ran `free_graph.py` using tensorflow 1.10.1 on the r1.10 branch - it worked!\r\n\r\nThe fix I originally proposed is only papering over this compatibility issue by pointing to the `tf_export`'ed `checkpoint_exist` module made available in the python API.\r\n\r\n----\r\n\r\nTo be honest - I was excited about putting in another PR, but I don't think it will help here.\r\n\r\nI should have noticed this last time I looked at the issue. If you want to run files in the uncompiled tensorflow project with a legacy tensorflow version installed locally, make sure to checkout the branch that matches the local version.\r\n\r\nThe issue can also be avoided by updating to the current release locally, or doing development using the tensorflow dockerfiles to ensure a supported environment.\r\n\r\nIf I missed something, please let me know."}