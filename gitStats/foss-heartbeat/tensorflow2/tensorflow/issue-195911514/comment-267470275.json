{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/267470275", "html_url": "https://github.com/tensorflow/tensorflow/issues/6343#issuecomment-267470275", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6343", "id": 267470275, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzQ3MDI3NQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-15T23:02:26Z", "updated_at": "2016-12-15T23:03:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yes, it's true that we don't include those files with the Windows build, because the DLL we generate isn't useful for building C++ applications (it doesn't export the necessary symbols).</p>\n<p>Right now, for building C++ applications, your best bet is to follow the <a href=\"https://github.com/tensorflow/tensorflow/blob/2477b50bf49d2cd6b8eac23071424c31dd05a05e/tensorflow/contrib/cmake/tf_tutorials.cmake\">CMake rules</a> for building <a href=\"https://github.com/tensorflow/tensorflow/blob/2477b50bf49d2cd6b8eac23071424c31dd05a05e/tensorflow/cc/tutorials/example_trainer.cc\"><code>example_trainer.cc</code></a>; or using Bazel on Windows to build your application.</p>\n<p>In the future, I expect we will distribute a separate <code>TensorFlow.dll</code> that exposes the <a href=\"https://github.com/tensorflow/tensorflow/blob/2477b50bf49d2cd6b8eac23071424c31dd05a05e/tensorflow/c/c_api.h\">C API</a>, because it is relatively small and easy to link against from various different languages. Ideally it would be possible to build the TensorFlow Python extension (<code>_pywrap_tensorflow.pyd</code>) as a wrapper around such a DLL, but this would be longer-term change.</p>", "body_text": "Yes, it's true that we don't include those files with the Windows build, because the DLL we generate isn't useful for building C++ applications (it doesn't export the necessary symbols).\nRight now, for building C++ applications, your best bet is to follow the CMake rules for building example_trainer.cc; or using Bazel on Windows to build your application.\nIn the future, I expect we will distribute a separate TensorFlow.dll that exposes the C API, because it is relatively small and easy to link against from various different languages. Ideally it would be possible to build the TensorFlow Python extension (_pywrap_tensorflow.pyd) as a wrapper around such a DLL, but this would be longer-term change.", "body": "Yes, it's true that we don't include those files with the Windows build, because the DLL we generate isn't useful for building C++ applications (it doesn't export the necessary symbols).\r\n\r\nRight now, for building C++ applications, your best bet is to follow the [CMake rules](https://github.com/tensorflow/tensorflow/blob/2477b50bf49d2cd6b8eac23071424c31dd05a05e/tensorflow/contrib/cmake/tf_tutorials.cmake) for building [`example_trainer.cc`](https://github.com/tensorflow/tensorflow/blob/2477b50bf49d2cd6b8eac23071424c31dd05a05e/tensorflow/cc/tutorials/example_trainer.cc); or using Bazel on Windows to build your application.\r\n\r\nIn the future, I expect we will distribute a separate `TensorFlow.dll` that exposes the [C API](https://github.com/tensorflow/tensorflow/blob/2477b50bf49d2cd6b8eac23071424c31dd05a05e/tensorflow/c/c_api.h), because it is relatively small and easy to link against from various different languages. Ideally it would be possible to build the TensorFlow Python extension (`_pywrap_tensorflow.pyd`) as a wrapper around such a DLL, but this would be longer-term change."}