{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/341186851", "html_url": "https://github.com/tensorflow/tensorflow/issues/14105#issuecomment-341186851", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14105", "id": 341186851, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTE4Njg1MQ==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-01T17:55:15Z", "updated_at": "2017-11-01T17:55:15Z", "author_association": "MEMBER", "body_html": "<p>Thank you for helping our friend <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a>. The Python API makes a <em>best effort</em> to do type coercion, to make TensorFlow easier. It's highly nontrivial code and I'm not sure if collections with these sorts of mixed types was considered. While I'm sure it's something we'd like to support, I'm not sure if there would be performance ramifications to recursive type coercion. Therefore it might not be a feature we'd consider.</p>\n<p>Also, one thing you might want to consider is to express these operations as TensorFlow operations, which could be verbose, but might help ensure that graph is fully defined and there isn't any performance bottlenecking magic that's happening.</p>", "body_text": "Thank you for helping our friend @facaiy. The Python API makes a best effort to do type coercion, to make TensorFlow easier. It's highly nontrivial code and I'm not sure if collections with these sorts of mixed types was considered. While I'm sure it's something we'd like to support, I'm not sure if there would be performance ramifications to recursive type coercion. Therefore it might not be a feature we'd consider.\nAlso, one thing you might want to consider is to express these operations as TensorFlow operations, which could be verbose, but might help ensure that graph is fully defined and there isn't any performance bottlenecking magic that's happening.", "body": "Thank you for helping our friend @facaiy. The Python API makes a *best effort* to do type coercion, to make TensorFlow easier. It's highly nontrivial code and I'm not sure if collections with these sorts of mixed types was considered. While I'm sure it's something we'd like to support, I'm not sure if there would be performance ramifications to recursive type coercion. Therefore it might not be a feature we'd consider.\r\n\r\nAlso, one thing you might want to consider is to express these operations as TensorFlow operations, which could be verbose, but might help ensure that graph is fully defined and there isn't any performance bottlenecking magic that's happening."}