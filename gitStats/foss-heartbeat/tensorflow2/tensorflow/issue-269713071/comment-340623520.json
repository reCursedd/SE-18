{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/340623520", "html_url": "https://github.com/tensorflow/tensorflow/issues/14105#issuecomment-340623520", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14105", "id": 340623520, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYyMzUyMA==", "user": {"login": "j-wilson", "id": 6174242, "node_id": "MDQ6VXNlcjYxNzQyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6174242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j-wilson", "html_url": "https://github.com/j-wilson", "followers_url": "https://api.github.com/users/j-wilson/followers", "following_url": "https://api.github.com/users/j-wilson/following{/other_user}", "gists_url": "https://api.github.com/users/j-wilson/gists{/gist_id}", "starred_url": "https://api.github.com/users/j-wilson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j-wilson/subscriptions", "organizations_url": "https://api.github.com/users/j-wilson/orgs", "repos_url": "https://api.github.com/users/j-wilson/repos", "events_url": "https://api.github.com/users/j-wilson/events{/privacy}", "received_events_url": "https://api.github.com/users/j-wilson/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-31T00:23:10Z", "updated_at": "2017-10-31T00:31:11Z", "author_association": "NONE", "body_html": "<p>Thanks for helping to clarify this issue. Using what you've mentioned, the following work for both <code>int32</code> and <code>int64</code>: <code>tf.reshape(x, tf.cast([16, 2], dtype))</code>. This usage pattern suffices for my purposes; however, I would like to point out the following nuance (which still seems like a bug).</p>\n<p>Of the following, the former works but the latter does not:</p>\n<pre><code>tf.reshape(x, [tf.cast(16, 'int32'), tf.cast(2, 'int32')]) #works\ntf.reshape(x, [tf.cast(16, 'int64'), tf.cast(2, 'int64')]) #fails\n</code></pre>\n<p>Presumably, support was added somewhere along the lines to explicitly allow for this convention when using <code>int32</code>; otherwise, it should throw the same exception as the latter --- namely: <code>TypeError: List of Tensors when single Tensor expected</code></p>", "body_text": "Thanks for helping to clarify this issue. Using what you've mentioned, the following work for both int32 and int64: tf.reshape(x, tf.cast([16, 2], dtype)). This usage pattern suffices for my purposes; however, I would like to point out the following nuance (which still seems like a bug).\nOf the following, the former works but the latter does not:\ntf.reshape(x, [tf.cast(16, 'int32'), tf.cast(2, 'int32')]) #works\ntf.reshape(x, [tf.cast(16, 'int64'), tf.cast(2, 'int64')]) #fails\n\nPresumably, support was added somewhere along the lines to explicitly allow for this convention when using int32; otherwise, it should throw the same exception as the latter --- namely: TypeError: List of Tensors when single Tensor expected", "body": "Thanks for helping to clarify this issue. Using what you've mentioned, the following work for both `int32` and `int64`: `tf.reshape(x, tf.cast([16, 2], dtype))`. This usage pattern suffices for my purposes; however, I would like to point out the following nuance (which still seems like a bug).\r\n\r\nOf the following, the former works but the latter does not: \r\n```\r\ntf.reshape(x, [tf.cast(16, 'int32'), tf.cast(2, 'int32')]) #works\r\ntf.reshape(x, [tf.cast(16, 'int64'), tf.cast(2, 'int64')]) #fails\r\n```\r\nPresumably, support was added somewhere along the lines to explicitly allow for this convention when using `int32`; otherwise, it should throw the same exception as the latter --- namely: `TypeError: List of Tensors when single Tensor expected`"}