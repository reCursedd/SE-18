{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/253675228", "html_url": "https://github.com/tensorflow/tensorflow/issues/1450#issuecomment-253675228", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1450", "id": 253675228, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzY3NTIyOA==", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-14T00:09:32Z", "updated_at": "2016-10-14T00:09:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Even though we typedef int64 to int64_t, I think you need to use int64, not int64_t.  The following simpler code (which doesn't add one, but for illustration) compiled for me:</p>\n<pre><code>REGISTER_OP(\"AddOne\")\n    .Input(\"input: int64\")\n    .Output(\"output: int64\")\n    .Doc(R\"doc(\nAdds 1 to all elements of the tensor.\n\noutput: A Tensor.\n  output = input + 1\n)doc\");\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate &lt;typename Device&gt;\nclass AddOneOp : public OpKernel {\n public:\n  explicit AddOneOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor&amp; input_tensor = context-&gt;input(0);\n    auto input = input_tensor.flat&lt;int64&gt;();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context-&gt;allocate_output(0, input_tensor.shape(),\n                                                     &amp;output_tensor));\n    auto output = output_tensor-&gt;template flat&lt;int64&gt;();\n    output = input;\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"AddOne\").Device(DEVICE_CPU), AddOneOp&lt;CPUDevice&gt;);\n</code></pre>", "body_text": "Even though we typedef int64 to int64_t, I think you need to use int64, not int64_t.  The following simpler code (which doesn't add one, but for illustration) compiled for me:\nREGISTER_OP(\"AddOne\")\n    .Input(\"input: int64\")\n    .Output(\"output: int64\")\n    .Doc(R\"doc(\nAdds 1 to all elements of the tensor.\n\noutput: A Tensor.\n  output = input + 1\n)doc\");\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate <typename Device>\nclass AddOneOp : public OpKernel {\n public:\n  explicit AddOneOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor& input_tensor = context->input(0);\n    auto input = input_tensor.flat<int64>();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(0, input_tensor.shape(),\n                                                     &output_tensor));\n    auto output = output_tensor->template flat<int64>();\n    output = input;\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"AddOne\").Device(DEVICE_CPU), AddOneOp<CPUDevice>);", "body": "Even though we typedef int64 to int64_t, I think you need to use int64, not int64_t.  The following simpler code (which doesn't add one, but for illustration) compiled for me:\n\n```\nREGISTER_OP(\"AddOne\")\n    .Input(\"input: int64\")\n    .Output(\"output: int64\")\n    .Doc(R\"doc(\nAdds 1 to all elements of the tensor.\n\noutput: A Tensor.\n  output = input + 1\n)doc\");\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate <typename Device>\nclass AddOneOp : public OpKernel {\n public:\n  explicit AddOneOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor& input_tensor = context->input(0);\n    auto input = input_tensor.flat<int64>();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(0, input_tensor.shape(),\n                                                     &output_tensor));\n    auto output = output_tensor->template flat<int64>();\n    output = input;\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"AddOne\").Device(DEVICE_CPU), AddOneOp<CPUDevice>);\n```\n"}