{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/358229471", "html_url": "https://github.com/tensorflow/tensorflow/issues/16178#issuecomment-358229471", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16178", "id": 358229471, "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODIyOTQ3MQ==", "user": {"login": "martinkersner", "id": 2312761, "node_id": "MDQ6VXNlcjIzMTI3NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2312761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinkersner", "html_url": "https://github.com/martinkersner", "followers_url": "https://api.github.com/users/martinkersner/followers", "following_url": "https://api.github.com/users/martinkersner/following{/other_user}", "gists_url": "https://api.github.com/users/martinkersner/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinkersner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinkersner/subscriptions", "organizations_url": "https://api.github.com/users/martinkersner/orgs", "repos_url": "https://api.github.com/users/martinkersner/repos", "events_url": "https://api.github.com/users/martinkersner/events{/privacy}", "received_events_url": "https://api.github.com/users/martinkersner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-17T08:15:45Z", "updated_at": "2018-01-17T08:15:45Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4136228\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/shastakr\">@shastakr</a>!  With small modifications it works perfectly even in Android TF lite demo app.</p>\n<div class=\"highlight highlight-source-python\"><pre>w0 <span class=\"pl-k\">=</span> tf.constant([[[\n  [<span class=\"pl-c1\">1</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">255</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>],\n  [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">255</span>, <span class=\"pl-c1\">0</span>],\n  [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">255</span>]\n]]], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>preprocess/weights/0<span class=\"pl-pds\">\"</span></span>)\n\nw1 <span class=\"pl-k\">=</span> tf.constant([[[\n  [<span class=\"pl-c1\">2</span>., <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>],\n  [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>., <span class=\"pl-c1\">0</span>],\n  [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>.]\n]]], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>preprocess/weights/1<span class=\"pl-pds\">\"</span></span>)\n\nb0 <span class=\"pl-k\">=</span> tf.constant([<span class=\"pl-k\">-</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.5</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>preprocess/biases/0<span class=\"pl-pds\">\"</span></span>)\nb1 <span class=\"pl-k\">=</span> tf.constant([<span class=\"pl-c1\">0.0</span>, <span class=\"pl-c1\">0.0</span>, <span class=\"pl-c1\">0.0</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>preprocess/biases/1<span class=\"pl-pds\">\"</span></span>)\n\nimages <span class=\"pl-k\">=</span> tf.nn.conv2d(images, w0, (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>preprocess/conv2d0/0<span class=\"pl-pds\">\"</span></span>)\nimages <span class=\"pl-k\">=</span> tf.nn.bias_add(images, b0, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>preprocess/bias_add/0<span class=\"pl-pds\">\"</span></span>)\nimages <span class=\"pl-k\">=</span> tf.nn.conv2d(images, w1, (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>preprocess/conv2d1/1<span class=\"pl-pds\">\"</span></span>)\nimages <span class=\"pl-k\">=</span> tf.nn.bias_add(images, b1, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>preprocess/bias_add/1<span class=\"pl-pds\">\"</span></span>)</pre></div>", "body_text": "Thanks @shastakr!  With small modifications it works perfectly even in Android TF lite demo app.\nw0 = tf.constant([[[\n  [1/255, 0, 0],\n  [0, 1/255, 0],\n  [0, 0, 1/255]\n]]], name=\"preprocess/weights/0\")\n\nw1 = tf.constant([[[\n  [2., 0, 0],\n  [0, 2., 0],\n  [0, 0, 2.]\n]]], name=\"preprocess/weights/1\")\n\nb0 = tf.constant([-0.5, -0.5, -0.5], name=\"preprocess/biases/0\")\nb1 = tf.constant([0.0, 0.0, 0.0], name=\"preprocess/biases/1\")\n\nimages = tf.nn.conv2d(images, w0, (1, 1, 1, 1), padding=\"VALID\", name=\"preprocess/conv2d0/0\")\nimages = tf.nn.bias_add(images, b0, name=\"preprocess/bias_add/0\")\nimages = tf.nn.conv2d(images, w1, (1, 1, 1, 1), padding=\"VALID\", name=\"preprocess/conv2d1/1\")\nimages = tf.nn.bias_add(images, b1, name=\"preprocess/bias_add/1\")", "body": "Thanks @shastakr!  With small modifications it works perfectly even in Android TF lite demo app.\r\n```python\r\nw0 = tf.constant([[[\r\n  [1/255, 0, 0],\r\n  [0, 1/255, 0],\r\n  [0, 0, 1/255]\r\n]]], name=\"preprocess/weights/0\")\r\n\r\nw1 = tf.constant([[[\r\n  [2., 0, 0],\r\n  [0, 2., 0],\r\n  [0, 0, 2.]\r\n]]], name=\"preprocess/weights/1\")\r\n\r\nb0 = tf.constant([-0.5, -0.5, -0.5], name=\"preprocess/biases/0\")\r\nb1 = tf.constant([0.0, 0.0, 0.0], name=\"preprocess/biases/1\")\r\n\r\nimages = tf.nn.conv2d(images, w0, (1, 1, 1, 1), padding=\"VALID\", name=\"preprocess/conv2d0/0\")\r\nimages = tf.nn.bias_add(images, b0, name=\"preprocess/bias_add/0\")\r\nimages = tf.nn.conv2d(images, w1, (1, 1, 1, 1), padding=\"VALID\", name=\"preprocess/conv2d1/1\")\r\nimages = tf.nn.bias_add(images, b1, name=\"preprocess/bias_add/1\")\r\n```"}