{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/358214252", "html_url": "https://github.com/tensorflow/tensorflow/issues/16178#issuecomment-358214252", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16178", "id": 358214252, "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODIxNDI1Mg==", "user": {"login": "shastakr", "id": 4136228, "node_id": "MDQ6VXNlcjQxMzYyMjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4136228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shastakr", "html_url": "https://github.com/shastakr", "followers_url": "https://api.github.com/users/shastakr/followers", "following_url": "https://api.github.com/users/shastakr/following{/other_user}", "gists_url": "https://api.github.com/users/shastakr/gists{/gist_id}", "starred_url": "https://api.github.com/users/shastakr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shastakr/subscriptions", "organizations_url": "https://api.github.com/users/shastakr/orgs", "repos_url": "https://api.github.com/users/shastakr/repos", "events_url": "https://api.github.com/users/shastakr/events{/privacy}", "received_events_url": "https://api.github.com/users/shastakr/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-17T06:53:47Z", "updated_at": "2018-01-17T06:53:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>How about preprocessing like this?</p>\n<div class=\"highlight highlight-source-python\"><pre>w1 <span class=\"pl-k\">=</span> tf.Variable([[[\n    [<span class=\"pl-c1\">1</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">255</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>],\n    [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">255</span>, <span class=\"pl-c1\">0</span>],\n    [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">255</span>]\n]]])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> shape = (1, 1, 3, 3) = [filter_height, filter_width, in_channels, out_channels]</span>\nw2 <span class=\"pl-k\">=</span> tf.Variable([[[\n    [<span class=\"pl-c1\">2</span>., <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>],\n    [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>., <span class=\"pl-c1\">0</span>],\n    [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>.]\n]]])\nb <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-k\">-</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.5</span>])\np4 <span class=\"pl-k\">=</span> tf.nn.conv2d(images, w1, (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>)\np4 <span class=\"pl-k\">=</span> tf.nn.bias_add(p4, b)\np4 <span class=\"pl-k\">=</span> tf.nn.conv2d(p4, w2, (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>)</pre></div>", "body_text": "How about preprocessing like this?\nw1 = tf.Variable([[[\n    [1/255, 0, 0],\n    [0, 1/255, 0],\n    [0, 0, 1/255]\n]]])  # shape = (1, 1, 3, 3) = [filter_height, filter_width, in_channels, out_channels]\nw2 = tf.Variable([[[\n    [2., 0, 0],\n    [0, 2., 0],\n    [0, 0, 2.]\n]]])\nb = tf.Variable([-0.5, -0.5, -0.5])\np4 = tf.nn.conv2d(images, w1, (1, 1, 1, 1), padding=\"VALID\")\np4 = tf.nn.bias_add(p4, b)\np4 = tf.nn.conv2d(p4, w2, (1, 1, 1, 1), padding=\"VALID\")", "body": "How about preprocessing like this?\r\n\r\n```python\r\nw1 = tf.Variable([[[\r\n    [1/255, 0, 0],\r\n    [0, 1/255, 0],\r\n    [0, 0, 1/255]\r\n]]])  # shape = (1, 1, 3, 3) = [filter_height, filter_width, in_channels, out_channels]\r\nw2 = tf.Variable([[[\r\n    [2., 0, 0],\r\n    [0, 2., 0],\r\n    [0, 0, 2.]\r\n]]])\r\nb = tf.Variable([-0.5, -0.5, -0.5])\r\np4 = tf.nn.conv2d(images, w1, (1, 1, 1, 1), padding=\"VALID\")\r\np4 = tf.nn.bias_add(p4, b)\r\np4 = tf.nn.conv2d(p4, w2, (1, 1, 1, 1), padding=\"VALID\")\r\n```"}