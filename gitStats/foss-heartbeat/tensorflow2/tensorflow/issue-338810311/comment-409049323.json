{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/409049323", "html_url": "https://github.com/tensorflow/tensorflow/issues/20586#issuecomment-409049323", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20586", "id": 409049323, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTA0OTMyMw==", "user": {"login": "Bidski", "id": 2320984, "node_id": "MDQ6VXNlcjIzMjA5ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2320984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bidski", "html_url": "https://github.com/Bidski", "followers_url": "https://api.github.com/users/Bidski/followers", "following_url": "https://api.github.com/users/Bidski/following{/other_user}", "gists_url": "https://api.github.com/users/Bidski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bidski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bidski/subscriptions", "organizations_url": "https://api.github.com/users/Bidski/orgs", "repos_url": "https://api.github.com/users/Bidski/repos", "events_url": "https://api.github.com/users/Bidski/events{/privacy}", "received_events_url": "https://api.github.com/users/Bidski/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-30T23:55:54Z", "updated_at": "2018-07-30T23:55:54Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> I agree with your concerns over the PR code complexity and the 1:1 mapping. The mapping is already not 1:1 with the PR code since <code>long long</code> and <code>int64_t</code> would be mapped to <code>DT_INT64</code> and we already know that some systems have an issue with <code>long long != int64_t</code> (namely mine). So while the forward mapping (type to enum) should be fine, the reverse mapping could be a problem.</p>\n<p>I am happy with a solution that improves the documentation to make it clearer that there are correct types that should be used. Not just for adding ops, but for using the C++ API in general (it is quite obvious that there are tensorflow specific types in the Python API since all types are prefixed with a <code>tf.</code>, perhaps just less reliance on <code>using namespace tensorflow;</code> in the examples would resolve this issue). Further to this, I think the <code>typedef</code>s should be changed to use the C++ standard types (defined in <code>cstdint</code>).</p>", "body_text": "@alextp I agree with your concerns over the PR code complexity and the 1:1 mapping. The mapping is already not 1:1 with the PR code since long long and int64_t would be mapped to DT_INT64 and we already know that some systems have an issue with long long != int64_t (namely mine). So while the forward mapping (type to enum) should be fine, the reverse mapping could be a problem.\nI am happy with a solution that improves the documentation to make it clearer that there are correct types that should be used. Not just for adding ops, but for using the C++ API in general (it is quite obvious that there are tensorflow specific types in the Python API since all types are prefixed with a tf., perhaps just less reliance on using namespace tensorflow; in the examples would resolve this issue). Further to this, I think the typedefs should be changed to use the C++ standard types (defined in cstdint).", "body": "@alextp I agree with your concerns over the PR code complexity and the 1:1 mapping. The mapping is already not 1:1 with the PR code since `long long` and `int64_t` would be mapped to `DT_INT64` and we already know that some systems have an issue with `long long != int64_t` (namely mine). So while the forward mapping (type to enum) should be fine, the reverse mapping could be a problem.\r\n\r\nI am happy with a solution that improves the documentation to make it clearer that there are correct types that should be used. Not just for adding ops, but for using the C++ API in general (it is quite obvious that there are tensorflow specific types in the Python API since all types are prefixed with a `tf.`, perhaps just less reliance on `using namespace tensorflow;` in the examples would resolve this issue). Further to this, I think the `typedef`s should be changed to use the C++ standard types (defined in `cstdint`)."}