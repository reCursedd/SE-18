{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/293963686", "html_url": "https://github.com/tensorflow/tensorflow/issues/9150#issuecomment-293963686", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9150", "id": 293963686, "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mzk2MzY4Ng==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-13T17:11:27Z", "updated_at": "2017-04-13T17:11:27Z", "author_association": "MEMBER", "body_html": "<div class=\"email-fragment\">There is a chance that the C library will reuse the Tensor you pass to\nsession.run after it returns (for example, if the Tensor is enqueued into a\nfifo queue we reserve the right to not copy it until it's time to dequeue).</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Thu, Apr 13, 2017 at 10:07 AM, Anthony Platanios &lt; ***@***.***&gt; wrote:\n <a class=\"user-mention\" href=\"https://github.com/alextp\">@alextp</a> &lt;<a href=\"https://github.com/alextp\">https://github.com/alextp</a>&gt; As long as I create a\n DirectByteBuffer on the Scala side, the GC will be able to deallocate its\n underlying buffer. Furthermore, as long as a reference to that\n DirectByteBuffer exists on the Scala side, the GC will not deallocate it\n and the C side will be able to use it (e.g., when you call session.run). So\n I think there would be no memory leakage since the GC will take care of\n that buffer. The only occasion where there might be an issue if the GC\n deallocates it and then the C library tries to use it. This should not\n happen though unless the C library tries to reuse the tensor you pass in\n session.run, after that function returns. Does that sound reasonable?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"221112357\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9150\" href=\"https://github.com/tensorflow/tensorflow/issues/9150#issuecomment-293962227\">#9150 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAATxX-5lcLpShE_6vTCyUw1V_eDjPZHks5rvlZOgaJpZM4M6yMu\">https://github.com/notifications/unsubscribe-auth/AAATxX-5lcLpShE_6vTCyUw1V_eDjPZHks5rvlZOgaJpZM4M6yMu</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n<div class=\"email-signature-reply\">-- \n - Alex</div>\n</div>", "body_text": "There is a chance that the C library will reuse the Tensor you pass to\nsession.run after it returns (for example, if the Tensor is enqueued into a\nfifo queue we reserve the right to not copy it until it's time to dequeue).\n\u2026\nOn Thu, Apr 13, 2017 at 10:07 AM, Anthony Platanios < ***@***.***> wrote:\n @alextp <https://github.com/alextp> As long as I create a\n DirectByteBuffer on the Scala side, the GC will be able to deallocate its\n underlying buffer. Furthermore, as long as a reference to that\n DirectByteBuffer exists on the Scala side, the GC will not deallocate it\n and the C side will be able to use it (e.g., when you call session.run). So\n I think there would be no memory leakage since the GC will take care of\n that buffer. The only occasion where there might be an issue if the GC\n deallocates it and then the C library tries to use it. This should not\n happen though unless the C library tries to reuse the tensor you pass in\n session.run, after that function returns. Does that sound reasonable?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#9150 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AAATxX-5lcLpShE_6vTCyUw1V_eDjPZHks5rvlZOgaJpZM4M6yMu>\n .\n\n\n-- \n - Alex", "body": "There is a chance that the C library will reuse the Tensor you pass to\nsession.run after it returns (for example, if the Tensor is enqueued into a\nfifo queue we reserve the right to not copy it until it's time to dequeue).\n\nOn Thu, Apr 13, 2017 at 10:07 AM, Anthony Platanios <\nnotifications@github.com> wrote:\n\n> @alextp <https://github.com/alextp> As long as I create a\n> DirectByteBuffer on the Scala side, the GC will be able to deallocate its\n> underlying buffer. Furthermore, as long as a reference to that\n> DirectByteBuffer exists on the Scala side, the GC will not deallocate it\n> and the C side will be able to use it (e.g., when you call session.run). So\n> I think there would be no memory leakage since the GC will take care of\n> that buffer. The only occasion where there might be an issue if the GC\n> deallocates it and then the C library tries to use it. This should not\n> happen though unless the C library tries to reuse the tensor you pass in\n> session.run, after that function returns. Does that sound reasonable?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/9150#issuecomment-293962227>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAATxX-5lcLpShE_6vTCyUw1V_eDjPZHks5rvlZOgaJpZM4M6yMu>\n> .\n>\n\n\n\n-- \n - Alex\n"}