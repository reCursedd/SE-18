{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/297110362", "html_url": "https://github.com/tensorflow/tensorflow/issues/9150#issuecomment-297110362", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9150", "id": 297110362, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzExMDM2Mg==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-25T17:46:45Z", "updated_at": "2017-04-25T17:46:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88808\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/skye\">@skye</a> that sounds reasonable. Actually, I'm a bit confused as to everything involved in creating a \"cond\" or a \"while_loop\" in a graph. I get the high-level idea, but the Python code seems overly complicated to me for something like that and I'm wondering why. Would it be too much to ask for a brief summary of what ops get added to the graph for a \"cond\" and for a \"while_loop\" and how gradients should be computed for them? Then, I can make a fresh implementation of them using the named input idea you mentioned, without having to port the Python API code.</p>", "body_text": "@skye that sounds reasonable. Actually, I'm a bit confused as to everything involved in creating a \"cond\" or a \"while_loop\" in a graph. I get the high-level idea, but the Python code seems overly complicated to me for something like that and I'm wondering why. Would it be too much to ask for a brief summary of what ops get added to the graph for a \"cond\" and for a \"while_loop\" and how gradients should be computed for them? Then, I can make a fresh implementation of them using the named input idea you mentioned, without having to port the Python API code.", "body": "@skye that sounds reasonable. Actually, I'm a bit confused as to everything involved in creating a \"cond\" or a \"while_loop\" in a graph. I get the high-level idea, but the Python code seems overly complicated to me for something like that and I'm wondering why. Would it be too much to ask for a brief summary of what ops get added to the graph for a \"cond\" and for a \"while_loop\" and how gradients should be computed for them? Then, I can make a fresh implementation of them using the named input idea you mentioned, without having to port the Python API code."}