{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/295005670", "html_url": "https://github.com/tensorflow/tensorflow/issues/9150#issuecomment-295005670", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9150", "id": 295005670, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTAwNTY3MA==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-18T22:43:01Z", "updated_at": "2017-04-18T22:43:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Great! Thanks for the quick response!</p>\n<p>I looked into ways for doing that and I'm going to go ahead with the approach described <a href=\"https://dzone.com/articles/letting-garbage-collector-do-c\" rel=\"nofollow\">here</a> and used <a href=\"https://github.com/frohoff/jdk8u-dev-jdk/blob/master/src/share/classes/sun/java2d/Disposer.java\">here</a>, which basically consists of a thread running in the background and checking whether all references to an object have gone away, using the Java PhantomReference. When all references go away, it will call the <code>TF_DeleteTensor</code> function. This could also apply to the Java API.</p>", "body_text": "Great! Thanks for the quick response!\nI looked into ways for doing that and I'm going to go ahead with the approach described here and used here, which basically consists of a thread running in the background and checking whether all references to an object have gone away, using the Java PhantomReference. When all references go away, it will call the TF_DeleteTensor function. This could also apply to the Java API.", "body": "Great! Thanks for the quick response!\r\n\r\nI looked into ways for doing that and I'm going to go ahead with the approach described [here](https://dzone.com/articles/letting-garbage-collector-do-c) and used [here](https://github.com/frohoff/jdk8u-dev-jdk/blob/master/src/share/classes/sun/java2d/Disposer.java), which basically consists of a thread running in the background and checking whether all references to an object have gone away, using the Java PhantomReference. When all references go away, it will call the `TF_DeleteTensor` function. This could also apply to the Java API."}