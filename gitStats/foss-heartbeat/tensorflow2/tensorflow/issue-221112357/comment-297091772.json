{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/297091772", "html_url": "https://github.com/tensorflow/tensorflow/issues/9150#issuecomment-297091772", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9150", "id": 297091772, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzA5MTc3Mg==", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-25T16:46:00Z", "updated_at": "2017-04-25T16:46:00Z", "author_association": "MEMBER", "body_html": "<p>Actually, I think what will be easiest to implement in the C API is a function similar to TF_AddInput that takes the name of a (possibly nonexistent) operation instead of the TF_Operation* itself (AddNamedInput?). You can then create the TF_Operation* with that name later in order to create the cycle. We use something like this in the C API implementation of while loops, so it'll definitely be sufficient for the forward pass, although I haven't looked closely at adding the gradients yet. If you're interested, <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.cc#L1746\">here</a> is where we use it in the C API.</p>\n<p>It'll be trickier and probably more invasive to create an API like in Python where you can modify an already-created Operation (I don't think the underlying C++ API supports modification, and the operation creation code won't like partial inputs). It looks like _add_input isn't used in control_flow_ops.py, and if we end up needing a way to add control inputs to a TF_Operation* that should be easier. Let's start with just AddNamedInput for now though. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1294940\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/eaplatanios\">@eaplatanios</a> sound reasonable?</p>", "body_text": "Actually, I think what will be easiest to implement in the C API is a function similar to TF_AddInput that takes the name of a (possibly nonexistent) operation instead of the TF_Operation* itself (AddNamedInput?). You can then create the TF_Operation* with that name later in order to create the cycle. We use something like this in the C API implementation of while loops, so it'll definitely be sufficient for the forward pass, although I haven't looked closely at adding the gradients yet. If you're interested, here is where we use it in the C API.\nIt'll be trickier and probably more invasive to create an API like in Python where you can modify an already-created Operation (I don't think the underlying C++ API supports modification, and the operation creation code won't like partial inputs). It looks like _add_input isn't used in control_flow_ops.py, and if we end up needing a way to add control inputs to a TF_Operation* that should be easier. Let's start with just AddNamedInput for now though. @eaplatanios sound reasonable?", "body": "Actually, I think what will be easiest to implement in the C API is a function similar to TF_AddInput that takes the name of a (possibly nonexistent) operation instead of the TF_Operation* itself (AddNamedInput?). You can then create the TF_Operation* with that name later in order to create the cycle. We use something like this in the C API implementation of while loops, so it'll definitely be sufficient for the forward pass, although I haven't looked closely at adding the gradients yet. If you're interested, [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.cc#L1746) is where we use it in the C API.\r\n\r\nIt'll be trickier and probably more invasive to create an API like in Python where you can modify an already-created Operation (I don't think the underlying C++ API supports modification, and the operation creation code won't like partial inputs). It looks like _add_input isn't used in control_flow_ops.py, and if we end up needing a way to add control inputs to a TF_Operation* that should be easier. Let's start with just AddNamedInput for now though. @eaplatanios sound reasonable?"}