{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/229443780", "html_url": "https://github.com/tensorflow/tensorflow/issues/2641#issuecomment-229443780", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2641", "id": 229443780, "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTQ0Mzc4MA==", "user": {"login": "ibab", "id": 890531, "node_id": "MDQ6VXNlcjg5MDUzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/890531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibab", "html_url": "https://github.com/ibab", "followers_url": "https://api.github.com/users/ibab/followers", "following_url": "https://api.github.com/users/ibab/following{/other_user}", "gists_url": "https://api.github.com/users/ibab/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibab/subscriptions", "organizations_url": "https://api.github.com/users/ibab/orgs", "repos_url": "https://api.github.com/users/ibab/repos", "events_url": "https://api.github.com/users/ibab/events{/privacy}", "received_events_url": "https://api.github.com/users/ibab/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-29T18:21:33Z", "updated_at": "2016-06-29T18:21:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I've had a shot at solving this today using <code>cumprod</code>, and it's working great for full reductions.<br>\nBut if <code>reduce_prod</code> is performed with <code>reduction_indices</code>, things get more difficult.<br>\nIn that case, the <code>cumprod</code> needs to be performed over the reduced dimensions, and not over the remaining ones.<br>\nAny ideas on how this could be solved?<br>\nMaybe if there was a <code>tf.reshape_selected</code> op that allows you to group all selected dimensions into a single dimension, and all remaining ones into a second one, like this:</p>\n<pre><code>x.shape = (a, b, c, d, e)\nreduction_indices = [1, 3]\ny = tf.reshape_selected(x, reduction_indices)\ny.shape ==&gt; (b * d, a * c * e)\n</code></pre>\n<p>Then the <code>cumprod</code> could be performed over the first dimension.<br>\nThis is essentially a transpose followed by a reshape.<br>\nI've tried to build this using existing ops, but it seems that <code>tf.cond</code> is required to act based on the contents of the <code>reduction_indices</code> tensor.</p>", "body_text": "I've had a shot at solving this today using cumprod, and it's working great for full reductions.\nBut if reduce_prod is performed with reduction_indices, things get more difficult.\nIn that case, the cumprod needs to be performed over the reduced dimensions, and not over the remaining ones.\nAny ideas on how this could be solved?\nMaybe if there was a tf.reshape_selected op that allows you to group all selected dimensions into a single dimension, and all remaining ones into a second one, like this:\nx.shape = (a, b, c, d, e)\nreduction_indices = [1, 3]\ny = tf.reshape_selected(x, reduction_indices)\ny.shape ==> (b * d, a * c * e)\n\nThen the cumprod could be performed over the first dimension.\nThis is essentially a transpose followed by a reshape.\nI've tried to build this using existing ops, but it seems that tf.cond is required to act based on the contents of the reduction_indices tensor.", "body": "I've had a shot at solving this today using `cumprod`, and it's working great for full reductions.\nBut if `reduce_prod` is performed with `reduction_indices`, things get more difficult.\nIn that case, the `cumprod` needs to be performed over the reduced dimensions, and not over the remaining ones.\nAny ideas on how this could be solved?\nMaybe if there was a `tf.reshape_selected` op that allows you to group all selected dimensions into a single dimension, and all remaining ones into a second one, like this:\n\n```\nx.shape = (a, b, c, d, e)\nreduction_indices = [1, 3]\ny = tf.reshape_selected(x, reduction_indices)\ny.shape ==> (b * d, a * c * e)\n```\n\nThen the `cumprod` could be performed over the first dimension.\nThis is essentially a transpose followed by a reshape.\nI've tried to build this using existing ops, but it seems that `tf.cond` is required to act based on the contents of the `reduction_indices` tensor.\n"}