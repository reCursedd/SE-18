{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/300934555", "html_url": "https://github.com/tensorflow/tensorflow/issues/9294#issuecomment-300934555", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9294", "id": 300934555, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDkzNDU1NQ==", "user": {"login": "kevinashaw", "id": 7141343, "node_id": "MDQ6VXNlcjcxNDEzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7141343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinashaw", "html_url": "https://github.com/kevinashaw", "followers_url": "https://api.github.com/users/kevinashaw/followers", "following_url": "https://api.github.com/users/kevinashaw/following{/other_user}", "gists_url": "https://api.github.com/users/kevinashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinashaw/subscriptions", "organizations_url": "https://api.github.com/users/kevinashaw/orgs", "repos_url": "https://api.github.com/users/kevinashaw/repos", "events_url": "https://api.github.com/users/kevinashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinashaw/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-11T22:30:47Z", "updated_at": "2017-05-11T22:30:47Z", "author_association": "NONE", "body_html": "<div class=\"email-fragment\">Thanks!  The documentation regarding that feature is somewhat thin for tf.nn.dynamic_rnn.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\"> On May 10, 2017, at 2:30 PM, ebrevdo ***@***.***&gt; wrote:\n\n Right. tf.nn.dynamic_rnn will call zero_state for you with the right value\n of you pass in just the dtype argument and not an initial state.\n\n On May 10, 2017 12:12 AM, \"Kevin Shaw\" ***@***.***&gt; wrote:\n\n &gt; Following the discussion in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"226661793\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9699\" href=\"https://github.com/tensorflow/tensorflow/issues/9699\">#9699</a>\n &gt; &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"226661793\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9699\" href=\"https://github.com/tensorflow/tensorflow/issues/9699\">#9699</a>&gt;, I've at least\n &gt; found a solution to the initial_state problem. It would probably make sense\n &gt; to reference it in the new tutorial/documentation. The problem with the\n &gt; initial_state is not that zero_state produces incorrect results :\n &gt;\n &gt; initial_state = lstm_cells.zero_state(batch_size, tf.float32)\n &gt;\n &gt; Its that the batch_size value is a constant. For the training data, the\n &gt; size of the batch will *always* match the batch_size. But for Testing\n &gt; data it usually never will. Testing is done on a much large set, or atleast\n &gt; a set that has a size that varies from the batch_size. Hence, for testing\n &gt; data, the initial_state from the test data will still have a size of\n &gt; batch_size but the test data itself will not.\n &gt; The solution is surprisingly simple, just let batch_size vary according to\n &gt; the data set brought in:\n &gt;\n &gt; batch_size_var = tf.shape(Xin)[0]\n &gt; initial_state = lstm_cells.zero_state(batch_size_var, tf.float32)\n &gt;\n &gt; Where Xin is the data input tensor. Now initial_state will always match\n &gt; the size of the data set.\n &gt;\n &gt; \u2014\n &gt; You are receiving this because you were mentioned.\n &gt; Reply to this email directly, view it on GitHub\n &gt; &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"222509554\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9294\" href=\"https://github.com/tensorflow/tensorflow/issues/9294#issuecomment-300395826\">#9294 (comment)</a>&gt;,\n &gt; or mute the thread\n &gt; &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/ABtim6FFXxRWKcofk4unjdfMrJVZ1DmGks5r4WNjgaJpZM4NAvZe\">https://github.com/notifications/unsubscribe-auth/ABtim6FFXxRWKcofk4unjdfMrJVZ1DmGks5r4WNjgaJpZM4NAvZe</a>&gt;\n &gt; .\n &gt;\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"222509554\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9294\" href=\"https://github.com/tensorflow/tensorflow/issues/9294#issuecomment-300617582\">#9294 (comment)</a>&gt;, or mute the thread &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AGz330YtgDPyVRCxft8ZrEt0wNMS-Rnpks5r4iyFgaJpZM4NAvZe\">https://github.com/notifications/unsubscribe-auth/AGz330YtgDPyVRCxft8ZrEt0wNMS-Rnpks5r4iyFgaJpZM4NAvZe</a>&gt;.\n</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "Thanks!  The documentation regarding that feature is somewhat thin for tf.nn.dynamic_rnn.\n\u2026\n On May 10, 2017, at 2:30 PM, ebrevdo ***@***.***> wrote:\n\n Right. tf.nn.dynamic_rnn will call zero_state for you with the right value\n of you pass in just the dtype argument and not an initial state.\n\n On May 10, 2017 12:12 AM, \"Kevin Shaw\" ***@***.***> wrote:\n\n > Following the discussion in #9699\n > <#9699>, I've at least\n > found a solution to the initial_state problem. It would probably make sense\n > to reference it in the new tutorial/documentation. The problem with the\n > initial_state is not that zero_state produces incorrect results :\n >\n > initial_state = lstm_cells.zero_state(batch_size, tf.float32)\n >\n > Its that the batch_size value is a constant. For the training data, the\n > size of the batch will *always* match the batch_size. But for Testing\n > data it usually never will. Testing is done on a much large set, or atleast\n > a set that has a size that varies from the batch_size. Hence, for testing\n > data, the initial_state from the test data will still have a size of\n > batch_size but the test data itself will not.\n > The solution is surprisingly simple, just let batch_size vary according to\n > the data set brought in:\n >\n > batch_size_var = tf.shape(Xin)[0]\n > initial_state = lstm_cells.zero_state(batch_size_var, tf.float32)\n >\n > Where Xin is the data input tensor. Now initial_state will always match\n > the size of the data set.\n >\n > \u2014\n > You are receiving this because you were mentioned.\n > Reply to this email directly, view it on GitHub\n > <#9294 (comment)>,\n > or mute the thread\n > <https://github.com/notifications/unsubscribe-auth/ABtim6FFXxRWKcofk4unjdfMrJVZ1DmGks5r4WNjgaJpZM4NAvZe>\n > .\n >\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub <#9294 (comment)>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AGz330YtgDPyVRCxft8ZrEt0wNMS-Rnpks5r4iyFgaJpZM4NAvZe>.", "body": "Thanks!  The documentation regarding that feature is somewhat thin for tf.nn.dynamic_rnn. \n\n> On May 10, 2017, at 2:30 PM, ebrevdo <notifications@github.com> wrote:\n> \n> Right. tf.nn.dynamic_rnn will call zero_state for you with the right value\n> of you pass in just the dtype argument and not an initial state.\n> \n> On May 10, 2017 12:12 AM, \"Kevin Shaw\" <notifications@github.com> wrote:\n> \n> > Following the discussion in #9699\n> > <https://github.com/tensorflow/tensorflow/issues/9699>, I've at least\n> > found a solution to the initial_state problem. It would probably make sense\n> > to reference it in the new tutorial/documentation. The problem with the\n> > initial_state is not that zero_state produces incorrect results :\n> >\n> > initial_state = lstm_cells.zero_state(batch_size, tf.float32)\n> >\n> > Its that the batch_size value is a constant. For the training data, the\n> > size of the batch will *always* match the batch_size. But for Testing\n> > data it usually never will. Testing is done on a much large set, or atleast\n> > a set that has a size that varies from the batch_size. Hence, for testing\n> > data, the initial_state from the test data will still have a size of\n> > batch_size but the test data itself will not.\n> > The solution is surprisingly simple, just let batch_size vary according to\n> > the data set brought in:\n> >\n> > batch_size_var = tf.shape(Xin)[0]\n> > initial_state = lstm_cells.zero_state(batch_size_var, tf.float32)\n> >\n> > Where Xin is the data input tensor. Now initial_state will always match\n> > the size of the data set.\n> >\n> > \u2014\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > <https://github.com/tensorflow/tensorflow/issues/9294#issuecomment-300395826>,\n> > or mute the thread\n> > <https://github.com/notifications/unsubscribe-auth/ABtim6FFXxRWKcofk4unjdfMrJVZ1DmGks5r4WNjgaJpZM4NAvZe>\n> > .\n> >\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/tensorflow/tensorflow/issues/9294#issuecomment-300617582>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AGz330YtgDPyVRCxft8ZrEt0wNMS-Rnpks5r4iyFgaJpZM4NAvZe>.\n> \n\n"}