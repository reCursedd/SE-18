{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/294984637", "html_url": "https://github.com/tensorflow/tensorflow/issues/9294#issuecomment-294984637", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9294", "id": 294984637, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDk4NDYzNw==", "user": {"login": "kevinashaw", "id": 7141343, "node_id": "MDQ6VXNlcjcxNDEzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7141343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinashaw", "html_url": "https://github.com/kevinashaw", "followers_url": "https://api.github.com/users/kevinashaw/followers", "following_url": "https://api.github.com/users/kevinashaw/following{/other_user}", "gists_url": "https://api.github.com/users/kevinashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinashaw/subscriptions", "organizations_url": "https://api.github.com/users/kevinashaw/orgs", "repos_url": "https://api.github.com/users/kevinashaw/repos", "events_url": "https://api.github.com/users/kevinashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinashaw/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-18T21:14:27Z", "updated_at": "2017-04-18T21:14:27Z", "author_association": "NONE", "body_html": "<p>With the new state initialization line:</p>\n<pre><code>initial_state = state = lstm.zero_state(batch_size, dtype=tf.float32)\n</code></pre>\n<p>The new error is thrown on the last line:</p>\n<pre><code>ValueError: linear is expecting 2D arguments: [TensorShape([Dimension(1000)]), \n    TensorShape([Dimension(1000), Dimension(50)])]\n</code></pre>\n<p>Here is the full code sample:</p>\n<pre><code># Placeholder for the inputs in a given iteration.\nnum_steps  = 20\nbatch_size = 1000\nlstm_size  = 50\nwords = tf.placeholder(tf.int32, [batch_size, num_steps])\n\nlstm = tf.contrib.rnn.BasicLSTMCell(lstm_size)\n# Initial state of the LSTM memory.\ninitial_state = state = lstm.zero_state(batch_size, dtype=tf.float32)\n\nfor i in range(num_steps):\n    # The value of state is updated after processing each batch of words.\n    output, state = lstm(words[:, i], state)\n</code></pre>\n<p>If one does the following to determine the shape and type of <code>state</code>:</p>\n<pre><code>print(tf.shape(state))\nprint(state)\n</code></pre>\n<p>the following is printed:</p>\n<pre><code>Tensor(\"Shape:0\", shape=(3,), dtype=int32)\nLSTMStateTuple(c=&lt;tf.Tensor 'zeros_11:0' shape=(1000, 50) dtype=float32&gt;, h=&lt;tf.Tensor 'zeros_12:0' shape=(1000, 50) dtype=float32&gt;)\n</code></pre>", "body_text": "With the new state initialization line:\ninitial_state = state = lstm.zero_state(batch_size, dtype=tf.float32)\n\nThe new error is thrown on the last line:\nValueError: linear is expecting 2D arguments: [TensorShape([Dimension(1000)]), \n    TensorShape([Dimension(1000), Dimension(50)])]\n\nHere is the full code sample:\n# Placeholder for the inputs in a given iteration.\nnum_steps  = 20\nbatch_size = 1000\nlstm_size  = 50\nwords = tf.placeholder(tf.int32, [batch_size, num_steps])\n\nlstm = tf.contrib.rnn.BasicLSTMCell(lstm_size)\n# Initial state of the LSTM memory.\ninitial_state = state = lstm.zero_state(batch_size, dtype=tf.float32)\n\nfor i in range(num_steps):\n    # The value of state is updated after processing each batch of words.\n    output, state = lstm(words[:, i], state)\n\nIf one does the following to determine the shape and type of state:\nprint(tf.shape(state))\nprint(state)\n\nthe following is printed:\nTensor(\"Shape:0\", shape=(3,), dtype=int32)\nLSTMStateTuple(c=<tf.Tensor 'zeros_11:0' shape=(1000, 50) dtype=float32>, h=<tf.Tensor 'zeros_12:0' shape=(1000, 50) dtype=float32>)", "body": "With the new state initialization line:\r\n```\r\ninitial_state = state = lstm.zero_state(batch_size, dtype=tf.float32)\r\n```\r\nThe new error is thrown on the last line: \r\n```\r\nValueError: linear is expecting 2D arguments: [TensorShape([Dimension(1000)]), \r\n    TensorShape([Dimension(1000), Dimension(50)])]\r\n```\r\nHere is the full code sample:\r\n```\r\n# Placeholder for the inputs in a given iteration.\r\nnum_steps  = 20\r\nbatch_size = 1000\r\nlstm_size  = 50\r\nwords = tf.placeholder(tf.int32, [batch_size, num_steps])\r\n\r\nlstm = tf.contrib.rnn.BasicLSTMCell(lstm_size)\r\n# Initial state of the LSTM memory.\r\ninitial_state = state = lstm.zero_state(batch_size, dtype=tf.float32)\r\n\r\nfor i in range(num_steps):\r\n    # The value of state is updated after processing each batch of words.\r\n    output, state = lstm(words[:, i], state)\r\n```\r\nIf one does the following to determine the shape and type of `state`:\r\n```\r\nprint(tf.shape(state))\r\nprint(state)\r\n```\r\nthe following is printed:\r\n```\r\nTensor(\"Shape:0\", shape=(3,), dtype=int32)\r\nLSTMStateTuple(c=<tf.Tensor 'zeros_11:0' shape=(1000, 50) dtype=float32>, h=<tf.Tensor 'zeros_12:0' shape=(1000, 50) dtype=float32>)\r\n```"}