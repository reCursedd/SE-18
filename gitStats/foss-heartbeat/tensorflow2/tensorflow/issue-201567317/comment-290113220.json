{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/290113220", "html_url": "https://github.com/tensorflow/tensorflow/issues/6926#issuecomment-290113220", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6926", "id": 290113220, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDExMzIyMA==", "user": {"login": "dazraf", "id": 178520, "node_id": "MDQ6VXNlcjE3ODUyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/178520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dazraf", "html_url": "https://github.com/dazraf", "followers_url": "https://api.github.com/users/dazraf/followers", "following_url": "https://api.github.com/users/dazraf/following{/other_user}", "gists_url": "https://api.github.com/users/dazraf/gists{/gist_id}", "starred_url": "https://api.github.com/users/dazraf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dazraf/subscriptions", "organizations_url": "https://api.github.com/users/dazraf/orgs", "repos_url": "https://api.github.com/users/dazraf/repos", "events_url": "https://api.github.com/users/dazraf/events{/privacy}", "received_events_url": "https://api.github.com/users/dazraf/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-29T14:45:59Z", "updated_at": "2017-03-29T14:45:59Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>Like the netty native library, the convention with Maven is to use the <code>classifier</code> tag to specify OS specific distros.<br>\nSee <a href=\"http://netty.io/wiki/forked-tomcat-native.html#wiki-h2-3\" rel=\"nofollow\">here</a> for an example.</p>\n<p>You can even use the classifier to distinguish between pure-java implementations and those that come packaged with GPU specific binaries.</p>\n<p>I may have missed something, but it seems like we will need to install the GPU native libraries manually.</p>\n<p>If so, can be please avoid this!</p>\n<p>As developers, we should be able to integrate TensorFlow with a single <code>&lt;dependency&gt;</code> declaration, such that any platform specificity is fully resolved. e.g.</p>\n<div class=\"highlight highlight-text-xml\"><pre>&lt;<span class=\"pl-ent\">dependency</span>&gt;\n  &lt;<span class=\"pl-ent\">groupId</span>&gt;org.tensorflow&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n  &lt;<span class=\"pl-ent\">artifactId</span>&gt;tensorflow&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n  &lt;<span class=\"pl-ent\">version</span>&gt;1.1.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n  &lt;<span class=\"pl-ent\">classifier</span>&gt;windows-gpu&lt;/<span class=\"pl-ent\">classifier</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<ol>\n<li>It's really easy to integrate TensorFlow</li>\n<li>All build aspects, including native libraries are fully prepackaged, expanded to filesystem, and bound, accordingly at runtime.</li>\n<li>The entire build process on a 'clean' machine (i.e. no TensorFlow libraries installed on path) is easily possible - which makes it easy to integrate with CI servers.</li>\n</ol>\n<p>This is all standard stuff for Maven and all Java devs would expect it!</p>\n<p>kind regards<br>\nFuzz</p>", "body_text": "Hi,\nLike the netty native library, the convention with Maven is to use the classifier tag to specify OS specific distros.\nSee here for an example.\nYou can even use the classifier to distinguish between pure-java implementations and those that come packaged with GPU specific binaries.\nI may have missed something, but it seems like we will need to install the GPU native libraries manually.\nIf so, can be please avoid this!\nAs developers, we should be able to integrate TensorFlow with a single <dependency> declaration, such that any platform specificity is fully resolved. e.g.\n<dependency>\n  <groupId>org.tensorflow</groupId>\n  <artifactId>tensorflow</artifactId>\n  <version>1.1.0</version>\n  <classifier>windows-gpu</classifier>\n</dependency>\n\nIt's really easy to integrate TensorFlow\nAll build aspects, including native libraries are fully prepackaged, expanded to filesystem, and bound, accordingly at runtime.\nThe entire build process on a 'clean' machine (i.e. no TensorFlow libraries installed on path) is easily possible - which makes it easy to integrate with CI servers.\n\nThis is all standard stuff for Maven and all Java devs would expect it!\nkind regards\nFuzz", "body": "Hi,\r\n\r\nLike the netty native library, the convention with Maven is to use the `classifier` tag to specify OS specific distros. \r\nSee [here](http://netty.io/wiki/forked-tomcat-native.html#wiki-h2-3) for an example.\r\n\r\nYou can even use the classifier to distinguish between pure-java implementations and those that come packaged with GPU specific binaries.\r\n\r\nI may have missed something, but it seems like we will need to install the GPU native libraries manually. \r\n\r\nIf so, can be please avoid this!\r\n\r\nAs developers, we should be able to integrate TensorFlow with a single `<dependency>` declaration, such that any platform specificity is fully resolved. e.g. \r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.tensorflow</groupId>\r\n  <artifactId>tensorflow</artifactId>\r\n  <version>1.1.0</version>\r\n  <classifier>windows-gpu</classifier>\r\n</dependency>\r\n```\r\n\r\n1. It's really easy to integrate TensorFlow\r\n2. All build aspects, including native libraries are fully prepackaged, expanded to filesystem, and bound, accordingly at runtime.\r\n3. The entire build process on a 'clean' machine (i.e. no TensorFlow libraries installed on path) is easily possible - which makes it easy to integrate with CI servers.\r\n\r\nThis is all standard stuff for Maven and all Java devs would expect it!\r\n\r\nkind regards\r\nFuzz"}