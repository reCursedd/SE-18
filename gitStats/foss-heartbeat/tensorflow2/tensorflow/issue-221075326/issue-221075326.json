{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9146", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9146/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9146/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9146/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9146", "id": 221075326, "node_id": "MDU6SXNzdWUyMjEwNzUzMjY=", "number": 9146, "title": "Cannot move checkpoint files saved with an absolute path", "user": {"login": "riklopfer", "id": 413300, "node_id": "MDQ6VXNlcjQxMzMwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/413300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/riklopfer", "html_url": "https://github.com/riklopfer", "followers_url": "https://api.github.com/users/riklopfer/followers", "following_url": "https://api.github.com/users/riklopfer/following{/other_user}", "gists_url": "https://api.github.com/users/riklopfer/gists{/gist_id}", "starred_url": "https://api.github.com/users/riklopfer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/riklopfer/subscriptions", "organizations_url": "https://api.github.com/users/riklopfer/orgs", "repos_url": "https://api.github.com/users/riklopfer/repos", "events_url": "https://api.github.com/users/riklopfer/events{/privacy}", "received_events_url": "https://api.github.com/users/riklopfer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-11T20:44:58Z", "updated_at": "2017-12-20T18:34:37Z", "closed_at": "2017-04-12T20:28:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p>When the checkpoint save path is an absolute path, moving the checkpoint results in a failure.</p>\n<p>TensorFlow was installed from source branch v1.0.1</p>\n<p>Python script to reproduce:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python</span>\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n\n<span class=\"pl-k\">import</span> sys\n\n<span class=\"pl-k\">import</span> os\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">load_and_save</span>(<span class=\"pl-smi\">saver</span>, <span class=\"pl-smi\">session</span>, <span class=\"pl-smi\">model_dir</span>):\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Looking for models in : <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> model_dir)\n    incumbent <span class=\"pl-k\">=</span> tf.train.latest_checkpoint(model_dir)\n    <span class=\"pl-k\">if</span> incumbent <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Loading incumbent: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> incumbent)\n        saver.restore(session, incumbent)\n    <span class=\"pl-k\">else</span>:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No incumbent found...<span class=\"pl-pds\">\"</span></span>)\n        tf.global_variables_initializer().run()\n\n    out_path <span class=\"pl-k\">=</span> os.path.join(model_dir, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>model<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Saving to: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> out_path)\n    saver.save(session, out_path)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test</span>(<span class=\"pl-smi\">first_dir</span>, <span class=\"pl-smi\">second_dir</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> clean up for idempotence</span>\n    os.system(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>rm -rf <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(second_dir))\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> os.path.exists(first_dir):\n        os.makedirs(first_dir)\n\n    <span class=\"pl-k\">with</span> tf.Graph().as_default(), tf.Session() <span class=\"pl-k\">as</span> session:\n        test_var <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-c1\">50</span>, <span class=\"pl-c1\">50</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.random_normal_initializer())\n        saver <span class=\"pl-k\">=</span> tf.train.Saver([test_var])\n\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> save to the first abs path dir</span>\n        load_and_save(saver, session, first_dir)\n\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> move to to the second dir</span>\n        mv_command <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>mv <span class=\"pl-c1\">{}</span> <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(first_dir, second_dir)\n        <span class=\"pl-c1\">print</span>(mv_command)\n        os.system(mv_command)\n\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> attempt to load from the second dir</span>\n        load_and_save(saver, session, second_dir)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> WORKS</span>\n    test(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./FIRST_DIR<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./SECOND_DIR<span class=\"pl-pds\">'</span></span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> <span class=\"pl-k\">BUG</span>?</span>\n    test(os.path.abspath(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./FIRST_DIR<span class=\"pl-pds\">'</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./SECOND_DIR<span class=\"pl-pds\">'</span></span>)\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>:\n    sys.exit(main())\n</pre></div>\n<p>Log output</p>\n<pre><code>Looking for models in : ./FIRST_DIR\nNo incumbent found...\nSaving to: ./FIRST_DIR/model\nmv ./FIRST_DIR ./SECOND_DIR\nLooking for models in : ./SECOND_DIR\nLoading incumbent: ./SECOND_DIR/model\nSaving to: ./SECOND_DIR/model\nLooking for models in : /home/rklopfer/REPORT/FIRST_DIR\nNo incumbent found...\nSaving to: /home/rklopfer/REPORT/FIRST_DIR/model\nmv /home/rklopfer/REPORT/FIRST_DIR ./SECOND_DIR\nLooking for models in : ./SECOND_DIR\nTraceback (most recent call last):\n  File \"./bug_report.py\", line 57, in &lt;module&gt;\n    sys.exit(main())\n  File \"./bug_report.py\", line 53, in main\n    test(os.path.abspath('./FIRST_DIR'), './SECOND_DIR')\n  File \"./bug_report.py\", line 45, in test\n    load_and_save(saver, session, second_dir)\n  File \"./bug_report.py\", line 12, in load_and_save\n    incumbent = tf.train.latest_checkpoint(model_dir)\n  File \"/home/rklopfer/.virtualenvs/tf/local/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1482, in latest_checkpoint\n    if file_io.get_matching_files(v2_path) or file_io.get_matching_files(\n  File \"/home/rklopfer/.virtualenvs/tf/local/lib/python2.7/site-packages/tensorflow/python/lib/io/file_io.py\", line 269, in get_matching_files\n    compat.as_bytes(filename), status)]\n  File \"/usr/lib/python2.7/contextlib.py\", line 24, in __exit__\n    self.gen.next()\n  File \"/home/rklopfer/.virtualenvs/tf/local/lib/python2.7/site-packages/tensorflow/python/framework/errors_impl.py\", line 466, in raise_exception_on_not_ok_status\n    pywrap_tensorflow.TF_GetCode(status))\ntensorflow.python.framework.errors_impl.NotFoundError: /home/rklopfer/REPORT/FIRST_DIR\n\n\n</code></pre>", "body_text": "When the checkpoint save path is an absolute path, moving the checkpoint results in a failure.\nTensorFlow was installed from source branch v1.0.1\nPython script to reproduce:\n#!/usr/bin/env python\nfrom __future__ import print_function\n\nimport sys\n\nimport os\nimport tensorflow as tf\n\n\ndef load_and_save(saver, session, model_dir):\n    print(\"Looking for models in : \" + model_dir)\n    incumbent = tf.train.latest_checkpoint(model_dir)\n    if incumbent is not None:\n        print(\"Loading incumbent: \" + incumbent)\n        saver.restore(session, incumbent)\n    else:\n        print(\"No incumbent found...\")\n        tf.global_variables_initializer().run()\n\n    out_path = os.path.join(model_dir, 'model')\n    print(\"Saving to: \" + out_path)\n    saver.save(session, out_path)\n\n\ndef test(first_dir, second_dir):\n    # clean up for idempotence\n    os.system('rm -rf {}'.format(second_dir))\n\n    if not os.path.exists(first_dir):\n        os.makedirs(first_dir)\n\n    with tf.Graph().as_default(), tf.Session() as session:\n        test_var = tf.get_variable('test', [50, 50], dtype=tf.float32, initializer=tf.random_normal_initializer())\n        saver = tf.train.Saver([test_var])\n\n        # save to the first abs path dir\n        load_and_save(saver, session, first_dir)\n\n        # move to to the second dir\n        mv_command = 'mv {} {}'.format(first_dir, second_dir)\n        print(mv_command)\n        os.system(mv_command)\n\n        # attempt to load from the second dir\n        load_and_save(saver, session, second_dir)\n\n\ndef main():\n    # WORKS\n    test('./FIRST_DIR', './SECOND_DIR')\n\n    # BUG?\n    test(os.path.abspath('./FIRST_DIR'), './SECOND_DIR')\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\nLog output\nLooking for models in : ./FIRST_DIR\nNo incumbent found...\nSaving to: ./FIRST_DIR/model\nmv ./FIRST_DIR ./SECOND_DIR\nLooking for models in : ./SECOND_DIR\nLoading incumbent: ./SECOND_DIR/model\nSaving to: ./SECOND_DIR/model\nLooking for models in : /home/rklopfer/REPORT/FIRST_DIR\nNo incumbent found...\nSaving to: /home/rklopfer/REPORT/FIRST_DIR/model\nmv /home/rklopfer/REPORT/FIRST_DIR ./SECOND_DIR\nLooking for models in : ./SECOND_DIR\nTraceback (most recent call last):\n  File \"./bug_report.py\", line 57, in <module>\n    sys.exit(main())\n  File \"./bug_report.py\", line 53, in main\n    test(os.path.abspath('./FIRST_DIR'), './SECOND_DIR')\n  File \"./bug_report.py\", line 45, in test\n    load_and_save(saver, session, second_dir)\n  File \"./bug_report.py\", line 12, in load_and_save\n    incumbent = tf.train.latest_checkpoint(model_dir)\n  File \"/home/rklopfer/.virtualenvs/tf/local/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1482, in latest_checkpoint\n    if file_io.get_matching_files(v2_path) or file_io.get_matching_files(\n  File \"/home/rklopfer/.virtualenvs/tf/local/lib/python2.7/site-packages/tensorflow/python/lib/io/file_io.py\", line 269, in get_matching_files\n    compat.as_bytes(filename), status)]\n  File \"/usr/lib/python2.7/contextlib.py\", line 24, in __exit__\n    self.gen.next()\n  File \"/home/rklopfer/.virtualenvs/tf/local/lib/python2.7/site-packages/tensorflow/python/framework/errors_impl.py\", line 466, in raise_exception_on_not_ok_status\n    pywrap_tensorflow.TF_GetCode(status))\ntensorflow.python.framework.errors_impl.NotFoundError: /home/rklopfer/REPORT/FIRST_DIR", "body": "When the checkpoint save path is an absolute path, moving the checkpoint results in a failure. \r\n\r\nTensorFlow was installed from source branch v1.0.1\r\n\r\nPython script to reproduce:\r\n\r\n```python\r\n#!/usr/bin/env python\r\nfrom __future__ import print_function\r\n\r\nimport sys\r\n\r\nimport os\r\nimport tensorflow as tf\r\n\r\n\r\ndef load_and_save(saver, session, model_dir):\r\n    print(\"Looking for models in : \" + model_dir)\r\n    incumbent = tf.train.latest_checkpoint(model_dir)\r\n    if incumbent is not None:\r\n        print(\"Loading incumbent: \" + incumbent)\r\n        saver.restore(session, incumbent)\r\n    else:\r\n        print(\"No incumbent found...\")\r\n        tf.global_variables_initializer().run()\r\n\r\n    out_path = os.path.join(model_dir, 'model')\r\n    print(\"Saving to: \" + out_path)\r\n    saver.save(session, out_path)\r\n\r\n\r\ndef test(first_dir, second_dir):\r\n    # clean up for idempotence\r\n    os.system('rm -rf {}'.format(second_dir))\r\n\r\n    if not os.path.exists(first_dir):\r\n        os.makedirs(first_dir)\r\n\r\n    with tf.Graph().as_default(), tf.Session() as session:\r\n        test_var = tf.get_variable('test', [50, 50], dtype=tf.float32, initializer=tf.random_normal_initializer())\r\n        saver = tf.train.Saver([test_var])\r\n\r\n        # save to the first abs path dir\r\n        load_and_save(saver, session, first_dir)\r\n\r\n        # move to to the second dir\r\n        mv_command = 'mv {} {}'.format(first_dir, second_dir)\r\n        print(mv_command)\r\n        os.system(mv_command)\r\n\r\n        # attempt to load from the second dir\r\n        load_and_save(saver, session, second_dir)\r\n\r\n\r\ndef main():\r\n    # WORKS\r\n    test('./FIRST_DIR', './SECOND_DIR')\r\n\r\n    # BUG?\r\n    test(os.path.abspath('./FIRST_DIR'), './SECOND_DIR')\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    sys.exit(main())\r\n\r\n```\r\n\r\nLog output\r\n\r\n```\r\nLooking for models in : ./FIRST_DIR\r\nNo incumbent found...\r\nSaving to: ./FIRST_DIR/model\r\nmv ./FIRST_DIR ./SECOND_DIR\r\nLooking for models in : ./SECOND_DIR\r\nLoading incumbent: ./SECOND_DIR/model\r\nSaving to: ./SECOND_DIR/model\r\nLooking for models in : /home/rklopfer/REPORT/FIRST_DIR\r\nNo incumbent found...\r\nSaving to: /home/rklopfer/REPORT/FIRST_DIR/model\r\nmv /home/rklopfer/REPORT/FIRST_DIR ./SECOND_DIR\r\nLooking for models in : ./SECOND_DIR\r\nTraceback (most recent call last):\r\n  File \"./bug_report.py\", line 57, in <module>\r\n    sys.exit(main())\r\n  File \"./bug_report.py\", line 53, in main\r\n    test(os.path.abspath('./FIRST_DIR'), './SECOND_DIR')\r\n  File \"./bug_report.py\", line 45, in test\r\n    load_and_save(saver, session, second_dir)\r\n  File \"./bug_report.py\", line 12, in load_and_save\r\n    incumbent = tf.train.latest_checkpoint(model_dir)\r\n  File \"/home/rklopfer/.virtualenvs/tf/local/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1482, in latest_checkpoint\r\n    if file_io.get_matching_files(v2_path) or file_io.get_matching_files(\r\n  File \"/home/rklopfer/.virtualenvs/tf/local/lib/python2.7/site-packages/tensorflow/python/lib/io/file_io.py\", line 269, in get_matching_files\r\n    compat.as_bytes(filename), status)]\r\n  File \"/usr/lib/python2.7/contextlib.py\", line 24, in __exit__\r\n    self.gen.next()\r\n  File \"/home/rklopfer/.virtualenvs/tf/local/lib/python2.7/site-packages/tensorflow/python/framework/errors_impl.py\", line 466, in raise_exception_on_not_ok_status\r\n    pywrap_tensorflow.TF_GetCode(status))\r\ntensorflow.python.framework.errors_impl.NotFoundError: /home/rklopfer/REPORT/FIRST_DIR\r\n\r\n\r\n```\r\n"}