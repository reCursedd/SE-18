{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15554", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15554/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15554/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15554/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15554", "id": 283874586, "node_id": "MDU6SXNzdWUyODM4NzQ1ODY=", "number": 15554, "title": "Tensorflow Lite exhibits longer inference time when build with Android NN API on Google Pixel 1", "user": {"login": "pointcontrols", "id": 13233759, "node_id": "MDQ6VXNlcjEzMjMzNzU5", "avatar_url": "https://avatars1.githubusercontent.com/u/13233759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pointcontrols", "html_url": "https://github.com/pointcontrols", "followers_url": "https://api.github.com/users/pointcontrols/followers", "following_url": "https://api.github.com/users/pointcontrols/following{/other_user}", "gists_url": "https://api.github.com/users/pointcontrols/gists{/gist_id}", "starred_url": "https://api.github.com/users/pointcontrols/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pointcontrols/subscriptions", "organizations_url": "https://api.github.com/users/pointcontrols/orgs", "repos_url": "https://api.github.com/users/pointcontrols/repos", "events_url": "https://api.github.com/users/pointcontrols/events{/privacy}", "received_events_url": "https://api.github.com/users/pointcontrols/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750616506, "node_id": "MDU6TGFiZWw3NTA2MTY1MDY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:lite", "name": "comp:lite", "color": "0052cc", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 22, "created_at": "2017-12-21T12:58:57Z", "updated_at": "2018-08-06T22:39:22Z", "closed_at": "2018-05-15T23:59:22Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nSource</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n'v1.3.0-rc1-6055-gfdf34a8', '1.4.0'</li>\n<li><strong>Python version</strong>:<br>\n2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\n0.8.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nGCC 5.4.0-6ubuntu1~16.04.5</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When enabling the NN API usage (edit interpreter.cc) one would expect that due to the HW acceleration, inferece times would be shorter. However, exactly the opposite happens. I tried this using the included demo app, using mobilenet_quant_v1_224.tflite and a custom (not quantized) model that I converted to tflite. In the mobilenet case, inference takes around 80ms without NNAPI, and ~100ms with NNAPI . My custom model, which sadly I cannot share , takes 40ms without , and ~90ms with NNAPI.</p>\n<p>Please note that I have also tested this with FAST_SINGLE_ANSWER  and SUSTAINED_SPEED  NNAPI preference settings. There was no significant change in inference times.</p>\n<p>My Pixel Build number is: OPM1.171019.011</p>\n<h3>Source code / logs</h3>\n<p>--- a/tensorflow/contrib/lite/interpreter.cc<br>\n+++ b/tensorflow/contrib/lite/interpreter.cc<br>\n@@ -51,7 +51,7 @@ Interpreter::Interpreter(ErrorReporter* error_reporter)<br>\ntensors_.reserve(kSlotsToReserve);<br>\nnodes_and_registration_.reserve(kSlotsToReserve);<br>\nnext_allocate_node_id_ = 0;</p>\n<ul>\n<li>UseNNAPI(false);</li>\n</ul>\n<ul>\n<li>UseNNAPI(true);</li>\n</ul>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 16.04\nTensorFlow installed from (source or binary):\nSource\nTensorFlow version (use command below):\n'v1.3.0-rc1-6055-gfdf34a8', '1.4.0'\nPython version:\n2.7.12\nBazel version (if compiling from source):\n0.8.0\nGCC/Compiler version (if compiling from source):\nGCC 5.4.0-6ubuntu1~16.04.5\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nWhen enabling the NN API usage (edit interpreter.cc) one would expect that due to the HW acceleration, inferece times would be shorter. However, exactly the opposite happens. I tried this using the included demo app, using mobilenet_quant_v1_224.tflite and a custom (not quantized) model that I converted to tflite. In the mobilenet case, inference takes around 80ms without NNAPI, and ~100ms with NNAPI . My custom model, which sadly I cannot share , takes 40ms without , and ~90ms with NNAPI.\nPlease note that I have also tested this with FAST_SINGLE_ANSWER  and SUSTAINED_SPEED  NNAPI preference settings. There was no significant change in inference times.\nMy Pixel Build number is: OPM1.171019.011\nSource code / logs\n--- a/tensorflow/contrib/lite/interpreter.cc\n+++ b/tensorflow/contrib/lite/interpreter.cc\n@@ -51,7 +51,7 @@ Interpreter::Interpreter(ErrorReporter* error_reporter)\ntensors_.reserve(kSlotsToReserve);\nnodes_and_registration_.reserve(kSlotsToReserve);\nnext_allocate_node_id_ = 0;\n\nUseNNAPI(false);\n\n\nUseNNAPI(true);", "body": "\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**:\r\nSource\r\n- **TensorFlow version (use command below)**:\r\n'v1.3.0-rc1-6055-gfdf34a8', '1.4.0'\r\n- **Python version**: \r\n2.7.12\r\n- **Bazel version (if compiling from source)**:\r\n0.8.0\r\n- **GCC/Compiler version (if compiling from source)**:\r\nGCC 5.4.0-6ubuntu1~16.04.5\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n\r\n### Describe the problem\r\nWhen enabling the NN API usage (edit interpreter.cc) one would expect that due to the HW acceleration, inferece times would be shorter. However, exactly the opposite happens. I tried this using the included demo app, using mobilenet_quant_v1_224.tflite and a custom (not quantized) model that I converted to tflite. In the mobilenet case, inference takes around 80ms without NNAPI, and ~100ms with NNAPI . My custom model, which sadly I cannot share , takes 40ms without , and ~90ms with NNAPI.\r\n\r\nPlease note that I have also tested this with FAST_SINGLE_ANSWER  and SUSTAINED_SPEED  NNAPI preference settings. There was no significant change in inference times.\r\n\r\nMy Pixel Build number is: OPM1.171019.011\r\n\r\n### Source code / logs\r\n--- a/tensorflow/contrib/lite/interpreter.cc\r\n+++ b/tensorflow/contrib/lite/interpreter.cc\r\n@@ -51,7 +51,7 @@ Interpreter::Interpreter(ErrorReporter* error_reporter)\r\n   tensors_.reserve(kSlotsToReserve);\r\n   nodes_and_registration_.reserve(kSlotsToReserve);\r\n   next_allocate_node_id_ = 0;\r\n-  UseNNAPI(false);\r\n+  UseNNAPI(true);\r\n"}