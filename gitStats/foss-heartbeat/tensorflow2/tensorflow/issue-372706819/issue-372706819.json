{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23172", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23172/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23172/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23172/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23172", "id": 372706819, "node_id": "MDU6SXNzdWUzNzI3MDY4MTk=", "number": 23172, "title": "Error using cohen_kappa metric with tf.contrib.distribute.MirroredStrategy configured estimator", "user": {"login": "Matt-Hicks-Bose", "id": 38144321, "node_id": "MDQ6VXNlcjM4MTQ0MzIx", "avatar_url": "https://avatars3.githubusercontent.com/u/38144321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matt-Hicks-Bose", "html_url": "https://github.com/Matt-Hicks-Bose", "followers_url": "https://api.github.com/users/Matt-Hicks-Bose/followers", "following_url": "https://api.github.com/users/Matt-Hicks-Bose/following{/other_user}", "gists_url": "https://api.github.com/users/Matt-Hicks-Bose/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matt-Hicks-Bose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matt-Hicks-Bose/subscriptions", "organizations_url": "https://api.github.com/users/Matt-Hicks-Bose/orgs", "repos_url": "https://api.github.com/users/Matt-Hicks-Bose/repos", "events_url": "https://api.github.com/users/Matt-Hicks-Bose/events{/privacy}", "received_events_url": "https://api.github.com/users/Matt-Hicks-Bose/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 996845227, "node_id": "MDU6TGFiZWw5OTY4NDUyMjc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:dist-strat", "name": "comp:dist-strat", "color": "0052cc", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "guptapriya", "id": 14104855, "node_id": "MDQ6VXNlcjE0MTA0ODU1", "avatar_url": "https://avatars1.githubusercontent.com/u/14104855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guptapriya", "html_url": "https://github.com/guptapriya", "followers_url": "https://api.github.com/users/guptapriya/followers", "following_url": "https://api.github.com/users/guptapriya/following{/other_user}", "gists_url": "https://api.github.com/users/guptapriya/gists{/gist_id}", "starred_url": "https://api.github.com/users/guptapriya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guptapriya/subscriptions", "organizations_url": "https://api.github.com/users/guptapriya/orgs", "repos_url": "https://api.github.com/users/guptapriya/repos", "events_url": "https://api.github.com/users/guptapriya/events{/privacy}", "received_events_url": "https://api.github.com/users/guptapriya/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "guptapriya", "id": 14104855, "node_id": "MDQ6VXNlcjE0MTA0ODU1", "avatar_url": "https://avatars1.githubusercontent.com/u/14104855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guptapriya", "html_url": "https://github.com/guptapriya", "followers_url": "https://api.github.com/users/guptapriya/followers", "following_url": "https://api.github.com/users/guptapriya/following{/other_user}", "gists_url": "https://api.github.com/users/guptapriya/gists{/gist_id}", "starred_url": "https://api.github.com/users/guptapriya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guptapriya/subscriptions", "organizations_url": "https://api.github.com/users/guptapriya/orgs", "repos_url": "https://api.github.com/users/guptapriya/repos", "events_url": "https://api.github.com/users/guptapriya/events{/privacy}", "received_events_url": "https://api.github.com/users/guptapriya/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-10-22T21:24:42Z", "updated_at": "2018-11-21T03:26:26Z", "closed_at": "2018-11-21T03:26:26Z", "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes</li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04</li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A</li>\n<li>TensorFlow installed from (source or binary): binary</li>\n<li>TensorFlow version (use command below): ('v1.11.0-0-gc19e29306c', '1.11.0')</li>\n<li>Python version: 2.7.12</li>\n<li>Bazel version (if compiling from source): N/A</li>\n<li>GCC/Compiler version (if compiling from source): N/A</li>\n<li>CUDA/cuDNN version: 9.0.176/7.2.1.38</li>\n<li>GPU model and memory: 4x Nvidia V100 16GB</li>\n</ul>\n<p><strong>Describe the current behavior</strong><br>\nWhen using the <code>tf.contrib.metrics.cohen_kappa</code> metric with an estimator, a <code>TypeError</code> is raised when calling the <code>evaluate</code> method on the estimator if the evaluation is configured to be distributed with <code>tf.contrib.distribute.MirroredStrategy</code>. The evaluation is successful if the estimator is not configured for distributed evaluation.</p>\n<p><strong>Describe the expected behavior</strong><br>\nThe metric <code>tf.contrib.metrics.cohen_kappa</code> should be calculated successfully in both distributed and non-distributed evaluations.</p>\n<p><strong>Code to reproduce the issue</strong><br>\ntest.py:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c1\">DO_EVAL_DIST</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n\ntf.logging.set_verbosity(tf.logging.<span class=\"pl-c1\">INFO</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">model_fn</span>(<span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">mode</span>):\n    layer <span class=\"pl-k\">=</span> tf.layers.Dense(<span class=\"pl-c1\">2</span>)\n    logits <span class=\"pl-k\">=</span> layer(features)\n\n    <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> tf.estimator.ModeKeys.<span class=\"pl-c1\">PREDICT</span>:\n        predictions <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>logits<span class=\"pl-pds\">\"</span></span>: logits}\n        <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(mode, <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>predictions)\n\n    loss <span class=\"pl-k\">=</span> tf.losses.mean_squared_error(\n        <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>labels, <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>tf.reshape(logits, [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]))\n\n    <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> tf.estimator.ModeKeys.<span class=\"pl-c1\">EVAL</span>:\n        class_targets <span class=\"pl-k\">=</span> tf.reshape(tf.argmax(labels, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>class_targets<span class=\"pl-pds\">'</span></span>), [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n        preds <span class=\"pl-k\">=</span> tf.reshape(tf.argmax(logits, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>preds<span class=\"pl-pds\">'</span></span>), [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n        <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(mode, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss, <span class=\"pl-v\">eval_metric_ops</span><span class=\"pl-k\">=</span>{\n            <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cohen_k<span class=\"pl-pds\">'</span></span>: tf.contrib.metrics.cohen_kappa(class_targets, preds, <span class=\"pl-c1\">2</span>),\n        })\n\n    <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> tf.estimator.ModeKeys.<span class=\"pl-c1\">TRAIN</span>:\n        train_op <span class=\"pl-k\">=</span> tf.train.GradientDescentOptimizer(<span class=\"pl-c1\">0.2</span>).minimize(loss, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>tf.train.get_global_step())\n        <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(mode, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss, <span class=\"pl-v\">train_op</span><span class=\"pl-k\">=</span>train_op)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">input_fn</span>():\n    features <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensors([[<span class=\"pl-c1\">1</span>.]]).repeat()\n    labels <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensors([<span class=\"pl-c1\">1</span>., <span class=\"pl-c1\">0</span>.]).repeat()\n    <span class=\"pl-k\">return</span> tf.data.Dataset.zip((features, labels))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Configured the estimator for either distributed or non-distributed evaluation</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Training is always distributed</span>\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">DO_EVAL_DIST</span>:\n    distribution <span class=\"pl-k\">=</span> tf.contrib.distribute.DistributeConfig(\n        <span class=\"pl-v\">train_distribute</span><span class=\"pl-k\">=</span>tf.contrib.distribute.MirroredStrategy(),\n        <span class=\"pl-v\">eval_distribute</span><span class=\"pl-k\">=</span>tf.contrib.distribute.MirroredStrategy()\n    )\n    config <span class=\"pl-k\">=</span> tf.estimator.RunConfig(<span class=\"pl-v\">experimental_distribute</span><span class=\"pl-k\">=</span>distribution)\n<span class=\"pl-k\">else</span>:\n    distribution <span class=\"pl-k\">=</span> tf.contrib.distribute.MirroredStrategy()\n    config <span class=\"pl-k\">=</span> tf.estimator.RunConfig(<span class=\"pl-v\">train_distribute</span><span class=\"pl-k\">=</span>distribution)\n\nclassifier <span class=\"pl-k\">=</span> tf.estimator.Estimator(<span class=\"pl-v\">model_fn</span><span class=\"pl-k\">=</span>model_fn, <span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config, <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>out_test<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>********* start train **********<span class=\"pl-pds\">'</span></span>)\nclassifier.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>********* end train/start eval **********<span class=\"pl-pds\">'</span></span>)\nclassifier.evaluate(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>********* end eval **********<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p><strong>Other info / logs</strong><br>\nError thrown when using distributed evaluation, when <code>DO_EVAL_DIST = True</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre>Traceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">49</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    classifier.evaluate(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">474</span>, <span class=\"pl-k\">in</span> evaluate\n    <span class=\"pl-k\">return</span> _evaluate()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">469</span>, <span class=\"pl-k\">in</span> _evaluate\n    output_dir<span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.eval_dir(name))\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1528</span>, <span class=\"pl-k\">in</span> _evaluate_run\n    config<span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>._session_config)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/evaluation.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">212</span>, <span class=\"pl-k\">in</span> _evaluate_once\n    session.run(eval_ops, feed_dict)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">783</span>, <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__exit__</span>\n    <span class=\"pl-c1\">self</span>._close_internal(exception_type)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">816</span>, <span class=\"pl-k\">in</span> _close_internal\n    h.end(<span class=\"pl-c1\">self</span>._coordinated_creator.tf_sess)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/basic_session_run_hooks.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">941</span>, <span class=\"pl-k\">in</span> end\n    <span class=\"pl-c1\">self</span>._final_ops, feed_dict<span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>._final_ops_feed_dict)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">887</span>, <span class=\"pl-k\">in</span> run\n    run_metadata_ptr)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1095</span>, <span class=\"pl-k\">in</span> _run\n    <span class=\"pl-c1\">self</span>._graph, fetches, feed_dict_tensor, feed_handles<span class=\"pl-k\">=</span>feed_handles)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">429</span>, <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__init__</span>\n    <span class=\"pl-c1\">self</span>._fetch_mapper <span class=\"pl-k\">=</span> _FetchMapper.for_fetch(fetches)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">249</span>, <span class=\"pl-k\">in</span> for_fetch\n    <span class=\"pl-k\">return</span> _DictFetchMapper(fetch)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">387</span>, <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__init__</span>\n    _FetchMapper.for_fetch(fetch) <span class=\"pl-k\">for</span> fetch <span class=\"pl-k\">in</span> fetches.values()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">255</span>, <span class=\"pl-k\">in</span> for_fetch\n    <span class=\"pl-k\">return</span> _ElementFetchMapper(fetches, contraction_fn)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">288</span>, <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__init__</span>\n    (fetch, <span class=\"pl-c1\">type</span>(fetch), <span class=\"pl-c1\">str</span>(e)))\n<span class=\"pl-c1\">TypeError</span>: Fetch argument PerDevice({<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/replica:0/task:0/device:GPU:0<span class=\"pl-pds\">'</span></span>: <span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cohen_kappa/value/Merge:0<span class=\"pl-pds\">'</span></span> shape=() dtype=float64<span class=\"pl-k\">&gt;</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/replica:0/task:0/device:GPU:1<span class=\"pl-pds\">'</span></span>: <span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>tower_1/cohen_kappa/value/Merge:0<span class=\"pl-pds\">'</span></span> shape=() dtype=float64<span class=\"pl-k\">&gt;</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/replica:0/task:0/device:GPU:2<span class=\"pl-pds\">'</span></span>: <span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>tower_2/cohen_kappa/value/Merge:0<span class=\"pl-pds\">'</span></span> shape=() dtype=float64<span class=\"pl-k\">&gt;</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/replica:0/task:0/device:GPU:3<span class=\"pl-pds\">'</span></span>: <span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>tower_3/cohen_kappa/value/Merge:0<span class=\"pl-pds\">'</span></span> shape=() dtype=float64<span class=\"pl-k\">&gt;</span>}) has invalid <span class=\"pl-c1\">type</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">class</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>tensorflow.contrib.distribute.python.values.PerDevice<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>, must be a string <span class=\"pl-k\">or</span> Tensor. (Can <span class=\"pl-k\">not</span> convert a PerDevice into a Tensor <span class=\"pl-k\">or</span> Operation.)</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): ('v1.11.0-0-gc19e29306c', '1.11.0')\nPython version: 2.7.12\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: 9.0.176/7.2.1.38\nGPU model and memory: 4x Nvidia V100 16GB\n\nDescribe the current behavior\nWhen using the tf.contrib.metrics.cohen_kappa metric with an estimator, a TypeError is raised when calling the evaluate method on the estimator if the evaluation is configured to be distributed with tf.contrib.distribute.MirroredStrategy. The evaluation is successful if the estimator is not configured for distributed evaluation.\nDescribe the expected behavior\nThe metric tf.contrib.metrics.cohen_kappa should be calculated successfully in both distributed and non-distributed evaluations.\nCode to reproduce the issue\ntest.py:\nimport tensorflow as tf\n\nDO_EVAL_DIST = True\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\ndef model_fn(features, labels, mode):\n    layer = tf.layers.Dense(2)\n    logits = layer(features)\n\n    if mode == tf.estimator.ModeKeys.PREDICT:\n        predictions = {\"logits\": logits}\n        return tf.estimator.EstimatorSpec(mode, predictions=predictions)\n\n    loss = tf.losses.mean_squared_error(\n        labels=labels, predictions=tf.reshape(logits, [-1]))\n\n    if mode == tf.estimator.ModeKeys.EVAL:\n        class_targets = tf.reshape(tf.argmax(labels, axis=-1, name='class_targets'), [-1])\n        preds = tf.reshape(tf.argmax(logits, axis=-1, name='preds'), [-1])\n        return tf.estimator.EstimatorSpec(mode, loss=loss, eval_metric_ops={\n            'cohen_k': tf.contrib.metrics.cohen_kappa(class_targets, preds, 2),\n        })\n\n    if mode == tf.estimator.ModeKeys.TRAIN:\n        train_op = tf.train.GradientDescentOptimizer(0.2).minimize(loss, global_step=tf.train.get_global_step())\n        return tf.estimator.EstimatorSpec(mode, loss=loss, train_op=train_op)\n\ndef input_fn():\n    features = tf.data.Dataset.from_tensors([[1.]]).repeat()\n    labels = tf.data.Dataset.from_tensors([1., 0.]).repeat()\n    return tf.data.Dataset.zip((features, labels))\n\n# Configured the estimator for either distributed or non-distributed evaluation\n# Training is always distributed\nif DO_EVAL_DIST:\n    distribution = tf.contrib.distribute.DistributeConfig(\n        train_distribute=tf.contrib.distribute.MirroredStrategy(),\n        eval_distribute=tf.contrib.distribute.MirroredStrategy()\n    )\n    config = tf.estimator.RunConfig(experimental_distribute=distribution)\nelse:\n    distribution = tf.contrib.distribute.MirroredStrategy()\n    config = tf.estimator.RunConfig(train_distribute=distribution)\n\nclassifier = tf.estimator.Estimator(model_fn=model_fn, config=config, model_dir='out_test')\n\nprint('********* start train **********')\nclassifier.train(input_fn=input_fn, steps=1000)\nprint('********* end train/start eval **********')\nclassifier.evaluate(input_fn=input_fn, steps=1000)\nprint('********* end eval **********')\nOther info / logs\nError thrown when using distributed evaluation, when DO_EVAL_DIST = True:\nTraceback (most recent call last):\n  File \"test.py\", line 49, in <module>\n    classifier.evaluate(input_fn=input_fn, steps=1000)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 474, in evaluate\n    return _evaluate()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 469, in _evaluate\n    output_dir=self.eval_dir(name))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1528, in _evaluate_run\n    config=self._session_config)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/evaluation.py\", line 212, in _evaluate_once\n    session.run(eval_ops, feed_dict)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 783, in __exit__\n    self._close_internal(exception_type)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 816, in _close_internal\n    h.end(self._coordinated_creator.tf_sess)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 941, in end\n    self._final_ops, feed_dict=self._final_ops_feed_dict)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 887, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1095, in _run\n    self._graph, fetches, feed_dict_tensor, feed_handles=feed_handles)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 429, in __init__\n    self._fetch_mapper = _FetchMapper.for_fetch(fetches)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 249, in for_fetch\n    return _DictFetchMapper(fetch)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 387, in __init__\n    _FetchMapper.for_fetch(fetch) for fetch in fetches.values()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 255, in for_fetch\n    return _ElementFetchMapper(fetches, contraction_fn)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 288, in __init__\n    (fetch, type(fetch), str(e)))\nTypeError: Fetch argument PerDevice({'/replica:0/task:0/device:GPU:0': <tf.Tensor 'cohen_kappa/value/Merge:0' shape=() dtype=float64>, '/replica:0/task:0/device:GPU:1': <tf.Tensor 'tower_1/cohen_kappa/value/Merge:0' shape=() dtype=float64>, '/replica:0/task:0/device:GPU:2': <tf.Tensor 'tower_2/cohen_kappa/value/Merge:0' shape=() dtype=float64>, '/replica:0/task:0/device:GPU:3': <tf.Tensor 'tower_3/cohen_kappa/value/Merge:0' shape=() dtype=float64>}) has invalid type <class 'tensorflow.contrib.distribute.python.values.PerDevice'>, must be a string or Tensor. (Can not convert a PerDevice into a Tensor or Operation.)", "body": "**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\r\n- TensorFlow installed from (source or binary): binary\r\n- TensorFlow version (use command below): ('v1.11.0-0-gc19e29306c', '1.11.0')\r\n- Python version: 2.7.12\r\n- Bazel version (if compiling from source): N/A\r\n- GCC/Compiler version (if compiling from source): N/A\r\n- CUDA/cuDNN version: 9.0.176/7.2.1.38\r\n- GPU model and memory: 4x Nvidia V100 16GB\r\n\r\n**Describe the current behavior**\r\nWhen using the `tf.contrib.metrics.cohen_kappa` metric with an estimator, a `TypeError` is raised when calling the `evaluate` method on the estimator if the evaluation is configured to be distributed with `tf.contrib.distribute.MirroredStrategy`. The evaluation is successful if the estimator is not configured for distributed evaluation.\r\n\r\n**Describe the expected behavior**\r\nThe metric `tf.contrib.metrics.cohen_kappa` should be calculated successfully in both distributed and non-distributed evaluations.\r\n\r\n**Code to reproduce the issue**\r\ntest.py:\r\n```python\r\nimport tensorflow as tf\r\n\r\nDO_EVAL_DIST = True\r\n\r\ntf.logging.set_verbosity(tf.logging.INFO)\r\n\r\ndef model_fn(features, labels, mode):\r\n    layer = tf.layers.Dense(2)\r\n    logits = layer(features)\r\n\r\n    if mode == tf.estimator.ModeKeys.PREDICT:\r\n        predictions = {\"logits\": logits}\r\n        return tf.estimator.EstimatorSpec(mode, predictions=predictions)\r\n\r\n    loss = tf.losses.mean_squared_error(\r\n        labels=labels, predictions=tf.reshape(logits, [-1]))\r\n\r\n    if mode == tf.estimator.ModeKeys.EVAL:\r\n        class_targets = tf.reshape(tf.argmax(labels, axis=-1, name='class_targets'), [-1])\r\n        preds = tf.reshape(tf.argmax(logits, axis=-1, name='preds'), [-1])\r\n        return tf.estimator.EstimatorSpec(mode, loss=loss, eval_metric_ops={\r\n            'cohen_k': tf.contrib.metrics.cohen_kappa(class_targets, preds, 2),\r\n        })\r\n\r\n    if mode == tf.estimator.ModeKeys.TRAIN:\r\n        train_op = tf.train.GradientDescentOptimizer(0.2).minimize(loss, global_step=tf.train.get_global_step())\r\n        return tf.estimator.EstimatorSpec(mode, loss=loss, train_op=train_op)\r\n\r\ndef input_fn():\r\n    features = tf.data.Dataset.from_tensors([[1.]]).repeat()\r\n    labels = tf.data.Dataset.from_tensors([1., 0.]).repeat()\r\n    return tf.data.Dataset.zip((features, labels))\r\n\r\n# Configured the estimator for either distributed or non-distributed evaluation\r\n# Training is always distributed\r\nif DO_EVAL_DIST:\r\n    distribution = tf.contrib.distribute.DistributeConfig(\r\n        train_distribute=tf.contrib.distribute.MirroredStrategy(),\r\n        eval_distribute=tf.contrib.distribute.MirroredStrategy()\r\n    )\r\n    config = tf.estimator.RunConfig(experimental_distribute=distribution)\r\nelse:\r\n    distribution = tf.contrib.distribute.MirroredStrategy()\r\n    config = tf.estimator.RunConfig(train_distribute=distribution)\r\n\r\nclassifier = tf.estimator.Estimator(model_fn=model_fn, config=config, model_dir='out_test')\r\n\r\nprint('********* start train **********')\r\nclassifier.train(input_fn=input_fn, steps=1000)\r\nprint('********* end train/start eval **********')\r\nclassifier.evaluate(input_fn=input_fn, steps=1000)\r\nprint('********* end eval **********')\r\n```\r\n\r\n**Other info / logs**\r\nError thrown when using distributed evaluation, when `DO_EVAL_DIST = True`:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 49, in <module>\r\n    classifier.evaluate(input_fn=input_fn, steps=1000)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 474, in evaluate\r\n    return _evaluate()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 469, in _evaluate\r\n    output_dir=self.eval_dir(name))\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1528, in _evaluate_run\r\n    config=self._session_config)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/evaluation.py\", line 212, in _evaluate_once\r\n    session.run(eval_ops, feed_dict)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 783, in __exit__\r\n    self._close_internal(exception_type)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 816, in _close_internal\r\n    h.end(self._coordinated_creator.tf_sess)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 941, in end\r\n    self._final_ops, feed_dict=self._final_ops_feed_dict)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 887, in run\r\n    run_metadata_ptr)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1095, in _run\r\n    self._graph, fetches, feed_dict_tensor, feed_handles=feed_handles)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 429, in __init__\r\n    self._fetch_mapper = _FetchMapper.for_fetch(fetches)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 249, in for_fetch\r\n    return _DictFetchMapper(fetch)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 387, in __init__\r\n    _FetchMapper.for_fetch(fetch) for fetch in fetches.values()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 255, in for_fetch\r\n    return _ElementFetchMapper(fetches, contraction_fn)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 288, in __init__\r\n    (fetch, type(fetch), str(e)))\r\nTypeError: Fetch argument PerDevice({'/replica:0/task:0/device:GPU:0': <tf.Tensor 'cohen_kappa/value/Merge:0' shape=() dtype=float64>, '/replica:0/task:0/device:GPU:1': <tf.Tensor 'tower_1/cohen_kappa/value/Merge:0' shape=() dtype=float64>, '/replica:0/task:0/device:GPU:2': <tf.Tensor 'tower_2/cohen_kappa/value/Merge:0' shape=() dtype=float64>, '/replica:0/task:0/device:GPU:3': <tf.Tensor 'tower_3/cohen_kappa/value/Merge:0' shape=() dtype=float64>}) has invalid type <class 'tensorflow.contrib.distribute.python.values.PerDevice'>, must be a string or Tensor. (Can not convert a PerDevice into a Tensor or Operation.)\r\n```"}