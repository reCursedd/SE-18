{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/436010708", "html_url": "https://github.com/tensorflow/tensorflow/issues/23236#issuecomment-436010708", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23236", "id": 436010708, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjAxMDcwOA==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-05T19:47:56Z", "updated_at": "2018-11-05T19:47:56Z", "author_association": "MEMBER", "body_html": "<p>I'm a little confused; by reading your code it seems like the mbs in use grows not with time but with the number of ops being executed? As in, you're always running a single step, but in the case where you restore from checkpoint the memory grows as ops execute while in the case where you don't they do not, right?</p>\n<p>Moreover, this growth happens not on the call to run global_variables_initializer but on the call to run the forward pass of the model.</p>\n<p>This is very weird since you're not writing to any of the variables and running the forward pass shouldn't trigger more allocations. Can you print the partition graphs on the run metadata with and without checkpoint initialization so I can see what's different?</p>", "body_text": "I'm a little confused; by reading your code it seems like the mbs in use grows not with time but with the number of ops being executed? As in, you're always running a single step, but in the case where you restore from checkpoint the memory grows as ops execute while in the case where you don't they do not, right?\nMoreover, this growth happens not on the call to run global_variables_initializer but on the call to run the forward pass of the model.\nThis is very weird since you're not writing to any of the variables and running the forward pass shouldn't trigger more allocations. Can you print the partition graphs on the run metadata with and without checkpoint initialization so I can see what's different?", "body": "I'm a little confused; by reading your code it seems like the mbs in use grows not with time but with the number of ops being executed? As in, you're always running a single step, but in the case where you restore from checkpoint the memory grows as ops execute while in the case where you don't they do not, right?\r\n\r\nMoreover, this growth happens not on the call to run global_variables_initializer but on the call to run the forward pass of the model.\r\n\r\nThis is very weird since you're not writing to any of the variables and running the forward pass shouldn't trigger more allocations. Can you print the partition graphs on the run metadata with and without checkpoint initialization so I can see what's different?"}