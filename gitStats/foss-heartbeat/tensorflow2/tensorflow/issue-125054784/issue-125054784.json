{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/700", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/700/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/700/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/700/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/700", "id": 125054784, "node_id": "MDU6SXNzdWUxMjUwNTQ3ODQ=", "number": 700, "title": "Potential Memory Leak with Session Closing", "user": {"login": "kvamaraju", "id": 13072692, "node_id": "MDQ6VXNlcjEzMDcyNjky", "avatar_url": "https://avatars0.githubusercontent.com/u/13072692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvamaraju", "html_url": "https://github.com/kvamaraju", "followers_url": "https://api.github.com/users/kvamaraju/followers", "following_url": "https://api.github.com/users/kvamaraju/following{/other_user}", "gists_url": "https://api.github.com/users/kvamaraju/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvamaraju/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvamaraju/subscriptions", "organizations_url": "https://api.github.com/users/kvamaraju/orgs", "repos_url": "https://api.github.com/users/kvamaraju/repos", "events_url": "https://api.github.com/users/kvamaraju/events{/privacy}", "received_events_url": "https://api.github.com/users/kvamaraju/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-01-05T21:25:03Z", "updated_at": "2016-01-06T18:57:33Z", "closed_at": "2016-01-06T16:23:07Z", "author_association": "NONE", "body_html": "<p>Bug: When repeatedly creating and closing sessions on a GPU or CPU (on 0.6.0 release and Jan 5 dev version), memory appears to leak as the python process continually grows in memory usage. Additionally, the time to execute continues to grow.</p>\n<p>Expected behaviour: Once a session is closed, resources allocated should be freed or overwritten.</p>\n<p>The following code illustrates the issue with a minimal graph created:</p>\n<p>for i in range(0,10000000):<br>\nt0 = time.clock()</p>\n<pre><code>sess = tf.Session()\n\na = tf.placeholder(\"int16\",name = 'a')\ny=tf.identity(a,name='y')\n\nsess.run(y,feed_dict={a:3})\nsess.close()\n\nprint time.clock() - t0\n</code></pre>\n<p>The same issue happens even if I use a constant or variable instead of placeholder.</p>\n<p>Thanks!</p>", "body_text": "Bug: When repeatedly creating and closing sessions on a GPU or CPU (on 0.6.0 release and Jan 5 dev version), memory appears to leak as the python process continually grows in memory usage. Additionally, the time to execute continues to grow.\nExpected behaviour: Once a session is closed, resources allocated should be freed or overwritten.\nThe following code illustrates the issue with a minimal graph created:\nfor i in range(0,10000000):\nt0 = time.clock()\nsess = tf.Session()\n\na = tf.placeholder(\"int16\",name = 'a')\ny=tf.identity(a,name='y')\n\nsess.run(y,feed_dict={a:3})\nsess.close()\n\nprint time.clock() - t0\n\nThe same issue happens even if I use a constant or variable instead of placeholder.\nThanks!", "body": "Bug: When repeatedly creating and closing sessions on a GPU or CPU (on 0.6.0 release and Jan 5 dev version), memory appears to leak as the python process continually grows in memory usage. Additionally, the time to execute continues to grow. \n\nExpected behaviour: Once a session is closed, resources allocated should be freed or overwritten.\n\nThe following code illustrates the issue with a minimal graph created:\n\nfor i in range(0,10000000):\n    t0 = time.clock()\n\n```\nsess = tf.Session()\n\na = tf.placeholder(\"int16\",name = 'a')\ny=tf.identity(a,name='y')\n\nsess.run(y,feed_dict={a:3})\nsess.close()\n\nprint time.clock() - t0\n```\n\nThe same issue happens even if I use a constant or variable instead of placeholder.\n\nThanks!\n"}