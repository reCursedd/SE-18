{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11673", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11673/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11673/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11673/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11673", "id": 244767686, "node_id": "MDU6SXNzdWUyNDQ3Njc2ODY=", "number": 11673, "title": "Error in tf.contrib.layers.batch_norm when center=False, data_format='NCHW' and zero_debias_moving_mean=True", "user": {"login": "Kipok", "id": 2354422, "node_id": "MDQ6VXNlcjIzNTQ0MjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2354422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kipok", "html_url": "https://github.com/Kipok", "followers_url": "https://api.github.com/users/Kipok/followers", "following_url": "https://api.github.com/users/Kipok/following{/other_user}", "gists_url": "https://api.github.com/users/Kipok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kipok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kipok/subscriptions", "organizations_url": "https://api.github.com/users/Kipok/orgs", "repos_url": "https://api.github.com/users/Kipok/repos", "events_url": "https://api.github.com/users/Kipok/events{/privacy}", "received_events_url": "https://api.github.com/users/Kipok/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-21T19:55:12Z", "updated_at": "2017-09-07T23:53:50Z", "closed_at": "2017-09-07T23:53:50Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:  Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>:  1.2.1</li>\n<li><strong>Python version</strong>:  3.4.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.5.2</li>\n<li><strong>CUDA/cuDNN version</strong>:  8.0/6.0</li>\n<li><strong>GPU model and memory</strong>: Tesla P100 (16 gb)</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Batch norm layer fails with an error when both center=False, data_format='NCHW' and zero_debias_moving_mean=True arguments are used. It looks like the solution would be just adding additional if to check if beta is None in the same way it is done for gamma, but maybe there are some more dependencies.</p>\n<h3>Source code / logs</h3>\n<p>The following code could be used to reproduce the issue:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\na <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>))\nb <span class=\"pl-k\">=</span> tf.contrib.layers.batch_norm(a, <span class=\"pl-v\">center</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">data_format</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>NCHW<span class=\"pl-pds\">'</span></span>,\n                                 <span class=\"pl-v\">zero_debias_moving_mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(tf.global_variables_initializer())</pre></div>\n<p>The error log:</p>\n<pre><code>---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\n    489                 as_ref=input_arg.is_ref,\n--&gt; 490                 preferred_dtype=default_dtype)\n    491           except TypeError as err:\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)\n    675         if ret is None:\n--&gt; 676           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n    677 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\n    120   _ = as_ref\n--&gt; 121   return constant(v, dtype=dtype, name=name)\n    122 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\n    101   tensor_value.tensor.CopyFrom(\n--&gt; 102       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))\n    103   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\n    363     if values is None:\n--&gt; 364       raise ValueError(\"None values not supported.\")\n    365     # if dtype is provided, forces numpy array to be the type\n\nValueError: None values not supported.\n\nDuring handling of the above exception, another exception occurred:\n\nValueError                                Traceback (most recent call last)\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\n    503               observed = ops.internal_convert_to_tensor(\n--&gt; 504                   values, as_ref=input_arg.is_ref).dtype.name\n    505             except ValueError as err:\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)\n    675         if ret is None:\n--&gt; 676           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n    677 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\n    120   _ = as_ref\n--&gt; 121   return constant(v, dtype=dtype, name=name)\n    122 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\n    101   tensor_value.tensor.CopyFrom(\n--&gt; 102       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))\n    103   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\n    363     if values is None:\n--&gt; 364       raise ValueError(\"None values not supported.\")\n    365     # if dtype is provided, forces numpy array to be the type\n\nValueError: None values not supported.\n\nDuring handling of the above exception, another exception occurred:\n\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-1-c9cf0f67668a&gt; in &lt;module&gt;()\n      3 \n      4 a = tf.placeholder(tf.float32, shape=(10, 10, 10, 10))\n----&gt; 5 b = tf.contrib.layers.batch_norm(a, center=False, data_format='NCHW', zero_debias_moving_mean=True)\n      6 sess = tf.Session()\n      7 sess.run(tf.global_variables_initializer())\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    179       current_args = current_scope[key_func].copy()\n    180       current_args.update(kwargs)\n--&gt; 181     return func(*args, **current_args)\n    182   _add_op(func)\n    183   setattr(func_with_args, '_key_op', _key_op(func))\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/contrib/layers/python/layers/layers.py in batch_norm(inputs, decay, center, scale, epsilon, activation_fn, param_initializers, param_regularizers, updates_collections, is_training, reuse, variables_collections, outputs_collections, trainable, batch_weights, fused, data_format, zero_debias_moving_mean, scope, renorm, renorm_clipping, renorm_decay)\n    806       mean = array_ops.reshape(mean, params_shape_broadcast)\n    807       variance = array_ops.reshape(variance, params_shape_broadcast)\n--&gt; 808       beta = array_ops.reshape(beta, params_shape_broadcast)\n    809       if gamma is not None:\n    810         gamma = array_ops.reshape(gamma, params_shape_broadcast)\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/ops/gen_array_ops.py in reshape(tensor, shape, name)\n   2500   \"\"\"\n   2501   result = _op_def_lib.apply_op(\"Reshape\", tensor=tensor, shape=shape,\n-&gt; 2502                                 name=name)\n   2503   return result\n   2504 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\n    506               raise ValueError(\n    507                   \"Tried to convert '%s' to a tensor and failed. Error: %s\" %\n--&gt; 508                   (input_name, err))\n    509             prefix = (\"Input '%s' of '%s' Op has type %s that does not match\" %\n    510                       (input_name, op_type_name, observed))\n\nValueError: Tried to convert 'tensor' to a tensor and failed. Error: None values not supported.\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):  Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 14.04\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below):  1.2.1\nPython version:  3.4.3\nBazel version (if compiling from source): 0.5.2\nCUDA/cuDNN version:  8.0/6.0\nGPU model and memory: Tesla P100 (16 gb)\n\nDescribe the problem\nBatch norm layer fails with an error when both center=False, data_format='NCHW' and zero_debias_moving_mean=True arguments are used. It looks like the solution would be just adding additional if to check if beta is None in the same way it is done for gamma, but maybe there are some more dependencies.\nSource code / logs\nThe following code could be used to reproduce the issue:\nimport tensorflow as tf\na = tf.placeholder(tf.float32, shape=(10, 10, 10, 10))\nb = tf.contrib.layers.batch_norm(a, center=False, data_format='NCHW',\n                                 zero_debias_moving_mean=True)\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\nThe error log:\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\n    489                 as_ref=input_arg.is_ref,\n--> 490                 preferred_dtype=default_dtype)\n    491           except TypeError as err:\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)\n    675         if ret is None:\n--> 676           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n    677 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\n    120   _ = as_ref\n--> 121   return constant(v, dtype=dtype, name=name)\n    122 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\n    101   tensor_value.tensor.CopyFrom(\n--> 102       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))\n    103   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\n    363     if values is None:\n--> 364       raise ValueError(\"None values not supported.\")\n    365     # if dtype is provided, forces numpy array to be the type\n\nValueError: None values not supported.\n\nDuring handling of the above exception, another exception occurred:\n\nValueError                                Traceback (most recent call last)\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\n    503               observed = ops.internal_convert_to_tensor(\n--> 504                   values, as_ref=input_arg.is_ref).dtype.name\n    505             except ValueError as err:\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)\n    675         if ret is None:\n--> 676           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n    677 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\n    120   _ = as_ref\n--> 121   return constant(v, dtype=dtype, name=name)\n    122 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\n    101   tensor_value.tensor.CopyFrom(\n--> 102       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))\n    103   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\n    363     if values is None:\n--> 364       raise ValueError(\"None values not supported.\")\n    365     # if dtype is provided, forces numpy array to be the type\n\nValueError: None values not supported.\n\nDuring handling of the above exception, another exception occurred:\n\nValueError                                Traceback (most recent call last)\n<ipython-input-1-c9cf0f67668a> in <module>()\n      3 \n      4 a = tf.placeholder(tf.float32, shape=(10, 10, 10, 10))\n----> 5 b = tf.contrib.layers.batch_norm(a, center=False, data_format='NCHW', zero_debias_moving_mean=True)\n      6 sess = tf.Session()\n      7 sess.run(tf.global_variables_initializer())\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    179       current_args = current_scope[key_func].copy()\n    180       current_args.update(kwargs)\n--> 181     return func(*args, **current_args)\n    182   _add_op(func)\n    183   setattr(func_with_args, '_key_op', _key_op(func))\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/contrib/layers/python/layers/layers.py in batch_norm(inputs, decay, center, scale, epsilon, activation_fn, param_initializers, param_regularizers, updates_collections, is_training, reuse, variables_collections, outputs_collections, trainable, batch_weights, fused, data_format, zero_debias_moving_mean, scope, renorm, renorm_clipping, renorm_decay)\n    806       mean = array_ops.reshape(mean, params_shape_broadcast)\n    807       variance = array_ops.reshape(variance, params_shape_broadcast)\n--> 808       beta = array_ops.reshape(beta, params_shape_broadcast)\n    809       if gamma is not None:\n    810         gamma = array_ops.reshape(gamma, params_shape_broadcast)\n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/ops/gen_array_ops.py in reshape(tensor, shape, name)\n   2500   \"\"\"\n   2501   result = _op_def_lib.apply_op(\"Reshape\", tensor=tensor, shape=shape,\n-> 2502                                 name=name)\n   2503   return result\n   2504 \n\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\n    506               raise ValueError(\n    507                   \"Tried to convert '%s' to a tensor and failed. Error: %s\" %\n--> 508                   (input_name, err))\n    509             prefix = (\"Input '%s' of '%s' Op has type %s that does not match\" %\n    510                       (input_name, op_type_name, observed))\n\nValueError: Tried to convert 'tensor' to a tensor and failed. Error: None values not supported.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:  Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 14.04\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**:  1.2.1\r\n- **Python version**:  3.4.3\r\n- **Bazel version (if compiling from source)**: 0.5.2\r\n- **CUDA/cuDNN version**:  8.0/6.0\r\n- **GPU model and memory**: Tesla P100 (16 gb)\r\n\r\n### Describe the problem\r\nBatch norm layer fails with an error when both center=False, data_format='NCHW' and zero_debias_moving_mean=True arguments are used. It looks like the solution would be just adding additional if to check if beta is None in the same way it is done for gamma, but maybe there are some more dependencies.\r\n\r\n### Source code / logs\r\nThe following code could be used to reproduce the issue:\r\n```python\r\nimport tensorflow as tf\r\na = tf.placeholder(tf.float32, shape=(10, 10, 10, 10))\r\nb = tf.contrib.layers.batch_norm(a, center=False, data_format='NCHW',\r\n                                 zero_debias_moving_mean=True)\r\nsess = tf.Session()\r\nsess.run(tf.global_variables_initializer())\r\n```\r\nThe error log:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\r\n    489                 as_ref=input_arg.is_ref,\r\n--> 490                 preferred_dtype=default_dtype)\r\n    491           except TypeError as err:\r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)\r\n    675         if ret is None:\r\n--> 676           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n    677 \r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\r\n    120   _ = as_ref\r\n--> 121   return constant(v, dtype=dtype, name=name)\r\n    122 \r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\r\n    101   tensor_value.tensor.CopyFrom(\r\n--> 102       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))\r\n    103   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\r\n    363     if values is None:\r\n--> 364       raise ValueError(\"None values not supported.\")\r\n    365     # if dtype is provided, forces numpy array to be the type\r\n\r\nValueError: None values not supported.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\r\n    503               observed = ops.internal_convert_to_tensor(\r\n--> 504                   values, as_ref=input_arg.is_ref).dtype.name\r\n    505             except ValueError as err:\r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)\r\n    675         if ret is None:\r\n--> 676           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n    677 \r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\r\n    120   _ = as_ref\r\n--> 121   return constant(v, dtype=dtype, name=name)\r\n    122 \r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\r\n    101   tensor_value.tensor.CopyFrom(\r\n--> 102       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))\r\n    103   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\r\n    363     if values is None:\r\n--> 364       raise ValueError(\"None values not supported.\")\r\n    365     # if dtype is provided, forces numpy array to be the type\r\n\r\nValueError: None values not supported.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-1-c9cf0f67668a> in <module>()\r\n      3 \r\n      4 a = tf.placeholder(tf.float32, shape=(10, 10, 10, 10))\r\n----> 5 b = tf.contrib.layers.batch_norm(a, center=False, data_format='NCHW', zero_debias_moving_mean=True)\r\n      6 sess = tf.Session()\r\n      7 sess.run(tf.global_variables_initializer())\r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\r\n    179       current_args = current_scope[key_func].copy()\r\n    180       current_args.update(kwargs)\r\n--> 181     return func(*args, **current_args)\r\n    182   _add_op(func)\r\n    183   setattr(func_with_args, '_key_op', _key_op(func))\r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/contrib/layers/python/layers/layers.py in batch_norm(inputs, decay, center, scale, epsilon, activation_fn, param_initializers, param_regularizers, updates_collections, is_training, reuse, variables_collections, outputs_collections, trainable, batch_weights, fused, data_format, zero_debias_moving_mean, scope, renorm, renorm_clipping, renorm_decay)\r\n    806       mean = array_ops.reshape(mean, params_shape_broadcast)\r\n    807       variance = array_ops.reshape(variance, params_shape_broadcast)\r\n--> 808       beta = array_ops.reshape(beta, params_shape_broadcast)\r\n    809       if gamma is not None:\r\n    810         gamma = array_ops.reshape(gamma, params_shape_broadcast)\r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/ops/gen_array_ops.py in reshape(tensor, shape, name)\r\n   2500   \"\"\"\r\n   2501   result = _op_def_lib.apply_op(\"Reshape\", tensor=tensor, shape=shape,\r\n-> 2502                                 name=name)\r\n   2503   return result\r\n   2504 \r\n\r\n~/Documents/weight-normalization-exps/venv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\r\n    506               raise ValueError(\r\n    507                   \"Tried to convert '%s' to a tensor and failed. Error: %s\" %\r\n--> 508                   (input_name, err))\r\n    509             prefix = (\"Input '%s' of '%s' Op has type %s that does not match\" %\r\n    510                       (input_name, op_type_name, observed))\r\n\r\nValueError: Tried to convert 'tensor' to a tensor and failed. Error: None values not supported.\r\n```"}