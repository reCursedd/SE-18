{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6304", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6304/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6304/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6304/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6304", "id": 195474240, "node_id": "MDU6SXNzdWUxOTU0NzQyNDA=", "number": 6304, "title": "Inference with TensorFlow does not work properly", "user": {"login": "shelpuk", "id": 3008563, "node_id": "MDQ6VXNlcjMwMDg1NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3008563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shelpuk", "html_url": "https://github.com/shelpuk", "followers_url": "https://api.github.com/users/shelpuk/followers", "following_url": "https://api.github.com/users/shelpuk/following{/other_user}", "gists_url": "https://api.github.com/users/shelpuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/shelpuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shelpuk/subscriptions", "organizations_url": "https://api.github.com/users/shelpuk/orgs", "repos_url": "https://api.github.com/users/shelpuk/repos", "events_url": "https://api.github.com/users/shelpuk/events{/privacy}", "received_events_url": "https://api.github.com/users/shelpuk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-14T08:58:20Z", "updated_at": "2016-12-15T18:12:45Z", "closed_at": "2016-12-15T18:12:45Z", "author_association": "NONE", "body_html": "<p>I have a strange problem with my neural network: while CV accuracy is good, inference accuracy is at the random guess level.</p>\n<p>Inference is done in a standard ImageNet style way: five 224x224 squares, corners of the image plus center crop.</p>\n<p>The CV and inference code goes together as follows:</p>\n<p>`    inference_images = tf.placeholder(tf.float32, shape=(5, image_size_rows, image_size_cols, num_channels), name='input_images')</p>\n<pre><code>...    \n\n# Calculate CV loss and accuracy\n\ncv_images_batch, cv_labels_batch, cv_filenames = cv_runner.get_inputs()\n\ncv_predictions, cv_logits = network(cv_images_batch, num_labels)\ncv_loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(cv_logits, cv_labels_batch))\n\ncv_correct_prediction = tf.equal(tf.argmax(cv_predictions, 1), tf.argmax(cv_labels_batch, 1))\ncv_accuracy = tf.reduce_mean(tf.cast(cv_correct_prediction, 'float'))\n\n# Calculate inference\n\ninference_predictions, _ = network(inference_images, num_labels)\npredicted_classes = tf.argmax(inference_predictions, 1, name='predicted_classes')\npredicted_class = tf.argmax(tf.reduce_sum(inference_predictions, 0), 0, name='predicted_class')`\n</code></pre>\n<p>Training and CV accuracy quickly grow to &gt;50% but inference accuracy remains at the random guess level of 10%.</p>\n<p>I used for inference the same images I use for cross-validation and training. In both cases the inference accuracy remains low while I would expect it to be at the CV and train accuracy respectively.</p>\n<p>Preprocessing code is the same for training, CV and inference. Restoring images from CV and inference matrices works fine for both types. So, the problem apparently is not in different preprocessing for train/CV and inference.</p>\n<p>To isolate this effect, I have extracted train images out of a queue used for training and used them to make inference. Here are the results:</p>\n<p>`Step 35140: train loss: 0.170477, cv loss: 2.183839, train accuracy: 0.955357, cv accuracy: 0.535714, inference accuracy: 0.400000</p>\n<p>Step 35160: train loss: 0.233728, cv loss: 2.114637, train accuracy: 0.937500, cv accuracy: 0.517857, inference accuracy: 0.200000</p>\n<p>Step 35180: train loss: 0.362239, cv loss: 1.962119, train accuracy: 0.906250, cv accuracy: 0.544643, inference accuracy: 0.400000</p>\n<p>Step 35200: train loss: 0.190649, cv loss: 2.122064, train accuracy: 0.946429, cv accuracy: 0.540179, inference accuracy: 0.800000</p>\n<p>Step 35220: train loss: 0.161332, cv loss: 2.006443, train accuracy: 0.968750, cv accuracy: 0.513393, inference accuracy: 1.000000</p>\n<p>Step 35240: train loss: 0.185687, cv loss: 1.981431, train accuracy: 0.950893, cv accuracy: 0.535714, inference accuracy: 0.600000</p>\n<p>Step 35260: train loss: 0.123562, cv loss: 2.030116, train accuracy: 0.977679, cv accuracy: 0.562500, inference accuracy: 0.800000</p>\n<p>Step 35280: train loss: 0.216172, cv loss: 1.883790, train accuracy: 0.941964, cv accuracy: 0.549107, inference accuracy: 0.600000</p>\n<p>Step 35300: train loss: 0.256623, cv loss: 2.012454, train accuracy: 0.897321, cv accuracy: 0.549107, inference accuracy: 0.200000`</p>\n<p>Each inference batch is 5 images. As you can see, mean inference accuracy is way below train accuracy of 90%+.</p>\n<p>I have tried to add tf.get_variable_scope().reuse_variables() before the inference with no effect.</p>\n<p>Stackoverflow community did not help:<br>\n<a href=\"http://stackoverflow.com/questions/40820250/inference-with-tensorflow-does-not-work\" rel=\"nofollow\">http://stackoverflow.com/questions/40820250/inference-with-tensorflow-does-not-work</a></p>\n<p>What am I doing wrong with inference here?</p>\n<h3>Environment info</h3>\n<p>Operating System:<br>\nUbuntu 14.04</p>\n<p>Installed version of CUDA and cuDNN:<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):</p>\n<p>-rw-r--r-- 1 root root   322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a<br>\nlrwxrwxrwx 1 root root       16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -&gt; libcudart.so.7.5<br>\nlrwxrwxrwx 1 root root       19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -&gt; libcudart.so.7.5.18<br>\n-rwxr-xr-x 1 root root   383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18<br>\n-rw-r--r-- 1 root root   720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a<br>\n-rwxr-xr-x 1 root root 61453024 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn.so<br>\n-rwxr-xr-x 1 root root 61453024 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn.so.4<br>\n-rwxr-xr-x 1 root root 61453024 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn.so.4.0.7<br>\n-rw-r--r-- 1 root root 62025862 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn_static.a</p>\n<p>The output from <code>python -c \"import tensorflow; print(tensorflow.__version__)\"</code>.</p>\n<p>I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so.7.5 locally<br>\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so.4 locally<br>\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so.7.5 locally<br>\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally<br>\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so.7.5 locally<br>\n0.11.0rc2</p>", "body_text": "I have a strange problem with my neural network: while CV accuracy is good, inference accuracy is at the random guess level.\nInference is done in a standard ImageNet style way: five 224x224 squares, corners of the image plus center crop.\nThe CV and inference code goes together as follows:\n`    inference_images = tf.placeholder(tf.float32, shape=(5, image_size_rows, image_size_cols, num_channels), name='input_images')\n...    \n\n# Calculate CV loss and accuracy\n\ncv_images_batch, cv_labels_batch, cv_filenames = cv_runner.get_inputs()\n\ncv_predictions, cv_logits = network(cv_images_batch, num_labels)\ncv_loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(cv_logits, cv_labels_batch))\n\ncv_correct_prediction = tf.equal(tf.argmax(cv_predictions, 1), tf.argmax(cv_labels_batch, 1))\ncv_accuracy = tf.reduce_mean(tf.cast(cv_correct_prediction, 'float'))\n\n# Calculate inference\n\ninference_predictions, _ = network(inference_images, num_labels)\npredicted_classes = tf.argmax(inference_predictions, 1, name='predicted_classes')\npredicted_class = tf.argmax(tf.reduce_sum(inference_predictions, 0), 0, name='predicted_class')`\n\nTraining and CV accuracy quickly grow to >50% but inference accuracy remains at the random guess level of 10%.\nI used for inference the same images I use for cross-validation and training. In both cases the inference accuracy remains low while I would expect it to be at the CV and train accuracy respectively.\nPreprocessing code is the same for training, CV and inference. Restoring images from CV and inference matrices works fine for both types. So, the problem apparently is not in different preprocessing for train/CV and inference.\nTo isolate this effect, I have extracted train images out of a queue used for training and used them to make inference. Here are the results:\n`Step 35140: train loss: 0.170477, cv loss: 2.183839, train accuracy: 0.955357, cv accuracy: 0.535714, inference accuracy: 0.400000\nStep 35160: train loss: 0.233728, cv loss: 2.114637, train accuracy: 0.937500, cv accuracy: 0.517857, inference accuracy: 0.200000\nStep 35180: train loss: 0.362239, cv loss: 1.962119, train accuracy: 0.906250, cv accuracy: 0.544643, inference accuracy: 0.400000\nStep 35200: train loss: 0.190649, cv loss: 2.122064, train accuracy: 0.946429, cv accuracy: 0.540179, inference accuracy: 0.800000\nStep 35220: train loss: 0.161332, cv loss: 2.006443, train accuracy: 0.968750, cv accuracy: 0.513393, inference accuracy: 1.000000\nStep 35240: train loss: 0.185687, cv loss: 1.981431, train accuracy: 0.950893, cv accuracy: 0.535714, inference accuracy: 0.600000\nStep 35260: train loss: 0.123562, cv loss: 2.030116, train accuracy: 0.977679, cv accuracy: 0.562500, inference accuracy: 0.800000\nStep 35280: train loss: 0.216172, cv loss: 1.883790, train accuracy: 0.941964, cv accuracy: 0.549107, inference accuracy: 0.600000\nStep 35300: train loss: 0.256623, cv loss: 2.012454, train accuracy: 0.897321, cv accuracy: 0.549107, inference accuracy: 0.200000`\nEach inference batch is 5 images. As you can see, mean inference accuracy is way below train accuracy of 90%+.\nI have tried to add tf.get_variable_scope().reuse_variables() before the inference with no effect.\nStackoverflow community did not help:\nhttp://stackoverflow.com/questions/40820250/inference-with-tensorflow-does-not-work\nWhat am I doing wrong with inference here?\nEnvironment info\nOperating System:\nUbuntu 14.04\nInstalled version of CUDA and cuDNN:\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\n-rw-r--r-- 1 root root   322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5\nlrwxrwxrwx 1 root root       19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\n-rwxr-xr-x 1 root root   383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root   720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a\n-rwxr-xr-x 1 root root 61453024 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn.so\n-rwxr-xr-x 1 root root 61453024 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn.so.4\n-rwxr-xr-x 1 root root 61453024 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn.so.4.0.7\n-rw-r--r-- 1 root root 62025862 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn_static.a\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\".\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so.7.5 locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so.4 locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so.7.5 locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so.7.5 locally\n0.11.0rc2", "body": "I have a strange problem with my neural network: while CV accuracy is good, inference accuracy is at the random guess level.\r\n\r\nInference is done in a standard ImageNet style way: five 224x224 squares, corners of the image plus center crop.\r\n\r\nThe CV and inference code goes together as follows:\r\n\r\n`    inference_images = tf.placeholder(tf.float32, shape=(5, image_size_rows, image_size_cols, num_channels), name='input_images')\r\n\r\n    ...    \r\n\r\n    # Calculate CV loss and accuracy\r\n\r\n    cv_images_batch, cv_labels_batch, cv_filenames = cv_runner.get_inputs()\r\n\r\n    cv_predictions, cv_logits = network(cv_images_batch, num_labels)\r\n    cv_loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(cv_logits, cv_labels_batch))\r\n\r\n    cv_correct_prediction = tf.equal(tf.argmax(cv_predictions, 1), tf.argmax(cv_labels_batch, 1))\r\n    cv_accuracy = tf.reduce_mean(tf.cast(cv_correct_prediction, 'float'))\r\n\r\n    # Calculate inference\r\n\r\n    inference_predictions, _ = network(inference_images, num_labels)\r\n    predicted_classes = tf.argmax(inference_predictions, 1, name='predicted_classes')\r\n    predicted_class = tf.argmax(tf.reduce_sum(inference_predictions, 0), 0, name='predicted_class')`\r\n\r\nTraining and CV accuracy quickly grow to >50% but inference accuracy remains at the random guess level of 10%.\r\n\r\nI used for inference the same images I use for cross-validation and training. In both cases the inference accuracy remains low while I would expect it to be at the CV and train accuracy respectively.\r\n\r\nPreprocessing code is the same for training, CV and inference. Restoring images from CV and inference matrices works fine for both types. So, the problem apparently is not in different preprocessing for train/CV and inference.\r\n\r\nTo isolate this effect, I have extracted train images out of a queue used for training and used them to make inference. Here are the results:\r\n\r\n`Step 35140: train loss: 0.170477, cv loss: 2.183839, train accuracy: 0.955357, cv accuracy: 0.535714, inference accuracy: 0.400000\r\n\r\nStep 35160: train loss: 0.233728, cv loss: 2.114637, train accuracy: 0.937500, cv accuracy: 0.517857, inference accuracy: 0.200000\r\n\r\nStep 35180: train loss: 0.362239, cv loss: 1.962119, train accuracy: 0.906250, cv accuracy: 0.544643, inference accuracy: 0.400000\r\n\r\nStep 35200: train loss: 0.190649, cv loss: 2.122064, train accuracy: 0.946429, cv accuracy: 0.540179, inference accuracy: 0.800000\r\n\r\nStep 35220: train loss: 0.161332, cv loss: 2.006443, train accuracy: 0.968750, cv accuracy: 0.513393, inference accuracy: 1.000000\r\n\r\nStep 35240: train loss: 0.185687, cv loss: 1.981431, train accuracy: 0.950893, cv accuracy: 0.535714, inference accuracy: 0.600000\r\n\r\nStep 35260: train loss: 0.123562, cv loss: 2.030116, train accuracy: 0.977679, cv accuracy: 0.562500, inference accuracy: 0.800000\r\n\r\nStep 35280: train loss: 0.216172, cv loss: 1.883790, train accuracy: 0.941964, cv accuracy: 0.549107, inference accuracy: 0.600000\r\n\r\nStep 35300: train loss: 0.256623, cv loss: 2.012454, train accuracy: 0.897321, cv accuracy: 0.549107, inference accuracy: 0.200000`\r\n\r\nEach inference batch is 5 images. As you can see, mean inference accuracy is way below train accuracy of 90%+.\r\n\r\nI have tried to add tf.get_variable_scope().reuse_variables() before the inference with no effect.\r\n\r\nStackoverflow community did not help:\r\nhttp://stackoverflow.com/questions/40820250/inference-with-tensorflow-does-not-work\r\n\r\nWhat am I doing wrong with inference here?\r\n\r\n### Environment info\r\nOperating System:\r\nUbuntu 14.04\r\n\r\nInstalled version of CUDA and cuDNN: \r\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\r\n\r\n-rw-r--r-- 1 root root   322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a\r\nlrwxrwxrwx 1 root root       16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5\r\nlrwxrwxrwx 1 root root       19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\r\n-rwxr-xr-x 1 root root   383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18\r\n-rw-r--r-- 1 root root   720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a\r\n-rwxr-xr-x 1 root root 61453024 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn.so\r\n-rwxr-xr-x 1 root root 61453024 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn.so.4\r\n-rwxr-xr-x 1 root root 61453024 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn.so.4.0.7\r\n-rw-r--r-- 1 root root 62025862 Nov 14 14:08 /usr/local/cuda/lib64/libcudnn_static.a\r\n\r\nThe output from `python -c \"import tensorflow; print(tensorflow.__version__)\"`.\r\n\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so.7.5 locally\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so.4 locally\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so.7.5 locally\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so.7.5 locally\r\n0.11.0rc2"}