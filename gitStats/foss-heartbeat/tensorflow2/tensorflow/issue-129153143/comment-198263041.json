{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/198263041", "html_url": "https://github.com/tensorflow/tensorflow/issues/908#issuecomment-198263041", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/908", "id": 198263041, "node_id": "MDEyOklzc3VlQ29tbWVudDE5ODI2MzA0MQ==", "user": {"login": "martin-gorner", "id": 959847, "node_id": "MDQ6VXNlcjk1OTg0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/959847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martin-gorner", "html_url": "https://github.com/martin-gorner", "followers_url": "https://api.github.com/users/martin-gorner/followers", "following_url": "https://api.github.com/users/martin-gorner/following{/other_user}", "gists_url": "https://api.github.com/users/martin-gorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/martin-gorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martin-gorner/subscriptions", "organizations_url": "https://api.github.com/users/martin-gorner/orgs", "repos_url": "https://api.github.com/users/martin-gorner/repos", "events_url": "https://api.github.com/users/martin-gorner/events{/privacy}", "received_events_url": "https://api.github.com/users/martin-gorner/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-18T08:55:54Z", "updated_at": "2016-03-18T08:55:54Z", "author_association": "NONE", "body_html": "<p>For your case, I would try something like this (I have not tested it):<br>\nYou have 32 color (3-deep) kernels of size 5x5. The shape of your W1 is [5, 5, 3, 32].<br>\nSo I would try to display the 32 kernels in a 6x6 grid. That's 36 slots so you will have to add 4 zero kernels for padding.</p>\n<pre><code>W1_a = W1                            # [5, 5, 3, 32]\nW1pad= tf.zeros([5, 5, 3, 1])        # [5, 5, 3, 4]  - four zero kernels for padding\nW1_b = tf.concat(3, [W1_a, W1pad])   # [5, 5, 3, 36]\nW1_c = tf.split(3, 36, W1_b)         # 36 x [5, 5, 3, 1]\nW1_row0 = tf.concat(0, W1_c[0:6])    # [30, 5, 3, 1]\nW1_row1 = tf.concat(0, W1_c[6:12])   # [30, 5, 3, 1]\nW1_row2 = tf.concat(0, W1_c[12:18])  # [30, 5, 3, 1]\nW1_row3 = tf.concat(0, W1_c[18:24])  # [30, 5, 3, 1]\nW1_row4 = tf.concat(0, W1_c[24:30])  # [30, 5, 3, 1]\nW1_row5 = tf.concat(0, W1_c[30:36])  # [30, 5, 3, 1]\nW1_d = tf.concat(1, [W1_row0, W1_row1, W1_row2, W1_row3, W1_row4, W1_row5]) # [30, 30, 3, 1]\nW1_e = tf.reshape(W1_d, [1, 30, 30, 3])\nWtag = tf.placeholder(tf.string, None)\ntf.image_summary(Wtag, W1_e)\n</code></pre>", "body_text": "For your case, I would try something like this (I have not tested it):\nYou have 32 color (3-deep) kernels of size 5x5. The shape of your W1 is [5, 5, 3, 32].\nSo I would try to display the 32 kernels in a 6x6 grid. That's 36 slots so you will have to add 4 zero kernels for padding.\nW1_a = W1                            # [5, 5, 3, 32]\nW1pad= tf.zeros([5, 5, 3, 1])        # [5, 5, 3, 4]  - four zero kernels for padding\nW1_b = tf.concat(3, [W1_a, W1pad])   # [5, 5, 3, 36]\nW1_c = tf.split(3, 36, W1_b)         # 36 x [5, 5, 3, 1]\nW1_row0 = tf.concat(0, W1_c[0:6])    # [30, 5, 3, 1]\nW1_row1 = tf.concat(0, W1_c[6:12])   # [30, 5, 3, 1]\nW1_row2 = tf.concat(0, W1_c[12:18])  # [30, 5, 3, 1]\nW1_row3 = tf.concat(0, W1_c[18:24])  # [30, 5, 3, 1]\nW1_row4 = tf.concat(0, W1_c[24:30])  # [30, 5, 3, 1]\nW1_row5 = tf.concat(0, W1_c[30:36])  # [30, 5, 3, 1]\nW1_d = tf.concat(1, [W1_row0, W1_row1, W1_row2, W1_row3, W1_row4, W1_row5]) # [30, 30, 3, 1]\nW1_e = tf.reshape(W1_d, [1, 30, 30, 3])\nWtag = tf.placeholder(tf.string, None)\ntf.image_summary(Wtag, W1_e)", "body": "For your case, I would try something like this (I have not tested it):\nYou have 32 color (3-deep) kernels of size 5x5. The shape of your W1 is [5, 5, 3, 32].\nSo I would try to display the 32 kernels in a 6x6 grid. That's 36 slots so you will have to add 4 zero kernels for padding.\n\n```\nW1_a = W1                            # [5, 5, 3, 32]\nW1pad= tf.zeros([5, 5, 3, 1])        # [5, 5, 3, 4]  - four zero kernels for padding\nW1_b = tf.concat(3, [W1_a, W1pad])   # [5, 5, 3, 36]\nW1_c = tf.split(3, 36, W1_b)         # 36 x [5, 5, 3, 1]\nW1_row0 = tf.concat(0, W1_c[0:6])    # [30, 5, 3, 1]\nW1_row1 = tf.concat(0, W1_c[6:12])   # [30, 5, 3, 1]\nW1_row2 = tf.concat(0, W1_c[12:18])  # [30, 5, 3, 1]\nW1_row3 = tf.concat(0, W1_c[18:24])  # [30, 5, 3, 1]\nW1_row4 = tf.concat(0, W1_c[24:30])  # [30, 5, 3, 1]\nW1_row5 = tf.concat(0, W1_c[30:36])  # [30, 5, 3, 1]\nW1_d = tf.concat(1, [W1_row0, W1_row1, W1_row2, W1_row3, W1_row4, W1_row5]) # [30, 30, 3, 1]\nW1_e = tf.reshape(W1_d, [1, 30, 30, 3])\nWtag = tf.placeholder(tf.string, None)\ntf.image_summary(Wtag, W1_e)\n```\n"}