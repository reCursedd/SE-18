{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/198068471", "html_url": "https://github.com/tensorflow/tensorflow/issues/908#issuecomment-198068471", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/908", "id": 198068471, "node_id": "MDEyOklzc3VlQ29tbWVudDE5ODA2ODQ3MQ==", "user": {"login": "martin-gorner", "id": 959847, "node_id": "MDQ6VXNlcjk1OTg0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/959847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martin-gorner", "html_url": "https://github.com/martin-gorner", "followers_url": "https://api.github.com/users/martin-gorner/followers", "following_url": "https://api.github.com/users/martin-gorner/following{/other_user}", "gists_url": "https://api.github.com/users/martin-gorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/martin-gorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martin-gorner/subscriptions", "organizations_url": "https://api.github.com/users/martin-gorner/orgs", "repos_url": "https://api.github.com/users/martin-gorner/repos", "events_url": "https://api.github.com/users/martin-gorner/events{/privacy}", "received_events_url": "https://api.github.com/users/martin-gorner/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-17T20:28:04Z", "updated_at": "2016-03-18T08:56:46Z", "author_association": "NONE", "body_html": "<p>Hi jeandut</p>\n<p>Here is a snippet of code fo visualising convolutional layer, in my case it's of shape [5, 5, 1, 24] so you will have to adapt it to your case. I reformatted the 5x5 24-deep convolution kernel as a square grid of 25 5x5 images, the last one being just padding:</p>\n<pre><code>W1_a = W1                            # [5, 5, 1, 24]\nW1pad= tf.zeros([5, 5, 1, 1])        # [5, 5, 1, 1]\nW1_b = tf.concat(3, [W1_a, W1pad])   # [5, 5, 1, 25]\nW1_c = tf.split(3, 25, W1_b)         # 25 x [5, 5, 1, 1]\nW1_row0 = tf.concat(0, W1_c[0:5])    # [25, 5, 1, 1]\nW1_row1 = tf.concat(0, W1_c[5:10])   # [25, 5, 1, 1]\nW1_row2 = tf.concat(0, W1_c[10:15])  # [25, 5, 1, 1]\nW1_row3 = tf.concat(0, W1_c[15:20])  # [25, 5, 1, 1]\nW1_row4 = tf.concat(0, W1_c[20:25])  # [25, 5, 1, 1]\nW1_d = tf.concat(1, [W1_row0, W1_row1, W1_row2, W1_row3, W1_row4]) # [25, 25, 1, 1]\nW1_e = tf.reshape(W1_d, [1, 25, 25, 1])\nWtag = tf.placeholder(tf.string, None)\ntf.image_summary(Wtag, W1_e)\n</code></pre>", "body_text": "Hi jeandut\nHere is a snippet of code fo visualising convolutional layer, in my case it's of shape [5, 5, 1, 24] so you will have to adapt it to your case. I reformatted the 5x5 24-deep convolution kernel as a square grid of 25 5x5 images, the last one being just padding:\nW1_a = W1                            # [5, 5, 1, 24]\nW1pad= tf.zeros([5, 5, 1, 1])        # [5, 5, 1, 1]\nW1_b = tf.concat(3, [W1_a, W1pad])   # [5, 5, 1, 25]\nW1_c = tf.split(3, 25, W1_b)         # 25 x [5, 5, 1, 1]\nW1_row0 = tf.concat(0, W1_c[0:5])    # [25, 5, 1, 1]\nW1_row1 = tf.concat(0, W1_c[5:10])   # [25, 5, 1, 1]\nW1_row2 = tf.concat(0, W1_c[10:15])  # [25, 5, 1, 1]\nW1_row3 = tf.concat(0, W1_c[15:20])  # [25, 5, 1, 1]\nW1_row4 = tf.concat(0, W1_c[20:25])  # [25, 5, 1, 1]\nW1_d = tf.concat(1, [W1_row0, W1_row1, W1_row2, W1_row3, W1_row4]) # [25, 25, 1, 1]\nW1_e = tf.reshape(W1_d, [1, 25, 25, 1])\nWtag = tf.placeholder(tf.string, None)\ntf.image_summary(Wtag, W1_e)", "body": "Hi jeandut\n\nHere is a snippet of code fo visualising convolutional layer, in my case it's of shape [5, 5, 1, 24] so you will have to adapt it to your case. I reformatted the 5x5 24-deep convolution kernel as a square grid of 25 5x5 images, the last one being just padding:\n\n```\nW1_a = W1                            # [5, 5, 1, 24]\nW1pad= tf.zeros([5, 5, 1, 1])        # [5, 5, 1, 1]\nW1_b = tf.concat(3, [W1_a, W1pad])   # [5, 5, 1, 25]\nW1_c = tf.split(3, 25, W1_b)         # 25 x [5, 5, 1, 1]\nW1_row0 = tf.concat(0, W1_c[0:5])    # [25, 5, 1, 1]\nW1_row1 = tf.concat(0, W1_c[5:10])   # [25, 5, 1, 1]\nW1_row2 = tf.concat(0, W1_c[10:15])  # [25, 5, 1, 1]\nW1_row3 = tf.concat(0, W1_c[15:20])  # [25, 5, 1, 1]\nW1_row4 = tf.concat(0, W1_c[20:25])  # [25, 5, 1, 1]\nW1_d = tf.concat(1, [W1_row0, W1_row1, W1_row2, W1_row3, W1_row4]) # [25, 25, 1, 1]\nW1_e = tf.reshape(W1_d, [1, 25, 25, 1])\nWtag = tf.placeholder(tf.string, None)\ntf.image_summary(Wtag, W1_e)\n```\n"}