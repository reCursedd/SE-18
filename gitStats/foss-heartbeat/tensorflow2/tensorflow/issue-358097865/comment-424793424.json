{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424793424", "html_url": "https://github.com/tensorflow/tensorflow/issues/22145#issuecomment-424793424", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22145", "id": 424793424, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDc5MzQyNA==", "user": {"login": "rodrigoberriel", "id": 7027770, "node_id": "MDQ6VXNlcjcwMjc3NzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7027770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodrigoberriel", "html_url": "https://github.com/rodrigoberriel", "followers_url": "https://api.github.com/users/rodrigoberriel/followers", "following_url": "https://api.github.com/users/rodrigoberriel/following{/other_user}", "gists_url": "https://api.github.com/users/rodrigoberriel/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodrigoberriel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodrigoberriel/subscriptions", "organizations_url": "https://api.github.com/users/rodrigoberriel/orgs", "repos_url": "https://api.github.com/users/rodrigoberriel/repos", "events_url": "https://api.github.com/users/rodrigoberriel/events{/privacy}", "received_events_url": "https://api.github.com/users/rodrigoberriel/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-26T17:01:00Z", "updated_at": "2018-10-16T23:15:51Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=667809\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/karmel\">@karmel</a> You can replicate the issue by adding any operation after the <code>tf.nn.depthwise_conv2d</code>. As an example, you can add <code>[0]</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre>img <span class=\"pl-k\">=</span> tf.nn.depthwise_conv2d(img[<span class=\"pl-c1\">None</span>], blur, [<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], <span class=\"pl-s\"><span class=\"pl-pds\">'</span>VALID<span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">0</span>]</pre></div>\n<p>As a workaround, you can use another map to unwrap the output, e.g.:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">apply_blur</span>(<span class=\"pl-smi\">img</span>):\n    blur <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>)\n    img <span class=\"pl-k\">=</span> tf.nn.depthwise_conv2d(img[<span class=\"pl-c1\">None</span>], blur, [<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], <span class=\"pl-s\"><span class=\"pl-pds\">'</span>VALID<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-k\">return</span> img\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">workaround</span>(<span class=\"pl-smi\">img</span>):\n    <span class=\"pl-k\">return</span> img[<span class=\"pl-c1\">0</span>]\n\ntf.reset_default_graph()\ndataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices(np.ones((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">1</span>)))\ndataset <span class=\"pl-k\">=</span> dataset.map(apply_blur, <span class=\"pl-c1\">2</span>).map(workaround, <span class=\"pl-c1\">2</span>)\n\niterator <span class=\"pl-k\">=</span> dataset.make_one_shot_iterator()\nbatch <span class=\"pl-k\">=</span> iterator.get_next()\n\nconfig <span class=\"pl-k\">=</span> tf.ConfigProto()\nconfig.gpu_options.allow_growth <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config) <span class=\"pl-k\">as</span> sess:\n    out <span class=\"pl-k\">=</span> sess.run(batch)</pre></div>", "body_text": "@karmel You can replicate the issue by adding any operation after the tf.nn.depthwise_conv2d. As an example, you can add [0]:\nimg = tf.nn.depthwise_conv2d(img[None], blur, [1,1,1,1], 'VALID')[0]\nAs a workaround, you can use another map to unwrap the output, e.g.:\nimport tensorflow as tf\nimport numpy as np\n\ndef apply_blur(img):\n    blur = np.random.rand(3,3,1,1)\n    img = tf.nn.depthwise_conv2d(img[None], blur, [1,1,1,1], 'VALID')\n    return img\n\ndef workaround(img):\n    return img[0]\n\ntf.reset_default_graph()\ndataset = tf.data.Dataset.from_tensor_slices(np.ones((10, 128, 128, 1)))\ndataset = dataset.map(apply_blur, 2).map(workaround, 2)\n\niterator = dataset.make_one_shot_iterator()\nbatch = iterator.get_next()\n\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True\nwith tf.Session(config=config) as sess:\n    out = sess.run(batch)", "body": "@karmel You can replicate the issue by adding any operation after the `tf.nn.depthwise_conv2d`. As an example, you can add `[0]`:\r\n\r\n``` python\r\nimg = tf.nn.depthwise_conv2d(img[None], blur, [1,1,1,1], 'VALID')[0]\r\n```\r\n\r\nAs a workaround, you can use another map to unwrap the output, e.g.:\r\n\r\n``` python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndef apply_blur(img):\r\n    blur = np.random.rand(3,3,1,1)\r\n    img = tf.nn.depthwise_conv2d(img[None], blur, [1,1,1,1], 'VALID')\r\n    return img\r\n\r\ndef workaround(img):\r\n    return img[0]\r\n\r\ntf.reset_default_graph()\r\ndataset = tf.data.Dataset.from_tensor_slices(np.ones((10, 128, 128, 1)))\r\ndataset = dataset.map(apply_blur, 2).map(workaround, 2)\r\n\r\niterator = dataset.make_one_shot_iterator()\r\nbatch = iterator.get_next()\r\n\r\nconfig = tf.ConfigProto()\r\nconfig.gpu_options.allow_growth = True\r\nwith tf.Session(config=config) as sess:\r\n    out = sess.run(batch)\r\n```"}