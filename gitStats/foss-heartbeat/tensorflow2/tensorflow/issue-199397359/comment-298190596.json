{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/298190596", "html_url": "https://github.com/tensorflow/tensorflow/issues/6720#issuecomment-298190596", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6720", "id": 298190596, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODE5MDU5Ng==", "user": {"login": "gpapan", "id": 6232317, "node_id": "MDQ6VXNlcjYyMzIzMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6232317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpapan", "html_url": "https://github.com/gpapan", "followers_url": "https://api.github.com/users/gpapan/followers", "following_url": "https://api.github.com/users/gpapan/following{/other_user}", "gists_url": "https://api.github.com/users/gpapan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpapan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpapan/subscriptions", "organizations_url": "https://api.github.com/users/gpapan/orgs", "repos_url": "https://api.github.com/users/gpapan/repos", "events_url": "https://api.github.com/users/gpapan/events{/privacy}", "received_events_url": "https://api.github.com/users/gpapan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-29T19:49:16Z", "updated_at": "2017-04-29T19:51:44Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1381301\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppwwyyxx\">@ppwwyyxx</a>, Regarding your question on \"which alignment is better for NN training\", multiple approaches are possible as long as you are consistent. Here is my own favorite set of rules that we have followed in our <a href=\"https://arxiv.org/abs/1606.00915\" rel=\"nofollow\">DeepLab</a> semantic image segmentation system:</p>\n<p>\"DeepLab's Four Alignment Rules\":<br>\n(1) Use of odd-sized kernels in all convolution and pooling ops.<br>\n(2) Use of SAME boundary conditions in all convolution and pooling ops.<br>\n(3) Use align_corners=True when upsampling feature maps with bilinear interpolation.<br>\n(4) Use of inputs with height/width equal to a multiple of the output_stride, plus one (for example, when the CNN output stride is 8, use height or width equal to <code>8 * n + 1</code>, for some <code>n</code>, e.g., image HxW set to 321x513).</p>", "body_text": "@ppwwyyxx, Regarding your question on \"which alignment is better for NN training\", multiple approaches are possible as long as you are consistent. Here is my own favorite set of rules that we have followed in our DeepLab semantic image segmentation system:\n\"DeepLab's Four Alignment Rules\":\n(1) Use of odd-sized kernels in all convolution and pooling ops.\n(2) Use of SAME boundary conditions in all convolution and pooling ops.\n(3) Use align_corners=True when upsampling feature maps with bilinear interpolation.\n(4) Use of inputs with height/width equal to a multiple of the output_stride, plus one (for example, when the CNN output stride is 8, use height or width equal to 8 * n + 1, for some n, e.g., image HxW set to 321x513).", "body": "@ppwwyyxx, Regarding your question on \"which alignment is better for NN training\", multiple approaches are possible as long as you are consistent. Here is my own favorite set of rules that we have followed in our [DeepLab](https://arxiv.org/abs/1606.00915) semantic image segmentation system:\r\n\r\n\"DeepLab's Four Alignment Rules\":\r\n(1) Use of odd-sized kernels in all convolution and pooling ops.\r\n(2) Use of SAME boundary conditions in all convolution and pooling ops.\r\n(3) Use align_corners=True when upsampling feature maps with bilinear interpolation.\r\n(4) Use of inputs with height/width equal to a multiple of the output_stride, plus one (for example, when the CNN output stride is 8, use height or width equal to `8 * n + 1`, for some `n`, e.g., image HxW set to 321x513)."}