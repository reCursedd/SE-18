{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14998", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14998/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14998/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14998/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14998", "id": 278064105, "node_id": "MDU6SXNzdWUyNzgwNjQxMDU=", "number": 14998, "title": "Extend reshape with begin_axis and end_axis like in cntk", "user": {"login": "boeddeker", "id": 13744128, "node_id": "MDQ6VXNlcjEzNzQ0MTI4", "avatar_url": "https://avatars3.githubusercontent.com/u/13744128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boeddeker", "html_url": "https://github.com/boeddeker", "followers_url": "https://api.github.com/users/boeddeker/followers", "following_url": "https://api.github.com/users/boeddeker/following{/other_user}", "gists_url": "https://api.github.com/users/boeddeker/gists{/gist_id}", "starred_url": "https://api.github.com/users/boeddeker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boeddeker/subscriptions", "organizations_url": "https://api.github.com/users/boeddeker/orgs", "repos_url": "https://api.github.com/users/boeddeker/repos", "events_url": "https://api.github.com/users/boeddeker/events{/privacy}", "received_events_url": "https://api.github.com/users/boeddeker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-11-30T10:11:22Z", "updated_at": "2018-01-03T10:20:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-rc1-11-g130a514 1.4.0</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>CNTK has a generalized version of reshape and it would be nice to have such a version also in Tensorflow<br>\n(<a href=\"https://github.com/Microsoft/CNTK/blob/master/bindings/python/cntk/ops/__init__.py#L1972\">https://github.com/Microsoft/CNTK/blob/master/bindings/python/cntk/ops/__init__.py#L1972</a>).</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">reshape</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">shape</span>, <span class=\"pl-smi\">begin_axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">end_axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>):\n    <span class=\"pl-c1\">...</span></pre></div>\n<p>The difference is, that the user can provide <code>begin_axis</code> and <code>end_axis</code> and if they are specified reshape only operate on a subset of the shape.</p>\n<p>I can make a PR, when somebody says me, where I have to write the code.</p>\n<h3>Source code / logs</h3>\n<p>Here a working example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">reshape</span>(<span class=\"pl-smi\">tensor</span>, <span class=\"pl-smi\">shape</span>, <span class=\"pl-smi\">begin_axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">end_axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>) -&gt; tf.Tensor:\n    <span class=\"pl-k\">if</span> begin_axis <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">and</span> end_axis <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n        <span class=\"pl-k\">return</span> tf.reshape(tensor, shape, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name)\n\n    <span class=\"pl-k\">with</span> tf.name_scope(name, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>reshape<span class=\"pl-pds\">'</span></span>, [tensor]):\n        tensor_shape <span class=\"pl-k\">=</span> tf.shape(tensor)\n        to_concat <span class=\"pl-k\">=</span> [shape]\n        <span class=\"pl-k\">if</span> begin_axis <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n            bs <span class=\"pl-k\">=</span> tensor_shape[:begin_axis]\n            to_concat.insert(<span class=\"pl-c1\">0</span>, bs)\n        <span class=\"pl-k\">if</span> end_axis <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n            es <span class=\"pl-k\">=</span> tensor_shape[end_axis:]\n            to_concat.append(es)\n\n        tensor_shape <span class=\"pl-k\">=</span> tf.concat(to_concat, <span class=\"pl-c1\">0</span>)\n\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">=</span> tf.reshape(tensor, tensor_shape)</pre></div>\n<p>and an example doctest</p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    Inspired from cntk.reshape to allow begin_axis and end_axis</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    Assume you call reshape</span>\n<span class=\"pl-s\">    &gt;&gt; out = reshape(in, shape, b, e)</span>\n<span class=\"pl-s\">    Than the following will hold</span>\n<span class=\"pl-s\">    (Note: If b or e is None, the are interpreted as 0 and/or include the last axis)</span>\n<span class=\"pl-s\">    &gt;&gt; in_shape = in.shape</span>\n<span class=\"pl-s\">    &gt;&gt; in_shape[b:e] = shape</span>\n<span class=\"pl-s\">    &gt;&gt; assert out.shape == in_shape</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    First example normal reshape, where the input has unknown dimension</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>import numpy as np</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>_ = tf.InteractiveSession()</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>x = tf.placeholder(tf.float32)</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y = reshape(x, [-1])</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y</span>\n<span class=\"pl-s\">    &lt;tf.Tensor 'Reshape:0' shape=(?,) dtype=float32&gt;</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y.eval({x: np.zeros([3, 4])}).shape</span>\n<span class=\"pl-s\">    (12,)</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    Now keep first and last axis: (No shape inference expected, to difficult)</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y = reshape(x, [-1], begin_axis=1, end_axis=-1)</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y</span>\n<span class=\"pl-s\">    &lt;tf.Tensor 'reshape/Reshape:0' shape=&lt;unknown&gt; dtype=float32&gt;</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y.eval({x: np.zeros([3, 4, 5, 6])}).shape</span>\n<span class=\"pl-s\">    (3, 20, 6)</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    Now with ndim defined:</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>x = tf.placeholder(tf.float32, shape=[None, None, None, None])</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y = reshape(x, [-1], begin_axis=1, end_axis=-1)</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y</span>\n<span class=\"pl-s\">    &lt;tf.Tensor 'reshape_1/Reshape:0' shape=(?, ?, ?) dtype=float32&gt;</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y.eval({x: np.zeros([3, 4, 5, 6])}).shape</span>\n<span class=\"pl-s\">    (3, 20, 6)</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    Now with partial defined shape:</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>x = tf.placeholder(tf.float32, shape=[3, 4, None, 6])</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y = reshape(x, [-1], begin_axis=1, end_axis=-1)</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y</span>\n<span class=\"pl-s\">    &lt;tf.Tensor 'reshape_2/Reshape:0' shape=(3, ?, 6) dtype=float32&gt;</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y.eval({x: np.zeros([3, 4, 5, 6])}).shape</span>\n<span class=\"pl-s\">    (3, 20, 6)</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    Now with full defined shape:</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>x = tf.placeholder(tf.float32, shape=[3, 4, 5, 6])</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y = reshape(x, [-1], begin_axis=1, end_axis=-1)</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y</span>\n<span class=\"pl-s\">    &lt;tf.Tensor 'reshape_3/Reshape:0' shape=(3, 20, 6) dtype=float32&gt;</span>\n<span class=\"pl-s\">    <span class=\"pl-k\">&gt;&gt;&gt; </span>y.eval({x: np.zeros([3, 4, 5, 6])}).shape</span>\n<span class=\"pl-s\">    (3, 20, 6)</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    :param tensor:</span>\n<span class=\"pl-s\">    :param shape:</span>\n<span class=\"pl-s\">    :param name:</span>\n<span class=\"pl-s\">    :return:</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span></pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.4.0-rc1-11-g130a514 1.4.0\nPython version: 3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nCNTK has a generalized version of reshape and it would be nice to have such a version also in Tensorflow\n(https://github.com/Microsoft/CNTK/blob/master/bindings/python/cntk/ops/__init__.py#L1972).\ndef reshape(x, shape, begin_axis=None, end_axis=None, name=''):\n    ...\nThe difference is, that the user can provide begin_axis and end_axis and if they are specified reshape only operate on a subset of the shape.\nI can make a PR, when somebody says me, where I have to write the code.\nSource code / logs\nHere a working example:\ndef reshape(tensor, shape, begin_axis=None, end_axis=None, name=None) -> tf.Tensor:\n    if begin_axis is None and end_axis is None:\n        return tf.reshape(tensor, shape, name=name)\n\n    with tf.name_scope(name, 'reshape', [tensor]):\n        tensor_shape = tf.shape(tensor)\n        to_concat = [shape]\n        if begin_axis is not None:\n            bs = tensor_shape[:begin_axis]\n            to_concat.insert(0, bs)\n        if end_axis is not None:\n            es = tensor_shape[end_axis:]\n            to_concat.append(es)\n\n        tensor_shape = tf.concat(to_concat, 0)\n\n        return = tf.reshape(tensor, tensor_shape)\nand an example doctest\n    \"\"\"\n\n    Inspired from cntk.reshape to allow begin_axis and end_axis\n\n    Assume you call reshape\n    >> out = reshape(in, shape, b, e)\n    Than the following will hold\n    (Note: If b or e is None, the are interpreted as 0 and/or include the last axis)\n    >> in_shape = in.shape\n    >> in_shape[b:e] = shape\n    >> assert out.shape == in_shape\n\n    First example normal reshape, where the input has unknown dimension\n    >>> import numpy as np\n    >>> _ = tf.InteractiveSession()\n    >>> x = tf.placeholder(tf.float32)\n    >>> y = reshape(x, [-1])\n    >>> y\n    <tf.Tensor 'Reshape:0' shape=(?,) dtype=float32>\n    >>> y.eval({x: np.zeros([3, 4])}).shape\n    (12,)\n\n    Now keep first and last axis: (No shape inference expected, to difficult)\n    >>> y = reshape(x, [-1], begin_axis=1, end_axis=-1)\n    >>> y\n    <tf.Tensor 'reshape/Reshape:0' shape=<unknown> dtype=float32>\n    >>> y.eval({x: np.zeros([3, 4, 5, 6])}).shape\n    (3, 20, 6)\n\n    Now with ndim defined:\n    >>> x = tf.placeholder(tf.float32, shape=[None, None, None, None])\n    >>> y = reshape(x, [-1], begin_axis=1, end_axis=-1)\n    >>> y\n    <tf.Tensor 'reshape_1/Reshape:0' shape=(?, ?, ?) dtype=float32>\n    >>> y.eval({x: np.zeros([3, 4, 5, 6])}).shape\n    (3, 20, 6)\n\n    Now with partial defined shape:\n    >>> x = tf.placeholder(tf.float32, shape=[3, 4, None, 6])\n    >>> y = reshape(x, [-1], begin_axis=1, end_axis=-1)\n    >>> y\n    <tf.Tensor 'reshape_2/Reshape:0' shape=(3, ?, 6) dtype=float32>\n    >>> y.eval({x: np.zeros([3, 4, 5, 6])}).shape\n    (3, 20, 6)\n\n    Now with full defined shape:\n    >>> x = tf.placeholder(tf.float32, shape=[3, 4, 5, 6])\n    >>> y = reshape(x, [-1], begin_axis=1, end_axis=-1)\n    >>> y\n    <tf.Tensor 'reshape_3/Reshape:0' shape=(3, 20, 6) dtype=float32>\n    >>> y.eval({x: np.zeros([3, 4, 5, 6])}).shape\n    (3, 20, 6)\n\n    :param tensor:\n    :param shape:\n    :param name:\n    :return:\n    \"\"\"", "body": "------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.4.0-rc1-11-g130a514 1.4.0\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nCNTK has a generalized version of reshape and it would be nice to have such a version also in Tensorflow\r\n(https://github.com/Microsoft/CNTK/blob/master/bindings/python/cntk/ops/__init__.py#L1972).\r\n```python\r\ndef reshape(x, shape, begin_axis=None, end_axis=None, name=''):\r\n    ...\r\n```\r\n\r\nThe difference is, that the user can provide `begin_axis` and `end_axis` and if they are specified reshape only operate on a subset of the shape.\r\n\r\nI can make a PR, when somebody says me, where I have to write the code.\r\n\r\n### Source code / logs\r\nHere a working example:\r\n```python\r\ndef reshape(tensor, shape, begin_axis=None, end_axis=None, name=None) -> tf.Tensor:\r\n    if begin_axis is None and end_axis is None:\r\n        return tf.reshape(tensor, shape, name=name)\r\n\r\n    with tf.name_scope(name, 'reshape', [tensor]):\r\n        tensor_shape = tf.shape(tensor)\r\n        to_concat = [shape]\r\n        if begin_axis is not None:\r\n            bs = tensor_shape[:begin_axis]\r\n            to_concat.insert(0, bs)\r\n        if end_axis is not None:\r\n            es = tensor_shape[end_axis:]\r\n            to_concat.append(es)\r\n\r\n        tensor_shape = tf.concat(to_concat, 0)\r\n\r\n        return = tf.reshape(tensor, tensor_shape)\r\n```\r\n\r\nand an example doctest\r\n```python\r\n    \"\"\"\r\n\r\n    Inspired from cntk.reshape to allow begin_axis and end_axis\r\n\r\n    Assume you call reshape\r\n    >> out = reshape(in, shape, b, e)\r\n    Than the following will hold\r\n    (Note: If b or e is None, the are interpreted as 0 and/or include the last axis)\r\n    >> in_shape = in.shape\r\n    >> in_shape[b:e] = shape\r\n    >> assert out.shape == in_shape\r\n\r\n    First example normal reshape, where the input has unknown dimension\r\n    >>> import numpy as np\r\n    >>> _ = tf.InteractiveSession()\r\n    >>> x = tf.placeholder(tf.float32)\r\n    >>> y = reshape(x, [-1])\r\n    >>> y\r\n    <tf.Tensor 'Reshape:0' shape=(?,) dtype=float32>\r\n    >>> y.eval({x: np.zeros([3, 4])}).shape\r\n    (12,)\r\n\r\n    Now keep first and last axis: (No shape inference expected, to difficult)\r\n    >>> y = reshape(x, [-1], begin_axis=1, end_axis=-1)\r\n    >>> y\r\n    <tf.Tensor 'reshape/Reshape:0' shape=<unknown> dtype=float32>\r\n    >>> y.eval({x: np.zeros([3, 4, 5, 6])}).shape\r\n    (3, 20, 6)\r\n\r\n    Now with ndim defined:\r\n    >>> x = tf.placeholder(tf.float32, shape=[None, None, None, None])\r\n    >>> y = reshape(x, [-1], begin_axis=1, end_axis=-1)\r\n    >>> y\r\n    <tf.Tensor 'reshape_1/Reshape:0' shape=(?, ?, ?) dtype=float32>\r\n    >>> y.eval({x: np.zeros([3, 4, 5, 6])}).shape\r\n    (3, 20, 6)\r\n\r\n    Now with partial defined shape:\r\n    >>> x = tf.placeholder(tf.float32, shape=[3, 4, None, 6])\r\n    >>> y = reshape(x, [-1], begin_axis=1, end_axis=-1)\r\n    >>> y\r\n    <tf.Tensor 'reshape_2/Reshape:0' shape=(3, ?, 6) dtype=float32>\r\n    >>> y.eval({x: np.zeros([3, 4, 5, 6])}).shape\r\n    (3, 20, 6)\r\n\r\n    Now with full defined shape:\r\n    >>> x = tf.placeholder(tf.float32, shape=[3, 4, 5, 6])\r\n    >>> y = reshape(x, [-1], begin_axis=1, end_axis=-1)\r\n    >>> y\r\n    <tf.Tensor 'reshape_3/Reshape:0' shape=(3, 20, 6) dtype=float32>\r\n    >>> y.eval({x: np.zeros([3, 4, 5, 6])}).shape\r\n    (3, 20, 6)\r\n\r\n    :param tensor:\r\n    :param shape:\r\n    :param name:\r\n    :return:\r\n    \"\"\"\r\n```\r\n"}