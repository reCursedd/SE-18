{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/304324598", "html_url": "https://github.com/tensorflow/tensorflow/issues/10178#issuecomment-304324598", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10178", "id": 304324598, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDMyNDU5OA==", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-26T16:16:29Z", "updated_at": "2017-05-26T16:16:29Z", "author_association": "MEMBER", "body_html": "<p>I agree that <code>tensor.shape |= new_shape</code> looks better, but I don't think we can make it work with Python syntax, unless <code>TensorShape</code> contains a reference back to the containing <code>Tensor</code> (which would be a back ideal). Syntactically, this is equivalent to:</p>\n<div class=\"highlight highlight-source-python\"><pre>shape <span class=\"pl-k\">=</span> tensor.shape\nshape <span class=\"pl-k\">|=</span> new_shape</pre></div>\n<p>It's not unheard of for properties to have constraints on how you can set them. For example, you can't set <code>numpy_array.shape = new_shape</code> if <code>new_shape</code> has a different size.</p>\n<p>I guess my main argument is that a method name like <code>set_shape</code> really sounds like it should be a setter method instead. If we called it <code>update_shape</code> I would not be arguing for this :).</p>", "body_text": "I agree that tensor.shape |= new_shape looks better, but I don't think we can make it work with Python syntax, unless TensorShape contains a reference back to the containing Tensor (which would be a back ideal). Syntactically, this is equivalent to:\nshape = tensor.shape\nshape |= new_shape\nIt's not unheard of for properties to have constraints on how you can set them. For example, you can't set numpy_array.shape = new_shape if new_shape has a different size.\nI guess my main argument is that a method name like set_shape really sounds like it should be a setter method instead. If we called it update_shape I would not be arguing for this :).", "body": "I agree that `tensor.shape |= new_shape` looks better, but I don't think we can make it work with Python syntax, unless `TensorShape` contains a reference back to the containing `Tensor` (which would be a back ideal). Syntactically, this is equivalent to:\r\n```python\r\nshape = tensor.shape\r\nshape |= new_shape\r\n```\r\n\r\nIt's not unheard of for properties to have constraints on how you can set them. For example, you can't set `numpy_array.shape = new_shape` if `new_shape` has a different size.\r\n\r\nI guess my main argument is that a method name like `set_shape` really sounds like it should be a setter method instead. If we called it `update_shape` I would not be arguing for this :)."}