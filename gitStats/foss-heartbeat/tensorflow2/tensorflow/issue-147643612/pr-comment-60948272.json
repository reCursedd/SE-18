{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60948272", "pull_request_review_id": null, "id": 60948272, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwOTQ4Mjcy", "diff_hunk": "@@ -1757,6 +1757,176 @@ def _DepthToSpaceShape(op):\n       [input_shape[0], height, width, new_depth])]\n \n \n+def one_hot(indices, depth, on_value=None, off_value=None,\n+            axis=None, dtype=None, name=None):\n+  \"\"\"Returns a one-hot tensor.\n+\n+  The locations represented by indices in `indices` take value `on_value`,\n+  while all other locations take value `off_value`. By default, `on_value` is 1,\n+  and `off_value` is 0.\n+\n+  The parameter `dtype` specifies the type of the output tensor. If neither\n+  `on_value` or `off_value` are specified, then they will take on the values of \n+  1 and 0, respectively, with the type of `dtype`. If `on_value`, `off_value`, \n+  and `dtype` are all provided, then `one_hot()` will check to ensure that\n+  `on_value` and `off_value` match the given type. If none of these parameters \n+  are provided, then `on_value` and `off_value` will take on the values 1 and 0,\n+  respectively, with the type `tf.float32`\n+\n+  If the input `indices` is rank `N`, the output will have rank `N+1`. The\n+  new axis is created at dimension `axis` (default: the new axis is appended\n+  at the end).\n+\n+  If `indices` is a scalar the output shape will be a vector of length `depth`\n+\n+  If `indices` is a vector of length `features`, the output shape will be:\n+  ```\n+    features x depth if axis == -1\n+    depth x features if axis == 0\n+  ```\n+\n+  If `indices` is a matrix (batch) with shape `[batch, features]`, the output\n+  shape will be:\n+  ```\n+    batch x features x depth if axis == -1\n+    batch x depth x features if axis == 1\n+    depth x batch x features if axis == 0\n+  ```\n+\n+\n+  Examples\n+  =========\n+\n+  Suppose that\n+\n+  ```\n+    indices = [0, 2, -1, 1]\n+    depth = 3\n+    on_value = 5.0\n+    off_value = 0.0\n+    axis = -1\n+  ```\n+\n+  Then output is `[4 x 3]`:\n+\n+  ```output =\n+    [5.0 0.0 0.0]  // one_hot(0)\n+    [0.0 0.0 5.0]  // one_hot(2)\n+    [0.0 0.0 0.0]  // one_hot(-1)\n+    [0.0 5.0 0.0]  // one_hot(1)\n+  ```\n+\n+  Suppose that\n+\n+  ```\n+    indices = [0, 2, -1, 1]\n+    depth = 3\n+    on_value = 0.0\n+    off_value = 3.0\n+    axis = 0\n+  ```\n+\n+  Then output is `[3 x 4]`:\n+\n+  ```\n+    output =\n+    [0.0 3.0 3.0 3.0]\n+    [3.0 3.0 3.0 0.0]\n+    [3.0 3.0 3.0 3.0]\n+    [3.0 0.0 3.0 3.0]\n+  //  ^                one_hot(0)\n+  //      ^            one_hot(2)\n+  //          ^        one_hot(-1)\n+  //              ^    one_hot(1)\n+  ```\n+\n+  Suppose that\n+\n+  ```\n+    indices = [[0, 2], [1, -1]]\n+    depth = 3\n+    on_value = 1.0\n+    off_value = 0.0\n+    axis = -1\n+  ```\n+\n+  Then output is `[2 x 2 x 3]`:\n+\n+  ```\n+    output =\n+    [\n+      [1.0, 0.0, 0.0]  // one_hot(0)\n+      [0.0, 0.0, 1.0]  // one_hot(2)\n+    ][\n+      [0.0, 1.0, 0.0]  // one_hot(1)\n+      [0.0, 0.0, 0.0]  // one_hot(-1)\n+    ]\n+  ```\n+\n+  Args:\n+    indices: A `Tensor` of indices.\n+    depth: A scalar defining the depth of the one hot dimension.\n+    on_value: A scalar defining the value to fill in output when `indices[j]\n+      = i`. (default: 1)\n+    off_value: A scalar defining the value to fill in output when `indices[j]\n+      != i`. (default: 0)\n+    axis: The axis to fill (default: -1, a new inner-most axis).\n+    dtype: The data type of the output tensor.\n+\n+  Returns:\n+    output: The one-hot tensor.\n+\n+  Raises:\n+    TypeError: If on_value or off_value do not match dtype.\n+    TypeError: If dtype is `tf.string`\n+  \"\"\"\n+  # Check for bad dtype specification\n+  if dtype == dtypes.string:\n+    raise TypeError(\"dtype must be a numeric type\")\n+\n+  with ops.op_scope([indices, depth, on_value, off_value,\n+            axis, dtype], name, \"one_hot\") as name:\n+    on_exists = on_value is not None\n+    off_exists = off_value is not None\n+    dtype_exists = dtype is not None\n+\n+    # If only one of on_value and off_value is provided, and dtype is not given,\n+    # Assign dtype to the type of provided value\n+    if not dtype_exists:\n+      if on_exists and not off_exists:\n+        dtype = ops.convert_to_tensor(on_value).dtype.base_dtype\n+        dtype_exists = True\n+      elif off_exists and not on_exists:\n+        dtype = ops.convert_to_tensor(off_value).dtype.base_dtype\n+        dtype_exists = True\n+\n+    # Create on_value tensor\n+    if on_exists:\n+      on_value = ops.convert_to_tensor(on_value, name=\"on_value\")\n+      if dtype_exists and on_value.dtype.base_dtype != dtype:\n+        raise TypeError(\"The type of on_value must match dtype\")\n+    elif dtype_exists:\n+      on_value = constant(1, dtype, name=\"on_value\")\n+    else:\n+      # Neither on_value nor dtype are provided\n+      on_value = constant(1, dtypes.float32, name=\"on_value\")\n+\n+    # Create off_value tensor \n+    if off_exists:\n+      off_value = ops.convert_to_tensor(off_value, name=\"off_value\")\n+      if dtype_exists and off_value.dtype.base_dtype != dtype:\n+        raise TypeError(\"The type of off_value must match dtype\")\n+    elif dtype_exists:\n+      off_value = constant(0, dtype, name=\"off_value\")\n+    else:\n+      off_value = constant(0, dtypes.float32, name=\"off_value\")\n+    ", "path": "tensorflow/python/ops/array_ops.py", "position": null, "original_position": 167, "commit_id": "19bca790350ac7f0d1b1d29f5d56581b883e8c3a", "original_commit_id": "0c5445c5233b93a71d78ee65c7ad4cac0054917c", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "body": "Here's some simplified logic for all the exists cases, once the defaults are fixed to be their actual values rather than `None`.\n\n```\nif dtype is None:\n  try:\n    dtype = on_value.dtype\n  except AttributeError:\n    try:\n      dtype = off_value.dtype\n    except AttributeError:\n      pass\non_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"on_value\")\noff_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"off_value\")\n```\n", "created_at": "2016-04-25T16:57:31Z", "updated_at": "2016-04-25T21:47:09Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1869#discussion_r60948272", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1869", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60948272"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1869#discussion_r60948272"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1869"}}, "body_html": "<p>Here's some simplified logic for all the exists cases, once the defaults are fixed to be their actual values rather than <code>None</code>.</p>\n<pre><code>if dtype is None:\n  try:\n    dtype = on_value.dtype\n  except AttributeError:\n    try:\n      dtype = off_value.dtype\n    except AttributeError:\n      pass\non_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"on_value\")\noff_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"off_value\")\n</code></pre>", "body_text": "Here's some simplified logic for all the exists cases, once the defaults are fixed to be their actual values rather than None.\nif dtype is None:\n  try:\n    dtype = on_value.dtype\n  except AttributeError:\n    try:\n      dtype = off_value.dtype\n    except AttributeError:\n      pass\non_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"on_value\")\noff_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"off_value\")"}