{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/362788202", "html_url": "https://github.com/tensorflow/tensorflow/issues/16620#issuecomment-362788202", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16620", "id": 362788202, "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjc4ODIwMg==", "user": {"login": "ymcasky", "id": 6229000, "node_id": "MDQ6VXNlcjYyMjkwMDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/6229000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymcasky", "html_url": "https://github.com/ymcasky", "followers_url": "https://api.github.com/users/ymcasky/followers", "following_url": "https://api.github.com/users/ymcasky/following{/other_user}", "gists_url": "https://api.github.com/users/ymcasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymcasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymcasky/subscriptions", "organizations_url": "https://api.github.com/users/ymcasky/orgs", "repos_url": "https://api.github.com/users/ymcasky/repos", "events_url": "https://api.github.com/users/ymcasky/events{/privacy}", "received_events_url": "https://api.github.com/users/ymcasky/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-03T07:54:22Z", "updated_at": "2018-02-03T07:54:22Z", "author_association": "NONE", "body_html": "<p>Thanks for your reply!!<br>\nHere is my code:</p>\n<pre><code>img_size_flat = 28*28\nbatch_size = 64\n\ndef gen(batch_size=32):\n    while True:\n        batch_data, batch_label = mnist_data.train.next_batch(batch_size)\n        yield batch_data, batch_label   \n\n\ninputs = Input(shape=(img_size_flat,))\nx = Dense(128, activation='relu')(inputs)  # fully-connected layer with 128 units and ReLU activation\nx = Dense(128, activation='relu')(x)\npreds = Dense(10, activation='softmax')(x)  # output layer with 10 units and a softmax activation\nmodel = Model(inputs=inputs, outputs=preds)\nmodel.compile(optimizer='rmsprop',\n               loss='categorical_crossentropy',\n               metrics=['accuracy'])\nmodel.fit_generator(gen(batch_size), steps_per_epoch=len(mnist_data.train.labels)//batch_size, epochs=2)\n\n</code></pre>", "body_text": "Thanks for your reply!!\nHere is my code:\nimg_size_flat = 28*28\nbatch_size = 64\n\ndef gen(batch_size=32):\n    while True:\n        batch_data, batch_label = mnist_data.train.next_batch(batch_size)\n        yield batch_data, batch_label   \n\n\ninputs = Input(shape=(img_size_flat,))\nx = Dense(128, activation='relu')(inputs)  # fully-connected layer with 128 units and ReLU activation\nx = Dense(128, activation='relu')(x)\npreds = Dense(10, activation='softmax')(x)  # output layer with 10 units and a softmax activation\nmodel = Model(inputs=inputs, outputs=preds)\nmodel.compile(optimizer='rmsprop',\n               loss='categorical_crossentropy',\n               metrics=['accuracy'])\nmodel.fit_generator(gen(batch_size), steps_per_epoch=len(mnist_data.train.labels)//batch_size, epochs=2)", "body": "Thanks for your reply!!\r\nHere is my code:\r\n\r\n```\r\nimg_size_flat = 28*28\r\nbatch_size = 64\r\n\r\ndef gen(batch_size=32):\r\n    while True:\r\n        batch_data, batch_label = mnist_data.train.next_batch(batch_size)\r\n        yield batch_data, batch_label   \r\n\r\n\r\ninputs = Input(shape=(img_size_flat,))\r\nx = Dense(128, activation='relu')(inputs)  # fully-connected layer with 128 units and ReLU activation\r\nx = Dense(128, activation='relu')(x)\r\npreds = Dense(10, activation='softmax')(x)  # output layer with 10 units and a softmax activation\r\nmodel = Model(inputs=inputs, outputs=preds)\r\nmodel.compile(optimizer='rmsprop',\r\n               loss='categorical_crossentropy',\r\n               metrics=['accuracy'])\r\nmodel.fit_generator(gen(batch_size), steps_per_epoch=len(mnist_data.train.labels)//batch_size, epochs=2)\r\n\r\n```\r\n"}