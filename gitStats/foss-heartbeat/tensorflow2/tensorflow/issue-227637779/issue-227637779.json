{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9811", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9811/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9811/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9811/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9811", "id": 227637779, "node_id": "MDU6SXNzdWUyMjc2Mzc3Nzk=", "number": 9811, "title": "Tensorflow Session Memory Leak", "user": {"login": "ferasOS", "id": 22634359, "node_id": "MDQ6VXNlcjIyNjM0MzU5", "avatar_url": "https://avatars1.githubusercontent.com/u/22634359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ferasOS", "html_url": "https://github.com/ferasOS", "followers_url": "https://api.github.com/users/ferasOS/followers", "following_url": "https://api.github.com/users/ferasOS/following{/other_user}", "gists_url": "https://api.github.com/users/ferasOS/gists{/gist_id}", "starred_url": "https://api.github.com/users/ferasOS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ferasOS/subscriptions", "organizations_url": "https://api.github.com/users/ferasOS/orgs", "repos_url": "https://api.github.com/users/ferasOS/repos", "events_url": "https://api.github.com/users/ferasOS/events{/privacy}", "received_events_url": "https://api.github.com/users/ferasOS/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-10T10:41:03Z", "updated_at": "2017-05-10T14:36:04Z", "closed_at": "2017-05-10T14:36:04Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>**Have I written custom code :                                     YES</li>\n<li>**OS Platform and Distribution :                                   Mac OS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:      From Source</li>\n<li><strong>TensorFlow version (use command below)</strong>:         tensorflow (1.1.0)</li>\n<li><strong>Bazel version (if compiling from source)</strong>:             bazel-0.4.5</li>\n<li><strong>CUDA/cuDNN version</strong>:                                            not used</li>\n<li><strong>GPU model and memory</strong>:                                        not used</li>\n<li><strong>Exact command to reproduce</strong>:                               used in an app</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I am using the tensorlfow C++ API and I have linked the tensor flow framework to perform a prediction using an inference.pb file.</p>\n<p>The inference works but I have a Memory leak which (according to instruments) is linked to the session-&gt;Close().</p>\n<p>My function is:</p>\n<pre><code>- (double) MLPredictionObjC: (float[24]) inputFeatures {\n    double results[]={0.0};\n\n    NSString *path = [[NSBundle mainBundle] pathForResource:@\"inference84\" ofType:@\"pb\"];\n\n    if ([self loadGraphFromPath:path] &amp;&amp; [self createSession]) {\n        double resultsP = [self predictML:inputFeatures];\n        session-&gt;Close();\n        return resultsP;\n    }\n    return *results;\n}\n</code></pre>\n<p>// the other functions associated with loading and creating the session are:</p>\n<pre><code>- (BOOL)loadGraphFromPath:(NSString *)path  \n{\n    ReadBinaryProto(tensorflow::Env::Default(), path.fileSystemRepresentation, &amp;graph);\n    return YES;\n}\n\n- (BOOL)createSession\n{\n        tensorflow::SessionOptions options;\n        tensorflow::NewSession(options, &amp;session);\n        session-&gt;Create(graph);\n        return YES;\n}\n</code></pre>\n<p>I am not sure how to resolve this? should I be using std::unique_ptr session?</p>", "body_text": "System information\n\n**Have I written custom code :                                     YES\n**OS Platform and Distribution :                                   Mac OS\nTensorFlow installed from (source or binary):      From Source\nTensorFlow version (use command below):         tensorflow (1.1.0)\nBazel version (if compiling from source):             bazel-0.4.5\nCUDA/cuDNN version:                                            not used\nGPU model and memory:                                        not used\nExact command to reproduce:                               used in an app\n\nDescribe the problem\nI am using the tensorlfow C++ API and I have linked the tensor flow framework to perform a prediction using an inference.pb file.\nThe inference works but I have a Memory leak which (according to instruments) is linked to the session->Close().\nMy function is:\n- (double) MLPredictionObjC: (float[24]) inputFeatures {\n    double results[]={0.0};\n\n    NSString *path = [[NSBundle mainBundle] pathForResource:@\"inference84\" ofType:@\"pb\"];\n\n    if ([self loadGraphFromPath:path] && [self createSession]) {\n        double resultsP = [self predictML:inputFeatures];\n        session->Close();\n        return resultsP;\n    }\n    return *results;\n}\n\n// the other functions associated with loading and creating the session are:\n- (BOOL)loadGraphFromPath:(NSString *)path  \n{\n    ReadBinaryProto(tensorflow::Env::Default(), path.fileSystemRepresentation, &graph);\n    return YES;\n}\n\n- (BOOL)createSession\n{\n        tensorflow::SessionOptions options;\n        tensorflow::NewSession(options, &session);\n        session->Create(graph);\n        return YES;\n}\n\nI am not sure how to resolve this? should I be using std::unique_ptr session?", "body": "### System information\r\n- **Have I written custom code :                                     YES\r\n- **OS Platform and Distribution :                                   Mac OS\r\n- **TensorFlow installed from (source or binary)**:      From Source\r\n- **TensorFlow version (use command below)**:         tensorflow (1.1.0)\r\n- **Bazel version (if compiling from source)**:             bazel-0.4.5\r\n- **CUDA/cuDNN version**:                                            not used\r\n- **GPU model and memory**:                                        not used\r\n- **Exact command to reproduce**:                               used in an app\r\n\r\n\r\n### Describe the problem\r\n\r\nI am using the tensorlfow C++ API and I have linked the tensor flow framework to perform a prediction using an inference.pb file.\r\n\r\nThe inference works but I have a Memory leak which (according to instruments) is linked to the session->Close().\r\n\r\nMy function is:\r\n\r\n```\r\n- (double) MLPredictionObjC: (float[24]) inputFeatures {\r\n    double results[]={0.0};\r\n\r\n    NSString *path = [[NSBundle mainBundle] pathForResource:@\"inference84\" ofType:@\"pb\"];\r\n\r\n    if ([self loadGraphFromPath:path] && [self createSession]) {\r\n        double resultsP = [self predictML:inputFeatures];\r\n        session->Close();\r\n        return resultsP;\r\n    }\r\n    return *results;\r\n}\r\n```\r\n\r\n// the other functions associated with loading and creating the session are:\r\n\r\n```\r\n- (BOOL)loadGraphFromPath:(NSString *)path  \r\n{\r\n    ReadBinaryProto(tensorflow::Env::Default(), path.fileSystemRepresentation, &graph);\r\n    return YES;\r\n}\r\n\r\n- (BOOL)createSession\r\n{\r\n        tensorflow::SessionOptions options;\r\n        tensorflow::NewSession(options, &session);\r\n        session->Create(graph);\r\n        return YES;\r\n}\r\n```\r\n\r\nI am not sure how to resolve this? should I be using std::unique_ptr session?\r\n\r\n\r\n"}