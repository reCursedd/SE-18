{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9688", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9688/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9688/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9688/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9688", "id": 226614800, "node_id": "MDU6SXNzdWUyMjY2MTQ4MDA=", "number": 9688, "title": "Tensorboard \"Color by\" drop-down not showing up on multi-column .tsv", "user": {"login": "markostam", "id": 14855383, "node_id": "MDQ6VXNlcjE0ODU1Mzgz", "avatar_url": "https://avatars2.githubusercontent.com/u/14855383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markostam", "html_url": "https://github.com/markostam", "followers_url": "https://api.github.com/users/markostam/followers", "following_url": "https://api.github.com/users/markostam/following{/other_user}", "gists_url": "https://api.github.com/users/markostam/gists{/gist_id}", "starred_url": "https://api.github.com/users/markostam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markostam/subscriptions", "organizations_url": "https://api.github.com/users/markostam/orgs", "repos_url": "https://api.github.com/users/markostam/repos", "events_url": "https://api.github.com/users/markostam/events{/privacy}", "received_events_url": "https://api.github.com/users/markostam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "decentralion", "id": 1400023, "node_id": "MDQ6VXNlcjE0MDAwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1400023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentralion", "html_url": "https://github.com/decentralion", "followers_url": "https://api.github.com/users/decentralion/followers", "following_url": "https://api.github.com/users/decentralion/following{/other_user}", "gists_url": "https://api.github.com/users/decentralion/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentralion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentralion/subscriptions", "organizations_url": "https://api.github.com/users/decentralion/orgs", "repos_url": "https://api.github.com/users/decentralion/repos", "events_url": "https://api.github.com/users/decentralion/events{/privacy}", "received_events_url": "https://api.github.com/users/decentralion/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "decentralion", "id": 1400023, "node_id": "MDQ6VXNlcjE0MDAwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1400023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentralion", "html_url": "https://github.com/decentralion", "followers_url": "https://api.github.com/users/decentralion/followers", "following_url": "https://api.github.com/users/decentralion/following{/other_user}", "gists_url": "https://api.github.com/users/decentralion/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentralion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentralion/subscriptions", "organizations_url": "https://api.github.com/users/decentralion/orgs", "repos_url": "https://api.github.com/users/decentralion/repos", "events_url": "https://api.github.com/users/decentralion/events{/privacy}", "received_events_url": "https://api.github.com/users/decentralion/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-05-05T15:49:03Z", "updated_at": "2017-06-16T19:33:44Z", "closed_at": "2017-06-16T19:33:44Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>using tensorboard to visualize some embeddings</strong>:</li>\n<li><strong>OSX 10.12.4</strong>:</li>\n<li><strong>installed from binary via pip</strong>:</li>\n<li><strong>1.1.0</strong>:</li>\n<li><strong>not using bazel for this install</strong>:</li>\n<li><strong>no CUDA</strong>:</li>\n<li><strong>no GPU</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Tensorboard does not display the <code>Color By</code> dropdown menu on multi-columnar data. <code>Label by</code> and <code>search by</code> displaying columns normally.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/markostam/sandbox/blob/master/photos/Screenshot%202017-05-05%2011.39.26.png?raw=true\"><img src=\"https://github.com/markostam/sandbox/blob/master/photos/Screenshot%202017-05-05%2011.39.26.png?raw=true\" alt=\"tensorboard dropdown issue\" style=\"max-width:100%;\"></a></p>\n<h3>Source code / logs</h3>\n<p>Sample of <code>metadata.tsv</code> file:</p>\n<pre><code>Name\tGenre\n(Sandy) Alex G\tAlternative/Indie Rock\t\n*NSYNC\tPop/Rock\t\nAcollective\tPop/Rock\t\nAhmet \u00d6zhan\tInternational\t\nAhu\tClub/Dance\t\nAlex Ferreira\tPop/Rock\t\nAlex Winston\tPop/Rock\t\nAli Azimi\tPop/Rock\t\nAlphamama\tPop/Rock\t\nAmaryllis\tInternational\t\n...\nYomo Toro\tLatin\nYoussou N'Dour\tInternational\nZafra Negra\tLatin\nZany\tElectronic\t\nZeki M\u00fcren\tInternational\niSHi\tElectronic\t\n</code></pre>\n<p>Code to generate embeddings and metadata:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">list_to_tsv</span>(<span class=\"pl-smi\">filenames</span>, <span class=\"pl-smi\">metadata_dir</span>):\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(os.path.join(metadata_dir,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>metadata.tsv<span class=\"pl-pds\">'</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>w<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> tsvfile:\n        writer <span class=\"pl-k\">=</span> csv.writer(tsvfile, <span class=\"pl-v\">delimiter</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\t</span><span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-k\">for</span> record <span class=\"pl-k\">in</span> filenames:\n            writer.writerow(record)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">save_down_tensors</span>(<span class=\"pl-smi\">tensor_dir</span>, <span class=\"pl-smi\">name_and_embedding</span>):\n    embeddings <span class=\"pl-k\">=</span> [i[<span class=\"pl-c1\">2</span>] <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> name_and_embedding] \n    names <span class=\"pl-k\">=</span> [[i[<span class=\"pl-c1\">0</span>],i[<span class=\"pl-c1\">1</span>]] <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> name_and_embedding]\n    names.insert(<span class=\"pl-c1\">0</span>,[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Name<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Genre<span class=\"pl-pds\">'</span></span>])\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n        embeddings_tf <span class=\"pl-k\">=</span> tf.Variable(np.array(embeddings), <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>embeddings<span class=\"pl-pds\">\"</span></span>)\n        tf.global_variables_initializer().run()\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> save the tensor down</span>\n        saver <span class=\"pl-k\">=</span> tf.train.Saver(tf.global_variables())\n        saver.save(sess, tensor_dir, <span class=\"pl-c1\">0</span>)\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> associate metadata with the embedding</span>\n        summary_writer <span class=\"pl-k\">=</span> tf.summary.FileWriter(tensor_dir)\n        config <span class=\"pl-k\">=</span> projector.ProjectorConfig()\n        embedding <span class=\"pl-k\">=</span> config.embeddings.add()\n        embedding.tensor_name <span class=\"pl-k\">=</span> embeddings_tf.name\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>save filenames to tsv</span>\n        list_to_tsv(names, metadata_dir)\n        embedding.metadata_path <span class=\"pl-k\">=</span> os.path.join(metadata_dir, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>metadata.tsv<span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> save a configuration file that TensorBoard will read during startup.</span>\n        projector.visualize_embeddings(summary_writer, config)</pre></div>", "body_text": "System information\n\nusing tensorboard to visualize some embeddings:\nOSX 10.12.4:\ninstalled from binary via pip:\n1.1.0:\nnot using bazel for this install:\nno CUDA:\nno GPU:\n\nDescribe the problem\nTensorboard does not display the Color By dropdown menu on multi-columnar data. Label by and search by displaying columns normally.\n\nSource code / logs\nSample of metadata.tsv file:\nName\tGenre\n(Sandy) Alex G\tAlternative/Indie Rock\t\n*NSYNC\tPop/Rock\t\nAcollective\tPop/Rock\t\nAhmet \u00d6zhan\tInternational\t\nAhu\tClub/Dance\t\nAlex Ferreira\tPop/Rock\t\nAlex Winston\tPop/Rock\t\nAli Azimi\tPop/Rock\t\nAlphamama\tPop/Rock\t\nAmaryllis\tInternational\t\n...\nYomo Toro\tLatin\nYoussou N'Dour\tInternational\nZafra Negra\tLatin\nZany\tElectronic\t\nZeki M\u00fcren\tInternational\niSHi\tElectronic\t\n\nCode to generate embeddings and metadata:\ndef list_to_tsv(filenames, metadata_dir):\n    with open(os.path.join(metadata_dir,'metadata.tsv'), 'w') as tsvfile:\n        writer = csv.writer(tsvfile, delimiter = \"\\t\")\n        for record in filenames:\n            writer.writerow(record)\n\ndef save_down_tensors(tensor_dir, name_and_embedding):\n    embeddings = [i[2] for i in name_and_embedding] \n    names = [[i[0],i[1]] for i in name_and_embedding]\n    names.insert(0,['Name','Genre'])\n    with tf.Session() as sess:\n        embeddings_tf = tf.Variable(np.array(embeddings), name = \"embeddings\")\n        tf.global_variables_initializer().run()\n        # save the tensor down\n        saver = tf.train.Saver(tf.global_variables())\n        saver.save(sess, tensor_dir, 0)\n        # associate metadata with the embedding\n        summary_writer = tf.summary.FileWriter(tensor_dir)\n        config = projector.ProjectorConfig()\n        embedding = config.embeddings.add()\n        embedding.tensor_name = embeddings_tf.name\n        #save filenames to tsv\n        list_to_tsv(names, metadata_dir)\n        embedding.metadata_path = os.path.join(metadata_dir, \"metadata.tsv\")\n        # save a configuration file that TensorBoard will read during startup.\n        projector.visualize_embeddings(summary_writer, config)", "body": "------------------------\r\n\r\n### System information\r\n- **using tensorboard to visualize some embeddings**:\r\n- **OSX 10.12.4**:\r\n- **installed from binary via pip**:\r\n- **1.1.0**:\r\n- **not using bazel for this install**:\r\n- **no CUDA**:\r\n- **no GPU**:\r\n\r\n### Describe the problem\r\nTensorboard does not display the ```Color By``` dropdown menu on multi-columnar data. ```Label by``` and ```search by``` displaying columns normally.\r\n\r\n![tensorboard dropdown issue](https://github.com/markostam/sandbox/blob/master/photos/Screenshot%202017-05-05%2011.39.26.png?raw=true)\r\n\r\n### Source code / logs\r\nSample of ```metadata.tsv``` file:\r\n```\r\nName\tGenre\r\n(Sandy) Alex G\tAlternative/Indie Rock\t\r\n*NSYNC\tPop/Rock\t\r\nAcollective\tPop/Rock\t\r\nAhmet \u00d6zhan\tInternational\t\r\nAhu\tClub/Dance\t\r\nAlex Ferreira\tPop/Rock\t\r\nAlex Winston\tPop/Rock\t\r\nAli Azimi\tPop/Rock\t\r\nAlphamama\tPop/Rock\t\r\nAmaryllis\tInternational\t\r\n...\r\nYomo Toro\tLatin\r\nYoussou N'Dour\tInternational\r\nZafra Negra\tLatin\r\nZany\tElectronic\t\r\nZeki M\u00fcren\tInternational\r\niSHi\tElectronic\t\r\n```\r\nCode to generate embeddings and metadata:\r\n```python\r\ndef list_to_tsv(filenames, metadata_dir):\r\n    with open(os.path.join(metadata_dir,'metadata.tsv'), 'w') as tsvfile:\r\n        writer = csv.writer(tsvfile, delimiter = \"\\t\")\r\n        for record in filenames:\r\n            writer.writerow(record)\r\n\r\ndef save_down_tensors(tensor_dir, name_and_embedding):\r\n    embeddings = [i[2] for i in name_and_embedding] \r\n    names = [[i[0],i[1]] for i in name_and_embedding]\r\n    names.insert(0,['Name','Genre'])\r\n    with tf.Session() as sess:\r\n        embeddings_tf = tf.Variable(np.array(embeddings), name = \"embeddings\")\r\n        tf.global_variables_initializer().run()\r\n        # save the tensor down\r\n        saver = tf.train.Saver(tf.global_variables())\r\n        saver.save(sess, tensor_dir, 0)\r\n        # associate metadata with the embedding\r\n        summary_writer = tf.summary.FileWriter(tensor_dir)\r\n        config = projector.ProjectorConfig()\r\n        embedding = config.embeddings.add()\r\n        embedding.tensor_name = embeddings_tf.name\r\n        #save filenames to tsv\r\n        list_to_tsv(names, metadata_dir)\r\n        embedding.metadata_path = os.path.join(metadata_dir, \"metadata.tsv\")\r\n        # save a configuration file that TensorBoard will read during startup.\r\n        projector.visualize_embeddings(summary_writer, config)\r\n```"}