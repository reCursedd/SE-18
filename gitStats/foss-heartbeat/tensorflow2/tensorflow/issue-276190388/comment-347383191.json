{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/347383191", "html_url": "https://github.com/tensorflow/tensorflow/issues/14807#issuecomment-347383191", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14807", "id": 347383191, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzM4MzE5MQ==", "user": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-28T01:24:57Z", "updated_at": "2017-11-28T01:24:57Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1790559\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/djbard\">@djbard</a> Thanks for filing the issue!  As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a> mentioned, a minimum repro would be appreciated.  But I agree that this looks like a cycle in Eigen that ends up exhausting the stack.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6969686\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/benoitsteiner\">@benoitsteiner</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16907534\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rmlarsen\">@rmlarsen</a> Can you take a look, or suggest someone who can?</p>\n<p>Here's a simplified form of the bottom of the stack trace from the <code>gdbTrace.log</code> link above.  I dunno if this is simply a bug that causes an infinite loop, or if there's some static unrolling that's managing to blow our stack, but having the same repeated pattern of calls for &gt;7000 frames definitely looks suspicious:</p>\n<pre><code>... pattern repeats until frame #0 which segfaults ...\n#7671 Eigen::TensorEvaluator::Context::kernel(long, long, long) ()\n  \n#7672 Eigen::TensorEvaluator::Context::signal_kernel(long, long, long, bool) ()\n#7673 Eigen::TensorEvaluator::Context::pack_rhs(long, long) ()\n#7674 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\n#7675 Eigen::TensorEvaluator::Context::pack_lhs(long, long) ()\n#7676 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\n#7677 Eigen::TensorEvaluator::Context::kernel(long, long, long) ()\n  \n#7678 Eigen::TensorEvaluator::Context::signal_kernel(long, long, long, bool) ()\n#7679 Eigen::TensorEvaluator::Context::pack_rhs(long, long) ()\n#7680 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\n#7681 Eigen::TensorEvaluator::Context::pack_lhs(long, long) ()\n#7682 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\n#7683 Eigen::TensorEvaluator::Context::kernel(long, long, long) ()\n</code></pre>\n<p>For readability, I simplified <code>Eigen::TensorEvaluator::Context</code> above from the full form, in all its templatized glory:</p>\n<pre><code>Eigen::TensorEvaluator&lt;Eigen::TensorContractionOp&lt;Eigen::array&lt;Eigen::IndexPair&lt;long&gt;, 1ul&gt; const, Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long, 2&gt; const, Eigen::TensorVolumePatchOp&lt;-1l, -1l, -1l, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 5, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const, Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long, 2&gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 5, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const, Eigen::ThreadPoolDevice&gt;::Context&lt;Eigen::internal::gemm_pack_lhs&lt;float, long, Eigen::internal::TensorContractionSubMapper&lt;float, long, 1, Eigen::TensorEvaluator&lt;Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long, 2&gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 5, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 4, true, false, 0, Eigen::MakePointer&gt;, 8, 4, 0, false, false&gt;, Eigen::internal::gemm_pack_rhs&lt;float, long, Eigen::internal::TensorContractionSubMapper&lt;float, long, 0, Eigen::TensorEvaluator&lt;Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long, 2&gt; const, Eigen::TensorVolumePatchOp&lt;-1l, -1l, -1l, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 5, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 4, true, false, 0, Eigen::MakePointer&gt;, 4, 0, false, false&gt;, Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0&gt;, 8, 4, false, false&gt;, Eigen::internal::TensorContractionInputMapper&lt;float, long, 1, Eigen::TensorEvaluator&lt;Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long, 2&gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 5, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 4, true, false, 0, Eigen::MakePointer&gt;, Eigen::internal::TensorContractionInputMapper&lt;float, long, 0, Eigen::TensorEvaluator&lt;Eigen::TensorReshapingOp&lt;Eigen::DSizes&lt;long, 2&gt; const, Eigen::TensorVolumePatchOp&lt;-1l, -1l, -1l, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 5, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const, Eigen::ThreadPoolDevice&gt;, Eigen::array&lt;long, 1ul&gt;, Eigen::array&lt;long, 1ul&gt;, 4, true, false, 0, Eigen::MakePointer&gt;, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0&gt; &gt;\n</code></pre>", "body_text": "@djbard Thanks for filing the issue!  As @facaiy mentioned, a minimum repro would be appreciated.  But I agree that this looks like a cycle in Eigen that ends up exhausting the stack.\n@benoitsteiner @rmlarsen Can you take a look, or suggest someone who can?\nHere's a simplified form of the bottom of the stack trace from the gdbTrace.log link above.  I dunno if this is simply a bug that causes an infinite loop, or if there's some static unrolling that's managing to blow our stack, but having the same repeated pattern of calls for >7000 frames definitely looks suspicious:\n... pattern repeats until frame #0 which segfaults ...\n#7671 Eigen::TensorEvaluator::Context::kernel(long, long, long) ()\n  \n#7672 Eigen::TensorEvaluator::Context::signal_kernel(long, long, long, bool) ()\n#7673 Eigen::TensorEvaluator::Context::pack_rhs(long, long) ()\n#7674 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\n#7675 Eigen::TensorEvaluator::Context::pack_lhs(long, long) ()\n#7676 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\n#7677 Eigen::TensorEvaluator::Context::kernel(long, long, long) ()\n  \n#7678 Eigen::TensorEvaluator::Context::signal_kernel(long, long, long, bool) ()\n#7679 Eigen::TensorEvaluator::Context::pack_rhs(long, long) ()\n#7680 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\n#7681 Eigen::TensorEvaluator::Context::pack_lhs(long, long) ()\n#7682 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\n#7683 Eigen::TensorEvaluator::Context::kernel(long, long, long) ()\n\nFor readability, I simplified Eigen::TensorEvaluator::Context above from the full form, in all its templatized glory:\nEigen::TensorEvaluator<Eigen::TensorContractionOp<Eigen::array<Eigen::IndexPair<long>, 1ul> const, Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorVolumePatchOp<-1l, -1l, -1l, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::ThreadPoolDevice>::Context<Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::TensorContractionSubMapper<float, long, 1, Eigen::TensorEvaluator<Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const, Eigen::ThreadPoolDevice>, Eigen::array<long, 1ul>, Eigen::array<long, 1ul>, 4, true, false, 0, Eigen::MakePointer>, 8, 4, 0, false, false>, Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::TensorContractionSubMapper<float, long, 0, Eigen::TensorEvaluator<Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorVolumePatchOp<-1l, -1l, -1l, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::ThreadPoolDevice>, Eigen::array<long, 1ul>, Eigen::array<long, 1ul>, 4, true, false, 0, Eigen::MakePointer>, 4, 0, false, false>, Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0>, 8, 4, false, false>, Eigen::internal::TensorContractionInputMapper<float, long, 1, Eigen::TensorEvaluator<Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const, Eigen::ThreadPoolDevice>, Eigen::array<long, 1ul>, Eigen::array<long, 1ul>, 4, true, false, 0, Eigen::MakePointer>, Eigen::internal::TensorContractionInputMapper<float, long, 0, Eigen::TensorEvaluator<Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorVolumePatchOp<-1l, -1l, -1l, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::ThreadPoolDevice>, Eigen::array<long, 1ul>, Eigen::array<long, 1ul>, 4, true, false, 0, Eigen::MakePointer>, Eigen::internal::blas_data_mapper<float, long, 0, 0> >", "body": "@djbard Thanks for filing the issue!  As @facaiy mentioned, a minimum repro would be appreciated.  But I agree that this looks like a cycle in Eigen that ends up exhausting the stack.\r\n\r\n@benoitsteiner @rmlarsen Can you take a look, or suggest someone who can?\r\n\r\nHere's a simplified form of the bottom of the stack trace from the `gdbTrace.log` link above.  I dunno if this is simply a bug that causes an infinite loop, or if there's some static unrolling that's managing to blow our stack, but having the same repeated pattern of calls for >7000 frames definitely looks suspicious:\r\n```\r\n... pattern repeats until frame #0 which segfaults ...\r\n#7671 Eigen::TensorEvaluator::Context::kernel(long, long, long) ()\r\n  \r\n#7672 Eigen::TensorEvaluator::Context::signal_kernel(long, long, long, bool) ()\r\n#7673 Eigen::TensorEvaluator::Context::pack_rhs(long, long) ()\r\n#7674 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\r\n#7675 Eigen::TensorEvaluator::Context::pack_lhs(long, long) ()\r\n#7676 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\r\n#7677 Eigen::TensorEvaluator::Context::kernel(long, long, long) ()\r\n  \r\n#7678 Eigen::TensorEvaluator::Context::signal_kernel(long, long, long, bool) ()\r\n#7679 Eigen::TensorEvaluator::Context::pack_rhs(long, long) ()\r\n#7680 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\r\n#7681 Eigen::TensorEvaluator::Context::pack_lhs(long, long) ()\r\n#7682 Eigen::TensorEvaluator::Context::enqueue_packing_helper(long, long, long, bool) ()\r\n#7683 Eigen::TensorEvaluator::Context::kernel(long, long, long) ()\r\n```\r\nFor readability, I simplified `Eigen::TensorEvaluator::Context` above from the full form, in all its templatized glory:\r\n```\r\nEigen::TensorEvaluator<Eigen::TensorContractionOp<Eigen::array<Eigen::IndexPair<long>, 1ul> const, Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorVolumePatchOp<-1l, -1l, -1l, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::ThreadPoolDevice>::Context<Eigen::internal::gemm_pack_lhs<float, long, Eigen::internal::TensorContractionSubMapper<float, long, 1, Eigen::TensorEvaluator<Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const, Eigen::ThreadPoolDevice>, Eigen::array<long, 1ul>, Eigen::array<long, 1ul>, 4, true, false, 0, Eigen::MakePointer>, 8, 4, 0, false, false>, Eigen::internal::gemm_pack_rhs<float, long, Eigen::internal::TensorContractionSubMapper<float, long, 0, Eigen::TensorEvaluator<Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorVolumePatchOp<-1l, -1l, -1l, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::ThreadPoolDevice>, Eigen::array<long, 1ul>, Eigen::array<long, 1ul>, 4, true, false, 0, Eigen::MakePointer>, 4, 0, false, false>, Eigen::internal::gebp_kernel<float, float, long, Eigen::internal::blas_data_mapper<float, long, 0, 0>, 8, 4, false, false>, Eigen::internal::TensorContractionInputMapper<float, long, 1, Eigen::TensorEvaluator<Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const, Eigen::ThreadPoolDevice>, Eigen::array<long, 1ul>, Eigen::array<long, 1ul>, 4, true, false, 0, Eigen::MakePointer>, Eigen::internal::TensorContractionInputMapper<float, long, 0, Eigen::TensorEvaluator<Eigen::TensorReshapingOp<Eigen::DSizes<long, 2> const, Eigen::TensorVolumePatchOp<-1l, -1l, -1l, Eigen::TensorMap<Eigen::Tensor<float const, 5, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::ThreadPoolDevice>, Eigen::array<long, 1ul>, Eigen::array<long, 1ul>, 4, true, false, 0, Eigen::MakePointer>, Eigen::internal::blas_data_mapper<float, long, 0, 0> >\r\n```"}