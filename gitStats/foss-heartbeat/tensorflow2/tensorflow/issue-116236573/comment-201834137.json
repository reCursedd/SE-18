{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/201834137", "html_url": "https://github.com/tensorflow/tensorflow/issues/110#issuecomment-201834137", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/110", "id": 201834137, "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTgzNDEzNw==", "user": {"login": "rdipietro", "id": 5150559, "node_id": "MDQ6VXNlcjUxNTA1NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5150559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdipietro", "html_url": "https://github.com/rdipietro", "followers_url": "https://api.github.com/users/rdipietro/followers", "following_url": "https://api.github.com/users/rdipietro/following{/other_user}", "gists_url": "https://api.github.com/users/rdipietro/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdipietro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdipietro/subscriptions", "organizations_url": "https://api.github.com/users/rdipietro/orgs", "repos_url": "https://api.github.com/users/rdipietro/repos", "events_url": "https://api.github.com/users/rdipietro/events{/privacy}", "received_events_url": "https://api.github.com/users/rdipietro/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-26T14:32:07Z", "updated_at": "2016-03-26T14:32:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Compiling on CentOS still isn't all that straightforward, but I figured I'd give an overview here for now. This works for me with <code>CentOS 6.7</code> and <code>gcc 4.8.2</code>, with GPU support (Cuda 7.0, cuDNN 4.0.7). A <code>bazel</code> modification for building with a custom <code>gcc</code> is in the works (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"125622945\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/bazelbuild/bazel/issues/760\" data-hovercard-type=\"issue\" data-hovercard-url=\"/bazelbuild/bazel/issues/760/hovercard\" href=\"https://github.com/bazelbuild/bazel/issues/760\">bazelbuild/bazel#760</a>) and should help streamline this later on.</p>\n<p>The instructions here are specific to my base <code>gcc</code> path of <code>/cm/shared/apps/gcc/4.8.2</code>, but it should work for other configurations just by modifying the base path.</p>\n<p>Paths for reference:<br>\n<code>gcc path</code>: <code>/cm/shared/apps/gcc/4.8.2/bin/gcc</code><br>\n<code>cpp path</code>: <code>/cm/shared/apps/gcc/4.8.2/bin/cpp</code><br>\n<code>lib64 path</code>: <code>/cm/shared/apps/gcc/4.8.2/lib64</code><br>\n<code>include1 dir</code>: <code>/cm/shared/apps/gcc/4.8.2/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include</code><br>\n<code>include2 dir</code>: <code>/cm/shared/apps/gcc/4.8.2/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include-fixed</code><br>\n<code>include3 dir</code>: <code>/cm/shared/apps/gcc/4.8.2/include/c++/4.8.2</code></p>\n<h2>Bazel</h2>\n<ol>\n<li><code>git clone https://github.com/bazelbuild/bazel.git &amp;&amp; cd bazel</code></li>\n<li>Edit <code>tools/cpp/CROSSTOOL</code>\n<ul>\n<li>Replace all occurrences of <code>/usr/bin/gcc</code> with <code>gcc path</code></li>\n<li>Replace all occurrences of <code>/usr/bin/cpp</code> with <code>cpp path</code></li>\n<li>After the toolpath containing <code>gcc path</code>, add the lines\n<ul>\n<li>linker_flag: \"-Wl,-R<code>lib64 path</code>\"</li>\n<li>cxx_builtin_include_directory: \"<code>include1 dir</code>\"</li>\n<li>cxx_builtin_include_directory: \"<code>include2 dir</code>\"</li>\n<li>cxx_builtin_include_directory: \"<code>include3 dir</code>\"</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Edit <code>scripts/bootstrap/buildenv.sh</code>\n<ul>\n<li>Comment out <code>atexit \"rm -fr ${DIR}\"</code></li>\n</ul>\n</li>\n<li><code>export EXTRA_BAZEL_ARGS='-s --verbose_failures --ignore_unsupported_sandboxing --genrule_strategy=standalone --spawn_strategy=standalone --jobs 8'</code></li>\n<li><code>./compile.sh</code></li>\n</ol>\n<h2>TensorFlow</h2>\n<ol>\n<li><code>git clone --recurse-submodules https://github.com/tensorflow/tensorflow &amp;&amp; cd tensorflow</code></li>\n<li>Edit <code>third_party/gpus/crosstool/CROSSTOOL</code>, making the same changes we made for Bazel. (<code>/usr/bin/gcc</code> etc. likely won't need to be replaced, though.)</li>\n<li>Edit <code>third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc</code>\n<ul>\n<li>Replace all <code>/usr/bin/gcc</code> with <code>gcc path</code>.</li>\n<li>Undo the temporary \"fix\" to find <code>as</code> by commenting out the line <code>cmd = 'PATH=' + PREFIX_DIR + ' ' + cmd</code>. (For me, this is necessary to find <code>as</code>.)</li>\n</ul>\n</li>\n<li><code>./configure</code></li>\n<li><code>export EXTRA_BAZEL_ARGS='-s --verbose_failures --ignore_unsupported_sandboxing --genrule_strategy=standalone --spawn_strategy=standalone --jobs 8'</code></li>\n<li><code>bazel build -c opt --config=cuda --linkopt '-lrt' --copt=\"-DGPR_BACKWARDS_COMPATIBILITY_MODE\" --conlyopt=\"-std=c99\" //tensorflow/tools/pip_package:build_pip_package</code>\n<ul>\n<li>Why the strange flags? Because otherwise, after building with the older <code>libc</code>, we'll get an error about <code>secure_getenv</code>.</li>\n</ul>\n</li>\n<li><code>bazel-bin/tensorflow/tools/pip_package/build_pip_package ~/tensorflow_pkg</code></li>\n<li><code>pip install ~/tensorflow_pkg/*</code></li>\n</ol>", "body_text": "Compiling on CentOS still isn't all that straightforward, but I figured I'd give an overview here for now. This works for me with CentOS 6.7 and gcc 4.8.2, with GPU support (Cuda 7.0, cuDNN 4.0.7). A bazel modification for building with a custom gcc is in the works (bazelbuild/bazel#760) and should help streamline this later on.\nThe instructions here are specific to my base gcc path of /cm/shared/apps/gcc/4.8.2, but it should work for other configurations just by modifying the base path.\nPaths for reference:\ngcc path: /cm/shared/apps/gcc/4.8.2/bin/gcc\ncpp path: /cm/shared/apps/gcc/4.8.2/bin/cpp\nlib64 path: /cm/shared/apps/gcc/4.8.2/lib64\ninclude1 dir: /cm/shared/apps/gcc/4.8.2/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include\ninclude2 dir: /cm/shared/apps/gcc/4.8.2/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include-fixed\ninclude3 dir: /cm/shared/apps/gcc/4.8.2/include/c++/4.8.2\nBazel\n\ngit clone https://github.com/bazelbuild/bazel.git && cd bazel\nEdit tools/cpp/CROSSTOOL\n\nReplace all occurrences of /usr/bin/gcc with gcc path\nReplace all occurrences of /usr/bin/cpp with cpp path\nAfter the toolpath containing gcc path, add the lines\n\nlinker_flag: \"-Wl,-Rlib64 path\"\ncxx_builtin_include_directory: \"include1 dir\"\ncxx_builtin_include_directory: \"include2 dir\"\ncxx_builtin_include_directory: \"include3 dir\"\n\n\n\n\nEdit scripts/bootstrap/buildenv.sh\n\nComment out atexit \"rm -fr ${DIR}\"\n\n\nexport EXTRA_BAZEL_ARGS='-s --verbose_failures --ignore_unsupported_sandboxing --genrule_strategy=standalone --spawn_strategy=standalone --jobs 8'\n./compile.sh\n\nTensorFlow\n\ngit clone --recurse-submodules https://github.com/tensorflow/tensorflow && cd tensorflow\nEdit third_party/gpus/crosstool/CROSSTOOL, making the same changes we made for Bazel. (/usr/bin/gcc etc. likely won't need to be replaced, though.)\nEdit third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc\n\nReplace all /usr/bin/gcc with gcc path.\nUndo the temporary \"fix\" to find as by commenting out the line cmd = 'PATH=' + PREFIX_DIR + ' ' + cmd. (For me, this is necessary to find as.)\n\n\n./configure\nexport EXTRA_BAZEL_ARGS='-s --verbose_failures --ignore_unsupported_sandboxing --genrule_strategy=standalone --spawn_strategy=standalone --jobs 8'\nbazel build -c opt --config=cuda --linkopt '-lrt' --copt=\"-DGPR_BACKWARDS_COMPATIBILITY_MODE\" --conlyopt=\"-std=c99\" //tensorflow/tools/pip_package:build_pip_package\n\nWhy the strange flags? Because otherwise, after building with the older libc, we'll get an error about secure_getenv.\n\n\nbazel-bin/tensorflow/tools/pip_package/build_pip_package ~/tensorflow_pkg\npip install ~/tensorflow_pkg/*", "body": "Compiling on CentOS still isn't all that straightforward, but I figured I'd give an overview here for now. This works for me with `CentOS 6.7` and `gcc 4.8.2`, with GPU support (Cuda 7.0, cuDNN 4.0.7). A `bazel` modification for building with a custom `gcc` is in the works (https://github.com/bazelbuild/bazel/issues/760) and should help streamline this later on.\n\nThe instructions here are specific to my base `gcc` path of `/cm/shared/apps/gcc/4.8.2`, but it should work for other configurations just by modifying the base path.\n\nPaths for reference:\n`gcc path`: `/cm/shared/apps/gcc/4.8.2/bin/gcc`\n`cpp path`: `/cm/shared/apps/gcc/4.8.2/bin/cpp`\n`lib64 path`: `/cm/shared/apps/gcc/4.8.2/lib64`\n`include1 dir`: `/cm/shared/apps/gcc/4.8.2/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include`\n`include2 dir`: `/cm/shared/apps/gcc/4.8.2/lib/gcc/x86_64-unknown-linux-gnu/4.8.2/include-fixed`\n`include3 dir`: `/cm/shared/apps/gcc/4.8.2/include/c++/4.8.2`\n\n## Bazel\n1. `git clone https://github.com/bazelbuild/bazel.git && cd bazel`\n2. Edit `tools/cpp/CROSSTOOL`\n   - Replace all occurrences of `/usr/bin/gcc` with `gcc path`\n   - Replace all occurrences of `/usr/bin/cpp` with `cpp path`\n   - After the toolpath containing `gcc path`, add the lines\n     - linker_flag: \"-Wl,-R`lib64 path`\"\n     - cxx_builtin_include_directory: \"`include1 dir`\"\n     - cxx_builtin_include_directory: \"`include2 dir`\"\n     - cxx_builtin_include_directory: \"`include3 dir`\"\n3. Edit `scripts/bootstrap/buildenv.sh`\n   - Comment out `atexit \"rm -fr ${DIR}\"`\n4. `export EXTRA_BAZEL_ARGS='-s --verbose_failures --ignore_unsupported_sandboxing --genrule_strategy=standalone --spawn_strategy=standalone --jobs 8'`\n5. `./compile.sh`\n\n## TensorFlow\n1. `git clone --recurse-submodules https://github.com/tensorflow/tensorflow && cd tensorflow`\n2. Edit `third_party/gpus/crosstool/CROSSTOOL`, making the same changes we made for Bazel. (`/usr/bin/gcc` etc. likely won't need to be replaced, though.)\n3. Edit `third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc`\n   - Replace all `/usr/bin/gcc` with `gcc path`.\n   - Undo the temporary \"fix\" to find `as` by commenting out the line `cmd = 'PATH=' + PREFIX_DIR + ' ' + cmd`. (For me, this is necessary to find `as`.)\n4. `./configure`\n5. `export EXTRA_BAZEL_ARGS='-s --verbose_failures --ignore_unsupported_sandboxing --genrule_strategy=standalone --spawn_strategy=standalone --jobs 8'`\n6. `bazel build -c opt --config=cuda --linkopt '-lrt' --copt=\"-DGPR_BACKWARDS_COMPATIBILITY_MODE\" --conlyopt=\"-std=c99\" //tensorflow/tools/pip_package:build_pip_package`\n   - Why the strange flags? Because otherwise, after building with the older `libc`, we'll get an error about `secure_getenv`.\n7. `bazel-bin/tensorflow/tools/pip_package/build_pip_package ~/tensorflow_pkg`\n8. `pip install ~/tensorflow_pkg/*`\n"}