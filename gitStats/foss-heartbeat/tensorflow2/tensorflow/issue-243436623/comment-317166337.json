{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/317166337", "html_url": "https://github.com/tensorflow/tensorflow/issues/11554#issuecomment-317166337", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11554", "id": 317166337, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzE2NjMzNw==", "user": {"login": "iurilarosa", "id": 16984873, "node_id": "MDQ6VXNlcjE2OTg0ODcz", "avatar_url": "https://avatars3.githubusercontent.com/u/16984873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iurilarosa", "html_url": "https://github.com/iurilarosa", "followers_url": "https://api.github.com/users/iurilarosa/followers", "following_url": "https://api.github.com/users/iurilarosa/following{/other_user}", "gists_url": "https://api.github.com/users/iurilarosa/gists{/gist_id}", "starred_url": "https://api.github.com/users/iurilarosa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iurilarosa/subscriptions", "organizations_url": "https://api.github.com/users/iurilarosa/orgs", "repos_url": "https://api.github.com/users/iurilarosa/repos", "events_url": "https://api.github.com/users/iurilarosa/events{/privacy}", "received_events_url": "https://api.github.com/users/iurilarosa/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-22T08:21:14Z", "updated_at": "2017-07-22T08:21:14Z", "author_association": "NONE", "body_html": "<p>Around 10^4 bins for arrays around 2.5 x 10^6 elements. Here is a simplified example of my program.</p>\n<pre><code>import numpy\nimport tensorflow as tf\n\n#first i build a matrix of some x positions vs time datas in a sparse format\nmatrix = numpy.random.randint(2, size = 100).astype(float).reshape(10,10)\n\nx = numpy.nonzero(matrix)[0]\ntimes = numpy.nonzero(matrix)[1]\nweights = numpy.random.rand(x.size)\n\n#then i define an array of y positions\nnStepsY = 5\ny = numpy.arange(1,nStepsY+1)\n\n#this is only an example, in my work these arrays are the input\n#from a file or a preceding function\n\nnRows = nStepsY\nnColumns = 80\n\nx = tf.constant(x, dtype = tf.float32)\ntimes = tf.constant(times, dtype = tf.float32)\nweights = tf.constant(weights, dtype = tf.float32)\ny = tf.constant(y, dtype = tf.float32)\n\n\ndef itermatrix(ithStep):\n    yTimed = tf.multiply(y[ithStep],times)\n\n    positions = tf.round((x-yTimed)+50)\n    positions = tf.cast(positions, dtype=tf.int32)\n\n    values = tf.unsorted_segment_sum(weights, positions, nColumns)\n\n    return values\n\nimageMapped = tf.map_fn(itermatrix, tf.range(0,nRows), dtype=tf.float32)\n\nsess = tf.Session()\n\nimage = sess.run(imageMapped)\n</code></pre>\n<p>The problem is that i have to do these histograms for around 100 y steps, building and storing <code>image</code> for thousands of input matrices. The <code>position</code> transformation could be vectorized, but the binning part of each row is independent so i used <code>tf.map_fn</code> to manage the single input matrix. Now that thanks to you the histogram problem is solved, I'm working on the big data problem.</p>", "body_text": "Around 10^4 bins for arrays around 2.5 x 10^6 elements. Here is a simplified example of my program.\nimport numpy\nimport tensorflow as tf\n\n#first i build a matrix of some x positions vs time datas in a sparse format\nmatrix = numpy.random.randint(2, size = 100).astype(float).reshape(10,10)\n\nx = numpy.nonzero(matrix)[0]\ntimes = numpy.nonzero(matrix)[1]\nweights = numpy.random.rand(x.size)\n\n#then i define an array of y positions\nnStepsY = 5\ny = numpy.arange(1,nStepsY+1)\n\n#this is only an example, in my work these arrays are the input\n#from a file or a preceding function\n\nnRows = nStepsY\nnColumns = 80\n\nx = tf.constant(x, dtype = tf.float32)\ntimes = tf.constant(times, dtype = tf.float32)\nweights = tf.constant(weights, dtype = tf.float32)\ny = tf.constant(y, dtype = tf.float32)\n\n\ndef itermatrix(ithStep):\n    yTimed = tf.multiply(y[ithStep],times)\n\n    positions = tf.round((x-yTimed)+50)\n    positions = tf.cast(positions, dtype=tf.int32)\n\n    values = tf.unsorted_segment_sum(weights, positions, nColumns)\n\n    return values\n\nimageMapped = tf.map_fn(itermatrix, tf.range(0,nRows), dtype=tf.float32)\n\nsess = tf.Session()\n\nimage = sess.run(imageMapped)\n\nThe problem is that i have to do these histograms for around 100 y steps, building and storing image for thousands of input matrices. The position transformation could be vectorized, but the binning part of each row is independent so i used tf.map_fn to manage the single input matrix. Now that thanks to you the histogram problem is solved, I'm working on the big data problem.", "body": "Around 10^4 bins for arrays around 2.5 x 10^6 elements. Here is a simplified example of my program.\r\n\r\n```\r\nimport numpy\r\nimport tensorflow as tf\r\n\r\n#first i build a matrix of some x positions vs time datas in a sparse format\r\nmatrix = numpy.random.randint(2, size = 100).astype(float).reshape(10,10)\r\n\r\nx = numpy.nonzero(matrix)[0]\r\ntimes = numpy.nonzero(matrix)[1]\r\nweights = numpy.random.rand(x.size)\r\n\r\n#then i define an array of y positions\r\nnStepsY = 5\r\ny = numpy.arange(1,nStepsY+1)\r\n\r\n#this is only an example, in my work these arrays are the input\r\n#from a file or a preceding function\r\n\r\nnRows = nStepsY\r\nnColumns = 80\r\n\r\nx = tf.constant(x, dtype = tf.float32)\r\ntimes = tf.constant(times, dtype = tf.float32)\r\nweights = tf.constant(weights, dtype = tf.float32)\r\ny = tf.constant(y, dtype = tf.float32)\r\n\r\n\r\ndef itermatrix(ithStep):\r\n    yTimed = tf.multiply(y[ithStep],times)\r\n\r\n    positions = tf.round((x-yTimed)+50)\r\n    positions = tf.cast(positions, dtype=tf.int32)\r\n\r\n    values = tf.unsorted_segment_sum(weights, positions, nColumns)\r\n\r\n    return values\r\n\r\nimageMapped = tf.map_fn(itermatrix, tf.range(0,nRows), dtype=tf.float32)\r\n\r\nsess = tf.Session()\r\n\r\nimage = sess.run(imageMapped)\r\n```\r\n\r\n\r\nThe problem is that i have to do these histograms for around 100 y steps, building and storing `image` for thousands of input matrices. The `position` transformation could be vectorized, but the binning part of each row is independent so i used `tf.map_fn` to manage the single input matrix. Now that thanks to you the histogram problem is solved, I'm working on the big data problem."}