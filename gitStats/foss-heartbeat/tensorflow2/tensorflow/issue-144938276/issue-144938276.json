{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1725", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1725/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1725/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1725/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1725", "id": 144938276, "node_id": "MDU6SXNzdWUxNDQ5MzgyNzY=", "number": 1725, "title": "scan / TensorArray bug", "user": {"login": "rdipietro", "id": 5150559, "node_id": "MDQ6VXNlcjUxNTA1NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5150559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdipietro", "html_url": "https://github.com/rdipietro", "followers_url": "https://api.github.com/users/rdipietro/followers", "following_url": "https://api.github.com/users/rdipietro/following{/other_user}", "gists_url": "https://api.github.com/users/rdipietro/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdipietro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdipietro/subscriptions", "organizations_url": "https://api.github.com/users/rdipietro/orgs", "repos_url": "https://api.github.com/users/rdipietro/repos", "events_url": "https://api.github.com/users/rdipietro/events{/privacy}", "received_events_url": "https://api.github.com/users/rdipietro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2016-03-31T15:43:07Z", "updated_at": "2016-06-08T23:13:28Z", "closed_at": "2016-06-08T23:13:28Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>Environment info</h3>\n<p>Operating System: CentOS 6.7<br>\nIf installed from sources, provide the commit hash: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/b4b276eb785f77beb226189ca1d32ba36717a588/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/b4b276eb785f77beb226189ca1d32ba36717a588\"><tt>b4b276e</tt></a></p>\n<h3>Issue</h3>\n<p>According to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"116838032\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/208\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/208/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/208\">#208</a>, <code>scan</code> will soon be part of the public API.</p>\n<p>The snippet of code</p>\n<pre><code>from __future__ import division, print_function\nimport tensorflow as tf\nfrom tensorflow.python.ops import functional_ops\n\ndef fn(previous_state, current_input):\n    return previous_state + current_input\n\nx = tf.Variable([0.0, 1.0, 2.0, 3.0, 4.0])\ny = functional_ops.scan(fn, x, parallel_iterations=1)\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    print(sess.run(y))\n</code></pre>\n<p>results in the error below.</p>\n<p>I get the same error</p>\n<ul>\n<li>whether or not I use a REPL</li>\n<li>whether or not I define <code>x</code> and <code>y</code> inside of a <code>with tf.device('/cpu:0')</code> block</li>\n<li>whether or not <code>swap_memory</code> is <code>True</code></li>\n<li>whether or not I use soft device placement</li>\n</ul>\n<pre><code>---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n&lt;ipython-input-1-73ddd8c32a4f&gt; in &lt;module&gt;()\n     10 \n     11 with tf.Session() as sess:\n---&gt; 12     sess.run(tf.initialize_all_variables())\n     13     print(sess.run(y))\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in run(self, fetches, feed_dict, options, run_metadata)\n    331     try:\n    332       result = self._run(None, fetches, feed_dict, options_ptr,\n--&gt; 333                          run_metadata_ptr)\n    334       if run_metadata:\n    335         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _run(self, handle, fetches, feed_dict, options, run_metadata)\n    536     # Run request and get response.\n    537     results = self._do_run(handle, target_list, unique_fetches,\n--&gt; 538                            feed_dict_string, options, run_metadata)\n    539 \n    540     # User may have fetched the same tensor multiple times, but we\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\n    599     if handle is None:\n    600       return self._do_call(_run_fn, self._session, feed_dict, fetch_list,\n--&gt; 601                            target_list, options, run_metadata)\n    602     else:\n    603       return self._do_call(_prun_fn, self._session, handle, feed_dict,\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _do_call(self, fn, *args)\n    606   def _do_call(self, fn, *args):\n    607     try:\n--&gt; 608       return fn(*args)\n    609     except tf_session.StatusNotOK as e:\n    610       error_message = compat.as_text(e.error_message)\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)\n    583                 run_metadata):\n    584       # Ensure any changes to the graph are reflected in the runtime.\n--&gt; 585       self._extend_graph()\n    586       if options:\n    587         return tf_session.TF_Run(session, options,\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _extend_graph(self)\n    636               self._session, graph_def.SerializeToString(), status)\n    637           if tf_session.TF_GetCode(status) != 0:\n--&gt; 638             raise RuntimeError(compat.as_text(tf_session.TF_Message(status)))\n    639           self._opened = True\n    640         finally:\n\nRuntimeError: AttrValue must not have reference type value of float_ref\n     for attr 'dtype'\n    ; NodeDef: scan/TensorArray = TensorArray[dtype=DT_FLOAT_REF, dynamic_size=false, tensor_array_name=\"\"](scan/Squeeze); Op&lt;name=TensorArray; signature=size:int32 -&gt; handle:Ref(string); attr=dtype:type; attr=dynamic_size:bool,default=false; attr=tensor_array_name:string,default=\"\"; is_stateful=true&gt;\n</code></pre>", "body_text": "Environment info\nOperating System: CentOS 6.7\nIf installed from sources, provide the commit hash: b4b276e\nIssue\nAccording to #208, scan will soon be part of the public API.\nThe snippet of code\nfrom __future__ import division, print_function\nimport tensorflow as tf\nfrom tensorflow.python.ops import functional_ops\n\ndef fn(previous_state, current_input):\n    return previous_state + current_input\n\nx = tf.Variable([0.0, 1.0, 2.0, 3.0, 4.0])\ny = functional_ops.scan(fn, x, parallel_iterations=1)\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    print(sess.run(y))\n\nresults in the error below.\nI get the same error\n\nwhether or not I use a REPL\nwhether or not I define x and y inside of a with tf.device('/cpu:0') block\nwhether or not swap_memory is True\nwhether or not I use soft device placement\n\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-1-73ddd8c32a4f> in <module>()\n     10 \n     11 with tf.Session() as sess:\n---> 12     sess.run(tf.initialize_all_variables())\n     13     print(sess.run(y))\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in run(self, fetches, feed_dict, options, run_metadata)\n    331     try:\n    332       result = self._run(None, fetches, feed_dict, options_ptr,\n--> 333                          run_metadata_ptr)\n    334       if run_metadata:\n    335         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _run(self, handle, fetches, feed_dict, options, run_metadata)\n    536     # Run request and get response.\n    537     results = self._do_run(handle, target_list, unique_fetches,\n--> 538                            feed_dict_string, options, run_metadata)\n    539 \n    540     # User may have fetched the same tensor multiple times, but we\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\n    599     if handle is None:\n    600       return self._do_call(_run_fn, self._session, feed_dict, fetch_list,\n--> 601                            target_list, options, run_metadata)\n    602     else:\n    603       return self._do_call(_prun_fn, self._session, handle, feed_dict,\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _do_call(self, fn, *args)\n    606   def _do_call(self, fn, *args):\n    607     try:\n--> 608       return fn(*args)\n    609     except tf_session.StatusNotOK as e:\n    610       error_message = compat.as_text(e.error_message)\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)\n    583                 run_metadata):\n    584       # Ensure any changes to the graph are reflected in the runtime.\n--> 585       self._extend_graph()\n    586       if options:\n    587         return tf_session.TF_Run(session, options,\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _extend_graph(self)\n    636               self._session, graph_def.SerializeToString(), status)\n    637           if tf_session.TF_GetCode(status) != 0:\n--> 638             raise RuntimeError(compat.as_text(tf_session.TF_Message(status)))\n    639           self._opened = True\n    640         finally:\n\nRuntimeError: AttrValue must not have reference type value of float_ref\n     for attr 'dtype'\n    ; NodeDef: scan/TensorArray = TensorArray[dtype=DT_FLOAT_REF, dynamic_size=false, tensor_array_name=\"\"](scan/Squeeze); Op<name=TensorArray; signature=size:int32 -> handle:Ref(string); attr=dtype:type; attr=dynamic_size:bool,default=false; attr=tensor_array_name:string,default=\"\"; is_stateful=true>", "body": "### Environment info\n\nOperating System: CentOS 6.7\nIf installed from sources, provide the commit hash: b4b276e\n### Issue\n\nAccording to https://github.com/tensorflow/tensorflow/issues/208, `scan` will soon be part of the public API.\n\nThe snippet of code\n\n```\nfrom __future__ import division, print_function\nimport tensorflow as tf\nfrom tensorflow.python.ops import functional_ops\n\ndef fn(previous_state, current_input):\n    return previous_state + current_input\n\nx = tf.Variable([0.0, 1.0, 2.0, 3.0, 4.0])\ny = functional_ops.scan(fn, x, parallel_iterations=1)\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    print(sess.run(y))\n```\n\nresults in the error below.\n\nI get the same error\n- whether or not I use a REPL\n- whether or not I define `x` and `y` inside of a `with tf.device('/cpu:0')` block\n- whether or not `swap_memory` is `True`\n- whether or not I use soft device placement\n\n```\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-1-73ddd8c32a4f> in <module>()\n     10 \n     11 with tf.Session() as sess:\n---> 12     sess.run(tf.initialize_all_variables())\n     13     print(sess.run(y))\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in run(self, fetches, feed_dict, options, run_metadata)\n    331     try:\n    332       result = self._run(None, fetches, feed_dict, options_ptr,\n--> 333                          run_metadata_ptr)\n    334       if run_metadata:\n    335         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _run(self, handle, fetches, feed_dict, options, run_metadata)\n    536     # Run request and get response.\n    537     results = self._do_run(handle, target_list, unique_fetches,\n--> 538                            feed_dict_string, options, run_metadata)\n    539 \n    540     # User may have fetched the same tensor multiple times, but we\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\n    599     if handle is None:\n    600       return self._do_call(_run_fn, self._session, feed_dict, fetch_list,\n--> 601                            target_list, options, run_metadata)\n    602     else:\n    603       return self._do_call(_prun_fn, self._session, handle, feed_dict,\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _do_call(self, fn, *args)\n    606   def _do_call(self, fn, *args):\n    607     try:\n--> 608       return fn(*args)\n    609     except tf_session.StatusNotOK as e:\n    610       error_message = compat.as_text(e.error_message)\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)\n    583                 run_metadata):\n    584       # Ensure any changes to the graph are reflected in the runtime.\n--> 585       self._extend_graph()\n    586       if options:\n    587         return tf_session.TF_Run(session, options,\n\n/home-4/rdipiet2@jhu.edu/.local/lib/python2.7/site-packages/tensorflow/python/client/session.pyc in _extend_graph(self)\n    636               self._session, graph_def.SerializeToString(), status)\n    637           if tf_session.TF_GetCode(status) != 0:\n--> 638             raise RuntimeError(compat.as_text(tf_session.TF_Message(status)))\n    639           self._opened = True\n    640         finally:\n\nRuntimeError: AttrValue must not have reference type value of float_ref\n     for attr 'dtype'\n    ; NodeDef: scan/TensorArray = TensorArray[dtype=DT_FLOAT_REF, dynamic_size=false, tensor_array_name=\"\"](scan/Squeeze); Op<name=TensorArray; signature=size:int32 -> handle:Ref(string); attr=dtype:type; attr=dynamic_size:bool,default=false; attr=tensor_array_name:string,default=\"\"; is_stateful=true>\n```\n"}