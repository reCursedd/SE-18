{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/242258344", "html_url": "https://github.com/tensorflow/tensorflow/pull/4008#issuecomment-242258344", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4008", "id": 242258344, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjI1ODM0NA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-25T01:38:51Z", "updated_at": "2016-08-25T01:38:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Great, thanks! Can you also add a test that covers this case to <code>device_setter_test.py</code>?</p>\n<p>I imagine you could copy <code>testPS2TasksWithDevice()</code> and make it <code>testPS2TasksWithCPUConstraint()</code>. The code would look something like:</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">def</span> <span class=\"pl-en\">testPS2TasksWithCPUConstraint</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    cluster_spec <span class=\"pl-k\">=</span> tf.train.ClusterSpec({\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sun<span class=\"pl-pds\">\"</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sun0:2222<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sun1:2222<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sun2:2222<span class=\"pl-pds\">\"</span></span>],\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>moon<span class=\"pl-pds\">\"</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>moon0:2222<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>moon1:2222<span class=\"pl-pds\">\"</span></span>]})\n\n    <span class=\"pl-k\">with</span> tf.device(tf.train.replica_device_setter(\n        <span class=\"pl-v\">ps_device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:moon/cpu:0<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">worker_device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:sun<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-v\">cluster</span><span class=\"pl-k\">=</span>cluster_spec.as_cluster_def())):\n      v <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>])\n      w <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>])\n      a <span class=\"pl-k\">=</span> v <span class=\"pl-k\">+</span> w\n      <span class=\"pl-c1\">self</span>.assertDeviceEqual(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:moon/task:0/cpu:0<span class=\"pl-pds\">\"</span></span>, v.device)\n      <span class=\"pl-c1\">self</span>.assertDeviceEqual(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:moon/task:0/cpu:0<span class=\"pl-pds\">\"</span></span>, v.initializer.device)\n      <span class=\"pl-c1\">self</span>.assertDeviceEqual(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:moon/task:1/cpu:0<span class=\"pl-pds\">\"</span></span>, w.device)\n      <span class=\"pl-c1\">self</span>.assertDeviceEqual(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:moon/task:1/cpu:0<span class=\"pl-pds\">\"</span></span>, w.initializer.device)\n      <span class=\"pl-c1\">self</span>.assertDeviceEqual(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:sun<span class=\"pl-pds\">\"</span></span>, a.device)</pre></div>", "body_text": "Great, thanks! Can you also add a test that covers this case to device_setter_test.py?\nI imagine you could copy testPS2TasksWithDevice() and make it testPS2TasksWithCPUConstraint(). The code would look something like:\n  def testPS2TasksWithCPUConstraint(self):\n    cluster_spec = tf.train.ClusterSpec({\n        \"sun\": [\"sun0:2222\", \"sun1:2222\", \"sun2:2222\"],\n        \"moon\": [\"moon0:2222\", \"moon1:2222\"]})\n\n    with tf.device(tf.train.replica_device_setter(\n        ps_device=\"/job:moon/cpu:0\", worker_device=\"/job:sun\",\n        cluster=cluster_spec.as_cluster_def())):\n      v = tf.Variable([1, 2])\n      w = tf.Variable([2, 1])\n      a = v + w\n      self.assertDeviceEqual(\"/job:moon/task:0/cpu:0\", v.device)\n      self.assertDeviceEqual(\"/job:moon/task:0/cpu:0\", v.initializer.device)\n      self.assertDeviceEqual(\"/job:moon/task:1/cpu:0\", w.device)\n      self.assertDeviceEqual(\"/job:moon/task:1/cpu:0\", w.initializer.device)\n      self.assertDeviceEqual(\"/job:sun\", a.device)", "body": "Great, thanks! Can you also add a test that covers this case to `device_setter_test.py`?\n\nI imagine you could copy `testPS2TasksWithDevice()` and make it `testPS2TasksWithCPUConstraint()`. The code would look something like:\n\n``` python\n  def testPS2TasksWithCPUConstraint(self):\n    cluster_spec = tf.train.ClusterSpec({\n        \"sun\": [\"sun0:2222\", \"sun1:2222\", \"sun2:2222\"],\n        \"moon\": [\"moon0:2222\", \"moon1:2222\"]})\n\n    with tf.device(tf.train.replica_device_setter(\n        ps_device=\"/job:moon/cpu:0\", worker_device=\"/job:sun\",\n        cluster=cluster_spec.as_cluster_def())):\n      v = tf.Variable([1, 2])\n      w = tf.Variable([2, 1])\n      a = v + w\n      self.assertDeviceEqual(\"/job:moon/task:0/cpu:0\", v.device)\n      self.assertDeviceEqual(\"/job:moon/task:0/cpu:0\", v.initializer.device)\n      self.assertDeviceEqual(\"/job:moon/task:1/cpu:0\", w.device)\n      self.assertDeviceEqual(\"/job:moon/task:1/cpu:0\", w.initializer.device)\n      self.assertDeviceEqual(\"/job:sun\", a.device)\n```\n"}