{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/308691458", "html_url": "https://github.com/tensorflow/tensorflow/issues/7641#issuecomment-308691458", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7641", "id": 308691458, "node_id": "MDEyOklzc3VlQ29tbWVudDMwODY5MTQ1OA==", "user": {"login": "hlzlyc", "id": 28919669, "node_id": "MDQ6VXNlcjI4OTE5NjY5", "avatar_url": "https://avatars2.githubusercontent.com/u/28919669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hlzlyc", "html_url": "https://github.com/hlzlyc", "followers_url": "https://api.github.com/users/hlzlyc/followers", "following_url": "https://api.github.com/users/hlzlyc/following{/other_user}", "gists_url": "https://api.github.com/users/hlzlyc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hlzlyc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hlzlyc/subscriptions", "organizations_url": "https://api.github.com/users/hlzlyc/orgs", "repos_url": "https://api.github.com/users/hlzlyc/repos", "events_url": "https://api.github.com/users/hlzlyc/events{/privacy}", "received_events_url": "https://api.github.com/users/hlzlyc/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-15T10:21:55Z", "updated_at": "2017-06-15T10:36:32Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15151242\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mikigom\">@mikigom</a> , <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=326106\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aselle\">@aselle</a>  ,do you have fixed this problem?  I meeted the same problem when I want to calculate the gradients of ResizeNearestNeighbor.  I know image resize bilinear defines the gradient and know where it is , but I still don't know how to  solve this problem.</p>\n<p>` @ops.RegisterGradient(\"ResizeNearestNeighbor\")<br>\ndef _ResizeNearestNeighborGrad(op, grad):<br>\n\"\"\"The derivatives for nearest neighbor resizing.</p>\n<p>Args:<br>\nop: The ResizeNearestNeighbor op.<br>\ngrad: The tensor representing the gradient w.r.t. the output.</p>\n<p>Returns:<br>\nThe gradients w.r.t. the input and the output.<br>\n\"\"\"<br>\nimage = op.inputs[0]<br>\nif image.get_shape()[1:3].is_fully_defined():<br>\nimage_shape = image.get_shape()[1:3]<br>\nelse:<br>\nimage_shape = array_ops.shape(image)[1:3]</p>\n<p>grads = gen_image_ops._resize_nearest_neighbor_grad(<br>\ngrad,<br>\nimage_shape,<br>\nalign_corners=op.get_attr(\"align_corners\"))<br>\nreturn [grads, None]`</p>\n<p>I copy this to nn_grad.py , but it is useless.<br>\nThanks for any help</p>", "body_text": "@mikigom , @aselle  ,do you have fixed this problem?  I meeted the same problem when I want to calculate the gradients of ResizeNearestNeighbor.  I know image resize bilinear defines the gradient and know where it is , but I still don't know how to  solve this problem.\n` @ops.RegisterGradient(\"ResizeNearestNeighbor\")\ndef _ResizeNearestNeighborGrad(op, grad):\n\"\"\"The derivatives for nearest neighbor resizing.\nArgs:\nop: The ResizeNearestNeighbor op.\ngrad: The tensor representing the gradient w.r.t. the output.\nReturns:\nThe gradients w.r.t. the input and the output.\n\"\"\"\nimage = op.inputs[0]\nif image.get_shape()[1:3].is_fully_defined():\nimage_shape = image.get_shape()[1:3]\nelse:\nimage_shape = array_ops.shape(image)[1:3]\ngrads = gen_image_ops._resize_nearest_neighbor_grad(\ngrad,\nimage_shape,\nalign_corners=op.get_attr(\"align_corners\"))\nreturn [grads, None]`\nI copy this to nn_grad.py , but it is useless.\nThanks for any help", "body": "@mikigom , @aselle  ,do you have fixed this problem?  I meeted the same problem when I want to calculate the gradients of ResizeNearestNeighbor.  I know image resize bilinear defines the gradient and know where it is , but I still don't know how to  solve this problem.\r\n\r\n` @ops.RegisterGradient(\"ResizeNearestNeighbor\")\r\ndef _ResizeNearestNeighborGrad(op, grad):\r\n  \"\"\"The derivatives for nearest neighbor resizing.\r\n\r\n  Args:\r\n    op: The ResizeNearestNeighbor op.\r\n    grad: The tensor representing the gradient w.r.t. the output.\r\n\r\n  Returns:\r\n    The gradients w.r.t. the input and the output.\r\n  \"\"\"\r\n  image = op.inputs[0]\r\n  if image.get_shape()[1:3].is_fully_defined():\r\n    image_shape = image.get_shape()[1:3]\r\n  else:\r\n    image_shape = array_ops.shape(image)[1:3]\r\n\r\n   grads = gen_image_ops._resize_nearest_neighbor_grad(\r\n      grad,\r\n      image_shape,\r\n      align_corners=op.get_attr(\"align_corners\"))\r\n  return [grads, None]`\r\n\r\nI copy this to nn_grad.py , but it is useless.\r\nThanks for any help \r\n"}