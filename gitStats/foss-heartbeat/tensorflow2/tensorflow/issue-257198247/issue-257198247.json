{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13004", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13004/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13004/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13004/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13004", "id": 257198247, "node_id": "MDU6SXNzdWUyNTcxOTgyNDc=", "number": 13004, "title": "Tensorflow import breaks numpy calls", "user": {"login": "sirgogo", "id": 5591329, "node_id": "MDQ6VXNlcjU1OTEzMjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5591329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirgogo", "html_url": "https://github.com/sirgogo", "followers_url": "https://api.github.com/users/sirgogo/followers", "following_url": "https://api.github.com/users/sirgogo/following{/other_user}", "gists_url": "https://api.github.com/users/sirgogo/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirgogo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirgogo/subscriptions", "organizations_url": "https://api.github.com/users/sirgogo/orgs", "repos_url": "https://api.github.com/users/sirgogo/repos", "events_url": "https://api.github.com/users/sirgogo/events{/privacy}", "received_events_url": "https://api.github.com/users/sirgogo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-12T22:05:13Z", "updated_at": "2017-09-12T22:54:34Z", "closed_at": "2017-09-12T22:54:34Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n</ul>\n<p>See source code below.</p>\n<ul>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:</li>\n</ul>\n<pre><code>% cat tf_env.txt\n== cat /etc/issue ===============================================\nLinux bda9acc7988e 4.12.9-300.fc26.x86_64 #1 SMP Fri Aug 25 13:09:43 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\nVERSION=\"16.04.3 LTS (Xenial Xerus)\"\nVERSION_ID=\"16.04\"\nVERSION_CODENAME=xenial\n== are we in docker =============================================\nYes\n== compiler =====================================================\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n== uname -a =====================================================\nLinux bda9acc7988e 4.12.9-300.fc26.x86_64 #1 SMP Fri Aug 25 13:09:43 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre>\n<ul>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>:<br>\n<code>pip install tensorflow-gpu</code></p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>:</p>\n</li>\n</ul>\n<pre><code> % pip list | grep 'numpy\\|scipy\\|tensorflow\\|wheel'\nDEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(leg\nacy|columns) in your pip.conf under the [list] section) to disable this warning.\nnumpy (1.12.1)\nscipy (0.19.0)\ntensorflow-gpu (1.3.0)\ntensorflow-tensorboard (0.1.6)\nwheel (0.29.0)\n</code></pre>\n<pre><code>% python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nv1.3.0-rc2-20-g0787eee 1.3.0\n</code></pre>\n<ul>\n<li><strong>Python version</strong>:</li>\n</ul>\n<pre><code> % python\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\n</code></pre>\n<ul>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:<br>\nNot compiling from source.</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:<br>\n<code>/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudart.so.8.0.61</code></p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:</p>\n</li>\n</ul>\n<pre><code> % nvidia-smi\nTue Sep 12 21:56:13 2017\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 384.69                 Driver Version: 384.69                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 106...  Off  | 00000000:01:00.0  On |                  N/A |\n|  0%   56C    P8    12W / 200W |     62MiB /  6070MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID  Type  Process name                               Usage      |\n|=============================================================================|\n+-----------------------------------------------------------------------------+\n</code></pre>\n<ul>\n<li><strong>Exact command to reproduce</strong>:<br>\nRun this test1.py in a new python terminal (below), once with the <code>import tensorflow</code> line, once without it. The code loads a stock image, and calls np.fft.fft2, and reads values on the corners of the resulting matrix. Output is as follows:</li>\n</ul>\n<p>Expected:</p>\n<pre><code> % python\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nIntel(R) Distribution for Python is brought to you by Intel Corporation.\nPlease check out: https://software.intel.com/en-us/python-distribution\n&gt;&gt;&gt; exec(open('test1.py').read()) # WITHOUT TF IMPORT\n(768, 1024)\n-- loop 0 --\n0.825823 0.593467 0.860577 0.842033\n(595544+0j) (-41240.3+54651.8j) (-28777.7+57397.5j) (28693.1-15865.9j)\n\n-- loop 1 --\n0.825823 0.593467 0.860577 0.842033\n(595544+0j) (-41240.3+54651.8j) (-28777.7+57397.5j) (28693.1-15865.9j)\n\n-- loop 2 --\n0.825823 0.593467 0.860577 0.842033\n(595544+0j) (-41240.3+54651.8j) (-28777.7+57397.5j) (28693.1-15865.9j)\n</code></pre>\n<p>Problem: non-deterministic loop after TF import,</p>\n<pre><code> % python\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nIntel(R) Distribution for Python is brought to you by Intel Corporation.\nPlease check out: https://software.intel.com/en-us/python-distribution\n&gt;&gt;&gt; exec(open('test1.py').read()) # WITH TF IMPORT\n(768, 1024)\n-- loop 0 --\n0.825823 0.593467 0.860577 0.842033\n(4.01544e+06-4.30166e+06j) (-384357+1.41085e+06j) (349169+983449j) (228823-235335j)\n\n-- loop 1 --\n0.825823 0.593467 0.860577 0.842033\n(6.03746e+06+42733.2j) (83067.3-1.09108e+06j) (-331458-151395j) (-87943.5+165673j)\n\n-- loop 2 --\n0.825823 0.593467 0.860577 0.842033\n(475988+254405j) (11989.8+49912j) (13361.2+6137.22j) (-3503.42-15194.5j)\n</code></pre>\n<h3>Describe the problem</h3>\n<p>Importing tensorflow causes numpy.fft.fft2 to produce non-deterministic results. This is not expected. Why does importing tensorflow break the numpy call?</p>\n<p>Just for reference, I have been able to tf.Session() with the GPU. In any case, tensorflow should not override / affect the numpy package. I am not sure what is going on here.</p>\n<pre><code> % python\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nIntel(R) Distribution for Python is brought to you by Intel Corporation.\nPlease check out: https://software.intel.com/en-us/python-distribution\n&gt;&gt;&gt; import tensorflow as tf\ntf.S&gt;&gt;&gt; tf.Session()\n2017-09-12 22:04:13.379385: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1\n instructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.379504: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2\n instructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.379534: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX in\nstructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.379560: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 i\nnstructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.379584: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA in\nstructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.512425: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had neg\native value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n2017-09-12 22:04:13.512712: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties:\nname: GeForce GTX 1060 6GB\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.7335\npciBusID 0000:01:00.0\nTotal memory: 5.93GiB\nFree memory: 5.80GiB\n2017-09-12 22:04:13.512727: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0\n2017-09-12 22:04:13.512731: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y\n2017-09-12 22:04:13.512739: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -&gt; (device:\n 0, name: GeForce GTX 1060 6GB, pci bus id: 0000:01:00.0)\n&lt;tensorflow.python.client.session.Session object at 0x7f396c316c88&gt;\n</code></pre>\n<h3>Source code / logs</h3>\n<p>test1.py</p>\n<pre><code>import numpy as np\nimport scipy.misc\nimport tensorflow as tf # comment this out to make deterministic\n\nDTYPE = np.complex64\nim_uint8 = scipy.misc.face()\nim = im_uint8.astype(DTYPE) / (np.power(2,im_uint8.itemsize*8) - 1)\nim = np.linalg.norm(im, axis=-1)\nprint(im.shape)\nprintcorners = lambda M: print( M[0,0], M[-1,0], M[0,-1], M[-1,-1])\n\nfor i in range(0,3):\n    # THIS LOOP SHOULD BE DETERMINISTIC!\n    print('-- loop',i,'--')\n    B = im.copy()\n    printcorners(B)\n    Bhat = np.fft.fft2(B.copy())\n    printcorners(Bhat)\n    print('')\n#\n</code></pre>\n<p>Thanks in advance.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\n\nSee source code below.\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\n\n% cat tf_env.txt\n== cat /etc/issue ===============================================\nLinux bda9acc7988e 4.12.9-300.fc26.x86_64 #1 SMP Fri Aug 25 13:09:43 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\nVERSION=\"16.04.3 LTS (Xenial Xerus)\"\nVERSION_ID=\"16.04\"\nVERSION_CODENAME=xenial\n== are we in docker =============================================\nYes\n== compiler =====================================================\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n== uname -a =====================================================\nLinux bda9acc7988e 4.12.9-300.fc26.x86_64 #1 SMP Fri Aug 25 13:09:43 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n\n\n\nTensorFlow installed from (source or binary):\npip install tensorflow-gpu\n\n\nTensorFlow version (use command below):\n\n\n % pip list | grep 'numpy\\|scipy\\|tensorflow\\|wheel'\nDEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(leg\nacy|columns) in your pip.conf under the [list] section) to disable this warning.\nnumpy (1.12.1)\nscipy (0.19.0)\ntensorflow-gpu (1.3.0)\ntensorflow-tensorboard (0.1.6)\nwheel (0.29.0)\n\n% python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nv1.3.0-rc2-20-g0787eee 1.3.0\n\n\nPython version:\n\n % python\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\n\n\n\nBazel version (if compiling from source):\nNot compiling from source.\n\n\nCUDA/cuDNN version:\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudart.so.8.0.61\n\n\nGPU model and memory:\n\n\n % nvidia-smi\nTue Sep 12 21:56:13 2017\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 384.69                 Driver Version: 384.69                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 106...  Off  | 00000000:01:00.0  On |                  N/A |\n|  0%   56C    P8    12W / 200W |     62MiB /  6070MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID  Type  Process name                               Usage      |\n|=============================================================================|\n+-----------------------------------------------------------------------------+\n\n\nExact command to reproduce:\nRun this test1.py in a new python terminal (below), once with the import tensorflow line, once without it. The code loads a stock image, and calls np.fft.fft2, and reads values on the corners of the resulting matrix. Output is as follows:\n\nExpected:\n % python\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nIntel(R) Distribution for Python is brought to you by Intel Corporation.\nPlease check out: https://software.intel.com/en-us/python-distribution\n>>> exec(open('test1.py').read()) # WITHOUT TF IMPORT\n(768, 1024)\n-- loop 0 --\n0.825823 0.593467 0.860577 0.842033\n(595544+0j) (-41240.3+54651.8j) (-28777.7+57397.5j) (28693.1-15865.9j)\n\n-- loop 1 --\n0.825823 0.593467 0.860577 0.842033\n(595544+0j) (-41240.3+54651.8j) (-28777.7+57397.5j) (28693.1-15865.9j)\n\n-- loop 2 --\n0.825823 0.593467 0.860577 0.842033\n(595544+0j) (-41240.3+54651.8j) (-28777.7+57397.5j) (28693.1-15865.9j)\n\nProblem: non-deterministic loop after TF import,\n % python\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nIntel(R) Distribution for Python is brought to you by Intel Corporation.\nPlease check out: https://software.intel.com/en-us/python-distribution\n>>> exec(open('test1.py').read()) # WITH TF IMPORT\n(768, 1024)\n-- loop 0 --\n0.825823 0.593467 0.860577 0.842033\n(4.01544e+06-4.30166e+06j) (-384357+1.41085e+06j) (349169+983449j) (228823-235335j)\n\n-- loop 1 --\n0.825823 0.593467 0.860577 0.842033\n(6.03746e+06+42733.2j) (83067.3-1.09108e+06j) (-331458-151395j) (-87943.5+165673j)\n\n-- loop 2 --\n0.825823 0.593467 0.860577 0.842033\n(475988+254405j) (11989.8+49912j) (13361.2+6137.22j) (-3503.42-15194.5j)\n\nDescribe the problem\nImporting tensorflow causes numpy.fft.fft2 to produce non-deterministic results. This is not expected. Why does importing tensorflow break the numpy call?\nJust for reference, I have been able to tf.Session() with the GPU. In any case, tensorflow should not override / affect the numpy package. I am not sure what is going on here.\n % python\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nIntel(R) Distribution for Python is brought to you by Intel Corporation.\nPlease check out: https://software.intel.com/en-us/python-distribution\n>>> import tensorflow as tf\ntf.S>>> tf.Session()\n2017-09-12 22:04:13.379385: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1\n instructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.379504: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2\n instructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.379534: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX in\nstructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.379560: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 i\nnstructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.379584: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA in\nstructions, but these are available on your machine and could speed up CPU computations.\n2017-09-12 22:04:13.512425: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had neg\native value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n2017-09-12 22:04:13.512712: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties:\nname: GeForce GTX 1060 6GB\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.7335\npciBusID 0000:01:00.0\nTotal memory: 5.93GiB\nFree memory: 5.80GiB\n2017-09-12 22:04:13.512727: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0\n2017-09-12 22:04:13.512731: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y\n2017-09-12 22:04:13.512739: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device:\n 0, name: GeForce GTX 1060 6GB, pci bus id: 0000:01:00.0)\n<tensorflow.python.client.session.Session object at 0x7f396c316c88>\n\nSource code / logs\ntest1.py\nimport numpy as np\nimport scipy.misc\nimport tensorflow as tf # comment this out to make deterministic\n\nDTYPE = np.complex64\nim_uint8 = scipy.misc.face()\nim = im_uint8.astype(DTYPE) / (np.power(2,im_uint8.itemsize*8) - 1)\nim = np.linalg.norm(im, axis=-1)\nprint(im.shape)\nprintcorners = lambda M: print( M[0,0], M[-1,0], M[0,-1], M[-1,-1])\n\nfor i in range(0,3):\n    # THIS LOOP SHOULD BE DETERMINISTIC!\n    print('-- loop',i,'--')\n    B = im.copy()\n    printcorners(B)\n    Bhat = np.fft.fft2(B.copy())\n    printcorners(Bhat)\n    print('')\n#\n\nThanks in advance.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n\r\nSee source code below.\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n```\r\n% cat tf_env.txt\r\n== cat /etc/issue ===============================================\r\nLinux bda9acc7988e 4.12.9-300.fc26.x86_64 #1 SMP Fri Aug 25 13:09:43 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\nVERSION=\"16.04.3 LTS (Xenial Xerus)\"\r\nVERSION_ID=\"16.04\"\r\nVERSION_CODENAME=xenial\r\n== are we in docker =============================================\r\nYes\r\n== compiler =====================================================\r\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\r\nCopyright (C) 2015 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n== uname -a =====================================================\r\nLinux bda9acc7988e 4.12.9-300.fc26.x86_64 #1 SMP Fri Aug 25 13:09:43 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n- **TensorFlow installed from (source or binary)**:\r\n`pip install tensorflow-gpu`\r\n\r\n- **TensorFlow version (use command below)**:\r\n```\r\n % pip list | grep 'numpy\\|scipy\\|tensorflow\\|wheel'\r\nDEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(leg\r\nacy|columns) in your pip.conf under the [list] section) to disable this warning.\r\nnumpy (1.12.1)\r\nscipy (0.19.0)\r\ntensorflow-gpu (1.3.0)\r\ntensorflow-tensorboard (0.1.6)\r\nwheel (0.29.0)\r\n```\r\n```\r\n% python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\nv1.3.0-rc2-20-g0787eee 1.3.0\r\n```\r\n- **Python version**: \r\n```\r\n % python\r\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\r\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\r\n```\r\n- **Bazel version (if compiling from source)**:\r\nNot compiling from source.\r\n\r\n- **CUDA/cuDNN version**:\r\n`/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudart.so.8.0.61`\r\n\r\n- **GPU model and memory**:\r\n```\r\n % nvidia-smi\r\nTue Sep 12 21:56:13 2017\r\n+-----------------------------------------------------------------------------+\r\n| NVIDIA-SMI 384.69                 Driver Version: 384.69                    |\r\n|-------------------------------+----------------------+----------------------+\r\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\r\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\r\n|===============================+======================+======================|\r\n|   0  GeForce GTX 106...  Off  | 00000000:01:00.0  On |                  N/A |\r\n|  0%   56C    P8    12W / 200W |     62MiB /  6070MiB |      0%      Default |\r\n+-------------------------------+----------------------+----------------------+\r\n\r\n+-----------------------------------------------------------------------------+\r\n| Processes:                                                       GPU Memory |\r\n|  GPU       PID  Type  Process name                               Usage      |\r\n|=============================================================================|\r\n+-----------------------------------------------------------------------------+\r\n```\r\n\r\n- **Exact command to reproduce**:\r\nRun this test1.py in a new python terminal (below), once with the `import tensorflow` line, once without it. The code loads a stock image, and calls np.fft.fft2, and reads values on the corners of the resulting matrix. Output is as follows:\r\n\r\nExpected:\r\n```\r\n % python\r\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\r\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\nIntel(R) Distribution for Python is brought to you by Intel Corporation.\r\nPlease check out: https://software.intel.com/en-us/python-distribution\r\n>>> exec(open('test1.py').read()) # WITHOUT TF IMPORT\r\n(768, 1024)\r\n-- loop 0 --\r\n0.825823 0.593467 0.860577 0.842033\r\n(595544+0j) (-41240.3+54651.8j) (-28777.7+57397.5j) (28693.1-15865.9j)\r\n\r\n-- loop 1 --\r\n0.825823 0.593467 0.860577 0.842033\r\n(595544+0j) (-41240.3+54651.8j) (-28777.7+57397.5j) (28693.1-15865.9j)\r\n\r\n-- loop 2 --\r\n0.825823 0.593467 0.860577 0.842033\r\n(595544+0j) (-41240.3+54651.8j) (-28777.7+57397.5j) (28693.1-15865.9j)\r\n```\r\n\r\nProblem: non-deterministic loop after TF import,\r\n```\r\n % python\r\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\r\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\nIntel(R) Distribution for Python is brought to you by Intel Corporation.\r\nPlease check out: https://software.intel.com/en-us/python-distribution\r\n>>> exec(open('test1.py').read()) # WITH TF IMPORT\r\n(768, 1024)\r\n-- loop 0 --\r\n0.825823 0.593467 0.860577 0.842033\r\n(4.01544e+06-4.30166e+06j) (-384357+1.41085e+06j) (349169+983449j) (228823-235335j)\r\n\r\n-- loop 1 --\r\n0.825823 0.593467 0.860577 0.842033\r\n(6.03746e+06+42733.2j) (83067.3-1.09108e+06j) (-331458-151395j) (-87943.5+165673j)\r\n\r\n-- loop 2 --\r\n0.825823 0.593467 0.860577 0.842033\r\n(475988+254405j) (11989.8+49912j) (13361.2+6137.22j) (-3503.42-15194.5j)\r\n```\r\n\r\n### Describe the problem\r\nImporting tensorflow causes numpy.fft.fft2 to produce non-deterministic results. This is not expected. Why does importing tensorflow break the numpy call?\r\n\r\nJust for reference, I have been able to tf.Session() with the GPU. In any case, tensorflow should not override / affect the numpy package. I am not sure what is going on here.\r\n```\r\n % python\r\nPython 3.5.3 |Intel Corporation| (default, Apr 27 2017, 18:08:47)\r\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\nIntel(R) Distribution for Python is brought to you by Intel Corporation.\r\nPlease check out: https://software.intel.com/en-us/python-distribution\r\n>>> import tensorflow as tf\r\ntf.S>>> tf.Session()\r\n2017-09-12 22:04:13.379385: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1\r\n instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-09-12 22:04:13.379504: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2\r\n instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-09-12 22:04:13.379534: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX in\r\nstructions, but these are available on your machine and could speed up CPU computations.\r\n2017-09-12 22:04:13.379560: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 i\r\nnstructions, but these are available on your machine and could speed up CPU computations.\r\n2017-09-12 22:04:13.379584: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA in\r\nstructions, but these are available on your machine and could speed up CPU computations.\r\n2017-09-12 22:04:13.512425: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had neg\r\native value (-1), but there must be at least one NUMA node, so returning NUMA node zero\r\n2017-09-12 22:04:13.512712: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties:\r\nname: GeForce GTX 1060 6GB\r\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.7335\r\npciBusID 0000:01:00.0\r\nTotal memory: 5.93GiB\r\nFree memory: 5.80GiB\r\n2017-09-12 22:04:13.512727: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0\r\n2017-09-12 22:04:13.512731: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y\r\n2017-09-12 22:04:13.512739: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device:\r\n 0, name: GeForce GTX 1060 6GB, pci bus id: 0000:01:00.0)\r\n<tensorflow.python.client.session.Session object at 0x7f396c316c88>\r\n```\r\n\r\n### Source code / logs\r\ntest1.py\r\n```\r\nimport numpy as np\r\nimport scipy.misc\r\nimport tensorflow as tf # comment this out to make deterministic\r\n\r\nDTYPE = np.complex64\r\nim_uint8 = scipy.misc.face()\r\nim = im_uint8.astype(DTYPE) / (np.power(2,im_uint8.itemsize*8) - 1)\r\nim = np.linalg.norm(im, axis=-1)\r\nprint(im.shape)\r\nprintcorners = lambda M: print( M[0,0], M[-1,0], M[0,-1], M[-1,-1])\r\n\r\nfor i in range(0,3):\r\n    # THIS LOOP SHOULD BE DETERMINISTIC!\r\n    print('-- loop',i,'--')\r\n    B = im.copy()\r\n    printcorners(B)\r\n    Bhat = np.fft.fft2(B.copy())\r\n    printcorners(Bhat)\r\n    print('')\r\n#\r\n```\r\n\r\nThanks in advance."}