{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271366975", "html_url": "https://github.com/tensorflow/tensorflow/issues/6702#issuecomment-271366975", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6702", "id": 271366975, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM2Njk3NQ==", "user": {"login": "hannes-brt", "id": 323139, "node_id": "MDQ6VXNlcjMyMzEzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/323139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannes-brt", "html_url": "https://github.com/hannes-brt", "followers_url": "https://api.github.com/users/hannes-brt/followers", "following_url": "https://api.github.com/users/hannes-brt/following{/other_user}", "gists_url": "https://api.github.com/users/hannes-brt/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannes-brt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannes-brt/subscriptions", "organizations_url": "https://api.github.com/users/hannes-brt/orgs", "repos_url": "https://api.github.com/users/hannes-brt/repos", "events_url": "https://api.github.com/users/hannes-brt/events{/privacy}", "received_events_url": "https://api.github.com/users/hannes-brt/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-09T18:38:52Z", "updated_at": "2017-01-09T18:38:52Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a>,</p>\n<p>the behaviour I'm seeing is kind of subtle, so hopefully I can describe it a little better.</p>\n<p>The graph creation works fine, the \"deadlock\" happens in <code>session.run</code>, when running the graph. By deadlock I mean that CPU load gets extremely high, such that the machine becomes unresponsive.</p>\n<p>This is quite certainly an issue with multi-threading. If I don't supply a ConfigProto to session.run, i.e. using the default parallelism settings, then I run into the deadlock after very iterations of the loop.</p>\n<p>If I set</p>\n<pre><code>tf.Session(config=tf.ConfigProto(\n        intra_op_parallelism_threads=1,\n        inter_op_parallelism_threads=1,\n        log_device_placement=True))\n</code></pre>\n<p>the script above should run forever without a problem.</p>\n<p><em>However,</em> my problem is that even when I restricted parallelism, executing a long-running training script would still encounter the CPU load explosion situation which would crash my machine. I'm not sure how I could create a standalone reproducible example of this issue, so I'm trying to reduce the issue to the root cause and it seems to me that the fact that decoding the TFRecords fails with default parallelism settings is the original problem here.</p>\n<p>I'm aware that <code>tf.parse_single_sequence_example</code> is inefficient, but there is no equivalent to <code>tf.parse_example</code> for sequence examples.</p>\n<p>I will use the Google profiling tools to generate profiles in both the multi-threaded and single-threaded case. Hopefully, this will give some additional clues.</p>", "body_text": "Thanks @yaroslavvb,\nthe behaviour I'm seeing is kind of subtle, so hopefully I can describe it a little better.\nThe graph creation works fine, the \"deadlock\" happens in session.run, when running the graph. By deadlock I mean that CPU load gets extremely high, such that the machine becomes unresponsive.\nThis is quite certainly an issue with multi-threading. If I don't supply a ConfigProto to session.run, i.e. using the default parallelism settings, then I run into the deadlock after very iterations of the loop.\nIf I set\ntf.Session(config=tf.ConfigProto(\n        intra_op_parallelism_threads=1,\n        inter_op_parallelism_threads=1,\n        log_device_placement=True))\n\nthe script above should run forever without a problem.\nHowever, my problem is that even when I restricted parallelism, executing a long-running training script would still encounter the CPU load explosion situation which would crash my machine. I'm not sure how I could create a standalone reproducible example of this issue, so I'm trying to reduce the issue to the root cause and it seems to me that the fact that decoding the TFRecords fails with default parallelism settings is the original problem here.\nI'm aware that tf.parse_single_sequence_example is inefficient, but there is no equivalent to tf.parse_example for sequence examples.\nI will use the Google profiling tools to generate profiles in both the multi-threaded and single-threaded case. Hopefully, this will give some additional clues.", "body": "Thanks @yaroslavvb,\r\n\r\nthe behaviour I'm seeing is kind of subtle, so hopefully I can describe it a little better.\r\n\r\nThe graph creation works fine, the \"deadlock\" happens in `session.run`, when running the graph. By deadlock I mean that CPU load gets extremely high, such that the machine becomes unresponsive.\r\n\r\nThis is quite certainly an issue with multi-threading. If I don't supply a ConfigProto to session.run, i.e. using the default parallelism settings, then I run into the deadlock after very iterations of the loop. \r\n\r\nIf I set \r\n```\r\ntf.Session(config=tf.ConfigProto(\r\n        intra_op_parallelism_threads=1,\r\n        inter_op_parallelism_threads=1,\r\n        log_device_placement=True))\r\n```\r\nthe script above should run forever without a problem.\r\n\r\n_However,_ my problem is that even when I restricted parallelism, executing a long-running training script would still encounter the CPU load explosion situation which would crash my machine. I'm not sure how I could create a standalone reproducible example of this issue, so I'm trying to reduce the issue to the root cause and it seems to me that the fact that decoding the TFRecords fails with default parallelism settings is the original problem here.\r\n\r\nI'm aware that `tf.parse_single_sequence_example` is inefficient, but there is no equivalent to `tf.parse_example` for sequence examples.\r\n\r\nI will use the Google profiling tools to generate profiles in both the multi-threaded and single-threaded case. Hopefully, this will give some additional clues."}