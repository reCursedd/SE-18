{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/255633245", "html_url": "https://github.com/tensorflow/tensorflow/issues/3009#issuecomment-255633245", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3009", "id": 255633245, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTYzMzI0NQ==", "user": {"login": "mkolod", "id": 476135, "node_id": "MDQ6VXNlcjQ3NjEzNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/476135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkolod", "html_url": "https://github.com/mkolod", "followers_url": "https://api.github.com/users/mkolod/followers", "following_url": "https://api.github.com/users/mkolod/following{/other_user}", "gists_url": "https://api.github.com/users/mkolod/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkolod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkolod/subscriptions", "organizations_url": "https://api.github.com/users/mkolod/orgs", "repos_url": "https://api.github.com/users/mkolod/repos", "events_url": "https://api.github.com/users/mkolod/events{/privacy}", "received_events_url": "https://api.github.com/users/mkolod/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-24T02:10:11Z", "updated_at": "2016-10-24T15:15:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11547801\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/prb12\">@prb12</a> I tried TCMalloc on AlexNet with 1-4 Pascal-grade GPUs (Titan X, GP100). The queues are doing the threading for the CPU-side JPEG decoding, and since GPUs have very high throughput, threading of the CPU-side code is critical here. TCMalloc does speed things up by 20% for 1-4 threads (inter/intra threads, threads associated with custom queues, etc.), but there's a break-even point at 8 threads, and beyond that TCMalloc does more harm than good. At 20 threads (e,g, on a 20-core Intel Xeon E7-8870 v4), perf. is actually 40% down by using TCMalloc rather than vanilla malloc in such a heavily threaded environment. So, I doubt that TCMalloc is a universally beneficial solution.</p>", "body_text": "@prb12 I tried TCMalloc on AlexNet with 1-4 Pascal-grade GPUs (Titan X, GP100). The queues are doing the threading for the CPU-side JPEG decoding, and since GPUs have very high throughput, threading of the CPU-side code is critical here. TCMalloc does speed things up by 20% for 1-4 threads (inter/intra threads, threads associated with custom queues, etc.), but there's a break-even point at 8 threads, and beyond that TCMalloc does more harm than good. At 20 threads (e,g, on a 20-core Intel Xeon E7-8870 v4), perf. is actually 40% down by using TCMalloc rather than vanilla malloc in such a heavily threaded environment. So, I doubt that TCMalloc is a universally beneficial solution.", "body": "@prb12 I tried TCMalloc on AlexNet with 1-4 Pascal-grade GPUs (Titan X, GP100). The queues are doing the threading for the CPU-side JPEG decoding, and since GPUs have very high throughput, threading of the CPU-side code is critical here. TCMalloc does speed things up by 20% for 1-4 threads (inter/intra threads, threads associated with custom queues, etc.), but there's a break-even point at 8 threads, and beyond that TCMalloc does more harm than good. At 20 threads (e,g, on a 20-core Intel Xeon E7-8870 v4), perf. is actually 40% down by using TCMalloc rather than vanilla malloc in such a heavily threaded environment. So, I doubt that TCMalloc is a universally beneficial solution.\n"}