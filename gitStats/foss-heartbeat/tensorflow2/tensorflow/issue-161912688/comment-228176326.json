{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/228176326", "html_url": "https://github.com/tensorflow/tensorflow/issues/3009#issuecomment-228176326", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3009", "id": 228176326, "node_id": "MDEyOklzc3VlQ29tbWVudDIyODE3NjMyNg==", "user": {"login": "prb12", "id": 11547801, "node_id": "MDQ6VXNlcjExNTQ3ODAx", "avatar_url": "https://avatars1.githubusercontent.com/u/11547801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prb12", "html_url": "https://github.com/prb12", "followers_url": "https://api.github.com/users/prb12/followers", "following_url": "https://api.github.com/users/prb12/following{/other_user}", "gists_url": "https://api.github.com/users/prb12/gists{/gist_id}", "starred_url": "https://api.github.com/users/prb12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prb12/subscriptions", "organizations_url": "https://api.github.com/users/prb12/orgs", "repos_url": "https://api.github.com/users/prb12/repos", "events_url": "https://api.github.com/users/prb12/events{/privacy}", "received_events_url": "https://api.github.com/users/prb12/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-23T20:38:38Z", "updated_at": "2016-06-23T20:38:38Z", "author_association": "MEMBER", "body_html": "<p>Thanks for including the timelines!  Nice to see people using that ;-)</p>\n<p>It's hard to say very much about what's happening here without seeing the whole program.  I don't <em>believe</em> that dequeueing 192MB is inherently that expensive.  (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> - does this sound right?)</p>\n<p>There are a number of things which might be happening.  Obviously <code>DequeueMany</code> is a blocking operation and the time it appears to take in the timeline will include all the time from when it was issued until when the final element was enqueued into the FIFO.  This timeline will not show the other, potentially concurrent steps which are happening.</p>\n<p>Are you enqueueing all 64 required elements before calling the step which dequeues them?<br>\nCan you contrive a test case where you put 64 elements into the queue in advance, and just run a step which does the dequeue?</p>", "body_text": "Thanks for including the timelines!  Nice to see people using that ;-)\nIt's hard to say very much about what's happening here without seeing the whole program.  I don't believe that dequeueing 192MB is inherently that expensive.  (@mrry - does this sound right?)\nThere are a number of things which might be happening.  Obviously DequeueMany is a blocking operation and the time it appears to take in the timeline will include all the time from when it was issued until when the final element was enqueued into the FIFO.  This timeline will not show the other, potentially concurrent steps which are happening.\nAre you enqueueing all 64 required elements before calling the step which dequeues them?\nCan you contrive a test case where you put 64 elements into the queue in advance, and just run a step which does the dequeue?", "body": "Thanks for including the timelines!  Nice to see people using that ;-)\n\nIt's hard to say very much about what's happening here without seeing the whole program.  I don't _believe_ that dequeueing 192MB is inherently that expensive.  (@mrry - does this sound right?)\n\nThere are a number of things which might be happening.  Obviously `DequeueMany` is a blocking operation and the time it appears to take in the timeline will include all the time from when it was issued until when the final element was enqueued into the FIFO.  This timeline will not show the other, potentially concurrent steps which are happening.\n\nAre you enqueueing all 64 required elements before calling the step which dequeues them? \nCan you contrive a test case where you put 64 elements into the queue in advance, and just run a step which does the dequeue?\n"}