{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/341467661", "html_url": "https://github.com/tensorflow/tensorflow/issues/14042#issuecomment-341467661", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14042", "id": 341467661, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTQ2NzY2MQ==", "user": {"login": "chahld", "id": 8064384, "node_id": "MDQ6VXNlcjgwNjQzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8064384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chahld", "html_url": "https://github.com/chahld", "followers_url": "https://api.github.com/users/chahld/followers", "following_url": "https://api.github.com/users/chahld/following{/other_user}", "gists_url": "https://api.github.com/users/chahld/gists{/gist_id}", "starred_url": "https://api.github.com/users/chahld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chahld/subscriptions", "organizations_url": "https://api.github.com/users/chahld/orgs", "repos_url": "https://api.github.com/users/chahld/repos", "events_url": "https://api.github.com/users/chahld/events{/privacy}", "received_events_url": "https://api.github.com/users/chahld/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-02T15:54:44Z", "updated_at": "2017-11-02T17:07:21Z", "author_association": "NONE", "body_html": "<p>I've created a kludgey solution by modifying the SummarySaverHook code and getting the summary op via tf.get_collections(tf.GraphKeys.SUMMARY_OP).  It may be better to create your own special op with just the summaries you want to see. Because a lot of the training summaries are not that useful when using evaluate.</p>\n<p>In my use case I want only one summary saved (to show example images and neuron response images. ), But maybe you can modify this to do whatever you want. NOTE: For some reason, my summary images were entirely black on the first execution of 'run'. So I skip that one. There's something going on that i don't understand.</p>\n<p>You pass this into the estimator.evaluate like this:</p>\n<div class=\"highlight highlight-source-python\"><pre>    hooks <span class=\"pl-k\">=</span> [EvalSummarySaverHook(<span class=\"pl-v\">output_dir</span><span class=\"pl-k\">=</span>eval_model_dir)]\n    eval_results <span class=\"pl-k\">=</span> eval_estimator.evaluate(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>eval_input_func, <span class=\"pl-v\">hooks</span><span class=\"pl-k\">=</span>hooks)</pre></div>\n<p>Here is the code: (tested on python 3.5 and tensorflow-gpu==1.3.0)</p>\n<div class=\"highlight highlight-source-python\"><pre>     <span class=\"pl-k\">class</span> <span class=\"pl-en\">EvalSummarySaverHook</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">train</span>.<span class=\"pl-e\">SessionRunHook</span>):\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Saves summaries during eval loop.<span class=\"pl-pds\">\"\"\"</span></span>\n\n        <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>,\n                     <span class=\"pl-smi\">output_dir</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>,\n                     <span class=\"pl-smi\">stop_after</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>):\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Initializes a special `SummarySaverHook` to run during evaluations</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">            Args:</span>\n<span class=\"pl-s\">              output_dir: `string`, the directory to save the summaries to.</span>\n<span class=\"pl-s\">            <span class=\"pl-pds\">\"\"\"</span></span>\n            <span class=\"pl-c1\">self</span>._summary_op <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>\n            <span class=\"pl-c1\">self</span>._output_dir <span class=\"pl-k\">=</span> output_dir\n            <span class=\"pl-c1\">self</span>._global_step_tensor <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>\n            <span class=\"pl-c1\">self</span>._stop_after <span class=\"pl-k\">=</span> stop_after\n            <span class=\"pl-c1\">self</span>._saves <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>\n\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">begin</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n            <span class=\"pl-c1\">self</span>._global_step_tensor <span class=\"pl-k\">=</span> tf.train.get_or_create_global_step()\n            <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>._global_step_tensor <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n                <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">RuntimeError</span>(\n                    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Global step should be created to use SummarySaverHook.<span class=\"pl-pds\">\"</span></span>)\n\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">before_run</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">run_context</span>):  <span class=\"pl-c\"><span class=\"pl-c\">#</span> pylint: disable=unused-argument</span>\n            requests <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>global_step<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">self</span>._global_step_tensor}\n            <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>._saves <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>: <span class=\"pl-c\"><span class=\"pl-c\">#</span> skip first time, because summaries only appear after first run</span>\n                <span class=\"pl-c1\">self</span>._saves <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n            <span class=\"pl-k\">elif</span> <span class=\"pl-c1\">self</span>._saves <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">self</span>._stop_after <span class=\"pl-k\">and</span> <span class=\"pl-c1\">self</span>._get_summary_op() <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n                requests[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>summary<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._get_summary_op()\n\n            <span class=\"pl-k\">return</span> tf.train.SessionRunArgs(requests)\n\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">after_run</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">run_context</span>, <span class=\"pl-smi\">run_values</span>):\n            _ <span class=\"pl-k\">=</span> run_context\n            <span class=\"pl-k\">if</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>summary<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">in</span> run_values.results:\n                <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Saving eval summaries<span class=\"pl-pds\">'</span></span>)\n                global_step <span class=\"pl-k\">=</span> run_values.results[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>global_step<span class=\"pl-pds\">\"</span></span>]\n                summary_writer <span class=\"pl-k\">=</span> tf.summary.FileWriterCache.get(<span class=\"pl-c1\">self</span>._output_dir)\n\n                <span class=\"pl-k\">for</span> summary <span class=\"pl-k\">in</span> run_values.results[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>summary<span class=\"pl-pds\">\"</span></span>]:\n                    summary_writer.add_summary(summary, global_step)\n\n                <span class=\"pl-c1\">self</span>._saves <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">1</span>\n\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">end</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">session</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n            _ <span class=\"pl-k\">=</span> session\n            summary_writer <span class=\"pl-k\">=</span> tf.summary.FileWriterCache.get(<span class=\"pl-c1\">self</span>._output_dir)\n            summary_writer.flush()\n\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">_get_summary_op</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Fetches the summary op from collections</span>\n<span class=\"pl-s\">            <span class=\"pl-pds\">\"\"\"</span></span>\n\n            <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>._summary_op <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n                <span class=\"pl-c1\">self</span>._summary_op <span class=\"pl-k\">=</span> tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">SUMMARY_OP</span>)\n\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._summary_op</pre></div>", "body_text": "I've created a kludgey solution by modifying the SummarySaverHook code and getting the summary op via tf.get_collections(tf.GraphKeys.SUMMARY_OP).  It may be better to create your own special op with just the summaries you want to see. Because a lot of the training summaries are not that useful when using evaluate.\nIn my use case I want only one summary saved (to show example images and neuron response images. ), But maybe you can modify this to do whatever you want. NOTE: For some reason, my summary images were entirely black on the first execution of 'run'. So I skip that one. There's something going on that i don't understand.\nYou pass this into the estimator.evaluate like this:\n    hooks = [EvalSummarySaverHook(output_dir=eval_model_dir)]\n    eval_results = eval_estimator.evaluate(input_fn=eval_input_func, hooks=hooks)\nHere is the code: (tested on python 3.5 and tensorflow-gpu==1.3.0)\n     class EvalSummarySaverHook(tf.train.SessionRunHook):\n        \"\"\"Saves summaries during eval loop.\"\"\"\n\n        def __init__(self,\n                     output_dir=None,\n                     stop_after=1):\n            \"\"\"Initializes a special `SummarySaverHook` to run during evaluations\n\n            Args:\n              output_dir: `string`, the directory to save the summaries to.\n            \"\"\"\n            self._summary_op = None\n            self._output_dir = output_dir\n            self._global_step_tensor = None\n            self._stop_after = stop_after\n            self._saves = None\n\n        def begin(self):\n            self._global_step_tensor = tf.train.get_or_create_global_step()\n            if self._global_step_tensor is None:\n                raise RuntimeError(\n                    \"Global step should be created to use SummarySaverHook.\")\n\n        def before_run(self, run_context):  # pylint: disable=unused-argument\n            requests = {\"global_step\": self._global_step_tensor}\n            if self._saves is None: # skip first time, because summaries only appear after first run\n                self._saves = 0\n            elif self._saves < self._stop_after and self._get_summary_op() is not None:\n                requests[\"summary\"] = self._get_summary_op()\n\n            return tf.train.SessionRunArgs(requests)\n\n        def after_run(self, run_context, run_values):\n            _ = run_context\n            if \"summary\" in run_values.results:\n                print('Saving eval summaries')\n                global_step = run_values.results[\"global_step\"]\n                summary_writer = tf.summary.FileWriterCache.get(self._output_dir)\n\n                for summary in run_values.results[\"summary\"]:\n                    summary_writer.add_summary(summary, global_step)\n\n                self._saves += 1\n\n        def end(self, session=None):\n            _ = session\n            summary_writer = tf.summary.FileWriterCache.get(self._output_dir)\n            summary_writer.flush()\n\n        def _get_summary_op(self):\n            \"\"\"Fetches the summary op from collections\n            \"\"\"\n\n            if self._summary_op is None:\n                self._summary_op = tf.get_collection(tf.GraphKeys.SUMMARY_OP)\n\n            return self._summary_op", "body": "I've created a kludgey solution by modifying the SummarySaverHook code and getting the summary op via tf.get_collections(tf.GraphKeys.SUMMARY_OP).  It may be better to create your own special op with just the summaries you want to see. Because a lot of the training summaries are not that useful when using evaluate. \r\n\r\n\r\nIn my use case I want only one summary saved (to show example images and neuron response images. ), But maybe you can modify this to do whatever you want. NOTE: For some reason, my summary images were entirely black on the first execution of 'run'. So I skip that one. There's something going on that i don't understand.\r\n\r\nYou pass this into the estimator.evaluate like this:\r\n\r\n```python\r\n    hooks = [EvalSummarySaverHook(output_dir=eval_model_dir)]\r\n    eval_results = eval_estimator.evaluate(input_fn=eval_input_func, hooks=hooks)\r\n```\r\n\r\nHere is the code: (tested on python 3.5 and tensorflow-gpu==1.3.0)\r\n```python\r\n     class EvalSummarySaverHook(tf.train.SessionRunHook):\r\n        \"\"\"Saves summaries during eval loop.\"\"\"\r\n\r\n        def __init__(self,\r\n                     output_dir=None,\r\n                     stop_after=1):\r\n            \"\"\"Initializes a special `SummarySaverHook` to run during evaluations\r\n\r\n            Args:\r\n              output_dir: `string`, the directory to save the summaries to.\r\n            \"\"\"\r\n            self._summary_op = None\r\n            self._output_dir = output_dir\r\n            self._global_step_tensor = None\r\n            self._stop_after = stop_after\r\n            self._saves = None\r\n\r\n        def begin(self):\r\n            self._global_step_tensor = tf.train.get_or_create_global_step()\r\n            if self._global_step_tensor is None:\r\n                raise RuntimeError(\r\n                    \"Global step should be created to use SummarySaverHook.\")\r\n\r\n        def before_run(self, run_context):  # pylint: disable=unused-argument\r\n            requests = {\"global_step\": self._global_step_tensor}\r\n            if self._saves is None: # skip first time, because summaries only appear after first run\r\n                self._saves = 0\r\n            elif self._saves < self._stop_after and self._get_summary_op() is not None:\r\n                requests[\"summary\"] = self._get_summary_op()\r\n\r\n            return tf.train.SessionRunArgs(requests)\r\n\r\n        def after_run(self, run_context, run_values):\r\n            _ = run_context\r\n            if \"summary\" in run_values.results:\r\n                print('Saving eval summaries')\r\n                global_step = run_values.results[\"global_step\"]\r\n                summary_writer = tf.summary.FileWriterCache.get(self._output_dir)\r\n\r\n                for summary in run_values.results[\"summary\"]:\r\n                    summary_writer.add_summary(summary, global_step)\r\n\r\n                self._saves += 1\r\n\r\n        def end(self, session=None):\r\n            _ = session\r\n            summary_writer = tf.summary.FileWriterCache.get(self._output_dir)\r\n            summary_writer.flush()\r\n\r\n        def _get_summary_op(self):\r\n            \"\"\"Fetches the summary op from collections\r\n            \"\"\"\r\n\r\n            if self._summary_op is None:\r\n                self._summary_op = tf.get_collection(tf.GraphKeys.SUMMARY_OP)\r\n\r\n            return self._summary_op\r\n```\r\n"}