{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269377204", "html_url": "https://github.com/tensorflow/tensorflow/issues/1823#issuecomment-269377204", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1823", "id": 269377204, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTM3NzIwNA==", "user": {"login": "danielgordon10", "id": 7245472, "node_id": "MDQ6VXNlcjcyNDU0NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/7245472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielgordon10", "html_url": "https://github.com/danielgordon10", "followers_url": "https://api.github.com/users/danielgordon10/followers", "following_url": "https://api.github.com/users/danielgordon10/following{/other_user}", "gists_url": "https://api.github.com/users/danielgordon10/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielgordon10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielgordon10/subscriptions", "organizations_url": "https://api.github.com/users/danielgordon10/orgs", "repos_url": "https://api.github.com/users/danielgordon10/repos", "events_url": "https://api.github.com/users/danielgordon10/events{/privacy}", "received_events_url": "https://api.github.com/users/danielgordon10/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-27T20:17:16Z", "updated_at": "2016-12-27T20:17:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think it's way more user-friendly to allow new names, new shapes, and removed variables (Caffe style). This code seems to get that job done. I call it after running the global init operation.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">optimistic_restore</span>(<span class=\"pl-smi\">session</span>, <span class=\"pl-smi\">save_file</span>):\n    reader <span class=\"pl-k\">=</span> tf.train.NewCheckpointReader(save_file)\n    saved_shapes <span class=\"pl-k\">=</span> reader.get_variable_to_shape_map()\n    var_names <span class=\"pl-k\">=</span> <span class=\"pl-c1\">sorted</span>([(var.name, var.name.split(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>:<span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">0</span>]) <span class=\"pl-k\">for</span> var <span class=\"pl-k\">in</span> tf.global_variables()\n            <span class=\"pl-k\">if</span> var.name.split(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>:<span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">in</span> saved_shapes])\n    restore_vars <span class=\"pl-k\">=</span> []\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>):\n        <span class=\"pl-k\">for</span> var_name, saved_var_name <span class=\"pl-k\">in</span> var_names:\n            curr_var <span class=\"pl-k\">=</span> tf.get_variable(saved_var_name)\n            var_shape <span class=\"pl-k\">=</span> curr_var.get_shape().as_list()\n            <span class=\"pl-k\">if</span> var_shape <span class=\"pl-k\">==</span> saved_shapes[saved_var_name]:\n                restore_vars.append(curr_var)\n    saver <span class=\"pl-k\">=</span> tf.train.Saver(restore_vars)\n    saver.restore(session, save_file)</pre></div>", "body_text": "I think it's way more user-friendly to allow new names, new shapes, and removed variables (Caffe style). This code seems to get that job done. I call it after running the global init operation.\ndef optimistic_restore(session, save_file):\n    reader = tf.train.NewCheckpointReader(save_file)\n    saved_shapes = reader.get_variable_to_shape_map()\n    var_names = sorted([(var.name, var.name.split(':')[0]) for var in tf.global_variables()\n            if var.name.split(':')[0] in saved_shapes])\n    restore_vars = []\n    with tf.variable_scope('', reuse=True):\n        for var_name, saved_var_name in var_names:\n            curr_var = tf.get_variable(saved_var_name)\n            var_shape = curr_var.get_shape().as_list()\n            if var_shape == saved_shapes[saved_var_name]:\n                restore_vars.append(curr_var)\n    saver = tf.train.Saver(restore_vars)\n    saver.restore(session, save_file)", "body": "I think it's way more user-friendly to allow new names, new shapes, and removed variables (Caffe style). This code seems to get that job done. I call it after running the global init operation.\r\n\r\n```python\r\ndef optimistic_restore(session, save_file):\r\n    reader = tf.train.NewCheckpointReader(save_file)\r\n    saved_shapes = reader.get_variable_to_shape_map()\r\n    var_names = sorted([(var.name, var.name.split(':')[0]) for var in tf.global_variables()\r\n            if var.name.split(':')[0] in saved_shapes])\r\n    restore_vars = []\r\n    with tf.variable_scope('', reuse=True):\r\n        for var_name, saved_var_name in var_names:\r\n            curr_var = tf.get_variable(saved_var_name)\r\n            var_shape = curr_var.get_shape().as_list()\r\n            if var_shape == saved_shapes[saved_var_name]:\r\n                restore_vars.append(curr_var)\r\n    saver = tf.train.Saver(restore_vars)\r\n    saver.restore(session, save_file)\r\n```"}