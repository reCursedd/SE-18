{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/236314435", "html_url": "https://github.com/tensorflow/tensorflow/issues/1823#issuecomment-236314435", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1823", "id": 236314435, "node_id": "MDEyOklzc3VlQ29tbWVudDIzNjMxNDQzNQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-29T23:00:23Z", "updated_at": "2016-07-29T23:00:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It looks like there's no documentation for this API (indeed, it's in generated code, so there's no source code for it either). Here's a quick guide (though note that this is subject to change between versions):</p>\n<ul>\n<li><code>tf.train.NewCheckpointReader(filename)</code>: returns a checkpoint reader for the given file. (I believe this has an auto-generated type, though it implements the same interface as <a href=\"https://github.com/tensorflow/tensorflow/blob/b0166b8b07a0f134cea3bfbe9a55a7c9f887ba3a/tensorflow/core/util/checkpoint_reader.h\"><code>tensorflow::checkpoint::CheckpointReader</code></a>, so we'll call it <code>CheckpointReader</code>.</li>\n<li><code>CheckpointReader.has_tensor(tensor_name)</code>: returns <code>True</code> if a tensor with the given name is in the checkpoint, otherwise <code>False</code>.</li>\n<li><code>CheckpointReader.get_tensor(tensor_name)</code>: returns a NumPy array containing the containing the value of the tensor with the given name from the checkpoint.</li>\n<li><code>CheckpointReader.get_variable_to_shape_map()</code>: returns a dict mapping tensor names to lists of ints, representing the shape of the corresponding tensor in the checkpoint.</li>\n</ul>", "body_text": "It looks like there's no documentation for this API (indeed, it's in generated code, so there's no source code for it either). Here's a quick guide (though note that this is subject to change between versions):\n\ntf.train.NewCheckpointReader(filename): returns a checkpoint reader for the given file. (I believe this has an auto-generated type, though it implements the same interface as tensorflow::checkpoint::CheckpointReader, so we'll call it CheckpointReader.\nCheckpointReader.has_tensor(tensor_name): returns True if a tensor with the given name is in the checkpoint, otherwise False.\nCheckpointReader.get_tensor(tensor_name): returns a NumPy array containing the containing the value of the tensor with the given name from the checkpoint.\nCheckpointReader.get_variable_to_shape_map(): returns a dict mapping tensor names to lists of ints, representing the shape of the corresponding tensor in the checkpoint.", "body": "It looks like there's no documentation for this API (indeed, it's in generated code, so there's no source code for it either). Here's a quick guide (though note that this is subject to change between versions):\n- `tf.train.NewCheckpointReader(filename)`: returns a checkpoint reader for the given file. (I believe this has an auto-generated type, though it implements the same interface as [`tensorflow::checkpoint::CheckpointReader`](https://github.com/tensorflow/tensorflow/blob/b0166b8b07a0f134cea3bfbe9a55a7c9f887ba3a/tensorflow/core/util/checkpoint_reader.h), so we'll call it `CheckpointReader`.\n- `CheckpointReader.has_tensor(tensor_name)`: returns `True` if a tensor with the given name is in the checkpoint, otherwise `False`.\n- `CheckpointReader.get_tensor(tensor_name)`: returns a NumPy array containing the containing the value of the tensor with the given name from the checkpoint.\n- `CheckpointReader.get_variable_to_shape_map()`: returns a dict mapping tensor names to lists of ints, representing the shape of the corresponding tensor in the checkpoint.\n"}