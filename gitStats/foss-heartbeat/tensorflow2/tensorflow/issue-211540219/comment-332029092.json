{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/332029092", "html_url": "https://github.com/tensorflow/tensorflow/issues/8033#issuecomment-332029092", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8033", "id": 332029092, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjAyOTA5Mg==", "user": {"login": "guillaume-michel", "id": 935309, "node_id": "MDQ6VXNlcjkzNTMwOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/935309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guillaume-michel", "html_url": "https://github.com/guillaume-michel", "followers_url": "https://api.github.com/users/guillaume-michel/followers", "following_url": "https://api.github.com/users/guillaume-michel/following{/other_user}", "gists_url": "https://api.github.com/users/guillaume-michel/gists{/gist_id}", "starred_url": "https://api.github.com/users/guillaume-michel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guillaume-michel/subscriptions", "organizations_url": "https://api.github.com/users/guillaume-michel/orgs", "repos_url": "https://api.github.com/users/guillaume-michel/repos", "events_url": "https://api.github.com/users/guillaume-michel/events{/privacy}", "received_events_url": "https://api.github.com/users/guillaume-michel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-25T22:12:46Z", "updated_at": "2017-09-25T22:18:03Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=506166\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pdrews\">@pdrews</a> In your case you can allocate a Tensor with the C++ API then use flat to get a pointer to the memory for that particular tensor.<br>\nWith that pointer you can use cv::Mat(rows, cols, type, pointer) constructor to fake a cv::Mat with the memory from the Tensor.</p>\n<p>Then just use your cv::Mat.</p>\n<p>Untested code:</p>\n<pre><code>// allocate a Tensor\nTensor inputImg(DT_FLOAT, TensorShape({1,inputHeight,inputWidth,3}));\n\n// get pointer to memory for that Tensor\nfloat *p = inputImg.flat&lt;float&gt;().data();\n// create a \"fake\" cv::Mat from it \ncv::Mat cameraImg(inputHeight, inputWidth, CV_32FC3, p);\n\n// use it here as a destination\ncv::Mat imagePixels = ...; // get data from your video pipeline\nimagePixels.convertTo(cameraImg, CV_32FC3);\n</code></pre>\n<p>Hope this helps</p>", "body_text": "@pdrews In your case you can allocate a Tensor with the C++ API then use flat to get a pointer to the memory for that particular tensor.\nWith that pointer you can use cv::Mat(rows, cols, type, pointer) constructor to fake a cv::Mat with the memory from the Tensor.\nThen just use your cv::Mat.\nUntested code:\n// allocate a Tensor\nTensor inputImg(DT_FLOAT, TensorShape({1,inputHeight,inputWidth,3}));\n\n// get pointer to memory for that Tensor\nfloat *p = inputImg.flat<float>().data();\n// create a \"fake\" cv::Mat from it \ncv::Mat cameraImg(inputHeight, inputWidth, CV_32FC3, p);\n\n// use it here as a destination\ncv::Mat imagePixels = ...; // get data from your video pipeline\nimagePixels.convertTo(cameraImg, CV_32FC3);\n\nHope this helps", "body": "@pdrews In your case you can allocate a Tensor with the C++ API then use flat to get a pointer to the memory for that particular tensor.\r\nWith that pointer you can use cv::Mat(rows, cols, type, pointer) constructor to fake a cv::Mat with the memory from the Tensor.\r\n\r\nThen just use your cv::Mat.\r\n\r\nUntested code:\r\n```\r\n// allocate a Tensor\r\nTensor inputImg(DT_FLOAT, TensorShape({1,inputHeight,inputWidth,3}));\r\n\r\n// get pointer to memory for that Tensor\r\nfloat *p = inputImg.flat<float>().data();\r\n// create a \"fake\" cv::Mat from it \r\ncv::Mat cameraImg(inputHeight, inputWidth, CV_32FC3, p);\r\n\r\n// use it here as a destination\r\ncv::Mat imagePixels = ...; // get data from your video pipeline\r\nimagePixels.convertTo(cameraImg, CV_32FC3);\r\n```\r\nHope this helps"}