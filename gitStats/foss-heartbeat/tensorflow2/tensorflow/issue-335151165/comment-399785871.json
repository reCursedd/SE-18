{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/399785871", "html_url": "https://github.com/tensorflow/tensorflow/issues/20258#issuecomment-399785871", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20258", "id": 399785871, "node_id": "MDEyOklzc3VlQ29tbWVudDM5OTc4NTg3MQ==", "user": {"login": "ZigaSajovic", "id": 10235589, "node_id": "MDQ6VXNlcjEwMjM1NTg5", "avatar_url": "https://avatars0.githubusercontent.com/u/10235589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZigaSajovic", "html_url": "https://github.com/ZigaSajovic", "followers_url": "https://api.github.com/users/ZigaSajovic/followers", "following_url": "https://api.github.com/users/ZigaSajovic/following{/other_user}", "gists_url": "https://api.github.com/users/ZigaSajovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZigaSajovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZigaSajovic/subscriptions", "organizations_url": "https://api.github.com/users/ZigaSajovic/orgs", "repos_url": "https://api.github.com/users/ZigaSajovic/repos", "events_url": "https://api.github.com/users/ZigaSajovic/events{/privacy}", "received_events_url": "https://api.github.com/users/ZigaSajovic/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-24T20:38:15Z", "updated_at": "2018-06-24T22:57:52Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=40479001\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/MarkGreeny\">@MarkGreeny</a></p>\n<p>To make your example complete, you need to specify the <code>num</code> parameter, as the <code>tf.linspace</code> requires it.</p>\n<pre><code>A=tf.constant(np.array([1.,2.,3.])) \nB=tf.constant(np.array([3.,4.,5.])) \nN=3#or any integer you'd like \n</code></pre>\n<p>With that in mind, your request is fulfilled by</p>\n<pre><code>def batched_linspace(from_,to_,N):\n  fromto=tf.stack([from_,to_],axis=-1)\n  return tf.map_fn(lambda ft: tf.linspace(ft[0],ft[1],N), fromto)\n\nsess.run(batched_linspace(A,B,N))\n</code></pre>\n<p>which promptly returns</p>\n<blockquote>\n<p>array([[1., 2., 3.],<br>\n[2., 3., 4.],<br>\n[3., 4., 5.]])</p>\n</blockquote>\n<p>as requested.</p>\n<p>Try to think about TensorFlow, like <strong>Linear Algebra + Functional Programming.</strong>. Its all here.</p>", "body_text": "@MarkGreeny\nTo make your example complete, you need to specify the num parameter, as the tf.linspace requires it.\nA=tf.constant(np.array([1.,2.,3.])) \nB=tf.constant(np.array([3.,4.,5.])) \nN=3#or any integer you'd like \n\nWith that in mind, your request is fulfilled by\ndef batched_linspace(from_,to_,N):\n  fromto=tf.stack([from_,to_],axis=-1)\n  return tf.map_fn(lambda ft: tf.linspace(ft[0],ft[1],N), fromto)\n\nsess.run(batched_linspace(A,B,N))\n\nwhich promptly returns\n\narray([[1., 2., 3.],\n[2., 3., 4.],\n[3., 4., 5.]])\n\nas requested.\nTry to think about TensorFlow, like Linear Algebra + Functional Programming.. Its all here.", "body": "@MarkGreeny \r\n\r\nTo make your example complete, you need to specify the `num` parameter, as the `tf.linspace` requires it.\r\n\r\n    A=tf.constant(np.array([1.,2.,3.])) \r\n    B=tf.constant(np.array([3.,4.,5.])) \r\n    N=3#or any integer you'd like \r\n\r\nWith that in mind, your request is fulfilled by\r\n\r\n    def batched_linspace(from_,to_,N):\r\n      fromto=tf.stack([from_,to_],axis=-1)\r\n      return tf.map_fn(lambda ft: tf.linspace(ft[0],ft[1],N), fromto)\r\n\r\n    sess.run(batched_linspace(A,B,N))\r\n\r\nwhich promptly returns\r\n\r\n> array([[1., 2., 3.],\r\n       [2., 3., 4.],\r\n       [3., 4., 5.]])\r\n\r\nas requested.\r\n\r\nTry to think about TensorFlow, like **Linear Algebra + Functional Programming.**. Its all here."}