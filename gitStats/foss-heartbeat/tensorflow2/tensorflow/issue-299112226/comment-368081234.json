{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/368081234", "html_url": "https://github.com/tensorflow/tensorflow/issues/17175#issuecomment-368081234", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17175", "id": 368081234, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODA4MTIzNA==", "user": {"login": "ipeirotis", "id": 152561, "node_id": "MDQ6VXNlcjE1MjU2MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/152561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipeirotis", "html_url": "https://github.com/ipeirotis", "followers_url": "https://api.github.com/users/ipeirotis/followers", "following_url": "https://api.github.com/users/ipeirotis/following{/other_user}", "gists_url": "https://api.github.com/users/ipeirotis/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipeirotis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipeirotis/subscriptions", "organizations_url": "https://api.github.com/users/ipeirotis/orgs", "repos_url": "https://api.github.com/users/ipeirotis/repos", "events_url": "https://api.github.com/users/ipeirotis/events{/privacy}", "received_events_url": "https://api.github.com/users/ipeirotis/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-23T17:34:04Z", "updated_at": "2018-02-23T20:43:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The problem is the regex at:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/special_math_ops.py#L166\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/special_math_ops.py#L166</a></p>\n<p><code>match = re.match('([a-z,]+)(-&gt;[a-z]*)?', equation)</code></p>\n<p>which allows the <code>(-&gt;[a-z]*)?</code> to be optional. Since space is not accepted by the regex, the parsing of the <code>equation</code> variable stops once a space character is encountered. If the space appears before the -&gt; character, then the code tries to infer the dimensions of the output, ignoring the equation instructions after the <code>-&gt;</code> characters.</p>\n<p>Changing the code to:</p>\n<p><code>match = re.match('^([a-z,]+)(-&gt;[a-z]*)?$', equation)</code></p>\n<p>will resolve the issue, forcing the equation to be fully parsed.</p>\n<p>Note that there is code replication at<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/special_math_ops.py#L405\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/special_math_ops.py#L405</a> and the code needs to be fixed there as well.</p>\n<p>Just in case, the parsing logic for the <code>einsum</code> implementation in numpy is at <a href=\"https://github.com/numpy/numpy/blob/master/numpy/core/src/multiarray/einsum.c.src#L2640\">https://github.com/numpy/numpy/blob/master/numpy/core/src/multiarray/einsum.c.src#L2640</a></p>", "body_text": "The problem is the regex at:\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/special_math_ops.py#L166\nmatch = re.match('([a-z,]+)(->[a-z]*)?', equation)\nwhich allows the (->[a-z]*)? to be optional. Since space is not accepted by the regex, the parsing of the equation variable stops once a space character is encountered. If the space appears before the -> character, then the code tries to infer the dimensions of the output, ignoring the equation instructions after the -> characters.\nChanging the code to:\nmatch = re.match('^([a-z,]+)(->[a-z]*)?$', equation)\nwill resolve the issue, forcing the equation to be fully parsed.\nNote that there is code replication at\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/special_math_ops.py#L405 and the code needs to be fixed there as well.\nJust in case, the parsing logic for the einsum implementation in numpy is at https://github.com/numpy/numpy/blob/master/numpy/core/src/multiarray/einsum.c.src#L2640", "body": "The problem is the regex at:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/special_math_ops.py#L166\r\n\r\n`match = re.match('([a-z,]+)(->[a-z]*)?', equation)`\r\n\r\nwhich allows the `(->[a-z]*)?` to be optional. Since space is not accepted by the regex, the parsing of the `equation` variable stops once a space character is encountered. If the space appears before the -> character, then the code tries to infer the dimensions of the output, ignoring the equation instructions after the `->` characters.\r\n\r\nChanging the code to:\r\n\r\n`match = re.match('^([a-z,]+)(->[a-z]*)?$', equation)`\r\n\r\nwill resolve the issue, forcing the equation to be fully parsed.\r\n\r\nNote that there is code replication at \r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/special_math_ops.py#L405 and the code needs to be fixed there as well.\r\n\r\nJust in case, the parsing logic for the `einsum` implementation in numpy is at https://github.com/numpy/numpy/blob/master/numpy/core/src/multiarray/einsum.c.src#L2640"}