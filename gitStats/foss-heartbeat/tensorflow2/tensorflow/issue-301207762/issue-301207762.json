{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17333", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17333/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17333/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17333/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17333", "id": 301207762, "node_id": "MDU6SXNzdWUzMDEyMDc3NjI=", "number": 17333, "title": "map_fn produces inconsistent results when using numpy vs. tf constants", "user": {"login": "lichunshang", "id": 5762200, "node_id": "MDQ6VXNlcjU3NjIyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5762200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lichunshang", "html_url": "https://github.com/lichunshang", "followers_url": "https://api.github.com/users/lichunshang/followers", "following_url": "https://api.github.com/users/lichunshang/following{/other_user}", "gists_url": "https://api.github.com/users/lichunshang/gists{/gist_id}", "starred_url": "https://api.github.com/users/lichunshang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lichunshang/subscriptions", "organizations_url": "https://api.github.com/users/lichunshang/orgs", "repos_url": "https://api.github.com/users/lichunshang/repos", "events_url": "https://api.github.com/users/lichunshang/events{/privacy}", "received_events_url": "https://api.github.com/users/lichunshang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-28T22:26:52Z", "updated_at": "2018-03-03T03:50:00Z", "closed_at": "2018-03-03T03:50:00Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Nope</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.5</li>\n<li><strong>Python version</strong>: 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 9, cudnn 7</li>\n<li><strong>GPU model and memory</strong>: Quadro M1200 4GB</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>According to the map_fn docs, second example <a href=\"https://www.tensorflow.org/api_docs/python/tf/map_fn\" rel=\"nofollow\">https://www.tensorflow.org/api_docs/python/tf/map_fn</a></p>\n<pre><code>elems = (np.array([1, 2, 3]), np.array([-1, 1, -1]))\nalternate = map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)\n## alternate == [-1, 2, -3]\n</code></pre>\n<p>I ran this</p>\n<pre><code>elems = (np.array([1, 2, 3]), np.array([-1, 1, -1]))\noutput = tf.map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)\nsess = tf.Session()\nprint(sess.run(output))\n</code></pre>\n<p>which returns <code>[-1  2 -3]</code> as expected</p>\n<p>But if I run</p>\n<pre><code>elems = tf.constant(((1, 2, 3), (-1, 1, -1)), dtype=tf.int64)\noutput = tf.map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)\nsess = tf.Session()\nprint(sess.run(output))\n</code></pre>\n<p>The output is <code>[2 -1]</code>, which is not what I expected since the input is the same numbers with the same shape.</p>\n<p>The output should be the same? Is there something special going on with numpy arrays?</p>\n<p>Interesting read: <a href=\"https://stackoverflow.com/questions/45905601/how-does-tf-map-fn-work\" rel=\"nofollow\">https://stackoverflow.com/questions/45905601/how-does-tf-map-fn-work</a></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Nope\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.5\nPython version: 3.5.2\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: CUDA 9, cudnn 7\nGPU model and memory: Quadro M1200 4GB\nExact command to reproduce: See below\n\nDescribe the problem\nAccording to the map_fn docs, second example https://www.tensorflow.org/api_docs/python/tf/map_fn\nelems = (np.array([1, 2, 3]), np.array([-1, 1, -1]))\nalternate = map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)\n## alternate == [-1, 2, -3]\n\nI ran this\nelems = (np.array([1, 2, 3]), np.array([-1, 1, -1]))\noutput = tf.map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)\nsess = tf.Session()\nprint(sess.run(output))\n\nwhich returns [-1  2 -3] as expected\nBut if I run\nelems = tf.constant(((1, 2, 3), (-1, 1, -1)), dtype=tf.int64)\noutput = tf.map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)\nsess = tf.Session()\nprint(sess.run(output))\n\nThe output is [2 -1], which is not what I expected since the input is the same numbers with the same shape.\nThe output should be the same? Is there something special going on with numpy arrays?\nInteresting read: https://stackoverflow.com/questions/45905601/how-does-tf-map-fn-work", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Nope\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.5\r\n- **Python version**: 3.5.2\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: CUDA 9, cudnn 7\r\n- **GPU model and memory**: Quadro M1200 4GB\r\n- **Exact command to reproduce**: See below\r\n\r\n### Describe the problem\r\nAccording to the map_fn docs, second example https://www.tensorflow.org/api_docs/python/tf/map_fn\r\n\r\n```\r\nelems = (np.array([1, 2, 3]), np.array([-1, 1, -1]))\r\nalternate = map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)\r\n## alternate == [-1, 2, -3]\r\n```\r\n\r\nI ran this\r\n\r\n```\r\nelems = (np.array([1, 2, 3]), np.array([-1, 1, -1]))\r\noutput = tf.map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)\r\nsess = tf.Session()\r\nprint(sess.run(output))\r\n```\r\n\r\nwhich returns `[-1  2 -3]` as expected\r\n\r\nBut if I run\r\n\r\n```\r\nelems = tf.constant(((1, 2, 3), (-1, 1, -1)), dtype=tf.int64)\r\noutput = tf.map_fn(lambda x: x[0] * x[1], elems, dtype=tf.int64)\r\nsess = tf.Session()\r\nprint(sess.run(output))\r\n```\r\n\r\nThe output is `[2 -1]`, which is not what I expected since the input is the same numbers with the same shape.\r\n\r\nThe output should be the same? Is there something special going on with numpy arrays?\r\n\r\nInteresting read: https://stackoverflow.com/questions/45905601/how-does-tf-map-fn-work"}