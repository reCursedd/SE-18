{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23374", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23374/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23374/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23374/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23374", "id": 375438098, "node_id": "MDU6SXNzdWUzNzU0MzgwOTg=", "number": 23374, "title": "build libtensorflow_cc.so with debug symbols using bazel", "user": {"login": "eslamahmedkhair", "id": 29451942, "node_id": "MDQ6VXNlcjI5NDUxOTQy", "avatar_url": "https://avatars0.githubusercontent.com/u/29451942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eslamahmedkhair", "html_url": "https://github.com/eslamahmedkhair", "followers_url": "https://api.github.com/users/eslamahmedkhair/followers", "following_url": "https://api.github.com/users/eslamahmedkhair/following{/other_user}", "gists_url": "https://api.github.com/users/eslamahmedkhair/gists{/gist_id}", "starred_url": "https://api.github.com/users/eslamahmedkhair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eslamahmedkhair/subscriptions", "organizations_url": "https://api.github.com/users/eslamahmedkhair/orgs", "repos_url": "https://api.github.com/users/eslamahmedkhair/repos", "events_url": "https://api.github.com/users/eslamahmedkhair/events{/privacy}", "received_events_url": "https://api.github.com/users/eslamahmedkhair/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173351, "node_id": "MDU6TGFiZWw0NzMxNzMzNTE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:build/install", "name": "type:build/install", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-10-30T11:19:33Z", "updated_at": "2018-11-14T19:12:30Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>OS Platform and Distribution: Linux Ubuntu 16.04</li>\n<li>TensorFlow installed from (source or binary): source</li>\n<li>TensorFlow version: 1.8.0</li>\n<li>Python version: Python 2.7.12</li>\n<li>Installed using virtualenv? pip? conda?: No</li>\n<li>Bazel version (if compiling from source): 0.16.1</li>\n<li>GCC/Compiler version (if compiling from source): gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)</li>\n<li>CUDA/cuDNN version: 9.2/7.2.1</li>\n<li>GPU model and memory: Tesla K40c 12 GB VRAM</li>\n</ul>\n<p><strong>Describe the problem</strong><br>\nI need to debug <code>libtensorflow_cc.so</code> to trace some other issue. I learned from <code>bazel</code> that I need to pass the following flag <code>-c dbg</code> -probably this one too <code>--strip=never</code>- while building the library. I noticed a significant increase in the binary size which makes sense! yet I'm still unable to step into the library code.</p>\n<p><strong>Provide the exact sequence of commands / steps that you executed before running into the problem</strong><br>\n<code>bazel build --config=opt --config=cuda --config=monolithic tensorflow:libtensorflow_cc.so</code></p>\n<p><strong>Any other info / logs</strong></p>\n<ul>\n<li>I passed <code>--config=monolithic</code> to resolve OpenCV's <code>imread</code> issue always returning a 0x0 mat.</li>\n<li>Furthermore, the binary built with  <code>-c dbg</code> and <code>--strip=never</code>, failed to load my model that was loaded correctly before passing those flags. but we can discuss it in a different issue if we resolve this one first.</li>\n</ul>", "body_text": "System information\n\nOS Platform and Distribution: Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): source\nTensorFlow version: 1.8.0\nPython version: Python 2.7.12\nInstalled using virtualenv? pip? conda?: No\nBazel version (if compiling from source): 0.16.1\nGCC/Compiler version (if compiling from source): gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)\nCUDA/cuDNN version: 9.2/7.2.1\nGPU model and memory: Tesla K40c 12 GB VRAM\n\nDescribe the problem\nI need to debug libtensorflow_cc.so to trace some other issue. I learned from bazel that I need to pass the following flag -c dbg -probably this one too --strip=never- while building the library. I noticed a significant increase in the binary size which makes sense! yet I'm still unable to step into the library code.\nProvide the exact sequence of commands / steps that you executed before running into the problem\nbazel build --config=opt --config=cuda --config=monolithic tensorflow:libtensorflow_cc.so\nAny other info / logs\n\nI passed --config=monolithic to resolve OpenCV's imread issue always returning a 0x0 mat.\nFurthermore, the binary built with  -c dbg and --strip=never, failed to load my model that was loaded correctly before passing those flags. but we can discuss it in a different issue if we resolve this one first.", "body": "**System information**\r\n- OS Platform and Distribution: Linux Ubuntu 16.04\r\n- TensorFlow installed from (source or binary): source\r\n- TensorFlow version: 1.8.0\r\n- Python version: Python 2.7.12\r\n- Installed using virtualenv? pip? conda?: No\r\n- Bazel version (if compiling from source): 0.16.1\r\n- GCC/Compiler version (if compiling from source): gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10)\r\n- CUDA/cuDNN version: 9.2/7.2.1\r\n- GPU model and memory: Tesla K40c 12 GB VRAM\r\n\r\n**Describe the problem**\r\nI need to debug `libtensorflow_cc.so` to trace some other issue. I learned from `bazel` that I need to pass the following flag `-c dbg` -probably this one too `--strip=never`- while building the library. I noticed a significant increase in the binary size which makes sense! yet I'm still unable to step into the library code. \r\n\r\n**Provide the exact sequence of commands / steps that you executed before running into the problem**\r\n`bazel build --config=opt --config=cuda --config=monolithic tensorflow:libtensorflow_cc.so`\r\n\r\n**Any other info / logs**\r\n- I passed `--config=monolithic` to resolve OpenCV's `imread` issue always returning a 0x0 mat.\r\n- Furthermore, the binary built with  `-c dbg` and `--strip=never`, failed to load my model that was loaded correctly before passing those flags. but we can discuss it in a different issue if we resolve this one first.\r\n"}