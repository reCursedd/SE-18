{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3459", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3459/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3459/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3459/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3459", "id": 166992530, "node_id": "MDU6SXNzdWUxNjY5OTI1MzA=", "number": 3459, "title": "tf.cond blocks forever when one branch calls tf.random_crop trough tf.map_fn", "user": {"login": "untom", "id": 3627551, "node_id": "MDQ6VXNlcjM2Mjc1NTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3627551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/untom", "html_url": "https://github.com/untom", "followers_url": "https://api.github.com/users/untom/followers", "following_url": "https://api.github.com/users/untom/following{/other_user}", "gists_url": "https://api.github.com/users/untom/gists{/gist_id}", "starred_url": "https://api.github.com/users/untom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/untom/subscriptions", "organizations_url": "https://api.github.com/users/untom/orgs", "repos_url": "https://api.github.com/users/untom/repos", "events_url": "https://api.github.com/users/untom/events{/privacy}", "received_events_url": "https://api.github.com/users/untom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, {"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2016-07-22T08:11:57Z", "updated_at": "2016-08-24T08:09:19Z", "closed_at": "2016-08-24T08:09:19Z", "author_association": "NONE", "body_html": "<p>I'm running tensorflow 0.9.0 on Python 3.5.2 using CUDA 7.5 on CentOS 7, and I keep running into very weird behaviour: tf.cond seems to stall forever when the non-active branch calls tf.random_crop. I've reduced my code to the following minimal example:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\nIMG_WIDTH = 32\nIMG_HEIGHT = 32\nIMG_CHANNELS = 3\n\ndef distort_image(image):\n    # this should crop the whole image, i.e. do nothing!\n    return tf.random_crop(image, [IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS])\n\nxx = np.random.normal(size=(4, IMG_HEIGHT, IMG_WIDTH, 3)).astype(np.float32)\n\ntf.reset_default_graph()\nx = tf.placeholder(tf.float32, shape=(None, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS))\nis_training = tf.placeholder(tf.bool)\nxp = tf.cond(is_training,  \n        lambda: tf.map_fn(distort_image, x, back_prop=False),  \n        lambda: tf.identity(x))  \n\ninit = tf.initialize_all_variables()\nwith tf.Session() as sess:\n    sess.run(init)\n    p = sess.run(xp, feed_dict={x: xx, is_training: False})\n</code></pre>\n<p>The weird thing is that if <code>is_training</code> is set to True, the function runs through without problems. I.e., when you actually call the <code>tf.map_fn</code> branch, everything works out fine.</p>", "body_text": "I'm running tensorflow 0.9.0 on Python 3.5.2 using CUDA 7.5 on CentOS 7, and I keep running into very weird behaviour: tf.cond seems to stall forever when the non-active branch calls tf.random_crop. I've reduced my code to the following minimal example:\nimport numpy as np\nimport tensorflow as tf\n\nIMG_WIDTH = 32\nIMG_HEIGHT = 32\nIMG_CHANNELS = 3\n\ndef distort_image(image):\n    # this should crop the whole image, i.e. do nothing!\n    return tf.random_crop(image, [IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS])\n\nxx = np.random.normal(size=(4, IMG_HEIGHT, IMG_WIDTH, 3)).astype(np.float32)\n\ntf.reset_default_graph()\nx = tf.placeholder(tf.float32, shape=(None, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS))\nis_training = tf.placeholder(tf.bool)\nxp = tf.cond(is_training,  \n        lambda: tf.map_fn(distort_image, x, back_prop=False),  \n        lambda: tf.identity(x))  \n\ninit = tf.initialize_all_variables()\nwith tf.Session() as sess:\n    sess.run(init)\n    p = sess.run(xp, feed_dict={x: xx, is_training: False})\n\nThe weird thing is that if is_training is set to True, the function runs through without problems. I.e., when you actually call the tf.map_fn branch, everything works out fine.", "body": "I'm running tensorflow 0.9.0 on Python 3.5.2 using CUDA 7.5 on CentOS 7, and I keep running into very weird behaviour: tf.cond seems to stall forever when the non-active branch calls tf.random_crop. I've reduced my code to the following minimal example:\n\n```\nimport numpy as np\nimport tensorflow as tf\n\nIMG_WIDTH = 32\nIMG_HEIGHT = 32\nIMG_CHANNELS = 3\n\ndef distort_image(image):\n    # this should crop the whole image, i.e. do nothing!\n    return tf.random_crop(image, [IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS])\n\nxx = np.random.normal(size=(4, IMG_HEIGHT, IMG_WIDTH, 3)).astype(np.float32)\n\ntf.reset_default_graph()\nx = tf.placeholder(tf.float32, shape=(None, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS))\nis_training = tf.placeholder(tf.bool)\nxp = tf.cond(is_training,  \n        lambda: tf.map_fn(distort_image, x, back_prop=False),  \n        lambda: tf.identity(x))  \n\ninit = tf.initialize_all_variables()\nwith tf.Session() as sess:\n    sess.run(init)\n    p = sess.run(xp, feed_dict={x: xx, is_training: False})\n```\n\nThe weird thing is that if `is_training` is set to True, the function runs through without problems. I.e., when you actually call the `tf.map_fn` branch, everything works out fine.\n"}