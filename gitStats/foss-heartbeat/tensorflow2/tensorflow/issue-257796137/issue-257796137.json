{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13046", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13046/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13046/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13046/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13046", "id": 257796137, "node_id": "MDU6SXNzdWUyNTc3OTYxMzc=", "number": 13046, "title": "tf.reduce_max inconsistent with numpy.max when handling NaN values", "user": {"login": "cbcase", "id": 238403, "node_id": "MDQ6VXNlcjIzODQwMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/238403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbcase", "html_url": "https://github.com/cbcase", "followers_url": "https://api.github.com/users/cbcase/followers", "following_url": "https://api.github.com/users/cbcase/following{/other_user}", "gists_url": "https://api.github.com/users/cbcase/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbcase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbcase/subscriptions", "organizations_url": "https://api.github.com/users/cbcase/orgs", "repos_url": "https://api.github.com/users/cbcase/repos", "events_url": "https://api.github.com/users/cbcase/events{/privacy}", "received_events_url": "https://api.github.com/users/cbcase/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-14T17:23:57Z", "updated_at": "2017-09-15T20:13:53Z", "closed_at": "2017-09-15T20:13:53Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04.3 LTS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.3.0-rc2-20-g0787eee 1.3.0</li>\n<li><strong>Python version</strong>: 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0 / 6.0</li>\n<li><strong>GPU model and memory</strong>: P100 (16GB)</li>\n<li><strong>Exact command to reproduce</strong>: [see below]</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The documentation for <code>tf.reduce_max</code> states that it is \"Equivalent to <code>np.max</code>\". This is not true when the provided <code>input_tensor</code> includes NaN values.</p>\n<p>TensorFlow ignores NaN values and returns inf (if present) or the largest finite value. Numpy will propagate NaN values in <code>np.max / np.amax</code> and has a special function <code>np.nanmax</code> for ignoring NaN values. (See the Notes section here: <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html\" rel=\"nofollow\">https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html</a>)</p>\n<p>Expected behavior is that <code>tf.reduce_max</code> returns NaN when its input includes NaN values.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nvals <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">float</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>1<span class=\"pl-pds\">'</span></span>), <span class=\"pl-c1\">float</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>nan<span class=\"pl-pds\">'</span></span>)]\n\nnp_max <span class=\"pl-k\">=</span> np.max(vals)\ntf_max <span class=\"pl-k\">=</span> tf.reduce_max(tf.constant(vals))\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>TF max: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(sess.run(tf_max)))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>numpy max: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(np_max))</pre></div>\n<p>When run, this code produces the following output:</p>\n<pre><code>TF max: 1.0\nnumpy max: nan\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04.3 LTS\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.3.0-rc2-20-g0787eee 1.3.0\nPython version: 3.5.2\nBazel version (if compiling from source): N/A\nCUDA/cuDNN version: 8.0 / 6.0\nGPU model and memory: P100 (16GB)\nExact command to reproduce: [see below]\n\nDescribe the problem\nThe documentation for tf.reduce_max states that it is \"Equivalent to np.max\". This is not true when the provided input_tensor includes NaN values.\nTensorFlow ignores NaN values and returns inf (if present) or the largest finite value. Numpy will propagate NaN values in np.max / np.amax and has a special function np.nanmax for ignoring NaN values. (See the Notes section here: https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html)\nExpected behavior is that tf.reduce_max returns NaN when its input includes NaN values.\nSource code / logs\nimport numpy as np\nimport tensorflow as tf\n\nvals = [float('1'), float('nan')]\n\nnp_max = np.max(vals)\ntf_max = tf.reduce_max(tf.constant(vals))\n\nwith tf.Session() as sess:\n    print('TF max: {}'.format(sess.run(tf_max)))\nprint('numpy max: {}'.format(np_max))\nWhen run, this code produces the following output:\nTF max: 1.0\nnumpy max: nan", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04.3 LTS\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.3.0-rc2-20-g0787eee 1.3.0\r\n- **Python version**: 3.5.2\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: 8.0 / 6.0\r\n- **GPU model and memory**: P100 (16GB)\r\n- **Exact command to reproduce**: [see below]\r\n\r\n### Describe the problem\r\nThe documentation for `tf.reduce_max` states that it is \"Equivalent to `np.max`\". This is not true when the provided `input_tensor` includes NaN values.\r\n\r\nTensorFlow ignores NaN values and returns inf (if present) or the largest finite value. Numpy will propagate NaN values in `np.max / np.amax` and has a special function `np.nanmax` for ignoring NaN values. (See the Notes section here: https://docs.scipy.org/doc/numpy/reference/generated/numpy.amax.html)\r\n\r\nExpected behavior is that `tf.reduce_max` returns NaN when its input includes NaN values.\r\n\r\n### Source code / logs\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nvals = [float('1'), float('nan')]\r\n\r\nnp_max = np.max(vals)\r\ntf_max = tf.reduce_max(tf.constant(vals))\r\n\r\nwith tf.Session() as sess:\r\n    print('TF max: {}'.format(sess.run(tf_max)))\r\nprint('numpy max: {}'.format(np_max))\r\n```\r\nWhen run, this code produces the following output:\r\n```\r\nTF max: 1.0\r\nnumpy max: nan\r\n```"}