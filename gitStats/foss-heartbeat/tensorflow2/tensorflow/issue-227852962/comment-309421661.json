{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/309421661", "html_url": "https://github.com/tensorflow/tensorflow/issues/9823#issuecomment-309421661", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9823", "id": 309421661, "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQyMTY2MQ==", "user": {"login": "fesun", "id": 23738439, "node_id": "MDQ6VXNlcjIzNzM4NDM5", "avatar_url": "https://avatars3.githubusercontent.com/u/23738439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fesun", "html_url": "https://github.com/fesun", "followers_url": "https://api.github.com/users/fesun/followers", "following_url": "https://api.github.com/users/fesun/following{/other_user}", "gists_url": "https://api.github.com/users/fesun/gists{/gist_id}", "starred_url": "https://api.github.com/users/fesun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fesun/subscriptions", "organizations_url": "https://api.github.com/users/fesun/orgs", "repos_url": "https://api.github.com/users/fesun/repos", "events_url": "https://api.github.com/users/fesun/events{/privacy}", "received_events_url": "https://api.github.com/users/fesun/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-19T12:12:34Z", "updated_at": "2017-06-19T12:12:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Since googler didn't response for very long time, I made one minimal change on my codebase to solve this, and post my solution here in case others are also confused by this:</p>\n<ol>\n<li>Tensorflow provides ones_initializer/zeros_initializer for initializing variables to 1/0, what tensorflow actually does is creating one const tensor and then assign it to variable, however constant operator holds tensor as its instance member, so its memory will not be freed unless the operator instance is deleted. Tensorflow AssignOp intent to try it's best to avoid memory copy(<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/assign_op.h#L47\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/assign_op.h#L47</a>), this happens only when input tensor refcount is 1, while const tensor refcount is always greater than 1.<br>\n<strong>Solution: write custom operator to create normal 0/1 tensor</strong></li>\n<li>As AssignOp comments said, conservative constraints make buffer forwarding unlikely to happen very often, my model doesn't leverage GPU and any other advanced communication tech, so I set both gpu and nic compatible to false.</li>\n<li>patch desired optimizer to use custom 0/1 initializer(slot creation)</li>\n</ol>", "body_text": "Since googler didn't response for very long time, I made one minimal change on my codebase to solve this, and post my solution here in case others are also confused by this:\n\nTensorflow provides ones_initializer/zeros_initializer for initializing variables to 1/0, what tensorflow actually does is creating one const tensor and then assign it to variable, however constant operator holds tensor as its instance member, so its memory will not be freed unless the operator instance is deleted. Tensorflow AssignOp intent to try it's best to avoid memory copy(https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/assign_op.h#L47), this happens only when input tensor refcount is 1, while const tensor refcount is always greater than 1.\nSolution: write custom operator to create normal 0/1 tensor\nAs AssignOp comments said, conservative constraints make buffer forwarding unlikely to happen very often, my model doesn't leverage GPU and any other advanced communication tech, so I set both gpu and nic compatible to false.\npatch desired optimizer to use custom 0/1 initializer(slot creation)", "body": "Since googler didn't response for very long time, I made one minimal change on my codebase to solve this, and post my solution here in case others are also confused by this:\r\n1) Tensorflow provides ones_initializer/zeros_initializer for initializing variables to 1/0, what tensorflow actually does is creating one const tensor and then assign it to variable, however constant operator holds tensor as its instance member, so its memory will not be freed unless the operator instance is deleted. Tensorflow AssignOp intent to try it's best to avoid memory copy(https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/assign_op.h#L47), this happens only when input tensor refcount is 1, while const tensor refcount is always greater than 1.\r\n**Solution: write custom operator to create normal 0/1 tensor**\r\n2) As AssignOp comments said, conservative constraints make buffer forwarding unlikely to happen very often, my model doesn't leverage GPU and any other advanced communication tech, so I set both gpu and nic compatible to false.\r\n3) patch desired optimizer to use custom 0/1 initializer(slot creation)"}