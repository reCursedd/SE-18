{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/184715731", "html_url": "https://github.com/tensorflow/tensorflow/pull/967#issuecomment-184715731", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/967", "id": 184715731, "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDcxNTczMQ==", "user": {"login": "jeremybarnes", "id": 112556, "node_id": "MDQ6VXNlcjExMjU1Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/112556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremybarnes", "html_url": "https://github.com/jeremybarnes", "followers_url": "https://api.github.com/users/jeremybarnes/followers", "following_url": "https://api.github.com/users/jeremybarnes/following{/other_user}", "gists_url": "https://api.github.com/users/jeremybarnes/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremybarnes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremybarnes/subscriptions", "organizations_url": "https://api.github.com/users/jeremybarnes/orgs", "repos_url": "https://api.github.com/users/jeremybarnes/repos", "events_url": "https://api.github.com/users/jeremybarnes/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremybarnes/received_events", "type": "User", "site_admin": false}, "created_at": "2016-02-16T14:59:12Z", "updated_at": "2016-02-16T14:59:12Z", "author_association": "NONE", "body_html": "<p>It seems fundamentally wrong to require ordering of operations that are submitted to a thread pool, since even if the jobs are scheduled on a thread in order, they won't necessarily start or complete in any order.  The only thing that we can really guarantee is that at least one job from n-1 to n-numThreads will complete before job n is scheduled.  I wonder if the FIFO-ness is really the issue here.</p>", "body_text": "It seems fundamentally wrong to require ordering of operations that are submitted to a thread pool, since even if the jobs are scheduled on a thread in order, they won't necessarily start or complete in any order.  The only thing that we can really guarantee is that at least one job from n-1 to n-numThreads will complete before job n is scheduled.  I wonder if the FIFO-ness is really the issue here.", "body": "It seems fundamentally wrong to require ordering of operations that are submitted to a thread pool, since even if the jobs are scheduled on a thread in order, they won't necessarily start or complete in any order.  The only thing that we can really guarantee is that at least one job from n-1 to n-numThreads will complete before job n is scheduled.  I wonder if the FIFO-ness is really the issue here.\n"}