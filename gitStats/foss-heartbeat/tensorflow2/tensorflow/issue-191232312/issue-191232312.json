{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5804", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5804/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5804/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5804/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5804", "id": 191232312, "node_id": "MDU6SXNzdWUxOTEyMzIzMTI=", "number": 5804, "title": "ffmpeg.decode_audio cannot be run in parallel", "user": {"login": "jheymann85", "id": 9553105, "node_id": "MDQ6VXNlcjk1NTMxMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9553105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jheymann85", "html_url": "https://github.com/jheymann85", "followers_url": "https://api.github.com/users/jheymann85/followers", "following_url": "https://api.github.com/users/jheymann85/following{/other_user}", "gists_url": "https://api.github.com/users/jheymann85/gists{/gist_id}", "starred_url": "https://api.github.com/users/jheymann85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jheymann85/subscriptions", "organizations_url": "https://api.github.com/users/jheymann85/orgs", "repos_url": "https://api.github.com/users/jheymann85/repos", "events_url": "https://api.github.com/users/jheymann85/events{/privacy}", "received_events_url": "https://api.github.com/users/jheymann85/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "fredbertsch", "id": 16326284, "node_id": "MDQ6VXNlcjE2MzI2Mjg0", "avatar_url": "https://avatars2.githubusercontent.com/u/16326284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fredbertsch", "html_url": "https://github.com/fredbertsch", "followers_url": "https://api.github.com/users/fredbertsch/followers", "following_url": "https://api.github.com/users/fredbertsch/following{/other_user}", "gists_url": "https://api.github.com/users/fredbertsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/fredbertsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fredbertsch/subscriptions", "organizations_url": "https://api.github.com/users/fredbertsch/orgs", "repos_url": "https://api.github.com/users/fredbertsch/repos", "events_url": "https://api.github.com/users/fredbertsch/events{/privacy}", "received_events_url": "https://api.github.com/users/fredbertsch/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fredbertsch", "id": 16326284, "node_id": "MDQ6VXNlcjE2MzI2Mjg0", "avatar_url": "https://avatars2.githubusercontent.com/u/16326284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fredbertsch", "html_url": "https://github.com/fredbertsch", "followers_url": "https://api.github.com/users/fredbertsch/followers", "following_url": "https://api.github.com/users/fredbertsch/following{/other_user}", "gists_url": "https://api.github.com/users/fredbertsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/fredbertsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fredbertsch/subscriptions", "organizations_url": "https://api.github.com/users/fredbertsch/orgs", "repos_url": "https://api.github.com/users/fredbertsch/repos", "events_url": "https://api.github.com/users/fredbertsch/events{/privacy}", "received_events_url": "https://api.github.com/users/fredbertsch/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2016-11-23T10:19:26Z", "updated_at": "2017-12-22T18:42:30Z", "closed_at": "2017-12-22T18:42:30Z", "author_association": "NONE", "body_html": "<p>To decode the input, the function writes the content to a temporary file. Its name is generated by the function <code>GetTempFilename</code> found in <code>tensorflow/contrib/ffmpeg/default/ffmpeg_lib.cc</code>. The template for the filename is <code>%tmp_dir/tmp_file_%PID.%EXT</code>.</p>\n<p><strong>When using multiple decoders in parallel this causes an undetermined behaviour since all decoders want to write and afterwards delete the same file.</strong></p>\n<p>A possible solution would be to use the thread id instead of the process id. I.e.</p>\n<pre><code>#include &lt;sys/syscall.h&gt;\n#define gettid() syscall(SYS_gettid)\n...\nreturn io::JoinPath(dir, StrCat(\"tmp_file_\", gettid(), \".\", extension));\n</code></pre>\n<p>The first two lines are necessary because <a href=\"http://man7.org/linux/man-pages/man2/gettid.2.html\" rel=\"nofollow\">glibc does not wrap the call</a>.</p>\n<p>This solution works for me (on Linux). I'm, however, not sure if it works on all supported platforms. If that's fine, I can make a pull request.</p>", "body_text": "To decode the input, the function writes the content to a temporary file. Its name is generated by the function GetTempFilename found in tensorflow/contrib/ffmpeg/default/ffmpeg_lib.cc. The template for the filename is %tmp_dir/tmp_file_%PID.%EXT.\nWhen using multiple decoders in parallel this causes an undetermined behaviour since all decoders want to write and afterwards delete the same file.\nA possible solution would be to use the thread id instead of the process id. I.e.\n#include <sys/syscall.h>\n#define gettid() syscall(SYS_gettid)\n...\nreturn io::JoinPath(dir, StrCat(\"tmp_file_\", gettid(), \".\", extension));\n\nThe first two lines are necessary because glibc does not wrap the call.\nThis solution works for me (on Linux). I'm, however, not sure if it works on all supported platforms. If that's fine, I can make a pull request.", "body": "To decode the input, the function writes the content to a temporary file. Its name is generated by the function `GetTempFilename` found in `tensorflow/contrib/ffmpeg/default/ffmpeg_lib.cc`. The template for the filename is `%tmp_dir/tmp_file_%PID.%EXT`.\r\n\r\n**When using multiple decoders in parallel this causes an undetermined behaviour since all decoders want to write and afterwards delete the same file.**\r\n\r\nA possible solution would be to use the thread id instead of the process id. I.e.\r\n\r\n```\r\n#include <sys/syscall.h>\r\n#define gettid() syscall(SYS_gettid)\r\n...\r\nreturn io::JoinPath(dir, StrCat(\"tmp_file_\", gettid(), \".\", extension));\r\n```\r\nThe first two lines are necessary because [glibc does not wrap the call](http://man7.org/linux/man-pages/man2/gettid.2.html).\r\n\r\nThis solution works for me (on Linux). I'm, however, not sure if it works on all supported platforms. If that's fine, I can make a pull request."}