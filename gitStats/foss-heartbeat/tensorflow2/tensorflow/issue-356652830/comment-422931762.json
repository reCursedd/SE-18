{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/422931762", "html_url": "https://github.com/tensorflow/tensorflow/issues/22042#issuecomment-422931762", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22042", "id": 422931762, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjkzMTc2Mg==", "user": {"login": "trias702", "id": 25867060, "node_id": "MDQ6VXNlcjI1ODY3MDYw", "avatar_url": "https://avatars3.githubusercontent.com/u/25867060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trias702", "html_url": "https://github.com/trias702", "followers_url": "https://api.github.com/users/trias702/followers", "following_url": "https://api.github.com/users/trias702/following{/other_user}", "gists_url": "https://api.github.com/users/trias702/gists{/gist_id}", "starred_url": "https://api.github.com/users/trias702/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trias702/subscriptions", "organizations_url": "https://api.github.com/users/trias702/orgs", "repos_url": "https://api.github.com/users/trias702/repos", "events_url": "https://api.github.com/users/trias702/events{/privacy}", "received_events_url": "https://api.github.com/users/trias702/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-19T19:37:17Z", "updated_at": "2018-09-19T19:37:17Z", "author_association": "NONE", "body_html": "<p>Just forgot, in case it might help, the actual line in my own code which triggers the cuSolverDN error is:</p>\n<p><code>model.add(layers.LSTM(256, dropout=0.2, recurrent_dropout=0.5, kernel_initializer=tf.keras.initializers.VarianceScaling(scale=1.0, mode='fan_avg', seed=None), return_sequences=False))</code></p>\n<p>When I fix that using the tf.set_random_seed(1) trick, the line of code which gives me the OOM error is:</p>\n<p><code>model.add(layers.Embedding(NUM_WORDS, 128, input_length=MAXLEN))</code></p>\n<p>This explains why I don't see this issue with any of my vanilla neural nets which just use Dense layers. Those models I can call .fit() over and over again it works fine each time. So something with Eager is broken inside Embedding and LSTM.</p>", "body_text": "Just forgot, in case it might help, the actual line in my own code which triggers the cuSolverDN error is:\nmodel.add(layers.LSTM(256, dropout=0.2, recurrent_dropout=0.5, kernel_initializer=tf.keras.initializers.VarianceScaling(scale=1.0, mode='fan_avg', seed=None), return_sequences=False))\nWhen I fix that using the tf.set_random_seed(1) trick, the line of code which gives me the OOM error is:\nmodel.add(layers.Embedding(NUM_WORDS, 128, input_length=MAXLEN))\nThis explains why I don't see this issue with any of my vanilla neural nets which just use Dense layers. Those models I can call .fit() over and over again it works fine each time. So something with Eager is broken inside Embedding and LSTM.", "body": "Just forgot, in case it might help, the actual line in my own code which triggers the cuSolverDN error is:\r\n\r\n`model.add(layers.LSTM(256, dropout=0.2, recurrent_dropout=0.5, kernel_initializer=tf.keras.initializers.VarianceScaling(scale=1.0, mode='fan_avg', seed=None), return_sequences=False))`\r\n\r\nWhen I fix that using the tf.set_random_seed(1) trick, the line of code which gives me the OOM error is:\r\n\r\n`model.add(layers.Embedding(NUM_WORDS, 128, input_length=MAXLEN))`\r\n\r\nThis explains why I don't see this issue with any of my vanilla neural nets which just use Dense layers. Those models I can call .fit() over and over again it works fine each time. So something with Eager is broken inside Embedding and LSTM."}