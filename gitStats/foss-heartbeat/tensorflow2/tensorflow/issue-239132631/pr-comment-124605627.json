{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/124605627", "pull_request_review_id": 46894427, "id": 124605627, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDYwNTYyNw==", "diff_hunk": "@@ -257,3 +257,32 @@ JNIEXPORT void JNICALL Java_org_tensorflow_OperationBuilder_setAttrShape(\n   TF_SetAttrShape(d, cname, cvalue.get(), static_cast<int>(num_dims));\n   env->ReleaseStringUTFChars(name, cname);\n }\n+\n+JNIEXPORT void JNICALL Java_org_tensorflow_OperationBuilder_setAttrStringList(\n+        JNIEnv* env, jclass object, jlong handle, jstring name, jobjectArray values) {\n+ static_assert(sizeof(jbyte) == 1,\n+                \"Require Java byte to be represented as a single byte\");\n+  TF_OperationDescription* d = requireHandle(env, handle);\n+  if (d == nullptr) return;\n+  const char *cname = env->GetStringUTFChars(name, nullptr);\n+  int num_strings = env->GetArrayLength(values);\n+  size_t *lengths = new size_t[num_strings];\n+  jbyte **strings = new jbyte *[num_strings];\n+  for (int i = 0; i < num_strings; i++) {\n+    jbyteArray value = (jbyteArray) env->GetObjectArrayElement(values, i);\n+    lengths[i] = static_cast<size_t>(env->GetArrayLength(value));\n+    strings[i] = env->GetByteArrayElements(value, nullptr);\n+  }\n+  if (num_strings > 0) {\n+    TF_SetAttrStringList(d, cname, reinterpret_cast<const void *const *>(strings), lengths, num_strings);", "path": "tensorflow/java/src/main/native/operation_builder_jni.cc", "position": null, "original_position": 21, "commit_id": "39b094d138fe2bed1e4a384abd63fd9915aaf38c", "original_commit_id": "4286d2fc99c27aca6b302250f760debfd4619d87", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "The presence of this `reinterpret_cast`  and what I think is incorrect cleanup (see comments later on) makes me think that we should make this implementation more explicit and simpler. How about something like the following (do validate that this is correct :):\r\n\r\n```\r\nint num_values = env->GetArrayLength(values);\r\nstd::unique_ptr<jbyteArray[]> jarrays(new jbyteArray[num_values]);\r\nstd::unique_ptr<jbyte*[]> jvalues(new jbyte*[num_values]);\r\nstd::unique_ptr<void*[]> cvalues(new void*[num_values]);\r\nstd::unique_ptr<size_t[]> lengths(new size_t[num_values]);\r\n\r\nfor (int i = 0; i < num_values; ++i) {\r\n  jByteArray v = static_cast<jbyteArray>(env->GetObjectArrayElement(values, i));\r\n  jarrays[i] = v;\r\n  jvalues[i] = env->GetByteArrayElements(v, nullptr);\r\n  cvalues[i] = jvalues[i];\r\n  lengths[i] = static_cast<size_t>(env->GetArrayLength(v));\r\n}\r\nTF_SetAttrStringList(d, cname, cvalues.get(), lengths.get(), num_values);\r\nfor (int i = 0; i < num_values; ++i) {\r\n  env->ReleaseByteArrayElements(jarrays[i], jvalues[i], JNI_ABORT);\r\n}\r\nenv->ReleaseStringUTFChars(name, cname);\r\n```\r\n\r\nI realize that this has additional allocations and overheads that could be optimized away. However, I don't think that this function is going to be common enough to be a performance bottleneck so the explicit clarity is well worth it. If, in the future the allocations are of a concern, we can optimize it, but for now we don't need to.\r\n\r\n", "created_at": "2017-06-28T17:34:38Z", "updated_at": "2017-06-28T19:36:45Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11107#discussion_r124605627", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11107", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/124605627"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11107#discussion_r124605627"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11107"}}, "body_html": "<p>The presence of this <code>reinterpret_cast</code>  and what I think is incorrect cleanup (see comments later on) makes me think that we should make this implementation more explicit and simpler. How about something like the following (do validate that this is correct :):</p>\n<pre><code>int num_values = env-&gt;GetArrayLength(values);\nstd::unique_ptr&lt;jbyteArray[]&gt; jarrays(new jbyteArray[num_values]);\nstd::unique_ptr&lt;jbyte*[]&gt; jvalues(new jbyte*[num_values]);\nstd::unique_ptr&lt;void*[]&gt; cvalues(new void*[num_values]);\nstd::unique_ptr&lt;size_t[]&gt; lengths(new size_t[num_values]);\n\nfor (int i = 0; i &lt; num_values; ++i) {\n  jByteArray v = static_cast&lt;jbyteArray&gt;(env-&gt;GetObjectArrayElement(values, i));\n  jarrays[i] = v;\n  jvalues[i] = env-&gt;GetByteArrayElements(v, nullptr);\n  cvalues[i] = jvalues[i];\n  lengths[i] = static_cast&lt;size_t&gt;(env-&gt;GetArrayLength(v));\n}\nTF_SetAttrStringList(d, cname, cvalues.get(), lengths.get(), num_values);\nfor (int i = 0; i &lt; num_values; ++i) {\n  env-&gt;ReleaseByteArrayElements(jarrays[i], jvalues[i], JNI_ABORT);\n}\nenv-&gt;ReleaseStringUTFChars(name, cname);\n</code></pre>\n<p>I realize that this has additional allocations and overheads that could be optimized away. However, I don't think that this function is going to be common enough to be a performance bottleneck so the explicit clarity is well worth it. If, in the future the allocations are of a concern, we can optimize it, but for now we don't need to.</p>", "body_text": "The presence of this reinterpret_cast  and what I think is incorrect cleanup (see comments later on) makes me think that we should make this implementation more explicit and simpler. How about something like the following (do validate that this is correct :):\nint num_values = env->GetArrayLength(values);\nstd::unique_ptr<jbyteArray[]> jarrays(new jbyteArray[num_values]);\nstd::unique_ptr<jbyte*[]> jvalues(new jbyte*[num_values]);\nstd::unique_ptr<void*[]> cvalues(new void*[num_values]);\nstd::unique_ptr<size_t[]> lengths(new size_t[num_values]);\n\nfor (int i = 0; i < num_values; ++i) {\n  jByteArray v = static_cast<jbyteArray>(env->GetObjectArrayElement(values, i));\n  jarrays[i] = v;\n  jvalues[i] = env->GetByteArrayElements(v, nullptr);\n  cvalues[i] = jvalues[i];\n  lengths[i] = static_cast<size_t>(env->GetArrayLength(v));\n}\nTF_SetAttrStringList(d, cname, cvalues.get(), lengths.get(), num_values);\nfor (int i = 0; i < num_values; ++i) {\n  env->ReleaseByteArrayElements(jarrays[i], jvalues[i], JNI_ABORT);\n}\nenv->ReleaseStringUTFChars(name, cname);\n\nI realize that this has additional allocations and overheads that could be optimized away. However, I don't think that this function is going to be common enough to be a performance bottleneck so the explicit clarity is well worth it. If, in the future the allocations are of a concern, we can optimize it, but for now we don't need to."}