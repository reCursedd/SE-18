{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/393246732", "html_url": "https://github.com/tensorflow/tensorflow/issues/19260#issuecomment-393246732", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19260", "id": 393246732, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzI0NjczMg==", "user": {"login": "mjmatthews", "id": 29803654, "node_id": "MDQ6VXNlcjI5ODAzNjU0", "avatar_url": "https://avatars0.githubusercontent.com/u/29803654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjmatthews", "html_url": "https://github.com/mjmatthews", "followers_url": "https://api.github.com/users/mjmatthews/followers", "following_url": "https://api.github.com/users/mjmatthews/following{/other_user}", "gists_url": "https://api.github.com/users/mjmatthews/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjmatthews/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjmatthews/subscriptions", "organizations_url": "https://api.github.com/users/mjmatthews/orgs", "repos_url": "https://api.github.com/users/mjmatthews/repos", "events_url": "https://api.github.com/users/mjmatthews/events{/privacy}", "received_events_url": "https://api.github.com/users/mjmatthews/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-30T17:22:31Z", "updated_at": "2018-05-30T17:49:07Z", "author_association": "NONE", "body_html": "<p>If I execute the following slice, both TensorFlow's slicing operator and <code>strided_slice</code> return the correct empty list:</p>\n<pre><code>print sess.run(tf.constant([1,2,3,4])[-1:0:1])\nprint sess.run(tf.strided_slice([1, 2, 3, 4], [-1], [0], [1]))\n[]\n[]\n</code></pre>\n<p>Which agrees with python's slicing:</p>\n<pre><code>foo=[1,2,3,4]\nprint foo[-1:0:1]\n[]\n</code></pre>\n<p>All good.</p>\n<p>Where it gets weird is adding in the shrink_axis flag on the first dimension:</p>\n<pre><code>print sess.run(tf.strided_slice([1, 2, 3, 4], [-1], [0], [1], shrink_axis_mask=1))\n4\n</code></pre>\n<p>If we try to do the equivalent in numpy:</p>\n<pre><code>foo=np.array([1,2,3,4])\nprint np.shape(foo[-1:0:1])\nprint foo[-1:0:1].squeeze(axis=0)\n\n(0,)\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-24-fb8485f97d3e&gt; in &lt;module&gt;()\n      1 foo=np.array([1,2,3,4])\n      2 print np.shape(foo[-1:0:1])\n----&gt; 3 print foo[-1:0:1].squeeze(axis=0)\n\nValueError: cannot select an axis to squeeze out which has size not equal to one\n</code></pre>\n<p>we get an error, which I believe is the correct response. This is also stated in the <a href=\"https://www.tensorflow.org/api_docs/python/tf/strided_slice\" rel=\"nofollow\">documentation</a> for <code>strided_slice</code>.</p>\n<blockquote>\n<p>If the ith bit of shrink_axis_mask is set, it implies that the ith specification shrinks the dimensionality by 1. begin[i], end[i] and strides[i] must imply a slice of size 1 in the dimension.</p>\n</blockquote>\n<p>I could be wrong in my understanding of the equivalence of what <code>shrink_axis_mask</code> and <code>np.squeeze</code> are doing, and there are some strange subtleties to TensorFlow's handling of zero and one dimensional scalars, but on the surface of it, this looks like a bug in TensorFlow's implementation of <code>shrink_axis_mask</code> in <code>strided_slice</code>. Or maybe this was an explicit design decision for some reason?</p>", "body_text": "If I execute the following slice, both TensorFlow's slicing operator and strided_slice return the correct empty list:\nprint sess.run(tf.constant([1,2,3,4])[-1:0:1])\nprint sess.run(tf.strided_slice([1, 2, 3, 4], [-1], [0], [1]))\n[]\n[]\n\nWhich agrees with python's slicing:\nfoo=[1,2,3,4]\nprint foo[-1:0:1]\n[]\n\nAll good.\nWhere it gets weird is adding in the shrink_axis flag on the first dimension:\nprint sess.run(tf.strided_slice([1, 2, 3, 4], [-1], [0], [1], shrink_axis_mask=1))\n4\n\nIf we try to do the equivalent in numpy:\nfoo=np.array([1,2,3,4])\nprint np.shape(foo[-1:0:1])\nprint foo[-1:0:1].squeeze(axis=0)\n\n(0,)\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-24-fb8485f97d3e> in <module>()\n      1 foo=np.array([1,2,3,4])\n      2 print np.shape(foo[-1:0:1])\n----> 3 print foo[-1:0:1].squeeze(axis=0)\n\nValueError: cannot select an axis to squeeze out which has size not equal to one\n\nwe get an error, which I believe is the correct response. This is also stated in the documentation for strided_slice.\n\nIf the ith bit of shrink_axis_mask is set, it implies that the ith specification shrinks the dimensionality by 1. begin[i], end[i] and strides[i] must imply a slice of size 1 in the dimension.\n\nI could be wrong in my understanding of the equivalence of what shrink_axis_mask and np.squeeze are doing, and there are some strange subtleties to TensorFlow's handling of zero and one dimensional scalars, but on the surface of it, this looks like a bug in TensorFlow's implementation of shrink_axis_mask in strided_slice. Or maybe this was an explicit design decision for some reason?", "body": "If I execute the following slice, both TensorFlow's slicing operator and `strided_slice` return the correct empty list:\r\n```\r\nprint sess.run(tf.constant([1,2,3,4])[-1:0:1])\r\nprint sess.run(tf.strided_slice([1, 2, 3, 4], [-1], [0], [1]))\r\n[]\r\n[]\r\n```\r\nWhich agrees with python's slicing:\r\n```\r\nfoo=[1,2,3,4]\r\nprint foo[-1:0:1]\r\n[]\r\n```\r\nAll good.\r\n\r\nWhere it gets weird is adding in the shrink_axis flag on the first dimension:\r\n```\r\nprint sess.run(tf.strided_slice([1, 2, 3, 4], [-1], [0], [1], shrink_axis_mask=1))\r\n4\r\n```\r\nIf we try to do the equivalent in numpy:\r\n```\r\nfoo=np.array([1,2,3,4])\r\nprint np.shape(foo[-1:0:1])\r\nprint foo[-1:0:1].squeeze(axis=0)\r\n\r\n(0,)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-24-fb8485f97d3e> in <module>()\r\n      1 foo=np.array([1,2,3,4])\r\n      2 print np.shape(foo[-1:0:1])\r\n----> 3 print foo[-1:0:1].squeeze(axis=0)\r\n\r\nValueError: cannot select an axis to squeeze out which has size not equal to one\r\n```\r\nwe get an error, which I believe is the correct response. This is also stated in the [documentation](https://www.tensorflow.org/api_docs/python/tf/strided_slice) for `strided_slice`.\r\n\r\n> If the ith bit of shrink_axis_mask is set, it implies that the ith specification shrinks the dimensionality by 1. begin[i], end[i] and strides[i] must imply a slice of size 1 in the dimension.\r\n\r\nI could be wrong in my understanding of the equivalence of what `shrink_axis_mask` and `np.squeeze` are doing, and there are some strange subtleties to TensorFlow's handling of zero and one dimensional scalars, but on the surface of it, this looks like a bug in TensorFlow's implementation of `shrink_axis_mask` in `strided_slice`. Or maybe this was an explicit design decision for some reason?"}