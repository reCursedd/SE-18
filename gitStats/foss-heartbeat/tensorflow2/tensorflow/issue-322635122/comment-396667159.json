{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/396667159", "html_url": "https://github.com/tensorflow/tensorflow/issues/19260#issuecomment-396667159", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19260", "id": 396667159, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjY2NzE1OQ==", "user": {"login": "rryan", "id": 26527, "node_id": "MDQ6VXNlcjI2NTI3", "avatar_url": "https://avatars3.githubusercontent.com/u/26527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rryan", "html_url": "https://github.com/rryan", "followers_url": "https://api.github.com/users/rryan/followers", "following_url": "https://api.github.com/users/rryan/following{/other_user}", "gists_url": "https://api.github.com/users/rryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/rryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rryan/subscriptions", "organizations_url": "https://api.github.com/users/rryan/orgs", "repos_url": "https://api.github.com/users/rryan/repos", "events_url": "https://api.github.com/users/rryan/events{/privacy}", "received_events_url": "https://api.github.com/users/rryan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-12T17:17:57Z", "updated_at": "2018-06-12T17:17:57Z", "author_association": "MEMBER", "body_html": "<blockquote>\n<p>Slightly off topic: I'm actually using tf.abs( tf.contrib.signal.stft( x ) ).<br>\nSince complex numbers are a combination of absolute value and \"argument\":<br>\nCan this be rewritten as a single op which doesn't require complex numbers?<br>\nMaybe this would also be somewhat more battery efficient?</p>\n</blockquote>\n<p>Hm, you always have to compute both the real and imaginary parts of the DFT in order to get the magnitude so I think even if there are no complex-valued tensors the op would be calculating it internally. You can factor the calculation into a real and imaginary part to avoid needing a complex type in tf.lite itself, but this will probably be less efficient than computing them jointly because the real and imaginary parts share the same memory access patterns when they're being computed.</p>\n<p>One thing that might help is doing a fixed-point FFT instead of floating point. I haven't thought much about how to support that with TensorFlow's <code>RFFT</code> op, but it should be do-able.</p>\n<p>If you're building a mobile algorithm that operates in a streaming fashion you probably want to pass in frames of audio at a time to your tf.lite model. In this situation, <code>tf.contrib.signal.stft</code> isn't going to be appropriate because it's going to frame the audio you pass in for you, and it doesn't support being run in a stateful manner where you're feeding it chunks of audio at a time. You may want to fall back on <code>tf.contrib.signal.hann_window</code> (or any window) and <code>tf.spectral.rfft</code> to window and compute the RFFT on the incoming frame you're processing in this scenario.</p>", "body_text": "Slightly off topic: I'm actually using tf.abs( tf.contrib.signal.stft( x ) ).\nSince complex numbers are a combination of absolute value and \"argument\":\nCan this be rewritten as a single op which doesn't require complex numbers?\nMaybe this would also be somewhat more battery efficient?\n\nHm, you always have to compute both the real and imaginary parts of the DFT in order to get the magnitude so I think even if there are no complex-valued tensors the op would be calculating it internally. You can factor the calculation into a real and imaginary part to avoid needing a complex type in tf.lite itself, but this will probably be less efficient than computing them jointly because the real and imaginary parts share the same memory access patterns when they're being computed.\nOne thing that might help is doing a fixed-point FFT instead of floating point. I haven't thought much about how to support that with TensorFlow's RFFT op, but it should be do-able.\nIf you're building a mobile algorithm that operates in a streaming fashion you probably want to pass in frames of audio at a time to your tf.lite model. In this situation, tf.contrib.signal.stft isn't going to be appropriate because it's going to frame the audio you pass in for you, and it doesn't support being run in a stateful manner where you're feeding it chunks of audio at a time. You may want to fall back on tf.contrib.signal.hann_window (or any window) and tf.spectral.rfft to window and compute the RFFT on the incoming frame you're processing in this scenario.", "body": "> Slightly off topic: I'm actually using tf.abs( tf.contrib.signal.stft( x ) ).\r\n> Since complex numbers are a combination of absolute value and \"argument\":\r\n> Can this be rewritten as a single op which doesn't require complex numbers?\r\n> Maybe this would also be somewhat more battery efficient?\r\n\r\nHm, you always have to compute both the real and imaginary parts of the DFT in order to get the magnitude so I think even if there are no complex-valued tensors the op would be calculating it internally. You can factor the calculation into a real and imaginary part to avoid needing a complex type in tf.lite itself, but this will probably be less efficient than computing them jointly because the real and imaginary parts share the same memory access patterns when they're being computed. \r\n\r\nOne thing that might help is doing a fixed-point FFT instead of floating point. I haven't thought much about how to support that with TensorFlow's `RFFT` op, but it should be do-able.\r\n\r\nIf you're building a mobile algorithm that operates in a streaming fashion you probably want to pass in frames of audio at a time to your tf.lite model. In this situation, `tf.contrib.signal.stft` isn't going to be appropriate because it's going to frame the audio you pass in for you, and it doesn't support being run in a stateful manner where you're feeding it chunks of audio at a time. You may want to fall back on `tf.contrib.signal.hann_window` (or any window) and `tf.spectral.rfft` to window and compute the RFFT on the incoming frame you're processing in this scenario."}