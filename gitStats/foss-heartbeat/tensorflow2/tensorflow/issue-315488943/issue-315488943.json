{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18653", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18653/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18653/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18653/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18653", "id": 315488943, "node_id": "MDU6SXNzdWUzMTU0ODg5NDM=", "number": 18653, "title": "Bug: expected_shape not work in tensorflow", "user": {"login": "modkzs", "id": 4951846, "node_id": "MDQ6VXNlcjQ5NTE4NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4951846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/modkzs", "html_url": "https://github.com/modkzs", "followers_url": "https://api.github.com/users/modkzs/followers", "following_url": "https://api.github.com/users/modkzs/following{/other_user}", "gists_url": "https://api.github.com/users/modkzs/gists{/gist_id}", "starred_url": "https://api.github.com/users/modkzs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/modkzs/subscriptions", "organizations_url": "https://api.github.com/users/modkzs/orgs", "repos_url": "https://api.github.com/users/modkzs/repos", "events_url": "https://api.github.com/users/modkzs/events{/privacy}", "received_events_url": "https://api.github.com/users/modkzs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-04-18T13:51:21Z", "updated_at": "2018-05-03T23:18:02Z", "closed_at": "2018-05-03T23:17:59Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: mac osx</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.7.0</li>\n<li><strong>Python version</strong>:  3.5.0</li>\n<li><strong>CUDA/cuDNN version</strong>: None</li>\n<li><strong>GPU model and memory</strong>: None</li>\n<li><strong>Exact command to reproduce</strong>: None</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>I try to use a variable without shape in tensorflow. My code is</p>\n<pre><code>sen_var_1 = tf.Variable(np.float32, trainable=False, validate_shape=False, expected_shape=[None, None, 300])\nsen_1 = tf.placeholder(shape=[None, None, 300], dtype=np.float32, name=\"q1\")\nsen_assign_1 = tf.assign(sen_var_1, sen_1, validate_shape=False)\n</code></pre>\n<p>I will run session with <code>sen_assign_1</code> when train begin, and each epoch I want to use <code>sen_var_1</code>. But it seems that <code>expected_shape</code> is not work in <code>sen_var_1</code>. So is there any way to do this?</p>\n<h3>Source code / logs</h3>\n<p><code>ValueError: Input size (depth of inputs) must be accessible via shape inference, but saw value None.</code></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): mac osx\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.7.0\nPython version:  3.5.0\nCUDA/cuDNN version: None\nGPU model and memory: None\nExact command to reproduce: None\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nI try to use a variable without shape in tensorflow. My code is\nsen_var_1 = tf.Variable(np.float32, trainable=False, validate_shape=False, expected_shape=[None, None, 300])\nsen_1 = tf.placeholder(shape=[None, None, 300], dtype=np.float32, name=\"q1\")\nsen_assign_1 = tf.assign(sen_var_1, sen_1, validate_shape=False)\n\nI will run session with sen_assign_1 when train begin, and each epoch I want to use sen_var_1. But it seems that expected_shape is not work in sen_var_1. So is there any way to do this?\nSource code / logs\nValueError: Input size (depth of inputs) must be accessible via shape inference, but saw value None.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: mac osx\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.7.0\r\n- **Python version**:  3.5.0\r\n- **CUDA/cuDNN version**: None\r\n- **GPU model and memory**: None\r\n- **Exact command to reproduce**: None\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nI try to use a variable without shape in tensorflow. My code is\r\n\r\n```\r\nsen_var_1 = tf.Variable(np.float32, trainable=False, validate_shape=False, expected_shape=[None, None, 300])\r\nsen_1 = tf.placeholder(shape=[None, None, 300], dtype=np.float32, name=\"q1\")\r\nsen_assign_1 = tf.assign(sen_var_1, sen_1, validate_shape=False)\r\n```\r\n\r\nI will run session with `sen_assign_1` when train begin, and each epoch I want to use `sen_var_1`. But it seems that `expected_shape` is not work in `sen_var_1`. So is there any way to do this?\r\n\r\n### Source code / logs\r\n`ValueError: Input size (depth of inputs) must be accessible via shape inference, but saw value None.`"}