{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/263762813", "html_url": "https://github.com/tensorflow/tensorflow/issues/4668#issuecomment-263762813", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4668", "id": 263762813, "node_id": "MDEyOklzc3VlQ29tbWVudDI2Mzc2MjgxMw==", "user": {"login": "guotong1988", "id": 4702353, "node_id": "MDQ6VXNlcjQ3MDIzNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4702353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guotong1988", "html_url": "https://github.com/guotong1988", "followers_url": "https://api.github.com/users/guotong1988/followers", "following_url": "https://api.github.com/users/guotong1988/following{/other_user}", "gists_url": "https://api.github.com/users/guotong1988/gists{/gist_id}", "starred_url": "https://api.github.com/users/guotong1988/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guotong1988/subscriptions", "organizations_url": "https://api.github.com/users/guotong1988/orgs", "repos_url": "https://api.github.com/users/guotong1988/repos", "events_url": "https://api.github.com/users/guotong1988/events{/privacy}", "received_events_url": "https://api.github.com/users/guotong1988/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-30T02:15:48Z", "updated_at": "2016-11-30T02:15:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3323801\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Fenugreek\">@Fenugreek</a> Could you provide your hard-coded exact code? In fact I'm not sure that my test case can cover that much. Thank you . Here is my only test case.</p>\n<pre><code># Input, output: [batch, height, width, depth]\nx_image = tf.placeholder(tf.float32,shape=[1])\nx = tf.reshape(x_image,[1,1,1,1])\n\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\nW = tf.Variable(W_cpu)\nW = tf.reshape(W, [3,3,1,1])\n\nstrides=[1, 1, 1, 1]\npadding='VALID'\n\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\n\nx_data = np.array([1],dtype=np.float32)\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x, feed_dict={x_image: x_data}))\n    W = (sess.run(W, feed_dict={x_image: x_data}))\n    y = (sess.run(y, feed_dict={x_image: x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(1) is :\"\n    print x.reshape(1)\n    print \"\"\n\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\n    print W.reshape(3,3)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(5,5) is :\"\n    print y.reshape(5,5)\n    print \"\"\n</code></pre>", "body_text": "@Fenugreek Could you provide your hard-coded exact code? In fact I'm not sure that my test case can cover that much. Thank you . Here is my only test case.\n# Input, output: [batch, height, width, depth]\nx_image = tf.placeholder(tf.float32,shape=[1])\nx = tf.reshape(x_image,[1,1,1,1])\n\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\nW = tf.Variable(W_cpu)\nW = tf.reshape(W, [3,3,1,1])\n\nstrides=[1, 1, 1, 1]\npadding='VALID'\n\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\n\nx_data = np.array([1],dtype=np.float32)\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x, feed_dict={x_image: x_data}))\n    W = (sess.run(W, feed_dict={x_image: x_data}))\n    y = (sess.run(y, feed_dict={x_image: x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(1) is :\"\n    print x.reshape(1)\n    print \"\"\n\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\n    print W.reshape(3,3)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(5,5) is :\"\n    print y.reshape(5,5)\n    print \"\"", "body": "@Fenugreek Could you provide your hard-coded exact code? In fact I'm not sure that my test case can cover that much. Thank you . Here is my only test case.\r\n\r\n```\r\n# Input, output: [batch, height, width, depth]\r\nx_image = tf.placeholder(tf.float32,shape=[1])\r\nx = tf.reshape(x_image,[1,1,1,1])\r\n\r\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\r\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\r\nW = tf.Variable(W_cpu)\r\nW = tf.reshape(W, [3,3,1,1])\r\n\r\nstrides=[1, 1, 1, 1]\r\npadding='VALID'\r\n\r\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\r\n\r\nx_data = np.array([1],dtype=np.float32)\r\nwith tf.Session() as sess:\r\n    init = tf.initialize_all_variables()\r\n    sess.run(init)\r\n\r\n    x = (sess.run(x, feed_dict={x_image: x_data}))\r\n    W = (sess.run(W, feed_dict={x_image: x_data}))\r\n    y = (sess.run(y, feed_dict={x_image: x_data}))\r\n\r\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(1) is :\"\r\n    print x.reshape(1)\r\n    print \"\"\r\n\r\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\r\n    print W.reshape(3,3)\r\n    print \"\"\r\n\r\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(5,5) is :\"\r\n    print y.reshape(5,5)\r\n    print \"\"\r\n```"}