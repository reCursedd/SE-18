{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/434871825", "html_url": "https://github.com/tensorflow/tensorflow/issues/20346#issuecomment-434871825", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20346", "id": 434871825, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDg3MTgyNQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-31T22:39:11Z", "updated_at": "2018-10-31T22:39:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Looking at this again, and there's no obvious answer in the stack trace, but I have a few suggestions:</p>\n<ol>\n<li>Can you try creating your <code>tf.Session</code> with <code>config=tf.ConfigProto(inter_op_parallelism_threads=1, intra_op_parallelism_threads=1)</code>? This shouldn't fix anything... if anything it makes it more likely that buggy code will deadlock sooner... but it should give a more compact thread dump to analyze.</li>\n<li>Are you using <code>tf.py_func()</code> in your code? It looks like \"Thread 1\" (which appears twice in the pastebin link) is blocked in some NumPy code, in what appears to be OpenBLAS (<code>exec_blas_async_wait()</code>). It's possible that if your other machine has a different version of NumPy, then it might have different behavior for this method.</li>\n<li>Related to (2), experimenting with the <code>OMP_NUM_THREADS</code> variable (e.g. setting it to 1?) might reveal something about the behavior.</li>\n</ol>\n<p>If you can reproduce the hang and capture another (ideally smaller) stack trace, that would be useful!</p>", "body_text": "Looking at this again, and there's no obvious answer in the stack trace, but I have a few suggestions:\n\nCan you try creating your tf.Session with config=tf.ConfigProto(inter_op_parallelism_threads=1, intra_op_parallelism_threads=1)? This shouldn't fix anything... if anything it makes it more likely that buggy code will deadlock sooner... but it should give a more compact thread dump to analyze.\nAre you using tf.py_func() in your code? It looks like \"Thread 1\" (which appears twice in the pastebin link) is blocked in some NumPy code, in what appears to be OpenBLAS (exec_blas_async_wait()). It's possible that if your other machine has a different version of NumPy, then it might have different behavior for this method.\nRelated to (2), experimenting with the OMP_NUM_THREADS variable (e.g. setting it to 1?) might reveal something about the behavior.\n\nIf you can reproduce the hang and capture another (ideally smaller) stack trace, that would be useful!", "body": "Looking at this again, and there's no obvious answer in the stack trace, but I have a few suggestions:\r\n\r\n1.  Can you try creating your `tf.Session` with `config=tf.ConfigProto(inter_op_parallelism_threads=1, intra_op_parallelism_threads=1)`? This shouldn't fix anything... if anything it makes it more likely that buggy code will deadlock sooner... but it should give a more compact thread dump to analyze.\r\n2. Are you using `tf.py_func()` in your code? It looks like \"Thread 1\" (which appears twice in the pastebin link) is blocked in some NumPy code, in what appears to be OpenBLAS (`exec_blas_async_wait()`). It's possible that if your other machine has a different version of NumPy, then it might have different behavior for this method.\r\n3. Related to (2), experimenting with the `OMP_NUM_THREADS` variable (e.g. setting it to 1?) might reveal something about the behavior.\r\n\r\nIf you can reproduce the hang and capture another (ideally smaller) stack trace, that would be useful!"}