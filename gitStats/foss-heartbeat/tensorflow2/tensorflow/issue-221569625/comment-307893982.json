{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/307893982", "html_url": "https://github.com/tensorflow/tensorflow/pull/9189#issuecomment-307893982", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9189", "id": 307893982, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzg5Mzk4Mg==", "user": {"login": "ahundt", "id": 55744, "node_id": "MDQ6VXNlcjU1NzQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/55744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahundt", "html_url": "https://github.com/ahundt", "followers_url": "https://api.github.com/users/ahundt/followers", "following_url": "https://api.github.com/users/ahundt/following{/other_user}", "gists_url": "https://api.github.com/users/ahundt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahundt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahundt/subscriptions", "organizations_url": "https://api.github.com/users/ahundt/orgs", "repos_url": "https://api.github.com/users/ahundt/repos", "events_url": "https://api.github.com/users/ahundt/events{/privacy}", "received_events_url": "https://api.github.com/users/ahundt/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-12T19:26:05Z", "updated_at": "2017-06-12T19:26:16Z", "author_association": "NONE", "body_html": "<blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=55744\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ahundt\">@ahundt</a> There is a RefSelect op in C++. Although RefSelect do the same thing, I think it would be safer to use another name.</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10446514\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gaohuazuo\">@gaohuazuo</a> Can the existing RefSelect be extended to work in both cases in a clear and concise manner that also has backwards compatibility?</p>\n<p>Consistent and clear naming is one of the most important things for users to make sense of and use the API, so please consider giving some additional thought on what naming approach will be clear between python, and C++, and RefSelect. :-)</p>", "body_text": "@ahundt There is a RefSelect op in C++. Although RefSelect do the same thing, I think it would be safer to use another name.\n\n@gaohuazuo Can the existing RefSelect be extended to work in both cases in a clear and concise manner that also has backwards compatibility?\nConsistent and clear naming is one of the most important things for users to make sense of and use the API, so please consider giving some additional thought on what naming approach will be clear between python, and C++, and RefSelect. :-)", "body": "> @ahundt There is a RefSelect op in C++. Although RefSelect do the same thing, I think it would be safer to use another name.\r\n\r\n@gaohuazuo Can the existing RefSelect be extended to work in both cases in a clear and concise manner that also has backwards compatibility?\r\n\r\nConsistent and clear naming is one of the most important things for users to make sense of and use the API, so please consider giving some additional thought on what naming approach will be clear between python, and C++, and RefSelect. :-)\r\n"}