{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9189", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9189/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9189/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9189/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/9189", "id": 221569625, "node_id": "MDExOlB1bGxSZXF1ZXN0MTE1NzYxMzY5", "number": 9189, "title": "A replacement for tf.cond", "user": {"login": "gaohuazuo", "id": 10446514, "node_id": "MDQ6VXNlcjEwNDQ2NTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/10446514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaohuazuo", "html_url": "https://github.com/gaohuazuo", "followers_url": "https://api.github.com/users/gaohuazuo/followers", "following_url": "https://api.github.com/users/gaohuazuo/following{/other_user}", "gists_url": "https://api.github.com/users/gaohuazuo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaohuazuo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaohuazuo/subscriptions", "organizations_url": "https://api.github.com/users/gaohuazuo/orgs", "repos_url": "https://api.github.com/users/gaohuazuo/repos", "events_url": "https://api.github.com/users/gaohuazuo/events{/privacy}", "received_events_url": "https://api.github.com/users/gaohuazuo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 522623856, "node_id": "MDU6TGFiZWw1MjI2MjM4NTY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/API%20review", "name": "API review", "color": "d4c5f9", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "cwhipkey", "id": 17578177, "node_id": "MDQ6VXNlcjE3NTc4MTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/17578177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwhipkey", "html_url": "https://github.com/cwhipkey", "followers_url": "https://api.github.com/users/cwhipkey/followers", "following_url": "https://api.github.com/users/cwhipkey/following{/other_user}", "gists_url": "https://api.github.com/users/cwhipkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwhipkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwhipkey/subscriptions", "organizations_url": "https://api.github.com/users/cwhipkey/orgs", "repos_url": "https://api.github.com/users/cwhipkey/repos", "events_url": "https://api.github.com/users/cwhipkey/events{/privacy}", "received_events_url": "https://api.github.com/users/cwhipkey/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cwhipkey", "id": 17578177, "node_id": "MDQ6VXNlcjE3NTc4MTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/17578177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwhipkey", "html_url": "https://github.com/cwhipkey", "followers_url": "https://api.github.com/users/cwhipkey/followers", "following_url": "https://api.github.com/users/cwhipkey/following{/other_user}", "gists_url": "https://api.github.com/users/cwhipkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwhipkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwhipkey/subscriptions", "organizations_url": "https://api.github.com/users/cwhipkey/orgs", "repos_url": "https://api.github.com/users/cwhipkey/repos", "events_url": "https://api.github.com/users/cwhipkey/events{/privacy}", "received_events_url": "https://api.github.com/users/cwhipkey/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 26, "created_at": "2017-04-13T13:51:55Z", "updated_at": "2017-07-28T15:57:04Z", "closed_at": "2017-07-27T18:01:12Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9189", "html_url": "https://github.com/tensorflow/tensorflow/pull/9189", "diff_url": "https://github.com/tensorflow/tensorflow/pull/9189.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/9189.patch"}, "body_html": "<p>This is a prototype for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"221560933\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9188\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/9188/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/9188\">#9188</a>.</p>\n<p>Two new ops, <code>Mux</code> and <code>Demux</code> are introduced by this patch. <code>Mux</code> op takes <code>[i, input_0, input_1, ...]</code> as input, and produces <code>input_i</code> as output. It is meant to replace <code>tf.case</code> and <code>tf.cond</code>. <code>Demux</code> op is a generalized version of <code>Switch</code>. It takes <code>[i, input]</code> as input, and produces <code>[output_0, ..., output_N]</code> where <code>output_i</code> is set to <code>input</code> and other outputs are dead.</p>\n<p>This patch also contains an algorithm that rewrites the graph before execution so that <code>Mux</code> ops are efficient just like <code>tf.cond</code>.</p>\n<p>Example:</p>\n<pre><code>i = tf.placeholder(tf.int32, [])\na = tf.placeholder(tf.int32, [])\nb = tf.placeholder(tf.int32, [])\nc = tf.select(i, [a+1, b*2]) # Mux op is renamed to select in python api.\n\nsess.run(c, feed_dict={i: 0, a: 1, b: 2}) # returns 2, trace to see that \"Mul\" node is not executed.\nsess.run(c, feed_dict={i: 1, a: 1, b: 2}) # returns 4, trace to see that \"Add\" node is not executed.\n</code></pre>\n<p>I wouldn't be surprised if this patch causes problem somewhere. In particular, the graph rewriting algorithm may produce valid but cyclic graph. It also lacks proper handling of special nodes like <code>Enter</code> <code>NextIteration</code> etc. However, I would like to know if this approach is promising. I can work on this if there is no fundamental difficulty.</p>", "body_text": "This is a prototype for #9188.\nTwo new ops, Mux and Demux are introduced by this patch. Mux op takes [i, input_0, input_1, ...] as input, and produces input_i as output. It is meant to replace tf.case and tf.cond. Demux op is a generalized version of Switch. It takes [i, input] as input, and produces [output_0, ..., output_N] where output_i is set to input and other outputs are dead.\nThis patch also contains an algorithm that rewrites the graph before execution so that Mux ops are efficient just like tf.cond.\nExample:\ni = tf.placeholder(tf.int32, [])\na = tf.placeholder(tf.int32, [])\nb = tf.placeholder(tf.int32, [])\nc = tf.select(i, [a+1, b*2]) # Mux op is renamed to select in python api.\n\nsess.run(c, feed_dict={i: 0, a: 1, b: 2}) # returns 2, trace to see that \"Mul\" node is not executed.\nsess.run(c, feed_dict={i: 1, a: 1, b: 2}) # returns 4, trace to see that \"Add\" node is not executed.\n\nI wouldn't be surprised if this patch causes problem somewhere. In particular, the graph rewriting algorithm may produce valid but cyclic graph. It also lacks proper handling of special nodes like Enter NextIteration etc. However, I would like to know if this approach is promising. I can work on this if there is no fundamental difficulty.", "body": "This is a prototype for https://github.com/tensorflow/tensorflow/issues/9188.\r\n\r\nTwo new ops, `Mux` and `Demux` are introduced by this patch. `Mux` op takes `[i, input_0, input_1, ...]` as input, and produces `input_i` as output. It is meant to replace `tf.case` and `tf.cond`. `Demux` op is a generalized version of `Switch`. It takes `[i, input]` as input, and produces `[output_0, ..., output_N]` where `output_i` is set to `input` and other outputs are dead.\r\n\r\nThis patch also contains an algorithm that rewrites the graph before execution so that `Mux` ops are efficient just like `tf.cond`.\r\n\r\nExample:\r\n\r\n```\r\ni = tf.placeholder(tf.int32, [])\r\na = tf.placeholder(tf.int32, [])\r\nb = tf.placeholder(tf.int32, [])\r\nc = tf.select(i, [a+1, b*2]) # Mux op is renamed to select in python api.\r\n\r\nsess.run(c, feed_dict={i: 0, a: 1, b: 2}) # returns 2, trace to see that \"Mul\" node is not executed.\r\nsess.run(c, feed_dict={i: 1, a: 1, b: 2}) # returns 4, trace to see that \"Add\" node is not executed.\r\n```\r\n\r\nI wouldn't be surprised if this patch causes problem somewhere. In particular, the graph rewriting algorithm may produce valid but cyclic graph. It also lacks proper handling of special nodes like `Enter` `NextIteration` etc. However, I would like to know if this approach is promising. I can work on this if there is no fundamental difficulty."}