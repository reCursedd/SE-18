{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338559778", "html_url": "https://github.com/tensorflow/tensorflow/pull/13690#issuecomment-338559778", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13690", "id": 338559778, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODU1OTc3OA==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-23T06:28:46Z", "updated_at": "2017-10-23T06:28:46Z", "author_association": "MEMBER", "body_html": "<p>Sorry for the delayed response <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=856081\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mdaley\">@mdaley</a> .<br>\nGreat question about handling unknown shapes and dimensions. Since objects of the <code>Shape</code> class represent partially known shapes, I think it might be safer to consider shapes equal iff each dimension is known and equal (i.e., no -1).</p>\n<p>Thanks for thinking about this (I should have in my first round of reviews).<br>\nThe Python <code>TensorShape</code> class does not consider two shapes with unknown dimensions to be equal, and we should do the same here.</p>\n<p>For example, in Python:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>])\ny <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>])\n<span class=\"pl-k\">assert</span> <span class=\"pl-k\">not</span> (x.shape <span class=\"pl-k\">==</span> y.shape) <span class=\"pl-c\"><span class=\"pl-c\">#</span> First dimension is unknown</span>\n\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])\ny <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])\n<span class=\"pl-k\">assert</span> x.shape <span class=\"pl-k\">==</span> y.shape</pre></div>\n<p>(Implemented in <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_shape.py#L807\"><code>TensorShape.__eq__</code></a>, <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_shape.py#L46\"><code>Dimension.__eq__</code></a>)</p>\n<p>Confusingly, it does treat two completely unknown shapes as equal:</p>\n<div class=\"highlight highlight-source-python\"><pre>x <span class=\"pl-k\">=</span> tf.placeholder(tf.float32)\ny <span class=\"pl-k\">=</span> tf.placeholder(tf.float32)\n<span class=\"pl-k\">assert</span> x.shape <span class=\"pl-k\">==</span> y.shape</pre></div>\n<p>I'll dig into that a bit, but let's update the code to not treat shapes equal when one of the dimensions is unknown (i.e., one of the elements of the <code>shape</code> array is <code>-1</code>)</p>", "body_text": "Sorry for the delayed response @mdaley .\nGreat question about handling unknown shapes and dimensions. Since objects of the Shape class represent partially known shapes, I think it might be safer to consider shapes equal iff each dimension is known and equal (i.e., no -1).\nThanks for thinking about this (I should have in my first round of reviews).\nThe Python TensorShape class does not consider two shapes with unknown dimensions to be equal, and we should do the same here.\nFor example, in Python:\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, [None, 1])\ny = tf.placeholder(tf.float32, [None, 1])\nassert not (x.shape == y.shape) # First dimension is unknown\n\nx = tf.placeholder(tf.float32, [1, 1])\ny = tf.placeholder(tf.float32, [1, 1])\nassert x.shape == y.shape\n(Implemented in TensorShape.__eq__, Dimension.__eq__)\nConfusingly, it does treat two completely unknown shapes as equal:\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\nassert x.shape == y.shape\nI'll dig into that a bit, but let's update the code to not treat shapes equal when one of the dimensions is unknown (i.e., one of the elements of the shape array is -1)", "body": "Sorry for the delayed response @mdaley .\r\nGreat question about handling unknown shapes and dimensions. Since objects of the `Shape` class represent partially known shapes, I think it might be safer to consider shapes equal iff each dimension is known and equal (i.e., no -1).\r\n\r\nThanks for thinking about this (I should have in my first round of reviews).\r\nThe Python `TensorShape` class does not consider two shapes with unknown dimensions to be equal, and we should do the same here.\r\n\r\nFor example, in Python:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nx = tf.placeholder(tf.float32, [None, 1])\r\ny = tf.placeholder(tf.float32, [None, 1])\r\nassert not (x.shape == y.shape) # First dimension is unknown\r\n\r\nx = tf.placeholder(tf.float32, [1, 1])\r\ny = tf.placeholder(tf.float32, [1, 1])\r\nassert x.shape == y.shape\r\n```\r\n\r\n(Implemented in [`TensorShape.__eq__`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_shape.py#L807), [`Dimension.__eq__`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_shape.py#L46))\r\n\r\nConfusingly, it does treat two completely unknown shapes as equal:\r\n\r\n```python\r\nx = tf.placeholder(tf.float32)\r\ny = tf.placeholder(tf.float32)\r\nassert x.shape == y.shape\r\n```\r\n\r\nI'll dig into that a bit, but let's update the code to not treat shapes equal when one of the dimensions is unknown (i.e., one of the elements of the `shape` array is `-1`)\r\n"}