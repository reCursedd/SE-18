{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14384", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14384/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14384/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14384/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14384", "id": 272350205, "node_id": "MDU6SXNzdWUyNzIzNTAyMDU=", "number": 14384, "title": "Cannot make an input layer that takes scalars with the keras functional api", "user": {"login": "vishvananda", "id": 142222, "node_id": "MDQ6VXNlcjE0MjIyMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/142222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishvananda", "html_url": "https://github.com/vishvananda", "followers_url": "https://api.github.com/users/vishvananda/followers", "following_url": "https://api.github.com/users/vishvananda/following{/other_user}", "gists_url": "https://api.github.com/users/vishvananda/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishvananda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishvananda/subscriptions", "organizations_url": "https://api.github.com/users/vishvananda/orgs", "repos_url": "https://api.github.com/users/vishvananda/repos", "events_url": "https://api.github.com/users/vishvananda/events{/privacy}", "received_events_url": "https://api.github.com/users/vishvananda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-08T21:09:07Z", "updated_at": "2017-11-09T01:36:11Z", "closed_at": "2017-11-08T22:28:48Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source (branch 1.4)</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.0-dev</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 5.4.0</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0/6.0</li>\n<li><strong>GPU model and memory</strong>: nVidia 1080Ti 11G</li>\n<li><strong>Exact command to reproduce</strong>: run the script below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The following is an attempt to use the keras functional api to make a model that accepts scalars as input:</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow.contrib.keras.api.keras.models import Model\nfrom tensorflow.contrib.keras.api.keras.layers import Input\ni = Input(batch_shape=(None, ), dtype=tf.uint8, name=\"input\")\nm = Model(inputs=i, outputs=i)\n</code></pre>\n<p>which fails like so:</p>\n<pre><code>---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-54-dd00bec66757&gt; in &lt;module&gt;()\n----&gt; 1 i = Input(batch_shape=(None, ), dtype=tf.uint8, name=\"input\")\n      2 m = Model(inputs=i, outputs=i)\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/engine/topology.py in Input(shape, batch_size, name, dtype, sparse, tensor, **kwargs)\n    611     dtype = K.floatx()\n    612   if not shape and tensor is None:\n--&gt; 613     raise ValueError('Please provide to Input either a `shape`'\n    614                      ' or a `tensor` argument. Note that '\n    615                      '`shape` does not include the batch '\n\nValueError: Please provide to Input either a `shape` or a `tensor` argument. Note that `shape` does not include the batch dimension.\n</code></pre>\n<p>Using a sequential model instead works fine:</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow.contrib.keras.api.keras.models import Sequential\nfrom tensorflow.contrib.keras.api.keras.layers import InputLayer\nm = Sequential()\nm.add(InputLayer(batch_input_shape=(None, ), dtype=tf.uint8, name=\"input\"))\n</code></pre>\n<p>Additionally using the external keras works fine:</p>\n<pre><code>import tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input\ni = Input(batch_shape=(None, ), dtype=tf.uint8, name=\"input\")\nm = Model(inputs=i, outputs=i)\n</code></pre>\n<p>It appears that this broke when the tensor and batch_size arguments were added to the internal version.<br>\nHere is one possible way to fix it which I can propose if people are ok with it:</p>\n<pre><code>diff --git a/tensorflow/python/keras/_impl/keras/engine/topology.py b/tensorflow/python/keras/_impl/keras/engine/topology.py\nindex f9be782..74df725 100644\n--- a/tensorflow/python/keras/_impl/keras/engine/topology.py\n+++ b/tensorflow/python/keras/_impl/keras/engine/topology.py\n@@ -605,21 +605,20 @@ def Input(  # pylint: disable=invalid-name\n       raise ValueError('Only provide the shape OR '\n                        'batch_shape argument to '\n                        'Input, not both at the same time.')\n-    batch_size = batch_shape[0]\n-    shape = batch_shape[1:]\n+  else:\n+    if not shape and tensor is None:\n+      raise ValueError('Please provide to Input either a `shape`'\n+                       ' or a `batch_shape` or a `tensor` argument.'\n+                       ' Note that `shape` does not include the batch '\n+                       'dimension.')\n+    batch_shape = (batch_size,) + tuple(shape)\n   if kwargs:\n     raise ValueError('Unrecognized keyword arguments:', kwargs.keys())\n \n   if dtype is None:\n     dtype = K.floatx()\n-  if not shape and tensor is None:\n-    raise ValueError('Please provide to Input either a `shape`'\n-                     ' or a `tensor` argument. Note that '\n-                     '`shape` does not include the batch '\n-                     'dimension.')\n   input_layer = InputLayer(\n-      input_shape=shape,\n-      batch_size=batch_size,\n+      batch_input_shape=batch_shape,\n       name=name,\n       dtype=dtype,\n       sparse=sparse,\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): source (branch 1.4)\nTensorFlow version (use command below): 1.4.0-dev\nPython version: 3.5\nBazel version (if compiling from source): 5.4.0\nCUDA/cuDNN version: 8.0/6.0\nGPU model and memory: nVidia 1080Ti 11G\nExact command to reproduce: run the script below\n\nDescribe the problem\nThe following is an attempt to use the keras functional api to make a model that accepts scalars as input:\nimport tensorflow as tf\nfrom tensorflow.contrib.keras.api.keras.models import Model\nfrom tensorflow.contrib.keras.api.keras.layers import Input\ni = Input(batch_shape=(None, ), dtype=tf.uint8, name=\"input\")\nm = Model(inputs=i, outputs=i)\n\nwhich fails like so:\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-54-dd00bec66757> in <module>()\n----> 1 i = Input(batch_shape=(None, ), dtype=tf.uint8, name=\"input\")\n      2 m = Model(inputs=i, outputs=i)\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/engine/topology.py in Input(shape, batch_size, name, dtype, sparse, tensor, **kwargs)\n    611     dtype = K.floatx()\n    612   if not shape and tensor is None:\n--> 613     raise ValueError('Please provide to Input either a `shape`'\n    614                      ' or a `tensor` argument. Note that '\n    615                      '`shape` does not include the batch '\n\nValueError: Please provide to Input either a `shape` or a `tensor` argument. Note that `shape` does not include the batch dimension.\n\nUsing a sequential model instead works fine:\nimport tensorflow as tf\nfrom tensorflow.contrib.keras.api.keras.models import Sequential\nfrom tensorflow.contrib.keras.api.keras.layers import InputLayer\nm = Sequential()\nm.add(InputLayer(batch_input_shape=(None, ), dtype=tf.uint8, name=\"input\"))\n\nAdditionally using the external keras works fine:\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Input\ni = Input(batch_shape=(None, ), dtype=tf.uint8, name=\"input\")\nm = Model(inputs=i, outputs=i)\n\nIt appears that this broke when the tensor and batch_size arguments were added to the internal version.\nHere is one possible way to fix it which I can propose if people are ok with it:\ndiff --git a/tensorflow/python/keras/_impl/keras/engine/topology.py b/tensorflow/python/keras/_impl/keras/engine/topology.py\nindex f9be782..74df725 100644\n--- a/tensorflow/python/keras/_impl/keras/engine/topology.py\n+++ b/tensorflow/python/keras/_impl/keras/engine/topology.py\n@@ -605,21 +605,20 @@ def Input(  # pylint: disable=invalid-name\n       raise ValueError('Only provide the shape OR '\n                        'batch_shape argument to '\n                        'Input, not both at the same time.')\n-    batch_size = batch_shape[0]\n-    shape = batch_shape[1:]\n+  else:\n+    if not shape and tensor is None:\n+      raise ValueError('Please provide to Input either a `shape`'\n+                       ' or a `batch_shape` or a `tensor` argument.'\n+                       ' Note that `shape` does not include the batch '\n+                       'dimension.')\n+    batch_shape = (batch_size,) + tuple(shape)\n   if kwargs:\n     raise ValueError('Unrecognized keyword arguments:', kwargs.keys())\n \n   if dtype is None:\n     dtype = K.floatx()\n-  if not shape and tensor is None:\n-    raise ValueError('Please provide to Input either a `shape`'\n-                     ' or a `tensor` argument. Note that '\n-                     '`shape` does not include the batch '\n-                     'dimension.')\n   input_layer = InputLayer(\n-      input_shape=shape,\n-      batch_size=batch_size,\n+      batch_input_shape=batch_shape,\n       name=name,\n       dtype=dtype,\n       sparse=sparse,", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: source (branch 1.4)\r\n- **TensorFlow version (use command below)**: 1.4.0-dev\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**: 5.4.0\r\n- **CUDA/cuDNN version**: 8.0/6.0\r\n- **GPU model and memory**: nVidia 1080Ti 11G\r\n- **Exact command to reproduce**: run the script below\r\n\r\n### Describe the problem\r\n\r\nThe following is an attempt to use the keras functional api to make a model that accepts scalars as input:\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.keras.api.keras.models import Model\r\nfrom tensorflow.contrib.keras.api.keras.layers import Input\r\ni = Input(batch_shape=(None, ), dtype=tf.uint8, name=\"input\")\r\nm = Model(inputs=i, outputs=i)\r\n```\r\nwhich fails like so:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-54-dd00bec66757> in <module>()\r\n----> 1 i = Input(batch_shape=(None, ), dtype=tf.uint8, name=\"input\")\r\n      2 m = Model(inputs=i, outputs=i)\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/_impl/keras/engine/topology.py in Input(shape, batch_size, name, dtype, sparse, tensor, **kwargs)\r\n    611     dtype = K.floatx()\r\n    612   if not shape and tensor is None:\r\n--> 613     raise ValueError('Please provide to Input either a `shape`'\r\n    614                      ' or a `tensor` argument. Note that '\r\n    615                      '`shape` does not include the batch '\r\n\r\nValueError: Please provide to Input either a `shape` or a `tensor` argument. Note that `shape` does not include the batch dimension.\r\n```\r\nUsing a sequential model instead works fine:\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.keras.api.keras.models import Sequential\r\nfrom tensorflow.contrib.keras.api.keras.layers import InputLayer\r\nm = Sequential()\r\nm.add(InputLayer(batch_input_shape=(None, ), dtype=tf.uint8, name=\"input\"))\r\n```\r\nAdditionally using the external keras works fine:\r\n```\r\nimport tensorflow as tf\r\nfrom keras.models import Model\r\nfrom keras.layers import Input\r\ni = Input(batch_shape=(None, ), dtype=tf.uint8, name=\"input\")\r\nm = Model(inputs=i, outputs=i)\r\n```\r\nIt appears that this broke when the tensor and batch_size arguments were added to the internal version.\r\nHere is one possible way to fix it which I can propose if people are ok with it:\r\n```\r\ndiff --git a/tensorflow/python/keras/_impl/keras/engine/topology.py b/tensorflow/python/keras/_impl/keras/engine/topology.py\r\nindex f9be782..74df725 100644\r\n--- a/tensorflow/python/keras/_impl/keras/engine/topology.py\r\n+++ b/tensorflow/python/keras/_impl/keras/engine/topology.py\r\n@@ -605,21 +605,20 @@ def Input(  # pylint: disable=invalid-name\r\n       raise ValueError('Only provide the shape OR '\r\n                        'batch_shape argument to '\r\n                        'Input, not both at the same time.')\r\n-    batch_size = batch_shape[0]\r\n-    shape = batch_shape[1:]\r\n+  else:\r\n+    if not shape and tensor is None:\r\n+      raise ValueError('Please provide to Input either a `shape`'\r\n+                       ' or a `batch_shape` or a `tensor` argument.'\r\n+                       ' Note that `shape` does not include the batch '\r\n+                       'dimension.')\r\n+    batch_shape = (batch_size,) + tuple(shape)\r\n   if kwargs:\r\n     raise ValueError('Unrecognized keyword arguments:', kwargs.keys())\r\n \r\n   if dtype is None:\r\n     dtype = K.floatx()\r\n-  if not shape and tensor is None:\r\n-    raise ValueError('Please provide to Input either a `shape`'\r\n-                     ' or a `tensor` argument. Note that '\r\n-                     '`shape` does not include the batch '\r\n-                     'dimension.')\r\n   input_layer = InputLayer(\r\n-      input_shape=shape,\r\n-      batch_size=batch_size,\r\n+      batch_input_shape=batch_shape,\r\n       name=name,\r\n       dtype=dtype,\r\n       sparse=sparse,\r\n```\r\n\r\n"}