{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13482", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13482/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13482/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13482/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13482", "id": 262658135, "node_id": "MDU6SXNzdWUyNjI2NTgxMzU=", "number": 13482, "title": "Error in creating the final binary using AOT compilation for CPU backend", "user": {"login": "MartinZZZ", "id": 12166108, "node_id": "MDQ6VXNlcjEyMTY2MTA4", "avatar_url": "https://avatars0.githubusercontent.com/u/12166108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartinZZZ", "html_url": "https://github.com/MartinZZZ", "followers_url": "https://api.github.com/users/MartinZZZ/followers", "following_url": "https://api.github.com/users/MartinZZZ/following{/other_user}", "gists_url": "https://api.github.com/users/MartinZZZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartinZZZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartinZZZ/subscriptions", "organizations_url": "https://api.github.com/users/MartinZZZ/orgs", "repos_url": "https://api.github.com/users/MartinZZZ/repos", "events_url": "https://api.github.com/users/MartinZZZ/events{/privacy}", "received_events_url": "https://api.github.com/users/MartinZZZ/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-10-04T03:57:43Z", "updated_at": "2017-10-12T00:06:55Z", "closed_at": "2017-10-12T00:06:55Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.3.0-rc1-2665-g242b0f1</li>\n<li><strong>Python version</strong>: Python3</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.6.0</li>\n<li><strong>CUDA/cuDNN version</strong>: No</li>\n<li><strong>GPU model and memory</strong>: No</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nbazel build //tensorflow/compiler/aot/tests:my_binary</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I simply followed the tutorial here: <a href=\"https://www.tensorflow.org/performance/xla/tfcompile\" rel=\"nofollow\">https://www.tensorflow.org/performance/xla/tfcompile</a></p>\n<p>According to Step 1 and 2, I compiled the subgraph and generated the header (<code>test_graph_tfmatmul.h</code>) and object (<code>test_graph_tfmatmul.o</code>) files using <code>tfcompile</code>;</p>\n<p>According to Step 3, I used the example code (named as <code>my_code.cc</code>) to invoke the subgraph;</p>\n<p>According to Step 4, I added the code snippet <code>cc_binary</code> to the existing <code>BUILD</code> file (<code>//tensorflow/compiler/aot/tests/BUILD</code>), and tried to create the final binary with the command:</p>\n<p><code>bazel build //tensorflow/compiler/aot/tests:my_binary</code></p>\n<p>but I got the following error:</p>\n<p><code>undeclared inclusion(s) in rule '//tensorflow/compiler/aot/tests:my_binary': this rule is missing dependency declarations for the following files included by 'tensorflow/compiler/aot/tests/my_code.cc': '/home/tensorFlow_src/tensorflow/tensorflow/compiler/aot/tests/test_graph_tfmatmul.h'</code></p>\n<h3>Source code / logs</h3>\n<p><code>my_code.cc</code> (exactly the same as in the tutorial):</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_USE_THREADS</span>\n#<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_USE_CUSTOM_THREAD_POOL</span>\n\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>iostream<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>third_party/eigen3/unsupported/Eigen/CXX11/Tensor<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/compiler/aot/tests/test_graph_tfmatmul.h<span class=\"pl-pds\">\"</span></span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> generated</span>\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">int</span> argc, <span class=\"pl-k\">char</span>** argv) {\n  Eigen::ThreadPool <span class=\"pl-smi\">tp</span>(<span class=\"pl-c1\">2</span>);  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Size the thread pool as appropriate.</span>\n  Eigen::ThreadPoolDevice <span class=\"pl-smi\">device</span>(&amp;tp, tp.<span class=\"pl-c1\">NumThreads</span>());\n\n  foo::bar::MatMulComp matmul;\n  matmul.<span class=\"pl-c1\">set_thread_pool</span>(&amp;device);\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Set up args and run the computation.</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">float</span> args[<span class=\"pl-c1\">12</span>] = {<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">9</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">11</span>, <span class=\"pl-c1\">12</span>};\n  <span class=\"pl-c1\">std::copy</span>(args + <span class=\"pl-c1\">0</span>, args + <span class=\"pl-c1\">6</span>, matmul.<span class=\"pl-c1\">arg0_data</span>());\n  <span class=\"pl-c1\">std::copy</span>(args + <span class=\"pl-c1\">6</span>, args + <span class=\"pl-c1\">12</span>, matmul.<span class=\"pl-c1\">arg1_data</span>());\n  matmul.<span class=\"pl-c1\">Run</span>();\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Check result</span>\n  <span class=\"pl-k\">if</span> (matmul.<span class=\"pl-c1\">result0</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>) == <span class=\"pl-c1\">58</span>) {\n    std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Success<span class=\"pl-pds\">\"</span></span> &lt;&lt; std::endl;\n  } <span class=\"pl-k\">else</span> {\n    std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Failed. Expected value 58 at 0,0. Got:<span class=\"pl-pds\">\"</span></span>\n              &lt;&lt; matmul.<span class=\"pl-c1\">result0</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>) &lt;&lt; std::endl;\n  }\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n}</pre></div>\n<p><code>cc_binary</code> in <code>BUILD</code> file:</p>\n<pre><code>cc_binary(\n    name = \"my_binary\",\n    srcs = [\"my_code.cc\"],\n    deps = [\n        \"//tensorflow/compiler/aot/tests:test_graph_tfmatmul\",\n        \"//third_party/eigen3\",\n    ],\n    linkopts = [\"-lpthread\",]\n)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): v1.3.0-rc1-2665-g242b0f1\nPython version: Python3\nBazel version (if compiling from source): 0.6.0\nCUDA/cuDNN version: No\nGPU model and memory: No\nExact command to reproduce:\nbazel build //tensorflow/compiler/aot/tests:my_binary\n\nDescribe the problem\nI simply followed the tutorial here: https://www.tensorflow.org/performance/xla/tfcompile\nAccording to Step 1 and 2, I compiled the subgraph and generated the header (test_graph_tfmatmul.h) and object (test_graph_tfmatmul.o) files using tfcompile;\nAccording to Step 3, I used the example code (named as my_code.cc) to invoke the subgraph;\nAccording to Step 4, I added the code snippet cc_binary to the existing BUILD file (//tensorflow/compiler/aot/tests/BUILD), and tried to create the final binary with the command:\nbazel build //tensorflow/compiler/aot/tests:my_binary\nbut I got the following error:\nundeclared inclusion(s) in rule '//tensorflow/compiler/aot/tests:my_binary': this rule is missing dependency declarations for the following files included by 'tensorflow/compiler/aot/tests/my_code.cc': '/home/tensorFlow_src/tensorflow/tensorflow/compiler/aot/tests/test_graph_tfmatmul.h'\nSource code / logs\nmy_code.cc (exactly the same as in the tutorial):\n#define EIGEN_USE_THREADS\n#define EIGEN_USE_CUSTOM_THREAD_POOL\n\n#include <iostream>\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/compiler/aot/tests/test_graph_tfmatmul.h\" // generated\n\nint main(int argc, char** argv) {\n  Eigen::ThreadPool tp(2);  // Size the thread pool as appropriate.\n  Eigen::ThreadPoolDevice device(&tp, tp.NumThreads());\n\n  foo::bar::MatMulComp matmul;\n  matmul.set_thread_pool(&device);\n\n  // Set up args and run the computation.\n  const float args[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n  std::copy(args + 0, args + 6, matmul.arg0_data());\n  std::copy(args + 6, args + 12, matmul.arg1_data());\n  matmul.Run();\n\n  // Check result\n  if (matmul.result0(0, 0) == 58) {\n    std::cout << \"Success\" << std::endl;\n  } else {\n    std::cout << \"Failed. Expected value 58 at 0,0. Got:\"\n              << matmul.result0(0, 0) << std::endl;\n  }\n\n  return 0;\n}\ncc_binary in BUILD file:\ncc_binary(\n    name = \"my_binary\",\n    srcs = [\"my_code.cc\"],\n    deps = [\n        \"//tensorflow/compiler/aot/tests:test_graph_tfmatmul\",\n        \"//third_party/eigen3\",\n    ],\n    linkopts = [\"-lpthread\",]\n)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: v1.3.0-rc1-2665-g242b0f1\r\n- **Python version**: Python3\r\n- **Bazel version (if compiling from source)**: 0.6.0\r\n- **CUDA/cuDNN version**: No\r\n- **GPU model and memory**: No\r\n- **Exact command to reproduce**: \r\nbazel build //tensorflow/compiler/aot/tests:my_binary\r\n\r\n\r\n### Describe the problem\r\nI simply followed the tutorial here: https://www.tensorflow.org/performance/xla/tfcompile\r\n\r\nAccording to Step 1 and 2, I compiled the subgraph and generated the header (`test_graph_tfmatmul.h`) and object (`test_graph_tfmatmul.o`) files using `tfcompile`;\r\n\r\nAccording to Step 3, I used the example code (named as `my_code.cc`) to invoke the subgraph;\r\n\r\nAccording to Step 4, I added the code snippet `cc_binary` to the existing `BUILD` file (`//tensorflow/compiler/aot/tests/BUILD`), and tried to create the final binary with the command:\r\n\r\n`bazel build //tensorflow/compiler/aot/tests:my_binary`\r\n\r\nbut I got the following error:\r\n\r\n`undeclared inclusion(s) in rule '//tensorflow/compiler/aot/tests:my_binary':\r\nthis rule is missing dependency declarations for the following files included by 'tensorflow/compiler/aot/tests/my_code.cc':\r\n'/home/tensorFlow_src/tensorflow/tensorflow/compiler/aot/tests/test_graph_tfmatmul.h'`\r\n\r\n### Source code / logs\r\n`my_code.cc` (exactly the same as in the tutorial):\r\n```c++\r\n#define EIGEN_USE_THREADS\r\n#define EIGEN_USE_CUSTOM_THREAD_POOL\r\n\r\n#include <iostream>\r\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\r\n#include \"tensorflow/compiler/aot/tests/test_graph_tfmatmul.h\" // generated\r\n\r\nint main(int argc, char** argv) {\r\n  Eigen::ThreadPool tp(2);  // Size the thread pool as appropriate.\r\n  Eigen::ThreadPoolDevice device(&tp, tp.NumThreads());\r\n\r\n  foo::bar::MatMulComp matmul;\r\n  matmul.set_thread_pool(&device);\r\n\r\n  // Set up args and run the computation.\r\n  const float args[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\r\n  std::copy(args + 0, args + 6, matmul.arg0_data());\r\n  std::copy(args + 6, args + 12, matmul.arg1_data());\r\n  matmul.Run();\r\n\r\n  // Check result\r\n  if (matmul.result0(0, 0) == 58) {\r\n    std::cout << \"Success\" << std::endl;\r\n  } else {\r\n    std::cout << \"Failed. Expected value 58 at 0,0. Got:\"\r\n              << matmul.result0(0, 0) << std::endl;\r\n  }\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n`cc_binary` in `BUILD` file:\r\n```\r\ncc_binary(\r\n    name = \"my_binary\",\r\n    srcs = [\"my_code.cc\"],\r\n    deps = [\r\n        \"//tensorflow/compiler/aot/tests:test_graph_tfmatmul\",\r\n        \"//third_party/eigen3\",\r\n    ],\r\n    linkopts = [\"-lpthread\",]\r\n)\r\n```"}