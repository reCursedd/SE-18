{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335702425", "html_url": "https://github.com/tensorflow/tensorflow/issues/13482#issuecomment-335702425", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13482", "id": 335702425, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTcwMjQyNQ==", "user": {"login": "MartinZZZ", "id": 12166108, "node_id": "MDQ6VXNlcjEyMTY2MTA4", "avatar_url": "https://avatars0.githubusercontent.com/u/12166108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartinZZZ", "html_url": "https://github.com/MartinZZZ", "followers_url": "https://api.github.com/users/MartinZZZ/followers", "following_url": "https://api.github.com/users/MartinZZZ/following{/other_user}", "gists_url": "https://api.github.com/users/MartinZZZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartinZZZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartinZZZ/subscriptions", "organizations_url": "https://api.github.com/users/MartinZZZ/orgs", "repos_url": "https://api.github.com/users/MartinZZZ/repos", "events_url": "https://api.github.com/users/MartinZZZ/events{/privacy}", "received_events_url": "https://api.github.com/users/MartinZZZ/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-11T07:01:58Z", "updated_at": "2017-10-11T07:01:58Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5453737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tatatodd\">@tatatodd</a> Thanks for your suggestion. I tried a clean copy of the sources, and built the <code>tfcompile_test</code> successfully.</p>\n<p>But error still occurs when building <code>tfmatmul</code> according to the <a href=\"https://www.tensorflow.org/performance/xla/tfcompile\" rel=\"nofollow\">tutorial</a>. Here is the detailed procedure, and hope to have your advice (The following 4 steps are corresponding to the 4 steps in the tutorial):</p>\n<ul>\n<li>\n<p>Step 1: Configure the subgraph. The config file already exists as <code>test_graph_tfmatmul.config.pbtxt</code> in directory <code>//tensorflow/compiler/aot/tests</code>;</p>\n</li>\n<li>\n<p>Step 2.1: Generate the graph file <code>test_graph_tfmatmul.pb</code>:</p>\n</li>\n</ul>\n<pre><code>python3 ./make_test_graphs.py --out_dir=./\n</code></pre>\n<ul>\n<li>Step 2.2: Compile the graph using <code>tfcompile</code>:</li>\n</ul>\n<pre><code>~/tensorFlow_src/tensorflow/bazel-bin/tensorflow/compiler/aot/tfcompile --graph=\"./test_graph_tfmatmul.pb\" --config=\"./test_graph_tfmatmul.config.pbtxt\" --entry_point=\"test_graph_tfmatmul\" --cpp_class=\"foo::bar::MatMulComp\" --out_object=\"test_graph_tfmatmul.o\" --out_header=\"test_graph_tfmatmul.h\" --target_features=\"+avx2\"\n</code></pre>\n<ul>\n<li>Step 3: Creating a file named <code>my_code.cc</code>:</li>\n</ul>\n<pre><code>#define EIGEN_USE_THREADS\n#define EIGEN_USE_CUSTOM_THREAD_POOL\n\n#include &lt;iostream&gt;\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/compiler/aot/tests/test_graph_tfmatmul.h\" // generated\n\nint main(int argc, char** argv) {\n    Eigen::ThreadPool tp(2);  // Size the thread pool as appropriate.\n    Eigen::ThreadPoolDevice device(&amp;tp, tp.NumThreads());\n\n    foo::bar::MatMulComp matmul;\n    matmul.set_thread_pool(&amp;device);\n\n    // Set up args and run the computation.\n    const float args[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n    std::copy(args + 0, args + 6, matmul.arg0_data());\n    std::copy(args + 6, args + 12, matmul.arg1_data());\n    matmul.Run();\n\n    // Check result\n    if (matmul.result0(0, 0) == 58) {\n        std::cout &lt;&lt; \"Success\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"Failed. Expected value 58 at 0,0. Got:\"\n                    &lt;&lt; matmul.result0(0, 0) &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>\n<ul>\n<li>Step 4.1: Create the <code>BUILD</code> file:</li>\n</ul>\n<pre><code># Example of linking your binary\n# Also see //third_party/tensorflow/compiler/aot/tests/BUILD\nload(\"//tensorflow/compiler/aot:tfcompile.bzl\", \"tf_library\")\n\n# The same tf_library call from step 2 above.\ntf_library(\n    name = \"test_graph_tfmatmul\",\n    cpp_class = \"foo::bar::MatMulComp\",\n    graph = \"test_graph_tfmatmul.pb\",\n    config = \"test_graph_tfmatmul.config.pbtxt\",\n)\n\n# The executable code generated by tf_library can then be linked into your code.\ncc_binary(\n    name = \"my_binary\",\n    srcs = [\n        \"my_code.cc\",  # include test_graph_tfmatmul.h to access the generated header\n    ],\n    deps = [\n        \":test_graph_tfmatmul\",  # link in the generated object file\n        \"//third_party/eigen3\",\n    ],\n    linkopts = [\n        \"-lpthread\",\n    ]\n)\n</code></pre>\n<ul>\n<li>Step 4.2: Create the final binary:</li>\n</ul>\n<pre><code>bazel build --config=opt --copt=-mavx2 --copt=-mfma --config=mkl --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" //tensorflow/compiler/aot/tests:my_binary\n</code></pre>\n<p>Finally, it will print:</p>\n<pre><code>ERROR: /home/tensorFlow_clean/tensorflow/tensorflow/compiler/aot/tests/BUILD:14:1: undeclared inclusion(s) in rule '//tensorflow/compiler/aot/tests:my_binary':\nthis rule is missing dependency declarations for the following files included by 'tensorflow/compiler/aot/tests/my_code.cc':\n  '/home/tensorFlow_clean/tensorflow/tensorflow/compiler/aot/tests/test_graph_tfmatmul.h'\nTarget //tensorflow/compiler/aot/tests:my_binary failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 7.339s, Critical Path: 6.69s\nFAILED: Build did NOT complete successfully\n</code></pre>", "body_text": "@tatatodd Thanks for your suggestion. I tried a clean copy of the sources, and built the tfcompile_test successfully.\nBut error still occurs when building tfmatmul according to the tutorial. Here is the detailed procedure, and hope to have your advice (The following 4 steps are corresponding to the 4 steps in the tutorial):\n\n\nStep 1: Configure the subgraph. The config file already exists as test_graph_tfmatmul.config.pbtxt in directory //tensorflow/compiler/aot/tests;\n\n\nStep 2.1: Generate the graph file test_graph_tfmatmul.pb:\n\n\npython3 ./make_test_graphs.py --out_dir=./\n\n\nStep 2.2: Compile the graph using tfcompile:\n\n~/tensorFlow_src/tensorflow/bazel-bin/tensorflow/compiler/aot/tfcompile --graph=\"./test_graph_tfmatmul.pb\" --config=\"./test_graph_tfmatmul.config.pbtxt\" --entry_point=\"test_graph_tfmatmul\" --cpp_class=\"foo::bar::MatMulComp\" --out_object=\"test_graph_tfmatmul.o\" --out_header=\"test_graph_tfmatmul.h\" --target_features=\"+avx2\"\n\n\nStep 3: Creating a file named my_code.cc:\n\n#define EIGEN_USE_THREADS\n#define EIGEN_USE_CUSTOM_THREAD_POOL\n\n#include <iostream>\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/compiler/aot/tests/test_graph_tfmatmul.h\" // generated\n\nint main(int argc, char** argv) {\n    Eigen::ThreadPool tp(2);  // Size the thread pool as appropriate.\n    Eigen::ThreadPoolDevice device(&tp, tp.NumThreads());\n\n    foo::bar::MatMulComp matmul;\n    matmul.set_thread_pool(&device);\n\n    // Set up args and run the computation.\n    const float args[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n    std::copy(args + 0, args + 6, matmul.arg0_data());\n    std::copy(args + 6, args + 12, matmul.arg1_data());\n    matmul.Run();\n\n    // Check result\n    if (matmul.result0(0, 0) == 58) {\n        std::cout << \"Success\" << std::endl;\n    } else {\n        std::cout << \"Failed. Expected value 58 at 0,0. Got:\"\n                    << matmul.result0(0, 0) << std::endl;\n    }\n\n    return 0;\n}\n\n\nStep 4.1: Create the BUILD file:\n\n# Example of linking your binary\n# Also see //third_party/tensorflow/compiler/aot/tests/BUILD\nload(\"//tensorflow/compiler/aot:tfcompile.bzl\", \"tf_library\")\n\n# The same tf_library call from step 2 above.\ntf_library(\n    name = \"test_graph_tfmatmul\",\n    cpp_class = \"foo::bar::MatMulComp\",\n    graph = \"test_graph_tfmatmul.pb\",\n    config = \"test_graph_tfmatmul.config.pbtxt\",\n)\n\n# The executable code generated by tf_library can then be linked into your code.\ncc_binary(\n    name = \"my_binary\",\n    srcs = [\n        \"my_code.cc\",  # include test_graph_tfmatmul.h to access the generated header\n    ],\n    deps = [\n        \":test_graph_tfmatmul\",  # link in the generated object file\n        \"//third_party/eigen3\",\n    ],\n    linkopts = [\n        \"-lpthread\",\n    ]\n)\n\n\nStep 4.2: Create the final binary:\n\nbazel build --config=opt --copt=-mavx2 --copt=-mfma --config=mkl --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" //tensorflow/compiler/aot/tests:my_binary\n\nFinally, it will print:\nERROR: /home/tensorFlow_clean/tensorflow/tensorflow/compiler/aot/tests/BUILD:14:1: undeclared inclusion(s) in rule '//tensorflow/compiler/aot/tests:my_binary':\nthis rule is missing dependency declarations for the following files included by 'tensorflow/compiler/aot/tests/my_code.cc':\n  '/home/tensorFlow_clean/tensorflow/tensorflow/compiler/aot/tests/test_graph_tfmatmul.h'\nTarget //tensorflow/compiler/aot/tests:my_binary failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 7.339s, Critical Path: 6.69s\nFAILED: Build did NOT complete successfully", "body": "@tatatodd Thanks for your suggestion. I tried a clean copy of the sources, and built the `tfcompile_test` successfully.\r\n\r\nBut error still occurs when building `tfmatmul` according to the [tutorial](https://www.tensorflow.org/performance/xla/tfcompile). Here is the detailed procedure, and hope to have your advice (The following 4 steps are corresponding to the 4 steps in the tutorial):\r\n\r\n- Step 1: Configure the subgraph. The config file already exists as `test_graph_tfmatmul.config.pbtxt` in directory `//tensorflow/compiler/aot/tests`;\r\n\r\n- Step 2.1: Generate the graph file `test_graph_tfmatmul.pb`:\r\n```\r\npython3 ./make_test_graphs.py --out_dir=./\r\n```\r\n- Step 2.2: Compile the graph using `tfcompile`:\r\n```\r\n~/tensorFlow_src/tensorflow/bazel-bin/tensorflow/compiler/aot/tfcompile --graph=\"./test_graph_tfmatmul.pb\" --config=\"./test_graph_tfmatmul.config.pbtxt\" --entry_point=\"test_graph_tfmatmul\" --cpp_class=\"foo::bar::MatMulComp\" --out_object=\"test_graph_tfmatmul.o\" --out_header=\"test_graph_tfmatmul.h\" --target_features=\"+avx2\"\r\n```\r\n\r\n- Step 3: Creating a file named `my_code.cc`:\r\n```\r\n#define EIGEN_USE_THREADS\r\n#define EIGEN_USE_CUSTOM_THREAD_POOL\r\n\r\n#include <iostream>\r\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\r\n#include \"tensorflow/compiler/aot/tests/test_graph_tfmatmul.h\" // generated\r\n\r\nint main(int argc, char** argv) {\r\n    Eigen::ThreadPool tp(2);  // Size the thread pool as appropriate.\r\n    Eigen::ThreadPoolDevice device(&tp, tp.NumThreads());\r\n\r\n    foo::bar::MatMulComp matmul;\r\n    matmul.set_thread_pool(&device);\r\n\r\n    // Set up args and run the computation.\r\n    const float args[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\r\n    std::copy(args + 0, args + 6, matmul.arg0_data());\r\n    std::copy(args + 6, args + 12, matmul.arg1_data());\r\n    matmul.Run();\r\n\r\n    // Check result\r\n    if (matmul.result0(0, 0) == 58) {\r\n        std::cout << \"Success\" << std::endl;\r\n    } else {\r\n        std::cout << \"Failed. Expected value 58 at 0,0. Got:\"\r\n                    << matmul.result0(0, 0) << std::endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n- Step 4.1: Create the `BUILD` file:\r\n```\r\n# Example of linking your binary\r\n# Also see //third_party/tensorflow/compiler/aot/tests/BUILD\r\nload(\"//tensorflow/compiler/aot:tfcompile.bzl\", \"tf_library\")\r\n\r\n# The same tf_library call from step 2 above.\r\ntf_library(\r\n    name = \"test_graph_tfmatmul\",\r\n    cpp_class = \"foo::bar::MatMulComp\",\r\n    graph = \"test_graph_tfmatmul.pb\",\r\n    config = \"test_graph_tfmatmul.config.pbtxt\",\r\n)\r\n\r\n# The executable code generated by tf_library can then be linked into your code.\r\ncc_binary(\r\n    name = \"my_binary\",\r\n    srcs = [\r\n        \"my_code.cc\",  # include test_graph_tfmatmul.h to access the generated header\r\n    ],\r\n    deps = [\r\n        \":test_graph_tfmatmul\",  # link in the generated object file\r\n        \"//third_party/eigen3\",\r\n    ],\r\n    linkopts = [\r\n        \"-lpthread\",\r\n    ]\r\n)\r\n```\r\n\r\n- Step 4.2: Create the final binary:\r\n```\r\nbazel build --config=opt --copt=-mavx2 --copt=-mfma --config=mkl --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" //tensorflow/compiler/aot/tests:my_binary\r\n```\r\n\r\nFinally, it will print:\r\n```\r\nERROR: /home/tensorFlow_clean/tensorflow/tensorflow/compiler/aot/tests/BUILD:14:1: undeclared inclusion(s) in rule '//tensorflow/compiler/aot/tests:my_binary':\r\nthis rule is missing dependency declarations for the following files included by 'tensorflow/compiler/aot/tests/my_code.cc':\r\n  '/home/tensorFlow_clean/tensorflow/tensorflow/compiler/aot/tests/test_graph_tfmatmul.h'\r\nTarget //tensorflow/compiler/aot/tests:my_binary failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 7.339s, Critical Path: 6.69s\r\nFAILED: Build did NOT complete successfully\r\n```"}