{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335658384", "html_url": "https://github.com/tensorflow/tensorflow/issues/13482#issuecomment-335658384", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13482", "id": 335658384, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTY1ODM4NA==", "user": {"login": "MartinZZZ", "id": 12166108, "node_id": "MDQ6VXNlcjEyMTY2MTA4", "avatar_url": "https://avatars0.githubusercontent.com/u/12166108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartinZZZ", "html_url": "https://github.com/MartinZZZ", "followers_url": "https://api.github.com/users/MartinZZZ/followers", "following_url": "https://api.github.com/users/MartinZZZ/following{/other_user}", "gists_url": "https://api.github.com/users/MartinZZZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartinZZZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartinZZZ/subscriptions", "organizations_url": "https://api.github.com/users/MartinZZZ/orgs", "repos_url": "https://api.github.com/users/MartinZZZ/repos", "events_url": "https://api.github.com/users/MartinZZZ/events{/privacy}", "received_events_url": "https://api.github.com/users/MartinZZZ/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-11T01:55:25Z", "updated_at": "2017-10-11T01:55:25Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5453737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tatatodd\">@tatatodd</a> Thanks for your suggestion.<br>\nI just built the existing <code>tfcompile_test</code> with the following command:</p>\n<pre><code>bazel build //tensorflow/compiler/aot/tests:tfcompile_test\n</code></pre>\n<p>and the error occurred as well:</p>\n<pre><code>ERROR: /home/tensorFlow_src/tensorflow/tensorflow/compiler/aot/tests/BUILD:147:1: undeclared inclusion(s) in rule '//tensorflow/compiler/aot/tests:tfcompile_test':\nthis rule is missing dependency declarations for the following files included by 'tensorflow/compiler/aot/tests/tfcompile_test.cc':\n  '/home/tensorFlow_src/tensorflow/tensorflow/compiler/aot/tests/test_graph_tfmatmul.h'\nTarget //tensorflow/compiler/aot/tests:tfcompile_test failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 1433.945s, Critical Path: 50.08s\nFAILED: Build did NOT complete successfully\n</code></pre>\n<p>Here is the <code>BUILD</code> file:</p>\n<pre><code>licenses([\"notice\"])  # Apache 2.0\n\npackage(\n    default_visibility = [\"//visibility:private\"],\n)\n\nload(\"//tensorflow/compiler/aot:tfcompile.bzl\", \"tf_library\")\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_test\")\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_binary\")\n\n# Optional runtime utilities for use by code generated by tfcompile.\ncc_library(\n    name = \"runtime\",\n    srcs = [\"runtime.cc\"],\n    hdrs = [\"runtime.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//tensorflow/core:framework_lite\",\n    ],\n)\n\ntf_cc_test(\n    name = \"runtime_test\",\n    srcs = [\"runtime_test.cc\"],\n    deps = [\n        \":runtime\",\n        \"//tensorflow/compiler/tf2xla:xla_local_runtime_context\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\n# Don't depend on this directly; this is only used for the benchmark test\n# generated by tf_library.\ncc_library(\n    name = \"tf_library_test_main\",\n    testonly = 1,\n    visibility = [\"//visibility:public\"],\n    deps = [\"//tensorflow/core:test_main\"],\n)\n\ncc_library(\n    name = \"tfcompile_lib\",\n    srcs = [\n        \"codegen.cc\",\n        \"compile.cc\",\n        \"flags.cc\",\n    ],\n    hdrs = [\n        \"codegen.h\",\n        \"compile.h\",\n        \"flags.h\",\n    ],\n    deps = [\n        \":runtime\",  # needed by codegen to print aligned_buffer_bytes\n        \"//tensorflow/compiler/tf2xla\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_proto\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_util\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla/kernels:xla_cpu_only_ops\",\n        \"//tensorflow/compiler/tf2xla/kernels:xla_ops\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/compiler/xla:statusor\",\n        \"//tensorflow/compiler/xla:util\",\n        \"//tensorflow/compiler/xla:xla_data_proto\",\n        \"//tensorflow/compiler/xla/client:client_library\",\n        \"//tensorflow/compiler/xla/client:compile_only_client\",\n        \"//tensorflow/compiler/xla/service:compiler\",\n        \"//tensorflow/compiler/xla/service/cpu:cpu_compiler\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_cc_test(\n    name = \"codegen_test\",\n    srcs = [\"codegen_test.cc\"],\n    data = [\"codegen_test_h.golden\"],\n    deps = [\n        \":tfcompile_lib\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_binary(\n    name = \"tfcompile\",\n    visibility = [\"//visibility:public\"],\n    deps = [\":tfcompile_main\"],\n)\n\ncc_library(\n    name = \"tfcompile_main\",\n    srcs = [\"tfcompile_main.cc\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":tfcompile_lib\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_proto\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_util\",\n        \"//tensorflow/compiler/xla/legacy_flags:debug_options_flags\",\n        \"//tensorflow/compiler/xla/service:compiler\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\n# NOTE: Most end-to-end tests are in the \"tests\" subdirectory, to ensure that\n# tfcompile.bzl correctly handles usage from outside of the package that it is\n# defined in.\n\n# A simple test of tf_library from a text protobuf, mostly to enable the\n# benchmark_test.\ntf_library(\n    name = \"test_graph_tfadd\",\n    testonly = 1,\n    config = \"test_graph_tfadd.config.pbtxt\",\n    cpp_class = \"AddComp\",\n    graph = \"test_graph_tfadd.pbtxt\",\n    tags = [\"manual\"],\n)\n\n# A test of tf_library that includes a graph with an unknown op, but where\n# the compilation works because the unknown op is not needed for the fetches.\ntf_library(\n    name = \"test_graph_tfunknownop\",\n    testonly = 1,\n    config = \"test_graph_tfunknownop.config.pbtxt\",\n    cpp_class = \"UnknownOpAddComp\",\n    graph = \"test_graph_tfunknownop.pbtxt\",\n    tags = [\"manual\"],\n)\n\n# A test of tf_library that includes a graph with an unknown op, but where\n# the compilation works because the op between the unknown op and the\n# fetches is a feed.\ntf_library(\n    name = \"test_graph_tfunknownop2\",\n    testonly = 1,\n    config = \"test_graph_tfunknownop2.config.pbtxt\",\n    cpp_class = \"UnknownOpAddComp\",\n    graph = \"test_graph_tfunknownop.pbtxt\",\n    tags = [\"manual\"],\n)\n\n# A test of tf_library that includes a graph with an unknown op, but where\n# the compilation works because the unknown op is fed.\ntf_library(\n    name = \"test_graph_tfunknownop3\",\n    testonly = 1,\n    config = \"test_graph_tfunknownop3.config.pbtxt\",\n    cpp_class = \"UnknownOpAddComp\",\n    graph = \"test_graph_tfunknownop.pbtxt\",\n    tags = [\"manual\"],\n)\n\n# Utility library for benchmark binaries, used by the *_benchmark rules that are\n# added by the tfcompile bazel macro.\ncc_library(\n    name = \"benchmark\",\n    srcs = [\"benchmark.cc\"],\n    hdrs = [\"benchmark.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        # The purpose of the benchmark library is to support building an aot\n        # binary with minimal dependencies, to demonstrate small binary sizes.\n        #\n        # KEEP THE DEPENDENCIES MINIMAL.\n        \"//tensorflow/core:framework_lite\",\n    ],\n)\n\ncc_library(\n    name = \"benchmark_extra_android\",\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\ntf_cc_test(\n    name = \"benchmark_test\",\n    srcs = [\"benchmark_test.cc\"],\n    tags = [\"manual\"],\n    deps = [\n        \":benchmark\",\n        \":test_graph_tfadd\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntest_suite(\n    name = \"all_tests\",\n    tags = [\"manual\"],\n    tests = [\n        \":benchmark_test\",\n        \":codegen_test\",\n        \":runtime_test\",\n        \":test_graph_tfadd_test\",\n        \":test_graph_tfunknownop2_test\",\n        \":test_graph_tfunknownop3_test\",\n        \":test_graph_tfunknownop_test\",\n        \"//tensorflow/compiler/aot/tests:all_tests\",\n    ],\n)\n\nexports_files([\n    \"benchmark_main.template\",  # used by tf_library(...,gen_benchmark=True)\n    \"test.cc\",  # used by tf_library(...,gen_test=True)\n])\n\n# -----------------------------------------------------------------------------\n\nfilegroup(\n    name = \"all_files\",\n    srcs = glob(\n        [\"**/*\"],\n        exclude = [\n            \"**/METADATA\",\n            \"**/OWNERS\",\n        ],\n    ),\n    visibility = [\"//tensorflow:__subpackages__\"],\n)\n</code></pre>\n<p>The current TensorFlow version is <code>v1.3.0-rc1-3000-g840dcae</code></p>\n<p>May I have your advice?</p>", "body_text": "@tatatodd Thanks for your suggestion.\nI just built the existing tfcompile_test with the following command:\nbazel build //tensorflow/compiler/aot/tests:tfcompile_test\n\nand the error occurred as well:\nERROR: /home/tensorFlow_src/tensorflow/tensorflow/compiler/aot/tests/BUILD:147:1: undeclared inclusion(s) in rule '//tensorflow/compiler/aot/tests:tfcompile_test':\nthis rule is missing dependency declarations for the following files included by 'tensorflow/compiler/aot/tests/tfcompile_test.cc':\n  '/home/tensorFlow_src/tensorflow/tensorflow/compiler/aot/tests/test_graph_tfmatmul.h'\nTarget //tensorflow/compiler/aot/tests:tfcompile_test failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 1433.945s, Critical Path: 50.08s\nFAILED: Build did NOT complete successfully\n\nHere is the BUILD file:\nlicenses([\"notice\"])  # Apache 2.0\n\npackage(\n    default_visibility = [\"//visibility:private\"],\n)\n\nload(\"//tensorflow/compiler/aot:tfcompile.bzl\", \"tf_library\")\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_test\")\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_binary\")\n\n# Optional runtime utilities for use by code generated by tfcompile.\ncc_library(\n    name = \"runtime\",\n    srcs = [\"runtime.cc\"],\n    hdrs = [\"runtime.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//tensorflow/core:framework_lite\",\n    ],\n)\n\ntf_cc_test(\n    name = \"runtime_test\",\n    srcs = [\"runtime_test.cc\"],\n    deps = [\n        \":runtime\",\n        \"//tensorflow/compiler/tf2xla:xla_local_runtime_context\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\n# Don't depend on this directly; this is only used for the benchmark test\n# generated by tf_library.\ncc_library(\n    name = \"tf_library_test_main\",\n    testonly = 1,\n    visibility = [\"//visibility:public\"],\n    deps = [\"//tensorflow/core:test_main\"],\n)\n\ncc_library(\n    name = \"tfcompile_lib\",\n    srcs = [\n        \"codegen.cc\",\n        \"compile.cc\",\n        \"flags.cc\",\n    ],\n    hdrs = [\n        \"codegen.h\",\n        \"compile.h\",\n        \"flags.h\",\n    ],\n    deps = [\n        \":runtime\",  # needed by codegen to print aligned_buffer_bytes\n        \"//tensorflow/compiler/tf2xla\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_proto\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_util\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla/kernels:xla_cpu_only_ops\",\n        \"//tensorflow/compiler/tf2xla/kernels:xla_ops\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/compiler/xla:statusor\",\n        \"//tensorflow/compiler/xla:util\",\n        \"//tensorflow/compiler/xla:xla_data_proto\",\n        \"//tensorflow/compiler/xla/client:client_library\",\n        \"//tensorflow/compiler/xla/client:compile_only_client\",\n        \"//tensorflow/compiler/xla/service:compiler\",\n        \"//tensorflow/compiler/xla/service/cpu:cpu_compiler\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_cc_test(\n    name = \"codegen_test\",\n    srcs = [\"codegen_test.cc\"],\n    data = [\"codegen_test_h.golden\"],\n    deps = [\n        \":tfcompile_lib\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_binary(\n    name = \"tfcompile\",\n    visibility = [\"//visibility:public\"],\n    deps = [\":tfcompile_main\"],\n)\n\ncc_library(\n    name = \"tfcompile_main\",\n    srcs = [\"tfcompile_main.cc\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":tfcompile_lib\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_proto\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_util\",\n        \"//tensorflow/compiler/xla/legacy_flags:debug_options_flags\",\n        \"//tensorflow/compiler/xla/service:compiler\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\n# NOTE: Most end-to-end tests are in the \"tests\" subdirectory, to ensure that\n# tfcompile.bzl correctly handles usage from outside of the package that it is\n# defined in.\n\n# A simple test of tf_library from a text protobuf, mostly to enable the\n# benchmark_test.\ntf_library(\n    name = \"test_graph_tfadd\",\n    testonly = 1,\n    config = \"test_graph_tfadd.config.pbtxt\",\n    cpp_class = \"AddComp\",\n    graph = \"test_graph_tfadd.pbtxt\",\n    tags = [\"manual\"],\n)\n\n# A test of tf_library that includes a graph with an unknown op, but where\n# the compilation works because the unknown op is not needed for the fetches.\ntf_library(\n    name = \"test_graph_tfunknownop\",\n    testonly = 1,\n    config = \"test_graph_tfunknownop.config.pbtxt\",\n    cpp_class = \"UnknownOpAddComp\",\n    graph = \"test_graph_tfunknownop.pbtxt\",\n    tags = [\"manual\"],\n)\n\n# A test of tf_library that includes a graph with an unknown op, but where\n# the compilation works because the op between the unknown op and the\n# fetches is a feed.\ntf_library(\n    name = \"test_graph_tfunknownop2\",\n    testonly = 1,\n    config = \"test_graph_tfunknownop2.config.pbtxt\",\n    cpp_class = \"UnknownOpAddComp\",\n    graph = \"test_graph_tfunknownop.pbtxt\",\n    tags = [\"manual\"],\n)\n\n# A test of tf_library that includes a graph with an unknown op, but where\n# the compilation works because the unknown op is fed.\ntf_library(\n    name = \"test_graph_tfunknownop3\",\n    testonly = 1,\n    config = \"test_graph_tfunknownop3.config.pbtxt\",\n    cpp_class = \"UnknownOpAddComp\",\n    graph = \"test_graph_tfunknownop.pbtxt\",\n    tags = [\"manual\"],\n)\n\n# Utility library for benchmark binaries, used by the *_benchmark rules that are\n# added by the tfcompile bazel macro.\ncc_library(\n    name = \"benchmark\",\n    srcs = [\"benchmark.cc\"],\n    hdrs = [\"benchmark.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        # The purpose of the benchmark library is to support building an aot\n        # binary with minimal dependencies, to demonstrate small binary sizes.\n        #\n        # KEEP THE DEPENDENCIES MINIMAL.\n        \"//tensorflow/core:framework_lite\",\n    ],\n)\n\ncc_library(\n    name = \"benchmark_extra_android\",\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\ntf_cc_test(\n    name = \"benchmark_test\",\n    srcs = [\"benchmark_test.cc\"],\n    tags = [\"manual\"],\n    deps = [\n        \":benchmark\",\n        \":test_graph_tfadd\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntest_suite(\n    name = \"all_tests\",\n    tags = [\"manual\"],\n    tests = [\n        \":benchmark_test\",\n        \":codegen_test\",\n        \":runtime_test\",\n        \":test_graph_tfadd_test\",\n        \":test_graph_tfunknownop2_test\",\n        \":test_graph_tfunknownop3_test\",\n        \":test_graph_tfunknownop_test\",\n        \"//tensorflow/compiler/aot/tests:all_tests\",\n    ],\n)\n\nexports_files([\n    \"benchmark_main.template\",  # used by tf_library(...,gen_benchmark=True)\n    \"test.cc\",  # used by tf_library(...,gen_test=True)\n])\n\n# -----------------------------------------------------------------------------\n\nfilegroup(\n    name = \"all_files\",\n    srcs = glob(\n        [\"**/*\"],\n        exclude = [\n            \"**/METADATA\",\n            \"**/OWNERS\",\n        ],\n    ),\n    visibility = [\"//tensorflow:__subpackages__\"],\n)\n\nThe current TensorFlow version is v1.3.0-rc1-3000-g840dcae\nMay I have your advice?", "body": "@tatatodd Thanks for your suggestion. \r\nI just built the existing `tfcompile_test` with the following command:\r\n```\r\nbazel build //tensorflow/compiler/aot/tests:tfcompile_test\r\n```\r\nand the error occurred as well:\r\n\r\n```\r\nERROR: /home/tensorFlow_src/tensorflow/tensorflow/compiler/aot/tests/BUILD:147:1: undeclared inclusion(s) in rule '//tensorflow/compiler/aot/tests:tfcompile_test':\r\nthis rule is missing dependency declarations for the following files included by 'tensorflow/compiler/aot/tests/tfcompile_test.cc':\r\n  '/home/tensorFlow_src/tensorflow/tensorflow/compiler/aot/tests/test_graph_tfmatmul.h'\r\nTarget //tensorflow/compiler/aot/tests:tfcompile_test failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 1433.945s, Critical Path: 50.08s\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\nHere is the `BUILD` file:\r\n\r\n```\r\nlicenses([\"notice\"])  # Apache 2.0\r\n\r\npackage(\r\n    default_visibility = [\"//visibility:private\"],\r\n)\r\n\r\nload(\"//tensorflow/compiler/aot:tfcompile.bzl\", \"tf_library\")\r\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_test\")\r\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_binary\")\r\n\r\n# Optional runtime utilities for use by code generated by tfcompile.\r\ncc_library(\r\n    name = \"runtime\",\r\n    srcs = [\"runtime.cc\"],\r\n    hdrs = [\"runtime.h\"],\r\n    visibility = [\"//visibility:public\"],\r\n    deps = [\r\n        \"//tensorflow/core:framework_lite\",\r\n    ],\r\n)\r\n\r\ntf_cc_test(\r\n    name = \"runtime_test\",\r\n    srcs = [\"runtime_test.cc\"],\r\n    deps = [\r\n        \":runtime\",\r\n        \"//tensorflow/compiler/tf2xla:xla_local_runtime_context\",\r\n        \"//tensorflow/core:framework\",\r\n        \"//tensorflow/core:test\",\r\n        \"//tensorflow/core:test_main\",\r\n    ],\r\n)\r\n\r\n# Don't depend on this directly; this is only used for the benchmark test\r\n# generated by tf_library.\r\ncc_library(\r\n    name = \"tf_library_test_main\",\r\n    testonly = 1,\r\n    visibility = [\"//visibility:public\"],\r\n    deps = [\"//tensorflow/core:test_main\"],\r\n)\r\n\r\ncc_library(\r\n    name = \"tfcompile_lib\",\r\n    srcs = [\r\n        \"codegen.cc\",\r\n        \"compile.cc\",\r\n        \"flags.cc\",\r\n    ],\r\n    hdrs = [\r\n        \"codegen.h\",\r\n        \"compile.h\",\r\n        \"flags.h\",\r\n    ],\r\n    deps = [\r\n        \":runtime\",  # needed by codegen to print aligned_buffer_bytes\r\n        \"//tensorflow/compiler/tf2xla\",\r\n        \"//tensorflow/compiler/tf2xla:common\",\r\n        \"//tensorflow/compiler/tf2xla:tf2xla_proto\",\r\n        \"//tensorflow/compiler/tf2xla:tf2xla_util\",\r\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\r\n        \"//tensorflow/compiler/tf2xla/kernels:xla_cpu_only_ops\",\r\n        \"//tensorflow/compiler/tf2xla/kernels:xla_ops\",\r\n        \"//tensorflow/compiler/xla:shape_util\",\r\n        \"//tensorflow/compiler/xla:statusor\",\r\n        \"//tensorflow/compiler/xla:util\",\r\n        \"//tensorflow/compiler/xla:xla_data_proto\",\r\n        \"//tensorflow/compiler/xla/client:client_library\",\r\n        \"//tensorflow/compiler/xla/client:compile_only_client\",\r\n        \"//tensorflow/compiler/xla/service:compiler\",\r\n        \"//tensorflow/compiler/xla/service/cpu:cpu_compiler\",\r\n        \"//tensorflow/core:core_cpu\",\r\n        \"//tensorflow/core:core_cpu_internal\",\r\n        \"//tensorflow/core:framework\",\r\n        \"//tensorflow/core:framework_internal\",\r\n        \"//tensorflow/core:lib\",\r\n        \"//tensorflow/core:protos_all_cc\",\r\n    ],\r\n)\r\n\r\ntf_cc_test(\r\n    name = \"codegen_test\",\r\n    srcs = [\"codegen_test.cc\"],\r\n    data = [\"codegen_test_h.golden\"],\r\n    deps = [\r\n        \":tfcompile_lib\",\r\n        \"//tensorflow/compiler/xla:shape_util\",\r\n        \"//tensorflow/core:lib\",\r\n        \"//tensorflow/core:test\",\r\n        \"//tensorflow/core:test_main\",\r\n    ],\r\n)\r\n\r\ntf_cc_binary(\r\n    name = \"tfcompile\",\r\n    visibility = [\"//visibility:public\"],\r\n    deps = [\":tfcompile_main\"],\r\n)\r\n\r\ncc_library(\r\n    name = \"tfcompile_main\",\r\n    srcs = [\"tfcompile_main.cc\"],\r\n    visibility = [\"//visibility:public\"],\r\n    deps = [\r\n        \":tfcompile_lib\",\r\n        \"//tensorflow/compiler/tf2xla:tf2xla_proto\",\r\n        \"//tensorflow/compiler/tf2xla:tf2xla_util\",\r\n        \"//tensorflow/compiler/xla/legacy_flags:debug_options_flags\",\r\n        \"//tensorflow/compiler/xla/service:compiler\",\r\n        \"//tensorflow/core:core_cpu\",\r\n        \"//tensorflow/core:core_cpu_internal\",\r\n        \"//tensorflow/core:framework\",\r\n        \"//tensorflow/core:framework_internal\",\r\n        \"//tensorflow/core:lib\",\r\n        \"//tensorflow/core:protos_all_cc\",\r\n    ],\r\n)\r\n\r\n# NOTE: Most end-to-end tests are in the \"tests\" subdirectory, to ensure that\r\n# tfcompile.bzl correctly handles usage from outside of the package that it is\r\n# defined in.\r\n\r\n# A simple test of tf_library from a text protobuf, mostly to enable the\r\n# benchmark_test.\r\ntf_library(\r\n    name = \"test_graph_tfadd\",\r\n    testonly = 1,\r\n    config = \"test_graph_tfadd.config.pbtxt\",\r\n    cpp_class = \"AddComp\",\r\n    graph = \"test_graph_tfadd.pbtxt\",\r\n    tags = [\"manual\"],\r\n)\r\n\r\n# A test of tf_library that includes a graph with an unknown op, but where\r\n# the compilation works because the unknown op is not needed for the fetches.\r\ntf_library(\r\n    name = \"test_graph_tfunknownop\",\r\n    testonly = 1,\r\n    config = \"test_graph_tfunknownop.config.pbtxt\",\r\n    cpp_class = \"UnknownOpAddComp\",\r\n    graph = \"test_graph_tfunknownop.pbtxt\",\r\n    tags = [\"manual\"],\r\n)\r\n\r\n# A test of tf_library that includes a graph with an unknown op, but where\r\n# the compilation works because the op between the unknown op and the\r\n# fetches is a feed.\r\ntf_library(\r\n    name = \"test_graph_tfunknownop2\",\r\n    testonly = 1,\r\n    config = \"test_graph_tfunknownop2.config.pbtxt\",\r\n    cpp_class = \"UnknownOpAddComp\",\r\n    graph = \"test_graph_tfunknownop.pbtxt\",\r\n    tags = [\"manual\"],\r\n)\r\n\r\n# A test of tf_library that includes a graph with an unknown op, but where\r\n# the compilation works because the unknown op is fed.\r\ntf_library(\r\n    name = \"test_graph_tfunknownop3\",\r\n    testonly = 1,\r\n    config = \"test_graph_tfunknownop3.config.pbtxt\",\r\n    cpp_class = \"UnknownOpAddComp\",\r\n    graph = \"test_graph_tfunknownop.pbtxt\",\r\n    tags = [\"manual\"],\r\n)\r\n\r\n# Utility library for benchmark binaries, used by the *_benchmark rules that are\r\n# added by the tfcompile bazel macro.\r\ncc_library(\r\n    name = \"benchmark\",\r\n    srcs = [\"benchmark.cc\"],\r\n    hdrs = [\"benchmark.h\"],\r\n    visibility = [\"//visibility:public\"],\r\n    deps = [\r\n        # The purpose of the benchmark library is to support building an aot\r\n        # binary with minimal dependencies, to demonstrate small binary sizes.\r\n        #\r\n        # KEEP THE DEPENDENCIES MINIMAL.\r\n        \"//tensorflow/core:framework_lite\",\r\n    ],\r\n)\r\n\r\ncc_library(\r\n    name = \"benchmark_extra_android\",\r\n    tags = [\r\n        \"manual\",\r\n        \"notap\",\r\n    ],\r\n    visibility = [\"//visibility:public\"],\r\n)\r\n\r\ntf_cc_test(\r\n    name = \"benchmark_test\",\r\n    srcs = [\"benchmark_test.cc\"],\r\n    tags = [\"manual\"],\r\n    deps = [\r\n        \":benchmark\",\r\n        \":test_graph_tfadd\",\r\n        \"//tensorflow/core:test\",\r\n        \"//tensorflow/core:test_main\",\r\n    ],\r\n)\r\n\r\ntest_suite(\r\n    name = \"all_tests\",\r\n    tags = [\"manual\"],\r\n    tests = [\r\n        \":benchmark_test\",\r\n        \":codegen_test\",\r\n        \":runtime_test\",\r\n        \":test_graph_tfadd_test\",\r\n        \":test_graph_tfunknownop2_test\",\r\n        \":test_graph_tfunknownop3_test\",\r\n        \":test_graph_tfunknownop_test\",\r\n        \"//tensorflow/compiler/aot/tests:all_tests\",\r\n    ],\r\n)\r\n\r\nexports_files([\r\n    \"benchmark_main.template\",  # used by tf_library(...,gen_benchmark=True)\r\n    \"test.cc\",  # used by tf_library(...,gen_test=True)\r\n])\r\n\r\n# -----------------------------------------------------------------------------\r\n\r\nfilegroup(\r\n    name = \"all_files\",\r\n    srcs = glob(\r\n        [\"**/*\"],\r\n        exclude = [\r\n            \"**/METADATA\",\r\n            \"**/OWNERS\",\r\n        ],\r\n    ),\r\n    visibility = [\"//tensorflow:__subpackages__\"],\r\n)\r\n```\r\n\r\nThe current TensorFlow version is `v1.3.0-rc1-3000-g840dcae`\r\n\r\nMay I have your advice?"}