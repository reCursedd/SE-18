{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/161799042", "html_url": "https://github.com/tensorflow/tensorflow/issues/10#issuecomment-161799042", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10", "id": 161799042, "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTc5OTA0Mg==", "user": {"login": "alonsovidales", "id": 1468785, "node_id": "MDQ6VXNlcjE0Njg3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1468785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alonsovidales", "html_url": "https://github.com/alonsovidales", "followers_url": "https://api.github.com/users/alonsovidales/followers", "following_url": "https://api.github.com/users/alonsovidales/following{/other_user}", "gists_url": "https://api.github.com/users/alonsovidales/gists{/gist_id}", "starred_url": "https://api.github.com/users/alonsovidales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alonsovidales/subscriptions", "organizations_url": "https://api.github.com/users/alonsovidales/orgs", "repos_url": "https://api.github.com/users/alonsovidales/repos", "events_url": "https://api.github.com/users/alonsovidales/events{/privacy}", "received_events_url": "https://api.github.com/users/alonsovidales/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-03T22:03:07Z", "updated_at": "2015-12-03T22:03:18Z", "author_association": "NONE", "body_html": "<p>Well, my idea is to build the graph in the Go libs as it is being builded by the Python libs. They are working on the C++ code, but by the moment it is a WIP and it is, by the moment, unstable.</p>\n<p>I'm not sure about their future plans, but from my point of view have this process in Python is not a bad approach since the tensors takes a lot of advantage of the dynamic typing and operators overloading that Python offers, this makes the code more simple to write and to understand, this is being one of the biggest problem I'm having porting the code to Go. I also think that keep the graph building process in Python is a good idea since this process requires almost no time compared with the operations that are implemented in C++, so scarify simplicity in favour of performance don't makes too much sense. I think that they make the good choice here.</p>\n<p>I'm planning to port the process to Go by two reasons:</p>\n<ul>\n<li>You could create a pure Go application to train your model, that could be interesting for some situations.</li>\n<li>I'm working on just a PoC, and I prefer to explore all the code in order to get a global idea of how all the different pieces works together.</li>\n</ul>\n<p>And well, port the process is going to be funny for me :)</p>", "body_text": "Well, my idea is to build the graph in the Go libs as it is being builded by the Python libs. They are working on the C++ code, but by the moment it is a WIP and it is, by the moment, unstable.\nI'm not sure about their future plans, but from my point of view have this process in Python is not a bad approach since the tensors takes a lot of advantage of the dynamic typing and operators overloading that Python offers, this makes the code more simple to write and to understand, this is being one of the biggest problem I'm having porting the code to Go. I also think that keep the graph building process in Python is a good idea since this process requires almost no time compared with the operations that are implemented in C++, so scarify simplicity in favour of performance don't makes too much sense. I think that they make the good choice here.\nI'm planning to port the process to Go by two reasons:\n\nYou could create a pure Go application to train your model, that could be interesting for some situations.\nI'm working on just a PoC, and I prefer to explore all the code in order to get a global idea of how all the different pieces works together.\n\nAnd well, port the process is going to be funny for me :)", "body": "Well, my idea is to build the graph in the Go libs as it is being builded by the Python libs. They are working on the C++ code, but by the moment it is a WIP and it is, by the moment, unstable.\n\nI'm not sure about their future plans, but from my point of view have this process in Python is not a bad approach since the tensors takes a lot of advantage of the dynamic typing and operators overloading that Python offers, this makes the code more simple to write and to understand, this is being one of the biggest problem I'm having porting the code to Go. I also think that keep the graph building process in Python is a good idea since this process requires almost no time compared with the operations that are implemented in C++, so scarify simplicity in favour of performance don't makes too much sense. I think that they make the good choice here.\n\nI'm planning to port the process to Go by two reasons:\n- You could create a pure Go application to train your model, that could be interesting for some situations.\n- I'm working on just a PoC, and I prefer to explore all the code in order to get a global idea of how all the different pieces works together.\n\nAnd well, port the process is going to be funny for me :)\n"}