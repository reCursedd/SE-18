{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/157339700", "html_url": "https://github.com/tensorflow/tensorflow/issues/10#issuecomment-157339700", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10", "id": 157339700, "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzMzOTcwMA==", "user": {"login": "alonsovidales", "id": 1468785, "node_id": "MDQ6VXNlcjE0Njg3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1468785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alonsovidales", "html_url": "https://github.com/alonsovidales", "followers_url": "https://api.github.com/users/alonsovidales/followers", "following_url": "https://api.github.com/users/alonsovidales/following{/other_user}", "gists_url": "https://api.github.com/users/alonsovidales/gists{/gist_id}", "starred_url": "https://api.github.com/users/alonsovidales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alonsovidales/subscriptions", "organizations_url": "https://api.github.com/users/alonsovidales/orgs", "repos_url": "https://api.github.com/users/alonsovidales/repos", "events_url": "https://api.github.com/users/alonsovidales/events{/privacy}", "received_events_url": "https://api.github.com/users/alonsovidales/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-17T11:10:50Z", "updated_at": "2015-11-17T11:10:50Z", "author_association": "NONE", "body_html": "<p>Just a little update of what I have been researching this weekend. I couldn't find too much time for this, but I made some small progresses.</p>\n<p>I have been researching how the Python libs works internally, and basically, the logic to generate the graph and plan how to execute it, etc is managed from Python that sends all the graph to be executed to the C++ libraries, this libs take the graph and executes all the nodes of the graph. They are working on a pure C++ version of this logic, but it is still not ready.<br>\nIn order to execute the C++ code from python they use SWIG: <a href=\"http://www.swig.org\" rel=\"nofollow\">www.swig.org</a> and to build the system Bazel: <a href=\"http://bazel.io/\" rel=\"nofollow\">http://bazel.io/</a> .<br>\nThe good news is that SWIG also supports Go ( <a href=\"http://www.swig.org/Doc2.0/Go.html\" rel=\"nofollow\">http://www.swig.org/Doc2.0/Go.html</a> ) and Bazel introduces support for Go ( <a href=\"http://bazel.io/docs/be/go.html\" rel=\"nofollow\">http://bazel.io/docs/be/go.html</a> )  after the 0.1.1 version.<br>\nThe bad news are that I couldn't build the system using Bazel 0.1.1 by many different problems with the linker, etc that I'm trying to resolve. And the other problem is that we have to create the .i files for SWIG in order to prepare the build for Go, I almost have this part done, but I'm also having a lot of problems.<br>\nThe main issue is that I have no experience with Bazel and SWIG, so I'm spending most of the time reading documentation and trying to fix stupid problems caused because of I misunderstand something from the docu.</p>\n<p>In case of I finally can't prepare a wrapper using SWIG, I think that I'm going to try to prepare the prototype using cgo directly, I already have a small proof of concept that generates the session in Go, but it would be much better if the libs works with SWIG and Bazel as the Python libs does.</p>\n<p>I'm not having too much spare time lately, but it is being super interesting for me to research how all this system is done, the code is pretty well documented, and easy to understand.</p>", "body_text": "Just a little update of what I have been researching this weekend. I couldn't find too much time for this, but I made some small progresses.\nI have been researching how the Python libs works internally, and basically, the logic to generate the graph and plan how to execute it, etc is managed from Python that sends all the graph to be executed to the C++ libraries, this libs take the graph and executes all the nodes of the graph. They are working on a pure C++ version of this logic, but it is still not ready.\nIn order to execute the C++ code from python they use SWIG: www.swig.org and to build the system Bazel: http://bazel.io/ .\nThe good news is that SWIG also supports Go ( http://www.swig.org/Doc2.0/Go.html ) and Bazel introduces support for Go ( http://bazel.io/docs/be/go.html )  after the 0.1.1 version.\nThe bad news are that I couldn't build the system using Bazel 0.1.1 by many different problems with the linker, etc that I'm trying to resolve. And the other problem is that we have to create the .i files for SWIG in order to prepare the build for Go, I almost have this part done, but I'm also having a lot of problems.\nThe main issue is that I have no experience with Bazel and SWIG, so I'm spending most of the time reading documentation and trying to fix stupid problems caused because of I misunderstand something from the docu.\nIn case of I finally can't prepare a wrapper using SWIG, I think that I'm going to try to prepare the prototype using cgo directly, I already have a small proof of concept that generates the session in Go, but it would be much better if the libs works with SWIG and Bazel as the Python libs does.\nI'm not having too much spare time lately, but it is being super interesting for me to research how all this system is done, the code is pretty well documented, and easy to understand.", "body": "Just a little update of what I have been researching this weekend. I couldn't find too much time for this, but I made some small progresses.\n\nI have been researching how the Python libs works internally, and basically, the logic to generate the graph and plan how to execute it, etc is managed from Python that sends all the graph to be executed to the C++ libraries, this libs take the graph and executes all the nodes of the graph. They are working on a pure C++ version of this logic, but it is still not ready.\nIn order to execute the C++ code from python they use SWIG: www.swig.org and to build the system Bazel: http://bazel.io/ .\nThe good news is that SWIG also supports Go ( http://www.swig.org/Doc2.0/Go.html ) and Bazel introduces support for Go ( http://bazel.io/docs/be/go.html )  after the 0.1.1 version.\nThe bad news are that I couldn't build the system using Bazel 0.1.1 by many different problems with the linker, etc that I'm trying to resolve. And the other problem is that we have to create the .i files for SWIG in order to prepare the build for Go, I almost have this part done, but I'm also having a lot of problems.\nThe main issue is that I have no experience with Bazel and SWIG, so I'm spending most of the time reading documentation and trying to fix stupid problems caused because of I misunderstand something from the docu.\n\nIn case of I finally can't prepare a wrapper using SWIG, I think that I'm going to try to prepare the prototype using cgo directly, I already have a small proof of concept that generates the session in Go, but it would be much better if the libs works with SWIG and Bazel as the Python libs does.\n\nI'm not having too much spare time lately, but it is being super interesting for me to research how all this system is done, the code is pretty well documented, and easy to understand.\n"}