{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/172388951", "html_url": "https://github.com/tensorflow/tensorflow/issues/10#issuecomment-172388951", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10", "id": 172388951, "node_id": "MDEyOklzc3VlQ29tbWVudDE3MjM4ODk1MQ==", "user": {"login": "tmc", "id": 3977, "node_id": "MDQ6VXNlcjM5Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmc", "html_url": "https://github.com/tmc", "followers_url": "https://api.github.com/users/tmc/followers", "following_url": "https://api.github.com/users/tmc/following{/other_user}", "gists_url": "https://api.github.com/users/tmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmc/subscriptions", "organizations_url": "https://api.github.com/users/tmc/orgs", "repos_url": "https://api.github.com/users/tmc/repos", "events_url": "https://api.github.com/users/tmc/events{/privacy}", "received_events_url": "https://api.github.com/users/tmc/received_events", "type": "User", "site_admin": false}, "created_at": "2016-01-17T22:10:00Z", "updated_at": "2016-01-20T00:51:52Z", "author_association": "NONE", "body_html": "<p>I have a start of a swig-based binding started here: <a href=\"https://github.com/tmc/tensorflow/tree/go_bindings\">tmc/tensorflow/go_bindings</a> -- mostly cargo-culted and incomplete.</p>\n<div class=\"highlight highlight-source-shell\"><pre>\u269b <span class=\"pl-k\">~</span>/go/src/github.com/tensorflow/tensorflow(go_bindings)$ cat tensorflow_test.go\npackage tensorflow_test\n\nimport (\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fmt<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testing<span class=\"pl-pds\">\"</span></span>\n\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/davecgh/go-spew/spew<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/golang/protobuf/proto<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/tensorflow/tensorflow<span class=\"pl-pds\">\"</span></span>\n    tf <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>github.com/tensorflow/tensorflow/tensorflow/go<span class=\"pl-pds\">\"</span></span>\n)\n\nvar exampleGraph = <span class=\"pl-s\"><span class=\"pl-pds\">`</span>node {</span>\n<span class=\"pl-s\">  name: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output1<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  op: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  attr {</span>\n<span class=\"pl-s\">    key: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">    value {</span>\n<span class=\"pl-s\">      type: DT_STRING</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">  attr {</span>\n<span class=\"pl-s\">    key: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>value<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">    value {</span>\n<span class=\"pl-s\">      tensor {</span>\n<span class=\"pl-s\">        dtype: DT_STRING</span>\n<span class=\"pl-s\">        tensor_shape {</span>\n<span class=\"pl-s\">        }</span>\n<span class=\"pl-s\">        string_val: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello, TensorFlow!<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">      }</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\">node {</span>\n<span class=\"pl-s\">  name: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const_1<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  op: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  attr {</span>\n<span class=\"pl-s\">    key: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">    value {</span>\n<span class=\"pl-s\">      type: DT_INT32</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">  attr {</span>\n<span class=\"pl-s\">    key: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>value<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">    value {</span>\n<span class=\"pl-s\">      tensor {</span>\n<span class=\"pl-s\">        dtype: DT_INT32</span>\n<span class=\"pl-s\">        tensor_shape {</span>\n<span class=\"pl-s\">        }</span>\n<span class=\"pl-s\">        int_val: 10</span>\n<span class=\"pl-s\">      }</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\">node {</span>\n<span class=\"pl-s\">  name: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const_2<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  op: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  attr {</span>\n<span class=\"pl-s\">    key: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">    value {</span>\n<span class=\"pl-s\">      type: DT_INT32</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">  attr {</span>\n<span class=\"pl-s\">    key: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>value<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">    value {</span>\n<span class=\"pl-s\">      tensor {</span>\n<span class=\"pl-s\">        dtype: DT_INT32</span>\n<span class=\"pl-s\">        tensor_shape {</span>\n<span class=\"pl-s\">        }</span>\n<span class=\"pl-s\">        int_val: 32</span>\n<span class=\"pl-s\">      }</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\">node {</span>\n<span class=\"pl-s\">  name: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output2<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  op: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Add<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  input: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const_1<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  input: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const_2<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">  attr {</span>\n<span class=\"pl-s\">    key: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>T<span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\">    value {</span>\n<span class=\"pl-s\">      type: DT_INT32</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\">version: 5<span class=\"pl-pds\">`</span></span>\n\nfunc TestNewSession(t <span class=\"pl-k\">*</span>testing.T) {\n    graph := <span class=\"pl-k\">&amp;</span>tf.GraphDef{}\n    <span class=\"pl-k\">if</span> err := proto.UnmarshalText(exampleGraph, graph)<span class=\"pl-k\">;</span> err <span class=\"pl-k\">!</span>= nil {\n        t.Fatal(err)\n    }\n    s, err := <span class=\"pl-en\">tensorflow.NewSession</span>()\n    <span class=\"pl-k\">if</span> err := s.ExtendGraph(graph)<span class=\"pl-k\">;</span> err <span class=\"pl-k\">!</span>= nil {\n        t.Fatal(err)\n    }\n    output, err := s.Run(nil, []string{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output1<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output2<span class=\"pl-pds\">\"</span></span>}, nil)\n    <span class=\"pl-k\">if</span> err <span class=\"pl-k\">!</span>= nil {\n        t.Fatal(err)\n    }\n    fmt.Println(output)\n    <span class=\"pl-k\">for</span> _, out := range output {\n        spew.Dump(out, <span class=\"pl-en\">out.Data</span>())\n    }\n}\n\u269b <span class=\"pl-k\">~</span>/go/src/github.com/tensorflow/tensorflow(go_bindings)$ go <span class=\"pl-c1\">test</span>\n[DT_STRING: dims:0 size:27 DT_INT32: dims:0 size:4]\n(<span class=\"pl-k\">*</span>tensorflow.Tensor)(0xc820011050)(DT_STRING: dims:0 size:27)\n([]uint8) (len=27 cap=27) {\n 00000000  00 00 00 00 00 00 00 00  12 48 65 6c 6c 6f 2c 20  <span class=\"pl-k\">|</span>.........Hello, <span class=\"pl-k\">|</span>\n 00000010  54 65 6e 73 6f 72 46 6c  6f 77 21                 <span class=\"pl-k\">|</span>TensorFlow<span class=\"pl-k\">!|</span>\n}\n(<span class=\"pl-k\">*</span>tensorflow.Tensor)(0xc820011080)(DT_INT32: dims:0 size:4)\n([]uint8) (len=4 cap=4) {\n 00000000  2a 00 00 00                                       <span class=\"pl-k\">|</span><span class=\"pl-k\">*</span>...<span class=\"pl-k\">|</span>\n}\nPASS\nok      github.com/tensorflow/tensorflow    0.082s</pre></div>", "body_text": "I have a start of a swig-based binding started here: tmc/tensorflow/go_bindings -- mostly cargo-culted and incomplete.\n\u269b ~/go/src/github.com/tensorflow/tensorflow(go_bindings)$ cat tensorflow_test.go\npackage tensorflow_test\n\nimport (\n    \"fmt\"\n    \"testing\"\n\n    \"github.com/davecgh/go-spew/spew\"\n    \"github.com/golang/protobuf/proto\"\n    \"github.com/tensorflow/tensorflow\"\n    tf \"github.com/tensorflow/tensorflow/tensorflow/go\"\n)\n\nvar exampleGraph = `node {\n  name: \"output1\"\n  op: \"Const\"\n  attr {\n    key: \"dtype\"\n    value {\n      type: DT_STRING\n    }\n  }\n  attr {\n    key: \"value\"\n    value {\n      tensor {\n        dtype: DT_STRING\n        tensor_shape {\n        }\n        string_val: \"Hello, TensorFlow!\"\n      }\n    }\n  }\n}\nnode {\n  name: \"Const_1\"\n  op: \"Const\"\n  attr {\n    key: \"dtype\"\n    value {\n      type: DT_INT32\n    }\n  }\n  attr {\n    key: \"value\"\n    value {\n      tensor {\n        dtype: DT_INT32\n        tensor_shape {\n        }\n        int_val: 10\n      }\n    }\n  }\n}\nnode {\n  name: \"Const_2\"\n  op: \"Const\"\n  attr {\n    key: \"dtype\"\n    value {\n      type: DT_INT32\n    }\n  }\n  attr {\n    key: \"value\"\n    value {\n      tensor {\n        dtype: DT_INT32\n        tensor_shape {\n        }\n        int_val: 32\n      }\n    }\n  }\n}\nnode {\n  name: \"output2\"\n  op: \"Add\"\n  input: \"Const_1\"\n  input: \"Const_2\"\n  attr {\n    key: \"T\"\n    value {\n      type: DT_INT32\n    }\n  }\n}\nversion: 5`\n\nfunc TestNewSession(t *testing.T) {\n    graph := &tf.GraphDef{}\n    if err := proto.UnmarshalText(exampleGraph, graph); err != nil {\n        t.Fatal(err)\n    }\n    s, err := tensorflow.NewSession()\n    if err := s.ExtendGraph(graph); err != nil {\n        t.Fatal(err)\n    }\n    output, err := s.Run(nil, []string{\"output1\", \"output2\"}, nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n    fmt.Println(output)\n    for _, out := range output {\n        spew.Dump(out, out.Data())\n    }\n}\n\u269b ~/go/src/github.com/tensorflow/tensorflow(go_bindings)$ go test\n[DT_STRING: dims:0 size:27 DT_INT32: dims:0 size:4]\n(*tensorflow.Tensor)(0xc820011050)(DT_STRING: dims:0 size:27)\n([]uint8) (len=27 cap=27) {\n 00000000  00 00 00 00 00 00 00 00  12 48 65 6c 6c 6f 2c 20  |.........Hello, |\n 00000010  54 65 6e 73 6f 72 46 6c  6f 77 21                 |TensorFlow!|\n}\n(*tensorflow.Tensor)(0xc820011080)(DT_INT32: dims:0 size:4)\n([]uint8) (len=4 cap=4) {\n 00000000  2a 00 00 00                                       |*...|\n}\nPASS\nok      github.com/tensorflow/tensorflow    0.082s", "body": "I have a start of a swig-based binding started here: [tmc/tensorflow/go_bindings](https://github.com/tmc/tensorflow/tree/go_bindings) -- mostly cargo-culted and incomplete.\n\n``` sh\n\u269b ~/go/src/github.com/tensorflow/tensorflow(go_bindings)$ cat tensorflow_test.go\npackage tensorflow_test\n\nimport (\n    \"fmt\"\n    \"testing\"\n\n    \"github.com/davecgh/go-spew/spew\"\n    \"github.com/golang/protobuf/proto\"\n    \"github.com/tensorflow/tensorflow\"\n    tf \"github.com/tensorflow/tensorflow/tensorflow/go\"\n)\n\nvar exampleGraph = `node {\n  name: \"output1\"\n  op: \"Const\"\n  attr {\n    key: \"dtype\"\n    value {\n      type: DT_STRING\n    }\n  }\n  attr {\n    key: \"value\"\n    value {\n      tensor {\n        dtype: DT_STRING\n        tensor_shape {\n        }\n        string_val: \"Hello, TensorFlow!\"\n      }\n    }\n  }\n}\nnode {\n  name: \"Const_1\"\n  op: \"Const\"\n  attr {\n    key: \"dtype\"\n    value {\n      type: DT_INT32\n    }\n  }\n  attr {\n    key: \"value\"\n    value {\n      tensor {\n        dtype: DT_INT32\n        tensor_shape {\n        }\n        int_val: 10\n      }\n    }\n  }\n}\nnode {\n  name: \"Const_2\"\n  op: \"Const\"\n  attr {\n    key: \"dtype\"\n    value {\n      type: DT_INT32\n    }\n  }\n  attr {\n    key: \"value\"\n    value {\n      tensor {\n        dtype: DT_INT32\n        tensor_shape {\n        }\n        int_val: 32\n      }\n    }\n  }\n}\nnode {\n  name: \"output2\"\n  op: \"Add\"\n  input: \"Const_1\"\n  input: \"Const_2\"\n  attr {\n    key: \"T\"\n    value {\n      type: DT_INT32\n    }\n  }\n}\nversion: 5`\n\nfunc TestNewSession(t *testing.T) {\n    graph := &tf.GraphDef{}\n    if err := proto.UnmarshalText(exampleGraph, graph); err != nil {\n        t.Fatal(err)\n    }\n    s, err := tensorflow.NewSession()\n    if err := s.ExtendGraph(graph); err != nil {\n        t.Fatal(err)\n    }\n    output, err := s.Run(nil, []string{\"output1\", \"output2\"}, nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n    fmt.Println(output)\n    for _, out := range output {\n        spew.Dump(out, out.Data())\n    }\n}\n\u269b ~/go/src/github.com/tensorflow/tensorflow(go_bindings)$ go test\n[DT_STRING: dims:0 size:27 DT_INT32: dims:0 size:4]\n(*tensorflow.Tensor)(0xc820011050)(DT_STRING: dims:0 size:27)\n([]uint8) (len=27 cap=27) {\n 00000000  00 00 00 00 00 00 00 00  12 48 65 6c 6c 6f 2c 20  |.........Hello, |\n 00000010  54 65 6e 73 6f 72 46 6c  6f 77 21                 |TensorFlow!|\n}\n(*tensorflow.Tensor)(0xc820011080)(DT_INT32: dims:0 size:4)\n([]uint8) (len=4 cap=4) {\n 00000000  2a 00 00 00                                       |*...|\n}\nPASS\nok      github.com/tensorflow/tensorflow    0.082s\n```\n"}