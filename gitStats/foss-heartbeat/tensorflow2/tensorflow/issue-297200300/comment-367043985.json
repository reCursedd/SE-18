{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/367043985", "html_url": "https://github.com/tensorflow/tensorflow/issues/17016#issuecomment-367043985", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17016", "id": 367043985, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzA0Mzk4NQ==", "user": {"login": "AakashKumarNain", "id": 11736571, "node_id": "MDQ6VXNlcjExNzM2NTcx", "avatar_url": "https://avatars3.githubusercontent.com/u/11736571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AakashKumarNain", "html_url": "https://github.com/AakashKumarNain", "followers_url": "https://api.github.com/users/AakashKumarNain/followers", "following_url": "https://api.github.com/users/AakashKumarNain/following{/other_user}", "gists_url": "https://api.github.com/users/AakashKumarNain/gists{/gist_id}", "starred_url": "https://api.github.com/users/AakashKumarNain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AakashKumarNain/subscriptions", "organizations_url": "https://api.github.com/users/AakashKumarNain/orgs", "repos_url": "https://api.github.com/users/AakashKumarNain/repos", "events_url": "https://api.github.com/users/AakashKumarNain/events{/privacy}", "received_events_url": "https://api.github.com/users/AakashKumarNain/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-20T16:58:01Z", "updated_at": "2018-02-20T16:58:01Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> I don't think there is any problem with my generator code. Anyways, I am putting up my generator code also, so that you can take another look:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Reshape the data</span>\nX_train <span class=\"pl-k\">=</span> np.array(X_train.iloc[:, :]).reshape(<span class=\"pl-c1\">len</span>(X_train),<span class=\"pl-c1\">28</span>,<span class=\"pl-c1\">28</span>,<span class=\"pl-c1\">1</span>)\nX_valid <span class=\"pl-k\">=</span> np.array(X_valid.iloc[:, :]).reshape(<span class=\"pl-c1\">len</span>(X_valid), <span class=\"pl-c1\">28</span>, <span class=\"pl-c1\">28</span>,<span class=\"pl-c1\">1</span>)\nX_test <span class=\"pl-k\">=</span> np.array(test.iloc[:,<span class=\"pl-c1\">1</span>:]).reshape(<span class=\"pl-c1\">len</span>(test), <span class=\"pl-c1\">28</span>, <span class=\"pl-c1\">28</span>,<span class=\"pl-c1\">1</span>)\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>X_train shape: <span class=\"pl-pds\">\"</span></span>, X_train.shape)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>X_valid.shape: <span class=\"pl-pds\">\"</span></span>, X_valid.shape)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>X_test.shape: <span class=\"pl-pds\">\"</span></span>, X_test.shape)\n\nX_train <span class=\"pl-k\">=</span> X_train.astype(np.float32)\nX_valid <span class=\"pl-k\">=</span> X_valid.astype(np.float32)\nX_test <span class=\"pl-k\">=</span> X_test.astype(np.float32)\n\ntrain_mean <span class=\"pl-k\">=</span> X_train.mean()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Mean subtraction from pixels</span>\nX_train <span class=\"pl-k\">-=</span> train_mean\nX_valid <span class=\"pl-k\">-=</span> train_mean\nX_test <span class=\"pl-k\">-=</span> train_mean\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Normalization</span>\nX_train <span class=\"pl-k\">/=</span><span class=\"pl-c1\">255</span>.\nX_valid <span class=\"pl-k\">/=</span><span class=\"pl-c1\">255</span>.\nX_test <span class=\"pl-k\">/=</span><span class=\"pl-c1\">255</span>.\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> One Hot Encoding(OHE)</span>\ny_train <span class=\"pl-k\">=</span> to_categorical(y_train, <span class=\"pl-v\">num_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>).astype(np.int8)\ny_valid <span class=\"pl-k\">=</span> to_categorical(y_valid, <span class=\"pl-v\">num_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>).astype(np.int8)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>A simple generator</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">data_gen</span>(<span class=\"pl-smi\">data</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">8</span>):\n    n <span class=\"pl-k\">=</span> <span class=\"pl-c1\">len</span>(data)\n    batch_data <span class=\"pl-k\">=</span> np.zeros((batch_size, <span class=\"pl-c1\">28</span>, <span class=\"pl-c1\">28</span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\n    batch_labels <span class=\"pl-k\">=</span> np.zeros((batch_size,<span class=\"pl-c1\">10</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.int8)\n    indices <span class=\"pl-k\">=</span> np.arange(n)\n    i <span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>\n    <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n        np.random.shuffle(indices)\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>print(indices,\"\\n\")</span>\n        next_batch <span class=\"pl-k\">=</span> indices[(i<span class=\"pl-k\">*</span>batch_size):(i<span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span>)<span class=\"pl-k\">*</span>batch_size]\n        <span class=\"pl-k\">for</span> j, idx <span class=\"pl-k\">in</span> <span class=\"pl-c1\">enumerate</span>(next_batch):\n            batch_data[j] <span class=\"pl-k\">=</span> data[idx]\n            batch_labels[j] <span class=\"pl-k\">=</span> labels[idx]\n        \n        <span class=\"pl-k\">yield</span> batch_data, batch_labels\n        i <span class=\"pl-k\">+=</span><span class=\"pl-c1\">1</span>  \n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> create generator instance for training and validation </span>\ntrain_data_gen <span class=\"pl-k\">=</span> data_gen(X_train, y_train)\nvalid_data_gen <span class=\"pl-k\">=</span> data_gen(X_valid, y_valid)</pre></div>", "body_text": "@asimshankar I don't think there is any problem with my generator code. Anyways, I am putting up my generator code also, so that you can take another look:\n# Reshape the data\nX_train = np.array(X_train.iloc[:, :]).reshape(len(X_train),28,28,1)\nX_valid = np.array(X_valid.iloc[:, :]).reshape(len(X_valid), 28, 28,1)\nX_test = np.array(test.iloc[:,1:]).reshape(len(test), 28, 28,1)\n\nprint(\"X_train shape: \", X_train.shape)\nprint(\"X_valid.shape: \", X_valid.shape)\nprint(\"X_test.shape: \", X_test.shape)\n\nX_train = X_train.astype(np.float32)\nX_valid = X_valid.astype(np.float32)\nX_test = X_test.astype(np.float32)\n\ntrain_mean = X_train.mean()\n\n# Mean subtraction from pixels\nX_train -= train_mean\nX_valid -= train_mean\nX_test -= train_mean\n\n# Normalization\nX_train /=255.\nX_valid /=255.\nX_test /=255.\n\n# One Hot Encoding(OHE)\ny_train = to_categorical(y_train, num_classes=10).astype(np.int8)\ny_valid = to_categorical(y_valid, num_classes=10).astype(np.int8)\n\n#A simple generator\ndef data_gen(data, labels, batch_size=8):\n    n = len(data)\n    batch_data = np.zeros((batch_size, 28, 28, 1), dtype=np.float32)\n    batch_labels = np.zeros((batch_size,10), dtype=np.int8)\n    indices = np.arange(n)\n    i =0\n    while True:\n        np.random.shuffle(indices)\n        #print(indices,\"\\n\")\n        next_batch = indices[(i*batch_size):(i+1)*batch_size]\n        for j, idx in enumerate(next_batch):\n            batch_data[j] = data[idx]\n            batch_labels[j] = labels[idx]\n        \n        yield batch_data, batch_labels\n        i +=1  \n\n# create generator instance for training and validation \ntrain_data_gen = data_gen(X_train, y_train)\nvalid_data_gen = data_gen(X_valid, y_valid)", "body": "@asimshankar I don't think there is any problem with my generator code. Anyways, I am putting up my generator code also, so that you can take another look:\r\n\r\n```python\r\n# Reshape the data\r\nX_train = np.array(X_train.iloc[:, :]).reshape(len(X_train),28,28,1)\r\nX_valid = np.array(X_valid.iloc[:, :]).reshape(len(X_valid), 28, 28,1)\r\nX_test = np.array(test.iloc[:,1:]).reshape(len(test), 28, 28,1)\r\n\r\nprint(\"X_train shape: \", X_train.shape)\r\nprint(\"X_valid.shape: \", X_valid.shape)\r\nprint(\"X_test.shape: \", X_test.shape)\r\n\r\nX_train = X_train.astype(np.float32)\r\nX_valid = X_valid.astype(np.float32)\r\nX_test = X_test.astype(np.float32)\r\n\r\ntrain_mean = X_train.mean()\r\n\r\n# Mean subtraction from pixels\r\nX_train -= train_mean\r\nX_valid -= train_mean\r\nX_test -= train_mean\r\n\r\n# Normalization\r\nX_train /=255.\r\nX_valid /=255.\r\nX_test /=255.\r\n\r\n# One Hot Encoding(OHE)\r\ny_train = to_categorical(y_train, num_classes=10).astype(np.int8)\r\ny_valid = to_categorical(y_valid, num_classes=10).astype(np.int8)\r\n\r\n#A simple generator\r\ndef data_gen(data, labels, batch_size=8):\r\n    n = len(data)\r\n    batch_data = np.zeros((batch_size, 28, 28, 1), dtype=np.float32)\r\n    batch_labels = np.zeros((batch_size,10), dtype=np.int8)\r\n    indices = np.arange(n)\r\n    i =0\r\n    while True:\r\n        np.random.shuffle(indices)\r\n        #print(indices,\"\\n\")\r\n        next_batch = indices[(i*batch_size):(i+1)*batch_size]\r\n        for j, idx in enumerate(next_batch):\r\n            batch_data[j] = data[idx]\r\n            batch_labels[j] = labels[idx]\r\n        \r\n        yield batch_data, batch_labels\r\n        i +=1  \r\n\r\n# create generator instance for training and validation \r\ntrain_data_gen = data_gen(X_train, y_train)\r\nvalid_data_gen = data_gen(X_valid, y_valid)\r\n```"}