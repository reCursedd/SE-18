{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23356", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23356/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23356/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23356/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23356", "id": 375158839, "node_id": "MDU6SXNzdWUzNzUxNTg4Mzk=", "number": 23356, "title": "Betainc_op_test fails on ARM because one of the gradients is NaN", "user": {"login": "MattConley", "id": 10891704, "node_id": "MDQ6VXNlcjEwODkxNzA0", "avatar_url": "https://avatars0.githubusercontent.com/u/10891704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MattConley", "html_url": "https://github.com/MattConley", "followers_url": "https://api.github.com/users/MattConley/followers", "following_url": "https://api.github.com/users/MattConley/following{/other_user}", "gists_url": "https://api.github.com/users/MattConley/gists{/gist_id}", "starred_url": "https://api.github.com/users/MattConley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MattConley/subscriptions", "organizations_url": "https://api.github.com/users/MattConley/orgs", "repos_url": "https://api.github.com/users/MattConley/repos", "events_url": "https://api.github.com/users/MattConley/events{/privacy}", "received_events_url": "https://api.github.com/users/MattConley/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097547147, "node_id": "MDU6TGFiZWwxMDk3NTQ3MTQ3", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:ops", "name": "comp:ops", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-10-29T18:34:21Z", "updated_at": "2018-11-21T01:17:51Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): <strong>no</strong></li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): <strong>Linux for Tegra (Ubuntu 18.04)</strong></li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: <strong>Jetson AGX Xavier (ARM-aarch64)</strong></li>\n<li>TensorFlow installed from (source or binary): <strong>source</strong></li>\n<li>TensorFlow version (use command below): <strong>1.11</strong></li>\n<li>Python version: <strong>2.7</strong></li>\n<li>Bazel version (if compiling from source): <strong>0.15.0</strong></li>\n<li>GCC/Compiler version (if compiling from source): <strong>Linaro 7.3.0</strong></li>\n<li>CUDA/cuDNN version: <strong>CUDA 10 cuDNN 7.3</strong></li>\n<li>GPU model and memory: <strong>Jetson AGX Xavier, 16GB (shared with host)</strong></li>\n</ul>\n<p><strong>Describe the current behavior</strong></p>\n<p>The betainc_op test testBetaIncFpropAndBpropAreNeverNAN (within tensorflow/python/kernel_tests/betainc_op_test.py) fails because one of the gradient values is NaN.</p>\n<p><strong>Describe the expected behavior</strong></p>\n<p>The betainc_op test testBetaIncFpropAndBpropAreNeverNAN should pass, where none of the values are NaN</p>\n<p><strong>Code to reproduce the issue</strong></p>\n<p>Running tensorflow/python/kernel_tests/betainc_op_test.py on an ARM architecture machine should reproduce the issue.<br>\nIn addition, this small python script shows the same results:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.ops import gradients_impl\nfrom tensorflow.python.ops import math_ops\n\nwith tf.Session() as sess:\n  ga_s = [.4, .1, .2, .3]\n  gb_s = [.4, .1, .2, .3]\n  gx_s = [.7, .8, .9, 1.]\n\n  ga_s_t = constant_op.constant(ga_s, dtype=dtypes.float32)\n  gb_s_t = constant_op.constant(gb_s, dtype=dtypes.float32)\n  gx_s_t = constant_op.constant(gx_s, dtype=dtypes.float32)\n  tf_gout_t = math_ops.betainc(ga_s_t, gb_s_t, gx_s_t)\n  tf_gout, grads_x = sess.run(\n      [tf_gout_t,\n       gradients_impl.gradients(tf_gout_t, [ga_s_t, gb_s_t, gx_s_t])[2]])\n\n  print(np.isnan(tf_gout))\n  print(np.isnan(grads_x))\n  print(grads_x)\n\n</code></pre>\n<p><strong>Other info / logs</strong></p>\n<p>This appears to be caused by one of the inputs to the betainc function being set to 1, as changing the  testBetaIncFpropAndBpropAreNeverNAN definition of space_x from</p>\n<blockquote>\n<p>space_x = np.linspace(1e-16, 1 \u2013 1e-16).tolist()</p>\n</blockquote>\n<p>to</p>\n<blockquote>\n<p>space_x = np.linspace(1e-16, 1 \u2013 1e-8).tolist()</p>\n</blockquote>\n<p>removes the NaN.</p>\n<p>Interestingly, if the number of elements in the tensor is less than four, the gradient is returned correctly (inf instead of nan)</p>\n<p>Here is the output of the failed test:</p>\n<blockquote>\n<p>FAIL: testBetaIncFpropAndBpropAreNeverNAN (<strong>main</strong>.BetaincTest)</p>\n<p>Traceback (most recent call last):<br>\nFile \"tensorflow/python/kernel_tests/betainc_op_test.py\", line 160, in testBetaIncFpropAndBpropAreNeverNAN<br>\nnp.isnan(grads_x))<br>\nFile \"/home/nvidia/Tensorflow/tensorflow/tf_env2.7/local/lib/python2.7/site-packages/tensorflow/python/framework/test_util.py\", line 1556, in assertAllEqual<br>\nnp.testing.assert_array_equal(a, b, err_msg=msg)<br>\nFile \"/home/nvidia/Tensorflow/tensorflow/tf_env2.7/local/lib/python2.7/site-packages/numpy/testing/nose_tools/utils.py\", line 855, in assert_array_equal<br>\nverbose=verbose, header='Arrays are not equal')<br>\nFile \"/home/nvidia/Tensorflow/tensorflow/tf_env2.7/local/lib/python2.7/site-packages/numpy/testing/nose_tools/utils.py\", line 779, in assert_array_compare<br>\nraise AssertionError(msg)<br>\nAssertionError:<br>\nArrays are not equal</p>\n<p>(mismatch 2.0%)<br>\nx: array([False, False, False, ..., False, False, False])<br>\ny: array([False, False, False, ..., False, False,  True])</p>\n</blockquote>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux for Tegra (Ubuntu 18.04)\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: Jetson AGX Xavier (ARM-aarch64)\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.11\nPython version: 2.7\nBazel version (if compiling from source): 0.15.0\nGCC/Compiler version (if compiling from source): Linaro 7.3.0\nCUDA/cuDNN version: CUDA 10 cuDNN 7.3\nGPU model and memory: Jetson AGX Xavier, 16GB (shared with host)\n\nDescribe the current behavior\nThe betainc_op test testBetaIncFpropAndBpropAreNeverNAN (within tensorflow/python/kernel_tests/betainc_op_test.py) fails because one of the gradient values is NaN.\nDescribe the expected behavior\nThe betainc_op test testBetaIncFpropAndBpropAreNeverNAN should pass, where none of the values are NaN\nCode to reproduce the issue\nRunning tensorflow/python/kernel_tests/betainc_op_test.py on an ARM architecture machine should reproduce the issue.\nIn addition, this small python script shows the same results:\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.ops import gradients_impl\nfrom tensorflow.python.ops import math_ops\n\nwith tf.Session() as sess:\n  ga_s = [.4, .1, .2, .3]\n  gb_s = [.4, .1, .2, .3]\n  gx_s = [.7, .8, .9, 1.]\n\n  ga_s_t = constant_op.constant(ga_s, dtype=dtypes.float32)\n  gb_s_t = constant_op.constant(gb_s, dtype=dtypes.float32)\n  gx_s_t = constant_op.constant(gx_s, dtype=dtypes.float32)\n  tf_gout_t = math_ops.betainc(ga_s_t, gb_s_t, gx_s_t)\n  tf_gout, grads_x = sess.run(\n      [tf_gout_t,\n       gradients_impl.gradients(tf_gout_t, [ga_s_t, gb_s_t, gx_s_t])[2]])\n\n  print(np.isnan(tf_gout))\n  print(np.isnan(grads_x))\n  print(grads_x)\n\n\nOther info / logs\nThis appears to be caused by one of the inputs to the betainc function being set to 1, as changing the  testBetaIncFpropAndBpropAreNeverNAN definition of space_x from\n\nspace_x = np.linspace(1e-16, 1 \u2013 1e-16).tolist()\n\nto\n\nspace_x = np.linspace(1e-16, 1 \u2013 1e-8).tolist()\n\nremoves the NaN.\nInterestingly, if the number of elements in the tensor is less than four, the gradient is returned correctly (inf instead of nan)\nHere is the output of the failed test:\n\nFAIL: testBetaIncFpropAndBpropAreNeverNAN (main.BetaincTest)\nTraceback (most recent call last):\nFile \"tensorflow/python/kernel_tests/betainc_op_test.py\", line 160, in testBetaIncFpropAndBpropAreNeverNAN\nnp.isnan(grads_x))\nFile \"/home/nvidia/Tensorflow/tensorflow/tf_env2.7/local/lib/python2.7/site-packages/tensorflow/python/framework/test_util.py\", line 1556, in assertAllEqual\nnp.testing.assert_array_equal(a, b, err_msg=msg)\nFile \"/home/nvidia/Tensorflow/tensorflow/tf_env2.7/local/lib/python2.7/site-packages/numpy/testing/nose_tools/utils.py\", line 855, in assert_array_equal\nverbose=verbose, header='Arrays are not equal')\nFile \"/home/nvidia/Tensorflow/tensorflow/tf_env2.7/local/lib/python2.7/site-packages/numpy/testing/nose_tools/utils.py\", line 779, in assert_array_compare\nraise AssertionError(msg)\nAssertionError:\nArrays are not equal\n(mismatch 2.0%)\nx: array([False, False, False, ..., False, False, False])\ny: array([False, False, False, ..., False, False,  True])", "body": "\r\n\r\n**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): **no**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): **Linux for Tegra (Ubuntu 18.04)**\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: **Jetson AGX Xavier (ARM-aarch64)**\r\n- TensorFlow installed from (source or binary): **source**\r\n- TensorFlow version (use command below): **1.11**\r\n- Python version: **2.7**\r\n- Bazel version (if compiling from source): **0.15.0**\r\n- GCC/Compiler version (if compiling from source): **Linaro 7.3.0**\r\n- CUDA/cuDNN version: **CUDA 10 cuDNN 7.3**\r\n- GPU model and memory: **Jetson AGX Xavier, 16GB (shared with host)**\r\n\r\n\r\n**Describe the current behavior**\r\n\r\nThe betainc_op test testBetaIncFpropAndBpropAreNeverNAN (within tensorflow/python/kernel_tests/betainc_op_test.py) fails because one of the gradient values is NaN.\r\n\r\n**Describe the expected behavior**\r\n\r\nThe betainc_op test testBetaIncFpropAndBpropAreNeverNAN should pass, where none of the values are NaN\r\n\r\n**Code to reproduce the issue**\r\n\r\nRunning tensorflow/python/kernel_tests/betainc_op_test.py on an ARM architecture machine should reproduce the issue.\r\nIn addition, this small python script shows the same results:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nfrom tensorflow.python.framework import constant_op\r\nfrom tensorflow.python.framework import dtypes\r\nfrom tensorflow.python.ops import gradients_impl\r\nfrom tensorflow.python.ops import math_ops\r\n\r\nwith tf.Session() as sess:\r\n  ga_s = [.4, .1, .2, .3]\r\n  gb_s = [.4, .1, .2, .3]\r\n  gx_s = [.7, .8, .9, 1.]\r\n\r\n  ga_s_t = constant_op.constant(ga_s, dtype=dtypes.float32)\r\n  gb_s_t = constant_op.constant(gb_s, dtype=dtypes.float32)\r\n  gx_s_t = constant_op.constant(gx_s, dtype=dtypes.float32)\r\n  tf_gout_t = math_ops.betainc(ga_s_t, gb_s_t, gx_s_t)\r\n  tf_gout, grads_x = sess.run(\r\n      [tf_gout_t,\r\n       gradients_impl.gradients(tf_gout_t, [ga_s_t, gb_s_t, gx_s_t])[2]])\r\n\r\n  print(np.isnan(tf_gout))\r\n  print(np.isnan(grads_x))\r\n  print(grads_x)\r\n\r\n```\r\n\r\n**Other info / logs**\r\n\r\nThis appears to be caused by one of the inputs to the betainc function being set to 1, as changing the  testBetaIncFpropAndBpropAreNeverNAN definition of space_x from\r\n\t\r\n\r\n> space_x = np.linspace(1e-16, 1 \u2013 1e-16).tolist()\r\n\r\n\r\nto\r\n\t\r\n\r\n> space_x = np.linspace(1e-16, 1 \u2013 1e-8).tolist()\r\n\r\nremoves the NaN.\r\n\r\nInterestingly, if the number of elements in the tensor is less than four, the gradient is returned correctly (inf instead of nan)\r\n\r\n\r\nHere is the output of the failed test:\r\n\r\n> FAIL: testBetaIncFpropAndBpropAreNeverNAN (__main__.BetaincTest)\r\n> \r\n> Traceback (most recent call last):\r\n>   File \"tensorflow/python/kernel_tests/betainc_op_test.py\", line 160, in testBetaIncFpropAndBpropAreNeverNAN\r\n>     np.isnan(grads_x))\r\n>   File \"/home/nvidia/Tensorflow/tensorflow/tf_env2.7/local/lib/python2.7/site-packages/tensorflow/python/framework/test_util.py\", line 1556, in assertAllEqual\r\n>     np.testing.assert_array_equal(a, b, err_msg=msg)\r\n>   File \"/home/nvidia/Tensorflow/tensorflow/tf_env2.7/local/lib/python2.7/site-packages/numpy/testing/nose_tools/utils.py\", line 855, in assert_array_equal\r\n>     verbose=verbose, header='Arrays are not equal')\r\n>   File \"/home/nvidia/Tensorflow/tensorflow/tf_env2.7/local/lib/python2.7/site-packages/numpy/testing/nose_tools/utils.py\", line 779, in assert_array_compare\r\n>     raise AssertionError(msg)\r\n> AssertionError:\r\n> Arrays are not equal\r\n> \r\n> (mismatch 2.0%)\r\n>  x: array([False, False, False, ..., False, False, False])\r\n>  y: array([False, False, False, ..., False, False,  True])\r\n"}