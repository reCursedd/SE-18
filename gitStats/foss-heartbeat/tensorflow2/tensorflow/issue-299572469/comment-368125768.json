{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/368125768", "html_url": "https://github.com/tensorflow/tensorflow/issues/17204#issuecomment-368125768", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17204", "id": 368125768, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODEyNTc2OA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-23T20:12:07Z", "updated_at": "2018-02-23T21:28:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>H2D seems to take expected time when source data lives in TensorFlow CPU variable rather than numpy array (8ms instead of 20ms), so I suspect the difference is due to memory pinning.</p>\n<p>I tried feeding page-locked numpy array created using PyCUDA (<a href=\"https://github.com/diux-dev/cluster/blob/master/yuxin_numpy/d2h_benchmark_pycuda.py\">code</a>) but it made no difference in speed. I wonder if TensorFlow is smart enough to check if incoming numpy arrays are page-locked already, or if memory-&gt;page-locked memory is happening regardless</p>\n<pre><code>  import pycuda.driver as drv\n  drv.init()\n  print(\"%d device(s) found.\" % drv.Device.count())\n  current_dev = drv.Device(0) #device we are working on\n  ctx = current_dev.make_context() #make a working context\n  ctx.push()\n  np_array = drv.pagelocked_zeros((args.dim,), dtype=np.float32)\n  ...\n  sess.run(params.initializer, feed_dict={params.initial_value:np_array})\n\n</code></pre>", "body_text": "H2D seems to take expected time when source data lives in TensorFlow CPU variable rather than numpy array (8ms instead of 20ms), so I suspect the difference is due to memory pinning.\nI tried feeding page-locked numpy array created using PyCUDA (code) but it made no difference in speed. I wonder if TensorFlow is smart enough to check if incoming numpy arrays are page-locked already, or if memory->page-locked memory is happening regardless\n  import pycuda.driver as drv\n  drv.init()\n  print(\"%d device(s) found.\" % drv.Device.count())\n  current_dev = drv.Device(0) #device we are working on\n  ctx = current_dev.make_context() #make a working context\n  ctx.push()\n  np_array = drv.pagelocked_zeros((args.dim,), dtype=np.float32)\n  ...\n  sess.run(params.initializer, feed_dict={params.initial_value:np_array})", "body": "H2D seems to take expected time when source data lives in TensorFlow CPU variable rather than numpy array (8ms instead of 20ms), so I suspect the difference is due to memory pinning.\r\n\r\nI tried feeding page-locked numpy array created using PyCUDA ([code](https://github.com/diux-dev/cluster/blob/master/yuxin_numpy/d2h_benchmark_pycuda.py)) but it made no difference in speed. I wonder if TensorFlow is smart enough to check if incoming numpy arrays are page-locked already, or if memory->page-locked memory is happening regardless\r\n\r\n```\r\n  import pycuda.driver as drv\r\n  drv.init()\r\n  print(\"%d device(s) found.\" % drv.Device.count())\r\n  current_dev = drv.Device(0) #device we are working on\r\n  ctx = current_dev.make_context() #make a working context\r\n  ctx.push()\r\n  np_array = drv.pagelocked_zeros((args.dim,), dtype=np.float32)\r\n  ...\r\n  sess.run(params.initializer, feed_dict={params.initial_value:np_array})\r\n\r\n```"}