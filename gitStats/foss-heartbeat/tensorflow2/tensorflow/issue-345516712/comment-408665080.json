{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/408665080", "html_url": "https://github.com/tensorflow/tensorflow/pull/21218#issuecomment-408665080", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21218", "id": 408665080, "node_id": "MDEyOklzc3VlQ29tbWVudDQwODY2NTA4MA==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-29T09:54:19Z", "updated_at": "2018-07-29T09:54:19Z", "author_association": "MEMBER", "body_html": "<p>Test script:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> time\n\ntf.reset_default_graph()\n\nbatch_size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4</span>\nheight <span class=\"pl-k\">=</span> width <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1024</span>\nksize <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>\n\ninputs <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>inputs<span class=\"pl-pds\">'</span></span>, (batch_size, height, width, <span class=\"pl-c1\">1</span>))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>inputs: <span class=\"pl-pds\">'</span></span>, inputs)\npatches <span class=\"pl-k\">=</span> tf.extract_image_patches(inputs, \n                                   <span class=\"pl-v\">ksizes</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>,ksize,ksize,<span class=\"pl-c1\">1</span>], \n                                   <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], \n                                   <span class=\"pl-v\">rates</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], \n                                   <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>patches: <span class=\"pl-pds\">'</span></span>, patches.shape)\ns <span class=\"pl-k\">=</span> time.clock()\ngradients <span class=\"pl-k\">=</span> tf.gradients(patches, inputs)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>construct time: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(time.clock() <span class=\"pl-k\">-</span> s))\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>gradients: <span class=\"pl-pds\">'</span></span>, gradients)\n    s <span class=\"pl-k\">=</span> time.clock()\n    res <span class=\"pl-k\">=</span> sess.run(gradients)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>exec time: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(time.clock() <span class=\"pl-k\">-</span> s))\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>res shape: <span class=\"pl-pds\">'</span></span>, res[<span class=\"pl-c1\">0</span>].shape)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>res: <span class=\"pl-pds\">'</span></span>, res[<span class=\"pl-c1\">0</span>][<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>:<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">0</span>:<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">0</span>])</pre></div>", "body_text": "Test script:\nimport tensorflow as tf\nimport time\n\ntf.reset_default_graph()\n\nbatch_size = 4\nheight = width = 1024\nksize = 5\n\ninputs = tf.get_variable('inputs', (batch_size, height, width, 1))\nprint('inputs: ', inputs)\npatches = tf.extract_image_patches(inputs, \n                                   ksizes=[1,ksize,ksize,1], \n                                   strides=[1,1,1,1], \n                                   rates=[1,1,1,1], \n                                   padding='SAME')\nprint('patches: ', patches.shape)\ns = time.clock()\ngradients = tf.gradients(patches, inputs)\nprint('construct time: {}'.format(time.clock() - s))\n\nwith tf.Session() as sess:\n    print('gradients: ', gradients)\n    s = time.clock()\n    res = sess.run(gradients)\n    print('exec time: {}'.format(time.clock() - s))\n    print('res shape: ', res[0].shape)\n    print('res: ', res[0][0, 0:3, 0:3, 0])", "body": "Test script:\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport time\r\n\r\ntf.reset_default_graph()\r\n\r\nbatch_size = 4\r\nheight = width = 1024\r\nksize = 5\r\n\r\ninputs = tf.get_variable('inputs', (batch_size, height, width, 1))\r\nprint('inputs: ', inputs)\r\npatches = tf.extract_image_patches(inputs, \r\n                                   ksizes=[1,ksize,ksize,1], \r\n                                   strides=[1,1,1,1], \r\n                                   rates=[1,1,1,1], \r\n                                   padding='SAME')\r\nprint('patches: ', patches.shape)\r\ns = time.clock()\r\ngradients = tf.gradients(patches, inputs)\r\nprint('construct time: {}'.format(time.clock() - s))\r\n\r\nwith tf.Session() as sess:\r\n    print('gradients: ', gradients)\r\n    s = time.clock()\r\n    res = sess.run(gradients)\r\n    print('exec time: {}'.format(time.clock() - s))\r\n    print('res shape: ', res[0].shape)\r\n    print('res: ', res[0][0, 0:3, 0:3, 0])\r\n```"}