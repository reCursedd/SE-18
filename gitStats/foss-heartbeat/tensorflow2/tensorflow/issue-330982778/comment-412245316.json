{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/412245316", "html_url": "https://github.com/tensorflow/tensorflow/pull/19894#issuecomment-412245316", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19894", "id": 412245316, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjI0NTMxNg==", "user": {"login": "manipopopo", "id": 14799222, "node_id": "MDQ6VXNlcjE0Nzk5MjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/14799222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manipopopo", "html_url": "https://github.com/manipopopo", "followers_url": "https://api.github.com/users/manipopopo/followers", "following_url": "https://api.github.com/users/manipopopo/following{/other_user}", "gists_url": "https://api.github.com/users/manipopopo/gists{/gist_id}", "starred_url": "https://api.github.com/users/manipopopo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manipopopo/subscriptions", "organizations_url": "https://api.github.com/users/manipopopo/orgs", "repos_url": "https://api.github.com/users/manipopopo/repos", "events_url": "https://api.github.com/users/manipopopo/events{/privacy}", "received_events_url": "https://api.github.com/users/manipopopo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-11T02:33:55Z", "updated_at": "2018-08-11T02:33:55Z", "author_association": "CONTRIBUTOR", "body_html": "<p>When a kernel <code>Variable</code> is shared by two <code>Conv2D</code>s, after quantization there will be only one <code>Conv2D</code> getting the quantized kernel.</p>\n<p>For example, suppose there is a kernel <code>K</code> shared by <code>Conv2D</code> <code>c1</code> and <code>Conv2D</code> <code>c2</code>:</p>\n<p><code>K</code> &gt; <code>c1</code><br>\n<code>K</code> &gt; <code>c2</code></p>\n<p>When quantizing <code>c1</code>, <code>Quantize</code> calls <code>_InsertQuantOp</code> to quantize the input kernel <code>K</code> and feeds the quantized <code>K</code> to <code>c1</code>:</p>\n<p><code>K</code> &gt; <code>quantized_K</code> &gt; <code>c1</code></p>\n<p>After that when quantizing <code>c2</code>,  <code>Quantize</code> calls <code>_InsertQuantOp</code> to quantize the input kernel <code>K</code> again but this time <a href=\"https://github.com/tensorflow/tensorflow/blob/2e7ae3406f0715de9e23d7657827048ed81e57cb/tensorflow/contrib/quantize/python/quantize.py#L543\"><code>_InsertQuantOp</code> will return immediately</a> since <code>K</code> has been quantized.</p>\n<p>The quantized graph will be</p>\n<p><code>K</code> &gt; <code>quantized_K</code> &gt; <code>c1</code><br>\n<code>K</code> &gt; <code>c2</code></p>\n<p>This PR changes the quantized graph into</p>\n<p><code>K</code> &gt; <code>quantized_K</code> &gt; <code>c1</code><br>\n<code>K</code> &gt; <code>quantized_K</code> &gt; <code>c2</code></p>", "body_text": "When a kernel Variable is shared by two Conv2Ds, after quantization there will be only one Conv2D getting the quantized kernel.\nFor example, suppose there is a kernel K shared by Conv2D c1 and Conv2D c2:\nK > c1\nK > c2\nWhen quantizing c1, Quantize calls _InsertQuantOp to quantize the input kernel K and feeds the quantized K to c1:\nK > quantized_K > c1\nAfter that when quantizing c2,  Quantize calls _InsertQuantOp to quantize the input kernel K again but this time _InsertQuantOp will return immediately since K has been quantized.\nThe quantized graph will be\nK > quantized_K > c1\nK > c2\nThis PR changes the quantized graph into\nK > quantized_K > c1\nK > quantized_K > c2", "body": "When a kernel `Variable` is shared by two `Conv2D`s, after quantization there will be only one `Conv2D` getting the quantized kernel. \r\n\r\nFor example, suppose there is a kernel `K` shared by `Conv2D` `c1` and `Conv2D` `c2`:\r\n\r\n`K` > `c1`\r\n`K` > `c2`\r\n\r\nWhen quantizing `c1`, `Quantize` calls `_InsertQuantOp` to quantize the input kernel `K` and feeds the quantized `K` to `c1`:\r\n\r\n`K` > `quantized_K` > `c1`\r\n\r\nAfter that when quantizing `c2`,  `Quantize` calls `_InsertQuantOp` to quantize the input kernel `K` again but this time [`_InsertQuantOp` will return immediately](https://github.com/tensorflow/tensorflow/blob/2e7ae3406f0715de9e23d7657827048ed81e57cb/tensorflow/contrib/quantize/python/quantize.py#L543) since `K` has been quantized.\r\n\r\nThe quantized graph will be\r\n\r\n`K` > `quantized_K` > `c1`\r\n`K` > `c2`\r\n\r\nThis PR changes the quantized graph into\r\n\r\n`K` > `quantized_K` > `c1`\r\n`K` > `quantized_K` > `c2`\r\n"}