{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/87567034", "pull_request_review_id": 8175192, "id": 87567034, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NTY3MDM0", "diff_hunk": "@@ -200,75 +287,143 @@ def _cpu_value(repository_ctx):\n   return result.stdout.strip()\n \n \n-def _cuda_symlink_files(cpu_value, cuda_version, cudnn_version):\n-  \"\"\"Returns a struct containing platform-specific paths.\n+def _lib_name(lib, cpu_value, version=\"\", static=False):\n+  \"\"\"Constructs the platform-specific name of a library.\n \n   Args:\n-    cpu_value: The string representing the host OS.\n-    cuda_version: The cuda version as returned by _cuda_version\n-    cudnn_version: The cudnn version as returned by _cudnn_version\n+    lib: The name of the library, such as \"cudart\"\n+    cpu_value: The name of the host operating system.\n+    version: The version of the library.\n+    static: True the library is static or False if it is a shared object.\n+\n+  Returns:\n+    The platform-specific name of the library.\n   \"\"\"\n-  cuda_ext = \".%s\" % cuda_version if cuda_version else \"\"\n-  cudnn_ext = \".%s\" % cudnn_version if cudnn_version else \"\"\n+  if not cpu_value in _EXTENSIONS:\n+    auto_configure_fail(\"Invalid cpu_value: %s\" % cpu_value)\n+\n   if cpu_value == \"Linux\":\n-    return struct(\n-        cuda_lib_path = \"lib64\",\n-        cuda_rt_lib = \"lib64/libcudart.so%s\" % cuda_ext,\n-        cuda_rt_lib_static = \"lib64/libcudart_static.a\",\n-        cuda_blas_lib = \"lib64/libcublas.so%s\" % cuda_ext,\n-        cuda_dnn_lib = \"lib64/libcudnn.so%s\" % cudnn_ext,\n-        cuda_dnn_lib_alt = \"libcudnn.so%s\" % cudnn_ext,\n-        cuda_rand_lib = \"lib64/libcurand.so%s\" % cuda_ext,\n-        cuda_fft_lib = \"lib64/libcufft.so%s\" % cuda_ext,\n-        cuda_cupti_lib = \"extras/CUPTI/lib64/libcupti.so%s\" % cuda_ext)\n-  elif cpu_value == \"Darwin\":\n-    return struct(\n-        cuda_lib_path = \"lib\",\n-        cuda_rt_lib = \"lib/libcudart%s.dylib\" % cuda_ext,\n-        cuda_rt_lib_static = \"lib/libcudart_static.a\",\n-        cuda_blas_lib = \"lib/libcublas%s.dylib\" % cuda_ext,\n-        cuda_dnn_lib = \"lib/libcudnn%s.dylib\" % cudnn_ext,\n-        cuda_dnn_lib_alt = \"libcudnn%s.dylib\" % cudnn_ext,\n-        cuda_rand_lib = \"lib/libcurand%s.dylib\" % cuda_ext,\n-        cuda_fft_lib = \"lib/libcufft%s.dylib\" % cuda_ext,\n-        cuda_cupti_lib = \"extras/CUPTI/lib/libcupti%s.dylib\" % cuda_ext)\n-  elif cpu_value == \"Windows\":\n-    return struct(\n-        cuda_lib_path = \"lib\",\n-        cuda_rt_lib = \"lib/cudart%s.dll\" % cuda_ext,\n-        cuda_rt_lib_static = \"lib/cudart_static.lib\",\n-        cuda_blas_lib = \"lib/cublas%s.dll\" % cuda_ext,\n-        cuda_dnn_lib = \"lib/cudnn%s.dll\" % cudnn_ext,\n-        cuda_dnn_lib_alt = \"cudnn%s.dll\" % cudnn_ext,\n-        cuda_rand_lib = \"lib/curand%s.dll\" % cuda_ext,\n-        cuda_fft_lib = \"lib/cufft%s.dll\" % cuda_ext,\n-        cuda_cupti_lib = \"extras/CUPTI/lib/cupti%s.dll\" % cuda_ext)\n-  else:\n-    auto_configure_fail(\"Not supported CPU value %s\" % cpu_value)\n+    if static:", "path": "third_party/gpus/cuda_configure.bzl", "position": null, "original_position": 228, "commit_id": "dfae1931365dae3354a8980829dfabcd59761232", "original_commit_id": "7305af63085588aebc614b5770ea5358639208f7", "user": {"login": "damienmg", "id": 3721087, "node_id": "MDQ6VXNlcjM3MjEwODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3721087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damienmg", "html_url": "https://github.com/damienmg", "followers_url": "https://api.github.com/users/damienmg/followers", "following_url": "https://api.github.com/users/damienmg/following{/other_user}", "gists_url": "https://api.github.com/users/damienmg/gists{/gist_id}", "starred_url": "https://api.github.com/users/damienmg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damienmg/subscriptions", "organizations_url": "https://api.github.com/users/damienmg/orgs", "repos_url": "https://api.github.com/users/damienmg/repos", "events_url": "https://api.github.com/users/damienmg/events{/privacy}", "received_events_url": "https://api.github.com/users/damienmg/received_events", "type": "User", "site_admin": false}, "body": "To go further in the factorisation to diminish the number of if statement you could use templates in the map.\n\nNot sure it would give a nicer code though.\n", "created_at": "2016-11-11T10:28:07Z", "updated_at": "2016-11-30T09:18:46Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5494#discussion_r87567034", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5494", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/87567034"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5494#discussion_r87567034"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5494"}}, "body_html": "<p>To go further in the factorisation to diminish the number of if statement you could use templates in the map.</p>\n<p>Not sure it would give a nicer code though.</p>", "body_text": "To go further in the factorisation to diminish the number of if statement you could use templates in the map.\nNot sure it would give a nicer code though."}