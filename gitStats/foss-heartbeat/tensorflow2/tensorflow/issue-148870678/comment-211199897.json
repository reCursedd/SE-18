{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/211199897", "html_url": "https://github.com/tensorflow/tensorflow/issues/1984#issuecomment-211199897", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1984", "id": 211199897, "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTE5OTg5Nw==", "user": {"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-18T04:54:17Z", "updated_at": "2016-04-18T04:54:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p>scan is defined in terms of while_loop.  So I will try to answer your question using while_loop.</p>\n<p>while_loop implements non-strict semantics.  An iteration can start as soon as one of the ops for this iteration is ready (i.e., all its inputs are available.) for execution.  So a while_loop can easily have multiple iterations running in parallel.  For example, for scan, even if the accumulated value is not available in a step, the step can still start and execute any ops that don't depend on the accumulated value. One problem to allow multiple iterations to run in parallel is resource management. parallel_iterations is introduced to give users some control of memory consumption and execution order.</p>\n<p>For <em>correct</em> programs, a while_loop should compute the same value for any value of parallel_iterations &gt;= 1.</p>", "body_text": "scan is defined in terms of while_loop.  So I will try to answer your question using while_loop.\nwhile_loop implements non-strict semantics.  An iteration can start as soon as one of the ops for this iteration is ready (i.e., all its inputs are available.) for execution.  So a while_loop can easily have multiple iterations running in parallel.  For example, for scan, even if the accumulated value is not available in a step, the step can still start and execute any ops that don't depend on the accumulated value. One problem to allow multiple iterations to run in parallel is resource management. parallel_iterations is introduced to give users some control of memory consumption and execution order.\nFor correct programs, a while_loop should compute the same value for any value of parallel_iterations >= 1.", "body": "scan is defined in terms of while_loop.  So I will try to answer your question using while_loop. \n\nwhile_loop implements non-strict semantics.  An iteration can start as soon as one of the ops for this iteration is ready (i.e., all its inputs are available.) for execution.  So a while_loop can easily have multiple iterations running in parallel.  For example, for scan, even if the accumulated value is not available in a step, the step can still start and execute any ops that don't depend on the accumulated value. One problem to allow multiple iterations to run in parallel is resource management. parallel_iterations is introduced to give users some control of memory consumption and execution order. \n\nFor _correct_ programs, a while_loop should compute the same value for any value of parallel_iterations >= 1. \n"}