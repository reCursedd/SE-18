{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11155", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11155/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11155/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11155/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11155", "id": 239642769, "node_id": "MDU6SXNzdWUyMzk2NDI3Njk=", "number": 11155, "title": "head.py still uses scalar_summary", "user": {"login": "alanyee", "id": 1873994, "node_id": "MDQ6VXNlcjE4NzM5OTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1873994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanyee", "html_url": "https://github.com/alanyee", "followers_url": "https://api.github.com/users/alanyee/followers", "following_url": "https://api.github.com/users/alanyee/following{/other_user}", "gists_url": "https://api.github.com/users/alanyee/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanyee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanyee/subscriptions", "organizations_url": "https://api.github.com/users/alanyee/orgs", "repos_url": "https://api.github.com/users/alanyee/repos", "events_url": "https://api.github.com/users/alanyee/events{/privacy}", "received_events_url": "https://api.github.com/users/alanyee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-29T23:58:32Z", "updated_at": "2018-09-15T01:09:04Z", "closed_at": "2018-09-15T01:09:04Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS Sierra 10.12.5</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.2.1</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>head.py still uses <code>logging_ops.scalar_summary</code> despite the method being a depreciated, leading to warnings. The problem seems to start from <code>estimator.fit</code> and <code>estimator.evaluate</code></p>\n<h3>Source code</h3>\n<pre><code>import tensorflow as tf\n# NumPy is often used to load, manipulate and preprocess data.\nimport numpy as np\n\n# Declare list of features. We only have one real-valued feature. There are many\n# other types of columns that are more complicated and useful.\nfeatures = [tf.contrib.layers.real_valued_column(\"x\", dimension=1)]\n\n# An estimator is the front end to invoke training (fitting) and evaluation\n# (inference). There are many predefined types like linear regression,\n# logistic regression, linear classification, logistic classification, and\n# many neural network classifiers and regressors. The following code\n# provides an estimator that does linear regression.\nestimator = tf.contrib.learn.LinearRegressor(feature_columns=features)\n\n# TensorFlow provides many helper methods to read and set up data sets.\n# Here we use two data sets: one for training and one for evaluation\n# We have to tell the function how many batches\n# of data (num_epochs) we want and how big each batch should be.\nx_train = np.array([1., 2., 3., 4.])\ny_train = np.array([0., -1., -2., -3.])\nx_eval = np.array([2., 5., 8., 1.])\ny_eval = np.array([-1.01, -4.1, -7, 0.])\ninput_fn = tf.contrib.learn.io.numpy_input_fn({\"x\":x_train}, y_train,\n                                              batch_size=4,\n                                              num_epochs=1000)\neval_input_fn = tf.contrib.learn.io.numpy_input_fn(\n    {\"x\":x_eval}, y_eval, batch_size=4, num_epochs=1000)\n\n# We can invoke 1000 training steps by invoking the  method and passing the\n# training data set.\nestimator.fit(input_fn=input_fn, steps=1000)\n# Here we evaluate how well our model did.\ntrain_loss = estimator.evaluate(input_fn=input_fn)\n\neval_loss = estimator.evaluate(input_fn=eval_input_fn)\n\nprint \"train loss: %r\"% train_loss\nprint \"eval loss: %r\"% eval_loss\n</code></pre>\n<h3>Logs</h3>\n<pre><code>WARNING:tensorflow:Using temporary folder as model directory: /var/folders/1l/v82bx7_s5zvf7z8wlgjz4j_06gd09g/T/tmpQRR2VF\nWARNING:tensorflow:From /Users/admin/Library/Python/2.7/lib/python/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:625: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\nInstructions for updating:\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\n2017-06-29 16:53:02.952908: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-06-29 16:53:02.952925: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n2017-06-29 16:53:02.952930: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-06-29 16:53:02.952934: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\nWARNING:tensorflow:From /Users/admin/Library/Python/2.7/lib/python/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:625: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\nInstructions for updating:\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\nWARNING:tensorflow:From /Users/admin/Library/Python/2.7/lib/python/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:625: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\nInstructions for updating:\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\ntrain metrics: {'loss': 9.803332e-07, 'global_step': 1000}\neval metrics: {'loss': 0.0026192721, 'global_step': 1000}\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Sierra 10.12.5\nTensorFlow installed from (source or binary): pip\nTensorFlow version (use command below): 1.2.1\nBazel version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nDescribe the problem\nhead.py still uses logging_ops.scalar_summary despite the method being a depreciated, leading to warnings. The problem seems to start from estimator.fit and estimator.evaluate\nSource code\nimport tensorflow as tf\n# NumPy is often used to load, manipulate and preprocess data.\nimport numpy as np\n\n# Declare list of features. We only have one real-valued feature. There are many\n# other types of columns that are more complicated and useful.\nfeatures = [tf.contrib.layers.real_valued_column(\"x\", dimension=1)]\n\n# An estimator is the front end to invoke training (fitting) and evaluation\n# (inference). There are many predefined types like linear regression,\n# logistic regression, linear classification, logistic classification, and\n# many neural network classifiers and regressors. The following code\n# provides an estimator that does linear regression.\nestimator = tf.contrib.learn.LinearRegressor(feature_columns=features)\n\n# TensorFlow provides many helper methods to read and set up data sets.\n# Here we use two data sets: one for training and one for evaluation\n# We have to tell the function how many batches\n# of data (num_epochs) we want and how big each batch should be.\nx_train = np.array([1., 2., 3., 4.])\ny_train = np.array([0., -1., -2., -3.])\nx_eval = np.array([2., 5., 8., 1.])\ny_eval = np.array([-1.01, -4.1, -7, 0.])\ninput_fn = tf.contrib.learn.io.numpy_input_fn({\"x\":x_train}, y_train,\n                                              batch_size=4,\n                                              num_epochs=1000)\neval_input_fn = tf.contrib.learn.io.numpy_input_fn(\n    {\"x\":x_eval}, y_eval, batch_size=4, num_epochs=1000)\n\n# We can invoke 1000 training steps by invoking the  method and passing the\n# training data set.\nestimator.fit(input_fn=input_fn, steps=1000)\n# Here we evaluate how well our model did.\ntrain_loss = estimator.evaluate(input_fn=input_fn)\n\neval_loss = estimator.evaluate(input_fn=eval_input_fn)\n\nprint \"train loss: %r\"% train_loss\nprint \"eval loss: %r\"% eval_loss\n\nLogs\nWARNING:tensorflow:Using temporary folder as model directory: /var/folders/1l/v82bx7_s5zvf7z8wlgjz4j_06gd09g/T/tmpQRR2VF\nWARNING:tensorflow:From /Users/admin/Library/Python/2.7/lib/python/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:625: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\nInstructions for updating:\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\n2017-06-29 16:53:02.952908: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-06-29 16:53:02.952925: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n2017-06-29 16:53:02.952930: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-06-29 16:53:02.952934: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\nWARNING:tensorflow:From /Users/admin/Library/Python/2.7/lib/python/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:625: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\nInstructions for updating:\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\nWARNING:tensorflow:From /Users/admin/Library/Python/2.7/lib/python/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:625: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\nInstructions for updating:\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\ntrain metrics: {'loss': 9.803332e-07, 'global_step': 1000}\neval metrics: {'loss': 0.0026192721, 'global_step': 1000}", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS Sierra 10.12.5\r\n- **TensorFlow installed from (source or binary)**: pip\r\n- **TensorFlow version (use command below)**: 1.2.1\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\nhead.py still uses `logging_ops.scalar_summary` despite the method being a depreciated, leading to warnings. The problem seems to start from `estimator.fit` and `estimator.evaluate`\r\n\r\n### Source code\r\n```\r\nimport tensorflow as tf\r\n# NumPy is often used to load, manipulate and preprocess data.\r\nimport numpy as np\r\n\r\n# Declare list of features. We only have one real-valued feature. There are many\r\n# other types of columns that are more complicated and useful.\r\nfeatures = [tf.contrib.layers.real_valued_column(\"x\", dimension=1)]\r\n\r\n# An estimator is the front end to invoke training (fitting) and evaluation\r\n# (inference). There are many predefined types like linear regression,\r\n# logistic regression, linear classification, logistic classification, and\r\n# many neural network classifiers and regressors. The following code\r\n# provides an estimator that does linear regression.\r\nestimator = tf.contrib.learn.LinearRegressor(feature_columns=features)\r\n\r\n# TensorFlow provides many helper methods to read and set up data sets.\r\n# Here we use two data sets: one for training and one for evaluation\r\n# We have to tell the function how many batches\r\n# of data (num_epochs) we want and how big each batch should be.\r\nx_train = np.array([1., 2., 3., 4.])\r\ny_train = np.array([0., -1., -2., -3.])\r\nx_eval = np.array([2., 5., 8., 1.])\r\ny_eval = np.array([-1.01, -4.1, -7, 0.])\r\ninput_fn = tf.contrib.learn.io.numpy_input_fn({\"x\":x_train}, y_train,\r\n                                              batch_size=4,\r\n                                              num_epochs=1000)\r\neval_input_fn = tf.contrib.learn.io.numpy_input_fn(\r\n    {\"x\":x_eval}, y_eval, batch_size=4, num_epochs=1000)\r\n\r\n# We can invoke 1000 training steps by invoking the  method and passing the\r\n# training data set.\r\nestimator.fit(input_fn=input_fn, steps=1000)\r\n# Here we evaluate how well our model did.\r\ntrain_loss = estimator.evaluate(input_fn=input_fn)\r\n\r\neval_loss = estimator.evaluate(input_fn=eval_input_fn)\r\n\r\nprint \"train loss: %r\"% train_loss\r\nprint \"eval loss: %r\"% eval_loss\r\n```\r\n\r\n### Logs\r\n```\r\nWARNING:tensorflow:Using temporary folder as model directory: /var/folders/1l/v82bx7_s5zvf7z8wlgjz4j_06gd09g/T/tmpQRR2VF\r\nWARNING:tensorflow:From /Users/admin/Library/Python/2.7/lib/python/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:625: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\r\nInstructions for updating:\r\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\r\n2017-06-29 16:53:02.952908: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-06-29 16:53:02.952925: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-06-29 16:53:02.952930: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-06-29 16:53:02.952934: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\r\nWARNING:tensorflow:From /Users/admin/Library/Python/2.7/lib/python/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:625: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\r\nInstructions for updating:\r\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\r\nWARNING:tensorflow:From /Users/admin/Library/Python/2.7/lib/python/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:625: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\r\nInstructions for updating:\r\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\r\ntrain metrics: {'loss': 9.803332e-07, 'global_step': 1000}\r\neval metrics: {'loss': 0.0026192721, 'global_step': 1000}\r\n```\r\n"}