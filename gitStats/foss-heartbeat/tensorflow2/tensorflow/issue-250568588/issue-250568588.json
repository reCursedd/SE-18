{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12322", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12322/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12322/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12322/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12322", "id": 250568588, "node_id": "MDU6SXNzdWUyNTA1Njg1ODg=", "number": 12322, "title": "Single Image Inference in Tensorflow [Python]", "user": {"login": "kmonachopoulos", "id": 3832904, "node_id": "MDQ6VXNlcjM4MzI5MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3832904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmonachopoulos", "html_url": "https://github.com/kmonachopoulos", "followers_url": "https://api.github.com/users/kmonachopoulos/followers", "following_url": "https://api.github.com/users/kmonachopoulos/following{/other_user}", "gists_url": "https://api.github.com/users/kmonachopoulos/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmonachopoulos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmonachopoulos/subscriptions", "organizations_url": "https://api.github.com/users/kmonachopoulos/orgs", "repos_url": "https://api.github.com/users/kmonachopoulos/repos", "events_url": "https://api.github.com/users/kmonachopoulos/events{/privacy}", "received_events_url": "https://api.github.com/users/kmonachopoulos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-16T09:43:03Z", "updated_at": "2017-08-17T19:39:42Z", "closed_at": "2017-08-17T19:39:42Z", "author_association": "NONE", "body_html": "<p>I have already converted a pre-trained .ckpt file to .pb file freezing the model and saving the weighs as well. What I am trying to do now is to make a simple inference using that .pb file and extract and save output image. The model is a (Fully Convolutional Network for Semantic Segmentation) downloaded from here : <a href=\"https://github.com/MarvinTeichmann/KittiSeg\">https://github.com/MarvinTeichmann/KittiSeg</a> . So far I have managed to, load the image, set the default tf graph and import the graph defined by the model on that, read the input and the output tensors and run the session (error here).</p>\n<pre><code>import tensorflow as tf\nimport os\nimport numpy as np\nfrom tensorflow.python.platform import gfile\nfrom PIL import Image\n\n# Read the image &amp; get statstics\nimg=Image.open('/path-to-image/demoImage.png')\nimg.show()\nwidth, height = img.size\nprint(width)\nprint(height)\n\n#Plot the image\n#image.show()\n\nwith tf.Graph().as_default() as graph:\n\n        with tf.Session() as sess:\n\n                # Load the graph in graph_def\n                print(\"load graph\")\n\n                # We load the protobuf file from the disk and parse it to retrive the unserialized graph_drf\n                with gfile.FastGFile(\"/path-to-FCN-model/FCN8.pb\",'rb') as f:\n\n                                #Set default graph as current graph\n                                graph_def = tf.GraphDef()\n                                graph_def.ParseFromString(f.read())\n                                #sess.graph.as_default() #new line\n\n                                # Import a graph_def into the current default Graph\n                                tf.import_graph_def(graph_def, name='')\n\n                                # Print the name of operations in the session\n                                #for op in sess.graph.get_operations():\n\n                                    #print \"Operation Name :\",op.name            # Operation name\n                                    #print \"Tensor Stats :\",str(op.values())     # Tensor name\n\n                                # INFERENCE Here\n                                l_input = graph.get_tensor_by_name('Placeholder:0')\n                                l_output = graph.get_tensor_by_name('save/Assign_38:0')\n\n                                print \"l_input\", l_input\n                                print \"l_output\", l_output\n                                print\n                                print\n\n                                # Acceptable feed values include Python scalars, strings, lists, numpy ndarrays, or TensorHandles.                              \n                                result = sess.run(l_output, feed_dict={l_input : img}) #   &lt;= error here\n                                print(results)\n\n                                print(\"Inference done\")\n\n\n                                # Info\n                                # First Tensor name : Placeholder:0\n                                # Last tensor name  : save/Assign_38:0\"\n</code></pre>\n<p>Why inference of a single image in tensorflow is so complicated?</p>", "body_text": "I have already converted a pre-trained .ckpt file to .pb file freezing the model and saving the weighs as well. What I am trying to do now is to make a simple inference using that .pb file and extract and save output image. The model is a (Fully Convolutional Network for Semantic Segmentation) downloaded from here : https://github.com/MarvinTeichmann/KittiSeg . So far I have managed to, load the image, set the default tf graph and import the graph defined by the model on that, read the input and the output tensors and run the session (error here).\nimport tensorflow as tf\nimport os\nimport numpy as np\nfrom tensorflow.python.platform import gfile\nfrom PIL import Image\n\n# Read the image & get statstics\nimg=Image.open('/path-to-image/demoImage.png')\nimg.show()\nwidth, height = img.size\nprint(width)\nprint(height)\n\n#Plot the image\n#image.show()\n\nwith tf.Graph().as_default() as graph:\n\n        with tf.Session() as sess:\n\n                # Load the graph in graph_def\n                print(\"load graph\")\n\n                # We load the protobuf file from the disk and parse it to retrive the unserialized graph_drf\n                with gfile.FastGFile(\"/path-to-FCN-model/FCN8.pb\",'rb') as f:\n\n                                #Set default graph as current graph\n                                graph_def = tf.GraphDef()\n                                graph_def.ParseFromString(f.read())\n                                #sess.graph.as_default() #new line\n\n                                # Import a graph_def into the current default Graph\n                                tf.import_graph_def(graph_def, name='')\n\n                                # Print the name of operations in the session\n                                #for op in sess.graph.get_operations():\n\n                                    #print \"Operation Name :\",op.name            # Operation name\n                                    #print \"Tensor Stats :\",str(op.values())     # Tensor name\n\n                                # INFERENCE Here\n                                l_input = graph.get_tensor_by_name('Placeholder:0')\n                                l_output = graph.get_tensor_by_name('save/Assign_38:0')\n\n                                print \"l_input\", l_input\n                                print \"l_output\", l_output\n                                print\n                                print\n\n                                # Acceptable feed values include Python scalars, strings, lists, numpy ndarrays, or TensorHandles.                              \n                                result = sess.run(l_output, feed_dict={l_input : img}) #   <= error here\n                                print(results)\n\n                                print(\"Inference done\")\n\n\n                                # Info\n                                # First Tensor name : Placeholder:0\n                                # Last tensor name  : save/Assign_38:0\"\n\nWhy inference of a single image in tensorflow is so complicated?", "body": "I have already converted a pre-trained .ckpt file to .pb file freezing the model and saving the weighs as well. What I am trying to do now is to make a simple inference using that .pb file and extract and save output image. The model is a (Fully Convolutional Network for Semantic Segmentation) downloaded from here : https://github.com/MarvinTeichmann/KittiSeg . So far I have managed to, load the image, set the default tf graph and import the graph defined by the model on that, read the input and the output tensors and run the session (error here).\r\n\r\n```\r\nimport tensorflow as tf\r\nimport os\r\nimport numpy as np\r\nfrom tensorflow.python.platform import gfile\r\nfrom PIL import Image\r\n\r\n# Read the image & get statstics\r\nimg=Image.open('/path-to-image/demoImage.png')\r\nimg.show()\r\nwidth, height = img.size\r\nprint(width)\r\nprint(height)\r\n\r\n#Plot the image\r\n#image.show()\r\n\r\nwith tf.Graph().as_default() as graph:\r\n\r\n        with tf.Session() as sess:\r\n\r\n                # Load the graph in graph_def\r\n                print(\"load graph\")\r\n\r\n                # We load the protobuf file from the disk and parse it to retrive the unserialized graph_drf\r\n                with gfile.FastGFile(\"/path-to-FCN-model/FCN8.pb\",'rb') as f:\r\n\r\n                                #Set default graph as current graph\r\n                                graph_def = tf.GraphDef()\r\n                                graph_def.ParseFromString(f.read())\r\n                                #sess.graph.as_default() #new line\r\n\r\n                                # Import a graph_def into the current default Graph\r\n                                tf.import_graph_def(graph_def, name='')\r\n\r\n                                # Print the name of operations in the session\r\n                                #for op in sess.graph.get_operations():\r\n\r\n                                    #print \"Operation Name :\",op.name            # Operation name\r\n                                    #print \"Tensor Stats :\",str(op.values())     # Tensor name\r\n\r\n                                # INFERENCE Here\r\n                                l_input = graph.get_tensor_by_name('Placeholder:0')\r\n                                l_output = graph.get_tensor_by_name('save/Assign_38:0')\r\n\r\n                                print \"l_input\", l_input\r\n                                print \"l_output\", l_output\r\n                                print\r\n                                print\r\n\r\n                                # Acceptable feed values include Python scalars, strings, lists, numpy ndarrays, or TensorHandles.                              \r\n                                result = sess.run(l_output, feed_dict={l_input : img}) #   <= error here\r\n                                print(results)\r\n\r\n                                print(\"Inference done\")\r\n\r\n\r\n                                # Info\r\n                                # First Tensor name : Placeholder:0\r\n                                # Last tensor name  : save/Assign_38:0\"\r\n```\r\n\r\nWhy inference of a single image in tensorflow is so complicated?\r\n"}