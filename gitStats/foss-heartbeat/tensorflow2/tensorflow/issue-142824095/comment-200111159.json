{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/200111159", "html_url": "https://github.com/tensorflow/tensorflow/issues/1588#issuecomment-200111159", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1588", "id": 200111159, "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDExMTE1OQ==", "user": {"login": "eriophora", "id": 6423093, "node_id": "MDQ6VXNlcjY0MjMwOTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6423093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eriophora", "html_url": "https://github.com/eriophora", "followers_url": "https://api.github.com/users/eriophora/followers", "following_url": "https://api.github.com/users/eriophora/following{/other_user}", "gists_url": "https://api.github.com/users/eriophora/gists{/gist_id}", "starred_url": "https://api.github.com/users/eriophora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eriophora/subscriptions", "organizations_url": "https://api.github.com/users/eriophora/orgs", "repos_url": "https://api.github.com/users/eriophora/repos", "events_url": "https://api.github.com/users/eriophora/events{/privacy}", "received_events_url": "https://api.github.com/users/eriophora/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-23T01:25:00Z", "updated_at": "2016-03-23T01:33:27Z", "author_association": "NONE", "body_html": "<p>To expand on this, I'd like to be able to construct a (ultimately dense, but this is irrelevant) subtensor from a  much larger, sparse tensor that's far too large to fit into memory. In numpy, this is something like having:</p>\n<pre><code>x = np.array(range(16)).reshape(4, 4)\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n</code></pre>\n<p>And wanting to extract the subtensor formed by the 2nd (i.e., index 1) and 4th row with the 2nd and 3rd column:</p>\n<pre><code>x[[[1],[3]],[1,2]]\narray([[ 5,  6],\n       [13, 14]])\n</code></pre>\n<p>Ultimately, the batches of the network I'm training will rely on such fixed-size subtensors randomly constructed from the larger tensor. However, at present the only way of doing this currently appears to be manually feeding the subtensors in from Scipy.</p>", "body_text": "To expand on this, I'd like to be able to construct a (ultimately dense, but this is irrelevant) subtensor from a  much larger, sparse tensor that's far too large to fit into memory. In numpy, this is something like having:\nx = np.array(range(16)).reshape(4, 4)\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n\nAnd wanting to extract the subtensor formed by the 2nd (i.e., index 1) and 4th row with the 2nd and 3rd column:\nx[[[1],[3]],[1,2]]\narray([[ 5,  6],\n       [13, 14]])\n\nUltimately, the batches of the network I'm training will rely on such fixed-size subtensors randomly constructed from the larger tensor. However, at present the only way of doing this currently appears to be manually feeding the subtensors in from Scipy.", "body": "To expand on this, I'd like to be able to construct a (ultimately dense, but this is irrelevant) subtensor from a  much larger, sparse tensor that's far too large to fit into memory. In numpy, this is something like having:\n\n```\nx = np.array(range(16)).reshape(4, 4)\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]])\n```\n\nAnd wanting to extract the subtensor formed by the 2nd (i.e., index 1) and 4th row with the 2nd and 3rd column:\n\n```\nx[[[1],[3]],[1,2]]\narray([[ 5,  6],\n       [13, 14]])\n```\n\nUltimately, the batches of the network I'm training will rely on such fixed-size subtensors randomly constructed from the larger tensor. However, at present the only way of doing this currently appears to be manually feeding the subtensors in from Scipy.\n"}