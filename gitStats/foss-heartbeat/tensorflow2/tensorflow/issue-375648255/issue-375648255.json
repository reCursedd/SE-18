{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23384", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23384/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23384/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23384/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23384", "id": 375648255, "node_id": "MDU6SXNzdWUzNzU2NDgyNTU=", "number": 23384, "title": "TensorFlow Lite Interpreter get_tensor() ", "user": {"login": "raymond-li", "id": 5355290, "node_id": "MDQ6VXNlcjUzNTUyOTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5355290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raymond-li", "html_url": "https://github.com/raymond-li", "followers_url": "https://api.github.com/users/raymond-li/followers", "following_url": "https://api.github.com/users/raymond-li/following{/other_user}", "gists_url": "https://api.github.com/users/raymond-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/raymond-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raymond-li/subscriptions", "organizations_url": "https://api.github.com/users/raymond-li/orgs", "repos_url": "https://api.github.com/users/raymond-li/repos", "events_url": "https://api.github.com/users/raymond-li/events{/privacy}", "received_events_url": "https://api.github.com/users/raymond-li/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750616506, "node_id": "MDU6TGFiZWw3NTA2MTY1MDY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:lite", "name": "comp:lite", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "gargn", "id": 1900612, "node_id": "MDQ6VXNlcjE5MDA2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1900612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gargn", "html_url": "https://github.com/gargn", "followers_url": "https://api.github.com/users/gargn/followers", "following_url": "https://api.github.com/users/gargn/following{/other_user}", "gists_url": "https://api.github.com/users/gargn/gists{/gist_id}", "starred_url": "https://api.github.com/users/gargn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gargn/subscriptions", "organizations_url": "https://api.github.com/users/gargn/orgs", "repos_url": "https://api.github.com/users/gargn/repos", "events_url": "https://api.github.com/users/gargn/events{/privacy}", "received_events_url": "https://api.github.com/users/gargn/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gargn", "id": 1900612, "node_id": "MDQ6VXNlcjE5MDA2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1900612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gargn", "html_url": "https://github.com/gargn", "followers_url": "https://api.github.com/users/gargn/followers", "following_url": "https://api.github.com/users/gargn/following{/other_user}", "gists_url": "https://api.github.com/users/gargn/gists{/gist_id}", "starred_url": "https://api.github.com/users/gargn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gargn/subscriptions", "organizations_url": "https://api.github.com/users/gargn/orgs", "repos_url": "https://api.github.com/users/gargn/repos", "events_url": "https://api.github.com/users/gargn/events{/privacy}", "received_events_url": "https://api.github.com/users/gargn/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-30T19:07:32Z", "updated_at": "2018-11-20T07:43:33Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: CentOS Linux release 7.5.1804 (Core)</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: Nightly 1.13.0-dev20181029</li>\n<li><strong>Python version</strong>: 3.6.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: Run the <em>label_image_tflite.py</em> script attached with <em>gray128.jpg</em>, <em>inception_v3-l1a-zero-bias-zero-weights.tflite</em>, <em>labels.txt</em>, and <em>layer_outputs_gray128_f32_b0w0/</em> in the same directory</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When trying to write out tensors to file using the TensorFlow Lite Interpreter::get_tensor() function, mostly incorrect data is being returned. For the attached input, <em>gray128.jpg</em>, an image with all pixels set to RGB(128, 128, 128), I expect the layer outputs to be fairly repetitive, but it is not.</p>\n<p>To further narrow down the issue, I modified the bias and weight tensors for the first layer to 0.0. After convolution and activation, I would expect the output tensor to be completely 0's, but it is not. The output is consistent across runs (deterministic). The input, output, bias, and weight tensors all seem to be written out correctly, but most of the intermediate output tensors do not seem to be.</p>\n<p>I am doing this to try and verify the intermediate outputs with my own calculations. I was hoping to get inception verified with floating point, then with the uint8 quantized model, then with my own model.</p>\n<h3>Source code / logs</h3>\n<p>Attached is:</p>\n<ul>\n<li><em>label_image_tflite.py</em></li>\n<li><em>inception_v3-l1a-zero-bias-zero-weights.tflite</em></li>\n<li><em>labels.txt</em></li>\n<li><em>gray128.jpg</em></li>\n</ul>\n<p>Just run the script (<code>python3 label_image_tflite.py</code>) in the same directory as the other files and a subdirectory, <em>layer_outputs_gray128_f32_b0w0/</em> .</p>\n<p>You can see in <em>layer_outputs_gray128_f32_b0w0/6_tensor.txt</em> that the output is not zero and doesn't appear to be repetitive despite the gray uniform input.</p>\n<p>The label_image script was modified from the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/label_image/label_image.py\">TensorFlow Lite example</a>. The modified portion:</p>\n<div class=\"highlight highlight-source-python\"><pre>.\n.\n.\n  interpreter.set_tensor(input_details[<span class=\"pl-c1\">0</span>][<span class=\"pl-s\"><span class=\"pl-pds\">'</span>index<span class=\"pl-pds\">'</span></span>], input_data)\n  interpreter.invoke()\n\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> BEGIN Custom code to write out all tensors to files in a subdirectory</span>\n  ind <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n  <span class=\"pl-k\">try</span>:\n    <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n      dets <span class=\"pl-k\">=</span> interpreter._get_tensor_details(ind)\n      tens <span class=\"pl-k\">=</span> interpreter.get_tensor(ind)\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Expects subdirectory to exist</span>\n      f_dets <span class=\"pl-k\">=</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>layer_outputs_gray128_f32_b0w0/<span class=\"pl-c1\">{}</span>_details_<span class=\"pl-c1\">{}</span>.txt<span class=\"pl-pds\">\"</span></span>.format(ind, dets[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>].replace(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>-<span class=\"pl-pds\">'</span></span>)), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>w<span class=\"pl-pds\">\"</span></span>)\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Write details</span>\n      f_dets.write(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensor[<span class=\"pl-c1\">{}</span>]: <span class=\"pl-c1\">{}</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>.format(ind, dets))\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Write tensor data</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Output tensors (Relu's) are giving incorrect values</span>\n      tens.tofile(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>layer_outputs_gray128_f32_b0w0/<span class=\"pl-c1\">{}</span>_tensor.txt<span class=\"pl-pds\">\"</span></span>.format(ind), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>)\n      ind <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">1</span>\n      f_dets.close()\n  <span class=\"pl-k\">except</span>:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Finished writing tensor data<span class=\"pl-pds\">\"</span></span>)\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> END custom code</span>\n\n  output_data <span class=\"pl-k\">=</span> interpreter.get_tensor(output_details[<span class=\"pl-c1\">0</span>][<span class=\"pl-s\"><span class=\"pl-pds\">'</span>index<span class=\"pl-pds\">'</span></span>])\n  results <span class=\"pl-k\">=</span> np.squeeze(output_data)\n.\n.\n.</pre></div>\n<p><a href=\"https://drive.google.com/open?id=1OhFLGVm9SVb9RnGxqw6gdePc12i5y1Nw\" rel=\"nofollow\">https://drive.google.com/open?id=1OhFLGVm9SVb9RnGxqw6gdePc12i5y1Nw</a> (84MB)</p>\n<p>If there is an alternate way I can inspect the intermediate outputs, that would be appreciated as well.</p>\n<p>Thanks!</p>\n<p>Edit: I suspect this issue is related: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"369031053\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/22891\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/22891/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/22891\">#22891</a></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): CentOS Linux release 7.5.1804 (Core)\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): Nightly 1.13.0-dev20181029\nPython version: 3.6.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: Run the label_image_tflite.py script attached with gray128.jpg, inception_v3-l1a-zero-bias-zero-weights.tflite, labels.txt, and layer_outputs_gray128_f32_b0w0/ in the same directory\n\nDescribe the problem\nWhen trying to write out tensors to file using the TensorFlow Lite Interpreter::get_tensor() function, mostly incorrect data is being returned. For the attached input, gray128.jpg, an image with all pixels set to RGB(128, 128, 128), I expect the layer outputs to be fairly repetitive, but it is not.\nTo further narrow down the issue, I modified the bias and weight tensors for the first layer to 0.0. After convolution and activation, I would expect the output tensor to be completely 0's, but it is not. The output is consistent across runs (deterministic). The input, output, bias, and weight tensors all seem to be written out correctly, but most of the intermediate output tensors do not seem to be.\nI am doing this to try and verify the intermediate outputs with my own calculations. I was hoping to get inception verified with floating point, then with the uint8 quantized model, then with my own model.\nSource code / logs\nAttached is:\n\nlabel_image_tflite.py\ninception_v3-l1a-zero-bias-zero-weights.tflite\nlabels.txt\ngray128.jpg\n\nJust run the script (python3 label_image_tflite.py) in the same directory as the other files and a subdirectory, layer_outputs_gray128_f32_b0w0/ .\nYou can see in layer_outputs_gray128_f32_b0w0/6_tensor.txt that the output is not zero and doesn't appear to be repetitive despite the gray uniform input.\nThe label_image script was modified from the TensorFlow Lite example. The modified portion:\n.\n.\n.\n  interpreter.set_tensor(input_details[0]['index'], input_data)\n  interpreter.invoke()\n\n  # BEGIN Custom code to write out all tensors to files in a subdirectory\n  ind = 0\n  try:\n    while True:\n      dets = interpreter._get_tensor_details(ind)\n      tens = interpreter.get_tensor(ind)\n      # Expects subdirectory to exist\n      f_dets = open(\"layer_outputs_gray128_f32_b0w0/{}_details_{}.txt\".format(ind, dets['name'].replace('/', '-')), \"w\")\n      # Write details\n      f_dets.write(\"tensor[{}]: {}\\n\".format(ind, dets))\n      # Write tensor data\n      # Output tensors (Relu's) are giving incorrect values\n      tens.tofile(\"layer_outputs_gray128_f32_b0w0/{}_tensor.txt\".format(ind), \",\")\n      ind += 1\n      f_dets.close()\n  except:\n    print(\"Finished writing tensor data\")\n  # END custom code\n\n  output_data = interpreter.get_tensor(output_details[0]['index'])\n  results = np.squeeze(output_data)\n.\n.\n.\nhttps://drive.google.com/open?id=1OhFLGVm9SVb9RnGxqw6gdePc12i5y1Nw (84MB)\nIf there is an alternate way I can inspect the intermediate outputs, that would be appreciated as well.\nThanks!\nEdit: I suspect this issue is related: #22891", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: CentOS Linux release 7.5.1804 (Core)\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: N/A\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: Nightly 1.13.0-dev20181029\r\n- **Python version**: 3.6.6\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: Run the _label_image_tflite.py_ script attached with _gray128.jpg_, _inception_v3-l1a-zero-bias-zero-weights.tflite_, _labels.txt_, and _layer_outputs_gray128_f32_b0w0/_ in the same directory\r\n\r\n### Describe the problem\r\nWhen trying to write out tensors to file using the TensorFlow Lite Interpreter::get_tensor() function, mostly incorrect data is being returned. For the attached input, _gray128.jpg_, an image with all pixels set to RGB(128, 128, 128), I expect the layer outputs to be fairly repetitive, but it is not.\r\n\r\nTo further narrow down the issue, I modified the bias and weight tensors for the first layer to 0.0. After convolution and activation, I would expect the output tensor to be completely 0's, but it is not. The output is consistent across runs (deterministic). The input, output, bias, and weight tensors all seem to be written out correctly, but most of the intermediate output tensors do not seem to be.\r\n\r\nI am doing this to try and verify the intermediate outputs with my own calculations. I was hoping to get inception verified with floating point, then with the uint8 quantized model, then with my own model.\r\n\r\n### Source code / logs\r\nAttached is:\r\n\r\n- _label_image_tflite.py_\r\n- _inception_v3-l1a-zero-bias-zero-weights.tflite_\r\n- _labels.txt_\r\n- _gray128.jpg_\r\n\r\nJust run the script (`python3 label_image_tflite.py`) in the same directory as the other files and a subdirectory, _layer_outputs_gray128_f32_b0w0/_ .\r\n\r\nYou can see in _layer_outputs_gray128_f32_b0w0/6_tensor.txt_ that the output is not zero and doesn't appear to be repetitive despite the gray uniform input.\r\n\r\nThe label_image script was modified from the [TensorFlow Lite example](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/label_image/label_image.py). The modified portion:\r\n```python\r\n.\r\n.\r\n.\r\n  interpreter.set_tensor(input_details[0]['index'], input_data)\r\n  interpreter.invoke()\r\n\r\n  # BEGIN Custom code to write out all tensors to files in a subdirectory\r\n  ind = 0\r\n  try:\r\n    while True:\r\n      dets = interpreter._get_tensor_details(ind)\r\n      tens = interpreter.get_tensor(ind)\r\n      # Expects subdirectory to exist\r\n      f_dets = open(\"layer_outputs_gray128_f32_b0w0/{}_details_{}.txt\".format(ind, dets['name'].replace('/', '-')), \"w\")\r\n      # Write details\r\n      f_dets.write(\"tensor[{}]: {}\\n\".format(ind, dets))\r\n      # Write tensor data\r\n      # Output tensors (Relu's) are giving incorrect values\r\n      tens.tofile(\"layer_outputs_gray128_f32_b0w0/{}_tensor.txt\".format(ind), \",\")\r\n      ind += 1\r\n      f_dets.close()\r\n  except:\r\n    print(\"Finished writing tensor data\")\r\n  # END custom code\r\n\r\n  output_data = interpreter.get_tensor(output_details[0]['index'])\r\n  results = np.squeeze(output_data)\r\n.\r\n.\r\n.\r\n```\r\n\r\nhttps://drive.google.com/open?id=1OhFLGVm9SVb9RnGxqw6gdePc12i5y1Nw (84MB)\r\n\r\nIf there is an alternate way I can inspect the intermediate outputs, that would be appreciated as well.\r\n\r\nThanks!\r\n\r\nEdit: I suspect this issue is related: #22891"}