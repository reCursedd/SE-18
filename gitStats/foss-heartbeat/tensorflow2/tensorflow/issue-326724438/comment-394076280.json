{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/394076280", "html_url": "https://github.com/tensorflow/tensorflow/issues/19570#issuecomment-394076280", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19570", "id": 394076280, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDA3NjI4MA==", "user": {"login": "jianlong-yuan", "id": 18137551, "node_id": "MDQ6VXNlcjE4MTM3NTUx", "avatar_url": "https://avatars0.githubusercontent.com/u/18137551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianlong-yuan", "html_url": "https://github.com/jianlong-yuan", "followers_url": "https://api.github.com/users/jianlong-yuan/followers", "following_url": "https://api.github.com/users/jianlong-yuan/following{/other_user}", "gists_url": "https://api.github.com/users/jianlong-yuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianlong-yuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianlong-yuan/subscriptions", "organizations_url": "https://api.github.com/users/jianlong-yuan/orgs", "repos_url": "https://api.github.com/users/jianlong-yuan/repos", "events_url": "https://api.github.com/users/jianlong-yuan/events{/privacy}", "received_events_url": "https://api.github.com/users/jianlong-yuan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-02T10:20:19Z", "updated_at": "2018-06-21T19:42:18Z", "author_association": "NONE", "body_html": "<pre><code>In [1]:\nimport numpy as np\nimport tensorflow as tf\nimport time\nimport matplotlib.pyplot as plt\n%matplotlib inline\nIn [2]:\nN = 5 * 500 * 500\nIn [3]:\nx = np.array(np.random.randn(N), dtype=np.float32)\npytorch ops\nIn [4]:\nimport torch\nIn [9]:\n%%timeit -o\nXt = torch.tensor(x).cuda()\ntorch.cuda.synchronize()\n1.36 ms \u00b1 48.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\nOut[9]:\n&lt;TimeitResult : 1.36 ms \u00b1 48.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)&gt;\nIn [10]:\npytorch = {}\nIn [11]:\ntorch_gputransfert = np.array(_.timings)\nIn [12]:\n%%timeit -o\nXt = torch.tensor(x).cuda()\ntorch.cumsum(Xt, 0)\ntorch.cuda.synchronize()\n1.44 ms \u00b1 11.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\nOut[12]:\n&lt;TimeitResult : 1.44 ms \u00b1 11.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)&gt;\nIn [13]:\npytorch['cumsum'] = np.array(_.timings) - torch_gputransfert\nIn [14]:\n%%timeit -o\nXt = torch.tensor(x).cuda()\ntorch.sort(Xt, 0)\ntorch.cuda.synchronize()\n5.21 ms \u00b1 75.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\nOut[14]:\n&lt;TimeitResult : 5.21 ms \u00b1 75.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)&gt;\nIn [15]:\npytorch['sort'] = np.array(_.timings) - torch_gputransfert\nTensorflow ops\nIn [16]:\nX = tf.placeholder(tf.float32, shape=(None,), name=None)\nY = tf.cumsum(X)\nZ = tf.nn.top_k(X, tf.shape(X)[0])\nA = tf.identity(X)\n\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth=True\n\nsess = tf.Session(config=config)\nIn [17]:\n%%timeit -o\nsess.run(A, feed_dict={X: x})\n1.59 ms \u00b1 44.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\nOut[17]:\n&lt;TimeitResult : 1.59 ms \u00b1 44.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)&gt;\nIn [18]:\ntensf = {}\nIn [19]:\ntf_gputransfert = np.array(_.timings)\nIn [20]:\n%%timeit -o\nsess.run(Y, feed_dict={X: x})\n330 ms \u00b1 1.36 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\nOut[20]:\n&lt;TimeitResult : 330 ms \u00b1 1.36 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)&gt;\nIn [21]:\ntensf['cumsum'] = np.array(_.timings) - tf_gputransfert\nIn [22]:\n%%timeit -o\nsess.run(Z, feed_dict={X: x})\n10.9 ms \u00b1 36.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\nOut[22]:\n&lt;TimeitResult : 10.9 ms \u00b1 36.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)&gt;\nIn [23]:\ntensf['sort'] = np.array(_.timings) - tf_gputransfert\nSummary\nIn [40]:\nr = 1/2\nx = np.arange(len(pytorch))\nfuns = pytorch.keys()\n\nplt.bar(x - r/4, [v.mean() for v in pytorch.values()], width=r/2, yerr=[v.std() for v in pytorch.values()], label='pytorch')\nplt.bar(x + r/4, [v.mean() for v in tensf.values()], width=r/2, yerr=[v.std() for v in tensf.values()], label='tensorflow')\nplt.legend()\nplt.gca().set_yscale('log')\nplt.xticks(x, funs);\nplt.ylabel('time (s)')\nplt.savefig('timings.svg')\nplt.title('timings ({} pixels)'.format(N))\nOut[40]:\nText(0.5,1,'timings (1250000 pixels)')\n</code></pre>", "body_text": "In [1]:\nimport numpy as np\nimport tensorflow as tf\nimport time\nimport matplotlib.pyplot as plt\n%matplotlib inline\nIn [2]:\nN = 5 * 500 * 500\nIn [3]:\nx = np.array(np.random.randn(N), dtype=np.float32)\npytorch ops\nIn [4]:\nimport torch\nIn [9]:\n%%timeit -o\nXt = torch.tensor(x).cuda()\ntorch.cuda.synchronize()\n1.36 ms \u00b1 48.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\nOut[9]:\n<TimeitResult : 1.36 ms \u00b1 48.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)>\nIn [10]:\npytorch = {}\nIn [11]:\ntorch_gputransfert = np.array(_.timings)\nIn [12]:\n%%timeit -o\nXt = torch.tensor(x).cuda()\ntorch.cumsum(Xt, 0)\ntorch.cuda.synchronize()\n1.44 ms \u00b1 11.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\nOut[12]:\n<TimeitResult : 1.44 ms \u00b1 11.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)>\nIn [13]:\npytorch['cumsum'] = np.array(_.timings) - torch_gputransfert\nIn [14]:\n%%timeit -o\nXt = torch.tensor(x).cuda()\ntorch.sort(Xt, 0)\ntorch.cuda.synchronize()\n5.21 ms \u00b1 75.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\nOut[14]:\n<TimeitResult : 5.21 ms \u00b1 75.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)>\nIn [15]:\npytorch['sort'] = np.array(_.timings) - torch_gputransfert\nTensorflow ops\nIn [16]:\nX = tf.placeholder(tf.float32, shape=(None,), name=None)\nY = tf.cumsum(X)\nZ = tf.nn.top_k(X, tf.shape(X)[0])\nA = tf.identity(X)\n\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth=True\n\nsess = tf.Session(config=config)\nIn [17]:\n%%timeit -o\nsess.run(A, feed_dict={X: x})\n1.59 ms \u00b1 44.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\nOut[17]:\n<TimeitResult : 1.59 ms \u00b1 44.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)>\nIn [18]:\ntensf = {}\nIn [19]:\ntf_gputransfert = np.array(_.timings)\nIn [20]:\n%%timeit -o\nsess.run(Y, feed_dict={X: x})\n330 ms \u00b1 1.36 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\nOut[20]:\n<TimeitResult : 330 ms \u00b1 1.36 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)>\nIn [21]:\ntensf['cumsum'] = np.array(_.timings) - tf_gputransfert\nIn [22]:\n%%timeit -o\nsess.run(Z, feed_dict={X: x})\n10.9 ms \u00b1 36.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\nOut[22]:\n<TimeitResult : 10.9 ms \u00b1 36.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)>\nIn [23]:\ntensf['sort'] = np.array(_.timings) - tf_gputransfert\nSummary\nIn [40]:\nr = 1/2\nx = np.arange(len(pytorch))\nfuns = pytorch.keys()\n\nplt.bar(x - r/4, [v.mean() for v in pytorch.values()], width=r/2, yerr=[v.std() for v in pytorch.values()], label='pytorch')\nplt.bar(x + r/4, [v.mean() for v in tensf.values()], width=r/2, yerr=[v.std() for v in tensf.values()], label='tensorflow')\nplt.legend()\nplt.gca().set_yscale('log')\nplt.xticks(x, funs);\nplt.ylabel('time (s)')\nplt.savefig('timings.svg')\nplt.title('timings ({} pixels)'.format(N))\nOut[40]:\nText(0.5,1,'timings (1250000 pixels)')", "body": "```\r\nIn [1]:\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport time\r\nimport matplotlib.pyplot as plt\r\n%matplotlib inline\r\nIn [2]:\r\nN = 5 * 500 * 500\r\nIn [3]:\r\nx = np.array(np.random.randn(N), dtype=np.float32)\r\npytorch ops\r\nIn [4]:\r\nimport torch\r\nIn [9]:\r\n%%timeit -o\r\nXt = torch.tensor(x).cuda()\r\ntorch.cuda.synchronize()\r\n1.36 ms \u00b1 48.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\nOut[9]:\r\n<TimeitResult : 1.36 ms \u00b1 48.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)>\r\nIn [10]:\r\npytorch = {}\r\nIn [11]:\r\ntorch_gputransfert = np.array(_.timings)\r\nIn [12]:\r\n%%timeit -o\r\nXt = torch.tensor(x).cuda()\r\ntorch.cumsum(Xt, 0)\r\ntorch.cuda.synchronize()\r\n1.44 ms \u00b1 11.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\nOut[12]:\r\n<TimeitResult : 1.44 ms \u00b1 11.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)>\r\nIn [13]:\r\npytorch['cumsum'] = np.array(_.timings) - torch_gputransfert\r\nIn [14]:\r\n%%timeit -o\r\nXt = torch.tensor(x).cuda()\r\ntorch.sort(Xt, 0)\r\ntorch.cuda.synchronize()\r\n5.21 ms \u00b1 75.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\nOut[14]:\r\n<TimeitResult : 5.21 ms \u00b1 75.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)>\r\nIn [15]:\r\npytorch['sort'] = np.array(_.timings) - torch_gputransfert\r\nTensorflow ops\r\nIn [16]:\r\nX = tf.placeholder(tf.float32, shape=(None,), name=None)\r\nY = tf.cumsum(X)\r\nZ = tf.nn.top_k(X, tf.shape(X)[0])\r\nA = tf.identity(X)\r\n\r\nconfig = tf.ConfigProto()\r\nconfig.gpu_options.allow_growth=True\r\n\r\nsess = tf.Session(config=config)\r\nIn [17]:\r\n%%timeit -o\r\nsess.run(A, feed_dict={X: x})\r\n1.59 ms \u00b1 44.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\nOut[17]:\r\n<TimeitResult : 1.59 ms \u00b1 44.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)>\r\nIn [18]:\r\ntensf = {}\r\nIn [19]:\r\ntf_gputransfert = np.array(_.timings)\r\nIn [20]:\r\n%%timeit -o\r\nsess.run(Y, feed_dict={X: x})\r\n330 ms \u00b1 1.36 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\r\nOut[20]:\r\n<TimeitResult : 330 ms \u00b1 1.36 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)>\r\nIn [21]:\r\ntensf['cumsum'] = np.array(_.timings) - tf_gputransfert\r\nIn [22]:\r\n%%timeit -o\r\nsess.run(Z, feed_dict={X: x})\r\n10.9 ms \u00b1 36.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\nOut[22]:\r\n<TimeitResult : 10.9 ms \u00b1 36.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)>\r\nIn [23]:\r\ntensf['sort'] = np.array(_.timings) - tf_gputransfert\r\nSummary\r\nIn [40]:\r\nr = 1/2\r\nx = np.arange(len(pytorch))\r\nfuns = pytorch.keys()\r\n\r\nplt.bar(x - r/4, [v.mean() for v in pytorch.values()], width=r/2, yerr=[v.std() for v in pytorch.values()], label='pytorch')\r\nplt.bar(x + r/4, [v.mean() for v in tensf.values()], width=r/2, yerr=[v.std() for v in tensf.values()], label='tensorflow')\r\nplt.legend()\r\nplt.gca().set_yscale('log')\r\nplt.xticks(x, funs);\r\nplt.ylabel('time (s)')\r\nplt.savefig('timings.svg')\r\nplt.title('timings ({} pixels)'.format(N))\r\nOut[40]:\r\nText(0.5,1,'timings (1250000 pixels)')\r\n```"}