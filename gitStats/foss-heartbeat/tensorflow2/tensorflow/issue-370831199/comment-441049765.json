{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/441049765", "html_url": "https://github.com/tensorflow/tensorflow/issues/23030#issuecomment-441049765", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23030", "id": 441049765, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTA0OTc2NQ==", "user": {"login": "jdvylder", "id": 30600355, "node_id": "MDQ6VXNlcjMwNjAwMzU1", "avatar_url": "https://avatars1.githubusercontent.com/u/30600355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdvylder", "html_url": "https://github.com/jdvylder", "followers_url": "https://api.github.com/users/jdvylder/followers", "following_url": "https://api.github.com/users/jdvylder/following{/other_user}", "gists_url": "https://api.github.com/users/jdvylder/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdvylder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdvylder/subscriptions", "organizations_url": "https://api.github.com/users/jdvylder/orgs", "repos_url": "https://api.github.com/users/jdvylder/repos", "events_url": "https://api.github.com/users/jdvylder/events{/privacy}", "received_events_url": "https://api.github.com/users/jdvylder/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-22T14:39:38Z", "updated_at": "2018-11-22T14:39:38Z", "author_association": "NONE", "body_html": "<p>It also does not work when applying the l2 regularization with convolution layers:</p>\n<pre lang=\"Traceback\" data-meta=\"(most recent call last):\"><code>  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 129, in get_model_fn\n    self.configure_network(input_tensor=features, output_tensor=labels, mode=mode)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 86, in configure_network\n    self.network.construct_network(input_tensor=input_tensor, output_tensor=output_tensor, mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 91, in construct_network\n    self.construct_architecture(input_tensor=input_tensor,mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 54, in construct_architecture\n    conv1, pool1 = self.conv_conv_pool(input_tensor, [filter_size, filter_size], training, l2, name=1)\n  File \"/media/local/myfiles/mynetwork.py\", line 130, in conv_conv_pool\n    name=\"conv_{}\".format(i + 1))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py\", line 417, in conv2d\n    return layer.apply(inputs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 817, in apply\n    return self.__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\n    self.build(input_shapes)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/convolutional.py\", line 165, in build\n    dtype=self.dtype)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\n    self._handle_weight_regularization(name, variable, regularizer)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\n    self.add_loss(functools.partial(_loss_for_variable, variable))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\n    loss_tensor = regularizer()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\n    loss = loss()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\n    with ops.colocate_with(v):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError\n[name: \"/device:CPU:0\"\ndevice_type: \"CPU\"\nmemory_limit: 268435456\nlocality {\n}\nincarnation: 1546790882788519247\n, name: \"/device:XLA_CPU:0\"\ndevice_type: \"XLA_CPU\"\nmemory_limit: 17179869184\nlocality {\n}\nincarnation: 10996947278692380426\nphysical_device_desc: \"device: XLA_CPU device\"\n, name: \"/device:XLA_GPU:0\"\ndevice_type: \"XLA_GPU\"\nmemory_limit: 17179869184\nlocality {\n}\nincarnation: 9829494766080756018\nphysical_device_desc: \"device: XLA_GPU device\"\n, name: \"/device:GPU:0\"\ndevice_type: \"GPU\"\nmemory_limit: 15568473293\nlocality {\n  bus_id: 1\n  links {\n    link {\n      device_id: 1\n      type: \"StreamExecutor\"\n      strength: 1\n    }\n  }\n}\nincarnation: 10718015977797192246\nphysical_device_desc: \"device: 0, name: Tesla V100-SXM2-16GB, pci bus id: 0000:62:00.0, compute capability: 7.0\"\n, name: \"/device:GPU:1\"\ndevice_type: \"GPU\"\nmemory_limit: 15568473293\nlocality {\n  bus_id: 2\n  numa_node: 1\n  links {\n    link {\n      type: \"StreamExecutor\"\n      strength: 1\n    }\n  }\n}\nincarnation: 12456162273957908465\nphysical_device_desc: \"device: 1, name: Tesla V100-SXM2-16GB, pci bus id: 0000:89:00.0, compute capability: 7.0\"\n]\nTraceback (most recent call last):\n  File \"train.py\", line 37, in &lt;module&gt;\n    experimenter.run_training_experiment(config)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 40, in run_training_experiment\n    tf.estimator.train_and_evaluate(self.trainer, self.training_specs, self.eval_specs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 471, in train_and_evaluate\n    return executor.run()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 610, in run\n    return self.run_local()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 711, in run_local\n    saving_listeners=saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 354, in train\n    loss = self._train_model(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1205, in _train_model\n    return self._train_model_distributed(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1316, in _train_model_distributed\n    self.config)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/distribute.py\", line 721, in call_for_each_tower\n    return self._call_for_each_tower(fn, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 556, in _call_for_each_tower\n    return _call_for_each_tower(self, fn, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 183, in _call_for_each_tower\n    coord.join(threads)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 389, in join\n    six.reraise(*self._exc_info_to_raise)\n  File \"/usr/local/lib/python3.5/dist-packages/six.py\", line 693, in reraise\n    raise value\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 129, in get_model_fn\n    self.configure_network(input_tensor=features, output_tensor=labels, mode=mode)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 86, in configure_network\n    self.network.construct_network(input_tensor=input_tensor, output_tensor=output_tensor, mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 91, in construct_network\n    self.construct_architecture(input_tensor=input_tensor,mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 54, in construct_architecture\n    conv1, pool1 = self.conv_conv_pool(input_tensor, [filter_size, filter_size], training, l2, name=1)\n  File \"/media/local/myfiles/mynetwork.py\", line 130, in conv_conv_pool\n    name=\"conv_{}\".format(i + 1))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py\", line 417, in conv2d\n    return layer.apply(inputs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 817, in apply\n    return self.__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\n    self.build(input_shapes)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/convolutional.py\", line 165, in build\n    dtype=self.dtype)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\n    self._handle_weight_regularization(name, variable, regularizer)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\n    self.add_loss(functools.partial(_loss_for_variable, variable))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\n    loss_tensor = regularizer()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\n    loss = loss()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\n    with ops.colocate_with(v):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError```\n</code></pre>", "body_text": "It also does not work when applying the l2 regularization with convolution layers:\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 129, in get_model_fn\n    self.configure_network(input_tensor=features, output_tensor=labels, mode=mode)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 86, in configure_network\n    self.network.construct_network(input_tensor=input_tensor, output_tensor=output_tensor, mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 91, in construct_network\n    self.construct_architecture(input_tensor=input_tensor,mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 54, in construct_architecture\n    conv1, pool1 = self.conv_conv_pool(input_tensor, [filter_size, filter_size], training, l2, name=1)\n  File \"/media/local/myfiles/mynetwork.py\", line 130, in conv_conv_pool\n    name=\"conv_{}\".format(i + 1))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py\", line 417, in conv2d\n    return layer.apply(inputs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 817, in apply\n    return self.__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\n    self.build(input_shapes)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/convolutional.py\", line 165, in build\n    dtype=self.dtype)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\n    self._handle_weight_regularization(name, variable, regularizer)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\n    self.add_loss(functools.partial(_loss_for_variable, variable))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\n    loss_tensor = regularizer()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\n    loss = loss()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\n    with ops.colocate_with(v):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError\n[name: \"/device:CPU:0\"\ndevice_type: \"CPU\"\nmemory_limit: 268435456\nlocality {\n}\nincarnation: 1546790882788519247\n, name: \"/device:XLA_CPU:0\"\ndevice_type: \"XLA_CPU\"\nmemory_limit: 17179869184\nlocality {\n}\nincarnation: 10996947278692380426\nphysical_device_desc: \"device: XLA_CPU device\"\n, name: \"/device:XLA_GPU:0\"\ndevice_type: \"XLA_GPU\"\nmemory_limit: 17179869184\nlocality {\n}\nincarnation: 9829494766080756018\nphysical_device_desc: \"device: XLA_GPU device\"\n, name: \"/device:GPU:0\"\ndevice_type: \"GPU\"\nmemory_limit: 15568473293\nlocality {\n  bus_id: 1\n  links {\n    link {\n      device_id: 1\n      type: \"StreamExecutor\"\n      strength: 1\n    }\n  }\n}\nincarnation: 10718015977797192246\nphysical_device_desc: \"device: 0, name: Tesla V100-SXM2-16GB, pci bus id: 0000:62:00.0, compute capability: 7.0\"\n, name: \"/device:GPU:1\"\ndevice_type: \"GPU\"\nmemory_limit: 15568473293\nlocality {\n  bus_id: 2\n  numa_node: 1\n  links {\n    link {\n      type: \"StreamExecutor\"\n      strength: 1\n    }\n  }\n}\nincarnation: 12456162273957908465\nphysical_device_desc: \"device: 1, name: Tesla V100-SXM2-16GB, pci bus id: 0000:89:00.0, compute capability: 7.0\"\n]\nTraceback (most recent call last):\n  File \"train.py\", line 37, in <module>\n    experimenter.run_training_experiment(config)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 40, in run_training_experiment\n    tf.estimator.train_and_evaluate(self.trainer, self.training_specs, self.eval_specs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 471, in train_and_evaluate\n    return executor.run()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 610, in run\n    return self.run_local()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 711, in run_local\n    saving_listeners=saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 354, in train\n    loss = self._train_model(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1205, in _train_model\n    return self._train_model_distributed(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1316, in _train_model_distributed\n    self.config)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/distribute.py\", line 721, in call_for_each_tower\n    return self._call_for_each_tower(fn, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 556, in _call_for_each_tower\n    return _call_for_each_tower(self, fn, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 183, in _call_for_each_tower\n    coord.join(threads)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 389, in join\n    six.reraise(*self._exc_info_to_raise)\n  File \"/usr/local/lib/python3.5/dist-packages/six.py\", line 693, in reraise\n    raise value\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 129, in get_model_fn\n    self.configure_network(input_tensor=features, output_tensor=labels, mode=mode)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 86, in configure_network\n    self.network.construct_network(input_tensor=input_tensor, output_tensor=output_tensor, mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 91, in construct_network\n    self.construct_architecture(input_tensor=input_tensor,mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 54, in construct_architecture\n    conv1, pool1 = self.conv_conv_pool(input_tensor, [filter_size, filter_size], training, l2, name=1)\n  File \"/media/local/myfiles/mynetwork.py\", line 130, in conv_conv_pool\n    name=\"conv_{}\".format(i + 1))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py\", line 417, in conv2d\n    return layer.apply(inputs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 817, in apply\n    return self.__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\n    self.build(input_shapes)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/convolutional.py\", line 165, in build\n    dtype=self.dtype)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\n    self._handle_weight_regularization(name, variable, regularizer)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\n    self.add_loss(functools.partial(_loss_for_variable, variable))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\n    loss_tensor = regularizer()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\n    loss = loss()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\n    with ops.colocate_with(v):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError```", "body": "It also does not work when applying the l2 regularization with convolution layers: \r\n```Traceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\r\n    yield\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\r\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\r\n    model_fn_results = self._model_fn(features=features, **kwargs)\r\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 129, in get_model_fn\r\n    self.configure_network(input_tensor=features, output_tensor=labels, mode=mode)\r\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 86, in configure_network\r\n    self.network.construct_network(input_tensor=input_tensor, output_tensor=output_tensor, mode=mode)\r\n  File \"/media/local/myfiles/mynetwork.py\", line 91, in construct_network\r\n    self.construct_architecture(input_tensor=input_tensor,mode=mode)\r\n  File \"/media/local/myfiles/mynetwork.py\", line 54, in construct_architecture\r\n    conv1, pool1 = self.conv_conv_pool(input_tensor, [filter_size, filter_size], training, l2, name=1)\r\n  File \"/media/local/myfiles/mynetwork.py\", line 130, in conv_conv_pool\r\n    name=\"conv_{}\".format(i + 1))\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py\", line 417, in conv2d\r\n    return layer.apply(inputs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 817, in apply\r\n    return self.__call__(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\r\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\r\n    self.build(input_shapes)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/convolutional.py\", line 165, in build\r\n    dtype=self.dtype)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\r\n    self._handle_weight_regularization(name, variable, regularizer)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\r\n    self.add_loss(functools.partial(_loss_for_variable, variable))\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\r\n    loss_tensor = regularizer()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\r\n    loss = loss()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\r\n    with ops.colocate_with(v):\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\r\n    return next(self.gen)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\r\n    with self.colocate_with(op, ignore_existing):\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\r\n    return next(self.gen)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\r\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\r\n    value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\r\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\r\n    assert not as_ref\r\nAssertionError\r\n[name: \"/device:CPU:0\"\r\ndevice_type: \"CPU\"\r\nmemory_limit: 268435456\r\nlocality {\r\n}\r\nincarnation: 1546790882788519247\r\n, name: \"/device:XLA_CPU:0\"\r\ndevice_type: \"XLA_CPU\"\r\nmemory_limit: 17179869184\r\nlocality {\r\n}\r\nincarnation: 10996947278692380426\r\nphysical_device_desc: \"device: XLA_CPU device\"\r\n, name: \"/device:XLA_GPU:0\"\r\ndevice_type: \"XLA_GPU\"\r\nmemory_limit: 17179869184\r\nlocality {\r\n}\r\nincarnation: 9829494766080756018\r\nphysical_device_desc: \"device: XLA_GPU device\"\r\n, name: \"/device:GPU:0\"\r\ndevice_type: \"GPU\"\r\nmemory_limit: 15568473293\r\nlocality {\r\n  bus_id: 1\r\n  links {\r\n    link {\r\n      device_id: 1\r\n      type: \"StreamExecutor\"\r\n      strength: 1\r\n    }\r\n  }\r\n}\r\nincarnation: 10718015977797192246\r\nphysical_device_desc: \"device: 0, name: Tesla V100-SXM2-16GB, pci bus id: 0000:62:00.0, compute capability: 7.0\"\r\n, name: \"/device:GPU:1\"\r\ndevice_type: \"GPU\"\r\nmemory_limit: 15568473293\r\nlocality {\r\n  bus_id: 2\r\n  numa_node: 1\r\n  links {\r\n    link {\r\n      type: \"StreamExecutor\"\r\n      strength: 1\r\n    }\r\n  }\r\n}\r\nincarnation: 12456162273957908465\r\nphysical_device_desc: \"device: 1, name: Tesla V100-SXM2-16GB, pci bus id: 0000:89:00.0, compute capability: 7.0\"\r\n]\r\nTraceback (most recent call last):\r\n  File \"train.py\", line 37, in <module>\r\n    experimenter.run_training_experiment(config)\r\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 40, in run_training_experiment\r\n    tf.estimator.train_and_evaluate(self.trainer, self.training_specs, self.eval_specs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 471, in train_and_evaluate\r\n    return executor.run()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 610, in run\r\n    return self.run_local()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 711, in run_local\r\n    saving_listeners=saving_listeners)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 354, in train\r\n    loss = self._train_model(input_fn, hooks, saving_listeners)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1205, in _train_model\r\n    return self._train_model_distributed(input_fn, hooks, saving_listeners)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1316, in _train_model_distributed\r\n    self.config)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/distribute.py\", line 721, in call_for_each_tower\r\n    return self._call_for_each_tower(fn, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 556, in _call_for_each_tower\r\n    return _call_for_each_tower(self, fn, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 183, in _call_for_each_tower\r\n    coord.join(threads)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 389, in join\r\n    six.reraise(*self._exc_info_to_raise)\r\n  File \"/usr/local/lib/python3.5/dist-packages/six.py\", line 693, in reraise\r\n    raise value\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\r\n    yield\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\r\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\r\n    model_fn_results = self._model_fn(features=features, **kwargs)\r\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 129, in get_model_fn\r\n    self.configure_network(input_tensor=features, output_tensor=labels, mode=mode)\r\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 86, in configure_network\r\n    self.network.construct_network(input_tensor=input_tensor, output_tensor=output_tensor, mode=mode)\r\n  File \"/media/local/myfiles/mynetwork.py\", line 91, in construct_network\r\n    self.construct_architecture(input_tensor=input_tensor,mode=mode)\r\n  File \"/media/local/myfiles/mynetwork.py\", line 54, in construct_architecture\r\n    conv1, pool1 = self.conv_conv_pool(input_tensor, [filter_size, filter_size], training, l2, name=1)\r\n  File \"/media/local/myfiles/mynetwork.py\", line 130, in conv_conv_pool\r\n    name=\"conv_{}\".format(i + 1))\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py\", line 417, in conv2d\r\n    return layer.apply(inputs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 817, in apply\r\n    return self.__call__(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\r\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\r\n    self.build(input_shapes)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/convolutional.py\", line 165, in build\r\n    dtype=self.dtype)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\r\n    self._handle_weight_regularization(name, variable, regularizer)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\r\n    self.add_loss(functools.partial(_loss_for_variable, variable))\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\r\n    loss_tensor = regularizer()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\r\n    loss = loss()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\r\n    with ops.colocate_with(v):\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\r\n    return next(self.gen)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\r\n    with self.colocate_with(op, ignore_existing):\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\r\n    return next(self.gen)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\r\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\r\n    value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\r\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\r\n    assert not as_ref\r\nAssertionError```"}