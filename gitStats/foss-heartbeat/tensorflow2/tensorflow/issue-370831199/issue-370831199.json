{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23030", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23030/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23030/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23030/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23030", "id": 370831199, "node_id": "MDU6SXNzdWUzNzA4MzExOTk=", "number": 23030, "title": "Error using kernel_regularizer with tf.layers.Dense and tf.contrib.distribute.MirroredStrategy TF v1.12.0rc0 regression", "user": {"login": "Matt-Hicks-Bose", "id": 38144321, "node_id": "MDQ6VXNlcjM4MTQ0MzIx", "avatar_url": "https://avatars3.githubusercontent.com/u/38144321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matt-Hicks-Bose", "html_url": "https://github.com/Matt-Hicks-Bose", "followers_url": "https://api.github.com/users/Matt-Hicks-Bose/followers", "following_url": "https://api.github.com/users/Matt-Hicks-Bose/following{/other_user}", "gists_url": "https://api.github.com/users/Matt-Hicks-Bose/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matt-Hicks-Bose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matt-Hicks-Bose/subscriptions", "organizations_url": "https://api.github.com/users/Matt-Hicks-Bose/orgs", "repos_url": "https://api.github.com/users/Matt-Hicks-Bose/repos", "events_url": "https://api.github.com/users/Matt-Hicks-Bose/events{/privacy}", "received_events_url": "https://api.github.com/users/Matt-Hicks-Bose/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 996845227, "node_id": "MDU6TGFiZWw5OTY4NDUyMjc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:dist-strat", "name": "comp:dist-strat", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "anj-s", "id": 32556631, "node_id": "MDQ6VXNlcjMyNTU2NjMx", "avatar_url": "https://avatars1.githubusercontent.com/u/32556631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anj-s", "html_url": "https://github.com/anj-s", "followers_url": "https://api.github.com/users/anj-s/followers", "following_url": "https://api.github.com/users/anj-s/following{/other_user}", "gists_url": "https://api.github.com/users/anj-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/anj-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anj-s/subscriptions", "organizations_url": "https://api.github.com/users/anj-s/orgs", "repos_url": "https://api.github.com/users/anj-s/repos", "events_url": "https://api.github.com/users/anj-s/events{/privacy}", "received_events_url": "https://api.github.com/users/anj-s/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "anj-s", "id": 32556631, "node_id": "MDQ6VXNlcjMyNTU2NjMx", "avatar_url": "https://avatars1.githubusercontent.com/u/32556631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anj-s", "html_url": "https://github.com/anj-s", "followers_url": "https://api.github.com/users/anj-s/followers", "following_url": "https://api.github.com/users/anj-s/following{/other_user}", "gists_url": "https://api.github.com/users/anj-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/anj-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anj-s/subscriptions", "organizations_url": "https://api.github.com/users/anj-s/orgs", "repos_url": "https://api.github.com/users/anj-s/repos", "events_url": "https://api.github.com/users/anj-s/events{/privacy}", "received_events_url": "https://api.github.com/users/anj-s/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-16T22:51:50Z", "updated_at": "2018-11-22T14:39:38Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: ('v1.12.0-rc0-0-g1a6dea36de', '1.12.0-rc0')</li>\n<li><strong>Python version</strong>: 2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0.176/7.2.1.38</li>\n<li><strong>GPU model and memory</strong>: Nvidia V100 16GB</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Attempting to use a <code>tf.contrib.layers.l2_regularizer</code> for the <code>kernel_regularizer</code> param of <code>tf.layers.Dense</code> causes an <code>AssertionError</code> when using with <code>tf.contrib.distribute.MirroredStrategy</code> under Tensorflow v1.12.0rc0, but not under Tensorflow v1.11.0. This also occurs with several other layers including <code>tf.layers.dense</code> and <code>tf.layers.conv2d</code>.</p>\n<h3>Source code / logs</h3>\n<p>Source of test.py:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c1\">DO_L2_REG</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\n\ntf.logging.set_verbosity(tf.logging.<span class=\"pl-c1\">INFO</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">model_fn</span>(<span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">mode</span>):\n    regularizer <span class=\"pl-k\">=</span> tf.contrib.layers.l2_regularizer(<span class=\"pl-c1\">0.001</span>) <span class=\"pl-k\">if</span> <span class=\"pl-c1\">DO_L2_REG</span> <span class=\"pl-k\">else</span> <span class=\"pl-c1\">None</span>\n    layer <span class=\"pl-k\">=</span> tf.layers.Dense(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>regularizer)\n    logits <span class=\"pl-k\">=</span> layer(features)\n\n    <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> tf.estimator.ModeKeys.<span class=\"pl-c1\">PREDICT</span>:\n        predictions <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>logits<span class=\"pl-pds\">\"</span></span>: logits}\n        <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(mode, <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>predictions)\n\n    loss <span class=\"pl-k\">=</span> tf.losses.mean_squared_error(\n        <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>labels, <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>tf.reshape(logits, []))\n\n    loss <span class=\"pl-k\">+=</span> tf.losses.get_regularization_loss()\n\n    <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> tf.estimator.ModeKeys.<span class=\"pl-c1\">EVAL</span>:\n        <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(mode, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss)\n\n    <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> tf.estimator.ModeKeys.<span class=\"pl-c1\">TRAIN</span>:\n        train_op <span class=\"pl-k\">=</span> tf.train.GradientDescentOptimizer(<span class=\"pl-c1\">0.2</span>).minimize(loss, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>tf.train.get_global_step())<span class=\"pl-c\"><span class=\"pl-c\">#</span>loss_fn())</span>\n        <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(mode, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss, <span class=\"pl-v\">train_op</span><span class=\"pl-k\">=</span>train_op)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">input_fn</span>():\n    features <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensors([[<span class=\"pl-c1\">1</span>.]]).repeat()\n    labels <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensors(<span class=\"pl-c1\">1</span>.).repeat()\n    <span class=\"pl-k\">return</span> tf.data.Dataset.zip((features, labels))\n\ndistribution <span class=\"pl-k\">=</span> tf.contrib.distribute.MirroredStrategy()\nconfig <span class=\"pl-k\">=</span> tf.estimator.RunConfig(<span class=\"pl-v\">train_distribute</span><span class=\"pl-k\">=</span>distribution)\nclassifier <span class=\"pl-k\">=</span> tf.estimator.Estimator(<span class=\"pl-v\">model_fn</span><span class=\"pl-k\">=</span>model_fn, <span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config, <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>out_test<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>********* start train **********<span class=\"pl-pds\">'</span></span>)\nclassifier.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>********* end train/start eval **********<span class=\"pl-pds\">'</span></span>)\nclassifier.evaluate(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>********* end eval **********<span class=\"pl-pds\">'</span></span>)</pre></div>\n<h3>Results of testing this code with different version of Tensorflow and <code>DO_L2_REG</code> values:</h3>\n<ul>\n<li>Calling this with Tensorflow v1.11.0 with <code>DO_L2_REG</code> set to either <code>True</code> or <code>False</code> works as expected, both training and evaluation run successfully.</li>\n<li>Calling this with Tensorflow v1.12.0rc0 with <code>DO_L2_REG</code> set to <code>False</code> works as expected, both training and evaluation run successfully.</li>\n<li>Calling this with Tensorflow v1.12.0rc0 with <code>DO_L2_REG</code> set to <code>True</code> results in the following error when the <code>classifier.train</code> is called:</li>\n</ul>\n<pre><code>INFO:tensorflow:Calling model_fn.\nINFO:tensorflow:Error reported to Coordinator:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"test.py\", line 10, in model_fn\n    logits = layer(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\n    self.build(input_shapes)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/layers/core.py\", line 944, in build\n    trainable=True)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\n    self._handle_weight_regularization(name, variable, regularizer)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\n    self.add_loss(functools.partial(_loss_for_variable, variable))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\n    loss_tensor = regularizer()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\n    loss = loss()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\n    with ops.colocate_with(v):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError\nTraceback (most recent call last):\n  File \"test.py\", line 35, in &lt;module&gt;\n    classifier.train(input_fn=input_fn, steps=1000)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 354, in train\n    loss = self._train_model(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1205, in _train_model\n    return self._train_model_distributed(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1316, in _train_model_distributed\n    self.config)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/distribute.py\", line 721, in call_for_each_tower\n    return self._call_for_each_tower(fn, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 556, in _call_for_each_tower\n    return _call_for_each_tower(self, fn, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 183, in _call_for_each_tower\n    coord.join(threads)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py\", line 389, in join\n    six.reraise(*self._exc_info_to_raise)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"test.py\", line 10, in model_fn\n    logits = layer(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\n    self.build(input_shapes)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/layers/core.py\", line 944, in build\n    trainable=True)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\n    self._handle_weight_regularization(name, variable, regularizer)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\n    self.add_loss(functools.partial(_loss_for_variable, variable))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\n    loss_tensor = regularizer()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\n    loss = loss()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\n    with ops.colocate_with(v):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): ('v1.12.0-rc0-0-g1a6dea36de', '1.12.0-rc0')\nPython version: 2.7.12\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: 9.0.176/7.2.1.38\nGPU model and memory: Nvidia V100 16GB\nExact command to reproduce: See below\n\nDescribe the problem\nAttempting to use a tf.contrib.layers.l2_regularizer for the kernel_regularizer param of tf.layers.Dense causes an AssertionError when using with tf.contrib.distribute.MirroredStrategy under Tensorflow v1.12.0rc0, but not under Tensorflow v1.11.0. This also occurs with several other layers including tf.layers.dense and tf.layers.conv2d.\nSource code / logs\nSource of test.py:\nimport tensorflow as tf\n\nDO_L2_REG = False\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\ndef model_fn(features, labels, mode):\n    regularizer = tf.contrib.layers.l2_regularizer(0.001) if DO_L2_REG else None\n    layer = tf.layers.Dense(1, kernel_regularizer=regularizer)\n    logits = layer(features)\n\n    if mode == tf.estimator.ModeKeys.PREDICT:\n        predictions = {\"logits\": logits}\n        return tf.estimator.EstimatorSpec(mode, predictions=predictions)\n\n    loss = tf.losses.mean_squared_error(\n        labels=labels, predictions=tf.reshape(logits, []))\n\n    loss += tf.losses.get_regularization_loss()\n\n    if mode == tf.estimator.ModeKeys.EVAL:\n        return tf.estimator.EstimatorSpec(mode, loss=loss)\n\n    if mode == tf.estimator.ModeKeys.TRAIN:\n        train_op = tf.train.GradientDescentOptimizer(0.2).minimize(loss, global_step=tf.train.get_global_step())#loss_fn())\n        return tf.estimator.EstimatorSpec(mode, loss=loss, train_op=train_op)\n\ndef input_fn():\n    features = tf.data.Dataset.from_tensors([[1.]]).repeat()\n    labels = tf.data.Dataset.from_tensors(1.).repeat()\n    return tf.data.Dataset.zip((features, labels))\n\ndistribution = tf.contrib.distribute.MirroredStrategy()\nconfig = tf.estimator.RunConfig(train_distribute=distribution)\nclassifier = tf.estimator.Estimator(model_fn=model_fn, config=config, model_dir='out_test')\nprint('********* start train **********')\nclassifier.train(input_fn=input_fn, steps=1000)\nprint('********* end train/start eval **********')\nclassifier.evaluate(input_fn=input_fn, steps=1000)\nprint('********* end eval **********')\nResults of testing this code with different version of Tensorflow and DO_L2_REG values:\n\nCalling this with Tensorflow v1.11.0 with DO_L2_REG set to either True or False works as expected, both training and evaluation run successfully.\nCalling this with Tensorflow v1.12.0rc0 with DO_L2_REG set to False works as expected, both training and evaluation run successfully.\nCalling this with Tensorflow v1.12.0rc0 with DO_L2_REG set to True results in the following error when the classifier.train is called:\n\nINFO:tensorflow:Calling model_fn.\nINFO:tensorflow:Error reported to Coordinator:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"test.py\", line 10, in model_fn\n    logits = layer(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\n    self.build(input_shapes)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/layers/core.py\", line 944, in build\n    trainable=True)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\n    self._handle_weight_regularization(name, variable, regularizer)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\n    self.add_loss(functools.partial(_loss_for_variable, variable))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\n    loss_tensor = regularizer()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\n    loss = loss()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\n    with ops.colocate_with(v):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError\nTraceback (most recent call last):\n  File \"test.py\", line 35, in <module>\n    classifier.train(input_fn=input_fn, steps=1000)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 354, in train\n    loss = self._train_model(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1205, in _train_model\n    return self._train_model_distributed(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1316, in _train_model_distributed\n    self.config)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/distribute.py\", line 721, in call_for_each_tower\n    return self._call_for_each_tower(fn, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 556, in _call_for_each_tower\n    return _call_for_each_tower(self, fn, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 183, in _call_for_each_tower\n    coord.join(threads)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py\", line 389, in join\n    six.reraise(*self._exc_info_to_raise)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"test.py\", line 10, in model_fn\n    logits = layer(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\n    self.build(input_shapes)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/layers/core.py\", line 944, in build\n    trainable=True)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\n    self._handle_weight_regularization(name, variable, regularizer)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\n    self.add_loss(functools.partial(_loss_for_variable, variable))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\n    loss_tensor = regularizer()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\n    loss = loss()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\n    with ops.colocate_with(v):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: N/A\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: ('v1.12.0-rc0-0-g1a6dea36de', '1.12.0-rc0')\r\n- **Python version**: 2.7.12\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: 9.0.176/7.2.1.38\r\n- **GPU model and memory**: Nvidia V100 16GB\r\n- **Exact command to reproduce**: See below\r\n\r\n### Describe the problem\r\nAttempting to use a `tf.contrib.layers.l2_regularizer` for the `kernel_regularizer` param of `tf.layers.Dense` causes an `AssertionError` when using with `tf.contrib.distribute.MirroredStrategy` under Tensorflow v1.12.0rc0, but not under Tensorflow v1.11.0. This also occurs with several other layers including `tf.layers.dense` and `tf.layers.conv2d`.\r\n\r\n### Source code / logs\r\nSource of test.py:\r\n```python\r\nimport tensorflow as tf\r\n\r\nDO_L2_REG = False\r\n\r\ntf.logging.set_verbosity(tf.logging.INFO)\r\n\r\ndef model_fn(features, labels, mode):\r\n    regularizer = tf.contrib.layers.l2_regularizer(0.001) if DO_L2_REG else None\r\n    layer = tf.layers.Dense(1, kernel_regularizer=regularizer)\r\n    logits = layer(features)\r\n\r\n    if mode == tf.estimator.ModeKeys.PREDICT:\r\n        predictions = {\"logits\": logits}\r\n        return tf.estimator.EstimatorSpec(mode, predictions=predictions)\r\n\r\n    loss = tf.losses.mean_squared_error(\r\n        labels=labels, predictions=tf.reshape(logits, []))\r\n\r\n    loss += tf.losses.get_regularization_loss()\r\n\r\n    if mode == tf.estimator.ModeKeys.EVAL:\r\n        return tf.estimator.EstimatorSpec(mode, loss=loss)\r\n\r\n    if mode == tf.estimator.ModeKeys.TRAIN:\r\n        train_op = tf.train.GradientDescentOptimizer(0.2).minimize(loss, global_step=tf.train.get_global_step())#loss_fn())\r\n        return tf.estimator.EstimatorSpec(mode, loss=loss, train_op=train_op)\r\n\r\ndef input_fn():\r\n    features = tf.data.Dataset.from_tensors([[1.]]).repeat()\r\n    labels = tf.data.Dataset.from_tensors(1.).repeat()\r\n    return tf.data.Dataset.zip((features, labels))\r\n\r\ndistribution = tf.contrib.distribute.MirroredStrategy()\r\nconfig = tf.estimator.RunConfig(train_distribute=distribution)\r\nclassifier = tf.estimator.Estimator(model_fn=model_fn, config=config, model_dir='out_test')\r\nprint('********* start train **********')\r\nclassifier.train(input_fn=input_fn, steps=1000)\r\nprint('********* end train/start eval **********')\r\nclassifier.evaluate(input_fn=input_fn, steps=1000)\r\nprint('********* end eval **********')\r\n```\r\n\r\n### Results of testing this code with different version of Tensorflow and `DO_L2_REG` values:\r\n* Calling this with Tensorflow v1.11.0 with `DO_L2_REG` set to either `True` or `False` works as expected, both training and evaluation run successfully.\r\n* Calling this with Tensorflow v1.12.0rc0 with `DO_L2_REG` set to `False` works as expected, both training and evaluation run successfully.\r\n* Calling this with Tensorflow v1.12.0rc0 with `DO_L2_REG` set to `True` results in the following error when the `classifier.train` is called:\r\n```\r\nINFO:tensorflow:Calling model_fn.\r\nINFO:tensorflow:Error reported to Coordinator:\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\r\n    yield\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\r\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\r\n    model_fn_results = self._model_fn(features=features, **kwargs)\r\n  File \"test.py\", line 10, in model_fn\r\n    logits = layer(features)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\r\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\r\n    self.build(input_shapes)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/layers/core.py\", line 944, in build\r\n    trainable=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\r\n    self._handle_weight_regularization(name, variable, regularizer)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\r\n    self.add_loss(functools.partial(_loss_for_variable, variable))\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\r\n    loss_tensor = regularizer()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\r\n    loss = loss()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\r\n    with ops.colocate_with(v):\r\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\r\n    return self.gen.next()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\r\n    with self.colocate_with(op, ignore_existing):\r\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\r\n    return self.gen.next()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\r\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\r\n    value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\r\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\r\n    assert not as_ref\r\nAssertionError\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 35, in <module>\r\n    classifier.train(input_fn=input_fn, steps=1000)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 354, in train\r\n    loss = self._train_model(input_fn, hooks, saving_listeners)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1205, in _train_model\r\n    return self._train_model_distributed(input_fn, hooks, saving_listeners)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1316, in _train_model_distributed\r\n    self.config)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/distribute.py\", line 721, in call_for_each_tower\r\n    return self._call_for_each_tower(fn, *args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 556, in _call_for_each_tower\r\n    return _call_for_each_tower(self, fn, *args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 183, in _call_for_each_tower\r\n    coord.join(threads)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py\", line 389, in join\r\n    six.reraise(*self._exc_info_to_raise)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\r\n    yield\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 795, in run\r\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/estimator/estimator.py\", line 1195, in _call_model_fn\r\n    model_fn_results = self._model_fn(features=features, **kwargs)\r\n  File \"test.py\", line 10, in model_fn\r\n    logits = layer(features)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 374, in __call__\r\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 746, in __call__\r\n    self.build(input_shapes)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/layers/core.py\", line 944, in build\r\n    trainable=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 293, in add_weight\r\n    self._handle_weight_regularization(name, variable, regularizer)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 638, in _handle_weight_regularization\r\n    self.add_loss(functools.partial(_loss_for_variable, variable))\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 142, in add_loss\r\n    loss_tensor = regularizer()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 434, in _tag_unconditional\r\n    loss = loss()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 629, in _loss_for_variable\r\n    with ops.colocate_with(v):\r\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\r\n    return self.gen.next()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4094, in _colocate_with_for_gradient\r\n    with self.colocate_with(op, ignore_existing):\r\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\r\n    return self.gen.next()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 4146, in colocate_with\r\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1307, in internal_convert_to_tensor_or_indexed_slices\r\n    value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1146, in internal_convert_to_tensor\r\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 439, in _tensor_conversion_mirrored\r\n    assert not as_ref\r\nAssertionError\r\n```\r\n"}