{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/436120637", "html_url": "https://github.com/tensorflow/tensorflow/issues/120#issuecomment-436120637", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/120", "id": 436120637, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjEyMDYzNw==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-06T03:37:17Z", "updated_at": "2018-11-06T03:46:48Z", "author_association": "MEMBER", "body_html": "<p>RE: eager - There are two annoying things right now - the operator overloading for <code>+=</code> and the conversion from the Python <code>1</code> to a <code>Tensor</code>. Those need to be improved (CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=122911\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/akshaym\">@akshaym</a>), but in the mean time these trivial changes make a big improvement (number from my machine running 1.12.0):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> time <span class=\"pl-k\">import</span> time\n\ntf.enable_eager_execution()\nc <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">0</span>)\no <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1</span>)\n<span class=\"pl-k\">for</span> e <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">3</span>):\n    start <span class=\"pl-k\">=</span> time()\n    <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(<span class=\"pl-c1\">1000</span>):\n        c <span class=\"pl-k\">=</span> tf.add(c, o)\n    end <span class=\"pl-k\">=</span> time()\n    <span class=\"pl-c1\">print</span>(end<span class=\"pl-k\">-</span>start)</pre></div>\n<p>Results in:</p>\n<pre><code>0.00489807128906\n0.00518703460693\n0.00459504127502\n</code></pre>\n<p>And just for thrills, compiling into a graph (using <a href=\"https://www.tensorflow.org/api_docs/python/tf/contrib/eager/defun\" rel=\"nofollow\"><code>tf.contrib.eager.defun</code></a> right now, which will morph into <a href=\"https://github.com/tensorflow/community/pull/20\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/community/pull/20/hovercard\"><code>tf.function</code> in 2.0</a>):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-en\">@tf.contrib.eager.defun</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>(<span class=\"pl-smi\">c</span>):\n  o <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1</span>)\n  <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(<span class=\"pl-c1\">1000</span>):\n    c <span class=\"pl-k\">=</span> tf.add(c, <span class=\"pl-c1\">0</span>)\n  <span class=\"pl-k\">return</span> c\n\nc <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">0</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Discard the first run, since that includes graph building time</span>\n_ <span class=\"pl-k\">=</span> f(c)\n<span class=\"pl-k\">for</span> e <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">3</span>):\n  start <span class=\"pl-k\">=</span> time()\n  c <span class=\"pl-k\">=</span> f(c)\n  end <span class=\"pl-k\">=</span> time()\n  <span class=\"pl-c1\">print</span>(end <span class=\"pl-k\">-</span> start)</pre></div>\n<p>Results in:</p>\n<pre><code>0.00160002708435\n0.00185298919678\n0.00164079666138\n</code></pre>", "body_text": "RE: eager - There are two annoying things right now - the operator overloading for += and the conversion from the Python 1 to a Tensor. Those need to be improved (CC @akshaym), but in the mean time these trivial changes make a big improvement (number from my machine running 1.12.0):\nimport tensorflow as tf\nfrom time import time\n\ntf.enable_eager_execution()\nc = tf.constant(0)\no = tf.constant(1)\nfor e in range(3):\n    start = time()\n    for _ in xrange(1000):\n        c = tf.add(c, o)\n    end = time()\n    print(end-start)\nResults in:\n0.00489807128906\n0.00518703460693\n0.00459504127502\n\nAnd just for thrills, compiling into a graph (using tf.contrib.eager.defun right now, which will morph into tf.function in 2.0):\n@tf.contrib.eager.defun\ndef f(c):\n  o = tf.constant(1)\n  for _ in xrange(1000):\n    c = tf.add(c, 0)\n  return c\n\nc = tf.constant(0)\n# Discard the first run, since that includes graph building time\n_ = f(c)\nfor e in range(3):\n  start = time()\n  c = f(c)\n  end = time()\n  print(end - start)\nResults in:\n0.00160002708435\n0.00185298919678\n0.00164079666138", "body": "RE: eager - There are two annoying things right now - the operator overloading for `+=` and the conversion from the Python `1` to a `Tensor`. Those need to be improved (CC @akshaym), but in the mean time these trivial changes make a big improvement (number from my machine running 1.12.0):\r\n\r\n```python\r\nimport tensorflow as tf\r\nfrom time import time\r\n\r\ntf.enable_eager_execution()\r\nc = tf.constant(0)\r\no = tf.constant(1)\r\nfor e in range(3):\r\n    start = time()\r\n    for _ in xrange(1000):\r\n        c = tf.add(c, o)\r\n    end = time()\r\n    print(end-start)\r\n```\r\n\r\nResults in:\r\n\r\n```\r\n0.00489807128906\r\n0.00518703460693\r\n0.00459504127502\r\n```\r\n\r\nAnd just for thrills, compiling into a graph (using [`tf.contrib.eager.defun`](https://www.tensorflow.org/api_docs/python/tf/contrib/eager/defun) right now, which will morph into [`tf.function` in 2.0](https://github.com/tensorflow/community/pull/20)):\r\n\r\n```python\r\n@tf.contrib.eager.defun\r\ndef f(c):\r\n  o = tf.constant(1)\r\n  for _ in xrange(1000):\r\n    c = tf.add(c, 0)\r\n  return c\r\n\r\nc = tf.constant(0)\r\n# Discard the first run, since that includes graph building time\r\n_ = f(c)\r\nfor e in range(3):\r\n  start = time()\r\n  c = f(c)\r\n  end = time()\r\n  print(end - start)\r\n```\r\n\r\nResults in:\r\n\r\n```\r\n0.00160002708435\r\n0.00185298919678\r\n0.00164079666138\r\n```"}