{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/436108858", "html_url": "https://github.com/tensorflow/tensorflow/issues/120#issuecomment-436108858", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/120", "id": 436108858, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjEwODg1OA==", "user": {"login": "TimZaman", "id": 7721540, "node_id": "MDQ6VXNlcjc3MjE1NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7721540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimZaman", "html_url": "https://github.com/TimZaman", "followers_url": "https://api.github.com/users/TimZaman/followers", "following_url": "https://api.github.com/users/TimZaman/following{/other_user}", "gists_url": "https://api.github.com/users/TimZaman/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimZaman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimZaman/subscriptions", "organizations_url": "https://api.github.com/users/TimZaman/orgs", "repos_url": "https://api.github.com/users/TimZaman/repos", "events_url": "https://api.github.com/users/TimZaman/events{/privacy}", "received_events_url": "https://api.github.com/users/TimZaman/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-06T02:23:09Z", "updated_at": "2018-11-06T02:23:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ran some tests.. just a small improvement:</p>\n<h2>{cold, warm, warm} start:</h2>\n<pre><code>with tf.Graph().as_default():\n  c = tf.constant(0)\n  with tf.Session():\n    for e in range(3):\n      start = time()\n      for _ in xrange(1000):\n        _ = c.eval()\n      end = time()\n      print(end-start)\n</code></pre>\n<pre><code>&gt;&gt;&gt; 0.240370988846\n&gt;&gt;&gt; 0.179282188416\n&gt;&gt;&gt; 0.208700180054\n</code></pre>\n<h2>evaluating just the .op</h2>\n<p>makes it twice as fast (still meh).</p>\n<pre><code>with tf.Graph().as_default():\n  c = tf.constant(0)\n  with tf.Session() as sess:\n    for e in range(3):\n      start = time()\n      for _ in xrange(1000):\n        sess.run(c.op)\n      end = time()\n      print(end-start)\n</code></pre>\n<pre><code>&gt;&gt;&gt; 0.167293071747\n&gt;&gt;&gt; 0.106302022934\n&gt;&gt;&gt; 0.102854967117\n</code></pre>\n<h2>eager</h2>\n<p>Around 40k per second. The same code in torch is 300k/s, numpy 800k/s, python(int) 17M/s.</p>\n<pre><code>tf.enable_eager_execution()\nc = tf.constant(0)\nc = tf.convert_to_tensor(c)\nfor e in range(3):\n    start = time()\n    for _ in xrange(1000):\n        c += 1\n    end = time()\n    print(end-start)\n</code></pre>\n<pre><code>c= tf.Tensor(1000, shape=(), dtype=int32)\n0.0253150463104\nc= tf.Tensor(2000, shape=(), dtype=int32)\n0.0205891132355\nc= tf.Tensor(3000, shape=(), dtype=int32)\n0.0187749862671\n</code></pre>", "body_text": "Ran some tests.. just a small improvement:\n{cold, warm, warm} start:\nwith tf.Graph().as_default():\n  c = tf.constant(0)\n  with tf.Session():\n    for e in range(3):\n      start = time()\n      for _ in xrange(1000):\n        _ = c.eval()\n      end = time()\n      print(end-start)\n\n>>> 0.240370988846\n>>> 0.179282188416\n>>> 0.208700180054\n\nevaluating just the .op\nmakes it twice as fast (still meh).\nwith tf.Graph().as_default():\n  c = tf.constant(0)\n  with tf.Session() as sess:\n    for e in range(3):\n      start = time()\n      for _ in xrange(1000):\n        sess.run(c.op)\n      end = time()\n      print(end-start)\n\n>>> 0.167293071747\n>>> 0.106302022934\n>>> 0.102854967117\n\neager\nAround 40k per second. The same code in torch is 300k/s, numpy 800k/s, python(int) 17M/s.\ntf.enable_eager_execution()\nc = tf.constant(0)\nc = tf.convert_to_tensor(c)\nfor e in range(3):\n    start = time()\n    for _ in xrange(1000):\n        c += 1\n    end = time()\n    print(end-start)\n\nc= tf.Tensor(1000, shape=(), dtype=int32)\n0.0253150463104\nc= tf.Tensor(2000, shape=(), dtype=int32)\n0.0205891132355\nc= tf.Tensor(3000, shape=(), dtype=int32)\n0.0187749862671", "body": "Ran some tests.. just a small improvement:\r\n## {cold, warm, warm} start:\r\n```\r\nwith tf.Graph().as_default():\r\n  c = tf.constant(0)\r\n  with tf.Session():\r\n    for e in range(3):\r\n      start = time()\r\n      for _ in xrange(1000):\r\n        _ = c.eval()\r\n      end = time()\r\n      print(end-start)\r\n```\r\n```\r\n>>> 0.240370988846\r\n>>> 0.179282188416\r\n>>> 0.208700180054\r\n```\r\n\r\n## evaluating just the .op\r\nmakes it twice as fast (still meh).\r\n```\r\nwith tf.Graph().as_default():\r\n  c = tf.constant(0)\r\n  with tf.Session() as sess:\r\n    for e in range(3):\r\n      start = time()\r\n      for _ in xrange(1000):\r\n        sess.run(c.op)\r\n      end = time()\r\n      print(end-start)\r\n```\r\n```\r\n>>> 0.167293071747\r\n>>> 0.106302022934\r\n>>> 0.102854967117\r\n```\r\n\r\n## eager\r\nAround 40k per second. The same code in torch is 300k/s, numpy 800k/s, python(int) 17M/s.\r\n```\r\ntf.enable_eager_execution()\r\nc = tf.constant(0)\r\nc = tf.convert_to_tensor(c)\r\nfor e in range(3):\r\n    start = time()\r\n    for _ in xrange(1000):\r\n        c += 1\r\n    end = time()\r\n    print(end-start)\r\n```\r\n```\r\nc= tf.Tensor(1000, shape=(), dtype=int32)\r\n0.0253150463104\r\nc= tf.Tensor(2000, shape=(), dtype=int32)\r\n0.0205891132355\r\nc= tf.Tensor(3000, shape=(), dtype=int32)\r\n0.0187749862671\r\n```\r\n"}