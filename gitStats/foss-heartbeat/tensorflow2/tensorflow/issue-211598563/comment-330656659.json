{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/330656659", "html_url": "https://github.com/tensorflow/tensorflow/issues/8043#issuecomment-330656659", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8043", "id": 330656659, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDY1NjY1OQ==", "user": {"login": "brightbytes-dude", "id": 6979675, "node_id": "MDQ6VXNlcjY5Nzk2NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6979675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brightbytes-dude", "html_url": "https://github.com/brightbytes-dude", "followers_url": "https://api.github.com/users/brightbytes-dude/followers", "following_url": "https://api.github.com/users/brightbytes-dude/following{/other_user}", "gists_url": "https://api.github.com/users/brightbytes-dude/gists{/gist_id}", "starred_url": "https://api.github.com/users/brightbytes-dude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brightbytes-dude/subscriptions", "organizations_url": "https://api.github.com/users/brightbytes-dude/orgs", "repos_url": "https://api.github.com/users/brightbytes-dude/repos", "events_url": "https://api.github.com/users/brightbytes-dude/events{/privacy}", "received_events_url": "https://api.github.com/users/brightbytes-dude/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-19T20:01:39Z", "updated_at": "2017-09-19T20:01:39Z", "author_association": "NONE", "body_html": "<p>I tried that, though with <code>tf.contrib.learn.DNNClassifier</code> rather than <code>tf.estimator.DNNClassifier</code>. (I don't think it matters which I use because both the <code>weight_column_name</code> of the former and the <code>weight_column</code> of the latter expect the column referenced to be a feature column.)</p>\n<p>Specifically, if I:</p>\n<ol>\n<li>\n<p>Construct a <code>tf.contrib.learn.DNNClassifier</code>, and specify <code>weight_column_name</code> and include that column among the <code>feature_columns</code>.</p>\n</li>\n<li>\n<p>Call its <code>fit</code> method with an <code>input_fn</code> that includes the weight column among the feature_columns.</p>\n</li>\n<li>\n<p>Call its <code>evaluate</code> method with an <code>input_fn</code> that does <strong>not</strong> supply the weight column among the feature_columns.</p>\n</li>\n</ol>\n<p>... then <code>evaluate</code> crashes with an error that the weight column is missing.</p>\n<p>If, instead, I try this approach:</p>\n<ol>\n<li>\n<p>Construct a <code>tf.contrib.learn.DNNClassifier</code>, and specify <code>weight_column_name</code> and include that column among the <code>feature_columns</code>.</p>\n</li>\n<li>\n<p>Call its <code>fit</code> method with an <code>input_fn</code> that includes the weight column among the feature columns.</p>\n</li>\n<li>\n<p>Construct a new <code>tf.contrib.learn.DNNClassifier</code> that uses the same <code>model_dir</code> as the classifier created in step 1, but that does not specify the <code>weight_column_name</code> param and does not include the weight column among the <code>feature_columns</code>.</p>\n</li>\n<li>\n<p>Call the <code>evaluate</code> method of the new classifier with an <code>input_fn</code> that does <strong>not</strong> include the weight column among the feature columns.</p>\n</li>\n</ol>\n<p>... then it crashes, as I described in this <a href=\"https://stackoverflow.com/a/46249103/915989\" rel=\"nofollow\">StackOverflow</a> issue.</p>\n<p>It seems to me that the requirement that the class weights column be one of the model's feature columns renders this feature entirely useless for remedying class imbalance.</p>\n<p>(It's undoubtedly useful for other use cases; I'm just not currently interested in any of them.)  :-)  :-)</p>", "body_text": "I tried that, though with tf.contrib.learn.DNNClassifier rather than tf.estimator.DNNClassifier. (I don't think it matters which I use because both the weight_column_name of the former and the weight_column of the latter expect the column referenced to be a feature column.)\nSpecifically, if I:\n\n\nConstruct a tf.contrib.learn.DNNClassifier, and specify weight_column_name and include that column among the feature_columns.\n\n\nCall its fit method with an input_fn that includes the weight column among the feature_columns.\n\n\nCall its evaluate method with an input_fn that does not supply the weight column among the feature_columns.\n\n\n... then evaluate crashes with an error that the weight column is missing.\nIf, instead, I try this approach:\n\n\nConstruct a tf.contrib.learn.DNNClassifier, and specify weight_column_name and include that column among the feature_columns.\n\n\nCall its fit method with an input_fn that includes the weight column among the feature columns.\n\n\nConstruct a new tf.contrib.learn.DNNClassifier that uses the same model_dir as the classifier created in step 1, but that does not specify the weight_column_name param and does not include the weight column among the feature_columns.\n\n\nCall the evaluate method of the new classifier with an input_fn that does not include the weight column among the feature columns.\n\n\n... then it crashes, as I described in this StackOverflow issue.\nIt seems to me that the requirement that the class weights column be one of the model's feature columns renders this feature entirely useless for remedying class imbalance.\n(It's undoubtedly useful for other use cases; I'm just not currently interested in any of them.)  :-)  :-)", "body": "I tried that, though with `tf.contrib.learn.DNNClassifier` rather than `tf.estimator.DNNClassifier`. (I don't think it matters which I use because both the `weight_column_name` of the former and the `weight_column` of the latter expect the column referenced to be a feature column.)\r\n\r\nSpecifically, if I:\r\n\r\n1. Construct a `tf.contrib.learn.DNNClassifier`, and specify `weight_column_name` and include that column among the `feature_columns`.\r\n\r\n2. Call its `fit` method with an `input_fn` that includes the weight column among the feature_columns.\r\n\r\n3. Call its `evaluate` method with an `input_fn` that does **not** supply the weight column among the feature_columns.\r\n\r\n... then `evaluate` crashes with an error that the weight column is missing.\r\n\r\nIf, instead, I try this approach:\r\n\r\n1. Construct a `tf.contrib.learn.DNNClassifier`, and specify `weight_column_name` and include that column among the `feature_columns`.\r\n\r\n2. Call its `fit` method with an `input_fn` that includes the weight column among the feature columns.\r\n\r\n3. Construct a new `tf.contrib.learn.DNNClassifier` that uses the same `model_dir` as the classifier created in step 1, but that does not specify the `weight_column_name` param and does not include the weight column among the `feature_columns`.\r\n\r\n4. Call the `evaluate` method of the new classifier with an `input_fn` that does **not** include the weight column among the feature columns.\r\n\r\n... then it crashes, as I described in this [StackOverflow](https://stackoverflow.com/a/46249103/915989) issue.\r\n\r\nIt seems to me that the requirement that the class weights column be one of the model's feature columns renders this feature entirely useless for remedying class imbalance.\r\n\r\n(It's undoubtedly useful for other use cases; I'm just not currently interested in any of them.)  :-)  :-)"}