{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4209", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4209/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4209/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4209/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4209", "id": 175077515, "node_id": "MDU6SXNzdWUxNzUwNzc1MTU=", "number": 4209, "title": "tf.concat returns a list not Tensor, is it a bug?", "user": {"login": "lan2720", "id": 5330101, "node_id": "MDQ6VXNlcjUzMzAxMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5330101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lan2720", "html_url": "https://github.com/lan2720", "followers_url": "https://api.github.com/users/lan2720/followers", "following_url": "https://api.github.com/users/lan2720/following{/other_user}", "gists_url": "https://api.github.com/users/lan2720/gists{/gist_id}", "starred_url": "https://api.github.com/users/lan2720/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lan2720/subscriptions", "organizations_url": "https://api.github.com/users/lan2720/orgs", "repos_url": "https://api.github.com/users/lan2720/repos", "events_url": "https://api.github.com/users/lan2720/events{/privacy}", "received_events_url": "https://api.github.com/users/lan2720/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-05T13:59:35Z", "updated_at": "2016-09-06T10:29:21Z", "closed_at": "2016-09-06T10:29:21Z", "author_association": "NONE", "body_html": "<p>My code is below</p>\n<pre><code>from __future__ import print_function\nimport tensorflow as tf\nimport numpy as np\nimport shutil\nimport os\n\nclass Model(object):\n    def __init__(self, input_length, input_dim=10, filter_nums=[3,4,5], window_sizes=[2,3,4]):\n        self.filter_nums = filter_nums\n        self.window_sizes = window_sizes\n\n        # placeholder\n        self._inputs = tf.placeholder(tf.float32, shape=[None, input_dim,\n        input_length], name=\"inputs\")\n\n    def _conv2d(self, inputs, filter_num, window_size, init_scale=0.1, data_format=\"NHWC\", name=\"conv2d\"):\n        # Implement a conv2d for nlp task, which in_heigth = filter_height.\n        # assume inputs dim is 4.\n        with tf.variable_scope(name):\n            if data_format == \"NHWC\":\n                filter_height = int(inputs.get_shape()[1])\n            else:\n                filter_height = int(inputs.get_shape()[2])\n            in_channels = int(inputs.get_shape()[-1])\n            W = tf.get_variable(\"W\", shape=[filter_height, window_size,\n            in_channels, filter_num],\n            initializer=tf.random_uniform_initializer(-init_scale, init_scale))\n            conv = tf.nn.conv2d(inputs, W, [1,1,1,1], \"VALID\")\n            return conv\n\n    def _max_pool(self, value, name=\"max_pool\"):\n        with tf.variable_scope(name):\n            pool_width = int(value.get_shape()[-2])\n            maxpool = tf.nn.max_pool(value, [1,1,pool_width,1], [1,1,1,1], \"VALID\")\n            return maxpool\n\n    def multi_conv_pool(self):\n        pooled = []\n        expanded_inputs = tf.expand_dims(self._inputs, -1)\n        for filter_num, window_size in zip(self.filter_nums,\n        self.window_sizes):\n            conv = self._conv2d(expanded_inputs, filter_num, window_size,\n            name=\"conv2d_width_%d\" % window_size)\n            maxpool = self._max_pool(conv)\n            pooled.append(maxpool)\n        concat_pooled = tf.concat(3, pooled)\n        return concat_pooled\n\n    @property\n    def inputs(self):\n        return self._inputs\n\ndef main():\n    logdir = 'logdir'\n    if os.path.exists(logdir):\n        shutil.rmtree(logdir)\n\n    model = Model(input_length=9, input_dim=4)\n    concat_pooled = model.multi_conv_pool()\n\n    data = np.random.randn(3, 4, 9)\n\n    sess = tf.Session()\n\n    summary_writer = tf.train.SummaryWriter(logdir, graph=sess.graph)\n\n    sess.run(tf.initialize_all_variables())\n    outputs = sess.run([concat_pooled], feed_dict={model.inputs: data})\n    print(\"data(shape = (3, 4, 9)):\")\n    print(data)\n    print(\"after multi conv and pool, its output should be (3, 1, 1, 12):\")\n    print(outputs)\n    print(\"outputs' type:\", type(outputs))\n\nif __name__ == '__main__':\n    main()\n\n</code></pre>\n<p>Run it and gets a list. <code>outputs</code> here is the return value of tf.concat(). It should be an array but now it's a list. Could anyone tell me why? Thanks!</p>", "body_text": "My code is below\nfrom __future__ import print_function\nimport tensorflow as tf\nimport numpy as np\nimport shutil\nimport os\n\nclass Model(object):\n    def __init__(self, input_length, input_dim=10, filter_nums=[3,4,5], window_sizes=[2,3,4]):\n        self.filter_nums = filter_nums\n        self.window_sizes = window_sizes\n\n        # placeholder\n        self._inputs = tf.placeholder(tf.float32, shape=[None, input_dim,\n        input_length], name=\"inputs\")\n\n    def _conv2d(self, inputs, filter_num, window_size, init_scale=0.1, data_format=\"NHWC\", name=\"conv2d\"):\n        # Implement a conv2d for nlp task, which in_heigth = filter_height.\n        # assume inputs dim is 4.\n        with tf.variable_scope(name):\n            if data_format == \"NHWC\":\n                filter_height = int(inputs.get_shape()[1])\n            else:\n                filter_height = int(inputs.get_shape()[2])\n            in_channels = int(inputs.get_shape()[-1])\n            W = tf.get_variable(\"W\", shape=[filter_height, window_size,\n            in_channels, filter_num],\n            initializer=tf.random_uniform_initializer(-init_scale, init_scale))\n            conv = tf.nn.conv2d(inputs, W, [1,1,1,1], \"VALID\")\n            return conv\n\n    def _max_pool(self, value, name=\"max_pool\"):\n        with tf.variable_scope(name):\n            pool_width = int(value.get_shape()[-2])\n            maxpool = tf.nn.max_pool(value, [1,1,pool_width,1], [1,1,1,1], \"VALID\")\n            return maxpool\n\n    def multi_conv_pool(self):\n        pooled = []\n        expanded_inputs = tf.expand_dims(self._inputs, -1)\n        for filter_num, window_size in zip(self.filter_nums,\n        self.window_sizes):\n            conv = self._conv2d(expanded_inputs, filter_num, window_size,\n            name=\"conv2d_width_%d\" % window_size)\n            maxpool = self._max_pool(conv)\n            pooled.append(maxpool)\n        concat_pooled = tf.concat(3, pooled)\n        return concat_pooled\n\n    @property\n    def inputs(self):\n        return self._inputs\n\ndef main():\n    logdir = 'logdir'\n    if os.path.exists(logdir):\n        shutil.rmtree(logdir)\n\n    model = Model(input_length=9, input_dim=4)\n    concat_pooled = model.multi_conv_pool()\n\n    data = np.random.randn(3, 4, 9)\n\n    sess = tf.Session()\n\n    summary_writer = tf.train.SummaryWriter(logdir, graph=sess.graph)\n\n    sess.run(tf.initialize_all_variables())\n    outputs = sess.run([concat_pooled], feed_dict={model.inputs: data})\n    print(\"data(shape = (3, 4, 9)):\")\n    print(data)\n    print(\"after multi conv and pool, its output should be (3, 1, 1, 12):\")\n    print(outputs)\n    print(\"outputs' type:\", type(outputs))\n\nif __name__ == '__main__':\n    main()\n\n\nRun it and gets a list. outputs here is the return value of tf.concat(). It should be an array but now it's a list. Could anyone tell me why? Thanks!", "body": "My code is below\n\n```\nfrom __future__ import print_function\nimport tensorflow as tf\nimport numpy as np\nimport shutil\nimport os\n\nclass Model(object):\n    def __init__(self, input_length, input_dim=10, filter_nums=[3,4,5], window_sizes=[2,3,4]):\n        self.filter_nums = filter_nums\n        self.window_sizes = window_sizes\n\n        # placeholder\n        self._inputs = tf.placeholder(tf.float32, shape=[None, input_dim,\n        input_length], name=\"inputs\")\n\n    def _conv2d(self, inputs, filter_num, window_size, init_scale=0.1, data_format=\"NHWC\", name=\"conv2d\"):\n        # Implement a conv2d for nlp task, which in_heigth = filter_height.\n        # assume inputs dim is 4.\n        with tf.variable_scope(name):\n            if data_format == \"NHWC\":\n                filter_height = int(inputs.get_shape()[1])\n            else:\n                filter_height = int(inputs.get_shape()[2])\n            in_channels = int(inputs.get_shape()[-1])\n            W = tf.get_variable(\"W\", shape=[filter_height, window_size,\n            in_channels, filter_num],\n            initializer=tf.random_uniform_initializer(-init_scale, init_scale))\n            conv = tf.nn.conv2d(inputs, W, [1,1,1,1], \"VALID\")\n            return conv\n\n    def _max_pool(self, value, name=\"max_pool\"):\n        with tf.variable_scope(name):\n            pool_width = int(value.get_shape()[-2])\n            maxpool = tf.nn.max_pool(value, [1,1,pool_width,1], [1,1,1,1], \"VALID\")\n            return maxpool\n\n    def multi_conv_pool(self):\n        pooled = []\n        expanded_inputs = tf.expand_dims(self._inputs, -1)\n        for filter_num, window_size in zip(self.filter_nums,\n        self.window_sizes):\n            conv = self._conv2d(expanded_inputs, filter_num, window_size,\n            name=\"conv2d_width_%d\" % window_size)\n            maxpool = self._max_pool(conv)\n            pooled.append(maxpool)\n        concat_pooled = tf.concat(3, pooled)\n        return concat_pooled\n\n    @property\n    def inputs(self):\n        return self._inputs\n\ndef main():\n    logdir = 'logdir'\n    if os.path.exists(logdir):\n        shutil.rmtree(logdir)\n\n    model = Model(input_length=9, input_dim=4)\n    concat_pooled = model.multi_conv_pool()\n\n    data = np.random.randn(3, 4, 9)\n\n    sess = tf.Session()\n\n    summary_writer = tf.train.SummaryWriter(logdir, graph=sess.graph)\n\n    sess.run(tf.initialize_all_variables())\n    outputs = sess.run([concat_pooled], feed_dict={model.inputs: data})\n    print(\"data(shape = (3, 4, 9)):\")\n    print(data)\n    print(\"after multi conv and pool, its output should be (3, 1, 1, 12):\")\n    print(outputs)\n    print(\"outputs' type:\", type(outputs))\n\nif __name__ == '__main__':\n    main()\n\n```\n\nRun it and gets a list. `outputs` here is the return value of tf.concat(). It should be an array but now it's a list. Could anyone tell me why? Thanks!\n"}