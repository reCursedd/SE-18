{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/223529988", "pull_request_review_id": 162679548, "id": 223529988, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzUyOTk4OA==", "diff_hunk": "@@ -0,0 +1,232 @@\n+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Tests for the experimental input pipeline ops.\"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import os\n+import shutil\n+import tempfile\n+import time\n+\n+import numpy as np\n+\n+from tensorflow.python.client import session\n+from tensorflow.python.data.kernel_tests import test_base\n+from tensorflow.python.data.ops.dataset_ops import MatchingFilesDataset\n+from tensorflow.python.framework import errors\n+from tensorflow.python.framework import ops\n+from tensorflow.python.platform import test\n+from tensorflow.python.util import compat\n+\n+\n+class MatchingFilesDatasetTest(test_base.DatasetTestBase):\n+\n+  def setUp(self):\n+    self.tmp_dir = tempfile.mkdtemp()\n+\n+  def tearDown(self):\n+    shutil.rmtree(self.tmp_dir, ignore_errors=True)\n+\n+  def _touchTempFiles(self, filenames):\n+    for filename in filenames:\n+      open(os.path.join(self.tmp_dir, filename), 'a').close()\n+\n+  def testNonExistingDirectory(self):\n+    \"\"\"Test the MatchingFiles dataset with a non-existing directory\"\"\"\n+\n+    self.tearDown()\n+    dataset = MatchingFilesDataset(os.path.join(self.tmp_dir, '*'))\n+    with self.cached_session() as sess:\n+      next_element = dataset.make_one_shot_iterator().get_next()\n+      with self.assertRaises(errors.NotFoundError):", "path": "tensorflow/python/data/kernel_tests/matching_files_dataset_op_test.py", "position": 55, "original_position": 55, "commit_id": "0d5b9d20cc3e3062aa4d443bc772bb3aed698d15", "original_commit_id": "9be427e21141e1be47cfd30865b7e4c1f434ea86", "user": {"login": "jsimsa", "id": 1072079, "node_id": "MDQ6VXNlcjEwNzIwNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1072079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsimsa", "html_url": "https://github.com/jsimsa", "followers_url": "https://api.github.com/users/jsimsa/followers", "following_url": "https://api.github.com/users/jsimsa/following{/other_user}", "gists_url": "https://api.github.com/users/jsimsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsimsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsimsa/subscriptions", "organizations_url": "https://api.github.com/users/jsimsa/orgs", "repos_url": "https://api.github.com/users/jsimsa/repos", "events_url": "https://api.github.com/users/jsimsa/events{/privacy}", "received_events_url": "https://api.github.com/users/jsimsa/received_events", "type": "User", "site_admin": false}, "body": "If that's the case, I would not make the change I suggested because I think that we should return `NotFoundError` iff there is no match for any of the patterns.\r\n\r\nLooking at your code, I we currently return non-ok status when either `env()->GetFileSystemForFile` fails (line 216) or `fs->GetChildren` fails (line 236).\r\n\r\nI suggest you add temporary log statements that tells us what the returned status at these lines is which will likely help us identify the root cause of the failures.\r\n\r\nI think that you will ultimately need to treat `NotFoundError` differently from other non-ok statuses. For all non-ok status other that `NotFoundError` we should propagate this to the caller right away (as opposed to continue doing other work which can also result in an error that will be discarded). For `NotFoundError`, we should skip over these and only return `NotFoundError` to the caller if all patterns evaluated to an empty set of files.", "created_at": "2018-10-09T00:10:48Z", "updated_at": "2018-10-15T21:38:29Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22429#discussion_r223529988", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22429", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/223529988"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22429#discussion_r223529988"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22429"}}, "body_html": "<p>If that's the case, I would not make the change I suggested because I think that we should return <code>NotFoundError</code> iff there is no match for any of the patterns.</p>\n<p>Looking at your code, I we currently return non-ok status when either <code>env()-&gt;GetFileSystemForFile</code> fails (line 216) or <code>fs-&gt;GetChildren</code> fails (line 236).</p>\n<p>I suggest you add temporary log statements that tells us what the returned status at these lines is which will likely help us identify the root cause of the failures.</p>\n<p>I think that you will ultimately need to treat <code>NotFoundError</code> differently from other non-ok statuses. For all non-ok status other that <code>NotFoundError</code> we should propagate this to the caller right away (as opposed to continue doing other work which can also result in an error that will be discarded). For <code>NotFoundError</code>, we should skip over these and only return <code>NotFoundError</code> to the caller if all patterns evaluated to an empty set of files.</p>", "body_text": "If that's the case, I would not make the change I suggested because I think that we should return NotFoundError iff there is no match for any of the patterns.\nLooking at your code, I we currently return non-ok status when either env()->GetFileSystemForFile fails (line 216) or fs->GetChildren fails (line 236).\nI suggest you add temporary log statements that tells us what the returned status at these lines is which will likely help us identify the root cause of the failures.\nI think that you will ultimately need to treat NotFoundError differently from other non-ok statuses. For all non-ok status other that NotFoundError we should propagate this to the caller right away (as opposed to continue doing other work which can also result in an error that will be discarded). For NotFoundError, we should skip over these and only return NotFoundError to the caller if all patterns evaluated to an empty set of files.", "in_reply_to_id": 223160904}