{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/220578342", "pull_request_review_id": 159016308, "id": 220578342, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDU3ODM0Mg==", "diff_hunk": "@@ -0,0 +1,330 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+#include <queue>\n+#include \"tensorflow/core/framework/partial_tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/kernels/data/dataset.h\"\n+#include \"tensorflow/core/lib/io/buffered_inputstream.h\"\n+#include \"tensorflow/core/lib/io/inputbuffer.h\"\n+#include \"tensorflow/core/lib/io/random_inputstream.h\"\n+#include \"tensorflow/core/lib/io/record_reader.h\"\n+#include \"tensorflow/core/lib/io/zlib_compression_options.h\"\n+#include \"tensorflow/core/lib/io/zlib_inputstream.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/platform/env.h\"\n+#include \"tensorflow/core/lib/io/path.h\"\n+#include \"tensorflow/core/lib/core/threadpool.h\"\n+\n+namespace tensorflow {\n+namespace data {\n+\n+namespace {\n+\n+constexpr int kNumThreads = 8;\n+\n+// Run a function in parallel using a ThreadPool, but skip the ThreadPool\n+// on the iOS platform due to its problems with more than a few threads.\n+void ForEach(int first, int last, const std::function<void(int)>& f) {\n+#if TARGET_OS_IPHONE\n+  for (int i = first; i < last; i++) {\n+    f(i);\n+  }\n+#else\n+  int num_threads = std::min(kNumThreads, last - first);", "path": "tensorflow/core/kernels/data/matching_files_dataset_op.cc", "position": null, "original_position": 47, "commit_id": "0d5b9d20cc3e3062aa4d443bc772bb3aed698d15", "original_commit_id": "de453a41d3886afbcb6c1b51caa3bfa61c2d36ef", "user": {"login": "feihugis", "id": 5057740, "node_id": "MDQ6VXNlcjUwNTc3NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5057740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feihugis", "html_url": "https://github.com/feihugis", "followers_url": "https://api.github.com/users/feihugis/followers", "following_url": "https://api.github.com/users/feihugis/following{/other_user}", "gists_url": "https://api.github.com/users/feihugis/gists{/gist_id}", "starred_url": "https://api.github.com/users/feihugis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feihugis/subscriptions", "organizations_url": "https://api.github.com/users/feihugis/orgs", "repos_url": "https://api.github.com/users/feihugis/repos", "events_url": "https://api.github.com/users/feihugis/events{/privacy}", "received_events_url": "https://api.github.com/users/feihugis/received_events", "type": "User", "site_admin": false}, "body": "Thanks for your great suggestion! The new way does work more efficient and stable. Here is the code based on your suggestion:\r\n```C++\r\nstatic void ForEach(IteratorContext* ctx, int first, int last,\r\n       const std::function<void(int)>& f) {\r\n  for (int i = first; i < last ; i++) {\r\n    (*ctx->runner())([f, i] {std::bind(f, i);});\r\n  }\r\n}\r\n```\r\n\r\n", "created_at": "2018-09-26T14:09:30Z", "updated_at": "2018-10-15T21:38:29Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22429#discussion_r220578342", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22429", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/220578342"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22429#discussion_r220578342"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22429"}}, "body_html": "<p>Thanks for your great suggestion! The new way does work more efficient and stable. Here is the code based on your suggestion:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">ForEach</span>(IteratorContext* ctx, <span class=\"pl-k\">int</span> first, <span class=\"pl-k\">int</span> last,\n       <span class=\"pl-k\">const</span> std::function&lt;<span class=\"pl-k\">void</span>(<span class=\"pl-k\">int</span>)&gt;&amp; f) {\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i = first; i &lt; last ; i++) {\n    (*ctx-&gt;<span class=\"pl-c1\">runner</span>())([f, i] {<span class=\"pl-c1\">std::bind</span>(f, i);});\n  }\n}</pre></div>", "body_text": "Thanks for your great suggestion! The new way does work more efficient and stable. Here is the code based on your suggestion:\nstatic void ForEach(IteratorContext* ctx, int first, int last,\n       const std::function<void(int)>& f) {\n  for (int i = first; i < last ; i++) {\n    (*ctx->runner())([f, i] {std::bind(f, i);});\n  }\n}", "in_reply_to_id": 219962605}