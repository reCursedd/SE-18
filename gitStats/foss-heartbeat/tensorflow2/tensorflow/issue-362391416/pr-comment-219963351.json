{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/219963351", "pull_request_review_id": 158258029, "id": 219963351, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTk2MzM1MQ==", "diff_hunk": "@@ -0,0 +1,330 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+#include <queue>\n+#include \"tensorflow/core/framework/partial_tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/kernels/data/dataset.h\"\n+#include \"tensorflow/core/lib/io/buffered_inputstream.h\"\n+#include \"tensorflow/core/lib/io/inputbuffer.h\"\n+#include \"tensorflow/core/lib/io/random_inputstream.h\"\n+#include \"tensorflow/core/lib/io/record_reader.h\"\n+#include \"tensorflow/core/lib/io/zlib_compression_options.h\"\n+#include \"tensorflow/core/lib/io/zlib_inputstream.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/platform/env.h\"\n+#include \"tensorflow/core/lib/io/path.h\"\n+#include \"tensorflow/core/lib/core/threadpool.h\"\n+\n+namespace tensorflow {\n+namespace data {\n+\n+namespace {\n+\n+constexpr int kNumThreads = 8;\n+\n+// Run a function in parallel using a ThreadPool, but skip the ThreadPool\n+// on the iOS platform due to its problems with more than a few threads.\n+void ForEach(int first, int last, const std::function<void(int)>& f) {\n+#if TARGET_OS_IPHONE\n+  for (int i = first; i < last; i++) {\n+    f(i);\n+  }\n+#else\n+  int num_threads = std::min(kNumThreads, last - first);\n+  thread::ThreadPool threads(Env::Default(), \"ForEach\", num_threads);\n+  for (int i = first; i < last; i++) {\n+    threads.Schedule([f, i] { f(i); });\n+  }\n+#endif\n+}\n+\n+}  // namespace\n+\n+namespace {\n+\n+class MatchingFilesDatasetOp : public DatasetOpKernel {\n+ public:\n+  using DatasetOpKernel::DatasetOpKernel;\n+\n+  void MakeDataset(OpKernelContext* ctx, DatasetBase** output) override {\n+    const Tensor* patterns_t;\n+    // NOTE(originally from ringwalt): Changing the input name \"pattern\" to\n+    // \"patterns\" would break existing graphs.\n+    OP_REQUIRES_OK(ctx, ctx->input(\"pattern\", &patterns_t));\n+    OP_REQUIRES(\n+        ctx,\n+        TensorShapeUtils::IsScalar(patterns_t->shape()) ||\n+            TensorShapeUtils::IsVector(patterns_t->shape()),\n+        errors::InvalidArgument(\n+            \"Input patterns tensor must be scalar or vector, but had shape: \",\n+            patterns_t->shape().DebugString()));\n+    const auto patterns = patterns_t->flat<string>();\n+    size_t num_patterns = static_cast<size_t >(patterns.size());\n+    std::vector<string> pattern_strs;\n+    pattern_strs.reserve(num_patterns);\n+\n+    for (int i = 0; i < num_patterns; ++i) {\n+      pattern_strs.push_back(patterns(i));\n+    }\n+\n+    // keep the elements in the descending order\n+    std::sort(pattern_strs.begin(), pattern_strs.end(), std::greater<string>());\n+    *output = new Dataset(ctx, std::move(pattern_strs));\n+  }\n+\n+ private:\n+  class Dataset : public DatasetBase {\n+   public:\n+    Dataset(OpKernelContext* ctx, std::vector<string> patterns)\n+        : DatasetBase(DatasetContext(ctx)),\n+          pattern_(std::move(patterns)) {}\n+\n+    std::unique_ptr<IteratorBase> MakeIteratorInternal(\n+        const string& prefix) const override {\n+      return std::unique_ptr<IteratorBase>(\n+          new Iterator({this, strings::StrCat(prefix, \"::FileName\")}));", "path": "tensorflow/core/kernels/data/matching_files_dataset_op.cc", "position": null, "original_position": 99, "commit_id": "0d5b9d20cc3e3062aa4d443bc772bb3aed698d15", "original_commit_id": "de453a41d3886afbcb6c1b51caa3bfa61c2d36ef", "user": {"login": "jsimsa", "id": 1072079, "node_id": "MDQ6VXNlcjEwNzIwNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1072079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsimsa", "html_url": "https://github.com/jsimsa", "followers_url": "https://api.github.com/users/jsimsa/followers", "following_url": "https://api.github.com/users/jsimsa/following{/other_user}", "gists_url": "https://api.github.com/users/jsimsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsimsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsimsa/subscriptions", "organizations_url": "https://api.github.com/users/jsimsa/orgs", "repos_url": "https://api.github.com/users/jsimsa/repos", "events_url": "https://api.github.com/users/jsimsa/events{/privacy}", "received_events_url": "https://api.github.com/users/jsimsa/received_events", "type": "User", "site_admin": false}, "body": "Replace `\"::FileName\"` with `\"::MatchingFiles\"`.", "created_at": "2018-09-24T19:40:17Z", "updated_at": "2018-10-15T21:38:29Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22429#discussion_r219963351", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22429", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/219963351"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22429#discussion_r219963351"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22429"}}, "body_html": "<p>Replace <code>\"::FileName\"</code> with <code>\"::MatchingFiles\"</code>.</p>", "body_text": "Replace \"::FileName\" with \"::MatchingFiles\"."}