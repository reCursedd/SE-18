{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/151569385", "pull_request_review_id": 77296709, "id": 151569385, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTU2OTM4NQ==", "diff_hunk": "@@ -22,64 +22,28 @@\n #import <CoreImage/CoreImage.h>\n #import <ImageIO/ImageIO.h>\n \n-std::vector<uint8_t> LoadImageFromFile(const char* file_name,\n-\t\t\t\t     int* out_width, int* out_height,\n-\t\t\t\t     int* out_channels) {\n-  FILE* file_handle = fopen(file_name, \"rb\");\n-  fseek(file_handle, 0, SEEK_END);\n-  const size_t bytes_in_file = ftell(file_handle);\n-  fseek(file_handle, 0, SEEK_SET);\n-  std::vector<uint8_t> file_data(bytes_in_file);\n-  fread(file_data.data(), 1, bytes_in_file, file_handle);\n-  fclose(file_handle);\n-  CFDataRef file_data_ref = CFDataCreateWithBytesNoCopy(NULL, file_data.data(),\n-\t\t\t\t\t\t      bytes_in_file,\n-\t\t\t\t\t\t      kCFAllocatorNull);\n-  CGDataProviderRef image_provider =\n-    CGDataProviderCreateWithCFData(file_data_ref);\n-\n-  const char* suffix = strrchr(file_name, '.');\n-  if (!suffix || suffix == file_name) {\n-    suffix = \"\";\n-  }\n-  CGImageRef image;\n-  if (strcasecmp(suffix, \".png\") == 0) {\n-    image = CGImageCreateWithPNGDataProvider(image_provider, NULL, true,\n-\t\t\t\t\t     kCGRenderingIntentDefault);\n-  } else if ((strcasecmp(suffix, \".jpg\") == 0) ||\n-    (strcasecmp(suffix, \".jpeg\") == 0)) {\n-    image = CGImageCreateWithJPEGDataProvider(image_provider, NULL, true,\n-\t\t\t\t\t      kCGRenderingIntentDefault);\n-  } else {\n-    CFRelease(image_provider);\n-    CFRelease(file_data_ref);\n-    fprintf(stderr, \"Unknown suffix for file '%s'\\n\", file_name);\n-    *out_width = 0;\n-    *out_height = 0;\n-    *out_channels = 0;\n-    return std::vector<uint8_t>();\n-  }\n-\n-  const int width = (int)CGImageGetWidth(image);\n-  const int height = (int)CGImageGetHeight(image);\n-  const int channels = 4;\n-  CGColorSpaceRef color_space = CGColorSpaceCreateDeviceRGB();\n-  const int bytes_per_row = (width * channels);\n-  const int bytes_in_image = (bytes_per_row * height);\n-  std::vector<uint8_t> result(bytes_in_image);\n-  const int bits_per_component = 8;\n-  CGContextRef context = CGBitmapContextCreate(result.data(), width, height,\n-    bits_per_component, bytes_per_row, color_space,\n-    kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);\n-  CGColorSpaceRelease(color_space);\n-  CGContextDrawImage(context, CGRectMake(0, 0, width, height), image);\n-  CGContextRelease(context);\n-  CFRelease(image);\n-  CFRelease(image_provider);\n-  CFRelease(file_data_ref);\n-\n-  *out_width = width;\n-  *out_height = height;\n-  *out_channels = channels;\n-  return result;\n+std::vector<uint8_t> LoadImageFromUIImage(UIImage *img) {\n+    CGImageRef image = img.CGImage;\n+    \n+    const int width = (int)CGImageGetWidth(image);\n+    const int height = (int)CGImageGetHeight(image);\n+    const int channels = 4;\n+    CGColorSpaceRef color_space = CGColorSpaceCreateDeviceRGB();\n+    const int bytes_per_row = (width * channels);", "path": "tensorflow/contrib/lite/examples/ios/simple/ios_image_load.mm", "position": null, "original_position": 71, "commit_id": "0027f6bad02d840afe9c9e6e8f4ce23668b91070", "original_commit_id": "2bf41d52cbae9f279db378edc0466b62ca0c6f71", "user": {"login": "dmaclach", "id": 320201, "node_id": "MDQ6VXNlcjMyMDIwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/320201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmaclach", "html_url": "https://github.com/dmaclach", "followers_url": "https://api.github.com/users/dmaclach/followers", "following_url": "https://api.github.com/users/dmaclach/following{/other_user}", "gists_url": "https://api.github.com/users/dmaclach/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmaclach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmaclach/subscriptions", "organizations_url": "https://api.github.com/users/dmaclach/orgs", "repos_url": "https://api.github.com/users/dmaclach/repos", "events_url": "https://api.github.com/users/dmaclach/events{/privacy}", "received_events_url": "https://api.github.com/users/dmaclach/received_events", "type": "User", "site_admin": false}, "body": "probably no need for () (same on line below)", "created_at": "2017-11-16T23:44:11Z", "updated_at": "2018-07-31T08:30:25Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14592#discussion_r151569385", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14592", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/151569385"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14592#discussion_r151569385"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14592"}}, "body_html": "<p>probably no need for () (same on line below)</p>", "body_text": "probably no need for () (same on line below)"}