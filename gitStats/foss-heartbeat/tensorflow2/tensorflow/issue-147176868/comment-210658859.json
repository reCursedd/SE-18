{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/210658859", "html_url": "https://github.com/tensorflow/tensorflow/pull/1834#issuecomment-210658859", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1834", "id": 210658859, "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDY1ODg1OQ==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-15T21:44:10Z", "updated_at": "2016-04-15T21:44:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Perhaps I jumped the gun.  Looks like float and double can represent<br>\nintegers up to and including 2^{mantissa bits + 1}.  So there seems to be<br>\nno need to worry in this case.  Even with the vagaries of<br>\nserializing/deserializing, I don't believe that a  number with exact FP<br>\nrepresentation will be modified.</p>\n<p>On Fri, Apr 15, 2016 at 2:50 AM, Till Hoffmann <a href=\"mailto:notifications@github.com\">notifications@github.com</a><br>\nwrote:</p>\n<blockquote>\n<p>I'm having second thoughts about the suggested implementation. I'm sure it<br>\nworks fine but I'm a bit worried about consistency: a number of functions<br>\nin SpecialFunctions.h in eigen use equality tests. For example, igamma<br>\ntests for equality with zero and I also test for equality with one in the<br>\nimplementation of the zeta function. Is there something special about the<br>\nrepresentation of one and zero in memory that we don't have to worry about<br>\nserialisation issues? Would it be worthwhile adding a helper function<br>\ninteger_equal_impl for all such comparisons?</p>\n<p>\u2014<br>\nYou are receiving this because you were assigned.<br>\nReply to this email directly or view it on GitHub<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"147176868\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1834\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/1834/hovercard?comment_id=210393620&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/pull/1834#issuecomment-210393620\">#1834 (comment)</a></p>\n</blockquote>", "body_text": "Perhaps I jumped the gun.  Looks like float and double can represent\nintegers up to and including 2^{mantissa bits + 1}.  So there seems to be\nno need to worry in this case.  Even with the vagaries of\nserializing/deserializing, I don't believe that a  number with exact FP\nrepresentation will be modified.\nOn Fri, Apr 15, 2016 at 2:50 AM, Till Hoffmann notifications@github.com\nwrote:\n\nI'm having second thoughts about the suggested implementation. I'm sure it\nworks fine but I'm a bit worried about consistency: a number of functions\nin SpecialFunctions.h in eigen use equality tests. For example, igamma\ntests for equality with zero and I also test for equality with one in the\nimplementation of the zeta function. Is there something special about the\nrepresentation of one and zero in memory that we don't have to worry about\nserialisation issues? Would it be worthwhile adding a helper function\ninteger_equal_impl for all such comparisons?\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly or view it on GitHub\n#1834 (comment)", "body": "Perhaps I jumped the gun.  Looks like float and double can represent\nintegers up to and including 2^{mantissa bits + 1}.  So there seems to be\nno need to worry in this case.  Even with the vagaries of\nserializing/deserializing, I don't believe that a  number with exact FP\nrepresentation will be modified.\n\nOn Fri, Apr 15, 2016 at 2:50 AM, Till Hoffmann notifications@github.com\nwrote:\n\n> I'm having second thoughts about the suggested implementation. I'm sure it\n> works fine but I'm a bit worried about consistency: a number of functions\n> in SpecialFunctions.h in eigen use equality tests. For example, igamma\n> tests for equality with zero and I also test for equality with one in the\n> implementation of the zeta function. Is there something special about the\n> representation of one and zero in memory that we don't have to worry about\n> serialisation issues? Would it be worthwhile adding a helper function\n> integer_equal_impl for all such comparisons?\n> \n> \u2014\n> You are receiving this because you were assigned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/tensorflow/tensorflow/pull/1834#issuecomment-210393620\n"}