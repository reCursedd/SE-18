{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23863", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23863/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23863/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23863/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23863", "id": 382478637, "node_id": "MDU6SXNzdWUzODI0Nzg2Mzc=", "number": 23863, "title": "SimpleRNN + batch_normalization causes inexplicable InvalidArgumentError", "user": {"login": "jchia", "id": 446676, "node_id": "MDQ6VXNlcjQ0NjY3Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/446676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jchia", "html_url": "https://github.com/jchia", "followers_url": "https://api.github.com/users/jchia/followers", "following_url": "https://api.github.com/users/jchia/following{/other_user}", "gists_url": "https://api.github.com/users/jchia/gists{/gist_id}", "starred_url": "https://api.github.com/users/jchia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jchia/subscriptions", "organizations_url": "https://api.github.com/users/jchia/orgs", "repos_url": "https://api.github.com/users/jchia/repos", "events_url": "https://api.github.com/users/jchia/events{/privacy}", "received_events_url": "https://api.github.com/users/jchia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-20T02:56:55Z", "updated_at": "2018-11-23T08:11:10Z", "closed_at": "2018-11-23T08:11:10Z", "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes</li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Fedora 22</li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA</li>\n<li>TensorFlow installed from (source or binary): pip</li>\n<li>TensorFlow version (use command below): v1.12.0-0-ga6d8ffae09 1.12.0</li>\n<li>Python version: 3.6.5</li>\n<li>Bazel version (if compiling from source): NA</li>\n<li>GCC/Compiler version (if compiling from source): NA</li>\n<li>CUDA/cuDNN version: NA</li>\n<li>GPU model and memory: NA</li>\n</ul>\n<p><strong>Describe the current behavior</strong><br>\nThe test program throws an exception <code>tensorflow.python.framework.errors_impl.InvalidArgumentError: Retval[0] does not have value</code> in session run. However, it completes normally if <code>EPISODE_LENGTH</code> is halved, the <code>SimpleRNN</code> layer is commented out or the <code>batch_normalization</code> layer is commented out. The problem also goes away if I replace the <code>RandomDataset</code>-derived dataset with one built with <code>from_tensor_slices</code> from constant data.</p>\n<p><strong>Describe the expected behavior</strong><br>\nThe test program should complete normally. I don't think my program has a bug that is responsible for the exception but even if it does, the throwing of the exception should be consistent and not depend on <code>EPISODE_LENGTH</code> being big enough.</p>\n<p><strong>Code to reproduce the issue</strong></p>\n<pre><code>#!/usr/bin/env python3\n\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.keras.layers as kl\n\nNUM_FEATURES = 2\nEPISODE_LENGTH = 32\nBATCH_SIZE = 2\n\nclass GraphBuilder:\n    def __init__(self):\n        g = tf.Graph()\n        with g.as_default():\n            tf.set_random_seed(0)\n\n            with tf.variable_scope('input'):\n                ds = tf.data.Dataset.from_tensors(\n                    (np.zeros(shape=(BATCH_SIZE, EPISODE_LENGTH, NUM_FEATURES), dtype=np.float32),\n                     np.zeros(shape=(BATCH_SIZE, EPISODE_LENGTH), dtype=np.float32)))\n                it = ds.make_one_shot_iterator()\n                batch = it.get_next(name='batch')\n                batch_x, batch_y = batch\n            with tf.variable_scope('nn'):\n                layer = batch_x\n                layer = kl.SimpleRNN(1, return_sequences=True)(layer, training=True)\n                layer = tf.layers.batch_normalization(layer, axis=2, training=True)\n                batch_pred = layer[:, :, 0]\n\n            with tf.variable_scope('loss'):\n                num_rows = tf.reduce_prod(tf.shape(batch_y))\n                e = tf.subtract(batch_y, batch_pred, name='error')\n                sse = tf.reduce_sum(tf.square(e), name='sse')\n                mse = tf.divide(sse, tf.cast(num_rows, tf.float32), name='mse')\n                rmse = tf.sqrt(mse, name='rmse')\n\n            with tf.variable_scope('train'):\n                optimizer = tf.train.AdamOptimizer(0.001)\n                update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\n                with tf.control_dependencies(update_ops):\n                    train_op = optimizer.minimize(mse)\n\n        self.rmse = rmse\n        self.train_op = train_op\n        self.graph = g\n\n\ndef main():\n    gb = GraphBuilder()\n    config = tf.ConfigProto(intra_op_parallelism_threads=2, inter_op_parallelism_threads=2)\n    config.device_count['GPU'] = 0\n    with tf.Session(graph=gb.graph, config=config) as sess:\n        sess.run(tf.global_variables_initializer())\n        sess.run([gb.rmse, gb.train_op])\n\nmain()\n</code></pre>\n<p><strong>Other info / logs</strong></p>\n<pre><code>2018-11-20 13:31:56.998664: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\nTraceback (most recent call last):\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1334, in _do_call\n    return fn(*args)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1319, in _run_fn\n    options, feed_dict, fetch_list, target_list, run_metadata)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1407, in _call_tf_sessionrun\n    run_metadata)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Retval[0] does not have value\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"py3/train2.py\", line 56, in &lt;module&gt;\n    main()\n  File \"py3/train2.py\", line 54, in main\n    sess.run([gb.rmse, gb.train_op])\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 929, in run\n    run_metadata_ptr)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1152, in _run\n    feed_dict_tensor, options, run_metadata)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1328, in _do_run\n    run_metadata)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1348, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Retval[0] does not have value\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Fedora 22\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA\nTensorFlow installed from (source or binary): pip\nTensorFlow version (use command below): v1.12.0-0-ga6d8ffae09 1.12.0\nPython version: 3.6.5\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: NA\nGPU model and memory: NA\n\nDescribe the current behavior\nThe test program throws an exception tensorflow.python.framework.errors_impl.InvalidArgumentError: Retval[0] does not have value in session run. However, it completes normally if EPISODE_LENGTH is halved, the SimpleRNN layer is commented out or the batch_normalization layer is commented out. The problem also goes away if I replace the RandomDataset-derived dataset with one built with from_tensor_slices from constant data.\nDescribe the expected behavior\nThe test program should complete normally. I don't think my program has a bug that is responsible for the exception but even if it does, the throwing of the exception should be consistent and not depend on EPISODE_LENGTH being big enough.\nCode to reproduce the issue\n#!/usr/bin/env python3\n\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.keras.layers as kl\n\nNUM_FEATURES = 2\nEPISODE_LENGTH = 32\nBATCH_SIZE = 2\n\nclass GraphBuilder:\n    def __init__(self):\n        g = tf.Graph()\n        with g.as_default():\n            tf.set_random_seed(0)\n\n            with tf.variable_scope('input'):\n                ds = tf.data.Dataset.from_tensors(\n                    (np.zeros(shape=(BATCH_SIZE, EPISODE_LENGTH, NUM_FEATURES), dtype=np.float32),\n                     np.zeros(shape=(BATCH_SIZE, EPISODE_LENGTH), dtype=np.float32)))\n                it = ds.make_one_shot_iterator()\n                batch = it.get_next(name='batch')\n                batch_x, batch_y = batch\n            with tf.variable_scope('nn'):\n                layer = batch_x\n                layer = kl.SimpleRNN(1, return_sequences=True)(layer, training=True)\n                layer = tf.layers.batch_normalization(layer, axis=2, training=True)\n                batch_pred = layer[:, :, 0]\n\n            with tf.variable_scope('loss'):\n                num_rows = tf.reduce_prod(tf.shape(batch_y))\n                e = tf.subtract(batch_y, batch_pred, name='error')\n                sse = tf.reduce_sum(tf.square(e), name='sse')\n                mse = tf.divide(sse, tf.cast(num_rows, tf.float32), name='mse')\n                rmse = tf.sqrt(mse, name='rmse')\n\n            with tf.variable_scope('train'):\n                optimizer = tf.train.AdamOptimizer(0.001)\n                update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\n                with tf.control_dependencies(update_ops):\n                    train_op = optimizer.minimize(mse)\n\n        self.rmse = rmse\n        self.train_op = train_op\n        self.graph = g\n\n\ndef main():\n    gb = GraphBuilder()\n    config = tf.ConfigProto(intra_op_parallelism_threads=2, inter_op_parallelism_threads=2)\n    config.device_count['GPU'] = 0\n    with tf.Session(graph=gb.graph, config=config) as sess:\n        sess.run(tf.global_variables_initializer())\n        sess.run([gb.rmse, gb.train_op])\n\nmain()\n\nOther info / logs\n2018-11-20 13:31:56.998664: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\nTraceback (most recent call last):\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1334, in _do_call\n    return fn(*args)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1319, in _run_fn\n    options, feed_dict, fetch_list, target_list, run_metadata)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1407, in _call_tf_sessionrun\n    run_metadata)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Retval[0] does not have value\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"py3/train2.py\", line 56, in <module>\n    main()\n  File \"py3/train2.py\", line 54, in main\n    sess.run([gb.rmse, gb.train_op])\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 929, in run\n    run_metadata_ptr)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1152, in _run\n    feed_dict_tensor, options, run_metadata)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1328, in _do_run\n    run_metadata)\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1348, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Retval[0] does not have value", "body": "**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Fedora 22\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA\r\n- TensorFlow installed from (source or binary): pip\r\n- TensorFlow version (use command below): v1.12.0-0-ga6d8ffae09 1.12.0\r\n- Python version: 3.6.5\r\n- Bazel version (if compiling from source): NA\r\n- GCC/Compiler version (if compiling from source): NA\r\n- CUDA/cuDNN version: NA\r\n- GPU model and memory: NA\r\n\r\n**Describe the current behavior**\r\nThe test program throws an exception `tensorflow.python.framework.errors_impl.InvalidArgumentError: Retval[0] does not have value` in session run. However, it completes normally if `EPISODE_LENGTH` is halved, the `SimpleRNN` layer is commented out or the `batch_normalization` layer is commented out. The problem also goes away if I replace the `RandomDataset`-derived dataset with one built with `from_tensor_slices` from constant data.\r\n\r\n**Describe the expected behavior**\r\nThe test program should complete normally. I don't think my program has a bug that is responsible for the exception but even if it does, the throwing of the exception should be consistent and not depend on `EPISODE_LENGTH` being big enough.\r\n\r\n**Code to reproduce the issue**\r\n```\r\n#!/usr/bin/env python3\r\n\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport tensorflow.keras.layers as kl\r\n\r\nNUM_FEATURES = 2\r\nEPISODE_LENGTH = 32\r\nBATCH_SIZE = 2\r\n\r\nclass GraphBuilder:\r\n    def __init__(self):\r\n        g = tf.Graph()\r\n        with g.as_default():\r\n            tf.set_random_seed(0)\r\n\r\n            with tf.variable_scope('input'):\r\n                ds = tf.data.Dataset.from_tensors(\r\n                    (np.zeros(shape=(BATCH_SIZE, EPISODE_LENGTH, NUM_FEATURES), dtype=np.float32),\r\n                     np.zeros(shape=(BATCH_SIZE, EPISODE_LENGTH), dtype=np.float32)))\r\n                it = ds.make_one_shot_iterator()\r\n                batch = it.get_next(name='batch')\r\n                batch_x, batch_y = batch\r\n            with tf.variable_scope('nn'):\r\n                layer = batch_x\r\n                layer = kl.SimpleRNN(1, return_sequences=True)(layer, training=True)\r\n                layer = tf.layers.batch_normalization(layer, axis=2, training=True)\r\n                batch_pred = layer[:, :, 0]\r\n\r\n            with tf.variable_scope('loss'):\r\n                num_rows = tf.reduce_prod(tf.shape(batch_y))\r\n                e = tf.subtract(batch_y, batch_pred, name='error')\r\n                sse = tf.reduce_sum(tf.square(e), name='sse')\r\n                mse = tf.divide(sse, tf.cast(num_rows, tf.float32), name='mse')\r\n                rmse = tf.sqrt(mse, name='rmse')\r\n\r\n            with tf.variable_scope('train'):\r\n                optimizer = tf.train.AdamOptimizer(0.001)\r\n                update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\r\n                with tf.control_dependencies(update_ops):\r\n                    train_op = optimizer.minimize(mse)\r\n\r\n        self.rmse = rmse\r\n        self.train_op = train_op\r\n        self.graph = g\r\n\r\n\r\ndef main():\r\n    gb = GraphBuilder()\r\n    config = tf.ConfigProto(intra_op_parallelism_threads=2, inter_op_parallelism_threads=2)\r\n    config.device_count['GPU'] = 0\r\n    with tf.Session(graph=gb.graph, config=config) as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n        sess.run([gb.rmse, gb.train_op])\r\n\r\nmain()\r\n```\r\n\r\n\r\n**Other info / logs**\r\n```\r\n2018-11-20 13:31:56.998664: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\r\nTraceback (most recent call last):\r\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1334, in _do_call\r\n    return fn(*args)\r\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1319, in _run_fn\r\n    options, feed_dict, fetch_list, target_list, run_metadata)\r\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1407, in _call_tf_sessionrun\r\n    run_metadata)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Retval[0] does not have value\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"py3/train2.py\", line 56, in <module>\r\n    main()\r\n  File \"py3/train2.py\", line 54, in main\r\n    sess.run([gb.rmse, gb.train_op])\r\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 929, in run\r\n    run_metadata_ptr)\r\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1152, in _run\r\n    feed_dict_tensor, options, run_metadata)\r\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1328, in _do_run\r\n    run_metadata)\r\n  File \"/data/jchia/venv/tf/lib/python3.6/site-packages/tensorflow/python/client/session.py\", line 1348, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Retval[0] does not have value\r\n```"}