{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/167673719", "html_url": "https://github.com/tensorflow/tensorflow/issues/601#issuecomment-167673719", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/601", "id": 167673719, "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzY3MzcxOQ==", "user": {"login": "dcunited001", "id": 782627, "node_id": "MDQ6VXNlcjc4MjYyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/782627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcunited001", "html_url": "https://github.com/dcunited001", "followers_url": "https://api.github.com/users/dcunited001/followers", "following_url": "https://api.github.com/users/dcunited001/following{/other_user}", "gists_url": "https://api.github.com/users/dcunited001/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcunited001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcunited001/subscriptions", "organizations_url": "https://api.github.com/users/dcunited001/orgs", "repos_url": "https://api.github.com/users/dcunited001/repos", "events_url": "https://api.github.com/users/dcunited001/events{/privacy}", "received_events_url": "https://api.github.com/users/dcunited001/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-28T22:50:26Z", "updated_at": "2015-12-28T22:50:26Z", "author_association": "NONE", "body_html": "<p>furthermore, when i run <code>python -m tensorflow.models.image.mnist.convolutional</code> after i loaded the container with my use (instead of the <code>docker</code> user i created to manage the docker service) i get slightly different output, shown below.  both are in my <code>docker</code> group.  i don't see the call to or error from modprobe.   as you've said modprobe access shouldn't be required, i don't know why i'm seeing it above or why there is a difference, since both users are in the docker group.</p>\n<pre><code>I tensorflow/stream_executor/dso_loader.cc:101] successfully opened CUDA library libcuda.so locally\nI tensorflow/stream_executor/dso_loader.cc:101] successfully opened CUDA library libcurand.so.7.0 locally\nSuccesfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\nSuccesfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\nSuccesfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\nSuccesfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\nExtracting data/train-images-idx3-ubyte.gz\nExtracting data/train-labels-idx1-ubyte.gz\nExtracting data/t10k-images-idx3-ubyte.gz\nExtracting data/t10k-labels-idx1-ubyte.gz\nE tensorflow/stream_executor/cuda/cuda_driver.cc:481] failed call to cuInit: CUDA_ERROR_UNKNOWN\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:114] retrieving CUDA diagnostic information for host: ebc1748c6a6f\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:121] hostname: ebc1748c6a6f\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:146] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:257] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.68  Tue Dec  1 17:24:11 PST 2015\nGCC version:  gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:150] kernel reported version is: 352.68\nI tensorflow/core/common_runtime/gpu/gpu_init.cc:127] DMA: \nInitialized!\nEpoch 0.00\nMinibatch loss: 12.054, learning rate: 0.010000\nMinibatch error: 90.6%\nValidation error: 84.6%\n</code></pre>\n<p>like i said, this isn't a huge deal, but i eventually need to run my software on an amazon <code>g2.2xlarge</code> instance, which also have compute capability 3.0, with <code>GRID K520</code> GPU's.  However, i don't anticipate running into these exact problems in the cloud.  i think the problem lies in my host system configuration, so i think amazon images should be cleaner.</p>", "body_text": "furthermore, when i run python -m tensorflow.models.image.mnist.convolutional after i loaded the container with my use (instead of the docker user i created to manage the docker service) i get slightly different output, shown below.  both are in my docker group.  i don't see the call to or error from modprobe.   as you've said modprobe access shouldn't be required, i don't know why i'm seeing it above or why there is a difference, since both users are in the docker group.\nI tensorflow/stream_executor/dso_loader.cc:101] successfully opened CUDA library libcuda.so locally\nI tensorflow/stream_executor/dso_loader.cc:101] successfully opened CUDA library libcurand.so.7.0 locally\nSuccesfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\nSuccesfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\nSuccesfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\nSuccesfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\nExtracting data/train-images-idx3-ubyte.gz\nExtracting data/train-labels-idx1-ubyte.gz\nExtracting data/t10k-images-idx3-ubyte.gz\nExtracting data/t10k-labels-idx1-ubyte.gz\nE tensorflow/stream_executor/cuda/cuda_driver.cc:481] failed call to cuInit: CUDA_ERROR_UNKNOWN\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:114] retrieving CUDA diagnostic information for host: ebc1748c6a6f\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:121] hostname: ebc1748c6a6f\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:146] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:257] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.68  Tue Dec  1 17:24:11 PST 2015\nGCC version:  gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:150] kernel reported version is: 352.68\nI tensorflow/core/common_runtime/gpu/gpu_init.cc:127] DMA: \nInitialized!\nEpoch 0.00\nMinibatch loss: 12.054, learning rate: 0.010000\nMinibatch error: 90.6%\nValidation error: 84.6%\n\nlike i said, this isn't a huge deal, but i eventually need to run my software on an amazon g2.2xlarge instance, which also have compute capability 3.0, with GRID K520 GPU's.  However, i don't anticipate running into these exact problems in the cloud.  i think the problem lies in my host system configuration, so i think amazon images should be cleaner.", "body": "furthermore, when i run `python -m tensorflow.models.image.mnist.convolutional` after i loaded the container with my use (instead of the `docker` user i created to manage the docker service) i get slightly different output, shown below.  both are in my `docker` group.  i don't see the call to or error from modprobe.   as you've said modprobe access shouldn't be required, i don't know why i'm seeing it above or why there is a difference, since both users are in the docker group.  \n\n```\nI tensorflow/stream_executor/dso_loader.cc:101] successfully opened CUDA library libcuda.so locally\nI tensorflow/stream_executor/dso_loader.cc:101] successfully opened CUDA library libcurand.so.7.0 locally\nSuccesfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\nSuccesfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\nSuccesfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\nSuccesfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\nExtracting data/train-images-idx3-ubyte.gz\nExtracting data/train-labels-idx1-ubyte.gz\nExtracting data/t10k-images-idx3-ubyte.gz\nExtracting data/t10k-labels-idx1-ubyte.gz\nE tensorflow/stream_executor/cuda/cuda_driver.cc:481] failed call to cuInit: CUDA_ERROR_UNKNOWN\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:114] retrieving CUDA diagnostic information for host: ebc1748c6a6f\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:121] hostname: ebc1748c6a6f\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:146] libcuda reported version is: Not found: was unable to find libcuda.so DSO loaded into this program\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:257] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  352.68  Tue Dec  1 17:24:11 PST 2015\nGCC version:  gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04) \n\"\"\"\nI tensorflow/stream_executor/cuda/cuda_diagnostics.cc:150] kernel reported version is: 352.68\nI tensorflow/core/common_runtime/gpu/gpu_init.cc:127] DMA: \nInitialized!\nEpoch 0.00\nMinibatch loss: 12.054, learning rate: 0.010000\nMinibatch error: 90.6%\nValidation error: 84.6%\n```\n\nlike i said, this isn't a huge deal, but i eventually need to run my software on an amazon `g2.2xlarge` instance, which also have compute capability 3.0, with `GRID K520` GPU's.  However, i don't anticipate running into these exact problems in the cloud.  i think the problem lies in my host system configuration, so i think amazon images should be cleaner. \n"}