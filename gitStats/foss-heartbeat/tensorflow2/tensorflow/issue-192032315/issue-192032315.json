{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5905", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5905/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5905/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5905/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5905", "id": 192032315, "node_id": "MDU6SXNzdWUxOTIwMzIzMTU=", "number": 5905, "title": "Tensorflow - ValueError: Cannot feed value of shape", "user": {"login": "yidan216home", "id": 23524011, "node_id": "MDQ6VXNlcjIzNTI0MDEx", "avatar_url": "https://avatars3.githubusercontent.com/u/23524011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yidan216home", "html_url": "https://github.com/yidan216home", "followers_url": "https://api.github.com/users/yidan216home/followers", "following_url": "https://api.github.com/users/yidan216home/following{/other_user}", "gists_url": "https://api.github.com/users/yidan216home/gists{/gist_id}", "starred_url": "https://api.github.com/users/yidan216home/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yidan216home/subscriptions", "organizations_url": "https://api.github.com/users/yidan216home/orgs", "repos_url": "https://api.github.com/users/yidan216home/repos", "events_url": "https://api.github.com/users/yidan216home/events{/privacy}", "received_events_url": "https://api.github.com/users/yidan216home/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-28T15:18:48Z", "updated_at": "2016-11-29T06:13:54Z", "closed_at": "2016-11-29T06:13:54Z", "author_association": "NONE", "body_html": "<p>I have 12 input integer features. Output and labels is 1 or 0. I examines MNIST example from tensorflow website.<br>\nHere is my code:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\ndef init_weights(shape):\n    return tf.Variable(tf.random_normal(shape, stddev=0.01))\ndef model(X, w):\n    return tf.matmul(X, w) # notice we use the same model as linear regression, this is because there is a baked in cost function which performs softmax and cross entropy\ntrain_data1  = \"./data/xx.csv\"\ntest_data1 = \"./data/xxx.csv\"\ntrain_label1 = \"./data/xxl.csv\"\ntest_label1 = \"./data/xx.csv\"\ntrain_data = np.genfromtxt(train_data1, delimiter=',')\ntrain_label = np.genfromtxt(train_label1, delimiter=',').astype(int)\ntest_data = np.genfromtxt(test_data1, delimiter=',')\ntest_label = np.genfromtxt(test_label1, delimiter=',').astype(int)\n# Load datasets.\ntrX, trY, teX, teY = train_data,train_label, test_data, test_label\nX = tf.placeholder(\"float\", [None, 12]) # create symbolic variables\nY = tf.placeholder(\"float\", [None, 2])\n\nw = init_weights([12, 2]) \npy_x = model(X, w)\n\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(py_x, Y)) # compute mean cross entropy (softmax is applied internally)\ntrain_op = tf.train.GradientDescentOptimizer(0.05).minimize(cost) # construct optimizer\npredict_op = tf.argmax(py_x, 1) # at predict time, evaluate the argmax of the logistic regression\n\n# Launch the graph in a session\nwith tf.Session() as sess:\n    # you need to initialize all variables\n    tf.initialize_all_variables().run()\n\n    for i in range(100):\n         #for (x, y) in zip(train_X, train_Y):\n             #sess.run(optimizer, feed_dict={X: trX, Y: trY})\n        for start, end in zip(range(0, len(trX), 128), range(128, len(trX)+1, 128)):\n            sess.run(train_op, feed_dict={X: trX[start:end], Y: trY[start:end]})\n        print(i, np.mean(np.argmax(teY, axis=1) ==\n                         sess.run(predict_op, feed_dict={X: teX})))\n\n</code></pre>\n<p><strong>But I run upper code, I get an error. The compiler says that:</strong></p>\n<pre><code>Traceback (most recent call last):\n  File \"LRexample.py\", line 74, in &lt;module&gt;\n    sess.run(train_op, feed_dict={X: trX[start:end], Y: trY[start:end]})\nValueError: Cannot feed value of shape (128,) for Tensor u'Placeholder_1:0', which has shape '(?, 2)\n</code></pre>\n<p>How can I handle this error?</p>", "body_text": "I have 12 input integer features. Output and labels is 1 or 0. I examines MNIST example from tensorflow website.\nHere is my code:\nimport tensorflow as tf\nimport numpy as np\ndef init_weights(shape):\n    return tf.Variable(tf.random_normal(shape, stddev=0.01))\ndef model(X, w):\n    return tf.matmul(X, w) # notice we use the same model as linear regression, this is because there is a baked in cost function which performs softmax and cross entropy\ntrain_data1  = \"./data/xx.csv\"\ntest_data1 = \"./data/xxx.csv\"\ntrain_label1 = \"./data/xxl.csv\"\ntest_label1 = \"./data/xx.csv\"\ntrain_data = np.genfromtxt(train_data1, delimiter=',')\ntrain_label = np.genfromtxt(train_label1, delimiter=',').astype(int)\ntest_data = np.genfromtxt(test_data1, delimiter=',')\ntest_label = np.genfromtxt(test_label1, delimiter=',').astype(int)\n# Load datasets.\ntrX, trY, teX, teY = train_data,train_label, test_data, test_label\nX = tf.placeholder(\"float\", [None, 12]) # create symbolic variables\nY = tf.placeholder(\"float\", [None, 2])\n\nw = init_weights([12, 2]) \npy_x = model(X, w)\n\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(py_x, Y)) # compute mean cross entropy (softmax is applied internally)\ntrain_op = tf.train.GradientDescentOptimizer(0.05).minimize(cost) # construct optimizer\npredict_op = tf.argmax(py_x, 1) # at predict time, evaluate the argmax of the logistic regression\n\n# Launch the graph in a session\nwith tf.Session() as sess:\n    # you need to initialize all variables\n    tf.initialize_all_variables().run()\n\n    for i in range(100):\n         #for (x, y) in zip(train_X, train_Y):\n             #sess.run(optimizer, feed_dict={X: trX, Y: trY})\n        for start, end in zip(range(0, len(trX), 128), range(128, len(trX)+1, 128)):\n            sess.run(train_op, feed_dict={X: trX[start:end], Y: trY[start:end]})\n        print(i, np.mean(np.argmax(teY, axis=1) ==\n                         sess.run(predict_op, feed_dict={X: teX})))\n\n\nBut I run upper code, I get an error. The compiler says that:\nTraceback (most recent call last):\n  File \"LRexample.py\", line 74, in <module>\n    sess.run(train_op, feed_dict={X: trX[start:end], Y: trY[start:end]})\nValueError: Cannot feed value of shape (128,) for Tensor u'Placeholder_1:0', which has shape '(?, 2)\n\nHow can I handle this error?", "body": "I have 12 input integer features. Output and labels is 1 or 0. I examines MNIST example from tensorflow website.\r\nHere is my code:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\ndef init_weights(shape):\r\n    return tf.Variable(tf.random_normal(shape, stddev=0.01))\r\ndef model(X, w):\r\n    return tf.matmul(X, w) # notice we use the same model as linear regression, this is because there is a baked in cost function which performs softmax and cross entropy\r\ntrain_data1  = \"./data/xx.csv\"\r\ntest_data1 = \"./data/xxx.csv\"\r\ntrain_label1 = \"./data/xxl.csv\"\r\ntest_label1 = \"./data/xx.csv\"\r\ntrain_data = np.genfromtxt(train_data1, delimiter=',')\r\ntrain_label = np.genfromtxt(train_label1, delimiter=',').astype(int)\r\ntest_data = np.genfromtxt(test_data1, delimiter=',')\r\ntest_label = np.genfromtxt(test_label1, delimiter=',').astype(int)\r\n# Load datasets.\r\ntrX, trY, teX, teY = train_data,train_label, test_data, test_label\r\nX = tf.placeholder(\"float\", [None, 12]) # create symbolic variables\r\nY = tf.placeholder(\"float\", [None, 2])\r\n\r\nw = init_weights([12, 2]) \r\npy_x = model(X, w)\r\n\r\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(py_x, Y)) # compute mean cross entropy (softmax is applied internally)\r\ntrain_op = tf.train.GradientDescentOptimizer(0.05).minimize(cost) # construct optimizer\r\npredict_op = tf.argmax(py_x, 1) # at predict time, evaluate the argmax of the logistic regression\r\n\r\n# Launch the graph in a session\r\nwith tf.Session() as sess:\r\n    # you need to initialize all variables\r\n    tf.initialize_all_variables().run()\r\n\r\n    for i in range(100):\r\n         #for (x, y) in zip(train_X, train_Y):\r\n             #sess.run(optimizer, feed_dict={X: trX, Y: trY})\r\n        for start, end in zip(range(0, len(trX), 128), range(128, len(trX)+1, 128)):\r\n            sess.run(train_op, feed_dict={X: trX[start:end], Y: trY[start:end]})\r\n        print(i, np.mean(np.argmax(teY, axis=1) ==\r\n                         sess.run(predict_op, feed_dict={X: teX})))\r\n\r\n```\r\n\r\n**But I run upper code, I get an error. The compiler says that:**\r\n```\r\nTraceback (most recent call last):\r\n  File \"LRexample.py\", line 74, in <module>\r\n    sess.run(train_op, feed_dict={X: trX[start:end], Y: trY[start:end]})\r\nValueError: Cannot feed value of shape (128,) for Tensor u'Placeholder_1:0', which has shape '(?, 2)\r\n```\r\n\r\nHow can I handle this error?"}