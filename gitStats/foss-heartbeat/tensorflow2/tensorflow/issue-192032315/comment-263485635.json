{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/263485635", "html_url": "https://github.com/tensorflow/tensorflow/issues/5905#issuecomment-263485635", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5905", "id": 263485635, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzQ4NTYzNQ==", "user": {"login": "yidan216home", "id": 23524011, "node_id": "MDQ6VXNlcjIzNTI0MDEx", "avatar_url": "https://avatars3.githubusercontent.com/u/23524011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yidan216home", "html_url": "https://github.com/yidan216home", "followers_url": "https://api.github.com/users/yidan216home/followers", "following_url": "https://api.github.com/users/yidan216home/following{/other_user}", "gists_url": "https://api.github.com/users/yidan216home/gists{/gist_id}", "starred_url": "https://api.github.com/users/yidan216home/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yidan216home/subscriptions", "organizations_url": "https://api.github.com/users/yidan216home/orgs", "repos_url": "https://api.github.com/users/yidan216home/repos", "events_url": "https://api.github.com/users/yidan216home/events{/privacy}", "received_events_url": "https://api.github.com/users/yidan216home/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-29T06:12:36Z", "updated_at": "2016-11-29T06:12:36Z", "author_association": "NONE", "body_html": "<p>I solved this problem.<br>\nfirstly,I transformed load data into :</p>\n<pre><code>train_data = np.genfromtxt(train_data1, delimiter=',')\ntrain_label = np.transpose(train_label1, delimiter=',')\ntest_data = np.genfromtxt(test_data1, delimiter=',')\ntest_label = np.transpose(test_label1, delimiter=',')\n</code></pre>\n<p>Then,transformed  trX, trY, teX, teY data into:</p>\n<pre><code># convert the data\ntrX, trY, teX, teY = train_data,train_label, test_data, test_label\ntemp = trY.shape\ntrY = trY.reshape(temp[0], 1)\ntrY = np.concatenate((1-trY, trY), axis=1)\ntemp = teY.shape\nteY = teY.reshape(temp[0], 1)\nteY = np.concatenate((1-teY, teY), axis=1)\n\n</code></pre>\n<p>Finally,I transformed launching the graph in a session  into:</p>\n<pre><code>with tf.Session() as sess:\n    # you need to initialize all variables\n    tf.initialize_all_variables().run()\n\n    for i in range(100):\n            sess.run(train_op, feed_dict={X:  trX, Y: trY})        \n            print(i, np.mean(np.argmax(teY, axis=1) == sess.run(predict_op, feed_dict={X: teX})))\n</code></pre>\n<p>That's all.</p>", "body_text": "I solved this problem.\nfirstly,I transformed load data into :\ntrain_data = np.genfromtxt(train_data1, delimiter=',')\ntrain_label = np.transpose(train_label1, delimiter=',')\ntest_data = np.genfromtxt(test_data1, delimiter=',')\ntest_label = np.transpose(test_label1, delimiter=',')\n\nThen,transformed  trX, trY, teX, teY data into:\n# convert the data\ntrX, trY, teX, teY = train_data,train_label, test_data, test_label\ntemp = trY.shape\ntrY = trY.reshape(temp[0], 1)\ntrY = np.concatenate((1-trY, trY), axis=1)\ntemp = teY.shape\nteY = teY.reshape(temp[0], 1)\nteY = np.concatenate((1-teY, teY), axis=1)\n\n\nFinally,I transformed launching the graph in a session  into:\nwith tf.Session() as sess:\n    # you need to initialize all variables\n    tf.initialize_all_variables().run()\n\n    for i in range(100):\n            sess.run(train_op, feed_dict={X:  trX, Y: trY})        \n            print(i, np.mean(np.argmax(teY, axis=1) == sess.run(predict_op, feed_dict={X: teX})))\n\nThat's all.", "body": "I solved this problem.\r\nfirstly,I transformed load data into :\r\n```\r\ntrain_data = np.genfromtxt(train_data1, delimiter=',')\r\ntrain_label = np.transpose(train_label1, delimiter=',')\r\ntest_data = np.genfromtxt(test_data1, delimiter=',')\r\ntest_label = np.transpose(test_label1, delimiter=',')\r\n```\r\nThen,transformed  trX, trY, teX, teY data into:\r\n```\r\n# convert the data\r\ntrX, trY, teX, teY = train_data,train_label, test_data, test_label\r\ntemp = trY.shape\r\ntrY = trY.reshape(temp[0], 1)\r\ntrY = np.concatenate((1-trY, trY), axis=1)\r\ntemp = teY.shape\r\nteY = teY.reshape(temp[0], 1)\r\nteY = np.concatenate((1-teY, teY), axis=1)\r\n\r\n```\r\nFinally,I transformed launching the graph in a session  into:\r\n\r\n```\r\nwith tf.Session() as sess:\r\n    # you need to initialize all variables\r\n    tf.initialize_all_variables().run()\r\n\r\n    for i in range(100):\r\n            sess.run(train_op, feed_dict={X:  trX, Y: trY})        \r\n            print(i, np.mean(np.argmax(teY, axis=1) == sess.run(predict_op, feed_dict={X: teX})))\r\n```\r\n\r\nThat's all."}