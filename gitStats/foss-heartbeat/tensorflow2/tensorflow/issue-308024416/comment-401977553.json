{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/401977553", "html_url": "https://github.com/tensorflow/tensorflow/issues/17950#issuecomment-401977553", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17950", "id": 401977553, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTk3NzU1Mw==", "user": {"login": "tanzhenyu", "id": 15220929, "node_id": "MDQ6VXNlcjE1MjIwOTI5", "avatar_url": "https://avatars3.githubusercontent.com/u/15220929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanzhenyu", "html_url": "https://github.com/tanzhenyu", "followers_url": "https://api.github.com/users/tanzhenyu/followers", "following_url": "https://api.github.com/users/tanzhenyu/following{/other_user}", "gists_url": "https://api.github.com/users/tanzhenyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanzhenyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanzhenyu/subscriptions", "organizations_url": "https://api.github.com/users/tanzhenyu/orgs", "repos_url": "https://api.github.com/users/tanzhenyu/repos", "events_url": "https://api.github.com/users/tanzhenyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tanzhenyu/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-03T00:34:47Z", "updated_at": "2018-07-03T00:34:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>After some investigations, I think the root cause might not be directly related to train ops not created as control dependencies of update ops, because with keras _make_train_function(), both train ops and update ops are included inside the train function.<br>\nOn the other hand, I think the problem might be caused by the _clone_and_build_model function. What I tried locally on the function is that 1) if it doesn't take in features &amp; labels, the cloned model is correct with the right update ops, 2) if it does take in features &amp; labels, the cloned model is missing the update ops from batch norm layer.<br>\nI'm not sure why the behavior is different. But it looks like quite a subtle bug. I will investigate it next.</p>", "body_text": "After some investigations, I think the root cause might not be directly related to train ops not created as control dependencies of update ops, because with keras _make_train_function(), both train ops and update ops are included inside the train function.\nOn the other hand, I think the problem might be caused by the _clone_and_build_model function. What I tried locally on the function is that 1) if it doesn't take in features & labels, the cloned model is correct with the right update ops, 2) if it does take in features & labels, the cloned model is missing the update ops from batch norm layer.\nI'm not sure why the behavior is different. But it looks like quite a subtle bug. I will investigate it next.", "body": "After some investigations, I think the root cause might not be directly related to train ops not created as control dependencies of update ops, because with keras _make_train_function(), both train ops and update ops are included inside the train function. \r\nOn the other hand, I think the problem might be caused by the _clone_and_build_model function. What I tried locally on the function is that 1) if it doesn't take in features & labels, the cloned model is correct with the right update ops, 2) if it does take in features & labels, the cloned model is missing the update ops from batch norm layer.\r\nI'm not sure why the behavior is different. But it looks like quite a subtle bug. I will investigate it next."}