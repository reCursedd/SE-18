{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/386328920", "html_url": "https://github.com/tensorflow/tensorflow/issues/17950#issuecomment-386328920", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17950", "id": 386328920, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjMyODkyMA==", "user": {"login": "jwnsu", "id": 210987, "node_id": "MDQ6VXNlcjIxMDk4Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/210987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwnsu", "html_url": "https://github.com/jwnsu", "followers_url": "https://api.github.com/users/jwnsu/followers", "following_url": "https://api.github.com/users/jwnsu/following{/other_user}", "gists_url": "https://api.github.com/users/jwnsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwnsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwnsu/subscriptions", "organizations_url": "https://api.github.com/users/jwnsu/orgs", "repos_url": "https://api.github.com/users/jwnsu/repos", "events_url": "https://api.github.com/users/jwnsu/events{/privacy}", "received_events_url": "https://api.github.com/users/jwnsu/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-03T15:09:04Z", "updated_at": "2018-05-03T15:09:27Z", "author_association": "NONE", "body_html": "<p>This should be very easy to reproduce, example:</p>\n<pre><code>base_model = applications.ResNet50(classes=len(CLASSES), include_top=False, input_shape=(img_width,img_height,3))\n# build a classifier model to put on top of the convolutional model\ntop_model = Sequential()\ntop_model.add(Flatten(input_shape=base_model.output_shape[1:]))\ntop_model.add(Dense(256, activation='relu',W_regularizer=regularizers.l2(weight_decay)))\ntop_model.add(Dropout(0.5))\ntop_model.add(Dense(len(CLASSES), activation='softmax'))\n\nmodel = Model(inputs=base_model.input, outputs=top_model(base_model.output))\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=optimizers.SGD(lr=args.lrate, momentum=momentum),\n              metrics=['accuracy'])\n</code></pre>\n<p>Then feed some data.</p>", "body_text": "This should be very easy to reproduce, example:\nbase_model = applications.ResNet50(classes=len(CLASSES), include_top=False, input_shape=(img_width,img_height,3))\n# build a classifier model to put on top of the convolutional model\ntop_model = Sequential()\ntop_model.add(Flatten(input_shape=base_model.output_shape[1:]))\ntop_model.add(Dense(256, activation='relu',W_regularizer=regularizers.l2(weight_decay)))\ntop_model.add(Dropout(0.5))\ntop_model.add(Dense(len(CLASSES), activation='softmax'))\n\nmodel = Model(inputs=base_model.input, outputs=top_model(base_model.output))\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=optimizers.SGD(lr=args.lrate, momentum=momentum),\n              metrics=['accuracy'])\n\nThen feed some data.", "body": "This should be very easy to reproduce, example:\r\n```\r\nbase_model = applications.ResNet50(classes=len(CLASSES), include_top=False, input_shape=(img_width,img_height,3))\r\n# build a classifier model to put on top of the convolutional model\r\ntop_model = Sequential()\r\ntop_model.add(Flatten(input_shape=base_model.output_shape[1:]))\r\ntop_model.add(Dense(256, activation='relu',W_regularizer=regularizers.l2(weight_decay)))\r\ntop_model.add(Dropout(0.5))\r\ntop_model.add(Dense(len(CLASSES), activation='softmax'))\r\n\r\nmodel = Model(inputs=base_model.input, outputs=top_model(base_model.output))\r\nmodel.compile(loss='categorical_crossentropy',\r\n              optimizer=optimizers.SGD(lr=args.lrate, momentum=momentum),\r\n              metrics=['accuracy'])\r\n```\r\nThen feed some data."}