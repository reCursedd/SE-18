{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/356363483", "html_url": "https://github.com/tensorflow/tensorflow/issues/15876#issuecomment-356363483", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15876", "id": 356363483, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjM2MzQ4Mw==", "user": {"login": "sanjoy", "id": 136291, "node_id": "MDQ6VXNlcjEzNjI5MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/136291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanjoy", "html_url": "https://github.com/sanjoy", "followers_url": "https://api.github.com/users/sanjoy/followers", "following_url": "https://api.github.com/users/sanjoy/following{/other_user}", "gists_url": "https://api.github.com/users/sanjoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanjoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanjoy/subscriptions", "organizations_url": "https://api.github.com/users/sanjoy/orgs", "repos_url": "https://api.github.com/users/sanjoy/repos", "events_url": "https://api.github.com/users/sanjoy/events{/privacy}", "received_events_url": "https://api.github.com/users/sanjoy/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-09T17:57:50Z", "updated_at": "2018-01-09T17:57:50Z", "author_association": "MEMBER", "body_html": "<blockquote>\n<p>Thanks! <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=136291\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sanjoy\">@sanjoy</a> About linking statically, I was not so sure this would be the best approach, this felt more hacky to me, but I'll give it another try if you recommend so.</p>\n</blockquote>\n<p>Now that I think of it, I'm wondering if you'll run into issues with the Eigen thread pool -- for instance, if you create a Eigen thread pool device using one version of the thread pool and pass it into a <code>__xla_cpu_runtime_EigenMatMulF32</code> statically linked to another version of the thread pool.  If you start running into issues like this, I'd say adding <code>TF_EXPORT</code> instead is fine.</p>", "body_text": "Thanks! @sanjoy About linking statically, I was not so sure this would be the best approach, this felt more hacky to me, but I'll give it another try if you recommend so.\n\nNow that I think of it, I'm wondering if you'll run into issues with the Eigen thread pool -- for instance, if you create a Eigen thread pool device using one version of the thread pool and pass it into a __xla_cpu_runtime_EigenMatMulF32 statically linked to another version of the thread pool.  If you start running into issues like this, I'd say adding TF_EXPORT instead is fine.", "body": "> Thanks! @sanjoy About linking statically, I was not so sure this would be the best approach, this felt more hacky to me, but I'll give it another try if you recommend so.\r\n\r\nNow that I think of it, I'm wondering if you'll run into issues with the Eigen thread pool -- for instance, if you create a Eigen thread pool device using one version of the thread pool and pass it into a `__xla_cpu_runtime_EigenMatMulF32` statically linked to another version of the thread pool.  If you start running into issues like this, I'd say adding `TF_EXPORT` instead is fine."}