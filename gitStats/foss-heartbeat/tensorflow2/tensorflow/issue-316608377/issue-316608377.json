{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18781", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18781/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18781/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18781/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18781", "id": 316608377, "node_id": "MDU6SXNzdWUzMTY2MDgzNzc=", "number": 18781, "title": "tf.variable_scope(auxiliary_name_scope=False) alters name_scope", "user": {"login": "sleighsoft", "id": 9438971, "node_id": "MDQ6VXNlcjk0Mzg5NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9438971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleighsoft", "html_url": "https://github.com/sleighsoft", "followers_url": "https://api.github.com/users/sleighsoft/followers", "following_url": "https://api.github.com/users/sleighsoft/following{/other_user}", "gists_url": "https://api.github.com/users/sleighsoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleighsoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleighsoft/subscriptions", "organizations_url": "https://api.github.com/users/sleighsoft/orgs", "repos_url": "https://api.github.com/users/sleighsoft/repos", "events_url": "https://api.github.com/users/sleighsoft/events{/privacy}", "received_events_url": "https://api.github.com/users/sleighsoft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 14, "created_at": "2018-04-22T20:00:05Z", "updated_at": "2018-05-09T18:09:42Z", "closed_at": "2018-05-09T18:09:42Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary (pip)</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0.dev20180329</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Expected behavior for the following code is to print two lines containing:</p>\n<pre><code>(&lt;tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref&gt;, &lt;tf.Tensor 'ns_outer/ns_inner_1/const:0' shape=() dtype=float32&gt;)\n(&lt;tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref&gt;, &lt;tf.Tensor 'ns_outer/ns_inner_2/const:0' shape=() dtype=float32&gt;)\n</code></pre>\n<p>What is actually printed:</p>\n<pre><code>(&lt;tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref&gt;, &lt;tf.Tensor 'ns_outer/ns_inner_1/const:0' shape=() dtype=float32&gt;)\n(&lt;tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref&gt;, &lt;tf.Tensor 'ns_outer/ns_inner_1/const_1:0' shape=() dtype=float32&gt;)\n</code></pre>\n<p>Somehow the first use of <code>with VSO:</code> memorizes the <code>name_scope</code> it is in and restores it the second time it is used even though <code>auxiliary_name_scope=False</code> is set and the documentation states:</p>\n<pre><code>auxiliary_name_scope: If True, we create an auxiliary name scope with the scope. If False, we don't touch name scope.\n</code></pre>\n<h3>Source code</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n  <span class=\"pl-c1\">NSO</span> <span class=\"pl-k\">=</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ns_outer<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">__enter__</span>()\n\n  <span class=\"pl-c1\">VSO</span> <span class=\"pl-k\">=</span> tf.variable_scope(\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>vs_outer<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">auxiliary_name_scope</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span>tf.<span class=\"pl-c1\">AUTO_REUSE</span>)\n\n  <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-c1\">NSO</span>):\n    <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ns_inner_1<span class=\"pl-pds\">'</span></span>):\n      <span class=\"pl-k\">with</span> <span class=\"pl-c1\">VSO</span>:\n        <span class=\"pl-c1\">print</span>((tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>var<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-c1\">1</span>]), tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>const<span class=\"pl-pds\">'</span></span>)))\n\n  <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-c1\">NSO</span>):\n    <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ns_inner_2<span class=\"pl-pds\">'</span></span>):\n      <span class=\"pl-k\">with</span> <span class=\"pl-c1\">VSO</span>:\n        <span class=\"pl-c1\">print</span>((tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>var<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-c1\">1</span>]), tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>const<span class=\"pl-pds\">'</span></span>)))</pre></div>\n<p>It works when swapping the <code>name_scope</code> <code>with-block</code> with the <code>variable_scope</code> <code>with-block</code>.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n  <span class=\"pl-c1\">NSO</span> <span class=\"pl-k\">=</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ns_outer<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">__enter__</span>()\n\n  <span class=\"pl-c1\">VSO</span> <span class=\"pl-k\">=</span> tf.variable_scope(\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>vs_outer<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">auxiliary_name_scope</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span>tf.<span class=\"pl-c1\">AUTO_REUSE</span>)\n\n  <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-c1\">NSO</span>):\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">VSO</span>:\n      <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ns_inner_1<span class=\"pl-pds\">'</span></span>):\n        <span class=\"pl-c1\">print</span>((tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>var<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-c1\">1</span>]), tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>const<span class=\"pl-pds\">'</span></span>)))\n\n  <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-c1\">NSO</span>):\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">VSO</span>:\n      <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ns_inner_2<span class=\"pl-pds\">'</span></span>):\n        <span class=\"pl-c1\">print</span>((tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>var<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-c1\">1</span>]), tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>const<span class=\"pl-pds\">'</span></span>)))</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): binary (pip)\nTensorFlow version (use command below): 1.8.0.dev20180329\nPython version: 3.6.5\n\nDescribe the problem\nExpected behavior for the following code is to print two lines containing:\n(<tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref>, <tf.Tensor 'ns_outer/ns_inner_1/const:0' shape=() dtype=float32>)\n(<tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref>, <tf.Tensor 'ns_outer/ns_inner_2/const:0' shape=() dtype=float32>)\n\nWhat is actually printed:\n(<tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref>, <tf.Tensor 'ns_outer/ns_inner_1/const:0' shape=() dtype=float32>)\n(<tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref>, <tf.Tensor 'ns_outer/ns_inner_1/const_1:0' shape=() dtype=float32>)\n\nSomehow the first use of with VSO: memorizes the name_scope it is in and restores it the second time it is used even though auxiliary_name_scope=False is set and the documentation states:\nauxiliary_name_scope: If True, we create an auxiliary name scope with the scope. If False, we don't touch name scope.\n\nSource code\nimport tensorflow as tf\n\nwith tf.Graph().as_default():\n  NSO = tf.name_scope('ns_outer').__enter__()\n\n  VSO = tf.variable_scope(\n        'vs_outer', auxiliary_name_scope=False, reuse=tf.AUTO_REUSE)\n\n  with tf.name_scope(NSO):\n    with tf.name_scope('ns_inner_1'):\n      with VSO:\n        print((tf.get_variable('var', [1]), tf.constant(1.0, name='const')))\n\n  with tf.name_scope(NSO):\n    with tf.name_scope('ns_inner_2'):\n      with VSO:\n        print((tf.get_variable('var', [1]), tf.constant(1.0, name='const')))\nIt works when swapping the name_scope with-block with the variable_scope with-block.\nimport tensorflow as tf\n\nwith tf.Graph().as_default():\n  NSO = tf.name_scope('ns_outer').__enter__()\n\n  VSO = tf.variable_scope(\n        'vs_outer', auxiliary_name_scope=False, reuse=tf.AUTO_REUSE)\n\n  with tf.name_scope(NSO):\n    with VSO:\n      with tf.name_scope('ns_inner_1'):\n        print((tf.get_variable('var', [1]), tf.constant(1.0, name='const')))\n\n  with tf.name_scope(NSO):\n    with VSO:\n      with tf.name_scope('ns_inner_2'):\n        print((tf.get_variable('var', [1]), tf.constant(1.0, name='const')))", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: binary (pip)\r\n- **TensorFlow version (use command below)**: 1.8.0.dev20180329\r\n- **Python version**: 3.6.5\r\n\r\n### Describe the problem\r\nExpected behavior for the following code is to print two lines containing:\r\n```\r\n(<tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref>, <tf.Tensor 'ns_outer/ns_inner_1/const:0' shape=() dtype=float32>)\r\n(<tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref>, <tf.Tensor 'ns_outer/ns_inner_2/const:0' shape=() dtype=float32>)\r\n```\r\nWhat is actually printed:\r\n```\r\n(<tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref>, <tf.Tensor 'ns_outer/ns_inner_1/const:0' shape=() dtype=float32>)\r\n(<tf.Variable 'vs_outer/var:0' shape=(1,) dtype=float32_ref>, <tf.Tensor 'ns_outer/ns_inner_1/const_1:0' shape=() dtype=float32>)\r\n```\r\nSomehow the first use of `with VSO:` memorizes the `name_scope` it is in and restores it the second time it is used even though `auxiliary_name_scope=False` is set and the documentation states: \r\n```\r\nauxiliary_name_scope: If True, we create an auxiliary name scope with the scope. If False, we don't touch name scope.\r\n```\r\n\r\n### Source code\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.Graph().as_default():\r\n  NSO = tf.name_scope('ns_outer').__enter__()\r\n\r\n  VSO = tf.variable_scope(\r\n        'vs_outer', auxiliary_name_scope=False, reuse=tf.AUTO_REUSE)\r\n\r\n  with tf.name_scope(NSO):\r\n    with tf.name_scope('ns_inner_1'):\r\n      with VSO:\r\n        print((tf.get_variable('var', [1]), tf.constant(1.0, name='const')))\r\n\r\n  with tf.name_scope(NSO):\r\n    with tf.name_scope('ns_inner_2'):\r\n      with VSO:\r\n        print((tf.get_variable('var', [1]), tf.constant(1.0, name='const')))\r\n```\r\n\r\nIt works when swapping the `name_scope` `with-block` with the `variable_scope` `with-block`.\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.Graph().as_default():\r\n  NSO = tf.name_scope('ns_outer').__enter__()\r\n\r\n  VSO = tf.variable_scope(\r\n        'vs_outer', auxiliary_name_scope=False, reuse=tf.AUTO_REUSE)\r\n\r\n  with tf.name_scope(NSO):\r\n    with VSO:\r\n      with tf.name_scope('ns_inner_1'):\r\n        print((tf.get_variable('var', [1]), tf.constant(1.0, name='const')))\r\n\r\n  with tf.name_scope(NSO):\r\n    with VSO:\r\n      with tf.name_scope('ns_inner_2'):\r\n        print((tf.get_variable('var', [1]), tf.constant(1.0, name='const')))\r\n```\r\n"}