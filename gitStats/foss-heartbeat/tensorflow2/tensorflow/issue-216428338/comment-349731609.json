{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349731609", "html_url": "https://github.com/tensorflow/tensorflow/issues/8658#issuecomment-349731609", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8658", "id": 349731609, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTczMTYwOQ==", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-06T18:29:28Z", "updated_at": "2017-12-06T18:29:28Z", "author_association": "MEMBER", "body_html": "<p>It is absolutely possible. The easiest would be to use <code>tf.estimator.train_and_evaluate</code> with your <code>Estimator</code>,  and add an <code>Exporter</code> in our <code>EvalSpec</code>. The <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/estimator/exporter.py\"><code>Exporter</code></a> is a simple class which\u00a0you derive from to implement whatever behavior you want. It receives each eval result and can decide based on that whether to perform an export (or not). It can also decide what \"export\" means. So, if you want to save the best checkpoints, you would keep the best eval results as state, and if you see a better one, overwrite your exported checkpoint with the current one.</p>", "body_text": "It is absolutely possible. The easiest would be to use tf.estimator.train_and_evaluate with your Estimator,  and add an Exporter in our EvalSpec. The Exporter is a simple class which\u00a0you derive from to implement whatever behavior you want. It receives each eval result and can decide based on that whether to perform an export (or not). It can also decide what \"export\" means. So, if you want to save the best checkpoints, you would keep the best eval results as state, and if you see a better one, overwrite your exported checkpoint with the current one.", "body": "It is absolutely possible. The easiest would be to use `tf.estimator.train_and_evaluate` with your `Estimator`,  and add an `Exporter` in our `EvalSpec`. The [`Exporter`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/estimator/exporter.py) is a simple class which\u00a0you derive from to implement whatever behavior you want. It receives each eval result and can decide based on that whether to perform an export (or not). It can also decide what \"export\" means. So, if you want to save the best checkpoints, you would keep the best eval results as state, and if you see a better one, overwrite your exported checkpoint with the current one."}