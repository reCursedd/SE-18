{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/276142498", "html_url": "https://github.com/tensorflow/tensorflow/issues/4552#issuecomment-276142498", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4552", "id": 276142498, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjE0MjQ5OA==", "user": {"login": "alquraishi", "id": 5205204, "node_id": "MDQ6VXNlcjUyMDUyMDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5205204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alquraishi", "html_url": "https://github.com/alquraishi", "followers_url": "https://api.github.com/users/alquraishi/followers", "following_url": "https://api.github.com/users/alquraishi/following{/other_user}", "gists_url": "https://api.github.com/users/alquraishi/gists{/gist_id}", "starred_url": "https://api.github.com/users/alquraishi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alquraishi/subscriptions", "organizations_url": "https://api.github.com/users/alquraishi/orgs", "repos_url": "https://api.github.com/users/alquraishi/repos", "events_url": "https://api.github.com/users/alquraishi/events{/privacy}", "received_events_url": "https://api.github.com/users/alquraishi/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-30T18:10:12Z", "updated_at": "2017-01-30T18:10:12Z", "author_association": "NONE", "body_html": "<p>I think we may be talking about two distinct levels of abstractions. I understand that \"solving\" the time-optimal or space-optimal memory execution order problem may be difficult. What I'm asking for is something that would prevent TF from executing an op if that would result in an OOM error. Perhaps I'm making an undue assumption: I'm assuming that TF can estimate the memory requirement of a single op. If that's the case, then, given the current state of available memory, it should be able to determine whether executing another op will lead to an OOM or not. If it would, then my desired behavior would be that it just waits. I.e. it sets up a schedule that enforces sequentiality if need be (with some timeout heuristics, etc) to prevent OOM errors.</p>\n<p>Or are you saying that it already does that, but finds itself in an unrecoverable state where computing the next necessary op is simply impossible? I'm somewhat doubtful that's the case, at least in my current graph.</p>", "body_text": "I think we may be talking about two distinct levels of abstractions. I understand that \"solving\" the time-optimal or space-optimal memory execution order problem may be difficult. What I'm asking for is something that would prevent TF from executing an op if that would result in an OOM error. Perhaps I'm making an undue assumption: I'm assuming that TF can estimate the memory requirement of a single op. If that's the case, then, given the current state of available memory, it should be able to determine whether executing another op will lead to an OOM or not. If it would, then my desired behavior would be that it just waits. I.e. it sets up a schedule that enforces sequentiality if need be (with some timeout heuristics, etc) to prevent OOM errors.\nOr are you saying that it already does that, but finds itself in an unrecoverable state where computing the next necessary op is simply impossible? I'm somewhat doubtful that's the case, at least in my current graph.", "body": "I think we may be talking about two distinct levels of abstractions. I understand that \"solving\" the time-optimal or space-optimal memory execution order problem may be difficult. What I'm asking for is something that would prevent TF from executing an op if that would result in an OOM error. Perhaps I'm making an undue assumption: I'm assuming that TF can estimate the memory requirement of a single op. If that's the case, then, given the current state of available memory, it should be able to determine whether executing another op will lead to an OOM or not. If it would, then my desired behavior would be that it just waits. I.e. it sets up a schedule that enforces sequentiality if need be (with some timeout heuristics, etc) to prevent OOM errors.\r\n\r\nOr are you saying that it already does that, but finds itself in an unrecoverable state where computing the next necessary op is simply impossible? I'm somewhat doubtful that's the case, at least in my current graph."}