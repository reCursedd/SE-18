{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/411249734", "html_url": "https://github.com/tensorflow/tensorflow/issues/21432#issuecomment-411249734", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21432", "id": 411249734, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTI0OTczNA==", "user": {"login": "EdwardLin2014", "id": 8342812, "node_id": "MDQ6VXNlcjgzNDI4MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8342812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdwardLin2014", "html_url": "https://github.com/EdwardLin2014", "followers_url": "https://api.github.com/users/EdwardLin2014/followers", "following_url": "https://api.github.com/users/EdwardLin2014/following{/other_user}", "gists_url": "https://api.github.com/users/EdwardLin2014/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdwardLin2014/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdwardLin2014/subscriptions", "organizations_url": "https://api.github.com/users/EdwardLin2014/orgs", "repos_url": "https://api.github.com/users/EdwardLin2014/repos", "events_url": "https://api.github.com/users/EdwardLin2014/events{/privacy}", "received_events_url": "https://api.github.com/users/EdwardLin2014/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-08T00:59:41Z", "updated_at": "2018-08-08T00:59:41Z", "author_association": "NONE", "body_html": "<p><strong>I guess the bug is at the QR Algorithm.</strong> I guess tq.orthogonal_initializer and tf.qr share the same algorithm. So tf.qr also cause this bug.</p>\n<p>To illustrate, I base on the code <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.9/tensorflow/python/ops/init_ops.py\">https://github.com/tensorflow/tensorflow/blob/r1.9/tensorflow/python/ops/init_ops.py</a><br>\nand I re-implemented/simplified my code as follow</p>\n<pre><code>import tensorflow as tf\n\nseed = 1\ntf.set_random_seed(seed)\n\n#shape = [3,3,1,64]                # shape which QR algo always behaves ok \nshape = [39,14,64,372]          # troublesome shape\n# Flatten the input shape with the last dimension remaining\n# its original shape so it works for conv2d\nnum_rows = 1\nfor dim in shape[:-1]:\n    num_rows *= dim\nnum_cols = shape[-1]\nif num_rows &lt; num_cols:\n    flat_shape = (num_cols, num_rows)\nelse:\n    flat_shape = (num_rows, num_cols)\n# Generate a random matrix &amp; Compute the qr factorization\ninitializer = tf.random_normal_initializer(mean=0.0, stddev=1.0, seed=seed, dtype=tf.float32)\ninitialValue = tf.Variable(initializer.__call__(shape=flat_shape))\nq,r = tf.qr(initialValue,full_matrices=False)\n# Make Q uniform\nd = tf.diag_part(r)\nq1 = q * tf.sign(d)\nif num_rows &lt; num_cols:\n    q2 = tf.transpose(q1)\n    Conv1W = tf.reshape(q2, shape)\nelse:\n    Conv1W = tf.reshape(q1, shape)\n\nprint(\"Session 1\")\nwith tf.Session() as sess1:\n    tf.global_variables_initializer().run()    \n    initialValue_eval1 = sess1.run(initialValue)\n    q_eval1 = sess1.run(q)\n    r_eval1 = sess1.run(r)\n    d_eval1 = sess1.run(d)\n    Conv1W_eval1 = sess1.run(Conv1W)\nprint(\"Session 2\")\nwith tf.Session() as sess2:\n    tf.global_variables_initializer().run()\n    initialValue_eval2 = sess2.run(initialValue)\n    q_eval2 = sess2.run(q)\n    r_eval2 = sess2.run(r)\n    d_eval2 = sess2.run(d)\n    Conv1W_eval2 = sess2.run(Conv1W)\n    \nprint('--------------------------------------------------')\nprint('initialValue? %d' % all(initialValue_eval1==initialValue_eval2))\nprint('q? %d' % all(q_eval1==q_eval2))\nprint('r? %d' % all(r_eval1==r_eval2))\nprint('d? %d' % all(d_eval1==d_eval2))\nprint('Conv1W? %d' % all(Conv1W_eval1==Conv1W_eval2))\n</code></pre>", "body_text": "I guess the bug is at the QR Algorithm. I guess tq.orthogonal_initializer and tf.qr share the same algorithm. So tf.qr also cause this bug.\nTo illustrate, I base on the code https://github.com/tensorflow/tensorflow/blob/r1.9/tensorflow/python/ops/init_ops.py\nand I re-implemented/simplified my code as follow\nimport tensorflow as tf\n\nseed = 1\ntf.set_random_seed(seed)\n\n#shape = [3,3,1,64]                # shape which QR algo always behaves ok \nshape = [39,14,64,372]          # troublesome shape\n# Flatten the input shape with the last dimension remaining\n# its original shape so it works for conv2d\nnum_rows = 1\nfor dim in shape[:-1]:\n    num_rows *= dim\nnum_cols = shape[-1]\nif num_rows < num_cols:\n    flat_shape = (num_cols, num_rows)\nelse:\n    flat_shape = (num_rows, num_cols)\n# Generate a random matrix & Compute the qr factorization\ninitializer = tf.random_normal_initializer(mean=0.0, stddev=1.0, seed=seed, dtype=tf.float32)\ninitialValue = tf.Variable(initializer.__call__(shape=flat_shape))\nq,r = tf.qr(initialValue,full_matrices=False)\n# Make Q uniform\nd = tf.diag_part(r)\nq1 = q * tf.sign(d)\nif num_rows < num_cols:\n    q2 = tf.transpose(q1)\n    Conv1W = tf.reshape(q2, shape)\nelse:\n    Conv1W = tf.reshape(q1, shape)\n\nprint(\"Session 1\")\nwith tf.Session() as sess1:\n    tf.global_variables_initializer().run()    \n    initialValue_eval1 = sess1.run(initialValue)\n    q_eval1 = sess1.run(q)\n    r_eval1 = sess1.run(r)\n    d_eval1 = sess1.run(d)\n    Conv1W_eval1 = sess1.run(Conv1W)\nprint(\"Session 2\")\nwith tf.Session() as sess2:\n    tf.global_variables_initializer().run()\n    initialValue_eval2 = sess2.run(initialValue)\n    q_eval2 = sess2.run(q)\n    r_eval2 = sess2.run(r)\n    d_eval2 = sess2.run(d)\n    Conv1W_eval2 = sess2.run(Conv1W)\n    \nprint('--------------------------------------------------')\nprint('initialValue? %d' % all(initialValue_eval1==initialValue_eval2))\nprint('q? %d' % all(q_eval1==q_eval2))\nprint('r? %d' % all(r_eval1==r_eval2))\nprint('d? %d' % all(d_eval1==d_eval2))\nprint('Conv1W? %d' % all(Conv1W_eval1==Conv1W_eval2))", "body": "**I guess the bug is at the QR Algorithm.** I guess tq.orthogonal_initializer and tf.qr share the same algorithm. So tf.qr also cause this bug.\r\n\r\nTo illustrate, I base on the code https://github.com/tensorflow/tensorflow/blob/r1.9/tensorflow/python/ops/init_ops.py\r\nand I re-implemented/simplified my code as follow\r\n```\r\nimport tensorflow as tf\r\n\r\nseed = 1\r\ntf.set_random_seed(seed)\r\n\r\n#shape = [3,3,1,64]                # shape which QR algo always behaves ok \r\nshape = [39,14,64,372]          # troublesome shape\r\n# Flatten the input shape with the last dimension remaining\r\n# its original shape so it works for conv2d\r\nnum_rows = 1\r\nfor dim in shape[:-1]:\r\n    num_rows *= dim\r\nnum_cols = shape[-1]\r\nif num_rows < num_cols:\r\n    flat_shape = (num_cols, num_rows)\r\nelse:\r\n    flat_shape = (num_rows, num_cols)\r\n# Generate a random matrix & Compute the qr factorization\r\ninitializer = tf.random_normal_initializer(mean=0.0, stddev=1.0, seed=seed, dtype=tf.float32)\r\ninitialValue = tf.Variable(initializer.__call__(shape=flat_shape))\r\nq,r = tf.qr(initialValue,full_matrices=False)\r\n# Make Q uniform\r\nd = tf.diag_part(r)\r\nq1 = q * tf.sign(d)\r\nif num_rows < num_cols:\r\n    q2 = tf.transpose(q1)\r\n    Conv1W = tf.reshape(q2, shape)\r\nelse:\r\n    Conv1W = tf.reshape(q1, shape)\r\n\r\nprint(\"Session 1\")\r\nwith tf.Session() as sess1:\r\n    tf.global_variables_initializer().run()    \r\n    initialValue_eval1 = sess1.run(initialValue)\r\n    q_eval1 = sess1.run(q)\r\n    r_eval1 = sess1.run(r)\r\n    d_eval1 = sess1.run(d)\r\n    Conv1W_eval1 = sess1.run(Conv1W)\r\nprint(\"Session 2\")\r\nwith tf.Session() as sess2:\r\n    tf.global_variables_initializer().run()\r\n    initialValue_eval2 = sess2.run(initialValue)\r\n    q_eval2 = sess2.run(q)\r\n    r_eval2 = sess2.run(r)\r\n    d_eval2 = sess2.run(d)\r\n    Conv1W_eval2 = sess2.run(Conv1W)\r\n    \r\nprint('--------------------------------------------------')\r\nprint('initialValue? %d' % all(initialValue_eval1==initialValue_eval2))\r\nprint('q? %d' % all(q_eval1==q_eval2))\r\nprint('r? %d' % all(r_eval1==r_eval2))\r\nprint('d? %d' % all(d_eval1==d_eval2))\r\nprint('Conv1W? %d' % all(Conv1W_eval1==Conv1W_eval2))\r\n```"}