{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21432", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21432/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21432/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21432/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21432", "id": 348209408, "node_id": "MDU6SXNzdWUzNDgyMDk0MDg=", "number": 21432, "title": "BUG: Initial values are still random, even both the graph-level and the operation seed are set", "user": {"login": "EdwardLin2014", "id": 8342812, "node_id": "MDQ6VXNlcjgzNDI4MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8342812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdwardLin2014", "html_url": "https://github.com/EdwardLin2014", "followers_url": "https://api.github.com/users/EdwardLin2014/followers", "following_url": "https://api.github.com/users/EdwardLin2014/following{/other_user}", "gists_url": "https://api.github.com/users/EdwardLin2014/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdwardLin2014/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdwardLin2014/subscriptions", "organizations_url": "https://api.github.com/users/EdwardLin2014/orgs", "repos_url": "https://api.github.com/users/EdwardLin2014/repos", "events_url": "https://api.github.com/users/EdwardLin2014/events{/privacy}", "received_events_url": "https://api.github.com/users/EdwardLin2014/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-08-07T07:58:58Z", "updated_at": "2018-11-14T19:24:42Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu Server &amp; Window 10</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.8.0-0-g93bc2e2072 &amp; v1.9.0-0-g25c197e023</li>\n<li><strong>Python version</strong>: 3.6.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: V9.0.178</li>\n<li><strong>GPU model and memory</strong>: NVIDIA Tesla V100-SXM2-16GB &amp; NVIDIA GeForce GTX 1080 Ti 11GB</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\n\nseed = 1\ntf.set_random_seed(seed)\n\ninitializer1 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nConv1W = tf.identity(tf.Variable(initializer1.__call__(shape=[3,3,1,64])),name='Conv1')\n\ninitializer2 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nConv2W = tf.identity(tf.Variable(initializer2.__call__(shape=[3,3,64,64])),name='Conv2')\n\ninitializer3 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nfc1W = tf.identity(tf.Variable(initializer3.__call__(shape=[39,14,64,372])),name='fc1')\n\ninitializer4 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nfc2W = tf.identity(tf.Variable(initializer4.__call__(shape=[1,1,372,372])),name='fc2')\n\ninitializer5 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nfc3W = tf.identity(tf.Variable(initializer5.__call__(shape=[1,1,372,1])),name='fc3')\n\nprint(\"Session 1\")\nwith tf.Session() as sess1:\n    tf.global_variables_initializer().run()\n    Conv1W_eval1 = sess1.run(Conv1W)\n    Conv2W_eval1 = sess1.run(Conv2W)\n    fc1W_eval1 = sess1.run(fc1W)\n    fc2W_eval1 = sess1.run(fc2W)\n    fc3W_eval1 = sess1.run(fc3W)\n\nprint(\"Session 2\")\nwith tf.Session() as sess2:\n    tf.global_variables_initializer().run()\n    Conv1W_eval2 = sess2.run(Conv1W)\n    Conv2W_eval2 = sess2.run(Conv2W)\n    fc1W_eval2 = sess2.run(fc1W)\n    fc2W_eval2 = sess2.run(fc2W)\n    fc3W_eval2 = sess2.run(fc3W)\nprint('--------------------------------------------------')\nprint('Conv1W? %d' % all(Conv1W_eval1==Conv1W_eval2))\nprint('Conv2W? %d' % all(Conv2W_eval1==Conv2W_eval2))\nprint('fc1W? %d' % all(fc1W_eval1==fc1W_eval2))\nprint('fc2W? %d' % all(fc2W_eval1==fc2W_eval2))\nprint('fc3W? %d' % all(fc3W_eval1==fc3W_eval2))\n\n</code></pre>\n<h3>Describe the problem</h3>\n<p>By executing the above code (one or two times), we can see that the initial value of the tensors, fc1W &amp; fc2W are NOT always the same in both session, even though the graph-level and the operation seed are set.</p>\n<p>The randomness seems to be depended on the shape of the tensors. For example, the initial value of the tensors, Conv1W and Conv2W are always the same.</p>\n<p>Putting all tf.Variable into/under each session has the same effect.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu Server & Window 10\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.8.0-0-g93bc2e2072 & v1.9.0-0-g25c197e023\nPython version: 3.6.2\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: V9.0.178\nGPU model and memory: NVIDIA Tesla V100-SXM2-16GB & NVIDIA GeForce GTX 1080 Ti 11GB\nExact command to reproduce:\n\nSource code / logs\nimport tensorflow as tf\n\nseed = 1\ntf.set_random_seed(seed)\n\ninitializer1 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nConv1W = tf.identity(tf.Variable(initializer1.__call__(shape=[3,3,1,64])),name='Conv1')\n\ninitializer2 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nConv2W = tf.identity(tf.Variable(initializer2.__call__(shape=[3,3,64,64])),name='Conv2')\n\ninitializer3 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nfc1W = tf.identity(tf.Variable(initializer3.__call__(shape=[39,14,64,372])),name='fc1')\n\ninitializer4 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nfc2W = tf.identity(tf.Variable(initializer4.__call__(shape=[1,1,372,372])),name='fc2')\n\ninitializer5 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\nfc3W = tf.identity(tf.Variable(initializer5.__call__(shape=[1,1,372,1])),name='fc3')\n\nprint(\"Session 1\")\nwith tf.Session() as sess1:\n    tf.global_variables_initializer().run()\n    Conv1W_eval1 = sess1.run(Conv1W)\n    Conv2W_eval1 = sess1.run(Conv2W)\n    fc1W_eval1 = sess1.run(fc1W)\n    fc2W_eval1 = sess1.run(fc2W)\n    fc3W_eval1 = sess1.run(fc3W)\n\nprint(\"Session 2\")\nwith tf.Session() as sess2:\n    tf.global_variables_initializer().run()\n    Conv1W_eval2 = sess2.run(Conv1W)\n    Conv2W_eval2 = sess2.run(Conv2W)\n    fc1W_eval2 = sess2.run(fc1W)\n    fc2W_eval2 = sess2.run(fc2W)\n    fc3W_eval2 = sess2.run(fc3W)\nprint('--------------------------------------------------')\nprint('Conv1W? %d' % all(Conv1W_eval1==Conv1W_eval2))\nprint('Conv2W? %d' % all(Conv2W_eval1==Conv2W_eval2))\nprint('fc1W? %d' % all(fc1W_eval1==fc1W_eval2))\nprint('fc2W? %d' % all(fc2W_eval1==fc2W_eval2))\nprint('fc3W? %d' % all(fc3W_eval1==fc3W_eval2))\n\n\nDescribe the problem\nBy executing the above code (one or two times), we can see that the initial value of the tensors, fc1W & fc2W are NOT always the same in both session, even though the graph-level and the operation seed are set.\nThe randomness seems to be depended on the shape of the tensors. For example, the initial value of the tensors, Conv1W and Conv2W are always the same.\nPutting all tf.Variable into/under each session has the same effect.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu Server & Window 10 \r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.8.0-0-g93bc2e2072 & v1.9.0-0-g25c197e023\r\n- **Python version**: 3.6.2\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**: \r\n- **CUDA/cuDNN version**: V9.0.178\r\n- **GPU model and memory**: NVIDIA Tesla V100-SXM2-16GB & NVIDIA GeForce GTX 1080 Ti 11GB\r\n- **Exact command to reproduce**:\r\n\r\n### Source code / logs\r\n```\r\nimport tensorflow as tf\r\n\r\nseed = 1\r\ntf.set_random_seed(seed)\r\n\r\ninitializer1 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\r\nConv1W = tf.identity(tf.Variable(initializer1.__call__(shape=[3,3,1,64])),name='Conv1')\r\n\r\ninitializer2 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\r\nConv2W = tf.identity(tf.Variable(initializer2.__call__(shape=[3,3,64,64])),name='Conv2')\r\n\r\ninitializer3 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\r\nfc1W = tf.identity(tf.Variable(initializer3.__call__(shape=[39,14,64,372])),name='fc1')\r\n\r\ninitializer4 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\r\nfc2W = tf.identity(tf.Variable(initializer4.__call__(shape=[1,1,372,372])),name='fc2')\r\n\r\ninitializer5 = tf.orthogonal_initializer(gain=1.0, seed=seed, dtype=tf.float32)\r\nfc3W = tf.identity(tf.Variable(initializer5.__call__(shape=[1,1,372,1])),name='fc3')\r\n\r\nprint(\"Session 1\")\r\nwith tf.Session() as sess1:\r\n    tf.global_variables_initializer().run()\r\n    Conv1W_eval1 = sess1.run(Conv1W)\r\n    Conv2W_eval1 = sess1.run(Conv2W)\r\n    fc1W_eval1 = sess1.run(fc1W)\r\n    fc2W_eval1 = sess1.run(fc2W)\r\n    fc3W_eval1 = sess1.run(fc3W)\r\n\r\nprint(\"Session 2\")\r\nwith tf.Session() as sess2:\r\n    tf.global_variables_initializer().run()\r\n    Conv1W_eval2 = sess2.run(Conv1W)\r\n    Conv2W_eval2 = sess2.run(Conv2W)\r\n    fc1W_eval2 = sess2.run(fc1W)\r\n    fc2W_eval2 = sess2.run(fc2W)\r\n    fc3W_eval2 = sess2.run(fc3W)\r\nprint('--------------------------------------------------')\r\nprint('Conv1W? %d' % all(Conv1W_eval1==Conv1W_eval2))\r\nprint('Conv2W? %d' % all(Conv2W_eval1==Conv2W_eval2))\r\nprint('fc1W? %d' % all(fc1W_eval1==fc1W_eval2))\r\nprint('fc2W? %d' % all(fc2W_eval1==fc2W_eval2))\r\nprint('fc3W? %d' % all(fc3W_eval1==fc3W_eval2))\r\n\r\n```\r\n\r\n### Describe the problem\r\n\r\nBy executing the above code (one or two times), we can see that the initial value of the tensors, fc1W & fc2W are NOT always the same in both session, even though the graph-level and the operation seed are set.\r\n\r\nThe randomness seems to be depended on the shape of the tensors. For example, the initial value of the tensors, Conv1W and Conv2W are always the same.\r\n\r\nPutting all tf.Variable into/under each session has the same effect."}