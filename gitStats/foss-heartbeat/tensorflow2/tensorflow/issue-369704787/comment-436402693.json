{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/436402693", "html_url": "https://github.com/tensorflow/tensorflow/issues/22952#issuecomment-436402693", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22952", "id": 436402693, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQwMjY5Mw==", "user": {"login": "henrysky", "id": 28623434, "node_id": "MDQ6VXNlcjI4NjIzNDM0", "avatar_url": "https://avatars1.githubusercontent.com/u/28623434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henrysky", "html_url": "https://github.com/henrysky", "followers_url": "https://api.github.com/users/henrysky/followers", "following_url": "https://api.github.com/users/henrysky/following{/other_user}", "gists_url": "https://api.github.com/users/henrysky/gists{/gist_id}", "starred_url": "https://api.github.com/users/henrysky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henrysky/subscriptions", "organizations_url": "https://api.github.com/users/henrysky/orgs", "repos_url": "https://api.github.com/users/henrysky/repos", "events_url": "https://api.github.com/users/henrysky/events{/privacy}", "received_events_url": "https://api.github.com/users/henrysky/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-06T20:47:06Z", "updated_at": "2018-11-06T20:48:02Z", "author_association": "NONE", "body_html": "<p>I am also experiencing this bug. Here is another scenario where this bug should be fixed. <code>predict_generator()</code> should not require the model to be recompiled.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.keras <span class=\"pl-k\">as</span> keras\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">DataSequence</span>(<span class=\"pl-e\">keras</span>.<span class=\"pl-e\">utils</span>.<span class=\"pl-e\">Sequence</span>):\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x_set</span>, <span class=\"pl-smi\">batch_size</span>):\n        <span class=\"pl-c1\">self</span>.x <span class=\"pl-k\">=</span> x_set\n        <span class=\"pl-c1\">self</span>.batch_size <span class=\"pl-k\">=</span> batch_size\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__len__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> np.ceil(<span class=\"pl-c1\">len</span>(<span class=\"pl-c1\">self</span>.x) <span class=\"pl-k\">/</span> <span class=\"pl-c1\">self</span>.batch_size)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">idx</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.x[idx <span class=\"pl-k\">*</span> <span class=\"pl-c1\">self</span>.batch_size:(idx <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">self</span>.batch_size]\n\n<span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> keras.layers.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>.])\nhidden <span class=\"pl-k\">=</span> keras.layers.Dense(<span class=\"pl-c1\">2</span>.)(<span class=\"pl-c1\">input</span>)\noutput <span class=\"pl-k\">=</span> keras.layers.Dense(<span class=\"pl-c1\">2</span>.)(hidden)\n\nmodel <span class=\"pl-k\">=</span> keras.models.Model(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">input</span>, <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>output)\nmodel_2 <span class=\"pl-k\">=</span> keras.models.Model(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">input</span>, <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>hidden)\n\nmodel.compile(<span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>adam<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mse<span class=\"pl-pds\">'</span></span>)\nmodel.fit(np.random.normal(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, (<span class=\"pl-c1\">100</span>)), np.random.normal(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, (<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">2</span>)))\nmodel_2.predict(np.random.normal(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, (<span class=\"pl-c1\">100</span>)))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> it works without compiling model_2</span>\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>using predict() successfully without compiling model<span class=\"pl-pds\">\"</span></span>)\n\ngenerator <span class=\"pl-k\">=</span> DataSequence(np.random.normal(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, (<span class=\"pl-c1\">100</span>)), <span class=\"pl-c1\">100</span>)\nmodel_2.predict_generator(<span class=\"pl-v\">generator</span><span class=\"pl-k\">=</span>generator, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> error raised, it only works if model_2 also compiled</span></pre></div>", "body_text": "I am also experiencing this bug. Here is another scenario where this bug should be fixed. predict_generator() should not require the model to be recompiled.\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.keras as keras\n\nclass DataSequence(keras.utils.Sequence):\n\n    def __init__(self, x_set, batch_size):\n        self.x = x_set\n        self.batch_size = batch_size\n\n    def __len__(self):\n        return np.ceil(len(self.x) / self.batch_size)\n\n    def __getitem__(self, idx):\n        return self.x[idx * self.batch_size:(idx + 1) * self.batch_size]\n\ninput = keras.layers.Input(shape=[1.])\nhidden = keras.layers.Dense(2.)(input)\noutput = keras.layers.Dense(2.)(hidden)\n\nmodel = keras.models.Model(inputs=input, outputs=output)\nmodel_2 = keras.models.Model(inputs=input, outputs=hidden)\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.fit(np.random.normal(0, 1, (100)), np.random.normal(0, 1, (100, 2)))\nmodel_2.predict(np.random.normal(0, 1, (100)))  # it works without compiling model_2\nprint(\"using predict() successfully without compiling model\")\n\ngenerator = DataSequence(np.random.normal(0, 1, (100)), 100)\nmodel_2.predict_generator(generator=generator, steps=1)  # error raised, it only works if model_2 also compiled", "body": "I am also experiencing this bug. Here is another scenario where this bug should be fixed. ``predict_generator()`` should not require the model to be recompiled.\r\n\r\n```python3\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport tensorflow.keras as keras\r\n\r\nclass DataSequence(keras.utils.Sequence):\r\n\r\n    def __init__(self, x_set, batch_size):\r\n        self.x = x_set\r\n        self.batch_size = batch_size\r\n\r\n    def __len__(self):\r\n        return np.ceil(len(self.x) / self.batch_size)\r\n\r\n    def __getitem__(self, idx):\r\n        return self.x[idx * self.batch_size:(idx + 1) * self.batch_size]\r\n\r\ninput = keras.layers.Input(shape=[1.])\r\nhidden = keras.layers.Dense(2.)(input)\r\noutput = keras.layers.Dense(2.)(hidden)\r\n\r\nmodel = keras.models.Model(inputs=input, outputs=output)\r\nmodel_2 = keras.models.Model(inputs=input, outputs=hidden)\r\n\r\nmodel.compile(optimizer='adam', loss='mse')\r\nmodel.fit(np.random.normal(0, 1, (100)), np.random.normal(0, 1, (100, 2)))\r\nmodel_2.predict(np.random.normal(0, 1, (100)))  # it works without compiling model_2\r\nprint(\"using predict() successfully without compiling model\")\r\n\r\ngenerator = DataSequence(np.random.normal(0, 1, (100)), 100)\r\nmodel_2.predict_generator(generator=generator, steps=1)  # error raised, it only works if model_2 also compiled\r\n```"}