{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/378964560", "html_url": "https://github.com/tensorflow/tensorflow/issues/18014#issuecomment-378964560", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18014", "id": 378964560, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODk2NDU2MA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-05T14:53:59Z", "updated_at": "2018-04-05T14:53:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The problem is not in creating the <code>Dataset</code>, but rather that the \"one-shot\" iterator is exhausted after the first iteration. You can either switch to using an \"initializable\" iterator that is initialized each time round the loop, or (easier in this case) use <code>tf.contrib.data.get_single_element()</code> to get the element from the dataset in the loop body without creating an iterator:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default() <span class=\"pl-k\">as</span> graph:\n    zero <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64)\n    ten <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64)\n    one <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">condition</span>(<span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">n</span>):\n        <span class=\"pl-k\">return</span> tf.less(i, ten)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">body</span>(<span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">n</span>):\n        value <span class=\"pl-k\">=</span> ten <span class=\"pl-k\">+</span> i\n        ds <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensors(value)\n        <span class=\"pl-k\">return</span> i <span class=\"pl-k\">+</span> one, n <span class=\"pl-k\">+</span> tf.contrib.data.get_single_element(ds)\n\n    loop <span class=\"pl-k\">=</span> tf.while_loop(condition, body, [zero,  zero])\n\n<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>graph) <span class=\"pl-k\">as</span> S:\n    <span class=\"pl-c1\">print</span> S.run(loop)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> ==&gt; \"(10, 145)\"</span></pre></div>", "body_text": "The problem is not in creating the Dataset, but rather that the \"one-shot\" iterator is exhausted after the first iteration. You can either switch to using an \"initializable\" iterator that is initialized each time round the loop, or (easier in this case) use tf.contrib.data.get_single_element() to get the element from the dataset in the loop body without creating an iterator:\nimport tensorflow as tf\n\nwith tf.Graph().as_default() as graph:\n    zero = tf.constant(0, dtype=tf.int64)\n    ten = tf.constant(10, dtype=tf.int64)\n    one = tf.constant(1, dtype=tf.int64)\n\n    def condition(i, n):\n        return tf.less(i, ten)\n\n    def body(i, n):\n        value = ten + i\n        ds = tf.data.Dataset.from_tensors(value)\n        return i + one, n + tf.contrib.data.get_single_element(ds)\n\n    loop = tf.while_loop(condition, body, [zero,  zero])\n\nwith tf.Session(graph=graph) as S:\n    print S.run(loop)  # ==> \"(10, 145)\"", "body": "The problem is not in creating the `Dataset`, but rather that the \"one-shot\" iterator is exhausted after the first iteration. You can either switch to using an \"initializable\" iterator that is initialized each time round the loop, or (easier in this case) use `tf.contrib.data.get_single_element()` to get the element from the dataset in the loop body without creating an iterator:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.Graph().as_default() as graph:\r\n    zero = tf.constant(0, dtype=tf.int64)\r\n    ten = tf.constant(10, dtype=tf.int64)\r\n    one = tf.constant(1, dtype=tf.int64)\r\n\r\n    def condition(i, n):\r\n        return tf.less(i, ten)\r\n\r\n    def body(i, n):\r\n        value = ten + i\r\n        ds = tf.data.Dataset.from_tensors(value)\r\n        return i + one, n + tf.contrib.data.get_single_element(ds)\r\n\r\n    loop = tf.while_loop(condition, body, [zero,  zero])\r\n\r\nwith tf.Session(graph=graph) as S:\r\n    print S.run(loop)  # ==> \"(10, 145)\"\r\n```"}