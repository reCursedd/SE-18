{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/437941037", "html_url": "https://github.com/tensorflow/tensorflow/issues/23455#issuecomment-437941037", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23455", "id": 437941037, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzk0MTAzNw==", "user": {"login": "vignesh-irtt", "id": 18422526, "node_id": "MDQ6VXNlcjE4NDIyNTI2", "avatar_url": "https://avatars3.githubusercontent.com/u/18422526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vignesh-irtt", "html_url": "https://github.com/vignesh-irtt", "followers_url": "https://api.github.com/users/vignesh-irtt/followers", "following_url": "https://api.github.com/users/vignesh-irtt/following{/other_user}", "gists_url": "https://api.github.com/users/vignesh-irtt/gists{/gist_id}", "starred_url": "https://api.github.com/users/vignesh-irtt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vignesh-irtt/subscriptions", "organizations_url": "https://api.github.com/users/vignesh-irtt/orgs", "repos_url": "https://api.github.com/users/vignesh-irtt/repos", "events_url": "https://api.github.com/users/vignesh-irtt/events{/privacy}", "received_events_url": "https://api.github.com/users/vignesh-irtt/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-12T16:20:18Z", "updated_at": "2018-11-13T06:25:39Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>Your intuition is correct! I can confirm that setting do_not_cache = true and manually deleting the returned MklPrimitive pointer at the end of the scope works perfectly, in fact that's what I did for TF 1.9.</p>\n<p>Otherwise the problem indeed looks like a memory leak but in fact a pointer to each allocated primitive is stored in static thread local hash maps. Unfortunately these pointers never get deleted.</p>\n<p>Thank you for the suggestion and the quick response!</p>\n</blockquote>\n<p>Hi,<br>\ni've tried ur idea of making do_not_cache=true, but memory leak still exists for me but decreased by 40%, can u plz give me ur tf-mkl wheel or ur repo</p>", "body_text": "Your intuition is correct! I can confirm that setting do_not_cache = true and manually deleting the returned MklPrimitive pointer at the end of the scope works perfectly, in fact that's what I did for TF 1.9.\nOtherwise the problem indeed looks like a memory leak but in fact a pointer to each allocated primitive is stored in static thread local hash maps. Unfortunately these pointers never get deleted.\nThank you for the suggestion and the quick response!\n\nHi,\ni've tried ur idea of making do_not_cache=true, but memory leak still exists for me but decreased by 40%, can u plz give me ur tf-mkl wheel or ur repo", "body": "> Your intuition is correct! I can confirm that setting do_not_cache = true and manually deleting the returned MklPrimitive pointer at the end of the scope works perfectly, in fact that's what I did for TF 1.9.\r\n> \r\n> Otherwise the problem indeed looks like a memory leak but in fact a pointer to each allocated primitive is stored in static thread local hash maps. Unfortunately these pointers never get deleted.\r\n> \r\n> Thank you for the suggestion and the quick response!\r\n\r\nHi, \r\n     i've tried ur idea of making do_not_cache=true, but memory leak still exists for me but decreased by 40%, can u plz give me ur tf-mkl wheel or ur repo"}