{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/382662856", "html_url": "https://github.com/tensorflow/tensorflow/issues/13206#issuecomment-382662856", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13206", "id": 382662856, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjY2Mjg1Ng==", "user": {"login": "rasitsimsek", "id": 30691148, "node_id": "MDQ6VXNlcjMwNjkxMTQ4", "avatar_url": "https://avatars1.githubusercontent.com/u/30691148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasitsimsek", "html_url": "https://github.com/rasitsimsek", "followers_url": "https://api.github.com/users/rasitsimsek/followers", "following_url": "https://api.github.com/users/rasitsimsek/following{/other_user}", "gists_url": "https://api.github.com/users/rasitsimsek/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasitsimsek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasitsimsek/subscriptions", "organizations_url": "https://api.github.com/users/rasitsimsek/orgs", "repos_url": "https://api.github.com/users/rasitsimsek/repos", "events_url": "https://api.github.com/users/rasitsimsek/events{/privacy}", "received_events_url": "https://api.github.com/users/rasitsimsek/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-19T09:00:26Z", "updated_at": "2018-04-19T09:00:26Z", "author_association": "NONE", "body_html": "<p>I have written in the comment of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"252090268\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12501\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12501/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12501\">#12501</a> why it is better to check types at compile time for C++. To find wrong types at run-time is harder to find.</p>\n<blockquote>\n<p>I have solved the problems. The main problem of Tensorflow usage in C++ environment is not checking the variable types at compile time. Tensorflow checks variable types at runtime, which makes troubleshooting more difficult.<br>\nE.g. Tensor hypho2_ix( DT_INT64, TensorShape( { 4, 3 } ) );<br>\nThis definition of hypho2_ix is wrong due the numbers 4 and 3 parameters are not int64_t type. But the C++ compiler is not checking the type at compile time. If you using this defined tensor with operations which requires DT_INT64 (int64_t) type then you will have not obvious error. Why check parameter types of Tensor definitions at compile time?<br>\nThe correct definition is (C++11):<br>\nTensor hypho2_ix( DT_INT64, TensorShape( { 4i64, 3i64 } ) );</p>\n</blockquote>", "body_text": "I have written in the comment of #12501 why it is better to check types at compile time for C++. To find wrong types at run-time is harder to find.\n\nI have solved the problems. The main problem of Tensorflow usage in C++ environment is not checking the variable types at compile time. Tensorflow checks variable types at runtime, which makes troubleshooting more difficult.\nE.g. Tensor hypho2_ix( DT_INT64, TensorShape( { 4, 3 } ) );\nThis definition of hypho2_ix is wrong due the numbers 4 and 3 parameters are not int64_t type. But the C++ compiler is not checking the type at compile time. If you using this defined tensor with operations which requires DT_INT64 (int64_t) type then you will have not obvious error. Why check parameter types of Tensor definitions at compile time?\nThe correct definition is (C++11):\nTensor hypho2_ix( DT_INT64, TensorShape( { 4i64, 3i64 } ) );", "body": "I have written in the comment of #12501 why it is better to check types at compile time for C++. To find wrong types at run-time is harder to find.  \r\n\r\n> I have solved the problems. The main problem of Tensorflow usage in C++ environment is not checking the variable types at compile time. Tensorflow checks variable types at runtime, which makes troubleshooting more difficult.\r\nE.g. Tensor hypho2_ix( DT_INT64, TensorShape( { 4, 3 } ) );\r\nThis definition of hypho2_ix is wrong due the numbers 4 and 3 parameters are not int64_t type. But the C++ compiler is not checking the type at compile time. If you using this defined tensor with operations which requires DT_INT64 (int64_t) type then you will have not obvious error. Why check parameter types of Tensor definitions at compile time?\r\nThe correct definition is (C++11):\r\nTensor hypho2_ix( DT_INT64, TensorShape( { 4i64, 3i64 } ) );"}