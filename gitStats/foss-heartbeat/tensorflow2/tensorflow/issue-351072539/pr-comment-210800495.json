{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/210800495", "pull_request_review_id": 147092846, "id": 210800495, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDgwMDQ5NQ==", "diff_hunk": "@@ -0,0 +1,701 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+#include <algorithm>\n+#include <chrono>\n+#include <fstream>\n+#include <sstream>\n+\n+#include \"tensorflow/contrib/azure/az_blob_file_system.h\"\n+#include \"tensorflow/core/lib/io/path.h\"\n+#include \"tensorflow/core/lib/strings/str_util.h\"\n+#include \"tensorflow/core/platform/env.h\"\n+\n+#include \"blob/blob_client.h\"\n+#include \"storage_account.h\"\n+#include \"storage_credential.h\"\n+#include \"storage_errno.h\"\n+\n+namespace tensorflow {\n+namespace {\n+\n+constexpr char kAzScheme[] = \"az\";\n+constexpr char kAzBlobEndpoint[] = \".blob.core.windows.net\";\n+\n+// TODO: DO NOT use a hardcoded path\n+Status GetTmpFilename(string* filename) {\n+  if (!filename) {\n+    return errors::Internal(\"'filename' cannot be nullptr.\");\n+  }\n+#ifndef _WIN32\n+  char buffer[] = \"/tmp/az_blob_filesystem_XXXXXX\";\n+  int fd = mkstemp(buffer);\n+  if (fd < 0) {\n+    return errors::Internal(\"Failed to create a temporary file.\");\n+  }\n+#else\n+  char buffer[] = \"/tmp/az_blob_filesystem_XXXXXX\";\n+  char* ret = _mktemp(buffer);\n+  if (ret == nullptr) {\n+    return errors::Internal(\"Failed to create a temporary file.\");\n+  }\n+#endif\n+  *filename = buffer;\n+  return Status::OK();\n+}\n+\n+/// \\brief Splits a Azure path to a account, container and object.\n+///\n+/// For example, \"az://account-name.blob.core.windows.net/container/path/to/file.txt\" gets split into\n+/// \"account-name\", \"container\" and \"path/to/file.txt\".\n+Status ParseAzBlobPath(StringPiece fname, bool empty_object_ok,\n+                    std::string* account, std::string* container,\n+                    std::string* object) {\n+  if (!account || !object) {\n+    return errors::Internal(\"account and object cannot be null.\");\n+  }\n+  StringPiece scheme, accountp, objectp;\n+  io::ParseURI(fname, &scheme, &accountp, &objectp);\n+  if (scheme != kAzScheme) {\n+    return errors::InvalidArgument(\n+        \"Azure Blob Storage path doesn't start with 'az://': \", fname);\n+  }\n+\n+  if (!str_util::ConsumeSuffix(&accountp, kAzBlobEndpoint)) {\n+    return errors::InvalidArgument(\"Invalid resource uri. Must be of the format az://<account-name>.blob.core.windows.net/<container>/<path>\");\n+  }\n+\n+  *account = accountp.ToString();\n+  if (account->empty() || *account == \".\") {\n+    return errors::InvalidArgument(\n+        \"Azure Blob Storage path doesn't contain a account name: \", fname);\n+  }\n+\n+  str_util::ConsumePrefix(&objectp, \"/\");\n+\n+  auto pos = objectp.find('/');\n+  if (pos == std::string::npos) {\n+    *container = objectp.ToString();\n+    *object = \"\";\n+  } else {\n+    *container = objectp.substr(0, pos).ToString();\n+    *object = objectp.substr(pos + 1).ToString();\n+  }\n+\n+  return Status::OK();\n+}\n+\n+std::string errno_to_string() {\n+  switch (errno) {\n+    case invalid_parameters:\n+      return \"invalid_parameters\";\n+    /* client level*/\n+    case client_init_fail:\n+      return \"client_init_fail\";\n+    case client_already_init:\n+      return \"client_already_init\";\n+    case client_not_init:\n+      return \"client_not_init\";\n+    /* container level*/\n+    case container_already_exists:\n+      return \"container_already_exists\";\n+    case container_not_exists:\n+      return \"container_not_exists\";\n+    case container_name_invalid:\n+      return \"container_name_invalid\";\n+    case container_create_fail:\n+      return \"container_create_fail\";\n+    case container_delete_fail:\n+      return \"container_delete_fail\";\n+    /* blob level*/\n+    case blob__already_exists:\n+      return \"blob__already_exists\";\n+    case blob_not_exists:\n+      return \"blob_not_exists\";\n+    case blob_name_invalid:\n+      return \"blob_name_invalid\";\n+    case blob_delete_fail:\n+      return \"blob_delete_fail\";\n+    case blob_list_fail:\n+      return \"blob_list_fail\";\n+    case blob_copy_fail:\n+      return \"blob_copy_fail\";\n+    case blob_no_content_range:\n+      return \"blob_no_content_range\";\n+    /* unknown error*/\n+    case unknown_error:\n+    default:\n+      return \"unknown_error\";\n+  }\n+}\n+\n+microsoft_azure::storage::blob_client_wrapper CreateAzBlobClientWrapper(\n+    const std::string& account) {\n+  const auto key = std::getenv(\"TF_AZURE_STORAGE_KEY\");\n+  std::shared_ptr<microsoft_azure::storage::storage_credential> credentials;\n+  if (key != nullptr) {\n+    credentials =\n+        std::make_shared<microsoft_azure::storage::shared_key_credential>(\n+            account, key);\n+  } else {\n+    credentials =\n+        std::make_shared<microsoft_azure::storage::anonymous_credential>();\n+  }\n+  auto storage_account =\n+      std::make_shared<microsoft_azure::storage::storage_account>(account,\n+                                                                  credentials);\n+  auto blob_client = std::make_shared<microsoft_azure::storage::blob_client>(\n+      storage_account, 10);\n+  microsoft_azure::storage::blob_client_wrapper blob_client_wrapper(\n+      blob_client);\n+\n+  return blob_client_wrapper;\n+}\n+\n+class AzBlobRandomAccessFile : public RandomAccessFile {\n+ public:\n+  AzBlobRandomAccessFile(const std::string& account, const std::string& container,\n+                      const std::string& object)\n+      : account_(account), container_(container), object_(object) {}\n+\n+  Status Read(uint64 offset, size_t n, StringPiece* result,\n+              char* scratch) const override {\n+    auto blob_client = CreateAzBlobClientWrapper(account_);\n+    std::stringstream ss;\n+    blob_client.download_blob_to_stream(container_, object_, offset, n, ss);", "path": "tensorflow/contrib/azure/az_blob_file_system.cc", "position": null, "original_position": 176, "commit_id": "f47c873c82e024a65150e8f728e7b059336e025c", "original_commit_id": "01d3649d61a16ff8533cd0136da947471a1be59e", "user": {"login": "damienpontifex", "id": 1321276, "node_id": "MDQ6VXNlcjEzMjEyNzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1321276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damienpontifex", "html_url": "https://github.com/damienpontifex", "followers_url": "https://api.github.com/users/damienpontifex/followers", "following_url": "https://api.github.com/users/damienpontifex/following{/other_user}", "gists_url": "https://api.github.com/users/damienpontifex/gists{/gist_id}", "starred_url": "https://api.github.com/users/damienpontifex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damienpontifex/subscriptions", "organizations_url": "https://api.github.com/users/damienpontifex/orgs", "repos_url": "https://api.github.com/users/damienpontifex/repos", "events_url": "https://api.github.com/users/damienpontifex/events{/privacy}", "received_events_url": "https://api.github.com/users/damienpontifex/received_events", "type": "User", "site_admin": false}, "body": "@surry pushed a change now having\r\n```c++\r\nstd::ostringstream oss;\r\noss.rdbuf()->pubsetbuf(scratch, n);\r\n```\r\nThis is new to me, but does seem better than what I had before and profiling has less allocations than before. Let me know if you know of a better way than this.\r\n\r\nTests on Linux still pass, but running on macOS now fails as `scratch` is empty. Would you know why this might happen with this change?", "created_at": "2018-08-17T04:08:08Z", "updated_at": "2018-11-23T03:24:50Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21649#discussion_r210800495", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21649", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/210800495"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21649#discussion_r210800495"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21649"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9781018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/surry\">@surry</a> pushed a change now having</p>\n<div class=\"highlight highlight-source-c++\"><pre>std::ostringstream oss;\noss.rdbuf()-&gt;<span class=\"pl-en\">pubsetbuf</span>(scratch, n);</pre></div>\n<p>This is new to me, but does seem better than what I had before and profiling has less allocations than before. Let me know if you know of a better way than this.</p>\n<p>Tests on Linux still pass, but running on macOS now fails as <code>scratch</code> is empty. Would you know why this might happen with this change?</p>", "body_text": "@surry pushed a change now having\nstd::ostringstream oss;\noss.rdbuf()->pubsetbuf(scratch, n);\nThis is new to me, but does seem better than what I had before and profiling has less allocations than before. Let me know if you know of a better way than this.\nTests on Linux still pass, but running on macOS now fails as scratch is empty. Would you know why this might happen with this change?", "in_reply_to_id": 210639927}