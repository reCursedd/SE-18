{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/380916500", "html_url": "https://github.com/tensorflow/tensorflow/issues/16926#issuecomment-380916500", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16926", "id": 380916500, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDkxNjUwMA==", "user": {"login": "cgarciae", "id": 5862228, "node_id": "MDQ6VXNlcjU4NjIyMjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5862228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgarciae", "html_url": "https://github.com/cgarciae", "followers_url": "https://api.github.com/users/cgarciae/followers", "following_url": "https://api.github.com/users/cgarciae/following{/other_user}", "gists_url": "https://api.github.com/users/cgarciae/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgarciae/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgarciae/subscriptions", "organizations_url": "https://api.github.com/users/cgarciae/orgs", "repos_url": "https://api.github.com/users/cgarciae/repos", "events_url": "https://api.github.com/users/cgarciae/events{/privacy}", "received_events_url": "https://api.github.com/users/cgarciae/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-12T19:21:30Z", "updated_at": "2018-05-19T18:16:45Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=53719\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mattiasarro\">@mattiasarro</a> here is roughly how I do it right now but not how I would propose:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">create_example</span>(<span class=\"pl-smi\">row</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> create tf.Example(...)</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">dataset_generator</span>(<span class=\"pl-smi\">ds</span>, <span class=\"pl-smi\">sess</span>):\n    iterator <span class=\"pl-k\">=</span> ds.make_one_shot_iterator()\n    next_row <span class=\"pl-k\">=</span> iterator.get_next()\n   \n    <span class=\"pl-k\">try</span>:\n        <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n            <span class=\"pl-k\">yield</span> sess.run(next_row)\n\n    <span class=\"pl-k\">except</span> tf.errors.OutOfRangeError:\n        <span class=\"pl-k\">pass</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">create_records</span>(<span class=\"pl-smi\">ds</span>, <span class=\"pl-smi\">record_path</span>):\n    \n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess, tf.python_io.TFRecordWriter(record_path) <span class=\"pl-k\">as</span> writer:\n\n        generator <span class=\"pl-k\">=</span> dataset_generator(ds, sess)\n        \n        <span class=\"pl-k\">for</span> row <span class=\"pl-k\">in</span> generator:\n\n            example <span class=\"pl-k\">=</span> create_example(row)\n            writer.write(example.SerializeToString())</pre></div>", "body_text": "@mattiasarro here is roughly how I do it right now but not how I would propose:\ndef create_example(row):\n    # create tf.Example(...)\n\ndef dataset_generator(ds, sess):\n    iterator = ds.make_one_shot_iterator()\n    next_row = iterator.get_next()\n   \n    try:\n        while True:\n            yield sess.run(next_row)\n\n    except tf.errors.OutOfRangeError:\n        pass\n\ndef create_records(ds, record_path):\n    \n    with tf.Session() as sess, tf.python_io.TFRecordWriter(record_path) as writer:\n\n        generator = dataset_generator(ds, sess)\n        \n        for row in generator:\n\n            example = create_example(row)\n            writer.write(example.SerializeToString())", "body": "@mattiasarro here is roughly how I do it right now but not how I would propose:\r\n```python\r\ndef create_example(row):\r\n    # create tf.Example(...)\r\n\r\ndef dataset_generator(ds, sess):\r\n    iterator = ds.make_one_shot_iterator()\r\n    next_row = iterator.get_next()\r\n   \r\n    try:\r\n        while True:\r\n            yield sess.run(next_row)\r\n\r\n    except tf.errors.OutOfRangeError:\r\n        pass\r\n\r\ndef create_records(ds, record_path):\r\n    \r\n    with tf.Session() as sess, tf.python_io.TFRecordWriter(record_path) as writer:\r\n\r\n        generator = dataset_generator(ds, sess)\r\n        \r\n        for row in generator:\r\n\r\n            example = create_example(row)\r\n            writer.write(example.SerializeToString())\r\n```"}