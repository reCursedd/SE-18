{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/346901663", "html_url": "https://github.com/tensorflow/tensorflow/issues/4841#issuecomment-346901663", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4841", "id": 346901663, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjkwMTY2Mw==", "user": {"login": "archenroot", "id": 553512, "node_id": "MDQ6VXNlcjU1MzUxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/553512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/archenroot", "html_url": "https://github.com/archenroot", "followers_url": "https://api.github.com/users/archenroot/followers", "following_url": "https://api.github.com/users/archenroot/following{/other_user}", "gists_url": "https://api.github.com/users/archenroot/gists{/gist_id}", "starred_url": "https://api.github.com/users/archenroot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/archenroot/subscriptions", "organizations_url": "https://api.github.com/users/archenroot/orgs", "repos_url": "https://api.github.com/users/archenroot/repos", "events_url": "https://api.github.com/users/archenroot/events{/privacy}", "received_events_url": "https://api.github.com/users/archenroot/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-24T22:17:09Z", "updated_at": "2017-11-24T22:17:45Z", "author_association": "NONE", "body_html": "<p>Ok, small update, I had to export some other variables</p>\n<pre><code>export CUDNN_INSTALL_PATH=\"/usr/lib64\"\n\texport TF_NEED_CUDA=\"1\"\n\texport TF_CUDA_VERSION=\"9.0\"\n\texport TF_CUDNN_VERSION=\"7\"\n</code></pre>\n<p>, here is whole content from Ebuild, important is phase configure where I export related variables:</p>\n<pre><code># Copyright 2017 Gentoo Foundation\n# Distributed under the terms of the GNU General Public License v2\n\nEAPI=5\nPYTHON_COMPAT=( python{2_7,3_4} pypy )\n\ninherit eutils multiprocessing distutils-r1 git-r3\n\nDESCRIPTION=\"Library for Machine Intelligence\"\n\nHOMEPAGE=\"https://www.tensorflow.org/\"\nSRC_URI=\"\"\nEGIT_REPO_URI=\"https://github.com/tensorflow/tensorflow\"\nEGIT_COMMIT=\"c9568f1ee51a265db4c5f017baf722b9ea5ecfbb\"\n\nLICENSE=\"Apache-2.0\"\nSLOT=\"0\"\nKEYWORDS=\"~amd64 ~arm ~hppa ~ppc ~ppc64 ~sparc ~x86 ~x86-fbsd ~amd64-linux ~x86-linux ~x86-macos\"\nIUSE=\"-cuda -opencl\"\nRESTRICT=\"primaryuri\"\n\nRDEPEND=\"\n\t&gt;=dev-python/numpy-1.11.2-r1\n\t&gt;=dev-python/six-1.10.0\n\tcuda? (\n          &gt;=dev-libs/nvidia-cuda-cudnn-7.0\n\t  &gt;=dev-util/nvidia-cuda-toolkit-8.0.61\n          &gt;=x11-drivers/nvidia-drivers-3.78.13\n        )\n\"\n\nDEPEND=\"\n\tdev-python/setuptools\n\t&gt;=dev-util/bazel-0.7.0[tools]\n\t&gt;=dev-java/oracle-jdk-bin-1.8.0.152-r1\n\t&gt;=dev-python/markdown-2.6.9\n\t&gt;=dev-python/werkzeug-0.12.2\n\t&gt;=dev-python/bleach-1.5.0\n\t&gt;=dev-python/protobuf-python-3.4.1\n\t&gt;=dev-python/pip-9.0.1-r1\n\t&gt;=dev-python/wheel-0.29.0\n\t&gt;=dev-lang/swig-3.0.12\n\t${RDEPEND}\n\"\n\n#src_prepare() {\n\t#sed -i -e 's/protobuf == 3.0.0a3/protobuf &gt;= 2.6.0/g' \\\n\t#tensorflow/tools/pip_package/setup.py\n#}\n\nsrc_configure() {\n\t\n\texport CUDNN_INSTALL_PATH=\"/usr/lib64\"\n\texport TF_NEED_CUDA=\"1\"\n\texport TF_CUDA_VERSION=\"9.0\"\n\texport TF_CUDNN_VERSION=\"7\"\n\tyes \"\" | ./configure\n\n\tcat &gt; CROSSTOOL &lt;&lt; EOF\ntool_path {\n\tname: \"gcc\"\n\tpath: \"${CC}\"\n}\ntool_path {\n\tname: \"g++\"\n\tpath: \"${CXX}\"\nEOF\n\n\techo \"Will build with $(makeopts_jobs) jobs\"\n\n}\n\nsrc_compile() {\n\taddwrite /proc/self\n\t# Added from bazel ebuild.. I am blind here as I don't understand deeply bazel itself :-)\n\taddpredict /proc\n\telog \"Compile Phase - Starting\"\n\n\tlocal JAVA_HOME_DECL=\"$(java-config --print oracle-jdk-bin-1.8 | grep JAVA_HOME)\"\n\teval \"export $JAVA_HOME_DECL\"\n\n\t# Add /proc/self to avoid a sandbox breakage\n\tlocal -x SANDBOX_WRITE=\"${SANDBOX_WRITE}\"\n\techo \"SANDBOX_WRITE=$SANDBOX_WRITE\"\n\n\telog \"Compile Phase - SANDBOX_WRITE\"\n\n\tcat &gt; bazelrc &lt;&lt; EOF\nstartup --batch\nbuild --spawn_strategy=standalone --genrule_strategy=standalone\nbuild --jobs $(makeopts_jobs)\nEOF\n\texport BAZELRC=\"$PWD/bazelrc\"\n\telog \"Compile Phase - Bazel configured\"\n\tbazel build \\\n\t --spawn_strategy=standalone --genrule_strategy=standalone \\\n\t --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package\n\t elog \"Compile Phase - Bazel build finished\"\n}\n\nsrc_install() {\n\telog \"Install Phase - Starting\"\n\tbazel-bin/tensorflow/tools/pip_package/build_pip_package \"$PWD/tensorflow_pkg\"\n\telog \"Install Phase - PIP package finished\"\n\tlocal ALFA=\"$(find /tmp/empty* -type f -exec sh -c 'echo $(basename {})' \\;)\"\n\tlocal TENSORFLOW_WHEEL_FILE=\"$(find $PWD/tensorflow_pkg/tensorflow* -type f -exec sh -c 'echo $(basename {})' \\;)\"\n\tpip install --root \"${ED}\" \"$PWD/tensorflow_pkg/$TENSORFLOW_WHEEL_FILE\"\n\telog \"Install Phase - PIP install finished\"\n\trm -rf \"${ED}\"/usr/lib*/python*/site-packages/google/protobuf\n\telog \"Install Phase - removal of some files\"\n}\n</code></pre>\n<p>And this works, or in minimum I was able to finish compilation and installation process with CUDA 9 and CUDNN 7, now I will do some hello world test....</p>", "body_text": "Ok, small update, I had to export some other variables\nexport CUDNN_INSTALL_PATH=\"/usr/lib64\"\n\texport TF_NEED_CUDA=\"1\"\n\texport TF_CUDA_VERSION=\"9.0\"\n\texport TF_CUDNN_VERSION=\"7\"\n\n, here is whole content from Ebuild, important is phase configure where I export related variables:\n# Copyright 2017 Gentoo Foundation\n# Distributed under the terms of the GNU General Public License v2\n\nEAPI=5\nPYTHON_COMPAT=( python{2_7,3_4} pypy )\n\ninherit eutils multiprocessing distutils-r1 git-r3\n\nDESCRIPTION=\"Library for Machine Intelligence\"\n\nHOMEPAGE=\"https://www.tensorflow.org/\"\nSRC_URI=\"\"\nEGIT_REPO_URI=\"https://github.com/tensorflow/tensorflow\"\nEGIT_COMMIT=\"c9568f1ee51a265db4c5f017baf722b9ea5ecfbb\"\n\nLICENSE=\"Apache-2.0\"\nSLOT=\"0\"\nKEYWORDS=\"~amd64 ~arm ~hppa ~ppc ~ppc64 ~sparc ~x86 ~x86-fbsd ~amd64-linux ~x86-linux ~x86-macos\"\nIUSE=\"-cuda -opencl\"\nRESTRICT=\"primaryuri\"\n\nRDEPEND=\"\n\t>=dev-python/numpy-1.11.2-r1\n\t>=dev-python/six-1.10.0\n\tcuda? (\n          >=dev-libs/nvidia-cuda-cudnn-7.0\n\t  >=dev-util/nvidia-cuda-toolkit-8.0.61\n          >=x11-drivers/nvidia-drivers-3.78.13\n        )\n\"\n\nDEPEND=\"\n\tdev-python/setuptools\n\t>=dev-util/bazel-0.7.0[tools]\n\t>=dev-java/oracle-jdk-bin-1.8.0.152-r1\n\t>=dev-python/markdown-2.6.9\n\t>=dev-python/werkzeug-0.12.2\n\t>=dev-python/bleach-1.5.0\n\t>=dev-python/protobuf-python-3.4.1\n\t>=dev-python/pip-9.0.1-r1\n\t>=dev-python/wheel-0.29.0\n\t>=dev-lang/swig-3.0.12\n\t${RDEPEND}\n\"\n\n#src_prepare() {\n\t#sed -i -e 's/protobuf == 3.0.0a3/protobuf >= 2.6.0/g' \\\n\t#tensorflow/tools/pip_package/setup.py\n#}\n\nsrc_configure() {\n\t\n\texport CUDNN_INSTALL_PATH=\"/usr/lib64\"\n\texport TF_NEED_CUDA=\"1\"\n\texport TF_CUDA_VERSION=\"9.0\"\n\texport TF_CUDNN_VERSION=\"7\"\n\tyes \"\" | ./configure\n\n\tcat > CROSSTOOL << EOF\ntool_path {\n\tname: \"gcc\"\n\tpath: \"${CC}\"\n}\ntool_path {\n\tname: \"g++\"\n\tpath: \"${CXX}\"\nEOF\n\n\techo \"Will build with $(makeopts_jobs) jobs\"\n\n}\n\nsrc_compile() {\n\taddwrite /proc/self\n\t# Added from bazel ebuild.. I am blind here as I don't understand deeply bazel itself :-)\n\taddpredict /proc\n\telog \"Compile Phase - Starting\"\n\n\tlocal JAVA_HOME_DECL=\"$(java-config --print oracle-jdk-bin-1.8 | grep JAVA_HOME)\"\n\teval \"export $JAVA_HOME_DECL\"\n\n\t# Add /proc/self to avoid a sandbox breakage\n\tlocal -x SANDBOX_WRITE=\"${SANDBOX_WRITE}\"\n\techo \"SANDBOX_WRITE=$SANDBOX_WRITE\"\n\n\telog \"Compile Phase - SANDBOX_WRITE\"\n\n\tcat > bazelrc << EOF\nstartup --batch\nbuild --spawn_strategy=standalone --genrule_strategy=standalone\nbuild --jobs $(makeopts_jobs)\nEOF\n\texport BAZELRC=\"$PWD/bazelrc\"\n\telog \"Compile Phase - Bazel configured\"\n\tbazel build \\\n\t --spawn_strategy=standalone --genrule_strategy=standalone \\\n\t --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package\n\t elog \"Compile Phase - Bazel build finished\"\n}\n\nsrc_install() {\n\telog \"Install Phase - Starting\"\n\tbazel-bin/tensorflow/tools/pip_package/build_pip_package \"$PWD/tensorflow_pkg\"\n\telog \"Install Phase - PIP package finished\"\n\tlocal ALFA=\"$(find /tmp/empty* -type f -exec sh -c 'echo $(basename {})' \\;)\"\n\tlocal TENSORFLOW_WHEEL_FILE=\"$(find $PWD/tensorflow_pkg/tensorflow* -type f -exec sh -c 'echo $(basename {})' \\;)\"\n\tpip install --root \"${ED}\" \"$PWD/tensorflow_pkg/$TENSORFLOW_WHEEL_FILE\"\n\telog \"Install Phase - PIP install finished\"\n\trm -rf \"${ED}\"/usr/lib*/python*/site-packages/google/protobuf\n\telog \"Install Phase - removal of some files\"\n}\n\nAnd this works, or in minimum I was able to finish compilation and installation process with CUDA 9 and CUDNN 7, now I will do some hello world test....", "body": "Ok, small update, I had to export some other variables\r\n```\r\nexport CUDNN_INSTALL_PATH=\"/usr/lib64\"\r\n\texport TF_NEED_CUDA=\"1\"\r\n\texport TF_CUDA_VERSION=\"9.0\"\r\n\texport TF_CUDNN_VERSION=\"7\"\r\n```\r\n\r\n, here is whole content from Ebuild, important is phase configure where I export related variables:\r\n```\r\n# Copyright 2017 Gentoo Foundation\r\n# Distributed under the terms of the GNU General Public License v2\r\n\r\nEAPI=5\r\nPYTHON_COMPAT=( python{2_7,3_4} pypy )\r\n\r\ninherit eutils multiprocessing distutils-r1 git-r3\r\n\r\nDESCRIPTION=\"Library for Machine Intelligence\"\r\n\r\nHOMEPAGE=\"https://www.tensorflow.org/\"\r\nSRC_URI=\"\"\r\nEGIT_REPO_URI=\"https://github.com/tensorflow/tensorflow\"\r\nEGIT_COMMIT=\"c9568f1ee51a265db4c5f017baf722b9ea5ecfbb\"\r\n\r\nLICENSE=\"Apache-2.0\"\r\nSLOT=\"0\"\r\nKEYWORDS=\"~amd64 ~arm ~hppa ~ppc ~ppc64 ~sparc ~x86 ~x86-fbsd ~amd64-linux ~x86-linux ~x86-macos\"\r\nIUSE=\"-cuda -opencl\"\r\nRESTRICT=\"primaryuri\"\r\n\r\nRDEPEND=\"\r\n\t>=dev-python/numpy-1.11.2-r1\r\n\t>=dev-python/six-1.10.0\r\n\tcuda? (\r\n          >=dev-libs/nvidia-cuda-cudnn-7.0\r\n\t  >=dev-util/nvidia-cuda-toolkit-8.0.61\r\n          >=x11-drivers/nvidia-drivers-3.78.13\r\n        )\r\n\"\r\n\r\nDEPEND=\"\r\n\tdev-python/setuptools\r\n\t>=dev-util/bazel-0.7.0[tools]\r\n\t>=dev-java/oracle-jdk-bin-1.8.0.152-r1\r\n\t>=dev-python/markdown-2.6.9\r\n\t>=dev-python/werkzeug-0.12.2\r\n\t>=dev-python/bleach-1.5.0\r\n\t>=dev-python/protobuf-python-3.4.1\r\n\t>=dev-python/pip-9.0.1-r1\r\n\t>=dev-python/wheel-0.29.0\r\n\t>=dev-lang/swig-3.0.12\r\n\t${RDEPEND}\r\n\"\r\n\r\n#src_prepare() {\r\n\t#sed -i -e 's/protobuf == 3.0.0a3/protobuf >= 2.6.0/g' \\\r\n\t#tensorflow/tools/pip_package/setup.py\r\n#}\r\n\r\nsrc_configure() {\r\n\t\r\n\texport CUDNN_INSTALL_PATH=\"/usr/lib64\"\r\n\texport TF_NEED_CUDA=\"1\"\r\n\texport TF_CUDA_VERSION=\"9.0\"\r\n\texport TF_CUDNN_VERSION=\"7\"\r\n\tyes \"\" | ./configure\r\n\r\n\tcat > CROSSTOOL << EOF\r\ntool_path {\r\n\tname: \"gcc\"\r\n\tpath: \"${CC}\"\r\n}\r\ntool_path {\r\n\tname: \"g++\"\r\n\tpath: \"${CXX}\"\r\nEOF\r\n\r\n\techo \"Will build with $(makeopts_jobs) jobs\"\r\n\r\n}\r\n\r\nsrc_compile() {\r\n\taddwrite /proc/self\r\n\t# Added from bazel ebuild.. I am blind here as I don't understand deeply bazel itself :-)\r\n\taddpredict /proc\r\n\telog \"Compile Phase - Starting\"\r\n\r\n\tlocal JAVA_HOME_DECL=\"$(java-config --print oracle-jdk-bin-1.8 | grep JAVA_HOME)\"\r\n\teval \"export $JAVA_HOME_DECL\"\r\n\r\n\t# Add /proc/self to avoid a sandbox breakage\r\n\tlocal -x SANDBOX_WRITE=\"${SANDBOX_WRITE}\"\r\n\techo \"SANDBOX_WRITE=$SANDBOX_WRITE\"\r\n\r\n\telog \"Compile Phase - SANDBOX_WRITE\"\r\n\r\n\tcat > bazelrc << EOF\r\nstartup --batch\r\nbuild --spawn_strategy=standalone --genrule_strategy=standalone\r\nbuild --jobs $(makeopts_jobs)\r\nEOF\r\n\texport BAZELRC=\"$PWD/bazelrc\"\r\n\telog \"Compile Phase - Bazel configured\"\r\n\tbazel build \\\r\n\t --spawn_strategy=standalone --genrule_strategy=standalone \\\r\n\t --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package\r\n\t elog \"Compile Phase - Bazel build finished\"\r\n}\r\n\r\nsrc_install() {\r\n\telog \"Install Phase - Starting\"\r\n\tbazel-bin/tensorflow/tools/pip_package/build_pip_package \"$PWD/tensorflow_pkg\"\r\n\telog \"Install Phase - PIP package finished\"\r\n\tlocal ALFA=\"$(find /tmp/empty* -type f -exec sh -c 'echo $(basename {})' \\;)\"\r\n\tlocal TENSORFLOW_WHEEL_FILE=\"$(find $PWD/tensorflow_pkg/tensorflow* -type f -exec sh -c 'echo $(basename {})' \\;)\"\r\n\tpip install --root \"${ED}\" \"$PWD/tensorflow_pkg/$TENSORFLOW_WHEEL_FILE\"\r\n\telog \"Install Phase - PIP install finished\"\r\n\trm -rf \"${ED}\"/usr/lib*/python*/site-packages/google/protobuf\r\n\telog \"Install Phase - removal of some files\"\r\n}\r\n```\r\n\r\nAnd this works, or in minimum I was able to finish compilation and installation process with CUDA 9 and CUDNN 7, now I will do some hello world test.... "}