{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/296871859", "html_url": "https://github.com/tensorflow/tensorflow/issues/9401#issuecomment-296871859", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9401", "id": 296871859, "node_id": "MDEyOklzc3VlQ29tbWVudDI5Njg3MTg1OQ==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-25T02:13:23Z", "updated_at": "2017-04-25T02:13:23Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">as of this week, on master branch and in the nightlies, an rnncell carries\nits variables around with it.\n\n<a href=\"https://github.com/tensorflow/tensorflow/commit/e8482ab23bd0fce5c2941f6a190158bca2610a35\" class=\"commit-link\"><tt>e8482ab</tt></a>\n</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Apr 24, 2017 6:46 PM, \"weipingpku\" ***@***.***&gt; wrote:\n Update:\n Actually with TF 1.0.1(built from binary), in code:\n\n with tf.variable_scope('rnn1'):\n     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n with tf.variable_scope('rnn2'):\n     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n\n it's *doesn't reuse* the RNNCell \"cell\", the weights and biases have\n different names as following(just first cell here).\n\n rnn1/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/weights:0\n rnn2/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/weights:0\n\n In this simple case, we can put these two dynamic unrolling in the same\n variable scope if we wanna reuse RNNCell. Like:\n\n with tf.variable_scope('rnn1'):\n     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n     tf.get_variable_scope().reuse_variables()\n     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n\n There will be exactly one set of RNN parameters. But under some more\n complicated situations, where other wrappers may be added to original\n RNNCell, it's hard to reuse one BasicLSTMCell.\n For example:\n\n    -\n\n    \"rnn\" will be added to variable names if we use \"dynamic_rnn\".\n    -\n\n    \"attention\" will be added to variable names if we use\n    \"AttentionWrapper\".\n    -\n\n    \"decoder\" will be added to variable names if we use some instances of\n    \"Decoder\".\n    -\n\n    ...\n\n Looking forward to more suggestions on this.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"223704639\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9401\" href=\"https://github.com/tensorflow/tensorflow/issues/9401#issuecomment-296868157\">#9401 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/ABtim9QvbPNlZAa3tG3U7wg8NM0P0NMjks5rzVB5gaJpZM4NFsxi\">https://github.com/notifications/unsubscribe-auth/ABtim9QvbPNlZAa3tG3U7wg8NM0P0NMjks5rzVB5gaJpZM4NFsxi</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "as of this week, on master branch and in the nightlies, an rnncell carries\nits variables around with it.\n\ne8482ab\n\n\u2026\nOn Apr 24, 2017 6:46 PM, \"weipingpku\" ***@***.***> wrote:\n Update:\n Actually with TF 1.0.1(built from binary), in code:\n\n with tf.variable_scope('rnn1'):\n     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n with tf.variable_scope('rnn2'):\n     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n\n it's *doesn't reuse* the RNNCell \"cell\", the weights and biases have\n different names as following(just first cell here).\n\n rnn1/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/weights:0\n rnn2/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/weights:0\n\n In this simple case, we can put these two dynamic unrolling in the same\n variable scope if we wanna reuse RNNCell. Like:\n\n with tf.variable_scope('rnn1'):\n     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n     tf.get_variable_scope().reuse_variables()\n     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n\n There will be exactly one set of RNN parameters. But under some more\n complicated situations, where other wrappers may be added to original\n RNNCell, it's hard to reuse one BasicLSTMCell.\n For example:\n\n    -\n\n    \"rnn\" will be added to variable names if we use \"dynamic_rnn\".\n    -\n\n    \"attention\" will be added to variable names if we use\n    \"AttentionWrapper\".\n    -\n\n    \"decoder\" will be added to variable names if we use some instances of\n    \"Decoder\".\n    -\n\n    ...\n\n Looking forward to more suggestions on this.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#9401 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/ABtim9QvbPNlZAa3tG3U7wg8NM0P0NMjks5rzVB5gaJpZM4NFsxi>\n .", "body": "as of this week, on master branch and in the nightlies, an rnncell carries\nits variables around with it.\n\nhttps://github.com/tensorflow/tensorflow/commit/e8482ab23bd0fce5c2941f6a190158bca2610a35\n\nOn Apr 24, 2017 6:46 PM, \"weipingpku\" <notifications@github.com> wrote:\n\n> Update:\n> Actually with TF 1.0.1(built from binary), in code:\n>\n> with tf.variable_scope('rnn1'):\n>     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n> with tf.variable_scope('rnn2'):\n>     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n>\n> it's *doesn't reuse* the RNNCell \"cell\", the weights and biases have\n> different names as following(just first cell here).\n>\n> rnn1/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/weights:0\n> rnn2/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/weights:0\n>\n> In this simple case, we can put these two dynamic unrolling in the same\n> variable scope if we wanna reuse RNNCell. Like:\n>\n> with tf.variable_scope('rnn1'):\n>     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n>     tf.get_variable_scope().reuse_variables()\n>     _, state = tf.nn.dynamic_rnn(cell, inputs=inputs, initial_state=zero_state)\n>\n> There will be exactly one set of RNN parameters. But under some more\n> complicated situations, where other wrappers may be added to original\n> RNNCell, it's hard to reuse one BasicLSTMCell.\n> For example:\n>\n>    -\n>\n>    \"rnn\" will be added to variable names if we use \"dynamic_rnn\".\n>    -\n>\n>    \"attention\" will be added to variable names if we use\n>    \"AttentionWrapper\".\n>    -\n>\n>    \"decoder\" will be added to variable names if we use some instances of\n>    \"Decoder\".\n>    -\n>\n>    ...\n>\n> Looking forward to more suggestions on this.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/9401#issuecomment-296868157>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABtim9QvbPNlZAa3tG3U7wg8NM0P0NMjks5rzVB5gaJpZM4NFsxi>\n> .\n>\n"}