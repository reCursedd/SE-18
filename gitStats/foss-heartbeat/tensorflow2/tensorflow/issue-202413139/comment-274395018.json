{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/274395018", "html_url": "https://github.com/tensorflow/tensorflow/issues/7008#issuecomment-274395018", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7008", "id": 274395018, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDM5NTAxOA==", "user": {"login": "cancan101", "id": 51059, "node_id": "MDQ6VXNlcjUxMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cancan101", "html_url": "https://github.com/cancan101", "followers_url": "https://api.github.com/users/cancan101/followers", "following_url": "https://api.github.com/users/cancan101/following{/other_user}", "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}", "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions", "organizations_url": "https://api.github.com/users/cancan101/orgs", "repos_url": "https://api.github.com/users/cancan101/repos", "events_url": "https://api.github.com/users/cancan101/events{/privacy}", "received_events_url": "https://api.github.com/users/cancan101/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-23T03:57:08Z", "updated_at": "2017-01-23T06:00:03Z", "author_association": "CONTRIBUTOR", "body_html": "<p>If I load the meta file:</p>\n<div class=\"highlight highlight-source-python\"><pre>meta_graph_def <span class=\"pl-k\">=</span> meta_graph_pb2.MetaGraphDef()\nmeta_graph_def.ParseFromString(file_io.read_file_to_string(<span class=\"pl-c1\">...</span>))</pre></div>\n<p>I do see the shape saved on the <code>_output_shapes</code> key on the <code>graph_def</code>:</p>\n<pre><code>node {\n  name: \"Placeholder\"\n  op: \"Placeholder\"\n  attr {\n    key: \"_output_shapes\"\n    value {\n      list {\n        shape {\n          dim {\n            size: -1\n          }\n          dim {\n            size: 225\n          }\n          dim {\n            size: 300\n          }\n          dim {\n            size: 1\n          }\n        }\n      }\n    }\n  }\n  attr {\n    key: \"dtype\"\n    value {\n      type: DT_FLOAT\n    }\n  }\n  attr {\n    key: \"shape\"\n    value {\n      shape {\n      }\n    }\n  }\n}\n</code></pre>\n<p>However that value is not on the actual shape attribute not in the <code>meta_info_def</code>:</p>\n<pre><code>  op {\n    name: \"Placeholder\"\n    output_arg {\n      name: \"output\"\n      type_attr: \"dtype\"\n    }\n    attr {\n      name: \"dtype\"\n      type: \"type\"\n    }\n    attr {\n      name: \"shape\"\n      type: \"shape\"\n      default_value {\n        shape {\n        }\n      }\n    }\n  }\n</code></pre>\n<p>The issue seems like it might be in session_bundle.py:</p>\n<div class=\"highlight highlight-source-python\"><pre>  collection_def <span class=\"pl-k\">=</span> meta_graph_def.collection_def\n  graph_def <span class=\"pl-k\">=</span> tf.GraphDef()\n  <span class=\"pl-k\">if</span> constants.<span class=\"pl-c1\">GRAPH_KEY</span> <span class=\"pl-k\">in</span> collection_def:\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Use serving graph_def in MetaGraphDef collection_def if exists</span>\n    graph_def_any <span class=\"pl-k\">=</span> collection_def[constants.<span class=\"pl-c1\">GRAPH_KEY</span>].any_list.value\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(graph_def_any) <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">1</span>:\n      <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">RuntimeError</span>(\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expected exactly one serving GraphDef in : <span class=\"pl-c1\">%s</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> meta_graph_def)\n    <span class=\"pl-k\">else</span>:\n      graph_def_any[<span class=\"pl-c1\">0</span>].Unpack(graph_def)\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Replace the graph def in meta graph proto.</span>\n      meta_graph_def.graph_def.CopyFrom(graph_def)</pre></div>\n<p>The serving graph seems to be missing the <code>_output_shapes</code> attr which means this value gets copies over and not used by <code>importer</code> to restore the shape.</p>", "body_text": "If I load the meta file:\nmeta_graph_def = meta_graph_pb2.MetaGraphDef()\nmeta_graph_def.ParseFromString(file_io.read_file_to_string(...))\nI do see the shape saved on the _output_shapes key on the graph_def:\nnode {\n  name: \"Placeholder\"\n  op: \"Placeholder\"\n  attr {\n    key: \"_output_shapes\"\n    value {\n      list {\n        shape {\n          dim {\n            size: -1\n          }\n          dim {\n            size: 225\n          }\n          dim {\n            size: 300\n          }\n          dim {\n            size: 1\n          }\n        }\n      }\n    }\n  }\n  attr {\n    key: \"dtype\"\n    value {\n      type: DT_FLOAT\n    }\n  }\n  attr {\n    key: \"shape\"\n    value {\n      shape {\n      }\n    }\n  }\n}\n\nHowever that value is not on the actual shape attribute not in the meta_info_def:\n  op {\n    name: \"Placeholder\"\n    output_arg {\n      name: \"output\"\n      type_attr: \"dtype\"\n    }\n    attr {\n      name: \"dtype\"\n      type: \"type\"\n    }\n    attr {\n      name: \"shape\"\n      type: \"shape\"\n      default_value {\n        shape {\n        }\n      }\n    }\n  }\n\nThe issue seems like it might be in session_bundle.py:\n  collection_def = meta_graph_def.collection_def\n  graph_def = tf.GraphDef()\n  if constants.GRAPH_KEY in collection_def:\n    # Use serving graph_def in MetaGraphDef collection_def if exists\n    graph_def_any = collection_def[constants.GRAPH_KEY].any_list.value\n    if len(graph_def_any) != 1:\n      raise RuntimeError(\n          \"Expected exactly one serving GraphDef in : %s\" % meta_graph_def)\n    else:\n      graph_def_any[0].Unpack(graph_def)\n      # Replace the graph def in meta graph proto.\n      meta_graph_def.graph_def.CopyFrom(graph_def)\nThe serving graph seems to be missing the _output_shapes attr which means this value gets copies over and not used by importer to restore the shape.", "body": "If I load the meta file:\r\n```python\r\nmeta_graph_def = meta_graph_pb2.MetaGraphDef()\r\nmeta_graph_def.ParseFromString(file_io.read_file_to_string(...))\r\n```\r\nI do see the shape saved on the `_output_shapes` key on the `graph_def`:\r\n```\r\nnode {\r\n  name: \"Placeholder\"\r\n  op: \"Placeholder\"\r\n  attr {\r\n    key: \"_output_shapes\"\r\n    value {\r\n      list {\r\n        shape {\r\n          dim {\r\n            size: -1\r\n          }\r\n          dim {\r\n            size: 225\r\n          }\r\n          dim {\r\n            size: 300\r\n          }\r\n          dim {\r\n            size: 1\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  attr {\r\n    key: \"dtype\"\r\n    value {\r\n      type: DT_FLOAT\r\n    }\r\n  }\r\n  attr {\r\n    key: \"shape\"\r\n    value {\r\n      shape {\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nHowever that value is not on the actual shape attribute not in the `meta_info_def`:\r\n```\r\n  op {\r\n    name: \"Placeholder\"\r\n    output_arg {\r\n      name: \"output\"\r\n      type_attr: \"dtype\"\r\n    }\r\n    attr {\r\n      name: \"dtype\"\r\n      type: \"type\"\r\n    }\r\n    attr {\r\n      name: \"shape\"\r\n      type: \"shape\"\r\n      default_value {\r\n        shape {\r\n        }\r\n      }\r\n    }\r\n  }\r\n```\r\nThe issue seems like it might be in session_bundle.py:\r\n```python\r\n  collection_def = meta_graph_def.collection_def\r\n  graph_def = tf.GraphDef()\r\n  if constants.GRAPH_KEY in collection_def:\r\n    # Use serving graph_def in MetaGraphDef collection_def if exists\r\n    graph_def_any = collection_def[constants.GRAPH_KEY].any_list.value\r\n    if len(graph_def_any) != 1:\r\n      raise RuntimeError(\r\n          \"Expected exactly one serving GraphDef in : %s\" % meta_graph_def)\r\n    else:\r\n      graph_def_any[0].Unpack(graph_def)\r\n      # Replace the graph def in meta graph proto.\r\n      meta_graph_def.graph_def.CopyFrom(graph_def)\r\n```\r\nThe serving graph seems to be missing the `_output_shapes` attr which means this value gets copies over and not used by `importer` to restore the shape."}