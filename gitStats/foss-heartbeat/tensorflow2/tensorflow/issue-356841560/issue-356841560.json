{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22054", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22054/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22054/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22054/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22054", "id": 356841560, "node_id": "MDU6SXNzdWUzNTY4NDE1NjA=", "number": 22054, "title": "map_fn gives colocation errors with integer typed input tensors", "user": {"login": "maharjun", "id": 4582526, "node_id": "MDQ6VXNlcjQ1ODI1MjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4582526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maharjun", "html_url": "https://github.com/maharjun", "followers_url": "https://api.github.com/users/maharjun/followers", "following_url": "https://api.github.com/users/maharjun/following{/other_user}", "gists_url": "https://api.github.com/users/maharjun/gists{/gist_id}", "starred_url": "https://api.github.com/users/maharjun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maharjun/subscriptions", "organizations_url": "https://api.github.com/users/maharjun/orgs", "repos_url": "https://api.github.com/users/maharjun/repos", "events_url": "https://api.github.com/users/maharjun/events{/privacy}", "received_events_url": "https://api.github.com/users/maharjun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-09-04T14:39:52Z", "updated_at": "2018-09-21T20:48:37Z", "closed_at": "2018-09-21T20:48:37Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nyes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nCentOS Linux release 7.4.1708</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary (pip3 install tensorflow-gpu==1.9.0)</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nv1.9.0-0-g25c197e023 1.9.0</li>\n<li><strong>Python version</strong>:<br>\n3.6.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\n9.0.176</li>\n<li><strong>GPU model and memory</strong>:<br>\nGeForce GTX-1080 - 8GB memory</li>\n<li><strong>Exact command to reproduce</strong>:<br>\n<code>python3 map_fn_GPU_error.py</code></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The <code>tf.map_fn</code> function raises the following error if I provide two tensors of input one of which is <code>tf.float32</code> and the other <code>tf.int64</code>. This error doesn't appear if both of them are <code>tf.float32</code>.</p>\n<pre><code>tensorflow.python.framework.errors_impl.InvalidArgumentError: Cannot assign a device for operation 'map/TensorArray_1': Could not satisfy explicit device specification '' because the node was colocated with a group of nodes that required incompatible device '/device:GPU:0'\nColocation Debug Info:                                                                                                     \nColocation group had the following types and devices:\nTensorArrayReadV3: CPU                                                                                                    \nEnter: GPU CPU                                                                        \nTensorArrayV3: CPU                         \nTensorArrayScatterV3: CPU                                                                                                                                      \nPlaceholder: GPU CPU                                                                                   \n                                                           \nColocation members and user-requested devices:                   \n  RaggedLengths (Placeholder) /device:GPU:0\n  map/TensorArray_1 (TensorArrayV3)                                                                                                                            \n  map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3 (TensorArrayScatterV3) /device:GPU:0\n  map/while/TensorArrayReadV3_1/Enter (Enter) /device:GPU:0\n  map/while/TensorArrayReadV3_1 (TensorArrayReadV3) /device:GPU:0\n                                                  \n         [[Node: map/TensorArray_1 = TensorArrayV3[clear_after_read=true, dtype=DT_INT64, dynamic_size=false, element_shape=&lt;unknown&gt;, identical_element_shapes=true, tensor_array_name=\"\"](map/strided_slice)]]\n                                                                                                                            \nCaused by op 'map/TensorArray_1', defined at:\n  File \"map_fn_GPU_error.py\", line 33, in &lt;module&gt;                                                                              \n    dtype=tf.float32)                                      \n  File \"/my/python/package/path/tensorflow/python/ops/functional_ops.py\", line 420, in map_fn    \n    for elem in elems_flat]                    \n  File \"/my/python/package/path/tensorflow/python/ops/functional_ops.py\", line 420, in &lt;listcomp&gt;                               \n    for elem in elems_flat]                      \n  File \"/my/python/package/path/tensorflow/python/ops/tensor_array_ops.py\", line 754, in __init__\n    name=name)                                                           \n  File \"/my/python/package/path/tensorflow/python/ops/tensor_array_ops.py\", line 160, in __init__         \n    self._handle, self._flow = create()            \n  File \"/my/python/package/path/tensorflow/python/ops/tensor_array_ops.py\", line 157, in create                                 \n    name=scope)   \n  File \"/my/python/package/path/tensorflow/python/ops/gen_data_flow_ops.py\", line 7157, in tensor_array_v3\n    tensor_array_name=tensor_array_name, name=name)                  \n  File \"/my/python/package/path/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)                                                                    \n  File \"/my/python/package/path/tensorflow/python/framework/ops.py\", line 3414, in create_op\n    op_def=op_def)                                                                                                                                             \n  File \"/my/python/package/path/tensorflow/python/framework/ops.py\", line 1740, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access    \n\n</code></pre>\n<p>This is triggered by the line<br>\n<code>sess.run(tf.global_variables_initializer())</code> in the code below. This code works perfectly on CPU however, I cannot seem to force placement on the GPU.</p>\n<h3>Source code / logs</h3>\n<p>This is a minimal example to reproduce the above error. (This is the file named <code>map_fn_GPU_error.py</code> used in the command above)</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nwith_gpu <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n<span class=\"pl-k\">if</span> with_gpu:\n    device_name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/device:GPU:0<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">else</span>:\n    device_name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/device:CPU:*<span class=\"pl-pds\">'</span></span>\n\nbatch_size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">32</span>\nmax_ragged_dim <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\nembedding_dim <span class=\"pl-k\">=</span> <span class=\"pl-c1\">20</span>\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">ragged_function</span>(<span class=\"pl-smi\">ragged_input</span>, <span class=\"pl-smi\">length_of_input</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> length_of_input is not used here but is in the actual function</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> The error is caused whether or not it is used</span>\n    <span class=\"pl-k\">return</span> tf.reduce_sum(ragged_input, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">final_loss_function</span>(<span class=\"pl-smi\">ragged_function_outputs</span>):\n    weights <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>LossWeights<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32,\n                              <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(ragged_function_outputs.shape[<span class=\"pl-c1\">1</span>], <span class=\"pl-c1\">1</span>))\n    <span class=\"pl-k\">return</span> tf.reduce_sum(tf.matmul(ragged_function_outputs, weights))\n\n\n<span class=\"pl-k\">with</span> tf.device(device_name):\n    input_ragged_mat <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>RaggedMatrix<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32,\n                                      <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">None</span>, max_ragged_dim, embedding_dim))\n    input_ragged_lengths <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>RaggedLengths<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64,\n                                          <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">None</span>,))\n\n    ragged_function_outputs <span class=\"pl-k\">=</span> tf.map_fn(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: ragged_function(<span class=\"pl-k\">*</span>x),\n                                        [input_ragged_mat, input_ragged_lengths], \n                                        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Note that input_ragged_lengths is of type int64</span>\n                                        <span class=\"pl-c\"><span class=\"pl-c\">#</span> This leads to an error on GPU placement</span>\n                                        <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    final_loss <span class=\"pl-k\">=</span> final_loss_function(ragged_function_outputs)\n\n    optimizer <span class=\"pl-k\">=</span> tf.train.AdamOptimizer(<span class=\"pl-v\">learning_rate</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-3</span>)\n    train_op <span class=\"pl-k\">=</span> optimizer.minimize(final_loss)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create input ragged_matrices, with zeros beyond the actual length</span>\nragged_input_mat <span class=\"pl-k\">=</span> np.random.random(<span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(batch_size, max_ragged_dim, embedding_dim))\nragged_input_length_mat <span class=\"pl-k\">=</span> np.random.randint(max_ragged_dim, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(batch_size,)) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>\n<span class=\"pl-k\">for</span> i, rlen <span class=\"pl-k\">in</span> <span class=\"pl-c1\">enumerate</span>(ragged_input_length_mat):\n    ragged_input_mat[i, rlen:max_ragged_dim] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    feed_dict <span class=\"pl-k\">=</span> {input_ragged_mat: ragged_input_mat,\n                 input_ragged_lengths: ragged_input_length_mat}\n\n    sess.run(tf.global_variables_initializer())\n\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Calculating Final Loss<span class=\"pl-pds\">\"</span></span>)\n    sess.run([final_loss],\n             <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>feed_dict)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Running Train operation<span class=\"pl-pds\">\"</span></span>)\n    sess.run([train_op],\n             <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>feed_dict)</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nyes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nCentOS Linux release 7.4.1708\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary):\nbinary (pip3 install tensorflow-gpu==1.9.0)\nTensorFlow version (use command below):\nv1.9.0-0-g25c197e023 1.9.0\nPython version:\n3.6.4\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\n9.0.176\nGPU model and memory:\nGeForce GTX-1080 - 8GB memory\nExact command to reproduce:\npython3 map_fn_GPU_error.py\n\nDescribe the problem\nThe tf.map_fn function raises the following error if I provide two tensors of input one of which is tf.float32 and the other tf.int64. This error doesn't appear if both of them are tf.float32.\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Cannot assign a device for operation 'map/TensorArray_1': Could not satisfy explicit device specification '' because the node was colocated with a group of nodes that required incompatible device '/device:GPU:0'\nColocation Debug Info:                                                                                                     \nColocation group had the following types and devices:\nTensorArrayReadV3: CPU                                                                                                    \nEnter: GPU CPU                                                                        \nTensorArrayV3: CPU                         \nTensorArrayScatterV3: CPU                                                                                                                                      \nPlaceholder: GPU CPU                                                                                   \n                                                           \nColocation members and user-requested devices:                   \n  RaggedLengths (Placeholder) /device:GPU:0\n  map/TensorArray_1 (TensorArrayV3)                                                                                                                            \n  map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3 (TensorArrayScatterV3) /device:GPU:0\n  map/while/TensorArrayReadV3_1/Enter (Enter) /device:GPU:0\n  map/while/TensorArrayReadV3_1 (TensorArrayReadV3) /device:GPU:0\n                                                  \n         [[Node: map/TensorArray_1 = TensorArrayV3[clear_after_read=true, dtype=DT_INT64, dynamic_size=false, element_shape=<unknown>, identical_element_shapes=true, tensor_array_name=\"\"](map/strided_slice)]]\n                                                                                                                            \nCaused by op 'map/TensorArray_1', defined at:\n  File \"map_fn_GPU_error.py\", line 33, in <module>                                                                              \n    dtype=tf.float32)                                      \n  File \"/my/python/package/path/tensorflow/python/ops/functional_ops.py\", line 420, in map_fn    \n    for elem in elems_flat]                    \n  File \"/my/python/package/path/tensorflow/python/ops/functional_ops.py\", line 420, in <listcomp>                               \n    for elem in elems_flat]                      \n  File \"/my/python/package/path/tensorflow/python/ops/tensor_array_ops.py\", line 754, in __init__\n    name=name)                                                           \n  File \"/my/python/package/path/tensorflow/python/ops/tensor_array_ops.py\", line 160, in __init__         \n    self._handle, self._flow = create()            \n  File \"/my/python/package/path/tensorflow/python/ops/tensor_array_ops.py\", line 157, in create                                 \n    name=scope)   \n  File \"/my/python/package/path/tensorflow/python/ops/gen_data_flow_ops.py\", line 7157, in tensor_array_v3\n    tensor_array_name=tensor_array_name, name=name)                  \n  File \"/my/python/package/path/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)                                                                    \n  File \"/my/python/package/path/tensorflow/python/framework/ops.py\", line 3414, in create_op\n    op_def=op_def)                                                                                                                                             \n  File \"/my/python/package/path/tensorflow/python/framework/ops.py\", line 1740, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access    \n\n\nThis is triggered by the line\nsess.run(tf.global_variables_initializer()) in the code below. This code works perfectly on CPU however, I cannot seem to force placement on the GPU.\nSource code / logs\nThis is a minimal example to reproduce the above error. (This is the file named map_fn_GPU_error.py used in the command above)\nimport tensorflow as tf\nimport numpy as np\n\nwith_gpu = True\nif with_gpu:\n    device_name = '/device:GPU:0'\nelse:\n    device_name = '/device:CPU:*'\n\nbatch_size = 32\nmax_ragged_dim = 10\nembedding_dim = 20\n\n\ndef ragged_function(ragged_input, length_of_input):\n    # length_of_input is not used here but is in the actual function\n    # The error is caused whether or not it is used\n    return tf.reduce_sum(ragged_input, axis=0)\n\n\ndef final_loss_function(ragged_function_outputs):\n    weights = tf.get_variable('LossWeights', dtype=tf.float32,\n                              shape=(ragged_function_outputs.shape[1], 1))\n    return tf.reduce_sum(tf.matmul(ragged_function_outputs, weights))\n\n\nwith tf.device(device_name):\n    input_ragged_mat = tf.placeholder(name='RaggedMatrix', dtype=tf.float32,\n                                      shape=(None, max_ragged_dim, embedding_dim))\n    input_ragged_lengths = tf.placeholder(name='RaggedLengths', dtype=tf.int64,\n                                          shape=(None,))\n\n    ragged_function_outputs = tf.map_fn(lambda x: ragged_function(*x),\n                                        [input_ragged_mat, input_ragged_lengths], \n                                        # Note that input_ragged_lengths is of type int64\n                                        # This leads to an error on GPU placement\n                                        dtype=tf.float32)\n    final_loss = final_loss_function(ragged_function_outputs)\n\n    optimizer = tf.train.AdamOptimizer(learning_rate=1e-3)\n    train_op = optimizer.minimize(final_loss)\n\n# Create input ragged_matrices, with zeros beyond the actual length\nragged_input_mat = np.random.random(size=(batch_size, max_ragged_dim, embedding_dim))\nragged_input_length_mat = np.random.randint(max_ragged_dim, size=(batch_size,)) + 1\nfor i, rlen in enumerate(ragged_input_length_mat):\n    ragged_input_mat[i, rlen:max_ragged_dim] = 0\n\nwith tf.Session() as sess:\n    feed_dict = {input_ragged_mat: ragged_input_mat,\n                 input_ragged_lengths: ragged_input_length_mat}\n\n    sess.run(tf.global_variables_initializer())\n\n    print(\"Calculating Final Loss\")\n    sess.run([final_loss],\n             feed_dict=feed_dict)\n    print(\"Running Train operation\")\n    sess.run([train_op],\n             feed_dict=feed_dict)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nyes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nCentOS Linux release 7.4.1708\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary (pip3 install tensorflow-gpu==1.9.0)\r\n- **TensorFlow version (use command below)**:\r\nv1.9.0-0-g25c197e023 1.9.0\r\n- **Python version**:\r\n3.6.4\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n9.0.176\r\n- **GPU model and memory**:\r\n GeForce GTX-1080 - 8GB memory\r\n- **Exact command to reproduce**:\r\n`python3 map_fn_GPU_error.py`\r\n\r\n### Describe the problem\r\nThe `tf.map_fn` function raises the following error if I provide two tensors of input one of which is `tf.float32` and the other `tf.int64`. This error doesn't appear if both of them are `tf.float32`.\r\n\r\n```\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Cannot assign a device for operation 'map/TensorArray_1': Could not satisfy explicit device specification '' because the node was colocated with a group of nodes that required incompatible device '/device:GPU:0'\r\nColocation Debug Info:                                                                                                     \r\nColocation group had the following types and devices:\r\nTensorArrayReadV3: CPU                                                                                                    \r\nEnter: GPU CPU                                                                        \r\nTensorArrayV3: CPU                         \r\nTensorArrayScatterV3: CPU                                                                                                                                      \r\nPlaceholder: GPU CPU                                                                                   \r\n                                                           \r\nColocation members and user-requested devices:                   \r\n  RaggedLengths (Placeholder) /device:GPU:0\r\n  map/TensorArray_1 (TensorArrayV3)                                                                                                                            \r\n  map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3 (TensorArrayScatterV3) /device:GPU:0\r\n  map/while/TensorArrayReadV3_1/Enter (Enter) /device:GPU:0\r\n  map/while/TensorArrayReadV3_1 (TensorArrayReadV3) /device:GPU:0\r\n                                                  \r\n         [[Node: map/TensorArray_1 = TensorArrayV3[clear_after_read=true, dtype=DT_INT64, dynamic_size=false, element_shape=<unknown>, identical_element_shapes=true, tensor_array_name=\"\"](map/strided_slice)]]\r\n                                                                                                                            \r\nCaused by op 'map/TensorArray_1', defined at:\r\n  File \"map_fn_GPU_error.py\", line 33, in <module>                                                                              \r\n    dtype=tf.float32)                                      \r\n  File \"/my/python/package/path/tensorflow/python/ops/functional_ops.py\", line 420, in map_fn    \r\n    for elem in elems_flat]                    \r\n  File \"/my/python/package/path/tensorflow/python/ops/functional_ops.py\", line 420, in <listcomp>                               \r\n    for elem in elems_flat]                      \r\n  File \"/my/python/package/path/tensorflow/python/ops/tensor_array_ops.py\", line 754, in __init__\r\n    name=name)                                                           \r\n  File \"/my/python/package/path/tensorflow/python/ops/tensor_array_ops.py\", line 160, in __init__         \r\n    self._handle, self._flow = create()            \r\n  File \"/my/python/package/path/tensorflow/python/ops/tensor_array_ops.py\", line 157, in create                                 \r\n    name=scope)   \r\n  File \"/my/python/package/path/tensorflow/python/ops/gen_data_flow_ops.py\", line 7157, in tensor_array_v3\r\n    tensor_array_name=tensor_array_name, name=name)                  \r\n  File \"/my/python/package/path/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\r\n    op_def=op_def)                                                                    \r\n  File \"/my/python/package/path/tensorflow/python/framework/ops.py\", line 3414, in create_op\r\n    op_def=op_def)                                                                                                                                             \r\n  File \"/my/python/package/path/tensorflow/python/framework/ops.py\", line 1740, in __init__\r\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access    \r\n\r\n```\r\nThis is triggered by the line\r\n`sess.run(tf.global_variables_initializer())` in the code below. This code works perfectly on CPU however, I cannot seem to force placement on the GPU.\r\n\r\n### Source code / logs\r\n\r\nThis is a minimal example to reproduce the above error. (This is the file named `map_fn_GPU_error.py` used in the command above)\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nwith_gpu = True\r\nif with_gpu:\r\n    device_name = '/device:GPU:0'\r\nelse:\r\n    device_name = '/device:CPU:*'\r\n\r\nbatch_size = 32\r\nmax_ragged_dim = 10\r\nembedding_dim = 20\r\n\r\n\r\ndef ragged_function(ragged_input, length_of_input):\r\n    # length_of_input is not used here but is in the actual function\r\n    # The error is caused whether or not it is used\r\n    return tf.reduce_sum(ragged_input, axis=0)\r\n\r\n\r\ndef final_loss_function(ragged_function_outputs):\r\n    weights = tf.get_variable('LossWeights', dtype=tf.float32,\r\n                              shape=(ragged_function_outputs.shape[1], 1))\r\n    return tf.reduce_sum(tf.matmul(ragged_function_outputs, weights))\r\n\r\n\r\nwith tf.device(device_name):\r\n    input_ragged_mat = tf.placeholder(name='RaggedMatrix', dtype=tf.float32,\r\n                                      shape=(None, max_ragged_dim, embedding_dim))\r\n    input_ragged_lengths = tf.placeholder(name='RaggedLengths', dtype=tf.int64,\r\n                                          shape=(None,))\r\n\r\n    ragged_function_outputs = tf.map_fn(lambda x: ragged_function(*x),\r\n                                        [input_ragged_mat, input_ragged_lengths], \r\n                                        # Note that input_ragged_lengths is of type int64\r\n                                        # This leads to an error on GPU placement\r\n                                        dtype=tf.float32)\r\n    final_loss = final_loss_function(ragged_function_outputs)\r\n\r\n    optimizer = tf.train.AdamOptimizer(learning_rate=1e-3)\r\n    train_op = optimizer.minimize(final_loss)\r\n\r\n# Create input ragged_matrices, with zeros beyond the actual length\r\nragged_input_mat = np.random.random(size=(batch_size, max_ragged_dim, embedding_dim))\r\nragged_input_length_mat = np.random.randint(max_ragged_dim, size=(batch_size,)) + 1\r\nfor i, rlen in enumerate(ragged_input_length_mat):\r\n    ragged_input_mat[i, rlen:max_ragged_dim] = 0\r\n\r\nwith tf.Session() as sess:\r\n    feed_dict = {input_ragged_mat: ragged_input_mat,\r\n                 input_ragged_lengths: ragged_input_length_mat}\r\n\r\n    sess.run(tf.global_variables_initializer())\r\n\r\n    print(\"Calculating Final Loss\")\r\n    sess.run([final_loss],\r\n             feed_dict=feed_dict)\r\n    print(\"Running Train operation\")\r\n    sess.run([train_op],\r\n             feed_dict=feed_dict)\r\n```"}