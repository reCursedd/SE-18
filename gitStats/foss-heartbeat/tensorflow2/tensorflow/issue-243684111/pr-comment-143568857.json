{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/143568857", "pull_request_review_id": 68098433, "id": 143568857, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzU2ODg1Nw==", "diff_hunk": "@@ -2095,3 +2096,251 @@ def call(self, inputs, state):\n \n     new_state = rnn_cell_impl.LSTMStateTuple(c, m)\n     return m, new_state\n+\n+\n+class WeightNormLSTMCell(rnn_cell_impl.RNNCell):\n+  \"\"\"Weight normalized LSTM Cell. Adapted from `rnn_cell_impl.LSTMCell`\n+\n+    The weight-norm implementation is based on:\n+    https://arxiv.org/abs/1602.07868\n+    Tim Salimans, Diederik P. Kingma.\n+    Weight Normalization: A Simple Reparameterization to Accelerate\n+    Training of Deep Neural Networks\n+\n+    The default LSTM implementation based on:\n+    http://www.bioinf.jku.at/publications/older/2604.pdf\n+    S. Hochreiter and J. Schmidhuber.\n+    \"Long Short-Term Memory\". Neural Computation, 9(8):1735-1780, 1997.\n+\n+    The class uses optional peephole connections, optional cell clipping\n+    and an optional projection layer.\n+\n+    The optional peephole implementation is based on:\n+    https://research.google.com/pubs/archive/43905.pdf\n+    Hasim Sak, Andrew Senior, and Francoise Beaufays.\n+    \"Long short-term memory recurrent neural network architectures for\n+    large scale acoustic modeling.\" INTERSPEECH, 2014.\n+  \"\"\"\n+\n+  def __init__(self, num_units, norm=True, use_peepholes=False,\n+               cell_clip=None, initializer=None, num_proj=None,\n+               proj_clip=None, forget_bias=1, activation=None,\n+               reuse=None):\n+    \"\"\"Initialize the parameters of a weight-normalized LSTM cell.\n+\n+    Args:\n+      num_units: int, The number of units in the LSTM cell\n+      norm: If `True`, apply normalization to the weight matrices. If False,\n+        the result is identical to that obtained from `rnn_cell_impl.LSTMCell`\n+      use_peepholes: bool, set `True` to enable diagonal/peephole connections.\n+      cell_clip: (optional) A float value, if provided the cell state is clipped\n+        by this value prior to the cell output activation.\n+      initializer: (optional) The initializer to use for the weight matrices.\n+      num_proj: (optional) int, The output dimensionality for the projection\n+        matrices.  If None, no projection is performed.\n+      proj_clip: (optional) A float value.  If `num_proj > 0` and `proj_clip` is\n+        provided, then the projected values are clipped elementwise to within\n+        `[-proj_clip, proj_clip]`.\n+      forget_bias: Biases of the forget gate are initialized by default to 1\n+        in order to reduce the scale of forgetting at the beginning of\n+        the training.\n+      activation: Activation function of the inner states.  Default: `tanh`.\n+      reuse: (optional) Python boolean describing whether to reuse variables\n+        in an existing scope.  If not `True`, and the existing scope already has\n+        the given variables, an error is raised.\n+    \"\"\"\n+    super(WeightNormLSTMCell, self).__init__(_reuse=reuse)\n+\n+    self._scope = 'wn_lstm_cell'\n+    self._num_units = num_units\n+    self._norm = norm\n+    self._initializer = initializer\n+    self._use_peepholes = use_peepholes\n+    self._cell_clip = cell_clip\n+    self._num_proj = num_proj\n+    self._proj_clip = proj_clip\n+    self._activation = activation or math_ops.tanh\n+    self._forget_bias = forget_bias\n+\n+    self._weights_variable_name = \"kernel\"\n+    self._bias_variable_name = \"bias\"\n+\n+    if num_proj:\n+      self._state_size = rnn_cell_impl.LSTMStateTuple(num_units, num_proj)\n+      self._output_size = num_proj\n+    else:\n+      self._state_size = rnn_cell_impl.LSTMStateTuple(num_units, num_units)\n+      self._output_size = num_units\n+\n+  @property\n+  def state_size(self):\n+    return self._state_size\n+\n+  @property\n+  def output_size(self):\n+    return self._output_size\n+\n+  def _normalize(self, weight, name):\n+    \"\"\"Normalizes the columns of the given weight matrix and\n+       multiplies each column with an independent scalar variable.\"\"\"\n+\n+    output_size = weight.get_shape().as_list()[1]", "path": "tensorflow/contrib/rnn/python/ops/rnn_cell.py", "position": null, "original_position": 100, "commit_id": "945a5ecb172122e3b34eb5bbaf50b7e76b5fa155", "original_commit_id": "dcbc1ebe7edf37e2ddeb6d8439544a4968338f6a", "user": {"login": "discoveredcheck", "id": 25035016, "node_id": "MDQ6VXNlcjI1MDM1MDE2", "avatar_url": "https://avatars1.githubusercontent.com/u/25035016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/discoveredcheck", "html_url": "https://github.com/discoveredcheck", "followers_url": "https://api.github.com/users/discoveredcheck/followers", "following_url": "https://api.github.com/users/discoveredcheck/following{/other_user}", "gists_url": "https://api.github.com/users/discoveredcheck/gists{/gist_id}", "starred_url": "https://api.github.com/users/discoveredcheck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/discoveredcheck/subscriptions", "organizations_url": "https://api.github.com/users/discoveredcheck/orgs", "repos_url": "https://api.github.com/users/discoveredcheck/repos", "events_url": "https://api.github.com/users/discoveredcheck/events{/privacy}", "received_events_url": "https://api.github.com/users/discoveredcheck/received_events", "type": "User", "site_admin": false}, "body": "Yes, the shape of `weight` is known since it is created via get_variable() with full shape specification (line 2242). Assert on line 2232 will fire if the shape could not be calculated.", "created_at": "2017-10-09T20:27:40Z", "updated_at": "2018-01-03T04:43:42Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11573#discussion_r143568857", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11573", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/143568857"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11573#discussion_r143568857"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11573"}}, "body_html": "<p>Yes, the shape of <code>weight</code> is known since it is created via get_variable() with full shape specification (line 2242). Assert on line 2232 will fire if the shape could not be calculated.</p>", "body_text": "Yes, the shape of weight is known since it is created via get_variable() with full shape specification (line 2242). Assert on line 2232 will fire if the shape could not be calculated.", "in_reply_to_id": 143514825}