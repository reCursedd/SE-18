{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/129178674", "pull_request_review_id": 51924303, "id": 129178674, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTE3ODY3NA==", "diff_hunk": "@@ -2095,3 +2096,113 @@ def call(self, inputs, state):\n \n     new_state = rnn_cell_impl.LSTMStateTuple(c, m)\n     return m, new_state\n+\n+\n+class PrepareableMultiRNNCell(rnn_cell_impl.MultiRNNCell):\n+  \"\"\"Wrapper to implement multi-layer weight normalized RNNs\"\"\"\n+  def prepare(self):\n+    for i, cell in enumerate(self._cells):\n+      with vs.variable_scope(\"cell_%d\" % i):\n+        cell.prepare()\n+\n+\n+class WeightNormBasicLSTMCell(rnn_cell_impl.BasicLSTMCell):\n+  \"\"\"Weight normalized Basic LSTM Cell.\n+\n+        The implementation is based on\n+        https://arxiv.org/abs/1602.07868\n+        Tim Salimans, Diederik P. Kingma\n+        Weight Normalization: A Simple Reparameterization to Accelerate\n+        Training of Deep Neural Networks\n+\n+        LSTM implementation is the most basic, non-peephole based.\n+  \"\"\"\n+\n+  def __init__(self, num_units, norm=True,\n+               dtype=dtypes.float32, scope='wn_basic_lstm_cell'):\n+    super(WeightNormBasicLSTMCell, self).__init__(num_units,\n+                                                  forget_bias=1.0,\n+                                                  state_is_tuple=True)\n+    self.scope = scope\n+    self.dtype = dtype\n+    self.prepared = False\n+    self.norm = norm\n+\n+  def prepare(self):\n+    \"\"\"Called by dynamic_rnn just before the time-loop.\n+       In this case implements weight-normalization on the weight matrices\"\"\"\n+    output_size = 4*self._num_units\n+\n+    # Dynamic RNN requires number of input dimensions = hidden units\n+    h_size = x_size = self._num_units\n+\n+    with vs.variable_scope(self.scope):\n+      wx = vs.get_variable(\"wx\", [x_size, output_size], dtype=self.dtype)\n+      wh = vs.get_variable(\"wh\", [h_size, output_size], dtype=self.dtype)\n+\n+      if self.norm:\n+        gx = vs.get_variable(\"gx\", [output_size], dtype=self.dtype)\n+        gh = vs.get_variable(\"gh\", [output_size], dtype=self.dtype)\n+\n+        wx = nn_impl.l2_normalize(wx, dim=0) * gx", "path": "tensorflow/contrib/rnn/python/ops/rnn_cell.py", "position": null, "original_position": 60, "commit_id": "945a5ecb172122e3b34eb5bbaf50b7e76b5fa155", "original_commit_id": "a0bf344c9cb5521d3741a737e9f17d07fd6653cd", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "why does this require a special prepare()?", "created_at": "2017-07-24T23:17:25Z", "updated_at": "2018-01-03T04:43:42Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11573#discussion_r129178674", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11573", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/129178674"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11573#discussion_r129178674"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11573"}}, "body_html": "<p>why does this require a special prepare()?</p>", "body_text": "why does this require a special prepare()?"}