{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8473", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8473/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8473/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8473/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8473", "id": 214759295, "node_id": "MDU6SXNzdWUyMTQ3NTkyOTU=", "number": 8473, "title": "Segmentation Fault in Shape Function When Accessing Attr", "user": {"login": "cancan101", "id": 51059, "node_id": "MDQ6VXNlcjUxMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cancan101", "html_url": "https://github.com/cancan101", "followers_url": "https://api.github.com/users/cancan101/followers", "following_url": "https://api.github.com/users/cancan101/following{/other_user}", "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}", "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions", "organizations_url": "https://api.github.com/users/cancan101/orgs", "repos_url": "https://api.github.com/users/cancan101/repos", "events_url": "https://api.github.com/users/cancan101/events{/privacy}", "received_events_url": "https://api.github.com/users/cancan101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-03-16T16:16:57Z", "updated_at": "2017-06-16T20:43:55Z", "closed_at": "2017-06-16T20:36:02Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Adding this to shape function causes segfault (full example below):</p>\n<div class=\"highlight highlight-source-c++\"><pre>      string data_format;\n      Status s = c-&gt;<span class=\"pl-en\">GetAttr</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test_str<span class=\"pl-pds\">\"</span></span>, &amp;data_format);</pre></div>\n<p>On OS X:</p>\n<pre><code>$ bazel version\nBuild label: 0.4.3-homebrew\nBuild target: bazel-out/local-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Thu Dec 22 15:20:22 2016 (1482420022)\nBuild timestamp: 1482420022\nBuild timestamp as int: 1482420022\n</code></pre>\n<pre><code>$git rev-parse\n07bb8ea2379bd459832b23951fb20ec47f3fdbd4\n</code></pre>\n<p>Using the <a href=\"https://www.tensorflow.org/extend/adding_an_op\" rel=\"nofollow\">ZeroOut op</a> but modifying the shape function:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op_kernel.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/shape_inference.h<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">tensorflow</span><span class=\"pl-k\">;</span>\n\n<span class=\"pl-en\">REGISTER_OP</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ZeroOut<span class=\"pl-pds\">\"</span></span>)\n    .Input(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>to_zero: int32<span class=\"pl-pds\">\"</span></span>)\n    .Output(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zeroed: int32<span class=\"pl-pds\">\"</span></span>)\n    .Attr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test_str: {'alex', 'bob'} = 'alex'<span class=\"pl-pds\">\"</span></span>)\n    .SetShapeFn([](::tensorflow::shape_inference::InferenceContext* c) {\n      string data_format;\n      Status s = c-&gt;<span class=\"pl-c1\">GetAttr</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test_str<span class=\"pl-pds\">\"</span></span>, &amp;data_format);\n      c-&gt;<span class=\"pl-c1\">set_output</span>(<span class=\"pl-c1\">0</span>, c-&gt;<span class=\"pl-c1\">input</span>(<span class=\"pl-c1\">0</span>));\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Status::OK</span>();\n    });\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">ZeroOutOp</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">OpKernel</span> {\n <span class=\"pl-k\">public:</span>\n  <span class=\"pl-k\">explicit</span> <span class=\"pl-en\">ZeroOutOp</span>(OpKernelConstruction* context) : OpKernel(context) {}\n\n  <span class=\"pl-k\">void</span> <span class=\"pl-en\">Compute</span>(OpKernelContext* context) <span class=\"pl-k\">override</span> {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Grab the input tensor</span>\n    <span class=\"pl-k\">const</span> Tensor&amp; input_tensor = context-&gt;<span class=\"pl-c1\">input</span>(<span class=\"pl-c1\">0</span>);\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Create an output tensor</span>\n    Tensor* output_tensor = <span class=\"pl-c1\">NULL</span>;\n    <span class=\"pl-c1\">OP_REQUIRES_OK</span>(context, context-&gt;<span class=\"pl-c1\">allocate_output</span>(<span class=\"pl-c1\">0</span>, input_tensor.<span class=\"pl-c1\">shape</span>(),\n                                                     &amp;output_tensor));\n\n  }\n};\n\n<span class=\"pl-en\">REGISTER_KERNEL_BUILDER</span>(Name(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ZeroOut<span class=\"pl-pds\">\"</span></span>).Device(DEVICE_CPU), ZeroOutOp);</pre></div>\n<p>and then running (within <code>tf.TestCase</code>):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Alex</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">test</span>.<span class=\"pl-e\">TestCase</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_alex</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        so_path <span class=\"pl-k\">=</span> (cur_dir <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/../../../../<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bazel-bin/tensorflow/core/user_ops/zero.so<span class=\"pl-pds\">\"</span></span>)\n        my_module <span class=\"pl-k\">=</span> tf.load_op_library(so_path)\n        <span class=\"pl-k\">with</span> <span class=\"pl-c1\">self</span>.test_session():\n            <span class=\"pl-c1\">print</span> my_module.zero_out([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">1</span>]).eval()</pre></div>\n<p>The segfault it self seems to be coming from protobuf. I filed a ticket there as well: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"214732442\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/protocolbuffers/protobuf/issues/2863\" data-hovercard-type=\"issue\" data-hovercard-url=\"/protocolbuffers/protobuf/issues/2863/hovercard\" href=\"https://github.com/protocolbuffers/protobuf/issues/2863\">protocolbuffers/protobuf#2863</a>.</p>", "body_text": "Adding this to shape function causes segfault (full example below):\n      string data_format;\n      Status s = c->GetAttr(\"test_str\", &data_format);\nOn OS X:\n$ bazel version\nBuild label: 0.4.3-homebrew\nBuild target: bazel-out/local-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Thu Dec 22 15:20:22 2016 (1482420022)\nBuild timestamp: 1482420022\nBuild timestamp as int: 1482420022\n\n$git rev-parse\n07bb8ea2379bd459832b23951fb20ec47f3fdbd4\n\nUsing the ZeroOut op but modifying the shape function:\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nusing namespace tensorflow;\n\nREGISTER_OP(\"ZeroOut\")\n    .Input(\"to_zero: int32\")\n    .Output(\"zeroed: int32\")\n    .Attr(\"test_str: {'alex', 'bob'} = 'alex'\")\n    .SetShapeFn([](::tensorflow::shape_inference::InferenceContext* c) {\n      string data_format;\n      Status s = c->GetAttr(\"test_str\", &data_format);\n      c->set_output(0, c->input(0));\n      return Status::OK();\n    });\n\nclass ZeroOutOp : public OpKernel {\n public:\n  explicit ZeroOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor& input_tensor = context->input(0);\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(0, input_tensor.shape(),\n                                                     &output_tensor));\n\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"ZeroOut\").Device(DEVICE_CPU), ZeroOutOp);\nand then running (within tf.TestCase):\nclass Alex(tf.test.TestCase):\n    def test_alex(self):\n        so_path = (cur_dir + \"/../../../../\" +\n            \"bazel-bin/tensorflow/core/user_ops/zero.so\")\n        my_module = tf.load_op_library(so_path)\n        with self.test_session():\n            print my_module.zero_out([1,1,2,1]).eval()\nThe segfault it self seems to be coming from protobuf. I filed a ticket there as well: protocolbuffers/protobuf#2863.", "body": "Adding this to shape function causes segfault (full example below):\r\n```c++\r\n      string data_format;\r\n      Status s = c->GetAttr(\"test_str\", &data_format);\r\n```\r\n\r\nOn OS X:\r\n```\r\n$ bazel version\r\nBuild label: 0.4.3-homebrew\r\nBuild target: bazel-out/local-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Thu Dec 22 15:20:22 2016 (1482420022)\r\nBuild timestamp: 1482420022\r\nBuild timestamp as int: 1482420022\r\n```\r\n\r\n```\r\n$git rev-parse\r\n07bb8ea2379bd459832b23951fb20ec47f3fdbd4\r\n```\r\n\r\nUsing the [ZeroOut op](https://www.tensorflow.org/extend/adding_an_op) but modifying the shape function:\r\n```c++\r\n#include \"tensorflow/core/framework/op.h\"\r\n#include \"tensorflow/core/framework/op_kernel.h\"\r\n#include \"tensorflow/core/framework/shape_inference.h\"\r\n\r\nusing namespace tensorflow;\r\n\r\nREGISTER_OP(\"ZeroOut\")\r\n    .Input(\"to_zero: int32\")\r\n    .Output(\"zeroed: int32\")\r\n    .Attr(\"test_str: {'alex', 'bob'} = 'alex'\")\r\n    .SetShapeFn([](::tensorflow::shape_inference::InferenceContext* c) {\r\n      string data_format;\r\n      Status s = c->GetAttr(\"test_str\", &data_format);\r\n      c->set_output(0, c->input(0));\r\n      return Status::OK();\r\n    });\r\n\r\nclass ZeroOutOp : public OpKernel {\r\n public:\r\n  explicit ZeroOutOp(OpKernelConstruction* context) : OpKernel(context) {}\r\n\r\n  void Compute(OpKernelContext* context) override {\r\n    // Grab the input tensor\r\n    const Tensor& input_tensor = context->input(0);\r\n\r\n    // Create an output tensor\r\n    Tensor* output_tensor = NULL;\r\n    OP_REQUIRES_OK(context, context->allocate_output(0, input_tensor.shape(),\r\n                                                     &output_tensor));\r\n\r\n  }\r\n};\r\n\r\nREGISTER_KERNEL_BUILDER(Name(\"ZeroOut\").Device(DEVICE_CPU), ZeroOutOp);\r\n```\r\n\r\nand then running (within `tf.TestCase`):\r\n```python\r\nclass Alex(tf.test.TestCase):\r\n    def test_alex(self):\r\n        so_path = (cur_dir + \"/../../../../\" +\r\n            \"bazel-bin/tensorflow/core/user_ops/zero.so\")\r\n        my_module = tf.load_op_library(so_path)\r\n        with self.test_session():\r\n            print my_module.zero_out([1,1,2,1]).eval()\r\n```\r\n\r\nThe segfault it self seems to be coming from protobuf. I filed a ticket there as well: https://github.com/google/protobuf/issues/2863."}