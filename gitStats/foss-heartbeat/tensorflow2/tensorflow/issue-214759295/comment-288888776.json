{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/288888776", "html_url": "https://github.com/tensorflow/tensorflow/issues/8473#issuecomment-288888776", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8473", "id": 288888776, "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODg4ODc3Ng==", "user": {"login": "cancan101", "id": 51059, "node_id": "MDQ6VXNlcjUxMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cancan101", "html_url": "https://github.com/cancan101", "followers_url": "https://api.github.com/users/cancan101/followers", "following_url": "https://api.github.com/users/cancan101/following{/other_user}", "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}", "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions", "organizations_url": "https://api.github.com/users/cancan101/orgs", "repos_url": "https://api.github.com/users/cancan101/repos", "events_url": "https://api.github.com/users/cancan101/events{/privacy}", "received_events_url": "https://api.github.com/users/cancan101/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-23T23:15:28Z", "updated_at": "2017-03-24T00:29:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I upgraded bazel and am still seeing the segfault:</p>\n<pre><code>$ bazel version\nBuild label: 0.4.5-homebrew\nBuild target: bazel-out/local-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Thu Mar 16 13:39:33 2017 (1489671573)\nBuild timestamp: 1489671573\nBuild timestamp as int: 1489671573\n</code></pre>\n<p>I also tested with regular <code>Session</code>. Still get seg fault</p>\n<p>What is best way to compile with GCC?<br>\nRunning within the <code>tensorflow/core/user_ops</code> directory: <code>TF_INC=$(python -c 'import tensorflow as tf; print(tf.sysconfig.get_include())') g++ -std=c++11 -shared zero_out.cc -o zero_out.so -fPIC -I $TF_INC -O2 -undefined dynamic_lookup</code> gives:</p>\n<pre><code>ld: warning: directory not found for option '-L/lib'\nld: warning: directory not found for option '-L/lib64'\n</code></pre>\n<p><em>UPDATE</em>: ^ was caused by bad <code>LIBRARY_PATH</code>.</p>\n<p><em>UPDATE</em> Compiling with GCC (using line above) works! So there is something wrong with the so created when building with bazel. This is my <code>BUILD</code> file:</p>\n<pre><code>tf_custom_op_library(\n    name = \"zero.so\",\n    srcs = [\"zero_out.cc\", ],\n)\n</code></pre>", "body_text": "I upgraded bazel and am still seeing the segfault:\n$ bazel version\nBuild label: 0.4.5-homebrew\nBuild target: bazel-out/local-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Thu Mar 16 13:39:33 2017 (1489671573)\nBuild timestamp: 1489671573\nBuild timestamp as int: 1489671573\n\nI also tested with regular Session. Still get seg fault\nWhat is best way to compile with GCC?\nRunning within the tensorflow/core/user_ops directory: TF_INC=$(python -c 'import tensorflow as tf; print(tf.sysconfig.get_include())') g++ -std=c++11 -shared zero_out.cc -o zero_out.so -fPIC -I $TF_INC -O2 -undefined dynamic_lookup gives:\nld: warning: directory not found for option '-L/lib'\nld: warning: directory not found for option '-L/lib64'\n\nUPDATE: ^ was caused by bad LIBRARY_PATH.\nUPDATE Compiling with GCC (using line above) works! So there is something wrong with the so created when building with bazel. This is my BUILD file:\ntf_custom_op_library(\n    name = \"zero.so\",\n    srcs = [\"zero_out.cc\", ],\n)", "body": "I upgraded bazel and am still seeing the segfault:\r\n```\r\n$ bazel version\r\nBuild label: 0.4.5-homebrew\r\nBuild target: bazel-out/local-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Thu Mar 16 13:39:33 2017 (1489671573)\r\nBuild timestamp: 1489671573\r\nBuild timestamp as int: 1489671573\r\n```\r\nI also tested with regular `Session`. Still get seg fault\r\n\r\nWhat is best way to compile with GCC?\r\nRunning within the `tensorflow/core/user_ops` directory: `TF_INC=$(python -c 'import tensorflow as tf; print(tf.sysconfig.get_include())') g++ -std=c++11 -shared zero_out.cc -o zero_out.so -fPIC -I $TF_INC -O2 -undefined dynamic_lookup` gives:\r\n```\r\nld: warning: directory not found for option '-L/lib'\r\nld: warning: directory not found for option '-L/lib64'\r\n```\r\n*UPDATE*: ^ was caused by bad `LIBRARY_PATH`.\r\n\r\n*UPDATE* Compiling with GCC (using line above) works! So there is something wrong with the so created when building with bazel. This is my `BUILD` file:\r\n```\r\ntf_custom_op_library(\r\n    name = \"zero.so\",\r\n    srcs = [\"zero_out.cc\", ],\r\n)\r\n```"}