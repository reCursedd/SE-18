{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/164541526", "pull_request_review_id": 92330297, "id": 164541526, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU0MTUyNg==", "diff_hunk": "@@ -2193,7 +2193,31 @@ def dropout(x, keep_prob, noise_shape=None, seed=None, name=None):  # pylint: di\n     if tensor_util.constant_value(keep_prob) == 1:\n       return x\n \n-    noise_shape = noise_shape if noise_shape is not None else array_ops.shape(x)\n+    def noise_shape_func(x, noise_shape):\n+      # If noise_shape is none return immediately.\n+      if noise_shape is None:\n+        return array_ops.shape(x)\n+\n+      try:\n+        # Best effort to figure out the intended shape.\n+        # If not possible, let the op to handle it.\n+        noise_shape_ = tensor_shape.as_shape(noise_shape)\n+        if (x.shape.dims is not None and\n+            len(x.shape.dims) == len(noise_shape_.dims)):\n+          new_dims = []\n+          for i, dim in enumerate(x.shape.dims):\n+            if noise_shape_.dims[i].value is None and dim.value is not None:\n+              new_dims.append(dim.value)\n+            else:\n+              new_dims.append(noise_shape_.dims[i].value)\n+          return tensor_shape.TensorShape(new_dims)\n+      except Exception:", "path": "tensorflow/python/ops/nn_ops.py", "position": null, "original_position": 23, "commit_id": "9a67c529db09fd37d200638a5b8a72176359d73b", "original_commit_id": "d92d3cd5b6c1726f75afed7099339052d1c79dab", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "What exceptions does this catch in practice?\r\n\r\nIn general we like to avoid catching exceptions this wide, and it would be good to scope it more appropriately.", "created_at": "2018-01-29T19:41:09Z", "updated_at": "2018-01-30T00:10:51Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16085#discussion_r164541526", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16085", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/164541526"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16085#discussion_r164541526"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16085"}}, "body_html": "<p>What exceptions does this catch in practice?</p>\n<p>In general we like to avoid catching exceptions this wide, and it would be good to scope it more appropriately.</p>", "body_text": "What exceptions does this catch in practice?\nIn general we like to avoid catching exceptions this wide, and it would be good to scope it more appropriately."}