{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19451", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19451/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19451/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19451/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19451", "id": 325146431, "node_id": "MDU6SXNzdWUzMjUxNDY0MzE=", "number": 19451, "title": "Feature Request: evaluate both train_data and test_data using tf.contrib.learn.Experiment?", "user": {"login": "mufusu", "id": 39148121, "node_id": "MDQ6VXNlcjM5MTQ4MTIx", "avatar_url": "https://avatars1.githubusercontent.com/u/39148121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mufusu", "html_url": "https://github.com/mufusu", "followers_url": "https://api.github.com/users/mufusu/followers", "following_url": "https://api.github.com/users/mufusu/following{/other_user}", "gists_url": "https://api.github.com/users/mufusu/gists{/gist_id}", "starred_url": "https://api.github.com/users/mufusu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mufusu/subscriptions", "organizations_url": "https://api.github.com/users/mufusu/orgs", "repos_url": "https://api.github.com/users/mufusu/repos", "events_url": "https://api.github.com/users/mufusu/events{/privacy}", "received_events_url": "https://api.github.com/users/mufusu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-05-22T05:32:04Z", "updated_at": "2018-07-10T18:53:13Z", "closed_at": "2018-07-10T18:53:13Z", "author_association": "NONE", "body_html": "<h3>Describe the problem</h3>\n<p>feature request\uff1a<br>\ni'm using the api \"tf.contrib.learn.Experiment\" for distributed training, but i don't know the method for evaluating the train_data and test_data at the same step, i want to check the model is overfit or not, so i want to print both train_auc and test_auc after saving model each time.</p>\n<p>now, i can only see the performance on the test data for every saved model. is there any methods to print both train and test evaluation? Thanks a lot!</p>\n<h3>Source code / logs</h3>\n<p>here is  code:<br>\n`def train(self):<br>\nif self.job_name == \"worker\":<br>\n# get data<br>\nself.init_worker_input_split()<br>\nself.init_worker_test_input_split()</p>\n<pre><code>    # data input function\n    train_input = lambda: dataset_v1.create_input_fun(self.file_names,\n                                                      FLAGS.batch_size,\n                                                      repeat_count=FLAGS.train_epochs)\n    test_input = lambda: dataset_v1.create_input_fun(self.test_file_names,\n                                                     FLAGS.batch_size,\n                                                     perform_shuffle=False)\n    # estimator define\n    model = self.build_estimator(FLAGS.log_dir, FLAGS.model_type)\n\n    distribute_exp = tf.contrib.learn.Experiment(estimator=model,\n                                                 train_input_fn=train_input,\n                                                 eval_input_fn=test_input,\n                                                 min_eval_frequency=100\n                                                 )\n\n    if self.job_name == \"ps\":\n        # Starts a TensorFlow server and joins the serving thread\n        distribute_exp.run_std_server()\n    elif self.job_name == \"worker\":\n        distribute_exp.train_and_evaluate()\n\n    if self.is_chief:\n        # Evaluate on the evaluation data.\n        distribute_exp.evaluate(name='test_performance')\n\n    tf.logging.info(\"Optimization Finished!\")`\n</code></pre>\n<p>here is the logs:<br>\nINFO:tensorflow:Validation (step 7014908): loss = 15.8598, accuracy_baseline = 0.925938, global_step = 7014348, auc = 0.683994, prediction/mean = 0.0714387, label/mean = 0.0740625, average_loss = 0.24781, auc_precision_recall = 0.167725, accuracy = 0.927031<br>\nINFO:tensorflow:global_step/sec: 98.1175<br>\nINFO:tensorflow:global_step/sec: 124.708<br>\nINFO:tensorflow:global_step/sec: 121.122<br>\nINFO:tensorflow:loss = 11.3313, step = 7016362 (21.941 sec)<br>\nINFO:tensorflow:global_step/sec: 122.56<br>\nINFO:tensorflow:global_step/sec: 114.473<br>\nINFO:tensorflow:global_step/sec: 122.207<br>\nINFO:tensorflow:global_step/sec: 123.767<br>\nINFO:tensorflow:global_step/sec: 125.336<br>\nINFO:tensorflow:loss = 14.5477, step = 7016886 (4.307 sec)<br>\nINFO:tensorflow:global_step/sec: 120.105<br>\nINFO:tensorflow:global_step/sec: 110.698<br>\nINFO:tensorflow:global_step/sec: 124.799<br>\nINFO:tensorflow:global_step/sec: 121.776<br>\nINFO:tensorflow:global_step/sec: 114.484<br>\nINFO:tensorflow:loss = 16.5542, step = 7017438 (4.837 sec)<br>\nINFO:tensorflow:global_step/sec: 125.595<br>\nINFO:tensorflow:global_step/sec: 122.375<br>\nINFO:tensorflow:global_step/sec: 122.392<br>\nINFO:tensorflow:global_step/sec: 124.201<br>\nINFO:tensorflow:global_step/sec: 122.038<br>\nINFO:tensorflow:loss = 17.7121, step = 7017930 (3.817 sec)<br>\nINFO:tensorflow:global_step/sec: 102.7<br>\nINFO:tensorflow:global_step/sec: 121.585<br>\nINFO:tensorflow:global_step/sec: 119.404<br>\nINFO:tensorflow:global_step/sec: 121.501<br>\nINFO:tensorflow:global_step/sec: 119.815<br>\nINFO:tensorflow:loss = 16.0022, step = 7018577 (5.630 sec)<br>\nINFO:tensorflow:global_step/sec: 118.615<br>\nINFO:tensorflow:global_step/sec: 122.272<br>\nINFO:tensorflow:global_step/sec: 121.206<br>\nINFO:tensorflow:global_step/sec: 123.087<br>\nINFO:tensorflow:global_step/sec: 120.079<br>\nINFO:tensorflow:loss = 20.2255, step = 7019070 (4.049 sec)<br>\nINFO:tensorflow:global_step/sec: 118.552<br>\nINFO:tensorflow:global_step/sec: 121.404<br>\nINFO:tensorflow:Saving checkpoints for 7019347 into viewfs://hadoop-meituan/user/hadoop-generalshop/caiqi.sun/spark/dl/demo/output/wide_deep_all_82/model.ckpt.<br>\nINFO:tensorflow:global_step/sec: 102.859<br>\nINFO:tensorflow:Starting evaluation at 2018-05-22-03:56:24<br>\nINFO:tensorflow:Restoring parameters from viewfs://hadoop-meituan/user/hadoop-generalshop/caiqi.sun/spark/dl/demo/output/wide_deep_all_82/model.ckpt-7019347<br>\nINFO:tensorflow:Evaluation [10/100]<br>\nINFO:tensorflow:Evaluation [20/100]<br>\nINFO:tensorflow:Evaluation [30/100]<br>\nINFO:tensorflow:Evaluation [40/100]<br>\nINFO:tensorflow:Evaluation [50/100]<br>\nINFO:tensorflow:Evaluation [60/100]<br>\nINFO:tensorflow:Evaluation [70/100]<br>\nINFO:tensorflow:Evaluation [80/100]<br>\nINFO:tensorflow:Evaluation [90/100]<br>\nINFO:tensorflow:Evaluation [100/100]<br>\nINFO:tensorflow:Finished evaluation at 2018-05-22-03:56:31<br>\nINFO:tensorflow:Saving dict for global step 7019354: accuracy = 0.927031, accuracy_baseline = 0.925938, auc = 0.683203, auc_precision_recall = 0.170481, average_loss = 0.247913, global_step = 7019354, label/mean = 0.0740625, loss = 15.8664, prediction/mean = 0.0705214<br>\nINFO:tensorflow:Validation (step 7019922): loss = 15.8664, accuracy_baseline = 0.925938, global_step = 7019354, auc = 0.683203, prediction/mean = 0.0705214, label/mean = 0.0740625, average_loss = 0.247913, auc_precision_recall = 0.170481, accuracy = 0.927031</p>", "body_text": "Describe the problem\nfeature request\uff1a\ni'm using the api \"tf.contrib.learn.Experiment\" for distributed training, but i don't know the method for evaluating the train_data and test_data at the same step, i want to check the model is overfit or not, so i want to print both train_auc and test_auc after saving model each time.\nnow, i can only see the performance on the test data for every saved model. is there any methods to print both train and test evaluation? Thanks a lot!\nSource code / logs\nhere is  code:\n`def train(self):\nif self.job_name == \"worker\":\n# get data\nself.init_worker_input_split()\nself.init_worker_test_input_split()\n    # data input function\n    train_input = lambda: dataset_v1.create_input_fun(self.file_names,\n                                                      FLAGS.batch_size,\n                                                      repeat_count=FLAGS.train_epochs)\n    test_input = lambda: dataset_v1.create_input_fun(self.test_file_names,\n                                                     FLAGS.batch_size,\n                                                     perform_shuffle=False)\n    # estimator define\n    model = self.build_estimator(FLAGS.log_dir, FLAGS.model_type)\n\n    distribute_exp = tf.contrib.learn.Experiment(estimator=model,\n                                                 train_input_fn=train_input,\n                                                 eval_input_fn=test_input,\n                                                 min_eval_frequency=100\n                                                 )\n\n    if self.job_name == \"ps\":\n        # Starts a TensorFlow server and joins the serving thread\n        distribute_exp.run_std_server()\n    elif self.job_name == \"worker\":\n        distribute_exp.train_and_evaluate()\n\n    if self.is_chief:\n        # Evaluate on the evaluation data.\n        distribute_exp.evaluate(name='test_performance')\n\n    tf.logging.info(\"Optimization Finished!\")`\n\nhere is the logs:\nINFO:tensorflow:Validation (step 7014908): loss = 15.8598, accuracy_baseline = 0.925938, global_step = 7014348, auc = 0.683994, prediction/mean = 0.0714387, label/mean = 0.0740625, average_loss = 0.24781, auc_precision_recall = 0.167725, accuracy = 0.927031\nINFO:tensorflow:global_step/sec: 98.1175\nINFO:tensorflow:global_step/sec: 124.708\nINFO:tensorflow:global_step/sec: 121.122\nINFO:tensorflow:loss = 11.3313, step = 7016362 (21.941 sec)\nINFO:tensorflow:global_step/sec: 122.56\nINFO:tensorflow:global_step/sec: 114.473\nINFO:tensorflow:global_step/sec: 122.207\nINFO:tensorflow:global_step/sec: 123.767\nINFO:tensorflow:global_step/sec: 125.336\nINFO:tensorflow:loss = 14.5477, step = 7016886 (4.307 sec)\nINFO:tensorflow:global_step/sec: 120.105\nINFO:tensorflow:global_step/sec: 110.698\nINFO:tensorflow:global_step/sec: 124.799\nINFO:tensorflow:global_step/sec: 121.776\nINFO:tensorflow:global_step/sec: 114.484\nINFO:tensorflow:loss = 16.5542, step = 7017438 (4.837 sec)\nINFO:tensorflow:global_step/sec: 125.595\nINFO:tensorflow:global_step/sec: 122.375\nINFO:tensorflow:global_step/sec: 122.392\nINFO:tensorflow:global_step/sec: 124.201\nINFO:tensorflow:global_step/sec: 122.038\nINFO:tensorflow:loss = 17.7121, step = 7017930 (3.817 sec)\nINFO:tensorflow:global_step/sec: 102.7\nINFO:tensorflow:global_step/sec: 121.585\nINFO:tensorflow:global_step/sec: 119.404\nINFO:tensorflow:global_step/sec: 121.501\nINFO:tensorflow:global_step/sec: 119.815\nINFO:tensorflow:loss = 16.0022, step = 7018577 (5.630 sec)\nINFO:tensorflow:global_step/sec: 118.615\nINFO:tensorflow:global_step/sec: 122.272\nINFO:tensorflow:global_step/sec: 121.206\nINFO:tensorflow:global_step/sec: 123.087\nINFO:tensorflow:global_step/sec: 120.079\nINFO:tensorflow:loss = 20.2255, step = 7019070 (4.049 sec)\nINFO:tensorflow:global_step/sec: 118.552\nINFO:tensorflow:global_step/sec: 121.404\nINFO:tensorflow:Saving checkpoints for 7019347 into viewfs://hadoop-meituan/user/hadoop-generalshop/caiqi.sun/spark/dl/demo/output/wide_deep_all_82/model.ckpt.\nINFO:tensorflow:global_step/sec: 102.859\nINFO:tensorflow:Starting evaluation at 2018-05-22-03:56:24\nINFO:tensorflow:Restoring parameters from viewfs://hadoop-meituan/user/hadoop-generalshop/caiqi.sun/spark/dl/demo/output/wide_deep_all_82/model.ckpt-7019347\nINFO:tensorflow:Evaluation [10/100]\nINFO:tensorflow:Evaluation [20/100]\nINFO:tensorflow:Evaluation [30/100]\nINFO:tensorflow:Evaluation [40/100]\nINFO:tensorflow:Evaluation [50/100]\nINFO:tensorflow:Evaluation [60/100]\nINFO:tensorflow:Evaluation [70/100]\nINFO:tensorflow:Evaluation [80/100]\nINFO:tensorflow:Evaluation [90/100]\nINFO:tensorflow:Evaluation [100/100]\nINFO:tensorflow:Finished evaluation at 2018-05-22-03:56:31\nINFO:tensorflow:Saving dict for global step 7019354: accuracy = 0.927031, accuracy_baseline = 0.925938, auc = 0.683203, auc_precision_recall = 0.170481, average_loss = 0.247913, global_step = 7019354, label/mean = 0.0740625, loss = 15.8664, prediction/mean = 0.0705214\nINFO:tensorflow:Validation (step 7019922): loss = 15.8664, accuracy_baseline = 0.925938, global_step = 7019354, auc = 0.683203, prediction/mean = 0.0705214, label/mean = 0.0740625, average_loss = 0.247913, auc_precision_recall = 0.170481, accuracy = 0.927031", "body": "### Describe the problem\r\nfeature request\uff1a\r\ni'm using the api \"tf.contrib.learn.Experiment\" for distributed training, but i don't know the method for evaluating the train_data and test_data at the same step, i want to check the model is overfit or not, so i want to print both train_auc and test_auc after saving model each time.\r\n\r\nnow, i can only see the performance on the test data for every saved model. is there any methods to print both train and test evaluation? Thanks a lot!\r\n\r\n### Source code / logs\r\nhere is  code:\r\n`def train(self):\r\n        if self.job_name == \"worker\":\r\n            # get data\r\n            self.init_worker_input_split()\r\n            self.init_worker_test_input_split()\r\n\r\n        # data input function\r\n        train_input = lambda: dataset_v1.create_input_fun(self.file_names,\r\n                                                          FLAGS.batch_size,\r\n                                                          repeat_count=FLAGS.train_epochs)\r\n        test_input = lambda: dataset_v1.create_input_fun(self.test_file_names,\r\n                                                         FLAGS.batch_size,\r\n                                                         perform_shuffle=False)\r\n        # estimator define\r\n        model = self.build_estimator(FLAGS.log_dir, FLAGS.model_type)\r\n\r\n        distribute_exp = tf.contrib.learn.Experiment(estimator=model,\r\n                                                     train_input_fn=train_input,\r\n                                                     eval_input_fn=test_input,\r\n                                                     min_eval_frequency=100\r\n                                                     )\r\n\r\n        if self.job_name == \"ps\":\r\n            # Starts a TensorFlow server and joins the serving thread\r\n            distribute_exp.run_std_server()\r\n        elif self.job_name == \"worker\":\r\n            distribute_exp.train_and_evaluate()\r\n\r\n        if self.is_chief:\r\n            # Evaluate on the evaluation data.\r\n            distribute_exp.evaluate(name='test_performance')\r\n\r\n        tf.logging.info(\"Optimization Finished!\")`\r\n\r\nhere is the logs:\r\nINFO:tensorflow:Validation (step 7014908): loss = 15.8598, accuracy_baseline = 0.925938, global_step = 7014348, auc = 0.683994, prediction/mean = 0.0714387, label/mean = 0.0740625, average_loss = 0.24781, auc_precision_recall = 0.167725, accuracy = 0.927031\r\nINFO:tensorflow:global_step/sec: 98.1175\r\nINFO:tensorflow:global_step/sec: 124.708\r\nINFO:tensorflow:global_step/sec: 121.122\r\nINFO:tensorflow:loss = 11.3313, step = 7016362 (21.941 sec)\r\nINFO:tensorflow:global_step/sec: 122.56\r\nINFO:tensorflow:global_step/sec: 114.473\r\nINFO:tensorflow:global_step/sec: 122.207\r\nINFO:tensorflow:global_step/sec: 123.767\r\nINFO:tensorflow:global_step/sec: 125.336\r\nINFO:tensorflow:loss = 14.5477, step = 7016886 (4.307 sec)\r\nINFO:tensorflow:global_step/sec: 120.105\r\nINFO:tensorflow:global_step/sec: 110.698\r\nINFO:tensorflow:global_step/sec: 124.799\r\nINFO:tensorflow:global_step/sec: 121.776\r\nINFO:tensorflow:global_step/sec: 114.484\r\nINFO:tensorflow:loss = 16.5542, step = 7017438 (4.837 sec)\r\nINFO:tensorflow:global_step/sec: 125.595\r\nINFO:tensorflow:global_step/sec: 122.375\r\nINFO:tensorflow:global_step/sec: 122.392\r\nINFO:tensorflow:global_step/sec: 124.201\r\nINFO:tensorflow:global_step/sec: 122.038\r\nINFO:tensorflow:loss = 17.7121, step = 7017930 (3.817 sec)\r\nINFO:tensorflow:global_step/sec: 102.7\r\nINFO:tensorflow:global_step/sec: 121.585\r\nINFO:tensorflow:global_step/sec: 119.404\r\nINFO:tensorflow:global_step/sec: 121.501\r\nINFO:tensorflow:global_step/sec: 119.815\r\nINFO:tensorflow:loss = 16.0022, step = 7018577 (5.630 sec)\r\nINFO:tensorflow:global_step/sec: 118.615\r\nINFO:tensorflow:global_step/sec: 122.272\r\nINFO:tensorflow:global_step/sec: 121.206\r\nINFO:tensorflow:global_step/sec: 123.087\r\nINFO:tensorflow:global_step/sec: 120.079\r\nINFO:tensorflow:loss = 20.2255, step = 7019070 (4.049 sec)\r\nINFO:tensorflow:global_step/sec: 118.552\r\nINFO:tensorflow:global_step/sec: 121.404\r\nINFO:tensorflow:Saving checkpoints for 7019347 into viewfs://hadoop-meituan/user/hadoop-generalshop/caiqi.sun/spark/dl/demo/output/wide_deep_all_82/model.ckpt.\r\nINFO:tensorflow:global_step/sec: 102.859\r\nINFO:tensorflow:Starting evaluation at 2018-05-22-03:56:24\r\nINFO:tensorflow:Restoring parameters from viewfs://hadoop-meituan/user/hadoop-generalshop/caiqi.sun/spark/dl/demo/output/wide_deep_all_82/model.ckpt-7019347\r\nINFO:tensorflow:Evaluation [10/100]\r\nINFO:tensorflow:Evaluation [20/100]\r\nINFO:tensorflow:Evaluation [30/100]\r\nINFO:tensorflow:Evaluation [40/100]\r\nINFO:tensorflow:Evaluation [50/100]\r\nINFO:tensorflow:Evaluation [60/100]\r\nINFO:tensorflow:Evaluation [70/100]\r\nINFO:tensorflow:Evaluation [80/100]\r\nINFO:tensorflow:Evaluation [90/100]\r\nINFO:tensorflow:Evaluation [100/100]\r\nINFO:tensorflow:Finished evaluation at 2018-05-22-03:56:31\r\nINFO:tensorflow:Saving dict for global step 7019354: accuracy = 0.927031, accuracy_baseline = 0.925938, auc = 0.683203, auc_precision_recall = 0.170481, average_loss = 0.247913, global_step = 7019354, label/mean = 0.0740625, loss = 15.8664, prediction/mean = 0.0705214\r\nINFO:tensorflow:Validation (step 7019922): loss = 15.8664, accuracy_baseline = 0.925938, global_step = 7019354, auc = 0.683203, prediction/mean = 0.0705214, label/mean = 0.0740625, average_loss = 0.247913, auc_precision_recall = 0.170481, accuracy = 0.927031\r\n\r\n"}