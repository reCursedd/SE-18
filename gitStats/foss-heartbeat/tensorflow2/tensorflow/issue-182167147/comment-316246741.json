{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/316246741", "html_url": "https://github.com/tensorflow/tensorflow/issues/4887#issuecomment-316246741", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4887", "id": 316246741, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjI0Njc0MQ==", "user": {"login": "jccaicedo", "id": 7527135, "node_id": "MDQ6VXNlcjc1MjcxMzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7527135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jccaicedo", "html_url": "https://github.com/jccaicedo", "followers_url": "https://api.github.com/users/jccaicedo/followers", "following_url": "https://api.github.com/users/jccaicedo/following{/other_user}", "gists_url": "https://api.github.com/users/jccaicedo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jccaicedo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jccaicedo/subscriptions", "organizations_url": "https://api.github.com/users/jccaicedo/orgs", "repos_url": "https://api.github.com/users/jccaicedo/repos", "events_url": "https://api.github.com/users/jccaicedo/events{/privacy}", "received_events_url": "https://api.github.com/users/jccaicedo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-19T01:36:25Z", "updated_at": "2017-07-19T01:36:25Z", "author_association": "NONE", "body_html": "<p>I also have an experience similar to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6834669\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dhaneshr\">@dhaneshr</a> : Passing <code>is_training=False</code> messes up the output (resnet_v2 with TFv1.2.0). That means the feed-forward pass diverges to large numbers, and sometimes even to NaN. I wonder if that's a problem of <code>slim</code> or <code>layers</code>.</p>\n<p>I train my own ResNet model, which successfully converges after a few epochs. However, after I save the model and then recover it for inference, everything seems wrong, even with images used during training. If I do <code>is_training=True</code> the outpus are mostly random (caused by BatchNormalization). When I recover the model for additional training epochs, it works just fine, and keeps the accuracy improving. I checked the weights of the network, and they're alright.</p>\n<p>It seems like the flag <code>is_training=False</code> is not being passed correctly somewhere, and the BatchNormalization layers fail to keep the activations bounded. Does anybody have a suggestion for fixing this? Or maybe I'm missing something?</p>", "body_text": "I also have an experience similar to @dhaneshr : Passing is_training=False messes up the output (resnet_v2 with TFv1.2.0). That means the feed-forward pass diverges to large numbers, and sometimes even to NaN. I wonder if that's a problem of slim or layers.\nI train my own ResNet model, which successfully converges after a few epochs. However, after I save the model and then recover it for inference, everything seems wrong, even with images used during training. If I do is_training=True the outpus are mostly random (caused by BatchNormalization). When I recover the model for additional training epochs, it works just fine, and keeps the accuracy improving. I checked the weights of the network, and they're alright.\nIt seems like the flag is_training=False is not being passed correctly somewhere, and the BatchNormalization layers fail to keep the activations bounded. Does anybody have a suggestion for fixing this? Or maybe I'm missing something?", "body": "I also have an experience similar to @dhaneshr : Passing `is_training=False` messes up the output (resnet_v2 with TFv1.2.0). That means the feed-forward pass diverges to large numbers, and sometimes even to NaN. I wonder if that's a problem of `slim` or `layers`. \r\n\r\nI train my own ResNet model, which successfully converges after a few epochs. However, after I save the model and then recover it for inference, everything seems wrong, even with images used during training. If I do `is_training=True` the outpus are mostly random (caused by BatchNormalization). When I recover the model for additional training epochs, it works just fine, and keeps the accuracy improving. I checked the weights of the network, and they're alright.\r\n\r\nIt seems like the flag `is_training=False` is not being passed correctly somewhere, and the BatchNormalization layers fail to keep the activations bounded. Does anybody have a suggestion for fixing this? Or maybe I'm missing something?"}