{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/383167098", "html_url": "https://github.com/tensorflow/tensorflow/issues/18671#issuecomment-383167098", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18671", "id": 383167098, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzE2NzA5OA==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-20T17:29:48Z", "updated_at": "2018-04-20T17:29:48Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2902390\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kirk86\">@kirk86</a> - here's an example illustrating that the two are not identical (<code>name_scope</code> does not affect the names of variables fetched from <code>tf.get_variable</code> to facilitate easier sharing of variables, irrespective of the <code>name_scope</code> under which the operations are being created).</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n  <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my_scope<span class=\"pl-pds\">\"</span></span>):\n    <span class=\"pl-c1\">print</span>(tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1</span>.).name)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Will print v:0</span>\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n  <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my_scope<span class=\"pl-pds\">\"</span></span>):\n    <span class=\"pl-c1\">print</span>(tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1</span>.).name)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Will print my_scope/v:0</span></pre></div>\n<p>For example, the following graph shares the same variable value between two different computations. And <code>name_scope</code> is used so that the different computations are grouped together nicely by name (which means they also render nicely on graph visualizations like that of tensorboard):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>first_computation<span class=\"pl-pds\">\"</span></span>):\n  v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1</span>.)\n  c1 <span class=\"pl-k\">=</span> tf.add(v, <span class=\"pl-c1\">1</span>.)\n\n<span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>second_computation<span class=\"pl-pds\">\"</span></span>):\n  v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1</span>., <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n  c2 <span class=\"pl-k\">=</span> tf.multiply(v, <span class=\"pl-c1\">10</span>.)</pre></div>\n<p>This will create a single variable named <code>v</code>, shared between different computations.<br>\nMore information in <a href=\"https://www.tensorflow.org/programmers_guide/variables#sharing_variables\" rel=\"nofollow\">https://www.tensorflow.org/programmers_guide/variables#sharing_variables</a></p>\n<p>Hope that helps.</p>", "body_text": "@kirk86 - here's an example illustrating that the two are not identical (name_scope does not affect the names of variables fetched from tf.get_variable to facilitate easier sharing of variables, irrespective of the name_scope under which the operations are being created).\nimport tensorflow as tf\n\nwith tf.Graph().as_default():\n  with tf.name_scope(\"my_scope\"):\n    print(tf.get_variable(\"v\", 1.).name)  # Will print v:0\n\nwith tf.Graph().as_default():\n  with tf.variable_scope(\"my_scope\"):\n    print(tf.get_variable(\"v\", 1.).name)  # Will print my_scope/v:0\nFor example, the following graph shares the same variable value between two different computations. And name_scope is used so that the different computations are grouped together nicely by name (which means they also render nicely on graph visualizations like that of tensorboard):\nimport tensorflow as tf\n\nwith tf.name_scope(\"first_computation\"):\n  v = tf.get_variable(\"v\", 1.)\n  c1 = tf.add(v, 1.)\n\nwith tf.name_scope(\"second_computation\"):\n  v = tf.get_variable(\"v\", 1., reuse=True)\n  c2 = tf.multiply(v, 10.)\nThis will create a single variable named v, shared between different computations.\nMore information in https://www.tensorflow.org/programmers_guide/variables#sharing_variables\nHope that helps.", "body": "@kirk86 - here's an example illustrating that the two are not identical (`name_scope` does not affect the names of variables fetched from `tf.get_variable` to facilitate easier sharing of variables, irrespective of the `name_scope` under which the operations are being created).\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.Graph().as_default():\r\n  with tf.name_scope(\"my_scope\"):\r\n    print(tf.get_variable(\"v\", 1.).name)  # Will print v:0\r\n\r\nwith tf.Graph().as_default():\r\n  with tf.variable_scope(\"my_scope\"):\r\n    print(tf.get_variable(\"v\", 1.).name)  # Will print my_scope/v:0\r\n```\r\n\r\nFor example, the following graph shares the same variable value between two different computations. And `name_scope` is used so that the different computations are grouped together nicely by name (which means they also render nicely on graph visualizations like that of tensorboard):\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.name_scope(\"first_computation\"):\r\n  v = tf.get_variable(\"v\", 1.)\r\n  c1 = tf.add(v, 1.)\r\n\r\nwith tf.name_scope(\"second_computation\"):\r\n  v = tf.get_variable(\"v\", 1., reuse=True)\r\n  c2 = tf.multiply(v, 10.)\r\n```\r\n\r\nThis will create a single variable named `v`, shared between different computations.\r\nMore information in https://www.tensorflow.org/programmers_guide/variables#sharing_variables\r\n\r\nHope that helps."}