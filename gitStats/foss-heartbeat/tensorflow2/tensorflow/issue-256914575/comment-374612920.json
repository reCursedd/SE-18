{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/374612920", "html_url": "https://github.com/tensorflow/tensorflow/issues/12988#issuecomment-374612920", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12988", "id": 374612920, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDYxMjkyMA==", "user": {"login": "BarMazal", "id": 37445561, "node_id": "MDQ6VXNlcjM3NDQ1NTYx", "avatar_url": "https://avatars3.githubusercontent.com/u/37445561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BarMazal", "html_url": "https://github.com/BarMazal", "followers_url": "https://api.github.com/users/BarMazal/followers", "following_url": "https://api.github.com/users/BarMazal/following{/other_user}", "gists_url": "https://api.github.com/users/BarMazal/gists{/gist_id}", "starred_url": "https://api.github.com/users/BarMazal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BarMazal/subscriptions", "organizations_url": "https://api.github.com/users/BarMazal/orgs", "repos_url": "https://api.github.com/users/BarMazal/repos", "events_url": "https://api.github.com/users/BarMazal/events{/privacy}", "received_events_url": "https://api.github.com/users/BarMazal/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-20T14:14:39Z", "updated_at": "2018-03-20T14:14:39Z", "author_association": "NONE", "body_html": "<p>Hi all,<br>\nI'm also facing issues when compiling the libraries for android.<br>\nMy intention is to link the library (say libtensorflow_inference.so) to a native c code that runs from the shell with no Java involved.<br>\nWhen I compile the android libraries, the build succeed but the symbols are not like extern c symbols but more like c++ symbols with decorations. I can see the symbols by using readelf on the resulted library.</p>\n<p>The build command I ran is:<br>\nbazel build  --config=android //tensorflow/examples/android:tensorflow_native_libs --cpu=armeabi-v7a --verbose_failures --copt=-g --copt=-fPIC<br>\nI also tried it without the -g and without the -fPIC with no change.</p>\n<p>The c code did not link with the libraries, unless I also linked the code with<br>\n-l:libandroid_tensorflow_inference_jni.lo</p>\n<p>but still when I try to run the application it says:<br>\nCANNOT LINK EXECUTABLE: cannot find \"libtensorflow_inference.so\" from verneed[1] in DT_NEEDED list for \"./dczoom_native\"<br>\npage record for 0xf769203c was not found (block_size=16)</p>\n<p>Although the library is in the path and I added LD_LIBRARY_PATH=./; before running the application.</p>\n<p>Then I added the exports to tensorflow/contrib/android/jni/version_script.lds. Now it links without adding -l:libandroid_tensorflow_inference_jni.lo but still the symbols seems to be C++ mingled and not extern \"C\".</p>\n<p>for example:<br>\n00d501ec  00003216 R_ARM_JUMP_SLOT   000bb355   TF_NewStatus<br>\n50: 000bb355    14 FUNC    GLOBAL DEFAULT   10 TF_NewStatus@@VERS_1.0</p>\n<p>How did you produce the symbol table above? And what should I do to enable the executable succeed with loading the dynamic library in runtime?</p>\n<p>Thanks.<br>\nGuy.</p>", "body_text": "Hi all,\nI'm also facing issues when compiling the libraries for android.\nMy intention is to link the library (say libtensorflow_inference.so) to a native c code that runs from the shell with no Java involved.\nWhen I compile the android libraries, the build succeed but the symbols are not like extern c symbols but more like c++ symbols with decorations. I can see the symbols by using readelf on the resulted library.\nThe build command I ran is:\nbazel build  --config=android //tensorflow/examples/android:tensorflow_native_libs --cpu=armeabi-v7a --verbose_failures --copt=-g --copt=-fPIC\nI also tried it without the -g and without the -fPIC with no change.\nThe c code did not link with the libraries, unless I also linked the code with\n-l:libandroid_tensorflow_inference_jni.lo\nbut still when I try to run the application it says:\nCANNOT LINK EXECUTABLE: cannot find \"libtensorflow_inference.so\" from verneed[1] in DT_NEEDED list for \"./dczoom_native\"\npage record for 0xf769203c was not found (block_size=16)\nAlthough the library is in the path and I added LD_LIBRARY_PATH=./; before running the application.\nThen I added the exports to tensorflow/contrib/android/jni/version_script.lds. Now it links without adding -l:libandroid_tensorflow_inference_jni.lo but still the symbols seems to be C++ mingled and not extern \"C\".\nfor example:\n00d501ec  00003216 R_ARM_JUMP_SLOT   000bb355   TF_NewStatus\n50: 000bb355    14 FUNC    GLOBAL DEFAULT   10 TF_NewStatus@@VERS_1.0\nHow did you produce the symbol table above? And what should I do to enable the executable succeed with loading the dynamic library in runtime?\nThanks.\nGuy.", "body": "Hi all,\r\n I'm also facing issues when compiling the libraries for android.\r\nMy intention is to link the library (say libtensorflow_inference.so) to a native c code that runs from the shell with no Java involved.\r\nWhen I compile the android libraries, the build succeed but the symbols are not like extern c symbols but more like c++ symbols with decorations. I can see the symbols by using readelf on the resulted library.\r\n\r\nThe build command I ran is:\r\nbazel build  --config=android //tensorflow/examples/android:tensorflow_native_libs --cpu=armeabi-v7a --verbose_failures --copt=-g --copt=-fPIC\r\nI also tried it without the -g and without the -fPIC with no change.\r\n\r\nThe c code did not link with the libraries, unless I also linked the code with \r\n-l:libandroid_tensorflow_inference_jni.lo\r\n\r\nbut still when I try to run the application it says:\r\nCANNOT LINK EXECUTABLE: cannot find \"libtensorflow_inference.so\" from verneed[1] in DT_NEEDED list for \"./dczoom_native\"\r\npage record for 0xf769203c was not found (block_size=16)\r\n\r\nAlthough the library is in the path and I added LD_LIBRARY_PATH=./; before running the application.\r\n\r\nThen I added the exports to tensorflow/contrib/android/jni/version_script.lds. Now it links without adding -l:libandroid_tensorflow_inference_jni.lo but still the symbols seems to be C++ mingled and not extern \"C\".\r\n\r\nfor example:\r\n00d501ec  00003216 R_ARM_JUMP_SLOT   000bb355   TF_NewStatus\r\n50: 000bb355    14 FUNC    GLOBAL DEFAULT   10 TF_NewStatus@@VERS_1.0\r\n\r\nHow did you produce the symbol table above? And what should I do to enable the executable succeed with loading the dynamic library in runtime?\r\n\r\nThanks.\r\n Guy."}