{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/310674213", "html_url": "https://github.com/tensorflow/tensorflow/issues/10997#issuecomment-310674213", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10997", "id": 310674213, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDY3NDIxMw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-23T14:04:55Z", "updated_at": "2017-06-23T14:04:55Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hmm, in that case I'm going to close this issue as \"working as intended\" for now. <code>port::AlignedMalloc()</code> is used at the lowest level to allocate tensor buffers, but these buffers may be shared with other parts of the system (e.g. stored in the <code>OpKernel</code> objects that implement the operations in the graph) in reference-counted <code>tensorflow::Tensor</code> objects. As such, it's possible that you could allocated a <code>TF_Tensor*</code>, pass it to one of the APIs, call <code>TF_DeleteTensor()</code> on it, and the memory would not be freed until later. Many tensors used in a session, such as constants, will only be deleted when the session is deleted.</p>\n<p>If you find other evidence of a memory leak with this approach, please feel free to reopen the issue!</p>", "body_text": "Hmm, in that case I'm going to close this issue as \"working as intended\" for now. port::AlignedMalloc() is used at the lowest level to allocate tensor buffers, but these buffers may be shared with other parts of the system (e.g. stored in the OpKernel objects that implement the operations in the graph) in reference-counted tensorflow::Tensor objects. As such, it's possible that you could allocated a TF_Tensor*, pass it to one of the APIs, call TF_DeleteTensor() on it, and the memory would not be freed until later. Many tensors used in a session, such as constants, will only be deleted when the session is deleted.\nIf you find other evidence of a memory leak with this approach, please feel free to reopen the issue!", "body": "Hmm, in that case I'm going to close this issue as \"working as intended\" for now. `port::AlignedMalloc()` is used at the lowest level to allocate tensor buffers, but these buffers may be shared with other parts of the system (e.g. stored in the `OpKernel` objects that implement the operations in the graph) in reference-counted `tensorflow::Tensor` objects. As such, it's possible that you could allocated a `TF_Tensor*`, pass it to one of the APIs, call `TF_DeleteTensor()` on it, and the memory would not be freed until later. Many tensors used in a session, such as constants, will only be deleted when the session is deleted.\r\n\r\nIf you find other evidence of a memory leak with this approach, please feel free to reopen the issue!"}