{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23344", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23344/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23344/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23344/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23344", "id": 374928488, "node_id": "MDU6SXNzdWUzNzQ5Mjg0ODg=", "number": 23344, "title": "LayoutOptimizer optimizes to unsupported data_format for max_pool on CPU", "user": {"login": "FBerendsen", "id": 12032283, "node_id": "MDQ6VXNlcjEyMDMyMjgz", "avatar_url": "https://avatars2.githubusercontent.com/u/12032283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FBerendsen", "html_url": "https://github.com/FBerendsen", "followers_url": "https://api.github.com/users/FBerendsen/followers", "following_url": "https://api.github.com/users/FBerendsen/following{/other_user}", "gists_url": "https://api.github.com/users/FBerendsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/FBerendsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FBerendsen/subscriptions", "organizations_url": "https://api.github.com/users/FBerendsen/orgs", "repos_url": "https://api.github.com/users/FBerendsen/repos", "events_url": "https://api.github.com/users/FBerendsen/events{/privacy}", "received_events_url": "https://api.github.com/users/FBerendsen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 1093464312, "node_id": "MDU6TGFiZWwxMDkzNDY0MzEy", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:others", "name": "type:others", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-10-29T09:37:04Z", "updated_at": "2018-11-21T18:08:25Z", "closed_at": "2018-11-21T18:08:25Z", "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes</li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10</li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:</li>\n<li>TensorFlow installed from (source or binary): binary</li>\n<li>TensorFlow version (use command below):  v1.11.0-rc2-4-gc19e29306c 1.11.0</li>\n<li>Python version: 3.6.5</li>\n<li>Bazel version (if compiling from source):</li>\n<li>GCC/Compiler version (if compiling from source):</li>\n<li>CUDA/cuDNN version: 9.0.176/7.1.3</li>\n<li>GPU model and memory: NVIDIA Quadro M2200</li>\n</ul>\n<p><strong>Describe the current behavior</strong></p>\n<p>TensorFlow automatically replaces my MaxPoolingOp by one using another data format which is not supported, subsequently.<br>\nThis throws the <code>InvalidArgumentError</code> as seen below.<br>\nThe problem arose when upgrading from TensorFlow 1.8 to 1.11 and from the error it seems to be caused by a <code>TransposeNHWCToNCHW-LayoutOptimizer</code>. When isolating the issue to reproduce it, it seems that <code>max_pool</code>, <code>dataset</code> and <code>squeeze</code> are involved to raise the error.  The only related (closed) issue I could find: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"325666823\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/19497\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/19497/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/19497\">#19497</a> \"NHWC convolution sometimes incorrectly considered NCHW\"</p>\n<p><code> InvalidArgumentError (see above for traceback): Default MaxPoolingOp only supports NHWC on device type CPU [[{{node label_image_dilated}} = MaxPool[T=DT_INT32, data_format=\"NCHW\", ksize=[1, 1, 3, 3], padding=\"SAME\", strides=[1, 1, 1, 1]](label_image_dilated-0-TransposeNHWCToNCHW-LayoutOptimizer)]] [[{{node OneShotIterator_2}} = OneShotIterator[container=\"\", dataset_factory=_make_dataset_UaZD9hBkHvg[], output_shapes=[[?,?]], output_types=[DT_INT32], shared_name=\"\", _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]</code></p>\n<p><strong>Describe the expected behavior</strong></p>\n<p>To not throw the error as was the case for TensorFlow 1.8.</p>\n<p><strong>Code to reproduce the issue</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\ndataset_np <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>height_or_width<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">512</span>, \n              <span class=\"pl-s\"><span class=\"pl-pds\">'</span>indices<span class=\"pl-pds\">'</span></span>: np.random.randint(<span class=\"pl-v\">low</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">high</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">512</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1000</span>,<span class=\"pl-c1\">2</span>),<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.int64),\n              <span class=\"pl-s\"><span class=\"pl-pds\">'</span>values<span class=\"pl-pds\">'</span></span> : np.random.randint(<span class=\"pl-v\">low</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">high</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1000</span>,),<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.int32)}\ndataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensors(dataset_np)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">densify</span>(<span class=\"pl-smi\">element</span>):\n    label_image_sparse <span class=\"pl-k\">=</span> tf.SparseTensor(<span class=\"pl-v\">indices</span> <span class=\"pl-k\">=</span> element[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>indices<span class=\"pl-pds\">'</span></span>], \n                                         <span class=\"pl-v\">values</span> <span class=\"pl-k\">=</span> element[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>values<span class=\"pl-pds\">'</span></span>], \n                                         <span class=\"pl-v\">dense_shape</span> <span class=\"pl-k\">=</span> tf.cast(tf.stack([element[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>height_or_width<span class=\"pl-pds\">'</span></span>],\n                                                                         element[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>height_or_width<span class=\"pl-pds\">'</span></span>]]),tf.int64))\n    label_image <span class=\"pl-k\">=</span> tf.sparse_tensor_to_dense(label_image_sparse, \n                                            <span class=\"pl-v\">default_value</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, \n                                            <span class=\"pl-v\">validate_indices</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, \n                                            <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>label_image<span class=\"pl-pds\">'</span></span>)\n    label_image_dilated <span class=\"pl-k\">=</span> tf.squeeze(tf.nn.max_pool([tf.expand_dims(label_image, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)], \n                                                     <span class=\"pl-v\">data_format</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NHWC<span class=\"pl-pds\">\"</span></span>, \n                                                     <span class=\"pl-v\">ksize</span><span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">1</span>], \n                                                     <span class=\"pl-v\">strides</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], \n                                                     <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>, \n                                                     <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>label_image_dilated<span class=\"pl-pds\">'</span></span>),[<span class=\"pl-c1\">0</span>,<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n    <span class=\"pl-k\">return</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>label_image_dilated<span class=\"pl-pds\">'</span></span>:label_image_dilated}\n\ndataset <span class=\"pl-k\">=</span> dataset.map(densify)\nelement <span class=\"pl-k\">=</span> dataset.make_one_shot_iterator().get_next()\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    result <span class=\"pl-k\">=</span> sess.run(element)\n    <span class=\"pl-c1\">print</span>(result)</pre></div>\n<p><strong>Other info / logs</strong></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below):  v1.11.0-rc2-4-gc19e29306c 1.11.0\nPython version: 3.6.5\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: 9.0.176/7.1.3\nGPU model and memory: NVIDIA Quadro M2200\n\nDescribe the current behavior\nTensorFlow automatically replaces my MaxPoolingOp by one using another data format which is not supported, subsequently.\nThis throws the InvalidArgumentError as seen below.\nThe problem arose when upgrading from TensorFlow 1.8 to 1.11 and from the error it seems to be caused by a TransposeNHWCToNCHW-LayoutOptimizer. When isolating the issue to reproduce it, it seems that max_pool, dataset and squeeze are involved to raise the error.  The only related (closed) issue I could find: #19497 \"NHWC convolution sometimes incorrectly considered NCHW\"\n InvalidArgumentError (see above for traceback): Default MaxPoolingOp only supports NHWC on device type CPU [[{{node label_image_dilated}} = MaxPool[T=DT_INT32, data_format=\"NCHW\", ksize=[1, 1, 3, 3], padding=\"SAME\", strides=[1, 1, 1, 1]](label_image_dilated-0-TransposeNHWCToNCHW-LayoutOptimizer)]] [[{{node OneShotIterator_2}} = OneShotIterator[container=\"\", dataset_factory=_make_dataset_UaZD9hBkHvg[], output_shapes=[[?,?]], output_types=[DT_INT32], shared_name=\"\", _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\nDescribe the expected behavior\nTo not throw the error as was the case for TensorFlow 1.8.\nCode to reproduce the issue\nimport tensorflow as tf\nimport numpy as np\n\ndataset_np = {'height_or_width': 512, \n              'indices': np.random.randint(low=0, high=512, size=(1000,2),dtype=np.int64),\n              'values' : np.random.randint(low=0, high=1000, size=(1000,),dtype=np.int32)}\ndataset = tf.data.Dataset.from_tensors(dataset_np)\n\ndef densify(element):\n    label_image_sparse = tf.SparseTensor(indices = element['indices'], \n                                         values = element['values'], \n                                         dense_shape = tf.cast(tf.stack([element['height_or_width'],\n                                                                         element['height_or_width']]),tf.int64))\n    label_image = tf.sparse_tensor_to_dense(label_image_sparse, \n                                            default_value=-1, \n                                            validate_indices=False, \n                                            name='label_image')\n    label_image_dilated = tf.squeeze(tf.nn.max_pool([tf.expand_dims(label_image, axis=-1)], \n                                                     data_format=\"NHWC\", \n                                                     ksize= [1,3,3,1], \n                                                     strides = [1,1,1,1], \n                                                     padding='SAME', \n                                                     name='label_image_dilated'),[0,-1])\n    return {'label_image_dilated':label_image_dilated}\n\ndataset = dataset.map(densify)\nelement = dataset.make_one_shot_iterator().get_next()\n\nwith tf.Session() as sess:\n    result = sess.run(element)\n    print(result)\nOther info / logs", "body": "**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\r\n- TensorFlow installed from (source or binary): binary\r\n- TensorFlow version (use command below):  v1.11.0-rc2-4-gc19e29306c 1.11.0\r\n- Python version: 3.6.5\r\n- Bazel version (if compiling from source):\r\n- GCC/Compiler version (if compiling from source):\r\n- CUDA/cuDNN version: 9.0.176/7.1.3 \r\n- GPU model and memory: NVIDIA Quadro M2200\r\n\r\n**Describe the current behavior**\r\n\r\nTensorFlow automatically replaces my MaxPoolingOp by one using another data format which is not supported, subsequently. \r\nThis throws the `InvalidArgumentError` as seen below.\r\nThe problem arose when upgrading from TensorFlow 1.8 to 1.11 and from the error it seems to be caused by a `TransposeNHWCToNCHW-LayoutOptimizer`. When isolating the issue to reproduce it, it seems that `max_pool`, `dataset` and `squeeze` are involved to raise the error.  The only related (closed) issue I could find: #19497 \"NHWC convolution sometimes incorrectly considered NCHW\" \r\n\r\n`\r\nInvalidArgumentError (see above for traceback): Default MaxPoolingOp only supports NHWC on device type CPU\r\n\t [[{{node label_image_dilated}} = MaxPool[T=DT_INT32, data_format=\"NCHW\", ksize=[1, 1, 3, 3], padding=\"SAME\", strides=[1, 1, 1, 1]](label_image_dilated-0-TransposeNHWCToNCHW-LayoutOptimizer)]]\r\n\t [[{{node OneShotIterator_2}} = OneShotIterator[container=\"\", dataset_factory=_make_dataset_UaZD9hBkHvg[], output_shapes=[[?,?]], output_types=[DT_INT32], shared_name=\"\", _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]`\r\n\r\n**Describe the expected behavior**\r\n\r\nTo not throw the error as was the case for TensorFlow 1.8.\r\n\r\n**Code to reproduce the issue**\r\n```python \r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndataset_np = {'height_or_width': 512, \r\n              'indices': np.random.randint(low=0, high=512, size=(1000,2),dtype=np.int64),\r\n              'values' : np.random.randint(low=0, high=1000, size=(1000,),dtype=np.int32)}\r\ndataset = tf.data.Dataset.from_tensors(dataset_np)\r\n\r\ndef densify(element):\r\n    label_image_sparse = tf.SparseTensor(indices = element['indices'], \r\n                                         values = element['values'], \r\n                                         dense_shape = tf.cast(tf.stack([element['height_or_width'],\r\n                                                                         element['height_or_width']]),tf.int64))\r\n    label_image = tf.sparse_tensor_to_dense(label_image_sparse, \r\n                                            default_value=-1, \r\n                                            validate_indices=False, \r\n                                            name='label_image')\r\n    label_image_dilated = tf.squeeze(tf.nn.max_pool([tf.expand_dims(label_image, axis=-1)], \r\n                                                     data_format=\"NHWC\", \r\n                                                     ksize= [1,3,3,1], \r\n                                                     strides = [1,1,1,1], \r\n                                                     padding='SAME', \r\n                                                     name='label_image_dilated'),[0,-1])\r\n    return {'label_image_dilated':label_image_dilated}\r\n\r\ndataset = dataset.map(densify)\r\nelement = dataset.make_one_shot_iterator().get_next()\r\n\r\nwith tf.Session() as sess:\r\n    result = sess.run(element)\r\n    print(result)\r\n```\r\n\r\n**Other info / logs**\r\n\r\n"}