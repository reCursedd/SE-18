{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/239081963", "html_url": "https://github.com/tensorflow/tensorflow/issues/3494#issuecomment-239081963", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3494", "id": 239081963, "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTA4MTk2Mw==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-11T06:20:04Z", "updated_at": "2016-08-11T06:22:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>BTW, the problem that <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4071269\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alexcolburn\">@alexcolburn</a> solution fixes was is a crash in cuda_diagnostics code which gets triggered when the library can't find cuda dyld. The code tries to print some strings obtained <code>CFStringGetCStringPtr</code> which can return null, which shouldn't be printed. I fixed one such condition in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"166873831\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/3448\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/3448/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/3448\">#3448</a> but there were other improper uses in that file I didn't touch. The way to tell if that's the issue is to see if there's <code>Diagnostician</code> in stack trace. IE, to look at MacOS crash logs for (Application-&gt;Utilities-&gt;Console, under User Diagnostic Reports for Python) and see if there's something like  this in the stack trace</p>\n<pre><code>Process:               Python [2127]\nPath:                  /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python\nIdentifier:            Python\nVersion:               2.7.10 (2.7.10)\nCode Type:             X86-64 (Native)\nParent Process:        Python [2113]\nResponsible:           Python [2127]\nUser ID:               501\n\nPlugIn Path:             /Users/USER/*/_pywrap_tensorflow.so\n\n....\n\n-&gt; \n    __TEXT                 0000000101b33000-0000000101b34000 [    4K] r-x/rwx SM=COW  /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python\n\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   libsystem_c.dylib               0x00007fff9d00c152 strlen + 18\n1   _pywrap_tensorflow.so           0x00000001067cea2c perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() + 204\n2   _pywrap_tensorflow.so           0x00000001067ce220 perftools::gputools::cuda::Diagnostician::LogDriverVersionInformation() + 512\n3   _pywrap_tensorflow.so           0x00000001067cdf8f perftools::gputools::cuda::Diagnostician::LogDiagnosticInformation() + 671\n4   _pywrap_tensorflow.so           0x00000001067ded69 perftools::gputools::cuda::CUDADriver::Init() + 569\n5   _pywrap_tensorflow.so           0x00000001067f556f perftools::gputools::cuda::CudaPlatform::VisibleDeviceCount() const + 15\n6   _pywrap_tensorflow.so           0x00000001065841f5 \n</code></pre>", "body_text": "BTW, the problem that @alexcolburn solution fixes was is a crash in cuda_diagnostics code which gets triggered when the library can't find cuda dyld. The code tries to print some strings obtained CFStringGetCStringPtr which can return null, which shouldn't be printed. I fixed one such condition in #3448 but there were other improper uses in that file I didn't touch. The way to tell if that's the issue is to see if there's Diagnostician in stack trace. IE, to look at MacOS crash logs for (Application->Utilities->Console, under User Diagnostic Reports for Python) and see if there's something like  this in the stack trace\nProcess:               Python [2127]\nPath:                  /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python\nIdentifier:            Python\nVersion:               2.7.10 (2.7.10)\nCode Type:             X86-64 (Native)\nParent Process:        Python [2113]\nResponsible:           Python [2127]\nUser ID:               501\n\nPlugIn Path:             /Users/USER/*/_pywrap_tensorflow.so\n\n....\n\n-> \n    __TEXT                 0000000101b33000-0000000101b34000 [    4K] r-x/rwx SM=COW  /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python\n\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   libsystem_c.dylib               0x00007fff9d00c152 strlen + 18\n1   _pywrap_tensorflow.so           0x00000001067cea2c perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() + 204\n2   _pywrap_tensorflow.so           0x00000001067ce220 perftools::gputools::cuda::Diagnostician::LogDriverVersionInformation() + 512\n3   _pywrap_tensorflow.so           0x00000001067cdf8f perftools::gputools::cuda::Diagnostician::LogDiagnosticInformation() + 671\n4   _pywrap_tensorflow.so           0x00000001067ded69 perftools::gputools::cuda::CUDADriver::Init() + 569\n5   _pywrap_tensorflow.so           0x00000001067f556f perftools::gputools::cuda::CudaPlatform::VisibleDeviceCount() const + 15\n6   _pywrap_tensorflow.so           0x00000001065841f5", "body": "BTW, the problem that @alexcolburn solution fixes was is a crash in cuda_diagnostics code which gets triggered when the library can't find cuda dyld. The code tries to print some strings obtained `CFStringGetCStringPtr` which can return null, which shouldn't be printed. I fixed one such condition in #3448 but there were other improper uses in that file I didn't touch. The way to tell if that's the issue is to see if there's `Diagnostician` in stack trace. IE, to look at MacOS crash logs for (Application->Utilities->Console, under User Diagnostic Reports for Python) and see if there's something like  this in the stack trace\n\n```\nProcess:               Python [2127]\nPath:                  /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python\nIdentifier:            Python\nVersion:               2.7.10 (2.7.10)\nCode Type:             X86-64 (Native)\nParent Process:        Python [2113]\nResponsible:           Python [2127]\nUser ID:               501\n\nPlugIn Path:             /Users/USER/*/_pywrap_tensorflow.so\n\n....\n\n-> \n    __TEXT                 0000000101b33000-0000000101b34000 [    4K] r-x/rwx SM=COW  /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python\n\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   libsystem_c.dylib               0x00007fff9d00c152 strlen + 18\n1   _pywrap_tensorflow.so           0x00000001067cea2c perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() + 204\n2   _pywrap_tensorflow.so           0x00000001067ce220 perftools::gputools::cuda::Diagnostician::LogDriverVersionInformation() + 512\n3   _pywrap_tensorflow.so           0x00000001067cdf8f perftools::gputools::cuda::Diagnostician::LogDiagnosticInformation() + 671\n4   _pywrap_tensorflow.so           0x00000001067ded69 perftools::gputools::cuda::CUDADriver::Init() + 569\n5   _pywrap_tensorflow.so           0x00000001067f556f perftools::gputools::cuda::CudaPlatform::VisibleDeviceCount() const + 15\n6   _pywrap_tensorflow.so           0x00000001065841f5 \n```\n"}