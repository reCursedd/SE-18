{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271607576", "html_url": "https://github.com/tensorflow/tensorflow/issues/6752#issuecomment-271607576", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6752", "id": 271607576, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTYwNzU3Ng==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-10T15:36:13Z", "updated_at": "2017-01-10T16:39:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>OK, there do seem to be some missing optimization opportunities here.</p>\n<p>First of all, matrix*vector matmul doesn't seem to be parallelized. Doing nxn by nx1 multiply uses one CPU core and runs at about 5 G ops/sec.</p>\n<p>For some comparative experiments, note that this operation can be equivalently written as tf.mul+tf.reduce_sum, or simply as reduce_sum(...,axis=1) since our vector is all ones</p>\n<p>Some experiments of equivalent reformulations with 16 threads and n=8*8192</p>\n<p>tf.matmul(matrix, vector) -- utilizes 1 core, 5 G ops/sec<br>\ntf.reduce_sum(matrix, axis=0) -- utilizes all cores, 5 G ops/sec<br>\ntf.reduce_sum(matrix, axis=1) -- utilizes all cores, 26 G ops/sec<br>\ntf.reduce_sum(tf.mul(matrix, vector), axis=1) -- utilizes all cores, 0.6 G ops/sec</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7657273\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/learyg\">@learyg</a> -- is this something that XLA optimization would help speed up?</p>", "body_text": "OK, there do seem to be some missing optimization opportunities here.\nFirst of all, matrix*vector matmul doesn't seem to be parallelized. Doing nxn by nx1 multiply uses one CPU core and runs at about 5 G ops/sec.\nFor some comparative experiments, note that this operation can be equivalently written as tf.mul+tf.reduce_sum, or simply as reduce_sum(...,axis=1) since our vector is all ones\nSome experiments of equivalent reformulations with 16 threads and n=8*8192\ntf.matmul(matrix, vector) -- utilizes 1 core, 5 G ops/sec\ntf.reduce_sum(matrix, axis=0) -- utilizes all cores, 5 G ops/sec\ntf.reduce_sum(matrix, axis=1) -- utilizes all cores, 26 G ops/sec\ntf.reduce_sum(tf.mul(matrix, vector), axis=1) -- utilizes all cores, 0.6 G ops/sec\n@learyg -- is this something that XLA optimization would help speed up?", "body": "OK, there do seem to be some missing optimization opportunities here.\r\n\r\nFirst of all, matrix*vector matmul doesn't seem to be parallelized. Doing nxn by nx1 multiply uses one CPU core and runs at about 5 G ops/sec.\r\n\r\nFor some comparative experiments, note that this operation can be equivalently written as tf.mul+tf.reduce_sum, or simply as reduce_sum(...,axis=1) since our vector is all ones\r\n\r\nSome experiments of equivalent reformulations with 16 threads and n=8*8192\r\n\r\ntf.matmul(matrix, vector) -- utilizes 1 core, 5 G ops/sec\r\ntf.reduce_sum(matrix, axis=0) -- utilizes all cores, 5 G ops/sec\r\ntf.reduce_sum(matrix, axis=1) -- utilizes all cores, 26 G ops/sec\r\ntf.reduce_sum(tf.mul(matrix, vector), axis=1) -- utilizes all cores, 0.6 G ops/sec\r\n\r\n\r\n@learyg -- is this something that XLA optimization would help speed up?"}