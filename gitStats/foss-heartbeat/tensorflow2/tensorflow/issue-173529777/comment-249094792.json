{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/249094792", "html_url": "https://github.com/tensorflow/tensorflow/issues/4066#issuecomment-249094792", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4066", "id": 249094792, "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTA5NDc5Mg==", "user": {"login": "moontails", "id": 4388831, "node_id": "MDQ6VXNlcjQzODg4MzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4388831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moontails", "html_url": "https://github.com/moontails", "followers_url": "https://api.github.com/users/moontails/followers", "following_url": "https://api.github.com/users/moontails/following{/other_user}", "gists_url": "https://api.github.com/users/moontails/gists{/gist_id}", "starred_url": "https://api.github.com/users/moontails/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moontails/subscriptions", "organizations_url": "https://api.github.com/users/moontails/orgs", "repos_url": "https://api.github.com/users/moontails/repos", "events_url": "https://api.github.com/users/moontails/events{/privacy}", "received_events_url": "https://api.github.com/users/moontails/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-23T03:38:20Z", "updated_at": "2016-09-23T05:17:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20399899\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/davidj-github\">@davidj-github</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1694130\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rinugun\">@rinugun</a></p>\n<p>Proposed changes to incorporate the above random sleep for milliseconds</p>\n<pre><code>#include &lt;chrono&gt;\n#include &lt;random&gt;\n#include &lt;thread&gt;\n\nvoid WaitBeforeRetry(const int delay_seconds) {\n    std::random_device rd;\n    std::mt19937 gen(rd());\n    std::uniform_int_distribution&lt;&gt; dist(1, 1000);\n\n    const int delay_milliseconds = delay_seconds * 1000;\n    const int random_milliseconds = dist(gen);\n    const int delay = std::min(delay_to_milliseconds + random_milliseconds,\n                               kMaximumBackoffSeconds);\n\n    std::this_thread::sleep_for(std::chrono::milliseconds(delay));\n}\n\nStatus CallWithRetries(const std::function&lt;Status()&gt;&amp; f,\n                       const int initial_delay_seconds) {\n  int retries = 0;\n  while (true) {\n    auto status = f();\n    if (!IsRetriable(status) || retries &gt;= kMaxRetries) {\n      return status;\n    }\n    LOG(ERROR) &lt;&lt; \"The operation resulted in an error and will be retried: \"\n               &lt;&lt; status.ToString();\n    WaitBeforeRetry(initial_delay_seconds &lt;&lt; retries);\n    retries++;\n  }\n}\n\n\n\n</code></pre>", "body_text": "@davidj-github @rinugun\nProposed changes to incorporate the above random sleep for milliseconds\n#include <chrono>\n#include <random>\n#include <thread>\n\nvoid WaitBeforeRetry(const int delay_seconds) {\n    std::random_device rd;\n    std::mt19937 gen(rd());\n    std::uniform_int_distribution<> dist(1, 1000);\n\n    const int delay_milliseconds = delay_seconds * 1000;\n    const int random_milliseconds = dist(gen);\n    const int delay = std::min(delay_to_milliseconds + random_milliseconds,\n                               kMaximumBackoffSeconds);\n\n    std::this_thread::sleep_for(std::chrono::milliseconds(delay));\n}\n\nStatus CallWithRetries(const std::function<Status()>& f,\n                       const int initial_delay_seconds) {\n  int retries = 0;\n  while (true) {\n    auto status = f();\n    if (!IsRetriable(status) || retries >= kMaxRetries) {\n      return status;\n    }\n    LOG(ERROR) << \"The operation resulted in an error and will be retried: \"\n               << status.ToString();\n    WaitBeforeRetry(initial_delay_seconds << retries);\n    retries++;\n  }\n}", "body": "@davidj-github @rinugun \n\nProposed changes to incorporate the above random sleep for milliseconds\n\n```\n#include <chrono>\n#include <random>\n#include <thread>\n\nvoid WaitBeforeRetry(const int delay_seconds) {\n    std::random_device rd;\n    std::mt19937 gen(rd());\n    std::uniform_int_distribution<> dist(1, 1000);\n\n    const int delay_milliseconds = delay_seconds * 1000;\n    const int random_milliseconds = dist(gen);\n    const int delay = std::min(delay_to_milliseconds + random_milliseconds,\n                               kMaximumBackoffSeconds);\n\n    std::this_thread::sleep_for(std::chrono::milliseconds(delay));\n}\n\nStatus CallWithRetries(const std::function<Status()>& f,\n                       const int initial_delay_seconds) {\n  int retries = 0;\n  while (true) {\n    auto status = f();\n    if (!IsRetriable(status) || retries >= kMaxRetries) {\n      return status;\n    }\n    LOG(ERROR) << \"The operation resulted in an error and will be retried: \"\n               << status.ToString();\n    WaitBeforeRetry(initial_delay_seconds << retries);\n    retries++;\n  }\n}\n\n\n\n```\n"}