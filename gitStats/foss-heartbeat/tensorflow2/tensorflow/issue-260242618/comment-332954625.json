{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/332954625", "html_url": "https://github.com/tensorflow/tensorflow/pull/13291#issuecomment-332954625", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13291", "id": 332954625, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjk1NDYyNQ==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-28T20:29:11Z", "updated_at": "2017-09-28T20:29:11Z", "author_association": "MEMBER", "body_html": "<p>In principle we could do the same thing for XLA extensions that we do for op libraries and filesystems: include the registries and symbols needed to register new things in //tensorflow:libtensorflow_framework.so, then use an equivalent of tf.load_op_library to load a shared object (that object references symbols in libtensorflow_framework.so and does the registration; we could also add an XLA dlopen() wrapper to the C API for access in other languages). Right now all of the XLA symbols get added to pywrap_tensorflow directly, so that would require some rearranging.</p>\n<p>After the RTLD_GLOBAL removal you should need to explicitly include protobufs to break things; otherwise if you use the @protobuf_archive//:protobuf_headers you'll just pick up the version in libtensorflow_framework.so, which should work fine.</p>\n<p>This sort of registration via dynamic linking would be a bit of work, so in the meantime I don't see a problem with doing plugins this way...</p>", "body_text": "In principle we could do the same thing for XLA extensions that we do for op libraries and filesystems: include the registries and symbols needed to register new things in //tensorflow:libtensorflow_framework.so, then use an equivalent of tf.load_op_library to load a shared object (that object references symbols in libtensorflow_framework.so and does the registration; we could also add an XLA dlopen() wrapper to the C API for access in other languages). Right now all of the XLA symbols get added to pywrap_tensorflow directly, so that would require some rearranging.\nAfter the RTLD_GLOBAL removal you should need to explicitly include protobufs to break things; otherwise if you use the @protobuf_archive//:protobuf_headers you'll just pick up the version in libtensorflow_framework.so, which should work fine.\nThis sort of registration via dynamic linking would be a bit of work, so in the meantime I don't see a problem with doing plugins this way...", "body": "In principle we could do the same thing for XLA extensions that we do for op libraries and filesystems: include the registries and symbols needed to register new things in //tensorflow:libtensorflow_framework.so, then use an equivalent of tf.load_op_library to load a shared object (that object references symbols in libtensorflow_framework.so and does the registration; we could also add an XLA dlopen() wrapper to the C API for access in other languages). Right now all of the XLA symbols get added to pywrap_tensorflow directly, so that would require some rearranging.\r\n\r\nAfter the RTLD_GLOBAL removal you should need to explicitly include protobufs to break things; otherwise if you use the @protobuf_archive//:protobuf_headers you'll just pick up the version in libtensorflow_framework.so, which should work fine.\r\n\r\nThis sort of registration via dynamic linking would be a bit of work, so in the meantime I don't see a problem with doing plugins this way..."}