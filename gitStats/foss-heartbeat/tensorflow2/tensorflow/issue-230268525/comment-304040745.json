{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/304040745", "html_url": "https://github.com/tensorflow/tensorflow/issues/10089#issuecomment-304040745", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10089", "id": 304040745, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDA0MDc0NQ==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-25T15:31:36Z", "updated_at": "2017-05-25T15:31:36Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> I see. I can see how this may work with Python, but how would you go about having the C API call back into Java or Scala functions for the gradients. Is there a simple way to do that with JNI? Or is there some more generic way that would allow you to do that with any language?</p>\n<p>One way I see for doing this would be to have the C API expose a function interface that users of the API can implement and which is similar to the gradient function interface in the Python API or my Scala API. Then, users can implement that by having it lookup a functions registry in their language implementation that would return the gradients if there is a corresponding function registered. The C API function would be called whenever the C API needs gradients for some op. I also think it might be better for that function to be called first (for now), before looking for C++ gradient functions, in order to retain consistency in how the gradients are named in the constructed graph. Does that sound like something that's possible with the C API? I'm not very familiar with C to know if that's easy to do or not.</p>\n<p>Yet another way may be similarly to how tensor deallocators are specified. The users could possible register gradient functions this way. In this case, they would only need to register a single function that delegates the gradient lookup to their own language implementation, which constructs the gradients and returns the result.</p>", "body_text": "@asimshankar I see. I can see how this may work with Python, but how would you go about having the C API call back into Java or Scala functions for the gradients. Is there a simple way to do that with JNI? Or is there some more generic way that would allow you to do that with any language?\nOne way I see for doing this would be to have the C API expose a function interface that users of the API can implement and which is similar to the gradient function interface in the Python API or my Scala API. Then, users can implement that by having it lookup a functions registry in their language implementation that would return the gradients if there is a corresponding function registered. The C API function would be called whenever the C API needs gradients for some op. I also think it might be better for that function to be called first (for now), before looking for C++ gradient functions, in order to retain consistency in how the gradients are named in the constructed graph. Does that sound like something that's possible with the C API? I'm not very familiar with C to know if that's easy to do or not.\nYet another way may be similarly to how tensor deallocators are specified. The users could possible register gradient functions this way. In this case, they would only need to register a single function that delegates the gradient lookup to their own language implementation, which constructs the gradients and returns the result.", "body": "@asimshankar I see. I can see how this may work with Python, but how would you go about having the C API call back into Java or Scala functions for the gradients. Is there a simple way to do that with JNI? Or is there some more generic way that would allow you to do that with any language?\r\n\r\nOne way I see for doing this would be to have the C API expose a function interface that users of the API can implement and which is similar to the gradient function interface in the Python API or my Scala API. Then, users can implement that by having it lookup a functions registry in their language implementation that would return the gradients if there is a corresponding function registered. The C API function would be called whenever the C API needs gradients for some op. I also think it might be better for that function to be called first (for now), before looking for C++ gradient functions, in order to retain consistency in how the gradients are named in the constructed graph. Does that sound like something that's possible with the C API? I'm not very familiar with C to know if that's easy to do or not.\r\n\r\nYet another way may be similarly to how tensor deallocators are specified. The users could possible register gradient functions this way. In this case, they would only need to register a single function that delegates the gradient lookup to their own language implementation, which constructs the gradients and returns the result."}