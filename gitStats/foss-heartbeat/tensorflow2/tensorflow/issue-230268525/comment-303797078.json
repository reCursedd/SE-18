{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/303797078", "html_url": "https://github.com/tensorflow/tensorflow/issues/10089#issuecomment-303797078", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10089", "id": 303797078, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzc5NzA3OA==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-24T17:37:24Z", "updated_at": "2017-05-24T17:37:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=49262\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jart\">@jart</a> Thanks! That sounds good. I can do that.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> Thanks! That would be great! :)</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=156745\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jdegoes\">@jdegoes</a> Thanks! That would actually be helpful as there are some parts of the library I'm not happy with and would like to make more elegant. We can talk about it whenever you want and I can tell you my thoughts. :)</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88808\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/skye\">@skye</a> C backprop code calling back into the Python runtime to create the individual gradients sounds like what I was referring to although it's hard to make generic. One possible idea would be to allow creation of functions (i.e., subgraphs) in the C API, and then define control flow operations in terms of those functions. Then, a single function for returning the gradient of a while block should be sufficient for users that implement backprop in other languages. Or something along those lines.</p>", "body_text": "@jart Thanks! That sounds good. I can do that.\n@asimshankar Thanks! That would be great! :)\n@jdegoes Thanks! That would actually be helpful as there are some parts of the library I'm not happy with and would like to make more elegant. We can talk about it whenever you want and I can tell you my thoughts. :)\n@skye C backprop code calling back into the Python runtime to create the individual gradients sounds like what I was referring to although it's hard to make generic. One possible idea would be to allow creation of functions (i.e., subgraphs) in the C API, and then define control flow operations in terms of those functions. Then, a single function for returning the gradient of a while block should be sufficient for users that implement backprop in other languages. Or something along those lines.", "body": "@jart Thanks! That sounds good. I can do that.\r\n\r\n@asimshankar Thanks! That would be great! :)\r\n\r\n@jdegoes Thanks! That would actually be helpful as there are some parts of the library I'm not happy with and would like to make more elegant. We can talk about it whenever you want and I can tell you my thoughts. :)\r\n\r\n@skye C backprop code calling back into the Python runtime to create the individual gradients sounds like what I was referring to although it's hard to make generic. One possible idea would be to allow creation of functions (i.e., subgraphs) in the C API, and then define control flow operations in terms of those functions. Then, a single function for returning the gradient of a while block should be sufficient for users that implement backprop in other languages. Or something along those lines."}