{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14601", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14601/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14601/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14601/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14601", "id": 274360577, "node_id": "MDU6SXNzdWUyNzQzNjA1Nzc=", "number": 14601, "title": "Conv2D operator with SAME padding when Stride > kernel size showing unexpected results", "user": {"login": "Oewyn", "id": 24667483, "node_id": "MDQ6VXNlcjI0NjY3NDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/24667483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Oewyn", "html_url": "https://github.com/Oewyn", "followers_url": "https://api.github.com/users/Oewyn/followers", "following_url": "https://api.github.com/users/Oewyn/following{/other_user}", "gists_url": "https://api.github.com/users/Oewyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/Oewyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Oewyn/subscriptions", "organizations_url": "https://api.github.com/users/Oewyn/orgs", "repos_url": "https://api.github.com/users/Oewyn/repos", "events_url": "https://api.github.com/users/Oewyn/events{/privacy}", "received_events_url": "https://api.github.com/users/Oewyn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-11-16T01:09:19Z", "updated_at": "2018-02-03T04:30:53Z", "closed_at": "2018-02-02T20:31:09Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code -- YES, only to demonstrate the problem (source code is below)</strong>:</li>\n<li><strong>OS Platform and Distribution (Linux Ubuntu 16.04)</strong>:</li>\n<li><strong>TensorFlow installed from (binary (PIP))</strong>:</li>\n<li><strong>TensorFlow version (1.4.0)</strong>:</li>\n<li><strong>Python version (2.7.12)</strong>:</li>\n<li><strong>Bazel version (N/A)</strong>:</li>\n<li><strong>GCC/Compiler version (N/A)</strong>:</li>\n<li><strong>CUDA/cuDNN version (N/A)</strong>:</li>\n<li><strong>GPU model and memory (N/A -- CPU only)</strong>:</li>\n<li><strong>Exact command to reproduce (See Source Code Below)</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>There is an inconsistency between the convolution documentation on padding with 'SAME' located <a href=\"https://www.tensorflow.org/api_guides/python/nn#Convolution\" rel=\"nofollow\">here</a> and the behavior of the tf.nn.conv2d operator. In the example below I create a 3x1 input with values [[1.0][1.1][1.2]] and a 1x1 filter of value [1.0]. I specify the stride to be 1x3x1x1 which should result in only a single element be output and the padding to be 'SAME'. From the padding calculation in the above link:</p>\n<p>pad_along_height:</p>\n<pre><code>in_height ( = 3) % strides[1]( = 3) == 0 so\npad_along_height = max(filter_height ( = 1) - strides[1] ( = 3), 0)\npad_along_height = max(-2, 0) = 0\n</code></pre>\n<p>pad along_width:</p>\n<pre><code>in_width ( = 1) % strides[2] ( = 1) == 0 so\npad_along_width = max(filter_width( = 1) - strides[2] ( = 1), 0\npad_along_width = max(0,0) = 0\n</code></pre>\n<p>My hypothesis is that pad_along_* is not using the max(x,0) and as a result, pad_along_height = -2. Therefore pad_top = -1 and pad_bottom = -1. If that was the case, then our input is reduced to only the middle element [1.1] which explains why the TF result of the code below is 1.1 rather than the expected 1.0 (value of first input).</p>\n<p>If I change the padding to be VALID (no padding) then this code below gives the result of 1.0 or if i instead change the stride to 1,2,1,1 i get the expected value of 1.0 (although in this case my hypothesis proposes that pad_bottom is still -1).</p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\ni = tf.constant((np.ones(3) + np.arange(3) * 0.1).reshape(1,3,1,1), dtype=tf.float32, name='input')\nf = tf.constant(np.ones(1).reshape(1,1,1,1), dtype=tf.float32, name='filter')\n\nconv = tf.nn.conv2d(input=i, filter=f, strides=(1,3,1,1), padding='SAME')\n\nwith tf.Session() as sess:\n    out = sess.run(conv)\n    print out\n</code></pre>\n<p>Output:<br>\n<code>[[[[ 1.10000002]]]]</code></p>", "body_text": "System information\n\nHave I written custom code -- YES, only to demonstrate the problem (source code is below):\nOS Platform and Distribution (Linux Ubuntu 16.04):\nTensorFlow installed from (binary (PIP)):\nTensorFlow version (1.4.0):\nPython version (2.7.12):\nBazel version (N/A):\nGCC/Compiler version (N/A):\nCUDA/cuDNN version (N/A):\nGPU model and memory (N/A -- CPU only):\nExact command to reproduce (See Source Code Below):\n\nDescribe the problem\nThere is an inconsistency between the convolution documentation on padding with 'SAME' located here and the behavior of the tf.nn.conv2d operator. In the example below I create a 3x1 input with values [[1.0][1.1][1.2]] and a 1x1 filter of value [1.0]. I specify the stride to be 1x3x1x1 which should result in only a single element be output and the padding to be 'SAME'. From the padding calculation in the above link:\npad_along_height:\nin_height ( = 3) % strides[1]( = 3) == 0 so\npad_along_height = max(filter_height ( = 1) - strides[1] ( = 3), 0)\npad_along_height = max(-2, 0) = 0\n\npad along_width:\nin_width ( = 1) % strides[2] ( = 1) == 0 so\npad_along_width = max(filter_width( = 1) - strides[2] ( = 1), 0\npad_along_width = max(0,0) = 0\n\nMy hypothesis is that pad_along_* is not using the max(x,0) and as a result, pad_along_height = -2. Therefore pad_top = -1 and pad_bottom = -1. If that was the case, then our input is reduced to only the middle element [1.1] which explains why the TF result of the code below is 1.1 rather than the expected 1.0 (value of first input).\nIf I change the padding to be VALID (no padding) then this code below gives the result of 1.0 or if i instead change the stride to 1,2,1,1 i get the expected value of 1.0 (although in this case my hypothesis proposes that pad_bottom is still -1).\nSource code / logs\nimport tensorflow as tf\nimport numpy as np\n\ni = tf.constant((np.ones(3) + np.arange(3) * 0.1).reshape(1,3,1,1), dtype=tf.float32, name='input')\nf = tf.constant(np.ones(1).reshape(1,1,1,1), dtype=tf.float32, name='filter')\n\nconv = tf.nn.conv2d(input=i, filter=f, strides=(1,3,1,1), padding='SAME')\n\nwith tf.Session() as sess:\n    out = sess.run(conv)\n    print out\n\nOutput:\n[[[[ 1.10000002]]]]", "body": "### System information\r\n- **Have I written custom code -- YES, only to demonstrate the problem (source code is below)**:\r\n- **OS Platform and Distribution (Linux Ubuntu 16.04)**:\r\n- **TensorFlow installed from (binary (PIP))**:\r\n- **TensorFlow version (1.4.0)**:\r\n- **Python version (2.7.12)**: \r\n- **Bazel version (N/A)**:\r\n- **GCC/Compiler version (N/A)**:\r\n- **CUDA/cuDNN version (N/A)**:\r\n- **GPU model and memory (N/A -- CPU only)**:\r\n- **Exact command to reproduce (See Source Code Below)**:\r\n\r\n### Describe the problem\r\nThere is an inconsistency between the convolution documentation on padding with 'SAME' located [here](https://www.tensorflow.org/api_guides/python/nn#Convolution) and the behavior of the tf.nn.conv2d operator. In the example below I create a 3x1 input with values [[1.0][1.1][1.2]] and a 1x1 filter of value [1.0]. I specify the stride to be 1x3x1x1 which should result in only a single element be output and the padding to be 'SAME'. From the padding calculation in the above link: \r\n\r\npad_along_height:\r\n    \r\n    in_height ( = 3) % strides[1]( = 3) == 0 so\r\n    pad_along_height = max(filter_height ( = 1) - strides[1] ( = 3), 0)\r\n    pad_along_height = max(-2, 0) = 0\r\n\r\npad along_width:\r\n\r\n    in_width ( = 1) % strides[2] ( = 1) == 0 so\r\n    pad_along_width = max(filter_width( = 1) - strides[2] ( = 1), 0\r\n    pad_along_width = max(0,0) = 0\r\n\r\nMy hypothesis is that pad_along_* is not using the max(x,0) and as a result, pad_along_height = -2. Therefore pad_top = -1 and pad_bottom = -1. If that was the case, then our input is reduced to only the middle element [1.1] which explains why the TF result of the code below is 1.1 rather than the expected 1.0 (value of first input).\r\n\r\nIf I change the padding to be VALID (no padding) then this code below gives the result of 1.0 or if i instead change the stride to 1,2,1,1 i get the expected value of 1.0 (although in this case my hypothesis proposes that pad_bottom is still -1).\r\n\r\n### Source code / logs\r\n    import tensorflow as tf\r\n    import numpy as np\r\n\r\n    i = tf.constant((np.ones(3) + np.arange(3) * 0.1).reshape(1,3,1,1), dtype=tf.float32, name='input')\r\n    f = tf.constant(np.ones(1).reshape(1,1,1,1), dtype=tf.float32, name='filter')\r\n\r\n    conv = tf.nn.conv2d(input=i, filter=f, strides=(1,3,1,1), padding='SAME')\r\n\r\n    with tf.Session() as sess:\r\n        out = sess.run(conv)\r\n        print out\r\n\r\nOutput:\r\n`[[[[ 1.10000002]]]]`"}