{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/393270729", "html_url": "https://github.com/tensorflow/tensorflow/issues/17625#issuecomment-393270729", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17625", "id": 393270729, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzI3MDcyOQ==", "user": {"login": "chrisying", "id": 3231278, "node_id": "MDQ6VXNlcjMyMzEyNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3231278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisying", "html_url": "https://github.com/chrisying", "followers_url": "https://api.github.com/users/chrisying/followers", "following_url": "https://api.github.com/users/chrisying/following{/other_user}", "gists_url": "https://api.github.com/users/chrisying/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisying/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisying/subscriptions", "organizations_url": "https://api.github.com/users/chrisying/orgs", "repos_url": "https://api.github.com/users/chrisying/repos", "events_url": "https://api.github.com/users/chrisying/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisying/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-30T18:34:48Z", "updated_at": "2018-05-30T18:34:48Z", "author_association": "MEMBER", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1381301\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppwwyyxx\">@ppwwyyxx</a>, originally <code>virtual_batch_size</code> was not intended to be used simultaneously with <code>renorm</code> (these two techniques are generally used for different use-cases) and thus not tested. However, I suppose there isn't anything stops the user from using the two together. I can see the potential use-case here where you have very small virtual_batches.</p>\n<p>I've reproduced your error and identified the bug in the code: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/2716bfff551591297a4ba6e61299e8147ac27c05/tensorflow/python/keras/layers/normalization.py#L589\">tensorflow/tensorflow/python/keras/layers/normalization.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 589\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/2716bfff551591297a4ba6e61299e8147ac27c05\">2716bff</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L589\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"589\"></td>\n          <td id=\"LC589\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.virtual_batch_size <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n this code block needs to be moved before the renorm code block above so that the means are reduced <code>if virtual_batch_size is not None</code> (<code>new_mean</code>/<code>new_variance</code> should be renamed to <code>mean</code>/<code>variance</code>).</p>\n<p>I'll see if I can get this change in to the next TensorFlow release. In the meantime, if you need this exact functionality, please apply the change I described.</p>\n<p>Side question: I'm curious why you need to use <code>renorm</code> and <code>virtual_batch_size</code> at the same time? Generally <code>renorm</code> is used for small batches (or non-iid batches) and <code>virtual_batch_size</code> is used for large batches. If you use both, I can imagine might be able to get by with using a larger <code>virtual_batch_size</code> and <code>renorm=False</code>.</p>", "body_text": "Hi @ppwwyyxx, originally virtual_batch_size was not intended to be used simultaneously with renorm (these two techniques are generally used for different use-cases) and thus not tested. However, I suppose there isn't anything stops the user from using the two together. I can see the potential use-case here where you have very small virtual_batches.\nI've reproduced your error and identified the bug in the code: \n  \n    \n      tensorflow/tensorflow/python/keras/layers/normalization.py\n    \n    \n         Line 589\n      in\n      2716bff\n    \n    \n    \n    \n\n        \n          \n           if self.virtual_batch_size is not None: \n        \n    \n  \n\n this code block needs to be moved before the renorm code block above so that the means are reduced if virtual_batch_size is not None (new_mean/new_variance should be renamed to mean/variance).\nI'll see if I can get this change in to the next TensorFlow release. In the meantime, if you need this exact functionality, please apply the change I described.\nSide question: I'm curious why you need to use renorm and virtual_batch_size at the same time? Generally renorm is used for small batches (or non-iid batches) and virtual_batch_size is used for large batches. If you use both, I can imagine might be able to get by with using a larger virtual_batch_size and renorm=False.", "body": "Hi @ppwwyyxx, originally `virtual_batch_size` was not intended to be used simultaneously with `renorm` (these two techniques are generally used for different use-cases) and thus not tested. However, I suppose there isn't anything stops the user from using the two together. I can see the potential use-case here where you have very small virtual_batches.\r\n\r\nI've reproduced your error and identified the bug in the code: https://github.com/tensorflow/tensorflow/blob/2716bfff551591297a4ba6e61299e8147ac27c05/tensorflow/python/keras/layers/normalization.py#L589 this code block needs to be moved before the renorm code block above so that the means are reduced `if virtual_batch_size is not None` (`new_mean`/`new_variance` should be renamed to `mean`/`variance`).\r\n\r\nI'll see if I can get this change in to the next TensorFlow release. In the meantime, if you need this exact functionality, please apply the change I described.\r\n\r\nSide question: I'm curious why you need to use `renorm` and `virtual_batch_size` at the same time? Generally `renorm` is used for small batches (or non-iid batches) and `virtual_batch_size` is used for large batches. If you use both, I can imagine might be able to get by with using a larger `virtual_batch_size` and `renorm=False`."}