{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20567", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20567/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20567/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20567/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20567", "id": 338585670, "node_id": "MDU6SXNzdWUzMzg1ODU2NzA=", "number": 20567, "title": "Feature request: verify py_func tensor's shape when evaluating", "user": {"login": "kolmodin", "id": 157261, "node_id": "MDQ6VXNlcjE1NzI2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/157261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kolmodin", "html_url": "https://github.com/kolmodin", "followers_url": "https://api.github.com/users/kolmodin/followers", "following_url": "https://api.github.com/users/kolmodin/following{/other_user}", "gists_url": "https://api.github.com/users/kolmodin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kolmodin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kolmodin/subscriptions", "organizations_url": "https://api.github.com/users/kolmodin/orgs", "repos_url": "https://api.github.com/users/kolmodin/repos", "events_url": "https://api.github.com/users/kolmodin/events{/privacy}", "received_events_url": "https://api.github.com/users/kolmodin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-05T13:55:50Z", "updated_at": "2018-11-16T07:01:30Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><code>tf.py_func(my_py_func, args, dype)</code> returns a tensor of known type but unknown shape.<br>\nWhen my_py_func runs, py_func will check that the type is what's expected and fail otherwise.</p>\n<p>But, if you set an incorrect shape with .set_shape there's no warning. Having a loud warning would have saved me a few hours yesterday.</p>\n<p>Minimal example;</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> absolute_import\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> division\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">my_py_func</span>(<span class=\"pl-smi\">x</span>):\n  <span class=\"pl-k\">return</span> x\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">argv</span>):\n  <span class=\"pl-k\">del</span> argv\n\n  <span class=\"pl-c1\">print</span>(tf.<span class=\"pl-c1\">GIT_VERSION</span>, tf.<span class=\"pl-c1\">VERSION</span>)\n\n  t <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64)\n  <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>tf.constant(0):<span class=\"pl-pds\">'</span></span>, t)\n  t <span class=\"pl-k\">=</span> tf.py_func(my_py_func, [t], tf.int64)\n  <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>tf.py_func:<span class=\"pl-pds\">'</span></span>, t)\n  t.set_shape([<span class=\"pl-c1\">100</span>,<span class=\"pl-c1\">100</span>])\n  <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t.set_shape:<span class=\"pl-pds\">'</span></span>, t)\n\n  <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    t <span class=\"pl-k\">=</span> sess.run(t)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sess.run(t)<span class=\"pl-pds\">'</span></span>, t)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n  tf.app.run()</pre></div>\n<p>Output;</p>\n<pre><code>$ python using_py_func.py\nv1.8.0-0-g93bc2e2072 1.8.0\ntf.constant(0): Tensor(\"Const:0\", shape=(), dtype=int64)\ntf.py_func: Tensor(\"PyFunc:0\", dtype=int64)\nt.set_shape: Tensor(\"PyFunc:0\", shape=(100, 100), dtype=int64)\nsess.run(t) 0\n</code></pre>", "body_text": "tf.py_func(my_py_func, args, dype) returns a tensor of known type but unknown shape.\nWhen my_py_func runs, py_func will check that the type is what's expected and fail otherwise.\nBut, if you set an incorrect shape with .set_shape there's no warning. Having a loud warning would have saved me a few hours yesterday.\nMinimal example;\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nimport numpy as np\n\ndef my_py_func(x):\n  return x\n\ndef main(argv):\n  del argv\n\n  print(tf.GIT_VERSION, tf.VERSION)\n\n  t = tf.constant(0, dtype=tf.int64)\n  print('tf.constant(0):', t)\n  t = tf.py_func(my_py_func, [t], tf.int64)\n  print('tf.py_func:', t)\n  t.set_shape([100,100])\n  print('t.set_shape:', t)\n\n  with tf.Session() as sess:\n    t = sess.run(t)\n    print('sess.run(t)', t)\n\nif __name__ == '__main__':\n  tf.app.run()\nOutput;\n$ python using_py_func.py\nv1.8.0-0-g93bc2e2072 1.8.0\ntf.constant(0): Tensor(\"Const:0\", shape=(), dtype=int64)\ntf.py_func: Tensor(\"PyFunc:0\", dtype=int64)\nt.set_shape: Tensor(\"PyFunc:0\", shape=(100, 100), dtype=int64)\nsess.run(t) 0", "body": "`tf.py_func(my_py_func, args, dype)` returns a tensor of known type but unknown shape.\r\nWhen my_py_func runs, py_func will check that the type is what's expected and fail otherwise.\r\n\r\nBut, if you set an incorrect shape with .set_shape there's no warning. Having a loud warning would have saved me a few hours yesterday.\r\n\r\nMinimal example;\r\n\r\n```python\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndef my_py_func(x):\r\n  return x\r\n\r\ndef main(argv):\r\n  del argv\r\n\r\n  print(tf.GIT_VERSION, tf.VERSION)\r\n\r\n  t = tf.constant(0, dtype=tf.int64)\r\n  print('tf.constant(0):', t)\r\n  t = tf.py_func(my_py_func, [t], tf.int64)\r\n  print('tf.py_func:', t)\r\n  t.set_shape([100,100])\r\n  print('t.set_shape:', t)\r\n\r\n  with tf.Session() as sess:\r\n    t = sess.run(t)\r\n    print('sess.run(t)', t)\r\n\r\nif __name__ == '__main__':\r\n  tf.app.run()\r\n```\r\n\r\nOutput;\r\n```\r\n$ python using_py_func.py\r\nv1.8.0-0-g93bc2e2072 1.8.0\r\ntf.constant(0): Tensor(\"Const:0\", shape=(), dtype=int64)\r\ntf.py_func: Tensor(\"PyFunc:0\", dtype=int64)\r\nt.set_shape: Tensor(\"PyFunc:0\", shape=(100, 100), dtype=int64)\r\nsess.run(t) 0\r\n```\r\n"}