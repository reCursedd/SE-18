{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/403840875", "html_url": "https://github.com/tensorflow/tensorflow/issues/20567#issuecomment-403840875", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20567", "id": 403840875, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzg0MDg3NQ==", "user": {"login": "kolmodin", "id": 157261, "node_id": "MDQ6VXNlcjE1NzI2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/157261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kolmodin", "html_url": "https://github.com/kolmodin", "followers_url": "https://api.github.com/users/kolmodin/followers", "following_url": "https://api.github.com/users/kolmodin/following{/other_user}", "gists_url": "https://api.github.com/users/kolmodin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kolmodin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kolmodin/subscriptions", "organizations_url": "https://api.github.com/users/kolmodin/orgs", "repos_url": "https://api.github.com/users/kolmodin/repos", "events_url": "https://api.github.com/users/kolmodin/events{/privacy}", "received_events_url": "https://api.github.com/users/kolmodin/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-10T14:23:10Z", "updated_at": "2018-07-10T14:23:10Z", "author_association": "NONE", "body_html": "<p>Yes, I'm aware why py_func cannot know the shape.<br>\nIndeed the idea was to print a warning during <code>sess.run(...)</code> since it should be able to spot the inconsistency between what was said and then actually was.</p>\n<p>I didn't consider that py_func isn't at all special here. As you demonstrate, the same can be true for any tensor.</p>\n<p>In your last example;</p>\n<div class=\"highlight highlight-source-python\"><pre>x <span class=\"pl-k\">=</span> tf.constant([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>])\ny, idx <span class=\"pl-k\">=</span> tf.unique(x)\ny.set_shape([<span class=\"pl-c1\">100</span>])\n<span class=\"pl-c1\">print</span>(x)\n<span class=\"pl-c1\">print</span>(y)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  <span class=\"pl-c1\">print</span>(sess.run(y))</pre></div>\n<p>a warning would be issued for y not having the shape it was said to have.</p>\n<p>Tensors either have a know, partially unknown or unknown shape. If it's unknown, fine, there are no guarantees.<br>\nBut if the shape has been provided, when evaluated it should be what's expected, no?<br>\nSpec: tensors of known or partially known shapes should actually have that shape when evaluated.<br>\nDoes that sound reasonable?</p>", "body_text": "Yes, I'm aware why py_func cannot know the shape.\nIndeed the idea was to print a warning during sess.run(...) since it should be able to spot the inconsistency between what was said and then actually was.\nI didn't consider that py_func isn't at all special here. As you demonstrate, the same can be true for any tensor.\nIn your last example;\nx = tf.constant([1, 1, 2])\ny, idx = tf.unique(x)\ny.set_shape([100])\nprint(x)\nprint(y)\nwith tf.Session() as sess:\n  print(sess.run(y))\na warning would be issued for y not having the shape it was said to have.\nTensors either have a know, partially unknown or unknown shape. If it's unknown, fine, there are no guarantees.\nBut if the shape has been provided, when evaluated it should be what's expected, no?\nSpec: tensors of known or partially known shapes should actually have that shape when evaluated.\nDoes that sound reasonable?", "body": "Yes, I'm aware why py_func cannot know the shape.\r\nIndeed the idea was to print a warning during `sess.run(...)` since it should be able to spot the inconsistency between what was said and then actually was.\r\n\r\nI didn't consider that py_func isn't at all special here. As you demonstrate, the same can be true for any tensor.\r\n\r\nIn your last example;\r\n\r\n```python\r\nx = tf.constant([1, 1, 2])\r\ny, idx = tf.unique(x)\r\ny.set_shape([100])\r\nprint(x)\r\nprint(y)\r\nwith tf.Session() as sess:\r\n  print(sess.run(y))\r\n```\r\n\r\na warning would be issued for y not having the shape it was said to have.\r\n\r\nTensors either have a know, partially unknown or unknown shape. If it's unknown, fine, there are no guarantees.\r\nBut if the shape has been provided, when evaluated it should be what's expected, no?\r\nSpec: tensors of known or partially known shapes should actually have that shape when evaluated.\r\nDoes that sound reasonable?"}