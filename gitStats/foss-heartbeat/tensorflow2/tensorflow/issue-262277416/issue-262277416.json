{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13457", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13457/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13457/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13457/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13457", "id": 262277416, "node_id": "MDU6SXNzdWUyNjIyNzc0MTY=", "number": 13457, "title": "Two issues on tf.nn.ctc_loss", "user": {"login": "xilinli", "id": 20463706, "node_id": "MDQ6VXNlcjIwNDYzNzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/20463706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xilinli", "html_url": "https://github.com/xilinli", "followers_url": "https://api.github.com/users/xilinli/followers", "following_url": "https://api.github.com/users/xilinli/following{/other_user}", "gists_url": "https://api.github.com/users/xilinli/gists{/gist_id}", "starred_url": "https://api.github.com/users/xilinli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xilinli/subscriptions", "organizations_url": "https://api.github.com/users/xilinli/orgs", "repos_url": "https://api.github.com/users/xilinli/repos", "events_url": "https://api.github.com/users/xilinli/events{/privacy}", "received_events_url": "https://api.github.com/users/xilinli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-03T01:23:57Z", "updated_at": "2018-01-04T16:50:27Z", "closed_at": "2017-10-09T00:12:23Z", "author_association": "NONE", "body_html": "<p>Environments: tf version 1.3, CPU version; python 3.5/3.6; Win10/Ubuntu 16.04.</p>\n<p>To begin with, we start from code:</p>\n<p>import tensorflow as tf<br>\nnum_classes, batch_size, seq_len = 3, 1, 2<br>\nlabels = tf.SparseTensor(indices=[[0,0]], values=[0], dense_shape=[1,1])<br>\ninputs = tf.zeros([seq_len, batch_size, num_classes])<br>\nloss = tf.nn.ctc_loss(labels, inputs, [seq_len])<br>\nprint(tf.InteractiveSession().run(loss))</p>\n<p>tf.nn.ctc_loss behaves as expected, and print the correct answer: 1.09861231</p>\n<p>Issue one: How to calculate the ctc loss of a sequence with all blanks? The tf.nn.ctc_loss API requires that values &lt; num_labels, so we have no way to achieve it? If I do change the values in the above example to num_classes - 1 (the reserved blank ID), tf.nn.ctc_loss has no complain, and returns the wrong answer: 0.81093025! The correct answer is 2*log(3). The code to reproduce issue one is as below:</p>\n<p>import tensorflow as tf<br>\nnum_classes, batch_size, seq_len = 3, 1, 2<br>\nlabels = tf.SparseTensor(indices=[[0,0]], values=[2], dense_shape=[1,1])<br>\ninputs = tf.zeros([seq_len, batch_size, num_classes])<br>\nloss = tf.nn.ctc_loss(labels, inputs, [seq_len])<br>\nprint(tf.InteractiveSession().run(loss))</p>\n<p>Issue two: Let's change the sequence length to 1 as below</p>\n<p>import tensorflow as tf<br>\nnum_classes, batch_size, seq_len = 3, 1, 1<br>\nlabels = tf.SparseTensor(indices=[[0,0]], values=[2], dense_shape=[1,1])<br>\ninputs = tf.zeros([seq_len, batch_size, num_classes])<br>\nloss = tf.nn.ctc_loss(labels, inputs, [seq_len])<br>\nprint(tf.InteractiveSession().run(loss))</p>\n<p>and run the code again. This code gives the correct answer, log(3), in Ubuntu, but crashes in Win10 with message: Kernel died, restarting.</p>", "body_text": "Environments: tf version 1.3, CPU version; python 3.5/3.6; Win10/Ubuntu 16.04.\nTo begin with, we start from code:\nimport tensorflow as tf\nnum_classes, batch_size, seq_len = 3, 1, 2\nlabels = tf.SparseTensor(indices=[[0,0]], values=[0], dense_shape=[1,1])\ninputs = tf.zeros([seq_len, batch_size, num_classes])\nloss = tf.nn.ctc_loss(labels, inputs, [seq_len])\nprint(tf.InteractiveSession().run(loss))\ntf.nn.ctc_loss behaves as expected, and print the correct answer: 1.09861231\nIssue one: How to calculate the ctc loss of a sequence with all blanks? The tf.nn.ctc_loss API requires that values < num_labels, so we have no way to achieve it? If I do change the values in the above example to num_classes - 1 (the reserved blank ID), tf.nn.ctc_loss has no complain, and returns the wrong answer: 0.81093025! The correct answer is 2*log(3). The code to reproduce issue one is as below:\nimport tensorflow as tf\nnum_classes, batch_size, seq_len = 3, 1, 2\nlabels = tf.SparseTensor(indices=[[0,0]], values=[2], dense_shape=[1,1])\ninputs = tf.zeros([seq_len, batch_size, num_classes])\nloss = tf.nn.ctc_loss(labels, inputs, [seq_len])\nprint(tf.InteractiveSession().run(loss))\nIssue two: Let's change the sequence length to 1 as below\nimport tensorflow as tf\nnum_classes, batch_size, seq_len = 3, 1, 1\nlabels = tf.SparseTensor(indices=[[0,0]], values=[2], dense_shape=[1,1])\ninputs = tf.zeros([seq_len, batch_size, num_classes])\nloss = tf.nn.ctc_loss(labels, inputs, [seq_len])\nprint(tf.InteractiveSession().run(loss))\nand run the code again. This code gives the correct answer, log(3), in Ubuntu, but crashes in Win10 with message: Kernel died, restarting.", "body": "Environments: tf version 1.3, CPU version; python 3.5/3.6; Win10/Ubuntu 16.04.\r\n\r\nTo begin with, we start from code:\r\n\r\nimport tensorflow as tf\r\nnum_classes, batch_size, seq_len = 3, 1, 2\r\nlabels = tf.SparseTensor(indices=[[0,0]], values=[0], dense_shape=[1,1])\r\ninputs = tf.zeros([seq_len, batch_size, num_classes])\r\nloss = tf.nn.ctc_loss(labels, inputs, [seq_len])\r\nprint(tf.InteractiveSession().run(loss))\r\n\r\ntf.nn.ctc_loss behaves as expected, and print the correct answer: 1.09861231\r\n\r\nIssue one: How to calculate the ctc loss of a sequence with all blanks? The tf.nn.ctc_loss API requires that values < num_labels, so we have no way to achieve it? If I do change the values in the above example to num_classes - 1 (the reserved blank ID), tf.nn.ctc_loss has no complain, and returns the wrong answer: 0.81093025! The correct answer is 2*log(3). The code to reproduce issue one is as below:\r\n\r\nimport tensorflow as tf\r\nnum_classes, batch_size, seq_len = 3, 1, 2\r\nlabels = tf.SparseTensor(indices=[[0,0]], values=[2], dense_shape=[1,1])\r\ninputs = tf.zeros([seq_len, batch_size, num_classes])\r\nloss = tf.nn.ctc_loss(labels, inputs, [seq_len])\r\nprint(tf.InteractiveSession().run(loss))\r\n\r\nIssue two: Let's change the sequence length to 1 as below\r\n\r\nimport tensorflow as tf\r\nnum_classes, batch_size, seq_len = 3, 1, 1\r\nlabels = tf.SparseTensor(indices=[[0,0]], values=[2], dense_shape=[1,1])\r\ninputs = tf.zeros([seq_len, batch_size, num_classes])\r\nloss = tf.nn.ctc_loss(labels, inputs, [seq_len])\r\nprint(tf.InteractiveSession().run(loss)) \r\n\r\nand run the code again. This code gives the correct answer, log(3), in Ubuntu, but crashes in Win10 with message: Kernel died, restarting."}