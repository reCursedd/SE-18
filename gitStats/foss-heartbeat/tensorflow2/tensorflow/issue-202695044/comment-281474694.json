{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281474694", "html_url": "https://github.com/tensorflow/tensorflow/issues/7027#issuecomment-281474694", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7027", "id": 281474694, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQ3NDY5NA==", "user": {"login": "rizar", "id": 654434, "node_id": "MDQ6VXNlcjY1NDQzNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/654434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizar", "html_url": "https://github.com/rizar", "followers_url": "https://api.github.com/users/rizar/followers", "following_url": "https://api.github.com/users/rizar/following{/other_user}", "gists_url": "https://api.github.com/users/rizar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizar/subscriptions", "organizations_url": "https://api.github.com/users/rizar/orgs", "repos_url": "https://api.github.com/users/rizar/repos", "events_url": "https://api.github.com/users/rizar/events{/privacy}", "received_events_url": "https://api.github.com/users/rizar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-21T20:45:59Z", "updated_at": "2017-02-21T20:45:59Z", "author_association": "NONE", "body_html": "<p>I am not sure I understand the status of this issue. It is pretty clear from the code that by default the GPU kernel is not registered for <code>scatter_nd</code>. I make this conclusion by observing that the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/scatter_nd_op.cc#L377\">following lines for CPU kernels</a>:</p>\n<pre><code>TF_CALL_NUMBER_TYPES(REGISTER_SCATTER_ND_ADD_SUB_CPU);\n// TODO(simister): Re-enable all types after binary size is under control.\nTF_CALL_NUMBER_TYPES(REGISTER_SCATTER_ND_UPDATE_CPU);\nTF_CALL_NUMBER_TYPES(REGISTER_SCATTER_ND_CPU);\n</code></pre>\n<p>and only two respective lines for GPU kernels</p>\n<pre><code>TF_CALL_GPU_NUMBER_TYPES_NO_HALF(REGISTER_SCATTER_ND_ADD_SUB_GPU);\nTF_CALL_GPU_NUMBER_TYPES_NO_HALF(REGISTER_SCATTER_ND_UPDATE_GPU);\n# where is the third one??\n</code></pre>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a> is the third kernel left out intentionally? If yes, is enabling a GPU implementation for <code>scatter_nd</code> in the timeline?</p>\n<p>I'd like to note that this issue has a nasty side-effect: <code>scatter_nd</code> is used in the gradient of <code>gather_nd</code>, and because of the lack of the GPU kernel, the <code>gather_nd</code> gradient is computed on CPU...</p>", "body_text": "I am not sure I understand the status of this issue. It is pretty clear from the code that by default the GPU kernel is not registered for scatter_nd. I make this conclusion by observing that the following lines for CPU kernels:\nTF_CALL_NUMBER_TYPES(REGISTER_SCATTER_ND_ADD_SUB_CPU);\n// TODO(simister): Re-enable all types after binary size is under control.\nTF_CALL_NUMBER_TYPES(REGISTER_SCATTER_ND_UPDATE_CPU);\nTF_CALL_NUMBER_TYPES(REGISTER_SCATTER_ND_CPU);\n\nand only two respective lines for GPU kernels\nTF_CALL_GPU_NUMBER_TYPES_NO_HALF(REGISTER_SCATTER_ND_ADD_SUB_GPU);\nTF_CALL_GPU_NUMBER_TYPES_NO_HALF(REGISTER_SCATTER_ND_UPDATE_GPU);\n# where is the third one??\n\n@drpngx is the third kernel left out intentionally? If yes, is enabling a GPU implementation for scatter_nd in the timeline?\nI'd like to note that this issue has a nasty side-effect: scatter_nd is used in the gradient of gather_nd, and because of the lack of the GPU kernel, the gather_nd gradient is computed on CPU...", "body": "I am not sure I understand the status of this issue. It is pretty clear from the code that by default the GPU kernel is not registered for `scatter_nd`. I make this conclusion by observing that the [following lines for CPU kernels](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/scatter_nd_op.cc#L377):\r\n\r\n```\r\nTF_CALL_NUMBER_TYPES(REGISTER_SCATTER_ND_ADD_SUB_CPU);\r\n// TODO(simister): Re-enable all types after binary size is under control.\r\nTF_CALL_NUMBER_TYPES(REGISTER_SCATTER_ND_UPDATE_CPU);\r\nTF_CALL_NUMBER_TYPES(REGISTER_SCATTER_ND_CPU);\r\n```\r\n\r\nand only two respective lines for GPU kernels \r\n\r\n```\r\nTF_CALL_GPU_NUMBER_TYPES_NO_HALF(REGISTER_SCATTER_ND_ADD_SUB_GPU);\r\nTF_CALL_GPU_NUMBER_TYPES_NO_HALF(REGISTER_SCATTER_ND_UPDATE_GPU);\r\n# where is the third one??\r\n``` \r\n\r\n@drpngx is the third kernel left out intentionally? If yes, is enabling a GPU implementation for `scatter_nd` in the timeline?\r\n\r\nI'd like to note that this issue has a nasty side-effect: `scatter_nd` is used in the gradient of `gather_nd`, and because of the lack of the GPU kernel, the `gather_nd` gradient is computed on CPU..."}