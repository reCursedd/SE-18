{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/411919479", "html_url": "https://github.com/tensorflow/tensorflow/issues/21476#issuecomment-411919479", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21476", "id": 411919479, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTkxOTQ3OQ==", "user": {"login": "baluyotraf", "id": 7478783, "node_id": "MDQ6VXNlcjc0Nzg3ODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7478783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/baluyotraf", "html_url": "https://github.com/baluyotraf", "followers_url": "https://api.github.com/users/baluyotraf/followers", "following_url": "https://api.github.com/users/baluyotraf/following{/other_user}", "gists_url": "https://api.github.com/users/baluyotraf/gists{/gist_id}", "starred_url": "https://api.github.com/users/baluyotraf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/baluyotraf/subscriptions", "organizations_url": "https://api.github.com/users/baluyotraf/orgs", "repos_url": "https://api.github.com/users/baluyotraf/repos", "events_url": "https://api.github.com/users/baluyotraf/events{/privacy}", "received_events_url": "https://api.github.com/users/baluyotraf/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-09T22:34:25Z", "updated_at": "2018-08-09T22:37:17Z", "author_association": "NONE", "body_html": "<p>Doesn't matter even if I use the Estimator APIs since my problem is not with the network but just with the way I can load the data.</p>\n<p>For the training graph, the data I want to load is fixed (this is my training set) so it doesn't matter if the data is fixed in the graph. For inference graph, the data I want to load is different since this is based on real world data. Hence, I would like to use place holder (or other techniques to vary my input, if any).</p>\n<p>There is no problem with the code when using data with consistent dimensions. For example [[1, 2], [3, 4]] has a shape of (2,2). This can be fed to a placeholder without issues. If the data however has some inconsistency with its shape like [[1, 2], [3,4,5]], there is no easy way to feed it to the network.</p>\n<p>Before this doesn't bring any issues since most tensorflow ops requires your shape to be consistent. However the dataset API allows creation of dataset with varying lengths.</p>\n<p>This works</p>\n<div class=\"highlight highlight-source-python\"><pre>data <span class=\"pl-k\">=</span> [[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>]]\nplaceholder <span class=\"pl-k\">=</span> tf.placeholder(tf.int32)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(placeholder, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{placeholder:data})</pre></div>\n<p>But this will have an error</p>\n<div class=\"highlight highlight-source-python\"><pre>data <span class=\"pl-k\">=</span> [[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>]]\nplaceholder <span class=\"pl-k\">=</span> tf.placeholder(tf.int32)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(placeholder, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{placeholder:data})</pre></div>\n<pre><code>---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-10-1f6abd9e9211&gt; in &lt;module&gt;()\n      1 with tf.Session() as sess:\n----&gt; 2     sess.run(placeholder, feed_dict={placeholder:data})\n\nc:\\users\\raffae~1\\docume~1\\virtua~1\\machin~1\\lib\\site-packages\\tensorflow\\python\\client\\session.py in run(self, fetches, feed_dict, options, run_metadata)\n    898     try:\n    899       result = self._run(None, fetches, feed_dict, options_ptr,\n--&gt; 900                          run_metadata_ptr)\n    901       if run_metadata:\n    902         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\nc:\\users\\raffae~1\\docume~1\\virtua~1\\machin~1\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)\n   1102             feed_handles[subfeed_t] = subfeed_val\n   1103           else:\n-&gt; 1104             np_val = np.asarray(subfeed_val, dtype=subfeed_dtype)\n   1105 \n   1106           if (not is_tensor_handle_feed and\n\nc:\\users\\raffae~1\\docume~1\\virtua~1\\machin~1\\lib\\site-packages\\numpy\\core\\numeric.py in asarray(a, dtype, order)\n    490 \n    491     \"\"\"\n--&gt; 492     return array(a, dtype, copy=False, order=order)\n    493 \n    494 \n\nValueError: setting an array element with a sequence.\n</code></pre>\n<p>Of course there might be ways to make it work without using a placeholder. And if there are I'll settle for those.</p>", "body_text": "Doesn't matter even if I use the Estimator APIs since my problem is not with the network but just with the way I can load the data.\nFor the training graph, the data I want to load is fixed (this is my training set) so it doesn't matter if the data is fixed in the graph. For inference graph, the data I want to load is different since this is based on real world data. Hence, I would like to use place holder (or other techniques to vary my input, if any).\nThere is no problem with the code when using data with consistent dimensions. For example [[1, 2], [3, 4]] has a shape of (2,2). This can be fed to a placeholder without issues. If the data however has some inconsistency with its shape like [[1, 2], [3,4,5]], there is no easy way to feed it to the network.\nBefore this doesn't bring any issues since most tensorflow ops requires your shape to be consistent. However the dataset API allows creation of dataset with varying lengths.\nThis works\ndata = [[1, 2], [3, 4]]\nplaceholder = tf.placeholder(tf.int32)\nwith tf.Session() as sess:\n    sess.run(placeholder, feed_dict={placeholder:data})\nBut this will have an error\ndata = [[1, 2], [3, 4, 5]]\nplaceholder = tf.placeholder(tf.int32)\nwith tf.Session() as sess:\n    sess.run(placeholder, feed_dict={placeholder:data})\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-10-1f6abd9e9211> in <module>()\n      1 with tf.Session() as sess:\n----> 2     sess.run(placeholder, feed_dict={placeholder:data})\n\nc:\\users\\raffae~1\\docume~1\\virtua~1\\machin~1\\lib\\site-packages\\tensorflow\\python\\client\\session.py in run(self, fetches, feed_dict, options, run_metadata)\n    898     try:\n    899       result = self._run(None, fetches, feed_dict, options_ptr,\n--> 900                          run_metadata_ptr)\n    901       if run_metadata:\n    902         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\nc:\\users\\raffae~1\\docume~1\\virtua~1\\machin~1\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)\n   1102             feed_handles[subfeed_t] = subfeed_val\n   1103           else:\n-> 1104             np_val = np.asarray(subfeed_val, dtype=subfeed_dtype)\n   1105 \n   1106           if (not is_tensor_handle_feed and\n\nc:\\users\\raffae~1\\docume~1\\virtua~1\\machin~1\\lib\\site-packages\\numpy\\core\\numeric.py in asarray(a, dtype, order)\n    490 \n    491     \"\"\"\n--> 492     return array(a, dtype, copy=False, order=order)\n    493 \n    494 \n\nValueError: setting an array element with a sequence.\n\nOf course there might be ways to make it work without using a placeholder. And if there are I'll settle for those.", "body": "Doesn't matter even if I use the Estimator APIs since my problem is not with the network but just with the way I can load the data.\r\n\r\nFor the training graph, the data I want to load is fixed (this is my training set) so it doesn't matter if the data is fixed in the graph. For inference graph, the data I want to load is different since this is based on real world data. Hence, I would like to use place holder (or other techniques to vary my input, if any).\r\n\r\nThere is no problem with the code when using data with consistent dimensions. For example [[1, 2], [3, 4]] has a shape of (2,2). This can be fed to a placeholder without issues. If the data however has some inconsistency with its shape like [[1, 2], [3,4,5]], there is no easy way to feed it to the network.\r\n\r\nBefore this doesn't bring any issues since most tensorflow ops requires your shape to be consistent. However the dataset API allows creation of dataset with varying lengths.\r\n\r\nThis works \r\n\r\n```python\r\ndata = [[1, 2], [3, 4]]\r\nplaceholder = tf.placeholder(tf.int32)\r\nwith tf.Session() as sess:\r\n    sess.run(placeholder, feed_dict={placeholder:data})\r\n```\r\n\r\nBut this will have an error\r\n\r\n```python\r\ndata = [[1, 2], [3, 4, 5]]\r\nplaceholder = tf.placeholder(tf.int32)\r\nwith tf.Session() as sess:\r\n    sess.run(placeholder, feed_dict={placeholder:data})\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-10-1f6abd9e9211> in <module>()\r\n      1 with tf.Session() as sess:\r\n----> 2     sess.run(placeholder, feed_dict={placeholder:data})\r\n\r\nc:\\users\\raffae~1\\docume~1\\virtua~1\\machin~1\\lib\\site-packages\\tensorflow\\python\\client\\session.py in run(self, fetches, feed_dict, options, run_metadata)\r\n    898     try:\r\n    899       result = self._run(None, fetches, feed_dict, options_ptr,\r\n--> 900                          run_metadata_ptr)\r\n    901       if run_metadata:\r\n    902         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\r\n\r\nc:\\users\\raffae~1\\docume~1\\virtua~1\\machin~1\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)\r\n   1102             feed_handles[subfeed_t] = subfeed_val\r\n   1103           else:\r\n-> 1104             np_val = np.asarray(subfeed_val, dtype=subfeed_dtype)\r\n   1105 \r\n   1106           if (not is_tensor_handle_feed and\r\n\r\nc:\\users\\raffae~1\\docume~1\\virtua~1\\machin~1\\lib\\site-packages\\numpy\\core\\numeric.py in asarray(a, dtype, order)\r\n    490 \r\n    491     \"\"\"\r\n--> 492     return array(a, dtype, copy=False, order=order)\r\n    493 \r\n    494 \r\n\r\nValueError: setting an array element with a sequence.\r\n```\r\n\r\nOf course there might be ways to make it work without using a placeholder. And if there are I'll settle for those."}