{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/388028426", "html_url": "https://github.com/tensorflow/tensorflow/issues/17811#issuecomment-388028426", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17811", "id": 388028426, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODAyODQyNg==", "user": {"login": "BenMacKenzie", "id": 1110151, "node_id": "MDQ6VXNlcjExMTAxNTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1110151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenMacKenzie", "html_url": "https://github.com/BenMacKenzie", "followers_url": "https://api.github.com/users/BenMacKenzie/followers", "following_url": "https://api.github.com/users/BenMacKenzie/following{/other_user}", "gists_url": "https://api.github.com/users/BenMacKenzie/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenMacKenzie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenMacKenzie/subscriptions", "organizations_url": "https://api.github.com/users/BenMacKenzie/orgs", "repos_url": "https://api.github.com/users/BenMacKenzie/repos", "events_url": "https://api.github.com/users/BenMacKenzie/events{/privacy}", "received_events_url": "https://api.github.com/users/BenMacKenzie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-10T11:32:37Z", "updated_at": "2018-05-10T13:58:58Z", "author_association": "NONE", "body_html": "<p>thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1984933\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Corbalt\">@Corbalt</a></p>\n<p><strong>edit</strong>:  rnn_test has some good patterns to follow....everything is clear now.... thanks for your help!</p>\n<p>Ben</p>\n<p>I am familiar with regular feature columns.  i think what is confusing me is how to connect up the graph to data.  In the case of a regular estimator i create the input_layer as follows:</p>\n<p>input_layer = tf.feature_column.input_layer(features, get_feature_columns())</p>\n<p>where 'features'  is provided by an input_fn and via the dataset api are attached in graph to a de-queueing operation.</p>\n<p>in the case of the sequence_feature_column the input_layer is created as follows:</p>\n<p>input_layer, sequence_length = sequence_input_layer(features, columns)</p>\n<p>Where the features are created by tf.parse_example:</p>\n<p>features = tf.parse_example(..., features=make_parse_example_spec(columns))</p>\n<p>where '....'  refers to 'a number of serialized protos'.</p>\n<p>So\u2026.if this were to work in the same way as a regular estimator, the call to tf.parse_example would need to occur in an estimator input_fn\u2026.but the fact that parse_example contains a reference to the columns suggests it belongs in the model function.</p>\n<p>Maybe i am reading much into the code snippet in the comments and i should just send raw data from the input_fn in a suitable shape and ignore the tf.parse_example.</p>", "body_text": "thanks @Corbalt\nedit:  rnn_test has some good patterns to follow....everything is clear now.... thanks for your help!\nBen\nI am familiar with regular feature columns.  i think what is confusing me is how to connect up the graph to data.  In the case of a regular estimator i create the input_layer as follows:\ninput_layer = tf.feature_column.input_layer(features, get_feature_columns())\nwhere 'features'  is provided by an input_fn and via the dataset api are attached in graph to a de-queueing operation.\nin the case of the sequence_feature_column the input_layer is created as follows:\ninput_layer, sequence_length = sequence_input_layer(features, columns)\nWhere the features are created by tf.parse_example:\nfeatures = tf.parse_example(..., features=make_parse_example_spec(columns))\nwhere '....'  refers to 'a number of serialized protos'.\nSo\u2026.if this were to work in the same way as a regular estimator, the call to tf.parse_example would need to occur in an estimator input_fn\u2026.but the fact that parse_example contains a reference to the columns suggests it belongs in the model function.\nMaybe i am reading much into the code snippet in the comments and i should just send raw data from the input_fn in a suitable shape and ignore the tf.parse_example.", "body": "thanks @Corbalt \r\n\r\n\r\n**edit**:  rnn_test has some good patterns to follow....everything is clear now.... thanks for your help!\r\n\r\nBen\r\n\r\n\r\nI am familiar with regular feature columns.  i think what is confusing me is how to connect up the graph to data.  In the case of a regular estimator i create the input_layer as follows:\r\n\r\ninput_layer = tf.feature_column.input_layer(features, get_feature_columns())\r\n\r\nwhere 'features'  is provided by an input_fn and via the dataset api are attached in graph to a de-queueing operation. \r\n\r\nin the case of the sequence_feature_column the input_layer is created as follows:\r\n\r\ninput_layer, sequence_length = sequence_input_layer(features, columns)\r\n\r\nWhere the features are created by tf.parse_example:\r\n\r\nfeatures = tf.parse_example(..., features=make_parse_example_spec(columns))\r\n\r\n where '....'  refers to 'a number of serialized protos'.  \r\n\r\nSo\u2026.if this were to work in the same way as a regular estimator, the call to tf.parse_example would need to occur in an estimator input_fn\u2026.but the fact that parse_example contains a reference to the columns suggests it belongs in the model function.\r\n\r\nMaybe i am reading much into the code snippet in the comments and i should just send raw data from the input_fn in a suitable shape and ignore the tf.parse_example.\r\n\r\n\r\n"}