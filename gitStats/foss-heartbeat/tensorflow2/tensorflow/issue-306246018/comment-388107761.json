{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/388107761", "html_url": "https://github.com/tensorflow/tensorflow/issues/17811#issuecomment-388107761", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17811", "id": 388107761, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODEwNzc2MQ==", "user": {"login": "Corbalt", "id": 1984933, "node_id": "MDQ6VXNlcjE5ODQ5MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1984933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Corbalt", "html_url": "https://github.com/Corbalt", "followers_url": "https://api.github.com/users/Corbalt/followers", "following_url": "https://api.github.com/users/Corbalt/following{/other_user}", "gists_url": "https://api.github.com/users/Corbalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/Corbalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Corbalt/subscriptions", "organizations_url": "https://api.github.com/users/Corbalt/orgs", "repos_url": "https://api.github.com/users/Corbalt/repos", "events_url": "https://api.github.com/users/Corbalt/events{/privacy}", "received_events_url": "https://api.github.com/users/Corbalt/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-10T16:30:14Z", "updated_at": "2018-05-10T16:30:54Z", "author_association": "NONE", "body_html": "<p>That part of the API is actually the same. FeatureColumns can be used in two places: specifying how to parse features (in the input_fn) and how to construct the input layer (done after parsing to combine the dictionary of raw features into a single Tensor with transformed features). The parse features part is relevant if you have tf.Examples in some file that you're parsing, but if you have data in a pandas DataFrame or something like that you can ignore it and produce the features dictionary some other way. Remember, FeatureColumns don't contain any data/Tensors and should be thought of as configuration, so using them in two places doesn't cause any dataflow problems.</p>\n<p>Glad the tests were helpful!</p>", "body_text": "That part of the API is actually the same. FeatureColumns can be used in two places: specifying how to parse features (in the input_fn) and how to construct the input layer (done after parsing to combine the dictionary of raw features into a single Tensor with transformed features). The parse features part is relevant if you have tf.Examples in some file that you're parsing, but if you have data in a pandas DataFrame or something like that you can ignore it and produce the features dictionary some other way. Remember, FeatureColumns don't contain any data/Tensors and should be thought of as configuration, so using them in two places doesn't cause any dataflow problems.\nGlad the tests were helpful!", "body": "That part of the API is actually the same. FeatureColumns can be used in two places: specifying how to parse features (in the input_fn) and how to construct the input layer (done after parsing to combine the dictionary of raw features into a single Tensor with transformed features). The parse features part is relevant if you have tf.Examples in some file that you're parsing, but if you have data in a pandas DataFrame or something like that you can ignore it and produce the features dictionary some other way. Remember, FeatureColumns don't contain any data/Tensors and should be thought of as configuration, so using them in two places doesn't cause any dataflow problems.\r\n\r\nGlad the tests were helpful!"}