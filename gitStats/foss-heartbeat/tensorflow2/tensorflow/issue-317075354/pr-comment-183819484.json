{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/183819484", "pull_request_review_id": 114890893, "id": 183819484, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzgxOTQ4NA==", "diff_hunk": "@@ -103,248 +103,203 @@ the specified versions. If upgrading is not possible, then you may still run\n TensorFlow with GPU support, if you @{$install_sources$install TensorFlow from Sources}.\n \n \n-## Determine how to install TensorFlow\n-\n-You must pick the mechanism by which you install TensorFlow. The\n-supported choices are as follows:\n-\n-  * [Virtualenv](#InstallingVirtualenv)\n-  * [\"native\" pip](#InstallingNativePip)\n-  * [Docker](#InstallingDocker)\n-  * [Anaconda](#InstallingAnaconda)\n-  * installing from sources, which is documented in\n-    [a separate guide](https://www.tensorflow.org/install/install_sources).\n-\n-**We recommend the Virtualenv installation.**\n-[Virtualenv](https://virtualenv.pypa.io/en/stable/)\n-is a virtual Python environment isolated from other Python development,\n-incapable of interfering with or being affected by other Python programs\n-on the same machine.  During the Virtualenv installation process,\n-you will install not only TensorFlow but also all the packages that\n-TensorFlow requires.  (This is actually pretty easy.)\n-To start working with TensorFlow, you simply need to \"activate\" the\n-virtual environment.  All in all, Virtualenv provides a safe and\n-reliable mechanism for installing and running TensorFlow.\n-\n-Native pip installs TensorFlow directly on your system without going\n-through any container system. **We recommend the native pip install for\n-system administrators aiming to make TensorFlow available to everyone on a\n-multi-user system.** Since a native pip installation is not walled-off in\n-a separate container, the pip installation might interfere with other\n-Python-based installations on your system. However, if you understand pip\n-and your Python environment, a native pip installation often entails only\n-a single command.\n+## How to install TensorFlow\n \n-Docker completely isolates the TensorFlow installation\n-from pre-existing packages on your machine. The Docker container contains\n-TensorFlow and all its dependencies. Note that the Docker image can be quite\n-large (hundreds of MBs). You might choose the Docker installation if you are\n-incorporating TensorFlow into a larger application architecture that already\n-uses Docker.\n-\n-In Anaconda, you may use conda to create a virtual environment.\n-However, within Anaconda, we recommend installing TensorFlow with the\n-`pip install` command, not with the `conda install` command.\n-\n-**NOTE:** The conda package is community supported, not officially supported.\n-That is, the TensorFlow team neither tests nor maintains the conda package.\n-Use that package at your own risk.\n+There are a few options to install TensorFlow on your machine:\n \n+* [Use pip in a virtual environment](#InstallingVirtualenv) *(recommended)*\n+* [Use pip in your system environment](#InstallingNativePip)\n+* [Configure a Docker container](#InstallingDocker)\n+* [Use pip in Anaconda](#InstallingAnaconda)\n+* [Install TensorFlow from source](/install/install_sources)\n \n <a name=\"InstallingVirtualenv\"></a>\n-## Installing with Virtualenv\n-\n-Take the following steps to install TensorFlow with Virtualenv:\n-\n-  1. Install pip and Virtualenv by issuing one of the following commands:\n-\n-     <pre>$ <b>sudo apt-get install python-pip python-dev python-virtualenv</b> # for Python 2.7\n-    $ <b>sudo apt-get install python3-pip python3-dev python-virtualenv</b> # for Python 3.n</pre>\n-\n-  2. Create a Virtualenv environment by issuing one of the following commands:\n+### Use `pip` in a virtual environment\n \n-     <pre>$ <b>virtualenv --system-site-packages</b> <i>targetDirectory</i> # for Python 2.7\n-    $ <b>virtualenv --system-site-packages -p python3</b> <i>targetDirectory</i> # for Python 3.n</pre>\n+This is the *recommended* install method. The\n+[Virtualenv](https://virtualenv.pypa.io/en/stable/) tool creates virtual Python\n+environments that are isolated from other Python development on the same machine.\n+In this scenario, you install TensorFlow and its dependencies within a virtual\n+environment that is available when *activated*. Virtualenv provides a reliable\n+way to install and run TensorFlow while avoiding conflicts with the rest of the\n+system.\n \n-     where <code><em>targetDirectory</em></code> specifies the top of the\n-     Virtualenv tree.  Our instructions assume that\n-     <code><em>targetDirectory</em></code> is `~/tensorflow`, but you may\n-     choose any directory.\n+1\\. On Ubuntu, install the `pip` and `virtualenv` packages:\n \n-  3. Activate the Virtualenv environment by issuing one of the following\n-     commands:\n-\n-     <pre>$ <b>source ~/tensorflow/bin/activate</b> # bash, sh, ksh, or zsh\n-    $ <b>source ~/tensorflow/bin/activate.csh</b>  # csh or tcsh\n-    $ <b>. ~/tensorflow/bin/activate.fish</b>  # fish</pre>\n-\n-     The preceding <tt>source</tt> command should change your prompt\n-     to the following:\n-\n-     <pre>(tensorflow)$ </pre>\n-\n-  4. Ensure pip \u22658.1 is installed:\n-\n-     <pre>(tensorflow)$ <b>easy_install -U pip</b></pre>\n+<pre class=\"prettyprint lang-bsh\">\n+  <code class=\"devsite-terminal\">sudo apt-get install python-pip python-dev python-virtualenv   # for Python 2.7</code>\n+  <code class=\"devsite-terminal\">sudo apt-get install python3-pip python3-dev python-virtualenv # for Python 3.n</code>\n+</pre>\n \n-  5. Issue one of the following commands to install TensorFlow in the active\n-     Virtualenv environment:\n+2\\. Create a directory for the virtual environment and choose a Python\n+interpreter:\n \n-     <pre>(tensorflow)$ <b>pip install --upgrade tensorflow</b>      # for Python 2.7\n-    (tensorflow)$ <b>pip3 install --upgrade tensorflow</b>     # for Python 3.n\n-    (tensorflow)$ <b>pip install --upgrade tensorflow-gpu</b>  # for Python 2.7 and GPU\n-    (tensorflow)$ <b>pip3 install --upgrade tensorflow-gpu</b> # for Python 3.n and GPU</pre>\n+<pre class=\"prettyprint lang-bsh\">\n+  <code class=\"devsite-terminal\">mkdir ~/tensorflow  # somewhere to work out of</code>\n+  <code class=\"devsite-terminal\">cd ~/tensorflow</code>\n+  <code># Choose one of the following Python environments for the ./venv directory:</code>\n+  <code class=\"devsite-terminal\">virtualenv --system-site-packages <var>venv</var>            # Use python default (Python 2.7)</code>\n+  <code class=\"devsite-terminal\">virtualenv --system-site-packages -p python3 <var>venv</var> # Use Python 3.n</code>\n+</pre>\n \n-     If the above command succeeds, skip Step 6. If the preceding\n-     command fails, perform Step 6.\n+3\\. Activate the Virtualenv environment using one of these shell commands:\n \n-  6. (Optional) If Step 5 failed (typically because you invoked a pip version\n-     lower than 8.1), install TensorFlow in the active Virtualenv environment\n-     by issuing a command of the following format:\n+<pre class=\"prettyprint lang-bsh\">\n+  <code class=\"devsite-terminal\">source ~/tensorflow/<var>venv</var>/bin/activate      # bash, sh, ksh, or zsh</code>\n+  <code class=\"devsite-terminal\">source ~/tensorflow/<var>venv</var>/bin/activate.csh  # csh or tcsh</code>\n+  <code class=\"devsite-terminal\">. ~/tensorflow/<var>venv</var>/bin/activate.fish      # fish</code>\n+</pre>\n \n-     <pre>(tensorflow)$ <b>pip install --upgrade</b> <i>tfBinaryURL</i>   # Python 2.7\n-    (tensorflow)$ <b>pip3 install --upgrade</b> <i>tfBinaryURL</i>  # Python 3.n </pre>\n+When the Virtualenv is activated, the shell prompt displays as `(venv) $`.\n \n-     where <code><em>tfBinaryURL</em></code> identifies the URL of the\n-     TensorFlow Python package. The appropriate value of\n-     <code><em>tfBinaryURL</em></code>depends on the operating system,\n-     Python version, and GPU support. Find the appropriate value for\n-     <code><em>tfBinaryURL</em></code> for your system\n-     [here](#the_url_of_the_tensorflow_python_package).  For example, if you\n-     are installing TensorFlow for Linux, Python 3.4, and CPU-only support,\n-     issue the following command to install TensorFlow in the active\n-     Virtualenv environment:\n+4\\. Upgrade `pip` in your virtual environment:\n \n-     <pre>(tensorflow)$ <b>pip3 install --upgrade \\\n-     https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.8.0rc1-cp34-cp34m-linux_x86_64.whl</b></pre>\n+See the [pip installation guide](https://pip.pypa.io/en/stable/installing/) for\n+instructions, or use `easy_install`:\n \n-If you encounter installation problems, see\n-[Common Installation Problems](#common_installation_problems).\n+<pre class=\"prettyprint lang-bsh\">\n+(venv)$ easy_install -U pip\n+</pre>\n \n+5\\. Within an active Virtualenv environment, use one of the following `pip`\n+commands to install the TensorFlow package:\n \n-### Next Steps\n+<pre class=\"prettyprint lang-bsh\">\n+(venv)$ pip install --upgrade tensorflow      # for Python 2.7</code>\n+(venv)$ pip3 install --upgrade tensorflow     # for Python 3.n</code>\n+(venv)$ pip install --upgrade tensorflow-gpu  # for Python 2.7 and GPU</code>\n+</pre>\n \n-After installing TensorFlow,\n-[validate the installation](#ValidateYourInstallation).\n+Success! TensorFlow is now installed.\n \n-Note that you must activate the Virtualenv environment each time you\n-use TensorFlow. If the Virtualenv environment is not currently active,\n-invoke one of the following commands:\n+Use `pip list` to show the packages installed in the virtual environment.\n+[Validate the install](#ValidateYourInstallation) and test the version:\n \n-<pre>$ <b>source ~/tensorflow/bin/activate</b>      # bash, sh, ksh, or zsh\n-$ <b>source ~/tensorflow/bin/activate.csh</b>  # csh or tcsh</pre>\n+<pre class=\"prettyprint lang-bsh\">\n+(venv)$ python -c \"import tensorflow as tf; print(tf.__version__)\"\n+</pre>\n \n-When the Virtualenv environment is active, you may run\n-TensorFlow programs from this shell.  Your prompt will become\n-the following to indicate that your tensorflow environment is active:\n+Use the `deactivate` command to stop the Python virtual environment.\n \n-<pre>(tensorflow)$ </pre>\n+#### Problems\n \n-When you are done using TensorFlow, you may deactivate the\n-environment by invoking the `deactivate` function as follows:\n+If the above steps failed, try installing the TensorFlow binary using the remote\n+URL of the `pip` package:\n \n-<pre>(tensorflow)$ <b>deactivate</b> </pre>\n+<pre class=\"prettyprint lang-bsh\">\n+(venv)$ pip install --upgrade <var>remote-pkg-URL</var>   # Python 2.7\n+(venv)$ pip3 install --upgrade <var>remote-pkg-URL</var>  # Python 3.n\n+</pre>\n \n-The prompt will revert back to your default prompt (as defined by the\n-`PS1` environment variable).\n+The <var>remote-pkg-URL</var> depends on the operating system, Python version,\n+and GPU support. See [here](#the_url_of_the_tensorflow_python_package) for the\n+URL naming scheme and location.\n \n+See [Common Installation Problems](#common_installation_problems) if you\n+encounter problems.\n \n-### Uninstalling TensorFlow\n+#### Uninstall TensorFlow\n \n-To uninstall TensorFlow, simply remove the tree you created.\n-For example:\n+To uninstall TensorFlow, remove the Virtualenv directory you created in step 2:\n \n-<pre>$ <b>rm -r</b> <i>targetDirectory</i> </pre>\n+<pre class=\"prettyprint lang-bsh\">\n+  <code class=\"devsite-terminal\">deactivate  # stop the virtualenv</code>\n+  <code class=\"devsite-terminal\">rm -r ~/tensorflow/<var>venv</var></code>\n+</pre>\n \n \n <a name=\"InstallingNativePip\"></a>\n-## Installing with native pip\n-\n-You may install TensorFlow through pip, choosing between a simple\n-installation procedure or a more complex one.\n+### Use `pip` in your system environment\n \n-**Note:** The\n-[REQUIRED_PACKAGES section of setup.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/pip_package/setup.py)\n-lists the TensorFlow packages that pip will install or upgrade.\n+Use `pip` to install the TensorFlow package directly on your system without\n+using a container or virtual environment for isolation. This method is\n+recommended for system administrators that want a TensorFlow installation that is\n+available to everyone on a multi-user system.\n \n+Since a system install is not isolated, it could interfere with other\n+Python-based installations. But if you understand `pip` and your Python\n+environment, a system `pip` install is straightforward.\n \n-### Prerequisite: Python and Pip\n+See the\n+[REQUIRED_PACKAGES section of setup.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/pip_package/setup.py)\n+for a list of TensorFlow packages that `pip` installs or upgrade`.\n \n-Python is automatically installed on Ubuntu.  Take a moment to confirm\n-(by issuing a `python -V` command) that one of the following Python\n-versions is already installed on your system:\n \n-  * Python 2.7\n-  * Python 3.4+\n+#### Install Python and `pip`\n \n-The pip or pip3 package manager is *usually* installed on Ubuntu.  Take a\n-moment to confirm (by issuing a `pip -V` or `pip3 -V` command)\n-that pip or pip3 is installed.  We strongly recommend version 8.1 or higher\n-of pip or pip3.  If Version 8.1 or later is not installed, issue the\n-following command, which will either install or upgrade to the latest\n-pip version:\n+On Ubuntu, Python is automatically installed and `pip` is *usually* installed.\n+Confirm the `python` and `pip` versions:\n \n-<pre>$ <b>sudo apt-get install python-pip python-dev</b>   # for Python 2.7\n-$ <b>sudo apt-get install python3-pip python3-dev</b> # for Python 3.n\n+<pre class=\"prettyprint lang-bsh\">\n+  <code class=\"devsite-terminal\">python -V</code>\n+  <code class=\"devsite-terminal\">pip -V  # or: pip3 -V</code>\n </pre>\n \n+We *strongly recommend* `pip` or `pip3` version 8.1 or higher. If using a release\n+before version 8.1,  upgrade `pip`:\n \n-### Install TensorFlow\n-\n-Assuming the prerequisite software is installed on your Linux host,\n-take the following steps:\n+<pre class=\"prettyprint lang-bsh\">\n+  <code class=\"devsite-terminal\">sudo apt-get install python-pip python-dev   # for Python 2.7</code>\n+  <code class=\"devsite-terminal\">sudo apt-get install python3-pip python3-dev # for Python 3.n</code>\n+</pre>\n \n-  1. Install TensorFlow by invoking **one** of the following commands:\n \n-     <pre>$ <b>pip install tensorflow</b>      # Python 2.7; CPU support (no GPU support)\n-    $ <b>pip3 install tensorflow</b>     # Python 3.n; CPU support (no GPU support)\n-    $ <b>pip install tensorflow-gpu</b>  # Python 2.7;  GPU support\n-    $ <b>pip3 install tensorflow-gpu</b> # Python 3.n; GPU support </pre>\n+#### Install TensorFlow\n \n-     If the preceding command runs to completion, you should now\n-     [validate your installation](#ValidateYourInstallation).\n+Install one of the available TensorFlow packages:\n \n-  2. (Optional.) If Step 1 failed, install the latest version of TensorFlow\n-     by issuing a command of the following format:\n+<pre class=\"prettyprint lang-bsh\">\n+  <code># Select one:</code>\n+  <code class=\"devsite-terminal\">sudo pip install tensorflow      # Python 2.7 CPU (no GPU support)</code>", "path": "tensorflow/docs_src/install/install_linux.md", "position": null, "original_position": 308, "commit_id": "03005b129691bf6db8cf8c8c5a82be70ac79571c", "original_commit_id": "8fa27b1903ceedb25da5649aa17160866dda734d", "user": {"login": "lamberta", "id": 43051, "node_id": "MDQ6VXNlcjQzMDUx", "avatar_url": "https://avatars2.githubusercontent.com/u/43051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lamberta", "html_url": "https://github.com/lamberta", "followers_url": "https://api.github.com/users/lamberta/followers", "following_url": "https://api.github.com/users/lamberta/following{/other_user}", "gists_url": "https://api.github.com/users/lamberta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lamberta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lamberta/subscriptions", "organizations_url": "https://api.github.com/users/lamberta/orgs", "repos_url": "https://api.github.com/users/lamberta/repos", "events_url": "https://api.github.com/users/lamberta/events{/privacy}", "received_events_url": "https://api.github.com/users/lamberta/received_events", "type": "User", "site_admin": false}, "body": "Added here and above (reworded this section a bit)", "created_at": "2018-04-24T17:35:45Z", "updated_at": "2018-04-24T21:52:56Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18817#discussion_r183819484", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18817", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/183819484"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18817#discussion_r183819484"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18817"}}, "body_html": "<p>Added here and above (reworded this section a bit)</p>", "body_text": "Added here and above (reworded this section a bit)", "in_reply_to_id": 183741154}