{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20142", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20142/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20142/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20142/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20142", "id": 333996696, "node_id": "MDU6SXNzdWUzMzM5OTY2OTY=", "number": 20142, "title": " use the stream builder to invoke FFT library fail in custom op ", "user": {"login": "laurentk67", "id": 16876678, "node_id": "MDQ6VXNlcjE2ODc2Njc4", "avatar_url": "https://avatars1.githubusercontent.com/u/16876678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laurentk67", "html_url": "https://github.com/laurentk67", "followers_url": "https://api.github.com/users/laurentk67/followers", "following_url": "https://api.github.com/users/laurentk67/following{/other_user}", "gists_url": "https://api.github.com/users/laurentk67/gists{/gist_id}", "starred_url": "https://api.github.com/users/laurentk67/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laurentk67/subscriptions", "organizations_url": "https://api.github.com/users/laurentk67/orgs", "repos_url": "https://api.github.com/users/laurentk67/repos", "events_url": "https://api.github.com/users/laurentk67/events{/privacy}", "received_events_url": "https://api.github.com/users/laurentk67/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-06-20T09:31:39Z", "updated_at": "2018-11-14T19:21:07Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nCentos /Linux</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nBinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.8.0</li>\n<li><strong>Python version</strong>:<br>\n3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nCUDA Version 9.0.176  cuDNN 7.0.5</li>\n<li><strong>GPU model and memory</strong>:<br>\nGeForce GTX TITAN X major: 5 minor: 2 memoryClockRate(GHz): 1.076</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nI'm writing a custom op performing image alignment. The module is performing several FFT operations on GPU .  I created a simple custom op to reproduce the issue with the stream builder method.<br>\nI didn't find any real example, I followed the comments given in the code  stream_executor/fft.h</li>\n</ul>\n<p>The portion of the code that is causing the error  is bellow  ( Create1dPlan ...)  with the corresponding trace log.<br>\nI also attached the full code  to produce the custom op at the bottom.<br>\nThanks for any help !</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">void</span> <span class=\"pl-en\">launchFFT</span>(\n  OpKernelContext<span class=\"pl-k\">*</span> context,\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">Tensor</span>&amp; <span class=\"pl-c1\">x</span>,\n   <span class=\"pl-c1\">Tensor</span>* <span class=\"pl-c1\">y</span>)\n{\nauto dev_ctx <span class=\"pl-k\">=</span> context<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">op_device_context</span>();\n<span class=\"pl-en\">OP_REQUIRES</span>(context, dev_ctx<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">stream</span>(), errors<span class=\"pl-k\">::</span><span class=\"pl-en\">Internal</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No stream available.<span class=\"pl-pds\">\"</span></span>));\nauto stream_exec<span class=\"pl-k\">=</span>dev_ctx<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">stream</span>()<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">parent</span>();\nperftools<span class=\"pl-k\">::</span>gputools<span class=\"pl-k\">::</span>DeviceMemory<span class=\"pl-k\">&lt;</span>std<span class=\"pl-k\">::</span>complex<span class=\"pl-k\">&lt;</span>float<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-c1\">X</span><span class=\"pl-k\">=</span>stream_exec<span class=\"pl-k\">&gt;</span>AllocateArray<span class=\"pl-k\">&lt;</span>std<span class=\"pl-k\">::</span>complex<span class=\"pl-k\">&lt;</span>float<span class=\"pl-k\">&gt;&gt;</span>(<span class=\"pl-c1\">1024</span>);\nperftools<span class=\"pl-k\">::</span>gputools<span class=\"pl-k\">::</span>DeviceMemory<span class=\"pl-k\">&lt;</span>std<span class=\"pl-k\">::</span>complex<span class=\"pl-k\">&lt;</span>float<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-c1\">Y</span><span class=\"pl-k\">=</span>stream_exec<span class=\"pl-k\">&gt;</span>AllocateArray<span class=\"pl-k\">&lt;</span>std<span class=\"pl-k\">::</span>complex<span class=\"pl-k\">&lt;</span>float<span class=\"pl-k\">&gt;&gt;</span>(<span class=\"pl-c1\">1024</span>);\n <span class=\"pl-c\"><span class=\"pl-c\">/*</span> ... populate x and y ... TBD<span class=\"pl-c\">*/</span></span>\nStream stream{stream_exec};\n<span class=\"pl-en\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Create1dPlan and ... die<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>);\nstd<span class=\"pl-k\">::</span>unique_ptr<span class=\"pl-k\">&lt;</span>Plan<span class=\"pl-k\">&gt;</span> plan <span class=\"pl-k\">=</span>stream_exec<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">AsFft</span>()<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">Create1dPlan</span>(<span class=\"pl-k\">&amp;</span>stream, <span class=\"pl-c1\">1024</span>,Type<span class=\"pl-k\">::</span>kC2CForward,<span class=\"pl-c1\">false</span>);\n<span class=\"pl-smi\">stream</span>.<span class=\"pl-en\">Init</span>().<span class=\"pl-en\">ThenFft</span>(<span class=\"pl-smi\">plan</span>.<span class=\"pl-c1\">get</span>(), <span class=\"pl-c1\">X</span>, <span class=\"pl-k\">&amp;</span><span class=\"pl-c1\">Y</span>);\n<span class=\"pl-en\">SE_CHECK_OK</span>(<span class=\"pl-smi\">stream</span>.<span class=\"pl-en\">BlockHostUntilDone</span>());\n}</pre></div>\n<p>018-06-20 02:12:43.373297: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1435] Adding visible gpu devices: 0<br>\n2018-06-20 02:12:43.524101: I tensorflow/core/common_runtime/gpu/gpu_device.cc:923] Device interconnect StreamExecutor with strength 1 edge matrix:<br>\n2018-06-20 02:12:43.524119: I tensorflow/core/common_runtime/gpu/gpu_device.cc:929]      0<br>\n2018-06-20 02:12:43.524123: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 0:   N<br>\n2018-06-20 02:12:43.524320: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 11431 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX TITAN X, pci bus id: 0000:06:00.0, compute capability: 5.2)<br>\nlaunchFFT<br>\nCreate1dPlan and ... die<br>\n<strong>2018-06-20 02:12:43.603606: F tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:112] Check failed: cuda_exec != nullptr</strong></p>\n<p>Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</p>\n<p>The sources of the custom op to reproduce the problem are bellow:<br>\n<strong>dummyFFT.cc</strong></p>\n<div class=\"highlight highlight-source-js\"><pre>#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>third_party/eigen3/unsupported/Eigen/CXX11/Tensor<span class=\"pl-pds\">\"</span></span>\n#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op.h<span class=\"pl-pds\">\"</span></span>\n#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op_kernel.h<span class=\"pl-pds\">\"</span></span>\n#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/register_types.h<span class=\"pl-pds\">\"</span></span>\n#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/shape_inference.h<span class=\"pl-pds\">\"</span></span>\n\nnamespace tensorflow\n{\ntypedef Eigen<span class=\"pl-k\">::</span>GpuDevice GPUDevice;\n\nusing shape_inference<span class=\"pl-k\">::</span>ShapeHandle;\nusing shape_inference<span class=\"pl-k\">::</span>InferenceContext;\nusing shape_inference<span class=\"pl-k\">::</span>DimensionHandle;\n\n<span class=\"pl-en\">REGISTER_OP</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DummyFft<span class=\"pl-pds\">\"</span></span>)\n.<span class=\"pl-en\">Input</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float: float32<span class=\"pl-pds\">\"</span></span>)\n.<span class=\"pl-en\">Output</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output: float32<span class=\"pl-pds\">\"</span></span>)\n.<span class=\"pl-en\">SetShapeFn</span>([](InferenceContext<span class=\"pl-k\">*</span> ctx) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Get shapes and ensure correct dimensionality</span>\n    ShapeHandle in_shape;\n    <span class=\"pl-en\">TF_RETURN_IF_ERROR</span>(ctx<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">WithRank</span>(ctx<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">input</span>(<span class=\"pl-c1\">0</span>), <span class=\"pl-c1\">2</span>, <span class=\"pl-k\">&amp;</span>in_shape));\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Construct and set the output shape</span>\n   ctx<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">set_output</span>(<span class=\"pl-c1\">0</span>, in_shape);\n    <span class=\"pl-k\">return</span> Status<span class=\"pl-k\">::</span><span class=\"pl-en\">OK</span>();\n});\n\n<span class=\"pl-k\">void</span> <span class=\"pl-en\">launchFFT</span>(\n  OpKernelContext<span class=\"pl-k\">*</span> ctx,\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">Tensor</span>&amp; <span class=\"pl-c1\">x</span>,\n  <span class=\"pl-c1\">Tensor</span>* <span class=\"pl-c1\">y</span>);\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">launchFFTOp</span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">public</span> OpKernel\n{\n public<span class=\"pl-k\">:</span>\n  explicit <span class=\"pl-en\">launchFFTOp</span>(OpKernelConstruction<span class=\"pl-k\">*</span> ctx) <span class=\"pl-k\">:</span> <span class=\"pl-en\">OpKernel</span>(<span class=\"pl-smi\">ctx</span>) { }\n\n  <span class=\"pl-k\">void</span> <span class=\"pl-en\">Compute</span>(OpKernelContext<span class=\"pl-k\">*</span> ctx) override\n  {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Get inputs</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">Tensor</span>&amp; <span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> ctx<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">input</span>(<span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Setup output shape</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">TensorShape</span>&amp; <span class=\"pl-c1\">input_shape</span>(<span class=\"pl-c1\">input</span>.<span class=\"pl-c1\">shape</span>());\n    TensorShape <span class=\"pl-en\">output_shape</span>(<span class=\"pl-smi\">input</span>.<span class=\"pl-c1\">shape</span>());\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Allocate output tensor</span>\n    Tensor<span class=\"pl-k\">*</span> output <span class=\"pl-k\">=</span> nullptr;\n    <span class=\"pl-en\">OP_REQUIRES_OK</span>(ctx, ctx<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">allocate_output</span>(<span class=\"pl-c1\">0</span>, output_shape, <span class=\"pl-k\">&amp;</span>output));\n    <span class=\"pl-en\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>launchFFT<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>);\n    <span class=\"pl-en\">launchFFT</span>(ctx, input,output);\n\n  }\n};</pre></div>\n<p><strong>dummyFFT.cu.cc</strong></p>\n<div class=\"highlight highlight-source-js\"><pre>#<span class=\"pl-k\">if</span> <span class=\"pl-c1\">GOOGLE_CUDA</span>\n#define <span class=\"pl-c1\">EIGEN_USE_GPU</span>\n\n#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>third_party/eigen3/unsupported/Eigen/CXX11/Tensor<span class=\"pl-pds\">\"</span></span>\n#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/register_types.h<span class=\"pl-pds\">\"</span></span>\n#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/platform/types.h<span class=\"pl-pds\">\"</span></span>\n#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/util/cuda_kernel_helper.h<span class=\"pl-pds\">\"</span></span>\n#include <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/platform/stream_executor.h<span class=\"pl-pds\">\"</span></span>\n\nusing namespace perftools<span class=\"pl-k\">::</span>gputools<span class=\"pl-k\">::</span>fft;\n\nusing namespace perftools<span class=\"pl-k\">::</span>gputools;\n\n\n\ntypedef Eigen<span class=\"pl-k\">::</span>GpuDevice GPUDevice;\nnamespace tensorflow\n{\nnamespace {\n\ntemplate <span class=\"pl-k\">&lt;</span>typename <span class=\"pl-c1\">T</span><span class=\"pl-k\">&gt;</span>\n\tperftools<span class=\"pl-k\">::</span>gputools<span class=\"pl-k\">::</span>DeviceMemory<span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">T</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">AsDeviceMemory</span>(<span class=\"pl-k\">const</span> <span class=\"pl-c1\">T</span>* <span class=\"pl-c1\">cuda_memory</span>) {\n\tperftools<span class=\"pl-k\">:</span>:gputools<span class=\"pl-k\">:</span>:<span class=\"pl-c1\">DeviceMemoryBase</span> <span class=\"pl-c1\">wrapped</span>(<span class=\"pl-c1\">const_cast</span>&lt;<span class=\"pl-c1\">T</span>*&gt;(<span class=\"pl-c1\">cuda_memory</span>));\n\t<span class=\"pl-smi\">perftools</span><span class=\"pl-k\">::</span><span class=\"pl-smi\">gputools</span><span class=\"pl-k\">::</span><span class=\"pl-smi\">DeviceMemory</span><span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">T</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">typed</span>(wrapped);\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">typed</span>;\n}\n\n}  <span class=\"pl-c\"><span class=\"pl-c\">//</span> end namespace</span>\n\n\n<span class=\"pl-k\">void</span> <span class=\"pl-en\">launchFFT</span>(\n  OpKernelContext<span class=\"pl-k\">*</span> context,\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">Tensor</span>&amp; <span class=\"pl-c1\">x</span>,\n   <span class=\"pl-c1\">Tensor</span>* <span class=\"pl-c1\">y</span>)\n{\nauto dev_ctx <span class=\"pl-k\">=</span> context<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">op_device_context</span>();\n<span class=\"pl-en\">OP_REQUIRES</span>(context, dev_ctx<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">stream</span>(), errors<span class=\"pl-k\">::</span><span class=\"pl-en\">Internal</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No stream available.<span class=\"pl-pds\">\"</span></span>));\nauto stream_exec<span class=\"pl-k\">=</span>dev_ctx<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">stream</span>()<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">parent</span>();\nperftools<span class=\"pl-k\">::</span>gputools<span class=\"pl-k\">::</span>DeviceMemory<span class=\"pl-k\">&lt;</span>std<span class=\"pl-k\">::</span>complex<span class=\"pl-k\">&lt;</span>float<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-c1\">X</span><span class=\"pl-k\">=</span>stream_exec<span class=\"pl-k\">&gt;</span>AllocateArray<span class=\"pl-k\">&lt;</span>std<span class=\"pl-k\">::</span>complex<span class=\"pl-k\">&lt;</span>float<span class=\"pl-k\">&gt;&gt;</span>(<span class=\"pl-c1\">1024</span>);\nperftools<span class=\"pl-k\">::</span>gputools<span class=\"pl-k\">::</span>DeviceMemory<span class=\"pl-k\">&lt;</span>std<span class=\"pl-k\">::</span>complex<span class=\"pl-k\">&lt;</span>float<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-c1\">Y</span><span class=\"pl-k\">=</span>stream_exec<span class=\"pl-k\">&gt;</span>AllocateArray<span class=\"pl-k\">&lt;</span>std<span class=\"pl-k\">::</span>complex<span class=\"pl-k\">&lt;</span>float<span class=\"pl-k\">&gt;&gt;</span>(<span class=\"pl-c1\">1024</span>);\n <span class=\"pl-c\"><span class=\"pl-c\">/*</span> ... populate x and y ... TBD<span class=\"pl-c\">*/</span></span>\nStream stream{stream_exec};\n<span class=\"pl-en\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Create1dPlan and ... die<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>);\nstd<span class=\"pl-k\">::</span>unique_ptr<span class=\"pl-k\">&lt;</span>Plan<span class=\"pl-k\">&gt;</span> plan <span class=\"pl-k\">=</span>stream_exec<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">AsFft</span>()<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span><span class=\"pl-en\">Create1dPlan</span>(<span class=\"pl-k\">&amp;</span>stream, <span class=\"pl-c1\">1024</span>,Type<span class=\"pl-k\">::</span>kC2CForward,<span class=\"pl-c1\">false</span>);\n<span class=\"pl-smi\">stream</span>.<span class=\"pl-en\">Init</span>().<span class=\"pl-en\">ThenFft</span>(<span class=\"pl-smi\">plan</span>.<span class=\"pl-c1\">get</span>(), <span class=\"pl-c1\">X</span>, <span class=\"pl-k\">&amp;</span><span class=\"pl-c1\">Y</span>);\n<span class=\"pl-en\">SE_CHECK_OK</span>(<span class=\"pl-smi\">stream</span>.<span class=\"pl-en\">BlockHostUntilDone</span>());\n}\n\n\n}  <span class=\"pl-c\"><span class=\"pl-c\">//</span> namespace TensorFlow</span>\n#endif</pre></div>\n<p><strong>makefile</strong></p>\n<pre><code>TF_CFLAGS := $(shell python3 -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))')\nTF_LIB := $(shell python -c 'import tensorflow as tf; print(tf.sysconfig.get_lib())')\n\nCUDA_LIB=/usr/local/cuda/lib64\n\nall: dummyFFT.cu.o dummyFFT.cu.cc dummyFFT.cc \n\tnvcc -std=c++11 -c -o dummyFFT.cu.o dummyFFT.cu.cc  $(TF_CFLAGS) -D GOOGLE_CUDA=1 -x cu -Xcompiler -fPIC --expt-relaxed-constexpr -ltensorfow_framework -I /usr/local -I /usr/local/cuda/include -O3\n\tg++ -std=c++11 -shared -o dummyFFT_op.so dummyFFT.cc dummyFFT.cu.o   $(TF_CFLAGS) -fPIC -O3 -L$(CUDA_LIB) -lcudart -L$(TF_LIB) -ltensorflow_framework\n</code></pre>\n<p>The Python functions:</p>\n<p><strong>test.py</strong> The main python  file to run the custom op</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">tensorflow</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">tf</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">numpy</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">np</span>\n\nfrom dummyFFT <span class=\"pl-k\">import</span> dummy_fft\n\n\ndef <span class=\"pl-en\">test</span>()<span class=\"pl-k\">:</span>\n\n    x <span class=\"pl-k\">=</span> <span class=\"pl-smi\">np</span>.<span class=\"pl-smi\">random</span>.<span class=\"pl-en\">rand</span>(<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">10</span>).<span class=\"pl-en\">astype</span>(<span class=\"pl-smi\">np</span>.<span class=\"pl-smi\">float32</span>)\n    x_ph <span class=\"pl-k\">=</span> <span class=\"pl-smi\">tf</span>.<span class=\"pl-en\">placeholder</span>(<span class=\"pl-smi\">tf</span>.<span class=\"pl-smi\">float32</span>, (<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">10</span>))\n    out<span class=\"pl-k\">=</span><span class=\"pl-en\">dummy_fft</span>(x_ph)\n\n    <span class=\"pl-k\">with</span> <span class=\"pl-smi\">tf</span>.<span class=\"pl-en\">Session</span>() as sess<span class=\"pl-k\">:</span>\n        _out <span class=\"pl-k\">=</span> <span class=\"pl-smi\">sess</span>.<span class=\"pl-en\">run</span>(out, feed_dict<span class=\"pl-k\">=</span>{x_ph<span class=\"pl-k\">:</span> x})\n\n\n<span class=\"pl-k\">if</span> __name__ <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>\n    <span class=\"pl-en\">test</span>()</pre></div>\n<p><strong>dummyFFT.py</strong>  used to load the library</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">tensorflow</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">tf</span>\nfrom <span class=\"pl-smi\">tensorflow</span>.<span class=\"pl-smi\">python</span>.<span class=\"pl-smi\">framework</span> <span class=\"pl-k\">import</span> ops\n\nop_module <span class=\"pl-k\">=</span> <span class=\"pl-smi\">tf</span>.<span class=\"pl-en\">load_op_library</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dummyFFT_op.so<span class=\"pl-pds\">'</span></span>)\n\n\ndef <span class=\"pl-en\">dummy_fft</span>(x)<span class=\"pl-k\">:</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">op_module</span>.<span class=\"pl-en\">dummy_fft</span>(x)</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nCentos /Linux\nTensorFlow installed from (source or binary):\nBinary\nTensorFlow version (use command below):\n1.8.0\nPython version:\n3.5\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nCUDA Version 9.0.176  cuDNN 7.0.5\nGPU model and memory:\nGeForce GTX TITAN X major: 5 minor: 2 memoryClockRate(GHz): 1.076\nExact command to reproduce:\nI'm writing a custom op performing image alignment. The module is performing several FFT operations on GPU .  I created a simple custom op to reproduce the issue with the stream builder method.\nI didn't find any real example, I followed the comments given in the code  stream_executor/fft.h\n\nThe portion of the code that is causing the error  is bellow  ( Create1dPlan ...)  with the corresponding trace log.\nI also attached the full code  to produce the custom op at the bottom.\nThanks for any help !\nvoid launchFFT(\n  OpKernelContext* context,\n  const Tensor& x,\n   Tensor* y)\n{\nauto dev_ctx = context->op_device_context();\nOP_REQUIRES(context, dev_ctx->stream(), errors::Internal(\"No stream available.\"));\nauto stream_exec=dev_ctx->stream()->parent();\nperftools::gputools::DeviceMemory<std::complex<float>>X=stream_exec>AllocateArray<std::complex<float>>(1024);\nperftools::gputools::DeviceMemory<std::complex<float>>Y=stream_exec>AllocateArray<std::complex<float>>(1024);\n /* ... populate x and y ... TBD*/\nStream stream{stream_exec};\nprintf(\"Create1dPlan and ... die\\n\");\nstd::unique_ptr<Plan> plan =stream_exec->AsFft()->Create1dPlan(&stream, 1024,Type::kC2CForward,false);\nstream.Init().ThenFft(plan.get(), X, &Y);\nSE_CHECK_OK(stream.BlockHostUntilDone());\n}\n018-06-20 02:12:43.373297: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1435] Adding visible gpu devices: 0\n2018-06-20 02:12:43.524101: I tensorflow/core/common_runtime/gpu/gpu_device.cc:923] Device interconnect StreamExecutor with strength 1 edge matrix:\n2018-06-20 02:12:43.524119: I tensorflow/core/common_runtime/gpu/gpu_device.cc:929]      0\n2018-06-20 02:12:43.524123: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 0:   N\n2018-06-20 02:12:43.524320: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 11431 MB memory) -> physical GPU (device: 0, name: GeForce GTX TITAN X, pci bus id: 0000:06:00.0, compute capability: 5.2)\nlaunchFFT\nCreate1dPlan and ... die\n2018-06-20 02:12:43.603606: F tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:112] Check failed: cuda_exec != nullptr\nProcess finished with exit code 134 (interrupted by signal 6: SIGABRT)\nThe sources of the custom op to reproduce the problem are bellow:\ndummyFFT.cc\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow\n{\ntypedef Eigen::GpuDevice GPUDevice;\n\nusing shape_inference::ShapeHandle;\nusing shape_inference::InferenceContext;\nusing shape_inference::DimensionHandle;\n\nREGISTER_OP(\"DummyFft\")\n.Input(\"float: float32\")\n.Output(\"output: float32\")\n.SetShapeFn([](InferenceContext* ctx) {\n    // Get shapes and ensure correct dimensionality\n    ShapeHandle in_shape;\n    TF_RETURN_IF_ERROR(ctx->WithRank(ctx->input(0), 2, &in_shape));\n    // Construct and set the output shape\n   ctx->set_output(0, in_shape);\n    return Status::OK();\n});\n\nvoid launchFFT(\n  OpKernelContext* ctx,\n  const Tensor& x,\n  Tensor* y);\n\nclass launchFFTOp : public OpKernel\n{\n public:\n  explicit launchFFTOp(OpKernelConstruction* ctx) : OpKernel(ctx) { }\n\n  void Compute(OpKernelContext* ctx) override\n  {\n    // Get inputs\n    const Tensor& input = ctx->input(0);\n    // Setup output shape\n    const TensorShape& input_shape(input.shape());\n    TensorShape output_shape(input.shape());\n    // Allocate output tensor\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, output_shape, &output));\n    printf(\"launchFFT\\n\");\n    launchFFT(ctx, input,output);\n\n  }\n};\ndummyFFT.cu.cc\n#if GOOGLE_CUDA\n#define EIGEN_USE_GPU\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/platform/types.h\"\n#include \"tensorflow/core/util/cuda_kernel_helper.h\"\n#include \"tensorflow/core/platform/stream_executor.h\"\n\nusing namespace perftools::gputools::fft;\n\nusing namespace perftools::gputools;\n\n\n\ntypedef Eigen::GpuDevice GPUDevice;\nnamespace tensorflow\n{\nnamespace {\n\ntemplate <typename T>\n\tperftools::gputools::DeviceMemory<T> AsDeviceMemory(const T* cuda_memory) {\n\tperftools::gputools::DeviceMemoryBase wrapped(const_cast<T*>(cuda_memory));\n\tperftools::gputools::DeviceMemory<T> typed(wrapped);\n  return typed;\n}\n\n}  // end namespace\n\n\nvoid launchFFT(\n  OpKernelContext* context,\n  const Tensor& x,\n   Tensor* y)\n{\nauto dev_ctx = context->op_device_context();\nOP_REQUIRES(context, dev_ctx->stream(), errors::Internal(\"No stream available.\"));\nauto stream_exec=dev_ctx->stream()->parent();\nperftools::gputools::DeviceMemory<std::complex<float>>X=stream_exec>AllocateArray<std::complex<float>>(1024);\nperftools::gputools::DeviceMemory<std::complex<float>>Y=stream_exec>AllocateArray<std::complex<float>>(1024);\n /* ... populate x and y ... TBD*/\nStream stream{stream_exec};\nprintf(\"Create1dPlan and ... die\\n\");\nstd::unique_ptr<Plan> plan =stream_exec->AsFft()->Create1dPlan(&stream, 1024,Type::kC2CForward,false);\nstream.Init().ThenFft(plan.get(), X, &Y);\nSE_CHECK_OK(stream.BlockHostUntilDone());\n}\n\n\n}  // namespace TensorFlow\n#endif\nmakefile\nTF_CFLAGS := $(shell python3 -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))')\nTF_LIB := $(shell python -c 'import tensorflow as tf; print(tf.sysconfig.get_lib())')\n\nCUDA_LIB=/usr/local/cuda/lib64\n\nall: dummyFFT.cu.o dummyFFT.cu.cc dummyFFT.cc \n\tnvcc -std=c++11 -c -o dummyFFT.cu.o dummyFFT.cu.cc  $(TF_CFLAGS) -D GOOGLE_CUDA=1 -x cu -Xcompiler -fPIC --expt-relaxed-constexpr -ltensorfow_framework -I /usr/local -I /usr/local/cuda/include -O3\n\tg++ -std=c++11 -shared -o dummyFFT_op.so dummyFFT.cc dummyFFT.cu.o   $(TF_CFLAGS) -fPIC -O3 -L$(CUDA_LIB) -lcudart -L$(TF_LIB) -ltensorflow_framework\n\nThe Python functions:\ntest.py The main python  file to run the custom op\nimport tensorflow as tf\nimport numpy as np\n\nfrom dummyFFT import dummy_fft\n\n\ndef test():\n\n    x = np.random.rand(10,10).astype(np.float32)\n    x_ph = tf.placeholder(tf.float32, (10,10))\n    out=dummy_fft(x_ph)\n\n    with tf.Session() as sess:\n        _out = sess.run(out, feed_dict={x_ph: x})\n\n\nif __name__ == \"__main__\":\n    test()\ndummyFFT.py  used to load the library\nimport tensorflow as tf\nfrom tensorflow.python.framework import ops\n\nop_module = tf.load_op_library('dummyFFT_op.so')\n\n\ndef dummy_fft(x):\n    return op_module.dummy_fft(x)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nCentos /Linux\r\n- **TensorFlow installed from (source or binary)**:\r\nBinary\r\n- **TensorFlow version (use command below)**:\r\n1.8.0\r\n- **Python version**: \r\n3.5\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\nCUDA Version 9.0.176  cuDNN 7.0.5\r\n- **GPU model and memory**:\r\nGeForce GTX TITAN X major: 5 minor: 2 memoryClockRate(GHz): 1.076\r\n- **Exact command to reproduce**:\r\nI'm writing a custom op performing image alignment. The module is performing several FFT operations on GPU .  I created a simple custom op to reproduce the issue with the stream builder method.\r\nI didn't find any real example, I followed the comments given in the code  stream_executor/fft.h  \r\n\r\nThe portion of the code that is causing the error  is bellow  ( Create1dPlan ...)  with the corresponding trace log.\r\nI also attached the full code  to produce the custom op at the bottom.\r\nThanks for any help !\r\n``` javascript\r\nvoid launchFFT(\r\n  OpKernelContext* context,\r\n  const Tensor& x,\r\n   Tensor* y)\r\n{\r\nauto dev_ctx = context->op_device_context();\r\nOP_REQUIRES(context, dev_ctx->stream(), errors::Internal(\"No stream available.\"));\r\nauto stream_exec=dev_ctx->stream()->parent();\r\nperftools::gputools::DeviceMemory<std::complex<float>>X=stream_exec>AllocateArray<std::complex<float>>(1024);\r\nperftools::gputools::DeviceMemory<std::complex<float>>Y=stream_exec>AllocateArray<std::complex<float>>(1024);\r\n /* ... populate x and y ... TBD*/\r\nStream stream{stream_exec};\r\nprintf(\"Create1dPlan and ... die\\n\");\r\nstd::unique_ptr<Plan> plan =stream_exec->AsFft()->Create1dPlan(&stream, 1024,Type::kC2CForward,false);\r\nstream.Init().ThenFft(plan.get(), X, &Y);\r\nSE_CHECK_OK(stream.BlockHostUntilDone());\r\n}\r\n```\r\n\r\n\r\n018-06-20 02:12:43.373297: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1435] Adding visible gpu devices: 0\r\n2018-06-20 02:12:43.524101: I tensorflow/core/common_runtime/gpu/gpu_device.cc:923] Device interconnect StreamExecutor with strength 1 edge matrix:\r\n2018-06-20 02:12:43.524119: I tensorflow/core/common_runtime/gpu/gpu_device.cc:929]      0 \r\n2018-06-20 02:12:43.524123: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 0:   N \r\n2018-06-20 02:12:43.524320: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 11431 MB memory) -> physical GPU (device: 0, name: GeForce GTX TITAN X, pci bus id: 0000:06:00.0, compute capability: 5.2)\r\nlaunchFFT\r\nCreate1dPlan and ... die\r\n**2018-06-20 02:12:43.603606: F tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:112] Check failed: cuda_exec != nullptr** \r\n\r\nProcess finished with exit code 134 (interrupted by signal 6: SIGABRT) \r\n\r\nThe sources of the custom op to reproduce the problem are bellow:\r\n**dummyFFT.cc**\r\n```javascript\r\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\r\n#include \"tensorflow/core/framework/op.h\"\r\n#include \"tensorflow/core/framework/op_kernel.h\"\r\n#include \"tensorflow/core/framework/register_types.h\"\r\n#include \"tensorflow/core/framework/shape_inference.h\"\r\n\r\nnamespace tensorflow\r\n{\r\ntypedef Eigen::GpuDevice GPUDevice;\r\n\r\nusing shape_inference::ShapeHandle;\r\nusing shape_inference::InferenceContext;\r\nusing shape_inference::DimensionHandle;\r\n\r\nREGISTER_OP(\"DummyFft\")\r\n.Input(\"float: float32\")\r\n.Output(\"output: float32\")\r\n.SetShapeFn([](InferenceContext* ctx) {\r\n    // Get shapes and ensure correct dimensionality\r\n    ShapeHandle in_shape;\r\n    TF_RETURN_IF_ERROR(ctx->WithRank(ctx->input(0), 2, &in_shape));\r\n    // Construct and set the output shape\r\n   ctx->set_output(0, in_shape);\r\n    return Status::OK();\r\n});\r\n\r\nvoid launchFFT(\r\n  OpKernelContext* ctx,\r\n  const Tensor& x,\r\n  Tensor* y);\r\n\r\nclass launchFFTOp : public OpKernel\r\n{\r\n public:\r\n  explicit launchFFTOp(OpKernelConstruction* ctx) : OpKernel(ctx) { }\r\n\r\n  void Compute(OpKernelContext* ctx) override\r\n  {\r\n    // Get inputs\r\n    const Tensor& input = ctx->input(0);\r\n    // Setup output shape\r\n    const TensorShape& input_shape(input.shape());\r\n    TensorShape output_shape(input.shape());\r\n    // Allocate output tensor\r\n    Tensor* output = nullptr;\r\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, output_shape, &output));\r\n    printf(\"launchFFT\\n\");\r\n    launchFFT(ctx, input,output);\r\n\r\n  }\r\n};\r\n```\r\n**dummyFFT.cu.cc**\r\n```javascript\r\n#if GOOGLE_CUDA\r\n#define EIGEN_USE_GPU\r\n\r\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\r\n#include \"tensorflow/core/framework/register_types.h\"\r\n#include \"tensorflow/core/platform/types.h\"\r\n#include \"tensorflow/core/util/cuda_kernel_helper.h\"\r\n#include \"tensorflow/core/platform/stream_executor.h\"\r\n\r\nusing namespace perftools::gputools::fft;\r\n\r\nusing namespace perftools::gputools;\r\n\r\n\r\n\r\ntypedef Eigen::GpuDevice GPUDevice;\r\nnamespace tensorflow\r\n{\r\nnamespace {\r\n\r\ntemplate <typename T>\r\n\tperftools::gputools::DeviceMemory<T> AsDeviceMemory(const T* cuda_memory) {\r\n\tperftools::gputools::DeviceMemoryBase wrapped(const_cast<T*>(cuda_memory));\r\n\tperftools::gputools::DeviceMemory<T> typed(wrapped);\r\n  return typed;\r\n}\r\n\r\n}  // end namespace\r\n\r\n\r\nvoid launchFFT(\r\n  OpKernelContext* context,\r\n  const Tensor& x,\r\n   Tensor* y)\r\n{\r\nauto dev_ctx = context->op_device_context();\r\nOP_REQUIRES(context, dev_ctx->stream(), errors::Internal(\"No stream available.\"));\r\nauto stream_exec=dev_ctx->stream()->parent();\r\nperftools::gputools::DeviceMemory<std::complex<float>>X=stream_exec>AllocateArray<std::complex<float>>(1024);\r\nperftools::gputools::DeviceMemory<std::complex<float>>Y=stream_exec>AllocateArray<std::complex<float>>(1024);\r\n /* ... populate x and y ... TBD*/\r\nStream stream{stream_exec};\r\nprintf(\"Create1dPlan and ... die\\n\");\r\nstd::unique_ptr<Plan> plan =stream_exec->AsFft()->Create1dPlan(&stream, 1024,Type::kC2CForward,false);\r\nstream.Init().ThenFft(plan.get(), X, &Y);\r\nSE_CHECK_OK(stream.BlockHostUntilDone());\r\n}\r\n\r\n\r\n}  // namespace TensorFlow\r\n#endif\r\n```\r\n\r\n**makefile**\r\n```\r\nTF_CFLAGS := $(shell python3 -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))')\r\nTF_LIB := $(shell python -c 'import tensorflow as tf; print(tf.sysconfig.get_lib())')\r\n\r\nCUDA_LIB=/usr/local/cuda/lib64\r\n\r\nall: dummyFFT.cu.o dummyFFT.cu.cc dummyFFT.cc \r\n\tnvcc -std=c++11 -c -o dummyFFT.cu.o dummyFFT.cu.cc  $(TF_CFLAGS) -D GOOGLE_CUDA=1 -x cu -Xcompiler -fPIC --expt-relaxed-constexpr -ltensorfow_framework -I /usr/local -I /usr/local/cuda/include -O3\r\n\tg++ -std=c++11 -shared -o dummyFFT_op.so dummyFFT.cc dummyFFT.cu.o   $(TF_CFLAGS) -fPIC -O3 -L$(CUDA_LIB) -lcudart -L$(TF_LIB) -ltensorflow_framework\r\n```\r\nThe Python functions:\r\n\r\n**test.py** The main python  file to run the custom op\r\n```javascript\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nfrom dummyFFT import dummy_fft\r\n\r\n\r\ndef test():\r\n\r\n    x = np.random.rand(10,10).astype(np.float32)\r\n    x_ph = tf.placeholder(tf.float32, (10,10))\r\n    out=dummy_fft(x_ph)\r\n\r\n    with tf.Session() as sess:\r\n        _out = sess.run(out, feed_dict={x_ph: x})\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test()\r\n```\r\n\r\n**dummyFFT.py**  used to load the library \r\n```javascript\r\nimport tensorflow as tf\r\nfrom tensorflow.python.framework import ops\r\n\r\nop_module = tf.load_op_library('dummyFFT_op.so')\r\n\r\n\r\ndef dummy_fft(x):\r\n    return op_module.dummy_fft(x)\r\n```\r\n\r\n\r\n\r\n\r\n"}