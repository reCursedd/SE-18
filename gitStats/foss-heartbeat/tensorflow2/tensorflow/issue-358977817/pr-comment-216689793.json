{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/216689793", "pull_request_review_id": 154226134, "id": 216689793, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjY4OTc5Mw==", "diff_hunk": "@@ -0,0 +1,272 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"ignite_binary_object_parser.h\"\n+\n+namespace tensorflow {\n+\n+Status BinaryObjectParser::Parse(uint8_t** ptr,\n+                                 std::vector<Tensor>* out_tensors,\n+                                 std::vector<int32_t>* types) {\n+  uint8_t object_type_id = **ptr;\n+  *ptr += 1;\n+\n+  switch (object_type_id) {\n+    case BYTE: {\n+      Tensor tensor(cpu_allocator(), DT_UINT8, {});\n+      tensor.scalar<uint8>()() = *((uint8_t*)*ptr);\n+      *ptr += 1;\n+      out_tensors->push_back(std::move(tensor));\n+      break;\n+    }\n+    case SHORT: {\n+      Tensor tensor(cpu_allocator(), DT_INT16, {});\n+      tensor.scalar<int16>()() = *((int16_t*)*ptr);\n+      *ptr += 2;\n+      out_tensors->push_back(std::move(tensor));\n+      break;\n+    }\n+    case INT: {\n+      Tensor tensor(cpu_allocator(), DT_INT32, {});\n+      tensor.scalar<int32>()() = *((int32_t*)*ptr);\n+      *ptr += 4;\n+      out_tensors->push_back(std::move(tensor));\n+      break;\n+    }\n+    case LONG: {\n+      Tensor tensor(cpu_allocator(), DT_INT64, {});\n+      tensor.scalar<int64>()() = *((int64_t*)*ptr);\n+      *ptr += 8;\n+      out_tensors->push_back(std::move(tensor));\n+      break;\n+    }\n+    case FLOAT: {\n+      Tensor tensor(cpu_allocator(), DT_FLOAT, {});\n+      tensor.scalar<float>()() = *((float*)*ptr);\n+      *ptr += 4;\n+      out_tensors->push_back(std::move(tensor));\n+      break;\n+    }\n+    case DOUBLE: {\n+      Tensor tensor(cpu_allocator(), DT_DOUBLE, {});\n+      tensor.scalar<double>()() = *((double*)*ptr);\n+      *ptr += 8;\n+      out_tensors->push_back(std::move(tensor));\n+      break;\n+    }\n+    case UCHAR: {\n+      Tensor tensor(cpu_allocator(), DT_UINT16, {});\n+      tensor.scalar<uint16>()() = *((uint16_t*)*ptr);\n+      *ptr += 2;\n+      out_tensors->push_back(std::move(tensor));\n+      break;\n+    }\n+    case BOOL: {\n+      Tensor tensor(cpu_allocator(), DT_BOOL, {});\n+      tensor.scalar<bool>()() = *((bool*)*ptr);\n+      *ptr += 1;\n+      out_tensors->push_back(std::move(tensor));\n+\n+      break;\n+    }\n+    case STRING: {\n+      int32_t length = *((int32_t*)*ptr);\n+      *ptr += 4;\n+      Tensor tensor(cpu_allocator(), DT_STRING, {});\n+      tensor.scalar<std::string>()() = std::string((char*)*ptr, length);", "path": "tensorflow/contrib/ignite/kernels/ignite_binary_object_parser.cc", "position": null, "original_position": 88, "commit_id": "90c68770467701a23d23a85c5d769f6f4fa39f0f", "original_commit_id": "0b6654bc223f4f3807209043dc34ccb07b55474e", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "Use `tensorflow::string` instead of `std::string` everywhere. Some platforms use a different string implementation.", "created_at": "2018-09-11T14:26:51Z", "updated_at": "2018-09-24T09:16:00Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22210#discussion_r216689793", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22210", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/216689793"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22210#discussion_r216689793"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22210"}}, "body_html": "<p>Use <code>tensorflow::string</code> instead of <code>std::string</code> everywhere. Some platforms use a different string implementation.</p>", "body_text": "Use tensorflow::string instead of std::string everywhere. Some platforms use a different string implementation."}