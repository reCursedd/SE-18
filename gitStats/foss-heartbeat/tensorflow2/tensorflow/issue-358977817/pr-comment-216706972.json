{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/216706972", "pull_request_review_id": 154226134, "id": 216706972, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjcwNjk3Mg==", "diff_hunk": "@@ -0,0 +1,437 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"ignite_dataset_iterator.h\"\n+\n+#include \"ignite_plain_client.h\"\n+#include \"ignite_ssl_wrapper.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+\n+#include <time.h>\n+#include <chrono>\n+\n+namespace tensorflow {\n+\n+IgniteDatasetIterator::IgniteDatasetIterator(\n+    const Params& params, std::string host, int32 port, std::string cache_name,\n+    bool local, int32 part, int32 page_size, std::string username,\n+    std::string password, std::string certfile, std::string keyfile,\n+    std::string cert_password, std::vector<int32> schema,\n+    std::vector<int32> permutation)\n+    : DatasetIterator<IgniteDataset>(params),\n+      cache_name_(cache_name),\n+      local_(local),\n+      part_(part),\n+      page_size_(page_size),\n+      username_(username),\n+      password_(password),\n+      schema_(schema),\n+      permutation_(permutation),\n+      remainder_(-1),\n+      cursor_id_(-1),\n+      last_page_(false) {\n+  Client* p_client = new PlainClient(host, port);\n+\n+  if (certfile.empty())\n+    client_ = std::unique_ptr<Client>(p_client);\n+  else\n+    client_ = std::unique_ptr<Client>(new SslWrapper(\n+        std::unique_ptr<Client>(p_client), certfile, keyfile, cert_password));\n+\n+  LOG(INFO) << \"Ignite Dataset Iterator created\";\n+}\n+\n+IgniteDatasetIterator::~IgniteDatasetIterator() {\n+  Status status = CloseConnection();\n+  if (!status.ok()) LOG(ERROR) << status.ToString();\n+\n+  LOG(INFO) << \"Ignite Dataset Iterator destroyed\";\n+}\n+\n+Status IgniteDatasetIterator::EstablishConnection() {\n+  if (!client_->IsConnected()) {\n+    Status status = client_->Connect();\n+    if (!status.ok()) return status;\n+\n+    status = Handshake();\n+    if (!status.ok()) {\n+      Status disconnect_status = client_->Disconnect();\n+      if (!disconnect_status.ok()) LOG(ERROR) << disconnect_status.ToString();\n+\n+      return status;\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status IgniteDatasetIterator::CloseConnection() {\n+  if (cursor_id_ != -1 && !last_page_) {\n+    Status conn_status = EstablishConnection();\n+    if (!conn_status.ok()) return conn_status;\n+\n+    TF_RETURN_IF_ERROR(client_->WriteInt(18));  // Message length\n+    TF_RETURN_IF_ERROR(\n+        client_->WriteShort(close_connection_opcode));   // Operation code\n+    TF_RETURN_IF_ERROR(client_->WriteLong(0));           // Request ID\n+    TF_RETURN_IF_ERROR(client_->WriteLong(cursor_id_));  // Resource ID\n+\n+    int32_t res_len;\n+    TF_RETURN_IF_ERROR(client_->ReadInt(&res_len));\n+    if (res_len < 12)\n+      return errors::Internal(\"Close Resource Response is corrupted\");\n+\n+    int64_t req_id;\n+    TF_RETURN_IF_ERROR(client_->ReadLong(&req_id));\n+    int32_t status;\n+    TF_RETURN_IF_ERROR(client_->ReadInt(&status));\n+    if (status != 0) {\n+      uint8_t err_msg_header;\n+      TF_RETURN_IF_ERROR(client_->ReadByte(&err_msg_header));\n+      if (err_msg_header == string_val) {\n+        int32_t err_msg_length;\n+        TF_RETURN_IF_ERROR(client_->ReadInt(&err_msg_length));\n+        uint8_t* err_msg_c = new uint8_t[err_msg_length];\n+        TF_RETURN_IF_ERROR(client_->ReadData(err_msg_c, err_msg_length));\n+        std::string err_msg((char*)err_msg_c, err_msg_length);\n+        delete[] err_msg_c;\n+\n+        return errors::Internal(\"Close Resource Error [status=\", status,\n+                                \", message=\", err_msg, \"]\");\n+      }\n+      return errors::Internal(\"Close Resource Error [status=\", status, \"]\");\n+    }\n+\n+    LOG(INFO) << \"Query Cursor \" << cursor_id_ << \" is closed\";\n+\n+    cursor_id_ = -1;\n+\n+    return client_->Disconnect();\n+  } else {\n+    LOG(INFO) << \"Query Cursor \" << cursor_id_ << \" is already closed\";\n+  }\n+\n+  return client_->IsConnected() ? client_->Disconnect() : Status::OK();\n+}\n+\n+Status IgniteDatasetIterator::GetNextInternal(IteratorContext* ctx,\n+                                              std::vector<Tensor>* out_tensors,\n+                                              bool* end_of_sequence) {\n+  if (remainder_ == 0 && last_page_) {\n+    LOG(INFO) << \"Query Cursor \" << cursor_id_ << \" is closed\";\n+\n+    cursor_id_ = -1;\n+    *end_of_sequence = true;\n+    return Status::OK();\n+  } else {\n+    Status status = EstablishConnection();\n+    if (!status.ok()) return status;\n+\n+    if (remainder_ == -1 || remainder_ == 0) {\n+      Status status = remainder_ == -1 ? ScanQuery() : LoadNextPage();\n+      if (!status.ok()) return status;\n+    }\n+\n+    uint8_t* initial_ptr = ptr_;\n+    std::vector<int32_t> types;\n+    std::vector<Tensor> tensors;\n+\n+    status = parser_.Parse(&ptr_, &tensors, &types);  // Parse key\n+    if (!status.ok()) return status;\n+\n+    status = parser_.Parse(&ptr_, &tensors, &types);  // Parse val\n+    if (!status.ok()) return status;\n+\n+    remainder_ -= (ptr_ - initial_ptr);\n+\n+    out_tensors->resize(tensors.size());\n+    for (int32_t i = 0; i < tensors.size(); i++)\n+      (*out_tensors)[permutation_[i]] = std::move(tensors[i]);\n+\n+    *end_of_sequence = false;\n+    return Status::OK();\n+  }\n+\n+  *end_of_sequence = true;\n+  return Status::OK();\n+}\n+\n+Status IgniteDatasetIterator::SaveInternal(IteratorStateWriter* writer) {\n+  return errors::Unimplemented(\n+      \"Iterator for IgniteDataset does not support 'SaveInternal'\");\n+}\n+\n+Status IgniteDatasetIterator::RestoreInternal(IteratorContext* ctx,\n+                                              IteratorStateReader* reader) {\n+  return errors::Unimplemented(\n+      \"Iterator for IgniteDataset does not support 'RestoreInternal')\");\n+}\n+\n+Status IgniteDatasetIterator::Handshake() {\n+  int32_t msg_len = 8;\n+\n+  if (username_.empty())\n+    msg_len += 1;\n+  else\n+    msg_len += 5 + username_.length();\n+\n+  if (password_.empty())\n+    msg_len += 1;\n+  else\n+    msg_len += 5 + password_.length();\n+\n+  TF_RETURN_IF_ERROR(client_->WriteInt(msg_len));\n+  TF_RETURN_IF_ERROR(client_->WriteByte(1));\n+  TF_RETURN_IF_ERROR(client_->WriteShort(protocol_major_version));\n+  TF_RETURN_IF_ERROR(client_->WriteShort(protocol_minor_version));\n+  TF_RETURN_IF_ERROR(client_->WriteShort(protocol_patch_version));\n+  TF_RETURN_IF_ERROR(client_->WriteByte(2));\n+  if (username_.empty()) {\n+    TF_RETURN_IF_ERROR(client_->WriteByte(null_val));\n+  } else {\n+    TF_RETURN_IF_ERROR(client_->WriteByte(string_val));\n+    TF_RETURN_IF_ERROR(client_->WriteInt(username_.length()));\n+    TF_RETURN_IF_ERROR(\n+        client_->WriteData((uint8_t*)username_.c_str(), username_.length()));\n+  }\n+\n+  if (password_.empty()) {\n+    TF_RETURN_IF_ERROR(client_->WriteByte(null_val));\n+  } else {\n+    TF_RETURN_IF_ERROR(client_->WriteByte(string_val));\n+    TF_RETURN_IF_ERROR(client_->WriteInt(password_.length()));\n+    TF_RETURN_IF_ERROR(\n+        client_->WriteData((uint8_t*)password_.c_str(), password_.length()));\n+  }\n+\n+  int32_t handshake_res_len;\n+  TF_RETURN_IF_ERROR(client_->ReadInt(&handshake_res_len));\n+  uint8_t handshake_res;\n+  TF_RETURN_IF_ERROR(client_->ReadByte(&handshake_res));\n+\n+  LOG(INFO) << \"Handshake length \" << handshake_res_len << \", res \"\n+            << (int16_t)handshake_res;\n+\n+  if (handshake_res != 1) {\n+    int16_t serv_ver_major;\n+    TF_RETURN_IF_ERROR(client_->ReadShort(&serv_ver_major));\n+    int16_t serv_ver_minor;\n+    TF_RETURN_IF_ERROR(client_->ReadShort(&serv_ver_minor));\n+    int16_t serv_ver_patch;\n+    TF_RETURN_IF_ERROR(client_->ReadShort(&serv_ver_patch));\n+    uint8_t header;\n+    TF_RETURN_IF_ERROR(client_->ReadByte(&header));\n+\n+    if (header == string_val) {\n+      int32_t length;\n+      TF_RETURN_IF_ERROR(client_->ReadInt(&length));\n+      uint8_t* err_msg_c = new uint8_t[length];\n+      TF_RETURN_IF_ERROR(client_->ReadData(err_msg_c, length));\n+      std::string err_msg((char*)err_msg_c, length);\n+      delete[] err_msg_c;\n+\n+      return errors::Internal(\"Handshake Error [result=\", handshake_res,\n+                              \", version=\", serv_ver_major, \".\", serv_ver_minor,\n+                              \".\", serv_ver_patch, \", message='\", err_msg,\n+                              \"']\");\n+    } else if (header == null_val) {\n+      return errors::Internal(\"Handshake Error [result=\", handshake_res,\n+                              \", version=\", serv_ver_major, \".\", serv_ver_minor,\n+                              \".\", serv_ver_patch, \"]\");\n+    } else {\n+      return errors::Internal(\"Handshake Error [result=\", handshake_res,\n+                              \", version=\", serv_ver_major, \".\", serv_ver_minor,\n+                              \".\", serv_ver_patch, \"]\");\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status IgniteDatasetIterator::ScanQuery() {\n+  TF_RETURN_IF_ERROR(client_->WriteInt(25));                   // Message length", "path": "tensorflow/contrib/ignite/kernels/ignite_dataset_iterator.cc", "position": null, "original_position": 264, "commit_id": "90c68770467701a23d23a85c5d769f6f4fa39f0f", "original_commit_id": "0b6654bc223f4f3807209043dc34ccb07b55474e", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "Move the magic number 25 to a named constant, and use it consistently in here.", "created_at": "2018-09-11T15:12:02Z", "updated_at": "2018-09-24T09:16:00Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22210#discussion_r216706972", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22210", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/216706972"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22210#discussion_r216706972"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22210"}}, "body_html": "<p>Move the magic number 25 to a named constant, and use it consistently in here.</p>", "body_text": "Move the magic number 25 to a named constant, and use it consistently in here."}