{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/216710516", "pull_request_review_id": 154226134, "id": 216710516, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjcxMDUxNg==", "diff_hunk": "@@ -0,0 +1,147 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <stdlib.h>\n+#include \"ignite_dataset.h\"\n+#include \"tensorflow/core/framework/dataset.h\"\n+\n+namespace tensorflow {\n+namespace {\n+\n+class IgniteDatasetOp : public DatasetOpKernel {\n+ public:\n+  using DatasetOpKernel::DatasetOpKernel;\n+\n+  void MakeDataset(OpKernelContext* ctx, DatasetBase** output) override {\n+    std::string cache_name = \"\";\n+    std::string host = \"\";\n+    int32 port = -1;\n+    bool local = false;\n+    int32 part = -1;\n+    int32 page_size = -1;\n+    std::string username = \"\";\n+    std::string password = \"\";\n+    std::string certfile = \"\";\n+    std::string keyfile = \"\";\n+    std::string cert_password = \"\";\n+\n+    const char* env_cache_name = std::getenv(\"IGNITE_DATASET_CACHE_NAME\");\n+    const char* env_host = std::getenv(\"IGNITE_DATASET_HOST\");\n+    const char* env_port = std::getenv(\"IGNITE_DATASET_PORT\");\n+    const char* env_local = std::getenv(\"IGNITE_DATASET_LOCAL\");\n+    const char* env_part = std::getenv(\"IGNITE_DATASET_PART\");\n+    const char* env_page_size = std::getenv(\"IGNITE_DATASET_PAGE_SIZE\");\n+    const char* env_username = std::getenv(\"IGNITE_DATASET_USERNAME\");\n+    const char* env_password = std::getenv(\"IGNITE_DATASET_PASSWORD\");\n+    const char* env_certfile = std::getenv(\"IGNITE_DATASET_CERTFILE\");\n+    const char* env_keyfile = std::getenv(\"IGNITE_DATASET_KEYFILE\");\n+    const char* env_cert_password = std::getenv(\"IGNITE_DATASET_CERT_PASSWORD\");\n+\n+    if (env_cache_name)\n+      cache_name = std::string(env_cache_name);\n+    else\n+      OP_REQUIRES_OK(ctx, ParseScalarArgument<std::string>(ctx, \"cache_name\",\n+                                                           &cache_name));\n+\n+    if (env_host)\n+      host = std::string(env_host);\n+    else\n+      OP_REQUIRES_OK(ctx, ParseScalarArgument<std::string>(ctx, \"host\", &host));\n+\n+    if (env_port)\n+      port = atoi(env_port);\n+    else\n+      OP_REQUIRES_OK(ctx, ParseScalarArgument<int32>(ctx, \"port\", &port));\n+\n+    if (env_local)\n+      local = true;\n+    else\n+      OP_REQUIRES_OK(ctx, ParseScalarArgument<bool>(ctx, \"local\", &local));\n+\n+    if (env_part)\n+      part = atoi(env_part);\n+    else\n+      OP_REQUIRES_OK(ctx, ParseScalarArgument<int32>(ctx, \"part\", &part));\n+\n+    if (env_page_size)\n+      page_size = atoi(env_page_size);\n+    else\n+      OP_REQUIRES_OK(ctx,\n+                     ParseScalarArgument<int32>(ctx, \"page_size\", &page_size));\n+\n+    if (env_username)\n+      username = std::string(env_username);\n+    else\n+      OP_REQUIRES_OK(\n+          ctx, ParseScalarArgument<std::string>(ctx, \"username\", &username));\n+\n+    if (env_password)\n+      password = std::string(env_password);\n+    else\n+      OP_REQUIRES_OK(\n+          ctx, ParseScalarArgument<std::string>(ctx, \"password\", &password));\n+\n+    if (env_certfile)\n+      certfile = std::string(env_certfile);\n+    else\n+      OP_REQUIRES_OK(\n+          ctx, ParseScalarArgument<std::string>(ctx, \"certfile\", &certfile));\n+\n+    if (env_keyfile)\n+      keyfile = std::string(env_keyfile);\n+    else\n+      OP_REQUIRES_OK(\n+          ctx, ParseScalarArgument<std::string>(ctx, \"keyfile\", &keyfile));\n+\n+    if (env_cert_password)\n+      cert_password = std::string(env_cert_password);\n+    else\n+      OP_REQUIRES_OK(ctx, ParseScalarArgument<std::string>(ctx, \"cert_password\",\n+                                                           &cert_password));\n+\n+    const Tensor* schema_tensor;\n+    OP_REQUIRES_OK(ctx, ctx->input(\"schema\", &schema_tensor));\n+    OP_REQUIRES(ctx, schema_tensor->dims() == 1,\n+                errors::InvalidArgument(\"`schema` must be a vector.\"));\n+\n+    std::vector<int32> schema;\n+    schema.reserve(schema_tensor->NumElements());\n+    for (int i = 0; i < schema_tensor->NumElements(); i++) {\n+      schema.push_back(schema_tensor->flat<int32>()(i));\n+    }\n+\n+    const Tensor* permutation_tensor;\n+    OP_REQUIRES_OK(ctx, ctx->input(\"permutation\", &permutation_tensor));\n+    OP_REQUIRES(ctx, schema_tensor->dims() == 1,", "path": "tensorflow/contrib/ignite/kernels/ignite_dataset_ops.cc", "position": null, "original_position": 127, "commit_id": "90c68770467701a23d23a85c5d769f6f4fa39f0f", "original_commit_id": "0b6654bc223f4f3807209043dc34ccb07b55474e", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "s/schema_tensor/permutation_tensor/", "created_at": "2018-09-11T15:21:38Z", "updated_at": "2018-09-24T09:16:00Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22210#discussion_r216710516", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22210", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/216710516"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22210#discussion_r216710516"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22210"}}, "body_html": "<p>s/schema_tensor/permutation_tensor/</p>", "body_text": "s/schema_tensor/permutation_tensor/"}