{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/381108335", "html_url": "https://github.com/tensorflow/tensorflow/issues/18463#issuecomment-381108335", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18463", "id": 381108335, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTEwODMzNQ==", "user": {"login": "eric-czech", "id": 6130352, "node_id": "MDQ6VXNlcjYxMzAzNTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6130352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eric-czech", "html_url": "https://github.com/eric-czech", "followers_url": "https://api.github.com/users/eric-czech/followers", "following_url": "https://api.github.com/users/eric-czech/following{/other_user}", "gists_url": "https://api.github.com/users/eric-czech/gists{/gist_id}", "starred_url": "https://api.github.com/users/eric-czech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eric-czech/subscriptions", "organizations_url": "https://api.github.com/users/eric-czech/orgs", "repos_url": "https://api.github.com/users/eric-czech/repos", "events_url": "https://api.github.com/users/eric-czech/events{/privacy}", "received_events_url": "https://api.github.com/users/eric-czech/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-13T11:34:21Z", "updated_at": "2018-04-13T11:34:21Z", "author_association": "NONE", "body_html": "<p><strong>Bazel version</strong>: N/A<br>\n<strong>CUDA/cuDNN version</strong>: N/A (This error occurs with and without a GPU and I see no way that CUDA lib versions apply -- I think it's solely related to missing ops in the java API)<br>\n<strong>Exact command to reproduce</strong>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Generate and export a graph with a \"GatherV2\" op in it</span>\n\n<span class=\"pl-k\">import</span> tempfile\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ntmp <span class=\"pl-k\">=</span> tempfile.mkdtemp()\n<span class=\"pl-ii\">!</span>rm <span class=\"pl-k\">-</span>rf <span class=\"pl-ii\">$</span>tmp\nbuilder <span class=\"pl-k\">=</span> tf.saved_model.builder.SavedModelBuilder(tmp)\n\ng <span class=\"pl-k\">=</span> tf.Graph()\n<span class=\"pl-k\">with</span> g.as_default():\n    x <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>])\n    y <span class=\"pl-k\">=</span> tf.gather(x, tf.range(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">5</span>), <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\n\n   <span class=\"pl-c\"><span class=\"pl-c\">#</span> Running this a second time is what puts GatherV2 into the graph (does not happen w/o this line)</span>\n    y <span class=\"pl-k\">=</span> tf.gather(y, tf.range(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">5</span>), <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n    \n<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>g) <span class=\"pl-k\">as</span> sess:\n    signature <span class=\"pl-k\">=</span> tf.saved_model.signature_def_utils.build_signature_def(\n        <span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>: tf.saved_model.utils.build_tensor_info(x)},\n        <span class=\"pl-v\">outputs</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>y<span class=\"pl-pds\">'</span></span>: tf.saved_model.utils.build_tensor_info(y)}\n    )\n\n    builder.add_meta_graph_and_variables(\n        sess, [tf.saved_model.tag_constants.<span class=\"pl-c1\">SERVING</span>],\n        <span class=\"pl-v\">signature_def_map</span><span class=\"pl-k\">=</span>{tf.saved_model.signature_constants.<span class=\"pl-c1\">DEFAULT_SERVING_SIGNATURE_DEF_KEY</span>: signature}\n    )\n    \n    xv <span class=\"pl-k\">=</span> np.arange(<span class=\"pl-c1\">25</span>).reshape(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>)\n    yv <span class=\"pl-k\">=</span> sess.run(y, {x: xv})\n        \nbuilder.save(<span class=\"pl-v\">as_text</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n<span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">INFO</span>:tensorflow:SavedModel written to: <span class=\"pl-s\"><span class=\"pl-k\">b</span><span class=\"pl-pds\">'</span>/var/folders/vc/j01b02990c7g90mw6v_dqpsw0000gn/T/tmpx0od_epb/saved_model.pbtxt<span class=\"pl-pds\">'</span></span></pre></div>\n<p>Then when importing this into java with the following maven dependencies:</p>\n<div class=\"highlight highlight-text-xml\"><pre>&lt;<span class=\"pl-ent\">dependency</span>&gt;\n\t&lt;<span class=\"pl-ent\">groupId</span>&gt;org.tensorflow&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n\t&lt;<span class=\"pl-ent\">artifactId</span>&gt;libtensorflow&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n\t&lt;<span class=\"pl-ent\">version</span>&gt;1.7.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;\n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n\t&lt;<span class=\"pl-ent\">groupId</span>&gt;org.tensorflow&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n\t&lt;<span class=\"pl-ent\">artifactId</span>&gt;libtensorflow_jni_gpu&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n\t&lt;<span class=\"pl-ent\">version</span>&gt;1.7.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt; \n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n\t&lt;<span class=\"pl-ent\">groupId</span>&gt;org.tensorflow&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n\t&lt;<span class=\"pl-ent\">artifactId</span>&gt;proto&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n\t&lt;<span class=\"pl-ent\">version</span>&gt;1.7.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">TFDebug</span> {\n\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">String</span>[] <span class=\"pl-v\">args</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">InvalidProtocolBufferException</span> {\n\t\t<span class=\"pl-smi\">String</span> path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/var/folders/vc/j01b02990c7g90mw6v_dqpsw0000gn/T/tmpx0od_epb/<span class=\"pl-pds\">\"</span></span>;\n\t\t<span class=\"pl-smi\">SavedModelBundle</span> model <span class=\"pl-k\">=</span> <span class=\"pl-smi\">SavedModelBundle</span><span class=\"pl-k\">.</span>load(path, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>serve<span class=\"pl-pds\">\"</span></span>);\n\t\t<span class=\"pl-smi\">MetaGraphDef</span> metaGraph <span class=\"pl-k\">=</span> <span class=\"pl-smi\">MetaGraphDef</span><span class=\"pl-k\">.</span>parseFrom(model<span class=\"pl-k\">.</span>metaGraphDef());\n\t}\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Running this results in:</span>\n<span class=\"pl-smi\">Exception</span> in thread <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>main<span class=\"pl-pds\">\"</span></span> <span class=\"pl-smi\">org.tensorflow<span class=\"pl-k\">.</span>TensorFlowException</span><span class=\"pl-k\">:</span> <span class=\"pl-smi\">Op</span> type not registered <span class=\"pl-s\"><span class=\"pl-pds\">'</span>GatherV2<span class=\"pl-pds\">'</span></span>\n\tat <span class=\"pl-smi\">org.tensorflow<span class=\"pl-k\">.</span>SavedModelBundle</span><span class=\"pl-k\">.</span>load(<span class=\"pl-smi\">Native</span> <span class=\"pl-smi\">Method</span>)\n\tat <span class=\"pl-smi\">org.tensorflow<span class=\"pl-k\">.</span>SavedModelBundle</span><span class=\"pl-k\">.</span>load(<span class=\"pl-smi\">SavedModelBundle</span><span class=\"pl-k\">.</span>java<span class=\"pl-k\">:</span><span class=\"pl-c1\">39</span>)\n\tat <span class=\"pl-smi\">net.imagej.ops.experiments.filter.deconvolve<span class=\"pl-k\">.</span>TFDebug</span><span class=\"pl-k\">.</span>main(<span class=\"pl-smi\">TFDebug</span><span class=\"pl-k\">.</span>java<span class=\"pl-k\">:</span><span class=\"pl-c1\">12</span>)</pre></div>", "body_text": "Bazel version: N/A\nCUDA/cuDNN version: N/A (This error occurs with and without a GPU and I see no way that CUDA lib versions apply -- I think it's solely related to missing ops in the java API)\nExact command to reproduce:\n# Generate and export a graph with a \"GatherV2\" op in it\n\nimport tempfile\nimport numpy as np\nimport tensorflow as tf\n\ntmp = tempfile.mkdtemp()\n!rm -rf $tmp\nbuilder = tf.saved_model.builder.SavedModelBuilder(tmp)\n\ng = tf.Graph()\nwith g.as_default():\n    x = tf.placeholder(tf.float32, shape=[5, 5])\n    y = tf.gather(x, tf.range(0, 5), axis=0)\n\n   # Running this a second time is what puts GatherV2 into the graph (does not happen w/o this line)\n    y = tf.gather(y, tf.range(0, 5), axis=1)\n    \nwith tf.Session(graph=g) as sess:\n    signature = tf.saved_model.signature_def_utils.build_signature_def(\n        inputs={'x': tf.saved_model.utils.build_tensor_info(x)},\n        outputs = {'y': tf.saved_model.utils.build_tensor_info(y)}\n    )\n\n    builder.add_meta_graph_and_variables(\n        sess, [tf.saved_model.tag_constants.SERVING],\n        signature_def_map={tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY: signature}\n    )\n    \n    xv = np.arange(25).reshape(5, 5)\n    yv = sess.run(y, {x: xv})\n        \nbuilder.save(as_text=True)\n\n> INFO:tensorflow:SavedModel written to: b'/var/folders/vc/j01b02990c7g90mw6v_dqpsw0000gn/T/tmpx0od_epb/saved_model.pbtxt'\nThen when importing this into java with the following maven dependencies:\n<dependency>\n\t<groupId>org.tensorflow</groupId>\n\t<artifactId>libtensorflow</artifactId>\n\t<version>1.7.0</version>\n</dependency>\n<dependency>\n\t<groupId>org.tensorflow</groupId>\n\t<artifactId>libtensorflow_jni_gpu</artifactId>\n\t<version>1.7.0</version>\n</dependency> \n<dependency>\n\t<groupId>org.tensorflow</groupId>\n\t<artifactId>proto</artifactId>\n\t<version>1.7.0</version>\n</dependency>\npublic class TFDebug {\n\tpublic static void main(String[] args) throws InvalidProtocolBufferException {\n\t\tString path = \"/var/folders/vc/j01b02990c7g90mw6v_dqpsw0000gn/T/tmpx0od_epb/\";\n\t\tSavedModelBundle model = SavedModelBundle.load(path, \"serve\");\n\t\tMetaGraphDef metaGraph = MetaGraphDef.parseFrom(model.metaGraphDef());\n\t}\n}\n// Running this results in:\nException in thread \"main\" org.tensorflow.TensorFlowException: Op type not registered 'GatherV2'\n\tat org.tensorflow.SavedModelBundle.load(Native Method)\n\tat org.tensorflow.SavedModelBundle.load(SavedModelBundle.java:39)\n\tat net.imagej.ops.experiments.filter.deconvolve.TFDebug.main(TFDebug.java:12)", "body": "**Bazel version**: N/A\r\n**CUDA/cuDNN version**: N/A (This error occurs with and without a GPU and I see no way that CUDA lib versions apply -- I think it's solely related to missing ops in the java API)\r\n**Exact command to reproduce**:\r\n\r\n```python\r\n\r\n# Generate and export a graph with a \"GatherV2\" op in it\r\n\r\nimport tempfile\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\ntmp = tempfile.mkdtemp()\r\n!rm -rf $tmp\r\nbuilder = tf.saved_model.builder.SavedModelBuilder(tmp)\r\n\r\ng = tf.Graph()\r\nwith g.as_default():\r\n    x = tf.placeholder(tf.float32, shape=[5, 5])\r\n    y = tf.gather(x, tf.range(0, 5), axis=0)\r\n\r\n   # Running this a second time is what puts GatherV2 into the graph (does not happen w/o this line)\r\n    y = tf.gather(y, tf.range(0, 5), axis=1)\r\n    \r\nwith tf.Session(graph=g) as sess:\r\n    signature = tf.saved_model.signature_def_utils.build_signature_def(\r\n        inputs={'x': tf.saved_model.utils.build_tensor_info(x)},\r\n        outputs = {'y': tf.saved_model.utils.build_tensor_info(y)}\r\n    )\r\n\r\n    builder.add_meta_graph_and_variables(\r\n        sess, [tf.saved_model.tag_constants.SERVING],\r\n        signature_def_map={tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY: signature}\r\n    )\r\n    \r\n    xv = np.arange(25).reshape(5, 5)\r\n    yv = sess.run(y, {x: xv})\r\n        \r\nbuilder.save(as_text=True)\r\n\r\n> INFO:tensorflow:SavedModel written to: b'/var/folders/vc/j01b02990c7g90mw6v_dqpsw0000gn/T/tmpx0od_epb/saved_model.pbtxt'\r\n```\r\n\r\nThen when importing this into java with the following maven dependencies:\r\n\r\n```xml\r\n<dependency>\r\n\t<groupId>org.tensorflow</groupId>\r\n\t<artifactId>libtensorflow</artifactId>\r\n\t<version>1.7.0</version>\r\n</dependency>\r\n<dependency>\r\n\t<groupId>org.tensorflow</groupId>\r\n\t<artifactId>libtensorflow_jni_gpu</artifactId>\r\n\t<version>1.7.0</version>\r\n</dependency> \r\n<dependency>\r\n\t<groupId>org.tensorflow</groupId>\r\n\t<artifactId>proto</artifactId>\r\n\t<version>1.7.0</version>\r\n</dependency>\r\n```\r\n\r\n```java\r\npublic class TFDebug {\r\n\tpublic static void main(String[] args) throws InvalidProtocolBufferException {\r\n\t\tString path = \"/var/folders/vc/j01b02990c7g90mw6v_dqpsw0000gn/T/tmpx0od_epb/\";\r\n\t\tSavedModelBundle model = SavedModelBundle.load(path, \"serve\");\r\n\t\tMetaGraphDef metaGraph = MetaGraphDef.parseFrom(model.metaGraphDef());\r\n\t}\r\n}\r\n// Running this results in:\r\nException in thread \"main\" org.tensorflow.TensorFlowException: Op type not registered 'GatherV2'\r\n\tat org.tensorflow.SavedModelBundle.load(Native Method)\r\n\tat org.tensorflow.SavedModelBundle.load(SavedModelBundle.java:39)\r\n\tat net.imagej.ops.experiments.filter.deconvolve.TFDebug.main(TFDebug.java:12)\r\n```\r\n\r\n"}