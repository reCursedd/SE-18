{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/231193082", "pull_request_review_id": 172107914, "id": 231193082, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTE5MzA4Mg==", "diff_hunk": "@@ -398,8 +398,13 @@ Status GrpcServer::Stop() {\n       state_ = STOPPED;\n       return Status::OK();\n     case STARTED:\n-      return errors::Unimplemented(\n-          \"Clean shutdown is not currently implemented\");\n+      server_->Shutdown();\n+      master_service_->Shutdown();\n+      worker_service_->Shutdown();\n+      eager_service_->Shutdown();\n+      state_ = STOPPED;\n+      LOG(INFO) << \"Server stopped (target: \" << target() << \")\";\n+      return Status::OK();", "path": "tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc", "position": 12, "original_position": 12, "commit_id": "56576ad348dfb5a858864e95e87434e514693c81", "original_commit_id": "d7d33062ad24afa008962559c834a8b5eda83612", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "The code in the PR doesn't solve the problem. It would need something like @poxvoculi's suggestion about a lame-duck mode, plus support for cancelling all in-flight requests (which isn't currently implemented). It would also need some refactoring to the device-management code, which uses per-process singletons at various points, so that all the required objects become owned by the server.\r\n\r\nThe process-based approach that @poxvoculi suggested would be more robust, at the expense of a little more overhead on starting the server, and the absence of a fast path between the parent and child processes. For the latter, it's not clear if that's a requirement.", "created_at": "2018-11-06T16:26:12Z", "updated_at": "2018-11-06T16:26:12Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23190#discussion_r231193082", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23190", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/231193082"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23190#discussion_r231193082"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23190"}}, "body_html": "<p>The code in the PR doesn't solve the problem. It would need something like <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15676913\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/poxvoculi\">@poxvoculi</a>'s suggestion about a lame-duck mode, plus support for cancelling all in-flight requests (which isn't currently implemented). It would also need some refactoring to the device-management code, which uses per-process singletons at various points, so that all the required objects become owned by the server.</p>\n<p>The process-based approach that <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15676913\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/poxvoculi\">@poxvoculi</a> suggested would be more robust, at the expense of a little more overhead on starting the server, and the absence of a fast path between the parent and child processes. For the latter, it's not clear if that's a requirement.</p>", "body_text": "The code in the PR doesn't solve the problem. It would need something like @poxvoculi's suggestion about a lame-duck mode, plus support for cancelling all in-flight requests (which isn't currently implemented). It would also need some refactoring to the device-management code, which uses per-process singletons at various points, so that all the required objects become owned by the server.\nThe process-based approach that @poxvoculi suggested would be more robust, at the expense of a little more overhead on starting the server, and the absence of a fast path between the parent and child processes. For the latter, it's not clear if that's a requirement.", "in_reply_to_id": 227438700}