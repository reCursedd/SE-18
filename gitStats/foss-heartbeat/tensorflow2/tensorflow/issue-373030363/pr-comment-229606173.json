{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/229606173", "pull_request_review_id": 170142616, "id": 229606173, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTYwNjE3Mw==", "diff_hunk": "@@ -398,8 +398,13 @@ Status GrpcServer::Stop() {\n       state_ = STOPPED;\n       return Status::OK();\n     case STARTED:\n-      return errors::Unimplemented(\n-          \"Clean shutdown is not currently implemented\");\n+      server_->Shutdown();\n+      master_service_->Shutdown();\n+      worker_service_->Shutdown();\n+      eager_service_->Shutdown();\n+      state_ = STOPPED;\n+      LOG(INFO) << \"Server stopped (target: \" << target() << \")\";\n+      return Status::OK();", "path": "tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc", "position": 12, "original_position": 12, "commit_id": "56576ad348dfb5a858864e95e87434e514693c81", "original_commit_id": "d7d33062ad24afa008962559c834a8b5eda83612", "user": {"login": "dmitrievanthony", "id": 1028969, "node_id": "MDQ6VXNlcjEwMjg5Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1028969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmitrievanthony", "html_url": "https://github.com/dmitrievanthony", "followers_url": "https://api.github.com/users/dmitrievanthony/followers", "following_url": "https://api.github.com/users/dmitrievanthony/following{/other_user}", "gists_url": "https://api.github.com/users/dmitrievanthony/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmitrievanthony/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmitrievanthony/subscriptions", "organizations_url": "https://api.github.com/users/dmitrievanthony/orgs", "repos_url": "https://api.github.com/users/dmitrievanthony/repos", "events_url": "https://api.github.com/users/dmitrievanthony/events{/privacy}", "received_events_url": "https://api.github.com/users/dmitrievanthony/received_events", "type": "User", "site_admin": false}, "body": "Speaking about 'lame duck' approach you described, I think I do exactly these things. I stop gRPC server first of all (`server_->Shutdown()`), then stops master, worker and eager services (`master_service_->Shutdown()`). This leads to enqueueing \"SHUTDOWN\" alarm message into queue and when this message is read from the queue using `cq_->Next()` method I shutdown the queue. Meanwhile I continue reading trailing messages until `cq_Next()` returns `nullptr` (it works because `Thread` destructor requires the loop with `cq_->Next()` to be completed).", "created_at": "2018-10-31T08:51:41Z", "updated_at": "2018-10-31T08:51:41Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23190#discussion_r229606173", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23190", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/229606173"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23190#discussion_r229606173"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23190"}}, "body_html": "<p>Speaking about 'lame duck' approach you described, I think I do exactly these things. I stop gRPC server first of all (<code>server_-&gt;Shutdown()</code>), then stops master, worker and eager services (<code>master_service_-&gt;Shutdown()</code>). This leads to enqueueing \"SHUTDOWN\" alarm message into queue and when this message is read from the queue using <code>cq_-&gt;Next()</code> method I shutdown the queue. Meanwhile I continue reading trailing messages until <code>cq_Next()</code> returns <code>nullptr</code> (it works because <code>Thread</code> destructor requires the loop with <code>cq_-&gt;Next()</code> to be completed).</p>", "body_text": "Speaking about 'lame duck' approach you described, I think I do exactly these things. I stop gRPC server first of all (server_->Shutdown()), then stops master, worker and eager services (master_service_->Shutdown()). This leads to enqueueing \"SHUTDOWN\" alarm message into queue and when this message is read from the queue using cq_->Next() method I shutdown the queue. Meanwhile I continue reading trailing messages until cq_Next() returns nullptr (it works because Thread destructor requires the loop with cq_->Next() to be completed).", "in_reply_to_id": 227438700}