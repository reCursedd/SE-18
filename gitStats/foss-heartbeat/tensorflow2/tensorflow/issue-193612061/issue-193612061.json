{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6097", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6097/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6097/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6097/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6097", "id": 193612061, "node_id": "MDU6SXNzdWUxOTM2MTIwNjE=", "number": 6097, "title": "Using classifiers with scikit-learn ensemble methods", "user": {"login": "Anjum48", "id": 13783303, "node_id": "MDQ6VXNlcjEzNzgzMzAz", "avatar_url": "https://avatars1.githubusercontent.com/u/13783303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anjum48", "html_url": "https://github.com/Anjum48", "followers_url": "https://api.github.com/users/Anjum48/followers", "following_url": "https://api.github.com/users/Anjum48/following{/other_user}", "gists_url": "https://api.github.com/users/Anjum48/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anjum48/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anjum48/subscriptions", "organizations_url": "https://api.github.com/users/Anjum48/orgs", "repos_url": "https://api.github.com/users/Anjum48/repos", "events_url": "https://api.github.com/users/Anjum48/events{/privacy}", "received_events_url": "https://api.github.com/users/Anjum48/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2016-12-05T21:15:28Z", "updated_at": "2018-04-03T01:03:58Z", "closed_at": "2018-04-03T01:03:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.</p>\n<p>For general support from the community, see <a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">StackOverflow</a>.<br>\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed<br>\nout of scope for GitHub Issues and point people to StackOverflow.</p>\n<p>For bugs or installation issues, please provide the following information.<br>\nThe more information you provide, the more easily we will be able to offer<br>\nhelp and advice.</p>\n<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?: <a href=\"http://stackoverflow.com/questions/35464652/how-to-create-ensemble-in-tensorflow\" rel=\"nofollow\">http://stackoverflow.com/questions/35464652/how-to-create-ensemble-in-tensorflow</a></h3>\n<h3>Environment info</h3>\n<p>Operating System: Ubuntu 16.04.1 LTS</p>\n<p>Installed version of CUDA and cuDNN:<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>): Using CPU only version of TensorFlow</p>\n<p>If installed from binary pip package, provide:</p>\n<ol>\n<li>A link to the pip package you installed:</li>\n<li>The output from <code>python -c \"import tensorflow; print(tensorflow.__version__)\"</code>: 0.12.0-rc0</li>\n</ol>\n<p>If installed from source, provide</p>\n<ol>\n<li>The commit hash (<code>git rev-parse HEAD</code>)</li>\n<li>The output of <code>bazel version</code></li>\n</ol>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>It would be useful if the TensorFlow Learn classifiers had a <code>get_params</code> method so that they could be used with the <code>VotingClassifier</code> in <code>scikit-learn</code>. Note that XGBoost does currently work well with <code>VotingClassifier</code></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> sklearn.svm <span class=\"pl-k\">import</span> <span class=\"pl-c1\">SVC</span>\n<span class=\"pl-k\">from</span> sklearn <span class=\"pl-k\">import</span> tree\n<span class=\"pl-k\">from</span> sklearn.ensemble <span class=\"pl-k\">import</span> RandomForestClassifier\n<span class=\"pl-k\">from</span> sklearn <span class=\"pl-k\">import</span> neighbors\n<span class=\"pl-k\">from</span> sklearn.ensemble <span class=\"pl-k\">import</span> VotingClassifier\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.contrib <span class=\"pl-k\">import</span> learn\n\nclf_svm <span class=\"pl-k\">=</span> SVC(<span class=\"pl-v\">C</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>, <span class=\"pl-v\">gamma</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\nclf_dt <span class=\"pl-k\">=</span> tree.DecisionTreeClassifier(<span class=\"pl-v\">max_depth</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">30</span>)\nclf_knn <span class=\"pl-k\">=</span> neighbors.KNeighborsClassifier(<span class=\"pl-c1\">7</span>, <span class=\"pl-v\">weights</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>distance<span class=\"pl-pds\">\"</span></span>)\nfeature_columns <span class=\"pl-k\">=</span> learn.infer_real_valued_columns_from_input(X_train)\nclf_dnn <span class=\"pl-k\">=</span> learn.DNNClassifier(<span class=\"pl-v\">feature_columns</span><span class=\"pl-k\">=</span>feature_columns, <span class=\"pl-v\">hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">200</span>, <span class=\"pl-c1\">400</span>, <span class=\"pl-c1\">200</span>], <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)\nclf_rf <span class=\"pl-k\">=</span> RandomForestClassifier(<span class=\"pl-v\">n_estimators</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>, <span class=\"pl-v\">max_depth</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-v\">min_samples_split</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">random_state</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\n\neclf <span class=\"pl-k\">=</span> VotingClassifier(<span class=\"pl-v\">estimators</span><span class=\"pl-k\">=</span>[(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>SVM<span class=\"pl-pds\">'</span></span>, clf_svm), \n                                    (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>DecisionTree<span class=\"pl-pds\">'</span></span>, clf_dt), \n                                    (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>KNN<span class=\"pl-pds\">'</span></span>, clf_knn), \n                                    (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>DNN<span class=\"pl-pds\">'</span></span>, clf_dnn), \n                                    (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>RandomForest<span class=\"pl-pds\">'</span></span>, clf_rf),], \n                        <span class=\"pl-v\">voting</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>hard<span class=\"pl-pds\">'</span></span>)\n\neclf.fit(X_train, y_train)\npredicted_labels <span class=\"pl-k\">=</span> eclf.predict(X_test)</pre></div>\n<h3>What other attempted solutions have you tried?</h3>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment or provide link).</p>\n<pre><code>---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-117-461ecf12b1de&gt; in &lt;module&gt;()\n     17                         voting='hard')\n     18 \n---&gt; 19 eclf.fit(X_train, y_train)\n     20 predicted_labels = eclf.predict(X_test)\n     21 \n\n/usr/local/lib/python3.5/dist-packages/sklearn/ensemble/voting_classifier.py in fit(self, X, y, sample_weight)\n    163                 delayed(_parallel_fit_estimator)(clone(clf), X, transformed_y,\n    164                     sample_weight)\n--&gt; 165                     for _, clf in self.estimators)\n    166 \n    167         return self\n\n/usr/local/lib/python3.5/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self, iterable)\n    756             # was dispatched. In particular this covers the edge\n    757             # case of Parallel used with an exhausted iterator.\n--&gt; 758             while self.dispatch_one_batch(iterator):\n    759                 self._iterating = True\n    760             else:\n\n/usr/local/lib/python3.5/dist-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self, iterator)\n    601 \n    602         with self._lock:\n--&gt; 603             tasks = BatchedCalls(itertools.islice(iterator, batch_size))\n    604             if len(tasks) == 0:\n    605                 # No more tasks available in the iterator: tell caller to stop.\n\n/usr/local/lib/python3.5/dist-packages/sklearn/externals/joblib/parallel.py in __init__(self, iterator_slice)\n    125 \n    126     def __init__(self, iterator_slice):\n--&gt; 127         self.items = list(iterator_slice)\n    128         self._size = len(self.items)\n    129 \n\n/usr/local/lib/python3.5/dist-packages/sklearn/ensemble/voting_classifier.py in &lt;genexpr&gt;(.0)\n    163                 delayed(_parallel_fit_estimator)(clone(clf), X, transformed_y,\n    164                     sample_weight)\n--&gt; 165                     for _, clf in self.estimators)\n    166 \n    167         return self\n\n/usr/local/lib/python3.5/dist-packages/sklearn/base.py in clone(estimator, safe)\n     63                             \"it does not seem to be a scikit-learn estimator \"\n     64                             \"as it does not implement a 'get_params' methods.\"\n---&gt; 65                             % (repr(estimator), type(estimator)))\n     66     klass = estimator.__class__\n     67     new_object_params = estimator.get_params(deep=False)\n\nTypeError: Cannot clone object '&lt;tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier object at 0x7f1d773f80f0&gt;' (type &lt;class 'tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier'&gt;): it does not seem to be a scikit-learn estimator as it does not implement a 'get_params' methods.\n</code></pre>", "body_text": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\nFor general support from the community, see StackOverflow.\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\nout of scope for GitHub Issues and point people to StackOverflow.\nFor bugs or installation issues, please provide the following information.\nThe more information you provide, the more easily we will be able to offer\nhelp and advice.\nWhat related GitHub issues or StackOverflow threads have you found by searching the web for your problem?: http://stackoverflow.com/questions/35464652/how-to-create-ensemble-in-tensorflow\nEnvironment info\nOperating System: Ubuntu 16.04.1 LTS\nInstalled version of CUDA and cuDNN:\n(please attach the output of ls -l /path/to/cuda/lib/libcud*): Using CPU only version of TensorFlow\nIf installed from binary pip package, provide:\n\nA link to the pip package you installed:\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\": 0.12.0-rc0\n\nIf installed from source, provide\n\nThe commit hash (git rev-parse HEAD)\nThe output of bazel version\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nIt would be useful if the TensorFlow Learn classifiers had a get_params method so that they could be used with the VotingClassifier in scikit-learn. Note that XGBoost does currently work well with VotingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import neighbors\nfrom sklearn.ensemble import VotingClassifier\n\nimport tensorflow as tf\nfrom tensorflow.contrib import learn\n\nclf_svm = SVC(C=1000, gamma=1)\nclf_dt = tree.DecisionTreeClassifier(max_depth=30)\nclf_knn = neighbors.KNeighborsClassifier(7, weights=\"distance\")\nfeature_columns = learn.infer_real_valued_columns_from_input(X_train)\nclf_dnn = learn.DNNClassifier(feature_columns=feature_columns, hidden_units=[200, 400, 200], n_classes=10)\nclf_rf = RandomForestClassifier(n_estimators=10, max_depth=None, min_samples_split=2, random_state=0)\n\neclf = VotingClassifier(estimators=[('SVM', clf_svm), \n                                    ('DecisionTree', clf_dt), \n                                    ('KNN', clf_knn), \n                                    ('DNN', clf_dnn), \n                                    ('RandomForest', clf_rf),], \n                        voting='hard')\n\neclf.fit(X_train, y_train)\npredicted_labels = eclf.predict(X_test)\nWhat other attempted solutions have you tried?\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment or provide link).\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-117-461ecf12b1de> in <module>()\n     17                         voting='hard')\n     18 \n---> 19 eclf.fit(X_train, y_train)\n     20 predicted_labels = eclf.predict(X_test)\n     21 \n\n/usr/local/lib/python3.5/dist-packages/sklearn/ensemble/voting_classifier.py in fit(self, X, y, sample_weight)\n    163                 delayed(_parallel_fit_estimator)(clone(clf), X, transformed_y,\n    164                     sample_weight)\n--> 165                     for _, clf in self.estimators)\n    166 \n    167         return self\n\n/usr/local/lib/python3.5/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self, iterable)\n    756             # was dispatched. In particular this covers the edge\n    757             # case of Parallel used with an exhausted iterator.\n--> 758             while self.dispatch_one_batch(iterator):\n    759                 self._iterating = True\n    760             else:\n\n/usr/local/lib/python3.5/dist-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self, iterator)\n    601 \n    602         with self._lock:\n--> 603             tasks = BatchedCalls(itertools.islice(iterator, batch_size))\n    604             if len(tasks) == 0:\n    605                 # No more tasks available in the iterator: tell caller to stop.\n\n/usr/local/lib/python3.5/dist-packages/sklearn/externals/joblib/parallel.py in __init__(self, iterator_slice)\n    125 \n    126     def __init__(self, iterator_slice):\n--> 127         self.items = list(iterator_slice)\n    128         self._size = len(self.items)\n    129 \n\n/usr/local/lib/python3.5/dist-packages/sklearn/ensemble/voting_classifier.py in <genexpr>(.0)\n    163                 delayed(_parallel_fit_estimator)(clone(clf), X, transformed_y,\n    164                     sample_weight)\n--> 165                     for _, clf in self.estimators)\n    166 \n    167         return self\n\n/usr/local/lib/python3.5/dist-packages/sklearn/base.py in clone(estimator, safe)\n     63                             \"it does not seem to be a scikit-learn estimator \"\n     64                             \"as it does not implement a 'get_params' methods.\"\n---> 65                             % (repr(estimator), type(estimator)))\n     66     klass = estimator.__class__\n     67     new_object_params = estimator.get_params(deep=False)\n\nTypeError: Cannot clone object '<tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier object at 0x7f1d773f80f0>' (type <class 'tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier'>): it does not seem to be a scikit-learn estimator as it does not implement a 'get_params' methods.", "body": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\r\n\r\nFor general support from the community, see [StackOverflow](https://stackoverflow.com/questions/tagged/tensorflow).\r\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\r\nout of scope for GitHub Issues and point people to StackOverflow.\r\n\r\nFor bugs or installation issues, please provide the following information.\r\nThe more information you provide, the more easily we will be able to offer\r\nhelp and advice.\r\n\r\n### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?: http://stackoverflow.com/questions/35464652/how-to-create-ensemble-in-tensorflow\r\n\r\n### Environment info\r\nOperating System: Ubuntu 16.04.1 LTS\r\n\r\nInstalled version of CUDA and cuDNN: \r\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`): Using CPU only version of TensorFlow\r\n\r\nIf installed from binary pip package, provide:\r\n\r\n1. A link to the pip package you installed:\r\n2. The output from `python -c \"import tensorflow; print(tensorflow.__version__)\"`: 0.12.0-rc0\r\n\r\nIf installed from source, provide \r\n\r\n1. The commit hash (`git rev-parse HEAD`)\r\n2. The output of `bazel version`\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\nIt would be useful if the TensorFlow Learn classifiers had a `get_params` method so that they could be used with the `VotingClassifier` in `scikit-learn`. Note that XGBoost does currently work well with `VotingClassifier`\r\n\r\n```python\r\nfrom sklearn.svm import SVC\r\nfrom sklearn import tree\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn import neighbors\r\nfrom sklearn.ensemble import VotingClassifier\r\n\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib import learn\r\n\r\nclf_svm = SVC(C=1000, gamma=1)\r\nclf_dt = tree.DecisionTreeClassifier(max_depth=30)\r\nclf_knn = neighbors.KNeighborsClassifier(7, weights=\"distance\")\r\nfeature_columns = learn.infer_real_valued_columns_from_input(X_train)\r\nclf_dnn = learn.DNNClassifier(feature_columns=feature_columns, hidden_units=[200, 400, 200], n_classes=10)\r\nclf_rf = RandomForestClassifier(n_estimators=10, max_depth=None, min_samples_split=2, random_state=0)\r\n\r\neclf = VotingClassifier(estimators=[('SVM', clf_svm), \r\n                                    ('DecisionTree', clf_dt), \r\n                                    ('KNN', clf_knn), \r\n                                    ('DNN', clf_dnn), \r\n                                    ('RandomForest', clf_rf),], \r\n                        voting='hard')\r\n\r\neclf.fit(X_train, y_train)\r\npredicted_labels = eclf.predict(X_test)\r\n```\r\n\r\n### What other attempted solutions have you tried?\r\n\r\n\r\n### Logs or other output that would be helpful\r\n(If logs are large, please upload as attachment or provide link).\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-117-461ecf12b1de> in <module>()\r\n     17                         voting='hard')\r\n     18 \r\n---> 19 eclf.fit(X_train, y_train)\r\n     20 predicted_labels = eclf.predict(X_test)\r\n     21 \r\n\r\n/usr/local/lib/python3.5/dist-packages/sklearn/ensemble/voting_classifier.py in fit(self, X, y, sample_weight)\r\n    163                 delayed(_parallel_fit_estimator)(clone(clf), X, transformed_y,\r\n    164                     sample_weight)\r\n--> 165                     for _, clf in self.estimators)\r\n    166 \r\n    167         return self\r\n\r\n/usr/local/lib/python3.5/dist-packages/sklearn/externals/joblib/parallel.py in __call__(self, iterable)\r\n    756             # was dispatched. In particular this covers the edge\r\n    757             # case of Parallel used with an exhausted iterator.\r\n--> 758             while self.dispatch_one_batch(iterator):\r\n    759                 self._iterating = True\r\n    760             else:\r\n\r\n/usr/local/lib/python3.5/dist-packages/sklearn/externals/joblib/parallel.py in dispatch_one_batch(self, iterator)\r\n    601 \r\n    602         with self._lock:\r\n--> 603             tasks = BatchedCalls(itertools.islice(iterator, batch_size))\r\n    604             if len(tasks) == 0:\r\n    605                 # No more tasks available in the iterator: tell caller to stop.\r\n\r\n/usr/local/lib/python3.5/dist-packages/sklearn/externals/joblib/parallel.py in __init__(self, iterator_slice)\r\n    125 \r\n    126     def __init__(self, iterator_slice):\r\n--> 127         self.items = list(iterator_slice)\r\n    128         self._size = len(self.items)\r\n    129 \r\n\r\n/usr/local/lib/python3.5/dist-packages/sklearn/ensemble/voting_classifier.py in <genexpr>(.0)\r\n    163                 delayed(_parallel_fit_estimator)(clone(clf), X, transformed_y,\r\n    164                     sample_weight)\r\n--> 165                     for _, clf in self.estimators)\r\n    166 \r\n    167         return self\r\n\r\n/usr/local/lib/python3.5/dist-packages/sklearn/base.py in clone(estimator, safe)\r\n     63                             \"it does not seem to be a scikit-learn estimator \"\r\n     64                             \"as it does not implement a 'get_params' methods.\"\r\n---> 65                             % (repr(estimator), type(estimator)))\r\n     66     klass = estimator.__class__\r\n     67     new_object_params = estimator.get_params(deep=False)\r\n\r\nTypeError: Cannot clone object '<tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier object at 0x7f1d773f80f0>' (type <class 'tensorflow.contrib.learn.python.learn.estimators.dnn.DNNClassifier'>): it does not seem to be a scikit-learn estimator as it does not implement a 'get_params' methods.\r\n```\r\n"}