{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110076908", "pull_request_review_id": 31221648, "id": 110076908, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDA3NjkwOA==", "diff_hunk": "@@ -28,45 +31,92 @@ namespace tensorflow {\n class FixedLengthRecordReader : public ReaderBase {\n  public:\n   FixedLengthRecordReader(const string& node_name, int64 header_bytes,\n-                          int64 record_bytes, int64 footer_bytes, Env* env)\n+                          int64 record_bytes, int64 footer_bytes,\n+                          const string& compression_type, Env* env)\n       : ReaderBase(\n             strings::StrCat(\"FixedLengthRecordReader '\", node_name, \"'\")),\n         header_bytes_(header_bytes),\n         record_bytes_(record_bytes),\n         footer_bytes_(footer_bytes),\n         env_(env),\n         file_pos_limit_(-1),\n-        record_number_(0) {}\n+        record_number_(0),\n+        compression_type_(compression_type) { }\n \n   // On success:\n-  // * input_buffer_ != nullptr,\n-  // * input_buffer_->Tell() == header_bytes_\n+  // * buffered_input_stream_ != nullptr,\n+  // * buffered_input_stream_->Tell() == header_bytes_\n   // * file_pos_limit_ == file size - footer_bytes_\n   Status OnWorkStartedLocked() override {\n     record_number_ = 0;\n-    uint64 file_size = 0;\n-    TF_RETURN_IF_ERROR(env_->GetFileSize(current_work(), &file_size));\n-    file_pos_limit_ = file_size - footer_bytes_;\n-\n-    TF_RETURN_IF_ERROR(env_->NewRandomAccessFile(current_work(), &file_));\n-\n-    input_buffer_.reset(new io::InputBuffer(file_.get(), kBufferSize));\n-    TF_RETURN_IF_ERROR(input_buffer_->SkipNBytes(header_bytes_));\n+    if (compression_type_ == \"ZLIB\" || compression_type_ == \"GZIP\") {\n+      const io::ZlibCompressionOptions zlib_options =\n+          compression_type_ == \"ZLIB\" ?\n+          io::ZlibCompressionOptions::DEFAULT() :\n+          io::ZlibCompressionOptions::GZIP();\n+\n+      file_pos_limit_ = -1;\n+      footer_cache_.clear();\n+\n+      TF_RETURN_IF_ERROR(env_->NewRandomAccessFile(current_work(), &file_));\n+      file_stream_.reset(new io::RandomAccessInputStream(file_.get()));\n+      buffered_input_stream_.reset(new io::ZlibInputStream(file_stream_.get(),\n+                                                          (size_t)kBufferSize,\n+                                                          (size_t)kBufferSize,\n+                                                          zlib_options));\n+      TF_RETURN_IF_ERROR(buffered_input_stream_->SkipNBytes(header_bytes_));\n+\n+      TF_RETURN_IF_ERROR(buffered_input_stream_->ReadNBytes(footer_bytes_, &footer_cache_));\n+    } else {\n+      uint64 file_size = 0;\n+      TF_RETURN_IF_ERROR(env_->GetFileSize(current_work(), &file_size));\n+      file_pos_limit_ = file_size - footer_bytes_;\n+\n+      TF_RETURN_IF_ERROR(env_->NewRandomAccessFile(current_work(), &file_));\n+      buffered_input_stream_.reset(new io::BufferedInputStream(file_.get(), kBufferSize));\n+      TF_RETURN_IF_ERROR(buffered_input_stream_->SkipNBytes(header_bytes_));\n+    }\n     return Status::OK();\n   }\n \n   Status OnWorkFinishedLocked() override {\n-    input_buffer_.reset(nullptr);\n+    buffered_input_stream_.reset(nullptr);\n     return Status::OK();\n   }\n \n   Status ReadLocked(string* key, string* value, bool* produced,\n                     bool* at_end) override {\n-    if (input_buffer_->Tell() >= file_pos_limit_) {\n-      *at_end = true;\n-      return Status::OK();\n+    if (file_pos_limit_ < 0) {\n+      // In case of compressed file (non-seekable), attampt to read", "path": "tensorflow/core/kernels/fixed_length_record_reader_op.cc", "position": null, "original_position": 88, "commit_id": "58c7ad730e58a411864bd5b2d24df0a2d2aabc5b", "original_commit_id": "d958b6b8e280ac7e7c14dacfa77630ec29cfac7f", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "body": "@Mistobaan Fixed. Thanks.", "created_at": "2017-04-06T04:23:19Z", "updated_at": "2017-06-27T00:11:31Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8901#discussion_r110076908", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8901", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110076908"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8901#discussion_r110076908"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8901"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=112599\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Mistobaan\">@Mistobaan</a> Fixed. Thanks.</p>", "body_text": "@Mistobaan Fixed. Thanks.", "in_reply_to_id": 110024579}