{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1454", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1454/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1454/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1454/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1454", "id": 139872359, "node_id": "MDU6SXNzdWUxMzk4NzIzNTk=", "number": 1454, "title": "Python multiple inequalities do not work as expected", "user": {"login": "bernardopires", "id": 1726375, "node_id": "MDQ6VXNlcjE3MjYzNzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1726375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernardopires", "html_url": "https://github.com/bernardopires", "followers_url": "https://api.github.com/users/bernardopires/followers", "following_url": "https://api.github.com/users/bernardopires/following{/other_user}", "gists_url": "https://api.github.com/users/bernardopires/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernardopires/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernardopires/subscriptions", "organizations_url": "https://api.github.com/users/bernardopires/orgs", "repos_url": "https://api.github.com/users/bernardopires/repos", "events_url": "https://api.github.com/users/bernardopires/events{/privacy}", "received_events_url": "https://api.github.com/users/bernardopires/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2016-03-10T12:27:52Z", "updated_at": "2016-03-26T20:58:48Z", "closed_at": "2016-03-26T20:58:48Z", "author_association": "CONTRIBUTOR", "body_html": "<pre><code>import tensorflow as tf\n\nwith tf.device(\"/cpu:0\"):\n    lower_bound = tf.constant(\n        [[ 0.,   0.,   0. ],\n         [ 0.,   0.,   0. ],\n         [ 0.5,  0.5,  0.5],\n         [ 0.5,  0.5,  0.5],])\n    upper_bound = tf.constant(\n        [[ 0.5,  0.5,  0.5],\n         [ 0.5,  0.5,  0.5],\n         [ 1.,   1.,   1. ],\n         [ 1.,   1.,   1. ],])\n    test = tf.constant(\n        [[ 0.30000001,  0.2,  0.82],\n         [ 0.30000001,  0.2,  0.82],\n         [ 0.30000001,  0.2,  0.82],\n         [ 0.30000001,  0.2,  0.82],])\n    multiple_inequality = lower_bound &lt;= test &lt; upper_bound\n    lower_bound_filter = lower_bound &lt;= test\n    upper_bound_filter = test &lt; upper_bound\n    expected_filter = tf.logical_and(lower_bound_filter, upper_bound_filter)\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    print('Multiple inequality:', multiple_inequality.eval())\n    print('Upper bound inequality:', upper_bound_filter.eval())\n    print('Lower bound inequality:', lower_bound_filter.eval())\n    print('Expected:', expected_filter.eval())\n</code></pre>\n<p>Output:</p>\n<blockquote>\n<p>('Multiple inequality:', array([[ True,  True, False],<br>\n[ True,  True, False],<br>\n[ True,  True,  True],<br>\n[ True,  True,  True]], dtype=bool))<br>\n('Upper bound inequality:', array([[ True,  True, False],<br>\n[ True,  True, False],<br>\n[ True,  True,  True],<br>\n[ True,  True,  True]], dtype=bool))<br>\n('Lower bound inequality:', array([[ True,  True,  True],<br>\n[ True,  True,  True],<br>\n[False, False,  True],<br>\n[False, False,  True]], dtype=bool))<br>\n('Expected:', array([[ True,  True, False],<br>\n[ True,  True, False],<br>\n[False, False,  True],<br>\n[False, False,  True]], dtype=bool))</p>\n</blockquote>\n<p>It seems like <code>multiple_inequality = lower_bound &lt;= test &lt; upper_bound</code> becomes <code>multiple_inequality = test &lt; upper_bound</code></p>", "body_text": "import tensorflow as tf\n\nwith tf.device(\"/cpu:0\"):\n    lower_bound = tf.constant(\n        [[ 0.,   0.,   0. ],\n         [ 0.,   0.,   0. ],\n         [ 0.5,  0.5,  0.5],\n         [ 0.5,  0.5,  0.5],])\n    upper_bound = tf.constant(\n        [[ 0.5,  0.5,  0.5],\n         [ 0.5,  0.5,  0.5],\n         [ 1.,   1.,   1. ],\n         [ 1.,   1.,   1. ],])\n    test = tf.constant(\n        [[ 0.30000001,  0.2,  0.82],\n         [ 0.30000001,  0.2,  0.82],\n         [ 0.30000001,  0.2,  0.82],\n         [ 0.30000001,  0.2,  0.82],])\n    multiple_inequality = lower_bound <= test < upper_bound\n    lower_bound_filter = lower_bound <= test\n    upper_bound_filter = test < upper_bound\n    expected_filter = tf.logical_and(lower_bound_filter, upper_bound_filter)\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    print('Multiple inequality:', multiple_inequality.eval())\n    print('Upper bound inequality:', upper_bound_filter.eval())\n    print('Lower bound inequality:', lower_bound_filter.eval())\n    print('Expected:', expected_filter.eval())\n\nOutput:\n\n('Multiple inequality:', array([[ True,  True, False],\n[ True,  True, False],\n[ True,  True,  True],\n[ True,  True,  True]], dtype=bool))\n('Upper bound inequality:', array([[ True,  True, False],\n[ True,  True, False],\n[ True,  True,  True],\n[ True,  True,  True]], dtype=bool))\n('Lower bound inequality:', array([[ True,  True,  True],\n[ True,  True,  True],\n[False, False,  True],\n[False, False,  True]], dtype=bool))\n('Expected:', array([[ True,  True, False],\n[ True,  True, False],\n[False, False,  True],\n[False, False,  True]], dtype=bool))\n\nIt seems like multiple_inequality = lower_bound <= test < upper_bound becomes multiple_inequality = test < upper_bound", "body": "```\nimport tensorflow as tf\n\nwith tf.device(\"/cpu:0\"):\n    lower_bound = tf.constant(\n        [[ 0.,   0.,   0. ],\n         [ 0.,   0.,   0. ],\n         [ 0.5,  0.5,  0.5],\n         [ 0.5,  0.5,  0.5],])\n    upper_bound = tf.constant(\n        [[ 0.5,  0.5,  0.5],\n         [ 0.5,  0.5,  0.5],\n         [ 1.,   1.,   1. ],\n         [ 1.,   1.,   1. ],])\n    test = tf.constant(\n        [[ 0.30000001,  0.2,  0.82],\n         [ 0.30000001,  0.2,  0.82],\n         [ 0.30000001,  0.2,  0.82],\n         [ 0.30000001,  0.2,  0.82],])\n    multiple_inequality = lower_bound <= test < upper_bound\n    lower_bound_filter = lower_bound <= test\n    upper_bound_filter = test < upper_bound\n    expected_filter = tf.logical_and(lower_bound_filter, upper_bound_filter)\n\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    print('Multiple inequality:', multiple_inequality.eval())\n    print('Upper bound inequality:', upper_bound_filter.eval())\n    print('Lower bound inequality:', lower_bound_filter.eval())\n    print('Expected:', expected_filter.eval())\n```\n\nOutput:\n\n> ('Multiple inequality:', array([[ True,  True, False],\n>        [ True,  True, False],\n>        [ True,  True,  True],\n>        [ True,  True,  True]], dtype=bool))\n> ('Upper bound inequality:', array([[ True,  True, False],\n>        [ True,  True, False],\n>        [ True,  True,  True],\n>        [ True,  True,  True]], dtype=bool))\n> ('Lower bound inequality:', array([[ True,  True,  True],\n>        [ True,  True,  True],\n>        [False, False,  True],\n>        [False, False,  True]], dtype=bool))\n> ('Expected:', array([[ True,  True, False],\n>        [ True,  True, False],\n>        [False, False,  True],\n>        [False, False,  True]], dtype=bool))\n\nIt seems like `multiple_inequality = lower_bound <= test < upper_bound` becomes `multiple_inequality = test < upper_bound`\n"}