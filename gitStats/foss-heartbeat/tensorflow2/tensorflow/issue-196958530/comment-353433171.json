{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353433171", "html_url": "https://github.com/tensorflow/tensorflow/issues/6438#issuecomment-353433171", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6438", "id": 353433171, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzQzMzE3MQ==", "user": {"login": "quaeler", "id": 22581048, "node_id": "MDQ6VXNlcjIyNTgxMDQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/22581048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quaeler", "html_url": "https://github.com/quaeler", "followers_url": "https://api.github.com/users/quaeler/followers", "following_url": "https://api.github.com/users/quaeler/following{/other_user}", "gists_url": "https://api.github.com/users/quaeler/gists{/gist_id}", "starred_url": "https://api.github.com/users/quaeler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quaeler/subscriptions", "organizations_url": "https://api.github.com/users/quaeler/orgs", "repos_url": "https://api.github.com/users/quaeler/repos", "events_url": "https://api.github.com/users/quaeler/events{/privacy}", "received_events_url": "https://api.github.com/users/quaeler/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-21T19:11:47Z", "updated_at": "2017-12-21T19:11:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=577277\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinwicke\">@martinwicke</a> How about adding a check to see if IPython has injected the appropriate attribute?  (I have no current environment to test this at the moment, else i'd do the code change myself.)</p>\n<div class=\"highlight highlight-source-python\"><pre>      _interactive <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\n      <span class=\"pl-k\">try</span>:\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> This is only defined in interactive shells.</span>\n        <span class=\"pl-k\">if</span> _sys.ps1: _interactive <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n      <span class=\"pl-k\">except</span> <span class=\"pl-c1\">AttributeError</span>:\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Even now, we may be in an interactive shell with `python -i`.</span>\n        _interactive <span class=\"pl-k\">=</span> _sys.flags.interactive\n\n      <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> _interactive:\n        <span class=\"pl-k\">try</span>:\n          <span class=\"pl-c\"><span class=\"pl-c\">#</span> Do we have access to IPython libraries, and if we do has get_ipython been injected?</span>\n          <span class=\"pl-k\">from</span> IPython.display <span class=\"pl-k\">import</span> clear_output\n          get_ipython\n          _interactive <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n        <span class=\"pl-k\">except</span> (<span class=\"pl-c1\">ImportError</span>, <span class=\"pl-c1\">NameError</span>):\n          <span class=\"pl-k\">pass</span>\n\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> If we are in an interactive environment (like Jupyter), set loglevel</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> to INFO and pipe the output to stdout.</span>\n      <span class=\"pl-k\">if</span> _interactive:\n        logger.setLevel(<span class=\"pl-c1\">INFO</span>)\n        _logging_target <span class=\"pl-k\">=</span> _sys.stdout\n      <span class=\"pl-k\">else</span>:\n        _logging_target <span class=\"pl-k\">=</span> _sys.stderr</pre></div>", "body_text": "@martinwicke How about adding a check to see if IPython has injected the appropriate attribute?  (I have no current environment to test this at the moment, else i'd do the code change myself.)\n      _interactive = False\n      try:\n        # This is only defined in interactive shells.\n        if _sys.ps1: _interactive = True\n      except AttributeError:\n        # Even now, we may be in an interactive shell with `python -i`.\n        _interactive = _sys.flags.interactive\n\n      if not _interactive:\n        try:\n          # Do we have access to IPython libraries, and if we do has get_ipython been injected?\n          from IPython.display import clear_output\n          get_ipython\n          _interactive = True\n        except (ImportError, NameError):\n          pass\n\n      # If we are in an interactive environment (like Jupyter), set loglevel\n      # to INFO and pipe the output to stdout.\n      if _interactive:\n        logger.setLevel(INFO)\n        _logging_target = _sys.stdout\n      else:\n        _logging_target = _sys.stderr", "body": "@martinwicke How about adding a check to see if IPython has injected the appropriate attribute?  (I have no current environment to test this at the moment, else i'd do the code change myself.)\r\n```python\r\n      _interactive = False\r\n      try:\r\n        # This is only defined in interactive shells.\r\n        if _sys.ps1: _interactive = True\r\n      except AttributeError:\r\n        # Even now, we may be in an interactive shell with `python -i`.\r\n        _interactive = _sys.flags.interactive\r\n\r\n      if not _interactive:\r\n        try:\r\n          # Do we have access to IPython libraries, and if we do has get_ipython been injected?\r\n          from IPython.display import clear_output\r\n          get_ipython\r\n          _interactive = True\r\n        except (ImportError, NameError):\r\n          pass\r\n\r\n      # If we are in an interactive environment (like Jupyter), set loglevel\r\n      # to INFO and pipe the output to stdout.\r\n      if _interactive:\r\n        logger.setLevel(INFO)\r\n        _logging_target = _sys.stdout\r\n      else:\r\n        _logging_target = _sys.stderr\r\n```"}