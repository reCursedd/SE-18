{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4714", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4714/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4714/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4714/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4714", "id": 180487608, "node_id": "MDU6SXNzdWUxODA0ODc2MDg=", "number": 4714, "title": "TensorBoard Feature Request: [DASHBOARD] Static Variable Display Tab", "user": {"login": "Mazecreator", "id": 18412448, "node_id": "MDQ6VXNlcjE4NDEyNDQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/18412448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mazecreator", "html_url": "https://github.com/Mazecreator", "followers_url": "https://api.github.com/users/Mazecreator/followers", "following_url": "https://api.github.com/users/Mazecreator/following{/other_user}", "gists_url": "https://api.github.com/users/Mazecreator/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mazecreator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mazecreator/subscriptions", "organizations_url": "https://api.github.com/users/Mazecreator/orgs", "repos_url": "https://api.github.com/users/Mazecreator/repos", "events_url": "https://api.github.com/users/Mazecreator/events{/privacy}", "received_events_url": "https://api.github.com/users/Mazecreator/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 284285184, "node_id": "MDU6TGFiZWwyODQyODUxODQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:tensorboard", "name": "comp:tensorboard", "color": "0052cc", "default": false}, {"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "decentralion", "id": 1400023, "node_id": "MDQ6VXNlcjE0MDAwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1400023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentralion", "html_url": "https://github.com/decentralion", "followers_url": "https://api.github.com/users/decentralion/followers", "following_url": "https://api.github.com/users/decentralion/following{/other_user}", "gists_url": "https://api.github.com/users/decentralion/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentralion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentralion/subscriptions", "organizations_url": "https://api.github.com/users/decentralion/orgs", "repos_url": "https://api.github.com/users/decentralion/repos", "events_url": "https://api.github.com/users/decentralion/events{/privacy}", "received_events_url": "https://api.github.com/users/decentralion/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "decentralion", "id": 1400023, "node_id": "MDQ6VXNlcjE0MDAwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1400023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentralion", "html_url": "https://github.com/decentralion", "followers_url": "https://api.github.com/users/decentralion/followers", "following_url": "https://api.github.com/users/decentralion/following{/other_user}", "gists_url": "https://api.github.com/users/decentralion/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentralion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentralion/subscriptions", "organizations_url": "https://api.github.com/users/decentralion/orgs", "repos_url": "https://api.github.com/users/decentralion/repos", "events_url": "https://api.github.com/users/decentralion/events{/privacy}", "received_events_url": "https://api.github.com/users/decentralion/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2016-10-02T00:21:09Z", "updated_at": "2017-06-16T21:22:16Z", "closed_at": "2017-06-16T19:20:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I do a lot of different runs which contain descriptions as well as different meta parameters.  It would be nice to have a tab on TensorBoard so I can tell which experiment I am viewing.</p>\n<p>My thought would be to simply add static variables from the Graph which might include Strings, Ints, Floats, (maybe matrix in table format if possible, like PCA parameters, maybe confusion matrix, etc).  These may include a text description, current learning rate, network meta parameters, etc.  It would be good to simple present the \"current\" value of these variables so if there is a search on Discount Rates for RL or variation such as learning rate, those can be viewed.  This would be different from simply graphing the Learning rate as that shows the history rather than \"current\".  I think of this as a TensorFlow \"Dashboard\" that I can setup.</p>\n<p>Something like:<br>\ntf.dashboard_summary(tags, tensor/value, collections=None, name=None)</p>\n<p>eg:<br>\ntf.dashboard_summary(\"Description:\",description_string_tensor_or_python_string)<br>\ntf.dashboard_summary(\"Learning Rate:\",lr_tensor)<br>\ntf.dashboard_summary(\"DiscountRate:\",discountRate_python_variable)</p>\n<p>In this case, a \"DASHBOARD\" tab on tensorflow would contain the 3 labels above and the tensor/value.  If the value is a python variable, then it should be considered constant and will not change over the graph lifecycle.  If it is a tensor/variable, then it should be pulled from the graph at each iteration.</p>\n<p>I can help but not sure where to jump in to get this started.</p>", "body_text": "I do a lot of different runs which contain descriptions as well as different meta parameters.  It would be nice to have a tab on TensorBoard so I can tell which experiment I am viewing.\nMy thought would be to simply add static variables from the Graph which might include Strings, Ints, Floats, (maybe matrix in table format if possible, like PCA parameters, maybe confusion matrix, etc).  These may include a text description, current learning rate, network meta parameters, etc.  It would be good to simple present the \"current\" value of these variables so if there is a search on Discount Rates for RL or variation such as learning rate, those can be viewed.  This would be different from simply graphing the Learning rate as that shows the history rather than \"current\".  I think of this as a TensorFlow \"Dashboard\" that I can setup.\nSomething like:\ntf.dashboard_summary(tags, tensor/value, collections=None, name=None)\neg:\ntf.dashboard_summary(\"Description:\",description_string_tensor_or_python_string)\ntf.dashboard_summary(\"Learning Rate:\",lr_tensor)\ntf.dashboard_summary(\"DiscountRate:\",discountRate_python_variable)\nIn this case, a \"DASHBOARD\" tab on tensorflow would contain the 3 labels above and the tensor/value.  If the value is a python variable, then it should be considered constant and will not change over the graph lifecycle.  If it is a tensor/variable, then it should be pulled from the graph at each iteration.\nI can help but not sure where to jump in to get this started.", "body": "I do a lot of different runs which contain descriptions as well as different meta parameters.  It would be nice to have a tab on TensorBoard so I can tell which experiment I am viewing.\n\nMy thought would be to simply add static variables from the Graph which might include Strings, Ints, Floats, (maybe matrix in table format if possible, like PCA parameters, maybe confusion matrix, etc).  These may include a text description, current learning rate, network meta parameters, etc.  It would be good to simple present the \"current\" value of these variables so if there is a search on Discount Rates for RL or variation such as learning rate, those can be viewed.  This would be different from simply graphing the Learning rate as that shows the history rather than \"current\".  I think of this as a TensorFlow \"Dashboard\" that I can setup.\n\nSomething like:\ntf.dashboard_summary(tags, tensor/value, collections=None, name=None)\n\neg:\ntf.dashboard_summary(\"Description:\",description_string_tensor_or_python_string)\ntf.dashboard_summary(\"Learning Rate:\",lr_tensor)\ntf.dashboard_summary(\"DiscountRate:\",discountRate_python_variable)\n\nIn this case, a \"DASHBOARD\" tab on tensorflow would contain the 3 labels above and the tensor/value.  If the value is a python variable, then it should be considered constant and will not change over the graph lifecycle.  If it is a tensor/variable, then it should be pulled from the graph at each iteration.\n\nI can help but not sure where to jump in to get this started.\n"}