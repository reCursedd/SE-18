{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/257789444", "html_url": "https://github.com/tensorflow/tensorflow/issues/4361#issuecomment-257789444", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4361", "id": 257789444, "node_id": "MDEyOklzc3VlQ29tbWVudDI1Nzc4OTQ0NA==", "user": {"login": "wjiangcmu", "id": 7198141, "node_id": "MDQ6VXNlcjcxOTgxNDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7198141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wjiangcmu", "html_url": "https://github.com/wjiangcmu", "followers_url": "https://api.github.com/users/wjiangcmu/followers", "following_url": "https://api.github.com/users/wjiangcmu/following{/other_user}", "gists_url": "https://api.github.com/users/wjiangcmu/gists{/gist_id}", "starred_url": "https://api.github.com/users/wjiangcmu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wjiangcmu/subscriptions", "organizations_url": "https://api.github.com/users/wjiangcmu/orgs", "repos_url": "https://api.github.com/users/wjiangcmu/repos", "events_url": "https://api.github.com/users/wjiangcmu/events{/privacy}", "received_events_url": "https://api.github.com/users/wjiangcmu/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-02T07:14:19Z", "updated_at": "2016-11-02T08:06:17Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3665715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dasabir\">@dasabir</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5733\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jfsantos\">@jfsantos</a> I had same issue. But by speficying the scope_name for batch_norm, the issue was fixed. Under a scope with reusable=True, <code>tf.contrib.layers.batch_norm(x)</code> will always create new norm_variables and make them reusable which gives you the error. One thing you can do it is to specify the norm_scope name like this <code>tf.contrib.layers.batch_norm(x, scope=\"name\")</code>. When you reuse this norm layer, just do <code>tf.contrib.layers.batch_norm(x, scope=\"name\", reuse=True)</code> or use <code>tf.contrib.layers.batch_norm(x, scope=\"name\")</code> under a reusable scope. Hope this is helpful.</p>", "body_text": "@dasabir and @jfsantos I had same issue. But by speficying the scope_name for batch_norm, the issue was fixed. Under a scope with reusable=True, tf.contrib.layers.batch_norm(x) will always create new norm_variables and make them reusable which gives you the error. One thing you can do it is to specify the norm_scope name like this tf.contrib.layers.batch_norm(x, scope=\"name\"). When you reuse this norm layer, just do tf.contrib.layers.batch_norm(x, scope=\"name\", reuse=True) or use tf.contrib.layers.batch_norm(x, scope=\"name\") under a reusable scope. Hope this is helpful.", "body": "@dasabir and @jfsantos I had same issue. But by speficying the scope_name for batch_norm, the issue was fixed. Under a scope with reusable=True, `tf.contrib.layers.batch_norm(x)` will always create new norm_variables and make them reusable which gives you the error. One thing you can do it is to specify the norm_scope name like this `tf.contrib.layers.batch_norm(x, scope=\"name\")`. When you reuse this norm layer, just do `tf.contrib.layers.batch_norm(x, scope=\"name\", reuse=True)` or use `tf.contrib.layers.batch_norm(x, scope=\"name\")` under a reusable scope. Hope this is helpful.\n"}