{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/306069454", "html_url": "https://github.com/tensorflow/tensorflow/issues/9832#issuecomment-306069454", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9832", "id": 306069454, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjA2OTQ1NA==", "user": {"login": "classicCoder16", "id": 9311545, "node_id": "MDQ6VXNlcjkzMTE1NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9311545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/classicCoder16", "html_url": "https://github.com/classicCoder16", "followers_url": "https://api.github.com/users/classicCoder16/followers", "following_url": "https://api.github.com/users/classicCoder16/following{/other_user}", "gists_url": "https://api.github.com/users/classicCoder16/gists{/gist_id}", "starred_url": "https://api.github.com/users/classicCoder16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/classicCoder16/subscriptions", "organizations_url": "https://api.github.com/users/classicCoder16/orgs", "repos_url": "https://api.github.com/users/classicCoder16/repos", "events_url": "https://api.github.com/users/classicCoder16/events{/privacy}", "received_events_url": "https://api.github.com/users/classicCoder16/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-04T21:48:48Z", "updated_at": "2017-06-04T21:48:48Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> Thanks for your help thus far! I've been looking over the implementation of the tests in <code>beam_search_decoder_test.py</code> and they are quite helpful. However, I have a bit of a fundamental question: when using <code>dynamic_decode</code> with the BeamSearchDecoder, it seems that the <code>final_outputs</code> that is returned has an attribute <code>predicted_ids</code> whose shape is <code>(batch_size, T, beam_width)</code>, which are the final sequences found by beam search.</p>\n<p>How then do we go from <code>final_outputs.predicted_ids</code> to the actual most probable sequence for each example in the batch, to therefore obtain something of size <code>(batch_size, T)</code>?</p>\n<p>Thanks in advance!</p>", "body_text": "@ebrevdo Thanks for your help thus far! I've been looking over the implementation of the tests in beam_search_decoder_test.py and they are quite helpful. However, I have a bit of a fundamental question: when using dynamic_decode with the BeamSearchDecoder, it seems that the final_outputs that is returned has an attribute predicted_ids whose shape is (batch_size, T, beam_width), which are the final sequences found by beam search.\nHow then do we go from final_outputs.predicted_ids to the actual most probable sequence for each example in the batch, to therefore obtain something of size (batch_size, T)?\nThanks in advance!", "body": "@ebrevdo Thanks for your help thus far! I've been looking over the implementation of the tests in `beam_search_decoder_test.py` and they are quite helpful. However, I have a bit of a fundamental question: when using `dynamic_decode` with the BeamSearchDecoder, it seems that the `final_outputs` that is returned has an attribute `predicted_ids` whose shape is `(batch_size, T, beam_width)`, which are the final sequences found by beam search.\r\n\r\nHow then do we go from `final_outputs.predicted_ids` to the actual most probable sequence for each example in the batch, to therefore obtain something of size `(batch_size, T)`?\r\n\r\nThanks in advance!"}