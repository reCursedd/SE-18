{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62398617", "pull_request_review_id": null, "id": 62398617, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzk4NjE3", "diff_hunk": "@@ -131,90 +131,102 @@ tf.complex_abs(x) ==> [5.25594902, 6.60492229]\n \n // Declares cwise unary operations signature: 't -> 't\n #define UNARY()                      \\\n-  Input(\"x: T\").Output(\"y: T\").Attr( \\\n-      \"T: {half, float, double, int32, complex64, int64}\")\n+  Input(\"x: T\").Output(\"y: T\")", "path": "tensorflow/core/ops/math_ops.cc", "position": 6, "original_position": 6, "commit_id": "fbd21b2363d8e177805c0e7c5a1f8a9c87ee788f", "original_commit_id": "fbd21b2363d8e177805c0e7c5a1f8a9c87ee788f", "user": {"login": "hunkim", "id": 901975, "node_id": "MDQ6VXNlcjkwMTk3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/901975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hunkim", "html_url": "https://github.com/hunkim", "followers_url": "https://api.github.com/users/hunkim/followers", "following_url": "https://api.github.com/users/hunkim/following{/other_user}", "gists_url": "https://api.github.com/users/hunkim/gists{/gist_id}", "starred_url": "https://api.github.com/users/hunkim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hunkim/subscriptions", "organizations_url": "https://api.github.com/users/hunkim/orgs", "repos_url": "https://api.github.com/users/hunkim/repos", "events_url": "https://api.github.com/users/hunkim/events{/privacy}", "received_events_url": "https://api.github.com/users/hunkim/received_events", "type": "User", "site_admin": false}, "body": "Good idea. However, there is one more kind:\n\n```\nREGISTER_OP(\"Lgamma\")\n    .UNARY()\n    .Attr(\"T: {half, float, double}\")\n    .Doc(R\"doc(\nComputes the log of the absolute value of `Gamma(x)` element-wise.\n)doc\");\n```\n\nShould we have three MACROS in total?\n- UNARY:  {half, float, double, int32, complex64, int64}\n- UNARY_FP:  {half, float, double}\n- UNARY_FPC:  {half, float, double, complex64}\n\nI think it's getting complicated. For somehow, just adding `int32, int64` in the cwise_op\\* might be simpler.\n\n`REGISTER4(UnaryOp, CPU, \"Cos\", functor::cos, float, Eigen::half, double, int32, int64, complex64);\n`\n It won't add much as we discussed, but does it hurt? I guess there is no backwards compatibility issue, and no need to add two more macros. \n", "created_at": "2016-05-06T22:18:22Z", "updated_at": "2016-05-06T22:41:02Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2244#discussion_r62398617", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2244", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62398617"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2244#discussion_r62398617"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2244"}}, "body_html": "<p>Good idea. However, there is one more kind:</p>\n<pre><code>REGISTER_OP(\"Lgamma\")\n    .UNARY()\n    .Attr(\"T: {half, float, double}\")\n    .Doc(R\"doc(\nComputes the log of the absolute value of `Gamma(x)` element-wise.\n)doc\");\n</code></pre>\n<p>Should we have three MACROS in total?</p>\n<ul>\n<li>UNARY:  {half, float, double, int32, complex64, int64}</li>\n<li>UNARY_FP:  {half, float, double}</li>\n<li>UNARY_FPC:  {half, float, double, complex64}</li>\n</ul>\n<p>I think it's getting complicated. For somehow, just adding <code>int32, int64</code> in the cwise_op* might be simpler.</p>\n<p><code>REGISTER4(UnaryOp, CPU, \"Cos\", functor::cos, float, Eigen::half, double, int32, int64, complex64); </code><br>\nIt won't add much as we discussed, but does it hurt? I guess there is no backwards compatibility issue, and no need to add two more macros.</p>", "body_text": "Good idea. However, there is one more kind:\nREGISTER_OP(\"Lgamma\")\n    .UNARY()\n    .Attr(\"T: {half, float, double}\")\n    .Doc(R\"doc(\nComputes the log of the absolute value of `Gamma(x)` element-wise.\n)doc\");\n\nShould we have three MACROS in total?\n\nUNARY:  {half, float, double, int32, complex64, int64}\nUNARY_FP:  {half, float, double}\nUNARY_FPC:  {half, float, double, complex64}\n\nI think it's getting complicated. For somehow, just adding int32, int64 in the cwise_op* might be simpler.\nREGISTER4(UnaryOp, CPU, \"Cos\", functor::cos, float, Eigen::half, double, int32, int64, complex64); \nIt won't add much as we discussed, but does it hurt? I guess there is no backwards compatibility issue, and no need to add two more macros."}