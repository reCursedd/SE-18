{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338593130", "html_url": "https://github.com/tensorflow/tensorflow/issues/9786#issuecomment-338593130", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9786", "id": 338593130, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODU5MzEzMA==", "user": {"login": "Mohit-Ak", "id": 6740115, "node_id": "MDQ6VXNlcjY3NDAxMTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6740115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mohit-Ak", "html_url": "https://github.com/Mohit-Ak", "followers_url": "https://api.github.com/users/Mohit-Ak/followers", "following_url": "https://api.github.com/users/Mohit-Ak/following{/other_user}", "gists_url": "https://api.github.com/users/Mohit-Ak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mohit-Ak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mohit-Ak/subscriptions", "organizations_url": "https://api.github.com/users/Mohit-Ak/orgs", "repos_url": "https://api.github.com/users/Mohit-Ak/repos", "events_url": "https://api.github.com/users/Mohit-Ak/events{/privacy}", "received_events_url": "https://api.github.com/users/Mohit-Ak/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-23T08:59:09Z", "updated_at": "2017-10-23T09:00:23Z", "author_association": "NONE", "body_html": "<p>Here is a python script to identify those fault jpg images in a directory.<br>\n`</p>\n<pre><code>import glob \nimport os \nimport re \nimport logging \nimport traceback    \nfilelist=glob.glob(\"/path/to/*.jpg\")\nfor file_obj in filelist:\n  try:\n\t\n\t\tjpg_str=os.popen(\"file \\\"\"+str(file_obj)+\"\\\"\").read()\n\t\tif (re.search('PNG image data', jpg_str, re.IGNORECASE)) or (re.search('Png patch', jpg_str, re.IGNORECASE)):\n\t\t\tprint(\"Deleting jpg as it contains png encoding - \"+str(file_obj))\n\t\t\tos.system(\"rm \\\"\"+str(file_obj)+\"\\\"\")\n  except Exception as e:\n\tlogging.error(traceback.format_exc())\nprint(\"Cleaning jps done\")`\n</code></pre>", "body_text": "Here is a python script to identify those fault jpg images in a directory.\n`\nimport glob \nimport os \nimport re \nimport logging \nimport traceback    \nfilelist=glob.glob(\"/path/to/*.jpg\")\nfor file_obj in filelist:\n  try:\n\t\n\t\tjpg_str=os.popen(\"file \\\"\"+str(file_obj)+\"\\\"\").read()\n\t\tif (re.search('PNG image data', jpg_str, re.IGNORECASE)) or (re.search('Png patch', jpg_str, re.IGNORECASE)):\n\t\t\tprint(\"Deleting jpg as it contains png encoding - \"+str(file_obj))\n\t\t\tos.system(\"rm \\\"\"+str(file_obj)+\"\\\"\")\n  except Exception as e:\n\tlogging.error(traceback.format_exc())\nprint(\"Cleaning jps done\")`", "body": "Here is a python script to identify those fault jpg images in a directory.\r\n`  \r\n\r\n    \r\n    import glob \r\n    import os \r\n    import re \r\n    import logging \r\n    import traceback    \r\n    filelist=glob.glob(\"/path/to/*.jpg\")\r\n    for file_obj in filelist:\r\n\t  try:\r\n\t\t\r\n\t\t\tjpg_str=os.popen(\"file \\\"\"+str(file_obj)+\"\\\"\").read()\r\n\t\t\tif (re.search('PNG image data', jpg_str, re.IGNORECASE)) or (re.search('Png patch', jpg_str, re.IGNORECASE)):\r\n\t\t\t\tprint(\"Deleting jpg as it contains png encoding - \"+str(file_obj))\r\n\t\t\t\tos.system(\"rm \\\"\"+str(file_obj)+\"\\\"\")\r\n\t  except Exception as e:\r\n\t\tlogging.error(traceback.format_exc())\r\n    print(\"Cleaning jps done\")`"}