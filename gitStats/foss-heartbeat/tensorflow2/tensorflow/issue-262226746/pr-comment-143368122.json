{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/143368122", "pull_request_review_id": 67870542, "id": 143368122, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzM2ODEyMg==", "diff_hunk": "@@ -1046,13 +1054,19 @@ class biases.\n \n     # Construct output logits and labels. The true labels/logits start at col 0.\n     out_logits = array_ops.concat([true_logits, sampled_logits], 1)\n-    # true_logits is a float tensor, ones_like(true_logits) is a float tensor\n-    # of ones. We then divide by num_true to ensure the per-example labels sum\n-    # to 1.0, i.e. form a proper probability distribution.\n-    out_labels = array_ops.concat([\n-        array_ops.ones_like(true_logits) / num_true,\n-        array_ops.zeros_like(sampled_logits)\n-    ], 1)\n+    if labels_as_indices:\n+      # We want each row of labels to be the indices of the targets, which\n+      # start at col 0 and end at col num_true-1.\n+      out_labels = gen_array_ops.tile(", "path": "tensorflow/python/ops/nn_impl.py", "position": null, "original_position": 50, "commit_id": "7ba5810c105640f218993d989142d7e91da6703e", "original_commit_id": "7680d8d00dec8897b64ea864da71537b7be957de", "user": {"login": "TTrapper", "id": 9273021, "node_id": "MDQ6VXNlcjkyNzMwMjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9273021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TTrapper", "html_url": "https://github.com/TTrapper", "followers_url": "https://api.github.com/users/TTrapper/followers", "following_url": "https://api.github.com/users/TTrapper/following{/other_user}", "gists_url": "https://api.github.com/users/TTrapper/gists{/gist_id}", "starred_url": "https://api.github.com/users/TTrapper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TTrapper/subscriptions", "organizations_url": "https://api.github.com/users/TTrapper/orgs", "repos_url": "https://api.github.com/users/TTrapper/repos", "events_url": "https://api.github.com/users/TTrapper/events{/privacy}", "received_events_url": "https://api.github.com/users/TTrapper/received_events", "type": "User", "site_admin": false}, "body": "I am not catching on to the concern if `num_true != 1`. True, it is currently only used by `sparse_sampled_softmax_loss`, but  in that case `num_true=1` is hard coded in the call to this function. If somone calls `sparse_sampled_softmax_loss` with labels that don't match that assumption, the error will be caught earlier on.\r\n\r\nOtherwise the code works as I would expect:\r\n\r\n\r\n\r\n    import tensorflow as tf\r\n\r\n    sess = tf.Session()\r\n\r\n    num_classes = 100\r\n    num_sampled = 2\r\n    batch_size = 2\r\n    in_dim = 2\r\n\r\n    weights = tf.random_uniform([num_classes, in_dim])\r\n    biases = tf.random_uniform([num_classes])\r\n    all_labels = tf.expand_dims(tf.range(batch_size), axis=1)\r\n    inputs = tf.random_uniform([batch_size, in_dim])\r\n\r\n    def get_labels(num_true, labels_as_indices):\r\n        return sess.run(tf.nn.compute_sampled_logits(weights,\r\n                                                 biases,\r\n                                                 all_labels,\r\n                                                 inputs,\r\n                                                 num_sampled,\r\n                                                 num_classes,\r\n                                                 num_true=num_true,\r\n                                                 labels_as_indices=labels_as_indices))[1]\r\n\r\n\r\n    print \"One True label:\"\r\n    print get_labels(num_true=1, labels_as_indices=False)\r\n    print get_labels(num_true=1, labels_as_indices=True)\r\n\r\n    print \"Two True labels:\"\r\n    all_labels = tf.stack([tf.range(batch_size), tf.range(batch_size, batch_size*2)], axis=1)\r\n    print get_labels(num_true=2, labels_as_indices=False)\r\n    print get_labels(num_true=2, labels_as_indices=True)\r\n\r\n    print \"labels shape doesn't match num_true:\"\r\n    print get_labels(num_true=1, labels_as_indices=True)\r\n\r\nResults in :\r\n\r\n    One True label:\r\n    [[ 1.  0.  0.]\r\n     [ 1.  0.  0.]]\r\n    [[0]\r\n     [0]]\r\n\r\n    Two True labels:\r\n    [[ 0.5  0.5  0.   0. ]\r\n     [ 0.5  0.5  0.   0. ]]\r\n    [[0 1]\r\n    [0 1]]\r\n\r\n    labels shape doesn't match num_true:\r\n    ValueError: Dimensions must be equal, but are 10 and 5 for 'compute_sampled_logits_4/sub' (op: 'Sub') with input shapes: [10,1], [5,1].\r\n", "created_at": "2017-10-08T22:12:51Z", "updated_at": "2017-11-14T17:48:45Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13453#discussion_r143368122", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13453", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/143368122"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13453#discussion_r143368122"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13453"}}, "body_html": "<p>I am not catching on to the concern if <code>num_true != 1</code>. True, it is currently only used by <code>sparse_sampled_softmax_loss</code>, but  in that case <code>num_true=1</code> is hard coded in the call to this function. If somone calls <code>sparse_sampled_softmax_loss</code> with labels that don't match that assumption, the error will be caught earlier on.</p>\n<p>Otherwise the code works as I would expect:</p>\n<pre><code>import tensorflow as tf\n\nsess = tf.Session()\n\nnum_classes = 100\nnum_sampled = 2\nbatch_size = 2\nin_dim = 2\n\nweights = tf.random_uniform([num_classes, in_dim])\nbiases = tf.random_uniform([num_classes])\nall_labels = tf.expand_dims(tf.range(batch_size), axis=1)\ninputs = tf.random_uniform([batch_size, in_dim])\n\ndef get_labels(num_true, labels_as_indices):\n    return sess.run(tf.nn.compute_sampled_logits(weights,\n                                             biases,\n                                             all_labels,\n                                             inputs,\n                                             num_sampled,\n                                             num_classes,\n                                             num_true=num_true,\n                                             labels_as_indices=labels_as_indices))[1]\n\n\nprint \"One True label:\"\nprint get_labels(num_true=1, labels_as_indices=False)\nprint get_labels(num_true=1, labels_as_indices=True)\n\nprint \"Two True labels:\"\nall_labels = tf.stack([tf.range(batch_size), tf.range(batch_size, batch_size*2)], axis=1)\nprint get_labels(num_true=2, labels_as_indices=False)\nprint get_labels(num_true=2, labels_as_indices=True)\n\nprint \"labels shape doesn't match num_true:\"\nprint get_labels(num_true=1, labels_as_indices=True)\n</code></pre>\n<p>Results in :</p>\n<pre><code>One True label:\n[[ 1.  0.  0.]\n [ 1.  0.  0.]]\n[[0]\n [0]]\n\nTwo True labels:\n[[ 0.5  0.5  0.   0. ]\n [ 0.5  0.5  0.   0. ]]\n[[0 1]\n[0 1]]\n\nlabels shape doesn't match num_true:\nValueError: Dimensions must be equal, but are 10 and 5 for 'compute_sampled_logits_4/sub' (op: 'Sub') with input shapes: [10,1], [5,1].\n</code></pre>", "body_text": "I am not catching on to the concern if num_true != 1. True, it is currently only used by sparse_sampled_softmax_loss, but  in that case num_true=1 is hard coded in the call to this function. If somone calls sparse_sampled_softmax_loss with labels that don't match that assumption, the error will be caught earlier on.\nOtherwise the code works as I would expect:\nimport tensorflow as tf\n\nsess = tf.Session()\n\nnum_classes = 100\nnum_sampled = 2\nbatch_size = 2\nin_dim = 2\n\nweights = tf.random_uniform([num_classes, in_dim])\nbiases = tf.random_uniform([num_classes])\nall_labels = tf.expand_dims(tf.range(batch_size), axis=1)\ninputs = tf.random_uniform([batch_size, in_dim])\n\ndef get_labels(num_true, labels_as_indices):\n    return sess.run(tf.nn.compute_sampled_logits(weights,\n                                             biases,\n                                             all_labels,\n                                             inputs,\n                                             num_sampled,\n                                             num_classes,\n                                             num_true=num_true,\n                                             labels_as_indices=labels_as_indices))[1]\n\n\nprint \"One True label:\"\nprint get_labels(num_true=1, labels_as_indices=False)\nprint get_labels(num_true=1, labels_as_indices=True)\n\nprint \"Two True labels:\"\nall_labels = tf.stack([tf.range(batch_size), tf.range(batch_size, batch_size*2)], axis=1)\nprint get_labels(num_true=2, labels_as_indices=False)\nprint get_labels(num_true=2, labels_as_indices=True)\n\nprint \"labels shape doesn't match num_true:\"\nprint get_labels(num_true=1, labels_as_indices=True)\n\nResults in :\nOne True label:\n[[ 1.  0.  0.]\n [ 1.  0.  0.]]\n[[0]\n [0]]\n\nTwo True labels:\n[[ 0.5  0.5  0.   0. ]\n [ 0.5  0.5  0.   0. ]]\n[[0 1]\n[0 1]]\n\nlabels shape doesn't match num_true:\nValueError: Dimensions must be equal, but are 10 and 5 for 'compute_sampled_logits_4/sub' (op: 'Sub') with input shapes: [10,1], [5,1].", "in_reply_to_id": 143309467}