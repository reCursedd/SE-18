{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/371551359", "html_url": "https://github.com/tensorflow/tensorflow/issues/6116#issuecomment-371551359", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6116", "id": 371551359, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTU1MTM1OQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-08T16:59:38Z", "updated_at": "2018-03-08T16:59:38Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So I think the original problem with RecvTensor is the <strong>single-threaded</strong> memcpy. You can do memory copy fast if you use multiple threads. For instance putting 100MB object into <a href=\"https://github.com/ray-project/ray\">Ray</a> storage takes 17ms,  that involves a memory copy and translates to about 50 Gbps. I can add a constant to 100MB worth of 1s and put result into new memory in 3.5ms, that's about 250 Gbps and is probably the upper limit of how fast you can copy memory on XeonV4</p>", "body_text": "So I think the original problem with RecvTensor is the single-threaded memcpy. You can do memory copy fast if you use multiple threads. For instance putting 100MB object into Ray storage takes 17ms,  that involves a memory copy and translates to about 50 Gbps. I can add a constant to 100MB worth of 1s and put result into new memory in 3.5ms, that's about 250 Gbps and is probably the upper limit of how fast you can copy memory on XeonV4", "body": "So I think the original problem with RecvTensor is the **single-threaded** memcpy. You can do memory copy fast if you use multiple threads. For instance putting 100MB object into [Ray](https://github.com/ray-project/ray) storage takes 17ms,  that involves a memory copy and translates to about 50 Gbps. I can add a constant to 100MB worth of 1s and put result into new memory in 3.5ms, that's about 250 Gbps and is probably the upper limit of how fast you can copy memory on XeonV4"}