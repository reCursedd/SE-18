{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/242205857", "html_url": "https://github.com/tensorflow/tensorflow/issues/2207#issuecomment-242205857", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2207", "id": 242205857, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjIwNTg1Nw==", "user": {"login": "sergulaydore", "id": 10912900, "node_id": "MDQ6VXNlcjEwOTEyOTAw", "avatar_url": "https://avatars0.githubusercontent.com/u/10912900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergulaydore", "html_url": "https://github.com/sergulaydore", "followers_url": "https://api.github.com/users/sergulaydore/followers", "following_url": "https://api.github.com/users/sergulaydore/following{/other_user}", "gists_url": "https://api.github.com/users/sergulaydore/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergulaydore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergulaydore/subscriptions", "organizations_url": "https://api.github.com/users/sergulaydore/orgs", "repos_url": "https://api.github.com/users/sergulaydore/repos", "events_url": "https://api.github.com/users/sergulaydore/events{/privacy}", "received_events_url": "https://api.github.com/users/sergulaydore/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-24T20:58:09Z", "updated_at": "2016-08-24T23:52:19Z", "author_association": "NONE", "body_html": "<p>I am comparing this with PCA implementation from scikit learn and the results don't seem to be consistent. Here is the results and code for a toy example. Can you please comment why the results might be different?</p>\n<p>`# USING TENSORFLOW<br>\nimport tensorflow as tf<br>\nsess = tf.InteractiveSession()<br>\nx_tf = tf.Variable([[0.0, 1.0, 0.0, 7.0, 0.0], [2.0, 0.0, 3.0, 4.0, 5.0], [4.0, 0.0, 0.0, 6.0, 7.0]])<br>\nx_tf.initializer.run()<br>\ns, u, v = tf.svd(x_tf, full_matrices = False)<br>\nu.eval()</p>\n<h1>output: array([[-0.38829127, -0.91980982, -0.05638742],</h1>\n<h1>[-0.53017205,  0.27301854, -0.80273181],</h1>\n<h1>[-0.75375545,  0.28179872,  0.5936681 ]], dtype=float32)</h1>\n<h1>USING SCIKIT LEARN</h1>\n<p>import numpy as np<br>\nfrom sklearn.decomposition import PCA<br>\npca = PCA(n_components=3, whiten = False)<br>\nx = np.array([[0.0, 1.0, 0.0, 7.0, 0.0],<br>\n[2.0, 0.0, 3.0, 4.0, 5.0],<br>\n[4.0, 0.0, 0.0, 6.0, 7.0]])<br>\npca.fit(x)<br>\nprint pca.components_.transpose()</p>\n<h1>output: [[ 0.44859172  0.28423808 -0.706726  ]</h1>\n<h1>[-0.13301986  0.05621156 -0.34735227]</h1>\n<h1>[ 0.12523156 -0.76362648 -0.44948593]</h1>\n<h1>[-0.21650757  0.56529588 -0.281509  ]</h1>\n<h1>[ 0.84765129  0.11560341  0.31400611]]`</h1>\n<p>EDIT ##########################################################<br>\nAlright, I fixed this by subtracting mean:</p>\n<p><code>x = tf.Variable([[0.0, 1.0, 0.0, 7.0, 0.0], [2.0, 0.0, 3.0, 4.0, 5.0], [4.0, 0.0, 0.0, 6.0, 7.0]]); x_tf = tf.sub(x, tf.reduce_mean(x, 0))</code></p>\n<p>I hope this will be helpful for those who want to apply PCA.</p>", "body_text": "I am comparing this with PCA implementation from scikit learn and the results don't seem to be consistent. Here is the results and code for a toy example. Can you please comment why the results might be different?\n`# USING TENSORFLOW\nimport tensorflow as tf\nsess = tf.InteractiveSession()\nx_tf = tf.Variable([[0.0, 1.0, 0.0, 7.0, 0.0], [2.0, 0.0, 3.0, 4.0, 5.0], [4.0, 0.0, 0.0, 6.0, 7.0]])\nx_tf.initializer.run()\ns, u, v = tf.svd(x_tf, full_matrices = False)\nu.eval()\noutput: array([[-0.38829127, -0.91980982, -0.05638742],\n[-0.53017205,  0.27301854, -0.80273181],\n[-0.75375545,  0.28179872,  0.5936681 ]], dtype=float32)\nUSING SCIKIT LEARN\nimport numpy as np\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=3, whiten = False)\nx = np.array([[0.0, 1.0, 0.0, 7.0, 0.0],\n[2.0, 0.0, 3.0, 4.0, 5.0],\n[4.0, 0.0, 0.0, 6.0, 7.0]])\npca.fit(x)\nprint pca.components_.transpose()\noutput: [[ 0.44859172  0.28423808 -0.706726  ]\n[-0.13301986  0.05621156 -0.34735227]\n[ 0.12523156 -0.76362648 -0.44948593]\n[-0.21650757  0.56529588 -0.281509  ]\n[ 0.84765129  0.11560341  0.31400611]]`\nEDIT ##########################################################\nAlright, I fixed this by subtracting mean:\nx = tf.Variable([[0.0, 1.0, 0.0, 7.0, 0.0], [2.0, 0.0, 3.0, 4.0, 5.0], [4.0, 0.0, 0.0, 6.0, 7.0]]); x_tf = tf.sub(x, tf.reduce_mean(x, 0))\nI hope this will be helpful for those who want to apply PCA.", "body": "I am comparing this with PCA implementation from scikit learn and the results don't seem to be consistent. Here is the results and code for a toy example. Can you please comment why the results might be different?\n\n`# USING TENSORFLOW\nimport tensorflow as tf\nsess = tf.InteractiveSession()\nx_tf = tf.Variable([[0.0, 1.0, 0.0, 7.0, 0.0], [2.0, 0.0, 3.0, 4.0, 5.0], [4.0, 0.0, 0.0, 6.0, 7.0]])\nx_tf.initializer.run()\ns, u, v = tf.svd(x_tf, full_matrices = False)\nu.eval()\n\n# output: array([[-0.38829127, -0.91980982, -0.05638742],\n\n# [-0.53017205,  0.27301854, -0.80273181],\n\n# [-0.75375545,  0.28179872,  0.5936681 ]], dtype=float32)\n\n# USING SCIKIT LEARN\n\nimport numpy as np\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=3, whiten = False)\nx = np.array([[0.0, 1.0, 0.0, 7.0, 0.0], \n              [2.0, 0.0, 3.0, 4.0, 5.0],\n              [4.0, 0.0, 0.0, 6.0, 7.0]])\npca.fit(x)\nprint pca.components_.transpose()\n\n# output: [[ 0.44859172  0.28423808 -0.706726  ]\n\n# [-0.13301986  0.05621156 -0.34735227]\n\n# [ 0.12523156 -0.76362648 -0.44948593]\n\n# [-0.21650757  0.56529588 -0.281509  ]\n\n# [ 0.84765129  0.11560341  0.31400611]]`\n\nEDIT ##########################################################\nAlright, I fixed this by subtracting mean:\n\n`x = tf.Variable([[0.0, 1.0, 0.0, 7.0, 0.0], [2.0, 0.0, 3.0, 4.0, 5.0], [4.0, 0.0, 0.0, 6.0, 7.0]]);\n x_tf = tf.sub(x, tf.reduce_mean(x, 0))`\n\nI hope this will be helpful for those who want to apply PCA.\n"}