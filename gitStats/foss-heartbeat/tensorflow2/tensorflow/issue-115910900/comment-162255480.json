{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/162255480", "html_url": "https://github.com/tensorflow/tensorflow/issues/5#issuecomment-162255480", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5", "id": 162255480, "node_id": "MDEyOklzc3VlQ29tbWVudDE2MjI1NTQ4MA==", "user": {"login": "kylevedder", "id": 6148088, "node_id": "MDQ6VXNlcjYxNDgwODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6148088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylevedder", "html_url": "https://github.com/kylevedder", "followers_url": "https://api.github.com/users/kylevedder/followers", "following_url": "https://api.github.com/users/kylevedder/following{/other_user}", "gists_url": "https://api.github.com/users/kylevedder/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylevedder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylevedder/subscriptions", "organizations_url": "https://api.github.com/users/kylevedder/orgs", "repos_url": "https://api.github.com/users/kylevedder/repos", "events_url": "https://api.github.com/users/kylevedder/events{/privacy}", "received_events_url": "https://api.github.com/users/kylevedder/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-05T23:02:02Z", "updated_at": "2015-12-05T23:03:27Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3328023\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/saudet\">@saudet</a> Nice work on the JavaCPP presets!</p>\n<p>An update on my work: I have done some more work on the SWIG wrapper, and you can see the work I've done <a href=\"https://github.com/kylevedder/tensorflow/tree/master/tensorflow/core/java/wrapper\">here</a>. However, I am at a bit of a cross roads and I am not sure of the best way to proceed.</p>\n<p>I'm rather new to SWIG, given this is my first major project using it, so I read the SWIG documentation on <a href=\"http://www.swig.org/Doc3.0/SWIG.html\" rel=\"nofollow\">SWIG Basics</a> and on <a href=\"http://www.swig.org/Doc3.0/Java.html\" rel=\"nofollow\">SWIG and Java</a> which run through how SWIG works and how to wrap C/C++ with SWIG Java wrappers.</p>\n<p>The documentation explains how SWIG converts pointers in C/C++ into opaque Java objects, which is why you get classes like <code>SWIGTYPE_p_void</code> generated by SWIG. The issue is there is not an easy way to convert POJOs into these SWIG classes.</p>\n<p>So, for example, in <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/public/tensor_c_api.h\"><code>tensor_c_api.h</code></a>, the C method <code>TF_CreateTensor()</code> takes a <code>void*</code> which points to the input data and a <code>size</code> parameter to specify the size of the input data in bytes. This is a perfectly reasonable design pattern for C/C++, but completely nonsensical in Java. The SWIG generated Java method <code>TF_CreateTensor()</code> takes a <code>SWIGTYPE_p_void</code> object as its data, along with <code>size</code>, but there is no way to convert a POJO such as a <code>String</code> into a <code>SWIGTYPE_p_void</code> without handwriting a lot of code.</p>\n<p>And this is the crossroads at which I currently lie: I either write a ton of C/C++ conversion methods which take any type defined in <code>TF_DataType</code> and convert to a <code>void*</code>, or write a bunch of SWIG typemaps to do the same thing. The SWIG documentation does not seem to favor either solution, as they do both seemingly interchangeably.</p>\n<p>So, the question is, C/C++ conversion functions or SWIG typemaps?</p>", "body_text": "@saudet Nice work on the JavaCPP presets!\nAn update on my work: I have done some more work on the SWIG wrapper, and you can see the work I've done here. However, I am at a bit of a cross roads and I am not sure of the best way to proceed.\nI'm rather new to SWIG, given this is my first major project using it, so I read the SWIG documentation on SWIG Basics and on SWIG and Java which run through how SWIG works and how to wrap C/C++ with SWIG Java wrappers.\nThe documentation explains how SWIG converts pointers in C/C++ into opaque Java objects, which is why you get classes like SWIGTYPE_p_void generated by SWIG. The issue is there is not an easy way to convert POJOs into these SWIG classes.\nSo, for example, in tensor_c_api.h, the C method TF_CreateTensor() takes a void* which points to the input data and a size parameter to specify the size of the input data in bytes. This is a perfectly reasonable design pattern for C/C++, but completely nonsensical in Java. The SWIG generated Java method TF_CreateTensor() takes a SWIGTYPE_p_void object as its data, along with size, but there is no way to convert a POJO such as a String into a SWIGTYPE_p_void without handwriting a lot of code.\nAnd this is the crossroads at which I currently lie: I either write a ton of C/C++ conversion methods which take any type defined in TF_DataType and convert to a void*, or write a bunch of SWIG typemaps to do the same thing. The SWIG documentation does not seem to favor either solution, as they do both seemingly interchangeably.\nSo, the question is, C/C++ conversion functions or SWIG typemaps?", "body": "@saudet Nice work on the JavaCPP presets!\n\nAn update on my work: I have done some more work on the SWIG wrapper, and you can see the work I've done [here](https://github.com/kylevedder/tensorflow/tree/master/tensorflow/core/java/wrapper). However, I am at a bit of a cross roads and I am not sure of the best way to proceed.\n\nI'm rather new to SWIG, given this is my first major project using it, so I read the SWIG documentation on [SWIG Basics](http://www.swig.org/Doc3.0/SWIG.html) and on [SWIG and Java](http://www.swig.org/Doc3.0/Java.html) which run through how SWIG works and how to wrap C/C++ with SWIG Java wrappers.\n\nThe documentation explains how SWIG converts pointers in C/C++ into opaque Java objects, which is why you get classes like `SWIGTYPE_p_void` generated by SWIG. The issue is there is not an easy way to convert POJOs into these SWIG classes. \n\nSo, for example, in [`tensor_c_api.h`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/public/tensor_c_api.h), the C method `TF_CreateTensor()` takes a `void*` which points to the input data and a `size` parameter to specify the size of the input data in bytes. This is a perfectly reasonable design pattern for C/C++, but completely nonsensical in Java. The SWIG generated Java method `TF_CreateTensor()` takes a `SWIGTYPE_p_void` object as its data, along with `size`, but there is no way to convert a POJO such as a `String` into a `SWIGTYPE_p_void` without handwriting a lot of code.\n\nAnd this is the crossroads at which I currently lie: I either write a ton of C/C++ conversion methods which take any type defined in `TF_DataType` and convert to a `void*`, or write a bunch of SWIG typemaps to do the same thing. The SWIG documentation does not seem to favor either solution, as they do both seemingly interchangeably. \n\nSo, the question is, C/C++ conversion functions or SWIG typemaps?\n"}