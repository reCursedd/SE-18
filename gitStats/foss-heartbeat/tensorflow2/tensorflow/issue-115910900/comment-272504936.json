{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/272504936", "html_url": "https://github.com/tensorflow/tensorflow/issues/5#issuecomment-272504936", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5", "id": 272504936, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjUwNDkzNg==", "user": {"login": "hollinwilkins", "id": 15824835, "node_id": "MDQ6VXNlcjE1ODI0ODM1", "avatar_url": "https://avatars0.githubusercontent.com/u/15824835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hollinwilkins", "html_url": "https://github.com/hollinwilkins", "followers_url": "https://api.github.com/users/hollinwilkins/followers", "following_url": "https://api.github.com/users/hollinwilkins/following{/other_user}", "gists_url": "https://api.github.com/users/hollinwilkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/hollinwilkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hollinwilkins/subscriptions", "organizations_url": "https://api.github.com/users/hollinwilkins/orgs", "repos_url": "https://api.github.com/users/hollinwilkins/repos", "events_url": "https://api.github.com/users/hollinwilkins/events{/privacy}", "received_events_url": "https://api.github.com/users/hollinwilkins/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-13T18:03:23Z", "updated_at": "2017-01-13T18:06:13Z", "author_association": "NONE", "body_html": "<p>Hey,</p>\n<p>I just got these Swig bindings working yesterday. I have a request for an API change. Currently in order to generate Tensors reflection is required and the format of the arrays are a bit unweildy, as they require the use of n-dimensional native Java arrays. Can we keep this interface, but also add some methods for creating tensors that require 1-dimensional arrays and specifying the shape using another array of long? I imagine it could look something like this:</p>\n<pre><code>double[] matrix = {1.414, 2.718, 3.1415, 3.4, 56.7, 89.0};\nlong[] shape = {2, 3};\n\n// add a method for each primitive type\norg.tensorflow.Tensor tensor = org.tensorflow.Tensor.createDouble(matrix, shape);\n</code></pre>\n<p>This would also lead to the possibility of create int8, int16, uint8, uint16, uint32 tensors as well, which will help with compatibility.</p>\n<p>Should I make this an issue? Or is it ok here?</p>\n<p>Also, more than happy to take a stab at building these methods out.</p>", "body_text": "Hey,\nI just got these Swig bindings working yesterday. I have a request for an API change. Currently in order to generate Tensors reflection is required and the format of the arrays are a bit unweildy, as they require the use of n-dimensional native Java arrays. Can we keep this interface, but also add some methods for creating tensors that require 1-dimensional arrays and specifying the shape using another array of long? I imagine it could look something like this:\ndouble[] matrix = {1.414, 2.718, 3.1415, 3.4, 56.7, 89.0};\nlong[] shape = {2, 3};\n\n// add a method for each primitive type\norg.tensorflow.Tensor tensor = org.tensorflow.Tensor.createDouble(matrix, shape);\n\nThis would also lead to the possibility of create int8, int16, uint8, uint16, uint32 tensors as well, which will help with compatibility.\nShould I make this an issue? Or is it ok here?\nAlso, more than happy to take a stab at building these methods out.", "body": "Hey,\r\n\r\nI just got these Swig bindings working yesterday. I have a request for an API change. Currently in order to generate Tensors reflection is required and the format of the arrays are a bit unweildy, as they require the use of n-dimensional native Java arrays. Can we keep this interface, but also add some methods for creating tensors that require 1-dimensional arrays and specifying the shape using another array of long? I imagine it could look something like this:\r\n\r\n```\r\ndouble[] matrix = {1.414, 2.718, 3.1415, 3.4, 56.7, 89.0};\r\nlong[] shape = {2, 3};\r\n\r\n// add a method for each primitive type\r\norg.tensorflow.Tensor tensor = org.tensorflow.Tensor.createDouble(matrix, shape);\r\n```\r\n\r\nThis would also lead to the possibility of create int8, int16, uint8, uint16, uint32 tensors as well, which will help with compatibility.\r\n\r\nShould I make this an issue? Or is it ok here?\r\n\r\nAlso, more than happy to take a stab at building these methods out."}