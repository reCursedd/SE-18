{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/159359197", "html_url": "https://github.com/tensorflow/tensorflow/issues/5#issuecomment-159359197", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5", "id": 159359197, "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTM1OTE5Nw==", "user": {"login": "davidzchen", "id": 5283042, "node_id": "MDQ6VXNlcjUyODMwNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5283042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidzchen", "html_url": "https://github.com/davidzchen", "followers_url": "https://api.github.com/users/davidzchen/followers", "following_url": "https://api.github.com/users/davidzchen/following{/other_user}", "gists_url": "https://api.github.com/users/davidzchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidzchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidzchen/subscriptions", "organizations_url": "https://api.github.com/users/davidzchen/orgs", "repos_url": "https://api.github.com/users/davidzchen/repos", "events_url": "https://api.github.com/users/davidzchen/events{/privacy}", "received_events_url": "https://api.github.com/users/davidzchen/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-24T18:09:44Z", "updated_at": "2015-11-24T18:09:44Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6148088\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kylevedder\">@kylevedder</a> You won't be able to add the JNI headers that way since they're outside the workspace. However, Bazel includes the local JDK as a <a href=\"http://bazel.io/docs/be/workspace.html#local_repository\" rel=\"nofollow\">local repository</a> and provides a number of built-in targets (see <a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE\"><code>jdk.WORKSPACE</code></a> and corresponding <a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/tools/jdk.BUILD\"><code>jdk.BUILD</code></a>) you can use to depend on local JDK. These are included in each Bazel workspace by default.</p>\n<p>Bazel itself uses JNI and interfaces with the local JDK this way (see <a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/native/BUILD\"><code>src/main/native/BUILD</code></a>). In this BUILD file, there are two <code>genrule</code>s to copy the JNI headers and a <code>cc_library</code> target for the library it is building that uses JNI that depends on the headers, and a <code>includes = [\".\"]</code> so that the C++ code can include the JNI header with <code>#include &lt;jni.h&gt;</code>. This is currently not documented because we are working on a number of improvements to the external repository mechanism, and the <code>@local-jdk</code> name might change, but we can use it for TensorFlow and any other Bazel project that uses JNI in the meantime.</p>\n<p>Here is a patch for your BUILD file that adds the <code>genrule</code> targets for copying the JNI headers you need and some changes to the <code>cc_library</code> target to set up the right dependencies, namely:</p>\n<ol>\n<li>Add <code>jni.h</code> and <code>jni_md.h</code>, which are copied to the current package by the <code>genrule</code>s to <code>srcs</code></li>\n<li>Add a dependency on <code>//tensorflow/core</code> so that you can include the headers under <code>tensorflow/core/public</code>. Note that, headers or any source file in a separate directory are in a separate package from Bazel's point of view, and you will need to add a dependency on the build target that contains those files.</li>\n</ol>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git a/tensorflow/core/java/wrapper/BUILD b/tensorflow/core/java/wrapper/BUILD</span>\nindex 72b4076..04a3394 100644\n<span class=\"pl-md\">--- a/tensorflow/core/java/wrapper/BUILD</span>\n<span class=\"pl-mi1\">+++ b/tensorflow/core/java/wrapper/BUILD</span>\n<span class=\"pl-mdr\">@@ -7,10 +7,30 @@</span> exports_files([\"LICENSE\"])\n load(\"/tensorflow/tensorflow\", \"tf_copts\")\n load(\"/tensorflow/tensorflow\", \"tf_gen_op_wrappers_cc\")\n\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>genrule(</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    name = \"copy_link_jni_md_header\",</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    srcs = [\"//external:jni_md_header-linux\"],</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    outs = [\"jni_md.h\"],</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    cmd = \"cp -f $&lt; $@\",</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>genrule(</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    name = \"copy_link_jni_header\",</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    srcs = [\"//external:jni_header\"],</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    outs = [\"jni.h\"],</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    cmd = \"cp -f $&lt; $@\",</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n cc_library(\n     name = \"java_wrapper\",\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    srcs = glob([\"*.cc\",\"*.cxx\",\"*.h\"]),</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    copts = [\"-I$$JAVA_HOME/include/\", \"-I$$JAVA_HOME/include/linux/\"],</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    srcs = glob([\"*.cc\", \"*.cxx\", \"*.h\"]) + [</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        \":jni.h\",</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        \":jni_md.h\",</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    ],</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    includes = [\".\"],</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    deps = [</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        \"//tensorflow/core\",</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    ],</span>\n     visibility = [\"//visibility:public\"],\n )</pre></div>\n<p>Note that in general, compile actions in Bazel are run from the root of the source tree, and you would need to change the includes in your SWIG file as follows and then re-generate the C++ files so that they will have the correct includes as well:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git a/tensorflow/core/java/wrapper/tensor_c_api.i b/tensorflow/core/java/wrapper/tensor_c_api.i</span>\nindex d08b571..9ab1fa1 100644\n<span class=\"pl-md\">--- a/tensorflow/core/java/wrapper/tensor_c_api.i</span>\n<span class=\"pl-mi1\">+++ b/tensorflow/core/java/wrapper/tensor_c_api.i</span>\n<span class=\"pl-mdr\">@@ -1,8 +1,8 @@</span>\n %module tensor_c_api_module\n %{\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>#include \"../../public/tensor_c_api.h\"</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>#include \"tensorflow/core/public/tensor_c_api.h\"</span>\n %}\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>%include \"../../public/tensor_c_api.h\"</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>%include \"tensorflow/core/public/tensor_c_api.h\"</span>\n %include \"stddef.h\"</pre></div>\n<p>Once this works, you would have the JNI build set up for Linux since the <code>copy_link_jni_md_header</code> <code>genrule</code> only copies the Linux-specific header. To have it copy the correct platform-specific JNI header, we would need to do the following:</p>\n<ol>\n<li>Set up <code>cpu</code> <code>config_setting</code>s for other platforms. Currently, tensorflow has a <code>config_setting</code> for <code>--cpu=darwin</code> in <a href=\"https://github.com/tensorflow/tensorflow/blob/04f1932f053dd7865b191719b33860270461943a/tensorflow/python/BUILD#L17\"><code>tensorflow/python/BUILD</code></a>. We should probably move that a more appropriate package such as <code>//tensorflow/core</code>. Basically, we would want the same set of <code>config_setting</code>s as Bazel (see <a href=\"https://github.com/bazelbuild/bazel/blob/master/src/BUILD#L135\"><code>src/BUILD</code></a>).</li>\n<li>Have <code>copy_link_jni_md_header</code> copy the right JNI header based on which config setting is set using <code>select()</code>, similar to <a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/native/BUILD#L1\">the one in Bazel</a>. Our <code>genrule</code> would look something like the following:</li>\n</ol>\n<div class=\"highlight highlight-source-python\"><pre>genrule(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>copy_link_jni_md_header<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> select({\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//tensorflow/core:darwin<span class=\"pl-pds\">\"</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//external:jni_md_header-darwin<span class=\"pl-pds\">\"</span></span>],\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//tensorflow/core:darwin_x86_64<span class=\"pl-pds\">\"</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//external:jni_md_header-darwin<span class=\"pl-pds\">\"</span></span>],\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//tensorflow/core:freebsd<span class=\"pl-pds\">\"</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//external:jni_md_header-freebsd<span class=\"pl-pds\">\"</span></span>],\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//conditions:default<span class=\"pl-pds\">\"</span></span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//external:jni_md_header-linux<span class=\"pl-pds\">\"</span></span>],\n    }),\n    <span class=\"pl-v\">outs</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jni_md.h<span class=\"pl-pds\">\"</span></span>],\n    <span class=\"pl-v\">cmd</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cp -f $&lt; $@<span class=\"pl-pds\">\"</span></span>,\n)</pre></div>\n<p>I'd be happy to help you with this if you run into any issues. Let me know if this works for you.</p>", "body_text": "@kylevedder You won't be able to add the JNI headers that way since they're outside the workspace. However, Bazel includes the local JDK as a local repository and provides a number of built-in targets (see jdk.WORKSPACE and corresponding jdk.BUILD) you can use to depend on local JDK. These are included in each Bazel workspace by default.\nBazel itself uses JNI and interfaces with the local JDK this way (see src/main/native/BUILD). In this BUILD file, there are two genrules to copy the JNI headers and a cc_library target for the library it is building that uses JNI that depends on the headers, and a includes = [\".\"] so that the C++ code can include the JNI header with #include <jni.h>. This is currently not documented because we are working on a number of improvements to the external repository mechanism, and the @local-jdk name might change, but we can use it for TensorFlow and any other Bazel project that uses JNI in the meantime.\nHere is a patch for your BUILD file that adds the genrule targets for copying the JNI headers you need and some changes to the cc_library target to set up the right dependencies, namely:\n\nAdd jni.h and jni_md.h, which are copied to the current package by the genrules to srcs\nAdd a dependency on //tensorflow/core so that you can include the headers under tensorflow/core/public. Note that, headers or any source file in a separate directory are in a separate package from Bazel's point of view, and you will need to add a dependency on the build target that contains those files.\n\ndiff --git a/tensorflow/core/java/wrapper/BUILD b/tensorflow/core/java/wrapper/BUILD\nindex 72b4076..04a3394 100644\n--- a/tensorflow/core/java/wrapper/BUILD\n+++ b/tensorflow/core/java/wrapper/BUILD\n@@ -7,10 +7,30 @@ exports_files([\"LICENSE\"])\n load(\"/tensorflow/tensorflow\", \"tf_copts\")\n load(\"/tensorflow/tensorflow\", \"tf_gen_op_wrappers_cc\")\n\n+genrule(\n+    name = \"copy_link_jni_md_header\",\n+    srcs = [\"//external:jni_md_header-linux\"],\n+    outs = [\"jni_md.h\"],\n+    cmd = \"cp -f $< $@\",\n+)\n+\n+genrule(\n+    name = \"copy_link_jni_header\",\n+    srcs = [\"//external:jni_header\"],\n+    outs = [\"jni.h\"],\n+    cmd = \"cp -f $< $@\",\n+)\n+\n cc_library(\n     name = \"java_wrapper\",\n-    srcs = glob([\"*.cc\",\"*.cxx\",\"*.h\"]),\n-    copts = [\"-I$$JAVA_HOME/include/\", \"-I$$JAVA_HOME/include/linux/\"],\n+    srcs = glob([\"*.cc\", \"*.cxx\", \"*.h\"]) + [\n+        \":jni.h\",\n+        \":jni_md.h\",\n+    ],\n+    includes = [\".\"],\n+    deps = [\n+        \"//tensorflow/core\",\n+    ],\n     visibility = [\"//visibility:public\"],\n )\nNote that in general, compile actions in Bazel are run from the root of the source tree, and you would need to change the includes in your SWIG file as follows and then re-generate the C++ files so that they will have the correct includes as well:\ndiff --git a/tensorflow/core/java/wrapper/tensor_c_api.i b/tensorflow/core/java/wrapper/tensor_c_api.i\nindex d08b571..9ab1fa1 100644\n--- a/tensorflow/core/java/wrapper/tensor_c_api.i\n+++ b/tensorflow/core/java/wrapper/tensor_c_api.i\n@@ -1,8 +1,8 @@\n %module tensor_c_api_module\n %{\n-#include \"../../public/tensor_c_api.h\"\n+#include \"tensorflow/core/public/tensor_c_api.h\"\n %}\n-%include \"../../public/tensor_c_api.h\"\n+%include \"tensorflow/core/public/tensor_c_api.h\"\n %include \"stddef.h\"\nOnce this works, you would have the JNI build set up for Linux since the copy_link_jni_md_header genrule only copies the Linux-specific header. To have it copy the correct platform-specific JNI header, we would need to do the following:\n\nSet up cpu config_settings for other platforms. Currently, tensorflow has a config_setting for --cpu=darwin in tensorflow/python/BUILD. We should probably move that a more appropriate package such as //tensorflow/core. Basically, we would want the same set of config_settings as Bazel (see src/BUILD).\nHave copy_link_jni_md_header copy the right JNI header based on which config setting is set using select(), similar to the one in Bazel. Our genrule would look something like the following:\n\ngenrule(\n    name = \"copy_link_jni_md_header\",\n    srcs = select({\n        \"//tensorflow/core:darwin\": [\"//external:jni_md_header-darwin\"],\n        \"//tensorflow/core:darwin_x86_64\": [\"//external:jni_md_header-darwin\"],\n        \"//tensorflow/core:freebsd\": [\"//external:jni_md_header-freebsd\"],\n        \"//conditions:default\": [\"//external:jni_md_header-linux\"],\n    }),\n    outs = [\"jni_md.h\"],\n    cmd = \"cp -f $< $@\",\n)\nI'd be happy to help you with this if you run into any issues. Let me know if this works for you.", "body": "@kylevedder You won't be able to add the JNI headers that way since they're outside the workspace. However, Bazel includes the local JDK as a [local repository](http://bazel.io/docs/be/workspace.html#local_repository) and provides a number of built-in targets (see [`jdk.WORKSPACE`](https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/bazel/rules/java/jdk.WORKSPACE) and corresponding [`jdk.BUILD`](https://github.com/bazelbuild/bazel/blob/master/src/main/tools/jdk.BUILD)) you can use to depend on local JDK. These are included in each Bazel workspace by default.\n\nBazel itself uses JNI and interfaces with the local JDK this way (see [`src/main/native/BUILD`](https://github.com/bazelbuild/bazel/blob/master/src/main/native/BUILD)). In this BUILD file, there are two `genrule`s to copy the JNI headers and a `cc_library` target for the library it is building that uses JNI that depends on the headers, and a `includes = [\".\"]` so that the C++ code can include the JNI header with `#include <jni.h>`. This is currently not documented because we are working on a number of improvements to the external repository mechanism, and the `@local-jdk` name might change, but we can use it for TensorFlow and any other Bazel project that uses JNI in the meantime.\n\nHere is a patch for your BUILD file that adds the `genrule` targets for copying the JNI headers you need and some changes to the `cc_library` target to set up the right dependencies, namely:\n1. Add `jni.h` and `jni_md.h`, which are copied to the current package by the `genrule`s to `srcs`\n2. Add a dependency on `//tensorflow/core` so that you can include the headers under `tensorflow/core/public`. Note that, headers or any source file in a separate directory are in a separate package from Bazel's point of view, and you will need to add a dependency on the build target that contains those files.\n\n``` diff\ndiff --git a/tensorflow/core/java/wrapper/BUILD b/tensorflow/core/java/wrapper/BUILD\nindex 72b4076..04a3394 100644\n--- a/tensorflow/core/java/wrapper/BUILD\n+++ b/tensorflow/core/java/wrapper/BUILD\n@@ -7,10 +7,30 @@ exports_files([\"LICENSE\"])\n load(\"/tensorflow/tensorflow\", \"tf_copts\")\n load(\"/tensorflow/tensorflow\", \"tf_gen_op_wrappers_cc\")\n\n+genrule(\n+    name = \"copy_link_jni_md_header\",\n+    srcs = [\"//external:jni_md_header-linux\"],\n+    outs = [\"jni_md.h\"],\n+    cmd = \"cp -f $< $@\",\n+)\n+\n+genrule(\n+    name = \"copy_link_jni_header\",\n+    srcs = [\"//external:jni_header\"],\n+    outs = [\"jni.h\"],\n+    cmd = \"cp -f $< $@\",\n+)\n+\n cc_library(\n     name = \"java_wrapper\",\n-    srcs = glob([\"*.cc\",\"*.cxx\",\"*.h\"]),\n-    copts = [\"-I$$JAVA_HOME/include/\", \"-I$$JAVA_HOME/include/linux/\"],\n+    srcs = glob([\"*.cc\", \"*.cxx\", \"*.h\"]) + [\n+        \":jni.h\",\n+        \":jni_md.h\",\n+    ],\n+    includes = [\".\"],\n+    deps = [\n+        \"//tensorflow/core\",\n+    ],\n     visibility = [\"//visibility:public\"],\n )\n```\n\nNote that in general, compile actions in Bazel are run from the root of the source tree, and you would need to change the includes in your SWIG file as follows and then re-generate the C++ files so that they will have the correct includes as well:\n\n``` diff\ndiff --git a/tensorflow/core/java/wrapper/tensor_c_api.i b/tensorflow/core/java/wrapper/tensor_c_api.i\nindex d08b571..9ab1fa1 100644\n--- a/tensorflow/core/java/wrapper/tensor_c_api.i\n+++ b/tensorflow/core/java/wrapper/tensor_c_api.i\n@@ -1,8 +1,8 @@\n %module tensor_c_api_module\n %{\n-#include \"../../public/tensor_c_api.h\"\n+#include \"tensorflow/core/public/tensor_c_api.h\"\n %}\n-%include \"../../public/tensor_c_api.h\"\n+%include \"tensorflow/core/public/tensor_c_api.h\"\n %include \"stddef.h\"\n```\n\nOnce this works, you would have the JNI build set up for Linux since the `copy_link_jni_md_header` `genrule` only copies the Linux-specific header. To have it copy the correct platform-specific JNI header, we would need to do the following:\n1. Set up `cpu` `config_setting`s for other platforms. Currently, tensorflow has a `config_setting` for `--cpu=darwin` in [`tensorflow/python/BUILD`](https://github.com/tensorflow/tensorflow/blob/04f1932f053dd7865b191719b33860270461943a/tensorflow/python/BUILD#L17). We should probably move that a more appropriate package such as `//tensorflow/core`. Basically, we would want the same set of `config_setting`s as Bazel (see [`src/BUILD`](https://github.com/bazelbuild/bazel/blob/master/src/BUILD#L135)).\n2. Have `copy_link_jni_md_header` copy the right JNI header based on which config setting is set using `select()`, similar to [the one in Bazel](https://github.com/bazelbuild/bazel/blob/master/src/main/native/BUILD#L1). Our `genrule` would look something like the following:\n\n``` python\ngenrule(\n    name = \"copy_link_jni_md_header\",\n    srcs = select({\n        \"//tensorflow/core:darwin\": [\"//external:jni_md_header-darwin\"],\n        \"//tensorflow/core:darwin_x86_64\": [\"//external:jni_md_header-darwin\"],\n        \"//tensorflow/core:freebsd\": [\"//external:jni_md_header-freebsd\"],\n        \"//conditions:default\": [\"//external:jni_md_header-linux\"],\n    }),\n    outs = [\"jni_md.h\"],\n    cmd = \"cp -f $< $@\",\n)\n```\n\nI'd be happy to help you with this if you run into any issues. Let me know if this works for you.\n"}