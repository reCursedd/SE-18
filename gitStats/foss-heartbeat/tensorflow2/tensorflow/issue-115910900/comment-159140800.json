{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/159140800", "html_url": "https://github.com/tensorflow/tensorflow/issues/5#issuecomment-159140800", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5", "id": 159140800, "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTE0MDgwMA==", "user": {"login": "kylevedder", "id": 6148088, "node_id": "MDQ6VXNlcjYxNDgwODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6148088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylevedder", "html_url": "https://github.com/kylevedder", "followers_url": "https://api.github.com/users/kylevedder/followers", "following_url": "https://api.github.com/users/kylevedder/following{/other_user}", "gists_url": "https://api.github.com/users/kylevedder/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylevedder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylevedder/subscriptions", "organizations_url": "https://api.github.com/users/kylevedder/orgs", "repos_url": "https://api.github.com/users/kylevedder/repos", "events_url": "https://api.github.com/users/kylevedder/events{/privacy}", "received_events_url": "https://api.github.com/users/kylevedder/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-24T03:31:37Z", "updated_at": "2015-11-24T03:32:59Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3328023\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/saudet\">@saudet</a> Thanks for the info on using Bazel. I too am new to it and did not realize it was capable of generating a <code>.so</code> in that manner.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5283042\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/davidzchen\">@davidzchen</a> Thanks for the addendum about using a <code>cc_library</code>, I modified the example from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3328023\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/saudet\">@saudet</a> accordingly when I implemented <a href=\"https://github.com/kylevedder/tensorflow/blob/master/tensorflow/core/java/wrapper/BUILD\">my Bazil wrapper build</a>. Also, thank you for the input regarding the directory structure; I have updated my folder structure to align with your suggestions.</p>\n<p>Additionally, I was not very clear in my previous comment about generating <code>.so</code> files; while my objective is to generate a <code>.so</code> file from the original source, I also want to include <a href=\"https://github.com/kylevedder/tensorflow/blob/master/tensorflow/core/java/wrapper/tensor_c_api_wrap.cxx\">the <code>.cxx</code> file that SWIG generates</a>  inside of the <code>.so</code> in order to facilitate the JNI calls. Currently, I'm running into an issue in which I cannot get the SWIG generated <code>.cxx</code> file to compile; it's trying to reference <code>JNI.h</code>, a header located in <code>$JAVA_HOME/include/</code>, but I cannot seem to get Bazel to understand the external include path.</p>", "body_text": "@saudet Thanks for the info on using Bazel. I too am new to it and did not realize it was capable of generating a .so in that manner.\n@davidzchen Thanks for the addendum about using a cc_library, I modified the example from @saudet accordingly when I implemented my Bazil wrapper build. Also, thank you for the input regarding the directory structure; I have updated my folder structure to align with your suggestions.\nAdditionally, I was not very clear in my previous comment about generating .so files; while my objective is to generate a .so file from the original source, I also want to include the .cxx file that SWIG generates  inside of the .so in order to facilitate the JNI calls. Currently, I'm running into an issue in which I cannot get the SWIG generated .cxx file to compile; it's trying to reference JNI.h, a header located in $JAVA_HOME/include/, but I cannot seem to get Bazel to understand the external include path.", "body": "@saudet Thanks for the info on using Bazel. I too am new to it and did not realize it was capable of generating a `.so` in that manner.\n\n@davidzchen Thanks for the addendum about using a `cc_library`, I modified the example from @saudet accordingly when I implemented [my Bazil wrapper build](https://github.com/kylevedder/tensorflow/blob/master/tensorflow/core/java/wrapper/BUILD). Also, thank you for the input regarding the directory structure; I have updated my folder structure to align with your suggestions.\n\nAdditionally, I was not very clear in my previous comment about generating `.so` files; while my objective is to generate a `.so` file from the original source, I also want to include [the `.cxx` file that SWIG generates](https://github.com/kylevedder/tensorflow/blob/master/tensorflow/core/java/wrapper/tensor_c_api_wrap.cxx)  inside of the `.so` in order to facilitate the JNI calls. Currently, I'm running into an issue in which I cannot get the SWIG generated `.cxx` file to compile; it's trying to reference `JNI.h`, a header located in `$JAVA_HOME/include/`, but I cannot seem to get Bazel to understand the external include path.\n"}