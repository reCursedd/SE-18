{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/272569325", "html_url": "https://github.com/tensorflow/tensorflow/issues/5#issuecomment-272569325", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5", "id": 272569325, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjU2OTMyNQ==", "user": {"login": "jbolla", "id": 2093086, "node_id": "MDQ6VXNlcjIwOTMwODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2093086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbolla", "html_url": "https://github.com/jbolla", "followers_url": "https://api.github.com/users/jbolla/followers", "following_url": "https://api.github.com/users/jbolla/following{/other_user}", "gists_url": "https://api.github.com/users/jbolla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbolla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbolla/subscriptions", "organizations_url": "https://api.github.com/users/jbolla/orgs", "repos_url": "https://api.github.com/users/jbolla/repos", "events_url": "https://api.github.com/users/jbolla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbolla/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-13T22:49:37Z", "updated_at": "2017-01-13T23:04:12Z", "author_association": "NONE", "body_html": "<p>I'm trying to use the new java API, and I've come across some things that make it harder to use than I think it ought to be:</p>\n<ol>\n<li>The java API should accept a GraphDef object. Currently it only accepts a byte array representing the serialized binary of the GraphDef protocol buffer. It's odd to require a serialization/deserialization step at the library boundary.</li>\n<li>Session.Runner.feed should be able to accept org.tensorflow.framework.TensorProto or there should be a  good way to create org.tensorflow.Tensor from org.tensorflow.framework.TensorProto.</li>\n<li>Session.Runner.run returns a list of Tensor objects. Similar to above there should be an easy way to get TensorProto output either directly or by giving org.tensorflow.Tensor a good way to convert to TensorProto.</li>\n<li>Session.Runner.run swallows Status. There should be a way to get that out information about failures, perhaps through throwing an exception.</li>\n</ol>\n<p>Also, it's possible I missed the way to handle this, but it looks to me like I can't get all supported tensor types in the output from run. For example if my output tensor is of dtype INT16, then there's no way to extract the value from it. There's no Tensor.shortValue or the like, and Tensor.intValue seems to rquire an exact match. I'm basing this on reading DEFINE_GET_SCALAR_METHOD in tensor_jni.cc.</p>", "body_text": "I'm trying to use the new java API, and I've come across some things that make it harder to use than I think it ought to be:\n\nThe java API should accept a GraphDef object. Currently it only accepts a byte array representing the serialized binary of the GraphDef protocol buffer. It's odd to require a serialization/deserialization step at the library boundary.\nSession.Runner.feed should be able to accept org.tensorflow.framework.TensorProto or there should be a  good way to create org.tensorflow.Tensor from org.tensorflow.framework.TensorProto.\nSession.Runner.run returns a list of Tensor objects. Similar to above there should be an easy way to get TensorProto output either directly or by giving org.tensorflow.Tensor a good way to convert to TensorProto.\nSession.Runner.run swallows Status. There should be a way to get that out information about failures, perhaps through throwing an exception.\n\nAlso, it's possible I missed the way to handle this, but it looks to me like I can't get all supported tensor types in the output from run. For example if my output tensor is of dtype INT16, then there's no way to extract the value from it. There's no Tensor.shortValue or the like, and Tensor.intValue seems to rquire an exact match. I'm basing this on reading DEFINE_GET_SCALAR_METHOD in tensor_jni.cc.", "body": "I'm trying to use the new java API, and I've come across some things that make it harder to use than I think it ought to be:\r\n\r\n1. The java API should accept a GraphDef object. Currently it only accepts a byte array representing the serialized binary of the GraphDef protocol buffer. It's odd to require a serialization/deserialization step at the library boundary.\r\n2. Session.Runner.feed should be able to accept org.tensorflow.framework.TensorProto or there should be a  good way to create org.tensorflow.Tensor from org.tensorflow.framework.TensorProto.\r\n3. Session.Runner.run returns a list of Tensor objects. Similar to above there should be an easy way to get TensorProto output either directly or by giving org.tensorflow.Tensor a good way to convert to TensorProto.\r\n4. Session.Runner.run swallows Status. There should be a way to get that out information about failures, perhaps through throwing an exception.\r\n\r\nAlso, it's possible I missed the way to handle this, but it looks to me like I can't get all supported tensor types in the output from run. For example if my output tensor is of dtype INT16, then there's no way to extract the value from it. There's no Tensor.shortValue or the like, and Tensor.intValue seems to rquire an exact match. I'm basing this on reading DEFINE_GET_SCALAR_METHOD in tensor_jni.cc."}