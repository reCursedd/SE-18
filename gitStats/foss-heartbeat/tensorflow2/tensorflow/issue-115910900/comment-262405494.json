{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/262405494", "html_url": "https://github.com/tensorflow/tensorflow/issues/5#issuecomment-262405494", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5", "id": 262405494, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjQwNTQ5NA==", "user": {"login": "jbolla", "id": 2093086, "node_id": "MDQ6VXNlcjIwOTMwODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2093086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbolla", "html_url": "https://github.com/jbolla", "followers_url": "https://api.github.com/users/jbolla/followers", "following_url": "https://api.github.com/users/jbolla/following{/other_user}", "gists_url": "https://api.github.com/users/jbolla/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbolla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbolla/subscriptions", "organizations_url": "https://api.github.com/users/jbolla/orgs", "repos_url": "https://api.github.com/users/jbolla/repos", "events_url": "https://api.github.com/users/jbolla/events{/privacy}", "received_events_url": "https://api.github.com/users/jbolla/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-23T00:20:43Z", "updated_at": "2016-11-23T00:20:43Z", "author_association": "NONE", "body_html": "<p>I do have a few suggestions based on using JavaCPP bindings.</p>\n<p>First, since protocol buffers compile directly to java, the java versions should be used. Preferably I think that the protocol buffers that take part in the API should be separately available as a maven module and should come with the proto definitions so that people on a Java stack have an easy way to get the definitions as binary as well as an easy way to get the proto definitions for inclusion within other proto definitions.</p>\n<p>Second, it would be helpful to find the minimum version of libc that TensorFlow needs and build against that.</p>\n<p>Third, it is much easier to use a thoughtfully designed API than an automatically generated one. I know that that's obvious and kind of sounds like a shot at JavaCPP. I don't mean it to be. I'm really glad the automatically generated interface exists. It <em>is</em> usable. But it requires odd circumlocutions, it has a lot of warts, and it's pretty hard to read the code to figure out how to do what you're trying to do. I wish this suggestion was more helpful than \"you should make it good\", but I guess the point is that look how different the C++ API and the python API are. Both are straightforward because they fit their environment in a way that automatically converted code is unlikely to match.</p>", "body_text": "I do have a few suggestions based on using JavaCPP bindings.\nFirst, since protocol buffers compile directly to java, the java versions should be used. Preferably I think that the protocol buffers that take part in the API should be separately available as a maven module and should come with the proto definitions so that people on a Java stack have an easy way to get the definitions as binary as well as an easy way to get the proto definitions for inclusion within other proto definitions.\nSecond, it would be helpful to find the minimum version of libc that TensorFlow needs and build against that.\nThird, it is much easier to use a thoughtfully designed API than an automatically generated one. I know that that's obvious and kind of sounds like a shot at JavaCPP. I don't mean it to be. I'm really glad the automatically generated interface exists. It is usable. But it requires odd circumlocutions, it has a lot of warts, and it's pretty hard to read the code to figure out how to do what you're trying to do. I wish this suggestion was more helpful than \"you should make it good\", but I guess the point is that look how different the C++ API and the python API are. Both are straightforward because they fit their environment in a way that automatically converted code is unlikely to match.", "body": "I do have a few suggestions based on using JavaCPP bindings.\r\n\r\nFirst, since protocol buffers compile directly to java, the java versions should be used. Preferably I think that the protocol buffers that take part in the API should be separately available as a maven module and should come with the proto definitions so that people on a Java stack have an easy way to get the definitions as binary as well as an easy way to get the proto definitions for inclusion within other proto definitions.\r\n\r\nSecond, it would be helpful to find the minimum version of libc that TensorFlow needs and build against that.\r\n\r\nThird, it is much easier to use a thoughtfully designed API than an automatically generated one. I know that that's obvious and kind of sounds like a shot at JavaCPP. I don't mean it to be. I'm really glad the automatically generated interface exists. It _is_ usable. But it requires odd circumlocutions, it has a lot of warts, and it's pretty hard to read the code to figure out how to do what you're trying to do. I wish this suggestion was more helpful than \"you should make it good\", but I guess the point is that look how different the C++ API and the python API are. Both are straightforward because they fit their environment in a way that automatically converted code is unlikely to match."}