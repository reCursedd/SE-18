{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/270370485", "html_url": "https://github.com/tensorflow/tensorflow/issues/6634#issuecomment-270370485", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6634", "id": 270370485, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDM3MDQ4NQ==", "user": {"login": "tarvaina", "id": 2739, "node_id": "MDQ6VXNlcjI3Mzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tarvaina", "html_url": "https://github.com/tarvaina", "followers_url": "https://api.github.com/users/tarvaina/followers", "following_url": "https://api.github.com/users/tarvaina/following{/other_user}", "gists_url": "https://api.github.com/users/tarvaina/gists{/gist_id}", "starred_url": "https://api.github.com/users/tarvaina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tarvaina/subscriptions", "organizations_url": "https://api.github.com/users/tarvaina/orgs", "repos_url": "https://api.github.com/users/tarvaina/repos", "events_url": "https://api.github.com/users/tarvaina/events{/privacy}", "received_events_url": "https://api.github.com/users/tarvaina/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-04T13:31:06Z", "updated_at": "2017-01-04T13:31:06Z", "author_association": "NONE", "body_html": "<p>Possible workaround:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">default_custom_getter</span>(<span class=\"pl-smi\">getter</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n    <span class=\"pl-k\">return</span> getter(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">postfix_name</span>(<span class=\"pl-smi\">postfix</span>):\n    getter_wrapper <span class=\"pl-k\">=</span> tf.get_variable_scope().custom_getter <span class=\"pl-k\">or</span> default_custom_getter\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">custom_getter</span>(<span class=\"pl-smi\">getter</span>, <span class=\"pl-smi\">name</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n        <span class=\"pl-k\">return</span> getter_wrapper(getter, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-c1\">{}{}</span><span class=\"pl-pds\">\"</span></span>.format(name, postfix), <span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n    <span class=\"pl-k\">return</span> custom_getter\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">custom_getter</span><span class=\"pl-k\">=</span>postfix_name(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_A<span class=\"pl-pds\">\"</span></span>)):\n        <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>B<span class=\"pl-pds\">\"</span></span>):\n            var1 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>var1<span class=\"pl-pds\">\"</span></span>, [])\n        <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">custom_getter</span><span class=\"pl-k\">=</span>postfix_name(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_C<span class=\"pl-pds\">\"</span></span>)):\n            var2 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>var2<span class=\"pl-pds\">\"</span></span>, [])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Workaround functionality:</span>\n<span class=\"pl-k\">assert</span> var1.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>A/B/var1_A:0<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">assert</span> var2.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>A/C/var2_C_A:0<span class=\"pl-pds\">'</span></span></pre></div>", "body_text": "Possible workaround:\nimport tensorflow as tf\n\ndef default_custom_getter(getter, *args, **kwargs):\n    return getter(*args, **kwargs)\n\ndef postfix_name(postfix):\n    getter_wrapper = tf.get_variable_scope().custom_getter or default_custom_getter\n    def custom_getter(getter, name, *args, **kwargs):\n        return getter_wrapper(getter, \"{}{}\".format(name, postfix), *args, **kwargs)\n    return custom_getter\n\nwith tf.Graph().as_default():\n    with tf.variable_scope(\"A\", custom_getter=postfix_name(\"_A\")):\n        with tf.variable_scope(\"B\"):\n            var1 = tf.get_variable(\"var1\", [])\n        with tf.variable_scope(\"C\", custom_getter=postfix_name(\"_C\")):\n            var2 = tf.get_variable(\"var2\", [])\n\n# Workaround functionality:\nassert var1.name == 'A/B/var1_A:0'\nassert var2.name == 'A/C/var2_C_A:0'", "body": "Possible workaround:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\ndef default_custom_getter(getter, *args, **kwargs):\r\n    return getter(*args, **kwargs)\r\n\r\ndef postfix_name(postfix):\r\n    getter_wrapper = tf.get_variable_scope().custom_getter or default_custom_getter\r\n    def custom_getter(getter, name, *args, **kwargs):\r\n        return getter_wrapper(getter, \"{}{}\".format(name, postfix), *args, **kwargs)\r\n    return custom_getter\r\n\r\nwith tf.Graph().as_default():\r\n    with tf.variable_scope(\"A\", custom_getter=postfix_name(\"_A\")):\r\n        with tf.variable_scope(\"B\"):\r\n            var1 = tf.get_variable(\"var1\", [])\r\n        with tf.variable_scope(\"C\", custom_getter=postfix_name(\"_C\")):\r\n            var2 = tf.get_variable(\"var2\", [])\r\n\r\n# Workaround functionality:\r\nassert var1.name == 'A/B/var1_A:0'\r\nassert var2.name == 'A/C/var2_C_A:0'\r\n```"}