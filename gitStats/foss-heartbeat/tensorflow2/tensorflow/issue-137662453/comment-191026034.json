{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/191026034", "html_url": "https://github.com/tensorflow/tensorflow/issues/1346#issuecomment-191026034", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1346", "id": 191026034, "node_id": "MDEyOklzc3VlQ29tbWVudDE5MTAyNjAzNA==", "user": {"login": "bchretien", "id": 2742231, "node_id": "MDQ6VXNlcjI3NDIyMzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2742231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bchretien", "html_url": "https://github.com/bchretien", "followers_url": "https://api.github.com/users/bchretien/followers", "following_url": "https://api.github.com/users/bchretien/following{/other_user}", "gists_url": "https://api.github.com/users/bchretien/gists{/gist_id}", "starred_url": "https://api.github.com/users/bchretien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bchretien/subscriptions", "organizations_url": "https://api.github.com/users/bchretien/orgs", "repos_url": "https://api.github.com/users/bchretien/repos", "events_url": "https://api.github.com/users/bchretien/events{/privacy}", "received_events_url": "https://api.github.com/users/bchretien/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-02T02:44:53Z", "updated_at": "2016-03-02T02:49:12Z", "author_association": "NONE", "body_html": "<p>The <code>__builtin_ia32_monitorx</code>/<code>__builtin_ia32_mwaitx</code> error is a fairly common issue. You can try disabling <code>mwaitx</code> when using nvcc (append this to your nvcc flags: <code>-Xcompiler -mno-mwaitx</code>). Forcing <code>__STRICT_ANSI__</code> may help as well, although that's something I only had to use on my own code since it relies on Boost 1.60, and it seemed to be related to missing <code>__float128</code> support in nvcc (cf <a href=\"https://github.com/arrayfire/arrayfire/issues/1210\" data-hovercard-type=\"issue\" data-hovercard-url=\"/arrayfire/arrayfire/issues/1210/hovercard\">this</a>).</p>\n<p>As for your second issue, I had the same problem just a few days ago in my own code. In my case, CMake used <code>/usr/lib/hardening-wrapper/bin/cc</code> rather than <code>gcc</code> directly. That wrapper adds some extra compiler options (e.g. <code>_FORTIFY_SOURCE</code>) and can usually be used without even thinking about it, but apparently the source of the <code>memcpy</code> error was in one of these extra flags. I didn't try to pinpoint the exact source of the problem, but that's probably what you should be looking at.</p>", "body_text": "The __builtin_ia32_monitorx/__builtin_ia32_mwaitx error is a fairly common issue. You can try disabling mwaitx when using nvcc (append this to your nvcc flags: -Xcompiler -mno-mwaitx). Forcing __STRICT_ANSI__ may help as well, although that's something I only had to use on my own code since it relies on Boost 1.60, and it seemed to be related to missing __float128 support in nvcc (cf this).\nAs for your second issue, I had the same problem just a few days ago in my own code. In my case, CMake used /usr/lib/hardening-wrapper/bin/cc rather than gcc directly. That wrapper adds some extra compiler options (e.g. _FORTIFY_SOURCE) and can usually be used without even thinking about it, but apparently the source of the memcpy error was in one of these extra flags. I didn't try to pinpoint the exact source of the problem, but that's probably what you should be looking at.", "body": "The `__builtin_ia32_monitorx`/`__builtin_ia32_mwaitx` error is a fairly common issue. You can try disabling `mwaitx` when using nvcc (append this to your nvcc flags: `-Xcompiler -mno-mwaitx`). Forcing `__STRICT_ANSI__` may help as well, although that's something I only had to use on my own code since it relies on Boost 1.60, and it seemed to be related to missing `__float128` support in nvcc (cf [this](https://github.com/arrayfire/arrayfire/issues/1210)).\n\nAs for your second issue, I had the same problem just a few days ago in my own code. In my case, CMake used `/usr/lib/hardening-wrapper/bin/cc` rather than `gcc` directly. That wrapper adds some extra compiler options (e.g. `_FORTIFY_SOURCE`) and can usually be used without even thinking about it, but apparently the source of the `memcpy` error was in one of these extra flags. I didn't try to pinpoint the exact source of the problem, but that's probably what you should be looking at.\n"}