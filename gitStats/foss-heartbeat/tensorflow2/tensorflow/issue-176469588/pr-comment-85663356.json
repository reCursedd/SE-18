{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85663356", "pull_request_review_id": 6366740, "id": 85663356, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjYzMzU2", "diff_hunk": "@@ -0,0 +1,220 @@\n+/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <string>\n+\n+#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+#include \"tensorflow/core/framework/kernel_def_builder.h\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/kernels/bounds_check.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/util/bcast.h\"\n+\n+namespace tensorflow {\n+\n+// Position/length can be 32 or 64-bit integers\n+template <typename T>\n+class SubstrOp : public OpKernel {\n+  public:\n+    using OpKernel::OpKernel;\n+\n+    void Compute(OpKernelContext* context) override {\n+      // Get inputs\n+      const Tensor& input_tensor = context->input(0);\n+      const Tensor& pos_tensor = context->input(1);\n+      const Tensor& len_tensor = context->input(2);\n+      const TensorShape input_shape = input_tensor.shape();\n+      const TensorShape pos_shape = pos_tensor.shape();\n+      const TensorShape len_shape = len_tensor.shape();\n+\n+      bool is_scalar = TensorShapeUtils::IsScalar(pos_shape);\n+      \n+      if (is_scalar || input_shape == pos_shape) {\n+        // pos/len are either scalar or match the shape of input_tensor\n+        // Do not need to do broadcasting\n+\n+        // Reshape input \n+        auto input = input_tensor.flat<string>();\n+        // Allocate output\n+        Tensor* output_tensor = nullptr;\n+        OP_REQUIRES_OK(context,\n+                       context->allocate_output(\"output\", input_tensor.shape(),\n+                                                &output_tensor));\n+        auto output = output_tensor->flat<string>();\n+        if (is_scalar) {\n+          // Perform Op with scalar pos/len\n+          const T pos = tensorflow::internal::SubtleMustCopy(pos_tensor.scalar<T>()());\n+          const T len = tensorflow::internal::SubtleMustCopy(len_tensor.scalar<T>()());\n+          for (size_t i = 0; i < input_tensor.NumElements(); ++i) {\n+            // Make sure pos won't cause a runtime error\n+            OP_REQUIRES(context, pos >= 0 && pos < input(i).size(),\n+                        errors::InvalidArgument(\"pos \", pos, \n+                                                \" out of range for string b'\", \n+                                                input(i), \"' at index \", i));\n+            output(i) = input(i).substr(pos, len);\n+          }\n+        } else {\n+          // Perform Op element-wise with tensor pos/len\n+          auto pos_flat = pos_tensor.flat<T>();\n+          auto len_flat = len_tensor.flat<T>();\n+          // Use SubtleMustCopy on pos/len to prevent async attacks\n+          const size_t num_elements = pos_tensor.NumElements();\n+          std::vector<T> pos(num_elements);", "path": "tensorflow/core/kernels/substr_op.cc", "position": null, "original_position": 79, "commit_id": "711a3125a1b1d5ae8fdf8597839cc96721c1e6e5", "original_commit_id": "9abfa3152f94b39bbacca73a1018ef583cb64b98", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "I think in this codepath (where the pos / len is the same size as the input tensor), you can use SubtleMustCopy inside the loop just before you check bounds.\n", "created_at": "2016-10-30T16:29:28Z", "updated_at": "2016-11-03T18:48:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4338#discussion_r85663356", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4338", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85663356"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4338#discussion_r85663356"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4338"}}, "body_html": "<p>I think in this codepath (where the pos / len is the same size as the input tensor), you can use SubtleMustCopy inside the loop just before you check bounds.</p>", "body_text": "I think in this codepath (where the pos / len is the same size as the input tensor), you can use SubtleMustCopy inside the loop just before you check bounds.", "in_reply_to_id": 85653971}