{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/79260815", "pull_request_review_id": 435938, "id": 79260815, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5MjYwODE1", "diff_hunk": "@@ -280,4 +280,32 @@ input: Base64 strings to decode.\n output: Decoded strings.\n )doc\");\n \n+REGISTER_OP(\"Substr\")", "path": "tensorflow/core/ops/string_ops.cc", "position": 4, "original_position": 4, "commit_id": "711a3125a1b1d5ae8fdf8597839cc96721c1e6e5", "original_commit_id": "f1b65cf81faca3d4180467d52cc80992beed910d", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "I'm a little dubious about this op as written -- I can see the use case if all inputs were scalars, but applying pos/len scalars to all elements of an input seems potentially limiting.\n\nI was maybe thinking that pos and len could be equal-shaped tensors, and have pos and len be broadcastable against 'input'.  For example, if they were scalars, then they would apply to every element.\n\nIf the shape of 'pos' and 'len' matched 'input', then the entries in pos and len would be elementwise applied to input.  Otherwise, they would follow our standard broadcasting rules.  (e.g., you could have a matrix [MxN] of strings, have pos and len be [1xN], and then pos and len would apply row-wise to every element of the input matrix).\n\nFrom an API perspective, that seems more flexible, even if for now, you only implement the scalar or equal-shaped versions and threw errors for the rest.\n", "created_at": "2016-09-16T22:22:00Z", "updated_at": "2016-11-03T18:48:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4338#discussion_r79260815", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4338", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/79260815"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4338#discussion_r79260815"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4338"}}, "body_html": "<p>I'm a little dubious about this op as written -- I can see the use case if all inputs were scalars, but applying pos/len scalars to all elements of an input seems potentially limiting.</p>\n<p>I was maybe thinking that pos and len could be equal-shaped tensors, and have pos and len be broadcastable against 'input'.  For example, if they were scalars, then they would apply to every element.</p>\n<p>If the shape of 'pos' and 'len' matched 'input', then the entries in pos and len would be elementwise applied to input.  Otherwise, they would follow our standard broadcasting rules.  (e.g., you could have a matrix [MxN] of strings, have pos and len be [1xN], and then pos and len would apply row-wise to every element of the input matrix).</p>\n<p>From an API perspective, that seems more flexible, even if for now, you only implement the scalar or equal-shaped versions and threw errors for the rest.</p>", "body_text": "I'm a little dubious about this op as written -- I can see the use case if all inputs were scalars, but applying pos/len scalars to all elements of an input seems potentially limiting.\nI was maybe thinking that pos and len could be equal-shaped tensors, and have pos and len be broadcastable against 'input'.  For example, if they were scalars, then they would apply to every element.\nIf the shape of 'pos' and 'len' matched 'input', then the entries in pos and len would be elementwise applied to input.  Otherwise, they would follow our standard broadcasting rules.  (e.g., you could have a matrix [MxN] of strings, have pos and len be [1xN], and then pos and len would apply row-wise to every element of the input matrix).\nFrom an API perspective, that seems more flexible, even if for now, you only implement the scalar or equal-shaped versions and threw errors for the rest."}