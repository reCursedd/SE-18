{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85586105", "pull_request_review_id": 4381074, "id": 85586105, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NTg2MTA1", "diff_hunk": "@@ -0,0 +1,211 @@\n+/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <string>\n+\n+#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+#include \"tensorflow/core/framework/kernel_def_builder.h\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/util/bcast.h\"\n+\n+namespace tensorflow {\n+\n+// Position/length can be 32 or 64-bit integers\n+template <typename T>\n+class SubstrOp : public OpKernel {\n+  public:\n+    using OpKernel::OpKernel;\n+\n+    void Compute(OpKernelContext* context) override {\n+      // Get inputs\n+      const Tensor& input_tensor = context->input(0);\n+      const Tensor& pos_tensor = context->input(1);\n+      const Tensor& len_tensor = context->input(2);\n+      const TensorShape input_shape = input_tensor.shape();\n+      const TensorShape pos_shape = pos_tensor.shape();\n+      const TensorShape len_shape = len_tensor.shape();\n+\n+      bool is_scalar = TensorShapeUtils::IsScalar(pos_shape);\n+      \n+      if (is_scalar || input_shape == pos_shape) {\n+        // pos/len are either scalar or match the shape of input_tensor\n+        // Do not need to do broadcasting\n+\n+        // Reshape input \n+        auto input = input_tensor.flat<string>();\n+        // Allocate output\n+        Tensor* output_tensor = nullptr;\n+        OP_REQUIRES_OK(context,\n+                       context->allocate_output(\"output\", input_tensor.shape(),\n+                                                &output_tensor));\n+        auto output = output_tensor->flat<string>();\n+        if (is_scalar) {\n+          // Perform Op with scalar pos/len\n+          T pos = pos_tensor.scalar<T>()();\n+          T len = len_tensor.scalar<T>()();\n+          for (size_t i = 0; i < input_tensor.NumElements(); ++i) {\n+            // Make sure pos won't cause a runtime error\n+            OP_REQUIRES(context, pos >= 0 && pos < input(i).size(),", "path": "tensorflow/core/kernels/substr_op.cc", "position": null, "original_position": 66, "commit_id": "711a3125a1b1d5ae8fdf8597839cc96721c1e6e5", "original_commit_id": "408d7e83ccb948460f32b767c5e1e0ce64702c04", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "One faster way to do this check is to compute the min and max of the pos tensor outside this loop using Eigen, and validating that they are within bounds (that way, the reductions will be faster).  One thing to do later if this ever becomes performance critical.\n", "created_at": "2016-10-28T18:32:36Z", "updated_at": "2016-11-03T18:48:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4338#discussion_r85586105", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4338", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85586105"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4338#discussion_r85586105"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4338"}}, "body_html": "<p>One faster way to do this check is to compute the min and max of the pos tensor outside this loop using Eigen, and validating that they are within bounds (that way, the reductions will be faster).  One thing to do later if this ever becomes performance critical.</p>", "body_text": "One faster way to do this check is to compute the min and max of the pos tensor outside this loop using Eigen, and validating that they are within bounds (that way, the reductions will be faster).  One thing to do later if this ever becomes performance critical."}