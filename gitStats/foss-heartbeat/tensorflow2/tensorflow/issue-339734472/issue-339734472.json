{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20663", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20663/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20663/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20663/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20663", "id": 339734472, "node_id": "MDU6SXNzdWUzMzk3MzQ0NzI=", "number": 20663, "title": "use pre-trained embedding with tf.feature_column.embedding_column by initializer", "user": {"login": "geyuxiao", "id": 30492518, "node_id": "MDQ6VXNlcjMwNDkyNTE4", "avatar_url": "https://avatars3.githubusercontent.com/u/30492518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geyuxiao", "html_url": "https://github.com/geyuxiao", "followers_url": "https://api.github.com/users/geyuxiao/followers", "following_url": "https://api.github.com/users/geyuxiao/following{/other_user}", "gists_url": "https://api.github.com/users/geyuxiao/gists{/gist_id}", "starred_url": "https://api.github.com/users/geyuxiao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geyuxiao/subscriptions", "organizations_url": "https://api.github.com/users/geyuxiao/orgs", "repos_url": "https://api.github.com/users/geyuxiao/repos", "events_url": "https://api.github.com/users/geyuxiao/events{/privacy}", "received_events_url": "https://api.github.com/users/geyuxiao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-07-10T08:06:22Z", "updated_at": "2018-08-01T20:46:54Z", "closed_at": "2018-08-01T20:46:53Z", "author_association": "NONE", "body_html": "<p>I  used pre-trained embedding with tf.feature_column.embedding_column by parameter initializer  ,my code is blow</p>\n<h1>code here</h1>\n<pre><code>weight, vocab_size, emb_size = _create_pretrained_emb_from_txt(FLAGS.vocab,FLAGS.pre_emb)\n W = tf.get_variable(trainable=False, name='W', shape=[vocab_size, emb_size])\nembedding_placeholder = tf.placeholder(tf.float32, [vocab_size, emb_size])\nembedding_init = W.assign(embedding_placeholder)\n\nsess = tf.Session()\nsess.run(embedding_init, feed_dict={embedding_placeholder: weight})\n\nitemx_vocab = tf.feature_column.categorical_column_with_vocabulary_file(\n    key='itemx',\n    vocabulary_file=FLAGS.vocabx)\n\nitemx_emb = tf.feature_column.embedding_column(itemx_vocab,\n                                               dimension=emb_size,\n                                               initializer=W,\n                                               trainable=False)\n</code></pre>\n<h1>it says:</h1>\n<p>ValueError: initializer must be callable if specified. Embedding of column_name: itemx</p>\n<h3>then I tried set<code> lambda w: W</code>.</h3>\n<pre><code>itemx_emb = tf.feature_column.embedding_column(itemx_vocab,\n                                               dimension=emb_size,\n                                               initializer=lambda w: W,\n                                               trainable=False)\n</code></pre>\n<p>but it doesn't work and  got a typeError: TypeError: () got an unexpected keyword argument 'dtype'</p>\n<p>I'm confused is this a bug?</p>\n<p>thks fou your guys suggestion!</p>", "body_text": "I  used pre-trained embedding with tf.feature_column.embedding_column by parameter initializer  ,my code is blow\ncode here\nweight, vocab_size, emb_size = _create_pretrained_emb_from_txt(FLAGS.vocab,FLAGS.pre_emb)\n W = tf.get_variable(trainable=False, name='W', shape=[vocab_size, emb_size])\nembedding_placeholder = tf.placeholder(tf.float32, [vocab_size, emb_size])\nembedding_init = W.assign(embedding_placeholder)\n\nsess = tf.Session()\nsess.run(embedding_init, feed_dict={embedding_placeholder: weight})\n\nitemx_vocab = tf.feature_column.categorical_column_with_vocabulary_file(\n    key='itemx',\n    vocabulary_file=FLAGS.vocabx)\n\nitemx_emb = tf.feature_column.embedding_column(itemx_vocab,\n                                               dimension=emb_size,\n                                               initializer=W,\n                                               trainable=False)\n\nit says:\nValueError: initializer must be callable if specified. Embedding of column_name: itemx\nthen I tried set lambda w: W.\nitemx_emb = tf.feature_column.embedding_column(itemx_vocab,\n                                               dimension=emb_size,\n                                               initializer=lambda w: W,\n                                               trainable=False)\n\nbut it doesn't work and  got a typeError: TypeError: () got an unexpected keyword argument 'dtype'\nI'm confused is this a bug?\nthks fou your guys suggestion!", "body": "I  used pre-trained embedding with tf.feature_column.embedding_column by parameter initializer  ,my code is blow\r\n\r\n# code here\r\n```\r\nweight, vocab_size, emb_size = _create_pretrained_emb_from_txt(FLAGS.vocab,FLAGS.pre_emb)\r\n W = tf.get_variable(trainable=False, name='W', shape=[vocab_size, emb_size])\r\nembedding_placeholder = tf.placeholder(tf.float32, [vocab_size, emb_size])\r\nembedding_init = W.assign(embedding_placeholder)\r\n\r\nsess = tf.Session()\r\nsess.run(embedding_init, feed_dict={embedding_placeholder: weight})\r\n\r\nitemx_vocab = tf.feature_column.categorical_column_with_vocabulary_file(\r\n    key='itemx',\r\n    vocabulary_file=FLAGS.vocabx)\r\n\r\nitemx_emb = tf.feature_column.embedding_column(itemx_vocab,\r\n                                               dimension=emb_size,\r\n                                               initializer=W,\r\n                                               trainable=False)\r\n```\r\n\r\n# it says:\r\n\r\n ValueError: initializer must be callable if specified. Embedding of column_name: itemx\r\n\r\n### then I tried set` lambda w: W`. \r\n```\r\nitemx_emb = tf.feature_column.embedding_column(itemx_vocab,\r\n                                               dimension=emb_size,\r\n                                               initializer=lambda w: W,\r\n                                               trainable=False)\r\n```\r\n\r\nbut it doesn't work and  got a typeError: TypeError: () got an unexpected keyword argument 'dtype'\r\n\r\nI'm confused is this a bug?\r\n\r\nthks fou your guys suggestion! \r\n\r\n"}