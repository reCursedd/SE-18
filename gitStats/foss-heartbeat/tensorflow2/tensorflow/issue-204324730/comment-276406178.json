{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/276406178", "html_url": "https://github.com/tensorflow/tensorflow/pull/7163#issuecomment-276406178", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7163", "id": 276406178, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjQwNjE3OA==", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-31T16:04:37Z", "updated_at": "2017-01-31T16:04:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Some notes:</p>\n<p>for the external library (third_party/ipus/...), I have used 2 environment variables to enable the module.  This differs from Cuda / OpenCL which have stuff in the ./configure script.   I avoided copying Cuda / OpenCL because the ./configure script seems messy, and I imagine that it will be cleaned up at some point.</p>\n<p>To build our device (it is just a stub copy of the xla cpu device at the moment), you could set the 2 environment variables (TF_POPLAR_BASE and TF_POPNN_BASE) to any empty directory, comment out the two included headers in the xla_ipu_device.cc file.  then ./configure, including XLA, and build something like:</p>\n<p>bazel test --config=opt //tensorflow/compiler/poplar:device_test</p>\n<p>this should demonstrate the device .so being built, and the .so and .py files working together to load the device into tensorflow, and the test checking that the XLA_IPU device has been registered.</p>\n<p>You could also try:</p>\n<p>bazel test --config=opt //tensorflow/compiler/tests:xla_device_test</p>\n<p>you should see that the CPU device passes, while the IPU device doesn't pass (because it doesn't register any of the ops that are required at the moment).</p>\n<p>Finally - I've checked that without the TF_POPLAR_BASE and TF_POPNN_BASE env vars set, the system builds with XLA and the unit tests run successfully.    i.e. I would like this merge request to be actually merged after any discussion is done.</p>", "body_text": "Some notes:\nfor the external library (third_party/ipus/...), I have used 2 environment variables to enable the module.  This differs from Cuda / OpenCL which have stuff in the ./configure script.   I avoided copying Cuda / OpenCL because the ./configure script seems messy, and I imagine that it will be cleaned up at some point.\nTo build our device (it is just a stub copy of the xla cpu device at the moment), you could set the 2 environment variables (TF_POPLAR_BASE and TF_POPNN_BASE) to any empty directory, comment out the two included headers in the xla_ipu_device.cc file.  then ./configure, including XLA, and build something like:\nbazel test --config=opt //tensorflow/compiler/poplar:device_test\nthis should demonstrate the device .so being built, and the .so and .py files working together to load the device into tensorflow, and the test checking that the XLA_IPU device has been registered.\nYou could also try:\nbazel test --config=opt //tensorflow/compiler/tests:xla_device_test\nyou should see that the CPU device passes, while the IPU device doesn't pass (because it doesn't register any of the ops that are required at the moment).\nFinally - I've checked that without the TF_POPLAR_BASE and TF_POPNN_BASE env vars set, the system builds with XLA and the unit tests run successfully.    i.e. I would like this merge request to be actually merged after any discussion is done.", "body": "Some notes:\r\n\r\nfor the external library (third_party/ipus/...), I have used 2 environment variables to enable the module.  This differs from Cuda / OpenCL which have stuff in the ./configure script.   I avoided copying Cuda / OpenCL because the ./configure script seems messy, and I imagine that it will be cleaned up at some point.\r\n\r\nTo build our device (it is just a stub copy of the xla cpu device at the moment), you could set the 2 environment variables (TF_POPLAR_BASE and TF_POPNN_BASE) to any empty directory, comment out the two included headers in the xla_ipu_device.cc file.  then ./configure, including XLA, and build something like:\r\n\r\nbazel test --config=opt //tensorflow/compiler/poplar:device_test\r\n\r\nthis should demonstrate the device .so being built, and the .so and .py files working together to load the device into tensorflow, and the test checking that the XLA_IPU device has been registered.\r\n\r\nYou could also try:\r\n\r\nbazel test --config=opt //tensorflow/compiler/tests:xla_device_test\r\n\r\nyou should see that the CPU device passes, while the IPU device doesn't pass (because it doesn't register any of the ops that are required at the moment).\r\n\r\n\r\nFinally - I've checked that without the TF_POPLAR_BASE and TF_POPNN_BASE env vars set, the system builds with XLA and the unit tests run successfully.    i.e. I would like this merge request to be actually merged after any discussion is done.\r\n\r\n\r\n\r\n"}