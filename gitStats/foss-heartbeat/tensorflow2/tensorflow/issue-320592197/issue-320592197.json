{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19114", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19114/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19114/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19114/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19114", "id": 320592197, "node_id": "MDU6SXNzdWUzMjA1OTIxOTc=", "number": 19114, "title": "Add support to identify elements in tensors", "user": {"login": "DELTA37", "id": 26091470, "node_id": "MDQ6VXNlcjI2MDkxNDcw", "avatar_url": "https://avatars2.githubusercontent.com/u/26091470?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DELTA37", "html_url": "https://github.com/DELTA37", "followers_url": "https://api.github.com/users/DELTA37/followers", "following_url": "https://api.github.com/users/DELTA37/following{/other_user}", "gists_url": "https://api.github.com/users/DELTA37/gists{/gist_id}", "starred_url": "https://api.github.com/users/DELTA37/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DELTA37/subscriptions", "organizations_url": "https://api.github.com/users/DELTA37/orgs", "repos_url": "https://api.github.com/users/DELTA37/repos", "events_url": "https://api.github.com/users/DELTA37/events{/privacy}", "received_events_url": "https://api.github.com/users/DELTA37/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-05-06T13:21:44Z", "updated_at": "2018-07-31T06:35:54Z", "closed_at": "2018-07-31T06:35:54Z", "author_association": "NONE", "body_html": "<p>Problem description:<br>\nI want to create symmetric matrix, which contains only n(n + 1) / 2 trainable parameters.<br>\nIn general case i want to create tensor, where some elements are the same as trainable parameters.<br>\nWhy is it so important?</p>\n<ol>\n<li>PointNet article about 3D point cloud classification: contains symmetric matrices for estimation</li>\n<li>Symmetric differential equations</li>\n<li>Completeness of framework as a tool for optimization tasks</li>\n</ol>\n<p>One possible way to do it is to stack and concatenate different variables, but i think, low level possibility of this feature has a better perfomance</p>\n<p>Sorry for my English.</p>", "body_text": "Problem description:\nI want to create symmetric matrix, which contains only n(n + 1) / 2 trainable parameters.\nIn general case i want to create tensor, where some elements are the same as trainable parameters.\nWhy is it so important?\n\nPointNet article about 3D point cloud classification: contains symmetric matrices for estimation\nSymmetric differential equations\nCompleteness of framework as a tool for optimization tasks\n\nOne possible way to do it is to stack and concatenate different variables, but i think, low level possibility of this feature has a better perfomance\nSorry for my English.", "body": "Problem description:\r\nI want to create symmetric matrix, which contains only n(n + 1) / 2 trainable parameters.\r\nIn general case i want to create tensor, where some elements are the same as trainable parameters.\r\nWhy is it so important?\r\n1) PointNet article about 3D point cloud classification: contains symmetric matrices for estimation\r\n2) Symmetric differential equations\r\n2) Completeness of framework as a tool for optimization tasks\r\n\r\nOne possible way to do it is to stack and concatenate different variables, but i think, low level possibility of this feature has a better perfomance\r\n\r\nSorry for my English."}