{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350371191", "html_url": "https://github.com/tensorflow/tensorflow/issues/15219#issuecomment-350371191", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15219", "id": 350371191, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDM3MTE5MQ==", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-08T21:03:37Z", "updated_at": "2017-12-08T21:03:37Z", "author_association": "MEMBER", "body_html": "<p>Having a \"static\" while loop option (i.e. unrolled) that we could propagate to derivative ops like foldl is an interesting idea. This would obviously not always be possible, e.g. in the case of foldl, the shape of the input tensor must be known (or at least the first dimension). So I'm worried that such an option could potentially be confusing since it wouldn't always work and it isn't obvious when to use one or the other.</p>\n<p>Maybe someone could add static versions of these ops to contrib for now, instead of adding it as an option to the existing ops. Then it would still be easy to switch between the two, and leaves us more room to improve the existing version moving forward. I'm gonna mark this contributions welcome for now, but if anyone wants to take this on we should discuss more before creating a PR in case people have other ideas. I'm also not sure how many people would use these new ops.</p>\n<p>re: catching the error in foldl, unfortunately this will be hard to implement, as we don't \"know\" it's a foldl by the time we hit the error. We could maybe mention foldl etc in the error message though.</p>", "body_text": "Having a \"static\" while loop option (i.e. unrolled) that we could propagate to derivative ops like foldl is an interesting idea. This would obviously not always be possible, e.g. in the case of foldl, the shape of the input tensor must be known (or at least the first dimension). So I'm worried that such an option could potentially be confusing since it wouldn't always work and it isn't obvious when to use one or the other.\nMaybe someone could add static versions of these ops to contrib for now, instead of adding it as an option to the existing ops. Then it would still be easy to switch between the two, and leaves us more room to improve the existing version moving forward. I'm gonna mark this contributions welcome for now, but if anyone wants to take this on we should discuss more before creating a PR in case people have other ideas. I'm also not sure how many people would use these new ops.\nre: catching the error in foldl, unfortunately this will be hard to implement, as we don't \"know\" it's a foldl by the time we hit the error. We could maybe mention foldl etc in the error message though.", "body": "Having a \"static\" while loop option (i.e. unrolled) that we could propagate to derivative ops like foldl is an interesting idea. This would obviously not always be possible, e.g. in the case of foldl, the shape of the input tensor must be known (or at least the first dimension). So I'm worried that such an option could potentially be confusing since it wouldn't always work and it isn't obvious when to use one or the other.\r\n\r\nMaybe someone could add static versions of these ops to contrib for now, instead of adding it as an option to the existing ops. Then it would still be easy to switch between the two, and leaves us more room to improve the existing version moving forward. I'm gonna mark this contributions welcome for now, but if anyone wants to take this on we should discuss more before creating a PR in case people have other ideas. I'm also not sure how many people would use these new ops.\r\n\r\nre: catching the error in foldl, unfortunately this will be hard to implement, as we don't \"know\" it's a foldl by the time we hit the error. We could maybe mention foldl etc in the error message though."}