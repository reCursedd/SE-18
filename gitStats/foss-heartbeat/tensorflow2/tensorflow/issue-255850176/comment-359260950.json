{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/359260950", "html_url": "https://github.com/tensorflow/tensorflow/issues/12871#issuecomment-359260950", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12871", "id": 359260950, "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTI2MDk1MA==", "user": {"login": "OutSorcerer", "id": 5833256, "node_id": "MDQ6VXNlcjU4MzMyNTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5833256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OutSorcerer", "html_url": "https://github.com/OutSorcerer", "followers_url": "https://api.github.com/users/OutSorcerer/followers", "following_url": "https://api.github.com/users/OutSorcerer/following{/other_user}", "gists_url": "https://api.github.com/users/OutSorcerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/OutSorcerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OutSorcerer/subscriptions", "organizations_url": "https://api.github.com/users/OutSorcerer/orgs", "repos_url": "https://api.github.com/users/OutSorcerer/repos", "events_url": "https://api.github.com/users/OutSorcerer/events{/privacy}", "received_events_url": "https://api.github.com/users/OutSorcerer/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-21T16:31:45Z", "updated_at": "2018-01-21T16:42:55Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a>, the original issue with non-deterministic behaviour of TensorFlow still persists.</p>\n<p>The root cause is in cuDNN, not Tensorflow, but it is still should be possible to make the behavior deterministic in the same way like Theano developers did with</p>\n<pre><code>[dnn.conv]\n\nalgo_bwd_data=deterministic\nalgo_bwd_filter=deterministic\n</code></pre>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2533174\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ekelsen\">@ekelsen</a> said:</p>\n<blockquote>\n<p>The gradient calculation of convolutions is not likely to be deterministic at anywhere close to the same performance unless NVIDIA decides to change the implementation of cuDNN.</p>\n</blockquote>\n<p>But in fact the performance <em>is</em> almost the same.</p>\n<p>According to my own experiments on Geforce gtx 1050 the performance is almost the same for Tensorflow using cuDNN vs. Theano using cuDNN with non-deterministic config vs. the same with deteministic config (about 4s/epoch all all three cases).</p>\n<p>Other people also report relatively the same performance with Theano/cuDNN and with or without <code>algo_bwd_data</code> and <code>algo_bwd_filter</code> configuration:</p>\n<ul>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"150590947\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/keras-team/keras/issues/2479\" data-hovercard-type=\"issue\" data-hovercard-url=\"/keras-team/keras/issues/2479/hovercard?comment_id=213987747&amp;comment_type=issue_comment\" href=\"https://github.com/keras-team/keras/issues/2479#issuecomment-213987747\">keras-team/keras#2479 (comment)</a></li>\n<li><a href=\"https://www.kaggle.com/c/ultrasound-nerve-segmentation/discussion/22014#125961\" rel=\"nofollow\">https://www.kaggle.com/c/ultrasound-nerve-segmentation/discussion/22014#125961</a></li>\n</ul>\n<p>So I believe it still makes sense to reopen the issue and implement something like that in TensorFlow.</p>", "body_text": "@drpngx, the original issue with non-deterministic behaviour of TensorFlow still persists.\nThe root cause is in cuDNN, not Tensorflow, but it is still should be possible to make the behavior deterministic in the same way like Theano developers did with\n[dnn.conv]\n\nalgo_bwd_data=deterministic\nalgo_bwd_filter=deterministic\n\n@ekelsen said:\n\nThe gradient calculation of convolutions is not likely to be deterministic at anywhere close to the same performance unless NVIDIA decides to change the implementation of cuDNN.\n\nBut in fact the performance is almost the same.\nAccording to my own experiments on Geforce gtx 1050 the performance is almost the same for Tensorflow using cuDNN vs. Theano using cuDNN with non-deterministic config vs. the same with deteministic config (about 4s/epoch all all three cases).\nOther people also report relatively the same performance with Theano/cuDNN and with or without algo_bwd_data and algo_bwd_filter configuration:\n\nkeras-team/keras#2479 (comment)\nhttps://www.kaggle.com/c/ultrasound-nerve-segmentation/discussion/22014#125961\n\nSo I believe it still makes sense to reopen the issue and implement something like that in TensorFlow.", "body": "@drpngx, the original issue with non-deterministic behaviour of TensorFlow still persists.\r\n\r\nThe root cause is in cuDNN, not Tensorflow, but it is still should be possible to make the behavior deterministic in the same way like Theano developers did with\r\n\r\n```\r\n[dnn.conv]\r\n\r\nalgo_bwd_data=deterministic\r\nalgo_bwd_filter=deterministic\r\n```\r\n\r\n@ekelsen said:\r\n\r\n>The gradient calculation of convolutions is not likely to be deterministic at anywhere close to the same performance unless NVIDIA decides to change the implementation of cuDNN.\r\n\r\nBut in fact the performance *is* almost the same.\r\n\r\nAccording to my own experiments on Geforce gtx 1050 the performance is almost the same for Tensorflow using cuDNN vs. Theano using cuDNN with non-deterministic config vs. the same with deteministic config (about 4s/epoch all all three cases).  \r\n\r\nOther people also report relatively the same performance with Theano/cuDNN and with or without `algo_bwd_data` and `algo_bwd_filter` configuration:\r\n\r\n* https://github.com/keras-team/keras/issues/2479#issuecomment-213987747\r\n* https://www.kaggle.com/c/ultrasound-nerve-segmentation/discussion/22014#125961\r\n\r\nSo I believe it still makes sense to reopen the issue and implement something like that in TensorFlow.\r\n"}