{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327741496", "html_url": "https://github.com/tensorflow/tensorflow/issues/1325#issuecomment-327741496", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1325", "id": 327741496, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzc0MTQ5Ng==", "user": {"login": "kashefy", "id": 6430736, "node_id": "MDQ6VXNlcjY0MzA3MzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6430736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kashefy", "html_url": "https://github.com/kashefy", "followers_url": "https://api.github.com/users/kashefy/followers", "following_url": "https://api.github.com/users/kashefy/following{/other_user}", "gists_url": "https://api.github.com/users/kashefy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kashefy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kashefy/subscriptions", "organizations_url": "https://api.github.com/users/kashefy/orgs", "repos_url": "https://api.github.com/users/kashefy/repos", "events_url": "https://api.github.com/users/kashefy/events{/privacy}", "received_events_url": "https://api.github.com/users/kashefy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-07T09:13:51Z", "updated_at": "2017-09-07T09:35:30Z", "author_association": "NONE", "body_html": "<p>Variables restored from the saver are assigned a different output index. So the variable I'm creating using tf.get_variable ends up being a completely different one.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>var_scope<span class=\"pl-pds\">\"</span></span>):<span class=\"pl-bu\">`</span>\n    W <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>W<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">784</span>, <span class=\"pl-c1\">10</span>], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.random_normal_initializer(<span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>))</pre></div>\n<p>If I restore variables from the saver I end up with two sets of variables:<br>\nThe first: 'var_scope/W'<br>\nAnd the second restored by the saver: 'var_scope/W_1' (Notice the added output index)<br>\nI don't get why the saver won't use the variable defined by <code>tf.get_variable()</code></p>\n<p>I uploaded this small program to demonstrate the effect. If anyone wants to try it out. <a href=\"https://gist.github.com/kashefy/9f8c57a7b1eb41b8491d8c37b94b0f82\">here</a>.</p>\n<p>So far I've only managed to restore variables defined with <code>tf.get_variable()</code> by calling<br>\n<code>graph.get_tensor_by_name(full_var_scope_and_var_name_and_output_index)</code><br>\nafter restoring them from the saver.</p>\n<p>Thanks!</p>", "body_text": "Variables restored from the saver are assigned a different output index. So the variable I'm creating using tf.get_variable ends up being a completely different one.\nwith tf.variable_scope(\"var_scope\"):`\n    W = tf.get_variable('W', shape=[784, 10], initializer=tf.random_normal_initializer(stddev=0.1))\nIf I restore variables from the saver I end up with two sets of variables:\nThe first: 'var_scope/W'\nAnd the second restored by the saver: 'var_scope/W_1' (Notice the added output index)\nI don't get why the saver won't use the variable defined by tf.get_variable()\nI uploaded this small program to demonstrate the effect. If anyone wants to try it out. here.\nSo far I've only managed to restore variables defined with tf.get_variable() by calling\ngraph.get_tensor_by_name(full_var_scope_and_var_name_and_output_index)\nafter restoring them from the saver.\nThanks!", "body": "Variables restored from the saver are assigned a different output index. So the variable I'm creating using tf.get_variable ends up being a completely different one.\r\n\r\n```python\r\nwith tf.variable_scope(\"var_scope\"):`\r\n    W = tf.get_variable('W', shape=[784, 10], initializer=tf.random_normal_initializer(stddev=0.1))\r\n```\r\n\r\nIf I restore variables from the saver I end up with two sets of variables:\r\nThe first: 'var_scope/W'\r\nAnd the second restored by the saver: 'var_scope/W_1' (Notice the added output index)\r\nI don't get why the saver won't use the variable defined by `tf.get_variable()`\r\n\r\nI uploaded this small program to demonstrate the effect. If anyone wants to try it out. [here](https://gist.github.com/kashefy/9f8c57a7b1eb41b8491d8c37b94b0f82).\r\n\r\nSo far I've only managed to restore variables defined with `tf.get_variable()` by calling\r\n `graph.get_tensor_by_name(full_var_scope_and_var_name_and_output_index)`\r\nafter restoring them from the saver.\r\n\r\nThanks!"}