{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/259237319", "html_url": "https://github.com/tensorflow/tensorflow/issues/1325#issuecomment-259237319", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1325", "id": 259237319, "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTIzNzMxOQ==", "user": {"login": "IsaacBanjo", "id": 10407758, "node_id": "MDQ6VXNlcjEwNDA3NzU4", "avatar_url": "https://avatars0.githubusercontent.com/u/10407758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IsaacBanjo", "html_url": "https://github.com/IsaacBanjo", "followers_url": "https://api.github.com/users/IsaacBanjo/followers", "following_url": "https://api.github.com/users/IsaacBanjo/following{/other_user}", "gists_url": "https://api.github.com/users/IsaacBanjo/gists{/gist_id}", "starred_url": "https://api.github.com/users/IsaacBanjo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IsaacBanjo/subscriptions", "organizations_url": "https://api.github.com/users/IsaacBanjo/orgs", "repos_url": "https://api.github.com/users/IsaacBanjo/repos", "events_url": "https://api.github.com/users/IsaacBanjo/events{/privacy}", "received_events_url": "https://api.github.com/users/IsaacBanjo/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-08T19:39:14Z", "updated_at": "2016-11-08T19:44:09Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=684901\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lukaszkaiser\">@lukaszkaiser</a> I think I kind of get the big idea. So previously when I say \"global\" I mean its life time does not end when the function exits, unlike a variable defined in stack in C/C++. It is either defined in stationary memory or in heap, because our initialize_graph function is just a function, every variable is defined inside the function, if it is a stack variable, after calling the initialize_graph function, those variables are freed, the session.run() function won't see/retrieve it. That's why I say the reason to use tf.get_variable() is to not define it in stack, and make it global for later use.</p>\n<p>Now I kindly get that my such thought are not how TF works, TF does NOT NEED my above mechanism to keep variables global; they are intrinsically global either using tf.Variable or tf.get_variable. I.e., even we define those variables using tf.Variable WITHIN A Function, those variables are actually attached to a hidden \"graph\" class, so they are global and life persisting. Thus the session.run() function can somehow retrieve them by calling graph.some_weights/biases. And as what you mentioned, the tf.get_variable method is mainly for distributed training that even in different gpus/machines, we have a consistent/convenient way to retrieve the same unique variable?</p>\n<p>In terms of the suffix thing, truely that I noticed the system will add a suffix to the string name we gave when defining, yielding a string_suffix name in reality.</p>", "body_text": "@lukaszkaiser I think I kind of get the big idea. So previously when I say \"global\" I mean its life time does not end when the function exits, unlike a variable defined in stack in C/C++. It is either defined in stationary memory or in heap, because our initialize_graph function is just a function, every variable is defined inside the function, if it is a stack variable, after calling the initialize_graph function, those variables are freed, the session.run() function won't see/retrieve it. That's why I say the reason to use tf.get_variable() is to not define it in stack, and make it global for later use.\nNow I kindly get that my such thought are not how TF works, TF does NOT NEED my above mechanism to keep variables global; they are intrinsically global either using tf.Variable or tf.get_variable. I.e., even we define those variables using tf.Variable WITHIN A Function, those variables are actually attached to a hidden \"graph\" class, so they are global and life persisting. Thus the session.run() function can somehow retrieve them by calling graph.some_weights/biases. And as what you mentioned, the tf.get_variable method is mainly for distributed training that even in different gpus/machines, we have a consistent/convenient way to retrieve the same unique variable?\nIn terms of the suffix thing, truely that I noticed the system will add a suffix to the string name we gave when defining, yielding a string_suffix name in reality.", "body": "@lukaszkaiser I think I kind of get the big idea. So previously when I say \"global\" I mean its life time does not end when the function exits, unlike a variable defined in stack in C/C++. It is either defined in stationary memory or in heap, because our initialize_graph function is just a function, every variable is defined inside the function, if it is a stack variable, after calling the initialize_graph function, those variables are freed, the session.run() function won't see/retrieve it. That's why I say the reason to use tf.get_variable() is to not define it in stack, and make it global for later use.\n\nNow I kindly get that my such thought are not how TF works, TF does NOT NEED my above mechanism to keep variables global; they are intrinsically global either using tf.Variable or tf.get_variable. I.e., even we define those variables using tf.Variable WITHIN A Function, those variables are actually attached to a hidden \"graph\" class, so they are global and life persisting. Thus the session.run() function can somehow retrieve them by calling graph.some_weights/biases. And as what you mentioned, the tf.get_variable method is mainly for distributed training that even in different gpus/machines, we have a consistent/convenient way to retrieve the same unique variable?\n\nIn terms of the suffix thing, truely that I noticed the system will add a suffix to the string name we gave when defining, yielding a string_suffix name in reality.\n"}