{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/259229203", "html_url": "https://github.com/tensorflow/tensorflow/issues/1325#issuecomment-259229203", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1325", "id": 259229203, "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTIyOTIwMw==", "user": {"login": "IsaacBanjo", "id": 10407758, "node_id": "MDQ6VXNlcjEwNDA3NzU4", "avatar_url": "https://avatars0.githubusercontent.com/u/10407758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IsaacBanjo", "html_url": "https://github.com/IsaacBanjo", "followers_url": "https://api.github.com/users/IsaacBanjo/followers", "following_url": "https://api.github.com/users/IsaacBanjo/following{/other_user}", "gists_url": "https://api.github.com/users/IsaacBanjo/gists{/gist_id}", "starred_url": "https://api.github.com/users/IsaacBanjo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IsaacBanjo/subscriptions", "organizations_url": "https://api.github.com/users/IsaacBanjo/orgs", "repos_url": "https://api.github.com/users/IsaacBanjo/repos", "events_url": "https://api.github.com/users/IsaacBanjo/events{/privacy}", "received_events_url": "https://api.github.com/users/IsaacBanjo/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-08T19:08:20Z", "updated_at": "2016-11-08T19:09:42Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=684901\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lukaszkaiser\">@lukaszkaiser</a>  Thanks for your response! As for the local/global issue, may I confirm that</p>\n<ol>\n<li>Anything defined with tf.get_variable() is guaranteed to be global, so even it's defined in a function it can be retrieved, shared and its old information kept (Just like a static variable in C++)?</li>\n<li>While with tf.Variable(), it can be either local or global, but I am just wondering that, if I define a graph's weights using tf.Variable() in a function, and not setting it as a class member, it cannot be retrieved by tf.get_variable(), and each time we run that function, it creates a new variable, how can the session.run(optimizer, feed_dict={...}) retrieve the unique variable and update its value based on its old value with gradients (I heard it works in this way)?</li>\n</ol>\n<p>Sorry to bother with many questions. Hope these are the last two, otherwise I got to read through the source code. I just hope to get everything clear other than blindly following some example to use tensorflow.<br>\nThanks again!</p>", "body_text": "@lukaszkaiser  Thanks for your response! As for the local/global issue, may I confirm that\n\nAnything defined with tf.get_variable() is guaranteed to be global, so even it's defined in a function it can be retrieved, shared and its old information kept (Just like a static variable in C++)?\nWhile with tf.Variable(), it can be either local or global, but I am just wondering that, if I define a graph's weights using tf.Variable() in a function, and not setting it as a class member, it cannot be retrieved by tf.get_variable(), and each time we run that function, it creates a new variable, how can the session.run(optimizer, feed_dict={...}) retrieve the unique variable and update its value based on its old value with gradients (I heard it works in this way)?\n\nSorry to bother with many questions. Hope these are the last two, otherwise I got to read through the source code. I just hope to get everything clear other than blindly following some example to use tensorflow.\nThanks again!", "body": "@lukaszkaiser  Thanks for your response! As for the local/global issue, may I confirm that \n1. Anything defined with tf.get_variable() is guaranteed to be global, so even it's defined in a function it can be retrieved, shared and its old information kept (Just like a static variable in C++)? \n2. While with tf.Variable(), it can be either local or global, but I am just wondering that, if I define a graph's weights using tf.Variable() in a function, and not setting it as a class member, it cannot be retrieved by tf.get_variable(), and each time we run that function, it creates a new variable, how can the session.run(optimizer, feed_dict={...}) retrieve the unique variable and update its value based on its old value with gradients (I heard it works in this way)?\n\nSorry to bother with many questions. Hope these are the last two, otherwise I got to read through the source code. I just hope to get everything clear other than blindly following some example to use tensorflow.\nThanks again!\n"}