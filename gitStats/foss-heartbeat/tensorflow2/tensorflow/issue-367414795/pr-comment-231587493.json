{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/231587493", "pull_request_review_id": 172562485, "id": 231587493, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTU4NzQ5Mw==", "diff_hunk": "@@ -976,17 +1021,123 @@ Status Converter::PrepareTensorForShape(const TRT_TensorOrWeights& input,\n           *const_cast<nvinfer1::ITensor*>(input.tensor()));\n       TFTRT_RETURN_ERROR_IF_NULLPTR(layer, \"TF-TRT Internal Reshape\");\n       layer->setReshapeDimensions(dims);\n+      MarkQuantizationRangesAsInferrable(\n+          const_cast<nvinfer1::ITensor*>(input.tensor()), layer->getOutput(0));\n       *tensor = layer->getOutput(0);\n     }\n   } else {\n     nvinfer1::IConstantLayer* layer =\n         this->network()->addConstant(dims, input.weights().GetTrtWeights());\n     TFTRT_RETURN_ERROR_IF_NULLPTR(layer, \"TF-TRT Internal Reshape\");\n     *tensor = layer->getOutput(0);\n+    // We need to set a quantization range for the output tensor of the\n+    // IConstantLayer. Here we set the range to [min(weights), max(weights)].\n+    float min_range = 0.0f;\n+    float max_range = 0.0f;\n+    TF_RETURN_IF_ERROR(\n+        GetWeightRange(input.weights(), &min_range, &max_range));\n+    // Avoid setting range to 0 because TRT will throw an error. If the weights\n+    // are zero then the range doesn't matter: using 127.0f should ensure the\n+    // quantized weight will be exactly zero.\n+    if (min_range == 0.0f && max_range == 0.0f) {\n+      min_range = -127.0f;\n+      max_range = 127.0f;\n+    }\n+    ProvideQuantizationRange(const_cast<nvinfer1::ITensor*>(*tensor),\n+        min_range, max_range);\n   }\n   return tensorflow::Status::OK();\n }\n \n+void Converter::MarkQuantizationRangesAsInferrable(nvinfer1::ITensor* input,\n+                                                   nvinfer1::ITensor* output) {\n+  quantization_infer_.push_back({input, output});\n+  quantization_infer_.push_back({output, input});\n+}\n+\n+void Converter::ProvideQuantizationRange(nvinfer1::ITensor* tensor,", "path": "tensorflow/contrib/tensorrt/convert/convert_nodes.cc", "position": null, "original_position": 130, "commit_id": "c9774910f1e24b964f0a31fdbf98df472d92501b", "original_commit_id": "de0ed5a2bf01342d4c23357d3abf39eb68bb0b2a", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "Please add a test for this method in ConverterTest.", "created_at": "2018-11-07T16:50:53Z", "updated_at": "2018-11-21T23:48:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22788#discussion_r231587493", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22788", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/231587493"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22788#discussion_r231587493"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22788"}}, "body_html": "<p>Please add a test for this method in ConverterTest.</p>", "body_text": "Please add a test for this method in ConverterTest."}