{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224616918", "pull_request_review_id": 164029120, "id": 224616918, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDYxNjkxOA==", "diff_hunk": "@@ -83,11 +83,11 @@ std::vector<int> GetLoadedTensorRTVersion() {\n \n namespace {\n \n-bool IsTensorRTCandidate(const tensorflow::Node* node) {\n+bool IsTensorRTCandidate(const tensorflow::Node* node, int precision_mode) {\n   // LINT.IfChange\n   // TODO(jie): Segmentation shouldn't associated with op name.\n   //            Split it into a registration for each kernel.\n-  static const std::set<string> candidate_ops = {\n+  std::set<string> candidate_ops = {", "path": "tensorflow/contrib/tensorrt/convert/convert_graph.cc", "position": null, "original_position": 10, "commit_id": "c9774910f1e24b964f0a31fdbf98df472d92501b", "original_commit_id": "66637fc63fd69bfcc4344fa7b59e45c38e2dbf10", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "Please still make it static, so we don't need to create the same set for each node during segmentation. We can do something like:\r\n```\r\nstatic const std::set<string> candidate_ops = {...}\r\nif (candidate_ops.count(node->type_string()) ||\r\n    PluginFactoryTensorRT::GetInstance()->IsPlugin(node->type_string())) {\r\n  return true;\r\n}\r\n#if NV_TENSORRT_MAJOR >= 5\r\nstatic const std::set<string> quantize_ops = {...}\r\nif (precision_mode == INT8MODE &&\r\n    quantize_ops.count(node->type_string())) {\r\n  return true;\r\n}\r\n#endif\r\nreturn false;\r\n```", "created_at": "2018-10-11T21:57:19Z", "updated_at": "2018-11-21T23:48:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22788#discussion_r224616918", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22788", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224616918"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22788#discussion_r224616918"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22788"}}, "body_html": "<p>Please still make it static, so we don't need to create the same set for each node during segmentation. We can do something like:</p>\n<pre><code>static const std::set&lt;string&gt; candidate_ops = {...}\nif (candidate_ops.count(node-&gt;type_string()) ||\n    PluginFactoryTensorRT::GetInstance()-&gt;IsPlugin(node-&gt;type_string())) {\n  return true;\n}\n#if NV_TENSORRT_MAJOR &gt;= 5\nstatic const std::set&lt;string&gt; quantize_ops = {...}\nif (precision_mode == INT8MODE &amp;&amp;\n    quantize_ops.count(node-&gt;type_string())) {\n  return true;\n}\n#endif\nreturn false;\n</code></pre>", "body_text": "Please still make it static, so we don't need to create the same set for each node during segmentation. We can do something like:\nstatic const std::set<string> candidate_ops = {...}\nif (candidate_ops.count(node->type_string()) ||\n    PluginFactoryTensorRT::GetInstance()->IsPlugin(node->type_string())) {\n  return true;\n}\n#if NV_TENSORRT_MAJOR >= 5\nstatic const std::set<string> quantize_ops = {...}\nif (precision_mode == INT8MODE &&\n    quantize_ops.count(node->type_string())) {\n  return true;\n}\n#endif\nreturn false;"}