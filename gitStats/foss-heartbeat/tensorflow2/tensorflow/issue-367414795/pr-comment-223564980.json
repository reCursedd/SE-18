{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/223564980", "pull_request_review_id": 162720644, "id": 223564980, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzU2NDk4MA==", "diff_hunk": "@@ -726,6 +739,69 @@ class Converter {\n     return trt_tensors_.insert({name, TRT_TensorOrWeights(tensor)}).second;\n   }\n \n+  // This should be called on the inputs and outputs of any layer we create\n+  // where we know that the quantization range does not change during that\n+  // operation. (e.g. Reshape, Transpose, Identity, MaxPool).\n+  void MarkQuantizationRangesAsInferrable(nvinfer1::ITensor* input,\n+                                          nvinfer1::ITensor* output) {\n+    quantization_infer_.push_back({input, output});\n+    quantization_infer_.push_back({output, input});\n+  }\n+\n+  // This function should be called when we know the quantization range of a\n+  // tensor, either from a quantize/dequantize node or when the output is a\n+  // fixed range (e.g. SoftMax, Relu6, Sigmoid).\n+  void ProvideQuantizationRange(nvinfer1::ITensor* tensor,\n+                                float min_range, float max_range) {\n+    float symmetric_range = std::max(abs(min_range), abs(max_range));\n+    quantization_scales_[tensor] = symmetric_range;\n+  }\n+\n+  void ApplyQuantizationRanges(bool warn_missing_ranges) {\n+    // Infer ranges across marked ops\n+    PropagateQuantizationRanges();\n+    // Get all tensors from network\n+    std::set<nvinfer1::ITensor*> all_tensors;\n+    std::set<nvinfer1::ITensor*> tensors_missing_ranges;\n+    for (int i = 0; i < this->network()->getNbLayers(); i++) {\n+      nvinfer1::ILayer* layer = this->network()->getLayer(i);\n+      for (int j = 0; j < layer->getNbInputs(); j++)\n+        all_tensors.insert(layer->getInput(j));\n+      for (int j = 0; j < layer->getNbOutputs(); j++)\n+        all_tensors.insert(layer->getOutput(j));\n+    }\n+    // Apply ranges\n+    for (auto tensor : all_tensors) {\n+      auto it = quantization_scales_.find(tensor);\n+      if (it != quantization_scales_.end()) {\n+        float range = it->second;\n+#if NV_TENSORRT_MAJOR >= 5\n+        tensor->setDynamicRange(-range, range);\n+#endif\n+      } else {\n+        tensors_missing_ranges.insert(tensor);\n+      }\n+    }\n+    // Warn user about tensors that are missing ranges. If TRT fuses some layers\n+    // then these tensors may not actually be required, which is why this is\n+    // just a warning.\n+    if (warn_missing_ranges) {\n+      for (auto tensor : tensors_missing_ranges) {\n+        // Ignore \"(Unnamed ITensor* X)\" which are created internally by TF-TRT.\n+        // The ranges for unnamed ITensors are always inferred from user\n+        // provided ranges, thus there will still be a message for the range the\n+        // user missed.\n+        if (std::string(tensor->getName()).find(\"(Unnamed ITensor* \") ==\n+            std::string::npos) {\n+          LOG(WARNING) << \"Quantization range was not found for \"\n+            << tensor->getName()", "path": "tensorflow/contrib/tensorrt/convert/convert_nodes.cc", "position": null, "original_position": 86, "commit_id": "c9774910f1e24b964f0a31fdbf98df472d92501b", "original_commit_id": "57f6ba3434a9f47ffac4957555096c7cc0930f4a", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "nit: please fix the alignment.", "created_at": "2018-10-09T05:39:21Z", "updated_at": "2018-11-21T23:48:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22788#discussion_r223564980", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22788", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/223564980"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22788#discussion_r223564980"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22788"}}, "body_html": "<p>nit: please fix the alignment.</p>", "body_text": "nit: please fix the alignment."}