{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224628538", "pull_request_review_id": 164040210, "id": 224628538, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDYyODUzOA==", "diff_hunk": "@@ -0,0 +1,162 @@\n+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Model script to test TF-TensorRT integration.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import numpy as np\n+\n+from tensorflow.contrib.tensorrt.test import tf_trt_integration_test_base as trt_test\n+from tensorflow.python.framework import constant_op\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import ops\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import math_ops\n+from tensorflow.python.ops import nn\n+from tensorflow.python.ops import nn_impl\n+from tensorflow.python.ops import nn_ops\n+from tensorflow.python.platform import test\n+\n+\n+def build_graph(input_name, input_dims, output_name,\n+                add_quantization_nodes=False, dtype=dtypes.float32):\n+  def quantize(x, r):\n+    if add_quantization_nodes:\n+      x = tf.fake_quant_with_min_max_vars(x, -r, r)\n+    return x\n+  g = ops.Graph()\n+  with g.as_default():\n+    x = array_ops.placeholder(\n+        dtype=dtype, shape=[None] + input_dims[1:], name=input_name)\n+    x = quantize(x, 100)\n+    filt1 = constant_op.constant(\n+          0.3, shape=(3, 3, 1, 32), dtype=dtype, name='filt1')\n+    x = nn.conv2d(x, filt1, strides=[1, 1, 1, 1], padding='VALID')\n+    bias1 = constant_op.constant(0.3, shape=(32,), name=\"bias1\", dtype=dtype)\n+    x = nn.bias_add(x, bias1)\n+\n+    x = quantize(x, 6)\n+    x = nn.relu6(x)\n+    filt2 = constant_op.constant(\n+          0.3, shape=(3, 3, 32, 64), dtype=dtype, name='filt2')\n+    x = nn.conv2d(x, filt2, strides=[1, 1, 1, 1], padding='VALID')\n+    bias2 = constant_op.constant(0.3, shape=(64,), name=\"bias2\", dtype=dtype)\n+    x = nn.bias_add(x, bias2)\n+\n+    x = quantize(x, 6)\n+    x = nn.relu6(x)\n+    x = math_ops.reduce_mean(x, [1, 2])\n+    x = quantize(x, 6)\n+    # FC1\n+    fc_w1 = constant_op.constant(\n+          0.3, shape=(64, 512), dtype=dtype, name='fc_w1')\n+    x = math_ops.matmul(x, fc_w1)\n+    x = quantize(x, 6)\n+    fc_b1 = constant_op.constant(\n+          0.3, shape=(512,), dtype=dtype, name='fc_b1')\n+    x = nn.bias_add(x, fc_b1)\n+    x = quantize(x, 6)\n+    x = nn.relu6(x)\n+    # FC2\n+    fc_w2 = constant_op.constant(\n+          0.3, shape=(512, 10), dtype=dtype, name='fc_w2')\n+    x = math_ops.matmul(x, fc_w2)\n+    x = quantize(x, 25)\n+    fc_b2 = constant_op.constant(\n+          0.3, shape=(10,), dtype=dtype, name='fc_b2')\n+    x = nn.bias_add(x, fc_b2)\n+    x = quantize(x, 25)\n+    x = array_ops.identity(x, name=output_name)\n+  return g\n+\n+class QuantizationMissingAllRangesTest(trt_test.TfTrtIntegrationTestBase):\n+\n+  def GetParams(self):\n+    \"\"\"Create a graph containing single segment with no quantization ranges.\"\"\"\n+    input_name = \"input\"\n+    input_dims = [100, 28, 28, 1]\n+    output_name = \"output\"\n+    g = build_graph(input_name, input_dims, output_name,\n+                    add_quantization_nodes=False)\n+    return trt_test.TfTrtIntegrationTestParams(\n+        gdef=g.as_graph_def(),\n+        input_names=[input_name],\n+        input_dims=[input_dims],\n+        output_names=[output_name],\n+        expected_output_dims=[(100, 10)])\n+\n+  def ShouldRunTest(self, run_params):\n+    return (run_params.precision_mode == \"INT8\" and", "path": "tensorflow/contrib/tensorrt/test/quantization_test.py", "position": null, "original_position": 103, "commit_id": "c9774910f1e24b964f0a31fdbf98df472d92501b", "original_commit_id": "66637fc63fd69bfcc4344fa7b59e45c38e2dbf10", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "Will it crash at op execution time when `run_params.use_calibration == False` in this case?", "created_at": "2018-10-11T22:54:08Z", "updated_at": "2018-11-21T23:48:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22788#discussion_r224628538", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22788", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224628538"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22788#discussion_r224628538"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22788"}}, "body_html": "<p>Will it crash at op execution time when <code>run_params.use_calibration == False</code> in this case?</p>", "body_text": "Will it crash at op execution time when run_params.use_calibration == False in this case?"}