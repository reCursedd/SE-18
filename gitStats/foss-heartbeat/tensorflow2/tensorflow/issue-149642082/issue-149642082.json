{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2030", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2030/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2030/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2030/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2030", "id": 149642082, "node_id": "MDU6SXNzdWUxNDk2NDIwODI=", "number": 2030, "title": "Pass grid search params to TensorFlowEstimator custom model", "user": {"login": "waleedka", "id": 106472, "node_id": "MDQ6VXNlcjEwNjQ3Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/106472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waleedka", "html_url": "https://github.com/waleedka", "followers_url": "https://api.github.com/users/waleedka/followers", "following_url": "https://api.github.com/users/waleedka/following{/other_user}", "gists_url": "https://api.github.com/users/waleedka/gists{/gist_id}", "starred_url": "https://api.github.com/users/waleedka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waleedka/subscriptions", "organizations_url": "https://api.github.com/users/waleedka/orgs", "repos_url": "https://api.github.com/users/waleedka/repos", "events_url": "https://api.github.com/users/waleedka/events{/privacy}", "received_events_url": "https://api.github.com/users/waleedka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ilblackdragon", "id": 175486, "node_id": "MDQ6VXNlcjE3NTQ4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/175486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilblackdragon", "html_url": "https://github.com/ilblackdragon", "followers_url": "https://api.github.com/users/ilblackdragon/followers", "following_url": "https://api.github.com/users/ilblackdragon/following{/other_user}", "gists_url": "https://api.github.com/users/ilblackdragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilblackdragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilblackdragon/subscriptions", "organizations_url": "https://api.github.com/users/ilblackdragon/orgs", "repos_url": "https://api.github.com/users/ilblackdragon/repos", "events_url": "https://api.github.com/users/ilblackdragon/events{/privacy}", "received_events_url": "https://api.github.com/users/ilblackdragon/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ilblackdragon", "id": 175486, "node_id": "MDQ6VXNlcjE3NTQ4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/175486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilblackdragon", "html_url": "https://github.com/ilblackdragon", "followers_url": "https://api.github.com/users/ilblackdragon/followers", "following_url": "https://api.github.com/users/ilblackdragon/following{/other_user}", "gists_url": "https://api.github.com/users/ilblackdragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilblackdragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilblackdragon/subscriptions", "organizations_url": "https://api.github.com/users/ilblackdragon/orgs", "repos_url": "https://api.github.com/users/ilblackdragon/repos", "events_url": "https://api.github.com/users/ilblackdragon/events{/privacy}", "received_events_url": "https://api.github.com/users/ilblackdragon/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2016-04-20T03:02:06Z", "updated_at": "2017-02-09T22:37:24Z", "closed_at": "2016-10-28T04:21:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p>GridSearchCV is a great way to test and optimize hyper-parameters automatically. I use it with TensorFlowEstimator to optimize learning_rate, batch_size, ...etc. It would be a great addition if I can also use it to customize other parameters in my custom model.</p>\n<p>For example, say I have a custom model with a convnet and I want to optimize the stride value. This <strong>pseudo code</strong> explains what I'm trying to achieve.</p>\n<p><strong>I used a custom \"params\" input to the model function just as an example, not to imply that this is necessarily the right way to implement this feature.</strong></p>\n<pre><code># My custom model. \n# Feature request: New params dict with values filled by GridSearchCV\ndef cnn_model(X, Y, params):\n  stride = params['stride']\n  ... custom model definition here ...\n\n# Create the Convnet classifier\ncnn_classifier = learn.TensorFlowEstimator(model_fn=cnn_model)\n\n# Grid search on different stride values.\nparameters = {'stride': [1, 2, 3],}\ngrid_searcher = GridSearchCV(cnn_classifier, parameters)\ngrid_searcher.fit(X, Y)\n</code></pre>", "body_text": "GridSearchCV is a great way to test and optimize hyper-parameters automatically. I use it with TensorFlowEstimator to optimize learning_rate, batch_size, ...etc. It would be a great addition if I can also use it to customize other parameters in my custom model.\nFor example, say I have a custom model with a convnet and I want to optimize the stride value. This pseudo code explains what I'm trying to achieve.\nI used a custom \"params\" input to the model function just as an example, not to imply that this is necessarily the right way to implement this feature.\n# My custom model. \n# Feature request: New params dict with values filled by GridSearchCV\ndef cnn_model(X, Y, params):\n  stride = params['stride']\n  ... custom model definition here ...\n\n# Create the Convnet classifier\ncnn_classifier = learn.TensorFlowEstimator(model_fn=cnn_model)\n\n# Grid search on different stride values.\nparameters = {'stride': [1, 2, 3],}\ngrid_searcher = GridSearchCV(cnn_classifier, parameters)\ngrid_searcher.fit(X, Y)", "body": "GridSearchCV is a great way to test and optimize hyper-parameters automatically. I use it with TensorFlowEstimator to optimize learning_rate, batch_size, ...etc. It would be a great addition if I can also use it to customize other parameters in my custom model. \n\nFor example, say I have a custom model with a convnet and I want to optimize the stride value. This **pseudo code** explains what I'm trying to achieve. \n\n**I used a custom \"params\" input to the model function just as an example, not to imply that this is necessarily the right way to implement this feature.**\n\n```\n# My custom model. \n# Feature request: New params dict with values filled by GridSearchCV\ndef cnn_model(X, Y, params):\n  stride = params['stride']\n  ... custom model definition here ...\n\n# Create the Convnet classifier\ncnn_classifier = learn.TensorFlowEstimator(model_fn=cnn_model)\n\n# Grid search on different stride values.\nparameters = {'stride': [1, 2, 3],}\ngrid_searcher = GridSearchCV(cnn_classifier, parameters)\ngrid_searcher.fit(X, Y)\n```\n"}