{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17861", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17861/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17861/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17861/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17861", "id": 306885144, "node_id": "MDU6SXNzdWUzMDY4ODUxNDQ=", "number": 17861, "title": "RNN no learning when operation as node as opposed to fed as calculated values", "user": {"login": "peterHeuz", "id": 7074913, "node_id": "MDQ6VXNlcjcwNzQ5MTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7074913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterHeuz", "html_url": "https://github.com/peterHeuz", "followers_url": "https://api.github.com/users/peterHeuz/followers", "following_url": "https://api.github.com/users/peterHeuz/following{/other_user}", "gists_url": "https://api.github.com/users/peterHeuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterHeuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterHeuz/subscriptions", "organizations_url": "https://api.github.com/users/peterHeuz/orgs", "repos_url": "https://api.github.com/users/peterHeuz/repos", "events_url": "https://api.github.com/users/peterHeuz/events{/privacy}", "received_events_url": "https://api.github.com/users/peterHeuz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-03-20T14:17:55Z", "updated_at": "2018-06-12T13:36:11Z", "closed_at": "2018-05-26T18:37:55Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS Sierra 10.12.6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-19-ga52c8d9 1.4.1</li>\n<li><strong>Python version</strong>: 3.6.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>: na</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: na</li>\n<li><strong>CUDA/cuDNN version</strong>: na</li>\n<li><strong>GPU model and memory</strong>: na</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I have a RNN with variable sequence lengths. To get the last non-zero output i.e. the relevant output for each sample I have a function <code>last.relevant()</code> (see below). I define a node for this operation: <code>rel_output = self.last_relevant(outputs, seq_lengths)</code>. The odd thing is, I have to evaluate this node, save the results of it in a variable and feed it to the next operation which has a placeholder for the results of the <code>rel_output</code> node. Actually, I would expect the exactly same behaviour when I use the <code>rel_output</code> node to define a new node. But when I do, the training gets stuck after the second iteration and all gradients go to zero.</p>\n<p>This is really hard to track as no exceptions are raised, just the training getting stuck. I spent a couple of hours finding that bug.</p>\n<h3>Source code / logs</h3>\n<pre><code>def last_relevant(self, output, seq_length):\n    # the RNN returns outputs for every input unit, but we are just\n    # interested in the last one that is not zero\n    # author: Danijar Hafner\n    # (https://danijar.com/variable-sequence-lengths-in-tensorflow/)\n    batch_size = tf.shape(output)[0]\n    max_length = tf.shape(output)[1]\n    out_size = int(output.get_shape()[2])\n    index = tf.range(0, batch_size) * max_length + (seq_length - 1)\n    flat = tf.reshape(output, [-1, out_size])\n    relevant = tf.gather(flat, index)\n    return relevant\n</code></pre>\n<h4>Training working fine</h4>\n<pre><code>    rel_output = self.last_relevant(outputs, seq_lengths)\n    last_nonzero_output = tf.placeholder(\"float\", [n_samples, self.n_hidden])\n    pred = tf.nn.softmax(tf.tanh(tf.matmul(last_nonzero_output, self.weights['out']) + self.biases['out']))\n\n    ro = session.run(rel_output, feed_dict={x: data})\n    _ = session.run([optimizer], feed_dict={last_nonzero_output: ro, y: labels_oh})\n</code></pre>\n<h4>Training getting stuck</h4>\n<pre><code>    rel_output = self.last_relevant(outputs, seq_lengths)        \n    pred = tf.nn.softmax(tf.tanh(tf.matmul(rel_output, self.weights['out']) + self.biases['out']))\n\n   _ = session.run([optimizer], feed_dict={x: data, y: labels_oh})\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Sierra 10.12.6\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.4.0-19-ga52c8d9 1.4.1\nPython version: 3.6.3\nBazel version (if compiling from source): na\nGCC/Compiler version (if compiling from source): na\nCUDA/cuDNN version: na\nGPU model and memory: na\nExact command to reproduce:\n\nDescribe the problem\nI have a RNN with variable sequence lengths. To get the last non-zero output i.e. the relevant output for each sample I have a function last.relevant() (see below). I define a node for this operation: rel_output = self.last_relevant(outputs, seq_lengths). The odd thing is, I have to evaluate this node, save the results of it in a variable and feed it to the next operation which has a placeholder for the results of the rel_output node. Actually, I would expect the exactly same behaviour when I use the rel_output node to define a new node. But when I do, the training gets stuck after the second iteration and all gradients go to zero.\nThis is really hard to track as no exceptions are raised, just the training getting stuck. I spent a couple of hours finding that bug.\nSource code / logs\ndef last_relevant(self, output, seq_length):\n    # the RNN returns outputs for every input unit, but we are just\n    # interested in the last one that is not zero\n    # author: Danijar Hafner\n    # (https://danijar.com/variable-sequence-lengths-in-tensorflow/)\n    batch_size = tf.shape(output)[0]\n    max_length = tf.shape(output)[1]\n    out_size = int(output.get_shape()[2])\n    index = tf.range(0, batch_size) * max_length + (seq_length - 1)\n    flat = tf.reshape(output, [-1, out_size])\n    relevant = tf.gather(flat, index)\n    return relevant\n\nTraining working fine\n    rel_output = self.last_relevant(outputs, seq_lengths)\n    last_nonzero_output = tf.placeholder(\"float\", [n_samples, self.n_hidden])\n    pred = tf.nn.softmax(tf.tanh(tf.matmul(last_nonzero_output, self.weights['out']) + self.biases['out']))\n\n    ro = session.run(rel_output, feed_dict={x: data})\n    _ = session.run([optimizer], feed_dict={last_nonzero_output: ro, y: labels_oh})\n\nTraining getting stuck\n    rel_output = self.last_relevant(outputs, seq_lengths)        \n    pred = tf.nn.softmax(tf.tanh(tf.matmul(rel_output, self.weights['out']) + self.biases['out']))\n\n   _ = session.run([optimizer], feed_dict={x: data, y: labels_oh})", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS Sierra 10.12.6\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.4.0-19-ga52c8d9 1.4.1\r\n- **Python version**: 3.6.3\r\n- **Bazel version (if compiling from source)**: na\r\n- **GCC/Compiler version (if compiling from source)**: na\r\n- **CUDA/cuDNN version**: na\r\n- **GPU model and memory**: na\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nI have a RNN with variable sequence lengths. To get the last non-zero output i.e. the relevant output for each sample I have a function `last.relevant()` (see below). I define a node for this operation: `rel_output = self.last_relevant(outputs, seq_lengths)`. The odd thing is, I have to evaluate this node, save the results of it in a variable and feed it to the next operation which has a placeholder for the results of the `rel_output` node. Actually, I would expect the exactly same behaviour when I use the `rel_output` node to define a new node. But when I do, the training gets stuck after the second iteration and all gradients go to zero.\r\n\r\nThis is really hard to track as no exceptions are raised, just the training getting stuck. I spent a couple of hours finding that bug.\r\n\r\n### Source code / logs\r\n\r\n    def last_relevant(self, output, seq_length):\r\n        # the RNN returns outputs for every input unit, but we are just\r\n        # interested in the last one that is not zero\r\n        # author: Danijar Hafner\r\n        # (https://danijar.com/variable-sequence-lengths-in-tensorflow/)\r\n        batch_size = tf.shape(output)[0]\r\n        max_length = tf.shape(output)[1]\r\n        out_size = int(output.get_shape()[2])\r\n        index = tf.range(0, batch_size) * max_length + (seq_length - 1)\r\n        flat = tf.reshape(output, [-1, out_size])\r\n        relevant = tf.gather(flat, index)\r\n        return relevant\r\n\r\n#### Training working fine\r\n        rel_output = self.last_relevant(outputs, seq_lengths)\r\n        last_nonzero_output = tf.placeholder(\"float\", [n_samples, self.n_hidden])\r\n        pred = tf.nn.softmax(tf.tanh(tf.matmul(last_nonzero_output, self.weights['out']) + self.biases['out']))\r\n\r\n        ro = session.run(rel_output, feed_dict={x: data})\r\n        _ = session.run([optimizer], feed_dict={last_nonzero_output: ro, y: labels_oh})\r\n\r\n#### Training getting stuck\r\n        rel_output = self.last_relevant(outputs, seq_lengths)        \r\n        pred = tf.nn.softmax(tf.tanh(tf.matmul(rel_output, self.weights['out']) + self.biases['out']))\r\n\r\n       _ = session.run([optimizer], feed_dict={x: data, y: labels_oh})"}