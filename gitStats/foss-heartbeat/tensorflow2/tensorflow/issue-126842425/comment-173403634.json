{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/173403634", "html_url": "https://github.com/tensorflow/tensorflow/issues/783#issuecomment-173403634", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/783", "id": 173403634, "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzQwMzYzNA==", "user": {"login": "joshburkart", "id": 3888181, "node_id": "MDQ6VXNlcjM4ODgxODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3888181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshburkart", "html_url": "https://github.com/joshburkart", "followers_url": "https://api.github.com/users/joshburkart/followers", "following_url": "https://api.github.com/users/joshburkart/following{/other_user}", "gists_url": "https://api.github.com/users/joshburkart/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshburkart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshburkart/subscriptions", "organizations_url": "https://api.github.com/users/joshburkart/orgs", "repos_url": "https://api.github.com/users/joshburkart/repos", "events_url": "https://api.github.com/users/joshburkart/events{/privacy}", "received_events_url": "https://api.github.com/users/joshburkart/received_events", "type": "User", "site_admin": false}, "created_at": "2016-01-20T23:39:54Z", "updated_at": "2016-01-20T23:39:54Z", "author_association": "NONE", "body_html": "<p>If it's called \"gradients\" then I expect it to compute gradients... The gradient of e.g. 5 with respect to some vector v is most certainly the zero vector.</p>\n<p>Also just from a practicality standpoint, you should be able to compute gradients and then perform mathematical operations with them without having to worry about something unexpectedly becoming a non-<code>Tensor</code> and causing an exception to be raised. In some TF code I wrote recently I had to make the following function to avoid this bug:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">_compute_gradients</span>(<span class=\"pl-smi\">tensor</span>, <span class=\"pl-smi\">var_list</span>):\n  grads <span class=\"pl-k\">=</span> tf.gradients(tensor, var_list)\n  <span class=\"pl-k\">return</span> [grad <span class=\"pl-k\">if</span> grad <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">else</span> tf.zeros_like(var)\n          <span class=\"pl-k\">for</span> var, grad <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(var_list, grads)]</pre></div>", "body_text": "If it's called \"gradients\" then I expect it to compute gradients... The gradient of e.g. 5 with respect to some vector v is most certainly the zero vector.\nAlso just from a practicality standpoint, you should be able to compute gradients and then perform mathematical operations with them without having to worry about something unexpectedly becoming a non-Tensor and causing an exception to be raised. In some TF code I wrote recently I had to make the following function to avoid this bug:\ndef _compute_gradients(tensor, var_list):\n  grads = tf.gradients(tensor, var_list)\n  return [grad if grad is not None else tf.zeros_like(var)\n          for var, grad in zip(var_list, grads)]", "body": "If it's called \"gradients\" then I expect it to compute gradients... The gradient of e.g. 5 with respect to some vector v is most certainly the zero vector.\n\nAlso just from a practicality standpoint, you should be able to compute gradients and then perform mathematical operations with them without having to worry about something unexpectedly becoming a non-`Tensor` and causing an exception to be raised. In some TF code I wrote recently I had to make the following function to avoid this bug:\n\n``` python\ndef _compute_gradients(tensor, var_list):\n  grads = tf.gradients(tensor, var_list)\n  return [grad if grad is not None else tf.zeros_like(var)\n          for var, grad in zip(var_list, grads)]\n```\n"}