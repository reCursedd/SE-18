{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/415318379", "html_url": "https://github.com/tensorflow/tensorflow/issues/21800#issuecomment-415318379", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21800", "id": 415318379, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTMxODM3OQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-23T07:25:11Z", "updated_at": "2018-08-23T07:25:37Z", "author_association": "MEMBER", "body_html": "<p>No, it shouldn't have anything to do with being a GPU op, shape inference should work regardless. You probably actually want something like:</p>\n<div class=\"highlight highlight-source-c++\"><pre>        ::tensorflow::shape_inference::ShapeHandle dims1; \n        <span class=\"pl-en\">TF_RETURN_IF_ERROR</span>(c-&gt;<span class=\"pl-en\">WithRank</span>(c-&gt;<span class=\"pl-en\">input</span>(<span class=\"pl-c1\">0</span>), 2, &amp;dims1));\n        ::tensorflow::shape_inference::ShapeHandle dims2; \n        <span class=\"pl-en\">TF_RETURN_IF_ERROR</span>(c-&gt;<span class=\"pl-en\">WithRank</span>(c-&gt;<span class=\"pl-en\">input</span>(<span class=\"pl-c1\">1</span>), 1, &amp;dims2));\n        ::tensorflow::shape_inference::ShapeHandle dims3; \n        <span class=\"pl-en\">TF_RETURN_IF_ERROR</span>(c-&gt;<span class=\"pl-en\">WithRank</span>(c-&gt;<span class=\"pl-en\">input</span>(<span class=\"pl-c1\">2</span>), 0, &amp;dims3));\n        ::tensorflow::shape_inference::ShapeHandle output = c-&gt;<span class=\"pl-en\">MakeShape</span>({c-&gt;<span class=\"pl-c1\">UnknownDim</span>(), c-&gt;<span class=\"pl-c1\">Dim</span>(dims2, <span class=\"pl-c1\">2</span>)});\n        c-&gt;<span class=\"pl-en\">set_output</span>(<span class=\"pl-c1\">0</span>, output); \n        <span class=\"pl-k\">return</span> Status::OK();</pre></div>", "body_text": "No, it shouldn't have anything to do with being a GPU op, shape inference should work regardless. You probably actually want something like:\n        ::tensorflow::shape_inference::ShapeHandle dims1; \n        TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &dims1));\n        ::tensorflow::shape_inference::ShapeHandle dims2; \n        TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &dims2));\n        ::tensorflow::shape_inference::ShapeHandle dims3; \n        TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &dims3));\n        ::tensorflow::shape_inference::ShapeHandle output = c->MakeShape({c->UnknownDim(), c->Dim(dims2, 2)});\n        c->set_output(0, output); \n        return Status::OK();", "body": "No, it shouldn't have anything to do with being a GPU op, shape inference should work regardless. You probably actually want something like:\r\n\r\n```c++\r\n        ::tensorflow::shape_inference::ShapeHandle dims1; \r\n        TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &dims1));\r\n        ::tensorflow::shape_inference::ShapeHandle dims2; \r\n        TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &dims2));\r\n        ::tensorflow::shape_inference::ShapeHandle dims3; \r\n        TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &dims3));\r\n        ::tensorflow::shape_inference::ShapeHandle output = c->MakeShape({c->UnknownDim(), c->Dim(dims2, 2)});\r\n        c->set_output(0, output); \r\n        return Status::OK();\r\n```"}