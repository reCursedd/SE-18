{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2450", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2450/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2450/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2450/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2450", "id": 156081324, "node_id": "MDU6SXNzdWUxNTYwODEzMjQ=", "number": 2450, "title": "gradient check", "user": {"login": "IvenHsu", "id": 7886092, "node_id": "MDQ6VXNlcjc4ODYwOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7886092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IvenHsu", "html_url": "https://github.com/IvenHsu", "followers_url": "https://api.github.com/users/IvenHsu/followers", "following_url": "https://api.github.com/users/IvenHsu/following{/other_user}", "gists_url": "https://api.github.com/users/IvenHsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/IvenHsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IvenHsu/subscriptions", "organizations_url": "https://api.github.com/users/IvenHsu/orgs", "repos_url": "https://api.github.com/users/IvenHsu/repos", "events_url": "https://api.github.com/users/IvenHsu/events{/privacy}", "received_events_url": "https://api.github.com/users/IvenHsu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-21T03:31:32Z", "updated_at": "2016-05-21T05:15:46Z", "closed_at": "2016-05-21T05:15:45Z", "author_association": "NONE", "body_html": "<p>Hi I have some problem to write new tensorflow op.<br><br>\nI use tf.test.compute_gradient_error to write the test case. <br><br>\nAnd get the error <br><br>\nThe error message <br></p>\n<blockquote>\n<p>FAIL: test_grad (<strong>main</strong>.ZeroOut2Test) Traceback (most recent call<br>\nlast):   File \"test_case.py\", line 42, in test_grad<br>\nself.assertLess(err, 1e-4) AssertionError: 0.0072760284 not less than 0.0001</p>\n</blockquote>\n<p>I already differential on f(data,truthdata).<br>\nHow to write correct gradient calculate?<br></p>\n<p>The op have two inputs and two output.<br><br>\nInput1 data<br><br>\nInput2 truthdata<br><br>\noutput1 loss<br><br>\noutput2 delta(gradient)<br><br>\n<br><br>\nHere is the op code</p>\n<pre><code>#include \"tensorflow/core/framework/op.h\"\n\nREGISTER_OP(\"DetectionOut\")\n    .Attr(\"T: {float}\")\n    .Input(\"detect: T\")\n    .Input(\"truthdata: T\")\n    .Output(\"loss: T\")\n    .Output(\"delta: T\");\n\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n\nusing namespace tensorflow;\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate &lt;typename Device, typename T&gt;\nclass DetectionOutOp : public OpKernel {\n public:\n  explicit DetectionOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor&amp; input_tensor = context-&gt;input(0);\n    auto PreDetection = input_tensor.flat&lt;T&gt;();\n\n    const Tensor&amp; input_tensor1 = context-&gt;input(1);\n    auto TruthData = input_tensor1.flat&lt;T&gt;();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context-&gt;allocate_output(0, TensorShape({input_tensor.dim_size(0)}),\n                                                     &amp;output_tensor));\n    auto loss = output_tensor-&gt;template flat&lt;T&gt;().setZero();\n\n    Tensor* output_tensor1 = NULL;\n    OP_REQUIRES_OK(context, context-&gt;allocate_output(1, input_tensor.shape(),\n                                                     &amp;output_tensor1));\n    auto back_detl = output_tensor1-&gt;template flat&lt;T&gt;().setZero();\n\n    const int N = PreDetection.size();\n\n    const int64 batch_size_ =  input_tensor.dim_size(0);\n    const int64 bottom_count_ = input_tensor.dim_size(1);\n    int b,i;\n    for (b = 0; b &lt; batch_size_ ; ++b){\n        int index = b * bottom_count_;\n        for (i = 0; i &lt; bottom_count_; ++i) {\n            loss(b) +=  pow(PreDetection(index+i)-TruthData(index+i), 2);\n            back_detl(index+i) = 2 *(PreDetection(index+i) - TruthData(index+i));\n        }\n    }\n  }\n};\n\n#define REGISTER_KERNEL(T)                                      \\\n  REGISTER_KERNEL_BUILDER(                                      \\\n      Name(\"DetectionOut\").Device(DEVICE_CPU).TypeConstraint&lt;T&gt;(\"T\"), \\\n      DetectionOutOp&lt;CPUDevice, T&gt;);\n\nREGISTER_KERNEL(float);\n#undef REGISTER_KERNEL\n</code></pre>\n<p>Here is TestCase.py<br><br>\nimport tensorflow as tf<br>\nimport numpy as np</p>\n<pre><code>from tensorflow.python.framework import ops\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import sparse_ops\n\nD2Test = np.zeros((2,7*7*(15)),float) \nD2Truth = np.zeros((2,7*7*(15)),float) \n\nitems = 1\ncoord = 4\nnum = 2\nclass_num = 5\nlocalsize = 49\n\nobject_index = (class_num) * localsize + items\ntobject_index = (class_num) * localsize + items\n\nD2Truth[0,tobject_index] = 1.0\nD2Test[0,object_index] = 0.5\n\n\n@ops.RegisterGradient(\"DetectionOut\")\ndef _detection_out_grad(op, grad, grad1):\n  mat = op.outputs[1]\n  vec = array_ops.expand_dims(grad, -1)\n  vec = vec * mat\n  return [vec, None]\n\ndetection_module = tf.load_op_library('detection.so')\n\nclass ZeroOut2Test(tf.test.TestCase):\n  def test_grad(self):\n    with self.test_session():\n      shape=(2,7*7*(15))\n      shape1=(2,)\n      x = tf.constant(D2Test, dtype=tf.float32)\n      y = tf.constant(D2Truth, dtype=tf.float32)\n      result = detection_module.detection_out(x,y)\n      err = tf.test.compute_gradient_error(x, shape, result[0], shape1)\n      self.assertLess(err, 1e-4)\n\nif __name__ == '__main__':\n  tf.test.main()\n</code></pre>\n<p>Thanks for help to correct my errors</p>", "body_text": "Hi I have some problem to write new tensorflow op.\nI use tf.test.compute_gradient_error to write the test case. \nAnd get the error \nThe error message \n\nFAIL: test_grad (main.ZeroOut2Test) Traceback (most recent call\nlast):   File \"test_case.py\", line 42, in test_grad\nself.assertLess(err, 1e-4) AssertionError: 0.0072760284 not less than 0.0001\n\nI already differential on f(data,truthdata).\nHow to write correct gradient calculate?\nThe op have two inputs and two output.\nInput1 data\nInput2 truthdata\noutput1 loss\noutput2 delta(gradient)\n\nHere is the op code\n#include \"tensorflow/core/framework/op.h\"\n\nREGISTER_OP(\"DetectionOut\")\n    .Attr(\"T: {float}\")\n    .Input(\"detect: T\")\n    .Input(\"truthdata: T\")\n    .Output(\"loss: T\")\n    .Output(\"delta: T\");\n\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n\nusing namespace tensorflow;\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate <typename Device, typename T>\nclass DetectionOutOp : public OpKernel {\n public:\n  explicit DetectionOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor& input_tensor = context->input(0);\n    auto PreDetection = input_tensor.flat<T>();\n\n    const Tensor& input_tensor1 = context->input(1);\n    auto TruthData = input_tensor1.flat<T>();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(0, TensorShape({input_tensor.dim_size(0)}),\n                                                     &output_tensor));\n    auto loss = output_tensor->template flat<T>().setZero();\n\n    Tensor* output_tensor1 = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(1, input_tensor.shape(),\n                                                     &output_tensor1));\n    auto back_detl = output_tensor1->template flat<T>().setZero();\n\n    const int N = PreDetection.size();\n\n    const int64 batch_size_ =  input_tensor.dim_size(0);\n    const int64 bottom_count_ = input_tensor.dim_size(1);\n    int b,i;\n    for (b = 0; b < batch_size_ ; ++b){\n        int index = b * bottom_count_;\n        for (i = 0; i < bottom_count_; ++i) {\n            loss(b) +=  pow(PreDetection(index+i)-TruthData(index+i), 2);\n            back_detl(index+i) = 2 *(PreDetection(index+i) - TruthData(index+i));\n        }\n    }\n  }\n};\n\n#define REGISTER_KERNEL(T)                                      \\\n  REGISTER_KERNEL_BUILDER(                                      \\\n      Name(\"DetectionOut\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      DetectionOutOp<CPUDevice, T>);\n\nREGISTER_KERNEL(float);\n#undef REGISTER_KERNEL\n\nHere is TestCase.py\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import sparse_ops\n\nD2Test = np.zeros((2,7*7*(15)),float) \nD2Truth = np.zeros((2,7*7*(15)),float) \n\nitems = 1\ncoord = 4\nnum = 2\nclass_num = 5\nlocalsize = 49\n\nobject_index = (class_num) * localsize + items\ntobject_index = (class_num) * localsize + items\n\nD2Truth[0,tobject_index] = 1.0\nD2Test[0,object_index] = 0.5\n\n\n@ops.RegisterGradient(\"DetectionOut\")\ndef _detection_out_grad(op, grad, grad1):\n  mat = op.outputs[1]\n  vec = array_ops.expand_dims(grad, -1)\n  vec = vec * mat\n  return [vec, None]\n\ndetection_module = tf.load_op_library('detection.so')\n\nclass ZeroOut2Test(tf.test.TestCase):\n  def test_grad(self):\n    with self.test_session():\n      shape=(2,7*7*(15))\n      shape1=(2,)\n      x = tf.constant(D2Test, dtype=tf.float32)\n      y = tf.constant(D2Truth, dtype=tf.float32)\n      result = detection_module.detection_out(x,y)\n      err = tf.test.compute_gradient_error(x, shape, result[0], shape1)\n      self.assertLess(err, 1e-4)\n\nif __name__ == '__main__':\n  tf.test.main()\n\nThanks for help to correct my errors", "body": "Hi I have some problem to write new tensorflow op.<br>\nI use tf.test.compute_gradient_error to write the test case. <br>\nAnd get the error <br>\nThe error message <br>\n\n> FAIL: test_grad (**main**.ZeroOut2Test) Traceback (most recent call\n> last):   File \"test_case.py\", line 42, in test_grad\n>     self.assertLess(err, 1e-4) AssertionError: 0.0072760284 not less than 0.0001\n\nI already differential on f(data,truthdata).\nHow to write correct gradient calculate?<br>\n\nThe op have two inputs and two output.<br>\nInput1 data<br>\nInput2 truthdata<br>\noutput1 loss<br>\noutput2 delta(gradient)<br>\n<br>\nHere is the op code\n\n```\n#include \"tensorflow/core/framework/op.h\"\n\nREGISTER_OP(\"DetectionOut\")\n    .Attr(\"T: {float}\")\n    .Input(\"detect: T\")\n    .Input(\"truthdata: T\")\n    .Output(\"loss: T\")\n    .Output(\"delta: T\");\n\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n\nusing namespace tensorflow;\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\ntemplate <typename Device, typename T>\nclass DetectionOutOp : public OpKernel {\n public:\n  explicit DetectionOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor& input_tensor = context->input(0);\n    auto PreDetection = input_tensor.flat<T>();\n\n    const Tensor& input_tensor1 = context->input(1);\n    auto TruthData = input_tensor1.flat<T>();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(0, TensorShape({input_tensor.dim_size(0)}),\n                                                     &output_tensor));\n    auto loss = output_tensor->template flat<T>().setZero();\n\n    Tensor* output_tensor1 = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(1, input_tensor.shape(),\n                                                     &output_tensor1));\n    auto back_detl = output_tensor1->template flat<T>().setZero();\n\n    const int N = PreDetection.size();\n\n    const int64 batch_size_ =  input_tensor.dim_size(0);\n    const int64 bottom_count_ = input_tensor.dim_size(1);\n    int b,i;\n    for (b = 0; b < batch_size_ ; ++b){\n        int index = b * bottom_count_;\n        for (i = 0; i < bottom_count_; ++i) {\n            loss(b) +=  pow(PreDetection(index+i)-TruthData(index+i), 2);\n            back_detl(index+i) = 2 *(PreDetection(index+i) - TruthData(index+i));\n        }\n    }\n  }\n};\n\n#define REGISTER_KERNEL(T)                                      \\\n  REGISTER_KERNEL_BUILDER(                                      \\\n      Name(\"DetectionOut\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      DetectionOutOp<CPUDevice, T>);\n\nREGISTER_KERNEL(float);\n#undef REGISTER_KERNEL\n```\n\nHere is TestCase.py<br>\n    import tensorflow as tf\n    import numpy as np\n\n```\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import sparse_ops\n\nD2Test = np.zeros((2,7*7*(15)),float) \nD2Truth = np.zeros((2,7*7*(15)),float) \n\nitems = 1\ncoord = 4\nnum = 2\nclass_num = 5\nlocalsize = 49\n\nobject_index = (class_num) * localsize + items\ntobject_index = (class_num) * localsize + items\n\nD2Truth[0,tobject_index] = 1.0\nD2Test[0,object_index] = 0.5\n\n\n@ops.RegisterGradient(\"DetectionOut\")\ndef _detection_out_grad(op, grad, grad1):\n  mat = op.outputs[1]\n  vec = array_ops.expand_dims(grad, -1)\n  vec = vec * mat\n  return [vec, None]\n\ndetection_module = tf.load_op_library('detection.so')\n\nclass ZeroOut2Test(tf.test.TestCase):\n  def test_grad(self):\n    with self.test_session():\n      shape=(2,7*7*(15))\n      shape1=(2,)\n      x = tf.constant(D2Test, dtype=tf.float32)\n      y = tf.constant(D2Truth, dtype=tf.float32)\n      result = detection_module.detection_out(x,y)\n      err = tf.test.compute_gradient_error(x, shape, result[0], shape1)\n      self.assertLess(err, 1e-4)\n\nif __name__ == '__main__':\n  tf.test.main()\n```\n\nThanks for help to correct my errors\n"}