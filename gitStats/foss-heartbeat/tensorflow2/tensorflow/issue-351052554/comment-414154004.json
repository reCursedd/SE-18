{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/414154004", "html_url": "https://github.com/tensorflow/tensorflow/issues/21648#issuecomment-414154004", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21648", "id": 414154004, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDE1NDAwNA==", "user": {"login": "Philipp91", "id": 2501211, "node_id": "MDQ6VXNlcjI1MDEyMTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2501211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Philipp91", "html_url": "https://github.com/Philipp91", "followers_url": "https://api.github.com/users/Philipp91/followers", "following_url": "https://api.github.com/users/Philipp91/following{/other_user}", "gists_url": "https://api.github.com/users/Philipp91/gists{/gist_id}", "starred_url": "https://api.github.com/users/Philipp91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Philipp91/subscriptions", "organizations_url": "https://api.github.com/users/Philipp91/orgs", "repos_url": "https://api.github.com/users/Philipp91/repos", "events_url": "https://api.github.com/users/Philipp91/events{/privacy}", "received_events_url": "https://api.github.com/users/Philipp91/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-19T20:35:33Z", "updated_at": "2018-08-19T20:35:33Z", "author_association": "NONE", "body_html": "<p>Sorry, I don't know the answer to this. I have refactored the code at two separate occasions: when I moved it from loader.cc to reader.cc, and when I changed the error reporting (the latter might not even be submitted yet?).<br>\nThe <code>io::JoinPath()</code> call has been there before and in the same way.</p>\n<p>My personal uninformed opinion about this:<br>\nSymlinks are an artifact of the underlying filesystem, everything should work fine if the TensorFlow code doesn't deal with them. Yes, it does look at <code>&lt;symlink&gt;/saved_model.pb</code>, and that's just as logical as the other version. I don't see why this would cause it to \"fail to find the kSavedModelFilenamePb\", that's still a valid file path even if it goes through the symlink.</p>\n<p>The standard solution for continuous training and serving is to have the training create epoch directories with numerically/alphabetically increasing names. Then the serving process can <code>ls</code> the directory (or even a symlink) periodically and pick the latest one to load.</p>\n<p>If you absolutely want to keep pointing a symlink to the latest version, but need the path to be fixed to the resolved target when the model is loaded, couldn't you do the symlink resolution in your own code, and then pass the resolved path to the <code>export_dir</code> parameter?</p>", "body_text": "Sorry, I don't know the answer to this. I have refactored the code at two separate occasions: when I moved it from loader.cc to reader.cc, and when I changed the error reporting (the latter might not even be submitted yet?).\nThe io::JoinPath() call has been there before and in the same way.\nMy personal uninformed opinion about this:\nSymlinks are an artifact of the underlying filesystem, everything should work fine if the TensorFlow code doesn't deal with them. Yes, it does look at <symlink>/saved_model.pb, and that's just as logical as the other version. I don't see why this would cause it to \"fail to find the kSavedModelFilenamePb\", that's still a valid file path even if it goes through the symlink.\nThe standard solution for continuous training and serving is to have the training create epoch directories with numerically/alphabetically increasing names. Then the serving process can ls the directory (or even a symlink) periodically and pick the latest one to load.\nIf you absolutely want to keep pointing a symlink to the latest version, but need the path to be fixed to the resolved target when the model is loaded, couldn't you do the symlink resolution in your own code, and then pass the resolved path to the export_dir parameter?", "body": "Sorry, I don't know the answer to this. I have refactored the code at two separate occasions: when I moved it from loader.cc to reader.cc, and when I changed the error reporting (the latter might not even be submitted yet?).\r\nThe `io::JoinPath()` call has been there before and in the same way.\r\n\r\nMy personal uninformed opinion about this:\r\nSymlinks are an artifact of the underlying filesystem, everything should work fine if the TensorFlow code doesn't deal with them. Yes, it does look at `<symlink>/saved_model.pb`, and that's just as logical as the other version. I don't see why this would cause it to \"fail to find the kSavedModelFilenamePb\", that's still a valid file path even if it goes through the symlink.\r\n\r\nThe standard solution for continuous training and serving is to have the training create epoch directories with numerically/alphabetically increasing names. Then the serving process can `ls` the directory (or even a symlink) periodically and pick the latest one to load.\r\n\r\nIf you absolutely want to keep pointing a symlink to the latest version, but need the path to be fixed to the resolved target when the model is loaded, couldn't you do the symlink resolution in your own code, and then pass the resolved path to the `export_dir` parameter?"}