{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/242967108", "html_url": "https://github.com/tensorflow/tensorflow/issues/3748#issuecomment-242967108", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3748", "id": 242967108, "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjk2NzEwOA==", "user": {"login": "florijanstamenkovic", "id": 7459588, "node_id": "MDQ6VXNlcjc0NTk1ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7459588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/florijanstamenkovic", "html_url": "https://github.com/florijanstamenkovic", "followers_url": "https://api.github.com/users/florijanstamenkovic/followers", "following_url": "https://api.github.com/users/florijanstamenkovic/following{/other_user}", "gists_url": "https://api.github.com/users/florijanstamenkovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/florijanstamenkovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/florijanstamenkovic/subscriptions", "organizations_url": "https://api.github.com/users/florijanstamenkovic/orgs", "repos_url": "https://api.github.com/users/florijanstamenkovic/repos", "events_url": "https://api.github.com/users/florijanstamenkovic/events{/privacy}", "received_events_url": "https://api.github.com/users/florijanstamenkovic/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-28T10:20:19Z", "updated_at": "2016-08-28T10:20:19Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=684901\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lukaszkaiser\">@lukaszkaiser</a>, I am looking at tensor names, not variable names.</p>\n<p>Refering to the example above. Two tensors are created with the <code>train</code> name_scope and added to the ACTIVATIONS collection. When looking at the contents of that collection it can be seen that the <code>Flatten</code> tensor's <code>NamedOutput.name</code> becomes <code>train/Flatten</code>. This obeys name scoping and matches the name attribute of the tensor itself (<code>NamedOutput.outputs.name</code>). However, the <code>fully_connected</code> tensor's <code>NamedOutput.name</code> is just <code>fully_connected</code>, instead of <code>train/fully_connected</code>. That does not obey name scoping, and differs from the actual tensor's name attribute which does obey name scoping.</p>\n<p>I would expect that the <code>NamedOutputs.name</code> attribute for a fully_connected tensor respects name_scope and thus reflects the actual tensor's name attribute.</p>\n<p>Tracking that down in TF source reference in the original description, it can be seen that tensors which use internal variables (such as fully_connect and conv2d) are using variable scopes when creating <code>NamedOutputs</code>, which seems a bug.</p>\n<p>I have modified the original example where I inappropriately named some variables, it should be less confusing now. Sorry about that.</p>", "body_text": "@lukaszkaiser, I am looking at tensor names, not variable names.\nRefering to the example above. Two tensors are created with the train name_scope and added to the ACTIVATIONS collection. When looking at the contents of that collection it can be seen that the Flatten tensor's NamedOutput.name becomes train/Flatten. This obeys name scoping and matches the name attribute of the tensor itself (NamedOutput.outputs.name). However, the fully_connected tensor's NamedOutput.name is just fully_connected, instead of train/fully_connected. That does not obey name scoping, and differs from the actual tensor's name attribute which does obey name scoping.\nI would expect that the NamedOutputs.name attribute for a fully_connected tensor respects name_scope and thus reflects the actual tensor's name attribute.\nTracking that down in TF source reference in the original description, it can be seen that tensors which use internal variables (such as fully_connect and conv2d) are using variable scopes when creating NamedOutputs, which seems a bug.\nI have modified the original example where I inappropriately named some variables, it should be less confusing now. Sorry about that.", "body": "@lukaszkaiser, I am looking at tensor names, not variable names.\n\nRefering to the example above. Two tensors are created with the `train` name_scope and added to the ACTIVATIONS collection. When looking at the contents of that collection it can be seen that the `Flatten` tensor's `NamedOutput.name` becomes `train/Flatten`. This obeys name scoping and matches the name attribute of the tensor itself (`NamedOutput.outputs.name`). However, the `fully_connected` tensor's `NamedOutput.name` is just `fully_connected`, instead of `train/fully_connected`. That does not obey name scoping, and differs from the actual tensor's name attribute which does obey name scoping.\n\nI would expect that the `NamedOutputs.name` attribute for a fully_connected tensor respects name_scope and thus reflects the actual tensor's name attribute.\n\nTracking that down in TF source reference in the original description, it can be seen that tensors which use internal variables (such as fully_connect and conv2d) are using variable scopes when creating `NamedOutputs`, which seems a bug.\n\nI have modified the original example where I inappropriately named some variables, it should be less confusing now. Sorry about that.\n"}