{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/354505872", "html_url": "https://github.com/tensorflow/tensorflow/issues/15682#issuecomment-354505872", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15682", "id": 354505872, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDUwNTg3Mg==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-29T22:05:16Z", "updated_at": "2017-12-29T22:05:16Z", "author_association": "MEMBER", "body_html": "<p>Right, as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=28866047\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/traveller59\">@traveller59</a> pointed out - <code>implicit_value_and_gradients</code> can compute gradients only for operations that are recorded, and it only records what happens inside the function. When you use <code>v_add_1</code>, the <code>loss()</code> function is operating on the <code>Tensor</code> <code>v_add_1</code>, which is effectively a constant value (1 + the value of the variable at the time v_add_1 was created).</p>\n<p>If you'd like finer grained control over what is recorded, consider using <code>tfe.GradientTape</code> for something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tfe.GradientTape() <span class=\"pl-k\">as</span> g:\n  v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>v<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>., <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n  v_add_1 <span class=\"pl-k\">=</span> v <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>\n  loss <span class=\"pl-k\">=</span> v_add_1 <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\ndloss <span class=\"pl-k\">=</span> g.gradient(loss, [u, v])</pre></div>\n<p>Closing this out since this is intended behavior of <code>implicit_value_and_gradients</code>.</p>\n<p>FYI <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a></p>", "body_text": "Right, as @traveller59 pointed out - implicit_value_and_gradients can compute gradients only for operations that are recorded, and it only records what happens inside the function. When you use v_add_1, the loss() function is operating on the Tensor v_add_1, which is effectively a constant value (1 + the value of the variable at the time v_add_1 was created).\nIf you'd like finer grained control over what is recorded, consider using tfe.GradientTape for something like:\nwith tfe.GradientTape() as g:\n  v = tf.get_variable(name='v', initializer=1., trainable=True)\n  v_add_1 = v + 1\n  loss = v_add_1 * 2\ndloss = g.gradient(loss, [u, v])\nClosing this out since this is intended behavior of implicit_value_and_gradients.\nFYI @alextp", "body": "Right, as @traveller59 pointed out - `implicit_value_and_gradients` can compute gradients only for operations that are recorded, and it only records what happens inside the function. When you use `v_add_1`, the `loss()` function is operating on the `Tensor` `v_add_1`, which is effectively a constant value (1 + the value of the variable at the time v_add_1 was created).\r\n\r\nIf you'd like finer grained control over what is recorded, consider using `tfe.GradientTape` for something like:\r\n\r\n```python\r\nwith tfe.GradientTape() as g:\r\n  v = tf.get_variable(name='v', initializer=1., trainable=True)\r\n  v_add_1 = v + 1\r\n  loss = v_add_1 * 2\r\ndloss = g.gradient(loss, [u, v])\r\n```\r\nClosing this out since this is intended behavior of `implicit_value_and_gradients`.\r\n\r\nFYI @alextp "}