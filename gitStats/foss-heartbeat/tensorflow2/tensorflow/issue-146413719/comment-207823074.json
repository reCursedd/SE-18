{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/207823074", "html_url": "https://github.com/tensorflow/tensorflow/issues/1799#issuecomment-207823074", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1799", "id": 207823074, "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzgyMzA3NA==", "user": {"login": "samjabrahams", "id": 11607205, "node_id": "MDQ6VXNlcjExNjA3MjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/11607205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samjabrahams", "html_url": "https://github.com/samjabrahams", "followers_url": "https://api.github.com/users/samjabrahams/followers", "following_url": "https://api.github.com/users/samjabrahams/following{/other_user}", "gists_url": "https://api.github.com/users/samjabrahams/gists{/gist_id}", "starred_url": "https://api.github.com/users/samjabrahams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samjabrahams/subscriptions", "organizations_url": "https://api.github.com/users/samjabrahams/orgs", "repos_url": "https://api.github.com/users/samjabrahams/repos", "events_url": "https://api.github.com/users/samjabrahams/events{/privacy}", "received_events_url": "https://api.github.com/users/samjabrahams/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-09T18:02:46Z", "updated_at": "2016-04-09T18:02:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for getting back. I'll try to describe the improvements more precisely:</p>\n<ol>\n<li><code>on_value</code> / <code>off_value</code>: Like you said- create a Python wrapper that has a default value for these inputs. Thank you for the \"to-do list\" style overview- should make this process much smoother to go through!</li>\n<li>Handling different int types for <code>indices</code> and <code>depth</code>: <code>indices</code> is required to be a Tensor of <code>int64</code>, and <code>depth</code> is required to be a Tensor of <code>int32</code>. It would be nice if the user was able to pass in any integer Tensor (or at least either <code>int64</code> or <code>int32</code>) and have the method handle it. Do you think this could be handled in the Python wrapper? The idea would be to check for an integer-type Tensor and cast it to the proper format before passing it on to the kernel. It's somewhat inefficient, but very simple.</li>\n</ol>", "body_text": "Thanks for getting back. I'll try to describe the improvements more precisely:\n\non_value / off_value: Like you said- create a Python wrapper that has a default value for these inputs. Thank you for the \"to-do list\" style overview- should make this process much smoother to go through!\nHandling different int types for indices and depth: indices is required to be a Tensor of int64, and depth is required to be a Tensor of int32. It would be nice if the user was able to pass in any integer Tensor (or at least either int64 or int32) and have the method handle it. Do you think this could be handled in the Python wrapper? The idea would be to check for an integer-type Tensor and cast it to the proper format before passing it on to the kernel. It's somewhat inefficient, but very simple.", "body": "Thanks for getting back. I'll try to describe the improvements more precisely:\n1. `on_value` / `off_value`: Like you said- create a Python wrapper that has a default value for these inputs. Thank you for the \"to-do list\" style overview- should make this process much smoother to go through!\n2. Handling different int types for `indices` and `depth`: `indices` is required to be a Tensor of `int64`, and `depth` is required to be a Tensor of `int32`. It would be nice if the user was able to pass in any integer Tensor (or at least either `int64` or `int32`) and have the method handle it. Do you think this could be handled in the Python wrapper? The idea would be to check for an integer-type Tensor and cast it to the proper format before passing it on to the kernel. It's somewhat inefficient, but very simple.\n"}