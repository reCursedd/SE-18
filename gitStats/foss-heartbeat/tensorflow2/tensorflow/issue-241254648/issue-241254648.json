{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11350", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11350/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11350/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11350/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11350", "id": 241254648, "node_id": "MDU6SXNzdWUyNDEyNTQ2NDg=", "number": 11350, "title": "MonitoredTrainingSession to have accessible summary writer.", "user": {"login": "coopie", "id": 6509132, "node_id": "MDQ6VXNlcjY1MDkxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6509132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coopie", "html_url": "https://github.com/coopie", "followers_url": "https://api.github.com/users/coopie/followers", "following_url": "https://api.github.com/users/coopie/following{/other_user}", "gists_url": "https://api.github.com/users/coopie/gists{/gist_id}", "starred_url": "https://api.github.com/users/coopie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coopie/subscriptions", "organizations_url": "https://api.github.com/users/coopie/orgs", "repos_url": "https://api.github.com/users/coopie/repos", "events_url": "https://api.github.com/users/coopie/events{/privacy}", "received_events_url": "https://api.github.com/users/coopie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-07-07T12:52:00Z", "updated_at": "2018-09-15T00:59:35Z", "closed_at": "2018-09-15T00:59:35Z", "author_association": "NONE", "body_html": "<p><strong>Tensorflow version: 1.2.1</strong></p>\n<p>I am using <code>MonitoredTrainingSession</code> extensively to train models, and for the most part does exactly what I want it to do. However, I would like to be able to extract (or pass in) a <code>FileWriter</code> object so I can report other summaries from inside my evaluation routines. This is because only one<code> FileWriter</code> can write to the events log:</p>\n<p>At the moment, this is the best workaround I can do:</p>\n<div class=\"highlight highlight-source-python\"><pre>sess <span class=\"pl-k\">=</span> tf.train.MonitoredTrainingSession(\n       <span class=\"pl-c1\">...</span>\n    )\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> <span class=\"pl-k\">HACK</span>: this is so we use the same summary writer obj for both summaries, only way to do it.</span>\nsummary_writer <span class=\"pl-k\">=</span> sess._hooks[<span class=\"pl-c1\">1</span>]._summary_writer</pre></div>\n<p>Then I can use the <code>summary_writer</code> to manually report summaries in the evaluation part of my code:</p>\n<div class=\"highlight highlight-source-python\"><pre>mean_test_loss <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span>\nsummary <span class=\"pl-k\">=</span> tf.Summary(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>[\n    tf.Summary.Value(<span class=\"pl-v\">tag</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mean_test_loss<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">simple_value</span><span class=\"pl-k\">=</span>mean_test_loss)\n])\nsummary_writer.add_summary(summary, current_step)\n</pre></div>\n<p>It would be nice to have a non-hacky way to get the <code>summary_writer</code> from the session so only one <code>FileWriter</code> writes to the events file.</p>\n<p>One thought I had is to have a <code>FileWriter</code> object as part of the <code>Scaffold</code> that is used to build the session. That way anyone can get hold of the scaffold and use the one <code>summary_writer</code> designated to write to the events log.</p>\n<p>I would be happy to help implementing this if other people are interested.</p>", "body_text": "Tensorflow version: 1.2.1\nI am using MonitoredTrainingSession extensively to train models, and for the most part does exactly what I want it to do. However, I would like to be able to extract (or pass in) a FileWriter object so I can report other summaries from inside my evaluation routines. This is because only one FileWriter can write to the events log:\nAt the moment, this is the best workaround I can do:\nsess = tf.train.MonitoredTrainingSession(\n       ...\n    )\n\n# HACK: this is so we use the same summary writer obj for both summaries, only way to do it.\nsummary_writer = sess._hooks[1]._summary_writer\nThen I can use the summary_writer to manually report summaries in the evaluation part of my code:\nmean_test_loss = ...\nsummary = tf.Summary(value=[\n    tf.Summary.Value(tag='mean_test_loss', simple_value=mean_test_loss)\n])\nsummary_writer.add_summary(summary, current_step)\n\nIt would be nice to have a non-hacky way to get the summary_writer from the session so only one FileWriter writes to the events file.\nOne thought I had is to have a FileWriter object as part of the Scaffold that is used to build the session. That way anyone can get hold of the scaffold and use the one summary_writer designated to write to the events log.\nI would be happy to help implementing this if other people are interested.", "body": "**Tensorflow version: 1.2.1**\r\n\r\nI am using `MonitoredTrainingSession` extensively to train models, and for the most part does exactly what I want it to do. However, I would like to be able to extract (or pass in) a `FileWriter` object so I can report other summaries from inside my evaluation routines. This is because only one` FileWriter` can write to the events log:\r\n\r\nAt the moment, this is the best workaround I can do:\r\n\r\n```python\r\nsess = tf.train.MonitoredTrainingSession(\r\n       ...\r\n    )\r\n\r\n# HACK: this is so we use the same summary writer obj for both summaries, only way to do it.\r\nsummary_writer = sess._hooks[1]._summary_writer\r\n```\r\n\r\nThen I can use the `summary_writer` to manually report summaries in the evaluation part of my code:\r\n\r\n```python\r\nmean_test_loss = ...\r\nsummary = tf.Summary(value=[\r\n    tf.Summary.Value(tag='mean_test_loss', simple_value=mean_test_loss)\r\n])\r\nsummary_writer.add_summary(summary, current_step)\r\n\r\n```\r\n\r\nIt would be nice to have a non-hacky way to get the `summary_writer` from the session so only one `FileWriter` writes to the events file.\r\n\r\nOne thought I had is to have a `FileWriter` object as part of the `Scaffold` that is used to build the session. That way anyone can get hold of the scaffold and use the one `summary_writer` designated to write to the events log.\r\n\r\nI would be happy to help implementing this if other people are interested.\r\n\r\n"}