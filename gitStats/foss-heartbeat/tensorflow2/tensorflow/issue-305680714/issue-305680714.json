{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17743", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17743/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17743/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17743/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17743", "id": 305680714, "node_id": "MDU6SXNzdWUzMDU2ODA3MTQ=", "number": 17743, "title": "Training through an Estimator is much slower than writing a for loop when using a Dataset", "user": {"login": "mbrio", "id": 13557, "node_id": "MDQ6VXNlcjEzNTU3", "avatar_url": "https://avatars2.githubusercontent.com/u/13557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrio", "html_url": "https://github.com/mbrio", "followers_url": "https://api.github.com/users/mbrio/followers", "following_url": "https://api.github.com/users/mbrio/following{/other_user}", "gists_url": "https://api.github.com/users/mbrio/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrio/subscriptions", "organizations_url": "https://api.github.com/users/mbrio/orgs", "repos_url": "https://api.github.com/users/mbrio/repos", "events_url": "https://api.github.com/users/mbrio/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-03-15T19:00:24Z", "updated_at": "2018-05-26T18:48:50Z", "closed_at": "2018-05-26T18:37:42Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nHappens with stock code</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu Server 17.10.1</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nSource</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nb'v1.6.0-0-gd2e24b6039' 1.6.0</li>\n<li><strong>Python version</strong>:<br>\n3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\n0.11.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\ngcc (Ubuntu 6.4.0-8ubuntu1) 6.4.0 20171010</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\n9.1/7.0.5</li>\n<li><strong>GPU model and memory</strong>:<br>\nnot applicable</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nnot applicable</li>\n</ul>\n<p>I have a dataset that consists of one feature and one label, both are int64, there are 7166 steps of batches consisting of 128 and run for 10 epochs. I have tested this using two approaches, the first uses 100 tfrecord files that are read through the <code>tf.data.Dataset</code> API, the second reads the tfrecord data into memory then creates a <code>tf.data.Dataset</code> utilizing <code>from_tensor_slices</code>.</p>\n<p>Obviously the in-memory version runs much faster than the read-from-disk method.</p>\n<p>When I train my model using a custom while loop, 10 epochs runs 20 seconds faster than running it using the <code>tf.estimator.Estimator.train</code> API. This 20 seconds is a blanket 20 seconds, whether I am running it using the in-memory dataset or the read-from-disk method.</p>\n<p>I thought, the overhead could be from storing checkpoints, etc. so I supplied a <code>RunConfig</code> that disables checkpoints and sets the various save/log step counts to very high numbers. This helped, but only a little bit, it went from a blanket 20 seconds to a blanket 17 seconds. 17 seconds doesn't seem like much, but if I am running for a large number of epochs, or if I use a much larger dataset, those seconds can turn into hours.</p>\n<p>Is this something inherent with <code>tf.estimator.Estimator</code> or could I be hitting a problem?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nHappens with stock code\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu Server 17.10.1\nTensorFlow installed from (source or binary):\nSource\nTensorFlow version (use command below):\nb'v1.6.0-0-gd2e24b6039' 1.6.0\nPython version:\n3.6\nBazel version (if compiling from source):\n0.11.0\nGCC/Compiler version (if compiling from source):\ngcc (Ubuntu 6.4.0-8ubuntu1) 6.4.0 20171010\nCUDA/cuDNN version:\n9.1/7.0.5\nGPU model and memory:\nnot applicable\nExact command to reproduce:\nnot applicable\n\nI have a dataset that consists of one feature and one label, both are int64, there are 7166 steps of batches consisting of 128 and run for 10 epochs. I have tested this using two approaches, the first uses 100 tfrecord files that are read through the tf.data.Dataset API, the second reads the tfrecord data into memory then creates a tf.data.Dataset utilizing from_tensor_slices.\nObviously the in-memory version runs much faster than the read-from-disk method.\nWhen I train my model using a custom while loop, 10 epochs runs 20 seconds faster than running it using the tf.estimator.Estimator.train API. This 20 seconds is a blanket 20 seconds, whether I am running it using the in-memory dataset or the read-from-disk method.\nI thought, the overhead could be from storing checkpoints, etc. so I supplied a RunConfig that disables checkpoints and sets the various save/log step counts to very high numbers. This helped, but only a little bit, it went from a blanket 20 seconds to a blanket 17 seconds. 17 seconds doesn't seem like much, but if I am running for a large number of epochs, or if I use a much larger dataset, those seconds can turn into hours.\nIs this something inherent with tf.estimator.Estimator or could I be hitting a problem?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nHappens with stock code\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu Server 17.10.1\r\n- **TensorFlow installed from (source or binary)**:\r\nSource\r\n- **TensorFlow version (use command below)**:\r\nb'v1.6.0-0-gd2e24b6039' 1.6.0\r\n- **Python version**: \r\n3.6\r\n- **Bazel version (if compiling from source)**:\r\n0.11.0\r\n- **GCC/Compiler version (if compiling from source)**:\r\ngcc (Ubuntu 6.4.0-8ubuntu1) 6.4.0 20171010\r\n- **CUDA/cuDNN version**:\r\n9.1/7.0.5\r\n- **GPU model and memory**:\r\nnot applicable\r\n- **Exact command to reproduce**:\r\nnot applicable\r\n\r\nI have a dataset that consists of one feature and one label, both are int64, there are 7166 steps of batches consisting of 128 and run for 10 epochs. I have tested this using two approaches, the first uses 100 tfrecord files that are read through the `tf.data.Dataset` API, the second reads the tfrecord data into memory then creates a `tf.data.Dataset` utilizing `from_tensor_slices`.\r\n\r\nObviously the in-memory version runs much faster than the read-from-disk method.\r\n\r\nWhen I train my model using a custom while loop, 10 epochs runs 20 seconds faster than running it using the `tf.estimator.Estimator.train` API. This 20 seconds is a blanket 20 seconds, whether I am running it using the in-memory dataset or the read-from-disk method.\r\n\r\nI thought, the overhead could be from storing checkpoints, etc. so I supplied a `RunConfig` that disables checkpoints and sets the various save/log step counts to very high numbers. This helped, but only a little bit, it went from a blanket 20 seconds to a blanket 17 seconds. 17 seconds doesn't seem like much, but if I am running for a large number of epochs, or if I use a much larger dataset, those seconds can turn into hours.\r\n\r\nIs this something inherent with `tf.estimator.Estimator` or could I be hitting a problem?"}