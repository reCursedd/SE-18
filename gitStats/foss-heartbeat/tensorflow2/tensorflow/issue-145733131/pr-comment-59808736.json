{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59808736", "pull_request_review_id": null, "id": 59808736, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODA4NzM2", "diff_hunk": "@@ -0,0 +1,605 @@\n+package tensorflow\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"strings\"\n+\n+\t\"github.com/golang/protobuf/proto\"\n+\n+\tpb \"github.com/tensorflow/tensorflow/tensorflow/contrib/go/proto\"\n+)\n+\n+const (\n+\tcOpsProtobufDefsPath = \"/usr/local/tensorlow/ops.pbtxt\"\n+)\n+\n+// Graph Representation of the computation graph.\n+type Graph struct {\n+\tdef *pb.GraphDef\n+\n+\tavailableOps map[string]*pb.OpDef\n+\tconstants    map[string]*Tensor\n+\tvariables    map[string]*Tensor\n+}\n+\n+// GraphNode Representation of one of the nodes of the TensorFlow Graph.\n+// A node takes zero or more Tensors, performs some computation, and\n+// produces zero or more Tensors.\n+type GraphNode struct {\n+\tref          *pb.NodeDef\n+\tdef          *pb.NodeDef\n+\toutDataTypes map[string]DataType\n+}\n+\n+// NewGraph Returns an initialized instance of the Graph struct.\n+func NewGraph() *Graph {\n+\treturn &Graph{\n+\t\tdef:          new(pb.GraphDef),\n+\t\tavailableOps: make(map[string]*pb.OpDef),\n+\t\tconstants:    make(map[string]*Tensor),\n+\t\tvariables:    make(map[string]*Tensor),\n+\t}\n+}\n+\n+// NewGraphFromText Returns a new graph populated with the deserialization of\n+// the provided graph string.\n+func NewGraphFromText(graphStr string) (gr *Graph, err error) {\n+\tgr = NewGraph()\n+\terr = proto.UnmarshalText(graphStr, gr.def)\n+\n+\treturn\n+}\n+\n+// LoadGraphFromFile Loads a Graph from the file on the specified path.\n+func LoadGraphFromFile(path string) (gr *Graph, err error) {\n+\tgraphStr, err := ioutil.ReadFile(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tgr = NewGraph()\n+\terr = proto.Unmarshal(graphStr, gr.def)\n+\n+\treturn\n+}\n+\n+// LoadGraphFromTextFile Loads a Graph as plain text from the file on the specified\n+// path.\n+func LoadGraphFromTextFile(path string) (gr *Graph, err error) {\n+\tgraphStr, err := ioutil.ReadFile(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\treturn NewGraphFromText(string(graphStr))\n+}\n+\n+// Op Adds a new Node to the Graph with the specified operation, this function\n+// could return an error if any of the mandatory attributes is not be present\n+// or the value is not the expected for this attribute.\n+func (gr *Graph) Op(opName string, name string, input []*GraphNode, device string, attrs map[string]interface{}) (node *GraphNode, err error) {", "path": "tensorflow/contrib/go/graph.go", "position": null, "original_position": 82, "commit_id": "942760424141d0f5a930982d5e78aaeb05869488", "original_commit_id": "0b2e8b8422c86324118a8ba8887ea219d5a71f8a", "user": {"login": "dave-andersen", "id": 827870, "node_id": "MDQ6VXNlcjgyNzg3MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/827870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dave-andersen", "html_url": "https://github.com/dave-andersen", "followers_url": "https://api.github.com/users/dave-andersen/followers", "following_url": "https://api.github.com/users/dave-andersen/following{/other_user}", "gists_url": "https://api.github.com/users/dave-andersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dave-andersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dave-andersen/subscriptions", "organizations_url": "https://api.github.com/users/dave-andersen/orgs", "repos_url": "https://api.github.com/users/dave-andersen/repos", "events_url": "https://api.github.com/users/dave-andersen/events{/privacy}", "received_events_url": "https://api.github.com/users/dave-andersen/received_events", "type": "User", "site_admin": false}, "body": "I think this function would read a lot more cleanly internally if it were to use explicit return values.  For example, in the \"operation not found case\", this is both more concise and more clear:\n  if .... !opFound {\n         return gr, &ErrOperationNotFound{ op: opName }\n  }\n\nit makes it a little more clear that you're returning an error.  I think the repeated savings of this over the course of the function makes it worth the slight redundancy of having to note the 'gr' on every return.  This is a pretty big function, so it's reasonable to remind the reader what the return values are when they're 40 lines into it.  There are also some cases inside the code that already explicitly specify the return values, and the mix gets kind of confusing. \n\nIt would also be worth checking in some of these cast checks if they read better with an integrated conditional, e.g., for this code:\ndt, ok := v.(DataType)\n-              if !ok {\n-                  return nil, &ErrInvalidAttrValue{\n-                      operation:  opName,\n-                      attribName: attr.Name,\n-                  }\n-              }\n-              node.def.Attr[attr.Name] = &pb.AttrValue{\n-                  Value: &pb.AttrValue_Type{\n-                      Type: pb.DataType(dt),\n-                  },\n-              }\n\nWould this be more clear?\nif dt, ok := v.(DataType); !ok {\n   return nil, &ErrInvalidAttrValue{ ...}\n} else {\n   ...\n}\n\nI'm not 100% on this latter, so I leave it to you to see which reads better.\n", "created_at": "2016-04-14T23:30:24Z", "updated_at": "2016-05-05T08:12:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59808736", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59808736"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59808736"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771"}}, "body_html": "<p>I think this function would read a lot more cleanly internally if it were to use explicit return values.  For example, in the \"operation not found case\", this is both more concise and more clear:<br>\nif .... !opFound {<br>\nreturn gr, &amp;ErrOperationNotFound{ op: opName }<br>\n}</p>\n<p>it makes it a little more clear that you're returning an error.  I think the repeated savings of this over the course of the function makes it worth the slight redundancy of having to note the 'gr' on every return.  This is a pretty big function, so it's reasonable to remind the reader what the return values are when they're 40 lines into it.  There are also some cases inside the code that already explicitly specify the return values, and the mix gets kind of confusing.</p>\n<p>It would also be worth checking in some of these cast checks if they read better with an integrated conditional, e.g., for this code:<br>\ndt, ok := v.(DataType)</p>\n<ul>\n<li>\n<pre><code>         if !ok {\n</code></pre>\n</li>\n<li>\n<pre><code>             return nil, &amp;ErrInvalidAttrValue{\n</code></pre>\n</li>\n<li>\n<pre><code>                 operation:  opName,\n</code></pre>\n</li>\n<li>\n<pre><code>                 attribName: attr.Name,\n</code></pre>\n</li>\n<li>\n<pre><code>             }\n</code></pre>\n</li>\n<li>\n<pre><code>         }\n</code></pre>\n</li>\n<li>\n<pre><code>         node.def.Attr[attr.Name] = &amp;pb.AttrValue{\n</code></pre>\n</li>\n<li>\n<pre><code>             Value: &amp;pb.AttrValue_Type{\n</code></pre>\n</li>\n<li>\n<pre><code>                 Type: pb.DataType(dt),\n</code></pre>\n</li>\n<li>\n<pre><code>             },\n</code></pre>\n</li>\n<li>\n<pre><code>         }\n</code></pre>\n</li>\n</ul>\n<p>Would this be more clear?<br>\nif dt, ok := v.(DataType); !ok {<br>\nreturn nil, &amp;ErrInvalidAttrValue{ ...}<br>\n} else {<br>\n...<br>\n}</p>\n<p>I'm not 100% on this latter, so I leave it to you to see which reads better.</p>", "body_text": "I think this function would read a lot more cleanly internally if it were to use explicit return values.  For example, in the \"operation not found case\", this is both more concise and more clear:\nif .... !opFound {\nreturn gr, &ErrOperationNotFound{ op: opName }\n}\nit makes it a little more clear that you're returning an error.  I think the repeated savings of this over the course of the function makes it worth the slight redundancy of having to note the 'gr' on every return.  This is a pretty big function, so it's reasonable to remind the reader what the return values are when they're 40 lines into it.  There are also some cases inside the code that already explicitly specify the return values, and the mix gets kind of confusing.\nIt would also be worth checking in some of these cast checks if they read better with an integrated conditional, e.g., for this code:\ndt, ok := v.(DataType)\n\n\n         if !ok {\n\n\n\n             return nil, &ErrInvalidAttrValue{\n\n\n\n                 operation:  opName,\n\n\n\n                 attribName: attr.Name,\n\n\n\n             }\n\n\n\n         }\n\n\n\n         node.def.Attr[attr.Name] = &pb.AttrValue{\n\n\n\n             Value: &pb.AttrValue_Type{\n\n\n\n                 Type: pb.DataType(dt),\n\n\n\n             },\n\n\n\n         }\n\n\n\nWould this be more clear?\nif dt, ok := v.(DataType); !ok {\nreturn nil, &ErrInvalidAttrValue{ ...}\n} else {\n...\n}\nI'm not 100% on this latter, so I leave it to you to see which reads better."}