{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59918626", "pull_request_review_id": null, "id": 59918626, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE4NjI2", "diff_hunk": "@@ -0,0 +1,252 @@\n+package tensorflow_test\n+\n+import (\n+\t\"testing\"\n+\n+\ttf \"github.com/tensorflow/tensorflow/tensorflow/contrib/go\"\n+)\n+\n+func TestGraphGeneration(t *testing.T) {\n+\tgraph := tf.NewGraph()\n+\tinput1 := graph.Placeholder(\"input1\", tf.DtInt32, []int64{3}, []string{})\n+\tinput2 := graph.Placeholder(\"input2\", tf.DtInt32, []int64{3}, []string{})\n+\t_, err := graph.Op(\"Add\", \"output\", []*tf.GraphNode{input1, input2}, \"\", nil)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying add two tensord, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\t_, err = graph.Op(\"Add\", \"output\", []*tf.GraphNode{input2}, \"\", map[string]interface{}{\n+\t\t\"T\": tf.DtInt32,\n+\t})\n+\tif err == nil {\n+\t\tt.Error(\"An with two mandatory parameters was added after specify just one\")\n+\t}\n+\t_, err = graph.Op(\"Aajajajajdd\", \"output\", []*tf.GraphNode{input2}, \"\", map[string]interface{}{})\n+\tif err == nil {\n+\t\tt.Error(\"An undefined operation was added to the graph\")\n+\t}\n+\n+\tinputSlice1 := []int32{1, 2, 3}\n+\tinputSlice2 := []int32{3, 4, 5}\n+\n+\tt1, err := tf.NewTensor(inputSlice1)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying create a new tensor, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tt2, err := tf.NewTensor(inputSlice2)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying create a new tensor, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\ts, err := tf.NewSession()\n+\tif err := s.ExtendGraph(graph); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tinput := map[string]*tf.Tensor{\n+\t\t\"input1\": t1,\n+\t\t\"input2\": t2,\n+\t}\n+\tout, err := s.Run(input, []string{\"output\"}, nil)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to run the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(out) != 1 {\n+\t\tt.Errorf(\"The expected number of outputs is 1 but: %d returned\", len(out))\n+\t\tt.FailNow()\n+\t}\n+\n+\tfor i := 0; i < len(inputSlice1); i++ {\n+\t\tval, err := out[0].GetVal(i)\n+\t\tif err != nil {\n+\t\t\tt.Error(\"Error trying to read the output tensor, Error:\", err)\n+\t\t\tt.FailNow()\n+\t\t}\n+\t\tif val != inputSlice1[i]+inputSlice2[i] {\n+\t\t\tt.Errorf(\"The sum of the two elements: %d + %d doesn't match with the returned value: %d\", inputSlice1[i], inputSlice2[i], val)\n+\t\t}\n+\t}\n+}\n+\n+func TestGraphConstant(t *testing.T) {\n+\tinputSlice1 := []int32{1, 2, 3}\n+\tinputSlice2 := []int32{3, 4, 5}\n+\n+\tgraph := tf.NewGraph()\n+\tinput1 := graph.Placeholder(\"input1\", tf.DtInt32, []int64{3}, []string{})\n+\n+\tinput2, err := graph.Constant(\"input2\", inputSlice2)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying add a constant to the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\t_, err = graph.Op(\"Add\", \"output\", []*tf.GraphNode{input1, input2}, \"\", map[string]interface{}{})\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying add two tensors, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tt1, err := tf.NewTensor(inputSlice1)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying create a new tensor, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\ts, err := tf.NewSession()\n+\tif err := s.ExtendGraph(graph); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tinput := map[string]*tf.Tensor{\n+\t\t\"input1\": t1,\n+\t}\n+\tout, err := s.Run(input, []string{\"output\"}, nil)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to run the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(out) != 1 {\n+\t\tt.Errorf(\"The expected number of outputs is 1 but: %d returned\", len(out))\n+\t\tt.FailNow()\n+\t}\n+\n+\tfor i := 0; i < len(inputSlice1); i++ {\n+\t\tval, err := out[0].GetVal(i)\n+\t\tif err != nil {\n+\t\t\tt.Error(\"Error trying to read the output tensor, Error:\", err)\n+\t\t\tt.FailNow()\n+\t\t}\n+\t\tif val != inputSlice1[i]+inputSlice2[i] {\n+\t\t\tt.Errorf(\"The sum of the two elements: %d + %d doesn't match with the returned value: %d\", inputSlice1[i], inputSlice2[i], val)\n+\t\t}\n+\t}\n+}\n+\n+func TestGraphScalarConstant(t *testing.T) {\n+\tgraph := tf.NewGraph()\n+\ttestString := \"this is a test...\"\n+\ttestFloat := float64(123.123)\n+\n+\t_, err := graph.Constant(\"output1\", testString)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying add a scalar constant to the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\t_, err = graph.Constant(\"output2\", testFloat)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying add a scalar constant to the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\ts, err := tf.NewSession()\n+\tif err := s.ExtendGraph(graph); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tout, err := s.Run(nil, []string{\"output1\", \"output2\"}, nil)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to run the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(out) != 2 {\n+\t\tt.Errorf(\"Expected two outpur tensors, but: %d received\", len(out))\n+\t\tt.FailNow()\n+\t}\n+\n+\toutStr, err := out[0].AsStr()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to read the output, Error:\", err)\n+\t} else {\n+\t\tif string(outStr[0]) != testString {\n+\t\t\tt.Error(\"The returned string: \\\"%s\\\" is not the input string: \\\"%s\\\"\", testString, outStr[0])\n+\t\t}\n+\t}\n+\n+\toutFloat, err := out[1].AsFloat64()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to read the output, Error:\", err)\n+\t} else {\n+\t\tif outFloat[0] != testFloat {\n+\t\t\tt.Error(\"The returned float: \\\"%f\\\" is not the input one: \\\"%f\\\"\", outFloat[0], testFloat)\n+\t\t}\n+\t}\n+}\n+\n+func TestGraphVariable(t *testing.T) {\n+\tvar out []*tf.Tensor\n+\n+\tadditions := 10\n+\tinputSlice1 := []int32{1, 2, 3, 4}\n+\tinputSlice2 := []int32{5, 6, 7, 8}\n+\n+\tgraph := tf.NewGraph()\n+\tinput1, err := graph.Variable(\"input1\", inputSlice1)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying add a variable to the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tinput2, err := graph.Constant(\"input2\", inputSlice2)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying add a constant to the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tadd, err := graph.Op(\"Add\", \"add_tensors\", []*tf.GraphNode{input1, input2}, \"\", map[string]interface{}{})\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying add two tensors, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\t_, err = graph.Op(\"Assign\", \"assign_inp1\", []*tf.GraphNode{input1, add}, \"\", map[string]interface{}{})\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying assign the result of the sum to the tensor, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\ts, err := tf.NewSession()\n+\ts.ExtendAndInitializeAllVariables(graph)\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to initialize the variables in the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tfor i := 0; i < additions; i++ {\n+\t\tout, err = s.Run(nil, []string{\"input1\"}, []string{\"assign_inp1\"})\n+\t\tif err != nil {\n+\t\t\tt.Error(\"Problem trying to run the graph, Error:\", err)\n+\t\t\tt.FailNow()\n+\t\t}\n+\t}\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to run the graph, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(out) != 1 {\n+\t\tt.Errorf(\"The expected number of outputs is 1 but: %d returned\", len(out))\n+\t\tt.FailNow()\n+\t}\n+\n+\tfor i := 0; i < len(inputSlice1); i++ {", "path": "tensorflow/contrib/go/graph_test.go", "position": null, "original_position": 241, "commit_id": "942760424141d0f5a930982d5e78aaeb05869488", "original_commit_id": "210180befbd05694aa3285fef7d498bbd1be2dcc", "user": {"login": "dave-andersen", "id": 827870, "node_id": "MDQ6VXNlcjgyNzg3MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/827870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dave-andersen", "html_url": "https://github.com/dave-andersen", "followers_url": "https://api.github.com/users/dave-andersen/followers", "following_url": "https://api.github.com/users/dave-andersen/following{/other_user}", "gists_url": "https://api.github.com/users/dave-andersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dave-andersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dave-andersen/subscriptions", "organizations_url": "https://api.github.com/users/dave-andersen/orgs", "repos_url": "https://api.github.com/users/dave-andersen/repos", "events_url": "https://api.github.com/users/dave-andersen/events{/privacy}", "received_events_url": "https://api.github.com/users/dave-andersen/received_events", "type": "User", "site_admin": false}, "body": "same redundancy comment applies here.\n", "created_at": "2016-04-15T18:25:12Z", "updated_at": "2016-05-05T08:12:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59918626", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59918626"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59918626"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771"}}, "body_html": "<p>same redundancy comment applies here.</p>", "body_text": "same redundancy comment applies here."}