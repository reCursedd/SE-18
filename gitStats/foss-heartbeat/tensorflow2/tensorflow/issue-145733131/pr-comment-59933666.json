{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59933666", "pull_request_review_id": null, "id": 59933666, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTMzNjY2", "diff_hunk": "@@ -0,0 +1,630 @@\n+package tensorflow_test\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"testing\"\n+\n+\ttf \"github.com/tensorflow/tensorflow/tensorflow/contrib/go\"\n+)\n+\n+func getTensorFromGraph(t *testing.T, graphStr string) *tf.Tensor {\n+\tgraph, err := tf.NewGraphFromText(graphStr)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\ts, err := tf.NewSession()\n+\tif err := s.ExtendGraph(graph); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\toutput, err := s.Run(nil, []string{\"output\"}, nil)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tif len(output) != 1 {\n+\t\tt.Fatalf(\"The expexted number of tensors is 1 but there was %d tensors returned\", len(output))\n+\t\tt.FailNow()\n+\t}\n+\n+\treturn output[0]\n+}\n+\n+func TestStrDecode(t *testing.T) {\n+\texpectedResult := [][]byte{\n+\t\t[]byte(\"Hello1!\"),\n+\t\t[]byte(\"Hello2!\"),\n+\t\t[]byte(\"Hello3!\"),\n+\t}\n+\ttensor := getTensorFromGraph(t, fmt.Sprintf(`\n+\t\tnode {\n+\t\t\tname: \"output\"\n+\t\t\top: \"Const\"\n+\t\t\tattr {\n+\t\t\t\tkey: \"dtype\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttype: DT_STRING\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tattr {\n+\t\t\t\tkey: \"value\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttensor {\n+\t\t\t\t\t\tdtype: DT_STRING\n+\t\t\t\t\t\ttensor_shape {\n+\t\t\t\t\t\t\tdim {\n+\t\t\t\t\t\t\t\tsize: 3\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tstring_val: \"%s\"\n+\t\t\t\t\t\tstring_val: \"%s\"\n+\t\t\t\t\t\tstring_val: \"%s\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tversion: 5`, string(expectedResult[0]), string(expectedResult[1]), string(expectedResult[2])),\n+\t)\n+\n+\tresult, err := tensor.AsStr()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to cast a tensor into string slice, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(result) != 3 {\n+\t\tt.Errorf(\"The expected number of strings returned was 3, but %d was returned\", len(result))\n+\t\tt.FailNow()\n+\t}\n+\n+\tif !reflect.DeepEqual(expectedResult, result) {\n+\t\tt.Errorf(\"The returned values doesn't coeesponds with the expected strings:\", expectedResult, result)\n+\t\tt.FailNow()\n+\t}\n+}\n+\n+func TestFloat32Decode(t *testing.T) {\n+\texpectedResult := float32(10.23)\n+\ttensor := getTensorFromGraph(t, fmt.Sprintf(`\n+\t\tnode {\n+\t\t\tname: \"output\"\n+\t\t\top: \"Const\"\n+\t\t\tattr {\n+\t\t\t\tkey: \"dtype\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttype: DT_FLOAT\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tattr {\n+\t\t\t\tkey: \"value\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttensor {\n+\t\t\t\t\t\tdtype: DT_FLOAT\n+\t\t\t\t\t\ttensor_shape {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tfloat_val: %f\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tversion: 5`, expectedResult),\n+\t)\n+\n+\tresult, err := tensor.AsFloat32()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to cast a tensor into float32 slice, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(result) != 1 {\n+\t\tt.Error(\"The expected length for the returned slice is 1 but the returned slice length was:\", len(result))\n+\t\tt.FailNow()\n+\t}\n+\n+\tif result[0] != expectedResult {\n+\t\tt.Errorf(\"The expected value is: %f, but the returned is: %f\", expectedResult, result[0])\n+\t\tt.FailNow()\n+\t}\n+}\n+\n+func TestFloat64Decode(t *testing.T) {\n+\texpectedResult := float64(10.23)\n+\ttensor := getTensorFromGraph(t, fmt.Sprintf(`\n+\t\tnode {\n+\t\t\tname: \"output\"\n+\t\t\top: \"Const\"\n+\t\t\tattr {\n+\t\t\t\tkey: \"dtype\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttype: DT_DOUBLE\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tattr {\n+\t\t\t\tkey: \"value\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttensor {\n+\t\t\t\t\t\tdtype: DT_DOUBLE\n+\t\t\t\t\t\ttensor_shape {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble_val: %f\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tversion: 5`, expectedResult),\n+\t)\n+\n+\tresult, err := tensor.AsFloat64()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to cast a tensor into float64 slice, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(result) != 1 {\n+\t\tt.Error(\"The expected length for the returned slice is 1 but the returned slice length was:\", len(result))\n+\t\tt.FailNow()\n+\t}\n+\n+\tif result[0] != expectedResult {\n+\t\tt.Errorf(\"The expected value is: %f, but the returned is: %f\", expectedResult, result[0])\n+\t\tt.FailNow()\n+\t}\n+}\n+\n+func TestInt32Decode(t *testing.T) {\n+\texpectedResult := int32(123)\n+\ttensor := getTensorFromGraph(t, fmt.Sprintf(`\n+\t\tnode {\n+\t\t\tname: \"output\"\n+\t\t\top: \"Const\"\n+\t\t\tattr {\n+\t\t\t\tkey: \"dtype\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttype: DT_INT32\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tattr {\n+\t\t\t\tkey: \"value\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttensor {\n+\t\t\t\t\t\tdtype: DT_INT32\n+\t\t\t\t\t\ttensor_shape {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tint_val: %d\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tversion: 5`, expectedResult),\n+\t)\n+\n+\tresult, err := tensor.AsInt32()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to cast a tensor into int32 slice, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(result) != 1 {\n+\t\tt.Error(\"The expected length for the returned slice is 1 but the returned slice length was:\", len(result))\n+\t\tt.FailNow()\n+\t}\n+\n+\tif result[0] != expectedResult {\n+\t\tt.Errorf(\"The expected value is: %d, but the returned is: %d\", expectedResult, result[0])\n+\t\tt.FailNow()\n+\t}\n+}\n+\n+func TestInt64Decode(t *testing.T) {\n+\texpectedResult := int64(123)\n+\ttensor := getTensorFromGraph(t, fmt.Sprintf(`\n+\t\tnode {\n+\t\t\tname: \"output\"\n+\t\t\top: \"Const\"\n+\t\t\tattr {\n+\t\t\t\tkey: \"dtype\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttype: DT_INT64\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tattr {\n+\t\t\t\tkey: \"value\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttensor {\n+\t\t\t\t\t\tdtype: DT_INT64\n+\t\t\t\t\t\ttensor_shape {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tint64_val: %d\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tversion: 5`, expectedResult),\n+\t)\n+\n+\tresult, err := tensor.AsInt64()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to cast a tensor into int64 slice, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(result) != 1 {\n+\t\tt.Error(\"The expected length for the returned slice is 1 but the returned slice length was:\", len(result))\n+\t\tt.FailNow()\n+\t}\n+\n+\tif result[0] != expectedResult {\n+\t\tt.Errorf(\"The expected value is: %d, but the returned is: %d\", expectedResult, result[0])\n+\t\tt.FailNow()\n+\t}\n+}\n+\n+func TestMultDimFloat32Decode(t *testing.T) {\n+\texpectedResult := [][][]float32{\n+\t\t{{1.00, 1.01}, {2.00, 2.01}},\n+\t\t{{1.10, 1.11}, {2.10, 2.11}},\n+\t\t{{1.00, 1.01}, {2.00, 2.01}},\n+\t}\n+\ttensor := getTensorFromGraph(t, `\n+\t\tnode {\n+\t\t\tname: \"output\"\n+\t\t\top: \"Const\"\n+\t\t\tattr {\n+\t\t\t\tkey: \"dtype\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttype: DT_FLOAT\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tattr {\n+\t\t\t\tkey: \"value\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttensor {\n+\t\t\t\t\t\tdtype: DT_FLOAT\n+\t\t\t\t\t\ttensor_shape {\n+\t\t\t\t\t\t\tdim {\n+\t\t\t\t\t\t\t\tsize: 3\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdim {\n+\t\t\t\t\t\t\t\tsize: 2\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdim {\n+\t\t\t\t\t\t\t\tsize: 2\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttensor_content: \"\\000\\000\\200?\\256G\\201?\\000\\000\\000@\\327\\243\\000@\\315\\314\\214?{\\024\\216?ff\\006@=\\n\\007@\\000\\000\\200?\\256G\\201?\\000\\000\\000@\\327\\243\\000@\",\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t`)\n+\n+\tresult, err := tensor.AsFloat32()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to cast a tensor into float32 slice, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(result) != 12 {\n+\t\tt.Error(\"The expected length for the returned slice is 12 but the returned slice length was:\", len(result))\n+\t\tt.FailNow()\n+\t}\n+\n+\tfor x := 0; x < len(expectedResult); x++ {\n+\t\tfor y := 0; y < len(expectedResult[x]); y++ {\n+\t\t\tfor z := 0; z < len(expectedResult[x][y]); z++ {\n+\t\t\t\tvalue, err := tensor.GetVal(x, y, z)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tt.Error(\"Error returned when accessing to position:\", x, y, z, \"Error:\", err)\n+\t\t\t\t}\n+\t\t\t\tvalueFloat := value.(float32)\n+\t\t\t\tif valueFloat != expectedResult[x][y][z] {\n+\t\t\t\t\tt.Errorf(\n+\t\t\t\t\t\t\"The expected value for position: %d %d %d is: %f but the one returned was: %f\",\n+\t\t\t\t\t\tx,\n+\t\t\t\t\t\ty,\n+\t\t\t\t\t\tz,\n+\t\t\t\t\t\texpectedResult[x][y][z],\n+\t\t\t\t\t\tvalueFloat)\n+\t\t\t\t\tt.FailNow()\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+func TestUint8Decode(t *testing.T) {\n+\texpectedResult := int32(21)\n+\ttensor := getTensorFromGraph(t, fmt.Sprintf(`\n+\t\tnode {\n+\t\t\tname: \"output\"\n+\t\t\top: \"Const\"\n+\t\t\tattr {\n+\t\t\t\tkey: \"dtype\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttype: DT_UINT8\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tattr {\n+\t\t\t\tkey: \"value\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttensor {\n+\t\t\t\t\t\tdtype: DT_UINT8\n+\t\t\t\t\t\ttensor_shape {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tint_val: %d\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tversion: 5`, expectedResult),\n+\t)\n+\n+\tresult, err := tensor.AsInt32()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to cast a tensor into uint8 slice, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(result) != 1 {\n+\t\tt.Error(\"The expected length for the returned slice is 1 but the returned slice length was:\", len(result))\n+\t\tt.FailNow()\n+\t}\n+\n+\tif result[0] != expectedResult {\n+\t\tt.Errorf(\"The expected value is: %d, but the returned is: %d\", expectedResult, result[0])\n+\t\tt.FailNow()\n+\t}\n+}\n+\n+/*func TestUint16Decode(t *testing.T) {\n+\texpectedResult := uint16(321)\n+\ttensor := getTensorFromGraph(t, fmt.Sprintf(`\n+\t\tnode {\n+\t\t\tname: \"output\"\n+\t\t\top: \"Const\"\n+\t\t\tattr {\n+\t\t\t\tkey: \"dtype\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttype: DT_UINT16\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tattr {\n+\t\t\t\tkey: \"value\"\n+\t\t\t\tvalue {\n+\t\t\t\t\ttensor {\n+\t\t\t\t\t\tdtype: DT_UINT16\n+\t\t\t\t\t\ttensor_shape {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tint_val: %d\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tversion: 5`, expectedResult),\n+\t)\n+\n+\tresult, err := tensor.AsUint16()\n+\tif err != nil {\n+\t\tt.Error(\"Problem trying to cast a tensor into uint16 slice, Error:\", err)\n+\t\tt.FailNow()\n+\t}\n+\n+\tif len(result) != 1 {\n+\t\tt.Error(\"The expected length for the returned slice is 1 but the returned slice length was:\", len(result))\n+\t\tt.FailNow()\n+\t}\n+\n+\tif result[0] != expectedResult {\n+\t\tt.Errorf(\"The expected value is: %d, but the returned is: %d\", expectedResult, result[0])\n+\t\tt.FailNow()\n+\t}\n+}*/\n+\n+func TestInt16(t *testing.T) {\n+\texpectedResult := int32(21)\n+\ttensor := getTensorFromGraph(t, fmt.Sprintf(`", "path": "tensorflow/contrib/go/tensor_test.go", "position": null, "original_position": 426, "commit_id": "942760424141d0f5a930982d5e78aaeb05869488", "original_commit_id": "210180befbd05694aa3285fef7d498bbd1be2dcc", "user": {"login": "dave-andersen", "id": 827870, "node_id": "MDQ6VXNlcjgyNzg3MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/827870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dave-andersen", "html_url": "https://github.com/dave-andersen", "followers_url": "https://api.github.com/users/dave-andersen/followers", "following_url": "https://api.github.com/users/dave-andersen/following{/other_user}", "gists_url": "https://api.github.com/users/dave-andersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dave-andersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dave-andersen/subscriptions", "organizations_url": "https://api.github.com/users/dave-andersen/orgs", "repos_url": "https://api.github.com/users/dave-andersen/repos", "events_url": "https://api.github.com/users/dave-andersen/events{/privacy}", "received_events_url": "https://api.github.com/users/dave-andersen/received_events", "type": "User", "site_admin": false}, "body": "There's a lot of repetition of this basic tensor structure that only varies in the type: DT_INTX field.  It might be much more concise to stash the basic template and then sprintf the dtype also if possible.\n", "created_at": "2016-04-15T20:08:05Z", "updated_at": "2016-05-05T08:12:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59933666", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59933666"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59933666"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771"}}, "body_html": "<p>There's a lot of repetition of this basic tensor structure that only varies in the type: DT_INTX field.  It might be much more concise to stash the basic template and then sprintf the dtype also if possible.</p>", "body_text": "There's a lot of repetition of this basic tensor structure that only varies in the type: DT_INTX field.  It might be much more concise to stash the basic template and then sprintf the dtype also if possible."}