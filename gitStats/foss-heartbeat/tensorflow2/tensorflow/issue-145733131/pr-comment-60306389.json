{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60306389", "pull_request_review_id": null, "id": 60306389, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzA2Mzg5", "diff_hunk": "@@ -0,0 +1,769 @@\n+package tensorflow\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"reflect\"\n+\t\"runtime\"\n+\t\"unsafe\"\n+\n+\t\"github.com/golang/protobuf/proto\"\n+\n+\tpb \"github.com/tensorflow/tensorflow/tensorflow/contrib/go/proto\"\n+)\n+\n+import \"C\"\n+\n+const (\n+\tcAckByte  = 6\n+\tcBellByte = 7\n+\tcDc1      = 17\n+\n+\tcBytesComplex64 = 8\n+\tcBytesFloat32   = 4\n+\tcBytesFloat64   = 8\n+\tcBytesInt16     = 2\n+\tcBytesInt32     = 4\n+\tcBytesInt64     = 8\n+\tcBytesUint16    = 2\n+)\n+\n+// A DataType represents the type of the data contained in a Tensor\n+type DataType pb.DataType\n+\n+// A TensorInterface is the interface implemented by Tensors.\n+type TensorInterface interface {\n+\tData() []byte\n+\tDataSize() int64\n+\tDataType() DataType\n+\tGetVal(d ...int) (val interface{}, err error)\n+\n+\tDim(n int) int\n+\tNumDims() int\n+\n+\tBool() (res []bool, err error)\n+\tFloat32() (res []float32, err error)\n+\tFloat64() (res []float64, err error)\n+\tInt32() (res []int32, err error)\n+\tInt64() (res []int64, err error)\n+\tStr() (res [][]byte, err error)\n+\n+\tString() string\n+}\n+\n+// A Tensor holds a multi-dimensional array of elements of a single data type.\n+type Tensor struct {\n+\tpb.TensorProto\n+\n+\ttensor      TF_Tensor\n+\tdimWeights  []int\n+\tmemReleased bool\n+}\n+\n+// A TensorShape represents the shape of a Tensor.\n+type TensorShape [][]int64\n+\n+var (\n+\t// DTInvalid Invalid tensor DataType.\n+\tDTInvalid = DataType(0)\n+\t// DTBfloat corresponds to TF_BFLOAT16.\n+\tDTBfloat = DataType(TF_BFLOAT16)\n+\t// DTBool corresponds to TF_BOOL.\n+\tDTBool = DataType(TF_BOOL)\n+\t// DTComplex corresponds to TF_COMPLEX.\n+\tDTComplex = DataType(TF_COMPLEX)\n+\t// DTFloat corresponds to TF_FLOAT.\n+\tDTFloat = DataType(TF_FLOAT)\n+\t// DTDouble corresponds to TF_DOUBLE.\n+\tDTDouble = DataType(TF_DOUBLE)\n+\t// DTInt8 corresponds to TF_INT8.\n+\tDTInt8 = DataType(TF_INT8)\n+\t// DTInt16 corresponds to TF_INT16.\n+\tDTInt16 = DataType(TF_INT16)\n+\t// DTInt32 corresponds to TF_INT32.\n+\tDTInt32 = DataType(TF_INT32)\n+\t// DTInt64 corresponds to TF_INT64.\n+\tDTInt64 = DataType(TF_INT64)\n+\t// DTQint16 corresponds to TF_QINT16.\n+\tDTQint16 = DataType(TF_QINT16)\n+\t// DTQuint16 corresponds to TF_QUINT16.\n+\tDTQuint16 = DataType(TF_QUINT16)\n+\t// DTQuint32 corresponds to TF_QINT32.\n+\tDTQuint32 = DataType(TF_QINT32)\n+\t// DTQint8 corresponds to TF_QINT8.\n+\tDTQint8 = DataType(TF_QINT8)\n+\t// DTQuint8 corresponds to TF_QUINT8.\n+\tDTQuint8 = DataType(TF_QUINT8)\n+\t// DTString corresponds to TF_STRING.\n+\tDTString = DataType(TF_STRING)\n+\t// DTUint8 corresponds to TF_UINT8.\n+\tDTUint8 = DataType(TF_UINT8)\n+\t// DTUint16 corresponds to TF_UINT16.\n+\tDTUint16 = DataType(TF_UINT16)\n+)\n+\n+// NewTensorWithShape returns a new tensor with the specified type, shape and data.\n+// The supported  data types are:\n+//  - DTInt8\n+//  - DTInt16\n+//  - DTInt32\n+//  - DTInt64\n+//  - DTUint8\n+//  - DTUint16\n+//  - DTFloat\n+//  - DTDouble\n+func NewTensorWithShape(shape TensorShape, data interface{}) (*Tensor, error) {\n+\tv := reflect.ValueOf(data)\n+\tif v.Kind() != reflect.Slice {\n+\t\treturn nil, &ErrSliceExpected{\n+\t\t\tdataType: v.Kind().String(),\n+\t\t}\n+\t}\n+\n+\tdataType, err := getDataTypeFromReflect(v.Type().Elem().Kind(), int64(v.Type().Elem().Size()))\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tdataSize := int64(v.Len()) * int64(v.Type().Elem().Size())\n+\tdataPtr := v.Pointer()\n+\n+\treturn newTensor(dataType, shape, unsafe.Pointer(dataPtr), dataSize)\n+}\n+\n+// NewTensor creates a new Tensor that contains the specified data. The data type\n+// and shape is deduced from the data parameter.\n+// ex:\n+//  - NewTensor(\"hello\") // Creates scalar Tensor of type DTString\n+//  - NewTensor([]int32{1, 2, 3}) // Creates a 1-D Tensor of type DTInt32\n+//  - NewTensor([][]float32{{1, 2}, {3, 4}}) // Creates a 2-D Tensor of type DTFloat", "path": "tensorflow/contrib/go/tensor.go", "position": 184, "original_position": 140, "commit_id": "942760424141d0f5a930982d5e78aaeb05869488", "original_commit_id": "562a1513b38aa29b222464ae19dd1ccbd0f48bfb", "user": {"login": "alonsovidales", "id": 1468785, "node_id": "MDQ6VXNlcjE0Njg3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1468785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alonsovidales", "html_url": "https://github.com/alonsovidales", "followers_url": "https://api.github.com/users/alonsovidales/followers", "following_url": "https://api.github.com/users/alonsovidales/following{/other_user}", "gists_url": "https://api.github.com/users/alonsovidales/gists{/gist_id}", "starred_url": "https://api.github.com/users/alonsovidales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alonsovidales/subscriptions", "organizations_url": "https://api.github.com/users/alonsovidales/orgs", "repos_url": "https://api.github.com/users/alonsovidales/repos", "events_url": "https://api.github.com/users/alonsovidales/events{/privacy}", "received_events_url": "https://api.github.com/users/alonsovidales/received_events", "type": "User", "site_admin": false}, "body": "The idea is to support all the data types defined [here](https://github.com/tensorflow/tensorflow/pull/1771/files/562a1513b38aa29b222464ae19dd1ccbd0f48bfb#diff-6ecada9bdae40f6b8d2258c71de75c99R67) . Perhaps it would be a good idea to remove the unsupported data types. Do you think that is still necessary to specify the list here if I remove the unsupported there?\n", "created_at": "2016-04-19T20:37:35Z", "updated_at": "2016-05-05T08:12:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r60306389", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60306389"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r60306389"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771"}}, "body_html": "<p>The idea is to support all the data types defined <a href=\"https://github.com/tensorflow/tensorflow/pull/1771/files/562a1513b38aa29b222464ae19dd1ccbd0f48bfb#diff-6ecada9bdae40f6b8d2258c71de75c99R67\">here</a> . Perhaps it would be a good idea to remove the unsupported data types. Do you think that is still necessary to specify the list here if I remove the unsupported there?</p>", "body_text": "The idea is to support all the data types defined here . Perhaps it would be a good idea to remove the unsupported data types. Do you think that is still necessary to specify the list here if I remove the unsupported there?"}