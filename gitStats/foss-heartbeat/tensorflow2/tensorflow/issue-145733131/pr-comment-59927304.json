{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59927304", "pull_request_review_id": null, "id": 59927304, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTI3MzA0", "diff_hunk": "@@ -0,0 +1,570 @@\n+package tensorflow\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"strings\"\n+\n+\t\"github.com/golang/protobuf/proto\"\n+\n+\tpb \"github.com/tensorflow/tensorflow/tensorflow/contrib/go/proto\"\n+)\n+\n+const (\n+\tcOpsProtobufDefsPath = \"/usr/local/tensorlow/ops.pbtxt\"\n+)\n+\n+// Graph Representation of the computation graph.\n+type Graph struct {\n+\tdef *pb.GraphDef\n+\n+\tavailableOps map[string]*pb.OpDef\n+\tconstants    map[string]*Tensor\n+\tvariables    map[string]*Tensor\n+}\n+\n+// GraphNode Representation of one of the nodes of the TensorFlow Graph.\n+// A node takes zero or more Tensors, performs some computation, and\n+// produces zero or more Tensors.\n+type GraphNode struct {\n+\tref          *pb.NodeDef\n+\tdef          *pb.NodeDef\n+\toutDataTypes map[string]DataType\n+}\n+\n+// NewGraph Returns an initialized instance of the Graph struct.\n+func NewGraph() *Graph {\n+\treturn &Graph{\n+\t\tdef:          new(pb.GraphDef),\n+\t\tavailableOps: make(map[string]*pb.OpDef),\n+\t\tconstants:    make(map[string]*Tensor),\n+\t\tvariables:    make(map[string]*Tensor),\n+\t}\n+}\n+\n+// NewGraphFromText Returns a new graph populated with the deserialization of\n+// the provided graph string.\n+func NewGraphFromText(graphStr string) (gr *Graph, err error) {\n+\tgr = NewGraph()\n+\terr = proto.UnmarshalText(graphStr, gr.def)\n+\n+\treturn\n+}\n+\n+// LoadGraphFromFile Loads a Graph from the file on the specified path.\n+func LoadGraphFromFile(path string) (gr *Graph, err error) {\n+\tgraphStr, err := ioutil.ReadFile(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tgr = NewGraph()\n+\terr = proto.Unmarshal(graphStr, gr.def)\n+\n+\treturn\n+}\n+\n+// LoadGraphFromTextFile Loads a Graph as plain text from the file on the specified\n+// path.\n+func LoadGraphFromTextFile(path string) (gr *Graph, err error) {\n+\tgraphStr, err := ioutil.ReadFile(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\treturn NewGraphFromText(string(graphStr))\n+}\n+\n+// Op Adds a new Node to the Graph with the specified operation, this function\n+// could return an error if any of the mandatory attributes is not be present\n+// or the value is not the expected for this attribute.\n+func (gr *Graph) Op(opName string, name string, input []*GraphNode, device string, attrs map[string]interface{}) (node *GraphNode, err error) {\n+\tif err = gr.loadAvailableOps(); err != nil {\n+\t\treturn\n+\t}\n+\n+\top, opFound := gr.availableOps[strings.ToLower(opName)]\n+\tif !opFound {\n+\t\treturn nil, &ErrOperationNotFound{\n+\t\t\top: opName,\n+\t\t}\n+\t}\n+\n+\tif len(op.InputArg) != len(input) {\n+\t\treturn nil, &ErrInvalidAmounthOfInputs{\n+\t\t\toperation:  opName,\n+\t\t\topInputs:   len(op.InputArg),\n+\t\t\tspecInputs: len(input),\n+\t\t}\n+\t}\n+\tinputs := make([]string, len(input))\n+\tfor i, inNode := range input {\n+\t\tif op.InputArg[i].IsRef {\n+\t\t\tif inNode.ref == nil {\n+\t\t\t\treturn nil, &ErrExpectedVarAsinput{\n+\t\t\t\t\toperation: opName,\n+\t\t\t\t\tinputPos:  i,\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tinputs[i] = inNode.ref.Name\n+\t\t} else {\n+\t\t\tinputs[i] = inNode.def.Name\n+\t\t}\n+\t}\n+\tnode = &GraphNode{\n+\t\tdef: &pb.NodeDef{\n+\t\t\tName:   name,\n+\t\t\tOp:     opName,\n+\t\t\tInput:  inputs,\n+\t\t\tDevice: device,\n+\t\t\tAttr:   make(map[string]*pb.AttrValue),\n+\t\t},\n+\t\toutDataTypes: make(map[string]DataType),\n+\t}\n+\n+\tif attrs == nil {\n+\t\tattrs = make(map[string]interface{})\n+\t}\n+\tgr.matchTypes(input, node, attrs, op)\n+\n+\tfor _, attr := range op.Attr {\n+\t\t// Check if the attribute is specified, if it is not\n+\t\t// and doesn't have a default value, return an error since it\n+\t\t// is mandatory\n+\t\tif v, ok := attrs[attr.Name]; ok {\n+\t\t\tnode.def.Attr[attr.Name] = gr.castAttrValue(attr.Type, v)\n+\t\t\tif node.def.Attr[attr.Name] == nil {\n+\t\t\t\treturn nil, &ErrInvalidAttrValue{\n+\t\t\t\t\toperation:  opName,\n+\t\t\t\t\tattribName: attr.Name,\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif attr.DefaultValue != nil {\n+\t\t\t\tnode.def.Attr[attr.Name] = attr.DefaultValue\n+\t\t\t} else {\n+\t\t\t\treturn nil, &ErrMandatoryAttributeNotSpecified{\n+\t\t\t\t\toperation:  opName,\n+\t\t\t\t\tattribName: attr.Name,\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tgr.def.Node = append(gr.def.Node, node.def)\n+\n+\treturn node, nil\n+}\n+\n+// Variable Creates a variable operation and adds it to the graph. A variable\n+// is a type of tensor that holds state in the form of a tensor that persists\n+// across steps.\n+func (gr *Graph) Variable(name string, initialData interface{}) (op *GraphNode, err error) {\n+\tvar dims [][]int64\n+\n+\tts, err := NewTensor(initialData)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\tgr.variables[name] = ts\n+\n+\tshape := new(pb.TensorShapeProto)\n+\tif ts.NumDims() == 0 {\n+\t\tdims = [][]int64{{1}}\n+\t} else {\n+\t\tdims = ts.Shape()\n+\t}\n+\n+\tshape.Dim = make([]*pb.TensorShapeProto_Dim, len(dims))\n+\tfor i, dim := range dims {\n+\t\tshape.Dim[i] = &pb.TensorShapeProto_Dim{\n+\t\t\tSize: dim[i],\n+\t\t}\n+\t}\n+\n+\tinitVal, err := gr.Op(\"Const\", name+\"/initial_value\", nil, \"\", map[string]interface{}{\n+\t\t\"dtype\": ts.DataType(),\n+\t\t\"value\": ts,\n+\t\t\"shape\": shape,\n+\t})\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tvariable, err := gr.Op(\"Variable\", name, nil, \"\", map[string]interface{}{\n+\t\t\"dtype\":       ts.DataType(),\n+\t\t\"shape\":       shape,\n+\t\t\"container\":   \"\",\n+\t\t\"shared_name\": \"\",\n+\t})\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tvariable.ref = variable.def\n+\n+\t_, err = gr.Op(\"Assign\", name+\"/Assign\", []*GraphNode{variable, initVal}, \"\", map[string]interface{}{\n+\t\t\"use_locking\":    true,\n+\t\t\"validate_shape\": true,\n+\t})\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\top, err = gr.Op(\"Identity\", name+\"/read\", []*GraphNode{variable}, \"\", nil)\n+\n+\t// For reference this variable, use the variable as it.\n+\top.ref = variable.def\n+\n+\treturn\n+}\n+\n+// String Returns a string representation of this graph, used for debugging\n+// proposals.\n+func (gr *Graph) String() string {\n+\tvar bufStr bytes.Buffer\n+\tproto.MarshalText(&bufStr, gr.def)\n+\n+\treturn bufStr.String()\n+}\n+\n+// addInitializationGraphOp Add the initialization operation to the graph to\n+// cover all the added variables\n+func (gr *Graph) addInitializationGraphOp() {\n+\tinputs := make([]string, len(gr.variables))\n+\ti := 0\n+\tfor input := range gr.variables {\n+\t\tinputs[i] = \"^\" + input + \"/Assign\"\n+\t\ti++\n+\t}\n+\n+\tgr.def.Node = append(gr.def.Node, &pb.NodeDef{\n+\t\tName:  \"init\",\n+\t\tOp:    \"NoOp\",\n+\t\tInput: inputs,\n+\t})\n+}\n+\n+// Placeholder Adds a placeholder to the Graph, a placeholder is an\n+// operation that must be fed with data on execution.\n+func (gr *Graph) Placeholder(name string, dataType DataType, dims []int64, dimNames []string) (op *GraphNode) {", "path": "tensorflow/contrib/go/graph.go", "position": null, "original_position": 251, "commit_id": "942760424141d0f5a930982d5e78aaeb05869488", "original_commit_id": "a6e723f10b171f649213ce400b75c63e72a8912d", "user": {"login": "tmc", "id": 3977, "node_id": "MDQ6VXNlcjM5Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmc", "html_url": "https://github.com/tmc", "followers_url": "https://api.github.com/users/tmc/followers", "following_url": "https://api.github.com/users/tmc/following{/other_user}", "gists_url": "https://api.github.com/users/tmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmc/subscriptions", "organizations_url": "https://api.github.com/users/tmc/orgs", "repos_url": "https://api.github.com/users/tmc/repos", "events_url": "https://api.github.com/users/tmc/events{/privacy}", "received_events_url": "https://api.github.com/users/tmc/received_events", "type": "User", "site_admin": false}, "body": "as above\n", "created_at": "2016-04-15T19:20:20Z", "updated_at": "2016-05-05T08:12:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59927304", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59927304"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59927304"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771"}}, "body_html": "<p>as above</p>", "body_text": "as above"}