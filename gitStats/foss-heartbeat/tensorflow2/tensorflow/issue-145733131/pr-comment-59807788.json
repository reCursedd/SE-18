{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59807788", "pull_request_review_id": null, "id": 59807788, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODA3Nzg4", "diff_hunk": "@@ -0,0 +1,605 @@\n+package tensorflow\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"strings\"\n+\n+\t\"github.com/golang/protobuf/proto\"\n+\n+\tpb \"github.com/tensorflow/tensorflow/tensorflow/contrib/go/proto\"\n+)\n+\n+const (\n+\tcOpsProtobufDefsPath = \"/usr/local/tensorlow/ops.pbtxt\"\n+)\n+\n+// Graph Representation of the computation graph.\n+type Graph struct {\n+\tdef *pb.GraphDef\n+\n+\tavailableOps map[string]*pb.OpDef\n+\tconstants    map[string]*Tensor\n+\tvariables    map[string]*Tensor\n+}\n+\n+// GraphNode Representation of one of the nodes of the TensorFlow Graph.\n+// A node takes zero or more Tensors, performs some computation, and\n+// produces zero or more Tensors.\n+type GraphNode struct {\n+\tref          *pb.NodeDef\n+\tdef          *pb.NodeDef\n+\toutDataTypes map[string]DataType\n+}\n+\n+// NewGraph Returns an initialized instance of the Graph struct.\n+func NewGraph() *Graph {\n+\treturn &Graph{\n+\t\tdef:          new(pb.GraphDef),\n+\t\tavailableOps: make(map[string]*pb.OpDef),\n+\t\tconstants:    make(map[string]*Tensor),\n+\t\tvariables:    make(map[string]*Tensor),\n+\t}\n+}\n+\n+// NewGraphFromText Returns a new graph populated with the deserialization of\n+// the provided graph string.\n+func NewGraphFromText(graphStr string) (gr *Graph, err error) {\n+\tgr = NewGraph()\n+\terr = proto.UnmarshalText(graphStr, gr.def)\n+\n+\treturn\n+}\n+\n+// LoadGraphFromFile Loads a Graph from the file on the specified path.\n+func LoadGraphFromFile(path string) (gr *Graph, err error) {\n+\tgraphStr, err := ioutil.ReadFile(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tgr = NewGraph()\n+\terr = proto.Unmarshal(graphStr, gr.def)\n+\n+\treturn\n+}\n+\n+// LoadGraphFromTextFile Loads a Graph as plain text from the file on the specified\n+// path.\n+func LoadGraphFromTextFile(path string) (gr *Graph, err error) {\n+\tgraphStr, err := ioutil.ReadFile(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\treturn NewGraphFromText(string(graphStr))\n+}\n+\n+// Op Adds a new Node to the Graph with the specified operation, this function\n+// could return an error if any of the mandatory attributes is not be present\n+// or the value is not the expected for this attribute.\n+func (gr *Graph) Op(opName string, name string, input []*GraphNode, device string, attrs map[string]interface{}) (node *GraphNode, err error) {\n+\tvar op *pb.OpDef\n+\tvar opFound bool\n+\n+\tif err = gr.loadAvailableOps(); err != nil {\n+\t\treturn\n+\t}\n+\n+\tif op, opFound = gr.availableOps[strings.ToLower(opName)]; !opFound {\n+\t\terr = &ErrOperationNotFound{\n+\t\t\top: opName,\n+\t\t}\n+\t\treturn\n+\t}\n+\n+\tif len(op.InputArg) != len(input) {\n+\t\terr = &ErrInvalidAmounthOfInputs{\n+\t\t\toperation:  opName,\n+\t\t\topInputs:   len(op.InputArg),\n+\t\t\tspecInputs: len(input),\n+\t\t}\n+\t\treturn\n+\t}\n+\tinputs := make([]string, len(input))\n+\tfor i, inNode := range input {\n+\t\tif op.InputArg[i].IsRef {\n+\t\t\tif inNode.ref == nil {\n+\t\t\t\terr = &ErrExpectedVarAsinput{\n+\t\t\t\t\toperation: opName,\n+\t\t\t\t\tinputPos:  i,\n+\t\t\t\t}\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tinputs[i] = inNode.ref.Name\n+\t\t} else {\n+\t\t\tinputs[i] = inNode.def.Name\n+\t\t}\n+\t}\n+\tnode = &GraphNode{\n+\t\tdef: &pb.NodeDef{\n+\t\t\tName:   name,\n+\t\t\tOp:     opName,\n+\t\t\tInput:  inputs,\n+\t\t\tDevice: device,\n+\t\t\tAttr:   make(map[string]*pb.AttrValue),\n+\t\t},\n+\t\toutDataTypes: make(map[string]DataType),\n+\t}\n+\n+\tif attrs == nil {\n+\t\tattrs = make(map[string]interface{})\n+\t}\n+\tgr.matchTypes(input, node, attrs, op)\n+\n+\tfor _, attr := range op.Attr {\n+\t\t// Check if the attribute is specified, if it is not\n+\t\t// and don't have a default value, return an error", "path": "tensorflow/contrib/go/graph.go", "position": null, "original_position": 138, "commit_id": "942760424141d0f5a930982d5e78aaeb05869488", "original_commit_id": "0b2e8b8422c86324118a8ba8887ea219d5a71f8a", "user": {"login": "dave-andersen", "id": 827870, "node_id": "MDQ6VXNlcjgyNzg3MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/827870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dave-andersen", "html_url": "https://github.com/dave-andersen", "followers_url": "https://api.github.com/users/dave-andersen/followers", "following_url": "https://api.github.com/users/dave-andersen/following{/other_user}", "gists_url": "https://api.github.com/users/dave-andersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dave-andersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dave-andersen/subscriptions", "organizations_url": "https://api.github.com/users/dave-andersen/orgs", "repos_url": "https://api.github.com/users/dave-andersen/repos", "events_url": "https://api.github.com/users/dave-andersen/events{/privacy}", "received_events_url": "https://api.github.com/users/dave-andersen/received_events", "type": "User", "site_admin": false}, "body": "s/don't/doesn't/\n", "created_at": "2016-04-14T23:20:03Z", "updated_at": "2016-05-05T08:12:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59807788", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59807788"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59807788"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771"}}, "body_html": "<p>s/don't/doesn't/</p>", "body_text": "s/don't/doesn't/"}