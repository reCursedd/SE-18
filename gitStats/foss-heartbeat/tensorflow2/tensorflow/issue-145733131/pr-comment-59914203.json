{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59914203", "pull_request_review_id": null, "id": 59914203, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE0MjAz", "diff_hunk": "@@ -0,0 +1,763 @@\n+package tensorflow\n+\n+import (\n+\t\"encoding/binary\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"reflect\"\n+\t\"runtime\"\n+\t\"unsafe\"\n+\n+\t\"github.com/golang/protobuf/proto\"\n+\n+\tpb \"github.com/tensorflow/tensorflow/tensorflow/contrib/go/proto\"\n+)\n+\n+import \"C\"\n+\n+const (\n+\tcAckByte  = 6\n+\tcBellByte = 7\n+\tcDc1      = 17\n+\n+\tcBytesComplex64 = 8\n+\tcBytesFloat32   = 4\n+\tcBytesFloat64   = 8\n+\tcBytesInt16     = 2\n+\tcBytesInt32     = 4\n+\tcBytesInt64     = 8\n+\tcBytesUint16    = 2\n+)\n+\n+// DataType Type of the data contained by a Tensor\n+type DataType pb.DataType\n+\n+// TensorInt Interface to be implemented by the tensors.\n+type TensorInt interface {\n+\tData() []byte\n+\tDataSize() int64\n+\tDataType() DataType\n+\tGetVal(d ...int) (val interface{}, err error)\n+\n+\tDim(n int) int\n+\tNumDims() int\n+\n+\tAsBool() (res []bool, err error)\n+\tAsFloat32() (res []float32, err error)\n+\tAsFloat64() (res []float64, err error)\n+\tAsInt32() (res []int32, err error)\n+\tAsInt64() (res []int64, err error)\n+\tAsStr() (res [][]byte, err error)\n+\n+\tString() string\n+}\n+\n+// Tensor Holds a multi-dimensional array of elements of a single data type.\n+type Tensor struct {\n+\tpb.TensorProto\n+\n+\ttensor      TF_Tensor\n+\tdimWeights  []int\n+\tmemReleased bool\n+}\n+\n+// TensorShape represents the shapre of a Tensor.\n+type TensorShape [][]int64\n+\n+var (\n+\t// DtInvalid Invalid tensor DataType.\n+\tDtInvalid = DataType(0)\n+\t// DtBfloat corresponds to TF_BFLOAT16.\n+\tDtBfloat = DataType(TF_BFLOAT16)\n+\t// DtBool corresponds to TF_BOOL.\n+\tDtBool = DataType(TF_BOOL)\n+\t// DtComplex corresponds to TF_COMPLEX.\n+\tDtComplex = DataType(TF_COMPLEX)\n+\t// DtFloat corresponds to TF_FLOAT.\n+\tDtFloat = DataType(TF_FLOAT)\n+\t// DtDouble corresponds to TF_DOUBLE.\n+\tDtDouble = DataType(TF_DOUBLE)\n+\t// DtInt8 corresponds to TF_INT8.\n+\tDtInt8 = DataType(TF_INT8)\n+\t// DtInt16 corresponds to TF_INT16.\n+\tDtInt16 = DataType(TF_INT16)\n+\t// DtInt32 corresponds to TF_INT32.\n+\tDtInt32 = DataType(TF_INT32)\n+\t// DtInt64 corresponds to TF_INT64.\n+\tDtInt64 = DataType(TF_INT64)\n+\t// DtQint16 corresponds to TF_QINT16.\n+\tDtQint16 = DataType(TF_QINT16)\n+\t// DtQuint16 corresponds to TF_QUINT16.\n+\tDtQuint16 = DataType(TF_QUINT16)\n+\t// DtQuint32 corresponds to TF_QINT32.\n+\tDtQuint32 = DataType(TF_QINT32)\n+\t// DtQint8 corresponds to TF_QINT8.\n+\tDtQint8 = DataType(TF_QINT8)\n+\t// DtQuint8 corresponds to TF_QUINT8.\n+\tDtQuint8 = DataType(TF_QUINT8)\n+\t// DtString corresponds to TF_STRING.\n+\tDtString = DataType(TF_STRING)\n+\t// DtUint8 corresponds to TF_UINT8.\n+\tDtUint8 = DataType(TF_UINT8)\n+\t// DtUint16 corresponds to TF_UINT16.\n+\tDtUint16 = DataType(TF_UINT16)\n+)\n+\n+// NewTensorWithShape returns a new tensor with teh specified type, shape and data.", "path": "tensorflow/contrib/go/tensor.go", "position": null, "original_position": 106, "commit_id": "942760424141d0f5a930982d5e78aaeb05869488", "original_commit_id": "210180befbd05694aa3285fef7d498bbd1be2dcc", "user": {"login": "dave-andersen", "id": 827870, "node_id": "MDQ6VXNlcjgyNzg3MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/827870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dave-andersen", "html_url": "https://github.com/dave-andersen", "followers_url": "https://api.github.com/users/dave-andersen/followers", "following_url": "https://api.github.com/users/dave-andersen/following{/other_user}", "gists_url": "https://api.github.com/users/dave-andersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dave-andersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dave-andersen/subscriptions", "organizations_url": "https://api.github.com/users/dave-andersen/orgs", "repos_url": "https://api.github.com/users/dave-andersen/repos", "events_url": "https://api.github.com/users/dave-andersen/events{/privacy}", "received_events_url": "https://api.github.com/users/dave-andersen/received_events", "type": "User", "site_admin": false}, "body": "s/teh/the/\n", "created_at": "2016-04-15T17:56:17Z", "updated_at": "2016-05-05T08:12:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59914203", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59914203"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59914203"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771"}}, "body_html": "<p>s/teh/the/</p>", "body_text": "s/teh/the/"}