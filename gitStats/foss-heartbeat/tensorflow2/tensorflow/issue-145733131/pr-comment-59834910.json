{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59834910", "pull_request_review_id": null, "id": 59834910, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODM0OTEw", "diff_hunk": "@@ -0,0 +1,605 @@\n+package tensorflow\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"strings\"\n+\n+\t\"github.com/golang/protobuf/proto\"\n+\n+\tpb \"github.com/tensorflow/tensorflow/tensorflow/contrib/go/proto\"\n+)\n+\n+const (\n+\tcOpsProtobufDefsPath = \"/usr/local/tensorlow/ops.pbtxt\"\n+)\n+\n+// Graph Representation of the computation graph.\n+type Graph struct {\n+\tdef *pb.GraphDef\n+\n+\tavailableOps map[string]*pb.OpDef\n+\tconstants    map[string]*Tensor\n+\tvariables    map[string]*Tensor\n+}\n+\n+// GraphNode Representation of one of the nodes of the TensorFlow Graph.\n+// A node takes zero or more Tensors, performs some computation, and\n+// produces zero or more Tensors.\n+type GraphNode struct {\n+\tref          *pb.NodeDef\n+\tdef          *pb.NodeDef\n+\toutDataTypes map[string]DataType\n+}\n+\n+// NewGraph Returns an initialized instance of the Graph struct.\n+func NewGraph() *Graph {\n+\treturn &Graph{\n+\t\tdef:          new(pb.GraphDef),\n+\t\tavailableOps: make(map[string]*pb.OpDef),\n+\t\tconstants:    make(map[string]*Tensor),\n+\t\tvariables:    make(map[string]*Tensor),\n+\t}\n+}\n+\n+// NewGraphFromText Returns a new graph populated with the deserialization of\n+// the provided graph string.\n+func NewGraphFromText(graphStr string) (gr *Graph, err error) {\n+\tgr = NewGraph()\n+\terr = proto.UnmarshalText(graphStr, gr.def)\n+\n+\treturn\n+}\n+\n+// LoadGraphFromFile Loads a Graph from the file on the specified path.\n+func LoadGraphFromFile(path string) (gr *Graph, err error) {\n+\tgraphStr, err := ioutil.ReadFile(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tgr = NewGraph()\n+\terr = proto.Unmarshal(graphStr, gr.def)\n+\n+\treturn\n+}\n+\n+// LoadGraphFromTextFile Loads a Graph as plain text from the file on the specified\n+// path.\n+func LoadGraphFromTextFile(path string) (gr *Graph, err error) {\n+\tgraphStr, err := ioutil.ReadFile(path)\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\treturn NewGraphFromText(string(graphStr))\n+}\n+\n+// Op Adds a new Node to the Graph with the specified operation, this function\n+// could return an error if any of the mandatory attributes is not be present\n+// or the value is not the expected for this attribute.\n+func (gr *Graph) Op(opName string, name string, input []*GraphNode, device string, attrs map[string]interface{}) (node *GraphNode, err error) {", "path": "tensorflow/contrib/go/graph.go", "position": null, "original_position": 82, "commit_id": "942760424141d0f5a930982d5e78aaeb05869488", "original_commit_id": "0b2e8b8422c86324118a8ba8887ea219d5a71f8a", "user": {"login": "alonsovidales", "id": 1468785, "node_id": "MDQ6VXNlcjE0Njg3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1468785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alonsovidales", "html_url": "https://github.com/alonsovidales", "followers_url": "https://api.github.com/users/alonsovidales/followers", "following_url": "https://api.github.com/users/alonsovidales/following{/other_user}", "gists_url": "https://api.github.com/users/alonsovidales/gists{/gist_id}", "starred_url": "https://api.github.com/users/alonsovidales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alonsovidales/subscriptions", "organizations_url": "https://api.github.com/users/alonsovidales/orgs", "repos_url": "https://api.github.com/users/alonsovidales/repos", "events_url": "https://api.github.com/users/alonsovidales/events{/privacy}", "received_events_url": "https://api.github.com/users/alonsovidales/received_events", "type": "User", "site_admin": false}, "body": "I agree with you, I'm going to use explicit return values for this method. This is more a personal preference in Go, if you are changing the function definition really often, the params that you are returning, etc, assign and return makes more easy to work with the code so you don't need to change all the returned values every time the returned params changes, but since here we are returning mostly errors generated inside this function I think that is better if the error and the return goes together.\n\nI also changed the assignations and conditionals in the same line, the indentation was super ugly, I don't know what I was thinking when I did that \u00af_(\u30c4)_/\u00af\n\nPerhaps I'm going to split this in two, the logic for the operation and the logic for the attribute values casting.\n", "created_at": "2016-04-15T07:16:19Z", "updated_at": "2016-05-05T08:12:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59834910", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/59834910"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r59834910"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771"}}, "body_html": "<p>I agree with you, I'm going to use explicit return values for this method. This is more a personal preference in Go, if you are changing the function definition really often, the params that you are returning, etc, assign and return makes more easy to work with the code so you don't need to change all the returned values every time the returned params changes, but since here we are returning mostly errors generated inside this function I think that is better if the error and the return goes together.</p>\n<p>I also changed the assignations and conditionals in the same line, the indentation was super ugly, I don't know what I was thinking when I did that \u00af_(\u30c4)_/\u00af</p>\n<p>Perhaps I'm going to split this in two, the logic for the operation and the logic for the attribute values casting.</p>", "body_text": "I agree with you, I'm going to use explicit return values for this method. This is more a personal preference in Go, if you are changing the function definition really often, the params that you are returning, etc, assign and return makes more easy to work with the code so you don't need to change all the returned values every time the returned params changes, but since here we are returning mostly errors generated inside this function I think that is better if the error and the return goes together.\nI also changed the assignations and conditionals in the same line, the indentation was super ugly, I don't know what I was thinking when I did that \u00af_(\u30c4)_/\u00af\nPerhaps I'm going to split this in two, the logic for the operation and the logic for the attribute values casting."}