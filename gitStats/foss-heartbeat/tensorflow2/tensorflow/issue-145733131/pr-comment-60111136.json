{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60111136", "pull_request_review_id": null, "id": 60111136, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTExMTM2", "diff_hunk": "@@ -0,0 +1,6 @@\n+/*", "path": "tensorflow/contrib/go/doc.go", "position": 1, "original_position": 1, "commit_id": "942760424141d0f5a930982d5e78aaeb05869488", "original_commit_id": "a33e29358d08de8231b38d57ac08ed5257dc1095", "user": {"login": "alonsovidales", "id": 1468785, "node_id": "MDQ6VXNlcjE0Njg3ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1468785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alonsovidales", "html_url": "https://github.com/alonsovidales", "followers_url": "https://api.github.com/users/alonsovidales/followers", "following_url": "https://api.github.com/users/alonsovidales/following{/other_user}", "gists_url": "https://api.github.com/users/alonsovidales/gists{/gist_id}", "starred_url": "https://api.github.com/users/alonsovidales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alonsovidales/subscriptions", "organizations_url": "https://api.github.com/users/alonsovidales/orgs", "repos_url": "https://api.github.com/users/alonsovidales/repos", "events_url": "https://api.github.com/users/alonsovidales/events{/privacy}", "received_events_url": "https://api.github.com/users/alonsovidales/received_events", "type": "User", "site_admin": false}, "body": "About the named returned parameters (I don't know why GitHub doesn't allow me to answer directly to the named resturns comment). I usually name the returned parameters because I used to think that this was better for documenting proposals, but googling pros and cons, there are a lot of people in favour and against. Some people think that name the params causes confusion and sometimes initializes vars that don't need to be initialized and so on, but other people says that is better for auto-generated documentation.\nFor some methods like this:\n\n``` go\nfunc serialize(data interface{}, deep int, dimsIn [][]int64) (ser []interface{}, dims [][]int64, dataType DataType, dataSize int64, err error)\n```\n\nI would prefer to maintain the named params. But most of the other functions can be unnamed.\nChecking out some libs like [net/http](https://golang.org/pkg/net/http/) there we have some of the functions named like Client.Do, Client.Get, etc, but most of them are unnamed.\n\nSo, yes, I'm going to change almost all the methods \ud83d\udc4d \n", "created_at": "2016-04-18T18:36:43Z", "updated_at": "2016-05-05T08:12:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r60111136", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60111136"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1771#discussion_r60111136"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1771"}}, "body_html": "<p>About the named returned parameters (I don't know why GitHub doesn't allow me to answer directly to the named resturns comment). I usually name the returned parameters because I used to think that this was better for documenting proposals, but googling pros and cons, there are a lot of people in favour and against. Some people think that name the params causes confusion and sometimes initializes vars that don't need to be initialized and so on, but other people says that is better for auto-generated documentation.<br>\nFor some methods like this:</p>\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">func</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-v\">data</span> <span class=\"pl-v\">interface</span>{}, <span class=\"pl-v\">deep</span> <span class=\"pl-v\">int</span>, <span class=\"pl-v\">dimsIn</span> [][]<span class=\"pl-v\">int64</span>) (<span class=\"pl-v\">ser</span> []<span class=\"pl-v\">interface</span>{}, dims [][]<span class=\"pl-k\">int64</span>, dataType <span class=\"pl-v\">DataType</span>, dataSize <span class=\"pl-k\">int64</span>, err <span class=\"pl-k\">error</span>)</pre></div>\n<p>I would prefer to maintain the named params. But most of the other functions can be unnamed.<br>\nChecking out some libs like <a href=\"https://golang.org/pkg/net/http/\" rel=\"nofollow\">net/http</a> there we have some of the functions named like Client.Do, Client.Get, etc, but most of them are unnamed.</p>\n<p>So, yes, I'm going to change almost all the methods <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "body_text": "About the named returned parameters (I don't know why GitHub doesn't allow me to answer directly to the named resturns comment). I usually name the returned parameters because I used to think that this was better for documenting proposals, but googling pros and cons, there are a lot of people in favour and against. Some people think that name the params causes confusion and sometimes initializes vars that don't need to be initialized and so on, but other people says that is better for auto-generated documentation.\nFor some methods like this:\nfunc serialize(data interface{}, deep int, dimsIn [][]int64) (ser []interface{}, dims [][]int64, dataType DataType, dataSize int64, err error)\nI would prefer to maintain the named params. But most of the other functions can be unnamed.\nChecking out some libs like net/http there we have some of the functions named like Client.Do, Client.Get, etc, but most of them are unnamed.\nSo, yes, I'm going to change almost all the methods \ud83d\udc4d"}