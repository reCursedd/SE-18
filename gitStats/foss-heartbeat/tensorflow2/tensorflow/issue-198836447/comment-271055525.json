{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271055525", "html_url": "https://github.com/tensorflow/tensorflow/issues/6646#issuecomment-271055525", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6646", "id": 271055525, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTA1NTUyNQ==", "user": {"login": "theweiho", "id": 6696956, "node_id": "MDQ6VXNlcjY2OTY5NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6696956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theweiho", "html_url": "https://github.com/theweiho", "followers_url": "https://api.github.com/users/theweiho/followers", "following_url": "https://api.github.com/users/theweiho/following{/other_user}", "gists_url": "https://api.github.com/users/theweiho/gists{/gist_id}", "starred_url": "https://api.github.com/users/theweiho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theweiho/subscriptions", "organizations_url": "https://api.github.com/users/theweiho/orgs", "repos_url": "https://api.github.com/users/theweiho/repos", "events_url": "https://api.github.com/users/theweiho/events{/privacy}", "received_events_url": "https://api.github.com/users/theweiho/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-07T02:11:30Z", "updated_at": "2017-01-07T02:11:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'd expect that to be the most common use case, though? Even if there are useless col indices, they're usually just generated for the user by <code>parse_example()</code> .</p>\n<p>I agree that the new API would make it cleaner to add arbitrary weights - though I'd also expect most cases dealing with weights to have the weights stored in their input data as well - like<br>\nExample 1: float_list { value: 0.3 value: 0.6 value: 0.1 }<br>\nExample 2: float_list { value: 0.8 value: 0.2 }<br>\nwhich would be automatically converted into SparseTensor by <code>parse_example()</code>.</p>\n<p>I'm not sure making the most common use case more difficult (and requiring people to manipulate SparseTensor internals) would be a good API change - let's see what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15674604\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ysuematsu\">@ysuematsu</a> thinks after he's back from vacation.</p>\n<p>(In addition, fully changing the API would require a deprecation period, updating existing users, then fixing any missed breakages after the full change. Just adding another arg to the fn - allowing ppl to pass in either sp_ids/sp_weights or sp_mat would be easier, but that'd increase the number of parameters and code complexity.)</p>", "body_text": "I'd expect that to be the most common use case, though? Even if there are useless col indices, they're usually just generated for the user by parse_example() .\nI agree that the new API would make it cleaner to add arbitrary weights - though I'd also expect most cases dealing with weights to have the weights stored in their input data as well - like\nExample 1: float_list { value: 0.3 value: 0.6 value: 0.1 }\nExample 2: float_list { value: 0.8 value: 0.2 }\nwhich would be automatically converted into SparseTensor by parse_example().\nI'm not sure making the most common use case more difficult (and requiring people to manipulate SparseTensor internals) would be a good API change - let's see what @ysuematsu thinks after he's back from vacation.\n(In addition, fully changing the API would require a deprecation period, updating existing users, then fixing any missed breakages after the full change. Just adding another arg to the fn - allowing ppl to pass in either sp_ids/sp_weights or sp_mat would be easier, but that'd increase the number of parameters and code complexity.)", "body": "I'd expect that to be the most common use case, though? Even if there are useless col indices, they're usually just generated for the user by `parse_example()` .\r\n\r\nI agree that the new API would make it cleaner to add arbitrary weights - though I'd also expect most cases dealing with weights to have the weights stored in their input data as well - like\r\nExample 1: float_list { value: 0.3 value: 0.6 value: 0.1 }\r\nExample 2: float_list { value: 0.8 value: 0.2 }\r\nwhich would be automatically converted into SparseTensor by `parse_example()`.\r\n\r\nI'm not sure making the most common use case more difficult (and requiring people to manipulate SparseTensor internals) would be a good API change - let's see what @ysuematsu thinks after he's back from vacation.\r\n\r\n(In addition, fully changing the API would require a deprecation period, updating existing users, then fixing any missed breakages after the full change. Just adding another arg to the fn - allowing ppl to pass in either sp_ids/sp_weights or sp_mat would be easier, but that'd increase the number of parameters and code complexity.)"}