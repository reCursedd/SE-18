{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/150131484", "pull_request_review_id": 75636786, "id": 150131484, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDEzMTQ4NA==", "diff_hunk": "@@ -1762,14 +1921,26 @@ bool CUDABlas::DoBlasGemm(\n                       \"precondition violation\";\n     }\n   }\n-  // TODO(sesse): Consider supporting the Hgemm interface, which uses half\n-  // calculations internally (faster on newer devices, such as Pascal and TX1,\n-  // but less precise).\n-  return DoBlasInternal(\n-      wrap::cublasSgemmEx, stream, true /* = pointer_mode_host */,\n-      CUDABlasTranspose(transa), CUDABlasTranspose(transb), m, n, k, &alpha,\n-      CUDAMemory(a), SE_CUDA_DATA_HALF, lda, CUDAMemory(b), SE_CUDA_DATA_HALF,\n-      ldb, &beta, CUDAMemoryMutable(c), SE_CUDA_DATA_HALF, ldc);\n+\n+  bool use_tensor_ops = false;\n+#if CUDA_VERSION >= 9000\n+  int cc_major, cc_minor;\n+  stream->parent()->GetDeviceDescription().cuda_compute_capability(&cc_major,\n+                                                                   &cc_minor);\n+\n+  // GPUs < sm_70 don't support tensor cores\n+  if (cc_major >= 7 && TensorOpMathEnabled()) {", "path": "tensorflow/stream_executor/cuda/cuda_blas.cc", "position": 147, "original_position": 1666, "commit_id": "80d3e858255e1d829b927b5996b5cce091b390ec", "original_commit_id": "9492b542df43ea49b160af15793be02e2f3fb376", "user": {"login": "zheng-xq", "id": 15736910, "node_id": "MDQ6VXNlcjE1NzM2OTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/15736910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zheng-xq", "html_url": "https://github.com/zheng-xq", "followers_url": "https://api.github.com/users/zheng-xq/followers", "following_url": "https://api.github.com/users/zheng-xq/following{/other_user}", "gists_url": "https://api.github.com/users/zheng-xq/gists{/gist_id}", "starred_url": "https://api.github.com/users/zheng-xq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zheng-xq/subscriptions", "organizations_url": "https://api.github.com/users/zheng-xq/orgs", "repos_url": "https://api.github.com/users/zheng-xq/repos", "events_url": "https://api.github.com/users/zheng-xq/events{/privacy}", "received_events_url": "https://api.github.com/users/zheng-xq/received_events", "type": "User", "site_admin": false}, "body": "I'm not a big fan of parsing env-var on every matmul-calls. Either cache this globally, or have the caller cache it and pass it in. \r\n\r\nThe problem with a global setting is that you will have to test it separately. Since there is no way to unset it to not affect other tests. \r\n\r\nWith TF, this can be cached at the op construction time, and therefore save the trouble.", "created_at": "2017-11-10T01:01:14Z", "updated_at": "2017-12-13T19:25:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13451#discussion_r150131484", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13451", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/150131484"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13451#discussion_r150131484"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13451"}}, "body_html": "<p>I'm not a big fan of parsing env-var on every matmul-calls. Either cache this globally, or have the caller cache it and pass it in.</p>\n<p>The problem with a global setting is that you will have to test it separately. Since there is no way to unset it to not affect other tests.</p>\n<p>With TF, this can be cached at the op construction time, and therefore save the trouble.</p>", "body_text": "I'm not a big fan of parsing env-var on every matmul-calls. Either cache this globally, or have the caller cache it and pass it in.\nThe problem with a global setting is that you will have to test it separately. Since there is no way to unset it to not affect other tests.\nWith TF, this can be cached at the op construction time, and therefore save the trouble."}