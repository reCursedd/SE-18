{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8487", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8487/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8487/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8487/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8487", "id": 214914182, "node_id": "MDU6SXNzdWUyMTQ5MTQxODI=", "number": 8487, "title": "init_fn Error of tf.train.Scaffold", "user": {"login": "lsy643", "id": 7875729, "node_id": "MDQ6VXNlcjc4NzU3Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7875729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsy643", "html_url": "https://github.com/lsy643", "followers_url": "https://api.github.com/users/lsy643/followers", "following_url": "https://api.github.com/users/lsy643/following{/other_user}", "gists_url": "https://api.github.com/users/lsy643/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsy643/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsy643/subscriptions", "organizations_url": "https://api.github.com/users/lsy643/orgs", "repos_url": "https://api.github.com/users/lsy643/repos", "events_url": "https://api.github.com/users/lsy643/events{/privacy}", "received_events_url": "https://api.github.com/users/lsy643/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-17T05:51:12Z", "updated_at": "2018-07-12T23:08:51Z", "closed_at": "2017-04-07T19:47:58Z", "author_association": "NONE", "body_html": "<p>In my experiment the <strong>init_fn</strong> of the <strong>tf.train.Scaffold</strong> can not  work correctly. It seems that this is caused by the <strong>lambda</strong> usage in the <strong><strong>init</strong></strong> of <strong>tf.train.Scaffold</strong></p>\n<h3>Environment info</h3>\n<p>Operating System: ubuntu 16.04</p>\n<p>Installed version of CUDA and cuDNN:<br>\n-rw-r--r-- 1 root root    556000 Jan 26 23:48 /usr/local/cuda/lib64/libcudadevrt.a<br>\nlrwxrwxrwx 1 root root        16 Jan 26 23:51 /usr/local/cuda/lib64/libcudart.so -&gt; libcudart.so.8.0<br>\nlrwxrwxrwx 1 root root        19 Jan 26 23:51 /usr/local/cuda/lib64/libcudart.so.8.0 -&gt; libcudart.so.8.0.61<br>\n-rw-r--r-- 1 root root    415432 Jan 26 23:48 /usr/local/cuda/lib64/libcudart.so.8.0.61<br>\n-rw-r--r-- 1 root root    775162 Jan 26 23:48 /usr/local/cuda/lib64/libcudart_static.a<br>\nlrwxrwxrwx 1 1000 users       13 Nov  7 07:00 /usr/local/cuda/lib64/libcudnn.so -&gt; libcudnn.so.5<br>\nlrwxrwxrwx 1 1000 users       18 Nov  7 07:00 /usr/local/cuda/lib64/libcudnn.so.5 -&gt; libcudnn.so.5.1.10<br>\n-rwxr-xr-x 1 1000 users 84163560 Nov  7 06:47 /usr/local/cuda/lib64/libcudnn.so.5.1.10<br>\n-rw-r--r-- 1 1000 users 70364814 Nov  7 06:47 /usr/local/cuda/lib64/libcudnn_static.a</p>\n<p>All the experiments run in a <strong>nvidia-docker container</strong> run with <strong>tensorflow/tensorflow:devel-latest-gpu</strong> image</p>\n<ol>\n<li>A link to the pip package you installed: tensorflow/tensorflow:devel-latest-gpu</li>\n<li>The output from <code>python -c \"import tensorflow; print(tensorflow.__version__)\"</code>. 1.0.1</li>\n</ol>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.Graph().as_default():\n    images <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">224</span>, <span class=\"pl-c1\">224</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)<span class=\"pl-bu\">`</span>\n    logits <span class=\"pl-k\">=</span> tf.layers.conv2d(images, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">1</span>)\n    all_vars <span class=\"pl-k\">=</span> tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">GLOBAL_VARIABLES</span>)\n    my_init_fn <span class=\"pl-k\">=</span> slim.assign_from_checkpoint_fn(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>, all_vars)\n    scaffold <span class=\"pl-k\">=</span> tf.train.Scaffold(<span class=\"pl-v\">init_fn</span><span class=\"pl-k\">=</span>my_init_fn)\n    <span class=\"pl-k\">with</span> tf.train.MonitoredTrainingSession(\n        <span class=\"pl-v\">checkpoint_dir</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>,\n        <span class=\"pl-v\">scaffold</span><span class=\"pl-k\">=</span>scaffold,\n        ) <span class=\"pl-k\">as</span> session:\n        <span class=\"pl-k\">pass</span></pre></div>\n<h3>What other attempted solutions have you tried?</h3>\n<p>It seems that the problem may be solved by replacing the</p>\n<div class=\"highlight highlight-source-python\"><pre> scaffold <span class=\"pl-k\">=</span> tf.train.Scaffold(<span class=\"pl-v\">init_fn</span><span class=\"pl-k\">=</span>my_init_fn)</pre></div>\n<p>with</p>\n<div class=\"highlight highlight-source-python\"><pre>scaffold <span class=\"pl-k\">=</span> tf.train.Scaffold()\nscaffold._init_fn <span class=\"pl-k\">=</span> my_init_fn</pre></div>\n<h3>Logs or other output that would be helpful</h3>\n<pre><code>Traceback (most recent call last):\n  File \"start_job.py\", line 219, in &lt;module&gt;\n    train_param=get_train_param(train_args)\n  File \"/root/py_libs/slim_toolbox/training/train_core.py\", line 150, in train_network\n    config=get_default_sess_config()) as session:\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 315, in MonitoredTrainingSession\n    return MonitoredSession(session_creator=session_creator, hooks=all_hooks)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 601, in __init__\n    session_creator, hooks, should_recover=True)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 434, in __init__\n    self._sess = _RecoverableSession(self._coordinated_creator)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 767, in __init__\n    _WrappedSession.__init__(self, self._create_session())\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 772, in _create_session\n    return self._sess_creator.create_session()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 494, in create_session\n    self.tf_sess = self._session_creator.create_session()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 375, in create_session\n    init_fn=self._scaffold.init_fn)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/session_manager.py\", line 264, in prepare_session\n    init_fn(sess)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 128, in &lt;lambda&gt;\n    self._init_fn = lambda sess: init_fn(self, sess)\nTypeError: callback() takes exactly 1 argument (2 given)\n</code></pre>", "body_text": "In my experiment the init_fn of the tf.train.Scaffold can not  work correctly. It seems that this is caused by the lambda usage in the init of tf.train.Scaffold\nEnvironment info\nOperating System: ubuntu 16.04\nInstalled version of CUDA and cuDNN:\n-rw-r--r-- 1 root root    556000 Jan 26 23:48 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root        16 Jan 26 23:51 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.8.0\nlrwxrwxrwx 1 root root        19 Jan 26 23:51 /usr/local/cuda/lib64/libcudart.so.8.0 -> libcudart.so.8.0.61\n-rw-r--r-- 1 root root    415432 Jan 26 23:48 /usr/local/cuda/lib64/libcudart.so.8.0.61\n-rw-r--r-- 1 root root    775162 Jan 26 23:48 /usr/local/cuda/lib64/libcudart_static.a\nlrwxrwxrwx 1 1000 users       13 Nov  7 07:00 /usr/local/cuda/lib64/libcudnn.so -> libcudnn.so.5\nlrwxrwxrwx 1 1000 users       18 Nov  7 07:00 /usr/local/cuda/lib64/libcudnn.so.5 -> libcudnn.so.5.1.10\n-rwxr-xr-x 1 1000 users 84163560 Nov  7 06:47 /usr/local/cuda/lib64/libcudnn.so.5.1.10\n-rw-r--r-- 1 1000 users 70364814 Nov  7 06:47 /usr/local/cuda/lib64/libcudnn_static.a\nAll the experiments run in a nvidia-docker container run with tensorflow/tensorflow:devel-latest-gpu image\n\nA link to the pip package you installed: tensorflow/tensorflow:devel-latest-gpu\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\". 1.0.1\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nwith tf.Graph().as_default():\n    images = tf.placeholder(shape=[32, 224, 224, 3], dtype=tf.float32)`\n    logits = tf.layers.conv2d(images, 3, 1)\n    all_vars = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)\n    my_init_fn = slim.assign_from_checkpoint_fn('', all_vars)\n    scaffold = tf.train.Scaffold(init_fn=my_init_fn)\n    with tf.train.MonitoredTrainingSession(\n        checkpoint_dir='',\n        scaffold=scaffold,\n        ) as session:\n        pass\nWhat other attempted solutions have you tried?\nIt seems that the problem may be solved by replacing the\n scaffold = tf.train.Scaffold(init_fn=my_init_fn)\nwith\nscaffold = tf.train.Scaffold()\nscaffold._init_fn = my_init_fn\nLogs or other output that would be helpful\nTraceback (most recent call last):\n  File \"start_job.py\", line 219, in <module>\n    train_param=get_train_param(train_args)\n  File \"/root/py_libs/slim_toolbox/training/train_core.py\", line 150, in train_network\n    config=get_default_sess_config()) as session:\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 315, in MonitoredTrainingSession\n    return MonitoredSession(session_creator=session_creator, hooks=all_hooks)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 601, in __init__\n    session_creator, hooks, should_recover=True)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 434, in __init__\n    self._sess = _RecoverableSession(self._coordinated_creator)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 767, in __init__\n    _WrappedSession.__init__(self, self._create_session())\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 772, in _create_session\n    return self._sess_creator.create_session()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 494, in create_session\n    self.tf_sess = self._session_creator.create_session()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 375, in create_session\n    init_fn=self._scaffold.init_fn)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/session_manager.py\", line 264, in prepare_session\n    init_fn(sess)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 128, in <lambda>\n    self._init_fn = lambda sess: init_fn(self, sess)\nTypeError: callback() takes exactly 1 argument (2 given)", "body": "In my experiment the **init_fn** of the **tf.train.Scaffold** can not  work correctly. It seems that this is caused by the **lambda** usage in the **__init__** of **tf.train.Scaffold**\r\n\r\n\r\n\r\n### Environment info\r\nOperating System: ubuntu 16.04\r\n\r\nInstalled version of CUDA and cuDNN: \r\n-rw-r--r-- 1 root root    556000 Jan 26 23:48 /usr/local/cuda/lib64/libcudadevrt.a\r\nlrwxrwxrwx 1 root root        16 Jan 26 23:51 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.8.0\r\nlrwxrwxrwx 1 root root        19 Jan 26 23:51 /usr/local/cuda/lib64/libcudart.so.8.0 -> libcudart.so.8.0.61\r\n-rw-r--r-- 1 root root    415432 Jan 26 23:48 /usr/local/cuda/lib64/libcudart.so.8.0.61\r\n-rw-r--r-- 1 root root    775162 Jan 26 23:48 /usr/local/cuda/lib64/libcudart_static.a\r\nlrwxrwxrwx 1 1000 users       13 Nov  7 07:00 /usr/local/cuda/lib64/libcudnn.so -> libcudnn.so.5\r\nlrwxrwxrwx 1 1000 users       18 Nov  7 07:00 /usr/local/cuda/lib64/libcudnn.so.5 -> libcudnn.so.5.1.10\r\n-rwxr-xr-x 1 1000 users 84163560 Nov  7 06:47 /usr/local/cuda/lib64/libcudnn.so.5.1.10\r\n-rw-r--r-- 1 1000 users 70364814 Nov  7 06:47 /usr/local/cuda/lib64/libcudnn_static.a\r\n\r\n\r\nAll the experiments run in a **nvidia-docker container** run with **tensorflow/tensorflow:devel-latest-gpu** image\r\n\r\n1. A link to the pip package you installed: tensorflow/tensorflow:devel-latest-gpu\r\n2. The output from `python -c \"import tensorflow; print(tensorflow.__version__)\"`. 1.0.1\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n```python\r\nwith tf.Graph().as_default():\r\n    images = tf.placeholder(shape=[32, 224, 224, 3], dtype=tf.float32)`\r\n    logits = tf.layers.conv2d(images, 3, 1)\r\n    all_vars = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)\r\n    my_init_fn = slim.assign_from_checkpoint_fn('', all_vars)\r\n    scaffold = tf.train.Scaffold(init_fn=my_init_fn)\r\n    with tf.train.MonitoredTrainingSession(\r\n        checkpoint_dir='',\r\n        scaffold=scaffold,\r\n        ) as session:\r\n        pass\r\n```\r\n### What other attempted solutions have you tried?\r\nIt seems that the problem may be solved by replacing the \r\n```python\r\n scaffold = tf.train.Scaffold(init_fn=my_init_fn)\r\n```\r\nwith \r\n```python\r\nscaffold = tf.train.Scaffold()\r\nscaffold._init_fn = my_init_fn\r\n```\r\n\r\n### Logs or other output that would be helpful\r\n```\r\nTraceback (most recent call last):\r\n  File \"start_job.py\", line 219, in <module>\r\n    train_param=get_train_param(train_args)\r\n  File \"/root/py_libs/slim_toolbox/training/train_core.py\", line 150, in train_network\r\n    config=get_default_sess_config()) as session:\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 315, in MonitoredTrainingSession\r\n    return MonitoredSession(session_creator=session_creator, hooks=all_hooks)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 601, in __init__\r\n    session_creator, hooks, should_recover=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 434, in __init__\r\n    self._sess = _RecoverableSession(self._coordinated_creator)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 767, in __init__\r\n    _WrappedSession.__init__(self, self._create_session())\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 772, in _create_session\r\n    return self._sess_creator.create_session()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 494, in create_session\r\n    self.tf_sess = self._session_creator.create_session()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 375, in create_session\r\n    init_fn=self._scaffold.init_fn)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/session_manager.py\", line 264, in prepare_session\r\n    init_fn(sess)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py\", line 128, in <lambda>\r\n    self._init_fn = lambda sess: init_fn(self, sess)\r\nTypeError: callback() takes exactly 1 argument (2 given)\r\n```\r\n"}