{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/339711403", "html_url": "https://github.com/tensorflow/tensorflow/issues/12371#issuecomment-339711403", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12371", "id": 339711403, "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTcxMTQwMw==", "user": {"login": "jvdillon", "id": 1137078, "node_id": "MDQ6VXNlcjExMzcwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1137078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvdillon", "html_url": "https://github.com/jvdillon", "followers_url": "https://api.github.com/users/jvdillon/followers", "following_url": "https://api.github.com/users/jvdillon/following{/other_user}", "gists_url": "https://api.github.com/users/jvdillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvdillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvdillon/subscriptions", "organizations_url": "https://api.github.com/users/jvdillon/orgs", "repos_url": "https://api.github.com/users/jvdillon/repos", "events_url": "https://api.github.com/users/jvdillon/events{/privacy}", "received_events_url": "https://api.github.com/users/jvdillon/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-26T15:50:36Z", "updated_at": "2017-10-26T15:50:36Z", "author_association": "MEMBER", "body_html": "<p>Fix submitted using the following logic:</p>\n<p>def _log_unnormalized_prob(self, x):<br>\nif self.validate_args:<br>\nx = distribution_util.embed_check_nonnegative_integer_form(x)<br>\nreturn (self.total_count * math_ops.log_sigmoid(-self.logits)<br>\n+ x * math_ops.log_sigmoid(self.logits))</p>", "body_text": "Fix submitted using the following logic:\ndef _log_unnormalized_prob(self, x):\nif self.validate_args:\nx = distribution_util.embed_check_nonnegative_integer_form(x)\nreturn (self.total_count * math_ops.log_sigmoid(-self.logits)\n+ x * math_ops.log_sigmoid(self.logits))", "body": "Fix submitted using the following logic:\r\n\r\n  def _log_unnormalized_prob(self, x):\r\n    if self.validate_args:\r\n      x = distribution_util.embed_check_nonnegative_integer_form(x)\r\n    return (self.total_count * math_ops.log_sigmoid(-self.logits)\r\n            + x * math_ops.log_sigmoid(self.logits))"}