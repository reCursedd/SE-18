{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/323730358", "html_url": "https://github.com/tensorflow/tensorflow/issues/12371#issuecomment-323730358", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12371", "id": 323730358, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzczMDM1OA==", "user": {"login": "EdeMeijer", "id": 5758565, "node_id": "MDQ6VXNlcjU3NTg1NjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5758565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdeMeijer", "html_url": "https://github.com/EdeMeijer", "followers_url": "https://api.github.com/users/EdeMeijer/followers", "following_url": "https://api.github.com/users/EdeMeijer/following{/other_user}", "gists_url": "https://api.github.com/users/EdeMeijer/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdeMeijer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdeMeijer/subscriptions", "organizations_url": "https://api.github.com/users/EdeMeijer/orgs", "repos_url": "https://api.github.com/users/EdeMeijer/repos", "events_url": "https://api.github.com/users/EdeMeijer/events{/privacy}", "received_events_url": "https://api.github.com/users/EdeMeijer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-21T12:22:23Z", "updated_at": "2017-08-21T12:22:23Z", "author_association": "NONE", "body_html": "<p>I ran into a similar but different issue with large negative logits. In this case, <code>probs</code> goes to 0.0 and the last log term of the expression goes to -inf. Similarly to the term I updated, the log converges to <code>logits</code>, so this case can be solved with a similar <code>where</code> op, like this.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">_log_unnormalized_prob</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.validate_args:\n        x <span class=\"pl-k\">=</span> distribution_util.embed_check_nonnegative_integer_form(x)\n    <span class=\"pl-k\">return</span> (<span class=\"pl-c1\">self</span>.total_count\n            <span class=\"pl-k\">*</span> tf.where(<span class=\"pl-c1\">self</span>.logits <span class=\"pl-k\">&lt;=</span> <span class=\"pl-c1\">20.0</span>, <span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>tf.log(<span class=\"pl-c1\">1.0</span> <span class=\"pl-k\">/</span> (tf.exp(<span class=\"pl-c1\">self</span>.logits) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1.0</span>)), <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">self</span>.logits)\n            <span class=\"pl-k\">+</span> x <span class=\"pl-k\">*</span> tf.where(<span class=\"pl-c1\">self</span>.logits <span class=\"pl-k\">&gt;=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">20.0</span>, <span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>tf.log(<span class=\"pl-c1\">self</span>.probs), <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.logits))</pre></div>", "body_text": "I ran into a similar but different issue with large negative logits. In this case, probs goes to 0.0 and the last log term of the expression goes to -inf. Similarly to the term I updated, the log converges to logits, so this case can be solved with a similar where op, like this.\ndef _log_unnormalized_prob(self, x):\n    if self.validate_args:\n        x = distribution_util.embed_check_nonnegative_integer_form(x)\n    return (self.total_count\n            * tf.where(self.logits <= 20.0, x=tf.log(1.0 / (tf.exp(self.logits) + 1.0)), y=-self.logits)\n            + x * tf.where(self.logits >= -20.0, x=tf.log(self.probs), y=self.logits))", "body": "I ran into a similar but different issue with large negative logits. In this case, `probs` goes to 0.0 and the last log term of the expression goes to -inf. Similarly to the term I updated, the log converges to `logits`, so this case can be solved with a similar `where` op, like this.\r\n\r\n```python\r\ndef _log_unnormalized_prob(self, x):\r\n    if self.validate_args:\r\n        x = distribution_util.embed_check_nonnegative_integer_form(x)\r\n    return (self.total_count\r\n            * tf.where(self.logits <= 20.0, x=tf.log(1.0 / (tf.exp(self.logits) + 1.0)), y=-self.logits)\r\n            + x * tf.where(self.logits >= -20.0, x=tf.log(self.probs), y=self.logits))\r\n```"}