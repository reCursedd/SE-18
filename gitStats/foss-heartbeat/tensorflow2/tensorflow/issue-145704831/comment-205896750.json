{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/205896750", "html_url": "https://github.com/tensorflow/tensorflow/issues/1769#issuecomment-205896750", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1769", "id": 205896750, "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTg5Njc1MA==", "user": {"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-05T17:02:47Z", "updated_at": "2016-04-05T17:02:47Z", "author_association": "MEMBER", "body_html": "<p>Sorry, I mixed up my build commands. Here's one I just verified to work with a fixed crosstool_top param.</p>\n<p>bazel build -c opt tensorflow/examples/android:libtensorflow_demo.so <br>\n--crosstool_top=//external:android/crosstool <br>\n--cpu=armeabi-v7a <br>\n--host_crosstool_top=@bazel_tools//tools/cpp:toolchain</p>\n<ol>\n<li>You can certainly have other targets depend on Tensorflow, or have Tensorflow depend on other targets. Or do you mean depending on TF from outside of Bazel? That's also possible, if you have the precompiled static library and the header paths configured appropriately.</li>\n<li>You can build a static library by removing the alwayslink=1 attributes from the //tensorflow/core:android_tensorflow_lib(_lite) targets and building those. If you want the examples/android/jni code as well I think you could experiment with a \"-static\" linkopt, or alternatively turn that lib into a cc_library.</li>\n</ol>", "body_text": "Sorry, I mixed up my build commands. Here's one I just verified to work with a fixed crosstool_top param.\nbazel build -c opt tensorflow/examples/android:libtensorflow_demo.so \n--crosstool_top=//external:android/crosstool \n--cpu=armeabi-v7a \n--host_crosstool_top=@bazel_tools//tools/cpp:toolchain\n\nYou can certainly have other targets depend on Tensorflow, or have Tensorflow depend on other targets. Or do you mean depending on TF from outside of Bazel? That's also possible, if you have the precompiled static library and the header paths configured appropriately.\nYou can build a static library by removing the alwayslink=1 attributes from the //tensorflow/core:android_tensorflow_lib(_lite) targets and building those. If you want the examples/android/jni code as well I think you could experiment with a \"-static\" linkopt, or alternatively turn that lib into a cc_library.", "body": "Sorry, I mixed up my build commands. Here's one I just verified to work with a fixed crosstool_top param.\n\nbazel build -c opt tensorflow/examples/android:libtensorflow_demo.so \\\n--crosstool_top=//external:android/crosstool \\\n--cpu=armeabi-v7a \\\n--host_crosstool_top=@bazel_tools//tools/cpp:toolchain\n1. You can certainly have other targets depend on Tensorflow, or have Tensorflow depend on other targets. Or do you mean depending on TF from outside of Bazel? That's also possible, if you have the precompiled static library and the header paths configured appropriately.\n2. You can build a static library by removing the alwayslink=1 attributes from the //tensorflow/core:android_tensorflow_lib(_lite) targets and building those. If you want the examples/android/jni code as well I think you could experiment with a \"-static\" linkopt, or alternatively turn that lib into a cc_library.\n"}