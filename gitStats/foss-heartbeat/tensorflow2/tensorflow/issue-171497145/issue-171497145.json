{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3854", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3854/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3854/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3854/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3854", "id": 171497145, "node_id": "MDU6SXNzdWUxNzE0OTcxNDU=", "number": 3854, "title": "Peculiar behavior with tf.self_adjoint_eig", "user": {"login": "shawnjhenry", "id": 9464836, "node_id": "MDQ6VXNlcjk0NjQ4MzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9464836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shawnjhenry", "html_url": "https://github.com/shawnjhenry", "followers_url": "https://api.github.com/users/shawnjhenry/followers", "following_url": "https://api.github.com/users/shawnjhenry/following{/other_user}", "gists_url": "https://api.github.com/users/shawnjhenry/gists{/gist_id}", "starred_url": "https://api.github.com/users/shawnjhenry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shawnjhenry/subscriptions", "organizations_url": "https://api.github.com/users/shawnjhenry/orgs", "repos_url": "https://api.github.com/users/shawnjhenry/repos", "events_url": "https://api.github.com/users/shawnjhenry/events{/privacy}", "received_events_url": "https://api.github.com/users/shawnjhenry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-08-16T19:26:21Z", "updated_at": "2016-08-16T20:38:35Z", "closed_at": "2016-08-16T20:38:35Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>I've come across a really peculiar bug that I think is actually a sign of a much larger problem, but what that is, I have no idea.  The following code:</p>\n<pre><code>x = np.random.randn(10, 10)\n\nx = (x+x.T)/2\n\nX = tf.placeholder(dtype=tf.float32, shape=[10, 10])\n\nE, V = tf.self_adjoint_eig(X)\n\nwith tf.Session() as sess:\n    e, v = sess.run([E, V], feed_dict={X: x})\n\n    print(e.shape)\n</code></pre>\n<p>throws the error:</p>\n<pre><code>raise TypeError(\"'Tensor' object is not iterable.\")\n</code></pre>\n<p>but curiously:</p>\n<pre><code>x = np.random.randn(10, 10)\n\nx = (x+x.T)/2\n\nX = tf.placeholder(dtype=tf.float32, shape=[10, 10])\n\nE = tf.self_adjoint_eig(X)\n\nwith tf.Session() as sess:\n    e = sess.run(E, feed_dict={X: x})\n\n    print(e.shape)\n</code></pre>\n<p>returns (11, 10), and I have no idea how that's even possible, since the docs say that tf.self_adjoint_eig returns two tensors.  While investigating this, I discovered that a lot of my install (from pip) differs substantially from what's documented here even though I have the latest version (tensorflow==0.10.0rc0 from pip freeze).  In particular, tf.self_adjoint_eig is not defined in linalg_ops.py, and I can't find where it's being called from.  Any ideas?</p>\n<p>Thanks,<br>\nShawn</p>\n<p><strong>Update:</strong></p>\n<p>I just found it where it's called from.  According to the comment in gen_linalg_ops.py:</p>\n<pre><code>  The result is a M+1 x M matrix whose first row is the eigenvalues, and\n  subsequent rows are eigenvectors.\n</code></pre>\n<p>This is different than the API docs.  One or the other (from a usefulness standpoint, probably the code) should be changed.</p>\n<p><strong>Further Update:</strong></p>\n<p>This actually might be an install problem as mentioned above.  The code here calls self_adjoint_eig_v2 which doesn't exist in the latest install.  Why is that?</p>", "body_text": "Hi,\nI've come across a really peculiar bug that I think is actually a sign of a much larger problem, but what that is, I have no idea.  The following code:\nx = np.random.randn(10, 10)\n\nx = (x+x.T)/2\n\nX = tf.placeholder(dtype=tf.float32, shape=[10, 10])\n\nE, V = tf.self_adjoint_eig(X)\n\nwith tf.Session() as sess:\n    e, v = sess.run([E, V], feed_dict={X: x})\n\n    print(e.shape)\n\nthrows the error:\nraise TypeError(\"'Tensor' object is not iterable.\")\n\nbut curiously:\nx = np.random.randn(10, 10)\n\nx = (x+x.T)/2\n\nX = tf.placeholder(dtype=tf.float32, shape=[10, 10])\n\nE = tf.self_adjoint_eig(X)\n\nwith tf.Session() as sess:\n    e = sess.run(E, feed_dict={X: x})\n\n    print(e.shape)\n\nreturns (11, 10), and I have no idea how that's even possible, since the docs say that tf.self_adjoint_eig returns two tensors.  While investigating this, I discovered that a lot of my install (from pip) differs substantially from what's documented here even though I have the latest version (tensorflow==0.10.0rc0 from pip freeze).  In particular, tf.self_adjoint_eig is not defined in linalg_ops.py, and I can't find where it's being called from.  Any ideas?\nThanks,\nShawn\nUpdate:\nI just found it where it's called from.  According to the comment in gen_linalg_ops.py:\n  The result is a M+1 x M matrix whose first row is the eigenvalues, and\n  subsequent rows are eigenvectors.\n\nThis is different than the API docs.  One or the other (from a usefulness standpoint, probably the code) should be changed.\nFurther Update:\nThis actually might be an install problem as mentioned above.  The code here calls self_adjoint_eig_v2 which doesn't exist in the latest install.  Why is that?", "body": "Hi, \n\nI've come across a really peculiar bug that I think is actually a sign of a much larger problem, but what that is, I have no idea.  The following code:\n\n```\nx = np.random.randn(10, 10)\n\nx = (x+x.T)/2\n\nX = tf.placeholder(dtype=tf.float32, shape=[10, 10])\n\nE, V = tf.self_adjoint_eig(X)\n\nwith tf.Session() as sess:\n    e, v = sess.run([E, V], feed_dict={X: x})\n\n    print(e.shape)\n```\n\nthrows the error:\n\n```\nraise TypeError(\"'Tensor' object is not iterable.\")\n```\n\nbut curiously:\n\n```\nx = np.random.randn(10, 10)\n\nx = (x+x.T)/2\n\nX = tf.placeholder(dtype=tf.float32, shape=[10, 10])\n\nE = tf.self_adjoint_eig(X)\n\nwith tf.Session() as sess:\n    e = sess.run(E, feed_dict={X: x})\n\n    print(e.shape)\n```\n\nreturns (11, 10), and I have no idea how that's even possible, since the docs say that tf.self_adjoint_eig returns two tensors.  While investigating this, I discovered that a lot of my install (from pip) differs substantially from what's documented here even though I have the latest version (tensorflow==0.10.0rc0 from pip freeze).  In particular, tf.self_adjoint_eig is not defined in linalg_ops.py, and I can't find where it's being called from.  Any ideas?\n\nThanks,\nShawn\n\n**Update:**\n\nI just found it where it's called from.  According to the comment in gen_linalg_ops.py:\n\n```\n  The result is a M+1 x M matrix whose first row is the eigenvalues, and\n  subsequent rows are eigenvectors.\n```\n\nThis is different than the API docs.  One or the other (from a usefulness standpoint, probably the code) should be changed.\n\n**Further Update:**\n\nThis actually might be an install problem as mentioned above.  The code here calls self_adjoint_eig_v2 which doesn't exist in the latest install.  Why is that?\n"}