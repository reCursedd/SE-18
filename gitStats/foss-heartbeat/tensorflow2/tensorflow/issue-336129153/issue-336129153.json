{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20335", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20335/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20335/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20335/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20335", "id": 336129153, "node_id": "MDU6SXNzdWUzMzYxMjkxNTM=", "number": 20335, "title": "Keras Model functional API not working in eager execution?", "user": {"login": "David-Mao", "id": 12476624, "node_id": "MDQ6VXNlcjEyNDc2NjI0", "avatar_url": "https://avatars3.githubusercontent.com/u/12476624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/David-Mao", "html_url": "https://github.com/David-Mao", "followers_url": "https://api.github.com/users/David-Mao/followers", "following_url": "https://api.github.com/users/David-Mao/following{/other_user}", "gists_url": "https://api.github.com/users/David-Mao/gists{/gist_id}", "starred_url": "https://api.github.com/users/David-Mao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/David-Mao/subscriptions", "organizations_url": "https://api.github.com/users/David-Mao/orgs", "repos_url": "https://api.github.com/users/David-Mao/repos", "events_url": "https://api.github.com/users/David-Mao/events{/privacy}", "received_events_url": "https://api.github.com/users/David-Mao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-27T08:34:52Z", "updated_at": "2018-06-27T09:35:05Z", "closed_at": "2018-06-27T09:35:05Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nDarwin localhost 17.5.0 Darwin Kernel Version 17.5.0: Fri Apr 13 19:32:32 PDT 2018; root:xnu-4570.51.2~1/RELEASE_X86_64 x86_64<br>\nMac OS X 10.13.4</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.8</li>\n<li><strong>Python version</strong>:<br>\n2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nN/A</li>\n<li><strong>GPU model and memory</strong>:<br>\nN/A</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nSee below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Consider the following keras model with a custom submodel:</p>\n<pre><code>tf.enable_eager_execution()\n\nclass SubModel(tf.keras.Model):\n    def __init__(self):\n        super(SubModel, self).__init__()\n        self.layer = tf.keras.layers.Dense(3) \n    def call(self, inputs):\n        return self.layer(inputs)\n\ndef MyModel():\n    input = tf.keras.Input(shape=(3, 3))\n    m = SubModel()\n    output = m(input)\n    return tf.keras.Model(input, output)\n\nm = MyModel()\nm(tf.constant(tf.ones([3, 3])))\n</code></pre>\n<p>where the SubModel is a custom model, and MyModel() uses it in the functional API. The code raises error:</p>\n<blockquote>\n<p>File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/_impl/keras/engine/network.py\", line 639, in compute_output_shape<br>\nraise NotImplementedError</p>\n</blockquote>\n<p>I think it might be because the submodel cannot calculate the shape. So I added a compute_output_shape method for the SubModel class as if it's a custom layer:</p>\n<pre><code>class SubModel(tf.keras.Model):\n    ...\n    def compute_output_shape(self, input_shape):\n        return (input_shape[0], 3)\n</code></pre>\n<p>Now the NotImplementedError disappeared, but we have a new error when running the model:</p>\n<blockquote>\n<p>AssertionError: Could not compute output DeferredTensor('None', shape=(3,), dtype=float32)</p>\n</blockquote>\n<p>Now I don't know what to do. The code actually works in non-eager mode, so I guess it's a bug for keras functional API in eager execution?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nDarwin localhost 17.5.0 Darwin Kernel Version 17.5.0: Fri Apr 13 19:32:32 PDT 2018; root:xnu-4570.51.2~1/RELEASE_X86_64 x86_64\nMac OS X 10.13.4\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\n1.8\nPython version:\n2.7\nBazel version (if compiling from source):\nN/A\nGCC/Compiler version (if compiling from source):\nN/A\nCUDA/cuDNN version:\nN/A\nGPU model and memory:\nN/A\nExact command to reproduce:\nSee below\n\nDescribe the problem\nConsider the following keras model with a custom submodel:\ntf.enable_eager_execution()\n\nclass SubModel(tf.keras.Model):\n    def __init__(self):\n        super(SubModel, self).__init__()\n        self.layer = tf.keras.layers.Dense(3) \n    def call(self, inputs):\n        return self.layer(inputs)\n\ndef MyModel():\n    input = tf.keras.Input(shape=(3, 3))\n    m = SubModel()\n    output = m(input)\n    return tf.keras.Model(input, output)\n\nm = MyModel()\nm(tf.constant(tf.ones([3, 3])))\n\nwhere the SubModel is a custom model, and MyModel() uses it in the functional API. The code raises error:\n\nFile \"/Library/Python/2.7/site-packages/tensorflow/python/keras/_impl/keras/engine/network.py\", line 639, in compute_output_shape\nraise NotImplementedError\n\nI think it might be because the submodel cannot calculate the shape. So I added a compute_output_shape method for the SubModel class as if it's a custom layer:\nclass SubModel(tf.keras.Model):\n    ...\n    def compute_output_shape(self, input_shape):\n        return (input_shape[0], 3)\n\nNow the NotImplementedError disappeared, but we have a new error when running the model:\n\nAssertionError: Could not compute output DeferredTensor('None', shape=(3,), dtype=float32)\n\nNow I don't know what to do. The code actually works in non-eager mode, so I guess it's a bug for keras functional API in eager execution?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nDarwin localhost 17.5.0 Darwin Kernel Version 17.5.0: Fri Apr 13 19:32:32 PDT 2018; root:xnu-4570.51.2~1/RELEASE_X86_64 x86_64\r\nMac OS X 10.13.4\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\n1.8\r\n- **Python version**: \r\n2.7\r\n- **Bazel version (if compiling from source)**:\r\nN/A\r\n- **GCC/Compiler version (if compiling from source)**:\r\nN/A\r\n- **CUDA/cuDNN version**:\r\nN/A\r\n- **GPU model and memory**:\r\nN/A\r\n- **Exact command to reproduce**:\r\nSee below\r\n\r\n\r\n### Describe the problem\r\nConsider the following keras model with a custom submodel:\r\n\r\n```\r\ntf.enable_eager_execution()\r\n\r\nclass SubModel(tf.keras.Model):\r\n    def __init__(self):\r\n        super(SubModel, self).__init__()\r\n        self.layer = tf.keras.layers.Dense(3) \r\n    def call(self, inputs):\r\n        return self.layer(inputs)\r\n\r\ndef MyModel():\r\n    input = tf.keras.Input(shape=(3, 3))\r\n    m = SubModel()\r\n    output = m(input)\r\n    return tf.keras.Model(input, output)\r\n\r\nm = MyModel()\r\nm(tf.constant(tf.ones([3, 3])))\r\n```\r\n\r\nwhere the SubModel is a custom model, and MyModel() uses it in the functional API. The code raises error:\r\n\r\n> File \"/Library/Python/2.7/site-packages/tensorflow/python/keras/_impl/keras/engine/network.py\", line 639, in compute_output_shape\r\n>     raise NotImplementedError\r\n\r\nI think it might be because the submodel cannot calculate the shape. So I added a compute_output_shape method for the SubModel class as if it's a custom layer:\r\n\r\n```\r\nclass SubModel(tf.keras.Model):\r\n    ...\r\n    def compute_output_shape(self, input_shape):\r\n        return (input_shape[0], 3)\r\n```\r\n\r\nNow the NotImplementedError disappeared, but we have a new error when running the model:\r\n\r\n> AssertionError: Could not compute output DeferredTensor('None', shape=(3,), dtype=float32)\r\n\r\nNow I don't know what to do. The code actually works in non-eager mode, so I guess it's a bug for keras functional API in eager execution?\r\n\r\n"}