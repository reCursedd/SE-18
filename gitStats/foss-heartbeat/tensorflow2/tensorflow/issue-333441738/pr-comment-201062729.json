{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/201062729", "pull_request_review_id": 135491154, "id": 201062729, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA2MjcyOQ==", "diff_hunk": "@@ -0,0 +1,127 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/core/framework/dataset.h\"\n+#include \"tensorflow/contrib/ignite/kernels/ignite_holder.h\"\n+\n+using namespace ignite;\n+using namespace cache;\n+using namespace query;\n+using namespace binary;\n+\n+namespace tensorflow {\n+\n+    class IgniteDatasetOp : public DatasetOpKernel {\n+    public:\n+        using DatasetOpKernel::DatasetOpKernel;\n+\n+        void MakeDataset(OpKernelContext *ctx, DatasetBase **output) override {\n+            std::string cache = \"\";\n+            OP_REQUIRES_OK(ctx, ParseScalarArgument<std::string>(ctx, \"cache\", &cache));\n+            *output = new Dataset(ctx, cache);\n+        }\n+\n+    private:\n+        class Dataset : public GraphDatasetBase {\n+        private:\n+            Ignite grid;\n+            const std::string cacheName;\n+        public:\n+            Dataset(OpKernelContext *ctx, const string &cache)\n+                    : GraphDatasetBase(ctx), cacheName(cache) {\n+                grid = IgniteHolder::Instance().getIgnite();\n+            }\n+\n+            std::unique_ptr<IteratorBase> MakeIteratorInternal(\n+                    const string &prefix) const override {\n+                return std::unique_ptr<IteratorBase>(\n+                        new Iterator({this, strings::StrCat(prefix, \"::Ignite\")}));\n+            }\n+\n+            const DataTypeVector &output_dtypes() const override {\n+                static DataTypeVector *dtypes = new DataTypeVector({DT_STRING});\n+                return *dtypes;\n+            }\n+\n+            const std::vector<PartialTensorShape> &output_shapes() const override {\n+                static std::vector<PartialTensorShape> *shapes =\n+                        new std::vector<PartialTensorShape>({{}});\n+                return *shapes;\n+            }\n+\n+            string DebugString() const override { return \"IgniteDatasetOp::Dataset\"; }\n+\n+        protected:\n+            Status AsGraphDefInternal(DatasetGraphDefBuilder *b,\n+                                      Node **output) const override {\n+                return Status::OK();\n+            }\n+\n+        private:\n+            class Iterator : public DatasetIterator<Dataset> {\n+                typedef std::vector<CacheEntry<int, std::string> > ResVector;\n+            private:\n+                ResVector::const_iterator iter;\n+                ResVector::const_iterator iter_end;\n+                ResVector res;\n+            public:\n+                explicit Iterator(const Params &params) : DatasetIterator<Dataset>(params) {\n+                    ScanQuery scan;\n+\n+                    const char *cacheName = params.dataset->cacheName.c_str();\n+\n+                    Ignite grid = params.dataset->grid;\n+                    Cache<int, std::string> cac = grid.GetCache<int, std::string>(cacheName);\n+\n+                    cac.Query(scan).GetAll(res);\n+\n+                    iter = res.begin();\n+                    iter_end = res.end();\n+                }\n+\n+                Status GetNextInternal(IteratorContext *ctx,\n+                                       std::vector<Tensor> *out_tensors,\n+                                       bool *end_of_sequence) override {\n+                    Tensor line_tensor(cpu_allocator(), DT_STRING, {});\n+\n+                    if (iter != iter_end) {\n+                        std::string val = iter->GetValue();\n+                        line_tensor.scalar<string>()() = std::move(val);\n+                        out_tensors->emplace_back(std::move(line_tensor));\n+                        iter++;\n+                        *end_of_sequence = false;\n+                    } else {\n+                        *end_of_sequence = true;\n+                    }\n+\n+                    return Status::OK();\n+                }\n+\n+            protected:\n+                Status SaveInternal(IteratorStateWriter *writer) override {\n+                    return Status::OK();", "path": "tensorflow/contrib/ignite/kernels/ignite_dataset_ops.cc", "position": null, "original_position": 114, "commit_id": "1c12b07cd45c9f9ad63cf1b95f046635c326bb2d", "original_commit_id": "9cce1d2d5e72ee45476463f34c03eb11f0f560c6", "user": {"login": "artemmalykh", "id": 26772992, "node_id": "MDQ6VXNlcjI2NzcyOTky", "avatar_url": "https://avatars2.githubusercontent.com/u/26772992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/artemmalykh", "html_url": "https://github.com/artemmalykh", "followers_url": "https://api.github.com/users/artemmalykh/followers", "following_url": "https://api.github.com/users/artemmalykh/following{/other_user}", "gists_url": "https://api.github.com/users/artemmalykh/gists{/gist_id}", "starred_url": "https://api.github.com/users/artemmalykh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/artemmalykh/subscriptions", "organizations_url": "https://api.github.com/users/artemmalykh/orgs", "repos_url": "https://api.github.com/users/artemmalykh/repos", "events_url": "https://api.github.com/users/artemmalykh/events{/privacy}", "received_events_url": "https://api.github.com/users/artemmalykh/received_events", "type": "User", "site_admin": false}, "body": "Fixed.", "created_at": "2018-07-09T16:17:07Z", "updated_at": "2018-07-24T12:28:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20105#discussion_r201062729", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20105", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/201062729"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20105#discussion_r201062729"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20105"}}, "body_html": "<p>Fixed.</p>", "body_text": "Fixed.", "in_reply_to_id": 200709043}