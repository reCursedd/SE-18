{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/315595174", "html_url": "https://github.com/tensorflow/tensorflow/issues/10478#issuecomment-315595174", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10478", "id": 315595174, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTU5NTE3NA==", "user": {"login": "MichaelBurge", "id": 1597415, "node_id": "MDQ6VXNlcjE1OTc0MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1597415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelBurge", "html_url": "https://github.com/MichaelBurge", "followers_url": "https://api.github.com/users/MichaelBurge/followers", "following_url": "https://api.github.com/users/MichaelBurge/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelBurge/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelBurge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelBurge/subscriptions", "organizations_url": "https://api.github.com/users/MichaelBurge/orgs", "repos_url": "https://api.github.com/users/MichaelBurge/repos", "events_url": "https://api.github.com/users/MichaelBurge/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelBurge/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-16T08:55:43Z", "updated_at": "2017-07-16T08:55:43Z", "author_association": "NONE", "body_html": "<p>I looked at this for a bit to see if the fix was easy, or if there was a way to at least 'skip' the offending nodes in the debugger.</p>\n<p>The problem appears to be a design constraint of the TensorFlow debugger: The NodeStepper is implemented by using feed_dict to replace the target node's dependencies with previously evaluated nodes, which are stored on disk. feed_dict requires its values to be numpy-compatible, and a queue object is not something Numpy has.</p>\n<p>It looks like an implementation should:</p>\n<ul>\n<li>Implement a way for an arbitrary resource to be serialized to disk(or at least queues)</li>\n<li>Allow the feed_dict to replace queue nodes too.</li>\n</ul>\n<p>I wouldn't be comfortable making this kind of design-level change myself, and it doesn't seem possible to make a quick fix to get the debugger working.</p>", "body_text": "I looked at this for a bit to see if the fix was easy, or if there was a way to at least 'skip' the offending nodes in the debugger.\nThe problem appears to be a design constraint of the TensorFlow debugger: The NodeStepper is implemented by using feed_dict to replace the target node's dependencies with previously evaluated nodes, which are stored on disk. feed_dict requires its values to be numpy-compatible, and a queue object is not something Numpy has.\nIt looks like an implementation should:\n\nImplement a way for an arbitrary resource to be serialized to disk(or at least queues)\nAllow the feed_dict to replace queue nodes too.\n\nI wouldn't be comfortable making this kind of design-level change myself, and it doesn't seem possible to make a quick fix to get the debugger working.", "body": "I looked at this for a bit to see if the fix was easy, or if there was a way to at least 'skip' the offending nodes in the debugger.\r\n\r\nThe problem appears to be a design constraint of the TensorFlow debugger: The NodeStepper is implemented by using feed_dict to replace the target node's dependencies with previously evaluated nodes, which are stored on disk. feed_dict requires its values to be numpy-compatible, and a queue object is not something Numpy has.\r\n\r\nIt looks like an implementation should:\r\n* Implement a way for an arbitrary resource to be serialized to disk(or at least queues)\r\n* Allow the feed_dict to replace queue nodes too.\r\n\r\nI wouldn't be comfortable making this kind of design-level change myself, and it doesn't seem possible to make a quick fix to get the debugger working."}