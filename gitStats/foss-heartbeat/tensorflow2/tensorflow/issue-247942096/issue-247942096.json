{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12030", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12030/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12030/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12030/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12030", "id": 247942096, "node_id": "MDU6SXNzdWUyNDc5NDIwOTY=", "number": 12030, "title": "print out 'nan' for simple linear regression model ", "user": {"login": "reachlin", "id": 1051988, "node_id": "MDQ6VXNlcjEwNTE5ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1051988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reachlin", "html_url": "https://github.com/reachlin", "followers_url": "https://api.github.com/users/reachlin/followers", "following_url": "https://api.github.com/users/reachlin/following{/other_user}", "gists_url": "https://api.github.com/users/reachlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/reachlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reachlin/subscriptions", "organizations_url": "https://api.github.com/users/reachlin/orgs", "repos_url": "https://api.github.com/users/reachlin/repos", "events_url": "https://api.github.com/users/reachlin/events{/privacy}", "received_events_url": "https://api.github.com/users/reachlin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-04T08:48:47Z", "updated_at": "2017-08-04T20:23:58Z", "closed_at": "2017-08-04T20:23:58Z", "author_association": "NONE", "body_html": "<pre><code>root@1cf079dc9729:~/src# python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\n('v1.2.0-5-g435cdfc', '1.2.1')\n</code></pre>\n<p>The source code is very simple and it is from: <a href=\"https://www.tensorflow.org/get_started/get_started\" rel=\"nofollow\">https://www.tensorflow.org/get_started/get_started</a></p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\n# Model parameters\nW = tf.Variable([.3], dtype=tf.float32)\nb = tf.Variable([-.3], dtype=tf.float32)\n# Model input and output\nx = tf.placeholder(tf.float32)\nlinear_model = W * x + b\ny = tf.placeholder(tf.float32)\n# loss\nloss = tf.reduce_sum(tf.square(linear_model - y)) # sum of the squares\n# optimizer\noptimizer = tf.train.GradientDescentOptimizer(0.01)\ntrain = optimizer.minimize(loss)\n# training data\nx_train = [1,2,3,4,35]\ny_train = [0,-1,-2,-3,-34]\n# training loop\ninit = tf.global_variables_initializer()\nsess = tf.Session()\nsess.run(init) # reset values to wrong\nfor i in range(1000):\n  sess.run(train, {x:x_train, y:y_train})\n\n#x_test = [5, 100, 345] #[5,100,345,-99.66]\n#y_test = [-4, -99, -344] #[-4,-99,-344,-101.66]\n# evaluate training accuracy\ncurr_W, curr_b, curr_loss = sess.run([W, b, loss], {x:x_train, y:y_train})\nprint(\"W: %s b: %s loss: %s\"%(curr_W, curr_b, curr_loss))\n</code></pre>\n<p>the output:</p>\n<pre><code>W: [ nan] b: [ nan] loss: nan\n</code></pre>\n<p>if i delete the last element for training data:</p>\n<pre><code>x_train = [1,2,3,4]\ny_train = [0,-1,-2,-3]\n</code></pre>\n<p>the output is right:</p>\n<pre><code>W: [-0.9999969] b: [ 0.99999082] loss: 5.69997e-11\n</code></pre>", "body_text": "root@1cf079dc9729:~/src# python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\n('v1.2.0-5-g435cdfc', '1.2.1')\n\nThe source code is very simple and it is from: https://www.tensorflow.org/get_started/get_started\nimport numpy as np\nimport tensorflow as tf\n\n# Model parameters\nW = tf.Variable([.3], dtype=tf.float32)\nb = tf.Variable([-.3], dtype=tf.float32)\n# Model input and output\nx = tf.placeholder(tf.float32)\nlinear_model = W * x + b\ny = tf.placeholder(tf.float32)\n# loss\nloss = tf.reduce_sum(tf.square(linear_model - y)) # sum of the squares\n# optimizer\noptimizer = tf.train.GradientDescentOptimizer(0.01)\ntrain = optimizer.minimize(loss)\n# training data\nx_train = [1,2,3,4,35]\ny_train = [0,-1,-2,-3,-34]\n# training loop\ninit = tf.global_variables_initializer()\nsess = tf.Session()\nsess.run(init) # reset values to wrong\nfor i in range(1000):\n  sess.run(train, {x:x_train, y:y_train})\n\n#x_test = [5, 100, 345] #[5,100,345,-99.66]\n#y_test = [-4, -99, -344] #[-4,-99,-344,-101.66]\n# evaluate training accuracy\ncurr_W, curr_b, curr_loss = sess.run([W, b, loss], {x:x_train, y:y_train})\nprint(\"W: %s b: %s loss: %s\"%(curr_W, curr_b, curr_loss))\n\nthe output:\nW: [ nan] b: [ nan] loss: nan\n\nif i delete the last element for training data:\nx_train = [1,2,3,4]\ny_train = [0,-1,-2,-3]\n\nthe output is right:\nW: [-0.9999969] b: [ 0.99999082] loss: 5.69997e-11", "body": "```\r\nroot@1cf079dc9729:~/src# python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n('v1.2.0-5-g435cdfc', '1.2.1')\r\n```\r\nThe source code is very simple and it is from: https://www.tensorflow.org/get_started/get_started\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n# Model parameters\r\nW = tf.Variable([.3], dtype=tf.float32)\r\nb = tf.Variable([-.3], dtype=tf.float32)\r\n# Model input and output\r\nx = tf.placeholder(tf.float32)\r\nlinear_model = W * x + b\r\ny = tf.placeholder(tf.float32)\r\n# loss\r\nloss = tf.reduce_sum(tf.square(linear_model - y)) # sum of the squares\r\n# optimizer\r\noptimizer = tf.train.GradientDescentOptimizer(0.01)\r\ntrain = optimizer.minimize(loss)\r\n# training data\r\nx_train = [1,2,3,4,35]\r\ny_train = [0,-1,-2,-3,-34]\r\n# training loop\r\ninit = tf.global_variables_initializer()\r\nsess = tf.Session()\r\nsess.run(init) # reset values to wrong\r\nfor i in range(1000):\r\n  sess.run(train, {x:x_train, y:y_train})\r\n\r\n#x_test = [5, 100, 345] #[5,100,345,-99.66]\r\n#y_test = [-4, -99, -344] #[-4,-99,-344,-101.66]\r\n# evaluate training accuracy\r\ncurr_W, curr_b, curr_loss = sess.run([W, b, loss], {x:x_train, y:y_train})\r\nprint(\"W: %s b: %s loss: %s\"%(curr_W, curr_b, curr_loss))\r\n```\r\nthe output:\r\n```\r\nW: [ nan] b: [ nan] loss: nan\r\n```\r\nif i delete the last element for training data:\r\n```\r\nx_train = [1,2,3,4]\r\ny_train = [0,-1,-2,-3]\r\n```\r\nthe output is right:\r\n```\r\nW: [-0.9999969] b: [ 0.99999082] loss: 5.69997e-11\r\n```"}