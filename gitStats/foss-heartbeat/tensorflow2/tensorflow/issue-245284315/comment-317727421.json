{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/317727421", "html_url": "https://github.com/tensorflow/tensorflow/issues/11735#issuecomment-317727421", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11735", "id": 317727421, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzcyNzQyMQ==", "user": {"login": "meteorcloudy", "id": 4171702, "node_id": "MDQ6VXNlcjQxNzE3MDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4171702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meteorcloudy", "html_url": "https://github.com/meteorcloudy", "followers_url": "https://api.github.com/users/meteorcloudy/followers", "following_url": "https://api.github.com/users/meteorcloudy/following{/other_user}", "gists_url": "https://api.github.com/users/meteorcloudy/gists{/gist_id}", "starred_url": "https://api.github.com/users/meteorcloudy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meteorcloudy/subscriptions", "organizations_url": "https://api.github.com/users/meteorcloudy/orgs", "repos_url": "https://api.github.com/users/meteorcloudy/repos", "events_url": "https://api.github.com/users/meteorcloudy/events{/privacy}", "received_events_url": "https://api.github.com/users/meteorcloudy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-25T12:51:45Z", "updated_at": "2017-07-25T13:00:56Z", "author_association": "MEMBER", "body_html": "<p>I think the best solution would be avoiding invoking bash explicitly.<br>\nWe can write the python code in a file first instead of using <code>bash -c \"python - &lt;&lt;END &lt;content&gt; END\"</code> syntax, then we can just do <code>repository_ctx.execute(['python', \"./find_python_lib.py\"])</code><br>\nexample:</p>\n<pre><code>def test_bash(repository_ctx):\n  \"\"\"Gets the python lib path.\"\"\"\n  print_lib = (\n      \"from __future__ import print_function\\n\" +\n      \"import site\\n\" +\n      \"import os\\n\" +\n      \"\\n\" +\n      \"try:\\n\" +\n      \"  input = raw_input\\n\" +\n      \"except NameError:\\n\" +\n      \"  pass\\n\" +\n      \"\\n\" +\n      \"python_paths = []\\n\" +\n      \"if os.getenv('PYTHONPATH') is not None:\\n\" +\n      \"  python_paths = os.getenv('PYTHONPATH').split(':')\\n\" +\n      \"try:\\n\" +\n      \"  library_paths = site.getsitepackages()\\n\" +\n      \"except AttributeError:\\n\" +\n      \" from distutils.sysconfig import get_python_lib\\n\" +\n      \" library_paths = [get_python_lib()]\\n\" +\n      \"all_paths = set(python_paths + library_paths)\\n\" +\n      \"paths = []\\n\" +\n      \"for path in all_paths:\\n\" +\n      \"  if os.path.isdir(path):\\n\" +\n      \"    paths.append(path)\\n\" +\n      \"if len(paths) &gt;=1:\\n\" +\n      \"  print(paths[0])\\n\")\n  repository_ctx.file(\"find_python_lib.py\", print_lib)\n  result = repository_ctx.execute(['python', \"./find_python_lib.py\"], quiet=False)\n  print(\"STDOUT: \" + result.stdout)\n  print(\"STDERR: \" + result.stderr)\n  if result.return_code == 1:\n    print('error')\n  print('end')\n  \npython_configure = repository_rule(\n    implementation = test_bash,\n    environ = [\"PATH\"]\n)\n\n\n</code></pre>", "body_text": "I think the best solution would be avoiding invoking bash explicitly.\nWe can write the python code in a file first instead of using bash -c \"python - <<END <content> END\" syntax, then we can just do repository_ctx.execute(['python', \"./find_python_lib.py\"])\nexample:\ndef test_bash(repository_ctx):\n  \"\"\"Gets the python lib path.\"\"\"\n  print_lib = (\n      \"from __future__ import print_function\\n\" +\n      \"import site\\n\" +\n      \"import os\\n\" +\n      \"\\n\" +\n      \"try:\\n\" +\n      \"  input = raw_input\\n\" +\n      \"except NameError:\\n\" +\n      \"  pass\\n\" +\n      \"\\n\" +\n      \"python_paths = []\\n\" +\n      \"if os.getenv('PYTHONPATH') is not None:\\n\" +\n      \"  python_paths = os.getenv('PYTHONPATH').split(':')\\n\" +\n      \"try:\\n\" +\n      \"  library_paths = site.getsitepackages()\\n\" +\n      \"except AttributeError:\\n\" +\n      \" from distutils.sysconfig import get_python_lib\\n\" +\n      \" library_paths = [get_python_lib()]\\n\" +\n      \"all_paths = set(python_paths + library_paths)\\n\" +\n      \"paths = []\\n\" +\n      \"for path in all_paths:\\n\" +\n      \"  if os.path.isdir(path):\\n\" +\n      \"    paths.append(path)\\n\" +\n      \"if len(paths) >=1:\\n\" +\n      \"  print(paths[0])\\n\")\n  repository_ctx.file(\"find_python_lib.py\", print_lib)\n  result = repository_ctx.execute(['python', \"./find_python_lib.py\"], quiet=False)\n  print(\"STDOUT: \" + result.stdout)\n  print(\"STDERR: \" + result.stderr)\n  if result.return_code == 1:\n    print('error')\n  print('end')\n  \npython_configure = repository_rule(\n    implementation = test_bash,\n    environ = [\"PATH\"]\n)", "body": "I think the best solution would be avoiding invoking bash explicitly. \r\nWe can write the python code in a file first instead of using `bash -c \"python - <<END <content> END\"` syntax, then we can just do `repository_ctx.execute(['python', \"./find_python_lib.py\"])`\r\nexample:\r\n```\r\ndef test_bash(repository_ctx):\r\n  \"\"\"Gets the python lib path.\"\"\"\r\n  print_lib = (\r\n      \"from __future__ import print_function\\n\" +\r\n      \"import site\\n\" +\r\n      \"import os\\n\" +\r\n      \"\\n\" +\r\n      \"try:\\n\" +\r\n      \"  input = raw_input\\n\" +\r\n      \"except NameError:\\n\" +\r\n      \"  pass\\n\" +\r\n      \"\\n\" +\r\n      \"python_paths = []\\n\" +\r\n      \"if os.getenv('PYTHONPATH') is not None:\\n\" +\r\n      \"  python_paths = os.getenv('PYTHONPATH').split(':')\\n\" +\r\n      \"try:\\n\" +\r\n      \"  library_paths = site.getsitepackages()\\n\" +\r\n      \"except AttributeError:\\n\" +\r\n      \" from distutils.sysconfig import get_python_lib\\n\" +\r\n      \" library_paths = [get_python_lib()]\\n\" +\r\n      \"all_paths = set(python_paths + library_paths)\\n\" +\r\n      \"paths = []\\n\" +\r\n      \"for path in all_paths:\\n\" +\r\n      \"  if os.path.isdir(path):\\n\" +\r\n      \"    paths.append(path)\\n\" +\r\n      \"if len(paths) >=1:\\n\" +\r\n      \"  print(paths[0])\\n\")\r\n  repository_ctx.file(\"find_python_lib.py\", print_lib)\r\n  result = repository_ctx.execute(['python', \"./find_python_lib.py\"], quiet=False)\r\n  print(\"STDOUT: \" + result.stdout)\r\n  print(\"STDERR: \" + result.stderr)\r\n  if result.return_code == 1:\r\n    print('error')\r\n  print('end')\r\n  \r\npython_configure = repository_rule(\r\n    implementation = test_bash,\r\n    environ = [\"PATH\"]\r\n)\r\n\r\n\r\n```"}