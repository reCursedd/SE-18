{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/407005548", "html_url": "https://github.com/tensorflow/tensorflow/issues/19834#issuecomment-407005548", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19834", "id": 407005548, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzAwNTU0OA==", "user": {"login": "nimroha", "id": 16114775, "node_id": "MDQ6VXNlcjE2MTE0Nzc1", "avatar_url": "https://avatars1.githubusercontent.com/u/16114775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nimroha", "html_url": "https://github.com/nimroha", "followers_url": "https://api.github.com/users/nimroha/followers", "following_url": "https://api.github.com/users/nimroha/following{/other_user}", "gists_url": "https://api.github.com/users/nimroha/gists{/gist_id}", "starred_url": "https://api.github.com/users/nimroha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nimroha/subscriptions", "organizations_url": "https://api.github.com/users/nimroha/orgs", "repos_url": "https://api.github.com/users/nimroha/repos", "events_url": "https://api.github.com/users/nimroha/events{/privacy}", "received_events_url": "https://api.github.com/users/nimroha/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-23T10:01:23Z", "updated_at": "2018-07-23T10:01:23Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23053697\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vsai121\">@vsai121</a> I solved it<br>\nin <code>MultiRNN</code> <code>zero_state</code> is a tuple of the states of each layer. so:</p>\n<p><code>new_state = tuple([cells.zero_state(batch_size, tf.float32)[i].clone(cell_state=initial_state[i]) for i in range(num_layers)])</code></p>", "body_text": "@vsai121 I solved it\nin MultiRNN zero_state is a tuple of the states of each layer. so:\nnew_state = tuple([cells.zero_state(batch_size, tf.float32)[i].clone(cell_state=initial_state[i]) for i in range(num_layers)])", "body": "@vsai121 I solved it\r\nin `MultiRNN` `zero_state` is a tuple of the states of each layer. so:\r\n\r\n`new_state = tuple([cells.zero_state(batch_size, tf.float32)[i].clone(cell_state=initial_state[i]) for i in range(num_layers)])`\r\n"}