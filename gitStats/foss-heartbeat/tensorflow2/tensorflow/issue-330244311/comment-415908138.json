{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/415908138", "html_url": "https://github.com/tensorflow/tensorflow/issues/19834#issuecomment-415908138", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19834", "id": 415908138, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTkwODEzOA==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-24T23:31:49Z", "updated_at": "2018-08-24T23:31:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For posterity, the most general way to do this is:</p>\n<pre><code>new_state = tf.contrib.framework.nest.map_structure(\n   lambda cell, is: cell.zero_state(batch_size, tf.float32).clone(cell_state=is),\n   cells, initial_state)\n</code></pre>", "body_text": "For posterity, the most general way to do this is:\nnew_state = tf.contrib.framework.nest.map_structure(\n   lambda cell, is: cell.zero_state(batch_size, tf.float32).clone(cell_state=is),\n   cells, initial_state)", "body": "For posterity, the most general way to do this is:\r\n\r\n```\r\nnew_state = tf.contrib.framework.nest.map_structure(\r\n   lambda cell, is: cell.zero_state(batch_size, tf.float32).clone(cell_state=is),\r\n   cells, initial_state)\r\n```"}