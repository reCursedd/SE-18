{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280855525", "html_url": "https://github.com/tensorflow/tensorflow/issues/4022#issuecomment-280855525", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4022", "id": 280855525, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDg1NTUyNQ==", "user": {"login": "botcs", "id": 12262395, "node_id": "MDQ6VXNlcjEyMjYyMzk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12262395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botcs", "html_url": "https://github.com/botcs", "followers_url": "https://api.github.com/users/botcs/followers", "following_url": "https://api.github.com/users/botcs/following{/other_user}", "gists_url": "https://api.github.com/users/botcs/gists{/gist_id}", "starred_url": "https://api.github.com/users/botcs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botcs/subscriptions", "organizations_url": "https://api.github.com/users/botcs/orgs", "repos_url": "https://api.github.com/users/botcs/repos", "events_url": "https://api.github.com/users/botcs/events{/privacy}", "received_events_url": "https://api.github.com/users/botcs/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-18T16:14:51Z", "updated_at": "2017-02-18T16:21:02Z", "author_association": "NONE", "body_html": "<p>what to do then if I have a SequenceExample which is parsed, and evaluates to sequences like:<br>\n[1, 2, 3, 5, 6]<br>\n[1, 5, 1, 1]<br>\n[9, 9, 1, 5, 6, 7, 7, 8, 4]<br>\netc.</p>\n<p>How I tested:</p>\n<div class=\"highlight highlight-source-python\"><pre>filename_queue <span class=\"pl-k\">=</span> tf.train.string_input_producer([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cnn.TFRecord<span class=\"pl-pds\">'</span></span>])\ncontext_parsed, sequence_parsed <span class=\"pl-k\">=</span> parse_example(filename_queue)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    \n    coord <span class=\"pl-k\">=</span> tf.train.Coordinator()\n    sess.run(tf.global_variables_initializer())\n    threads <span class=\"pl-k\">=</span> tf.train.start_queue_runners(<span class=\"pl-v\">sess</span><span class=\"pl-k\">=</span>sess, <span class=\"pl-v\">coord</span><span class=\"pl-k\">=</span>coord)\n    \n    batched_data <span class=\"pl-k\">=</span> tf.train.batch(\n        <span class=\"pl-v\">tensors</span><span class=\"pl-k\">=</span>[sequence_parsed[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>tokens<span class=\"pl-pds\">'</span></span>]],\n        <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>,\n        <span class=\"pl-v\">dynamic_pad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>\n    )\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>res = sess.run(sequence_parsed['tokens'])</span>\n    res <span class=\"pl-k\">=</span> batched_data.eval()\n    <span class=\"pl-c1\">print</span>(res)\n    coord.request_stop()\n    coord.join(threads)\n    sess.close()</pre></div>\n<p>but this ends in an infinite loop, but what I was expecting is smthng like this:<br>\n[1, 2, 3, 5, 6, 0, 0, 0, 0]<br>\n[1, 5, 1, 1, 0, 0, 0, 0, 0]<br>\n[9, 9, 1, 5, 6, 7, 7, 8, 4]</p>", "body_text": "what to do then if I have a SequenceExample which is parsed, and evaluates to sequences like:\n[1, 2, 3, 5, 6]\n[1, 5, 1, 1]\n[9, 9, 1, 5, 6, 7, 7, 8, 4]\netc.\nHow I tested:\nfilename_queue = tf.train.string_input_producer(['cnn.TFRecord'])\ncontext_parsed, sequence_parsed = parse_example(filename_queue)\nwith tf.Session() as sess:\n    \n    coord = tf.train.Coordinator()\n    sess.run(tf.global_variables_initializer())\n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n    \n    batched_data = tf.train.batch(\n        tensors=[sequence_parsed['tokens']],\n        batch_size=3,\n        dynamic_pad=True\n    )\n\n    #res = sess.run(sequence_parsed['tokens'])\n    res = batched_data.eval()\n    print(res)\n    coord.request_stop()\n    coord.join(threads)\n    sess.close()\nbut this ends in an infinite loop, but what I was expecting is smthng like this:\n[1, 2, 3, 5, 6, 0, 0, 0, 0]\n[1, 5, 1, 1, 0, 0, 0, 0, 0]\n[9, 9, 1, 5, 6, 7, 7, 8, 4]", "body": "what to do then if I have a SequenceExample which is parsed, and evaluates to sequences like:\r\n[1, 2, 3, 5, 6]\r\n[1, 5, 1, 1]\r\n[9, 9, 1, 5, 6, 7, 7, 8, 4]\r\netc.\r\n\r\nHow I tested:\r\n```python\r\nfilename_queue = tf.train.string_input_producer(['cnn.TFRecord'])\r\ncontext_parsed, sequence_parsed = parse_example(filename_queue)\r\nwith tf.Session() as sess:\r\n    \r\n    coord = tf.train.Coordinator()\r\n    sess.run(tf.global_variables_initializer())\r\n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\r\n    \r\n    batched_data = tf.train.batch(\r\n        tensors=[sequence_parsed['tokens']],\r\n        batch_size=3,\r\n        dynamic_pad=True\r\n    )\r\n\r\n    #res = sess.run(sequence_parsed['tokens'])\r\n    res = batched_data.eval()\r\n    print(res)\r\n    coord.request_stop()\r\n    coord.join(threads)\r\n    sess.close()\r\n```\r\n\r\nbut this ends in an infinite loop, but what I was expecting is smthng like this:\r\n[1, 2, 3, 5, 6, 0, 0, 0, 0]\r\n[1, 5, 1, 1, 0, 0, 0, 0, 0]\r\n[9, 9, 1, 5, 6, 7, 7, 8, 4]"}