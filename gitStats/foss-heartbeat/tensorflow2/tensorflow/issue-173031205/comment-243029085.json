{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/243029085", "html_url": "https://github.com/tensorflow/tensorflow/issues/4022#issuecomment-243029085", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4022", "id": 243029085, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzAyOTA4NQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-29T04:20:18Z", "updated_at": "2016-08-29T04:20:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p>According to the documentation (and the implementation) the <code>tf.train.batch()</code> function expects either a list of tensors or a \"dictionary of tensors\" (i.e. a dictionary in which the values are tensors) as the <code>tensors</code> argument. If you pass a <strong>list of lists</strong> of tensors, it will try to interpret the inner list of tensors as a tensor, using the implicit packing code, and that fails here because the tensors aren't compatible as arguments to <code>tf.pack()</code>.</p>\n<p>It would probably be more intuitive if the <code>tensors</code> argument to <code>tf.train.batch()</code> accept any arbitrary nesting of tensors that can be flattened using <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/util/nest.py#L83\"><code>nest.flatten()</code></a>, but it looks like <code>nest.flatten()</code> doesn't support dictionaries, so we'd need to add that support for backwards compatibility.</p>\n<p>What a sad state of affairs. I'll mark this as \"contributions welcome\" for now. It looks like <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1104579\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kosklain\">@kosklain</a> have the most experience with the nesting code, so perhaps they can chime in if there's a reason not to take this route.</p>", "body_text": "According to the documentation (and the implementation) the tf.train.batch() function expects either a list of tensors or a \"dictionary of tensors\" (i.e. a dictionary in which the values are tensors) as the tensors argument. If you pass a list of lists of tensors, it will try to interpret the inner list of tensors as a tensor, using the implicit packing code, and that fails here because the tensors aren't compatible as arguments to tf.pack().\nIt would probably be more intuitive if the tensors argument to tf.train.batch() accept any arbitrary nesting of tensors that can be flattened using nest.flatten(), but it looks like nest.flatten() doesn't support dictionaries, so we'd need to add that support for backwards compatibility.\nWhat a sad state of affairs. I'll mark this as \"contributions welcome\" for now. It looks like @ebrevdo and @kosklain have the most experience with the nesting code, so perhaps they can chime in if there's a reason not to take this route.", "body": "According to the documentation (and the implementation) the `tf.train.batch()` function expects either a list of tensors or a \"dictionary of tensors\" (i.e. a dictionary in which the values are tensors) as the `tensors` argument. If you pass a **list of lists** of tensors, it will try to interpret the inner list of tensors as a tensor, using the implicit packing code, and that fails here because the tensors aren't compatible as arguments to `tf.pack()`.\n\nIt would probably be more intuitive if the `tensors` argument to `tf.train.batch()` accept any arbitrary nesting of tensors that can be flattened using [`nest.flatten()`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/util/nest.py#L83), but it looks like `nest.flatten()` doesn't support dictionaries, so we'd need to add that support for backwards compatibility.\n\nWhat a sad state of affairs. I'll mark this as \"contributions welcome\" for now. It looks like @ebrevdo and @kosklain have the most experience with the nesting code, so perhaps they can chime in if there's a reason not to take this route.\n"}