{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15046", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15046/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15046/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15046/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15046", "id": 278569914, "node_id": "MDU6SXNzdWUyNzg1Njk5MTQ=", "number": 15046, "title": "stop gradients for weights in tf.losses", "user": {"login": "ngc92", "id": 7938269, "node_id": "MDQ6VXNlcjc5MzgyNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7938269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngc92", "html_url": "https://github.com/ngc92", "followers_url": "https://api.github.com/users/ngc92/followers", "following_url": "https://api.github.com/users/ngc92/following{/other_user}", "gists_url": "https://api.github.com/users/ngc92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngc92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngc92/subscriptions", "organizations_url": "https://api.github.com/users/ngc92/orgs", "repos_url": "https://api.github.com/users/ngc92/repos", "events_url": "https://api.github.com/users/ngc92/events{/privacy}", "received_events_url": "https://api.github.com/users/ngc92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-12-01T19:25:12Z", "updated_at": "2017-12-06T22:01:19Z", "closed_at": "2017-12-06T16:56:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In the case that the weights given to tf.losses.* depend in some way on the model parameters,<br>\nthe derivative of that loss also calculated with respect to the weights.<br>\n(Stupid) minimal example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nx <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">0</span>)\nw <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>W<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(), <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.zeros_initializer())\nL <span class=\"pl-k\">=</span> tf.losses.mean_squared_error(x, x, <span class=\"pl-v\">weights</span><span class=\"pl-k\">=</span>w)\ntf.train.AdamOptimizer().compute_gradients(L)</pre></div>\n<p>results in</p>\n<pre><code>[(&lt;tf.Tensor 'gradients/mean_squared_error/Mul_grad/tuple/control_dependency_1:0' shape=() dtype=float32&gt;,\n  &lt;tf.Variable 'W:0' shape=() dtype=float32_ref&gt;)]\n</code></pre>\n<p>I would expect the weights to be considered constant for the calculation of a loss. In case you agree with me, I can make a PR that adds <code>stop_gradient</code> around the weights parameter.</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: N/A</li>\n<li><strong>TensorFlow version (use command below)</strong>: N/A</li>\n<li><strong>Python version</strong>:  N/A</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>", "body_text": "In the case that the weights given to tf.losses.* depend in some way on the model parameters,\nthe derivative of that loss also calculated with respect to the weights.\n(Stupid) minimal example:\nimport tensorflow as tf\nx = tf.constant(0)\nw = tf.get_variable(name=\"W\", shape=(), initializer=tf.zeros_initializer())\nL = tf.losses.mean_squared_error(x, x, weights=w)\ntf.train.AdamOptimizer().compute_gradients(L)\nresults in\n[(<tf.Tensor 'gradients/mean_squared_error/Mul_grad/tuple/control_dependency_1:0' shape=() dtype=float32>,\n  <tf.Variable 'W:0' shape=() dtype=float32_ref>)]\n\nI would expect the weights to be considered constant for the calculation of a loss. In case you agree with me, I can make a PR that adds stop_gradient around the weights parameter.\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): N/A\nTensorFlow installed from (source or binary): N/A\nTensorFlow version (use command below): N/A\nPython version:  N/A\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A", "body": "In the case that the weights given to tf.losses.* depend in some way on the model parameters, \r\nthe derivative of that loss also calculated with respect to the weights. \r\n(Stupid) minimal example:\r\n```python\r\nimport tensorflow as tf\r\nx = tf.constant(0)\r\nw = tf.get_variable(name=\"W\", shape=(), initializer=tf.zeros_initializer())\r\nL = tf.losses.mean_squared_error(x, x, weights=w)\r\ntf.train.AdamOptimizer().compute_gradients(L)\r\n```\r\nresults in \r\n```\r\n[(<tf.Tensor 'gradients/mean_squared_error/Mul_grad/tuple/control_dependency_1:0' shape=() dtype=float32>,\r\n  <tf.Variable 'W:0' shape=() dtype=float32_ref>)]\r\n```\r\n\r\nI would expect the weights to be considered constant for the calculation of a loss. In case you agree with me, I can make a PR that adds `stop_gradient` around the weights parameter.\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: N/A\r\n- **TensorFlow installed from (source or binary)**: N/A\r\n- **TensorFlow version (use command below)**: N/A\r\n- **Python version**:  N/A\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n"}