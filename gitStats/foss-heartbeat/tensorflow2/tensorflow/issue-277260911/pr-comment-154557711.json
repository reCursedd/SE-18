{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154557711", "pull_request_review_id": 80736218, "id": 154557711, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDU1NzcxMQ==", "diff_hunk": "@@ -373,22 +374,23 @@ seed2: An second seed to avoid seed collision.\n REGISTER_OP(\"ComputeAccidentalHits\")\n     .Input(\"true_classes: int64\")\n     .Input(\"sampled_candidates: int64\")\n+    .Input(\"num_true: int32\")\n     .Output(\"indices: int32\")\n     .Output(\"ids: int64\")\n     .Output(\"weights: float\")\n-    .Attr(\"num_true: int\")\n     .Attr(\"seed: int = 0\")\n     .Attr(\"seed2: int = 0\")\n     .SetShapeFn([](InferenceContext* c) {\n-      int64 num_true;", "path": "tensorflow/core/ops/candidate_sampling_ops.cc", "position": 197, "original_position": 197, "commit_id": "2b8be38ac4a57699904dc501fe7270c2b58177b6", "original_commit_id": "7ae527af3b23681496a2f265e936821a98f8da23", "user": {"login": "MtDersvan", "id": 7069222, "node_id": "MDQ6VXNlcjcwNjkyMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7069222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MtDersvan", "html_url": "https://github.com/MtDersvan", "followers_url": "https://api.github.com/users/MtDersvan/followers", "following_url": "https://api.github.com/users/MtDersvan/following{/other_user}", "gists_url": "https://api.github.com/users/MtDersvan/gists{/gist_id}", "starred_url": "https://api.github.com/users/MtDersvan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MtDersvan/subscriptions", "organizations_url": "https://api.github.com/users/MtDersvan/orgs", "repos_url": "https://api.github.com/users/MtDersvan/repos", "events_url": "https://api.github.com/users/MtDersvan/events{/privacy}", "received_events_url": "https://api.github.com/users/MtDersvan/received_events", "type": "User", "site_admin": false}, "body": "This approach worked well for a sampler [code](https://github.com/MtDersvan/tensorflow/blob/r1.4/tensorflow/core/kernels/candidate_sampler_ops.cc#L48), and `CandidateSamplerShapeFn` works with `num_true` as an Input, as well.\r\nI tried two methods:\r\n\r\n1) \r\n~~~c++\r\nint32 num_true = c->input_tensor(2)->scalar<int32>()();\r\n~~~\r\n\r\nWith a check:\r\n~~~c++\r\nDimensionHandle unused;\r\nTF_RETURN_IF_ERROR(c->WithValue(c->Dim(true_classes, 1), num_true, &unused));\r\n~~~\r\n\r\n2) \r\n~~~c++\r\nDimensionHandle num_true;\r\nTF_RETURN_IF_ERROR(c->MakeDimForScalarInput(2, &num_true));\r\n~~~\r\n\r\nWith a check:\r\n~~~c++\r\nDimensionHandle unused;\r\nTF_RETURN_IF_ERROR(c->WithValue(c->Dim(true_classes, 1), c->Value(num_true), &unused));\r\n~~~\r\n\r\nBut both yielded `Segmentation fault (core dumped)` error, when python `compute_accidental_hits` op is run.\r\nMaybe I'm doing something wrong? I just wanted to get a scalar representation of a `num_true` tensor, to use it in a `WithValue` func. ", "created_at": "2017-12-04T04:28:07Z", "updated_at": "2018-02-10T10:40:49Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14928#discussion_r154557711", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14928", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154557711"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14928#discussion_r154557711"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14928"}}, "body_html": "<p>This approach worked well for a sampler <a href=\"https://github.com/MtDersvan/tensorflow/blob/r1.4/tensorflow/core/kernels/candidate_sampler_ops.cc#L48\">code</a>, and <code>CandidateSamplerShapeFn</code> works with <code>num_true</code> as an Input, as well.<br>\nI tried two methods:</p>\n<ol>\n<li></li>\n</ol>\n<div class=\"highlight highlight-source-c++\"><pre>int32 num_true = c-&gt;<span class=\"pl-en\">input_tensor</span>(<span class=\"pl-c1\">2</span>)-&gt;scalar&lt;int32&gt;()();</pre></div>\n<p>With a check:</p>\n<div class=\"highlight highlight-source-c++\"><pre>DimensionHandle unused;\n<span class=\"pl-en\">TF_RETURN_IF_ERROR</span>(c-&gt;<span class=\"pl-en\">WithValue</span>(c-&gt;<span class=\"pl-en\">Dim</span>(true_classes, <span class=\"pl-c1\">1</span>), num_true, &amp;unused));</pre></div>\n<ol start=\"2\">\n<li></li>\n</ol>\n<div class=\"highlight highlight-source-c++\"><pre>DimensionHandle num_true;\n<span class=\"pl-en\">TF_RETURN_IF_ERROR</span>(c-&gt;<span class=\"pl-en\">MakeDimForScalarInput</span>(<span class=\"pl-c1\">2</span>, &amp;num_true));</pre></div>\n<p>With a check:</p>\n<div class=\"highlight highlight-source-c++\"><pre>DimensionHandle unused;\n<span class=\"pl-en\">TF_RETURN_IF_ERROR</span>(c-&gt;<span class=\"pl-en\">WithValue</span>(c-&gt;<span class=\"pl-en\">Dim</span>(true_classes, <span class=\"pl-c1\">1</span>), c-&gt;Value(num_true), &amp;unused));</pre></div>\n<p>But both yielded <code>Segmentation fault (core dumped)</code> error, when python <code>compute_accidental_hits</code> op is run.<br>\nMaybe I'm doing something wrong? I just wanted to get a scalar representation of a <code>num_true</code> tensor, to use it in a <code>WithValue</code> func.</p>", "body_text": "This approach worked well for a sampler code, and CandidateSamplerShapeFn works with num_true as an Input, as well.\nI tried two methods:\n\n\n\nint32 num_true = c->input_tensor(2)->scalar<int32>()();\nWith a check:\nDimensionHandle unused;\nTF_RETURN_IF_ERROR(c->WithValue(c->Dim(true_classes, 1), num_true, &unused));\n\n\n\nDimensionHandle num_true;\nTF_RETURN_IF_ERROR(c->MakeDimForScalarInput(2, &num_true));\nWith a check:\nDimensionHandle unused;\nTF_RETURN_IF_ERROR(c->WithValue(c->Dim(true_classes, 1), c->Value(num_true), &unused));\nBut both yielded Segmentation fault (core dumped) error, when python compute_accidental_hits op is run.\nMaybe I'm doing something wrong? I just wanted to get a scalar representation of a num_true tensor, to use it in a WithValue func.", "in_reply_to_id": 154553724}