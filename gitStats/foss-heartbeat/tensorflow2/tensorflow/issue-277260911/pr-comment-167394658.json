{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/167394658", "pull_request_review_id": 95618329, "id": 167394658, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzM5NDY1OA==", "diff_hunk": "@@ -373,22 +374,23 @@ seed2: An second seed to avoid seed collision.\n REGISTER_OP(\"ComputeAccidentalHits\")\n     .Input(\"true_classes: int64\")\n     .Input(\"sampled_candidates: int64\")\n+    .Input(\"num_true: int32\")\n     .Output(\"indices: int32\")\n     .Output(\"ids: int64\")\n     .Output(\"weights: float\")\n-    .Attr(\"num_true: int\")\n     .Attr(\"seed: int = 0\")\n     .Attr(\"seed2: int = 0\")\n     .SetShapeFn([](InferenceContext* c) {\n-      int64 num_true;", "path": "tensorflow/core/ops/candidate_sampling_ops.cc", "position": 197, "original_position": 197, "commit_id": "2b8be38ac4a57699904dc501fe7270c2b58177b6", "original_commit_id": "7ae527af3b23681496a2f265e936821a98f8da23", "user": {"login": "MtDersvan", "id": 7069222, "node_id": "MDQ6VXNlcjcwNjkyMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7069222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MtDersvan", "html_url": "https://github.com/MtDersvan", "followers_url": "https://api.github.com/users/MtDersvan/followers", "following_url": "https://api.github.com/users/MtDersvan/following{/other_user}", "gists_url": "https://api.github.com/users/MtDersvan/gists{/gist_id}", "starred_url": "https://api.github.com/users/MtDersvan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MtDersvan/subscriptions", "organizations_url": "https://api.github.com/users/MtDersvan/orgs", "repos_url": "https://api.github.com/users/MtDersvan/repos", "events_url": "https://api.github.com/users/MtDersvan/events{/privacy}", "received_events_url": "https://api.github.com/users/MtDersvan/received_events", "type": "User", "site_admin": false}, "body": "Surprisingly this:\r\n~~~c++\r\nREGISTER_OP(\"ComputeAccidentalHits\")\r\n    .Input(\"true_classes: int64\")\r\n    .Input(\"sampled_candidates: int64\")\r\n    .Input(\"num_true: int32\")\r\n    .Output(\"indices: int32\")\r\n    .Output(\"ids: int64\")\r\n    .Output(\"weights: float\")\r\n    .Attr(\"seed: int = 0\")\r\n    .Attr(\"seed2: int = 0\")\r\n    .SetShapeFn([](InferenceContext* c) {\r\n      DimensionHandle num_true;\r\n      TF_RETURN_IF_ERROR(c->MakeDimForScalarInput(2, &num_true));\r\n\r\n      // Validate true_classes.\r\n      ShapeHandle true_classes;\r\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &true_classes));\r\n      DimensionHandle unused;\r\n      TF_RETURN_IF_ERROR(\r\n          c->WithValue(c->Dim(true_classes, 1), c->Value(num_true), &unused));\r\n\r\n      // All three outputs are the same shape.\r\n      ShapeHandle v = c->Vector(InferenceContext::kUnknownDim);\r\n      c->set_output(0, v);\r\n      c->set_output(1, v);\r\n      c->set_output(2, v);\r\n      return Status::OK();\r\n    })\r\n~~~\r\nworks fine when `Value(Dim(true_classes, 1)) == kUnknownDim`, e.g. when both `num_true` is a placeholder and `labels'` last dimension is a placeholder.\r\nSnippet: https://pastebin.com/fCgNwwYY", "created_at": "2018-02-10T09:59:30Z", "updated_at": "2018-02-10T10:40:49Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14928#discussion_r167394658", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14928", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/167394658"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14928#discussion_r167394658"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14928"}}, "body_html": "<p>Surprisingly this:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-en\">REGISTER_OP</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ComputeAccidentalHits<span class=\"pl-pds\">\"</span></span>)\n    .Input(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>true_classes: int64<span class=\"pl-pds\">\"</span></span>)\n    .Input(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sampled_candidates: int64<span class=\"pl-pds\">\"</span></span>)\n    .Input(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>num_true: int32<span class=\"pl-pds\">\"</span></span>)\n    .Output(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>indices: int32<span class=\"pl-pds\">\"</span></span>)\n    .Output(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ids: int64<span class=\"pl-pds\">\"</span></span>)\n    .Output(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weights: float<span class=\"pl-pds\">\"</span></span>)\n    .Attr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>seed: int = 0<span class=\"pl-pds\">\"</span></span>)\n    .Attr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>seed2: int = 0<span class=\"pl-pds\">\"</span></span>)\n    .SetShapeFn([](InferenceContext* c) {\n      DimensionHandle num_true;\n      <span class=\"pl-c1\">TF_RETURN_IF_ERROR</span>(c-&gt;<span class=\"pl-c1\">MakeDimForScalarInput</span>(<span class=\"pl-c1\">2</span>, &amp;num_true));\n\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Validate true_classes.</span>\n      ShapeHandle true_classes;\n      <span class=\"pl-c1\">TF_RETURN_IF_ERROR</span>(c-&gt;<span class=\"pl-c1\">WithRank</span>(c-&gt;<span class=\"pl-c1\">input</span>(<span class=\"pl-c1\">0</span>), <span class=\"pl-c1\">2</span>, &amp;true_classes));\n      DimensionHandle unused;\n      <span class=\"pl-c1\">TF_RETURN_IF_ERROR</span>(\n          c-&gt;<span class=\"pl-c1\">WithValue</span>(c-&gt;<span class=\"pl-c1\">Dim</span>(true_classes, <span class=\"pl-c1\">1</span>), c-&gt;<span class=\"pl-c1\">Value</span>(num_true), &amp;unused));\n\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> All three outputs are the same shape.</span>\n      ShapeHandle v = c-&gt;<span class=\"pl-c1\">Vector</span>(InferenceContext::<span class=\"pl-c1\">kUnknownDim</span>);\n      c-&gt;<span class=\"pl-c1\">set_output</span>(<span class=\"pl-c1\">0</span>, v);\n      c-&gt;<span class=\"pl-c1\">set_output</span>(<span class=\"pl-c1\">1</span>, v);\n      c-&gt;<span class=\"pl-c1\">set_output</span>(<span class=\"pl-c1\">2</span>, v);\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Status::OK</span>();\n    })</pre></div>\n<p>works fine when <code>Value(Dim(true_classes, 1)) == kUnknownDim</code>, e.g. when both <code>num_true</code> is a placeholder and <code>labels'</code> last dimension is a placeholder.<br>\nSnippet: <a href=\"https://pastebin.com/fCgNwwYY\" rel=\"nofollow\">https://pastebin.com/fCgNwwYY</a></p>", "body_text": "Surprisingly this:\nREGISTER_OP(\"ComputeAccidentalHits\")\n    .Input(\"true_classes: int64\")\n    .Input(\"sampled_candidates: int64\")\n    .Input(\"num_true: int32\")\n    .Output(\"indices: int32\")\n    .Output(\"ids: int64\")\n    .Output(\"weights: float\")\n    .Attr(\"seed: int = 0\")\n    .Attr(\"seed2: int = 0\")\n    .SetShapeFn([](InferenceContext* c) {\n      DimensionHandle num_true;\n      TF_RETURN_IF_ERROR(c->MakeDimForScalarInput(2, &num_true));\n\n      // Validate true_classes.\n      ShapeHandle true_classes;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &true_classes));\n      DimensionHandle unused;\n      TF_RETURN_IF_ERROR(\n          c->WithValue(c->Dim(true_classes, 1), c->Value(num_true), &unused));\n\n      // All three outputs are the same shape.\n      ShapeHandle v = c->Vector(InferenceContext::kUnknownDim);\n      c->set_output(0, v);\n      c->set_output(1, v);\n      c->set_output(2, v);\n      return Status::OK();\n    })\nworks fine when Value(Dim(true_classes, 1)) == kUnknownDim, e.g. when both num_true is a placeholder and labels' last dimension is a placeholder.\nSnippet: https://pastebin.com/fCgNwwYY", "in_reply_to_id": 154553724}