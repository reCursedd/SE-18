{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21042", "id": 203106818, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAzMTA2ODE4", "html_url": "https://github.com/tensorflow/tensorflow/pull/21042", "diff_url": "https://github.com/tensorflow/tensorflow/pull/21042.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/21042.patch", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21042", "number": 21042, "state": "closed", "locked": false, "title": "Templates DataTypeToEnum and associated structs on type properties", "user": {"login": "Bidski", "id": 2320984, "node_id": "MDQ6VXNlcjIzMjA5ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2320984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bidski", "html_url": "https://github.com/Bidski", "followers_url": "https://api.github.com/users/Bidski/followers", "following_url": "https://api.github.com/users/Bidski/following{/other_user}", "gists_url": "https://api.github.com/users/Bidski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bidski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bidski/subscriptions", "organizations_url": "https://api.github.com/users/Bidski/orgs", "repos_url": "https://api.github.com/users/Bidski/repos", "events_url": "https://api.github.com/users/Bidski/events{/privacy}", "received_events_url": "https://api.github.com/users/Bidski/received_events", "type": "User", "site_admin": false}, "body": "This PR addresses the bug outlined in #20586. Rather than relying on all systems to define the `int64` data type in a manner that is consistent with a `long long`, this PR inspects the properties of the type. For instance, `int64` is a `signed`, `integral` type with a size of `8 bytes`.\r\n\r\nThis is important as not all systems define the basic integral data types in the same way, but they are all defined to meet the same intrinsic properties. On the test system, `int64_t` is not equivalent to a `long long` (which is how the `int64` type is defined in `tensorflow/core/platform/default/integral_types.h`). However, both `long long` and `int64_t` meet the same intrinsic properties on the test system. The following code and output shows this inconsistency, where `int64_t != long long` from the perspective of gcc (Ubuntu 7.3.0-21ubuntu1~16.04) 7.3.0.\r\n\r\n```\r\n#include <cstdint>\r\n#include <iostream>\r\n\r\nint main(void) {\r\n    std::cout << \"int64_t...............: \"\r\n              << \"(\" << typeid(int64_t).name() << \") \" << sizeof(int64_t) << std::endl;\r\n    std::cout << \"long..................: \"\r\n              << \"(\" << typeid(long).name() << \") \" << sizeof(long) << std::endl;\r\n    std::cout << \"long int..............: \"\r\n              << \"(\" << typeid(long int).name() << \") \" << sizeof(long int) << std::endl;\r\n    std::cout << \"long long int.........: \"\r\n              << \"(\" << typeid(long long int).name() << \") \" << sizeof(long long int) << std::endl;\r\n    std::cout << \"long long.............: \"\r\n              << \"(\" << typeid(long long).name() << \") \" << sizeof(long long) << std::endl;\r\n    std::cout << \"uint64_t..............: \"\r\n              << \"(\" << typeid(uint64_t).name() << \") \" << sizeof(int64_t) << std::endl;\r\n    std::cout << \"unsigned long.........: \"\r\n              << \"(\" << typeid(unsigned long).name() << \") \" << sizeof(unsigned long) << std::endl;\r\n    std::cout << \"unsigned long int.....: \"\r\n              << \"(\" << typeid(unsigned long int).name() << \") \" << sizeof(unsigned long int) << std::endl;\r\n    std::cout << \"unsigned long long int: \"\r\n              << \"(\" << typeid(unsigned long long int).name() << \") \" << sizeof(unsigned long long int) << std::endl;\r\n    std::cout << \"unsigned long long....: \"\r\n              << \"(\" << typeid(unsigned long long).name() << \") \" << sizeof(unsigned long long) << std::endl;\r\n    std::cout << \"long long == int64_t? \" << (std::is_same<long long, int64_t>::value ? \"yes\" : \"no\") << std::endl;\r\n    std::cout << \"(sizeof(long long) == 8) && std::is_signed<long long>::value? \"\r\n              << ((sizeof(long long) == 8) && std::is_signed<long long>::value ? \"yes\" : \"no\") << std::endl;\r\n    std::cout << \"(sizeof(int64_t) == 8) && std::is_signed<int64_t>::value? \"\r\n              << ((sizeof(int64_t) == 8) && std::is_signed<int64_t>::value ? \"yes\" : \"no\") << std::endl;\r\n    std::cout << \"unsigned long long == uint64_t? \"\r\n              << (std::is_same<unsigned long long, uint64_t>::value ? \"yes\" : \"no\") << std::endl;\r\n    std::cout << \"(sizeof(unsigned long long) == 8) && !std::is_signed<unsigned long long>::value? \"\r\n              << ((sizeof(unsigned long long) == 8) && !std::is_signed<unsigned long long>::value ? \"yes\" : \"no\")\r\n              << std::endl;\r\n    std::cout << \"(sizeof(uint64_t) == 8) && !std::is_signed<uint64_t>::value? \"\r\n              << ((sizeof(uint64_t) == 8) && !std::is_signed<uint64_t>::value ? \"yes\" : \"no\") << std::endl;\r\n    return 0;\r\n}\r\n```\r\n```\r\nint64_t...............: (l) 8\r\nlong..................: (l) 8\r\nlong int..............: (l) 8\r\nlong long int.........: (x) 8\r\nlong long.............: (x) 8\r\nuint64_t..............: (m) 8\r\nunsigned long.........: (m) 8\r\nunsigned long int.....: (m) 8\r\nunsigned long long int: (y) 8\r\nunsigned long long....: (y) 8\r\nlong long == int64_t? no\r\n(sizeof(long long) == 8) && std::is_signed<long long>::value? yes\r\n(sizeof(int64_t) == 8) && std::is_signed<int64_t>::value? yes\r\nunsigned long long == uint64_t? no\r\n(sizeof(unsigned long long) == 8) && !std::is_signed<unsigned long long>::value? yes\r\n(sizeof(uint64_t) == 8) && !std::is_signed<uint64_t>::value? yes\r\n```\r\n\r\n\r\nNote: `int64` is only used as an example here, this bug applies to other types as well, which this PR addresses.", "created_at": "2018-07-23T04:34:03Z", "updated_at": "2018-08-10T17:01:13Z", "closed_at": "2018-08-10T17:01:12Z", "merged_at": null, "merge_commit_sha": "d45b079a5709f9fb31eb4e36d638d0eaff0e7d76", "assignee": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [{"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, {"login": "josh11b", "id": 15258583, "node_id": "MDQ6VXNlcjE1MjU4NTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/15258583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh11b", "html_url": "https://github.com/josh11b", "followers_url": "https://api.github.com/users/josh11b/followers", "following_url": "https://api.github.com/users/josh11b/following{/other_user}", "gists_url": "https://api.github.com/users/josh11b/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh11b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh11b/subscriptions", "organizations_url": "https://api.github.com/users/josh11b/orgs", "repos_url": "https://api.github.com/users/josh11b/repos", "events_url": "https://api.github.com/users/josh11b/events{/privacy}", "received_events_url": "https://api.github.com/users/josh11b/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "milestone": null, "commits_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21042/commits", "review_comments_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21042/comments", "review_comment_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21042/comments", "statuses_url": "https://api.github.com/repos/tensorflow/tensorflow/statuses/a9275cfb62902dfa7ac7bd05bfd43518c6f5d268", "head": {"label": "Bidski:master", "ref": "master", "sha": "a9275cfb62902dfa7ac7bd05bfd43518c6f5d268", "user": {"login": "Bidski", "id": 2320984, "node_id": "MDQ6VXNlcjIzMjA5ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2320984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bidski", "html_url": "https://github.com/Bidski", "followers_url": "https://api.github.com/users/Bidski/followers", "following_url": "https://api.github.com/users/Bidski/following{/other_user}", "gists_url": "https://api.github.com/users/Bidski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bidski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bidski/subscriptions", "organizations_url": "https://api.github.com/users/Bidski/orgs", "repos_url": "https://api.github.com/users/Bidski/repos", "events_url": "https://api.github.com/users/Bidski/events{/privacy}", "received_events_url": "https://api.github.com/users/Bidski/received_events", "type": "User", "site_admin": false}, "repo": {"id": 131010152, "node_id": "MDEwOlJlcG9zaXRvcnkxMzEwMTAxNTI=", "name": "tensorflow", "full_name": "Bidski/tensorflow", "private": false, "owner": {"login": "Bidski", "id": 2320984, "node_id": "MDQ6VXNlcjIzMjA5ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2320984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bidski", "html_url": "https://github.com/Bidski", "followers_url": "https://api.github.com/users/Bidski/followers", "following_url": "https://api.github.com/users/Bidski/following{/other_user}", "gists_url": "https://api.github.com/users/Bidski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bidski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bidski/subscriptions", "organizations_url": "https://api.github.com/users/Bidski/orgs", "repos_url": "https://api.github.com/users/Bidski/repos", "events_url": "https://api.github.com/users/Bidski/events{/privacy}", "received_events_url": "https://api.github.com/users/Bidski/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/Bidski/tensorflow", "description": "Computation using data flow graphs for scalable machine learning", "fork": true, "url": "https://api.github.com/repos/Bidski/tensorflow", "forks_url": "https://api.github.com/repos/Bidski/tensorflow/forks", "keys_url": "https://api.github.com/repos/Bidski/tensorflow/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/Bidski/tensorflow/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/Bidski/tensorflow/teams", "hooks_url": "https://api.github.com/repos/Bidski/tensorflow/hooks", "issue_events_url": "https://api.github.com/repos/Bidski/tensorflow/issues/events{/number}", "events_url": "https://api.github.com/repos/Bidski/tensorflow/events", "assignees_url": "https://api.github.com/repos/Bidski/tensorflow/assignees{/user}", "branches_url": "https://api.github.com/repos/Bidski/tensorflow/branches{/branch}", "tags_url": "https://api.github.com/repos/Bidski/tensorflow/tags", "blobs_url": "https://api.github.com/repos/Bidski/tensorflow/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/Bidski/tensorflow/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/Bidski/tensorflow/git/refs{/sha}", "trees_url": "https://api.github.com/repos/Bidski/tensorflow/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/Bidski/tensorflow/statuses/{sha}", "languages_url": "https://api.github.com/repos/Bidski/tensorflow/languages", "stargazers_url": "https://api.github.com/repos/Bidski/tensorflow/stargazers", "contributors_url": "https://api.github.com/repos/Bidski/tensorflow/contributors", "subscribers_url": "https://api.github.com/repos/Bidski/tensorflow/subscribers", "subscription_url": "https://api.github.com/repos/Bidski/tensorflow/subscription", "commits_url": "https://api.github.com/repos/Bidski/tensorflow/commits{/sha}", "git_commits_url": "https://api.github.com/repos/Bidski/tensorflow/git/commits{/sha}", "comments_url": "https://api.github.com/repos/Bidski/tensorflow/comments{/number}", "issue_comment_url": "https://api.github.com/repos/Bidski/tensorflow/issues/comments{/number}", "contents_url": "https://api.github.com/repos/Bidski/tensorflow/contents/{+path}", "compare_url": "https://api.github.com/repos/Bidski/tensorflow/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/Bidski/tensorflow/merges", "archive_url": "https://api.github.com/repos/Bidski/tensorflow/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/Bidski/tensorflow/downloads", "issues_url": "https://api.github.com/repos/Bidski/tensorflow/issues{/number}", "pulls_url": "https://api.github.com/repos/Bidski/tensorflow/pulls{/number}", "milestones_url": "https://api.github.com/repos/Bidski/tensorflow/milestones{/number}", "notifications_url": "https://api.github.com/repos/Bidski/tensorflow/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/Bidski/tensorflow/labels{/name}", "releases_url": "https://api.github.com/repos/Bidski/tensorflow/releases{/id}", "deployments_url": "https://api.github.com/repos/Bidski/tensorflow/deployments", "created_at": "2018-04-25T13:25:11Z", "updated_at": "2018-07-23T04:05:18Z", "pushed_at": "2018-07-23T04:05:13Z", "git_url": "git://github.com/Bidski/tensorflow.git", "ssh_url": "git@github.com:Bidski/tensorflow.git", "clone_url": "https://github.com/Bidski/tensorflow.git", "svn_url": "https://github.com/Bidski/tensorflow", "homepage": "https://tensorflow.org", "size": 184239, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "tensorflow:master", "ref": "master", "sha": "89e06304aad35bfb019a8c10f39fc1ead83e0f99", "user": {"login": "tensorflow", "id": 15658638, "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1NjU4NjM4", "avatar_url": "https://avatars1.githubusercontent.com/u/15658638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow", "html_url": "https://github.com/tensorflow", "followers_url": "https://api.github.com/users/tensorflow/followers", "following_url": "https://api.github.com/users/tensorflow/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow/orgs", "repos_url": "https://api.github.com/users/tensorflow/repos", "events_url": "https://api.github.com/users/tensorflow/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 45717250, "node_id": "MDEwOlJlcG9zaXRvcnk0NTcxNzI1MA==", "name": "tensorflow", "full_name": "tensorflow/tensorflow", "private": false, "owner": {"login": "tensorflow", "id": 15658638, "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1NjU4NjM4", "avatar_url": "https://avatars1.githubusercontent.com/u/15658638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow", "html_url": "https://github.com/tensorflow", "followers_url": "https://api.github.com/users/tensorflow/followers", "following_url": "https://api.github.com/users/tensorflow/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow/orgs", "repos_url": "https://api.github.com/users/tensorflow/repos", "events_url": "https://api.github.com/users/tensorflow/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/tensorflow/tensorflow", "description": "An Open Source Machine Learning Framework for Everyone", "fork": false, "url": "https://api.github.com/repos/tensorflow/tensorflow", "forks_url": "https://api.github.com/repos/tensorflow/tensorflow/forks", "keys_url": "https://api.github.com/repos/tensorflow/tensorflow/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/tensorflow/tensorflow/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/tensorflow/tensorflow/teams", "hooks_url": "https://api.github.com/repos/tensorflow/tensorflow/hooks", "issue_events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/events{/number}", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/events", "assignees_url": "https://api.github.com/repos/tensorflow/tensorflow/assignees{/user}", "branches_url": "https://api.github.com/repos/tensorflow/tensorflow/branches{/branch}", "tags_url": "https://api.github.com/repos/tensorflow/tensorflow/tags", "blobs_url": "https://api.github.com/repos/tensorflow/tensorflow/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/tensorflow/tensorflow/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/tensorflow/tensorflow/git/refs{/sha}", "trees_url": "https://api.github.com/repos/tensorflow/tensorflow/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/tensorflow/tensorflow/statuses/{sha}", "languages_url": "https://api.github.com/repos/tensorflow/tensorflow/languages", "stargazers_url": "https://api.github.com/repos/tensorflow/tensorflow/stargazers", "contributors_url": "https://api.github.com/repos/tensorflow/tensorflow/contributors", "subscribers_url": "https://api.github.com/repos/tensorflow/tensorflow/subscribers", "subscription_url": "https://api.github.com/repos/tensorflow/tensorflow/subscription", "commits_url": "https://api.github.com/repos/tensorflow/tensorflow/commits{/sha}", "git_commits_url": "https://api.github.com/repos/tensorflow/tensorflow/git/commits{/sha}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/comments{/number}", "issue_comment_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments{/number}", "contents_url": "https://api.github.com/repos/tensorflow/tensorflow/contents/{+path}", "compare_url": "https://api.github.com/repos/tensorflow/tensorflow/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/tensorflow/tensorflow/merges", "archive_url": "https://api.github.com/repos/tensorflow/tensorflow/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/tensorflow/tensorflow/downloads", "issues_url": "https://api.github.com/repos/tensorflow/tensorflow/issues{/number}", "pulls_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls{/number}", "milestones_url": "https://api.github.com/repos/tensorflow/tensorflow/milestones{/number}", "notifications_url": "https://api.github.com/repos/tensorflow/tensorflow/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/labels{/name}", "releases_url": "https://api.github.com/repos/tensorflow/tensorflow/releases{/id}", "deployments_url": "https://api.github.com/repos/tensorflow/tensorflow/deployments", "created_at": "2015-11-07T01:19:20Z", "updated_at": "2018-11-24T21:14:19Z", "pushed_at": "2018-11-24T18:40:19Z", "git_url": "git://github.com/tensorflow/tensorflow.git", "ssh_url": "git@github.com:tensorflow/tensorflow.git", "clone_url": "https://github.com/tensorflow/tensorflow.git", "svn_url": "https://github.com/tensorflow/tensorflow", "homepage": "https://tensorflow.org", "size": 284546, "stargazers_count": 115176, "watchers_count": 115176, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "forks_count": 69947, "mirror_url": null, "archived": false, "open_issues_count": 1759, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "forks": 69947, "open_issues": 1759, "watchers": 115176, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21042"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21042"}, "issue": {"href": "https://api.github.com/repos/tensorflow/tensorflow/issues/21042"}, "comments": {"href": "https://api.github.com/repos/tensorflow/tensorflow/issues/21042/comments"}, "review_comments": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21042/comments"}, "review_comment": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21042/commits"}, "statuses": {"href": "https://api.github.com/repos/tensorflow/tensorflow/statuses/a9275cfb62902dfa7ac7bd05bfd43518c6f5d268"}}, "author_association": "NONE", "body_html": "<p>This PR addresses the bug outlined in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"338810311\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/20586\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/20586/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/20586\">#20586</a>. Rather than relying on all systems to define the <code>int64</code> data type in a manner that is consistent with a <code>long long</code>, this PR inspects the properties of the type. For instance, <code>int64</code> is a <code>signed</code>, <code>integral</code> type with a size of <code>8 bytes</code>.</p>\n<p>This is important as not all systems define the basic integral data types in the same way, but they are all defined to meet the same intrinsic properties. On the test system, <code>int64_t</code> is not equivalent to a <code>long long</code> (which is how the <code>int64</code> type is defined in <code>tensorflow/core/platform/default/integral_types.h</code>). However, both <code>long long</code> and <code>int64_t</code> meet the same intrinsic properties on the test system. The following code and output shows this inconsistency, where <code>int64_t != long long</code> from the perspective of gcc (Ubuntu 7.3.0-21ubuntu1~16.04) 7.3.0.</p>\n<pre><code>#include &lt;cstdint&gt;\n#include &lt;iostream&gt;\n\nint main(void) {\n    std::cout &lt;&lt; \"int64_t...............: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(int64_t).name() &lt;&lt; \") \" &lt;&lt; sizeof(int64_t) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"long..................: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(long).name() &lt;&lt; \") \" &lt;&lt; sizeof(long) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"long int..............: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(long int).name() &lt;&lt; \") \" &lt;&lt; sizeof(long int) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"long long int.........: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(long long int).name() &lt;&lt; \") \" &lt;&lt; sizeof(long long int) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"long long.............: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(long long).name() &lt;&lt; \") \" &lt;&lt; sizeof(long long) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"uint64_t..............: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(uint64_t).name() &lt;&lt; \") \" &lt;&lt; sizeof(int64_t) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"unsigned long.........: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(unsigned long).name() &lt;&lt; \") \" &lt;&lt; sizeof(unsigned long) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"unsigned long int.....: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(unsigned long int).name() &lt;&lt; \") \" &lt;&lt; sizeof(unsigned long int) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"unsigned long long int: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(unsigned long long int).name() &lt;&lt; \") \" &lt;&lt; sizeof(unsigned long long int) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"unsigned long long....: \"\n              &lt;&lt; \"(\" &lt;&lt; typeid(unsigned long long).name() &lt;&lt; \") \" &lt;&lt; sizeof(unsigned long long) &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"long long == int64_t? \" &lt;&lt; (std::is_same&lt;long long, int64_t&gt;::value ? \"yes\" : \"no\") &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"(sizeof(long long) == 8) &amp;&amp; std::is_signed&lt;long long&gt;::value? \"\n              &lt;&lt; ((sizeof(long long) == 8) &amp;&amp; std::is_signed&lt;long long&gt;::value ? \"yes\" : \"no\") &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"(sizeof(int64_t) == 8) &amp;&amp; std::is_signed&lt;int64_t&gt;::value? \"\n              &lt;&lt; ((sizeof(int64_t) == 8) &amp;&amp; std::is_signed&lt;int64_t&gt;::value ? \"yes\" : \"no\") &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"unsigned long long == uint64_t? \"\n              &lt;&lt; (std::is_same&lt;unsigned long long, uint64_t&gt;::value ? \"yes\" : \"no\") &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"(sizeof(unsigned long long) == 8) &amp;&amp; !std::is_signed&lt;unsigned long long&gt;::value? \"\n              &lt;&lt; ((sizeof(unsigned long long) == 8) &amp;&amp; !std::is_signed&lt;unsigned long long&gt;::value ? \"yes\" : \"no\")\n              &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"(sizeof(uint64_t) == 8) &amp;&amp; !std::is_signed&lt;uint64_t&gt;::value? \"\n              &lt;&lt; ((sizeof(uint64_t) == 8) &amp;&amp; !std::is_signed&lt;uint64_t&gt;::value ? \"yes\" : \"no\") &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<pre><code>int64_t...............: (l) 8\nlong..................: (l) 8\nlong int..............: (l) 8\nlong long int.........: (x) 8\nlong long.............: (x) 8\nuint64_t..............: (m) 8\nunsigned long.........: (m) 8\nunsigned long int.....: (m) 8\nunsigned long long int: (y) 8\nunsigned long long....: (y) 8\nlong long == int64_t? no\n(sizeof(long long) == 8) &amp;&amp; std::is_signed&lt;long long&gt;::value? yes\n(sizeof(int64_t) == 8) &amp;&amp; std::is_signed&lt;int64_t&gt;::value? yes\nunsigned long long == uint64_t? no\n(sizeof(unsigned long long) == 8) &amp;&amp; !std::is_signed&lt;unsigned long long&gt;::value? yes\n(sizeof(uint64_t) == 8) &amp;&amp; !std::is_signed&lt;uint64_t&gt;::value? yes\n</code></pre>\n<p>Note: <code>int64</code> is only used as an example here, this bug applies to other types as well, which this PR addresses.</p>", "body_text": "This PR addresses the bug outlined in #20586. Rather than relying on all systems to define the int64 data type in a manner that is consistent with a long long, this PR inspects the properties of the type. For instance, int64 is a signed, integral type with a size of 8 bytes.\nThis is important as not all systems define the basic integral data types in the same way, but they are all defined to meet the same intrinsic properties. On the test system, int64_t is not equivalent to a long long (which is how the int64 type is defined in tensorflow/core/platform/default/integral_types.h). However, both long long and int64_t meet the same intrinsic properties on the test system. The following code and output shows this inconsistency, where int64_t != long long from the perspective of gcc (Ubuntu 7.3.0-21ubuntu1~16.04) 7.3.0.\n#include <cstdint>\n#include <iostream>\n\nint main(void) {\n    std::cout << \"int64_t...............: \"\n              << \"(\" << typeid(int64_t).name() << \") \" << sizeof(int64_t) << std::endl;\n    std::cout << \"long..................: \"\n              << \"(\" << typeid(long).name() << \") \" << sizeof(long) << std::endl;\n    std::cout << \"long int..............: \"\n              << \"(\" << typeid(long int).name() << \") \" << sizeof(long int) << std::endl;\n    std::cout << \"long long int.........: \"\n              << \"(\" << typeid(long long int).name() << \") \" << sizeof(long long int) << std::endl;\n    std::cout << \"long long.............: \"\n              << \"(\" << typeid(long long).name() << \") \" << sizeof(long long) << std::endl;\n    std::cout << \"uint64_t..............: \"\n              << \"(\" << typeid(uint64_t).name() << \") \" << sizeof(int64_t) << std::endl;\n    std::cout << \"unsigned long.........: \"\n              << \"(\" << typeid(unsigned long).name() << \") \" << sizeof(unsigned long) << std::endl;\n    std::cout << \"unsigned long int.....: \"\n              << \"(\" << typeid(unsigned long int).name() << \") \" << sizeof(unsigned long int) << std::endl;\n    std::cout << \"unsigned long long int: \"\n              << \"(\" << typeid(unsigned long long int).name() << \") \" << sizeof(unsigned long long int) << std::endl;\n    std::cout << \"unsigned long long....: \"\n              << \"(\" << typeid(unsigned long long).name() << \") \" << sizeof(unsigned long long) << std::endl;\n    std::cout << \"long long == int64_t? \" << (std::is_same<long long, int64_t>::value ? \"yes\" : \"no\") << std::endl;\n    std::cout << \"(sizeof(long long) == 8) && std::is_signed<long long>::value? \"\n              << ((sizeof(long long) == 8) && std::is_signed<long long>::value ? \"yes\" : \"no\") << std::endl;\n    std::cout << \"(sizeof(int64_t) == 8) && std::is_signed<int64_t>::value? \"\n              << ((sizeof(int64_t) == 8) && std::is_signed<int64_t>::value ? \"yes\" : \"no\") << std::endl;\n    std::cout << \"unsigned long long == uint64_t? \"\n              << (std::is_same<unsigned long long, uint64_t>::value ? \"yes\" : \"no\") << std::endl;\n    std::cout << \"(sizeof(unsigned long long) == 8) && !std::is_signed<unsigned long long>::value? \"\n              << ((sizeof(unsigned long long) == 8) && !std::is_signed<unsigned long long>::value ? \"yes\" : \"no\")\n              << std::endl;\n    std::cout << \"(sizeof(uint64_t) == 8) && !std::is_signed<uint64_t>::value? \"\n              << ((sizeof(uint64_t) == 8) && !std::is_signed<uint64_t>::value ? \"yes\" : \"no\") << std::endl;\n    return 0;\n}\n\nint64_t...............: (l) 8\nlong..................: (l) 8\nlong int..............: (l) 8\nlong long int.........: (x) 8\nlong long.............: (x) 8\nuint64_t..............: (m) 8\nunsigned long.........: (m) 8\nunsigned long int.....: (m) 8\nunsigned long long int: (y) 8\nunsigned long long....: (y) 8\nlong long == int64_t? no\n(sizeof(long long) == 8) && std::is_signed<long long>::value? yes\n(sizeof(int64_t) == 8) && std::is_signed<int64_t>::value? yes\nunsigned long long == uint64_t? no\n(sizeof(unsigned long long) == 8) && !std::is_signed<unsigned long long>::value? yes\n(sizeof(uint64_t) == 8) && !std::is_signed<uint64_t>::value? yes\n\nNote: int64 is only used as an example here, this bug applies to other types as well, which this PR addresses.", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 6, "review_comments": 0, "maintainer_can_modify": false, "commits": 1, "additions": 379, "deletions": 50, "changed_files": 1}