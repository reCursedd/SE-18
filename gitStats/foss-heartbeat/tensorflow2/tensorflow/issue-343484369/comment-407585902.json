{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/407585902", "html_url": "https://github.com/tensorflow/tensorflow/pull/21042#issuecomment-407585902", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21042", "id": 407585902, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU4NTkwMg==", "user": {"login": "Bidski", "id": 2320984, "node_id": "MDQ6VXNlcjIzMjA5ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2320984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bidski", "html_url": "https://github.com/Bidski", "followers_url": "https://api.github.com/users/Bidski/followers", "following_url": "https://api.github.com/users/Bidski/following{/other_user}", "gists_url": "https://api.github.com/users/Bidski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bidski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bidski/subscriptions", "organizations_url": "https://api.github.com/users/Bidski/orgs", "repos_url": "https://api.github.com/users/Bidski/repos", "events_url": "https://api.github.com/users/Bidski/events{/privacy}", "received_events_url": "https://api.github.com/users/Bidski/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T23:37:57Z", "updated_at": "2018-07-24T23:37:57Z", "author_association": "NONE", "body_html": "<p>Using <code>tensorflow::int64</code> and friends only works when everyone knows that they are supposed to use them (which is either not documented or is poorly documented). As soon as people stop using them (or dont use them) problems will arise and confusion will ensue, especially for people who are writing custom ops. This is shown by this exact situation,  <code>tensorflow::int64 != std::int64_t</code>.</p>\n<p>Further to this, <code>long long</code> (which <code>tensorflow::int64</code> is defined as) is not guaranteed to be 64 bits, it is guaranteed to be \"at least\" 64 bits. It would be more precise to use the definitions in <code>cstdint</code>. However, even in this case it would still be prudent to use this more precise way of matching types to enum values to ensure that further confusion of this sort wont happen again.</p>", "body_text": "Using tensorflow::int64 and friends only works when everyone knows that they are supposed to use them (which is either not documented or is poorly documented). As soon as people stop using them (or dont use them) problems will arise and confusion will ensue, especially for people who are writing custom ops. This is shown by this exact situation,  tensorflow::int64 != std::int64_t.\nFurther to this, long long (which tensorflow::int64 is defined as) is not guaranteed to be 64 bits, it is guaranteed to be \"at least\" 64 bits. It would be more precise to use the definitions in cstdint. However, even in this case it would still be prudent to use this more precise way of matching types to enum values to ensure that further confusion of this sort wont happen again.", "body": "Using `tensorflow::int64` and friends only works when everyone knows that they are supposed to use them (which is either not documented or is poorly documented). As soon as people stop using them (or dont use them) problems will arise and confusion will ensue, especially for people who are writing custom ops. This is shown by this exact situation,  `tensorflow::int64 != std::int64_t`.\r\n\r\nFurther to this, `long long` (which `tensorflow::int64` is defined as) is not guaranteed to be 64 bits, it is guaranteed to be \"at least\" 64 bits. It would be more precise to use the definitions in `cstdint`. However, even in this case it would still be prudent to use this more precise way of matching types to enum values to ensure that further confusion of this sort wont happen again."}