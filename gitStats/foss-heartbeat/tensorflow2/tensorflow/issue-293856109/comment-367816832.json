{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/367816832", "html_url": "https://github.com/tensorflow/tensorflow/issues/16692#issuecomment-367816832", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16692", "id": 367816832, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzgxNjgzMg==", "user": {"login": "nataliaponomareva", "id": 4313109, "node_id": "MDQ6VXNlcjQzMTMxMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4313109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nataliaponomareva", "html_url": "https://github.com/nataliaponomareva", "followers_url": "https://api.github.com/users/nataliaponomareva/followers", "following_url": "https://api.github.com/users/nataliaponomareva/following{/other_user}", "gists_url": "https://api.github.com/users/nataliaponomareva/gists{/gist_id}", "starred_url": "https://api.github.com/users/nataliaponomareva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nataliaponomareva/subscriptions", "organizations_url": "https://api.github.com/users/nataliaponomareva/orgs", "repos_url": "https://api.github.com/users/nataliaponomareva/repos", "events_url": "https://api.github.com/users/nataliaponomareva/events{/privacy}", "received_events_url": "https://api.github.com/users/nataliaponomareva/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-22T20:47:45Z", "updated_at": "2018-02-22T20:49:21Z", "author_association": "NONE", "body_html": "<p>It is actually the features that are of wrong shape. You can wrap the pandas input fn inside of a custom input fn and get the features expanded. Like this</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">train_rf</span>():\n  input_dimension <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\n  batch_size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> I am creating dummy data just to test, remove it.</span>\n  x1 <span class=\"pl-k\">=</span> np.array([<span class=\"pl-c1\">1</span>., <span class=\"pl-c1\">2</span>., <span class=\"pl-c1\">3</span>., <span class=\"pl-c1\">4</span>.], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\n  x2 <span class=\"pl-k\">=</span> np.array([<span class=\"pl-c1\">4</span>., <span class=\"pl-c1\">8</span>., <span class=\"pl-c1\">3</span>., <span class=\"pl-c1\">4</span>.], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\n  target <span class=\"pl-k\">=</span> np.array([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.int32)\n  X <span class=\"pl-k\">=</span> pd.DataFrame({<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x1<span class=\"pl-pds\">'</span></span>: x1, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>x2<span class=\"pl-pds\">'</span></span>:x2})\n  Y <span class=\"pl-k\">=</span> pd.Series(target)\n  \n  params <span class=\"pl-k\">=</span> tensor_forest.ForestHParams(\n      <span class=\"pl-v\">num_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>,\n      <span class=\"pl-v\">num_features</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>,\n      <span class=\"pl-v\">num_trees</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)\n\n  est <span class=\"pl-k\">=</span> random_forest.TensorForestEstimator(params)\n\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> The wrapper.  </span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">new_input_fn</span>(<span class=\"pl-smi\">X</span>, <span class=\"pl-smi\">Y</span>, <span class=\"pl-smi\">batch_size</span>, <span class=\"pl-smi\">num_epochs</span>, <span class=\"pl-smi\">shuffle</span>):\n    \n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">internal_input_fn</span>():\n      features, labels <span class=\"pl-k\">=</span>  tf.estimator.inputs.pandas_input_fn(\n         X,\n         <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>Y,\n         <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span>batch_size,\n         <span class=\"pl-v\">num_epochs</span><span class=\"pl-k\">=</span>num_epochs,\n         <span class=\"pl-v\">shuffle</span><span class=\"pl-k\">=</span>shuffle,\n      <span class=\"pl-v\">target_column</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>y<span class=\"pl-pds\">'</span></span>)()\n      \n      <span class=\"pl-k\">for</span> name <span class=\"pl-k\">in</span> features:\n        tensor <span class=\"pl-k\">=</span> features[name]\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Expand dims of features</span>\n        tensor <span class=\"pl-k\">=</span> tf.expand_dims(tensor, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n        features[name] <span class=\"pl-k\">=</span>tensor\n      \n      <span class=\"pl-k\">return</span> features, labels\n  \n    <span class=\"pl-k\">return</span> internal_input_fn\n  \n  new_input_fn <span class=\"pl-k\">=</span> new_input_fn(X,Y, batch_size, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">True</span>)\n\n  est.fit(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>new_input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)\n\ntrain_rf()</pre></div>", "body_text": "It is actually the features that are of wrong shape. You can wrap the pandas input fn inside of a custom input fn and get the features expanded. Like this\ndef train_rf():\n  input_dimension = 1\n  batch_size = 10\n  # I am creating dummy data just to test, remove it.\n  x1 = np.array([1., 2., 3., 4.], dtype=np.float32)\n  x2 = np.array([4., 8., 3., 4.], dtype=np.float32)\n  target = np.array([1, 0, 1, 0], dtype=np.int32)\n  X = pd.DataFrame({'x1': x1, 'x2':x2})\n  Y = pd.Series(target)\n  \n  params = tensor_forest.ForestHParams(\n      num_classes=2,\n      num_features=2,\n      num_trees=10)\n\n  est = random_forest.TensorForestEstimator(params)\n\n  # The wrapper.  \n  def new_input_fn(X, Y, batch_size, num_epochs, shuffle):\n    \n    def internal_input_fn():\n      features, labels =  tf.estimator.inputs.pandas_input_fn(\n         X,\n         y=Y,\n         batch_size=batch_size,\n         num_epochs=num_epochs,\n         shuffle=shuffle,\n      target_column='y')()\n      \n      for name in features:\n        tensor = features[name]\n        # Expand dims of features\n        tensor = tf.expand_dims(tensor, axis=1)\n        features[name] =tensor\n      \n      return features, labels\n  \n    return internal_input_fn\n  \n  new_input_fn = new_input_fn(X,Y, batch_size, 10, True)\n\n  est.fit(input_fn=new_input_fn, steps=1000)\n\ntrain_rf()", "body": "It is actually the features that are of wrong shape. You can wrap the pandas input fn inside of a custom input fn and get the features expanded. Like this\r\n```python\r\ndef train_rf():\r\n  input_dimension = 1\r\n  batch_size = 10\r\n  # I am creating dummy data just to test, remove it.\r\n  x1 = np.array([1., 2., 3., 4.], dtype=np.float32)\r\n  x2 = np.array([4., 8., 3., 4.], dtype=np.float32)\r\n  target = np.array([1, 0, 1, 0], dtype=np.int32)\r\n  X = pd.DataFrame({'x1': x1, 'x2':x2})\r\n  Y = pd.Series(target)\r\n  \r\n  params = tensor_forest.ForestHParams(\r\n      num_classes=2,\r\n      num_features=2,\r\n      num_trees=10)\r\n\r\n  est = random_forest.TensorForestEstimator(params)\r\n\r\n  # The wrapper.  \r\n  def new_input_fn(X, Y, batch_size, num_epochs, shuffle):\r\n    \r\n    def internal_input_fn():\r\n      features, labels =  tf.estimator.inputs.pandas_input_fn(\r\n         X,\r\n         y=Y,\r\n         batch_size=batch_size,\r\n         num_epochs=num_epochs,\r\n         shuffle=shuffle,\r\n      target_column='y')()\r\n      \r\n      for name in features:\r\n        tensor = features[name]\r\n        # Expand dims of features\r\n        tensor = tf.expand_dims(tensor, axis=1)\r\n        features[name] =tensor\r\n      \r\n      return features, labels\r\n  \r\n    return internal_input_fn\r\n  \r\n  new_input_fn = new_input_fn(X,Y, batch_size, 10, True)\r\n\r\n  est.fit(input_fn=new_input_fn, steps=1000)\r\n\r\ntrain_rf()"}