{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/382824109", "html_url": "https://github.com/tensorflow/tensorflow/pull/17607#issuecomment-382824109", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17607", "id": 382824109, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjgyNDEwOQ==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-19T17:50:41Z", "updated_at": "2018-04-19T17:54:33Z", "author_association": "MEMBER", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>. For comparison of <code>Dimension</code>s, I could see the <code>None</code> case still hold:</p>\n<pre><code>    # Works before and after the PR:\n    dim = tensor_shape.Dimension(None)\n\n    self.assertIs(None, dim == dim)\n    self.assertIs(None, dim == tensor_shape.Dimension(None))\n    self.assertIs(None, tensor_shape.Dimension(None) == tensor_shape.Dimension(None))\n\n    self.assertIs(None, dim == tensor_shape.as_dimension(dim))\n    self.assertIs(None, dim == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n    self.assertIs(None, tensor_shape.Dimension(None) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n\n    self.assertIs(None, dim == tensor_shape.as_dimension(dim))\n    self.assertIs(None, dim == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n    self.assertIs(None, tensor_shape.Dimension(None) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n\n    self.assertIs(None, tensor_shape.as_dimension(dim) == tensor_shape.as_dimension(dim))\n    self.assertIs(None, tensor_shape.as_dimension(dim) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n    self.assertIs(None, tensor_shape.as_dimension(tensor_shape.Dimension(None)) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n</code></pre>\n<p>But for comparison with <code>TensorShape</code>s, because the comparison is either compare against <code>None</code>, or a list of <code>Dimension</code>s (<code>[dims..]</code>), the comparison of <code>__eq__</code> will not return <code>None</code> (only <code>True</code> or <code>False</code>):<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/004194ff4c7ee089312fced794fa870ce352f0df/tensorflow/python/framework/tensor_shape.py#L917-L923\">tensorflow/tensorflow/python/framework/tensor_shape.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 917 to 923\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/004194ff4c7ee089312fced794fa870ce352f0df\">004194f</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L917\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"917\"></td>\n          <td id=\"LC917\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__eq__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">other</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L918\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"918\"></td>\n          <td id=\"LC918\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Returns True if `self` is equivalent to `other`.<span class=\"pl-pds\">\"\"\"</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L919\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"919\"></td>\n          <td id=\"LC919\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">try</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L920\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"920\"></td>\n          <td id=\"LC920\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     other <span class=\"pl-k\">=</span> as_shape(other) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L921\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"921\"></td>\n          <td id=\"LC921\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">except</span> <span class=\"pl-c1\">TypeError</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L922\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"922\"></td>\n          <td id=\"LC922\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> <span class=\"pl-c1\">NotImplemented</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L923\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"923\"></td>\n          <td id=\"LC923\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._dims <span class=\"pl-k\">==</span> other.dims </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>I tested with the following cases and they fail both before and after this PR:</p>\n<pre><code>    # Fail before and after the PR\n    dim = tensor_shape.Dimension(None)\n\n    v1 = tensor_shape.TensorShape([None])\n    v2 = tensor_shape.TensorShape([None])\n    self.assertIs(None, v1 == v2)\n\n    v3 = tensor_shape.TensorShape([dim])\n    v4 = tensor_shape.TensorShape([tensor_shape.Dimension(None)])\n    self.assertIs(None, v3 == v4)\n\n    v5 = tensor_shape.TensorShape([dim])\n    v6 = tensor_shape.TensorShape([dim])\n    self.assertIs(None, v5 == v6)\n</code></pre>\n<p>Should the <code>__eq__</code> of <code>TensorShape</code> be changed to reflect the described tri-valued?</p>", "body_text": "Thanks @mrry. For comparison of Dimensions, I could see the None case still hold:\n    # Works before and after the PR:\n    dim = tensor_shape.Dimension(None)\n\n    self.assertIs(None, dim == dim)\n    self.assertIs(None, dim == tensor_shape.Dimension(None))\n    self.assertIs(None, tensor_shape.Dimension(None) == tensor_shape.Dimension(None))\n\n    self.assertIs(None, dim == tensor_shape.as_dimension(dim))\n    self.assertIs(None, dim == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n    self.assertIs(None, tensor_shape.Dimension(None) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n\n    self.assertIs(None, dim == tensor_shape.as_dimension(dim))\n    self.assertIs(None, dim == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n    self.assertIs(None, tensor_shape.Dimension(None) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n\n    self.assertIs(None, tensor_shape.as_dimension(dim) == tensor_shape.as_dimension(dim))\n    self.assertIs(None, tensor_shape.as_dimension(dim) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n    self.assertIs(None, tensor_shape.as_dimension(tensor_shape.Dimension(None)) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\n\nBut for comparison with TensorShapes, because the comparison is either compare against None, or a list of Dimensions ([dims..]), the comparison of __eq__ will not return None (only True or False):\n\n  \n    \n      tensorflow/tensorflow/python/framework/tensor_shape.py\n    \n    \n        Lines 917 to 923\n      in\n      004194f\n    \n    \n    \n    \n\n        \n          \n           def __eq__(self, other): \n        \n\n        \n          \n             \"\"\"Returns True if `self` is equivalent to `other`.\"\"\" \n        \n\n        \n          \n             try: \n        \n\n        \n          \n               other = as_shape(other) \n        \n\n        \n          \n             except TypeError: \n        \n\n        \n          \n               return NotImplemented \n        \n\n        \n          \n             return self._dims == other.dims \n        \n    \n  \n\n\nI tested with the following cases and they fail both before and after this PR:\n    # Fail before and after the PR\n    dim = tensor_shape.Dimension(None)\n\n    v1 = tensor_shape.TensorShape([None])\n    v2 = tensor_shape.TensorShape([None])\n    self.assertIs(None, v1 == v2)\n\n    v3 = tensor_shape.TensorShape([dim])\n    v4 = tensor_shape.TensorShape([tensor_shape.Dimension(None)])\n    self.assertIs(None, v3 == v4)\n\n    v5 = tensor_shape.TensorShape([dim])\n    v6 = tensor_shape.TensorShape([dim])\n    self.assertIs(None, v5 == v6)\n\nShould the __eq__ of TensorShape be changed to reflect the described tri-valued?", "body": "Thanks @mrry. For comparison of `Dimension`s, I could see the `None` case still hold:\r\n```\r\n    # Works before and after the PR:\r\n    dim = tensor_shape.Dimension(None)\r\n\r\n    self.assertIs(None, dim == dim)\r\n    self.assertIs(None, dim == tensor_shape.Dimension(None))\r\n    self.assertIs(None, tensor_shape.Dimension(None) == tensor_shape.Dimension(None))\r\n\r\n    self.assertIs(None, dim == tensor_shape.as_dimension(dim))\r\n    self.assertIs(None, dim == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\r\n    self.assertIs(None, tensor_shape.Dimension(None) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\r\n\r\n    self.assertIs(None, dim == tensor_shape.as_dimension(dim))\r\n    self.assertIs(None, dim == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\r\n    self.assertIs(None, tensor_shape.Dimension(None) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\r\n\r\n    self.assertIs(None, tensor_shape.as_dimension(dim) == tensor_shape.as_dimension(dim))\r\n    self.assertIs(None, tensor_shape.as_dimension(dim) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\r\n    self.assertIs(None, tensor_shape.as_dimension(tensor_shape.Dimension(None)) == tensor_shape.as_dimension(tensor_shape.Dimension(None)))\r\n```\r\n\r\nBut for comparison with `TensorShape`s, because the comparison is either compare against `None`, or a list of `Dimension`s (`[dims..]`), the comparison of `__eq__` will not return `None` (only `True` or `False`):\r\nhttps://github.com/tensorflow/tensorflow/blob/004194ff4c7ee089312fced794fa870ce352f0df/tensorflow/python/framework/tensor_shape.py#L917-L923\r\n\r\nI tested with the following cases and they fail both before and after this PR:\r\n```\r\n    # Fail before and after the PR\r\n    dim = tensor_shape.Dimension(None)\r\n\r\n    v1 = tensor_shape.TensorShape([None])\r\n    v2 = tensor_shape.TensorShape([None])\r\n    self.assertIs(None, v1 == v2)\r\n\r\n    v3 = tensor_shape.TensorShape([dim])\r\n    v4 = tensor_shape.TensorShape([tensor_shape.Dimension(None)])\r\n    self.assertIs(None, v3 == v4)\r\n\r\n    v5 = tensor_shape.TensorShape([dim])\r\n    v6 = tensor_shape.TensorShape([dim])\r\n    self.assertIs(None, v5 == v6)\r\n```\r\n\r\nShould the `__eq__` of `TensorShape` be changed to reflect the described tri-valued?"}