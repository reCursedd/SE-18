{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/381260075", "html_url": "https://github.com/tensorflow/tensorflow/issues/18397#issuecomment-381260075", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18397", "id": 381260075, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTI2MDA3NQ==", "user": {"login": "sabi0", "id": 11509875, "node_id": "MDQ6VXNlcjExNTA5ODc1", "avatar_url": "https://avatars3.githubusercontent.com/u/11509875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sabi0", "html_url": "https://github.com/sabi0", "followers_url": "https://api.github.com/users/sabi0/followers", "following_url": "https://api.github.com/users/sabi0/following{/other_user}", "gists_url": "https://api.github.com/users/sabi0/gists{/gist_id}", "starred_url": "https://api.github.com/users/sabi0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sabi0/subscriptions", "organizations_url": "https://api.github.com/users/sabi0/orgs", "repos_url": "https://api.github.com/users/sabi0/repos", "events_url": "https://api.github.com/users/sabi0/events{/privacy}", "received_events_url": "https://api.github.com/users/sabi0/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-13T21:03:54Z", "updated_at": "2018-04-13T21:03:54Z", "author_association": "NONE", "body_html": "<p>It's not about <code>System.loadLibrary()</code> but about the way files are handled in Windows.<br>\nOn Linux (and I suppose Mac) opened files can be deleted (<code>unlink()</code>-ed). On Windows - not.<br>\nAnd when JVM processes <code>deleteOnExit</code>s DLLs are still loaded into JVM address space, i.e. the files are still open.<br>\nThere is a hacky way of using a dedicated separate class loader for loading DLLs. And then calling <code>System.gc()</code> after null-ing the class loader reference. It helps ... sometimes.</p>\n<p>I included a version of the Tensorflow into the directory name in the sample code above. Do you think it won't be enough?<br>\nAlso each user should have his own folder to avoid access rights conflicts. Hence the <code>System.getProperty(\"user.name\").hashCode()</code> part. Hash code is used to avoid problems in case user name contains national symbols or spaces.</p>", "body_text": "It's not about System.loadLibrary() but about the way files are handled in Windows.\nOn Linux (and I suppose Mac) opened files can be deleted (unlink()-ed). On Windows - not.\nAnd when JVM processes deleteOnExits DLLs are still loaded into JVM address space, i.e. the files are still open.\nThere is a hacky way of using a dedicated separate class loader for loading DLLs. And then calling System.gc() after null-ing the class loader reference. It helps ... sometimes.\nI included a version of the Tensorflow into the directory name in the sample code above. Do you think it won't be enough?\nAlso each user should have his own folder to avoid access rights conflicts. Hence the System.getProperty(\"user.name\").hashCode() part. Hash code is used to avoid problems in case user name contains national symbols or spaces.", "body": "It's not about `System.loadLibrary()` but about the way files are handled in Windows.\r\nOn Linux (and I suppose Mac) opened files can be deleted (`unlink()`-ed). On Windows - not.\r\nAnd when JVM processes `deleteOnExit`s DLLs are still loaded into JVM address space, i.e. the files are still open.\r\nThere is a hacky way of using a dedicated separate class loader for loading DLLs. And then calling `System.gc()` after null-ing the class loader reference. It helps ... sometimes.\r\n\r\nI included a version of the Tensorflow into the directory name in the sample code above. Do you think it won't be enough?\r\nAlso each user should have his own folder to avoid access rights conflicts. Hence the `System.getProperty(\"user.name\").hashCode()` part. Hash code is used to avoid problems in case user name contains national symbols or spaces."}