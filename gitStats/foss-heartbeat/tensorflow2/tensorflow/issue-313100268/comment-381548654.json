{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/381548654", "html_url": "https://github.com/tensorflow/tensorflow/issues/18397#issuecomment-381548654", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18397", "id": 381548654, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTU0ODY1NA==", "user": {"login": "sabi0", "id": 11509875, "node_id": "MDQ6VXNlcjExNTA5ODc1", "avatar_url": "https://avatars3.githubusercontent.com/u/11509875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sabi0", "html_url": "https://github.com/sabi0", "followers_url": "https://api.github.com/users/sabi0/followers", "following_url": "https://api.github.com/users/sabi0/following{/other_user}", "gists_url": "https://api.github.com/users/sabi0/gists{/gist_id}", "starred_url": "https://api.github.com/users/sabi0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sabi0/subscriptions", "organizations_url": "https://api.github.com/users/sabi0/orgs", "repos_url": "https://api.github.com/users/sabi0/repos", "events_url": "https://api.github.com/users/sabi0/events{/privacy}", "received_events_url": "https://api.github.com/users/sabi0/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-16T10:07:27Z", "updated_at": "2018-04-16T10:07:27Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3328023\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/saudet\">@saudet</a> Thanks. I will have a look at JavaCPP.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> It is possible to use fully random name for DLL (i.e. not bother with content checksum) as long as the folder name is predictable. Here is how it could work:<br>\nFolder name could be like this:</p>\n<pre><code>File dir = new File(tmp, \"tensorflow-\" + System.getProperty(\"user.name\").hashCode());\n</code></pre>\n<p>Extracted file names could be fully random, e.g. <code>tf_jni-2387168.dll</code>. But when such file is extracted another \"marker\" file is created - <code>tf_jni-2387168.dll.lock</code>.<br>\nThe latter one is immediately registered with <code>deleteOnExit()</code>. JVM will not have problems deleting it on any platform.</p>\n<p>And then upon start the application scans the user folder and deletes any files that don't have matching <code>.lock</code> files. And then proceeds to extract the resources (under random names).<br>\nThis might still left some files in Temp on Windows (when user stops using TF). But would help to avoid copies of resources piling up.</p>", "body_text": "@saudet Thanks. I will have a look at JavaCPP.\n@asimshankar It is possible to use fully random name for DLL (i.e. not bother with content checksum) as long as the folder name is predictable. Here is how it could work:\nFolder name could be like this:\nFile dir = new File(tmp, \"tensorflow-\" + System.getProperty(\"user.name\").hashCode());\n\nExtracted file names could be fully random, e.g. tf_jni-2387168.dll. But when such file is extracted another \"marker\" file is created - tf_jni-2387168.dll.lock.\nThe latter one is immediately registered with deleteOnExit(). JVM will not have problems deleting it on any platform.\nAnd then upon start the application scans the user folder and deletes any files that don't have matching .lock files. And then proceeds to extract the resources (under random names).\nThis might still left some files in Temp on Windows (when user stops using TF). But would help to avoid copies of resources piling up.", "body": "@saudet Thanks. I will have a look at JavaCPP.\r\n\r\n@asimshankar It is possible to use fully random name for DLL (i.e. not bother with content checksum) as long as the folder name is predictable. Here is how it could work:\r\nFolder name could be like this:\r\n```\r\nFile dir = new File(tmp, \"tensorflow-\" + System.getProperty(\"user.name\").hashCode());\r\n```\r\nExtracted file names could be fully random, e.g. `tf_jni-2387168.dll`. But when such file is extracted another \"marker\" file is created - `tf_jni-2387168.dll.lock`.\r\nThe latter one is immediately registered with `deleteOnExit()`. JVM will not have problems deleting it on any platform.\r\n\r\nAnd then upon start the application scans the user folder and deletes any files that don't have matching `.lock` files. And then proceeds to extract the resources (under random names).\r\nThis might still left some files in Temp on Windows (when user stops using TF). But would help to avoid copies of resources piling up."}