{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/301864036", "html_url": "https://github.com/tensorflow/tensorflow/issues/9931#issuecomment-301864036", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9931", "id": 301864036, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTg2NDAzNg==", "user": {"login": "galeone", "id": 8427788, "node_id": "MDQ6VXNlcjg0Mjc3ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8427788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/galeone", "html_url": "https://github.com/galeone", "followers_url": "https://api.github.com/users/galeone/followers", "following_url": "https://api.github.com/users/galeone/following{/other_user}", "gists_url": "https://api.github.com/users/galeone/gists{/gist_id}", "starred_url": "https://api.github.com/users/galeone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/galeone/subscriptions", "organizations_url": "https://api.github.com/users/galeone/orgs", "repos_url": "https://api.github.com/users/galeone/repos", "events_url": "https://api.github.com/users/galeone/events{/privacy}", "received_events_url": "https://api.github.com/users/galeone/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-16T17:59:55Z", "updated_at": "2017-05-16T17:59:55Z", "author_association": "NONE", "body_html": "<p>Thank you for the suggestion on how to properly check for errors!<br>\nIs somewhere documented the <code>Scope</code> follows the builder pattern? I guess it would be nice to put this in <code>Scope</code>'s go-doc.</p>\n<p>About the point 3: what is the problem? Why it segfaults? That op has a kernel registered to handle both types or the fix is to register the missing type?</p>", "body_text": "Thank you for the suggestion on how to properly check for errors!\nIs somewhere documented the Scope follows the builder pattern? I guess it would be nice to put this in Scope's go-doc.\nAbout the point 3: what is the problem? Why it segfaults? That op has a kernel registered to handle both types or the fix is to register the missing type?", "body": "Thank you for the suggestion on how to properly check for errors!\r\nIs somewhere documented the `Scope` follows the builder pattern? I guess it would be nice to put this in `Scope`'s go-doc.\r\n\r\nAbout the point 3: what is the problem? Why it segfaults? That op has a kernel registered to handle both types or the fix is to register the missing type?"}