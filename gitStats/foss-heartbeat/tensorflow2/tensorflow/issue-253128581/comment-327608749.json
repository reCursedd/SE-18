{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327608749", "html_url": "https://github.com/tensorflow/tensorflow/pull/12622#issuecomment-327608749", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12622", "id": 327608749, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzYwODc0OQ==", "user": {"login": "ArtsiomCh", "id": 14268320, "node_id": "MDQ6VXNlcjE0MjY4MzIw", "avatar_url": "https://avatars1.githubusercontent.com/u/14268320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArtsiomCh", "html_url": "https://github.com/ArtsiomCh", "followers_url": "https://api.github.com/users/ArtsiomCh/followers", "following_url": "https://api.github.com/users/ArtsiomCh/following{/other_user}", "gists_url": "https://api.github.com/users/ArtsiomCh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArtsiomCh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArtsiomCh/subscriptions", "organizations_url": "https://api.github.com/users/ArtsiomCh/orgs", "repos_url": "https://api.github.com/users/ArtsiomCh/repos", "events_url": "https://api.github.com/users/ArtsiomCh/events{/privacy}", "received_events_url": "https://api.github.com/users/ArtsiomCh/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-06T20:49:42Z", "updated_at": "2017-09-06T20:49:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3376817\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/andrewharp\">@andrewharp</a> Please check the corrected version of ImageUtils.java<br>\nI tried to find a compromise between readability of the code and performance.<br>\nUnfortunately, there is no way to declare an in-line function in java. So using any additional function inside our double nested loops will create the overhead of making a function call.<br>\nAs I mentioned before the original java implementation of <code>convertYUV420ToARGB8888</code> function took 3000 ms on my test device to show a result. After making Method Tracing I've found that majority of the time being spent on calling helping functions: <code>convertByteToInt</code> with <code>Math.min</code> and <code>Math.max</code>. And the actual classification work by TF took just ~500ms.<br>\nMy original \"all-in-one\" implementation decrease the total time between showing result from 3000ms to 1000ms. Even adding YUV2RGB function (for readability and avoiding duplicating the code) already increase the total time from ~1000 ms to ~1100. I think this is acceptable, as it just 10%.<br>\nPlease feel free to ask for any additional correctness.</p>\n<p>PS Looks like GitHub shows a bit mess in <code>Split</code> mode. It replaced <code>convertYUV420ToARGB8888</code> with <code>convertYUV420SPToARGB8888</code> code. And create new <code>convertYUV420ToARGB8888</code> instead of correct existing implementation. Any case resulting code looks clean enough.</p>", "body_text": "@andrewharp Please check the corrected version of ImageUtils.java\nI tried to find a compromise between readability of the code and performance.\nUnfortunately, there is no way to declare an in-line function in java. So using any additional function inside our double nested loops will create the overhead of making a function call.\nAs I mentioned before the original java implementation of convertYUV420ToARGB8888 function took 3000 ms on my test device to show a result. After making Method Tracing I've found that majority of the time being spent on calling helping functions: convertByteToInt with Math.min and Math.max. And the actual classification work by TF took just ~500ms.\nMy original \"all-in-one\" implementation decrease the total time between showing result from 3000ms to 1000ms. Even adding YUV2RGB function (for readability and avoiding duplicating the code) already increase the total time from ~1000 ms to ~1100. I think this is acceptable, as it just 10%.\nPlease feel free to ask for any additional correctness.\nPS Looks like GitHub shows a bit mess in Split mode. It replaced convertYUV420ToARGB8888 with convertYUV420SPToARGB8888 code. And create new convertYUV420ToARGB8888 instead of correct existing implementation. Any case resulting code looks clean enough.", "body": "@andrewharp Please check the corrected version of ImageUtils.java\r\nI tried to find a compromise between readability of the code and performance. \r\nUnfortunately, there is no way to declare an in-line function in java. So using any additional function inside our double nested loops will create the overhead of making a function call. \r\nAs I mentioned before the original java implementation of `convertYUV420ToARGB8888` function took 3000 ms on my test device to show a result. After making Method Tracing I've found that majority of the time being spent on calling helping functions: `convertByteToInt` with `Math.min` and `Math.max`. And the actual classification work by TF took just ~500ms.\r\nMy original \"all-in-one\" implementation decrease the total time between showing result from 3000ms to 1000ms. Even adding YUV2RGB function (for readability and avoiding duplicating the code) already increase the total time from ~1000 ms to ~1100. I think this is acceptable, as it just 10%.\r\nPlease feel free to ask for any additional correctness.\r\n\r\nPS Looks like GitHub shows a bit mess in `Split` mode. It replaced `convertYUV420ToARGB8888` with `convertYUV420SPToARGB8888` code. And create new `convertYUV420ToARGB8888` instead of correct existing implementation. Any case resulting code looks clean enough.\r\n"}