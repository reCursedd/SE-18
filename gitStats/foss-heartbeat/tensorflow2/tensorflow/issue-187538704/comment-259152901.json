{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/259152901", "html_url": "https://github.com/tensorflow/tensorflow/issues/5422#issuecomment-259152901", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5422", "id": 259152901, "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTE1MjkwMQ==", "user": {"login": "QuantumLiu", "id": 21980268, "node_id": "MDQ6VXNlcjIxOTgwMjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/21980268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuantumLiu", "html_url": "https://github.com/QuantumLiu", "followers_url": "https://api.github.com/users/QuantumLiu/followers", "following_url": "https://api.github.com/users/QuantumLiu/following{/other_user}", "gists_url": "https://api.github.com/users/QuantumLiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuantumLiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuantumLiu/subscriptions", "organizations_url": "https://api.github.com/users/QuantumLiu/orgs", "repos_url": "https://api.github.com/users/QuantumLiu/repos", "events_url": "https://api.github.com/users/QuantumLiu/events{/privacy}", "received_events_url": "https://api.github.com/users/QuantumLiu/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-08T14:38:15Z", "updated_at": "2016-11-08T14:38:15Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=326106\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aselle\">@aselle</a>  thank you!<br>\n`from keras.models import Model<br>\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Input, Merge<br>\nfrom keras.layers import Convolution2D, MaxPooling2D,AveragePooling2D<br>\nfrom keras.optimizers import SGD</p>\n<p>input=Input(shape=(1, 50, 125))<br>\nconv1=Convolution2D(32, 5, 5, border_mode='valid')(input)<br>\npool1=MaxPooling2D(pool_size=(2, 2))(conv1)<br>\nrelu1=Activation('relu')(pool1)</p>\n<p>conv2=Convolution2D(32, 5, 5, border_mode='valid')(relu1)<br>\npool2=AveragePooling2D(pool_size=(2, 2))(conv2)<br>\nrelu2=Activation('relu')(pool2)</p>\n<p>conv3=Convolution2D(32, 3, 3, border_mode='valid')(relu2)<br>\npool3=AveragePooling2D(pool_size=(2, 2))(conv3)<br>\nrelu3=Activation('relu')(pool3)</p>\n<p>flatten=Flatten()(relu3)<br>\nfc1=Dense(512)(flatten)</p>\n<p>fc21=Dense(23,activation='softmax')(fc1)<br>\nfc22=Dense(23,activation='softmax')(fc1)<br>\nfc23=Dense(23,activation='softmax')(fc1)<br>\nfc24=Dense(23,activation='softmax')(fc1)<br>\n#fc2=Merge(layers=[fc21,fc22,fc23,fc24],mode='concat')<br>\nfc2=Merge(mode='concat')([fc21,fc22,fc23,fc24])<br>\nOCRnet=Model(input=input,output=fc2)</p>\n<p>sgd = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)<br>\nOCRnet.compile(loss='mean_squared_error',optimizer=sgd)</p>\n<p>import numpy as np<br>\nX_train=np.ones((10000,1,50,125),'float32')</p>\n<p>Y_train=np.ones((10000,92),'float32')</p>\n<p>OCRnet.fit(X_train, Y_train, batch_size=32, nb_epoch=100,validation_split=0.1,verbose=2)<br>\n`</p>", "body_text": "@aselle  thank you!\n`from keras.models import Model\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Input, Merge\nfrom keras.layers import Convolution2D, MaxPooling2D,AveragePooling2D\nfrom keras.optimizers import SGD\ninput=Input(shape=(1, 50, 125))\nconv1=Convolution2D(32, 5, 5, border_mode='valid')(input)\npool1=MaxPooling2D(pool_size=(2, 2))(conv1)\nrelu1=Activation('relu')(pool1)\nconv2=Convolution2D(32, 5, 5, border_mode='valid')(relu1)\npool2=AveragePooling2D(pool_size=(2, 2))(conv2)\nrelu2=Activation('relu')(pool2)\nconv3=Convolution2D(32, 3, 3, border_mode='valid')(relu2)\npool3=AveragePooling2D(pool_size=(2, 2))(conv3)\nrelu3=Activation('relu')(pool3)\nflatten=Flatten()(relu3)\nfc1=Dense(512)(flatten)\nfc21=Dense(23,activation='softmax')(fc1)\nfc22=Dense(23,activation='softmax')(fc1)\nfc23=Dense(23,activation='softmax')(fc1)\nfc24=Dense(23,activation='softmax')(fc1)\n#fc2=Merge(layers=[fc21,fc22,fc23,fc24],mode='concat')\nfc2=Merge(mode='concat')([fc21,fc22,fc23,fc24])\nOCRnet=Model(input=input,output=fc2)\nsgd = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)\nOCRnet.compile(loss='mean_squared_error',optimizer=sgd)\nimport numpy as np\nX_train=np.ones((10000,1,50,125),'float32')\nY_train=np.ones((10000,92),'float32')\nOCRnet.fit(X_train, Y_train, batch_size=32, nb_epoch=100,validation_split=0.1,verbose=2)\n`", "body": "@aselle  thank you!\n`from keras.models import Model\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Input, Merge\nfrom keras.layers import Convolution2D, MaxPooling2D,AveragePooling2D\nfrom keras.optimizers import SGD\n\ninput=Input(shape=(1, 50, 125))\nconv1=Convolution2D(32, 5, 5, border_mode='valid')(input)\npool1=MaxPooling2D(pool_size=(2, 2))(conv1)\nrelu1=Activation('relu')(pool1)\n\nconv2=Convolution2D(32, 5, 5, border_mode='valid')(relu1)\npool2=AveragePooling2D(pool_size=(2, 2))(conv2)\nrelu2=Activation('relu')(pool2)\n\nconv3=Convolution2D(32, 3, 3, border_mode='valid')(relu2)\npool3=AveragePooling2D(pool_size=(2, 2))(conv3)\nrelu3=Activation('relu')(pool3)\n\nflatten=Flatten()(relu3)\nfc1=Dense(512)(flatten)\n\nfc21=Dense(23,activation='softmax')(fc1)\nfc22=Dense(23,activation='softmax')(fc1)\nfc23=Dense(23,activation='softmax')(fc1)\nfc24=Dense(23,activation='softmax')(fc1)\n#fc2=Merge(layers=[fc21,fc22,fc23,fc24],mode='concat')\nfc2=Merge(mode='concat')([fc21,fc22,fc23,fc24])\nOCRnet=Model(input=input,output=fc2)\n\nsgd = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)\nOCRnet.compile(loss='mean_squared_error',optimizer=sgd)\n\nimport numpy as np\nX_train=np.ones((10000,1,50,125),'float32')\n\nY_train=np.ones((10000,92),'float32')\n\nOCRnet.fit(X_train, Y_train, batch_size=32, nb_epoch=100,validation_split=0.1,verbose=2)\n`\n"}