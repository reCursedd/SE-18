{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11923", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11923/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11923/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11923/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11923", "id": 246917505, "node_id": "MDU6SXNzdWUyNDY5MTc1MDU=", "number": 11923, "title": "Race condition in add_arg_scope causes silent incorrect behavior", "user": {"login": "currivan", "id": 10430506, "node_id": "MDQ6VXNlcjEwNDMwNTA2", "avatar_url": "https://avatars3.githubusercontent.com/u/10430506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/currivan", "html_url": "https://github.com/currivan", "followers_url": "https://api.github.com/users/currivan/followers", "following_url": "https://api.github.com/users/currivan/following{/other_user}", "gists_url": "https://api.github.com/users/currivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/currivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/currivan/subscriptions", "organizations_url": "https://api.github.com/users/currivan/orgs", "repos_url": "https://api.github.com/users/currivan/repos", "events_url": "https://api.github.com/users/currivan/events{/privacy}", "received_events_url": "https://api.github.com/users/currivan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-07-31T23:55:49Z", "updated_at": "2018-08-09T20:22:25Z", "closed_at": "2018-08-09T20:22:25Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nyes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Mint 17.3 Rosa</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nv1.2.0-5-g435cdfc 1.2.1</li>\n<li><strong>Python version</strong>:<br>\n3.6.1</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nCUDA Version 8.0.44<br>\ncudnn 5.1.5</li>\n<li><strong>GPU model and memory</strong>:<br>\nGTX 970 4GB</li>\n<li><strong>Exact command to reproduce</strong>:<br>\npython add_arg_scope.py</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>There is a race condition in <code>tensorflow.contrib.framework.python.ops.add_arg_scope</code> where it doesn't reliably extract the arg list. Sometimes the list is incorrect and sometimes when a function is redefined or reloaded, the old arg list is returned.</p>\n<p>In practice, even a function that isn't reloaded can get the wrong arg list. The behavior is strange and seems to depend on the contents of the function and not just its args.</p>\n<p>This may be causing errors since <code>arg_scope</code> silently ignores any arguments not in the argspec of the ops it's given.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.contrib.framework.python.ops <span class=\"pl-k\">import</span> add_arg_scope, arg_scope, arg_scoped_arguments\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> initial definition</span>\n<span class=\"pl-en\">@add_arg_scope</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>(<span class=\"pl-smi\">x</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">y</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>y<span class=\"pl-pds\">'</span></span>):\n    <span class=\"pl-k\">if</span> x:\n        <span class=\"pl-k\">pass</span>\n    <span class=\"pl-k\">if</span> y:\n        <span class=\"pl-k\">pass</span>\n\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">50</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> redefine the function with different args</span>\n    <span class=\"pl-en\">@add_arg_scope</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>(<span class=\"pl-smi\">a</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-smi\">b</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-smi\">c</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>, <span class=\"pl-smi\">d</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>, <span class=\"pl-smi\">e</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>, <span class=\"pl-smi\">f</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">6</span>, <span class=\"pl-smi\">g</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">7</span>, <span class=\"pl-smi\">h</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">8</span>):\n        <span class=\"pl-k\">pass</span>\n    \n    <span class=\"pl-c1\">print</span>(arg_scoped_arguments(foo))</pre></div>\n<p>sample output (it isn't always regular):</p>\n<p>('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('x', 'y')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('x', 'y')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('x', 'y')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('x', 'y')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n('x', 'y')<br>\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')<br>\n...</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nyes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Mint 17.3 Rosa\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\nv1.2.0-5-g435cdfc 1.2.1\nPython version:\n3.6.1\nBazel version (if compiling from source):\nN/A\nCUDA/cuDNN version:\nCUDA Version 8.0.44\ncudnn 5.1.5\nGPU model and memory:\nGTX 970 4GB\nExact command to reproduce:\npython add_arg_scope.py\n\nDescribe the problem\nThere is a race condition in tensorflow.contrib.framework.python.ops.add_arg_scope where it doesn't reliably extract the arg list. Sometimes the list is incorrect and sometimes when a function is redefined or reloaded, the old arg list is returned.\nIn practice, even a function that isn't reloaded can get the wrong arg list. The behavior is strange and seems to depend on the contents of the function and not just its args.\nThis may be causing errors since arg_scope silently ignores any arguments not in the argspec of the ops it's given.\nSource code / logs\nimport tensorflow as tf\nfrom tensorflow.contrib.framework.python.ops import add_arg_scope, arg_scope, arg_scoped_arguments\n\n# initial definition\n@add_arg_scope\ndef foo(x='x', y='y'):\n    if x:\n        pass\n    if y:\n        pass\n\nfor i in range(50):\n    # redefine the function with different args\n    @add_arg_scope\n    def foo(a=1, b=2, c=3, d=4, e=5, f=6, g=7, h=8):\n        pass\n    \n    print(arg_scoped_arguments(foo))\nsample output (it isn't always regular):\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('x', 'y')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('x', 'y')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('x', 'y')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('x', 'y')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n('x', 'y')\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n...", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: \r\nyes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: \r\nLinux Mint 17.3 Rosa\r\n- **TensorFlow installed from (source or binary)**: \r\nbinary\r\n- **TensorFlow version (use command below)**: \r\nv1.2.0-5-g435cdfc 1.2.1\r\n- **Python version**: \r\n3.6.1\r\n- **Bazel version (if compiling from source)**: \r\nN/A\r\n- **CUDA/cuDNN version**: \r\nCUDA Version 8.0.44\r\ncudnn 5.1.5\r\n- **GPU model and memory**: \r\nGTX 970 4GB\r\n- **Exact command to reproduce**:\r\npython add_arg_scope.py\r\n\r\n### Describe the problem\r\n\r\nThere is a race condition in `tensorflow.contrib.framework.python.ops.add_arg_scope` where it doesn't reliably extract the arg list. Sometimes the list is incorrect and sometimes when a function is redefined or reloaded, the old arg list is returned. \r\n\r\nIn practice, even a function that isn't reloaded can get the wrong arg list. The behavior is strange and seems to depend on the contents of the function and not just its args.\r\n\r\nThis may be causing errors since `arg_scope` silently ignores any arguments not in the argspec of the ops it's given.\r\n\r\n### Source code / logs\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.framework.python.ops import add_arg_scope, arg_scope, arg_scoped_arguments\r\n\r\n# initial definition\r\n@add_arg_scope\r\ndef foo(x='x', y='y'):\r\n    if x:\r\n        pass\r\n    if y:\r\n        pass\r\n\r\nfor i in range(50):\r\n    # redefine the function with different args\r\n    @add_arg_scope\r\n    def foo(a=1, b=2, c=3, d=4, e=5, f=6, g=7, h=8):\r\n        pass\r\n    \r\n    print(arg_scoped_arguments(foo))\r\n```\r\n\r\nsample output (it isn't always regular):\r\n\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('x', 'y')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('x', 'y')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('x', 'y')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('x', 'y')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n('x', 'y')\r\n('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\r\n...\r\n"}