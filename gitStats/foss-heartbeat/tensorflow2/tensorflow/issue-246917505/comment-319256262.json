{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/319256262", "html_url": "https://github.com/tensorflow/tensorflow/issues/11923#issuecomment-319256262", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11923", "id": 319256262, "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTI1NjI2Mg==", "user": {"login": "currivan", "id": 10430506, "node_id": "MDQ6VXNlcjEwNDMwNTA2", "avatar_url": "https://avatars3.githubusercontent.com/u/10430506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/currivan", "html_url": "https://github.com/currivan", "followers_url": "https://api.github.com/users/currivan/followers", "following_url": "https://api.github.com/users/currivan/following{/other_user}", "gists_url": "https://api.github.com/users/currivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/currivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/currivan/subscriptions", "organizations_url": "https://api.github.com/users/currivan/orgs", "repos_url": "https://api.github.com/users/currivan/repos", "events_url": "https://api.github.com/users/currivan/events{/privacy}", "received_events_url": "https://api.github.com/users/currivan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-01T03:15:59Z", "updated_at": "2017-08-01T03:38:03Z", "author_association": "NONE", "body_html": "<p>After looking at the code some more, it appears scope args will be passed correctly even if the cached argspec is wrong.</p>\n<p>My fix works but isn't ideal - a non-decorated op could have the same address as a freed one. A better approach would be to remove the _DECORATED_OPS dict and store the argspec on the wrapper or recompute it on demand.</p>\n<p>It's also unsound to use the fn address as the key into the arg scope for the same reason of memory reuse. Better would be an autoincrementing id created by the decorator and stored on the wrapper fn.</p>\n<p>_kwarg_names is also incorrect and should use inspect.getfullargspec to handle keyword only args.</p>", "body_text": "After looking at the code some more, it appears scope args will be passed correctly even if the cached argspec is wrong.\nMy fix works but isn't ideal - a non-decorated op could have the same address as a freed one. A better approach would be to remove the _DECORATED_OPS dict and store the argspec on the wrapper or recompute it on demand.\nIt's also unsound to use the fn address as the key into the arg scope for the same reason of memory reuse. Better would be an autoincrementing id created by the decorator and stored on the wrapper fn.\n_kwarg_names is also incorrect and should use inspect.getfullargspec to handle keyword only args.", "body": "After looking at the code some more, it appears scope args will be passed correctly even if the cached argspec is wrong.\r\n\r\nMy fix works but isn't ideal - a non-decorated op could have the same address as a freed one. A better approach would be to remove the _DECORATED_OPS dict and store the argspec on the wrapper or recompute it on demand. \r\n\r\nIt's also unsound to use the fn address as the key into the arg scope for the same reason of memory reuse. Better would be an autoincrementing id created by the decorator and stored on the wrapper fn.\r\n\r\n_kwarg_names is also incorrect and should use inspect.getfullargspec to handle keyword only args."}