{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/222271606", "html_url": "https://github.com/tensorflow/tensorflow/pull/2346#issuecomment-222271606", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2346", "id": 222271606, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjI3MTYwNg==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-27T23:05:29Z", "updated_at": "2016-05-27T23:05:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1088232\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adarob\">@adarob</a> using <code>tf</code> or some other name is up to the user, the framework itself doesn't change anything in the original <code>tf</code> or <code>tensorflow</code> namespace. You could use <code>tfi</code> instead of <code>tf</code> for instance. I've been using <code>tf</code> in order to reuse existing tests, but run them in immediate mode, but when you want to mix things, I would use <code>tfi</code>. Also, Python's symbol resolution happens during module loading time, so when SyntaxNet is loaded it remembers what <code>tf</code> was during that time, so if you redefine it later, it won't be affected.</p>", "body_text": "@adarob using tf or some other name is up to the user, the framework itself doesn't change anything in the original tf or tensorflow namespace. You could use tfi instead of tf for instance. I've been using tf in order to reuse existing tests, but run them in immediate mode, but when you want to mix things, I would use tfi. Also, Python's symbol resolution happens during module loading time, so when SyntaxNet is loaded it remembers what tf was during that time, so if you redefine it later, it won't be affected.", "body": "@adarob using `tf` or some other name is up to the user, the framework itself doesn't change anything in the original `tf` or `tensorflow` namespace. You could use `tfi` instead of `tf` for instance. I've been using `tf` in order to reuse existing tests, but run them in immediate mode, but when you want to mix things, I would use `tfi`. Also, Python's symbol resolution happens during module loading time, so when SyntaxNet is loaded it remembers what `tf` was during that time, so if you redefine it later, it won't be affected.\n"}