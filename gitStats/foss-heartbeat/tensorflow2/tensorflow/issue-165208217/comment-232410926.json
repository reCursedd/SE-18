{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/232410926", "html_url": "https://github.com/tensorflow/tensorflow/issues/3287#issuecomment-232410926", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3287", "id": 232410926, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjQxMDkyNg==", "user": {"login": "alexatknit", "id": 15474222, "node_id": "MDQ6VXNlcjE1NDc0MjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/15474222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexatknit", "html_url": "https://github.com/alexatknit", "followers_url": "https://api.github.com/users/alexatknit/followers", "following_url": "https://api.github.com/users/alexatknit/following{/other_user}", "gists_url": "https://api.github.com/users/alexatknit/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexatknit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexatknit/subscriptions", "organizations_url": "https://api.github.com/users/alexatknit/orgs", "repos_url": "https://api.github.com/users/alexatknit/repos", "events_url": "https://api.github.com/users/alexatknit/events{/privacy}", "received_events_url": "https://api.github.com/users/alexatknit/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-13T16:31:04Z", "updated_at": "2016-07-13T16:31:04Z", "author_association": "NONE", "body_html": "<p>sure, I get that, I threw it together to test the unexpected behavior I was seeing running rnns, wasn't supposed to be a polished example. Now I'm getting some weird behavior when converting my trainable variables to constants. It might be a separate issue but the stack looks like:</p>\n<pre><code>Traceback (most recent call last):\n  File \"/usr/local/bin/finalize_graph\", line 9, in &lt;module&gt;\n    load_entry_point('KnitNN==0.5.3', 'console_scripts', 'finalize_graph')()\n  File \"/usr/local/lib/python3.5/site-packages/KnitNN-0.5.3-py3.5.egg/nn/tools/finalize_graph.py\", line 59, in finalize_graph\n    variable_names_whitelist=variables)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/framework/graph_util.py\", line 224, in convert_variables_to_constants\n    returned_variables = sess.run(variable_names)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 382, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 598, in _run\n    processed_fetches = self._process_fetches(fetches)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 553, in _process_fetches\n    'Tensor. (%s)' % (subfetch, fetch, str(e)))\nValueError: Fetch argument 'base_model/cond/resnet1/Assign/Switch:1:0' of 'base_model/cond/resnet1/Assign/Switch:1:0' cannot be interpreted as a Tensor. (The name 'base_model/cond/resnet1/Assign/Switch:1:0' looks a like a Tensor name, but is not a valid one. Tensor names must be of the form \"&lt;op_name&gt;:&lt;output_index&gt;\".)\n</code></pre>", "body_text": "sure, I get that, I threw it together to test the unexpected behavior I was seeing running rnns, wasn't supposed to be a polished example. Now I'm getting some weird behavior when converting my trainable variables to constants. It might be a separate issue but the stack looks like:\nTraceback (most recent call last):\n  File \"/usr/local/bin/finalize_graph\", line 9, in <module>\n    load_entry_point('KnitNN==0.5.3', 'console_scripts', 'finalize_graph')()\n  File \"/usr/local/lib/python3.5/site-packages/KnitNN-0.5.3-py3.5.egg/nn/tools/finalize_graph.py\", line 59, in finalize_graph\n    variable_names_whitelist=variables)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/framework/graph_util.py\", line 224, in convert_variables_to_constants\n    returned_variables = sess.run(variable_names)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 382, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 598, in _run\n    processed_fetches = self._process_fetches(fetches)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 553, in _process_fetches\n    'Tensor. (%s)' % (subfetch, fetch, str(e)))\nValueError: Fetch argument 'base_model/cond/resnet1/Assign/Switch:1:0' of 'base_model/cond/resnet1/Assign/Switch:1:0' cannot be interpreted as a Tensor. (The name 'base_model/cond/resnet1/Assign/Switch:1:0' looks a like a Tensor name, but is not a valid one. Tensor names must be of the form \"<op_name>:<output_index>\".)", "body": "sure, I get that, I threw it together to test the unexpected behavior I was seeing running rnns, wasn't supposed to be a polished example. Now I'm getting some weird behavior when converting my trainable variables to constants. It might be a separate issue but the stack looks like:\n\n```\nTraceback (most recent call last):\n  File \"/usr/local/bin/finalize_graph\", line 9, in <module>\n    load_entry_point('KnitNN==0.5.3', 'console_scripts', 'finalize_graph')()\n  File \"/usr/local/lib/python3.5/site-packages/KnitNN-0.5.3-py3.5.egg/nn/tools/finalize_graph.py\", line 59, in finalize_graph\n    variable_names_whitelist=variables)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/framework/graph_util.py\", line 224, in convert_variables_to_constants\n    returned_variables = sess.run(variable_names)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 382, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 598, in _run\n    processed_fetches = self._process_fetches(fetches)\n  File \"/usr/local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 553, in _process_fetches\n    'Tensor. (%s)' % (subfetch, fetch, str(e)))\nValueError: Fetch argument 'base_model/cond/resnet1/Assign/Switch:1:0' of 'base_model/cond/resnet1/Assign/Switch:1:0' cannot be interpreted as a Tensor. (The name 'base_model/cond/resnet1/Assign/Switch:1:0' looks a like a Tensor name, but is not a valid one. Tensor names must be of the form \"<op_name>:<output_index>\".)\n```\n"}