{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/232218217", "html_url": "https://github.com/tensorflow/tensorflow/issues/3287#issuecomment-232218217", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3287", "id": 232218217, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjIxODIxNw==", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-13T00:06:28Z", "updated_at": "2016-07-13T00:06:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Assigning to Yuan -- this is expected behavior, but we still need more documentation on this.</p>\n<p>I believe if you define your control dependencies as a function, and the lambda calls the function, it will work.</p>\n<p>e.g.,</p>\n<pre><code>def fn1():\n  with tf.control_dependencies....\n\ncond_result = tf.cond(cond_value, lambda: fn1(), lambda: fn2())\n</code></pre>\n<p>or something like that.  Essentially the ops have to be defined in the function passed to the lambda for them to not be executed.</p>", "body_text": "Assigning to Yuan -- this is expected behavior, but we still need more documentation on this.\nI believe if you define your control dependencies as a function, and the lambda calls the function, it will work.\ne.g.,\ndef fn1():\n  with tf.control_dependencies....\n\ncond_result = tf.cond(cond_value, lambda: fn1(), lambda: fn2())\n\nor something like that.  Essentially the ops have to be defined in the function passed to the lambda for them to not be executed.", "body": "Assigning to Yuan -- this is expected behavior, but we still need more documentation on this.\n\nI believe if you define your control dependencies as a function, and the lambda calls the function, it will work.\n\ne.g.,\n\n```\ndef fn1():\n  with tf.control_dependencies....\n\ncond_result = tf.cond(cond_value, lambda: fn1(), lambda: fn2())\n```\n\nor something like that.  Essentially the ops have to be defined in the function passed to the lambda for them to not be executed.\n"}