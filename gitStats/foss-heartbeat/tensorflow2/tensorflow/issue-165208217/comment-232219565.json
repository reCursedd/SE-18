{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/232219565", "html_url": "https://github.com/tensorflow/tensorflow/issues/3287#issuecomment-232219565", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3287", "id": 232219565, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjIxOTU2NQ==", "user": {"login": "alexatknit", "id": 15474222, "node_id": "MDQ6VXNlcjE1NDc0MjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/15474222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexatknit", "html_url": "https://github.com/alexatknit", "followers_url": "https://api.github.com/users/alexatknit/followers", "following_url": "https://api.github.com/users/alexatknit/following{/other_user}", "gists_url": "https://api.github.com/users/alexatknit/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexatknit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexatknit/subscriptions", "organizations_url": "https://api.github.com/users/alexatknit/orgs", "repos_url": "https://api.github.com/users/alexatknit/repos", "events_url": "https://api.github.com/users/alexatknit/events{/privacy}", "received_events_url": "https://api.github.com/users/alexatknit/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-13T00:15:07Z", "updated_at": "2016-07-13T00:15:07Z", "author_association": "NONE", "body_html": "<p>Lifting this requirement would allow me to have more modular code when designing resnet structures:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">...</span>\n        <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>resnet1<span class=\"pl-pds\">'</span></span>):\n            <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">5</span>):\n                <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-c1\">str</span>(i)):\n                    X <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.conv(elu(X1), <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">16</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>conv1<span class=\"pl-pds\">'</span></span>)                <span class=\"pl-c\"><span class=\"pl-c\">#</span> 128 -&gt; 128</span>\n                    X <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.conv(elu(X), <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">16</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>conv2<span class=\"pl-pds\">'</span></span>)                 <span class=\"pl-c\"><span class=\"pl-c\">#</span> 128 -&gt; 128</span>\n                    X1 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.feedback(X, X1, <span class=\"pl-v\">dropout</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.7</span>)\n<span class=\"pl-c1\">...</span></pre></div>\n<p>In this case, feedback will add the two tensors with a 70% chance or simply pass X1 with a 30% chance.</p>", "body_text": "Lifting this requirement would allow me to have more modular code when designing resnet structures:\n...\n        with tf.variable_scope('resnet1'):\n            for i in range(5):\n                with tf.variable_scope(str(i)):\n                    X = self.conv(elu(X1), 3, 3, 16, name='conv1')                # 128 -> 128\n                    X = self.conv(elu(X), 3, 3, 16, name='conv2')                 # 128 -> 128\n                    X1 = self.feedback(X, X1, dropout=0.7)\n...\nIn this case, feedback will add the two tensors with a 70% chance or simply pass X1 with a 30% chance.", "body": "Lifting this requirement would allow me to have more modular code when designing resnet structures:\n\n``` python\n...\n        with tf.variable_scope('resnet1'):\n            for i in range(5):\n                with tf.variable_scope(str(i)):\n                    X = self.conv(elu(X1), 3, 3, 16, name='conv1')                # 128 -> 128\n                    X = self.conv(elu(X), 3, 3, 16, name='conv2')                 # 128 -> 128\n                    X1 = self.feedback(X, X1, dropout=0.7)\n...\n```\n\nIn this case, feedback will add the two tensors with a 70% chance or simply pass X1 with a 30% chance.\n"}