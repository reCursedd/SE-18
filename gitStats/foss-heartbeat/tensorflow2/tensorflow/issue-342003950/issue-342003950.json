{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20886", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20886/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20886/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20886/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20886", "id": 342003950, "node_id": "MDU6SXNzdWUzNDIwMDM5NTA=", "number": 20886, "title": "Freezing + fake quantization of graph", "user": {"login": "Basil-M", "id": 20246313, "node_id": "MDQ6VXNlcjIwMjQ2MzEz", "avatar_url": "https://avatars1.githubusercontent.com/u/20246313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Basil-M", "html_url": "https://github.com/Basil-M", "followers_url": "https://api.github.com/users/Basil-M/followers", "following_url": "https://api.github.com/users/Basil-M/following{/other_user}", "gists_url": "https://api.github.com/users/Basil-M/gists{/gist_id}", "starred_url": "https://api.github.com/users/Basil-M/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Basil-M/subscriptions", "organizations_url": "https://api.github.com/users/Basil-M/orgs", "repos_url": "https://api.github.com/users/Basil-M/repos", "events_url": "https://api.github.com/users/Basil-M/events{/privacy}", "received_events_url": "https://api.github.com/users/Basil-M/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2018-07-17T16:58:34Z", "updated_at": "2018-11-06T10:03:47Z", "closed_at": "2018-07-20T14:32:27Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Custom code</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Source (v1.8) / binary (v1.9)</li>\n<li><strong>TensorFlow version (use command below)</strong>:  v1.8.0-0-g93bc2e2072 1.8.0 AND v1.9.0-0-g25c197e023 1.9.0</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: (result of gcc -v) gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)</li>\n<li><strong>CUDA/cuDNN version</strong>: Not used</li>\n<li><strong>GPU model and memory</strong>: Not used</li>\n<li><strong>Exact command to reproduce</strong>: Code given below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Problem described <a href=\"https://stackoverflow.com/questions/51327204/freezing-quantizing-fake-quantized-graph\" rel=\"nofollow\">here</a>, but didn't have any luck; essentially, I cannot freeze a graph which has been fake quantized using <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/contrib/quantize/python/quantize_graph.py\">tf.contrib.quantize.create_training_graph()</a>. I have a sample below (there may be a better way to add a freezing operation at the end of the <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/contrib/quantize/python/quantize_graph.py\">graph quantization test</a> script).</p>\n<p>The code shown spits out the following error (or variants dependent on architecture):</p>\n<blockquote>\n<p>ValueError: Input 0 of node import/weights_quant/AssignMinLast was passed float from import/weights_quant/min:0 incompatible with expected float_ref</p>\n</blockquote>\n<p>I may be doing something wrong - this arises regardless of which order I apply the creation of training/eval graphs and which of the 3 methods I use for freezing the graph. I also tried the fixes <a href=\"https://github.com/davidsandberg/facenet/issues/161\" data-hovercard-type=\"issue\" data-hovercard-url=\"/davidsandberg/facenet/issues/161/hovercard\">here</a> to no avail.</p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\n\n\ndef conv_simple(_input):\n    _input_r = tf.reshape(_input, shape=[-1, 28, 28, 1])\n    _conv1 = tf.nn.conv2d(_input_r, tf.Variable(tf.random_normal([3, 3, 1, 64], stddev=0.1)), strides=[1, 1, 1, 1],\n                          padding='SAME')\n    _conv2 = tf.nn.bias_add(_conv1, tf.Variable(tf.random_normal([64], stddev=0.1)))\n    _conv3 = tf.nn.relu(_conv2)\n    _pool = tf.nn.max_pool(_conv3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n    _dense = tf.reshape(_pool, [-1, 14 * 14 * 64])\n    _out = tf.add(tf.matmul(_dense, tf.Variable(tf.random_normal([14 * 14 * 64, 10], stddev=0.1))),\n                  tf.Variable(tf.random_normal([10], stddev=0.1)), name='Output')\n    out = {\n        'input_r': _input_r, 'conv1': _conv1, 'conv2': _conv2, 'conv3': _conv3\n        , 'pool': _pool, 'dense': _dense, 'out': _out\n    }\n    return out\n\n\n# tf Graph input\nx = tf.placeholder(tf.float32, [None, 784], name='X')\n_pred = conv_simple(x)['out']\n\ntf.contrib.quantize.create_training_graph()\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # FREEZE GRAPH\n    output_graph_def = sess.graph.as_graph_def()\n    input_names = [\"X\"]\n    output_names = [\"Output\"]\n    LOG_DIR = '/some/path/to/log/dir/'\n\n    output_graph_def = tf.graph_util.convert_variables_to_constants(\n        sess,  # The session is used to retrieve the weights\n        output_graph_def,  # The graph_def is used to retrieve the nodes\n        output_names  # The output node names are used to select the useful nodes,\n    )\n\n    g = tf.import_graph_def(output_graph_def)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Custom code\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): Source (v1.8) / binary (v1.9)\nTensorFlow version (use command below):  v1.8.0-0-g93bc2e2072 1.8.0 AND v1.9.0-0-g25c197e023 1.9.0\nPython version: 3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source): (result of gcc -v) gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)\nCUDA/cuDNN version: Not used\nGPU model and memory: Not used\nExact command to reproduce: Code given below\n\nDescribe the problem\nProblem described here, but didn't have any luck; essentially, I cannot freeze a graph which has been fake quantized using tf.contrib.quantize.create_training_graph(). I have a sample below (there may be a better way to add a freezing operation at the end of the graph quantization test script).\nThe code shown spits out the following error (or variants dependent on architecture):\n\nValueError: Input 0 of node import/weights_quant/AssignMinLast was passed float from import/weights_quant/min:0 incompatible with expected float_ref\n\nI may be doing something wrong - this arises regardless of which order I apply the creation of training/eval graphs and which of the 3 methods I use for freezing the graph. I also tried the fixes here to no avail.\nSource code / logs\nimport tensorflow as tf\n\n\ndef conv_simple(_input):\n    _input_r = tf.reshape(_input, shape=[-1, 28, 28, 1])\n    _conv1 = tf.nn.conv2d(_input_r, tf.Variable(tf.random_normal([3, 3, 1, 64], stddev=0.1)), strides=[1, 1, 1, 1],\n                          padding='SAME')\n    _conv2 = tf.nn.bias_add(_conv1, tf.Variable(tf.random_normal([64], stddev=0.1)))\n    _conv3 = tf.nn.relu(_conv2)\n    _pool = tf.nn.max_pool(_conv3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n    _dense = tf.reshape(_pool, [-1, 14 * 14 * 64])\n    _out = tf.add(tf.matmul(_dense, tf.Variable(tf.random_normal([14 * 14 * 64, 10], stddev=0.1))),\n                  tf.Variable(tf.random_normal([10], stddev=0.1)), name='Output')\n    out = {\n        'input_r': _input_r, 'conv1': _conv1, 'conv2': _conv2, 'conv3': _conv3\n        , 'pool': _pool, 'dense': _dense, 'out': _out\n    }\n    return out\n\n\n# tf Graph input\nx = tf.placeholder(tf.float32, [None, 784], name='X')\n_pred = conv_simple(x)['out']\n\ntf.contrib.quantize.create_training_graph()\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    # FREEZE GRAPH\n    output_graph_def = sess.graph.as_graph_def()\n    input_names = [\"X\"]\n    output_names = [\"Output\"]\n    LOG_DIR = '/some/path/to/log/dir/'\n\n    output_graph_def = tf.graph_util.convert_variables_to_constants(\n        sess,  # The session is used to retrieve the weights\n        output_graph_def,  # The graph_def is used to retrieve the nodes\n        output_names  # The output node names are used to select the useful nodes,\n    )\n\n    g = tf.import_graph_def(output_graph_def)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Custom code\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Source (v1.8) / binary (v1.9)\r\n- **TensorFlow version (use command below)**:  v1.8.0-0-g93bc2e2072 1.8.0 AND v1.9.0-0-g25c197e023 1.9.0\r\n- **Python version**: 3.6 \r\n- **Bazel version (if compiling from source)**: \r\n- **GCC/Compiler version (if compiling from source)**: (result of gcc -v) gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9) \r\n- **CUDA/cuDNN version**: Not used\r\n- **GPU model and memory**: Not used\r\n- **Exact command to reproduce**: Code given below\r\n\r\n### Describe the problem\r\nProblem described [here](https://stackoverflow.com/questions/51327204/freezing-quantizing-fake-quantized-graph), but didn't have any luck; essentially, I cannot freeze a graph which has been fake quantized using [tf.contrib.quantize.create_training_graph()](https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/contrib/quantize/python/quantize_graph.py). I have a sample below (there may be a better way to add a freezing operation at the end of the [graph quantization test](https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/contrib/quantize/python/quantize_graph.py) script).\r\n\r\nThe code shown spits out the following error (or variants dependent on architecture):\r\n\r\n> ValueError: Input 0 of node import/weights_quant/AssignMinLast was passed float from import/weights_quant/min:0 incompatible with expected float_ref\r\n\r\nI may be doing something wrong - this arises regardless of which order I apply the creation of training/eval graphs and which of the 3 methods I use for freezing the graph. I also tried the fixes [here](https://github.com/davidsandberg/facenet/issues/161) to no avail.\r\n\r\n### Source code / logs\r\n```\r\nimport tensorflow as tf\r\n\r\n\r\ndef conv_simple(_input):\r\n    _input_r = tf.reshape(_input, shape=[-1, 28, 28, 1])\r\n    _conv1 = tf.nn.conv2d(_input_r, tf.Variable(tf.random_normal([3, 3, 1, 64], stddev=0.1)), strides=[1, 1, 1, 1],\r\n                          padding='SAME')\r\n    _conv2 = tf.nn.bias_add(_conv1, tf.Variable(tf.random_normal([64], stddev=0.1)))\r\n    _conv3 = tf.nn.relu(_conv2)\r\n    _pool = tf.nn.max_pool(_conv3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\r\n    _dense = tf.reshape(_pool, [-1, 14 * 14 * 64])\r\n    _out = tf.add(tf.matmul(_dense, tf.Variable(tf.random_normal([14 * 14 * 64, 10], stddev=0.1))),\r\n                  tf.Variable(tf.random_normal([10], stddev=0.1)), name='Output')\r\n    out = {\r\n        'input_r': _input_r, 'conv1': _conv1, 'conv2': _conv2, 'conv3': _conv3\r\n        , 'pool': _pool, 'dense': _dense, 'out': _out\r\n    }\r\n    return out\r\n\r\n\r\n# tf Graph input\r\nx = tf.placeholder(tf.float32, [None, 784], name='X')\r\n_pred = conv_simple(x)['out']\r\n\r\ntf.contrib.quantize.create_training_graph()\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n\r\n    # FREEZE GRAPH\r\n    output_graph_def = sess.graph.as_graph_def()\r\n    input_names = [\"X\"]\r\n    output_names = [\"Output\"]\r\n    LOG_DIR = '/some/path/to/log/dir/'\r\n\r\n    output_graph_def = tf.graph_util.convert_variables_to_constants(\r\n        sess,  # The session is used to retrieve the weights\r\n        output_graph_def,  # The graph_def is used to retrieve the nodes\r\n        output_names  # The output node names are used to select the useful nodes,\r\n    )\r\n\r\n    g = tf.import_graph_def(output_graph_def)\r\n```\r\n\r\n"}