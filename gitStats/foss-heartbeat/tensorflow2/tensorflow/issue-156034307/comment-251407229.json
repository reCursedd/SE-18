{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/251407229", "html_url": "https://github.com/tensorflow/tensorflow/issues/2444#issuecomment-251407229", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2444", "id": 251407229, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTQwNzIyOQ==", "user": {"login": "hholst80", "id": 6200749, "node_id": "MDQ6VXNlcjYyMDA3NDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6200749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hholst80", "html_url": "https://github.com/hholst80", "followers_url": "https://api.github.com/users/hholst80/followers", "following_url": "https://api.github.com/users/hholst80/following{/other_user}", "gists_url": "https://api.github.com/users/hholst80/gists{/gist_id}", "starred_url": "https://api.github.com/users/hholst80/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hholst80/subscriptions", "organizations_url": "https://api.github.com/users/hholst80/orgs", "repos_url": "https://api.github.com/users/hholst80/repos", "events_url": "https://api.github.com/users/hholst80/events{/privacy}", "received_events_url": "https://api.github.com/users/hholst80/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-04T14:37:39Z", "updated_at": "2016-10-12T14:12:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I did some <a href=\"https://github.com/hholst80/tf_sgemm\">investigations</a> myself on this. I have not been able to reproduce the performance speedup in <code>perftest.py</code> in a real environment. Actually, in our \"production code\" we got a slowdown and I hope I can return to investigate why later on. If anyone have some battle experience to share I am happy to hear about it!</p>\n<p>EDIT: The matrices we have are too small to benefit from the OpenBLAS call. The break even seems to be for ~2M floating point instructions for OpenBLAS sgemm to start to outperform Eigens matmul.</p>\n<p>My machine is 75% loaded right now so the numbers should be taken with a grain of salt:</p>\n<pre><code>$ pip list | grep tensorflow\ntensorflow (0.11.0rc0)\n</code></pre>\n<pre><code>$ env OMP_NUM_THREADS=1 python perftest.py \nmatmul 1000\n0.11668629897758365\nsgemm 1000\n0.057338198996149004 speedup 2.0\nmatmul 2000\n0.9684892640216276\nsgemm 2000\n0.352693248889409 speedup 2.7\nmatmul 3000\n3.1248108180006966\nsgemm 3000\n1.1585902459919453 speedup 2.7\nmatmul 4000\n7.574722188990563\nsgemm 4000\n2.3656532769091427 speedup 3.2\nmatmul 5000\n14.732756665092893\nsgemm 5000\n5.034700996009633 speedup 2.9\n</code></pre>\n<p><code>/proc/cpuinfo</code></p>\n<pre><code>processor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 63\nmodel name      : Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz\nstepping        : 2\nmicrocode       : 0x36\ncpu MHz         : 2802.246\ncache size      : 30720 KB\nphysical id     : 0\nsiblings        : 24\ncore id         : 0\ncpu cores       : 12\napicid          : 0\ninitial apicid  : 0\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 15\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm epb tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts\nbugs            :\nbogomips        : 4988.57\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 46 bits physical, 48 bits virtual\npower management:\n</code></pre>", "body_text": "I did some investigations myself on this. I have not been able to reproduce the performance speedup in perftest.py in a real environment. Actually, in our \"production code\" we got a slowdown and I hope I can return to investigate why later on. If anyone have some battle experience to share I am happy to hear about it!\nEDIT: The matrices we have are too small to benefit from the OpenBLAS call. The break even seems to be for ~2M floating point instructions for OpenBLAS sgemm to start to outperform Eigens matmul.\nMy machine is 75% loaded right now so the numbers should be taken with a grain of salt:\n$ pip list | grep tensorflow\ntensorflow (0.11.0rc0)\n\n$ env OMP_NUM_THREADS=1 python perftest.py \nmatmul 1000\n0.11668629897758365\nsgemm 1000\n0.057338198996149004 speedup 2.0\nmatmul 2000\n0.9684892640216276\nsgemm 2000\n0.352693248889409 speedup 2.7\nmatmul 3000\n3.1248108180006966\nsgemm 3000\n1.1585902459919453 speedup 2.7\nmatmul 4000\n7.574722188990563\nsgemm 4000\n2.3656532769091427 speedup 3.2\nmatmul 5000\n14.732756665092893\nsgemm 5000\n5.034700996009633 speedup 2.9\n\n/proc/cpuinfo\nprocessor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 63\nmodel name      : Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz\nstepping        : 2\nmicrocode       : 0x36\ncpu MHz         : 2802.246\ncache size      : 30720 KB\nphysical id     : 0\nsiblings        : 24\ncore id         : 0\ncpu cores       : 12\napicid          : 0\ninitial apicid  : 0\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 15\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm epb tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts\nbugs            :\nbogomips        : 4988.57\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 46 bits physical, 48 bits virtual\npower management:", "body": "I did some [investigations](https://github.com/hholst80/tf_sgemm) myself on this. I have not been able to reproduce the performance speedup in `perftest.py` in a real environment. Actually, in our \"production code\" we got a slowdown and I hope I can return to investigate why later on. If anyone have some battle experience to share I am happy to hear about it!\n\nEDIT: The matrices we have are too small to benefit from the OpenBLAS call. The break even seems to be for ~2M floating point instructions for OpenBLAS sgemm to start to outperform Eigens matmul.\n\nMy machine is 75% loaded right now so the numbers should be taken with a grain of salt:\n\n```\n$ pip list | grep tensorflow\ntensorflow (0.11.0rc0)\n```\n\n```\n$ env OMP_NUM_THREADS=1 python perftest.py \nmatmul 1000\n0.11668629897758365\nsgemm 1000\n0.057338198996149004 speedup 2.0\nmatmul 2000\n0.9684892640216276\nsgemm 2000\n0.352693248889409 speedup 2.7\nmatmul 3000\n3.1248108180006966\nsgemm 3000\n1.1585902459919453 speedup 2.7\nmatmul 4000\n7.574722188990563\nsgemm 4000\n2.3656532769091427 speedup 3.2\nmatmul 5000\n14.732756665092893\nsgemm 5000\n5.034700996009633 speedup 2.9\n```\n\n`/proc/cpuinfo`\n\n```\nprocessor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 63\nmodel name      : Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz\nstepping        : 2\nmicrocode       : 0x36\ncpu MHz         : 2802.246\ncache size      : 30720 KB\nphysical id     : 0\nsiblings        : 24\ncore id         : 0\ncpu cores       : 12\napicid          : 0\ninitial apicid  : 0\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 15\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm epb tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts\nbugs            :\nbogomips        : 4988.57\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 46 bits physical, 48 bits virtual\npower management:\n```\n"}