{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/317533855", "html_url": "https://github.com/tensorflow/tensorflow/pull/10657#issuecomment-317533855", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10657", "id": 317533855, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzUzMzg1NQ==", "user": {"login": "taion", "id": 3112159, "node_id": "MDQ6VXNlcjMxMTIxNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taion", "html_url": "https://github.com/taion", "followers_url": "https://api.github.com/users/taion/followers", "following_url": "https://api.github.com/users/taion/following{/other_user}", "gists_url": "https://api.github.com/users/taion/gists{/gist_id}", "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taion/subscriptions", "organizations_url": "https://api.github.com/users/taion/orgs", "repos_url": "https://api.github.com/users/taion/repos", "events_url": "https://api.github.com/users/taion/events{/privacy}", "received_events_url": "https://api.github.com/users/taion/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-24T19:47:06Z", "updated_at": "2017-07-24T19:47:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>There's a few things going on here.</p>\n<ul>\n<li>Using <code>logging</code> for <em>usage</em> warning from a library is not ideal. It's much better to use the <a href=\"https://docs.python.org/3.6/library/warnings.html\" rel=\"nofollow\"><code>warnings</code></a> package from the stdlib. This is what e.g. numpy does for things like dividing by zero, and it sidesteps all the (sort of bizarre) Python logging configuration. <code>warnings</code> also exposes a bunch of hooks to users to do stuff like assert that code does not throw warnings, or to throw on hitting warnings, or to only log each warning once.</li>\n<li>Setting up a log handler for a non-root logger is sort of unidiomatic; normally, it'd be possible to do things like set up my own logging format and handlers, and it's unusual to have to e.g. reach into a library's logging config to disable what that library does</li>\n</ul>\n<p>In terms of options, I see:</p>\n<ol>\n<li>Use <code>warnings</code> for usage warnings, and drop the automatic logging setup. This is probably the most correct (assuming the things you want to show are usage warnings), and e.g. matches what numpy does, but it's a lot of work, and might require rethinking log levels.</li>\n<li>Disable propagation for the TF logger <strong>(this PR)</strong>. It makes it still be more of a hassle than I'd like, if I want to customize my log message format, but it's enough for me to be reasonably satisfied. This stops the double-logging if there are user-supplied root log handlers, and otherwise keeps working as things do currently.</li>\n<li>Defer the log handler setup until the first time logging runs. At that point, check to see if there are any configured root log handlers. If not, set up the <code>tensorflow</code> log handler. This is a little hacky, but it's sort of a best-of-both \u2013 by deferring logging setup to first use (given that TF doesn't log anything when you import it), users get a chance to configure their own logging in an idiomatic manner, and have things otherwise \"just work\".</li>\n</ol>", "body_text": "There's a few things going on here.\n\nUsing logging for usage warning from a library is not ideal. It's much better to use the warnings package from the stdlib. This is what e.g. numpy does for things like dividing by zero, and it sidesteps all the (sort of bizarre) Python logging configuration. warnings also exposes a bunch of hooks to users to do stuff like assert that code does not throw warnings, or to throw on hitting warnings, or to only log each warning once.\nSetting up a log handler for a non-root logger is sort of unidiomatic; normally, it'd be possible to do things like set up my own logging format and handlers, and it's unusual to have to e.g. reach into a library's logging config to disable what that library does\n\nIn terms of options, I see:\n\nUse warnings for usage warnings, and drop the automatic logging setup. This is probably the most correct (assuming the things you want to show are usage warnings), and e.g. matches what numpy does, but it's a lot of work, and might require rethinking log levels.\nDisable propagation for the TF logger (this PR). It makes it still be more of a hassle than I'd like, if I want to customize my log message format, but it's enough for me to be reasonably satisfied. This stops the double-logging if there are user-supplied root log handlers, and otherwise keeps working as things do currently.\nDefer the log handler setup until the first time logging runs. At that point, check to see if there are any configured root log handlers. If not, set up the tensorflow log handler. This is a little hacky, but it's sort of a best-of-both \u2013 by deferring logging setup to first use (given that TF doesn't log anything when you import it), users get a chance to configure their own logging in an idiomatic manner, and have things otherwise \"just work\".", "body": "There's a few things going on here.\r\n\r\n- Using `logging` for _usage_ warning from a library is not ideal. It's much better to use the [`warnings`](https://docs.python.org/3.6/library/warnings.html) package from the stdlib. This is what e.g. numpy does for things like dividing by zero, and it sidesteps all the (sort of bizarre) Python logging configuration. `warnings` also exposes a bunch of hooks to users to do stuff like assert that code does not throw warnings, or to throw on hitting warnings, or to only log each warning once.\r\n- Setting up a log handler for a non-root logger is sort of unidiomatic; normally, it'd be possible to do things like set up my own logging format and handlers, and it's unusual to have to e.g. reach into a library's logging config to disable what that library does\r\n\r\nIn terms of options, I see:\r\n\r\n1. Use `warnings` for usage warnings, and drop the automatic logging setup. This is probably the most correct (assuming the things you want to show are usage warnings), and e.g. matches what numpy does, but it's a lot of work, and might require rethinking log levels.\r\n2. Disable propagation for the TF logger **(this PR)**. It makes it still be more of a hassle than I'd like, if I want to customize my log message format, but it's enough for me to be reasonably satisfied. This stops the double-logging if there are user-supplied root log handlers, and otherwise keeps working as things do currently.\r\n3. Defer the log handler setup until the first time logging runs. At that point, check to see if there are any configured root log handlers. If not, set up the `tensorflow` log handler. This is a little hacky, but it's sort of a best-of-both \u2013 by deferring logging setup to first use (given that TF doesn't log anything when you import it), users get a chance to configure their own logging in an idiomatic manner, and have things otherwise \"just work\"."}