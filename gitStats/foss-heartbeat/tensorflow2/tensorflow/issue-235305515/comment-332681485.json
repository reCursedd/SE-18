{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/332681485", "html_url": "https://github.com/tensorflow/tensorflow/pull/10657#issuecomment-332681485", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10657", "id": 332681485, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY4MTQ4NQ==", "user": {"login": "taion", "id": 3112159, "node_id": "MDQ6VXNlcjMxMTIxNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taion", "html_url": "https://github.com/taion", "followers_url": "https://api.github.com/users/taion/followers", "following_url": "https://api.github.com/users/taion/following{/other_user}", "gists_url": "https://api.github.com/users/taion/gists{/gist_id}", "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taion/subscriptions", "organizations_url": "https://api.github.com/users/taion/orgs", "repos_url": "https://api.github.com/users/taion/repos", "events_url": "https://api.github.com/users/taion/events{/privacy}", "received_events_url": "https://api.github.com/users/taion/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-27T23:12:31Z", "updated_at": "2017-09-27T23:12:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Updated.</p>\n<p>The explicit lock is with the double-checked locking is meh, but the lock is unavoidable and is consistent with what upstream Python logging does.</p>\n<p>The 100% semantically correct solution would be to use the same lock as <code>basicConfig</code>, but it's not exposed, and anyway if a user is racing <code>logging.basicConfig</code> against TensorFlow's logging on multiple threads, they deserve whatever weird stuff they end up getting.</p>", "body_text": "Updated.\nThe explicit lock is with the double-checked locking is meh, but the lock is unavoidable and is consistent with what upstream Python logging does.\nThe 100% semantically correct solution would be to use the same lock as basicConfig, but it's not exposed, and anyway if a user is racing logging.basicConfig against TensorFlow's logging on multiple threads, they deserve whatever weird stuff they end up getting.", "body": "Updated.\r\n\r\nThe explicit lock is with the double-checked locking is meh, but the lock is unavoidable and is consistent with what upstream Python logging does.\r\n\r\nThe 100% semantically correct solution would be to use the same lock as `basicConfig`, but it's not exposed, and anyway if a user is racing `logging.basicConfig` against TensorFlow's logging on multiple threads, they deserve whatever weird stuff they end up getting."}