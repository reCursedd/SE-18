{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/104039952", "pull_request_review_id": 24854129, "id": 104039952, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDAzOTk1Mg==", "diff_hunk": "@@ -55,6 +56,30 @@\n _XOR = lambda x, y: x ^ y\n _INV = lambda x: ~x\n \n+# @ operator supported since python 3.5.\n+if sys.version_info >= (3, 5):\n+  # Use eval() to avoid a compilation error on earlier versions.\n+  _MATMUL = lambda x, y: eval(\"x @ y\")\n+else:\n+  # For earlier versions of python, emulate regular behavior.\n+  # Useful to build and test for 3.5+ on earlier versions.\n+  def _MATMUL(x, y):", "path": "tensorflow/python/kernel_tests/cwise_ops_test.py", "position": null, "original_position": 19, "commit_id": "203322faeaa0a1fa8ac900cc5cb3d21f8ec21036", "original_commit_id": "003347376b9a3e32a999018eee65892b60216b32", "user": {"login": "ageron", "id": 76661, "node_id": "MDQ6VXNlcjc2NjYx", "avatar_url": "https://avatars3.githubusercontent.com/u/76661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ageron", "html_url": "https://github.com/ageron", "followers_url": "https://api.github.com/users/ageron/followers", "following_url": "https://api.github.com/users/ageron/following{/other_user}", "gists_url": "https://api.github.com/users/ageron/gists{/gist_id}", "starred_url": "https://api.github.com/users/ageron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ageron/subscriptions", "organizations_url": "https://api.github.com/users/ageron/orgs", "repos_url": "https://api.github.com/users/ageron/repos", "events_url": "https://api.github.com/users/ageron/events{/privacy}", "received_events_url": "https://api.github.com/users/ageron/received_events", "type": "User", "site_admin": false}, "body": "I did my best to emulate the @ operator properly so the tests would work whether on python 3.5+ or with earlier versions.  Simply calling `type(x).__matmul__(x, y)` obviously does not work when `x` is a python array (since it is not defined), but it does not work either when `x` is a NumPy array, because its implementation of `__matmul__()` returns `NotImplemented` when `y` is not a NumPy array and `y` implements `__rmatmul__()`.  Lines 74 to 80 are unused by the current tests, but this code is simple enough and allows adding more tests without bad surprises, so I think it shouldn't be shortened.", "created_at": "2017-03-02T21:56:10Z", "updated_at": "2017-03-07T10:31:30Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8032#discussion_r104039952", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8032", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/104039952"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8032#discussion_r104039952"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8032"}}, "body_html": "<p>I did my best to emulate the @ operator properly so the tests would work whether on python 3.5+ or with earlier versions.  Simply calling <code>type(x).__matmul__(x, y)</code> obviously does not work when <code>x</code> is a python array (since it is not defined), but it does not work either when <code>x</code> is a NumPy array, because its implementation of <code>__matmul__()</code> returns <code>NotImplemented</code> when <code>y</code> is not a NumPy array and <code>y</code> implements <code>__rmatmul__()</code>.  Lines 74 to 80 are unused by the current tests, but this code is simple enough and allows adding more tests without bad surprises, so I think it shouldn't be shortened.</p>", "body_text": "I did my best to emulate the @ operator properly so the tests would work whether on python 3.5+ or with earlier versions.  Simply calling type(x).__matmul__(x, y) obviously does not work when x is a python array (since it is not defined), but it does not work either when x is a NumPy array, because its implementation of __matmul__() returns NotImplemented when y is not a NumPy array and y implements __rmatmul__().  Lines 74 to 80 are unused by the current tests, but this code is simple enough and allows adding more tests without bad surprises, so I think it shouldn't be shortened."}