{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/379486440", "html_url": "https://github.com/tensorflow/tensorflow/issues/18292#issuecomment-379486440", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18292", "id": 379486440, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTQ4NjQ0MA==", "user": {"login": "voegtlel", "id": 5764745, "node_id": "MDQ6VXNlcjU3NjQ3NDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5764745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voegtlel", "html_url": "https://github.com/voegtlel", "followers_url": "https://api.github.com/users/voegtlel/followers", "following_url": "https://api.github.com/users/voegtlel/following{/other_user}", "gists_url": "https://api.github.com/users/voegtlel/gists{/gist_id}", "starred_url": "https://api.github.com/users/voegtlel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voegtlel/subscriptions", "organizations_url": "https://api.github.com/users/voegtlel/orgs", "repos_url": "https://api.github.com/users/voegtlel/repos", "events_url": "https://api.github.com/users/voegtlel/events{/privacy}", "received_events_url": "https://api.github.com/users/voegtlel/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-07T17:37:40Z", "updated_at": "2018-04-07T17:38:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a>: I can easily fix my code, now that I know where the leak comes from. The problem here is rather the pitfall which creates the leak (i.e. hidden/unobvious references to the graph from your py_func, which can be really hard to find). So if the weakref was ment for my py_func, that's actually not the issue. If you suggest replacing the direct reference in the <code>FuncRegistry</code>, that is not helpful, because then I guess the functions might actually be deleted though they are being used internally by the graph. Clarified that in the description.</p>", "body_text": "@facaiy: I can easily fix my code, now that I know where the leak comes from. The problem here is rather the pitfall which creates the leak (i.e. hidden/unobvious references to the graph from your py_func, which can be really hard to find). So if the weakref was ment for my py_func, that's actually not the issue. If you suggest replacing the direct reference in the FuncRegistry, that is not helpful, because then I guess the functions might actually be deleted though they are being used internally by the graph. Clarified that in the description.", "body": "@facaiy: I can easily fix my code, now that I know where the leak comes from. The problem here is rather the pitfall which creates the leak (i.e. hidden/unobvious references to the graph from your py_func, which can be really hard to find). So if the weakref was ment for my py_func, that's actually not the issue. If you suggest replacing the direct reference in the `FuncRegistry`, that is not helpful, because then I guess the functions might actually be deleted though they are being used internally by the graph. Clarified that in the description."}