{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/418738794", "html_url": "https://github.com/tensorflow/tensorflow/issues/22068#issuecomment-418738794", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22068", "id": 418738794, "node_id": "MDEyOklzc3VlQ29tbWVudDQxODczODc5NA==", "user": {"login": "shashank2710", "id": 25356349, "node_id": "MDQ6VXNlcjI1MzU2MzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/25356349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shashank2710", "html_url": "https://github.com/shashank2710", "followers_url": "https://api.github.com/users/shashank2710/followers", "following_url": "https://api.github.com/users/shashank2710/following{/other_user}", "gists_url": "https://api.github.com/users/shashank2710/gists{/gist_id}", "starred_url": "https://api.github.com/users/shashank2710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shashank2710/subscriptions", "organizations_url": "https://api.github.com/users/shashank2710/orgs", "repos_url": "https://api.github.com/users/shashank2710/repos", "events_url": "https://api.github.com/users/shashank2710/events{/privacy}", "received_events_url": "https://api.github.com/users/shashank2710/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-05T13:52:23Z", "updated_at": "2018-09-05T14:12:14Z", "author_association": "NONE", "body_html": "<p>Have I written custom code: yes<br>\nOS Platform and Distribution: Ubuntu 18.04<br>\nTensorFlow installed from: Source<br>\nTensorFlow version: 1.10 (CPU version)<br>\nBazel version:0.16<br>\nCUDA/cuDNN version: 9.0 (installed but not used)<br>\nGPU model and memory: Nvidia 1070 (present but not used)<br>\nExact command to reproduce: N/A<br>\nMobile device No</p>\n<p>Issues</p>\n<ul>\n<li>Predicted values is higher than one. (It accumulates after every loop? Even though the tensor is cleared at the beginning of the loop )</li>\n</ul>\n<hr>\n<p>Attached herewith is the code</p>\n<pre><code>#include &lt;fstream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\n#include \"tensorflow/cc/ops/const_op.h\"\n#include \"tensorflow/cc/ops/image_ops.h\"\n#include \"tensorflow/cc/ops/standard_ops.h\"\n#include \"tensorflow/core/framework/graph.pb.h\"\n#include \"tensorflow/core/graph/default_device.h\"\n#include \"tensorflow/core/graph/graph_def_builder.h\"\n#include \"tensorflow/core/lib/core/threadpool.h\"\n#include \"tensorflow/core/lib/io/path.h\"\n#include \"tensorflow/core/lib/strings/stringprintf.h\"\n#include \"tensorflow/core/platform/init_main.h\"\n#include \"tensorflow/core/public/session.h\"\n#include \"tensorflow/core/util/command_line_flags.h\"\n\n#include &lt;opencv2/core/mat.hpp&gt;\n#include &lt;opencv2/videoio.hpp&gt;\n#include &lt;opencv2/highgui/highgui.hpp&gt;\n#include &lt;opencv2/imgproc/imgproc.hpp&gt;\n\nusing tensorflow::Flag;\nusing tensorflow::Tensor;\nusing tensorflow::Status;\nusing tensorflow::string;\nusing tensorflow::int32;\n\nusing namespace std;\nusing namespace cv;\n\n\nconst int64 tf_height = 128;\nconst int64 tf_width = 128;\n\nint main()\n{\n\tstring folderpath = \"/home/ssatyanarayana/OCR-Engine-Local/data/alphabets/myTest/*.jpg\";\n\tstd::vector&lt;String&gt; filenames;\n\tcv::glob(folderpath, filenames);\n\n\tstring Labels = \"/home/ssatyanarayana/OCR-Engine-Local/k2tf-20180827143102/indices.txt\";\n\n\t// Set input &amp; output nodes names\n\tstd::string inputLayer = \"conv2d_1_input\";\n\tstd::string outputLayer = \"k2tfout_0\";\n\n\t//Initializing the Graph\n\ttensorflow::GraphDef graph_def;\n\n\t// Specify file location of Output Graph\n\tstd::string graphFile = \"/home/ssatyanarayana/OCR-Engine-Local/output_graph.pb\";\n\n\t// Loading the graph to the given variable\n\ttensorflow::Status graphLoadedStatus = ReadBinaryProto(tensorflow::Env::Default(),graphFile,&amp;graph_def);\n\tif (!graphLoadedStatus.ok()){\n\t\tstd::cout &lt;&lt; graphLoadedStatus.ToString()&lt;&lt;std::endl;\n\t\treturn 1;\n\t}\n\n\tstd::vector&lt;Tensor&gt; outputs;\n\tstd::vector&lt;std::pair&lt;float,std::string&gt;&gt; sorted;\n\n\tfor (size_t i=0; i&lt;filenames.size(); i++)\n\t{\n\t\tcv::Mat image = cv::imread(filenames[i]);\n\n\t\tTensor image_tensor (tensorflow::DT_FLOAT, tensorflow::TensorShape{1,tf_height,tf_width,3});\n\t\timage.convertTo(image, CV_32FC3);\n\t\ttensorflow::StringPiece tmp_data = image_tensor.tensor_data();\n\t\tmemcpy(const_cast&lt;char*&gt;(tmp_data.data()), (image.data), tf_height * tf_width * sizeof(float));\n\n\t\t// Creating a Session with the Graph\n\t\tstd::unique_ptr&lt;tensorflow::Session&gt; session(tensorflow::NewSession(tensorflow::SessionOptions()));\n\t\t//session-&gt;tensorflow::reset(tensorflow::NewSession(tensorflow::SessionOptions()));\n\t\ttensorflow::Status session_create_status = session-&gt;Create(graph_def);\n\n\t\tstd::vector&lt;std::pair&lt;string, tensorflow::Tensor&gt;&gt; inputs = {{inputLayer, image_tensor}};\n\t\toutputs.clear();\n\t\tStatus runStatus = session-&gt;Run(inputs, {outputLayer}, {}, &amp;outputs);\n\t\tif (!runStatus.ok()) {\n\t\t\tLOG(ERROR) &lt;&lt; \"Running model failed: \" &lt;&lt; runStatus;\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Labels of the Prediction\n\t\tstd::cout &lt;&lt; \"final output size=\" &lt;&lt; outputs.size() &lt;&lt; std::endl;\n\t\ttensorflow::Tensor output = std::move(outputs.at(0));\n\t\tauto scores = output.flat&lt;float&gt;();\n\t\tstd::cout &lt;&lt; \"scores size=\" &lt;&lt; scores.size() &lt;&lt; std::endl;\n\n\t\t// Load Label File for comparison\n\t\tstd::string labelfile = \"/home/ssatyanarayana/OCR-Engine/data/alphabets/labels.txt\";\n\t\tstd::ifstream label(labelfile);\n\t\tstd::string line;\n\t\tstd::cout&lt;&lt;\"Label File Loaded\"&lt;&lt;std::endl;\n\n\t\t// Sort output for Top Labels\n\t\tsorted.clear();\n\t\tfor (unsigned int i =0; i&lt;=1000 ;++i){\n\t\t\tstd::getline(label,line);\n\t\t\tsorted.emplace_back(scores(i),line);\n\t\t}\n\n\t\tstd::sort(sorted.begin(),sorted.end());\n\t\tstd::reverse(sorted.begin(),sorted.end());\n\t\tstd::cout &lt;&lt; \"size of the sorted file is \"&lt;&lt;sorted.size()&lt;&lt; std::endl;\n\n\t\tfor(unsigned int i =0 ; i&lt; 5;++i)\n\t\t{\n\t\t\tstd::cout &lt;&lt; \"The output of the current graph has category  \" &lt;&lt; sorted[i].second &lt;&lt; \" with probability \"&lt;&lt; sorted[i].first &lt;&lt; std::endl;\n\t\t}\n\n\t\tcv::imshow(\"Original Image\",image);\n\t\tcv::waitKey();\n\t\tsession-&gt;Close();\n\t\timage.release();\n\t}\n    return 0;\n}\n</code></pre>\n<p>Thanks in advance for the help!!</p>", "body_text": "Have I written custom code: yes\nOS Platform and Distribution: Ubuntu 18.04\nTensorFlow installed from: Source\nTensorFlow version: 1.10 (CPU version)\nBazel version:0.16\nCUDA/cuDNN version: 9.0 (installed but not used)\nGPU model and memory: Nvidia 1070 (present but not used)\nExact command to reproduce: N/A\nMobile device No\nIssues\n\nPredicted values is higher than one. (It accumulates after every loop? Even though the tensor is cleared at the beginning of the loop )\n\n\nAttached herewith is the code\n#include <fstream>\n#include <utility>\n#include <vector>\n#include <iostream>\n\n#include \"tensorflow/cc/ops/const_op.h\"\n#include \"tensorflow/cc/ops/image_ops.h\"\n#include \"tensorflow/cc/ops/standard_ops.h\"\n#include \"tensorflow/core/framework/graph.pb.h\"\n#include \"tensorflow/core/graph/default_device.h\"\n#include \"tensorflow/core/graph/graph_def_builder.h\"\n#include \"tensorflow/core/lib/core/threadpool.h\"\n#include \"tensorflow/core/lib/io/path.h\"\n#include \"tensorflow/core/lib/strings/stringprintf.h\"\n#include \"tensorflow/core/platform/init_main.h\"\n#include \"tensorflow/core/public/session.h\"\n#include \"tensorflow/core/util/command_line_flags.h\"\n\n#include <opencv2/core/mat.hpp>\n#include <opencv2/videoio.hpp>\n#include <opencv2/highgui/highgui.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n\nusing tensorflow::Flag;\nusing tensorflow::Tensor;\nusing tensorflow::Status;\nusing tensorflow::string;\nusing tensorflow::int32;\n\nusing namespace std;\nusing namespace cv;\n\n\nconst int64 tf_height = 128;\nconst int64 tf_width = 128;\n\nint main()\n{\n\tstring folderpath = \"/home/ssatyanarayana/OCR-Engine-Local/data/alphabets/myTest/*.jpg\";\n\tstd::vector<String> filenames;\n\tcv::glob(folderpath, filenames);\n\n\tstring Labels = \"/home/ssatyanarayana/OCR-Engine-Local/k2tf-20180827143102/indices.txt\";\n\n\t// Set input & output nodes names\n\tstd::string inputLayer = \"conv2d_1_input\";\n\tstd::string outputLayer = \"k2tfout_0\";\n\n\t//Initializing the Graph\n\ttensorflow::GraphDef graph_def;\n\n\t// Specify file location of Output Graph\n\tstd::string graphFile = \"/home/ssatyanarayana/OCR-Engine-Local/output_graph.pb\";\n\n\t// Loading the graph to the given variable\n\ttensorflow::Status graphLoadedStatus = ReadBinaryProto(tensorflow::Env::Default(),graphFile,&graph_def);\n\tif (!graphLoadedStatus.ok()){\n\t\tstd::cout << graphLoadedStatus.ToString()<<std::endl;\n\t\treturn 1;\n\t}\n\n\tstd::vector<Tensor> outputs;\n\tstd::vector<std::pair<float,std::string>> sorted;\n\n\tfor (size_t i=0; i<filenames.size(); i++)\n\t{\n\t\tcv::Mat image = cv::imread(filenames[i]);\n\n\t\tTensor image_tensor (tensorflow::DT_FLOAT, tensorflow::TensorShape{1,tf_height,tf_width,3});\n\t\timage.convertTo(image, CV_32FC3);\n\t\ttensorflow::StringPiece tmp_data = image_tensor.tensor_data();\n\t\tmemcpy(const_cast<char*>(tmp_data.data()), (image.data), tf_height * tf_width * sizeof(float));\n\n\t\t// Creating a Session with the Graph\n\t\tstd::unique_ptr<tensorflow::Session> session(tensorflow::NewSession(tensorflow::SessionOptions()));\n\t\t//session->tensorflow::reset(tensorflow::NewSession(tensorflow::SessionOptions()));\n\t\ttensorflow::Status session_create_status = session->Create(graph_def);\n\n\t\tstd::vector<std::pair<string, tensorflow::Tensor>> inputs = {{inputLayer, image_tensor}};\n\t\toutputs.clear();\n\t\tStatus runStatus = session->Run(inputs, {outputLayer}, {}, &outputs);\n\t\tif (!runStatus.ok()) {\n\t\t\tLOG(ERROR) << \"Running model failed: \" << runStatus;\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Labels of the Prediction\n\t\tstd::cout << \"final output size=\" << outputs.size() << std::endl;\n\t\ttensorflow::Tensor output = std::move(outputs.at(0));\n\t\tauto scores = output.flat<float>();\n\t\tstd::cout << \"scores size=\" << scores.size() << std::endl;\n\n\t\t// Load Label File for comparison\n\t\tstd::string labelfile = \"/home/ssatyanarayana/OCR-Engine/data/alphabets/labels.txt\";\n\t\tstd::ifstream label(labelfile);\n\t\tstd::string line;\n\t\tstd::cout<<\"Label File Loaded\"<<std::endl;\n\n\t\t// Sort output for Top Labels\n\t\tsorted.clear();\n\t\tfor (unsigned int i =0; i<=1000 ;++i){\n\t\t\tstd::getline(label,line);\n\t\t\tsorted.emplace_back(scores(i),line);\n\t\t}\n\n\t\tstd::sort(sorted.begin(),sorted.end());\n\t\tstd::reverse(sorted.begin(),sorted.end());\n\t\tstd::cout << \"size of the sorted file is \"<<sorted.size()<< std::endl;\n\n\t\tfor(unsigned int i =0 ; i< 5;++i)\n\t\t{\n\t\t\tstd::cout << \"The output of the current graph has category  \" << sorted[i].second << \" with probability \"<< sorted[i].first << std::endl;\n\t\t}\n\n\t\tcv::imshow(\"Original Image\",image);\n\t\tcv::waitKey();\n\t\tsession->Close();\n\t\timage.release();\n\t}\n    return 0;\n}\n\nThanks in advance for the help!!", "body": "Have I written custom code: yes\r\nOS Platform and Distribution: Ubuntu 18.04\r\nTensorFlow installed from: Source\r\nTensorFlow version: 1.10 (CPU version)\r\nBazel version:0.16\r\nCUDA/cuDNN version: 9.0 (installed but not used)\r\nGPU model and memory: Nvidia 1070 (present but not used)\r\nExact command to reproduce: N/A\r\nMobile device No\r\n\r\nIssues\r\n- Predicted values is higher than one. (It accumulates after every loop? Even though the tensor is cleared at the beginning of the loop )\r\n------------------------------------\r\nAttached herewith is the code\r\n\r\n```\r\n#include <fstream>\r\n#include <utility>\r\n#include <vector>\r\n#include <iostream>\r\n\r\n#include \"tensorflow/cc/ops/const_op.h\"\r\n#include \"tensorflow/cc/ops/image_ops.h\"\r\n#include \"tensorflow/cc/ops/standard_ops.h\"\r\n#include \"tensorflow/core/framework/graph.pb.h\"\r\n#include \"tensorflow/core/graph/default_device.h\"\r\n#include \"tensorflow/core/graph/graph_def_builder.h\"\r\n#include \"tensorflow/core/lib/core/threadpool.h\"\r\n#include \"tensorflow/core/lib/io/path.h\"\r\n#include \"tensorflow/core/lib/strings/stringprintf.h\"\r\n#include \"tensorflow/core/platform/init_main.h\"\r\n#include \"tensorflow/core/public/session.h\"\r\n#include \"tensorflow/core/util/command_line_flags.h\"\r\n\r\n#include <opencv2/core/mat.hpp>\r\n#include <opencv2/videoio.hpp>\r\n#include <opencv2/highgui/highgui.hpp>\r\n#include <opencv2/imgproc/imgproc.hpp>\r\n\r\nusing tensorflow::Flag;\r\nusing tensorflow::Tensor;\r\nusing tensorflow::Status;\r\nusing tensorflow::string;\r\nusing tensorflow::int32;\r\n\r\nusing namespace std;\r\nusing namespace cv;\r\n\r\n\r\nconst int64 tf_height = 128;\r\nconst int64 tf_width = 128;\r\n\r\nint main()\r\n{\r\n\tstring folderpath = \"/home/ssatyanarayana/OCR-Engine-Local/data/alphabets/myTest/*.jpg\";\r\n\tstd::vector<String> filenames;\r\n\tcv::glob(folderpath, filenames);\r\n\r\n\tstring Labels = \"/home/ssatyanarayana/OCR-Engine-Local/k2tf-20180827143102/indices.txt\";\r\n\r\n\t// Set input & output nodes names\r\n\tstd::string inputLayer = \"conv2d_1_input\";\r\n\tstd::string outputLayer = \"k2tfout_0\";\r\n\r\n\t//Initializing the Graph\r\n\ttensorflow::GraphDef graph_def;\r\n\r\n\t// Specify file location of Output Graph\r\n\tstd::string graphFile = \"/home/ssatyanarayana/OCR-Engine-Local/output_graph.pb\";\r\n\r\n\t// Loading the graph to the given variable\r\n\ttensorflow::Status graphLoadedStatus = ReadBinaryProto(tensorflow::Env::Default(),graphFile,&graph_def);\r\n\tif (!graphLoadedStatus.ok()){\r\n\t\tstd::cout << graphLoadedStatus.ToString()<<std::endl;\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tstd::vector<Tensor> outputs;\r\n\tstd::vector<std::pair<float,std::string>> sorted;\r\n\r\n\tfor (size_t i=0; i<filenames.size(); i++)\r\n\t{\r\n\t\tcv::Mat image = cv::imread(filenames[i]);\r\n\r\n\t\tTensor image_tensor (tensorflow::DT_FLOAT, tensorflow::TensorShape{1,tf_height,tf_width,3});\r\n\t\timage.convertTo(image, CV_32FC3);\r\n\t\ttensorflow::StringPiece tmp_data = image_tensor.tensor_data();\r\n\t\tmemcpy(const_cast<char*>(tmp_data.data()), (image.data), tf_height * tf_width * sizeof(float));\r\n\r\n\t\t// Creating a Session with the Graph\r\n\t\tstd::unique_ptr<tensorflow::Session> session(tensorflow::NewSession(tensorflow::SessionOptions()));\r\n\t\t//session->tensorflow::reset(tensorflow::NewSession(tensorflow::SessionOptions()));\r\n\t\ttensorflow::Status session_create_status = session->Create(graph_def);\r\n\r\n\t\tstd::vector<std::pair<string, tensorflow::Tensor>> inputs = {{inputLayer, image_tensor}};\r\n\t\toutputs.clear();\r\n\t\tStatus runStatus = session->Run(inputs, {outputLayer}, {}, &outputs);\r\n\t\tif (!runStatus.ok()) {\r\n\t\t\tLOG(ERROR) << \"Running model failed: \" << runStatus;\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t// Labels of the Prediction\r\n\t\tstd::cout << \"final output size=\" << outputs.size() << std::endl;\r\n\t\ttensorflow::Tensor output = std::move(outputs.at(0));\r\n\t\tauto scores = output.flat<float>();\r\n\t\tstd::cout << \"scores size=\" << scores.size() << std::endl;\r\n\r\n\t\t// Load Label File for comparison\r\n\t\tstd::string labelfile = \"/home/ssatyanarayana/OCR-Engine/data/alphabets/labels.txt\";\r\n\t\tstd::ifstream label(labelfile);\r\n\t\tstd::string line;\r\n\t\tstd::cout<<\"Label File Loaded\"<<std::endl;\r\n\r\n\t\t// Sort output for Top Labels\r\n\t\tsorted.clear();\r\n\t\tfor (unsigned int i =0; i<=1000 ;++i){\r\n\t\t\tstd::getline(label,line);\r\n\t\t\tsorted.emplace_back(scores(i),line);\r\n\t\t}\r\n\r\n\t\tstd::sort(sorted.begin(),sorted.end());\r\n\t\tstd::reverse(sorted.begin(),sorted.end());\r\n\t\tstd::cout << \"size of the sorted file is \"<<sorted.size()<< std::endl;\r\n\r\n\t\tfor(unsigned int i =0 ; i< 5;++i)\r\n\t\t{\r\n\t\t\tstd::cout << \"The output of the current graph has category  \" << sorted[i].second << \" with probability \"<< sorted[i].first << std::endl;\r\n\t\t}\r\n\r\n\t\tcv::imshow(\"Original Image\",image);\r\n\t\tcv::waitKey();\r\n\t\tsession->Close();\r\n\t\timage.release();\r\n\t}\r\n    return 0;\r\n}\r\n```\r\n\r\nThanks in advance for the help!!"}