{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/324969847", "html_url": "https://github.com/tensorflow/tensorflow/issues/11674#issuecomment-324969847", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11674", "id": 324969847, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDk2OTg0Nw==", "user": {"login": "martin-gorner", "id": 959847, "node_id": "MDQ6VXNlcjk1OTg0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/959847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martin-gorner", "html_url": "https://github.com/martin-gorner", "followers_url": "https://api.github.com/users/martin-gorner/followers", "following_url": "https://api.github.com/users/martin-gorner/following{/other_user}", "gists_url": "https://api.github.com/users/martin-gorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/martin-gorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martin-gorner/subscriptions", "organizations_url": "https://api.github.com/users/martin-gorner/orgs", "repos_url": "https://api.github.com/users/martin-gorner/repos", "events_url": "https://api.github.com/users/martin-gorner/events{/privacy}", "received_events_url": "https://api.github.com/users/martin-gorner/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-25T16:25:16Z", "updated_at": "2017-08-25T16:25:34Z", "author_association": "NONE", "body_html": "<p>I confirm this is annoying.<br>\nThe previous contract was clear. Whatever the serving_input_fn function returns as \"features\" is the same thing that model_fn will accept as \"features\". Now there is this additional constraint for the features to be a dictionary. This is unexpected, undocumented and will make a lot of people stumble.</p>\n<p>It is also unnecessary. Yes, you need to name your things properly in communication protocols but the serving_input_fn function is there precisely so that you can unpackage your data from the comms protocol and transform it it the \"features\" that your model understands.</p>\n<p>The two lines where this now break seem to have been written recently and neither needs the features to be a dictionary. The breakage seems to be unintentional:<br>\n(saved_model_export_utils.py L163) tests for \u201cif features\u201d which fails on a Tensor.<br>\n(estimator.py L1269) accesses features.keys which fails.</p>", "body_text": "I confirm this is annoying.\nThe previous contract was clear. Whatever the serving_input_fn function returns as \"features\" is the same thing that model_fn will accept as \"features\". Now there is this additional constraint for the features to be a dictionary. This is unexpected, undocumented and will make a lot of people stumble.\nIt is also unnecessary. Yes, you need to name your things properly in communication protocols but the serving_input_fn function is there precisely so that you can unpackage your data from the comms protocol and transform it it the \"features\" that your model understands.\nThe two lines where this now break seem to have been written recently and neither needs the features to be a dictionary. The breakage seems to be unintentional:\n(saved_model_export_utils.py L163) tests for \u201cif features\u201d which fails on a Tensor.\n(estimator.py L1269) accesses features.keys which fails.", "body": "I confirm this is annoying.\r\nThe previous contract was clear. Whatever the serving_input_fn function returns as \"features\" is the same thing that model_fn will accept as \"features\". Now there is this additional constraint for the features to be a dictionary. This is unexpected, undocumented and will make a lot of people stumble.\r\n\r\nIt is also unnecessary. Yes, you need to name your things properly in communication protocols but the serving_input_fn function is there precisely so that you can unpackage your data from the comms protocol and transform it it the \"features\" that your model understands.\r\n\r\nThe two lines where this now break seem to have been written recently and neither needs the features to be a dictionary. The breakage seems to be unintentional:\r\n(saved_model_export_utils.py L163) tests for \u201cif features\u201d which fails on a Tensor.\r\n(estimator.py L1269) accesses features.keys which fails."}