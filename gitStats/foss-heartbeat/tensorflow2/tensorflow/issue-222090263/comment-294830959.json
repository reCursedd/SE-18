{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/294830959", "html_url": "https://github.com/tensorflow/tensorflow/issues/9262#issuecomment-294830959", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9262", "id": 294830959, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDgzMDk1OQ==", "user": {"login": "StarvingMarvin", "id": 56292, "node_id": "MDQ6VXNlcjU2Mjky", "avatar_url": "https://avatars3.githubusercontent.com/u/56292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StarvingMarvin", "html_url": "https://github.com/StarvingMarvin", "followers_url": "https://api.github.com/users/StarvingMarvin/followers", "following_url": "https://api.github.com/users/StarvingMarvin/following{/other_user}", "gists_url": "https://api.github.com/users/StarvingMarvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/StarvingMarvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StarvingMarvin/subscriptions", "organizations_url": "https://api.github.com/users/StarvingMarvin/orgs", "repos_url": "https://api.github.com/users/StarvingMarvin/repos", "events_url": "https://api.github.com/users/StarvingMarvin/events{/privacy}", "received_events_url": "https://api.github.com/users/StarvingMarvin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-18T12:56:19Z", "updated_at": "2017-04-18T12:56:19Z", "author_association": "NONE", "body_html": "<p>Thank you all for your comments, they made me explore this issue a bit further, and get to the following conclusions:</p>\n<ul>\n<li>As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1217238\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/shoyer\">@shoyer</a> observed, <code>np.take()</code> works because numpy does <code>np.asaray()</code>, but that means that entire array is loaded into memory.</li>\n<li>pytables does support \"fancy\" indexing, but arity must still match with array's dimensions</li>\n<li>but they do support ellipsis, so <code>data[list,...]</code> actually works.</li>\n</ul>\n<p>At this point I feel this should be treated as an issue with pytables. Doing <code>np.asarray(column)</code> would actually be a regression in my case, because it would slow things down due to copying (things <em>are</em> slow with the fix I mentioned in the issue, and I now have an idea why). Changing tensorflow code to add ellipsis when reading a batch from column is what I'll do locally, to see if thing are gonna speed up, but I feel it's too specific workaround to be merged upstream.</p>", "body_text": "Thank you all for your comments, they made me explore this issue a bit further, and get to the following conclusions:\n\nAs @shoyer observed, np.take() works because numpy does np.asaray(), but that means that entire array is loaded into memory.\npytables does support \"fancy\" indexing, but arity must still match with array's dimensions\nbut they do support ellipsis, so data[list,...] actually works.\n\nAt this point I feel this should be treated as an issue with pytables. Doing np.asarray(column) would actually be a regression in my case, because it would slow things down due to copying (things are slow with the fix I mentioned in the issue, and I now have an idea why). Changing tensorflow code to add ellipsis when reading a batch from column is what I'll do locally, to see if thing are gonna speed up, but I feel it's too specific workaround to be merged upstream.", "body": "Thank you all for your comments, they made me explore this issue a bit further, and get to the following conclusions:\r\n\r\n- As @shoyer observed, `np.take()` works because numpy does `np.asaray()`, but that means that entire array is loaded into memory.\r\n- pytables does support \"fancy\" indexing, but arity must still match with array's dimensions\r\n- but they do support ellipsis, so `data[list,...]` actually works.\r\n\r\nAt this point I feel this should be treated as an issue with pytables. Doing `np.asarray(column)` would actually be a regression in my case, because it would slow things down due to copying (things *are* slow with the fix I mentioned in the issue, and I now have an idea why). Changing tensorflow code to add ellipsis when reading a batch from column is what I'll do locally, to see if thing are gonna speed up, but I feel it's too specific workaround to be merged upstream."}