{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/362662437", "html_url": "https://github.com/tensorflow/tensorflow/issues/16689#issuecomment-362662437", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16689", "id": 362662437, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjY2MjQzNw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-02T18:14:56Z", "updated_at": "2018-02-02T18:14:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It should be possible to do something here, although the <code>from_generator()</code> signature would need to expand (e.g. with <code>output_classes</code>?) to provide a way for the caller to specify that an output should be interpreted as a <code>tf.SparseTensor</code>. I've marked this as \"contributions welcome\", since it is unlikely that anyone on the team will get to this for a while, and there is a workaround as follows:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">generator</span>():\n    indices <span class=\"pl-k\">=</span> [(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)]\n    values <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">1</span>.,)\n    shape <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>)\n    <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n        <span class=\"pl-k\">yield</span> (indices, values, shape)\n\ndataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_generator(generator, (tf.int64, tf.float32, tf.int64))\ndataset <span class=\"pl-k\">=</span> dataset.map(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">v</span>, <span class=\"pl-smi\">s</span>: tf.SparseTensor(i, v, s))\niterator <span class=\"pl-k\">=</span> dataset.make_one_shot_iterator()\n\nsample <span class=\"pl-k\">=</span> iterator.get_next()\nss <span class=\"pl-k\">=</span> tf.sparse_reduce_sum(sample)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    _ss <span class=\"pl-k\">=</span> sess.run(ss)</pre></div>\n<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1072079\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jsimsa\">@jsimsa</a></p>", "body_text": "It should be possible to do something here, although the from_generator() signature would need to expand (e.g. with output_classes?) to provide a way for the caller to specify that an output should be interpreted as a tf.SparseTensor. I've marked this as \"contributions welcome\", since it is unlikely that anyone on the team will get to this for a while, and there is a workaround as follows:\ndef generator():\n    indices = [(1, 1)]\n    values = (1.,)\n    shape = (3, 3)\n    while True:\n        yield (indices, values, shape)\n\ndataset = tf.data.Dataset.from_generator(generator, (tf.int64, tf.float32, tf.int64))\ndataset = dataset.map(lambda i, v, s: tf.SparseTensor(i, v, s))\niterator = dataset.make_one_shot_iterator()\n\nsample = iterator.get_next()\nss = tf.sparse_reduce_sum(sample)\nwith tf.Session() as sess:\n    _ss = sess.run(ss)\n/cc @jsimsa", "body": "It should be possible to do something here, although the `from_generator()` signature would need to expand (e.g. with `output_classes`?) to provide a way for the caller to specify that an output should be interpreted as a `tf.SparseTensor`. I've marked this as \"contributions welcome\", since it is unlikely that anyone on the team will get to this for a while, and there is a workaround as follows:\r\n\r\n```python\r\ndef generator():\r\n    indices = [(1, 1)]\r\n    values = (1.,)\r\n    shape = (3, 3)\r\n    while True:\r\n        yield (indices, values, shape)\r\n\r\ndataset = tf.data.Dataset.from_generator(generator, (tf.int64, tf.float32, tf.int64))\r\ndataset = dataset.map(lambda i, v, s: tf.SparseTensor(i, v, s))\r\niterator = dataset.make_one_shot_iterator()\r\n\r\nsample = iterator.get_next()\r\nss = tf.sparse_reduce_sum(sample)\r\nwith tf.Session() as sess:\r\n    _ss = sess.run(ss)\r\n```\r\n\r\n/cc @jsimsa "}