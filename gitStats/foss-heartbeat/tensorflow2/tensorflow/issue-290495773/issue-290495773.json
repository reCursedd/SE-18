{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16290", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16290/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16290/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16290/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16290", "id": 290495773, "node_id": "MDU6SXNzdWUyOTA0OTU3NzM=", "number": 16290, "title": "Bug in session initialization?", "user": {"login": "Hoeze", "id": 1200058, "node_id": "MDQ6VXNlcjEyMDAwNTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1200058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hoeze", "html_url": "https://github.com/Hoeze", "followers_url": "https://api.github.com/users/Hoeze/followers", "following_url": "https://api.github.com/users/Hoeze/following{/other_user}", "gists_url": "https://api.github.com/users/Hoeze/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hoeze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hoeze/subscriptions", "organizations_url": "https://api.github.com/users/Hoeze/orgs", "repos_url": "https://api.github.com/users/Hoeze/repos", "events_url": "https://api.github.com/users/Hoeze/events{/privacy}", "received_events_url": "https://api.github.com/users/Hoeze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-22T15:02:36Z", "updated_at": "2018-01-24T03:48:37Z", "closed_at": "2018-01-23T16:03:00Z", "author_association": "NONE", "body_html": "<p>Initializing a variable depending on a placeholder does not work:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nx <span class=\"pl-k\">=</span> np.random.normal(<span class=\"pl-v\">loc</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">25</span>])\n\nsample_data <span class=\"pl-k\">=</span> tf.placeholder(tf.float32)\n\nmu <span class=\"pl-k\">=</span> tf.Variable(tf.reduce_mean(sample_data, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>),\n                 <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32,\n                 <span class=\"pl-v\">validate_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>,\n                 <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mu<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer(), <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{sample_data: x})\n    <span class=\"pl-c1\">print</span>(sess.run(mu))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>########################################## REPEAT:</span>\n\nx <span class=\"pl-k\">=</span> np.random.normal(<span class=\"pl-v\">loc</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">25</span>])\n\nsample_data <span class=\"pl-k\">=</span> tf.placeholder(tf.float32)\n\nmu <span class=\"pl-k\">=</span> tf.Variable(tf.reduce_mean(sample_data, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>),\n                 <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32,\n                 <span class=\"pl-v\">validate_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>,\n                 <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mu<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer(), <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{sample_data: x})\n    <span class=\"pl-c1\">print</span>(sess.run(mu))</pre></div>\n<h3>Error Message:</h3>\n<blockquote>\n<p>tensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'Placeholder' with dtype float<br>\n[[Node: Placeholder = Placeholder<a href=\"\">dtype=DT_FLOAT, shape=, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"</a>]]</p>\n</blockquote>\n<p>The interesting part about this is that the first initialization works, but the second one does not.<br>\nThis is really annoying if you don't know that behaviour and you try to build some application with interactive python shells.</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nyes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 17.10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nv1.4.0-19-ga52c8d9 1.4.1</li>\n<li><strong>Python version</strong>:<br>\n3.6.3</li>\n</ul>", "body_text": "Initializing a variable depending on a placeholder does not work:\nimport tensorflow as tf\nimport numpy as np\n\nx = np.random.normal(loc=5, size=[10, 25])\n\nsample_data = tf.placeholder(tf.float32)\n\nmu = tf.Variable(tf.reduce_mean(sample_data, axis=0),\n                 dtype=tf.float32,\n                 validate_shape=False,\n                 name=\"mu\")\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer(), feed_dict={sample_data: x})\n    print(sess.run(mu))\n\n########################################### REPEAT:\n\nx = np.random.normal(loc=5, size=[10, 25])\n\nsample_data = tf.placeholder(tf.float32)\n\nmu = tf.Variable(tf.reduce_mean(sample_data, axis=0),\n                 dtype=tf.float32,\n                 validate_shape=False,\n                 name=\"mu\")\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer(), feed_dict={sample_data: x})\n    print(sess.run(mu))\nError Message:\n\ntensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'Placeholder' with dtype float\n[[Node: Placeholder = Placeholderdtype=DT_FLOAT, shape=, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]]\n\nThe interesting part about this is that the first initialization works, but the second one does not.\nThis is really annoying if you don't know that behaviour and you try to build some application with interactive python shells.\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nyes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 17.10\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\nv1.4.0-19-ga52c8d9 1.4.1\nPython version:\n3.6.3", "body": "Initializing a variable depending on a placeholder does not work:\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nx = np.random.normal(loc=5, size=[10, 25])\r\n\r\nsample_data = tf.placeholder(tf.float32)\r\n\r\nmu = tf.Variable(tf.reduce_mean(sample_data, axis=0),\r\n                 dtype=tf.float32,\r\n                 validate_shape=False,\r\n                 name=\"mu\")\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer(), feed_dict={sample_data: x})\r\n    print(sess.run(mu))\r\n\r\n########################################### REPEAT:\r\n\r\nx = np.random.normal(loc=5, size=[10, 25])\r\n\r\nsample_data = tf.placeholder(tf.float32)\r\n\r\nmu = tf.Variable(tf.reduce_mean(sample_data, axis=0),\r\n                 dtype=tf.float32,\r\n                 validate_shape=False,\r\n                 name=\"mu\")\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer(), feed_dict={sample_data: x})\r\n    print(sess.run(mu))\r\n```\r\n\r\n### Error Message:\r\n> tensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'Placeholder' with dtype float\r\n> \t [[Node: Placeholder = Placeholder[dtype=DT_FLOAT, shape=<unknown>, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\r\n\r\nThe interesting part about this is that the first initialization works, but the second one does not.\r\nThis is really annoying if you don't know that behaviour and you try to build some application with interactive python shells.\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nyes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 17.10\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\nv1.4.0-19-ga52c8d9 1.4.1\r\n- **Python version**: \r\n3.6.3"}