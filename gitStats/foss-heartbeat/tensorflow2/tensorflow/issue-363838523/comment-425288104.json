{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/425288104", "html_url": "https://github.com/tensorflow/tensorflow/pull/22517#issuecomment-425288104", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22517", "id": 425288104, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTI4ODEwNA==", "user": {"login": "IMBurbank", "id": 21133719, "node_id": "MDQ6VXNlcjIxMTMzNzE5", "avatar_url": "https://avatars1.githubusercontent.com/u/21133719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IMBurbank", "html_url": "https://github.com/IMBurbank", "followers_url": "https://api.github.com/users/IMBurbank/followers", "following_url": "https://api.github.com/users/IMBurbank/following{/other_user}", "gists_url": "https://api.github.com/users/IMBurbank/gists{/gist_id}", "starred_url": "https://api.github.com/users/IMBurbank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IMBurbank/subscriptions", "organizations_url": "https://api.github.com/users/IMBurbank/orgs", "repos_url": "https://api.github.com/users/IMBurbank/repos", "events_url": "https://api.github.com/users/IMBurbank/events{/privacy}", "received_events_url": "https://api.github.com/users/IMBurbank/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-28T01:05:21Z", "updated_at": "2018-09-28T01:06:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>tf_inspect</code> could certainly name the ** parameter based on the call - the module already has two checks to differentiate between python 2/3 and create the current <code>tf_inspect.getfullargspec</code> wrapper.</p>\n<p>We could modify the python 3 struct for this call in <code>tf_inspect</code> to match the <code>getargspec</code> call from python 2 but, analogous to the current situation, it would likely be flagged by python 3 API compatibility checks for the <code>FullArgSpec</code> parameter name change from <code>varkw</code> to <code>keywords</code>.</p>\n<p>We could also modify just the python 2 <code>FullArgSpec</code> struct to use the <code>keywords</code> parameter name; however, the parameter would come back as <code>keywords</code> when using python 2 and <code>varkw</code> when using python 3. This would keep python 2 environments consistent, but any code used by python 2 and 3 would have to avoid testing for only one instance of this parameter name.</p>\n<hr>\n<p>Something that just came to mind (maybe this was the intent of your last post) - since both the python 2 and 3 versions of this function are exposed in the <code>tf_inspect</code> module, and since there's already a shim to make <code>tf_inspect.getfullargspec</code> python 2 compatible - we could add a similar shim such that when <code>tf_inspect.getargspec</code> is called from python 3, it made a call to its current <code>inspect.getfullargspec</code> and had the <code>varkw</code> parameter name changed to <code>keywords</code></p>\n<p><code>tf_inspect</code> would contain two shims: one that made python 2 compatible with <code>getfullargspec</code> calls, and a new one that made python 3 compatible with non-deprecated <code>getargspec</code> calls. When <code>tf_inspect.getfullargspec</code> was called, both would have a ** parameter name of <code>varkw</code>; when <code>tf_inspect.getargspec</code> was called it would be <code>keywords</code>. Under the hood python 2 would always be calling <code>inspect.getargspec</code> and python 3 would be calling <code>inspect.getfullargspec</code>.</p>\n<p>To pass the python 2 API compatibility check, I would also have to change the function calls in other modules back to <code>tf_inspect.getargspec</code>, but python 3 would no longer call the deprecated <code>inspect.getargspec</code>.</p>\n<p>In this scenario, I would recommend maintaining the docstring recommendation to use <code>tf_inspect.getfullargspec</code> moving forward, but neither this function nor <code>getargspec</code> should break anything under the hood.</p>", "body_text": "tf_inspect could certainly name the ** parameter based on the call - the module already has two checks to differentiate between python 2/3 and create the current tf_inspect.getfullargspec wrapper.\nWe could modify the python 3 struct for this call in tf_inspect to match the getargspec call from python 2 but, analogous to the current situation, it would likely be flagged by python 3 API compatibility checks for the FullArgSpec parameter name change from varkw to keywords.\nWe could also modify just the python 2 FullArgSpec struct to use the keywords parameter name; however, the parameter would come back as keywords when using python 2 and varkw when using python 3. This would keep python 2 environments consistent, but any code used by python 2 and 3 would have to avoid testing for only one instance of this parameter name.\n\nSomething that just came to mind (maybe this was the intent of your last post) - since both the python 2 and 3 versions of this function are exposed in the tf_inspect module, and since there's already a shim to make tf_inspect.getfullargspec python 2 compatible - we could add a similar shim such that when tf_inspect.getargspec is called from python 3, it made a call to its current inspect.getfullargspec and had the varkw parameter name changed to keywords\ntf_inspect would contain two shims: one that made python 2 compatible with getfullargspec calls, and a new one that made python 3 compatible with non-deprecated getargspec calls. When tf_inspect.getfullargspec was called, both would have a ** parameter name of varkw; when tf_inspect.getargspec was called it would be keywords. Under the hood python 2 would always be calling inspect.getargspec and python 3 would be calling inspect.getfullargspec.\nTo pass the python 2 API compatibility check, I would also have to change the function calls in other modules back to tf_inspect.getargspec, but python 3 would no longer call the deprecated inspect.getargspec.\nIn this scenario, I would recommend maintaining the docstring recommendation to use tf_inspect.getfullargspec moving forward, but neither this function nor getargspec should break anything under the hood.", "body": "`tf_inspect` could certainly name the ** parameter based on the call - the module already has two checks to differentiate between python 2/3 and create the current `tf_inspect.getfullargspec` wrapper. \r\n\r\nWe could modify the python 3 struct for this call in `tf_inspect` to match the `getargspec` call from python 2 but, analogous to the current situation, it would likely be flagged by python 3 API compatibility checks for the `FullArgSpec` parameter name change from `varkw` to `keywords`.\r\n\r\nWe could also modify just the python 2 `FullArgSpec` struct to use the `keywords` parameter name; however, the parameter would come back as `keywords` when using python 2 and `varkw` when using python 3. This would keep python 2 environments consistent, but any code used by python 2 and 3 would have to avoid testing for only one instance of this parameter name.\r\n\r\n------\r\n\r\nSomething that just came to mind (maybe this was the intent of your last post) - since both the python 2 and 3 versions of this function are exposed in the `tf_inspect` module, and since there's already a shim to make `tf_inspect.getfullargspec` python 2 compatible - we could add a similar shim such that when `tf_inspect.getargspec` is called from python 3, it made a call to its current `inspect.getfullargspec` and had the `varkw` parameter name changed to `keywords`\r\n\r\n`tf_inspect` would contain two shims: one that made python 2 compatible with `getfullargspec` calls, and a new one that made python 3 compatible with non-deprecated `getargspec` calls. When `tf_inspect.getfullargspec` was called, both would have a ** parameter name of `varkw`; when `tf_inspect.getargspec` was called it would be `keywords`. Under the hood python 2 would always be calling `inspect.getargspec` and python 3 would be calling `inspect.getfullargspec`. \r\n\r\nTo pass the python 2 API compatibility check, I would also have to change the function calls in other modules back to `tf_inspect.getargspec`, but python 3 would no longer call the deprecated `inspect.getargspec`. \r\n\r\nIn this scenario, I would recommend maintaining the docstring recommendation to use `tf_inspect.getfullargspec` moving forward, but neither this function nor `getargspec` should break anything under the hood."}