{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/425276591", "html_url": "https://github.com/tensorflow/tensorflow/pull/22517#issuecomment-425276591", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22517", "id": 425276591, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTI3NjU5MQ==", "user": {"login": "IMBurbank", "id": 21133719, "node_id": "MDQ6VXNlcjIxMTMzNzE5", "avatar_url": "https://avatars1.githubusercontent.com/u/21133719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IMBurbank", "html_url": "https://github.com/IMBurbank", "followers_url": "https://api.github.com/users/IMBurbank/followers", "following_url": "https://api.github.com/users/IMBurbank/following{/other_user}", "gists_url": "https://api.github.com/users/IMBurbank/gists{/gist_id}", "starred_url": "https://api.github.com/users/IMBurbank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IMBurbank/subscriptions", "organizations_url": "https://api.github.com/users/IMBurbank/orgs", "repos_url": "https://api.github.com/users/IMBurbank/repos", "events_url": "https://api.github.com/users/IMBurbank/events{/privacy}", "received_events_url": "https://api.github.com/users/IMBurbank/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-27T23:44:48Z", "updated_at": "2018-09-27T23:44:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> the backwards compatibility checks are flagging that the name of the ** parameter changed from <code>keywords</code> to <code>varkw</code> with the change from <code>inspect.getargspec</code> to <code>inspect.getfullargspec</code>. According to <a href=\"https://docs.python.org/3/library/inspect.html\" rel=\"nofollow\">the docs:</a></p>\n<p>From <code>inspect.getargspec</code></p>\n<blockquote>\n<p>Deprecated since version 3.0: Use <code>getfullargspec()</code> for an updated API that is usually a drop-in replacement, but also correctly handles function annotations and keyword-only parameters.</p>\n</blockquote>\n<p>From <code>inspect.getfullargspec</code></p>\n<blockquote>\n<p>Changed in version 3.6: This method was previously documented as deprecated in favour of signature() in Python 3.5, but that decision has been reversed in order to restore a clearly supported standard interface for single-source Python 2/3 code migrating away from the legacy getargspec() API.</p>\n</blockquote>\n<blockquote>\n<p>Changed in version 3.7: Python only explicitly guaranteed that it preserved the declaration order of keyword-only parameters as of version 3.7, although in practice this order had always been preserved in Python 3.</p>\n</blockquote>\n<p>Depending on the importance of this ** parameter's naming, two initial options come to mind:</p>\n<ol>\n<li>Route (some or all of) the functions back to explicitly calling the deprecated <code>inspect.getargspec</code> through <code>tf_inspect.getargspec</code></li>\n</ol>\n<p>This will make the  API compatibility check issue go away, but will also cause python 3 calls to use the deprecated <code>getargspec</code> and bypass the (otherwise) cross-compatible <code>tf_inspect.getfullargspec</code> wrapper.</p>\n<ol start=\"2\">\n<li>Address any upstream issues that would come from the function signature change.</li>\n</ol>\n<p>It seems prudent to make the cross-compatible wrapper work over counting on a deprecated function, but I can't picture what issues the update could create.</p>\n<p>I will say that I'm happy to help however I can with this and future issues. Please advise.</p>", "body_text": "@alextp the backwards compatibility checks are flagging that the name of the ** parameter changed from keywords to varkw with the change from inspect.getargspec to inspect.getfullargspec. According to the docs:\nFrom inspect.getargspec\n\nDeprecated since version 3.0: Use getfullargspec() for an updated API that is usually a drop-in replacement, but also correctly handles function annotations and keyword-only parameters.\n\nFrom inspect.getfullargspec\n\nChanged in version 3.6: This method was previously documented as deprecated in favour of signature() in Python 3.5, but that decision has been reversed in order to restore a clearly supported standard interface for single-source Python 2/3 code migrating away from the legacy getargspec() API.\n\n\nChanged in version 3.7: Python only explicitly guaranteed that it preserved the declaration order of keyword-only parameters as of version 3.7, although in practice this order had always been preserved in Python 3.\n\nDepending on the importance of this ** parameter's naming, two initial options come to mind:\n\nRoute (some or all of) the functions back to explicitly calling the deprecated inspect.getargspec through tf_inspect.getargspec\n\nThis will make the  API compatibility check issue go away, but will also cause python 3 calls to use the deprecated getargspec and bypass the (otherwise) cross-compatible tf_inspect.getfullargspec wrapper.\n\nAddress any upstream issues that would come from the function signature change.\n\nIt seems prudent to make the cross-compatible wrapper work over counting on a deprecated function, but I can't picture what issues the update could create.\nI will say that I'm happy to help however I can with this and future issues. Please advise.", "body": "@alextp the backwards compatibility checks are flagging that the name of the ** parameter changed from `keywords` to `varkw` with the change from `inspect.getargspec` to `inspect.getfullargspec`. According to [the docs:](https://docs.python.org/3/library/inspect.html)\r\n\r\nFrom `inspect.getargspec`\r\n> Deprecated since version 3.0: Use `getfullargspec()` for an updated API that is usually a drop-in replacement, but also correctly handles function annotations and keyword-only parameters.\r\n\r\nFrom `inspect.getfullargspec`\r\n> Changed in version 3.6: This method was previously documented as deprecated in favour of signature() in Python 3.5, but that decision has been reversed in order to restore a clearly supported standard interface for single-source Python 2/3 code migrating away from the legacy getargspec() API.\r\n\r\n> Changed in version 3.7: Python only explicitly guaranteed that it preserved the declaration order of keyword-only parameters as of version 3.7, although in practice this order had always been preserved in Python 3.\r\n\r\nDepending on the importance of this ** parameter's naming, two initial options come to mind:\r\n\r\n1. Route (some or all of) the functions back to explicitly calling the deprecated `inspect.getargspec` through `tf_inspect.getargspec` \r\n\r\nThis will make the  API compatibility check issue go away, but will also cause python 3 calls to use the deprecated `getargspec` and bypass the (otherwise) cross-compatible `tf_inspect.getfullargspec` wrapper.\r\n \r\n2. Address any upstream issues that would come from the function signature change.\r\n\r\nIt seems prudent to make the cross-compatible wrapper work over counting on a deprecated function, but I can't picture what issues the update could create.\r\n\r\nI will say that I'm happy to help however I can with this and future issues. Please advise."}