{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281624765", "html_url": "https://github.com/tensorflow/tensorflow/issues/7712#issuecomment-281624765", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7712", "id": 281624765, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTYyNDc2NQ==", "user": {"login": "carlthome", "id": 1595907, "node_id": "MDQ6VXNlcjE1OTU5MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1595907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlthome", "html_url": "https://github.com/carlthome", "followers_url": "https://api.github.com/users/carlthome/followers", "following_url": "https://api.github.com/users/carlthome/following{/other_user}", "gists_url": "https://api.github.com/users/carlthome/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlthome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlthome/subscriptions", "organizations_url": "https://api.github.com/users/carlthome/orgs", "repos_url": "https://api.github.com/users/carlthome/repos", "events_url": "https://api.github.com/users/carlthome/events{/privacy}", "received_events_url": "https://api.github.com/users/carlthome/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-22T10:06:31Z", "updated_at": "2017-02-22T10:06:31Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>Anything that has a state (e.g. this function) should not be added as a function in tf.nn (which should only contain pure functions), but rather as a layer (tf.layers). This is precisely what layers are meant to cover. This is a PELU layer, not an activation function.</p>\n</blockquote>\n<p>Yeah, figured <code>tf.nn</code> should be without side effects. Good to hear! <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>\n<blockquote>\n<p>However I would be wary of adding new core layers for each and every paper out there. At best this would be a candidate for contrib.</p>\n</blockquote>\n<p>Which contrib package would be suited for new activation functions? <code>tf.contrib.layers</code> is still out-of-sync with <code>tf.layers</code> (both have similar purpose but different origins and APIs) so I expect it might be deprecated or heavily refactored soon? It would be nice if <code>tf.contrib.layers</code> were an extension for <code>tf.layers</code>, but I suppose it's hard to juggle the backwards compatibility.</p>", "body_text": "Anything that has a state (e.g. this function) should not be added as a function in tf.nn (which should only contain pure functions), but rather as a layer (tf.layers). This is precisely what layers are meant to cover. This is a PELU layer, not an activation function.\n\nYeah, figured tf.nn should be without side effects. Good to hear! \ud83d\udc4d\n\nHowever I would be wary of adding new core layers for each and every paper out there. At best this would be a candidate for contrib.\n\nWhich contrib package would be suited for new activation functions? tf.contrib.layers is still out-of-sync with tf.layers (both have similar purpose but different origins and APIs) so I expect it might be deprecated or heavily refactored soon? It would be nice if tf.contrib.layers were an extension for tf.layers, but I suppose it's hard to juggle the backwards compatibility.", "body": "> Anything that has a state (e.g. this function) should not be added as a function in tf.nn (which should only contain pure functions), but rather as a layer (tf.layers). This is precisely what layers are meant to cover. This is a PELU layer, not an activation function.\r\n\r\nYeah, figured `tf.nn` should be without side effects. Good to hear! :+1: \r\n\r\n> However I would be wary of adding new core layers for each and every paper out there. At best this would be a candidate for contrib.\r\n\r\nWhich contrib package would be suited for new activation functions? `tf.contrib.layers` is still out-of-sync with `tf.layers` (both have similar purpose but different origins and APIs) so I expect it might be deprecated or heavily refactored soon? It would be nice if `tf.contrib.layers` were an extension for `tf.layers`, but I suppose it's hard to juggle the backwards compatibility."}