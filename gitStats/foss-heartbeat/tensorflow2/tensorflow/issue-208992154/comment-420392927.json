{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/420392927", "html_url": "https://github.com/tensorflow/tensorflow/issues/7712#issuecomment-420392927", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7712", "id": 420392927, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDM5MjkyNw==", "user": {"login": "kacper1095", "id": 16157910, "node_id": "MDQ6VXNlcjE2MTU3OTEw", "avatar_url": "https://avatars2.githubusercontent.com/u/16157910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kacper1095", "html_url": "https://github.com/kacper1095", "followers_url": "https://api.github.com/users/kacper1095/followers", "following_url": "https://api.github.com/users/kacper1095/following{/other_user}", "gists_url": "https://api.github.com/users/kacper1095/gists{/gist_id}", "starred_url": "https://api.github.com/users/kacper1095/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kacper1095/subscriptions", "organizations_url": "https://api.github.com/users/kacper1095/orgs", "repos_url": "https://api.github.com/users/kacper1095/repos", "events_url": "https://api.github.com/users/kacper1095/events{/privacy}", "received_events_url": "https://api.github.com/users/kacper1095/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-11T19:25:32Z", "updated_at": "2018-09-11T19:25:32Z", "author_association": "NONE", "body_html": "<p>No problem! Authors mentioned also about constraining value of <code>alpha</code> and <code>beta</code> to be always positive as <code>For preserving parameter positivity after the updates, we constrain them to always be greater than 0.1.</code>. It can be changed as:</p>\n<div class=\"highlight highlight-source-python\"><pre>    alpha <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>alpha<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>)\n    beta <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>beta<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>)</pre></div>\n<p>to</p>\n<div class=\"highlight highlight-source-python\"><pre>    alpha <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>alpha<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">constraint</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">t</span>: tf.maximum(t, <span class=\"pl-c1\">0.1</span>))\n    beta <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>beta<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">constraint</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">t</span>: tf.maximum(t, <span class=\"pl-c1\">0.1</span>))</pre></div>\n<p>but I don't know what's the most elegant way to put such constraint in older tensorflow versions (such as 1.2.1). Will it work like?</p>\n<div class=\"highlight highlight-source-python\"><pre>    alpha <span class=\"pl-k\">=</span> tf.maximum(tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>alpha<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-c1\">0.1</span>)\n    beta <span class=\"pl-k\">=</span> tf.maximum(tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>beta<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-c1\">0.1</span>)</pre></div>", "body_text": "No problem! Authors mentioned also about constraining value of alpha and beta to be always positive as For preserving parameter positivity after the updates, we constrain them to always be greater than 0.1.. It can be changed as:\n    alpha = tf.get_variable('alpha', 1)\n    beta = tf.get_variable('beta', 1)\nto\n    alpha = tf.get_variable('alpha', 1, constraint=lambda t: tf.maximum(t, 0.1))\n    beta = tf.get_variable('beta', 1, constraint=lambda t: tf.maximum(t, 0.1))\nbut I don't know what's the most elegant way to put such constraint in older tensorflow versions (such as 1.2.1). Will it work like?\n    alpha = tf.maximum(tf.get_variable('alpha', 1), 0.1)\n    beta = tf.maximum(tf.get_variable('beta', 1), 0.1)", "body": "No problem! Authors mentioned also about constraining value of `alpha` and `beta` to be always positive as `For preserving parameter positivity after the updates, we constrain them to always be greater than 0.1.`. It can be changed as:\r\n```python\r\n    alpha = tf.get_variable('alpha', 1)\r\n    beta = tf.get_variable('beta', 1)\r\n```\r\nto\r\n```python\r\n    alpha = tf.get_variable('alpha', 1, constraint=lambda t: tf.maximum(t, 0.1))\r\n    beta = tf.get_variable('beta', 1, constraint=lambda t: tf.maximum(t, 0.1))\r\n```\r\nbut I don't know what's the most elegant way to put such constraint in older tensorflow versions (such as 1.2.1). Will it work like?\r\n```python\r\n    alpha = tf.maximum(tf.get_variable('alpha', 1), 0.1)\r\n    beta = tf.maximum(tf.get_variable('beta', 1), 0.1)\r\n```\r\n"}