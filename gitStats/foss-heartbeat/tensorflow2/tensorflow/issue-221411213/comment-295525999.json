{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/295525999", "html_url": "https://github.com/tensorflow/tensorflow/pull/9175#issuecomment-295525999", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9175", "id": 295525999, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTUyNTk5OQ==", "user": {"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-20T01:12:43Z", "updated_at": "2017-04-20T01:12:43Z", "author_association": "MEMBER", "body_html": "<p>I only have problems with epsilon when training on tasks where the accuracy gets very high, and gradients very low, sometimes close to 0. Some tasks are like this, you want to get to 99% accuracy. But then with low epsilon Adam makes this crazy large step somewhere and gets bad. I think that a good way would be instead of having <code>(sqrt(v_t) + epsilon)</code> to have something smarter, like <code>max(sqrt(v_t), epsilon)</code> but maybe a little smoothed. So one could set epsilon higher without effecting all the normal gradients. Not sure if it's possible though, but I'd love not to have to care about that...</p>", "body_text": "I only have problems with epsilon when training on tasks where the accuracy gets very high, and gradients very low, sometimes close to 0. Some tasks are like this, you want to get to 99% accuracy. But then with low epsilon Adam makes this crazy large step somewhere and gets bad. I think that a good way would be instead of having (sqrt(v_t) + epsilon) to have something smarter, like max(sqrt(v_t), epsilon) but maybe a little smoothed. So one could set epsilon higher without effecting all the normal gradients. Not sure if it's possible though, but I'd love not to have to care about that...", "body": "I only have problems with epsilon when training on tasks where the accuracy gets very high, and gradients very low, sometimes close to 0. Some tasks are like this, you want to get to 99% accuracy. But then with low epsilon Adam makes this crazy large step somewhere and gets bad. I think that a good way would be instead of having `(sqrt(v_t) + epsilon)` to have something smarter, like `max(sqrt(v_t), epsilon)` but maybe a little smoothed. So one could set epsilon higher without effecting all the normal gradients. Not sure if it's possible though, but I'd love not to have to care about that..."}