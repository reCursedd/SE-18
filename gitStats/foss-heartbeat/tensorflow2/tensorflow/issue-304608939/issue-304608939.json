{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17666", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17666/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17666/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17666/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17666", "id": 304608939, "node_id": "MDU6SXNzdWUzMDQ2MDg5Mzk=", "number": 17666, "title": "iOS: Library that made for a specific model doesn't include all needed operators (RandomStandardNormal is missing)", "user": {"login": "anphunl", "id": 11812805, "node_id": "MDQ6VXNlcjExODEyODA1", "avatar_url": "https://avatars2.githubusercontent.com/u/11812805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anphunl", "html_url": "https://github.com/anphunl", "followers_url": "https://api.github.com/users/anphunl/followers", "following_url": "https://api.github.com/users/anphunl/following{/other_user}", "gists_url": "https://api.github.com/users/anphunl/gists{/gist_id}", "starred_url": "https://api.github.com/users/anphunl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anphunl/subscriptions", "organizations_url": "https://api.github.com/users/anphunl/orgs", "repos_url": "https://api.github.com/users/anphunl/repos", "events_url": "https://api.github.com/users/anphunl/events{/privacy}", "received_events_url": "https://api.github.com/users/anphunl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173351, "node_id": "MDU6TGFiZWw0NzMxNzMzNTE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:build/install", "name": "type:build/install", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-03-13T02:47:53Z", "updated_at": "2018-03-24T16:55:36Z", "closed_at": "2018-03-24T16:55:36Z", "author_association": "NONE", "body_html": "<p>I created a quantized PB file, here is its detail:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/11812805/37319105-56c7618e-26a0-11e8-9bc9-cdc696c5267f.png\"><img src=\"https://user-images.githubusercontent.com/11812805/37319105-56c7618e-26a0-11e8-9bc9-cdc696c5267f.png\" alt=\"screenshot from 2018-03-13 08-14-27\" style=\"max-width:100%;\"></a></p>\n<p>Then I followed the instruction <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/makefile\">here</a> to create the iOS library for that model only. The command I used:<br>\n<code>tensorflow/contrib/makefile/build_all_ios.sh -g mobile_quantized.pb</code></p>\n<p>Here is the generated ops_to_register.h file:</p>\n<pre><code>// This file was autogenerated by print_selective_registration_header.py\n#ifndef OPS_TO_REGISTER\n#define OPS_TO_REGISTER\n\n    namespace {\n      constexpr const char* skip(const char* x) {\n        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;\n      }\n\n      constexpr bool isequal(const char* x, const char* y) {\n        return (*skip(x) &amp;&amp; *skip(y))\n                   ? (*skip(x) == *skip(y) &amp;&amp; isequal(skip(x) + 1, skip(y) + 1))\n                   : (!*skip(x) &amp;&amp; !*skip(y));\n      }\n\n      template&lt;int N&gt;\n      struct find_in {\n        static constexpr bool f(const char* x, const char* const y[N]) {\n          return isequal(x, y[0]) || find_in&lt;N - 1&gt;::f(x, y + 1);\n        }\n      };\n\n      template&lt;&gt;\n      struct find_in&lt;0&gt; {\n        static constexpr bool f(const char* x, const char* const y[]) {\n          return false;\n        }\n      };\n    }  // end namespace\n    constexpr const char* kNecessaryOpKernelClasses[] = {\n\"BinaryOp&lt; CPUDevice, functor::add&lt;float&gt;&gt;\",\n\"BinaryOp&lt; CPUDevice, functor::add&lt;int32&gt;&gt;\",\n\"BiasOp&lt;CPUDevice, float&gt;\",\n\"ConstantOp\",\n\"DequantizeOp&lt;CPUDevice, quint8&gt;\",\n\"EnterOp\",\n\"ExitOp\",\n\"UnaryOp&lt; CPUDevice, functor::exp&lt;float&gt;&gt;\",\n\"ExpandDimsOp&lt;int32&gt;\",\n\"BinaryOp&lt; CPUDevice, functor::greater_equal&lt;float&gt;&gt;\",\n\"IdentityOp\",\n\"BinaryOp&lt; CPUDevice, functor::less&lt;int32&gt;&gt;\",\n\"LoopCondOp\",\n\"MatMulOp&lt;CPUDevice, float, false &gt;\",\n\"BinaryOp&lt; CPUDevice, functor::maximum&lt;float&gt;&gt;\",\n\"ReductionOp&lt;CPUDevice, float, int32, Eigen::internal::MeanReducer&lt;float&gt;&gt;\",\n\"MergeOp\",\n\"BinaryOp&lt; CPUDevice, functor::minimum&lt;float&gt;&gt;\",\n\"BinaryOp&lt; CPUDevice, functor::mul&lt;float&gt;&gt;\",\n\"NextIterationOp\",\n\"NoOp\",\n\"PlaceholderOp\",\n\"PhiloxRandomOp&lt;CPUDevice, random::NormalDistribution&lt;random::PhiloxRandom, float&gt;&gt;\",\n\"RangeOp&lt;::tensorflow::int32&gt;\",\n\"BinaryOp&lt; CPUDevice, functor::div&lt;float&gt;&gt;\",\n\"ReshapeOp\",\n\"ShapeOp&lt;int32&gt;\",\n\"UnaryOp&lt; CPUDevice, functor::sigmoid&lt;float&gt;&gt;\",\n\"UnaryOp&lt; CPUDevice, functor::square&lt;float&gt;&gt;\",\n\"StridedSliceOp&lt;CPUDevice, ::tensorflow::int32&gt;\",\n\"StridedSliceOp&lt;CPUDevice, float&gt;\",\n\"BinaryOp&lt; CPUDevice, functor::sub&lt;float&gt;&gt;\",\n\"BinaryOp&lt; CPUDevice, functor::sub&lt;int32&gt;&gt;\",\n\"ReductionOp&lt;CPUDevice, float, int32, Eigen::internal::SumReducer&lt;float&gt;&gt;\",\n\"SwitchOp\",\n\"UnaryOp&lt; CPUDevice, functor::tanh&lt;float&gt;&gt;\",\n\"TensorArrayPackOrGatherOp&lt;CPUDevice, float, false &gt;\",\n\"TensorArrayReadOp&lt;CPUDevice, float&gt;\",\n\"TensorArrayUnpackOrScatterOp&lt;CPUDevice, float, false &gt;\",\n\"TensorArraySizeOp\",\n\"TensorArrayOp\",\n\"TensorArrayWriteOp&lt;CPUDevice, float&gt;\",\n\"TileOp&lt;CPUDevice, int32&gt;\",\n\"TransposeCpuOp\",\n\"ZerosLikeOp&lt; CPUDevice, float&gt;\",\n\"RecvOp\",\n\"SendOp\",\n};\n#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in&lt;sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)&gt;::f(clz, kNecessaryOpKernelClasses))\n\nconstexpr inline bool ShouldRegisterOp(const char op[]) {\n  return false\n     || isequal(op, \"Add\")\n     || isequal(op, \"BiasAdd\")\n     || isequal(op, \"Const\")\n     || isequal(op, \"Dequantize\")\n     || isequal(op, \"Enter\")\n     || isequal(op, \"Exit\")\n     || isequal(op, \"Exp\")\n     || isequal(op, \"ExpandDims\")\n     || isequal(op, \"GreaterEqual\")\n     || isequal(op, \"Identity\")\n     || isequal(op, \"Less\")\n     || isequal(op, \"LoopCond\")\n     || isequal(op, \"MatMul\")\n     || isequal(op, \"Maximum\")\n     || isequal(op, \"Mean\")\n     || isequal(op, \"Merge\")\n     || isequal(op, \"Minimum\")\n     || isequal(op, \"Mul\")\n     || isequal(op, \"NextIteration\")\n     || isequal(op, \"NoOp\")\n     || isequal(op, \"Placeholder\")\n     || isequal(op, \"RandomStandardNormal\")\n     || isequal(op, \"Range\")\n     || isequal(op, \"RealDiv\")\n     || isequal(op, \"Reshape\")\n     || isequal(op, \"Shape\")\n     || isequal(op, \"Sigmoid\")\n     || isequal(op, \"Square\")\n     || isequal(op, \"StridedSlice\")\n     || isequal(op, \"Sub\")\n     || isequal(op, \"Sum\")\n     || isequal(op, \"Switch\")\n     || isequal(op, \"Tanh\")\n     || isequal(op, \"TensorArrayGatherV3\")\n     || isequal(op, \"TensorArrayReadV3\")\n     || isequal(op, \"TensorArrayScatterV3\")\n     || isequal(op, \"TensorArraySizeV3\")\n     || isequal(op, \"TensorArrayV3\")\n     || isequal(op, \"TensorArrayWriteV3\")\n     || isequal(op, \"Tile\")\n     || isequal(op, \"Transpose\")\n     || isequal(op, \"ZerosLike\")\n     || isequal(op, \"_Recv\")\n     || isequal(op, \"_Send\")\n  ;\n}\n#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)\n\n#define SHOULD_REGISTER_OP_GRADIENT false\n#endif\n</code></pre>\n<p>But when I tried it within my project, it couldn't load the mobile_quantized.pb file and thrown this</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/11812805/37319803-2d88f064-26a3-11e8-974b-a57a43792055.png\"><img width=\"745\" alt=\"screen shot 2018-03-13 at 9 44 18 am\" src=\"https://user-images.githubusercontent.com/11812805/37319803-2d88f064-26a3-11e8-974b-a57a43792055.png\" style=\"max-width:100%;\"></a></p>\n<p>It's strange because I saw <code>\"PhiloxRandomOp&lt;CPUDevice, random::NormalDistribution&lt;random::PhiloxRandom, float&gt;&gt;\"</code> and <code>|| isequal(op, \"RandomStandardNormal\")</code> in the generated header file.</p>\n<hr>\n<p>OS Platform and Distribution: MacOS 10.13.3<br>\nTensorFlow installed from: Source code<br>\nTensorFlow version: 1.6.0<br>\nBazel version: 0.11.1-homebrew<br>\nCUDA/cuDNN version: None<br>\nGPU model and memory: None<br>\nExact command to reproduce: Described above</p>", "body_text": "I created a quantized PB file, here is its detail:\n\nThen I followed the instruction here to create the iOS library for that model only. The command I used:\ntensorflow/contrib/makefile/build_all_ios.sh -g mobile_quantized.pb\nHere is the generated ops_to_register.h file:\n// This file was autogenerated by print_selective_registration_header.py\n#ifndef OPS_TO_REGISTER\n#define OPS_TO_REGISTER\n\n    namespace {\n      constexpr const char* skip(const char* x) {\n        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;\n      }\n\n      constexpr bool isequal(const char* x, const char* y) {\n        return (*skip(x) && *skip(y))\n                   ? (*skip(x) == *skip(y) && isequal(skip(x) + 1, skip(y) + 1))\n                   : (!*skip(x) && !*skip(y));\n      }\n\n      template<int N>\n      struct find_in {\n        static constexpr bool f(const char* x, const char* const y[N]) {\n          return isequal(x, y[0]) || find_in<N - 1>::f(x, y + 1);\n        }\n      };\n\n      template<>\n      struct find_in<0> {\n        static constexpr bool f(const char* x, const char* const y[]) {\n          return false;\n        }\n      };\n    }  // end namespace\n    constexpr const char* kNecessaryOpKernelClasses[] = {\n\"BinaryOp< CPUDevice, functor::add<float>>\",\n\"BinaryOp< CPUDevice, functor::add<int32>>\",\n\"BiasOp<CPUDevice, float>\",\n\"ConstantOp\",\n\"DequantizeOp<CPUDevice, quint8>\",\n\"EnterOp\",\n\"ExitOp\",\n\"UnaryOp< CPUDevice, functor::exp<float>>\",\n\"ExpandDimsOp<int32>\",\n\"BinaryOp< CPUDevice, functor::greater_equal<float>>\",\n\"IdentityOp\",\n\"BinaryOp< CPUDevice, functor::less<int32>>\",\n\"LoopCondOp\",\n\"MatMulOp<CPUDevice, float, false >\",\n\"BinaryOp< CPUDevice, functor::maximum<float>>\",\n\"ReductionOp<CPUDevice, float, int32, Eigen::internal::MeanReducer<float>>\",\n\"MergeOp\",\n\"BinaryOp< CPUDevice, functor::minimum<float>>\",\n\"BinaryOp< CPUDevice, functor::mul<float>>\",\n\"NextIterationOp\",\n\"NoOp\",\n\"PlaceholderOp\",\n\"PhiloxRandomOp<CPUDevice, random::NormalDistribution<random::PhiloxRandom, float>>\",\n\"RangeOp<::tensorflow::int32>\",\n\"BinaryOp< CPUDevice, functor::div<float>>\",\n\"ReshapeOp\",\n\"ShapeOp<int32>\",\n\"UnaryOp< CPUDevice, functor::sigmoid<float>>\",\n\"UnaryOp< CPUDevice, functor::square<float>>\",\n\"StridedSliceOp<CPUDevice, ::tensorflow::int32>\",\n\"StridedSliceOp<CPUDevice, float>\",\n\"BinaryOp< CPUDevice, functor::sub<float>>\",\n\"BinaryOp< CPUDevice, functor::sub<int32>>\",\n\"ReductionOp<CPUDevice, float, int32, Eigen::internal::SumReducer<float>>\",\n\"SwitchOp\",\n\"UnaryOp< CPUDevice, functor::tanh<float>>\",\n\"TensorArrayPackOrGatherOp<CPUDevice, float, false >\",\n\"TensorArrayReadOp<CPUDevice, float>\",\n\"TensorArrayUnpackOrScatterOp<CPUDevice, float, false >\",\n\"TensorArraySizeOp\",\n\"TensorArrayOp\",\n\"TensorArrayWriteOp<CPUDevice, float>\",\n\"TileOp<CPUDevice, int32>\",\n\"TransposeCpuOp\",\n\"ZerosLikeOp< CPUDevice, float>\",\n\"RecvOp\",\n\"SendOp\",\n};\n#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in<sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)>::f(clz, kNecessaryOpKernelClasses))\n\nconstexpr inline bool ShouldRegisterOp(const char op[]) {\n  return false\n     || isequal(op, \"Add\")\n     || isequal(op, \"BiasAdd\")\n     || isequal(op, \"Const\")\n     || isequal(op, \"Dequantize\")\n     || isequal(op, \"Enter\")\n     || isequal(op, \"Exit\")\n     || isequal(op, \"Exp\")\n     || isequal(op, \"ExpandDims\")\n     || isequal(op, \"GreaterEqual\")\n     || isequal(op, \"Identity\")\n     || isequal(op, \"Less\")\n     || isequal(op, \"LoopCond\")\n     || isequal(op, \"MatMul\")\n     || isequal(op, \"Maximum\")\n     || isequal(op, \"Mean\")\n     || isequal(op, \"Merge\")\n     || isequal(op, \"Minimum\")\n     || isequal(op, \"Mul\")\n     || isequal(op, \"NextIteration\")\n     || isequal(op, \"NoOp\")\n     || isequal(op, \"Placeholder\")\n     || isequal(op, \"RandomStandardNormal\")\n     || isequal(op, \"Range\")\n     || isequal(op, \"RealDiv\")\n     || isequal(op, \"Reshape\")\n     || isequal(op, \"Shape\")\n     || isequal(op, \"Sigmoid\")\n     || isequal(op, \"Square\")\n     || isequal(op, \"StridedSlice\")\n     || isequal(op, \"Sub\")\n     || isequal(op, \"Sum\")\n     || isequal(op, \"Switch\")\n     || isequal(op, \"Tanh\")\n     || isequal(op, \"TensorArrayGatherV3\")\n     || isequal(op, \"TensorArrayReadV3\")\n     || isequal(op, \"TensorArrayScatterV3\")\n     || isequal(op, \"TensorArraySizeV3\")\n     || isequal(op, \"TensorArrayV3\")\n     || isequal(op, \"TensorArrayWriteV3\")\n     || isequal(op, \"Tile\")\n     || isequal(op, \"Transpose\")\n     || isequal(op, \"ZerosLike\")\n     || isequal(op, \"_Recv\")\n     || isequal(op, \"_Send\")\n  ;\n}\n#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)\n\n#define SHOULD_REGISTER_OP_GRADIENT false\n#endif\n\nBut when I tried it within my project, it couldn't load the mobile_quantized.pb file and thrown this\n\nIt's strange because I saw \"PhiloxRandomOp<CPUDevice, random::NormalDistribution<random::PhiloxRandom, float>>\" and || isequal(op, \"RandomStandardNormal\") in the generated header file.\n\nOS Platform and Distribution: MacOS 10.13.3\nTensorFlow installed from: Source code\nTensorFlow version: 1.6.0\nBazel version: 0.11.1-homebrew\nCUDA/cuDNN version: None\nGPU model and memory: None\nExact command to reproduce: Described above", "body": "I created a quantized PB file, here is its detail:\r\n![screenshot from 2018-03-13 08-14-27](https://user-images.githubusercontent.com/11812805/37319105-56c7618e-26a0-11e8-9bc9-cdc696c5267f.png)\r\n\r\nThen I followed the instruction [here](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/makefile) to create the iOS library for that model only. The command I used:\r\n`tensorflow/contrib/makefile/build_all_ios.sh -g mobile_quantized.pb`\r\n\r\nHere is the generated ops_to_register.h file:\r\n\r\n```\r\n// This file was autogenerated by print_selective_registration_header.py\r\n#ifndef OPS_TO_REGISTER\r\n#define OPS_TO_REGISTER\r\n\r\n    namespace {\r\n      constexpr const char* skip(const char* x) {\r\n        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;\r\n      }\r\n\r\n      constexpr bool isequal(const char* x, const char* y) {\r\n        return (*skip(x) && *skip(y))\r\n                   ? (*skip(x) == *skip(y) && isequal(skip(x) + 1, skip(y) + 1))\r\n                   : (!*skip(x) && !*skip(y));\r\n      }\r\n\r\n      template<int N>\r\n      struct find_in {\r\n        static constexpr bool f(const char* x, const char* const y[N]) {\r\n          return isequal(x, y[0]) || find_in<N - 1>::f(x, y + 1);\r\n        }\r\n      };\r\n\r\n      template<>\r\n      struct find_in<0> {\r\n        static constexpr bool f(const char* x, const char* const y[]) {\r\n          return false;\r\n        }\r\n      };\r\n    }  // end namespace\r\n    constexpr const char* kNecessaryOpKernelClasses[] = {\r\n\"BinaryOp< CPUDevice, functor::add<float>>\",\r\n\"BinaryOp< CPUDevice, functor::add<int32>>\",\r\n\"BiasOp<CPUDevice, float>\",\r\n\"ConstantOp\",\r\n\"DequantizeOp<CPUDevice, quint8>\",\r\n\"EnterOp\",\r\n\"ExitOp\",\r\n\"UnaryOp< CPUDevice, functor::exp<float>>\",\r\n\"ExpandDimsOp<int32>\",\r\n\"BinaryOp< CPUDevice, functor::greater_equal<float>>\",\r\n\"IdentityOp\",\r\n\"BinaryOp< CPUDevice, functor::less<int32>>\",\r\n\"LoopCondOp\",\r\n\"MatMulOp<CPUDevice, float, false >\",\r\n\"BinaryOp< CPUDevice, functor::maximum<float>>\",\r\n\"ReductionOp<CPUDevice, float, int32, Eigen::internal::MeanReducer<float>>\",\r\n\"MergeOp\",\r\n\"BinaryOp< CPUDevice, functor::minimum<float>>\",\r\n\"BinaryOp< CPUDevice, functor::mul<float>>\",\r\n\"NextIterationOp\",\r\n\"NoOp\",\r\n\"PlaceholderOp\",\r\n\"PhiloxRandomOp<CPUDevice, random::NormalDistribution<random::PhiloxRandom, float>>\",\r\n\"RangeOp<::tensorflow::int32>\",\r\n\"BinaryOp< CPUDevice, functor::div<float>>\",\r\n\"ReshapeOp\",\r\n\"ShapeOp<int32>\",\r\n\"UnaryOp< CPUDevice, functor::sigmoid<float>>\",\r\n\"UnaryOp< CPUDevice, functor::square<float>>\",\r\n\"StridedSliceOp<CPUDevice, ::tensorflow::int32>\",\r\n\"StridedSliceOp<CPUDevice, float>\",\r\n\"BinaryOp< CPUDevice, functor::sub<float>>\",\r\n\"BinaryOp< CPUDevice, functor::sub<int32>>\",\r\n\"ReductionOp<CPUDevice, float, int32, Eigen::internal::SumReducer<float>>\",\r\n\"SwitchOp\",\r\n\"UnaryOp< CPUDevice, functor::tanh<float>>\",\r\n\"TensorArrayPackOrGatherOp<CPUDevice, float, false >\",\r\n\"TensorArrayReadOp<CPUDevice, float>\",\r\n\"TensorArrayUnpackOrScatterOp<CPUDevice, float, false >\",\r\n\"TensorArraySizeOp\",\r\n\"TensorArrayOp\",\r\n\"TensorArrayWriteOp<CPUDevice, float>\",\r\n\"TileOp<CPUDevice, int32>\",\r\n\"TransposeCpuOp\",\r\n\"ZerosLikeOp< CPUDevice, float>\",\r\n\"RecvOp\",\r\n\"SendOp\",\r\n};\r\n#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in<sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)>::f(clz, kNecessaryOpKernelClasses))\r\n\r\nconstexpr inline bool ShouldRegisterOp(const char op[]) {\r\n  return false\r\n     || isequal(op, \"Add\")\r\n     || isequal(op, \"BiasAdd\")\r\n     || isequal(op, \"Const\")\r\n     || isequal(op, \"Dequantize\")\r\n     || isequal(op, \"Enter\")\r\n     || isequal(op, \"Exit\")\r\n     || isequal(op, \"Exp\")\r\n     || isequal(op, \"ExpandDims\")\r\n     || isequal(op, \"GreaterEqual\")\r\n     || isequal(op, \"Identity\")\r\n     || isequal(op, \"Less\")\r\n     || isequal(op, \"LoopCond\")\r\n     || isequal(op, \"MatMul\")\r\n     || isequal(op, \"Maximum\")\r\n     || isequal(op, \"Mean\")\r\n     || isequal(op, \"Merge\")\r\n     || isequal(op, \"Minimum\")\r\n     || isequal(op, \"Mul\")\r\n     || isequal(op, \"NextIteration\")\r\n     || isequal(op, \"NoOp\")\r\n     || isequal(op, \"Placeholder\")\r\n     || isequal(op, \"RandomStandardNormal\")\r\n     || isequal(op, \"Range\")\r\n     || isequal(op, \"RealDiv\")\r\n     || isequal(op, \"Reshape\")\r\n     || isequal(op, \"Shape\")\r\n     || isequal(op, \"Sigmoid\")\r\n     || isequal(op, \"Square\")\r\n     || isequal(op, \"StridedSlice\")\r\n     || isequal(op, \"Sub\")\r\n     || isequal(op, \"Sum\")\r\n     || isequal(op, \"Switch\")\r\n     || isequal(op, \"Tanh\")\r\n     || isequal(op, \"TensorArrayGatherV3\")\r\n     || isequal(op, \"TensorArrayReadV3\")\r\n     || isequal(op, \"TensorArrayScatterV3\")\r\n     || isequal(op, \"TensorArraySizeV3\")\r\n     || isequal(op, \"TensorArrayV3\")\r\n     || isequal(op, \"TensorArrayWriteV3\")\r\n     || isequal(op, \"Tile\")\r\n     || isequal(op, \"Transpose\")\r\n     || isequal(op, \"ZerosLike\")\r\n     || isequal(op, \"_Recv\")\r\n     || isequal(op, \"_Send\")\r\n  ;\r\n}\r\n#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)\r\n\r\n#define SHOULD_REGISTER_OP_GRADIENT false\r\n#endif\r\n```\r\n\r\nBut when I tried it within my project, it couldn't load the mobile_quantized.pb file and thrown this\r\n\r\n<img width=\"745\" alt=\"screen shot 2018-03-13 at 9 44 18 am\" src=\"https://user-images.githubusercontent.com/11812805/37319803-2d88f064-26a3-11e8-974b-a57a43792055.png\">\r\n\r\nIt's strange because I saw `\"PhiloxRandomOp<CPUDevice, random::NormalDistribution<random::PhiloxRandom, float>>\"` and `|| isequal(op, \"RandomStandardNormal\")` in the generated header file.\r\n\r\n---------\r\nOS Platform and Distribution: MacOS 10.13.3\r\nTensorFlow installed from: Source code\r\nTensorFlow version: 1.6.0\r\nBazel version: 0.11.1-homebrew\r\nCUDA/cuDNN version: None\r\nGPU model and memory: None\r\nExact command to reproduce: Described above"}