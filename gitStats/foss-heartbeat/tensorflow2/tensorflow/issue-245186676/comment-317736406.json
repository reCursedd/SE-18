{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/317736406", "html_url": "https://github.com/tensorflow/tensorflow/issues/11724#issuecomment-317736406", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11724", "id": 317736406, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzczNjQwNg==", "user": {"login": "dburkhardt", "id": 8322751, "node_id": "MDQ6VXNlcjgzMjI3NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8322751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dburkhardt", "html_url": "https://github.com/dburkhardt", "followers_url": "https://api.github.com/users/dburkhardt/followers", "following_url": "https://api.github.com/users/dburkhardt/following{/other_user}", "gists_url": "https://api.github.com/users/dburkhardt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dburkhardt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dburkhardt/subscriptions", "organizations_url": "https://api.github.com/users/dburkhardt/orgs", "repos_url": "https://api.github.com/users/dburkhardt/repos", "events_url": "https://api.github.com/users/dburkhardt/events{/privacy}", "received_events_url": "https://api.github.com/users/dburkhardt/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-25T13:25:59Z", "updated_at": "2017-07-25T13:27:42Z", "author_association": "NONE", "body_html": "<p>I do still get the wrong result if I use matrix power 2:</p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">1</span>]:\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\nnp.random.seed(<span class=\"pl-v\">seed</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\nX <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">1000</span>)\nY <span class=\"pl-k\">=</span> np.linalg.matrix_power(X, <span class=\"pl-c1\">2</span>)\nIn [<span class=\"pl-c1\">2</span>]:\nX\nOut[<span class=\"pl-c1\">2</span>]:\narray([[ <span class=\"pl-c1\">1.76405235</span>,  <span class=\"pl-c1\">0.40015721</span>,  <span class=\"pl-c1\">0.97873798</span>, <span class=\"pl-c1\">...</span>,  <span class=\"pl-c1\">0.0941923</span> ,\n        <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.14761094</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.35811408</span>],\n       [ <span class=\"pl-c1\">0.55596268</span>,  <span class=\"pl-c1\">0.89247389</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.42231482</span>, <span class=\"pl-c1\">...</span>,  <span class=\"pl-c1\">0.15843385</span>,\n        <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.14190142</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.31097037</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.53292105</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.71197016</span>,  <span class=\"pl-c1\">0.04613506</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.19240421</span>,\n        <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.21251574</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.08059852</span>],\n       <span class=\"pl-c1\">...</span>, \n       [ <span class=\"pl-c1\">0.43624889</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.2972301</span> ,  <span class=\"pl-c1\">1.99717648</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.42071168</span>,\n        <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.10894278</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.45209518</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">0.10034023</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.13437346</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.15060322</span>, <span class=\"pl-c1\">...</span>,  <span class=\"pl-c1\">0.35111034</span>,\n         <span class=\"pl-c1\">1.36105416</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.41088647</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.24468854</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.20417642</span>,  <span class=\"pl-c1\">0.99255852</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.79728264</span>,\n         <span class=\"pl-c1\">0.87475609</span>,  <span class=\"pl-c1\">1.37183066</span>]])\nIn [<span class=\"pl-c1\">3</span>]:\n\nY\nOut[<span class=\"pl-c1\">3</span>]:\narray([[<span class=\"pl-k\">-</span><span class=\"pl-c1\">20.90456457</span>,  <span class=\"pl-c1\">63.66601763</span>,   <span class=\"pl-c1\">4.60530742</span>, <span class=\"pl-c1\">...</span>,  <span class=\"pl-c1\">22.82832076</span>,\n        <span class=\"pl-k\">-</span><span class=\"pl-c1\">79.92214929</span>,  <span class=\"pl-c1\">37.8851418</span> ],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">16.69474231</span>,  <span class=\"pl-c1\">13.14948903</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">5.72608797</span>, <span class=\"pl-c1\">...</span>,  <span class=\"pl-c1\">65.28426251</span>,\n         <span class=\"pl-c1\">19.15823444</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">15.81612538</span>],\n       [ <span class=\"pl-k\">-</span><span class=\"pl-c1\">2.13591144</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">62.87672722</span>,   <span class=\"pl-c1\">7.74009454</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">21.37731197</span>,\n         <span class=\"pl-c1\">22.43966432</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">23.05161539</span>],\n       <span class=\"pl-c1\">...</span>, \n       [ <span class=\"pl-c1\">53.28579179</span>,  <span class=\"pl-c1\">56.25607449</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">16.17015098</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">21.17820313</span>,\n        <span class=\"pl-k\">-</span><span class=\"pl-c1\">15.59329817</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">10.84431817</span>],\n       [  <span class=\"pl-c1\">9.36027737</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">38.47373171</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">13.87875906</span>, <span class=\"pl-c1\">...</span>,  <span class=\"pl-c1\">80.51944872</span>,\n        <span class=\"pl-k\">-</span><span class=\"pl-c1\">34.13373385</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">33.20098989</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">32.40022125</span>,   <span class=\"pl-c1\">8.00801434</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">20.68091457</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">44.3388419</span> ,\n         <span class=\"pl-c1\">69.68672123</span>,  <span class=\"pl-c1\">10.77702875</span>]])</pre></div>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">1</span>]:\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nnp.random.seed(<span class=\"pl-v\">seed</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\nX <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">2000</span>, <span class=\"pl-c1\">2000</span>)\nY <span class=\"pl-k\">=</span> np.linalg.matrix_power(X, <span class=\"pl-c1\">2</span>)\nIn [<span class=\"pl-c1\">2</span>]:\nX\nOut[<span class=\"pl-c1\">2</span>]:\narray([[ <span class=\"pl-c1\">1.76405235</span>,  <span class=\"pl-c1\">0.40015721</span>,  <span class=\"pl-c1\">0.97873798</span>, <span class=\"pl-c1\">...</span>,  <span class=\"pl-c1\">0.15843385</span>,\n        <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.14190142</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.31097037</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.53292105</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.71197016</span>,  <span class=\"pl-c1\">0.04613506</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.03057244</span>,\n         <span class=\"pl-c1\">1.57708821</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.8128021</span> ],\n       [ <span class=\"pl-c1\">0.61334917</span>,  <span class=\"pl-c1\">1.84369998</span>,  <span class=\"pl-c1\">0.27109098</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.53788475</span>,\n         <span class=\"pl-c1\">0.39344443</span>,  <span class=\"pl-c1\">0.28651827</span>],\n       <span class=\"pl-c1\">...</span>, \n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">0.17117027</span>,  <span class=\"pl-c1\">0.57332063</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.89516715</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.01409412</span>,\n         <span class=\"pl-c1\">1.28756456</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.6953778</span> ],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.53627571</span>,  <span class=\"pl-c1\">0.57441228</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.20564476</span>, <span class=\"pl-c1\">...</span>,  <span class=\"pl-c1\">0.90499929</span>,\n         <span class=\"pl-c1\">0.51428298</span>,  <span class=\"pl-c1\">0.72148202</span>],\n       [ <span class=\"pl-c1\">0.51262101</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.90758583</span>,  <span class=\"pl-c1\">1.78121159</span>, <span class=\"pl-c1\">...</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.12554283</span>,\n         <span class=\"pl-c1\">0.95170926</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.15237806</span>]])\nIn [<span class=\"pl-c1\">3</span>]:\nY\nOut[<span class=\"pl-c1\">3</span>]:\narray([[  <span class=\"pl-c1\">896.31054468</span>,  <span class=\"pl-c1\">2315.19199227</span>,   <span class=\"pl-c1\">106.53963366</span>, <span class=\"pl-c1\">...</span>,\n         <span class=\"pl-c1\">2919.22268215</span>,   <span class=\"pl-c1\">194.34572697</span>,   <span class=\"pl-c1\">698.64701546</span>],\n       [  <span class=\"pl-c1\">688.43757414</span>,  <span class=\"pl-c1\">1574.75771259</span>,  <span class=\"pl-c1\">1761.10054579</span>, <span class=\"pl-c1\">...</span>,\n         <span class=\"pl-c1\">1757.49918001</span>,  <span class=\"pl-c1\">1817.00223281</span>,   <span class=\"pl-c1\">777.72532453</span>],\n       [ <span class=\"pl-c1\">1412.42877031</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1482.4939304</span> ,  <span class=\"pl-c1\">1034.41817963</span>, <span class=\"pl-c1\">...</span>,\n          <span class=\"pl-c1\">494.08789763</span>,   <span class=\"pl-c1\">537.5932247</span> ,   <span class=\"pl-c1\">371.50003778</span>],\n       <span class=\"pl-c1\">...</span>, \n       [ <span class=\"pl-k\">-</span><span class=\"pl-c1\">427.99247673</span>,   <span class=\"pl-c1\">942.29074458</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">2296.56391085</span>, <span class=\"pl-c1\">...</span>,\n         <span class=\"pl-k\">-</span><span class=\"pl-c1\">833.13985797</span>,  <span class=\"pl-c1\">1251.9797819</span> , <span class=\"pl-k\">-</span><span class=\"pl-c1\">1913.47322301</span>],\n       [ <span class=\"pl-k\">-</span><span class=\"pl-c1\">307.34497424</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">981.15390609</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">204.04086649</span>, <span class=\"pl-c1\">...</span>,\n         <span class=\"pl-k\">-</span><span class=\"pl-c1\">207.92168833</span>,   <span class=\"pl-c1\">218.47627601</span>,    <span class=\"pl-c1\">67.95123058</span>],\n       [ <span class=\"pl-k\">-</span><span class=\"pl-c1\">530.56347763</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">281.01241822</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">398.9338794</span> , <span class=\"pl-c1\">...</span>,\n         <span class=\"pl-k\">-</span><span class=\"pl-c1\">912.01258927</span>,   <span class=\"pl-c1\">692.58480244</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">921.82876347</span>]])</pre></div>\n<p>Interestingly, if the matrix is smaller, I can get the correct result. Unfortunately I'm not working with small matrices, I'm working with 100,000 x 20,000 matrices:</p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">1</span>]:\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\nnp.random.seed(<span class=\"pl-v\">seed</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\nX <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>)\nY <span class=\"pl-k\">=</span> np.linalg.matrix_power(X, <span class=\"pl-c1\">2</span>)\n\nIn [<span class=\"pl-c1\">2</span>]:\nX\nOut[<span class=\"pl-c1\">2</span>]:\narray([[ <span class=\"pl-c1\">1.76405235</span>,  <span class=\"pl-c1\">0.40015721</span>,  <span class=\"pl-c1\">0.97873798</span>,  <span class=\"pl-c1\">2.2408932</span> ,  <span class=\"pl-c1\">1.86755799</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">0.97727788</span>,  <span class=\"pl-c1\">0.95008842</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.15135721</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.10321885</span>,  <span class=\"pl-c1\">0.4105985</span> ],\n       [ <span class=\"pl-c1\">0.14404357</span>,  <span class=\"pl-c1\">1.45427351</span>,  <span class=\"pl-c1\">0.76103773</span>,  <span class=\"pl-c1\">0.12167502</span>,  <span class=\"pl-c1\">0.44386323</span>],\n       [ <span class=\"pl-c1\">0.33367433</span>,  <span class=\"pl-c1\">1.49407907</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.20515826</span>,  <span class=\"pl-c1\">0.3130677</span> , <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.85409574</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">2.55298982</span>,  <span class=\"pl-c1\">0.6536186</span> ,  <span class=\"pl-c1\">0.8644362</span> , <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.74216502</span>,  <span class=\"pl-c1\">2.26975462</span>]])\nIn [<span class=\"pl-c1\">3</span>]:\n\nY\nOut[<span class=\"pl-c1\">3</span>]:\narray([[ <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.15833119</span>,   <span class=\"pl-c1\">7.07817798</span>,   <span class=\"pl-c1\">3.56548186</span>,   <span class=\"pl-c1\">3.34635217</span>,\n          <span class=\"pl-c1\">6.21816086</span>],\n       [ <span class=\"pl-k\">-</span><span class=\"pl-c1\">3.75696704</span>,   <span class=\"pl-c1\">0.40564612</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.83937785</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">2.64350512</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.4820835</span> ],\n       [ <span class=\"pl-k\">-</span><span class=\"pl-c1\">2.15008482</span>,   <span class=\"pl-c1\">3.01799485</span>,   <span class=\"pl-c1\">0.85877337</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.02605015</span>,\n          <span class=\"pl-c1\">2.10746742</span>],\n       [  <span class=\"pl-c1\">1.3838972</span> ,   <span class=\"pl-c1\">1.16416823</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.85823278</span>,   <span class=\"pl-c1\">1.30044014</span>,\n         <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.06041697</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">11.06016005</span>,   <span class=\"pl-c1\">1.23122545</span>,   <span class=\"pl-c1\">0.17454991</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">7.60014337</span>,\n          <span class=\"pl-c1\">1.66987577</span>]])</pre></div>\n<p>Also correct:</p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">1</span>]:\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nnp.random.seed(<span class=\"pl-v\">seed</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\nX <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>)\nY <span class=\"pl-k\">=</span> np.linalg.matrix_power(X, <span class=\"pl-c1\">2</span>)\nIn [<span class=\"pl-c1\">2</span>]:\nX\nOut[<span class=\"pl-c1\">2</span>]:\narray([[ <span class=\"pl-c1\">1.76405235</span>,  <span class=\"pl-c1\">0.40015721</span>,  <span class=\"pl-c1\">0.97873798</span>,  <span class=\"pl-c1\">2.2408932</span> ,  <span class=\"pl-c1\">1.86755799</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">0.97727788</span>,  <span class=\"pl-c1\">0.95008842</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.15135721</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.10321885</span>,  <span class=\"pl-c1\">0.4105985</span> ],\n       [ <span class=\"pl-c1\">0.14404357</span>,  <span class=\"pl-c1\">1.45427351</span>,  <span class=\"pl-c1\">0.76103773</span>,  <span class=\"pl-c1\">0.12167502</span>,  <span class=\"pl-c1\">0.44386323</span>],\n       [ <span class=\"pl-c1\">0.33367433</span>,  <span class=\"pl-c1\">1.49407907</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.20515826</span>,  <span class=\"pl-c1\">0.3130677</span> , <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.85409574</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">2.55298982</span>,  <span class=\"pl-c1\">0.6536186</span> ,  <span class=\"pl-c1\">0.8644362</span> , <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.74216502</span>,  <span class=\"pl-c1\">2.26975462</span>]])\nIn [<span class=\"pl-c1\">3</span>]:\nY\nOut[<span class=\"pl-c1\">3</span>]:\narray([[ <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.15833119</span>,   <span class=\"pl-c1\">7.07817798</span>,   <span class=\"pl-c1\">3.56548186</span>,   <span class=\"pl-c1\">3.34635217</span>,\n          <span class=\"pl-c1\">6.21816086</span>],\n       [ <span class=\"pl-k\">-</span><span class=\"pl-c1\">3.75696704</span>,   <span class=\"pl-c1\">0.40564612</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.83937785</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">2.64350512</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.4820835</span> ],\n       [ <span class=\"pl-k\">-</span><span class=\"pl-c1\">2.15008482</span>,   <span class=\"pl-c1\">3.01799485</span>,   <span class=\"pl-c1\">0.85877337</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.02605015</span>,\n          <span class=\"pl-c1\">2.10746742</span>],\n       [  <span class=\"pl-c1\">1.3838972</span> ,   <span class=\"pl-c1\">1.16416823</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.85823278</span>,   <span class=\"pl-c1\">1.30044014</span>,\n         <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.06041697</span>],\n       [<span class=\"pl-k\">-</span><span class=\"pl-c1\">11.06016005</span>,   <span class=\"pl-c1\">1.23122545</span>,   <span class=\"pl-c1\">0.17454991</span>,  <span class=\"pl-k\">-</span><span class=\"pl-c1\">7.60014337</span>,\n          <span class=\"pl-c1\">1.66987577</span>]])</pre></div>", "body_text": "I do still get the wrong result if I use matrix power 2:\nIn [1]:\nimport numpy as np\nnp.random.seed(seed=0)\nX = np.random.randn(1000, 1000)\nY = np.linalg.matrix_power(X, 2)\nIn [2]:\nX\nOut[2]:\narray([[ 1.76405235,  0.40015721,  0.97873798, ...,  0.0941923 ,\n        -1.14761094, -0.35811408],\n       [ 0.55596268,  0.89247389, -0.42231482, ...,  0.15843385,\n        -1.14190142, -1.31097037],\n       [-1.53292105, -1.71197016,  0.04613506, ..., -0.19240421,\n        -1.21251574, -0.08059852],\n       ..., \n       [ 0.43624889, -1.2972301 ,  1.99717648, ..., -0.42071168,\n        -0.10894278, -0.45209518],\n       [-0.10034023, -0.13437346, -0.15060322, ...,  0.35111034,\n         1.36105416, -1.41088647],\n       [-1.24468854, -1.20417642,  0.99255852, ..., -0.79728264,\n         0.87475609,  1.37183066]])\nIn [3]:\n\nY\nOut[3]:\narray([[-20.90456457,  63.66601763,   4.60530742, ...,  22.82832076,\n        -79.92214929,  37.8851418 ],\n       [-16.69474231,  13.14948903,  -5.72608797, ...,  65.28426251,\n         19.15823444, -15.81612538],\n       [ -2.13591144, -62.87672722,   7.74009454, ..., -21.37731197,\n         22.43966432, -23.05161539],\n       ..., \n       [ 53.28579179,  56.25607449, -16.17015098, ..., -21.17820313,\n        -15.59329817, -10.84431817],\n       [  9.36027737, -38.47373171, -13.87875906, ...,  80.51944872,\n        -34.13373385, -33.20098989],\n       [-32.40022125,   8.00801434, -20.68091457, ..., -44.3388419 ,\n         69.68672123,  10.77702875]])\nIn [1]:\nimport numpy as np\nimport tensorflow as tf\nnp.random.seed(seed=0)\nX = np.random.randn(2000, 2000)\nY = np.linalg.matrix_power(X, 2)\nIn [2]:\nX\nOut[2]:\narray([[ 1.76405235,  0.40015721,  0.97873798, ...,  0.15843385,\n        -1.14190142, -1.31097037],\n       [-1.53292105, -1.71197016,  0.04613506, ..., -0.03057244,\n         1.57708821, -0.8128021 ],\n       [ 0.61334917,  1.84369998,  0.27109098, ..., -0.53788475,\n         0.39344443,  0.28651827],\n       ..., \n       [-0.17117027,  0.57332063, -0.89516715, ..., -0.01409412,\n         1.28756456, -0.6953778 ],\n       [-1.53627571,  0.57441228, -0.20564476, ...,  0.90499929,\n         0.51428298,  0.72148202],\n       [ 0.51262101, -0.90758583,  1.78121159, ..., -1.12554283,\n         0.95170926, -1.15237806]])\nIn [3]:\nY\nOut[3]:\narray([[  896.31054468,  2315.19199227,   106.53963366, ...,\n         2919.22268215,   194.34572697,   698.64701546],\n       [  688.43757414,  1574.75771259,  1761.10054579, ...,\n         1757.49918001,  1817.00223281,   777.72532453],\n       [ 1412.42877031, -1482.4939304 ,  1034.41817963, ...,\n          494.08789763,   537.5932247 ,   371.50003778],\n       ..., \n       [ -427.99247673,   942.29074458, -2296.56391085, ...,\n         -833.13985797,  1251.9797819 , -1913.47322301],\n       [ -307.34497424,  -981.15390609,  -204.04086649, ...,\n         -207.92168833,   218.47627601,    67.95123058],\n       [ -530.56347763,  -281.01241822,  -398.9338794 , ...,\n         -912.01258927,   692.58480244,  -921.82876347]])\nInterestingly, if the matrix is smaller, I can get the correct result. Unfortunately I'm not working with small matrices, I'm working with 100,000 x 20,000 matrices:\nIn [1]:\nimport numpy as np\nnp.random.seed(seed=0)\nX = np.random.randn(5, 5)\nY = np.linalg.matrix_power(X, 2)\n\nIn [2]:\nX\nOut[2]:\narray([[ 1.76405235,  0.40015721,  0.97873798,  2.2408932 ,  1.86755799],\n       [-0.97727788,  0.95008842, -0.15135721, -0.10321885,  0.4105985 ],\n       [ 0.14404357,  1.45427351,  0.76103773,  0.12167502,  0.44386323],\n       [ 0.33367433,  1.49407907, -0.20515826,  0.3130677 , -0.85409574],\n       [-2.55298982,  0.6536186 ,  0.8644362 , -0.74216502,  2.26975462]])\nIn [3]:\n\nY\nOut[3]:\narray([[ -1.15833119,   7.07817798,   3.56548186,   3.34635217,\n          6.21816086],\n       [ -3.75696704,   0.40564612,  -0.83937785,  -2.64350512,  -0.4820835 ],\n       [ -2.15008482,   3.01799485,   0.85877337,  -0.02605015,\n          2.10746742],\n       [  1.3838972 ,   1.16416823,  -0.85823278,   1.30044014,\n         -1.06041697],\n       [-11.06016005,   1.23122545,   0.17454991,  -7.60014337,\n          1.66987577]])\nAlso correct:\nIn [1]:\nimport numpy as np\nimport tensorflow as tf\nnp.random.seed(seed=0)\nX = np.random.randn(5, 5)\nY = np.linalg.matrix_power(X, 2)\nIn [2]:\nX\nOut[2]:\narray([[ 1.76405235,  0.40015721,  0.97873798,  2.2408932 ,  1.86755799],\n       [-0.97727788,  0.95008842, -0.15135721, -0.10321885,  0.4105985 ],\n       [ 0.14404357,  1.45427351,  0.76103773,  0.12167502,  0.44386323],\n       [ 0.33367433,  1.49407907, -0.20515826,  0.3130677 , -0.85409574],\n       [-2.55298982,  0.6536186 ,  0.8644362 , -0.74216502,  2.26975462]])\nIn [3]:\nY\nOut[3]:\narray([[ -1.15833119,   7.07817798,   3.56548186,   3.34635217,\n          6.21816086],\n       [ -3.75696704,   0.40564612,  -0.83937785,  -2.64350512,  -0.4820835 ],\n       [ -2.15008482,   3.01799485,   0.85877337,  -0.02605015,\n          2.10746742],\n       [  1.3838972 ,   1.16416823,  -0.85823278,   1.30044014,\n         -1.06041697],\n       [-11.06016005,   1.23122545,   0.17454991,  -7.60014337,\n          1.66987577]])", "body": "I do still get the wrong result if I use matrix power 2:\r\n\r\n```python\r\nIn [1]:\r\nimport numpy as np\r\nnp.random.seed(seed=0)\r\nX = np.random.randn(1000, 1000)\r\nY = np.linalg.matrix_power(X, 2)\r\nIn [2]:\r\nX\r\nOut[2]:\r\narray([[ 1.76405235,  0.40015721,  0.97873798, ...,  0.0941923 ,\r\n        -1.14761094, -0.35811408],\r\n       [ 0.55596268,  0.89247389, -0.42231482, ...,  0.15843385,\r\n        -1.14190142, -1.31097037],\r\n       [-1.53292105, -1.71197016,  0.04613506, ..., -0.19240421,\r\n        -1.21251574, -0.08059852],\r\n       ..., \r\n       [ 0.43624889, -1.2972301 ,  1.99717648, ..., -0.42071168,\r\n        -0.10894278, -0.45209518],\r\n       [-0.10034023, -0.13437346, -0.15060322, ...,  0.35111034,\r\n         1.36105416, -1.41088647],\r\n       [-1.24468854, -1.20417642,  0.99255852, ..., -0.79728264,\r\n         0.87475609,  1.37183066]])\r\nIn [3]:\r\n\r\nY\r\nOut[3]:\r\narray([[-20.90456457,  63.66601763,   4.60530742, ...,  22.82832076,\r\n        -79.92214929,  37.8851418 ],\r\n       [-16.69474231,  13.14948903,  -5.72608797, ...,  65.28426251,\r\n         19.15823444, -15.81612538],\r\n       [ -2.13591144, -62.87672722,   7.74009454, ..., -21.37731197,\r\n         22.43966432, -23.05161539],\r\n       ..., \r\n       [ 53.28579179,  56.25607449, -16.17015098, ..., -21.17820313,\r\n        -15.59329817, -10.84431817],\r\n       [  9.36027737, -38.47373171, -13.87875906, ...,  80.51944872,\r\n        -34.13373385, -33.20098989],\r\n       [-32.40022125,   8.00801434, -20.68091457, ..., -44.3388419 ,\r\n         69.68672123,  10.77702875]])\r\n```\r\n\r\n\r\n```python\r\nIn [1]:\r\nimport numpy as np\r\nimport tensorflow as tf\r\nnp.random.seed(seed=0)\r\nX = np.random.randn(2000, 2000)\r\nY = np.linalg.matrix_power(X, 2)\r\nIn [2]:\r\nX\r\nOut[2]:\r\narray([[ 1.76405235,  0.40015721,  0.97873798, ...,  0.15843385,\r\n        -1.14190142, -1.31097037],\r\n       [-1.53292105, -1.71197016,  0.04613506, ..., -0.03057244,\r\n         1.57708821, -0.8128021 ],\r\n       [ 0.61334917,  1.84369998,  0.27109098, ..., -0.53788475,\r\n         0.39344443,  0.28651827],\r\n       ..., \r\n       [-0.17117027,  0.57332063, -0.89516715, ..., -0.01409412,\r\n         1.28756456, -0.6953778 ],\r\n       [-1.53627571,  0.57441228, -0.20564476, ...,  0.90499929,\r\n         0.51428298,  0.72148202],\r\n       [ 0.51262101, -0.90758583,  1.78121159, ..., -1.12554283,\r\n         0.95170926, -1.15237806]])\r\nIn [3]:\r\nY\r\nOut[3]:\r\narray([[  896.31054468,  2315.19199227,   106.53963366, ...,\r\n         2919.22268215,   194.34572697,   698.64701546],\r\n       [  688.43757414,  1574.75771259,  1761.10054579, ...,\r\n         1757.49918001,  1817.00223281,   777.72532453],\r\n       [ 1412.42877031, -1482.4939304 ,  1034.41817963, ...,\r\n          494.08789763,   537.5932247 ,   371.50003778],\r\n       ..., \r\n       [ -427.99247673,   942.29074458, -2296.56391085, ...,\r\n         -833.13985797,  1251.9797819 , -1913.47322301],\r\n       [ -307.34497424,  -981.15390609,  -204.04086649, ...,\r\n         -207.92168833,   218.47627601,    67.95123058],\r\n       [ -530.56347763,  -281.01241822,  -398.9338794 , ...,\r\n         -912.01258927,   692.58480244,  -921.82876347]])\r\n```\r\n\r\nInterestingly, if the matrix is smaller, I can get the correct result. Unfortunately I'm not working with small matrices, I'm working with 100,000 x 20,000 matrices:\r\n\r\n```python\r\nIn [1]:\r\nimport numpy as np\r\nnp.random.seed(seed=0)\r\nX = np.random.randn(5, 5)\r\nY = np.linalg.matrix_power(X, 2)\r\n\r\nIn [2]:\r\nX\r\nOut[2]:\r\narray([[ 1.76405235,  0.40015721,  0.97873798,  2.2408932 ,  1.86755799],\r\n       [-0.97727788,  0.95008842, -0.15135721, -0.10321885,  0.4105985 ],\r\n       [ 0.14404357,  1.45427351,  0.76103773,  0.12167502,  0.44386323],\r\n       [ 0.33367433,  1.49407907, -0.20515826,  0.3130677 , -0.85409574],\r\n       [-2.55298982,  0.6536186 ,  0.8644362 , -0.74216502,  2.26975462]])\r\nIn [3]:\r\n\r\nY\r\nOut[3]:\r\narray([[ -1.15833119,   7.07817798,   3.56548186,   3.34635217,\r\n          6.21816086],\r\n       [ -3.75696704,   0.40564612,  -0.83937785,  -2.64350512,  -0.4820835 ],\r\n       [ -2.15008482,   3.01799485,   0.85877337,  -0.02605015,\r\n          2.10746742],\r\n       [  1.3838972 ,   1.16416823,  -0.85823278,   1.30044014,\r\n         -1.06041697],\r\n       [-11.06016005,   1.23122545,   0.17454991,  -7.60014337,\r\n          1.66987577]])\r\n```\r\n\r\nAlso correct:\r\n\r\n```python\r\nIn [1]:\r\nimport numpy as np\r\nimport tensorflow as tf\r\nnp.random.seed(seed=0)\r\nX = np.random.randn(5, 5)\r\nY = np.linalg.matrix_power(X, 2)\r\nIn [2]:\r\nX\r\nOut[2]:\r\narray([[ 1.76405235,  0.40015721,  0.97873798,  2.2408932 ,  1.86755799],\r\n       [-0.97727788,  0.95008842, -0.15135721, -0.10321885,  0.4105985 ],\r\n       [ 0.14404357,  1.45427351,  0.76103773,  0.12167502,  0.44386323],\r\n       [ 0.33367433,  1.49407907, -0.20515826,  0.3130677 , -0.85409574],\r\n       [-2.55298982,  0.6536186 ,  0.8644362 , -0.74216502,  2.26975462]])\r\nIn [3]:\r\nY\r\nOut[3]:\r\narray([[ -1.15833119,   7.07817798,   3.56548186,   3.34635217,\r\n          6.21816086],\r\n       [ -3.75696704,   0.40564612,  -0.83937785,  -2.64350512,  -0.4820835 ],\r\n       [ -2.15008482,   3.01799485,   0.85877337,  -0.02605015,\r\n          2.10746742],\r\n       [  1.3838972 ,   1.16416823,  -0.85823278,   1.30044014,\r\n         -1.06041697],\r\n       [-11.06016005,   1.23122545,   0.17454991,  -7.60014337,\r\n          1.66987577]])\r\n```"}