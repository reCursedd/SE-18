{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23098", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23098/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23098/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23098/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23098", "id": 371826851, "node_id": "MDU6SXNzdWUzNzE4MjY4NTE=", "number": 23098, "title": "TFRecordDataset entries shuffle between examples", "user": {"login": "yipsang", "id": 17806604, "node_id": "MDQ6VXNlcjE3ODA2NjA0", "avatar_url": "https://avatars1.githubusercontent.com/u/17806604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yipsang", "html_url": "https://github.com/yipsang", "followers_url": "https://api.github.com/users/yipsang/followers", "following_url": "https://api.github.com/users/yipsang/following{/other_user}", "gists_url": "https://api.github.com/users/yipsang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yipsang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yipsang/subscriptions", "organizations_url": "https://api.github.com/users/yipsang/orgs", "repos_url": "https://api.github.com/users/yipsang/repos", "events_url": "https://api.github.com/users/yipsang/events{/privacy}", "received_events_url": "https://api.github.com/users/yipsang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097547147, "node_id": "MDU6TGFiZWwxMDk3NTQ3MTQ3", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:ops", "name": "comp:ops", "color": "0052cc", "default": false}, {"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-10-19T06:45:46Z", "updated_at": "2018-11-19T23:44:16Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Mojave 10.14 (18A391)</li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A</li>\n<li>TensorFlow installed from (source or binary): binary</li>\n<li>TensorFlow version (use command below): 1.11.0</li>\n<li>Python version: 3.6</li>\n<li>Bazel version (if compiling from source): N/A</li>\n<li>GCC/Compiler version (if compiling from source): N/A</li>\n<li>CUDA/cuDNN version: N/A</li>\n<li>GPU model and memory: N/A</li>\n<li>Have I written custom code: N/A</li>\n<li>Exact command to reproduce: Check Code to reproduce the issue</li>\n</ul>\n<p><strong>Describe the problem</strong><br>\nWhen I load several examples into a TFRecordDataset and parse the serialised examples using <code>parse_single_example</code>, the entry values of the examples are interchanged randomly. For example, if I save two examples <code>{\"a\": [1, 2, 3], \"b\": [10, 20, 30]}</code> and <code>{\"a\": [3, 4, 5], \"b\": [30, 40, 50]}</code> into a <code>tfrecord</code> and then load and parse it using <code>TFRecordDataset</code> and <code>parse_single_example</code>, the loaded examples will become <code>{\"a\": [3, 4, 5], \"b\": [10, 20, 30]}</code> and <code>{\"a\": [1, 2, 3], \"b\": [30, 40, 50]}</code>, while it will be correct if I use <code>Example.ParseFromString</code> to parse the evaluated string.</p>\n<p><strong>Code to reproduce the issue</strong><br>\nCode to write the tfrecord</p>\n<pre><code>import tensorflow as tf\n\ntest = tf.train.Features(feature={\n    'a': tf.train.Feature(float_list=tf.train.FloatList(value=[1,2,3])),\n    'b': tf.train.Feature(float_list=tf.train.FloatList(value=[10,20,30]))\n})\ntest_2 = tf.train.Features(feature={\n    'a': tf.train.Feature(float_list=tf.train.FloatList(value=[3,4,5])),\n    'b': tf.train.Feature(float_list=tf.train.FloatList(value=[30,40,50]))\n})\n\nexample = tf.train.Example(features=test)\nexample_2 = tf.train.Example(features=test_2)\n\nwith tf.python_io.TFRecordWriter('test.tfrecord') as writer:\n    writer.write(example.SerializeToString())\n    writer.write(example_2.SerializeToString())\n</code></pre>\n<p>Code to load the tfrecord. Example parsed via <code>ParseFromString</code> is printed first, and then the one parsed via <code>parse_single_example</code></p>\n<pre><code>dataset = tf.data.TFRecordDataset('test.tfrecord')\ndataset = dataset.repeat()\nexamples = dataset.make_one_shot_iterator()\nwith tf.Session() as sess:\n    for _ in range(2):\n        serialized_example = examples.get_next()\n        correct_example = tf.train.Example()\n        correct_example.ParseFromString(serialized_example.eval())\n        print(correct_example)\n        features = {\n            \"a\": tf.FixedLenFeature([3], tf.float32),\n            \"b\": tf.FixedLenFeature([3], tf.float32),\n        }\n        example = tf.parse_single_example(serialized=serialized_example, features=features)\n        for name, tensor in example.items():\n            print('{}: {}'.format(name, tensor.eval()))\n</code></pre>\n<p><strong>Other info / logs</strong><br>\nThe log I've got from the second snippet</p>\n<pre><code>features {\n  feature {\n    key: \"a\"\n    value {\n      float_list {\n        value: 1.0\n        value: 2.0\n        value: 3.0\n      }\n    }\n  }\n  feature {\n    key: \"b\"\n    value {\n      float_list {\n        value: 10.0\n        value: 20.0\n        value: 30.0\n      }\n    }\n  }\n}\n\na: [3. 4. 5.]\nb: [10. 20. 30.]\nfeatures {\n  feature {\n    key: \"a\"\n    value {\n      float_list {\n        value: 3.0\n        value: 4.0\n        value: 5.0\n      }\n    }\n  }\n  feature {\n    key: \"b\"\n    value {\n      float_list {\n        value: 30.0\n        value: 40.0\n        value: 50.0\n      }\n    }\n  }\n}\n\na: [1. 2. 3.]\nb: [30. 40. 50.]\n</code></pre>", "body_text": "System information\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Mojave 10.14 (18A391)\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.11.0\nPython version: 3.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nHave I written custom code: N/A\nExact command to reproduce: Check Code to reproduce the issue\n\nDescribe the problem\nWhen I load several examples into a TFRecordDataset and parse the serialised examples using parse_single_example, the entry values of the examples are interchanged randomly. For example, if I save two examples {\"a\": [1, 2, 3], \"b\": [10, 20, 30]} and {\"a\": [3, 4, 5], \"b\": [30, 40, 50]} into a tfrecord and then load and parse it using TFRecordDataset and parse_single_example, the loaded examples will become {\"a\": [3, 4, 5], \"b\": [10, 20, 30]} and {\"a\": [1, 2, 3], \"b\": [30, 40, 50]}, while it will be correct if I use Example.ParseFromString to parse the evaluated string.\nCode to reproduce the issue\nCode to write the tfrecord\nimport tensorflow as tf\n\ntest = tf.train.Features(feature={\n    'a': tf.train.Feature(float_list=tf.train.FloatList(value=[1,2,3])),\n    'b': tf.train.Feature(float_list=tf.train.FloatList(value=[10,20,30]))\n})\ntest_2 = tf.train.Features(feature={\n    'a': tf.train.Feature(float_list=tf.train.FloatList(value=[3,4,5])),\n    'b': tf.train.Feature(float_list=tf.train.FloatList(value=[30,40,50]))\n})\n\nexample = tf.train.Example(features=test)\nexample_2 = tf.train.Example(features=test_2)\n\nwith tf.python_io.TFRecordWriter('test.tfrecord') as writer:\n    writer.write(example.SerializeToString())\n    writer.write(example_2.SerializeToString())\n\nCode to load the tfrecord. Example parsed via ParseFromString is printed first, and then the one parsed via parse_single_example\ndataset = tf.data.TFRecordDataset('test.tfrecord')\ndataset = dataset.repeat()\nexamples = dataset.make_one_shot_iterator()\nwith tf.Session() as sess:\n    for _ in range(2):\n        serialized_example = examples.get_next()\n        correct_example = tf.train.Example()\n        correct_example.ParseFromString(serialized_example.eval())\n        print(correct_example)\n        features = {\n            \"a\": tf.FixedLenFeature([3], tf.float32),\n            \"b\": tf.FixedLenFeature([3], tf.float32),\n        }\n        example = tf.parse_single_example(serialized=serialized_example, features=features)\n        for name, tensor in example.items():\n            print('{}: {}'.format(name, tensor.eval()))\n\nOther info / logs\nThe log I've got from the second snippet\nfeatures {\n  feature {\n    key: \"a\"\n    value {\n      float_list {\n        value: 1.0\n        value: 2.0\n        value: 3.0\n      }\n    }\n  }\n  feature {\n    key: \"b\"\n    value {\n      float_list {\n        value: 10.0\n        value: 20.0\n        value: 30.0\n      }\n    }\n  }\n}\n\na: [3. 4. 5.]\nb: [10. 20. 30.]\nfeatures {\n  feature {\n    key: \"a\"\n    value {\n      float_list {\n        value: 3.0\n        value: 4.0\n        value: 5.0\n      }\n    }\n  }\n  feature {\n    key: \"b\"\n    value {\n      float_list {\n        value: 30.0\n        value: 40.0\n        value: 50.0\n      }\n    }\n  }\n}\n\na: [1. 2. 3.]\nb: [30. 40. 50.]", "body": "**System information**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Mojave 10.14 (18A391)\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\r\n- TensorFlow installed from (source or binary): binary\r\n- TensorFlow version (use command below): 1.11.0\r\n- Python version: 3.6\r\n- Bazel version (if compiling from source): N/A\r\n- GCC/Compiler version (if compiling from source): N/A\r\n- CUDA/cuDNN version: N/A\r\n- GPU model and memory: N/A\r\n- Have I written custom code: N/A\r\n- Exact command to reproduce: Check Code to reproduce the issue\r\n\r\n**Describe the problem**\r\nWhen I load several examples into a TFRecordDataset and parse the serialised examples using `parse_single_example`, the entry values of the examples are interchanged randomly. For example, if I save two examples `{\"a\": [1, 2, 3], \"b\": [10, 20, 30]}` and `{\"a\": [3, 4, 5], \"b\": [30, 40, 50]}` into a `tfrecord` and then load and parse it using `TFRecordDataset` and `parse_single_example`, the loaded examples will become `{\"a\": [3, 4, 5], \"b\": [10, 20, 30]}` and `{\"a\": [1, 2, 3], \"b\": [30, 40, 50]}`, while it will be correct if I use `Example.ParseFromString` to parse the evaluated string.\r\n\r\n**Code to reproduce the issue**\r\nCode to write the tfrecord\r\n```\r\nimport tensorflow as tf\r\n\r\ntest = tf.train.Features(feature={\r\n    'a': tf.train.Feature(float_list=tf.train.FloatList(value=[1,2,3])),\r\n    'b': tf.train.Feature(float_list=tf.train.FloatList(value=[10,20,30]))\r\n})\r\ntest_2 = tf.train.Features(feature={\r\n    'a': tf.train.Feature(float_list=tf.train.FloatList(value=[3,4,5])),\r\n    'b': tf.train.Feature(float_list=tf.train.FloatList(value=[30,40,50]))\r\n})\r\n\r\nexample = tf.train.Example(features=test)\r\nexample_2 = tf.train.Example(features=test_2)\r\n\r\nwith tf.python_io.TFRecordWriter('test.tfrecord') as writer:\r\n    writer.write(example.SerializeToString())\r\n    writer.write(example_2.SerializeToString())\r\n```\r\nCode to load the tfrecord. Example parsed via `ParseFromString` is printed first, and then the one parsed via `parse_single_example`\r\n```\r\ndataset = tf.data.TFRecordDataset('test.tfrecord')\r\ndataset = dataset.repeat()\r\nexamples = dataset.make_one_shot_iterator()\r\nwith tf.Session() as sess:\r\n    for _ in range(2):\r\n        serialized_example = examples.get_next()\r\n        correct_example = tf.train.Example()\r\n        correct_example.ParseFromString(serialized_example.eval())\r\n        print(correct_example)\r\n        features = {\r\n            \"a\": tf.FixedLenFeature([3], tf.float32),\r\n            \"b\": tf.FixedLenFeature([3], tf.float32),\r\n        }\r\n        example = tf.parse_single_example(serialized=serialized_example, features=features)\r\n        for name, tensor in example.items():\r\n            print('{}: {}'.format(name, tensor.eval()))\r\n```\r\n\r\n**Other info / logs**\r\nThe log I've got from the second snippet\r\n```\r\nfeatures {\r\n  feature {\r\n    key: \"a\"\r\n    value {\r\n      float_list {\r\n        value: 1.0\r\n        value: 2.0\r\n        value: 3.0\r\n      }\r\n    }\r\n  }\r\n  feature {\r\n    key: \"b\"\r\n    value {\r\n      float_list {\r\n        value: 10.0\r\n        value: 20.0\r\n        value: 30.0\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\na: [3. 4. 5.]\r\nb: [10. 20. 30.]\r\nfeatures {\r\n  feature {\r\n    key: \"a\"\r\n    value {\r\n      float_list {\r\n        value: 3.0\r\n        value: 4.0\r\n        value: 5.0\r\n      }\r\n    }\r\n  }\r\n  feature {\r\n    key: \"b\"\r\n    value {\r\n      float_list {\r\n        value: 30.0\r\n        value: 40.0\r\n        value: 50.0\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\na: [1. 2. 3.]\r\nb: [30. 40. 50.]\r\n```"}