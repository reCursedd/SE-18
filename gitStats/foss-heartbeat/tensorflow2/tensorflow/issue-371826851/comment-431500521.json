{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/431500521", "html_url": "https://github.com/tensorflow/tensorflow/issues/23098#issuecomment-431500521", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23098", "id": 431500521, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTUwMDUyMQ==", "user": {"login": "feihugis", "id": 5057740, "node_id": "MDQ6VXNlcjUwNTc3NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5057740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feihugis", "html_url": "https://github.com/feihugis", "followers_url": "https://api.github.com/users/feihugis/followers", "following_url": "https://api.github.com/users/feihugis/following{/other_user}", "gists_url": "https://api.github.com/users/feihugis/gists{/gist_id}", "starred_url": "https://api.github.com/users/feihugis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feihugis/subscriptions", "organizations_url": "https://api.github.com/users/feihugis/orgs", "repos_url": "https://api.github.com/users/feihugis/repos", "events_url": "https://api.github.com/users/feihugis/events{/privacy}", "received_events_url": "https://api.github.com/users/feihugis/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-19T21:12:40Z", "updated_at": "2018-10-31T02:28:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17806604\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yipsang\">@yipsang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=42781361\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/harshini-gadige\">@harshini-gadige</a> I think this is not a bug in TensorFlow. Instead, there are some issues in the example code. In <code>serialized_example = examples.get_next()</code>, <code>serialized_example</code> is an iterator, but both <code>correct_example</code> and <code>example</code> will call <code>get_next</code> in one loop. That is why the output is not in the right order. For reading part, the below code can return the right output:</p>\n<pre><code>    dataset = tf.data.TFRecordDataset(filename)\n    examples = dataset.make_one_shot_iterator()\n    with tf.Session() as sess:\n        for _ in range(2):\n            serialized_example = examples.get_next()\n            # correct_example = tf.train.Example()\n            # correct_example.ParseFromString(serialized_example.eval())\n            # print(correct_example)\n            features = {\n                \"a\": tf.FixedLenFeature([3], tf.float32),\n                \"b\": tf.FixedLenFeature([3], tf.float32),\n            }\n            example = tf.parse_single_example(serialized=serialized_example, features=features)\n\n            keys = []\n            values = []\n            for name, tensor in example.items():\n                keys.append(name)\n                values.append(tensor)\n\n            real_values = sess.run(values)\n            for i in range(len(keys)):\n                print('{}: {}'.format(keys[i], real_values[i]))\n</code></pre>", "body_text": "@yipsang @harshini-gadige I think this is not a bug in TensorFlow. Instead, there are some issues in the example code. In serialized_example = examples.get_next(), serialized_example is an iterator, but both correct_example and example will call get_next in one loop. That is why the output is not in the right order. For reading part, the below code can return the right output:\n    dataset = tf.data.TFRecordDataset(filename)\n    examples = dataset.make_one_shot_iterator()\n    with tf.Session() as sess:\n        for _ in range(2):\n            serialized_example = examples.get_next()\n            # correct_example = tf.train.Example()\n            # correct_example.ParseFromString(serialized_example.eval())\n            # print(correct_example)\n            features = {\n                \"a\": tf.FixedLenFeature([3], tf.float32),\n                \"b\": tf.FixedLenFeature([3], tf.float32),\n            }\n            example = tf.parse_single_example(serialized=serialized_example, features=features)\n\n            keys = []\n            values = []\n            for name, tensor in example.items():\n                keys.append(name)\n                values.append(tensor)\n\n            real_values = sess.run(values)\n            for i in range(len(keys)):\n                print('{}: {}'.format(keys[i], real_values[i]))", "body": "@yipsang @harshini-gadige I think this is not a bug in TensorFlow. Instead, there are some issues in the example code. In `serialized_example = examples.get_next()`, `serialized_example` is an iterator, but both `correct_example` and `example` will call `get_next` in one loop. That is why the output is not in the right order. For reading part, the below code can return the right output:\r\n```\r\n    dataset = tf.data.TFRecordDataset(filename)\r\n    examples = dataset.make_one_shot_iterator()\r\n    with tf.Session() as sess:\r\n        for _ in range(2):\r\n            serialized_example = examples.get_next()\r\n            # correct_example = tf.train.Example()\r\n            # correct_example.ParseFromString(serialized_example.eval())\r\n            # print(correct_example)\r\n            features = {\r\n                \"a\": tf.FixedLenFeature([3], tf.float32),\r\n                \"b\": tf.FixedLenFeature([3], tf.float32),\r\n            }\r\n            example = tf.parse_single_example(serialized=serialized_example, features=features)\r\n\r\n            keys = []\r\n            values = []\r\n            for name, tensor in example.items():\r\n                keys.append(name)\r\n                values.append(tensor)\r\n\r\n            real_values = sess.run(values)\r\n            for i in range(len(keys)):\r\n                print('{}: {}'.format(keys[i], real_values[i]))\r\n```  "}