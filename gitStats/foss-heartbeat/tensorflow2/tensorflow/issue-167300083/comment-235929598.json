{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/235929598", "html_url": "https://github.com/tensorflow/tensorflow/issues/3489#issuecomment-235929598", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3489", "id": 235929598, "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTkyOTU5OA==", "user": {"login": "rdadolf", "id": 6673605, "node_id": "MDQ6VXNlcjY2NzM2MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6673605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdadolf", "html_url": "https://github.com/rdadolf", "followers_url": "https://api.github.com/users/rdadolf/followers", "following_url": "https://api.github.com/users/rdadolf/following{/other_user}", "gists_url": "https://api.github.com/users/rdadolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdadolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdadolf/subscriptions", "organizations_url": "https://api.github.com/users/rdadolf/orgs", "repos_url": "https://api.github.com/users/rdadolf/repos", "events_url": "https://api.github.com/users/rdadolf/events{/privacy}", "received_events_url": "https://api.github.com/users/rdadolf/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-28T15:25:31Z", "updated_at": "2016-07-28T15:25:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Perhaps this is more appropriate for over on stackoverflow, since I'm not sure there's a bug here. But let's discuss anyways. I'm working on performance analysis tools for TF, so I'm interested in your view.</p>\n<p>One question is what do you want the behavior to be? If you literally just want a concatenation, one way of doing this is to record both traces and generate a new protobuf with both of their elements. The structure of the RunMetadata protobuf isn't that bad:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/protobuf/config.proto#L224\">top level</a><br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/step_stats.proto#L29\">most everything else</a></p>\n<p>It sounds like you want something more intelligent, though. If you're trying to do something like a moving average, you'll need to muck with actual data, and that raises more questions. For instance, how would heterogeneous tensor shapes get handled? (i.e., what if a tensor has different dimensions between two run steps?)</p>", "body_text": "Perhaps this is more appropriate for over on stackoverflow, since I'm not sure there's a bug here. But let's discuss anyways. I'm working on performance analysis tools for TF, so I'm interested in your view.\nOne question is what do you want the behavior to be? If you literally just want a concatenation, one way of doing this is to record both traces and generate a new protobuf with both of their elements. The structure of the RunMetadata protobuf isn't that bad:\ntop level\nmost everything else\nIt sounds like you want something more intelligent, though. If you're trying to do something like a moving average, you'll need to muck with actual data, and that raises more questions. For instance, how would heterogeneous tensor shapes get handled? (i.e., what if a tensor has different dimensions between two run steps?)", "body": "Perhaps this is more appropriate for over on stackoverflow, since I'm not sure there's a bug here. But let's discuss anyways. I'm working on performance analysis tools for TF, so I'm interested in your view.\n\nOne question is what do you want the behavior to be? If you literally just want a concatenation, one way of doing this is to record both traces and generate a new protobuf with both of their elements. The structure of the RunMetadata protobuf isn't that bad:\n[top level](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/protobuf/config.proto#L224) \n[most everything else](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/step_stats.proto#L29)\n\nIt sounds like you want something more intelligent, though. If you're trying to do something like a moving average, you'll need to muck with actual data, and that raises more questions. For instance, how would heterogeneous tensor shapes get handled? (i.e., what if a tensor has different dimensions between two run steps?)\n"}