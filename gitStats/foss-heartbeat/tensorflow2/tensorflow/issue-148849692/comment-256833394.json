{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/256833394", "html_url": "https://github.com/tensorflow/tensorflow/issues/1981#issuecomment-256833394", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1981", "id": 256833394, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjgzMzM5NA==", "user": {"login": "kudkudak", "id": 1571945, "node_id": "MDQ6VXNlcjE1NzE5NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1571945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kudkudak", "html_url": "https://github.com/kudkudak", "followers_url": "https://api.github.com/users/kudkudak/followers", "following_url": "https://api.github.com/users/kudkudak/following{/other_user}", "gists_url": "https://api.github.com/users/kudkudak/gists{/gist_id}", "starred_url": "https://api.github.com/users/kudkudak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kudkudak/subscriptions", "organizations_url": "https://api.github.com/users/kudkudak/orgs", "repos_url": "https://api.github.com/users/kudkudak/repos", "events_url": "https://api.github.com/users/kudkudak/events{/privacy}", "received_events_url": "https://api.github.com/users/kudkudak/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-28T04:25:30Z", "updated_at": "2016-10-28T04:25:30Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=175486\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ilblackdragon\">@ilblackdragon</a> hmm. Some thoughts from outside point of view: standard support for cases like that in sklearn is passing classes as arguments (for instance in <code>sklearn.metrics</code>). Why not add classes argument to fit and enforce it in the case of streaming data, and if data is not streaming, do the transformation? It seems slightly confusing for heavy sklearn users (as the example hopefully shows)?</p>", "body_text": "@ilblackdragon hmm. Some thoughts from outside point of view: standard support for cases like that in sklearn is passing classes as arguments (for instance in sklearn.metrics). Why not add classes argument to fit and enforce it in the case of streaming data, and if data is not streaming, do the transformation? It seems slightly confusing for heavy sklearn users (as the example hopefully shows)?", "body": "@ilblackdragon hmm. Some thoughts from outside point of view: standard support for cases like that in sklearn is passing classes as arguments (for instance in `sklearn.metrics`). Why not add classes argument to fit and enforce it in the case of streaming data, and if data is not streaming, do the transformation? It seems slightly confusing for heavy sklearn users (as the example hopefully shows)?\n"}