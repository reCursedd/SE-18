{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/428091121", "html_url": "https://github.com/tensorflow/tensorflow/issues/22162#issuecomment-428091121", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22162", "id": 428091121, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODA5MTEyMQ==", "user": {"login": "stefsietz", "id": 2621937, "node_id": "MDQ6VXNlcjI2MjE5Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2621937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefsietz", "html_url": "https://github.com/stefsietz", "followers_url": "https://api.github.com/users/stefsietz/followers", "following_url": "https://api.github.com/users/stefsietz/following{/other_user}", "gists_url": "https://api.github.com/users/stefsietz/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefsietz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefsietz/subscriptions", "organizations_url": "https://api.github.com/users/stefsietz/orgs", "repos_url": "https://api.github.com/users/stefsietz/repos", "events_url": "https://api.github.com/users/stefsietz/events{/privacy}", "received_events_url": "https://api.github.com/users/stefsietz/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-09T07:35:13Z", "updated_at": "2018-10-09T07:36:42Z", "author_association": "NONE", "body_html": "<p>here is a new example, where i have implemented a function that manipulates the GraphDef, doing some necessary renaming. This function could be optionally included in the \"import_graph_def\" function. Should I make a pull request for this?</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\ndef build_map_graph(name_scope=''):\n    graph = tf.Graph()\n    with graph.as_default():\n        input_tensor = tf.placeholder(tf.float32, shape=[None, 1], name='input')\n\n        def mult(input):\n            input = tf.multiply(input, 2)\n            return input\n\n        with tf.name_scope(name_scope):\n            multiplied = tf.map_fn(mult, input_tensor)\n            print(multiplied.name)\n        out_tensor = tf.identity(multiplied, name='output')\n\n    return graph\n\ndef build_simple_graph():\n    graph = tf.Graph()\n    with graph.as_default():\n        input_tensor = tf.placeholder(tf.float32, shape=[None, 1], name='input')\n\n        multiplied = tf.multiply(input_tensor, 2)\n        out_tensor = tf.identity(multiplied, name='output')\n\n    return graph\n\ndef rename_frame_name(graphdef, suffix):\n    for n in graphdef.node:\n        if \"while\" in n.name:\n            if \"frame_name\" in n.attr:\n                n.attr[\"frame_name\"].s = str(n.attr[\"frame_name\"]).replace(\"while_context\",\n                                                                           \"while_context\" + suffix).encode('utf-8')\n\n\ndef connect_graphs(both_are_map_graphs=False, rename_second=False):\n    test_data = np.asarray([[1.0], [2.0]], dtype=np.float32)\n\n    graph1 = build_map_graph()\n    g1_graph_def = graph1.as_graph_def()\n\n    g2_map_name_scope = 'graph2_map' if rename_second else ''\n    graph2 = build_map_graph(g2_map_name_scope) if both_are_map_graphs else build_simple_graph()\n\n    g2_graph_def = graph2.as_graph_def()\n\n    connected_graph = tf.Graph()\n\n    with connected_graph.as_default():\n        g1name = \"graph1\"\n        g2name = \"graph2\"\n\n        rename_frame_name(g1_graph_def, g1name)\n        rename_frame_name(g2_graph_def, g2name)\n\n        tf.import_graph_def(g1_graph_def, name=g1name)\n\n        g1_output_tensor = tf.get_default_graph().get_tensor_by_name('graph1/output:0')\n        g1_input_tensor = tf.get_default_graph().get_tensor_by_name('graph1/input:0')\n\n        tf.import_graph_def(g2_graph_def, name=g2name, input_map={'input': g1_output_tensor})\n        g2_output_tensor = tf.get_default_graph().get_tensor_by_name('graph2/output:0')\n\n        with tf.Session() as sess:\n            result = sess.run(g2_output_tensor, {g1_input_tensor: test_data})\n            print(result)\n\n\n#runs fine\nconnect_graphs(both_are_map_graphs=False)\nconnect_graphs(both_are_map_graphs=True, rename_second=True)\n\n#now doesn't throw error anymore\nconnect_graphs(both_are_map_graphs=True)\n</code></pre>", "body_text": "here is a new example, where i have implemented a function that manipulates the GraphDef, doing some necessary renaming. This function could be optionally included in the \"import_graph_def\" function. Should I make a pull request for this?\nimport tensorflow as tf\nimport numpy as np\n\ndef build_map_graph(name_scope=''):\n    graph = tf.Graph()\n    with graph.as_default():\n        input_tensor = tf.placeholder(tf.float32, shape=[None, 1], name='input')\n\n        def mult(input):\n            input = tf.multiply(input, 2)\n            return input\n\n        with tf.name_scope(name_scope):\n            multiplied = tf.map_fn(mult, input_tensor)\n            print(multiplied.name)\n        out_tensor = tf.identity(multiplied, name='output')\n\n    return graph\n\ndef build_simple_graph():\n    graph = tf.Graph()\n    with graph.as_default():\n        input_tensor = tf.placeholder(tf.float32, shape=[None, 1], name='input')\n\n        multiplied = tf.multiply(input_tensor, 2)\n        out_tensor = tf.identity(multiplied, name='output')\n\n    return graph\n\ndef rename_frame_name(graphdef, suffix):\n    for n in graphdef.node:\n        if \"while\" in n.name:\n            if \"frame_name\" in n.attr:\n                n.attr[\"frame_name\"].s = str(n.attr[\"frame_name\"]).replace(\"while_context\",\n                                                                           \"while_context\" + suffix).encode('utf-8')\n\n\ndef connect_graphs(both_are_map_graphs=False, rename_second=False):\n    test_data = np.asarray([[1.0], [2.0]], dtype=np.float32)\n\n    graph1 = build_map_graph()\n    g1_graph_def = graph1.as_graph_def()\n\n    g2_map_name_scope = 'graph2_map' if rename_second else ''\n    graph2 = build_map_graph(g2_map_name_scope) if both_are_map_graphs else build_simple_graph()\n\n    g2_graph_def = graph2.as_graph_def()\n\n    connected_graph = tf.Graph()\n\n    with connected_graph.as_default():\n        g1name = \"graph1\"\n        g2name = \"graph2\"\n\n        rename_frame_name(g1_graph_def, g1name)\n        rename_frame_name(g2_graph_def, g2name)\n\n        tf.import_graph_def(g1_graph_def, name=g1name)\n\n        g1_output_tensor = tf.get_default_graph().get_tensor_by_name('graph1/output:0')\n        g1_input_tensor = tf.get_default_graph().get_tensor_by_name('graph1/input:0')\n\n        tf.import_graph_def(g2_graph_def, name=g2name, input_map={'input': g1_output_tensor})\n        g2_output_tensor = tf.get_default_graph().get_tensor_by_name('graph2/output:0')\n\n        with tf.Session() as sess:\n            result = sess.run(g2_output_tensor, {g1_input_tensor: test_data})\n            print(result)\n\n\n#runs fine\nconnect_graphs(both_are_map_graphs=False)\nconnect_graphs(both_are_map_graphs=True, rename_second=True)\n\n#now doesn't throw error anymore\nconnect_graphs(both_are_map_graphs=True)", "body": "here is a new example, where i have implemented a function that manipulates the GraphDef, doing some necessary renaming. This function could be optionally included in the \"import_graph_def\" function. Should I make a pull request for this?\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndef build_map_graph(name_scope=''):\r\n    graph = tf.Graph()\r\n    with graph.as_default():\r\n        input_tensor = tf.placeholder(tf.float32, shape=[None, 1], name='input')\r\n\r\n        def mult(input):\r\n            input = tf.multiply(input, 2)\r\n            return input\r\n\r\n        with tf.name_scope(name_scope):\r\n            multiplied = tf.map_fn(mult, input_tensor)\r\n            print(multiplied.name)\r\n        out_tensor = tf.identity(multiplied, name='output')\r\n\r\n    return graph\r\n\r\ndef build_simple_graph():\r\n    graph = tf.Graph()\r\n    with graph.as_default():\r\n        input_tensor = tf.placeholder(tf.float32, shape=[None, 1], name='input')\r\n\r\n        multiplied = tf.multiply(input_tensor, 2)\r\n        out_tensor = tf.identity(multiplied, name='output')\r\n\r\n    return graph\r\n\r\ndef rename_frame_name(graphdef, suffix):\r\n    for n in graphdef.node:\r\n        if \"while\" in n.name:\r\n            if \"frame_name\" in n.attr:\r\n                n.attr[\"frame_name\"].s = str(n.attr[\"frame_name\"]).replace(\"while_context\",\r\n                                                                           \"while_context\" + suffix).encode('utf-8')\r\n\r\n\r\ndef connect_graphs(both_are_map_graphs=False, rename_second=False):\r\n    test_data = np.asarray([[1.0], [2.0]], dtype=np.float32)\r\n\r\n    graph1 = build_map_graph()\r\n    g1_graph_def = graph1.as_graph_def()\r\n\r\n    g2_map_name_scope = 'graph2_map' if rename_second else ''\r\n    graph2 = build_map_graph(g2_map_name_scope) if both_are_map_graphs else build_simple_graph()\r\n\r\n    g2_graph_def = graph2.as_graph_def()\r\n\r\n    connected_graph = tf.Graph()\r\n\r\n    with connected_graph.as_default():\r\n        g1name = \"graph1\"\r\n        g2name = \"graph2\"\r\n\r\n        rename_frame_name(g1_graph_def, g1name)\r\n        rename_frame_name(g2_graph_def, g2name)\r\n\r\n        tf.import_graph_def(g1_graph_def, name=g1name)\r\n\r\n        g1_output_tensor = tf.get_default_graph().get_tensor_by_name('graph1/output:0')\r\n        g1_input_tensor = tf.get_default_graph().get_tensor_by_name('graph1/input:0')\r\n\r\n        tf.import_graph_def(g2_graph_def, name=g2name, input_map={'input': g1_output_tensor})\r\n        g2_output_tensor = tf.get_default_graph().get_tensor_by_name('graph2/output:0')\r\n\r\n        with tf.Session() as sess:\r\n            result = sess.run(g2_output_tensor, {g1_input_tensor: test_data})\r\n            print(result)\r\n\r\n\r\n#runs fine\r\nconnect_graphs(both_are_map_graphs=False)\r\nconnect_graphs(both_are_map_graphs=True, rename_second=True)\r\n\r\n#now doesn't throw error anymore\r\nconnect_graphs(both_are_map_graphs=True)\r\n```"}