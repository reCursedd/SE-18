{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/428063121", "html_url": "https://github.com/tensorflow/tensorflow/issues/22162#issuecomment-428063121", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22162", "id": 428063121, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODA2MzEyMQ==", "user": {"login": "stefsietz", "id": 2621937, "node_id": "MDQ6VXNlcjI2MjE5Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2621937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefsietz", "html_url": "https://github.com/stefsietz", "followers_url": "https://api.github.com/users/stefsietz/followers", "following_url": "https://api.github.com/users/stefsietz/following{/other_user}", "gists_url": "https://api.github.com/users/stefsietz/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefsietz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefsietz/subscriptions", "organizations_url": "https://api.github.com/users/stefsietz/orgs", "repos_url": "https://api.github.com/users/stefsietz/repos", "events_url": "https://api.github.com/users/stefsietz/events{/privacy}", "received_events_url": "https://api.github.com/users/stefsietz/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-09T05:19:08Z", "updated_at": "2018-10-09T05:19:08Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5057740\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/feihugis\">@feihugis</a> no, this does not solve the problem, this merely corrects the minimal example I provided to demonstrate the problem to the way I initially intended it to be. The real world scenario where I am facing this problem is like this:<br>\nI am training to separate stages with the tensorflow object detection framework. Then I am connecting them together for inference (the second graph gets the cropped detections from the first stage as inputs). I import the two graphs with different name scopes, but still I get this error message unless I go into deep into the tensorflow code and add a name scope right to the beginning of \"shape_utils.static_or_dynamic_map_fn\", which I then have to change for each graph when running the provided export script.</p>\n<p>This can't be the way it's supposed to be. When I import the 2 graphs with different name scopes, I expect to be able to connect them. If I'd get a frozen graph from someone else, I couldn't go in and export it again with a different map_fn name scope like my current workaround. The error message is even stating <code>\"This is an internal bug, please file a bug report with instructions on how to reproduce the error.\"</code>. Please look into the provided example seriously:<br>\nThe rename_second= True in <code>connect_graphs(both_are_map_graphs=True, rename_second=True)</code><br>\ncauses the map_fn name scope to be renamed in the graph BUILD not when IMPORTING. <code>connect_graphs(both_are_map_graphs=True, rename_second=False)</code> still imports the graphs with two different names, but here the bug is caused.</p>", "body_text": "@feihugis no, this does not solve the problem, this merely corrects the minimal example I provided to demonstrate the problem to the way I initially intended it to be. The real world scenario where I am facing this problem is like this:\nI am training to separate stages with the tensorflow object detection framework. Then I am connecting them together for inference (the second graph gets the cropped detections from the first stage as inputs). I import the two graphs with different name scopes, but still I get this error message unless I go into deep into the tensorflow code and add a name scope right to the beginning of \"shape_utils.static_or_dynamic_map_fn\", which I then have to change for each graph when running the provided export script.\nThis can't be the way it's supposed to be. When I import the 2 graphs with different name scopes, I expect to be able to connect them. If I'd get a frozen graph from someone else, I couldn't go in and export it again with a different map_fn name scope like my current workaround. The error message is even stating \"This is an internal bug, please file a bug report with instructions on how to reproduce the error.\". Please look into the provided example seriously:\nThe rename_second= True in connect_graphs(both_are_map_graphs=True, rename_second=True)\ncauses the map_fn name scope to be renamed in the graph BUILD not when IMPORTING. connect_graphs(both_are_map_graphs=True, rename_second=False) still imports the graphs with two different names, but here the bug is caused.", "body": "@feihugis no, this does not solve the problem, this merely corrects the minimal example I provided to demonstrate the problem to the way I initially intended it to be. The real world scenario where I am facing this problem is like this:\r\nI am training to separate stages with the tensorflow object detection framework. Then I am connecting them together for inference (the second graph gets the cropped detections from the first stage as inputs). I import the two graphs with different name scopes, but still I get this error message unless I go into deep into the tensorflow code and add a name scope right to the beginning of \"shape_utils.static_or_dynamic_map_fn\", which I then have to change for each graph when running the provided export script.\r\n\r\nThis can't be the way it's supposed to be. When I import the 2 graphs with different name scopes, I expect to be able to connect them. If I'd get a frozen graph from someone else, I couldn't go in and export it again with a different map_fn name scope like my current workaround. The error message is even stating `\"This is an internal bug, please file a bug report with instructions on how to reproduce the error.\"`. Please look into the provided example seriously:\r\nThe rename_second= True in `connect_graphs(both_are_map_graphs=True, rename_second=True)`\r\ncauses the map_fn name scope to be renamed in the graph BUILD not when IMPORTING. `connect_graphs(both_are_map_graphs=True, rename_second=False)` still imports the graphs with two different names, but here the bug is caused."}