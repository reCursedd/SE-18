{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20478", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20478/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20478/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20478/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20478", "id": 337557458, "node_id": "MDU6SXNzdWUzMzc1NTc0NTg=", "number": 20478, "title": "Support dense tensors in sequence_numeric_column", "user": {"login": "jperl", "id": 1136652, "node_id": "MDQ6VXNlcjExMzY2NTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1136652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jperl", "html_url": "https://github.com/jperl", "followers_url": "https://api.github.com/users/jperl/followers", "following_url": "https://api.github.com/users/jperl/following{/other_user}", "gists_url": "https://api.github.com/users/jperl/gists{/gist_id}", "starred_url": "https://api.github.com/users/jperl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jperl/subscriptions", "organizations_url": "https://api.github.com/users/jperl/orgs", "repos_url": "https://api.github.com/users/jperl/repos", "events_url": "https://api.github.com/users/jperl/events{/privacy}", "received_events_url": "https://api.github.com/users/jperl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2018-07-02T15:07:28Z", "updated_at": "2018-09-21T16:10:14Z", "closed_at": "2018-08-08T12:09:57Z", "author_association": "CONTRIBUTOR", "body_html": "<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 18.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nBinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nTensorflow 1.8.0</li>\n<li><strong>Python version</strong>:<br>\n3.8.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nCUDA 9.0/cuDNN 7.0</li>\n<li><strong>GPU model and memory</strong>:<br>\n1080TI 11GB</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nN/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I am training a time series using an RNN and my input data has a fixed sequence length per batch.</p>\n<p>I am using <a href=\"https://www.tensorflow.org/api_docs/python/tf/parse_single_example\" rel=\"nofollow\"><code>parse_single_example</code></a> with <a href=\"https://www.tensorflow.org/api_docs/python/tf/estimator/regressor_parse_example_spec\" rel=\"nofollow\"><code>regressor_parse_example_spec</code></a> and <a href=\"https://www.tensorflow.org/api_docs/python/tf/contrib/feature_column/sequence_numeric_column\" rel=\"nofollow\"><code>sequence_numeric_column</code></a> which parses the features as sparse tensors because <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/contrib/feature_column/python/feature_column/sequence_feature_column.py#L419\"><code>_parse_example_spec</code> returns <code>VarLenFeature</code></a>.</p>\n<p>I want to parse our data as dense tensors because the underlying data is dense, and using sparse tensors in our graph requires extra unnecessary complexity for our calculations. I want to continue to use <code>feature_columns</code> to describe our data and <code>sequence_input_layer</code> but I propose adding a new feature column type <code>sequence_fixed_len_numeric_column</code> that parses as a dense tensor.</p>\n<p><a href=\"https://gist.github.com/jperl/245c414793a5271da72183bada93c55c#file-sequence_fixed_len_numeric_column-py-L35\">Here is the implementation</a> and I would be happy to submit a PR + add tests. But first I wanted to confirm this a idiomatic approach.</p>\n<p>Alternatively I could add a parameter to <code>sequence_numeric_column</code>, <code>is_fixed</code> to accomplish the same things.</p>", "body_text": "Have I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 18.04\nTensorFlow installed from (source or binary):\nBinary\nTensorFlow version (use command below):\nTensorflow 1.8.0\nPython version:\n3.8.3\nBazel version (if compiling from source):\nN/A\nCUDA/cuDNN version:\nCUDA 9.0/cuDNN 7.0\nGPU model and memory:\n1080TI 11GB\nExact command to reproduce:\nN/A\n\nDescribe the problem\nI am training a time series using an RNN and my input data has a fixed sequence length per batch.\nI am using parse_single_example with regressor_parse_example_spec and sequence_numeric_column which parses the features as sparse tensors because _parse_example_spec returns VarLenFeature.\nI want to parse our data as dense tensors because the underlying data is dense, and using sparse tensors in our graph requires extra unnecessary complexity for our calculations. I want to continue to use feature_columns to describe our data and sequence_input_layer but I propose adding a new feature column type sequence_fixed_len_numeric_column that parses as a dense tensor.\nHere is the implementation and I would be happy to submit a PR + add tests. But first I wanted to confirm this a idiomatic approach.\nAlternatively I could add a parameter to sequence_numeric_column, is_fixed to accomplish the same things.", "body": "- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 18.04\r\n- **TensorFlow installed from (source or binary)**:\r\nBinary\r\n- **TensorFlow version (use command below)**:\r\nTensorflow 1.8.0\r\n- **Python version**: \r\n3.8.3\r\n- **Bazel version (if compiling from source)**:\r\nN/A\r\n- **CUDA/cuDNN version**:\r\nCUDA 9.0/cuDNN 7.0\r\n- **GPU model and memory**:\r\n1080TI 11GB\r\n- **Exact command to reproduce**:\r\nN/A\r\n\r\n### Describe the problem\r\n\r\nI am training a time series using an RNN and my input data has a fixed sequence length per batch.\r\n\r\nI am using [`parse_single_example`](https://www.tensorflow.org/api_docs/python/tf/parse_single_example) with [`regressor_parse_example_spec`](https://www.tensorflow.org/api_docs/python/tf/estimator/regressor_parse_example_spec) and [`sequence_numeric_column`](https://www.tensorflow.org/api_docs/python/tf/contrib/feature_column/sequence_numeric_column) which parses the features as sparse tensors because [`_parse_example_spec` returns `VarLenFeature`](https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/contrib/feature_column/python/feature_column/sequence_feature_column.py#L419).\r\n\r\nI want to parse our data as dense tensors because the underlying data is dense, and using sparse tensors in our graph requires extra unnecessary complexity for our calculations. I want to continue to use `feature_columns` to describe our data and `sequence_input_layer` but I propose adding a new feature column type `sequence_fixed_len_numeric_column` that parses as a dense tensor.\r\n\r\n[Here is the implementation](https://gist.github.com/jperl/245c414793a5271da72183bada93c55c#file-sequence_fixed_len_numeric_column-py-L35) and I would be happy to submit a PR + add tests. But first I wanted to confirm this a idiomatic approach.\r\n\r\nAlternatively I could add a parameter to `sequence_numeric_column`, `is_fixed` to accomplish the same things."}