{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16276", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16276/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16276/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16276/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16276", "id": 290349375, "node_id": "MDU6SXNzdWUyOTAzNDkzNzU=", "number": 16276, "title": "Linking against system-installed cuda and cudnn", "user": {"login": "Celelibi", "id": 6136274, "node_id": "MDQ6VXNlcjYxMzYyNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6136274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Celelibi", "html_url": "https://github.com/Celelibi", "followers_url": "https://api.github.com/users/Celelibi/followers", "following_url": "https://api.github.com/users/Celelibi/following{/other_user}", "gists_url": "https://api.github.com/users/Celelibi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Celelibi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Celelibi/subscriptions", "organizations_url": "https://api.github.com/users/Celelibi/orgs", "repos_url": "https://api.github.com/users/Celelibi/repos", "events_url": "https://api.github.com/users/Celelibi/events{/privacy}", "received_events_url": "https://api.github.com/users/Celelibi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-22T04:42:06Z", "updated_at": "2018-01-31T02:36:35Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Debian sid</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source (trying)</li>\n<li><strong>TensorFlow version (use command below)</strong>: git master (commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/9fb9ac66ce5236ff045630cad6793f0531bf9d2c/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/9fb9ac66ce5236ff045630cad6793f0531bf9d2c\"><tt>9fb9ac6</tt></a>) or any version before.</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.9.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 7.2.0</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 9.0, cuDNN 6.0</li>\n<li><strong>GPU model and memory</strong>: GeForce GTX 1070</li>\n<li><strong>Exact command to reproduce</strong>:<br>\n<code>bazel build --config=opt --config=mkl --config=cuda //tensorflow/tools/pip_package:build_pip_package</code></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The build system currently require that all the libraries from the CUDA toolkit are stored in a specific directory called <code>cuda_toolkit_path</code>, both in the bazel scripts and in the <code>configure.py</code> script. However, some systems (like Debian) have a packaged version of CUDA which installs the libraries in the standard path which cannot be found by <code>configure.py</code>.</p>\n<p>The compiler can find those libraries just right with nothing more than <code>-lcuda</code>. It would be nice if the build system could rely on the compiler's ability to find its libraries instead of relying on the knowledge of their full path.</p>\n<h3>Source code / logs</h3>\n<p>As a feature-request / enhancement-request, this section seems irrelevant.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Debian sid\nTensorFlow installed from (source or binary): source (trying)\nTensorFlow version (use command below): git master (commit 9fb9ac6) or any version before.\nPython version: 3.6\nBazel version (if compiling from source): 0.9.0\nGCC/Compiler version (if compiling from source): 7.2.0\nCUDA/cuDNN version: CUDA 9.0, cuDNN 6.0\nGPU model and memory: GeForce GTX 1070\nExact command to reproduce:\nbazel build --config=opt --config=mkl --config=cuda //tensorflow/tools/pip_package:build_pip_package\n\nDescribe the problem\nThe build system currently require that all the libraries from the CUDA toolkit are stored in a specific directory called cuda_toolkit_path, both in the bazel scripts and in the configure.py script. However, some systems (like Debian) have a packaged version of CUDA which installs the libraries in the standard path which cannot be found by configure.py.\nThe compiler can find those libraries just right with nothing more than -lcuda. It would be nice if the build system could rely on the compiler's ability to find its libraries instead of relying on the knowledge of their full path.\nSource code / logs\nAs a feature-request / enhancement-request, this section seems irrelevant.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Debian sid\r\n- **TensorFlow installed from (source or binary)**: source (trying)\r\n- **TensorFlow version (use command below)**: git master (commit 9fb9ac66ce) or any version before.\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: 0.9.0\r\n- **GCC/Compiler version (if compiling from source)**: 7.2.0\r\n- **CUDA/cuDNN version**: CUDA 9.0, cuDNN 6.0\r\n- **GPU model and memory**: GeForce GTX 1070\r\n- **Exact command to reproduce**:\r\n`bazel build --config=opt --config=mkl --config=cuda //tensorflow/tools/pip_package:build_pip_package`\r\n\r\n### Describe the problem\r\nThe build system currently require that all the libraries from the CUDA toolkit are stored in a specific directory called `cuda_toolkit_path`, both in the bazel scripts and in the `configure.py` script. However, some systems (like Debian) have a packaged version of CUDA which installs the libraries in the standard path which cannot be found by `configure.py`.\r\n\r\nThe compiler can find those libraries just right with nothing more than `-lcuda`. It would be nice if the build system could rely on the compiler's ability to find its libraries instead of relying on the knowledge of their full path.\r\n\r\n### Source code / logs\r\nAs a feature-request / enhancement-request, this section seems irrelevant."}