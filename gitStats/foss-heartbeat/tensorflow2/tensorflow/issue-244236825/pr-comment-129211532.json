{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/129211532", "pull_request_review_id": 51959080, "id": 129211532, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyOTIxMTUzMg==", "diff_hunk": "@@ -183,6 +186,54 @@ class SegmentReductionOp : public OpKernel {\n   }\n };\n \n+#ifdef GOOGLE_CUDA\n+//  SegmentSumGPUOp is a segment sum operator implemented for GPU only.\n+template <class T, class Index>\n+class SegmentSumGPUOp : public OpKernel {", "path": "tensorflow/core/kernels/segment_reduction_ops.cc", "position": null, "original_position": 17, "commit_id": "50517c902261289b8163ded0979d5ac28bfe9c6d", "original_commit_id": "aba87c28d57d9fd16aacce476b405ebeed50263e", "user": {"login": "tjingrant", "id": 6410074, "node_id": "MDQ6VXNlcjY0MTAwNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6410074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjingrant", "html_url": "https://github.com/tjingrant", "followers_url": "https://api.github.com/users/tjingrant/followers", "following_url": "https://api.github.com/users/tjingrant/following{/other_user}", "gists_url": "https://api.github.com/users/tjingrant/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjingrant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjingrant/subscriptions", "organizations_url": "https://api.github.com/users/tjingrant/orgs", "repos_url": "https://api.github.com/users/tjingrant/repos", "events_url": "https://api.github.com/users/tjingrant/events{/privacy}", "received_events_url": "https://api.github.com/users/tjingrant/received_events", "type": "User", "site_admin": false}, "body": "Hi, the current implementation of SegmentReductionOps is actually rather specialized for non-GPU devices. I'm not sure if the usual different-functor-for-different-device approach is the best way to go here. I actually started this implementation by porting existing code to be reused on GPU but later gave up because it's very inefficient for GPU device; in addition, the original implementation takes data input as non-primitive data types (i.e., TensorMap) which means if I were to use GPU specialized functors, I may have to introduce some extra data types into the .cu file and risk contaminating the .cu file with unnecessary header files; again, with these considerations, I'm not sure overloading SegmentReductionOp is the best approach. Nevertheless, I'm more than happy to consult with your thoughts on this.", "created_at": "2017-07-25T04:48:53Z", "updated_at": "2017-08-29T00:31:24Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11630#discussion_r129211532", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11630", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/129211532"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11630#discussion_r129211532"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11630"}}, "body_html": "<p>Hi, the current implementation of SegmentReductionOps is actually rather specialized for non-GPU devices. I'm not sure if the usual different-functor-for-different-device approach is the best way to go here. I actually started this implementation by porting existing code to be reused on GPU but later gave up because it's very inefficient for GPU device; in addition, the original implementation takes data input as non-primitive data types (i.e., TensorMap) which means if I were to use GPU specialized functors, I may have to introduce some extra data types into the .cu file and risk contaminating the .cu file with unnecessary header files; again, with these considerations, I'm not sure overloading SegmentReductionOp is the best approach. Nevertheless, I'm more than happy to consult with your thoughts on this.</p>", "body_text": "Hi, the current implementation of SegmentReductionOps is actually rather specialized for non-GPU devices. I'm not sure if the usual different-functor-for-different-device approach is the best way to go here. I actually started this implementation by porting existing code to be reused on GPU but later gave up because it's very inefficient for GPU device; in addition, the original implementation takes data input as non-primitive data types (i.e., TensorMap) which means if I were to use GPU specialized functors, I may have to introduce some extra data types into the .cu file and risk contaminating the .cu file with unnecessary header files; again, with these considerations, I'm not sure overloading SegmentReductionOp is the best approach. Nevertheless, I'm more than happy to consult with your thoughts on this.", "in_reply_to_id": 129194571}