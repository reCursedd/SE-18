{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/408107188", "html_url": "https://github.com/tensorflow/tensorflow/issues/15564#issuecomment-408107188", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15564", "id": 408107188, "node_id": "MDEyOklzc3VlQ29tbWVudDQwODEwNzE4OA==", "user": {"login": "AndreasMadsen", "id": 505333, "node_id": "MDQ6VXNlcjUwNTMzMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/505333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreasMadsen", "html_url": "https://github.com/AndreasMadsen", "followers_url": "https://api.github.com/users/AndreasMadsen/followers", "following_url": "https://api.github.com/users/AndreasMadsen/following{/other_user}", "gists_url": "https://api.github.com/users/AndreasMadsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreasMadsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreasMadsen/subscriptions", "organizations_url": "https://api.github.com/users/AndreasMadsen/orgs", "repos_url": "https://api.github.com/users/AndreasMadsen/repos", "events_url": "https://api.github.com/users/AndreasMadsen/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreasMadsen/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-26T14:00:00Z", "updated_at": "2018-07-26T14:00:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1445226\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/clarken92\">@clarken92</a> I don't get how <code>max</code> makes things better. Yes, you avoid the issue of <code>mean</code> becoming <code>-inf</code>. But you still have an issue with <code>inf</code> and <code>nan</code>.</p>\n<p>Regarding, the stability of <code>mean</code> I don't think your solution fixes that much as it will still cause issues if a value is <code>1e30</code>. When comparing with <code>softmax</code> you should be aware that the numerical stability comes from very different places. In <code>sparsemax</code> the numerical instability comes from the <code>cumsum</code> in <code>softmax</code> it comes from <code>exp</code>. Hence the solution to prevent this should be different.</p>\n<p>In the end, I don't see how this addresses the issue of <code>inf</code> and <code>nan</code>. To me, your solution just addresses possible issues regarding numerical stability.</p>\n<hr>\n<p>I finally got time to make a fix for this, for now it is here: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/AndreasMadsen/tensorflow/commit/7e25025409e7921f2e7816dbc8ba7fe3a532428b/hovercard\" href=\"https://github.com/AndreasMadsen/tensorflow/commit/7e25025409e7921f2e7816dbc8ba7fe3a532428b\">AndreasMadsen@<tt>7e25025</tt></a>. I will open a PR as soon as I have tested it properly.</p>", "body_text": "@clarken92 I don't get how max makes things better. Yes, you avoid the issue of mean becoming -inf. But you still have an issue with inf and nan.\nRegarding, the stability of mean I don't think your solution fixes that much as it will still cause issues if a value is 1e30. When comparing with softmax you should be aware that the numerical stability comes from very different places. In sparsemax the numerical instability comes from the cumsum in softmax it comes from exp. Hence the solution to prevent this should be different.\nIn the end, I don't see how this addresses the issue of inf and nan. To me, your solution just addresses possible issues regarding numerical stability.\n\nI finally got time to make a fix for this, for now it is here: AndreasMadsen@7e25025. I will open a PR as soon as I have tested it properly.", "body": "@clarken92 I don't get how `max` makes things better. Yes, you avoid the issue of `mean` becoming `-inf`. But you still have an issue with `inf` and `nan`.\r\n\r\nRegarding, the stability of `mean` I don't think your solution fixes that much as it will still cause issues if a value is `1e30`. When comparing with `softmax` you should be aware that the numerical stability comes from very different places. In `sparsemax` the numerical instability comes from the `cumsum` in `softmax` it comes from `exp`. Hence the solution to prevent this should be different.\r\n\r\nIn the end, I don't see how this addresses the issue of `inf` and `nan`. To me, your solution just addresses possible issues regarding numerical stability.\r\n\r\n--- \r\n\r\nI finally got time to make a fix for this, for now it is here: https://github.com/AndreasMadsen/tensorflow/commit/7e25025409e7921f2e7816dbc8ba7fe3a532428b. I will open a PR as soon as I have tested it properly."}