{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/386395973", "html_url": "https://github.com/tensorflow/tensorflow/pull/18628#issuecomment-386395973", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18628", "id": 386395973, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjM5NTk3Mw==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-03T18:40:06Z", "updated_at": "2018-05-03T18:40:06Z", "author_association": "MEMBER", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23567362\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/seanli9jan\">@seanli9jan</a><br>\nThough, I'm still confused - given that the other image decoding functions actually decode into <code>uint8</code>s, then even after the cast to <code>uint16</code>, the range of the pixel values will be [0, 255]. While for PNGs the range will be <code>[0, 65535]</code>. So, I'm worried that if one invokes <code>tf.image.decode_image</code> and actually has a mix of image files, then there will be these subtle discrepancies in the data.</p>\n<p>(I apologize, I should have thought of this before suggesting the <code>cast</code>).</p>\n<p>It appears to me that if the images are actually <code>uint16</code> PNGs, then you're better off invoking <code>tf.image.decode_png</code> directly instead of plumbing a <code>dtype</code> argument through various libraries. Does that make sense? Or am I missing something?</p>", "body_text": "Thanks @seanli9jan\nThough, I'm still confused - given that the other image decoding functions actually decode into uint8s, then even after the cast to uint16, the range of the pixel values will be [0, 255]. While for PNGs the range will be [0, 65535]. So, I'm worried that if one invokes tf.image.decode_image and actually has a mix of image files, then there will be these subtle discrepancies in the data.\n(I apologize, I should have thought of this before suggesting the cast).\nIt appears to me that if the images are actually uint16 PNGs, then you're better off invoking tf.image.decode_png directly instead of plumbing a dtype argument through various libraries. Does that make sense? Or am I missing something?", "body": "Thanks @seanli9jan \r\nThough, I'm still confused - given that the other image decoding functions actually decode into `uint8`s, then even after the cast to `uint16`, the range of the pixel values will be [0, 255]. While for PNGs the range will be `[0, 65535]`. So, I'm worried that if one invokes `tf.image.decode_image` and actually has a mix of image files, then there will be these subtle discrepancies in the data.\r\n\r\n(I apologize, I should have thought of this before suggesting the `cast`).\r\n\r\nIt appears to me that if the images are actually `uint16` PNGs, then you're better off invoking `tf.image.decode_png` directly instead of plumbing a `dtype` argument through various libraries. Does that make sense? Or am I missing something?"}