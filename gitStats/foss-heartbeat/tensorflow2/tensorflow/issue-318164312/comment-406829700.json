{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/406829700", "html_url": "https://github.com/tensorflow/tensorflow/issues/18906#issuecomment-406829700", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18906", "id": 406829700, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjgyOTcwMA==", "user": {"login": "sliedes", "id": 2307997, "node_id": "MDQ6VXNlcjIzMDc5OTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2307997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliedes", "html_url": "https://github.com/sliedes", "followers_url": "https://api.github.com/users/sliedes/followers", "following_url": "https://api.github.com/users/sliedes/following{/other_user}", "gists_url": "https://api.github.com/users/sliedes/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliedes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliedes/subscriptions", "organizations_url": "https://api.github.com/users/sliedes/orgs", "repos_url": "https://api.github.com/users/sliedes/repos", "events_url": "https://api.github.com/users/sliedes/events{/privacy}", "received_events_url": "https://api.github.com/users/sliedes/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-21T23:24:35Z", "updated_at": "2018-07-21T23:24:35Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23486130\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tfboyd\">@tfboyd</a> I'm sorry that this will probably sound like a rant, but since you explicitly solicited for feedback...</p>\n<p>You say that you want to cater for a wide audience and therefore not force an upgrade to a new driver, and I'd say that's the right approach. However, in my experience due to the combination of (1) TensorFlow requiring a specific version of CUDA, and (2) distributions generally not supporting having multiple distributor-provided CUDA versions simultaneously installed, TensorFlow is one of the most difficult pieces of software to get to work. Almost every time I have installed TensorFlow on a computer there has been a mismatch of CUDA/cublas/cudnn/whatever versions. This is a major hassle, to the extent that usually my first reaction to code that uses TensorFlow is to search for an implementation for one of the other deep learning frameworks (I do have a CPU-only version of TensorFlow installed on my development workstation currently). I just don't want to go through the hassle of maintaining manually installed parallel versions of CUDA. The fact that you praise Docker as a solution should be good evidence that things are not as easy as they should \u2013 though probably it's still good advice.</p>\n<p>Right now, a competing deep learning framework doesn't yet support CUDA 9.2, but I find that forgivable when they provide binaries for CUDA versions 8, 9.0 and 9.1, with 9.2 coming soon. I don't know how they manage it, but installing the other framework has never been a hassle, while installing TensorFlow has always been painful.</p>\n<p>I do think however (with little actual knowledge) that Linux distributions could provide coinstallable CUDA packages (like cuda-9.0, cuda-9.1, cuda-9.2), just like there can be multiple different-sonamed versions of libraries. I can't understand why it's not done like that; at least for the required libraries it seems the exact same problem.</p>\n<p>So, if the goal is to cater for a wide audience, sorry to say but in my opinion it's not working.</p>", "body_text": "@tfboyd I'm sorry that this will probably sound like a rant, but since you explicitly solicited for feedback...\nYou say that you want to cater for a wide audience and therefore not force an upgrade to a new driver, and I'd say that's the right approach. However, in my experience due to the combination of (1) TensorFlow requiring a specific version of CUDA, and (2) distributions generally not supporting having multiple distributor-provided CUDA versions simultaneously installed, TensorFlow is one of the most difficult pieces of software to get to work. Almost every time I have installed TensorFlow on a computer there has been a mismatch of CUDA/cublas/cudnn/whatever versions. This is a major hassle, to the extent that usually my first reaction to code that uses TensorFlow is to search for an implementation for one of the other deep learning frameworks (I do have a CPU-only version of TensorFlow installed on my development workstation currently). I just don't want to go through the hassle of maintaining manually installed parallel versions of CUDA. The fact that you praise Docker as a solution should be good evidence that things are not as easy as they should \u2013 though probably it's still good advice.\nRight now, a competing deep learning framework doesn't yet support CUDA 9.2, but I find that forgivable when they provide binaries for CUDA versions 8, 9.0 and 9.1, with 9.2 coming soon. I don't know how they manage it, but installing the other framework has never been a hassle, while installing TensorFlow has always been painful.\nI do think however (with little actual knowledge) that Linux distributions could provide coinstallable CUDA packages (like cuda-9.0, cuda-9.1, cuda-9.2), just like there can be multiple different-sonamed versions of libraries. I can't understand why it's not done like that; at least for the required libraries it seems the exact same problem.\nSo, if the goal is to cater for a wide audience, sorry to say but in my opinion it's not working.", "body": "@tfboyd I'm sorry that this will probably sound like a rant, but since you explicitly solicited for feedback...\r\n\r\nYou say that you want to cater for a wide audience and therefore not force an upgrade to a new driver, and I'd say that's the right approach. However, in my experience due to the combination of (1) TensorFlow requiring a specific version of CUDA, and (2) distributions generally not supporting having multiple distributor-provided CUDA versions simultaneously installed, TensorFlow is one of the most difficult pieces of software to get to work. Almost every time I have installed TensorFlow on a computer there has been a mismatch of CUDA/cublas/cudnn/whatever versions. This is a major hassle, to the extent that usually my first reaction to code that uses TensorFlow is to search for an implementation for one of the other deep learning frameworks (I do have a CPU-only version of TensorFlow installed on my development workstation currently). I just don't want to go through the hassle of maintaining manually installed parallel versions of CUDA. The fact that you praise Docker as a solution should be good evidence that things are not as easy as they should \u2013 though probably it's still good advice.\r\n\r\nRight now, a competing deep learning framework doesn't yet support CUDA 9.2, but I find that forgivable when they provide binaries for CUDA versions 8, 9.0 and 9.1, with 9.2 coming soon. I don't know how they manage it, but installing the other framework has never been a hassle, while installing TensorFlow has always been painful. \r\n\r\nI do think however (with little actual knowledge) that Linux distributions could provide coinstallable CUDA packages (like cuda-9.0, cuda-9.1, cuda-9.2), just like there can be multiple different-sonamed versions of libraries. I can't understand why it's not done like that; at least for the required libraries it seems the exact same problem.\r\n\r\nSo, if the goal is to cater for a wide audience, sorry to say but in my opinion it's not working."}