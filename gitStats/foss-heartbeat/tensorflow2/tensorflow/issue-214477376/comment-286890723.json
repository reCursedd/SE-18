{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/286890723", "html_url": "https://github.com/tensorflow/tensorflow/issues/8441#issuecomment-286890723", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8441", "id": 286890723, "node_id": "MDEyOklzc3VlQ29tbWVudDI4Njg5MDcyMw==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-15T21:50:26Z", "updated_at": "2017-03-15T21:50:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p>tfcompile will create a C++ binary for you; you'd have to swig-wrap it to make it work with python which is IMO more daunting. I've noticed folks are afraid of writing C++ ops but IMO this is the least painful way to design interfaces with other systems thanks to the static type checking (and with Google's address sanitizer you get the additional benefit of ensuring you're not corrupting memory).</p>\n<p>you could probably also try the pywrap to make a python op that interacts with mujoco within a tf.while_loop and is more lightweight than many session.run calls.</p>", "body_text": "tfcompile will create a C++ binary for you; you'd have to swig-wrap it to make it work with python which is IMO more daunting. I've noticed folks are afraid of writing C++ ops but IMO this is the least painful way to design interfaces with other systems thanks to the static type checking (and with Google's address sanitizer you get the additional benefit of ensuring you're not corrupting memory).\nyou could probably also try the pywrap to make a python op that interacts with mujoco within a tf.while_loop and is more lightweight than many session.run calls.", "body": "tfcompile will create a C++ binary for you; you'd have to swig-wrap it to make it work with python which is IMO more daunting. I've noticed folks are afraid of writing C++ ops but IMO this is the least painful way to design interfaces with other systems thanks to the static type checking (and with Google's address sanitizer you get the additional benefit of ensuring you're not corrupting memory).\r\n\r\nyou could probably also try the pywrap to make a python op that interacts with mujoco within a tf.while_loop and is more lightweight than many session.run calls."}