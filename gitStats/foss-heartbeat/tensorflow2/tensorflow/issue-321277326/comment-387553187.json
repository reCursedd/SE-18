{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/387553187", "html_url": "https://github.com/tensorflow/tensorflow/pull/19157#issuecomment-387553187", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19157", "id": 387553187, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzU1MzE4Nw==", "user": {"login": "ngc92", "id": 7938269, "node_id": "MDQ6VXNlcjc5MzgyNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7938269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngc92", "html_url": "https://github.com/ngc92", "followers_url": "https://api.github.com/users/ngc92/followers", "following_url": "https://api.github.com/users/ngc92/following{/other_user}", "gists_url": "https://api.github.com/users/ngc92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngc92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngc92/subscriptions", "organizations_url": "https://api.github.com/users/ngc92/orgs", "repos_url": "https://api.github.com/users/ngc92/repos", "events_url": "https://api.github.com/users/ngc92/events{/privacy}", "received_events_url": "https://api.github.com/users/ngc92/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-08T21:48:12Z", "updated_at": "2018-05-08T21:48:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The Head API looks very nice for reducing boilerplate when writing custom model functions.<br>\nMy two observations:</p>\n<ol>\n<li>There does not currently seem to be a way to use different loss weights for different labels (e.g. if you have a very imbalanced dataset. I am not sure how well that would fit into the <code>LossSpec</code> interface.</li>\n<li>Suppose I wanted to implement a general <code>AdversarialTrainingHead</code> that takes an existing Head as input but modifies the loss function to also include the loss for an adversarial modification of the input, so its loss function might look something like</li>\n</ol>\n<pre><code>loss = original_head.create_loss(logits, labels)\nadv = make_adversarial_perturbation()\nadv_loss = original_head.create_loss(logit_fn(adv), labels)\nreturn loss + adv_loss\n</code></pre>\n<p>This would be very difficult to implement in the current setting because even though the design doc mentions a <code>logit_fn</code> the <code>create_estimator_spec</code> actually takes a pre-existing Tensor.<br>\nFor many use cases this seems like the more convenient choice, but maybe it would make sense to allow passing in an actual <code>logit_fn</code> together with <code>features</code>.</p>", "body_text": "The Head API looks very nice for reducing boilerplate when writing custom model functions.\nMy two observations:\n\nThere does not currently seem to be a way to use different loss weights for different labels (e.g. if you have a very imbalanced dataset. I am not sure how well that would fit into the LossSpec interface.\nSuppose I wanted to implement a general AdversarialTrainingHead that takes an existing Head as input but modifies the loss function to also include the loss for an adversarial modification of the input, so its loss function might look something like\n\nloss = original_head.create_loss(logits, labels)\nadv = make_adversarial_perturbation()\nadv_loss = original_head.create_loss(logit_fn(adv), labels)\nreturn loss + adv_loss\n\nThis would be very difficult to implement in the current setting because even though the design doc mentions a logit_fn the create_estimator_spec actually takes a pre-existing Tensor.\nFor many use cases this seems like the more convenient choice, but maybe it would make sense to allow passing in an actual logit_fn together with features.", "body": "The Head API looks very nice for reducing boilerplate when writing custom model functions. \r\nMy two observations:\r\n1) There does not currently seem to be a way to use different loss weights for different labels (e.g. if you have a very imbalanced dataset. I am not sure how well that would fit into the `LossSpec` interface.\r\n2) Suppose I wanted to implement a general `AdversarialTrainingHead` that takes an existing Head as input but modifies the loss function to also include the loss for an adversarial modification of the input, so its loss function might look something like \r\n```\r\nloss = original_head.create_loss(logits, labels)\r\nadv = make_adversarial_perturbation()\r\nadv_loss = original_head.create_loss(logit_fn(adv), labels)\r\nreturn loss + adv_loss\r\n```\r\nThis would be very difficult to implement in the current setting because even though the design doc mentions a `logit_fn` the `create_estimator_spec` actually takes a pre-existing Tensor. \r\nFor many use cases this seems like the more convenient choice, but maybe it would make sense to allow passing in an actual `logit_fn` together with `features`."}