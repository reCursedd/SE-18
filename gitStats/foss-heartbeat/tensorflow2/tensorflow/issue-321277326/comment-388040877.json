{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/388040877", "html_url": "https://github.com/tensorflow/tensorflow/pull/19157#issuecomment-388040877", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19157", "id": 388040877, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODA0MDg3Nw==", "user": {"login": "ngc92", "id": 7938269, "node_id": "MDQ6VXNlcjc5MzgyNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7938269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngc92", "html_url": "https://github.com/ngc92", "followers_url": "https://api.github.com/users/ngc92/followers", "following_url": "https://api.github.com/users/ngc92/following{/other_user}", "gists_url": "https://api.github.com/users/ngc92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngc92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngc92/subscriptions", "organizations_url": "https://api.github.com/users/ngc92/orgs", "repos_url": "https://api.github.com/users/ngc92/repos", "events_url": "https://api.github.com/users/ngc92/events{/privacy}", "received_events_url": "https://api.github.com/users/ngc92/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-10T12:36:46Z", "updated_at": "2018-05-10T12:36:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7244943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/roumposg\">@roumposg</a></p>\n<ol>\n<li>It will work if there is only one class per example (i.e. multi_class_head) but in multi_label_head one example could belong to multiple classes, so these two weighting concepts become orthogonal. If the weight_column could have shape <code>BATCH_SIZE, NUM_CLASSES</code> one could do this more fine-grained weighting, but this would make <code>LossSpec</code>'s <code>unreduced_loss</code> and <code>weights</code> also be of shape <code>BATCH_SIZE, NUM_CLASSES</code>.<br>\nOf course the user could also provide a custom loss function that does the weighting as desired, so this point is not about what is possible with the API but about what the predefined Heads support.</li>\n</ol>", "body_text": "@roumposg\n\nIt will work if there is only one class per example (i.e. multi_class_head) but in multi_label_head one example could belong to multiple classes, so these two weighting concepts become orthogonal. If the weight_column could have shape BATCH_SIZE, NUM_CLASSES one could do this more fine-grained weighting, but this would make LossSpec's unreduced_loss and weights also be of shape BATCH_SIZE, NUM_CLASSES.\nOf course the user could also provide a custom loss function that does the weighting as desired, so this point is not about what is possible with the API but about what the predefined Heads support.", "body": "@roumposg \r\n1. It will work if there is only one class per example (i.e. multi_class_head) but in multi_label_head one example could belong to multiple classes, so these two weighting concepts become orthogonal. If the weight_column could have shape `BATCH_SIZE, NUM_CLASSES` one could do this more fine-grained weighting, but this would make `LossSpec`'s `unreduced_loss` and `weights` also be of shape `BATCH_SIZE, NUM_CLASSES`. \r\nOf course the user could also provide a custom loss function that does the weighting as desired, so this point is not about what is possible with the API but about what the predefined Heads support."}