{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/387787569", "html_url": "https://github.com/tensorflow/tensorflow/pull/19157#issuecomment-387787569", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19157", "id": 387787569, "node_id": "MDEyOklzc3VlQ29tbWVudDM4Nzc4NzU2OQ==", "user": {"login": "roumposg", "id": 7244943, "node_id": "MDQ6VXNlcjcyNDQ5NDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7244943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roumposg", "html_url": "https://github.com/roumposg", "followers_url": "https://api.github.com/users/roumposg/followers", "following_url": "https://api.github.com/users/roumposg/following{/other_user}", "gists_url": "https://api.github.com/users/roumposg/gists{/gist_id}", "starred_url": "https://api.github.com/users/roumposg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roumposg/subscriptions", "organizations_url": "https://api.github.com/users/roumposg/orgs", "repos_url": "https://api.github.com/users/roumposg/repos", "events_url": "https://api.github.com/users/roumposg/events{/privacy}", "received_events_url": "https://api.github.com/users/roumposg/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-09T15:56:32Z", "updated_at": "2018-05-09T15:56:32Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7938269\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ngc92\">@ngc92</a>,</p>\n<ol>\n<li>The head factory methods we provide offer a weight_column argument. You can then pass the weights in the features dict, and have a different weight per example. Would this cover your use case?</li>\n<li>For adversarial training, we recommend multi_head. One head will have the loss related to your objective function, the second head will have the adversarial loss. Multi_head will sum the two losses. Is this what you are looking for?</li>\n</ol>\n<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=606831\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DavidNorman\">@DavidNorman</a>,<br>\nI think the following will work:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.device(<span class=\"pl-c1\">...</span>):\n  logits <span class=\"pl-k\">=</span> my_logit_fn()\n  estimator_spec <span class=\"pl-k\">=</span> my_head.create_estimator_spec()</pre></div>", "body_text": "Hi @ngc92,\n\nThe head factory methods we provide offer a weight_column argument. You can then pass the weights in the features dict, and have a different weight per example. Would this cover your use case?\nFor adversarial training, we recommend multi_head. One head will have the loss related to your objective function, the second head will have the adversarial loss. Multi_head will sum the two losses. Is this what you are looking for?\n\nHi @DavidNorman,\nI think the following will work:\nwith tf.device(...):\n  logits = my_logit_fn()\n  estimator_spec = my_head.create_estimator_spec()", "body": "Hi @ngc92,\r\n1. The head factory methods we provide offer a weight_column argument. You can then pass the weights in the features dict, and have a different weight per example. Would this cover your use case?\r\n2. For adversarial training, we recommend multi_head. One head will have the loss related to your objective function, the second head will have the adversarial loss. Multi_head will sum the two losses. Is this what you are looking for?\r\n\r\nHi @DavidNorman,\r\nI think the following will work:\r\n\r\n```python\r\nwith tf.device(...):\r\n  logits = my_logit_fn()\r\n  estimator_spec = my_head.create_estimator_spec()\r\n```"}