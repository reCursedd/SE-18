{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/419614033", "html_url": "https://github.com/tensorflow/tensorflow/issues/22066#issuecomment-419614033", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22066", "id": 419614033, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTYxNDAzMw==", "user": {"login": "josh11b", "id": 15258583, "node_id": "MDQ6VXNlcjE1MjU4NTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/15258583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh11b", "html_url": "https://github.com/josh11b", "followers_url": "https://api.github.com/users/josh11b/followers", "following_url": "https://api.github.com/users/josh11b/following{/other_user}", "gists_url": "https://api.github.com/users/josh11b/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh11b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh11b/subscriptions", "organizations_url": "https://api.github.com/users/josh11b/orgs", "repos_url": "https://api.github.com/users/josh11b/repos", "events_url": "https://api.github.com/users/josh11b/events{/privacy}", "received_events_url": "https://api.github.com/users/josh11b/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-08T05:16:21Z", "updated_at": "2018-09-08T05:16:21Z", "author_association": "MEMBER", "body_html": "<p>I believe the issue is just the difference between reference and resource variables. Resource variables are the new thing and generally have better semantics, and we switch to using resource variables anytime you use a DistributionStrategy. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> , is there an easy way to trigger switching to resource variables without using a DistributionStrategy so we can validate this theory? The metrics function is using variable_scope.variable() to create the variable.</p>\n<p>Anyway, the return value from assign_add() is different between the two types: for reference variables you get an _ref tensor as you have observed, for resource variables you get an _UnreadVariable. However the _UnreadVariable should generally speaking match the semantics of the _ref tensor. When you say \"This makes it impossible to include true_positives in the model_fn code if a distribution strategy is to be used with Estimator.\", what error do you actually get?</p>", "body_text": "I believe the issue is just the difference between reference and resource variables. Resource variables are the new thing and generally have better semantics, and we switch to using resource variables anytime you use a DistributionStrategy. @alextp , is there an easy way to trigger switching to resource variables without using a DistributionStrategy so we can validate this theory? The metrics function is using variable_scope.variable() to create the variable.\nAnyway, the return value from assign_add() is different between the two types: for reference variables you get an _ref tensor as you have observed, for resource variables you get an _UnreadVariable. However the _UnreadVariable should generally speaking match the semantics of the _ref tensor. When you say \"This makes it impossible to include true_positives in the model_fn code if a distribution strategy is to be used with Estimator.\", what error do you actually get?", "body": "I believe the issue is just the difference between reference and resource variables. Resource variables are the new thing and generally have better semantics, and we switch to using resource variables anytime you use a DistributionStrategy. @alextp , is there an easy way to trigger switching to resource variables without using a DistributionStrategy so we can validate this theory? The metrics function is using variable_scope.variable() to create the variable.\r\n\r\nAnyway, the return value from assign_add() is different between the two types: for reference variables you get an _ref tensor as you have observed, for resource variables you get an _UnreadVariable. However the _UnreadVariable should generally speaking match the semantics of the _ref tensor. When you say \"This makes it impossible to include true_positives in the model_fn code if a distribution strategy is to be used with Estimator.\", what error do you actually get?"}