{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/371678539", "html_url": "https://github.com/tensorflow/tensorflow/issues/16999#issuecomment-371678539", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16999", "id": 371678539, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY3ODUzOQ==", "user": {"login": "selcouthlyBlue", "id": 13268675, "node_id": "MDQ6VXNlcjEzMjY4Njc1", "avatar_url": "https://avatars2.githubusercontent.com/u/13268675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selcouthlyBlue", "html_url": "https://github.com/selcouthlyBlue", "followers_url": "https://api.github.com/users/selcouthlyBlue/followers", "following_url": "https://api.github.com/users/selcouthlyBlue/following{/other_user}", "gists_url": "https://api.github.com/users/selcouthlyBlue/gists{/gist_id}", "starred_url": "https://api.github.com/users/selcouthlyBlue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selcouthlyBlue/subscriptions", "organizations_url": "https://api.github.com/users/selcouthlyBlue/orgs", "repos_url": "https://api.github.com/users/selcouthlyBlue/repos", "events_url": "https://api.github.com/users/selcouthlyBlue/events{/privacy}", "received_events_url": "https://api.github.com/users/selcouthlyBlue/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-09T01:04:23Z", "updated_at": "2018-03-09T01:04:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p>One workaround I made is wrapped the <code>edit_distance</code> metric with <code>tf.metrics.mean</code> like so<br>\n<code>edit_distance = tf.metrics.mean(tf.reduce_mean(tf.edit_distance(tf.cast(y_pred, tf.int32), y_true), name=name))</code></p>\n<p>and passed that as the dict value for <code>eval_metric_ops</code> <code>{\"edit_distance\": edit_distance}</code>. It works but I'm not sure if this is the proper way of doing it.</p>", "body_text": "One workaround I made is wrapped the edit_distance metric with tf.metrics.mean like so\nedit_distance = tf.metrics.mean(tf.reduce_mean(tf.edit_distance(tf.cast(y_pred, tf.int32), y_true), name=name))\nand passed that as the dict value for eval_metric_ops {\"edit_distance\": edit_distance}. It works but I'm not sure if this is the proper way of doing it.", "body": "One workaround I made is wrapped the `edit_distance` metric with `tf.metrics.mean` like so \r\n`edit_distance = tf.metrics.mean(tf.reduce_mean(tf.edit_distance(tf.cast(y_pred, tf.int32), y_true), name=name))` \r\n\r\nand passed that as the dict value for `eval_metric_ops` `{\"edit_distance\": edit_distance}`. It works but I'm not sure if this is the proper way of doing it."}