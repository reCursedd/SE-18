{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281454346", "html_url": "https://github.com/tensorflow/tensorflow/issues/7403#issuecomment-281454346", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7403", "id": 281454346, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQ1NDM0Ng==", "user": {"login": "persiyanov", "id": 3997997, "node_id": "MDQ6VXNlcjM5OTc5OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3997997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/persiyanov", "html_url": "https://github.com/persiyanov", "followers_url": "https://api.github.com/users/persiyanov/followers", "following_url": "https://api.github.com/users/persiyanov/following{/other_user}", "gists_url": "https://api.github.com/users/persiyanov/gists{/gist_id}", "starred_url": "https://api.github.com/users/persiyanov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/persiyanov/subscriptions", "organizations_url": "https://api.github.com/users/persiyanov/orgs", "repos_url": "https://api.github.com/users/persiyanov/repos", "events_url": "https://api.github.com/users/persiyanov/events{/privacy}", "received_events_url": "https://api.github.com/users/persiyanov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-21T19:32:11Z", "updated_at": "2017-02-21T19:32:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a> I suppose that I am wrong but I did not realize it yet:)</p>\n<p>I thought that <code>_SoftmaxCrossEntropyWithLogitsGrad</code> must return gradient of real (mathematical) xentropy, which returns one output. In this case, current implementation looks to me obvious. But I can't understand why these two variants of returned values are equivalent:</p>\n<p>Old version: <code>_BroadcastMul(grad_0, grad_loss_wrt_logits)</code></p>\n<p>New version: <code>_BroadcastMul(grad_0, grad_loss_wrt_logits) + _BroadcastMul(grad_1, grad_grad_wrt_logits)</code></p>\n<p>If I call</p>\n<blockquote>\n<p><code>tf.gradients(_BroadcastMul(grad_0, grad_loss_wrt_logits) + _BroadcastMul(grad_1, grad_grad_wrt_logits), logits)</code></p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p><code>tf.gradients(_BroadcastMul(grad_0, grad_loss_wrt_logits), logits)</code>,</p>\n</blockquote>\n<p>I will get different values, unless <code>grad_0 == 0</code> when I request second derivative AND <code>grad_1 == 0</code> when I request first derivative.</p>", "body_text": "@girving I suppose that I am wrong but I did not realize it yet:)\nI thought that _SoftmaxCrossEntropyWithLogitsGrad must return gradient of real (mathematical) xentropy, which returns one output. In this case, current implementation looks to me obvious. But I can't understand why these two variants of returned values are equivalent:\nOld version: _BroadcastMul(grad_0, grad_loss_wrt_logits)\nNew version: _BroadcastMul(grad_0, grad_loss_wrt_logits) + _BroadcastMul(grad_1, grad_grad_wrt_logits)\nIf I call\n\ntf.gradients(_BroadcastMul(grad_0, grad_loss_wrt_logits) + _BroadcastMul(grad_1, grad_grad_wrt_logits), logits)\n\nand\n\ntf.gradients(_BroadcastMul(grad_0, grad_loss_wrt_logits), logits),\n\nI will get different values, unless grad_0 == 0 when I request second derivative AND grad_1 == 0 when I request first derivative.", "body": "@girving I suppose that I am wrong but I did not realize it yet:)\r\n\r\nI thought that `_SoftmaxCrossEntropyWithLogitsGrad` must return gradient of real (mathematical) xentropy, which returns one output. In this case, current implementation looks to me obvious. But I can't understand why these two variants of returned values are equivalent:\r\n\r\nOld version: `_BroadcastMul(grad_0, grad_loss_wrt_logits)`\r\n\r\nNew version: `_BroadcastMul(grad_0, grad_loss_wrt_logits) + _BroadcastMul(grad_1, grad_grad_wrt_logits)`\r\n\r\nIf I call \r\n> `tf.gradients(_BroadcastMul(grad_0, grad_loss_wrt_logits) + _BroadcastMul(grad_1, grad_grad_wrt_logits), logits)`\r\n\r\nand\r\n\r\n> `tf.gradients(_BroadcastMul(grad_0, grad_loss_wrt_logits), logits)`,\r\n\r\nI will get different values, unless `grad_0 == 0` when I request second derivative AND `grad_1 == 0` when I request first derivative."}