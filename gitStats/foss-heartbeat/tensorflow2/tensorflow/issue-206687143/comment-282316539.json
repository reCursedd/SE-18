{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/282316539", "html_url": "https://github.com/tensorflow/tensorflow/issues/7403#issuecomment-282316539", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7403", "id": 282316539, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjMxNjUzOQ==", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-24T15:17:31Z", "updated_at": "2017-02-24T15:17:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3997997\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/persiyanov\">@persiyanov</a> That looks correct, but I'd write it as</p>\n<pre><code>grad = ...  # First derivative\nif grad_1.op.type not in ('Zeros', 'ZerosLike'):\n  grad += ... # Second derivative\nreturn grad, None\n</code></pre>\n<p>You should check for both <code>Zeros</code> and <code>ZerosLike</code>.  Also, the <code>diag_part</code> code is worse than your previous version.  The point of switching to <code>matmul</code> is that if you do it correctly it will do the reduction for you; if you make a larger tensor partway through it's bad.  Please change the shapes going into the <code>matmul</code> so that <code>diag_part</code> becomes unnecessary.</p>\n<p>For the unit test, I think it suffices to check that</p>\n<ol>\n<li>There's a matmul somewhere in the graph if you use the second derivative.</li>\n<li>There isn't a matmul if you don't.</li>\n</ol>\n<p>As long as the rest of the graph doesn't include a <code>matmul</code> you should be set, although the test will need a comment explaining what's going on.</p>", "body_text": "@persiyanov That looks correct, but I'd write it as\ngrad = ...  # First derivative\nif grad_1.op.type not in ('Zeros', 'ZerosLike'):\n  grad += ... # Second derivative\nreturn grad, None\n\nYou should check for both Zeros and ZerosLike.  Also, the diag_part code is worse than your previous version.  The point of switching to matmul is that if you do it correctly it will do the reduction for you; if you make a larger tensor partway through it's bad.  Please change the shapes going into the matmul so that diag_part becomes unnecessary.\nFor the unit test, I think it suffices to check that\n\nThere's a matmul somewhere in the graph if you use the second derivative.\nThere isn't a matmul if you don't.\n\nAs long as the rest of the graph doesn't include a matmul you should be set, although the test will need a comment explaining what's going on.", "body": "@persiyanov That looks correct, but I'd write it as\r\n\r\n    grad = ...  # First derivative\r\n    if grad_1.op.type not in ('Zeros', 'ZerosLike'):\r\n      grad += ... # Second derivative\r\n    return grad, None\r\n\r\nYou should check for both `Zeros` and `ZerosLike`.  Also, the `diag_part` code is worse than your previous version.  The point of switching to `matmul` is that if you do it correctly it will do the reduction for you; if you make a larger tensor partway through it's bad.  Please change the shapes going into the `matmul` so that `diag_part` becomes unnecessary.\r\n\r\nFor the unit test, I think it suffices to check that\r\n\r\n1. There's a matmul somewhere in the graph if you use the second derivative.\r\n2. There isn't a matmul if you don't.\r\n\r\nAs long as the rest of the graph doesn't include a `matmul` you should be set, although the test will need a comment explaining what's going on."}