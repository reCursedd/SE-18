{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281422220", "html_url": "https://github.com/tensorflow/tensorflow/issues/7403#issuecomment-281422220", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7403", "id": 281422220, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQyMjIyMA==", "user": {"login": "persiyanov", "id": 3997997, "node_id": "MDQ6VXNlcjM5OTc5OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3997997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/persiyanov", "html_url": "https://github.com/persiyanov", "followers_url": "https://api.github.com/users/persiyanov/followers", "following_url": "https://api.github.com/users/persiyanov/following{/other_user}", "gists_url": "https://api.github.com/users/persiyanov/gists{/gist_id}", "starred_url": "https://api.github.com/users/persiyanov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/persiyanov/subscriptions", "organizations_url": "https://api.github.com/users/persiyanov/orgs", "repos_url": "https://api.github.com/users/persiyanov/repos", "events_url": "https://api.github.com/users/persiyanov/events{/privacy}", "received_events_url": "https://api.github.com/users/persiyanov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-21T17:50:53Z", "updated_at": "2017-02-21T17:51:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a> why <code>grad_f</code> returns <code>2*x*dy + 2*dz</code>, not just <code>2*x*dy</code> (it is the first derivative of f(x) w.r.t x multiplied by backprop)?</p>\n<p>I understand that I CAN compute second derivative in <code>_SoftmaxCrossEntropyWithLogitsGrad</code>. I do not understand WHERE should I return it.</p>\n<p>I see the solution where I return first derivative (just as it is returned now), but compute it using <code>-tf.reduce_sum(y * tf.log(tf.nn.softmax(logits)))</code>. And if user needs second derivative, it could get it through <code>tf.gradients</code> and there will be no error.</p>", "body_text": "@girving why grad_f returns 2*x*dy + 2*dz, not just 2*x*dy (it is the first derivative of f(x) w.r.t x multiplied by backprop)?\nI understand that I CAN compute second derivative in _SoftmaxCrossEntropyWithLogitsGrad. I do not understand WHERE should I return it.\nI see the solution where I return first derivative (just as it is returned now), but compute it using -tf.reduce_sum(y * tf.log(tf.nn.softmax(logits))). And if user needs second derivative, it could get it through tf.gradients and there will be no error.", "body": "@girving why `grad_f` returns `2*x*dy + 2*dz`, not just `2*x*dy` (it is the first derivative of f(x) w.r.t x multiplied by backprop)?\r\n\r\n\r\nI understand that I CAN compute second derivative in `_SoftmaxCrossEntropyWithLogitsGrad`. I do not understand WHERE should I return it.\r\n\r\nI see the solution where I return first derivative (just as it is returned now), but compute it using `-tf.reduce_sum(y * tf.log(tf.nn.softmax(logits)))`. And if user needs second derivative, it could get it through `tf.gradients` and there will be no error."}