{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280910079", "html_url": "https://github.com/tensorflow/tensorflow/issues/7403#issuecomment-280910079", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7403", "id": 280910079, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDkxMDA3OQ==", "user": {"login": "persiyanov", "id": 3997997, "node_id": "MDQ6VXNlcjM5OTc5OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3997997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/persiyanov", "html_url": "https://github.com/persiyanov", "followers_url": "https://api.github.com/users/persiyanov/followers", "following_url": "https://api.github.com/users/persiyanov/following{/other_user}", "gists_url": "https://api.github.com/users/persiyanov/gists{/gist_id}", "starred_url": "https://api.github.com/users/persiyanov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/persiyanov/subscriptions", "organizations_url": "https://api.github.com/users/persiyanov/orgs", "repos_url": "https://api.github.com/users/persiyanov/repos", "events_url": "https://api.github.com/users/persiyanov/events{/privacy}", "received_events_url": "https://api.github.com/users/persiyanov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-19T10:33:06Z", "updated_at": "2017-02-19T11:46:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a> Yes, I understand that I need not create new ops, it's just for my proficiency.</p>\n<p>So, you say that there is no need to dive into C++ core in order to fix this issue?</p>\n<p>In <code>_SoftmaxCrossEntropyWithLogitsGrad(op, grad_0, _)</code>, how could we know whether second derivative will be requested or not? I mean, is there some convenient way? Maybe instead of <code>prevent_gradient</code> there is some register function where we can specify how gradients of softmax gradients should be computed?</p>\n<p>As I see, if we overcome this trouble, gradient of trivial crossentropy error (<code>-tf.reduce_sum(y * tf.log(tf.nn.softmax(logits)))</code>) can be returned.</p>", "body_text": "@girving Yes, I understand that I need not create new ops, it's just for my proficiency.\nSo, you say that there is no need to dive into C++ core in order to fix this issue?\nIn _SoftmaxCrossEntropyWithLogitsGrad(op, grad_0, _), how could we know whether second derivative will be requested or not? I mean, is there some convenient way? Maybe instead of prevent_gradient there is some register function where we can specify how gradients of softmax gradients should be computed?\nAs I see, if we overcome this trouble, gradient of trivial crossentropy error (-tf.reduce_sum(y * tf.log(tf.nn.softmax(logits)))) can be returned.", "body": "@girving Yes, I understand that I need not create new ops, it's just for my proficiency.\r\n\r\nSo, you say that there is no need to dive into C++ core in order to fix this issue?\r\n\r\nIn `_SoftmaxCrossEntropyWithLogitsGrad(op, grad_0, _)`, how could we know whether second derivative will be requested or not? I mean, is there some convenient way? Maybe instead of `prevent_gradient` there is some register function where we can specify how gradients of softmax gradients should be computed?\r\n\r\nAs I see, if we overcome this trouble, gradient of trivial crossentropy error (`-tf.reduce_sum(y * tf.log(tf.nn.softmax(logits)))`) can be returned."}