{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/296300732", "html_url": "https://github.com/tensorflow/tensorflow/issues/6385#issuecomment-296300732", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6385", "id": 296300732, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjMwMDczMg==", "user": {"login": "vyse8", "id": 14006062, "node_id": "MDQ6VXNlcjE0MDA2MDYy", "avatar_url": "https://avatars3.githubusercontent.com/u/14006062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vyse8", "html_url": "https://github.com/vyse8", "followers_url": "https://api.github.com/users/vyse8/followers", "following_url": "https://api.github.com/users/vyse8/following{/other_user}", "gists_url": "https://api.github.com/users/vyse8/gists{/gist_id}", "starred_url": "https://api.github.com/users/vyse8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vyse8/subscriptions", "organizations_url": "https://api.github.com/users/vyse8/orgs", "repos_url": "https://api.github.com/users/vyse8/repos", "events_url": "https://api.github.com/users/vyse8/events{/privacy}", "received_events_url": "https://api.github.com/users/vyse8/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-21T20:41:19Z", "updated_at": "2017-04-21T20:41:19Z", "author_association": "NONE", "body_html": "<p>Hi Andrew,</p>\n<p>Thanks for the quick follow-up.  I created the libs folder as you had suggested and it looks like I might be hitting a different error now.  Any ideas on what might cause this?</p>\n<p>ERROR: C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/contrib/android/BUILD:72:1: error loading package 'tensorflow/core': Encountered error while reading extension file 'protobuf.bzl': no such package '@protobuf//': Traceback (most recent call last):<br>\nFile \"C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/workspace.bzl\", line 98<br>\n_apply_patch(repo_ctx, repo_ctx.attr.patch_file)<br>\nFile \"C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/workspace.bzl\", line 87, in _apply_patch<br>\n_execute_and_check_ret_code(repo_ctx, [\"patch\", \"-p1\", \"-d\", r...), &lt;2 more arguments&gt;])<br>\nFile \"C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/workspace.bzl\", line 79, in _execute_and_check_ret_code<br>\nfail(\"Non-zero return code({1}) when ..., &lt;2 more arguments&gt;))<br>\nNon-zero return code(256) when executing 'patch -p1 -d C:/users/mattv/appdata/local/temp/_bazel_mattv/cpz5iwfo/external/protobuf -i C:/users/mattv/onedrive/documents/github/tensorflow/third_party/protobuf/add_noinlines.patch':<br>\nStdout:<br>\nStderr: java.io.IOException: CreateProcess(): The system cannot find the file specified.<br>\nand referenced by '//tensorflow/contrib/android:libtensorflow_inference.so'.<br>\nERROR: Analysis of target '//tensorflow/examples/android:tensorflow_demo' failed; build aborted.<br>\nINFO: Elapsed time: 8.017s</p>\n<p>My build.gradle is as follows:</p>\n<p>// This file provides basic support for building the TensorFlow demo<br>\n// in Android Studio with Gradle.<br>\n//<br>\n// Note that Bazel is still used by default to compile the native libs,<br>\n// and should be installed at the location noted below. This build file<br>\n// automates the process of calling out to it and copying the compiled<br>\n// libraries back into the appropriate directory.<br>\n//<br>\n// Alternatively, experimental support for Makefile builds is provided by<br>\n// setting buildWithMake below to true. This will allow building the demo<br>\n// on Windows machines, but note that full equivalence with the Bazel<br>\n// build is not yet guaranteed. See comments below for caveats and tips<br>\n// for speeding up the build, such as as enabling ccache.</p>\n<p>// Set to true to build with make.<br>\n// NOTE: Running a make build will cause subsequent Bazel builds to <em>fail</em><br>\n// unless the contrib/makefile/downloads/ and gen/ dirs are deleted afterwards.<br>\ndef buildWithMake = false</p>\n<p>// Controls output directory in APK and CPU type for Bazel builds.<br>\n// NOTE: Does not affect the Makefile build target API (yet), which currently<br>\n// assumes armeabi-v7a. If building with make, changing this will require<br>\n// editing the Makefile as well.<br>\ndef cpuType = 'armeabi-v7a'</p>\n<p>// Output directory in the local directory for packaging into the APK.<br>\ndef nativeOutDir = 'libs/' + cpuType</p>\n<p>// Default to building with Bazel and override with make if requested.<br>\ndef nativeBuildRule = 'buildNativeBazel'<br>\ndef demoLibPath = '../../../bazel-bin/tensorflow/examples/android/libtensorflow_demo.so'<br>\n//def inferenceLibPath = '../../../bazel-bin/tensorflow/contrib/android/libtensorflow_inference.so'<br>\nif (buildWithMake) {<br>\nnativeBuildRule = 'buildNativeMake'<br>\ndemoLibPath = '../../../tensorflow/contrib/makefile/gen/lib/libtensorflow_demo.so'<br>\n//inferenceLibPath = '../../../tensorflow/contrib/makefile/gen/lib/libtensorflow_inference.so'<br>\n}</p>\n<p>// Defines the NDK location for Makefile builds. Does <em>not</em> affect Bazel builds.<br>\n// Override with your absolute NDK location if this fails to get the location<br>\n// automatically.<br>\ndef makeNdkRoot = System.getenv('NDK_ROOT')</p>\n<p>// If building with Bazel, this is the location of the bazel binary.<br>\n// NOTE: Bazel does not yet support building for Android on Windows,<br>\n// so in this case the Makefile build must be used as described above.<br>\ndef bazelLocation = 'c://tools//msys64//usr//bin//bash.exe'</p>\n<p>project.buildDir = 'gradleBuild'<br>\ngetProject().setBuildDir('gradleBuild')</p>\n<p>// import DownloadModels task<br>\nproject.ext.ASSET_DIR = projectDir.toString() + '/assets'<br>\nproject.ext.TMP_DIR   = project.buildDir.toString() + '/downloads'</p>\n<p>buildscript {<br>\nrepositories {<br>\njcenter()<br>\n}</p>\n<pre><code>dependencies {\n    classpath 'com.android.tools.build:gradle:2.3.1'\n}\n</code></pre>\n<p>}</p>\n<p>apply plugin: 'com.android.application'</p>\n<p>android {<br>\ncompileSdkVersion 23<br>\nbuildToolsVersion \"25.0.2\"</p>\n<pre><code>lintOptions {\n    abortOnError false\n}\n\nsourceSets {\n    main {\n        // TensorFlow Java API sources.\n        java {\n            srcDir '../../java/src/main/java'\n            exclude '**/examples/**'\n        }\n\n        // Android TensorFlow wrappers, etc.\n        java {\n            srcDir '../../contrib/android/java'\n        }\n\n        // Android demo app sources.\n        java {\n            srcDir 'src'\n        }\n\n        manifest.srcFile 'AndroidManifest.xml'\n        resources.srcDirs = ['src']\n        aidl.srcDirs = ['src']\n        renderscript.srcDirs = ['src']\n        res.srcDirs = ['res']\n        assets.srcDirs = [project.ext.ASSET_DIR]\n        jniLibs.srcDirs = ['libs']\n    }\n\n    debug.setRoot('build-types/debug')\n    release.setRoot('build-types/release')\n}\n</code></pre>\n<p>}</p>\n<p>task buildNativeBazel(type: Exec) {<br>\nworkingDir '../../..'<br>\ncommandLine bazelLocation, 'build', '-c', 'opt',  <br>\n'tensorflow/examples/android:tensorflow_native_libs',  <br>\n'--crosstool_top=//external:android/crosstool',  <br>\n'--cpu=' + cpuType,  <br>\n'--host_crosstool_top=@bazel_tools//tools/cpp:toolchain'<br>\n}</p>\n<p>//task buildNativeMake(type: Exec) {<br>\n// environment \"NDK_ROOT\", makeNdkRoot<br>\n// Tip: install ccache and uncomment the following to speed up<br>\n// builds significantly.<br>\n// environment \"CC_PREFIX\", 'ccache'<br>\n// workingDir '../../..'<br>\n// commandLine 'tensorflow/contrib/makefile/build_all_android.sh',  <br>\n//  '-s',  <br>\n//   'tensorflow/contrib/makefile/sub_makefiles/android/Makefile.in',  <br>\n//     '-t',  <br>\n//      'libtensorflow_inference.so libtensorflow_demo.so'  <br>\n//, '-T'  // Uncomment to skip protobuf and speed up subsequent builds.<br>\n//}</p>\n<p>allprojects {<br>\nrepositories {<br>\njcenter()<br>\nflatDir {<br>\ndirs 'libs'<br>\n}<br>\n}<br>\n}</p>\n<p>dependencies {<br>\ncompile(name:'tensorflow', ext:'aar')<br>\n}</p>\n<p>//task copyNativeLibs(type: Copy) {<br>\n//from demoLibPath<br>\n//from inferenceLibPath<br>\n//  into nativeOutDir<br>\n//duplicatesStrategy = 'include'<br>\n//dependsOn nativeBuildRule<br>\n//fileMode 0644<br>\n//}</p>\n<p>tasks.whenTaskAdded { task -&gt;<br>\nif (task.name == 'assembleDebug') {<br>\ntask.dependsOn 'copyNativeLibs'<br>\n}<br>\nif (task.name == 'assembleRelease') {<br>\ntask.dependsOn 'copyNativeLibs'<br>\n}<br>\n}</p>\n<p>// Download default models; if you wish to use your own models then<br>\n// place them in the \"assets\" directory and comment out this line.<br>\napply from: \"download-models.gradle\"</p>", "body_text": "Hi Andrew,\nThanks for the quick follow-up.  I created the libs folder as you had suggested and it looks like I might be hitting a different error now.  Any ideas on what might cause this?\nERROR: C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/contrib/android/BUILD:72:1: error loading package 'tensorflow/core': Encountered error while reading extension file 'protobuf.bzl': no such package '@protobuf//': Traceback (most recent call last):\nFile \"C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/workspace.bzl\", line 98\n_apply_patch(repo_ctx, repo_ctx.attr.patch_file)\nFile \"C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/workspace.bzl\", line 87, in _apply_patch\n_execute_and_check_ret_code(repo_ctx, [\"patch\", \"-p1\", \"-d\", r...), <2 more arguments>])\nFile \"C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/workspace.bzl\", line 79, in _execute_and_check_ret_code\nfail(\"Non-zero return code({1}) when ..., <2 more arguments>))\nNon-zero return code(256) when executing 'patch -p1 -d C:/users/mattv/appdata/local/temp/_bazel_mattv/cpz5iwfo/external/protobuf -i C:/users/mattv/onedrive/documents/github/tensorflow/third_party/protobuf/add_noinlines.patch':\nStdout:\nStderr: java.io.IOException: CreateProcess(): The system cannot find the file specified.\nand referenced by '//tensorflow/contrib/android:libtensorflow_inference.so'.\nERROR: Analysis of target '//tensorflow/examples/android:tensorflow_demo' failed; build aborted.\nINFO: Elapsed time: 8.017s\nMy build.gradle is as follows:\n// This file provides basic support for building the TensorFlow demo\n// in Android Studio with Gradle.\n//\n// Note that Bazel is still used by default to compile the native libs,\n// and should be installed at the location noted below. This build file\n// automates the process of calling out to it and copying the compiled\n// libraries back into the appropriate directory.\n//\n// Alternatively, experimental support for Makefile builds is provided by\n// setting buildWithMake below to true. This will allow building the demo\n// on Windows machines, but note that full equivalence with the Bazel\n// build is not yet guaranteed. See comments below for caveats and tips\n// for speeding up the build, such as as enabling ccache.\n// Set to true to build with make.\n// NOTE: Running a make build will cause subsequent Bazel builds to fail\n// unless the contrib/makefile/downloads/ and gen/ dirs are deleted afterwards.\ndef buildWithMake = false\n// Controls output directory in APK and CPU type for Bazel builds.\n// NOTE: Does not affect the Makefile build target API (yet), which currently\n// assumes armeabi-v7a. If building with make, changing this will require\n// editing the Makefile as well.\ndef cpuType = 'armeabi-v7a'\n// Output directory in the local directory for packaging into the APK.\ndef nativeOutDir = 'libs/' + cpuType\n// Default to building with Bazel and override with make if requested.\ndef nativeBuildRule = 'buildNativeBazel'\ndef demoLibPath = '../../../bazel-bin/tensorflow/examples/android/libtensorflow_demo.so'\n//def inferenceLibPath = '../../../bazel-bin/tensorflow/contrib/android/libtensorflow_inference.so'\nif (buildWithMake) {\nnativeBuildRule = 'buildNativeMake'\ndemoLibPath = '../../../tensorflow/contrib/makefile/gen/lib/libtensorflow_demo.so'\n//inferenceLibPath = '../../../tensorflow/contrib/makefile/gen/lib/libtensorflow_inference.so'\n}\n// Defines the NDK location for Makefile builds. Does not affect Bazel builds.\n// Override with your absolute NDK location if this fails to get the location\n// automatically.\ndef makeNdkRoot = System.getenv('NDK_ROOT')\n// If building with Bazel, this is the location of the bazel binary.\n// NOTE: Bazel does not yet support building for Android on Windows,\n// so in this case the Makefile build must be used as described above.\ndef bazelLocation = 'c://tools//msys64//usr//bin//bash.exe'\nproject.buildDir = 'gradleBuild'\ngetProject().setBuildDir('gradleBuild')\n// import DownloadModels task\nproject.ext.ASSET_DIR = projectDir.toString() + '/assets'\nproject.ext.TMP_DIR   = project.buildDir.toString() + '/downloads'\nbuildscript {\nrepositories {\njcenter()\n}\ndependencies {\n    classpath 'com.android.tools.build:gradle:2.3.1'\n}\n\n}\napply plugin: 'com.android.application'\nandroid {\ncompileSdkVersion 23\nbuildToolsVersion \"25.0.2\"\nlintOptions {\n    abortOnError false\n}\n\nsourceSets {\n    main {\n        // TensorFlow Java API sources.\n        java {\n            srcDir '../../java/src/main/java'\n            exclude '**/examples/**'\n        }\n\n        // Android TensorFlow wrappers, etc.\n        java {\n            srcDir '../../contrib/android/java'\n        }\n\n        // Android demo app sources.\n        java {\n            srcDir 'src'\n        }\n\n        manifest.srcFile 'AndroidManifest.xml'\n        resources.srcDirs = ['src']\n        aidl.srcDirs = ['src']\n        renderscript.srcDirs = ['src']\n        res.srcDirs = ['res']\n        assets.srcDirs = [project.ext.ASSET_DIR]\n        jniLibs.srcDirs = ['libs']\n    }\n\n    debug.setRoot('build-types/debug')\n    release.setRoot('build-types/release')\n}\n\n}\ntask buildNativeBazel(type: Exec) {\nworkingDir '../../..'\ncommandLine bazelLocation, 'build', '-c', 'opt',  \n'tensorflow/examples/android:tensorflow_native_libs',  \n'--crosstool_top=//external:android/crosstool',  \n'--cpu=' + cpuType,  \n'--host_crosstool_top=@bazel_tools//tools/cpp:toolchain'\n}\n//task buildNativeMake(type: Exec) {\n// environment \"NDK_ROOT\", makeNdkRoot\n// Tip: install ccache and uncomment the following to speed up\n// builds significantly.\n// environment \"CC_PREFIX\", 'ccache'\n// workingDir '../../..'\n// commandLine 'tensorflow/contrib/makefile/build_all_android.sh',  \n//  '-s',  \n//   'tensorflow/contrib/makefile/sub_makefiles/android/Makefile.in',  \n//     '-t',  \n//      'libtensorflow_inference.so libtensorflow_demo.so'  \n//, '-T'  // Uncomment to skip protobuf and speed up subsequent builds.\n//}\nallprojects {\nrepositories {\njcenter()\nflatDir {\ndirs 'libs'\n}\n}\n}\ndependencies {\ncompile(name:'tensorflow', ext:'aar')\n}\n//task copyNativeLibs(type: Copy) {\n//from demoLibPath\n//from inferenceLibPath\n//  into nativeOutDir\n//duplicatesStrategy = 'include'\n//dependsOn nativeBuildRule\n//fileMode 0644\n//}\ntasks.whenTaskAdded { task ->\nif (task.name == 'assembleDebug') {\ntask.dependsOn 'copyNativeLibs'\n}\nif (task.name == 'assembleRelease') {\ntask.dependsOn 'copyNativeLibs'\n}\n}\n// Download default models; if you wish to use your own models then\n// place them in the \"assets\" directory and comment out this line.\napply from: \"download-models.gradle\"", "body": "Hi Andrew,\r\n\r\nThanks for the quick follow-up.  I created the libs folder as you had suggested and it looks like I might be hitting a different error now.  Any ideas on what might cause this?\r\n\r\nERROR: C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/contrib/android/BUILD:72:1: error loading package 'tensorflow/core': Encountered error while reading extension file 'protobuf.bzl': no such package '@protobuf//': Traceback (most recent call last):\r\n        File \"C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/workspace.bzl\", line 98\r\n                _apply_patch(repo_ctx, repo_ctx.attr.patch_file)\r\n        File \"C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/workspace.bzl\", line 87, in _apply_patch\r\n                _execute_and_check_ret_code(repo_ctx, [\"patch\", \"-p1\", \"-d\", r...), <2 more arguments>])\r\n        File \"C:/users/mattv/onedrive/documents/github/tensorflow/tensorflow/workspace.bzl\", line 79, in _execute_and_check_ret_code\r\n                fail(\"Non-zero return code({1}) when ..., <2 more arguments>))\r\nNon-zero return code(256) when executing 'patch -p1 -d C:/users/mattv/appdata/local/temp/_bazel_mattv/cpz5iwfo/external/protobuf -i C:/users/mattv/onedrive/documents/github/tensorflow/third_party/protobuf/add_noinlines.patch':\r\nStdout:\r\nStderr: java.io.IOException: CreateProcess(): The system cannot find the file specified.\r\n and referenced by '//tensorflow/contrib/android:libtensorflow_inference.so'.\r\nERROR: Analysis of target '//tensorflow/examples/android:tensorflow_demo' failed; build aborted.\r\nINFO: Elapsed time: 8.017s\r\n\r\n\r\n\r\n\r\nMy build.gradle is as follows:\r\n\r\n// This file provides basic support for building the TensorFlow demo\r\n// in Android Studio with Gradle.\r\n//\r\n// Note that Bazel is still used by default to compile the native libs,\r\n// and should be installed at the location noted below. This build file\r\n// automates the process of calling out to it and copying the compiled\r\n// libraries back into the appropriate directory.\r\n//\r\n// Alternatively, experimental support for Makefile builds is provided by\r\n// setting buildWithMake below to true. This will allow building the demo\r\n// on Windows machines, but note that full equivalence with the Bazel\r\n// build is not yet guaranteed. See comments below for caveats and tips\r\n// for speeding up the build, such as as enabling ccache.\r\n\r\n// Set to true to build with make.\r\n// NOTE: Running a make build will cause subsequent Bazel builds to *fail*\r\n// unless the contrib/makefile/downloads/ and gen/ dirs are deleted afterwards.\r\ndef buildWithMake = false\r\n\r\n// Controls output directory in APK and CPU type for Bazel builds.\r\n// NOTE: Does not affect the Makefile build target API (yet), which currently\r\n// assumes armeabi-v7a. If building with make, changing this will require\r\n// editing the Makefile as well.\r\ndef cpuType = 'armeabi-v7a'\r\n\r\n// Output directory in the local directory for packaging into the APK.\r\ndef nativeOutDir = 'libs/' + cpuType\r\n\r\n// Default to building with Bazel and override with make if requested.\r\ndef nativeBuildRule = 'buildNativeBazel'\r\ndef demoLibPath = '../../../bazel-bin/tensorflow/examples/android/libtensorflow_demo.so'\r\n//def inferenceLibPath = '../../../bazel-bin/tensorflow/contrib/android/libtensorflow_inference.so'\r\nif (buildWithMake) {\r\n    nativeBuildRule = 'buildNativeMake'\r\n    demoLibPath = '../../../tensorflow/contrib/makefile/gen/lib/libtensorflow_demo.so'\r\n    //inferenceLibPath = '../../../tensorflow/contrib/makefile/gen/lib/libtensorflow_inference.so'\r\n}\r\n\r\n// Defines the NDK location for Makefile builds. Does *not* affect Bazel builds.\r\n// Override with your absolute NDK location if this fails to get the location\r\n// automatically.\r\ndef makeNdkRoot = System.getenv('NDK_ROOT')\r\n\r\n// If building with Bazel, this is the location of the bazel binary.\r\n// NOTE: Bazel does not yet support building for Android on Windows,\r\n// so in this case the Makefile build must be used as described above.\r\ndef bazelLocation = 'c://tools//msys64//usr//bin//bash.exe'\r\n\r\nproject.buildDir = 'gradleBuild'\r\ngetProject().setBuildDir('gradleBuild')\r\n\r\n// import DownloadModels task\r\nproject.ext.ASSET_DIR = projectDir.toString() + '/assets'\r\nproject.ext.TMP_DIR   = project.buildDir.toString() + '/downloads'\r\n\r\nbuildscript {\r\n    repositories {\r\n        jcenter()\r\n    }\r\n\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:2.3.1'\r\n    }\r\n}\r\n\r\napply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 23\r\n    buildToolsVersion \"25.0.2\"\r\n\r\n    lintOptions {\r\n        abortOnError false\r\n    }\r\n\r\n    sourceSets {\r\n        main {\r\n            // TensorFlow Java API sources.\r\n            java {\r\n                srcDir '../../java/src/main/java'\r\n                exclude '**/examples/**'\r\n            }\r\n\r\n            // Android TensorFlow wrappers, etc.\r\n            java {\r\n                srcDir '../../contrib/android/java'\r\n            }\r\n\r\n            // Android demo app sources.\r\n            java {\r\n                srcDir 'src'\r\n            }\r\n\r\n            manifest.srcFile 'AndroidManifest.xml'\r\n            resources.srcDirs = ['src']\r\n            aidl.srcDirs = ['src']\r\n            renderscript.srcDirs = ['src']\r\n            res.srcDirs = ['res']\r\n            assets.srcDirs = [project.ext.ASSET_DIR]\r\n            jniLibs.srcDirs = ['libs']\r\n        }\r\n\r\n        debug.setRoot('build-types/debug')\r\n        release.setRoot('build-types/release')\r\n    }\r\n}\r\n\r\ntask buildNativeBazel(type: Exec) {\r\n    workingDir '../../..'\r\n    commandLine bazelLocation, 'build', '-c', 'opt',  \\\r\n         'tensorflow/examples/android:tensorflow_native_libs',  \\\r\n         '--crosstool_top=//external:android/crosstool',  \\\r\n         '--cpu=' + cpuType,  \\\r\n         '--host_crosstool_top=@bazel_tools//tools/cpp:toolchain'\r\n}\r\n\r\n//task buildNativeMake(type: Exec) {\r\n   // environment \"NDK_ROOT\", makeNdkRoot\r\n    // Tip: install ccache and uncomment the following to speed up\r\n    // builds significantly.\r\n    // environment \"CC_PREFIX\", 'ccache'\r\n   // workingDir '../../..'\r\n   // commandLine 'tensorflow/contrib/makefile/build_all_android.sh',  \\\r\n       //  '-s',  \\\r\n      //   'tensorflow/contrib/makefile/sub_makefiles/android/Makefile.in',  \\\r\n    //     '-t',  \\\r\n   //      'libtensorflow_inference.so libtensorflow_demo.so'  \\\r\n         //, '-T'  // Uncomment to skip protobuf and speed up subsequent builds.\r\n//}\r\n\r\nallprojects {\r\n    repositories {\r\n        jcenter()\r\n        flatDir {\r\n            dirs 'libs'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    compile(name:'tensorflow', ext:'aar')\r\n}\r\n\r\n\r\n//task copyNativeLibs(type: Copy) {\r\n    //from demoLibPath\r\n    //from inferenceLibPath\r\n  //  into nativeOutDir\r\n    //duplicatesStrategy = 'include'\r\n    //dependsOn nativeBuildRule\r\n    //fileMode 0644\r\n//}\r\n\r\n\r\ntasks.whenTaskAdded { task ->\r\n    if (task.name == 'assembleDebug') {\r\n        task.dependsOn 'copyNativeLibs'\r\n    }\r\n    if (task.name == 'assembleRelease') {\r\n        task.dependsOn 'copyNativeLibs'\r\n    }\r\n}\r\n\r\n// Download default models; if you wish to use your own models then\r\n// place them in the \"assets\" directory and comment out this line.\r\napply from: \"download-models.gradle\"\r\n\r\n\r\n"}