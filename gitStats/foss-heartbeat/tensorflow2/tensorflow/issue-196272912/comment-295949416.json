{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/295949416", "html_url": "https://github.com/tensorflow/tensorflow/issues/6385#issuecomment-295949416", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6385", "id": 295949416, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTk0OTQxNg==", "user": {"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-20T22:42:36Z", "updated_at": "2017-05-01T17:10:24Z", "author_association": "MEMBER", "body_html": "<p>To update on this, a prebuilt TensorFlow AAR is now provided at <a href=\"https://ci.tensorflow.org/view/Nightly/job/nightly-android/lastSuccessfulBuild/artifact/out/tensorflow.aar\" rel=\"nofollow\">https://ci.tensorflow.org/view/Nightly/job/nightly-android/lastSuccessfulBuild/artifact/out/tensorflow.aar</a></p>\n<p>This contains tensorflow_inference_java.jar and tensorflow_inference.so native libs for armeabi-v7a, arm64-v8a, x86, and x86_64.</p>\n<p>This means to integrate TF into your app built with Gradle, you can simply download the file to e.g. \"aarDir/\", and then add the following into your gradle build file:</p>\n<pre><code>allprojects {\n    repositories {\n        jcenter()\n        flatDir {\n            dirs 'aarDir'\n        }\n    }\n}\n\ndependencies {\n    compile(name:'tensorflow', ext:'aar')\n}\n</code></pre>\n<p>This will provide TensorFlowInferenceInterface as well as the full TF Java API. We'll be putting this up on jcenter soon so no manual downloading will be necessary, just a couple of Gradle lines.</p>\n<p><strong>Note that for the official Android demo</strong> in particular, you'll still need to download/build <strong>libtensorflow_demo.so</strong> as well (which provides image conversion/object tracking support). It also needs to be built for the highest archictecture your device uses, since tensorflow.aar now provides more than armeabi-v7a and all native libs must be present at e.g. arm64 if your device uses arm64. It's a straightforward library, so we'll be adding a cmake build for libtensorflow_demo.so specifically so it can be built on Windows directly.</p>\n<p>You'll also want to remove references to libtensorflow_inference.so (but not libtensorflow_demo.so), tensorflow/java, and tensorflow/contrib/android from build.gradle since these are now provided by the AAR.</p>\n<p>Coupled with the AAR download it will then be possible to build the entire demo on Windows without much, if any, manual tweaking; we should be able to auto-detect Windows and choose the appropriate build process.</p>", "body_text": "To update on this, a prebuilt TensorFlow AAR is now provided at https://ci.tensorflow.org/view/Nightly/job/nightly-android/lastSuccessfulBuild/artifact/out/tensorflow.aar\nThis contains tensorflow_inference_java.jar and tensorflow_inference.so native libs for armeabi-v7a, arm64-v8a, x86, and x86_64.\nThis means to integrate TF into your app built with Gradle, you can simply download the file to e.g. \"aarDir/\", and then add the following into your gradle build file:\nallprojects {\n    repositories {\n        jcenter()\n        flatDir {\n            dirs 'aarDir'\n        }\n    }\n}\n\ndependencies {\n    compile(name:'tensorflow', ext:'aar')\n}\n\nThis will provide TensorFlowInferenceInterface as well as the full TF Java API. We'll be putting this up on jcenter soon so no manual downloading will be necessary, just a couple of Gradle lines.\nNote that for the official Android demo in particular, you'll still need to download/build libtensorflow_demo.so as well (which provides image conversion/object tracking support). It also needs to be built for the highest archictecture your device uses, since tensorflow.aar now provides more than armeabi-v7a and all native libs must be present at e.g. arm64 if your device uses arm64. It's a straightforward library, so we'll be adding a cmake build for libtensorflow_demo.so specifically so it can be built on Windows directly.\nYou'll also want to remove references to libtensorflow_inference.so (but not libtensorflow_demo.so), tensorflow/java, and tensorflow/contrib/android from build.gradle since these are now provided by the AAR.\nCoupled with the AAR download it will then be possible to build the entire demo on Windows without much, if any, manual tweaking; we should be able to auto-detect Windows and choose the appropriate build process.", "body": "To update on this, a prebuilt TensorFlow AAR is now provided at https://ci.tensorflow.org/view/Nightly/job/nightly-android/lastSuccessfulBuild/artifact/out/tensorflow.aar\r\n\r\nThis contains tensorflow_inference_java.jar and tensorflow_inference.so native libs for armeabi-v7a, arm64-v8a, x86, and x86_64.\r\n\r\nThis means to integrate TF into your app built with Gradle, you can simply download the file to e.g. \"aarDir/\", and then add the following into your gradle build file:\r\n\r\n```\r\nallprojects {\r\n    repositories {\r\n        jcenter()\r\n        flatDir {\r\n            dirs 'aarDir'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    compile(name:'tensorflow', ext:'aar')\r\n}\r\n```\r\n\r\nThis will provide TensorFlowInferenceInterface as well as the full TF Java API. We'll be putting this up on jcenter soon so no manual downloading will be necessary, just a couple of Gradle lines.\r\n\r\n**Note that for the official Android demo** in particular, you'll still need to download/build **libtensorflow_demo.so** as well (which provides image conversion/object tracking support). It also needs to be built for the highest archictecture your device uses, since tensorflow.aar now provides more than armeabi-v7a and all native libs must be present at e.g. arm64 if your device uses arm64. It's a straightforward library, so we'll be adding a cmake build for libtensorflow_demo.so specifically so it can be built on Windows directly.\r\n\r\nYou'll also want to remove references to libtensorflow_inference.so (but not libtensorflow_demo.so), tensorflow/java, and tensorflow/contrib/android from build.gradle since these are now provided by the AAR.\r\n\r\nCoupled with the AAR download it will then be possible to build the entire demo on Windows without much, if any, manual tweaking; we should be able to auto-detect Windows and choose the appropriate build process."}