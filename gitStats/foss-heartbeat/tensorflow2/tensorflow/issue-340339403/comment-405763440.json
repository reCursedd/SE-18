{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/405763440", "html_url": "https://github.com/tensorflow/tensorflow/issues/20703#issuecomment-405763440", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20703", "id": 405763440, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTc2MzQ0MA==", "user": {"login": "mdanatg", "id": 26628547, "node_id": "MDQ6VXNlcjI2NjI4NTQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/26628547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdanatg", "html_url": "https://github.com/mdanatg", "followers_url": "https://api.github.com/users/mdanatg/followers", "following_url": "https://api.github.com/users/mdanatg/following{/other_user}", "gists_url": "https://api.github.com/users/mdanatg/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdanatg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdanatg/subscriptions", "organizations_url": "https://api.github.com/users/mdanatg/orgs", "repos_url": "https://api.github.com/users/mdanatg/repos", "events_url": "https://api.github.com/users/mdanatg/events{/privacy}", "received_events_url": "https://api.github.com/users/mdanatg/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-17T23:49:13Z", "updated_at": "2018-07-17T23:49:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi, sorry for the delay! This looks like a feature we should add. Here's a workaround in the mean time:</p>\n<pre><code>@autograph.convert()\ndef is_hashtag(x):\n  if tf.substr(x, 0, 1) == \"#\":\n    return True\n  return False\n</code></pre>\n<p>Right now, what happens is that x is a scalar tensor of type string. The <code>[0]</code> operator is trying to index into a scalar tensor, and fails. It makes more sense when you thing of a vector tensor or type string, like <code>x = tf.constant([\"foo\", \"bar\", \"baz\"]</code>, for which <code>x[0]</code> will be the scalar <code>\"foo\"</code>). But we could detect that the tensor is a scalar of type string and index into it.</p>\n<p>That should be fairly straightforward to do by extending the tensor index operator <code>_tf_tensor_get_item</code> in <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/autograph/operators/slices.py\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/autograph/operators/slices.py</a></p>", "body_text": "Hi, sorry for the delay! This looks like a feature we should add. Here's a workaround in the mean time:\n@autograph.convert()\ndef is_hashtag(x):\n  if tf.substr(x, 0, 1) == \"#\":\n    return True\n  return False\n\nRight now, what happens is that x is a scalar tensor of type string. The [0] operator is trying to index into a scalar tensor, and fails. It makes more sense when you thing of a vector tensor or type string, like x = tf.constant([\"foo\", \"bar\", \"baz\"], for which x[0] will be the scalar \"foo\"). But we could detect that the tensor is a scalar of type string and index into it.\nThat should be fairly straightforward to do by extending the tensor index operator _tf_tensor_get_item in https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/autograph/operators/slices.py", "body": "Hi, sorry for the delay! This looks like a feature we should add. Here's a workaround in the mean time:\r\n\r\n    @autograph.convert()\r\n    def is_hashtag(x):\r\n      if tf.substr(x, 0, 1) == \"#\":\r\n        return True\r\n      return False\r\n\r\nRight now, what happens is that x is a scalar tensor of type string. The `[0]` operator is trying to index into a scalar tensor, and fails. It makes more sense when you thing of a vector tensor or type string, like `x = tf.constant([\"foo\", \"bar\", \"baz\"]`, for which `x[0]` will be the scalar `\"foo\"`). But we could detect that the tensor is a scalar of type string and index into it.\r\n\r\nThat should be fairly straightforward to do by extending the tensor index operator `_tf_tensor_get_item` in https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/autograph/operators/slices.py"}