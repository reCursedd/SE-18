{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/406100234", "html_url": "https://github.com/tensorflow/tensorflow/issues/18835#issuecomment-406100234", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18835", "id": 406100234, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjEwMDIzNA==", "user": {"login": "amirjamez", "id": 8922398, "node_id": "MDQ6VXNlcjg5MjIzOTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8922398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amirjamez", "html_url": "https://github.com/amirjamez", "followers_url": "https://api.github.com/users/amirjamez/followers", "following_url": "https://api.github.com/users/amirjamez/following{/other_user}", "gists_url": "https://api.github.com/users/amirjamez/gists{/gist_id}", "starred_url": "https://api.github.com/users/amirjamez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amirjamez/subscriptions", "organizations_url": "https://api.github.com/users/amirjamez/orgs", "repos_url": "https://api.github.com/users/amirjamez/repos", "events_url": "https://api.github.com/users/amirjamez/events{/privacy}", "received_events_url": "https://api.github.com/users/amirjamez/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-18T23:00:48Z", "updated_at": "2018-07-18T23:00:48Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20085789\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/satok16\">@satok16</a> I managed to build the libraries and the hexagon_excution_graph adding <code>-E</code> to the <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/hvx#build-tensorflow-linking-hexagon-library\">build toturial</a>. It takes around 10 minutes to compile (after we already built lib_controller and lib_hexagon_skel.so) and I am searching to reduce its compilation time.</p>\n<p>Also, my other question was <a href=\"https://github.com/tensorflow/tensorflow/issues/20206\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/20206/hovercard\">unanswered here</a>. I appreciate if you let me know how did you freeze and optimize the <code>inception-v3</code> model that doesn't have <code>tf.Squeeze()</code> inside. As you know, this method is not yet implemented on HVX. When I freeze and optimize for inference, these layers are still there, I guess some part of the graph should be stripped/removed but using the graph_transformation I was not able to reproduce the model. Thanks.</p>", "body_text": "@satok16 I managed to build the libraries and the hexagon_excution_graph adding -E to the build toturial. It takes around 10 minutes to compile (after we already built lib_controller and lib_hexagon_skel.so) and I am searching to reduce its compilation time.\nAlso, my other question was unanswered here. I appreciate if you let me know how did you freeze and optimize the inception-v3 model that doesn't have tf.Squeeze() inside. As you know, this method is not yet implemented on HVX. When I freeze and optimize for inference, these layers are still there, I guess some part of the graph should be stripped/removed but using the graph_transformation I was not able to reproduce the model. Thanks.", "body": "@satok16 I managed to build the libraries and the hexagon_excution_graph adding `-E` to the [build toturial](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/hvx#build-tensorflow-linking-hexagon-library). It takes around 10 minutes to compile (after we already built lib_controller and lib_hexagon_skel.so) and I am searching to reduce its compilation time. \r\n\r\nAlso, my other question was [unanswered here](https://github.com/tensorflow/tensorflow/issues/20206). I appreciate if you let me know how did you freeze and optimize the `inception-v3` model that doesn't have `tf.Squeeze()` inside. As you know, this method is not yet implemented on HVX. When I freeze and optimize for inference, these layers are still there, I guess some part of the graph should be stripped/removed but using the graph_transformation I was not able to reproduce the model. Thanks."}