{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/319299636", "html_url": "https://github.com/tensorflow/tensorflow/issues/11843#issuecomment-319299636", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11843", "id": 319299636, "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTI5OTYzNg==", "user": {"login": "bknl", "id": 13378956, "node_id": "MDQ6VXNlcjEzMzc4OTU2", "avatar_url": "https://avatars1.githubusercontent.com/u/13378956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bknl", "html_url": "https://github.com/bknl", "followers_url": "https://api.github.com/users/bknl/followers", "following_url": "https://api.github.com/users/bknl/following{/other_user}", "gists_url": "https://api.github.com/users/bknl/gists{/gist_id}", "starred_url": "https://api.github.com/users/bknl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bknl/subscriptions", "organizations_url": "https://api.github.com/users/bknl/orgs", "repos_url": "https://api.github.com/users/bknl/repos", "events_url": "https://api.github.com/users/bknl/events{/privacy}", "received_events_url": "https://api.github.com/users/bknl/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-01T08:08:22Z", "updated_at": "2017-08-01T10:20:08Z", "author_association": "NONE", "body_html": "<p>I get the exact same problem for TensorFlow Serving (current git head, after no problems of that sort for months). I've tried bazel 0.5.1 , 0.5.3 , bazel clean, manually removing the bazel caches and I get the exact same issue on both x86_64 and PowerPC versions under Linux.  Building TensorFlow itself (1.3.0rc0) is fine in the same environment.  What I would <em>really</em> like to learn though is not so much the specifics of this problem but how one even goes about figuring out what exactly irks bazel about these rules (aka something like \"explain to me what you are trying to do, don't just say 'failed'\".</p>\n<p>UPDATE: While I still would like to get a better idea how debug such issues, the underlying proximate cause was that  I used \"git pull --recurse-submodules\" but not  \"git submodule update --recursive\" .</p>", "body_text": "I get the exact same problem for TensorFlow Serving (current git head, after no problems of that sort for months). I've tried bazel 0.5.1 , 0.5.3 , bazel clean, manually removing the bazel caches and I get the exact same issue on both x86_64 and PowerPC versions under Linux.  Building TensorFlow itself (1.3.0rc0) is fine in the same environment.  What I would really like to learn though is not so much the specifics of this problem but how one even goes about figuring out what exactly irks bazel about these rules (aka something like \"explain to me what you are trying to do, don't just say 'failed'\".\nUPDATE: While I still would like to get a better idea how debug such issues, the underlying proximate cause was that  I used \"git pull --recurse-submodules\" but not  \"git submodule update --recursive\" .", "body": "I get the exact same problem for TensorFlow Serving (current git head, after no problems of that sort for months). I've tried bazel 0.5.1 , 0.5.3 , bazel clean, manually removing the bazel caches and I get the exact same issue on both x86_64 and PowerPC versions under Linux.  Building TensorFlow itself (1.3.0rc0) is fine in the same environment.  What I would *really* like to learn though is not so much the specifics of this problem but how one even goes about figuring out what exactly irks bazel about these rules (aka something like \"explain to me what you are trying to do, don't just say 'failed'\".\r\n\r\nUPDATE: While I still would like to get a better idea how debug such issues, the underlying proximate cause was that  I used \"git pull --recurse-submodules\" but not  \"git submodule update --recursive\" ."}