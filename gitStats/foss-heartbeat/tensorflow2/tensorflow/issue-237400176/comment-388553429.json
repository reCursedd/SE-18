{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/388553429", "html_url": "https://github.com/tensorflow/tensorflow/issues/10870#issuecomment-388553429", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10870", "id": 388553429, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODU1MzQyOQ==", "user": {"login": "mherkazandjian", "id": 3264637, "node_id": "MDQ6VXNlcjMyNjQ2Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3264637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mherkazandjian", "html_url": "https://github.com/mherkazandjian", "followers_url": "https://api.github.com/users/mherkazandjian/followers", "following_url": "https://api.github.com/users/mherkazandjian/following{/other_user}", "gists_url": "https://api.github.com/users/mherkazandjian/gists{/gist_id}", "starred_url": "https://api.github.com/users/mherkazandjian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mherkazandjian/subscriptions", "organizations_url": "https://api.github.com/users/mherkazandjian/orgs", "repos_url": "https://api.github.com/users/mherkazandjian/repos", "events_url": "https://api.github.com/users/mherkazandjian/events{/privacy}", "received_events_url": "https://api.github.com/users/mherkazandjian/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-12T12:55:34Z", "updated_at": "2018-05-12T12:55:34Z", "author_association": "NONE", "body_html": "<p>I just tried the example in the link</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>iostream<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>thread<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>mutex<span class=\"pl-pds\">&gt;</span></span>\n \nstd::once_flag flag;\n \n<span class=\"pl-k\">void</span> <span class=\"pl-en\">do_once</span>()\n{\n    <span class=\"pl-c1\">std::call_once</span>(flag, [](){ std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Called once<span class=\"pl-pds\">\"</span></span> &lt;&lt; std::endl; });\n}\n \n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>()\n{\n    std::thread <span class=\"pl-smi\">t1</span>(do_once);\n    std::thread <span class=\"pl-smi\">t2</span>(do_once);\n    std::thread <span class=\"pl-smi\">t3</span>(do_once);\n    std::thread <span class=\"pl-smi\">t4</span>(do_once);\n \n    t1.<span class=\"pl-c1\">join</span>();\n    t2.<span class=\"pl-c1\">join</span>();\n    t3.<span class=\"pl-c1\">join</span>();\n    t4.<span class=\"pl-c1\">join</span>();\n}</pre></div>\n<p>compiled with</p>\n<div class=\"highlight highlight-source-shell\"><pre>gcc -std=c++11 -Wall -Wextra  -pthread -g use_once.cpp -lstdc++ -o use_once</pre></div>\n<p>and it did not segfault</p>", "body_text": "I just tried the example in the link\n#include <iostream>\n#include <thread>\n#include <mutex>\n \nstd::once_flag flag;\n \nvoid do_once()\n{\n    std::call_once(flag, [](){ std::cout << \"Called once\" << std::endl; });\n}\n \nint main()\n{\n    std::thread t1(do_once);\n    std::thread t2(do_once);\n    std::thread t3(do_once);\n    std::thread t4(do_once);\n \n    t1.join();\n    t2.join();\n    t3.join();\n    t4.join();\n}\ncompiled with\ngcc -std=c++11 -Wall -Wextra  -pthread -g use_once.cpp -lstdc++ -o use_once\nand it did not segfault", "body": "I just tried the example in the link \r\n\r\n````c++\r\n#include <iostream>\r\n#include <thread>\r\n#include <mutex>\r\n \r\nstd::once_flag flag;\r\n \r\nvoid do_once()\r\n{\r\n    std::call_once(flag, [](){ std::cout << \"Called once\" << std::endl; });\r\n}\r\n \r\nint main()\r\n{\r\n    std::thread t1(do_once);\r\n    std::thread t2(do_once);\r\n    std::thread t3(do_once);\r\n    std::thread t4(do_once);\r\n \r\n    t1.join();\r\n    t2.join();\r\n    t3.join();\r\n    t4.join();\r\n}\r\n````\r\ncompiled with \r\n\r\n````bash\r\ngcc -std=c++11 -Wall -Wextra  -pthread -g use_once.cpp -lstdc++ -o use_once\r\n````\r\nand it did not segfault"}