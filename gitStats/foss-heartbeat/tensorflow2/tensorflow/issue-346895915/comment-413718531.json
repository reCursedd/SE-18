{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/413718531", "html_url": "https://github.com/tensorflow/tensorflow/issues/21328#issuecomment-413718531", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21328", "id": 413718531, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzcxODUzMQ==", "user": {"login": "marksandler2", "id": 6980056, "node_id": "MDQ6VXNlcjY5ODAwNTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6980056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marksandler2", "html_url": "https://github.com/marksandler2", "followers_url": "https://api.github.com/users/marksandler2/followers", "following_url": "https://api.github.com/users/marksandler2/following{/other_user}", "gists_url": "https://api.github.com/users/marksandler2/gists{/gist_id}", "starred_url": "https://api.github.com/users/marksandler2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marksandler2/subscriptions", "organizations_url": "https://api.github.com/users/marksandler2/orgs", "repos_url": "https://api.github.com/users/marksandler2/repos", "events_url": "https://api.github.com/users/marksandler2/events{/privacy}", "received_events_url": "https://api.github.com/users/marksandler2/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-16T23:57:17Z", "updated_at": "2018-08-16T23:57:17Z", "author_association": "NONE", "body_html": "<p>Interestingly even frozen graph have FusedBatchNorm that technically has 5<br>\noutputs, but tensorflow refuses to evaluate them.  I didn't check the<br>\ndetails, but fusedbatchnorm outptuts [1:5] are undocumented, so perhaps<br>\ngraphs freezing destroys<br>\nthem somehow..</p>\n<p>Anyway:  this code works fine:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> nets.mobilenet <span class=\"pl-k\">import</span> mobilenet_v2\ntf.reset_default_graph()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> For simplicity we just decode jpeg inside tensorflow.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> But one can provide any input obviously.</span>\nfile_input <span class=\"pl-k\">=</span> tf.placeholder(tf.string, ())\n\nimage <span class=\"pl-k\">=</span> tf.image.decode_jpeg(tf.read_file(file_input))\n\nimages <span class=\"pl-k\">=</span> tf.expand_dims(image, <span class=\"pl-c1\">0</span>)\nimages <span class=\"pl-k\">=</span> tf.cast(images, tf.float32) <span class=\"pl-k\">/</span> <span class=\"pl-c1\">128</span>.  <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>\nimages.set_shape((<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">3</span>))\nimages <span class=\"pl-k\">=</span> tf.image.resize_images(images, (<span class=\"pl-c1\">224</span>, <span class=\"pl-c1\">224</span>))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Note: arg_scope is optional for inference.</span>\n<span class=\"pl-k\">with</span>\ntf.contrib.slim.arg_scope(mobilenet_v2.training_scope(<span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)):\n  logits, endpoints <span class=\"pl-k\">=</span> mobilenet_v2.mobilenet(images)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Restore using exponential moving average since it produces (1.5-2%)</span>\nhigher\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> accuracy</span>\nema <span class=\"pl-k\">=</span> tf.train.ExponentialMovingAverage(<span class=\"pl-c1\">0.999</span>)\n<span class=\"pl-c1\">vars</span> <span class=\"pl-k\">=</span> ema.variables_to_restore()\n\nsaver <span class=\"pl-k\">=</span> tf.train.Saver(<span class=\"pl-c1\">vars</span>)\ng <span class=\"pl-k\">=</span> tf.get_default_graph()\nop <span class=\"pl-k\">=</span>\ng.get_operation_by_name(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  saver.restore(sess,  checkpoint)\n  x <span class=\"pl-k\">=</span> endpoints[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Predictions<span class=\"pl-pds\">'</span></span>].eval(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{file_input: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>panda.jpg<span class=\"pl-pds\">'</span></span>})\n  <span class=\"pl-c1\">print</span>(op.outputs[<span class=\"pl-c1\">1</span>].eval(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{file_input: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>panda.jpg<span class=\"pl-pds\">'</span></span>}))\nlabel_map <span class=\"pl-k\">=</span> imagenet.create_readable_names_for_imagenet_labels()\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Top 1 prediction: <span class=\"pl-pds\">\"</span></span>, x.argmax(),label_map[x.argmax()], x.max())</pre></div>", "body_text": "Interestingly even frozen graph have FusedBatchNorm that technically has 5\noutputs, but tensorflow refuses to evaluate them.  I didn't check the\ndetails, but fusedbatchnorm outptuts [1:5] are undocumented, so perhaps\ngraphs freezing destroys\nthem somehow..\nAnyway:  this code works fine:\nimport tensorflow as tf\nfrom nets.mobilenet import mobilenet_v2\ntf.reset_default_graph()\n\n# For simplicity we just decode jpeg inside tensorflow.\n# But one can provide any input obviously.\nfile_input = tf.placeholder(tf.string, ())\n\nimage = tf.image.decode_jpeg(tf.read_file(file_input))\n\nimages = tf.expand_dims(image, 0)\nimages = tf.cast(images, tf.float32) / 128.  - 1\nimages.set_shape((None, None, None, 3))\nimages = tf.image.resize_images(images, (224, 224))\n\n# Note: arg_scope is optional for inference.\nwith\ntf.contrib.slim.arg_scope(mobilenet_v2.training_scope(is_training=False)):\n  logits, endpoints = mobilenet_v2.mobilenet(images)\n\n# Restore using exponential moving average since it produces (1.5-2%)\nhigher\n# accuracy\nema = tf.train.ExponentialMovingAverage(0.999)\nvars = ema.variables_to_restore()\n\nsaver = tf.train.Saver(vars)\ng = tf.get_default_graph()\nop =\ng.get_operation_by_name('MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm')\nwith tf.Session() as sess:\n  saver.restore(sess,  checkpoint)\n  x = endpoints['Predictions'].eval(feed_dict={file_input: 'panda.jpg'})\n  print(op.outputs[1].eval(feed_dict={file_input: 'panda.jpg'}))\nlabel_map = imagenet.create_readable_names_for_imagenet_labels()\nprint(\"Top 1 prediction: \", x.argmax(),label_map[x.argmax()], x.max())", "body": "Interestingly even frozen graph have FusedBatchNorm that technically has 5\r\noutputs, but tensorflow refuses to evaluate them.  I didn't check the\r\ndetails, but fusedbatchnorm outptuts [1:5] are undocumented, so perhaps\r\ngraphs freezing destroys\r\nthem somehow..\r\n\r\nAnyway:  this code works fine:\r\n\r\n```python\r\nimport tensorflow as tf\r\nfrom nets.mobilenet import mobilenet_v2\r\ntf.reset_default_graph()\r\n\r\n# For simplicity we just decode jpeg inside tensorflow.\r\n# But one can provide any input obviously.\r\nfile_input = tf.placeholder(tf.string, ())\r\n\r\nimage = tf.image.decode_jpeg(tf.read_file(file_input))\r\n\r\nimages = tf.expand_dims(image, 0)\r\nimages = tf.cast(images, tf.float32) / 128.  - 1\r\nimages.set_shape((None, None, None, 3))\r\nimages = tf.image.resize_images(images, (224, 224))\r\n\r\n# Note: arg_scope is optional for inference.\r\nwith\r\ntf.contrib.slim.arg_scope(mobilenet_v2.training_scope(is_training=False)):\r\n  logits, endpoints = mobilenet_v2.mobilenet(images)\r\n\r\n# Restore using exponential moving average since it produces (1.5-2%)\r\nhigher\r\n# accuracy\r\nema = tf.train.ExponentialMovingAverage(0.999)\r\nvars = ema.variables_to_restore()\r\n\r\nsaver = tf.train.Saver(vars)\r\ng = tf.get_default_graph()\r\nop =\r\ng.get_operation_by_name('MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm')\r\nwith tf.Session() as sess:\r\n  saver.restore(sess,  checkpoint)\r\n  x = endpoints['Predictions'].eval(feed_dict={file_input: 'panda.jpg'})\r\n  print(op.outputs[1].eval(feed_dict={file_input: 'panda.jpg'}))\r\nlabel_map = imagenet.create_readable_names_for_imagenet_labels()\r\nprint(\"Top 1 prediction: \", x.argmax(),label_map[x.argmax()], x.max())\r\n```"}