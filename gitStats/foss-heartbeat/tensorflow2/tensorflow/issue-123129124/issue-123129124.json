{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/563", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/563/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/563/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/563/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/563", "id": 123129124, "node_id": "MDU6SXNzdWUxMjMxMjkxMjQ=", "number": 563, "title": "Possible bug in seq2seq sequence_loss_by_example", "user": {"login": "wchan", "id": 1131892, "node_id": "MDQ6VXNlcjExMzE4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1131892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wchan", "html_url": "https://github.com/wchan", "followers_url": "https://api.github.com/users/wchan/followers", "following_url": "https://api.github.com/users/wchan/following{/other_user}", "gists_url": "https://api.github.com/users/wchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/wchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wchan/subscriptions", "organizations_url": "https://api.github.com/users/wchan/orgs", "repos_url": "https://api.github.com/users/wchan/repos", "events_url": "https://api.github.com/users/wchan/events{/privacy}", "received_events_url": "https://api.github.com/users/wchan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2015-12-20T03:06:17Z", "updated_at": "2017-04-26T06:39:16Z", "closed_at": "2015-12-23T05:07:42Z", "author_association": "NONE", "body_html": "<p>Looking at the tensorflow/python/ops/seq2seq.py file of the sequence_loss_by_example function:</p>\n<pre><code>  if softmax_loss_function is None:\n    # TODO(lukaszkaiser): There is no SparseCrossEntropy in TensorFlow, so\n    # we need to first cast targets into a dense representation, and as\n    # SparseToDense does not accept batched inputs, we need to do this by\n    # re-indexing and re-sizing. When TensorFlow adds SparseCrossEntropy,\n    # rewrite this method.\n    indices = targets[i] + num_decoder_symbols * math_ops.range(batch_size)\n    with ops.device(\"/cpu:0\"):  # Sparse-to-dense must be on CPU for now.\n      dense = sparse_ops.sparse_to_dense(\n          indices, array_ops.expand_dims(length, 0), 1.0,\n          0.0)\n    target = array_ops.reshape(dense, [-1, num_decoder_symbols])\n    crossent = nn_ops.softmax_cross_entropy_with_logits(\n        logits[i], target, name=\"SequenceLoss/CrossEntropy{0}\".format(i))\n</code></pre>\n<p>Isn't this a bug? the softmax_cross_entropy_with_logits doesn't take in the weights as a parameter, and hence if your sequence is heavily padded, it will bias the optimization. however, the inference perplexity is done correctly later on due to the element wise product with weights, however the gradient won't have that information, or am i wrong?</p>\n<p>thanks!</p>", "body_text": "Looking at the tensorflow/python/ops/seq2seq.py file of the sequence_loss_by_example function:\n  if softmax_loss_function is None:\n    # TODO(lukaszkaiser): There is no SparseCrossEntropy in TensorFlow, so\n    # we need to first cast targets into a dense representation, and as\n    # SparseToDense does not accept batched inputs, we need to do this by\n    # re-indexing and re-sizing. When TensorFlow adds SparseCrossEntropy,\n    # rewrite this method.\n    indices = targets[i] + num_decoder_symbols * math_ops.range(batch_size)\n    with ops.device(\"/cpu:0\"):  # Sparse-to-dense must be on CPU for now.\n      dense = sparse_ops.sparse_to_dense(\n          indices, array_ops.expand_dims(length, 0), 1.0,\n          0.0)\n    target = array_ops.reshape(dense, [-1, num_decoder_symbols])\n    crossent = nn_ops.softmax_cross_entropy_with_logits(\n        logits[i], target, name=\"SequenceLoss/CrossEntropy{0}\".format(i))\n\nIsn't this a bug? the softmax_cross_entropy_with_logits doesn't take in the weights as a parameter, and hence if your sequence is heavily padded, it will bias the optimization. however, the inference perplexity is done correctly later on due to the element wise product with weights, however the gradient won't have that information, or am i wrong?\nthanks!", "body": "Looking at the tensorflow/python/ops/seq2seq.py file of the sequence_loss_by_example function:\n\n```\n  if softmax_loss_function is None:\n    # TODO(lukaszkaiser): There is no SparseCrossEntropy in TensorFlow, so\n    # we need to first cast targets into a dense representation, and as\n    # SparseToDense does not accept batched inputs, we need to do this by\n    # re-indexing and re-sizing. When TensorFlow adds SparseCrossEntropy,\n    # rewrite this method.\n    indices = targets[i] + num_decoder_symbols * math_ops.range(batch_size)\n    with ops.device(\"/cpu:0\"):  # Sparse-to-dense must be on CPU for now.\n      dense = sparse_ops.sparse_to_dense(\n          indices, array_ops.expand_dims(length, 0), 1.0,\n          0.0)\n    target = array_ops.reshape(dense, [-1, num_decoder_symbols])\n    crossent = nn_ops.softmax_cross_entropy_with_logits(\n        logits[i], target, name=\"SequenceLoss/CrossEntropy{0}\".format(i))\n```\n\nIsn't this a bug? the softmax_cross_entropy_with_logits doesn't take in the weights as a parameter, and hence if your sequence is heavily padded, it will bias the optimization. however, the inference perplexity is done correctly later on due to the element wise product with weights, however the gradient won't have that information, or am i wrong?\n\nthanks!\n"}