{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/406373913", "html_url": "https://github.com/tensorflow/tensorflow/issues/20517#issuecomment-406373913", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20517", "id": 406373913, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjM3MzkxMw==", "user": {"login": "cgohlke", "id": 483428, "node_id": "MDQ6VXNlcjQ4MzQyOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/483428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgohlke", "html_url": "https://github.com/cgohlke", "followers_url": "https://api.github.com/users/cgohlke/followers", "following_url": "https://api.github.com/users/cgohlke/following{/other_user}", "gists_url": "https://api.github.com/users/cgohlke/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgohlke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgohlke/subscriptions", "organizations_url": "https://api.github.com/users/cgohlke/orgs", "repos_url": "https://api.github.com/users/cgohlke/repos", "events_url": "https://api.github.com/users/cgohlke/events{/privacy}", "received_events_url": "https://api.github.com/users/cgohlke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-19T18:36:35Z", "updated_at": "2018-07-19T18:36:35Z", "author_association": "NONE", "body_html": "<p>FWIW, I just built (not tested yet) tensorflow 1.9 with MKL on Windows for Python 3.7 using VS2017 and the following patch:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git a/tensorflow/c/eager/c_api.h b/tensorflow/c/eager/c_api.h</span>\nindex 1862af3ce2..093b97110f 100644\n<span class=\"pl-md\">--- a/tensorflow/c/eager/c_api.h</span>\n<span class=\"pl-mi1\">+++ b/tensorflow/c/eager/c_api.h</span>\n<span class=\"pl-mdr\">@@ -76,7 +76,7 @@</span> typedef enum TFE_ContextDevicePlacementPolicy {\n // Sets the default execution mode (sync/async). Note that this can be\n // overridden per thread using TFE_ContextSetAsyncForThread.\n TF_CAPI_EXPORT extern void TFE_ContextOptionsSetAsync(TFE_ContextOptions*,\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>                                                      unsigned char async);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>                                                      unsigned char is_async);</span>\n \n TF_CAPI_EXPORT extern void TFE_ContextOptionsSetDevicePlacementPolicy(\n     TFE_ContextOptions*, TFE_ContextDevicePlacementPolicy);\n<span class=\"pl-mdr\">@@ -125,7 +125,7 @@</span> TFE_ContextGetDevicePlacementPolicy(TFE_Context*);\n \n // Overrides the execution mode (sync/async) for the current thread.\n TF_CAPI_EXPORT extern void TFE_ContextSetAsyncForThread(TFE_Context*,\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>                                                        unsigned char async,</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>                                                        unsigned char is_async,</span>\n                                                         TF_Status* status);\n \n // Causes the calling thread to block till all ops dispatched in async mode\n<span class=\"pl-c1\">diff --git a/tensorflow/core/platform/windows/port.cc b/tensorflow/core/platform/windows/port.cc</span>\nindex 174f41a993..b06434620e 100644\n<span class=\"pl-md\">--- a/tensorflow/core/platform/windows/port.cc</span>\n<span class=\"pl-mi1\">+++ b/tensorflow/core/platform/windows/port.cc</span>\n<span class=\"pl-mdr\">@@ -57,6 +57,11 @@</span> int NumSchedulableCPUs() {\n   return system_info.dwNumberOfProcessors;\n }\n \n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>int NumHyperthreadsPerCore() {</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  static const int ht_per_core = tensorflow::port::CPUIDNumSMT();</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  return (ht_per_core &gt; 0) ? ht_per_core : 1;</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>}</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span></span>\n void* AlignedMalloc(size_t size, int minimum_alignment) {\n #ifdef TENSORFLOW_USE_JEMALLOC\n   void* ptr = NULL;\n<span class=\"pl-c1\">diff --git a/tensorflow/python/eager/pywrap_tfe_src.cc b/tensorflow/python/eager/pywrap_tfe_src.cc</span>\nindex 6c9481c3af..13edbb07db 100644\n<span class=\"pl-md\">--- a/tensorflow/python/eager/pywrap_tfe_src.cc</span>\n<span class=\"pl-mi1\">+++ b/tensorflow/python/eager/pywrap_tfe_src.cc</span>\n<span class=\"pl-mdr\">@@ -813,7 +813,7 @@</span> char* TFE_GetPythonString(PyObject* o) {\n   }\n #if PY_MAJOR_VERSION &gt;= 3\n   if (PyUnicode_Check(o)) {\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    return PyUnicode_AsUTF8(o);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    return (char *)PyUnicode_AsUTF8(o);</span>\n   }\n #endif\n   return nullptr;\n<span class=\"pl-c1\">diff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc</span>\nindex 9df38d464c..4150fbfdd4 100644\n<span class=\"pl-md\">--- a/tensorflow/python/lib/core/ndarray_tensor.cc</span>\n<span class=\"pl-mi1\">+++ b/tensorflow/python/lib/core/ndarray_tensor.cc</span>\n<span class=\"pl-mdr\">@@ -154,7 +154,7 @@</span> Status PyBytesArrayMap(PyArrayObject* array, F f) {\n     if (PyUnicode_Check(item.get())) {\n #if PY_VERSION_HEX &gt;= 0x03030000\n       // Accept unicode by converting to UTF-8 bytes.\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      ptr = PyUnicode_AsUTF8AndSize(item.get(), &amp;len);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      ptr = (char *)PyUnicode_AsUTF8AndSize(item.get(), &amp;len);</span>\n       if (!ptr) {\n         return errors::Internal(\"Unable to get element as UTF-8.\");\n       }\n<span class=\"pl-c1\">diff --git a/tensorflow/python/lib/core/py_func.cc b/tensorflow/python/lib/core/py_func.cc</span>\nindex 30c1a9c759..231a66de59 100644\n<span class=\"pl-md\">--- a/tensorflow/python/lib/core/py_func.cc</span>\n<span class=\"pl-mi1\">+++ b/tensorflow/python/lib/core/py_func.cc</span>\n<span class=\"pl-mdr\">@@ -322,7 +322,7 @@</span> Status ConvertNdarrayToTensor(PyObject* obj, Tensor* ret) {\n         Py_ssize_t el_size;\n         if (PyBytes_AsStringAndSize(input_data[i], &amp;el, &amp;el_size) == -1) {\n #if PY_MAJOR_VERSION &gt;= 3\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>          el = PyUnicode_AsUTF8AndSize(input_data[i], &amp;el_size);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>          el = (char *)PyUnicode_AsUTF8AndSize(input_data[i], &amp;el_size);</span>\n #else\n           el = nullptr;\n           if (PyUnicode_Check(input_data[i])) {</pre></div>", "body_text": "FWIW, I just built (not tested yet) tensorflow 1.9 with MKL on Windows for Python 3.7 using VS2017 and the following patch:\ndiff --git a/tensorflow/c/eager/c_api.h b/tensorflow/c/eager/c_api.h\nindex 1862af3ce2..093b97110f 100644\n--- a/tensorflow/c/eager/c_api.h\n+++ b/tensorflow/c/eager/c_api.h\n@@ -76,7 +76,7 @@ typedef enum TFE_ContextDevicePlacementPolicy {\n // Sets the default execution mode (sync/async). Note that this can be\n // overridden per thread using TFE_ContextSetAsyncForThread.\n TF_CAPI_EXPORT extern void TFE_ContextOptionsSetAsync(TFE_ContextOptions*,\n-                                                      unsigned char async);\n+                                                      unsigned char is_async);\n \n TF_CAPI_EXPORT extern void TFE_ContextOptionsSetDevicePlacementPolicy(\n     TFE_ContextOptions*, TFE_ContextDevicePlacementPolicy);\n@@ -125,7 +125,7 @@ TFE_ContextGetDevicePlacementPolicy(TFE_Context*);\n \n // Overrides the execution mode (sync/async) for the current thread.\n TF_CAPI_EXPORT extern void TFE_ContextSetAsyncForThread(TFE_Context*,\n-                                                        unsigned char async,\n+                                                        unsigned char is_async,\n                                                         TF_Status* status);\n \n // Causes the calling thread to block till all ops dispatched in async mode\ndiff --git a/tensorflow/core/platform/windows/port.cc b/tensorflow/core/platform/windows/port.cc\nindex 174f41a993..b06434620e 100644\n--- a/tensorflow/core/platform/windows/port.cc\n+++ b/tensorflow/core/platform/windows/port.cc\n@@ -57,6 +57,11 @@ int NumSchedulableCPUs() {\n   return system_info.dwNumberOfProcessors;\n }\n \n+int NumHyperthreadsPerCore() {\n+  static const int ht_per_core = tensorflow::port::CPUIDNumSMT();\n+  return (ht_per_core > 0) ? ht_per_core : 1;\n+}\n+\n void* AlignedMalloc(size_t size, int minimum_alignment) {\n #ifdef TENSORFLOW_USE_JEMALLOC\n   void* ptr = NULL;\ndiff --git a/tensorflow/python/eager/pywrap_tfe_src.cc b/tensorflow/python/eager/pywrap_tfe_src.cc\nindex 6c9481c3af..13edbb07db 100644\n--- a/tensorflow/python/eager/pywrap_tfe_src.cc\n+++ b/tensorflow/python/eager/pywrap_tfe_src.cc\n@@ -813,7 +813,7 @@ char* TFE_GetPythonString(PyObject* o) {\n   }\n #if PY_MAJOR_VERSION >= 3\n   if (PyUnicode_Check(o)) {\n-    return PyUnicode_AsUTF8(o);\n+    return (char *)PyUnicode_AsUTF8(o);\n   }\n #endif\n   return nullptr;\ndiff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc\nindex 9df38d464c..4150fbfdd4 100644\n--- a/tensorflow/python/lib/core/ndarray_tensor.cc\n+++ b/tensorflow/python/lib/core/ndarray_tensor.cc\n@@ -154,7 +154,7 @@ Status PyBytesArrayMap(PyArrayObject* array, F f) {\n     if (PyUnicode_Check(item.get())) {\n #if PY_VERSION_HEX >= 0x03030000\n       // Accept unicode by converting to UTF-8 bytes.\n-      ptr = PyUnicode_AsUTF8AndSize(item.get(), &len);\n+      ptr = (char *)PyUnicode_AsUTF8AndSize(item.get(), &len);\n       if (!ptr) {\n         return errors::Internal(\"Unable to get element as UTF-8.\");\n       }\ndiff --git a/tensorflow/python/lib/core/py_func.cc b/tensorflow/python/lib/core/py_func.cc\nindex 30c1a9c759..231a66de59 100644\n--- a/tensorflow/python/lib/core/py_func.cc\n+++ b/tensorflow/python/lib/core/py_func.cc\n@@ -322,7 +322,7 @@ Status ConvertNdarrayToTensor(PyObject* obj, Tensor* ret) {\n         Py_ssize_t el_size;\n         if (PyBytes_AsStringAndSize(input_data[i], &el, &el_size) == -1) {\n #if PY_MAJOR_VERSION >= 3\n-          el = PyUnicode_AsUTF8AndSize(input_data[i], &el_size);\n+          el = (char *)PyUnicode_AsUTF8AndSize(input_data[i], &el_size);\n #else\n           el = nullptr;\n           if (PyUnicode_Check(input_data[i])) {", "body": "FWIW, I just built (not tested yet) tensorflow 1.9 with MKL on Windows for Python 3.7 using VS2017 and the following patch:\r\n```diff\r\ndiff --git a/tensorflow/c/eager/c_api.h b/tensorflow/c/eager/c_api.h\r\nindex 1862af3ce2..093b97110f 100644\r\n--- a/tensorflow/c/eager/c_api.h\r\n+++ b/tensorflow/c/eager/c_api.h\r\n@@ -76,7 +76,7 @@ typedef enum TFE_ContextDevicePlacementPolicy {\r\n // Sets the default execution mode (sync/async). Note that this can be\r\n // overridden per thread using TFE_ContextSetAsyncForThread.\r\n TF_CAPI_EXPORT extern void TFE_ContextOptionsSetAsync(TFE_ContextOptions*,\r\n-                                                      unsigned char async);\r\n+                                                      unsigned char is_async);\r\n \r\n TF_CAPI_EXPORT extern void TFE_ContextOptionsSetDevicePlacementPolicy(\r\n     TFE_ContextOptions*, TFE_ContextDevicePlacementPolicy);\r\n@@ -125,7 +125,7 @@ TFE_ContextGetDevicePlacementPolicy(TFE_Context*);\r\n \r\n // Overrides the execution mode (sync/async) for the current thread.\r\n TF_CAPI_EXPORT extern void TFE_ContextSetAsyncForThread(TFE_Context*,\r\n-                                                        unsigned char async,\r\n+                                                        unsigned char is_async,\r\n                                                         TF_Status* status);\r\n \r\n // Causes the calling thread to block till all ops dispatched in async mode\r\ndiff --git a/tensorflow/core/platform/windows/port.cc b/tensorflow/core/platform/windows/port.cc\r\nindex 174f41a993..b06434620e 100644\r\n--- a/tensorflow/core/platform/windows/port.cc\r\n+++ b/tensorflow/core/platform/windows/port.cc\r\n@@ -57,6 +57,11 @@ int NumSchedulableCPUs() {\r\n   return system_info.dwNumberOfProcessors;\r\n }\r\n \r\n+int NumHyperthreadsPerCore() {\r\n+  static const int ht_per_core = tensorflow::port::CPUIDNumSMT();\r\n+  return (ht_per_core > 0) ? ht_per_core : 1;\r\n+}\r\n+\r\n void* AlignedMalloc(size_t size, int minimum_alignment) {\r\n #ifdef TENSORFLOW_USE_JEMALLOC\r\n   void* ptr = NULL;\r\ndiff --git a/tensorflow/python/eager/pywrap_tfe_src.cc b/tensorflow/python/eager/pywrap_tfe_src.cc\r\nindex 6c9481c3af..13edbb07db 100644\r\n--- a/tensorflow/python/eager/pywrap_tfe_src.cc\r\n+++ b/tensorflow/python/eager/pywrap_tfe_src.cc\r\n@@ -813,7 +813,7 @@ char* TFE_GetPythonString(PyObject* o) {\r\n   }\r\n #if PY_MAJOR_VERSION >= 3\r\n   if (PyUnicode_Check(o)) {\r\n-    return PyUnicode_AsUTF8(o);\r\n+    return (char *)PyUnicode_AsUTF8(o);\r\n   }\r\n #endif\r\n   return nullptr;\r\ndiff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc\r\nindex 9df38d464c..4150fbfdd4 100644\r\n--- a/tensorflow/python/lib/core/ndarray_tensor.cc\r\n+++ b/tensorflow/python/lib/core/ndarray_tensor.cc\r\n@@ -154,7 +154,7 @@ Status PyBytesArrayMap(PyArrayObject* array, F f) {\r\n     if (PyUnicode_Check(item.get())) {\r\n #if PY_VERSION_HEX >= 0x03030000\r\n       // Accept unicode by converting to UTF-8 bytes.\r\n-      ptr = PyUnicode_AsUTF8AndSize(item.get(), &len);\r\n+      ptr = (char *)PyUnicode_AsUTF8AndSize(item.get(), &len);\r\n       if (!ptr) {\r\n         return errors::Internal(\"Unable to get element as UTF-8.\");\r\n       }\r\ndiff --git a/tensorflow/python/lib/core/py_func.cc b/tensorflow/python/lib/core/py_func.cc\r\nindex 30c1a9c759..231a66de59 100644\r\n--- a/tensorflow/python/lib/core/py_func.cc\r\n+++ b/tensorflow/python/lib/core/py_func.cc\r\n@@ -322,7 +322,7 @@ Status ConvertNdarrayToTensor(PyObject* obj, Tensor* ret) {\r\n         Py_ssize_t el_size;\r\n         if (PyBytes_AsStringAndSize(input_data[i], &el, &el_size) == -1) {\r\n #if PY_MAJOR_VERSION >= 3\r\n-          el = PyUnicode_AsUTF8AndSize(input_data[i], &el_size);\r\n+          el = (char *)PyUnicode_AsUTF8AndSize(input_data[i], &el_size);\r\n #else\r\n           el = nullptr;\r\n           if (PyUnicode_Check(input_data[i])) {\r\n```"}