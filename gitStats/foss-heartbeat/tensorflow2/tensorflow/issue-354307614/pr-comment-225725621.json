{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/225725621", "pull_request_review_id": 165389652, "id": 225725621, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTcyNTYyMQ==", "diff_hunk": "@@ -0,0 +1,36 @@\n+/*\n+Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package op\n+\n+import tf \"github.com/tensorflow/tensorflow/tensorflow/go\"\n+\n+// Gradients adds gradients computation ops to the graph according to scope.\n+//\n+// Arguments:\n+//  y: output of the function to derive\n+//  x: inputs of the function for which partial derivatives are computed\n+//  dx: if not null, the partial derivatives of some loss function L w.r.t. y\n+//\n+//  return the partial derivatives\n+func Gradients(scope *Scope, y []tf.Output, x []tf.Output, dx ...tf.Output) (output []tf.Output) {\n+\tvar err error\n+\tif output, err = scope.graph.AddGradients(scope.opName(scope.uniqueName(\"Gradients\")), y, x, dx); err != nil {", "path": "tensorflow/go/op/gradients.go", "position": null, "original_position": 31, "commit_id": "a911ecf5a94e037554f677670762b0122c062b41", "original_commit_id": "8c9d5eb52b0d8e551b0e751186edfcdecbef62fb", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "RE: \"other elements of \"scope\", I believe the control dependencies and devices are _not_ being handled in the call to `Gradients(scope, ...)`.  \r\n\r\nAll the generated ops in the `op` package (like `Abs`, `Add` etc., see [`wrappers.go`](https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/go/op/wrappers.go)) invoke [`Scope.AddOperation`](https://github.com/tensorflow/tensorflow/blob/94ab1a9e82fb7630b1aae44984d73968508dc917/tensorflow/go/op/scope.go#L75), which in turns invokes [`Graph.AddOperation`](https://github.com/tensorflow/tensorflow/blob/94ab1a9e82fb7630b1aae44984d73968508dc917/tensorflow/go/graph.go#L191) which adds the control inputs and the device annotation via calls to `TF_AddControlInput` and `TF_SetDevice` etc.\r\n\r\nHowever, the implementation of `Gradients` in this PR will not invoke those functions and thus will not respect any control dependencies or device annotations set in the `Scope` object.\r\n\r\nDoes that make sense? You could probably most easily see this by inspecting the `GraphDef` protocol buffer written out by `Graph.WriteTo()`.\r\n\r\nI realize that fixing this would require some complexity (for example, the device annotation would probably have to be plumbed through the C API of `TF_AddGradients`, and the control dependencies may require wrapping the inputs in an `Identity` operation or something). So, for this PR, I'm okay if we don't handle them but instead have `Gradients()` fail if it sees non-empty control dependencies or a device in the `Scope`. Does that make sense?", "created_at": "2018-10-16T22:12:29Z", "updated_at": "2018-11-21T06:08:04Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21895#discussion_r225725621", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21895", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/225725621"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21895#discussion_r225725621"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21895"}}, "body_html": "<p>RE: \"other elements of \"scope\", I believe the control dependencies and devices are <em>not</em> being handled in the call to <code>Gradients(scope, ...)</code>.</p>\n<p>All the generated ops in the <code>op</code> package (like <code>Abs</code>, <code>Add</code> etc., see <a href=\"https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/go/op/wrappers.go\" rel=\"nofollow\"><code>wrappers.go</code></a>) invoke <a href=\"https://github.com/tensorflow/tensorflow/blob/94ab1a9e82fb7630b1aae44984d73968508dc917/tensorflow/go/op/scope.go#L75\"><code>Scope.AddOperation</code></a>, which in turns invokes <a href=\"https://github.com/tensorflow/tensorflow/blob/94ab1a9e82fb7630b1aae44984d73968508dc917/tensorflow/go/graph.go#L191\"><code>Graph.AddOperation</code></a> which adds the control inputs and the device annotation via calls to <code>TF_AddControlInput</code> and <code>TF_SetDevice</code> etc.</p>\n<p>However, the implementation of <code>Gradients</code> in this PR will not invoke those functions and thus will not respect any control dependencies or device annotations set in the <code>Scope</code> object.</p>\n<p>Does that make sense? You could probably most easily see this by inspecting the <code>GraphDef</code> protocol buffer written out by <code>Graph.WriteTo()</code>.</p>\n<p>I realize that fixing this would require some complexity (for example, the device annotation would probably have to be plumbed through the C API of <code>TF_AddGradients</code>, and the control dependencies may require wrapping the inputs in an <code>Identity</code> operation or something). So, for this PR, I'm okay if we don't handle them but instead have <code>Gradients()</code> fail if it sees non-empty control dependencies or a device in the <code>Scope</code>. Does that make sense?</p>", "body_text": "RE: \"other elements of \"scope\", I believe the control dependencies and devices are not being handled in the call to Gradients(scope, ...).\nAll the generated ops in the op package (like Abs, Add etc., see wrappers.go) invoke Scope.AddOperation, which in turns invokes Graph.AddOperation which adds the control inputs and the device annotation via calls to TF_AddControlInput and TF_SetDevice etc.\nHowever, the implementation of Gradients in this PR will not invoke those functions and thus will not respect any control dependencies or device annotations set in the Scope object.\nDoes that make sense? You could probably most easily see this by inspecting the GraphDef protocol buffer written out by Graph.WriteTo().\nI realize that fixing this would require some complexity (for example, the device annotation would probably have to be plumbed through the C API of TF_AddGradients, and the control dependencies may require wrapping the inputs in an Identity operation or something). So, for this PR, I'm okay if we don't handle them but instead have Gradients() fail if it sees non-empty control dependencies or a device in the Scope. Does that make sense?", "in_reply_to_id": 222117365}