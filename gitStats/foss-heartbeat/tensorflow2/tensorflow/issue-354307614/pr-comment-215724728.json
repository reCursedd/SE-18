{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/215724728", "pull_request_review_id": 153054874, "id": 215724728, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTcyNDcyOA==", "diff_hunk": "@@ -147,6 +147,73 @@ func (g *Graph) Operations() []Operation {\n \treturn ops\n }\n \n+// AddGradients adds operations to compute the partial derivatives of sum of `y`s w.r.t `x`s,\n+// i.e., d(y_1 + y_2 + ...)/dx_1, d(y_1 + y_2 + ...)/dx_2...\n+// This is a simplified version of AddGradientsWithPrefix() without prefix\n+func (g *Graph) AddGradients(y []Output, x []Output, dx []Output) ([]Output, error) {\n+\treturn g.AddGradientsWithPrefix(\"\", y, x, dx)\n+}\n+\n+// AddGradientsWithPrefix adds operations to compute the partial derivatives of sum of `y`s w.r.t `x`s,\n+// i.e., d(y_1 + y_2 + ...)/dx_1, d(y_1 + y_2 + ...)/dx_2...\n+// This is a variant of AddGradients that allows to caller to pass a custom\n+// name prefix to the operations added to a graph to compute the gradients.\n+func (g *Graph) AddGradientsWithPrefix(prefix string, y []Output, x []Output, dx []Output) ([]Output, error) {", "path": "tensorflow/go/graph.go", "position": null, "original_position": 15, "commit_id": "a911ecf5a94e037554f677670762b0122c062b41", "original_commit_id": "ccccbe7259f9862e115e267fcce3d8bfb119b3cf", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Let's have just one method: `AddGradients` in Go (which can take a prefix string), instead of having multiple methods.\r\n\r\nAnd then we can add a method to the `op` package, so that `Gradients` appears just like any other op (and can pick up the appropriate prefix from the `Scope`). A similar thing was done for the Java API.\r\n\r\nThat would allow common usage like:\r\n\r\n```go\r\ns := op.NewScope()\r\nx := op.Placeholder(s, tf.Float) // Matrix to be provided to Session.Run\r\ny := op.Mul(s, input, input)\r\ndy := op.Gradients(s, []tf.Output{y}, []tf.Output{x})[0]\r\n```\r\n\r\n", "created_at": "2018-09-06T18:07:24Z", "updated_at": "2018-11-21T06:08:04Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21895#discussion_r215724728", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21895", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/215724728"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21895#discussion_r215724728"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21895"}}, "body_html": "<p>Let's have just one method: <code>AddGradients</code> in Go (which can take a prefix string), instead of having multiple methods.</p>\n<p>And then we can add a method to the <code>op</code> package, so that <code>Gradients</code> appears just like any other op (and can pick up the appropriate prefix from the <code>Scope</code>). A similar thing was done for the Java API.</p>\n<p>That would allow common usage like:</p>\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-smi\">s</span> <span class=\"pl-k\">:=</span> op.<span class=\"pl-c1\">NewScope</span>()\n<span class=\"pl-smi\">x</span> <span class=\"pl-k\">:=</span> op.<span class=\"pl-c1\">Placeholder</span>(s, tf.<span class=\"pl-smi\">Float</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> Matrix to be provided to Session.Run</span>\n<span class=\"pl-smi\">y</span> <span class=\"pl-k\">:=</span> op.<span class=\"pl-c1\">Mul</span>(s, input, input)\n<span class=\"pl-smi\">dy</span> <span class=\"pl-k\">:=</span> op.<span class=\"pl-c1\">Gradients</span>(s, []tf.<span class=\"pl-smi\">Output</span>{y}, []tf.<span class=\"pl-smi\">Output</span>{x})[<span class=\"pl-c1\">0</span>]</pre></div>", "body_text": "Let's have just one method: AddGradients in Go (which can take a prefix string), instead of having multiple methods.\nAnd then we can add a method to the op package, so that Gradients appears just like any other op (and can pick up the appropriate prefix from the Scope). A similar thing was done for the Java API.\nThat would allow common usage like:\ns := op.NewScope()\nx := op.Placeholder(s, tf.Float) // Matrix to be provided to Session.Run\ny := op.Mul(s, input, input)\ndy := op.Gradients(s, []tf.Output{y}, []tf.Output{x})[0]"}