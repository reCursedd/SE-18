{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/330105225", "html_url": "https://github.com/tensorflow/tensorflow/pull/12872#issuecomment-330105225", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12872", "id": 330105225, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDEwNTIyNQ==", "user": {"login": "kbsriram", "id": 1495065, "node_id": "MDQ6VXNlcjE0OTUwNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1495065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbsriram", "html_url": "https://github.com/kbsriram", "followers_url": "https://api.github.com/users/kbsriram/followers", "following_url": "https://api.github.com/users/kbsriram/following{/other_user}", "gists_url": "https://api.github.com/users/kbsriram/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbsriram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbsriram/subscriptions", "organizations_url": "https://api.github.com/users/kbsriram/orgs", "repos_url": "https://api.github.com/users/kbsriram/repos", "events_url": "https://api.github.com/users/kbsriram/events{/privacy}", "received_events_url": "https://api.github.com/users/kbsriram/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-18T00:29:24Z", "updated_at": "2017-09-18T00:34:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a> - just adding some notes:</p>\n<ol>\n<li>the control dependencies are only an optimization - in the Erf grad for instance it would ensure the Conjugate operation is never scheduled unless something forces grad_input[0] to be evaluated. That said, at this point perhaps you could also choose to leave this particular optimization as part of an existing TODO that already exists. So more a note to consider if useful later.</li>\n<li>When you merge/rebase to HEAD, there's a newer version of the gradient_checker that includes support for complex checking - you can move the Erf/lgamma test cases into a TestCWiseUnaryGrad form - hopefully making the test case simpler as well.</li>\n<li>Notwithstanding, do we actually have complex support for <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_op_lgamma.cc#L19\">lgamma</a> and <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_op_erf.cc#L19\">erf</a>? If not, it might still be ok to leave the grad implementations as-is for now; and just enable tests on the real-valued points you've identified.</li>\n</ol>", "body_text": "Hi @facaiy - just adding some notes:\n\nthe control dependencies are only an optimization - in the Erf grad for instance it would ensure the Conjugate operation is never scheduled unless something forces grad_input[0] to be evaluated. That said, at this point perhaps you could also choose to leave this particular optimization as part of an existing TODO that already exists. So more a note to consider if useful later.\nWhen you merge/rebase to HEAD, there's a newer version of the gradient_checker that includes support for complex checking - you can move the Erf/lgamma test cases into a TestCWiseUnaryGrad form - hopefully making the test case simpler as well.\nNotwithstanding, do we actually have complex support for lgamma and erf? If not, it might still be ok to leave the grad implementations as-is for now; and just enable tests on the real-valued points you've identified.", "body": "Hi @facaiy - just adding some notes:\r\n1. the control dependencies are only an optimization - in the Erf grad for instance it would ensure the Conjugate operation is never scheduled unless something forces grad_input[0] to be evaluated. That said, at this point perhaps you could also choose to leave this particular optimization as part of an existing TODO that already exists. So more a note to consider if useful later.\r\n2. When you merge/rebase to HEAD, there's a newer version of the gradient_checker that includes support for complex checking - you can move the Erf/lgamma test cases into a TestCWiseUnaryGrad form - hopefully making the test case simpler as well.\r\n3. Notwithstanding, do we actually have complex support for [lgamma](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_op_lgamma.cc#L19) and [erf](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_op_erf.cc#L19)? If not, it might still be ok to leave the grad implementations as-is for now; and just enable tests on the real-valued points you've identified."}