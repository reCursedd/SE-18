{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355217806", "html_url": "https://github.com/tensorflow/tensorflow/issues/11182#issuecomment-355217806", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11182", "id": 355217806, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTIxNzgwNg==", "user": {"login": "jeffxtang", "id": 535090, "node_id": "MDQ6VXNlcjUzNTA5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/535090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffxtang", "html_url": "https://github.com/jeffxtang", "followers_url": "https://api.github.com/users/jeffxtang/followers", "following_url": "https://api.github.com/users/jeffxtang/following{/other_user}", "gists_url": "https://api.github.com/users/jeffxtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffxtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffxtang/subscriptions", "organizations_url": "https://api.github.com/users/jeffxtang/orgs", "repos_url": "https://api.github.com/users/jeffxtang/repos", "events_url": "https://api.github.com/users/jeffxtang/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffxtang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-04T07:42:38Z", "updated_at": "2018-01-04T07:42:38Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Can <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=161459\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/petewarden\">@petewarden</a> or someone please take a look? Also, a related problem: I used one quantized MobileNet model to do the retraining:</p>\n<pre><code>python tensorflow/examples/image_retraining/retrain.py \\\n  --output_graph=/tf_files/dog_retrained_mobilenet10_224.pb \\\n  --output_labels=/tf_files/dog_retrained_labels_mobilenet.txt \\\n  --image_dir ~/Downloads/Images \\\n  --bottleneck_dir=/tf_files/dogs_bottleneck_mobilenet \\\n  --architecture mobilenet_1.0_224_quantized\n</code></pre>\n<p>and then using the label_image script to verify the model's accuracy, which looks pretty good:</p>\n<pre><code>bazel-bin/tensorflow/examples/label_image/label_image \\\n--graph=/tf_files/dog_retrained_mobilenet10_224.pb \\\n--image=/tmp/lab1.jpg \\\n--input_layer=input \\\n--output_layer=final_result \\\n--labels=/tf_files/dog_retrained_labels_mobilenet.txt \\\n--input_height=224 \\\n--input_width=224 \\\n--input_mean=128 \\\n--input_std=128\n</code></pre>\n<p>But when I use the retrained model in both iOS and Android, I have to set the threshold to 0.01 in order to see top recognition results, which look ok except the very low confidence values - for example:</p>\n<pre><code>Predictions: 41 0.0261  n02099712 labrador retriever\n60 0.024  n02106166 border collie\n34 0.0227  n02099849 chesapeake bay retriever\n31 0.0188  n02088238 basset\n42 0.0174  n02091032 italian greyhound\n</code></pre>\n<p>The non-quantized version of a retrained MobileNet model (using <code>--architecture mobilenet_1.0_224</code> on retraining) shows good top results with high confidence values for the results in iOS and Android - for example:</p>\n<pre><code>\nPredictions: 5 0.328  n02091134 whippet\n41 0.307  n02099712 labrador retriever\n20 0.0988  n02088364 beagle\n105 0.0815  n02087394 rhodesian ridgeback\n32 0.0209  n02090379 redbone\n</code></pre>\n<p>I'm using TensorFlow 1.4 and the iOS <code>simple</code> example and the Android <code>TF Classify</code> example.</p>\n<p>Any ideas on how to fix this and make retrained quantized MobileNet models work in iOS and Android? Thanks!</p>", "body_text": "Can @petewarden or someone please take a look? Also, a related problem: I used one quantized MobileNet model to do the retraining:\npython tensorflow/examples/image_retraining/retrain.py \\\n  --output_graph=/tf_files/dog_retrained_mobilenet10_224.pb \\\n  --output_labels=/tf_files/dog_retrained_labels_mobilenet.txt \\\n  --image_dir ~/Downloads/Images \\\n  --bottleneck_dir=/tf_files/dogs_bottleneck_mobilenet \\\n  --architecture mobilenet_1.0_224_quantized\n\nand then using the label_image script to verify the model's accuracy, which looks pretty good:\nbazel-bin/tensorflow/examples/label_image/label_image \\\n--graph=/tf_files/dog_retrained_mobilenet10_224.pb \\\n--image=/tmp/lab1.jpg \\\n--input_layer=input \\\n--output_layer=final_result \\\n--labels=/tf_files/dog_retrained_labels_mobilenet.txt \\\n--input_height=224 \\\n--input_width=224 \\\n--input_mean=128 \\\n--input_std=128\n\nBut when I use the retrained model in both iOS and Android, I have to set the threshold to 0.01 in order to see top recognition results, which look ok except the very low confidence values - for example:\nPredictions: 41 0.0261  n02099712 labrador retriever\n60 0.024  n02106166 border collie\n34 0.0227  n02099849 chesapeake bay retriever\n31 0.0188  n02088238 basset\n42 0.0174  n02091032 italian greyhound\n\nThe non-quantized version of a retrained MobileNet model (using --architecture mobilenet_1.0_224 on retraining) shows good top results with high confidence values for the results in iOS and Android - for example:\n\nPredictions: 5 0.328  n02091134 whippet\n41 0.307  n02099712 labrador retriever\n20 0.0988  n02088364 beagle\n105 0.0815  n02087394 rhodesian ridgeback\n32 0.0209  n02090379 redbone\n\nI'm using TensorFlow 1.4 and the iOS simple example and the Android TF Classify example.\nAny ideas on how to fix this and make retrained quantized MobileNet models work in iOS and Android? Thanks!", "body": "Can @petewarden or someone please take a look? Also, a related problem: I used one quantized MobileNet model to do the retraining:\r\n```\r\npython tensorflow/examples/image_retraining/retrain.py \\\r\n  --output_graph=/tf_files/dog_retrained_mobilenet10_224.pb \\\r\n  --output_labels=/tf_files/dog_retrained_labels_mobilenet.txt \\\r\n  --image_dir ~/Downloads/Images \\\r\n  --bottleneck_dir=/tf_files/dogs_bottleneck_mobilenet \\\r\n  --architecture mobilenet_1.0_224_quantized\r\n```\r\nand then using the label_image script to verify the model's accuracy, which looks pretty good:\r\n```\r\nbazel-bin/tensorflow/examples/label_image/label_image \\\r\n--graph=/tf_files/dog_retrained_mobilenet10_224.pb \\\r\n--image=/tmp/lab1.jpg \\\r\n--input_layer=input \\\r\n--output_layer=final_result \\\r\n--labels=/tf_files/dog_retrained_labels_mobilenet.txt \\\r\n--input_height=224 \\\r\n--input_width=224 \\\r\n--input_mean=128 \\\r\n--input_std=128\r\n```\r\nBut when I use the retrained model in both iOS and Android, I have to set the threshold to 0.01 in order to see top recognition results, which look ok except the very low confidence values - for example: \r\n```\r\nPredictions: 41 0.0261  n02099712 labrador retriever\r\n60 0.024  n02106166 border collie\r\n34 0.0227  n02099849 chesapeake bay retriever\r\n31 0.0188  n02088238 basset\r\n42 0.0174  n02091032 italian greyhound\r\n``` \r\n\r\nThe non-quantized version of a retrained MobileNet model (using `--architecture mobilenet_1.0_224` on retraining) shows good top results with high confidence values for the results in iOS and Android - for example:\r\n```\r\n\r\nPredictions: 5 0.328  n02091134 whippet\r\n41 0.307  n02099712 labrador retriever\r\n20 0.0988  n02088364 beagle\r\n105 0.0815  n02087394 rhodesian ridgeback\r\n32 0.0209  n02090379 redbone\r\n```\r\n\r\nI'm using TensorFlow 1.4 and the iOS `simple` example and the Android `TF Classify` example.\r\n\r\nAny ideas on how to fix this and make retrained quantized MobileNet models work in iOS and Android? Thanks!\r\n\r\n\r\n"}