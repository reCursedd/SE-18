{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16834", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16834/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16834/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16834/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16834", "id": 295166125, "node_id": "MDU6SXNzdWUyOTUxNjYxMjU=", "number": 16834, "title": "Tensorflow not supporting 3D convolution with None input size", "user": {"login": "Rov67777", "id": 7711526, "node_id": "MDQ6VXNlcjc3MTE1MjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7711526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rov67777", "html_url": "https://github.com/Rov67777", "followers_url": "https://api.github.com/users/Rov67777/followers", "following_url": "https://api.github.com/users/Rov67777/following{/other_user}", "gists_url": "https://api.github.com/users/Rov67777/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rov67777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rov67777/subscriptions", "organizations_url": "https://api.github.com/users/Rov67777/orgs", "repos_url": "https://api.github.com/users/Rov67777/repos", "events_url": "https://api.github.com/users/Rov67777/events{/privacy}", "received_events_url": "https://api.github.com/users/Rov67777/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-02-07T14:52:03Z", "updated_at": "2018-11-09T18:52:25Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>System information<br>\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):<br>\nPartly<br>\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):<br>\nWindows7<br>\nTensorFlow installed from (source or binary):<br>\nppip/python<br>\nTensorFlow version (use command below):<br>\n1.5.0<br>\nPython version:<br>\npython3.4<br>\nCUDA/cuDNN version:<br>\n9.0 / 7.0<br>\nGPU model and memory:<br>\nGTX 1080 Ti</p>\n<p>Hello,</p>\n<p>I am trying to build a 3D fully convolutional network with input of variable size. To do that I define x with 3 None dimensions and then apply a conv3d layers:</p>\n<p>exact command to reproduce:</p>\n<pre><code>x = T.placeholder(shape=(1,nbrChannel,None,None,None),name=\"input\")\nconv=T.layers.conv3d(inputs=x,filters=num_filters,kernel_size=filter_size,strides=strides,padding=\"same\",data_format='channels_first')\n\n</code></pre>\n<p>I get the following error. Please note that I tried to do exactly the same thing with 2D image input (with 2 \"None\" dimensions) and 2D convolution and it worked fine. Therefore, I think this is a problem specific to the conv3d layer function.</p>\n<blockquote>\n<p>c:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\convolutional.py in conv3d(inputs, filters, kernel_size, strides, padding, data_format, dilation_rate, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, kernel_constraint, bias_constraint, trainable, name, reuse)<br>\n817       _reuse=reuse,<br>\n818       _scope=name)<br>\n--&gt; 819   return layer.apply(inputs)<br>\n820<br>\n821</p>\n<p>c:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\base.py in apply(self, inputs, *args, **kwargs)<br>\n760       Output tensor(s).<br>\n761     \"\"\"<br>\n--&gt; 762     return self.<strong>call</strong>(inputs, *args, **kwargs)<br>\n763<br>\n764   def _add_inbound_node(self,</p>\n<p>c:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\base.py in <strong>call</strong>(self, inputs, *args, **kwargs)<br>\n650<br>\n651         if not in_deferred_mode:<br>\n--&gt; 652           outputs = self.call(inputs, *args, **kwargs)<br>\n653           if outputs is None:<br>\n654             raise ValueError('A layer's <code>call</code> method should return a Tensor '</p>\n<p>c:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\convolutional.py in call(self, inputs)<br>\n182           outputs_4d = array_ops.reshape(outputs,<br>\n183                                          [outputs_shape[0], outputs_shape[1],<br>\n--&gt; 184                                           outputs_shape[2] * outputs_shape[3],<br>\n185                                           outputs_shape[4]])<br>\n186           outputs_4d = nn.bias_add(outputs_4d, self.bias, data_format='NCHW')</p>\n<p>TypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'</p>\n</blockquote>", "body_text": "System information\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nPartly\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nWindows7\nTensorFlow installed from (source or binary):\nppip/python\nTensorFlow version (use command below):\n1.5.0\nPython version:\npython3.4\nCUDA/cuDNN version:\n9.0 / 7.0\nGPU model and memory:\nGTX 1080 Ti\nHello,\nI am trying to build a 3D fully convolutional network with input of variable size. To do that I define x with 3 None dimensions and then apply a conv3d layers:\nexact command to reproduce:\nx = T.placeholder(shape=(1,nbrChannel,None,None,None),name=\"input\")\nconv=T.layers.conv3d(inputs=x,filters=num_filters,kernel_size=filter_size,strides=strides,padding=\"same\",data_format='channels_first')\n\n\nI get the following error. Please note that I tried to do exactly the same thing with 2D image input (with 2 \"None\" dimensions) and 2D convolution and it worked fine. Therefore, I think this is a problem specific to the conv3d layer function.\n\nc:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\convolutional.py in conv3d(inputs, filters, kernel_size, strides, padding, data_format, dilation_rate, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, kernel_constraint, bias_constraint, trainable, name, reuse)\n817       _reuse=reuse,\n818       _scope=name)\n--> 819   return layer.apply(inputs)\n820\n821\nc:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\base.py in apply(self, inputs, *args, **kwargs)\n760       Output tensor(s).\n761     \"\"\"\n--> 762     return self.call(inputs, *args, **kwargs)\n763\n764   def _add_inbound_node(self,\nc:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\base.py in call(self, inputs, *args, **kwargs)\n650\n651         if not in_deferred_mode:\n--> 652           outputs = self.call(inputs, *args, **kwargs)\n653           if outputs is None:\n654             raise ValueError('A layer's call method should return a Tensor '\nc:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\convolutional.py in call(self, inputs)\n182           outputs_4d = array_ops.reshape(outputs,\n183                                          [outputs_shape[0], outputs_shape[1],\n--> 184                                           outputs_shape[2] * outputs_shape[3],\n185                                           outputs_shape[4]])\n186           outputs_4d = nn.bias_add(outputs_4d, self.bias, data_format='NCHW')\nTypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'", "body": "System information\r\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\r\nPartly\r\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\r\nWindows7\r\nTensorFlow installed from (source or binary):\r\nppip/python\r\nTensorFlow version (use command below):\r\n1.5.0\r\nPython version:\r\npython3.4\r\nCUDA/cuDNN version:\r\n9.0 / 7.0\r\nGPU model and memory:\r\nGTX 1080 Ti\r\n\r\nHello,\r\n\r\nI am trying to build a 3D fully convolutional network with input of variable size. To do that I define x with 3 None dimensions and then apply a conv3d layers:\r\n\r\nexact command to reproduce:\r\n```\r\nx = T.placeholder(shape=(1,nbrChannel,None,None,None),name=\"input\")\r\nconv=T.layers.conv3d(inputs=x,filters=num_filters,kernel_size=filter_size,strides=strides,padding=\"same\",data_format='channels_first')\r\n\r\n```\r\nI get the following error. Please note that I tried to do exactly the same thing with 2D image input (with 2 \"None\" dimensions) and 2D convolution and it worked fine. Therefore, I think this is a problem specific to the conv3d layer function.\r\n\r\n> \r\n> c:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\convolutional.py in conv3d(inputs, filters, kernel_size, strides, padding, data_format, dilation_rate, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, kernel_constraint, bias_constraint, trainable, name, reuse)\r\n>     817       _reuse=reuse,\r\n>     818       _scope=name)\r\n> --> 819   return layer.apply(inputs)\r\n>     820 \r\n>     821 \r\n> \r\n> c:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\base.py in apply(self, inputs, *args, **kwargs)\r\n>     760       Output tensor(s).\r\n>     761     \"\"\"\r\n> --> 762     return self.__call__(inputs, *args, **kwargs)\r\n>     763 \r\n>     764   def _add_inbound_node(self,\r\n> \r\n> c:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\base.py in __call__(self, inputs, *args, **kwargs)\r\n>     650 \r\n>     651         if not in_deferred_mode:\r\n> --> 652           outputs = self.call(inputs, *args, **kwargs)\r\n>     653           if outputs is None:\r\n>     654             raise ValueError('A layer\\'s `call` method should return a Tensor '\r\n> \r\n> c:\\programdata\\miniconda3\\lib\\site-packages\\tensorflow\\python\\layers\\convolutional.py in call(self, inputs)\r\n>     182           outputs_4d = array_ops.reshape(outputs,\r\n>     183                                          [outputs_shape[0], outputs_shape[1],\r\n> --> 184                                           outputs_shape[2] * outputs_shape[3],\r\n>     185                                           outputs_shape[4]])\r\n>     186           outputs_4d = nn.bias_add(outputs_4d, self.bias, data_format='NCHW')\r\n> \r\n> TypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'\r\n"}