{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/218838679", "html_url": "https://github.com/tensorflow/tensorflow/issues/2315#issuecomment-218838679", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2315", "id": 218838679, "node_id": "MDEyOklzc3VlQ29tbWVudDIxODgzODY3OQ==", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-12T18:07:14Z", "updated_at": "2016-05-12T18:07:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p>If it's consistent, it seems like it's a deterministic problem in softmax.  If that's the case, you should be able to get a small reproducible instance via something like:</p>\n<pre><code>... lots of complicated graph construction code ...\nlogits = ...\nprobs = tf.nn.softmax(logits)\n... more complicated graph construction code\n\n# Instead of\nnp_output = sess.run(output)\n# do\nnp_output, np_probs, np_logits = sess.run([output, probs, logits])\n\n# np_logits should now be a numpy array giving the reproducible bad input\nsimple_prob = tf.nn.softmax(np_logits).eval()\nassert np.all(simple_prob == np_probs)\n</code></pre>", "body_text": "If it's consistent, it seems like it's a deterministic problem in softmax.  If that's the case, you should be able to get a small reproducible instance via something like:\n... lots of complicated graph construction code ...\nlogits = ...\nprobs = tf.nn.softmax(logits)\n... more complicated graph construction code\n\n# Instead of\nnp_output = sess.run(output)\n# do\nnp_output, np_probs, np_logits = sess.run([output, probs, logits])\n\n# np_logits should now be a numpy array giving the reproducible bad input\nsimple_prob = tf.nn.softmax(np_logits).eval()\nassert np.all(simple_prob == np_probs)", "body": "If it's consistent, it seems like it's a deterministic problem in softmax.  If that's the case, you should be able to get a small reproducible instance via something like:\n\n```\n... lots of complicated graph construction code ...\nlogits = ...\nprobs = tf.nn.softmax(logits)\n... more complicated graph construction code\n\n# Instead of\nnp_output = sess.run(output)\n# do\nnp_output, np_probs, np_logits = sess.run([output, probs, logits])\n\n# np_logits should now be a numpy array giving the reproducible bad input\nsimple_prob = tf.nn.softmax(np_logits).eval()\nassert np.all(simple_prob == np_probs)\n```\n"}