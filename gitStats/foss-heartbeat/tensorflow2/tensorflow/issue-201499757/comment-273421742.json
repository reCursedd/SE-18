{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/273421742", "html_url": "https://github.com/tensorflow/tensorflow/issues/6923#issuecomment-273421742", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6923", "id": 273421742, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzQyMTc0Mg==", "user": {"login": "nvarini", "id": 11661368, "node_id": "MDQ6VXNlcjExNjYxMzY4", "avatar_url": "https://avatars1.githubusercontent.com/u/11661368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvarini", "html_url": "https://github.com/nvarini", "followers_url": "https://api.github.com/users/nvarini/followers", "following_url": "https://api.github.com/users/nvarini/following{/other_user}", "gists_url": "https://api.github.com/users/nvarini/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvarini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvarini/subscriptions", "organizations_url": "https://api.github.com/users/nvarini/orgs", "repos_url": "https://api.github.com/users/nvarini/repos", "events_url": "https://api.github.com/users/nvarini/events{/privacy}", "received_events_url": "https://api.github.com/users/nvarini/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-18T09:10:57Z", "updated_at": "2017-01-18T09:10:57Z", "author_association": "NONE", "body_html": "<p>Thanks for your answer. Spack relies mainly on cmake or configure to build packages. In configure or cmake you usually need to specify where a particular library is.<br>\nI am working to create a spack package to tensorflow based on cmake. The idea is that you can install tensorflow with cuda support and gcc compiler like: spack install tensorflow +cuda %gcc.<br>\nSo, I am perfectly fine with using cmake, and it is well integrated in spack. My concern is related to the statement:  We provide Linux build instructions primarily for the purpose of testing the build. If I would like to provide tensorflow for production purpose either bazel or cmake would do? Is there any difference between the two way of building tensorflow?</p>\n<p>Thanks</p>", "body_text": "Thanks for your answer. Spack relies mainly on cmake or configure to build packages. In configure or cmake you usually need to specify where a particular library is.\nI am working to create a spack package to tensorflow based on cmake. The idea is that you can install tensorflow with cuda support and gcc compiler like: spack install tensorflow +cuda %gcc.\nSo, I am perfectly fine with using cmake, and it is well integrated in spack. My concern is related to the statement:  We provide Linux build instructions primarily for the purpose of testing the build. If I would like to provide tensorflow for production purpose either bazel or cmake would do? Is there any difference between the two way of building tensorflow?\nThanks", "body": "Thanks for your answer. Spack relies mainly on cmake or configure to build packages. In configure or cmake you usually need to specify where a particular library is.\r\nI am working to create a spack package to tensorflow based on cmake. The idea is that you can install tensorflow with cuda support and gcc compiler like: spack install tensorflow +cuda %gcc. \r\nSo, I am perfectly fine with using cmake, and it is well integrated in spack. My concern is related to the statement:  We provide Linux build instructions primarily for the purpose of testing the build. If I would like to provide tensorflow for production purpose either bazel or cmake would do? Is there any difference between the two way of building tensorflow?\r\n\r\nThanks"}