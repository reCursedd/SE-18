{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/273671241", "html_url": "https://github.com/tensorflow/tensorflow/issues/6923#issuecomment-273671241", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6923", "id": 273671241, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzY3MTI0MQ==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-19T03:16:33Z", "updated_at": "2017-01-19T03:16:33Z", "author_association": "MEMBER", "body_html": "<p>Examples? Like eigen, png, gif, jpeg, nasm, highwayhash, farmhash, pcre, swig, curl, proto, grpc, boringssl, etc. defined in <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/workspace.bzl\">workspace.bzl</a> and <a href=\"https://github.com/tensorflow/tensorflow/blob/master/WORKSPACE\">WORKSPACE</a>? TensorFlow's Bazel configuration is actually doing a deceptively large amount of work. It builds all those things from scratch. So you could potentially have a very long road ahead of you.</p>\n<p>Blaze was designed to be hermetically sealed and not take anything into consideration anything that isn't defined in its own build graph. It's basically the Gentoo of build systems. So the solution is to put the stuff built by Spack into the build graph, using plain old BUILD code.</p>\n<p>If I were you, and I was determined to do what you want to do, I would probably start by patching TensorFlow to eliminate its default WORKSPACE file. Then I would redefine all those http_archive rules with build rules that basically point at the things that spack built. It would be super painful.</p>\n<p>For example, you can define a cc_library() where the srcs list contains a .so file, if I remember correctly. That .so file could just be a symlink to some compiled file in a spack output directory.</p>", "body_text": "Examples? Like eigen, png, gif, jpeg, nasm, highwayhash, farmhash, pcre, swig, curl, proto, grpc, boringssl, etc. defined in workspace.bzl and WORKSPACE? TensorFlow's Bazel configuration is actually doing a deceptively large amount of work. It builds all those things from scratch. So you could potentially have a very long road ahead of you.\nBlaze was designed to be hermetically sealed and not take anything into consideration anything that isn't defined in its own build graph. It's basically the Gentoo of build systems. So the solution is to put the stuff built by Spack into the build graph, using plain old BUILD code.\nIf I were you, and I was determined to do what you want to do, I would probably start by patching TensorFlow to eliminate its default WORKSPACE file. Then I would redefine all those http_archive rules with build rules that basically point at the things that spack built. It would be super painful.\nFor example, you can define a cc_library() where the srcs list contains a .so file, if I remember correctly. That .so file could just be a symlink to some compiled file in a spack output directory.", "body": "Examples? Like eigen, png, gif, jpeg, nasm, highwayhash, farmhash, pcre, swig, curl, proto, grpc, boringssl, etc. defined in [workspace.bzl](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/workspace.bzl) and [WORKSPACE](https://github.com/tensorflow/tensorflow/blob/master/WORKSPACE)? TensorFlow's Bazel configuration is actually doing a deceptively large amount of work. It builds all those things from scratch. So you could potentially have a very long road ahead of you. \r\n\r\nBlaze was designed to be hermetically sealed and not take anything into consideration anything that isn't defined in its own build graph. It's basically the Gentoo of build systems. So the solution is to put the stuff built by Spack into the build graph, using plain old BUILD code.\r\n\r\nIf I were you, and I was determined to do what you want to do, I would probably start by patching TensorFlow to eliminate its default WORKSPACE file. Then I would redefine all those http_archive rules with build rules that basically point at the things that spack built. It would be super painful.\r\n\r\nFor example, you can define a cc_library() where the srcs list contains a .so file, if I remember correctly. That .so file could just be a symlink to some compiled file in a spack output directory."}