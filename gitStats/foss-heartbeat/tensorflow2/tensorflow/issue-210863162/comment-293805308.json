{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/293805308", "html_url": "https://github.com/tensorflow/tensorflow/pull/7947#issuecomment-293805308", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7947", "id": 293805308, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzgwNTMwOA==", "user": {"login": "markslwong", "id": 704814, "node_id": "MDQ6VXNlcjcwNDgxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/704814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markslwong", "html_url": "https://github.com/markslwong", "followers_url": "https://api.github.com/users/markslwong/followers", "following_url": "https://api.github.com/users/markslwong/following{/other_user}", "gists_url": "https://api.github.com/users/markslwong/gists{/gist_id}", "starred_url": "https://api.github.com/users/markslwong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markslwong/subscriptions", "organizations_url": "https://api.github.com/users/markslwong/orgs", "repos_url": "https://api.github.com/users/markslwong/repos", "events_url": "https://api.github.com/users/markslwong/events{/privacy}", "received_events_url": "https://api.github.com/users/markslwong/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-13T06:48:42Z", "updated_at": "2017-04-13T06:56:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22941064\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/guschmue\">@guschmue</a> I have been running CMake 3.7.2, so I was curious to see if something had changed to make it work.  I upgraded to CMake 3.8.0 (official release) and tried to compile with Visual Studio 2017 Community Edition on the tensorflow official repository at commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/97c6203bb3f3978ac67920c66b6234ef82051c57/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/97c6203bb3f3978ac67920c66b6234ef82051c57\"><tt>97c6203</tt></a>.  Seems like I get the same errors that I tried to fix with this change.</p>\n<p>I think there might be a misunderstanding as to where the errors are introduced.  If you use CMake on the command line and generate a single configuration solution, regardless what version of CMake (3.7.2 or 3.8.0), Tensorflow will successfully build.  The problem is introduced when you generate a multi-configuration solution.  This is done by default if you use the CMake GUI.</p>\n<p>I understand your concerns about not relying on CMAKE_BUILD_TYPE.  I was equally as concerned as I was trying to find a solution.  I thoroughly went through the CMake documentation and could not find an equivalent option for multi-configuration solutions.</p>\n<p>You are correct external projects like grpc do use the CMAKE_BUILD_TYPE flag.  But that is okay because Visual Studio will call CMake during the build for the active configuration.  I have not needed to modify the CMake scripts of these projects.  Most of what I have changed is when the build references a build output.  (eg: a pre-build step that calls <code>proto.exe</code> will actually look like this: <code>protobuf\\src\\protobuf\\\\\\\\protoc.exe</code> in the generated solution for multiple configurations.  This is wrong since the \\\\ is missing the build configuration in between.)</p>\n<p>The changes that I have made are in cmake scripts are nested within \"Windows\" only build configurations.  I have tested this change both against the single-configuration solutions with the command line and multi-configuration with the CMake GUI and building within Visual Studio.</p>\n<p>Given this new information... are you still concerned about the change?  Would you still like me to separate this into two CL's?</p>", "body_text": "@guschmue I have been running CMake 3.7.2, so I was curious to see if something had changed to make it work.  I upgraded to CMake 3.8.0 (official release) and tried to compile with Visual Studio 2017 Community Edition on the tensorflow official repository at commit 97c6203.  Seems like I get the same errors that I tried to fix with this change.\nI think there might be a misunderstanding as to where the errors are introduced.  If you use CMake on the command line and generate a single configuration solution, regardless what version of CMake (3.7.2 or 3.8.0), Tensorflow will successfully build.  The problem is introduced when you generate a multi-configuration solution.  This is done by default if you use the CMake GUI.\nI understand your concerns about not relying on CMAKE_BUILD_TYPE.  I was equally as concerned as I was trying to find a solution.  I thoroughly went through the CMake documentation and could not find an equivalent option for multi-configuration solutions.\nYou are correct external projects like grpc do use the CMAKE_BUILD_TYPE flag.  But that is okay because Visual Studio will call CMake during the build for the active configuration.  I have not needed to modify the CMake scripts of these projects.  Most of what I have changed is when the build references a build output.  (eg: a pre-build step that calls proto.exe will actually look like this: protobuf\\src\\protobuf\\\\\\\\protoc.exe in the generated solution for multiple configurations.  This is wrong since the \\\\ is missing the build configuration in between.)\nThe changes that I have made are in cmake scripts are nested within \"Windows\" only build configurations.  I have tested this change both against the single-configuration solutions with the command line and multi-configuration with the CMake GUI and building within Visual Studio.\nGiven this new information... are you still concerned about the change?  Would you still like me to separate this into two CL's?", "body": "@guschmue I have been running CMake 3.7.2, so I was curious to see if something had changed to make it work.  I upgraded to CMake 3.8.0 (official release) and tried to compile with Visual Studio 2017 Community Edition on the tensorflow official repository at commit 97c6203.  Seems like I get the same errors that I tried to fix with this change.\r\n\r\nI think there might be a misunderstanding as to where the errors are introduced.  If you use CMake on the command line and generate a single configuration solution, regardless what version of CMake (3.7.2 or 3.8.0), Tensorflow will successfully build.  The problem is introduced when you generate a multi-configuration solution.  This is done by default if you use the CMake GUI.\r\n\r\nI understand your concerns about not relying on CMAKE_BUILD_TYPE.  I was equally as concerned as I was trying to find a solution.  I thoroughly went through the CMake documentation and could not find an equivalent option for multi-configuration solutions.  \r\n\r\nYou are correct external projects like grpc do use the CMAKE_BUILD_TYPE flag.  But that is okay because Visual Studio will call CMake during the build for the active configuration.  I have not needed to modify the CMake scripts of these projects.  Most of what I have changed is when the build references a build output.  (eg: a pre-build step that calls `proto.exe` will actually look like this: `protobuf\\src\\protobuf\\\\\\\\protoc.exe` in the generated solution for multiple configurations.  This is wrong since the \\\\\\\\ is missing the build configuration in between.)\r\n\r\nThe changes that I have made are in cmake scripts are nested within \"Windows\" only build configurations.  I have tested this change both against the single-configuration solutions with the command line and multi-configuration with the CMake GUI and building within Visual Studio.\r\n\r\nGiven this new information... are you still concerned about the change?  Would you still like me to separate this into two CL's? "}