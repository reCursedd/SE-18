{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/103804757", "pull_request_review_id": 24605128, "id": 103804757, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzgwNDc1Nw==", "diff_hunk": "@@ -58,7 +58,11 @@ limitations under the License.\n // Note: macros are defined in same order as types in types.proto, for\n // readability.\n #define TF_CALL_float(m) m(float)\n+#if defined(_WINDOWS) && !defined(GOOGLE_CUDA) && !defined(__AVX__) && !defined(__AVX2__) // Not supported on Eigen for SSE", "path": "tensorflow/core/framework/register_types.h", "position": null, "original_position": 4, "commit_id": "d0042ed637c5808d5de161353baf5209e46a5985", "original_commit_id": "b9aef2f00787159300eba2f03a49cfa0fd7f23c1", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "I'm a little concerned about this line. How many things failed without it? If the number of kernels to disable is not overwhelming, we might be able to do this at the CMake or kernel registration level... disabling an entire type seems drastic!\r\n\r\nWould the predicate here be equivalent to `#if defined(PLATFORM_WINDOWS) && defined(DEBUG)`? If so, the intent might be clearer.", "created_at": "2017-03-01T22:20:48Z", "updated_at": "2017-05-04T14:28:57Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/7947#discussion_r103804757", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7947", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/103804757"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/7947#discussion_r103804757"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7947"}}, "body_html": "<p>I'm a little concerned about this line. How many things failed without it? If the number of kernels to disable is not overwhelming, we might be able to do this at the CMake or kernel registration level... disabling an entire type seems drastic!</p>\n<p>Would the predicate here be equivalent to <code>#if defined(PLATFORM_WINDOWS) &amp;&amp; defined(DEBUG)</code>? If so, the intent might be clearer.</p>", "body_text": "I'm a little concerned about this line. How many things failed without it? If the number of kernels to disable is not overwhelming, we might be able to do this at the CMake or kernel registration level... disabling an entire type seems drastic!\nWould the predicate here be equivalent to #if defined(PLATFORM_WINDOWS) && defined(DEBUG)? If so, the intent might be clearer."}