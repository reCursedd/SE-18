{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/289933362", "html_url": "https://github.com/tensorflow/tensorflow/pull/7947#issuecomment-289933362", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7947", "id": 289933362, "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTkzMzM2Mg==", "user": {"login": "markslwong", "id": 704814, "node_id": "MDQ6VXNlcjcwNDgxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/704814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markslwong", "html_url": "https://github.com/markslwong", "followers_url": "https://api.github.com/users/markslwong/followers", "following_url": "https://api.github.com/users/markslwong/following{/other_user}", "gists_url": "https://api.github.com/users/markslwong/gists{/gist_id}", "starred_url": "https://api.github.com/users/markslwong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markslwong/subscriptions", "organizations_url": "https://api.github.com/users/markslwong/orgs", "repos_url": "https://api.github.com/users/markslwong/repos", "events_url": "https://api.github.com/users/markslwong/events{/privacy}", "received_events_url": "https://api.github.com/users/markslwong/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-28T23:13:39Z", "updated_at": "2017-03-28T23:13:39Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I've disabled the problematic kernel directly as suggested by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a></p>\n<p>I've placed the D_ITERATOR_DEBUG_LEVEL in RelWithDebug and MinSizeRel to address <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=856316\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/snnn\">@snnn</a>   However, RelWithDebug never worked for me as I discuss later in a bigger issue below.</p>\n<p>I don't know why GitHub diff shows the whole file as different.  My first assumption was it was different line endings... but after a binary diff it showed that it had not changed.</p>\n<p>A new change that I want to get in is to not have to play with the Debug flags for a Debug build.  Visual Studio runs out of memory when building (even when using the 64-bit version of the compiler on a machine with 8gb physical memory and 126gb page file available).  This can be resolved by removing the /Zi /Od and /RTC1 flags... which effectively build a release build with _DEBUG defined.  Since our company statically links to Tensorflow... we cannot create a Debug build because the _DEBUG flag is defined for our builds... and when we build the headers, it runs a different code path which runs into linker errors.  Doing this allows us to get a lib files that we make a Debug build of our application and Debug our own code.  However, we cannot Debug the Tensorflow code as a consequence.  So I'm not sure whether you want this change or not.</p>\n<p>Then there is the bigger question of RELWITHDEBINFO.  I did not make the same changes to this build.  I just let it fail naturally because it should always fail on Windows.  I could apply the same changes as I did with Debug.  However, I feel it's entirely contradictory to it's name... so I think failure is an acceptable outcome in this circumstance.</p>\n<p>Let me know your thoughts.</p>", "body_text": "I've disabled the problematic kernel directly as suggested by @mrry\nI've placed the D_ITERATOR_DEBUG_LEVEL in RelWithDebug and MinSizeRel to address @snnn   However, RelWithDebug never worked for me as I discuss later in a bigger issue below.\nI don't know why GitHub diff shows the whole file as different.  My first assumption was it was different line endings... but after a binary diff it showed that it had not changed.\nA new change that I want to get in is to not have to play with the Debug flags for a Debug build.  Visual Studio runs out of memory when building (even when using the 64-bit version of the compiler on a machine with 8gb physical memory and 126gb page file available).  This can be resolved by removing the /Zi /Od and /RTC1 flags... which effectively build a release build with _DEBUG defined.  Since our company statically links to Tensorflow... we cannot create a Debug build because the _DEBUG flag is defined for our builds... and when we build the headers, it runs a different code path which runs into linker errors.  Doing this allows us to get a lib files that we make a Debug build of our application and Debug our own code.  However, we cannot Debug the Tensorflow code as a consequence.  So I'm not sure whether you want this change or not.\nThen there is the bigger question of RELWITHDEBINFO.  I did not make the same changes to this build.  I just let it fail naturally because it should always fail on Windows.  I could apply the same changes as I did with Debug.  However, I feel it's entirely contradictory to it's name... so I think failure is an acceptable outcome in this circumstance.\nLet me know your thoughts.", "body": "I've disabled the problematic kernel directly as suggested by @mrry \r\n\r\nI've placed the D_ITERATOR_DEBUG_LEVEL in RelWithDebug and MinSizeRel to address @snnn   However, RelWithDebug never worked for me as I discuss later in a bigger issue below.\r\n\r\nI don't know why GitHub diff shows the whole file as different.  My first assumption was it was different line endings... but after a binary diff it showed that it had not changed.\r\n\r\nA new change that I want to get in is to not have to play with the Debug flags for a Debug build.  Visual Studio runs out of memory when building (even when using the 64-bit version of the compiler on a machine with 8gb physical memory and 126gb page file available).  This can be resolved by removing the /Zi /Od and /RTC1 flags... which effectively build a release build with _DEBUG defined.  Since our company statically links to Tensorflow... we cannot create a Debug build because the _DEBUG flag is defined for our builds... and when we build the headers, it runs a different code path which runs into linker errors.  Doing this allows us to get a lib files that we make a Debug build of our application and Debug our own code.  However, we cannot Debug the Tensorflow code as a consequence.  So I'm not sure whether you want this change or not.\r\n\r\nThen there is the bigger question of RELWITHDEBINFO.  I did not make the same changes to this build.  I just let it fail naturally because it should always fail on Windows.  I could apply the same changes as I did with Debug.  However, I feel it's entirely contradictory to it's name... so I think failure is an acceptable outcome in this circumstance.\r\n\r\nLet me know your thoughts.\r\n"}