{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16894", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16894/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16894/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16894/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16894", "id": 295942905, "node_id": "MDU6SXNzdWUyOTU5NDI5MDU=", "number": 16894, "title": "`control_dependencies` unexpected behavior with tensorflow>=1.3", "user": {"login": "jooojo", "id": 11719425, "node_id": "MDQ6VXNlcjExNzE5NDI1", "avatar_url": "https://avatars2.githubusercontent.com/u/11719425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jooojo", "html_url": "https://github.com/jooojo", "followers_url": "https://api.github.com/users/jooojo/followers", "following_url": "https://api.github.com/users/jooojo/following{/other_user}", "gists_url": "https://api.github.com/users/jooojo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jooojo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jooojo/subscriptions", "organizations_url": "https://api.github.com/users/jooojo/orgs", "repos_url": "https://api.github.com/users/jooojo/repos", "events_url": "https://api.github.com/users/jooojo/events{/privacy}", "received_events_url": "https://api.github.com/users/jooojo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-02-09T17:09:15Z", "updated_at": "2018-02-10T09:34:43Z", "closed_at": "2018-02-10T09:34:43Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: from binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.1.0, 1.3.0, 1.5.0</li>\n<li><strong>Python version</strong>:  2.7.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: None</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\ngcc version 4.9.4 (Ubuntu 4.9.4-2ubuntu1~14.04.1) for compiling custom ops.</li>\n<li><strong>CUDA/cuDNN version</strong>: do not matter</li>\n<li><strong>GPU model and memory</strong>: do not matter</li>\n<li><strong>Exact command to reproduce</strong>: As following</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>For the code below: (the complete sample follows later)</p>\n<div class=\"highlight highlight-source-python\"><pre>first_op <span class=\"pl-k\">=</span> custom_ops_module.custom_first(features_v)\n<span class=\"pl-k\">with</span> tf.control_dependencies([first_op]):\n    second_op <span class=\"pl-k\">=</span> tf.reshape(custom_ops_module.custom_second(), [<span class=\"pl-c1\">480</span>, <span class=\"pl-c1\">220</span>, <span class=\"pl-c1\">220</span>, <span class=\"pl-c1\">1</span>])\n\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">5</span>):\n    sess.run(second_op)</pre></div>\n<p>According to <a href=\"https://www.tensorflow.org/api_docs/python/tf/Graph#control_dependencies\" rel=\"nofollow\">the doc of control dependencies</a>, <code>second_op</code> will only run after <code>first_op</code> has executed.<br>\nHowever, this is not true for tensorflow 1.3+ when the ops are customized cpp codes.</p>\n<ul>\n<li>tensorflow 1.1<br>\nThe code runs exactly what I want: a <code>first_op</code>-<code>second_op</code> loop.</li>\n<li>tensorflow 1.3<br>\n<code>second_op</code> <strong>runs first</strong>, followed the <code>first_op</code>-<code>second_op</code> loop.</li>\n<li>tensorflow 1.5<br>\n<code>second_op</code> runs <strong>first and only once globally</strong>, then <code>first_op</code> runs again and again...</li>\n</ul>\n<h3>Source code / logs</h3>\n<p>To reproduce, a customized op is need (C++ source and compile script attached). The Python part loads the compiled <code>custom_ops.so</code> and behaves as described above, for TensorFlow 1.1, 1.3 and 1.5, each with log provided.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python2</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> -*- coding: utf-8 -*-</span>\n\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n\n<span class=\"pl-k\">import</span> os\nos.environ[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>TF_CPP_MIN_LOG_LEVEL<span class=\"pl-pds\">'</span></span>]<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>2<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\ncustom_ops_module <span class=\"pl-k\">=</span> tf.load_op_library(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./custom_ops.so<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>():\n    features_v <span class=\"pl-k\">=</span> tf.Variable(\n            tf.zeros(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">480</span>, <span class=\"pl-c1\">256</span>]), \n            <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>features_v<span class=\"pl-pds\">'</span></span>,\n            <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>,\n            <span class=\"pl-v\">collections</span><span class=\"pl-k\">=</span>[tf.GraphKeys.<span class=\"pl-c1\">LOCAL_VARIABLES</span>])\n    first_op <span class=\"pl-k\">=</span> custom_ops_module.custom_first(features_v)\n    <span class=\"pl-k\">with</span> tf.control_dependencies([first_op]):\n        second_op <span class=\"pl-k\">=</span> tf.reshape(custom_ops_module.custom_second(), [<span class=\"pl-c1\">480</span>, <span class=\"pl-c1\">220</span>, <span class=\"pl-c1\">220</span>, <span class=\"pl-c1\">1</span>])\n\n    sess_config <span class=\"pl-k\">=</span> tf.ConfigProto()\n    sess_config.allow_soft_placement <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span> \n\n    sess <span class=\"pl-k\">=</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>sess_config)\n\n    sess.run(tf.global_variables_initializer())\n    sess.run(tf.local_variables_initializer())\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>init vars done<span class=\"pl-pds\">'</span></span>)\n\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>start loop<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">5</span>):\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>loop: <span class=\"pl-pds\">'</span></span>, i)\n        sess.run(second_op)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow<span class=\"pl-pds\">\"</span></span>, tf.<span class=\"pl-c1\">__version__</span>)\n    run()\n</pre></div>\n<p>The custom ops</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/shape_inference.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op_kernel.h<span class=\"pl-pds\">\"</span></span>\n\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>glog/logging.h<span class=\"pl-pds\">&gt;</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>/////////////////////////////////////// NameSpace ////////////////////////////////////////////</span>\n\n<span class=\"pl-k\">using</span> tensorflow::DEVICE_CPU;\n<span class=\"pl-k\">using</span> tensorflow::Tensor;\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>/////////////////////////////////////// CustomFirstOp ////////////////////////////////////////</span>\n<span class=\"pl-en\">REGISTER_OP</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CustomFirst<span class=\"pl-pds\">\"</span></span>)\n    .Input(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>features: float32<span class=\"pl-pds\">\"</span></span>)\n    ;\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">CustomFirstOp</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">tensorflow</span>::OpKernel {\n <span class=\"pl-k\">public:</span>\n  <span class=\"pl-k\">explicit</span> <span class=\"pl-en\">CustomFirstOp</span>(tensorflow::OpKernelConstruction* context) : tensorflow::OpKernel(context) {}\n\n  <span class=\"pl-k\">void</span> <span class=\"pl-en\">Compute</span>(tensorflow::OpKernelContext* context) <span class=\"pl-k\">override</span> {\n      <span class=\"pl-k\">const</span> Tensor&amp; input_tensor = context-&gt;<span class=\"pl-c1\">input</span>(<span class=\"pl-c1\">0</span>);\n      <span class=\"pl-c1\">LOG</span>(INFO) &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>FirstOp enter with <span class=\"pl-pds\">\"</span></span> &lt;&lt; input_tensor.<span class=\"pl-c1\">DebugString</span>(); \n      <span class=\"pl-c1\">LOG</span>(INFO) &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>FirstOp leave<span class=\"pl-pds\">\"</span></span>;\n  }\n};\n<span class=\"pl-en\">REGISTER_KERNEL_BUILDER</span>(Name(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CustomFirst<span class=\"pl-pds\">\"</span></span>).Device(DEVICE_CPU), CustomFirstOp);\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>/////////////////////////////////////// CustomSecondOp ///////////////////////////////////////</span>\n<span class=\"pl-en\">REGISTER_OP</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CustomSecond<span class=\"pl-pds\">\"</span></span>)\n    .Output(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>images: uint8<span class=\"pl-pds\">\"</span></span>)\n    ;\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">CustomSecondOp</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">tensorflow</span>::OpKernel {\n <span class=\"pl-k\">public:</span>\n  <span class=\"pl-k\">explicit</span> <span class=\"pl-en\">CustomSecondOp</span>(tensorflow::OpKernelConstruction* context) : tensorflow::OpKernel(context) {}\n\n  <span class=\"pl-k\">void</span> <span class=\"pl-en\">Compute</span>(tensorflow::OpKernelContext* context) <span class=\"pl-k\">override</span> {\n      <span class=\"pl-c1\">LOG</span>(INFO) &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SecondOp enter<span class=\"pl-pds\">\"</span></span>;\n      tensorflow::Tensor* output_tensor = <span class=\"pl-c1\">nullptr</span>;\n      <span class=\"pl-c1\">OP_REQUIRES_OK</span>(context, context-&gt;<span class=\"pl-c1\">allocate_output</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">tensorflow::TensorShape</span>({<span class=\"pl-c1\">480</span>, <span class=\"pl-c1\">220</span>, <span class=\"pl-c1\">220</span>, <span class=\"pl-c1\">1</span>}), &amp;output_tensor));\n      <span class=\"pl-k\">auto</span> output_tensor_buffer = output_tensor-&gt;<span class=\"pl-smi\">shaped</span>&lt;tensorflow::uint8, <span class=\"pl-c1\">4</span>&gt;({<span class=\"pl-c1\">480</span>, <span class=\"pl-c1\">220</span>, <span class=\"pl-c1\">220</span>, <span class=\"pl-c1\">1</span>});\n      <span class=\"pl-c1\">LOG</span>(INFO) &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SecondOp leave with <span class=\"pl-pds\">\"</span></span> &lt;&lt; output_tensor-&gt;<span class=\"pl-c1\">DebugString</span>();\n  }\n};\n<span class=\"pl-en\">REGISTER_KERNEL_BUILDER</span>(Name(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CustomSecond<span class=\"pl-pds\">\"</span></span>).Device(DEVICE_CPU), CustomSecondOp);\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>////////////////////////////////////// Op End //////////////////////////////////////////////////////</span>\n</pre></div>\n<p>Compile scripts for tensorflow 1.1 and 1.3</p>\n<pre><code>#!/bin/bash\nTF_INC=( $(python -c 'import tensorflow as tf; print(tf.sysconfig.get_include())') )\ng++ -std=c++11 -shared custom_ops.cc -o custom_ops.so -fPIC -I $TF_INC -lglog\n</code></pre>\n<p>Compile scripts for tensorflow 1.5</p>\n<pre><code>#!/bin/bash\nTF_CFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))') )\nTF_LFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))') )\ng++ -std=c++11 -shared custom_ops.cc -o custom_ops.so -fPIC ${TF_CFLAGS[@]} ${TF_LFLAGS[@]} -lglog\n</code></pre>\n<p>Log with tensorflow 1.1</p>\n<pre><code>tensorflow 1.1.0\ninit vars done\nstart loop\nloop:  0\nWARNING: Logging before InitGoogleLogging() is written to STDERR\nI0210 00:04:19.464854 31270 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:04:19.464900 31270 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.464946 31268 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.486101 31268 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nloop:  1\nI0210 00:04:19.507359 31266 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:04:19.507411 31266 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.507489 31269 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.507637 31269 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nloop:  2\nI0210 00:04:19.547608 31269 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:04:19.547644 31269 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.547683 31268 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.547745 31268 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nloop:  3\nI0210 00:04:19.579887 31267 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:04:19.579923 31267 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.579952 31270 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.580021 31270 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nloop:  4\nI0210 00:04:19.874367 31270 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:04:19.874406 31270 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.874454 31267 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.874563 31267 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\n</code></pre>\n<p>Log with tensorflow 1.3</p>\n<pre><code>tensorflow 1.3.0\ninit vars done\nstart loop\nloop:  0\nWARNING: Logging before InitGoogleLogging() is written to STDERR\nI0210 00:03:34.893167 28884 custom_ops.cc:36] SecondOp enter\nI0210 00:03:34.893406 28884 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nI0210 00:03:35.004695 29283 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:03:35.004729 29283 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.004763 29283 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.025548 29283 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nloop:  1\nI0210 00:03:35.031692 29281 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:03:35.031735 29281 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.031818 29280 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.051908 29280 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nloop:  2\nI0210 00:03:35.056428 29281 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:03:35.056473 29281 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.056516 29280 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.056560 29280 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nloop:  3\nI0210 00:03:35.061014 29281 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:03:35.061050 29281 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.061085 29283 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.061139 29283 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nloop:  4\nI0210 00:03:35.065387 29282 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:03:35.065429 29282 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.065500 29281 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.065654 29281 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\n</code></pre>\n<p>Log with tensorflow 1.5</p>\n<pre><code>tensorflow 1.5.0\ninit vars done\nstart loop\nloop:  0\nWARNING: Logging before InitGoogleLogging() is written to STDERR\nI0210 00:39:03.166337 27046 custom_ops.cc:36] SecondOp enter\nI0210 00:39:03.166424 27046 custom_ops.cc:40] SecondOp leave with Tensor&lt;type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...&gt;\nI0210 00:39:03.868782 27965 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:39:03.868820 27965 custom_ops.cc:23] FirstOp leave\nloop:  1\nI0210 00:39:03.879077 27964 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:39:03.879094 27964 custom_ops.cc:23] FirstOp leave\nloop:  2\nI0210 00:39:03.893448 27962 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:39:03.893474 27962 custom_ops.cc:23] FirstOp leave\nloop:  3\nI0210 00:39:03.906409 27963 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:39:03.906440 27963 custom_ops.cc:23] FirstOp leave\nloop:  4\nI0210 00:39:03.917815 27963 custom_ops.cc:22] FirstOp enter with Tensor&lt;type: float shape: [480,256] values: [0 0 0]...&gt;\nI0210 00:39:03.917836 27963 custom_ops.cc:23] FirstOp leave\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04\nTensorFlow installed from (source or binary): from binary\nTensorFlow version (use command below): 1.1.0, 1.3.0, 1.5.0\nPython version:  2.7.6\nBazel version (if compiling from source): None\nGCC/Compiler version (if compiling from source):\ngcc version 4.9.4 (Ubuntu 4.9.4-2ubuntu1~14.04.1) for compiling custom ops.\nCUDA/cuDNN version: do not matter\nGPU model and memory: do not matter\nExact command to reproduce: As following\n\nDescribe the problem\nFor the code below: (the complete sample follows later)\nfirst_op = custom_ops_module.custom_first(features_v)\nwith tf.control_dependencies([first_op]):\n    second_op = tf.reshape(custom_ops_module.custom_second(), [480, 220, 220, 1])\n\nfor i in range(5):\n    sess.run(second_op)\nAccording to the doc of control dependencies, second_op will only run after first_op has executed.\nHowever, this is not true for tensorflow 1.3+ when the ops are customized cpp codes.\n\ntensorflow 1.1\nThe code runs exactly what I want: a first_op-second_op loop.\ntensorflow 1.3\nsecond_op runs first, followed the first_op-second_op loop.\ntensorflow 1.5\nsecond_op runs first and only once globally, then first_op runs again and again...\n\nSource code / logs\nTo reproduce, a customized op is need (C++ source and compile script attached). The Python part loads the compiled custom_ops.so and behaves as described above, for TensorFlow 1.1, 1.3 and 1.5, each with log provided.\n#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\n\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL']='2'\nimport tensorflow as tf\ncustom_ops_module = tf.load_op_library('./custom_ops.so')\n\ndef run():\n    features_v = tf.Variable(\n            tf.zeros(shape=[480, 256]), \n            name='features_v',\n            trainable=False,\n            collections=[tf.GraphKeys.LOCAL_VARIABLES])\n    first_op = custom_ops_module.custom_first(features_v)\n    with tf.control_dependencies([first_op]):\n        second_op = tf.reshape(custom_ops_module.custom_second(), [480, 220, 220, 1])\n\n    sess_config = tf.ConfigProto()\n    sess_config.allow_soft_placement = True \n\n    sess = tf.Session(config=sess_config)\n\n    sess.run(tf.global_variables_initializer())\n    sess.run(tf.local_variables_initializer())\n    print('init vars done')\n\n    print('start loop')\n    for i in range(5):\n        print('loop: ', i)\n        sess.run(second_op)\n\nif __name__ == '__main__':\n    print(\"tensorflow\", tf.__version__)\n    run()\n\nThe custom ops\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n\n#include <glog/logging.h>\n\n///////////////////////////////////////// NameSpace ////////////////////////////////////////////\n\nusing tensorflow::DEVICE_CPU;\nusing tensorflow::Tensor;\n\n///////////////////////////////////////// CustomFirstOp ////////////////////////////////////////\nREGISTER_OP(\"CustomFirst\")\n    .Input(\"features: float32\")\n    ;\nclass CustomFirstOp : public tensorflow::OpKernel {\n public:\n  explicit CustomFirstOp(tensorflow::OpKernelConstruction* context) : tensorflow::OpKernel(context) {}\n\n  void Compute(tensorflow::OpKernelContext* context) override {\n      const Tensor& input_tensor = context->input(0);\n      LOG(INFO) << \"FirstOp enter with \" << input_tensor.DebugString(); \n      LOG(INFO) << \"FirstOp leave\";\n  }\n};\nREGISTER_KERNEL_BUILDER(Name(\"CustomFirst\").Device(DEVICE_CPU), CustomFirstOp);\n///////////////////////////////////////// CustomSecondOp ///////////////////////////////////////\nREGISTER_OP(\"CustomSecond\")\n    .Output(\"images: uint8\")\n    ;\nclass CustomSecondOp : public tensorflow::OpKernel {\n public:\n  explicit CustomSecondOp(tensorflow::OpKernelConstruction* context) : tensorflow::OpKernel(context) {}\n\n  void Compute(tensorflow::OpKernelContext* context) override {\n      LOG(INFO) << \"SecondOp enter\";\n      tensorflow::Tensor* output_tensor = nullptr;\n      OP_REQUIRES_OK(context, context->allocate_output(0, tensorflow::TensorShape({480, 220, 220, 1}), &output_tensor));\n      auto output_tensor_buffer = output_tensor->shaped<tensorflow::uint8, 4>({480, 220, 220, 1});\n      LOG(INFO) << \"SecondOp leave with \" << output_tensor->DebugString();\n  }\n};\nREGISTER_KERNEL_BUILDER(Name(\"CustomSecond\").Device(DEVICE_CPU), CustomSecondOp);\n//////////////////////////////////////// Op End //////////////////////////////////////////////////////\n\nCompile scripts for tensorflow 1.1 and 1.3\n#!/bin/bash\nTF_INC=( $(python -c 'import tensorflow as tf; print(tf.sysconfig.get_include())') )\ng++ -std=c++11 -shared custom_ops.cc -o custom_ops.so -fPIC -I $TF_INC -lglog\n\nCompile scripts for tensorflow 1.5\n#!/bin/bash\nTF_CFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))') )\nTF_LFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))') )\ng++ -std=c++11 -shared custom_ops.cc -o custom_ops.so -fPIC ${TF_CFLAGS[@]} ${TF_LFLAGS[@]} -lglog\n\nLog with tensorflow 1.1\ntensorflow 1.1.0\ninit vars done\nstart loop\nloop:  0\nWARNING: Logging before InitGoogleLogging() is written to STDERR\nI0210 00:04:19.464854 31270 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:04:19.464900 31270 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.464946 31268 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.486101 31268 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nloop:  1\nI0210 00:04:19.507359 31266 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:04:19.507411 31266 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.507489 31269 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.507637 31269 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nloop:  2\nI0210 00:04:19.547608 31269 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:04:19.547644 31269 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.547683 31268 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.547745 31268 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nloop:  3\nI0210 00:04:19.579887 31267 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:04:19.579923 31267 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.579952 31270 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.580021 31270 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nloop:  4\nI0210 00:04:19.874367 31270 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:04:19.874406 31270 custom_ops.cc:23] FirstOp leave\nI0210 00:04:19.874454 31267 custom_ops.cc:36] SecondOp enter\nI0210 00:04:19.874563 31267 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\n\nLog with tensorflow 1.3\ntensorflow 1.3.0\ninit vars done\nstart loop\nloop:  0\nWARNING: Logging before InitGoogleLogging() is written to STDERR\nI0210 00:03:34.893167 28884 custom_ops.cc:36] SecondOp enter\nI0210 00:03:34.893406 28884 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nI0210 00:03:35.004695 29283 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:03:35.004729 29283 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.004763 29283 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.025548 29283 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nloop:  1\nI0210 00:03:35.031692 29281 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:03:35.031735 29281 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.031818 29280 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.051908 29280 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nloop:  2\nI0210 00:03:35.056428 29281 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:03:35.056473 29281 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.056516 29280 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.056560 29280 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nloop:  3\nI0210 00:03:35.061014 29281 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:03:35.061050 29281 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.061085 29283 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.061139 29283 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nloop:  4\nI0210 00:03:35.065387 29282 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:03:35.065429 29282 custom_ops.cc:23] FirstOp leave\nI0210 00:03:35.065500 29281 custom_ops.cc:36] SecondOp enter\nI0210 00:03:35.065654 29281 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\n\nLog with tensorflow 1.5\ntensorflow 1.5.0\ninit vars done\nstart loop\nloop:  0\nWARNING: Logging before InitGoogleLogging() is written to STDERR\nI0210 00:39:03.166337 27046 custom_ops.cc:36] SecondOp enter\nI0210 00:39:03.166424 27046 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\nI0210 00:39:03.868782 27965 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:39:03.868820 27965 custom_ops.cc:23] FirstOp leave\nloop:  1\nI0210 00:39:03.879077 27964 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:39:03.879094 27964 custom_ops.cc:23] FirstOp leave\nloop:  2\nI0210 00:39:03.893448 27962 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:39:03.893474 27962 custom_ops.cc:23] FirstOp leave\nloop:  3\nI0210 00:39:03.906409 27963 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:39:03.906440 27963 custom_ops.cc:23] FirstOp leave\nloop:  4\nI0210 00:39:03.917815 27963 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\nI0210 00:39:03.917836 27963 custom_ops.cc:23] FirstOp leave", "body": "------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 14.04\r\n- **TensorFlow installed from (source or binary)**: from binary\r\n- **TensorFlow version (use command below)**: 1.1.0, 1.3.0, 1.5.0\r\n- **Python version**:  2.7.6\r\n- **Bazel version (if compiling from source)**: None\r\n- **GCC/Compiler version (if compiling from source)**:\r\ngcc version 4.9.4 (Ubuntu 4.9.4-2ubuntu1~14.04.1) for compiling custom ops.\r\n- **CUDA/cuDNN version**: do not matter\r\n- **GPU model and memory**: do not matter \r\n- **Exact command to reproduce**: As following\r\n\r\n### Describe the problem\r\n\r\nFor the code below: (the complete sample follows later)\r\n```python\r\nfirst_op = custom_ops_module.custom_first(features_v)\r\nwith tf.control_dependencies([first_op]):\r\n    second_op = tf.reshape(custom_ops_module.custom_second(), [480, 220, 220, 1])\r\n\r\nfor i in range(5):\r\n    sess.run(second_op)\r\n```\r\nAccording to [the doc of control dependencies](https://www.tensorflow.org/api_docs/python/tf/Graph#control_dependencies), `second_op` will only run after `first_op` has executed.\r\nHowever, this is not true for tensorflow 1.3+ when the ops are customized cpp codes.\r\n\r\n* tensorflow 1.1\r\nThe code runs exactly what I want: a `first_op`-`second_op` loop.\r\n* tensorflow 1.3\r\n`second_op` **runs first**, followed the `first_op`-`second_op` loop.\r\n* tensorflow 1.5\r\n`second_op` runs **first and only once globally**, then `first_op` runs again and again...\r\n\r\n### Source code / logs\r\n\r\nTo reproduce, a customized op is need (C++ source and compile script attached). The Python part loads the compiled `custom_ops.so` and behaves as described above, for TensorFlow 1.1, 1.3 and 1.5, each with log provided.\r\n\r\n```python\r\n#!/usr/bin/env python2\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom __future__ import print_function\r\n\r\nimport os\r\nos.environ['TF_CPP_MIN_LOG_LEVEL']='2'\r\nimport tensorflow as tf\r\ncustom_ops_module = tf.load_op_library('./custom_ops.so')\r\n\r\ndef run():\r\n    features_v = tf.Variable(\r\n            tf.zeros(shape=[480, 256]), \r\n            name='features_v',\r\n            trainable=False,\r\n            collections=[tf.GraphKeys.LOCAL_VARIABLES])\r\n    first_op = custom_ops_module.custom_first(features_v)\r\n    with tf.control_dependencies([first_op]):\r\n        second_op = tf.reshape(custom_ops_module.custom_second(), [480, 220, 220, 1])\r\n\r\n    sess_config = tf.ConfigProto()\r\n    sess_config.allow_soft_placement = True \r\n\r\n    sess = tf.Session(config=sess_config)\r\n\r\n    sess.run(tf.global_variables_initializer())\r\n    sess.run(tf.local_variables_initializer())\r\n    print('init vars done')\r\n\r\n    print('start loop')\r\n    for i in range(5):\r\n        print('loop: ', i)\r\n        sess.run(second_op)\r\n\r\nif __name__ == '__main__':\r\n    print(\"tensorflow\", tf.__version__)\r\n    run()\r\n\r\n```\r\n\r\nThe custom ops\r\n```cpp\r\n#include \"tensorflow/core/framework/op.h\"\r\n#include \"tensorflow/core/framework/shape_inference.h\"\r\n#include \"tensorflow/core/framework/op_kernel.h\"\r\n\r\n#include <glog/logging.h>\r\n\r\n///////////////////////////////////////// NameSpace ////////////////////////////////////////////\r\n\r\nusing tensorflow::DEVICE_CPU;\r\nusing tensorflow::Tensor;\r\n\r\n///////////////////////////////////////// CustomFirstOp ////////////////////////////////////////\r\nREGISTER_OP(\"CustomFirst\")\r\n    .Input(\"features: float32\")\r\n    ;\r\nclass CustomFirstOp : public tensorflow::OpKernel {\r\n public:\r\n  explicit CustomFirstOp(tensorflow::OpKernelConstruction* context) : tensorflow::OpKernel(context) {}\r\n\r\n  void Compute(tensorflow::OpKernelContext* context) override {\r\n      const Tensor& input_tensor = context->input(0);\r\n      LOG(INFO) << \"FirstOp enter with \" << input_tensor.DebugString(); \r\n      LOG(INFO) << \"FirstOp leave\";\r\n  }\r\n};\r\nREGISTER_KERNEL_BUILDER(Name(\"CustomFirst\").Device(DEVICE_CPU), CustomFirstOp);\r\n///////////////////////////////////////// CustomSecondOp ///////////////////////////////////////\r\nREGISTER_OP(\"CustomSecond\")\r\n    .Output(\"images: uint8\")\r\n    ;\r\nclass CustomSecondOp : public tensorflow::OpKernel {\r\n public:\r\n  explicit CustomSecondOp(tensorflow::OpKernelConstruction* context) : tensorflow::OpKernel(context) {}\r\n\r\n  void Compute(tensorflow::OpKernelContext* context) override {\r\n      LOG(INFO) << \"SecondOp enter\";\r\n      tensorflow::Tensor* output_tensor = nullptr;\r\n      OP_REQUIRES_OK(context, context->allocate_output(0, tensorflow::TensorShape({480, 220, 220, 1}), &output_tensor));\r\n      auto output_tensor_buffer = output_tensor->shaped<tensorflow::uint8, 4>({480, 220, 220, 1});\r\n      LOG(INFO) << \"SecondOp leave with \" << output_tensor->DebugString();\r\n  }\r\n};\r\nREGISTER_KERNEL_BUILDER(Name(\"CustomSecond\").Device(DEVICE_CPU), CustomSecondOp);\r\n//////////////////////////////////////// Op End //////////////////////////////////////////////////////\r\n\r\n```\r\nCompile scripts for tensorflow 1.1 and 1.3\r\n```\r\n#!/bin/bash\r\nTF_INC=( $(python -c 'import tensorflow as tf; print(tf.sysconfig.get_include())') )\r\ng++ -std=c++11 -shared custom_ops.cc -o custom_ops.so -fPIC -I $TF_INC -lglog\r\n```\r\nCompile scripts for tensorflow 1.5\r\n```\r\n#!/bin/bash\r\nTF_CFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))') )\r\nTF_LFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))') )\r\ng++ -std=c++11 -shared custom_ops.cc -o custom_ops.so -fPIC ${TF_CFLAGS[@]} ${TF_LFLAGS[@]} -lglog\r\n```\r\nLog with tensorflow 1.1\r\n```\r\ntensorflow 1.1.0\r\ninit vars done\r\nstart loop\r\nloop:  0\r\nWARNING: Logging before InitGoogleLogging() is written to STDERR\r\nI0210 00:04:19.464854 31270 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:04:19.464900 31270 custom_ops.cc:23] FirstOp leave\r\nI0210 00:04:19.464946 31268 custom_ops.cc:36] SecondOp enter\r\nI0210 00:04:19.486101 31268 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nloop:  1\r\nI0210 00:04:19.507359 31266 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:04:19.507411 31266 custom_ops.cc:23] FirstOp leave\r\nI0210 00:04:19.507489 31269 custom_ops.cc:36] SecondOp enter\r\nI0210 00:04:19.507637 31269 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nloop:  2\r\nI0210 00:04:19.547608 31269 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:04:19.547644 31269 custom_ops.cc:23] FirstOp leave\r\nI0210 00:04:19.547683 31268 custom_ops.cc:36] SecondOp enter\r\nI0210 00:04:19.547745 31268 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nloop:  3\r\nI0210 00:04:19.579887 31267 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:04:19.579923 31267 custom_ops.cc:23] FirstOp leave\r\nI0210 00:04:19.579952 31270 custom_ops.cc:36] SecondOp enter\r\nI0210 00:04:19.580021 31270 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nloop:  4\r\nI0210 00:04:19.874367 31270 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:04:19.874406 31270 custom_ops.cc:23] FirstOp leave\r\nI0210 00:04:19.874454 31267 custom_ops.cc:36] SecondOp enter\r\nI0210 00:04:19.874563 31267 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\n```\r\nLog with tensorflow 1.3\r\n```\r\ntensorflow 1.3.0\r\ninit vars done\r\nstart loop\r\nloop:  0\r\nWARNING: Logging before InitGoogleLogging() is written to STDERR\r\nI0210 00:03:34.893167 28884 custom_ops.cc:36] SecondOp enter\r\nI0210 00:03:34.893406 28884 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nI0210 00:03:35.004695 29283 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:03:35.004729 29283 custom_ops.cc:23] FirstOp leave\r\nI0210 00:03:35.004763 29283 custom_ops.cc:36] SecondOp enter\r\nI0210 00:03:35.025548 29283 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nloop:  1\r\nI0210 00:03:35.031692 29281 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:03:35.031735 29281 custom_ops.cc:23] FirstOp leave\r\nI0210 00:03:35.031818 29280 custom_ops.cc:36] SecondOp enter\r\nI0210 00:03:35.051908 29280 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nloop:  2\r\nI0210 00:03:35.056428 29281 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:03:35.056473 29281 custom_ops.cc:23] FirstOp leave\r\nI0210 00:03:35.056516 29280 custom_ops.cc:36] SecondOp enter\r\nI0210 00:03:35.056560 29280 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nloop:  3\r\nI0210 00:03:35.061014 29281 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:03:35.061050 29281 custom_ops.cc:23] FirstOp leave\r\nI0210 00:03:35.061085 29283 custom_ops.cc:36] SecondOp enter\r\nI0210 00:03:35.061139 29283 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nloop:  4\r\nI0210 00:03:35.065387 29282 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:03:35.065429 29282 custom_ops.cc:23] FirstOp leave\r\nI0210 00:03:35.065500 29281 custom_ops.cc:36] SecondOp enter\r\nI0210 00:03:35.065654 29281 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\n```\r\nLog with tensorflow 1.5\r\n```\r\ntensorflow 1.5.0\r\ninit vars done\r\nstart loop\r\nloop:  0\r\nWARNING: Logging before InitGoogleLogging() is written to STDERR\r\nI0210 00:39:03.166337 27046 custom_ops.cc:36] SecondOp enter\r\nI0210 00:39:03.166424 27046 custom_ops.cc:40] SecondOp leave with Tensor<type: uint8 shape: [480,220,220,1] values: [[[0][0][0]]]...>\r\nI0210 00:39:03.868782 27965 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:39:03.868820 27965 custom_ops.cc:23] FirstOp leave\r\nloop:  1\r\nI0210 00:39:03.879077 27964 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:39:03.879094 27964 custom_ops.cc:23] FirstOp leave\r\nloop:  2\r\nI0210 00:39:03.893448 27962 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:39:03.893474 27962 custom_ops.cc:23] FirstOp leave\r\nloop:  3\r\nI0210 00:39:03.906409 27963 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:39:03.906440 27963 custom_ops.cc:23] FirstOp leave\r\nloop:  4\r\nI0210 00:39:03.917815 27963 custom_ops.cc:22] FirstOp enter with Tensor<type: float shape: [480,256] values: [0 0 0]...>\r\nI0210 00:39:03.917836 27963 custom_ops.cc:23] FirstOp leave\r\n```"}