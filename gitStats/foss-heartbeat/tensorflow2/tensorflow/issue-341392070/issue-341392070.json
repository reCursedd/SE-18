{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20827", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20827/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20827/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20827/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20827", "id": 341392070, "node_id": "MDU6SXNzdWUzNDEzOTIwNzA=", "number": 20827, "title": "Keras guide: input_shape needed when fitting example model using datasets (instead of numpy arrays)", "user": {"login": "skeydan", "id": 469371, "node_id": "MDQ6VXNlcjQ2OTM3MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/469371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skeydan", "html_url": "https://github.com/skeydan", "followers_url": "https://api.github.com/users/skeydan/followers", "following_url": "https://api.github.com/users/skeydan/following{/other_user}", "gists_url": "https://api.github.com/users/skeydan/gists{/gist_id}", "starred_url": "https://api.github.com/users/skeydan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skeydan/subscriptions", "organizations_url": "https://api.github.com/users/skeydan/orgs", "repos_url": "https://api.github.com/users/skeydan/repos", "events_url": "https://api.github.com/users/skeydan/events{/privacy}", "received_events_url": "https://api.github.com/users/skeydan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, {"login": "pavithrasv", "id": 13326758, "node_id": "MDQ6VXNlcjEzMzI2NzU4", "avatar_url": "https://avatars0.githubusercontent.com/u/13326758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pavithrasv", "html_url": "https://github.com/pavithrasv", "followers_url": "https://api.github.com/users/pavithrasv/followers", "following_url": "https://api.github.com/users/pavithrasv/following{/other_user}", "gists_url": "https://api.github.com/users/pavithrasv/gists{/gist_id}", "starred_url": "https://api.github.com/users/pavithrasv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pavithrasv/subscriptions", "organizations_url": "https://api.github.com/users/pavithrasv/orgs", "repos_url": "https://api.github.com/users/pavithrasv/repos", "events_url": "https://api.github.com/users/pavithrasv/events{/privacy}", "received_events_url": "https://api.github.com/users/pavithrasv/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-07-16T05:10:50Z", "updated_at": "2018-09-10T12:41:13Z", "closed_at": "2018-07-25T20:22:54Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux fedora 28</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.9</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<p>Below, I'm extracting code from the Keras guide (sequentially)</p>\n<p><a href=\"https://www.tensorflow.org/guide/keras\" rel=\"nofollow\">https://www.tensorflow.org/guide/keras</a></p>\n<p>Here a model is being fit twice, to show you can use numpy or datasets. This works fine:</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential()\n# Adds a densely-connected layer with 64 units to the model:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add another:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add a softmax layer with 10 output units:\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\nmodel.compile(optimizer=tf.train.AdamOptimizer(0.001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nimport numpy as np\n\ndata = np.random.random((1000, 32))\nlabels = np.random.random((1000, 10))\n\nval_data = np.random.random((100, 32))\nval_labels = np.random.random((100, 10))\n\nmodel.fit(data, labels, epochs=10, batch_size=32)\n          \ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset\ndataset = dataset.batch(32)\ndataset = dataset.repeat()\ndataset\n# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\n</code></pre>\n<p>However,  if you comment the first fit, the second will fail:</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential()\n# Adds a densely-connected layer with 64 units to the model:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add another:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add a softmax layer with 10 output units:\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\nmodel.compile(optimizer=tf.train.AdamOptimizer(0.001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nimport numpy as np\n\ndata = np.random.random((1000, 32))\nlabels = np.random.random((1000, 10))\n\n#model.fit(data, labels, epochs=10, batch_size=32)\n          \ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset\ndataset = dataset.batch(32)\ndataset = dataset.repeat()\ndataset\n# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\n</code></pre>\n<p>with</p>\n<pre><code>  TypeError: Input 'y' of 'Mul' Op has type float32 that does not match type float64 of argument 'x'.\n</code></pre>\n<p>When I add an <code>input_shape</code> to the model, the fit using datasets works fine standalone, too.</p>\n<p>So if <code>input_shape</code> is required with datasets, the model in the guide should probably have it, so people can copy out and directly use the code?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux fedora 28\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.9\nPython version: 3.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nBelow, I'm extracting code from the Keras guide (sequentially)\nhttps://www.tensorflow.org/guide/keras\nHere a model is being fit twice, to show you can use numpy or datasets. This works fine:\nimport tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential()\n# Adds a densely-connected layer with 64 units to the model:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add another:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add a softmax layer with 10 output units:\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\nmodel.compile(optimizer=tf.train.AdamOptimizer(0.001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nimport numpy as np\n\ndata = np.random.random((1000, 32))\nlabels = np.random.random((1000, 10))\n\nval_data = np.random.random((100, 32))\nval_labels = np.random.random((100, 10))\n\nmodel.fit(data, labels, epochs=10, batch_size=32)\n          \ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset\ndataset = dataset.batch(32)\ndataset = dataset.repeat()\ndataset\n# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\n\nHowever,  if you comment the first fit, the second will fail:\nimport tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential()\n# Adds a densely-connected layer with 64 units to the model:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add another:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add a softmax layer with 10 output units:\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\nmodel.compile(optimizer=tf.train.AdamOptimizer(0.001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nimport numpy as np\n\ndata = np.random.random((1000, 32))\nlabels = np.random.random((1000, 10))\n\n#model.fit(data, labels, epochs=10, batch_size=32)\n          \ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset\ndataset = dataset.batch(32)\ndataset = dataset.repeat()\ndataset\n# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\n\nwith\n  TypeError: Input 'y' of 'Mul' Op has type float32 that does not match type float64 of argument 'x'.\n\nWhen I add an input_shape to the model, the fit using datasets works fine standalone, too.\nSo if input_shape is required with datasets, the model in the guide should probably have it, so people can copy out and directly use the code?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux fedora 28\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.9\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\nBelow, I'm extracting code from the Keras guide (sequentially)\r\n\r\nhttps://www.tensorflow.org/guide/keras\r\n\r\nHere a model is being fit twice, to show you can use numpy or datasets. This works fine:\r\n\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow import keras\r\n\r\nmodel = keras.Sequential()\r\n# Adds a densely-connected layer with 64 units to the model:\r\nmodel.add(keras.layers.Dense(64, activation='relu'))\r\n# Add another:\r\nmodel.add(keras.layers.Dense(64, activation='relu'))\r\n# Add a softmax layer with 10 output units:\r\nmodel.add(keras.layers.Dense(10, activation='softmax'))\r\n\r\nmodel.compile(optimizer=tf.train.AdamOptimizer(0.001),\r\n              loss='categorical_crossentropy',\r\n              metrics=['accuracy'])\r\n\r\nimport numpy as np\r\n\r\ndata = np.random.random((1000, 32))\r\nlabels = np.random.random((1000, 10))\r\n\r\nval_data = np.random.random((100, 32))\r\nval_labels = np.random.random((100, 10))\r\n\r\nmodel.fit(data, labels, epochs=10, batch_size=32)\r\n          \r\ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\r\ndataset\r\ndataset = dataset.batch(32)\r\ndataset = dataset.repeat()\r\ndataset\r\n# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\r\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\r\n```\r\n\r\nHowever,  if you comment the first fit, the second will fail:\r\n\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow import keras\r\n\r\nmodel = keras.Sequential()\r\n# Adds a densely-connected layer with 64 units to the model:\r\nmodel.add(keras.layers.Dense(64, activation='relu'))\r\n# Add another:\r\nmodel.add(keras.layers.Dense(64, activation='relu'))\r\n# Add a softmax layer with 10 output units:\r\nmodel.add(keras.layers.Dense(10, activation='softmax'))\r\n\r\nmodel.compile(optimizer=tf.train.AdamOptimizer(0.001),\r\n              loss='categorical_crossentropy',\r\n              metrics=['accuracy'])\r\n\r\nimport numpy as np\r\n\r\ndata = np.random.random((1000, 32))\r\nlabels = np.random.random((1000, 10))\r\n\r\n#model.fit(data, labels, epochs=10, batch_size=32)\r\n          \r\ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\r\ndataset\r\ndataset = dataset.batch(32)\r\ndataset = dataset.repeat()\r\ndataset\r\n# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\r\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\r\n```\r\n\r\nwith\r\n\r\n```\r\n  TypeError: Input 'y' of 'Mul' Op has type float32 that does not match type float64 of argument 'x'.\r\n```\r\n\r\nWhen I add an `input_shape` to the model, the fit using datasets works fine standalone, too.\r\n\r\nSo if `input_shape` is required with datasets, the model in the guide should probably have it, so people can copy out and directly use the code?"}