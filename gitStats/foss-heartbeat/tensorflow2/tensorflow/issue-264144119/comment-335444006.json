{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335444006", "html_url": "https://github.com/tensorflow/tensorflow/issues/13603#issuecomment-335444006", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13603", "id": 335444006, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTQ0NDAwNg==", "user": {"login": "hzhangxyz", "id": 11623447, "node_id": "MDQ6VXNlcjExNjIzNDQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/11623447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hzhangxyz", "html_url": "https://github.com/hzhangxyz", "followers_url": "https://api.github.com/users/hzhangxyz/followers", "following_url": "https://api.github.com/users/hzhangxyz/following{/other_user}", "gists_url": "https://api.github.com/users/hzhangxyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hzhangxyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hzhangxyz/subscriptions", "organizations_url": "https://api.github.com/users/hzhangxyz/orgs", "repos_url": "https://api.github.com/users/hzhangxyz/repos", "events_url": "https://api.github.com/users/hzhangxyz/events{/privacy}", "received_events_url": "https://api.github.com/users/hzhangxyz/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-10T11:33:03Z", "updated_at": "2017-10-10T11:33:03Z", "author_association": "NONE", "body_html": "<p>As another clear sample:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.client import timeline\n\noptions = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\nrun_metadata = tf.RunMetadata()\nsess = tf.Session()\n\nD = 1024\ndA = np.random.normal(size=(D,D))\nA = tf.placeholder(shape=(D,D),dtype=tf.float32)\n\nwith tf.device(\"/cpu:0\"):\n    C = tf.svd(A)\n\nwith tf.device(\"/gpu:0\"):\n    G = tf.svd(A)\n\n_ = sess.run(C+G, feed_dict={A:dA}, options=options, run_metadata=run_metadata)\n\nfetched_timeline = timeline.Timeline(run_metadata.step_stats)\nchrome_trace = fetched_timeline.generate_chrome_trace_format()\nwith open('timeline.json', 'w') as f:\n    f.write(chrome_trace)\n</code></pre>\n<p>run it and get <code>timeline.json</code>, and open it via chrome then get it:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/11623447/31384419-8d85faae-ad84-11e7-91a2-7311bd228db8.png\"><img src=\"https://user-images.githubusercontent.com/11623447/31384419-8d85faae-ad84-11e7-91a2-7311bd228db8.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>those memcpy are obviously called by SVD. there is nothing else in the program.</p>\n<p>Then zoom in, we can find there is many small memcpy here</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/11623447/31384472-c5672c68-ad84-11e7-943f-e471cd2cf1ca.png\"><img src=\"https://user-images.githubusercontent.com/11623447/31384472-c5672c68-ad84-11e7-943f-e471cd2cf1ca.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>", "body_text": "As another clear sample:\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.client import timeline\n\noptions = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\nrun_metadata = tf.RunMetadata()\nsess = tf.Session()\n\nD = 1024\ndA = np.random.normal(size=(D,D))\nA = tf.placeholder(shape=(D,D),dtype=tf.float32)\n\nwith tf.device(\"/cpu:0\"):\n    C = tf.svd(A)\n\nwith tf.device(\"/gpu:0\"):\n    G = tf.svd(A)\n\n_ = sess.run(C+G, feed_dict={A:dA}, options=options, run_metadata=run_metadata)\n\nfetched_timeline = timeline.Timeline(run_metadata.step_stats)\nchrome_trace = fetched_timeline.generate_chrome_trace_format()\nwith open('timeline.json', 'w') as f:\n    f.write(chrome_trace)\n\nrun it and get timeline.json, and open it via chrome then get it:\n\nthose memcpy are obviously called by SVD. there is nothing else in the program.\nThen zoom in, we can find there is many small memcpy here", "body": "As another clear sample:\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nfrom tensorflow.python.client import timeline\r\n\r\noptions = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\r\nrun_metadata = tf.RunMetadata()\r\nsess = tf.Session()\r\n\r\nD = 1024\r\ndA = np.random.normal(size=(D,D))\r\nA = tf.placeholder(shape=(D,D),dtype=tf.float32)\r\n\r\nwith tf.device(\"/cpu:0\"):\r\n    C = tf.svd(A)\r\n\r\nwith tf.device(\"/gpu:0\"):\r\n    G = tf.svd(A)\r\n\r\n_ = sess.run(C+G, feed_dict={A:dA}, options=options, run_metadata=run_metadata)\r\n\r\nfetched_timeline = timeline.Timeline(run_metadata.step_stats)\r\nchrome_trace = fetched_timeline.generate_chrome_trace_format()\r\nwith open('timeline.json', 'w') as f:\r\n    f.write(chrome_trace)\r\n```\r\n\r\nrun it and get `timeline.json`, and open it via chrome then get it:\r\n\r\n![image](https://user-images.githubusercontent.com/11623447/31384419-8d85faae-ad84-11e7-91a2-7311bd228db8.png)\r\n\r\nthose memcpy are obviously called by SVD. there is nothing else in the program.\r\n\r\nThen zoom in, we can find there is many small memcpy here\r\n\r\n![image](https://user-images.githubusercontent.com/11623447/31384472-c5672c68-ad84-11e7-943f-e471cd2cf1ca.png)\r\n"}