{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23043", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23043/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23043/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23043/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23043", "id": 371099142, "node_id": "MDU6SXNzdWUzNzEwOTkxNDI=", "number": 23043, "title": "[Bug or Not?] Variable and VarHandleOp has different initial value in creating slots in ExponentialMovingAverage ", "user": {"login": "wangsiyu", "id": 5387343, "node_id": "MDQ6VXNlcjUzODczNDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5387343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wangsiyu", "html_url": "https://github.com/wangsiyu", "followers_url": "https://api.github.com/users/wangsiyu/followers", "following_url": "https://api.github.com/users/wangsiyu/following{/other_user}", "gists_url": "https://api.github.com/users/wangsiyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/wangsiyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangsiyu/subscriptions", "organizations_url": "https://api.github.com/users/wangsiyu/orgs", "repos_url": "https://api.github.com/users/wangsiyu/repos", "events_url": "https://api.github.com/users/wangsiyu/events{/privacy}", "received_events_url": "https://api.github.com/users/wangsiyu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-10-17T14:14:13Z", "updated_at": "2018-10-19T04:17:09Z", "closed_at": "2018-10-17T15:32:56Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: CentOS 7</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: None</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>:  master</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.15.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:  None</li>\n<li><strong>CUDA/cuDNN version</strong>: 7.0</li>\n<li><strong>GPU model and memory</strong>: None</li>\n<li><strong>Exact command to reproduce</strong>: None</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Variable and ResourceVariable has different initial value here. Is it a bug or expect action?</p>\n<pre><code>        # For variables: to lower communication bandwidth across devices we keep\n        # the moving averages on the same device as the variables. For other\n        # tensors, we rely on the existing device allocation mechanism.\n        with ops.init_scope():\n          if isinstance(var, variables.Variable):\n            avg = slot_creator.create_slot(var,\n                                           var.initialized_value(),\n                                           self.name,\n                                           colocate_with_primary=True)\n            # NOTE(mrry): We only add `tf.Variable` objects to the\n            # `MOVING_AVERAGE_VARIABLES` collection.\n            ops.add_to_collection(ops.GraphKeys.MOVING_AVERAGE_VARIABLES, var)\n          else:\n            avg = slot_creator.create_zeros_slot(\n                var,\n                self.name,\n                colocate_with_primary=(var.op.type in [\"Variable\",\n                                                       \"VariableV2\",\n                                                       \"VarHandleOp\"]))\n            if self._zero_debias:\n              zero_debias_true.add(avg)\n        self._averages[var] = avg\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): CentOS 7\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: None\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below):  master\nPython version: 2.7\nBazel version (if compiling from source): 0.15.0\nGCC/Compiler version (if compiling from source):  None\nCUDA/cuDNN version: 7.0\nGPU model and memory: None\nExact command to reproduce: None\n\nDescribe the problem\nVariable and ResourceVariable has different initial value here. Is it a bug or expect action?\n        # For variables: to lower communication bandwidth across devices we keep\n        # the moving averages on the same device as the variables. For other\n        # tensors, we rely on the existing device allocation mechanism.\n        with ops.init_scope():\n          if isinstance(var, variables.Variable):\n            avg = slot_creator.create_slot(var,\n                                           var.initialized_value(),\n                                           self.name,\n                                           colocate_with_primary=True)\n            # NOTE(mrry): We only add `tf.Variable` objects to the\n            # `MOVING_AVERAGE_VARIABLES` collection.\n            ops.add_to_collection(ops.GraphKeys.MOVING_AVERAGE_VARIABLES, var)\n          else:\n            avg = slot_creator.create_zeros_slot(\n                var,\n                self.name,\n                colocate_with_primary=(var.op.type in [\"Variable\",\n                                                       \"VariableV2\",\n                                                       \"VarHandleOp\"]))\n            if self._zero_debias:\n              zero_debias_true.add(avg)\n        self._averages[var] = avg", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: CentOS 7\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: None\r\n- **TensorFlow installed from (source or binary)**: source \r\n- **TensorFlow version (use command below)**:  master\r\n- **Python version**: 2.7\r\n- **Bazel version (if compiling from source)**: 0.15.0\r\n- **GCC/Compiler version (if compiling from source)**:  None\r\n- **CUDA/cuDNN version**: 7.0\r\n- **GPU model and memory**: None\r\n- **Exact command to reproduce**: None\r\n\r\n### Describe the problem\r\nVariable and ResourceVariable has different initial value here. Is it a bug or expect action?\r\n```\r\n        # For variables: to lower communication bandwidth across devices we keep\r\n        # the moving averages on the same device as the variables. For other\r\n        # tensors, we rely on the existing device allocation mechanism.\r\n        with ops.init_scope():\r\n          if isinstance(var, variables.Variable):\r\n            avg = slot_creator.create_slot(var,\r\n                                           var.initialized_value(),\r\n                                           self.name,\r\n                                           colocate_with_primary=True)\r\n            # NOTE(mrry): We only add `tf.Variable` objects to the\r\n            # `MOVING_AVERAGE_VARIABLES` collection.\r\n            ops.add_to_collection(ops.GraphKeys.MOVING_AVERAGE_VARIABLES, var)\r\n          else:\r\n            avg = slot_creator.create_zeros_slot(\r\n                var,\r\n                self.name,\r\n                colocate_with_primary=(var.op.type in [\"Variable\",\r\n                                                       \"VariableV2\",\r\n                                                       \"VarHandleOp\"]))\r\n            if self._zero_debias:\r\n              zero_debias_true.add(avg)\r\n        self._averages[var] = avg\r\n```\r\n \r\n"}