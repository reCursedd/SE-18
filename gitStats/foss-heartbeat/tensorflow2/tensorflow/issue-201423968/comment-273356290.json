{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/273356290", "html_url": "https://github.com/tensorflow/tensorflow/issues/6914#issuecomment-273356290", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6914", "id": 273356290, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzM1NjI5MA==", "user": {"login": "mkolod", "id": 476135, "node_id": "MDQ6VXNlcjQ3NjEzNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/476135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkolod", "html_url": "https://github.com/mkolod", "followers_url": "https://api.github.com/users/mkolod/followers", "following_url": "https://api.github.com/users/mkolod/following{/other_user}", "gists_url": "https://api.github.com/users/mkolod/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkolod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkolod/subscriptions", "organizations_url": "https://api.github.com/users/mkolod/orgs", "repos_url": "https://api.github.com/users/mkolod/repos", "events_url": "https://api.github.com/users/mkolod/events{/privacy}", "received_events_url": "https://api.github.com/users/mkolod/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-18T01:33:40Z", "updated_at": "2017-01-18T01:33:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> Here's another idea. The issue has to do more with Docker containers than with pip packages uploaded to pypi. The dev container build runs Bazel explicitly, while the non-dev container build pulls the pip package from pypi. Perhaps the builds can be set up in such a way that the non-dev container also builds from source and adds the compute capabilities mentioned by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9682398\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cliffwoolley\">@cliffwoolley</a>, while the pip build to be pushed to pypi is done separately, and constrains the compute capabilities so as to satisfy pypi's space limitations? That way, at least all Docker users would have more compute capabilities so as to limit the dependence on the JIT, and only bare-metal pip users would be affected by the JIT the first time on Pascal GPUs?  Just an idea.</p>", "body_text": "@vrv Here's another idea. The issue has to do more with Docker containers than with pip packages uploaded to pypi. The dev container build runs Bazel explicitly, while the non-dev container build pulls the pip package from pypi. Perhaps the builds can be set up in such a way that the non-dev container also builds from source and adds the compute capabilities mentioned by @cliffwoolley, while the pip build to be pushed to pypi is done separately, and constrains the compute capabilities so as to satisfy pypi's space limitations? That way, at least all Docker users would have more compute capabilities so as to limit the dependence on the JIT, and only bare-metal pip users would be affected by the JIT the first time on Pascal GPUs?  Just an idea.", "body": "@vrv Here's another idea. The issue has to do more with Docker containers than with pip packages uploaded to pypi. The dev container build runs Bazel explicitly, while the non-dev container build pulls the pip package from pypi. Perhaps the builds can be set up in such a way that the non-dev container also builds from source and adds the compute capabilities mentioned by @cliffwoolley, while the pip build to be pushed to pypi is done separately, and constrains the compute capabilities so as to satisfy pypi's space limitations? That way, at least all Docker users would have more compute capabilities so as to limit the dependence on the JIT, and only bare-metal pip users would be affected by the JIT the first time on Pascal GPUs?  Just an idea."}