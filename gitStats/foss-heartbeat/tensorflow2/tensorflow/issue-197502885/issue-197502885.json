{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6492", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6492/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6492/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6492/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6492", "id": 197502885, "node_id": "MDU6SXNzdWUxOTc1MDI4ODU=", "number": 6492, "title": "Error performing lstm using BasicLSTMCell in v0.12.0", "user": {"login": "shashank879", "id": 9903431, "node_id": "MDQ6VXNlcjk5MDM0MzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9903431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shashank879", "html_url": "https://github.com/shashank879", "followers_url": "https://api.github.com/users/shashank879/followers", "following_url": "https://api.github.com/users/shashank879/following{/other_user}", "gists_url": "https://api.github.com/users/shashank879/gists{/gist_id}", "starred_url": "https://api.github.com/users/shashank879/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shashank879/subscriptions", "organizations_url": "https://api.github.com/users/shashank879/orgs", "repos_url": "https://api.github.com/users/shashank879/repos", "events_url": "https://api.github.com/users/shashank879/events{/privacy}", "received_events_url": "https://api.github.com/users/shashank879/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-25T14:19:51Z", "updated_at": "2017-01-06T07:13:38Z", "closed_at": "2017-01-05T21:46:37Z", "author_association": "NONE", "body_html": "<p>Hey Guys, I have v0.12.0 installed on my system and I'm facing some issue while running a simple LSTM. While trying to get it to work I have even reduced my code to the examples at <a href=\"https://www.tensorflow.org/tutorials/recurrent/\" rel=\"nofollow\">https://www.tensorflow.org/tutorials/recurrent/</a>, but still facing the same issue. I'm attaching snippets from my code and the error log. The \"lstm\" function takes input from a convolving function that produces latent representations (size: 1024) of a sequence of 40 frames.</p>\n<div class=\"highlight highlight-source-python\"><pre>frames_batch_size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">40</span>\nbatch_size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">20</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">lstm</span>(<span class=\"pl-smi\">x</span>, <span class=\"pl-smi\">state_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1024</span>, <span class=\"pl-smi\">initial_state</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lstm<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> lstm_scope:\n        <span class=\"pl-k\">if</span> reuse:\n            tf.get_variable_scope().reuse_variables()\n        \n        lstm_cell <span class=\"pl-k\">=</span> tf.nn.rnn_cell.BasicLSTMCell(state_size)\n        state <span class=\"pl-k\">=</span> initial_state <span class=\"pl-k\">if</span> initial_state <span class=\"pl-k\">else</span> tf.zeros([batch_size, state_size], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lstm_state<span class=\"pl-pds\">\"</span></span>)\n        \n        <span class=\"pl-c1\">print</span>(x.name, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-<span class=\"pl-pds\">\"</span></span>, x.get_shape())\n        <span class=\"pl-c1\">print</span>(state.name, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-<span class=\"pl-pds\">\"</span></span>, state.get_shape())\n\n        <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(frames_batch_size):\n            output, state <span class=\"pl-k\">=</span> lstm_cell(x[:, i], state)\n            \n        <span class=\"pl-c1\">print</span>(output.name, output.get_shape())\n    <span class=\"pl-k\">return</span> output</pre></div>\n<p>The shapes of tensors as per output are:</p>\n<pre><code>generator/convolution/conv_output:0 - (20, 40, 1024)\ngenerator/lstm/lstm_state:0 - (20, 1024)\n</code></pre>\n<p>And the snippet of the error log is:</p>\n<pre><code>&lt;ipython-input-13-35b652ff4acc&gt; in lstm(x, state_size, initial_state, reuse)\n     10 \n     11         for i in range(frames_batch_size):\n---&gt; 12             output, state = lstm_cell(x[:, i], state)\n     13 \n     14         print(output.name, output.get_shape())\n\n/usr/local/lib/python3.5/site-packages/tensorflow/python/ops/rnn_cell.py in __call__(self, inputs, state, scope)\n    306       # Parameters of gates are concatenated into one multiply for efficiency.\n    307       if self._state_is_tuple:\n--&gt; 308         c, h = state\n    309       else:\n    310         c, h = array_ops.split(1, 2, state)\n\n/usr/local/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in __iter__(self)\n    508       TypeError: when invoked.\n    509     \"\"\"\n--&gt; 510     raise TypeError(\"'Tensor' object is not iterable.\")\n    511 \n    512   def __bool__(self):\n\nTypeError: 'Tensor' object is not iterable.\n</code></pre>", "body_text": "Hey Guys, I have v0.12.0 installed on my system and I'm facing some issue while running a simple LSTM. While trying to get it to work I have even reduced my code to the examples at https://www.tensorflow.org/tutorials/recurrent/, but still facing the same issue. I'm attaching snippets from my code and the error log. The \"lstm\" function takes input from a convolving function that produces latent representations (size: 1024) of a sequence of 40 frames.\nframes_batch_size = 40\nbatch_size = 20\n\ndef lstm(x, state_size=1024, initial_state=None, reuse=False):\n    with tf.variable_scope(\"lstm\") as lstm_scope:\n        if reuse:\n            tf.get_variable_scope().reuse_variables()\n        \n        lstm_cell = tf.nn.rnn_cell.BasicLSTMCell(state_size)\n        state = initial_state if initial_state else tf.zeros([batch_size, state_size], name=\"lstm_state\")\n        \n        print(x.name, \"-\", x.get_shape())\n        print(state.name, \"-\", state.get_shape())\n\n        for i in range(frames_batch_size):\n            output, state = lstm_cell(x[:, i], state)\n            \n        print(output.name, output.get_shape())\n    return output\nThe shapes of tensors as per output are:\ngenerator/convolution/conv_output:0 - (20, 40, 1024)\ngenerator/lstm/lstm_state:0 - (20, 1024)\n\nAnd the snippet of the error log is:\n<ipython-input-13-35b652ff4acc> in lstm(x, state_size, initial_state, reuse)\n     10 \n     11         for i in range(frames_batch_size):\n---> 12             output, state = lstm_cell(x[:, i], state)\n     13 \n     14         print(output.name, output.get_shape())\n\n/usr/local/lib/python3.5/site-packages/tensorflow/python/ops/rnn_cell.py in __call__(self, inputs, state, scope)\n    306       # Parameters of gates are concatenated into one multiply for efficiency.\n    307       if self._state_is_tuple:\n--> 308         c, h = state\n    309       else:\n    310         c, h = array_ops.split(1, 2, state)\n\n/usr/local/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in __iter__(self)\n    508       TypeError: when invoked.\n    509     \"\"\"\n--> 510     raise TypeError(\"'Tensor' object is not iterable.\")\n    511 \n    512   def __bool__(self):\n\nTypeError: 'Tensor' object is not iterable.", "body": "Hey Guys, I have v0.12.0 installed on my system and I'm facing some issue while running a simple LSTM. While trying to get it to work I have even reduced my code to the examples at https://www.tensorflow.org/tutorials/recurrent/, but still facing the same issue. I'm attaching snippets from my code and the error log. The \"lstm\" function takes input from a convolving function that produces latent representations (size: 1024) of a sequence of 40 frames.\r\n\r\n```python\r\nframes_batch_size = 40\r\nbatch_size = 20\r\n\r\ndef lstm(x, state_size=1024, initial_state=None, reuse=False):\r\n    with tf.variable_scope(\"lstm\") as lstm_scope:\r\n        if reuse:\r\n            tf.get_variable_scope().reuse_variables()\r\n        \r\n        lstm_cell = tf.nn.rnn_cell.BasicLSTMCell(state_size)\r\n        state = initial_state if initial_state else tf.zeros([batch_size, state_size], name=\"lstm_state\")\r\n        \r\n        print(x.name, \"-\", x.get_shape())\r\n        print(state.name, \"-\", state.get_shape())\r\n\r\n        for i in range(frames_batch_size):\r\n            output, state = lstm_cell(x[:, i], state)\r\n            \r\n        print(output.name, output.get_shape())\r\n    return output\r\n```\r\n\r\nThe shapes of tensors as per output are:\r\n```\r\ngenerator/convolution/conv_output:0 - (20, 40, 1024)\r\ngenerator/lstm/lstm_state:0 - (20, 1024)\r\n```\r\n\r\nAnd the snippet of the error log is:\r\n```\r\n<ipython-input-13-35b652ff4acc> in lstm(x, state_size, initial_state, reuse)\r\n     10 \r\n     11         for i in range(frames_batch_size):\r\n---> 12             output, state = lstm_cell(x[:, i], state)\r\n     13 \r\n     14         print(output.name, output.get_shape())\r\n\r\n/usr/local/lib/python3.5/site-packages/tensorflow/python/ops/rnn_cell.py in __call__(self, inputs, state, scope)\r\n    306       # Parameters of gates are concatenated into one multiply for efficiency.\r\n    307       if self._state_is_tuple:\r\n--> 308         c, h = state\r\n    309       else:\r\n    310         c, h = array_ops.split(1, 2, state)\r\n\r\n/usr/local/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in __iter__(self)\r\n    508       TypeError: when invoked.\r\n    509     \"\"\"\r\n--> 510     raise TypeError(\"'Tensor' object is not iterable.\")\r\n    511 \r\n    512   def __bool__(self):\r\n\r\nTypeError: 'Tensor' object is not iterable.\r\n```"}