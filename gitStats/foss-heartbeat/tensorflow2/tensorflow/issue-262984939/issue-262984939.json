{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13498", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13498/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13498/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13498/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13498", "id": 262984939, "node_id": "MDU6SXNzdWUyNjI5ODQ5Mzk=", "number": 13498, "title": "Problem with \"AddControlInput\" in python_api.h", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-10-05T02:12:32Z", "updated_at": "2018-01-18T21:02:01Z", "closed_at": "2018-01-18T21:02:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88808\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/skye\">@skye</a> I'm observing an issue with <code>AddControlInput</code> in <code>python_api.h</code>. It seems to not be working for me actually and I'm not sure why. Everything is ok if I add the control dependency during op creation. However, if I add it right after, it's not enforced during execution. A simple example is creating a <code>switch</code> op, creating two constant ops and adding one control dependency for each on each switch output, and then feeding these two constant ops into a <code>merge</code>op. The result will be whichever constant op was fed first into the merge op (i.e., the control dependencies are not satisfied and both ops are executed). If I add the control dependency during op construction, all is good.</p>\n<p>Note that the control input does show up in the <code>GraphDef</code> that I generated after the call. It's simply not enforced during execution.</p>\n<p>Do you have any idea why that might be happening? I am aware that this is not part of the public API and thus is not stable, but it is still unexpected behavior. I am using that in my implementation of control flow ops and gradients (I ended up re-implementing it based on the Python version because I depend on it and the C++ functionality is currently very limited -- I'll update on this later on, once I release it).</p>", "body_text": "@asimshankar @skye I'm observing an issue with AddControlInput in python_api.h. It seems to not be working for me actually and I'm not sure why. Everything is ok if I add the control dependency during op creation. However, if I add it right after, it's not enforced during execution. A simple example is creating a switch op, creating two constant ops and adding one control dependency for each on each switch output, and then feeding these two constant ops into a mergeop. The result will be whichever constant op was fed first into the merge op (i.e., the control dependencies are not satisfied and both ops are executed). If I add the control dependency during op construction, all is good.\nNote that the control input does show up in the GraphDef that I generated after the call. It's simply not enforced during execution.\nDo you have any idea why that might be happening? I am aware that this is not part of the public API and thus is not stable, but it is still unexpected behavior. I am using that in my implementation of control flow ops and gradients (I ended up re-implementing it based on the Python version because I depend on it and the C++ functionality is currently very limited -- I'll update on this later on, once I release it).", "body": "@asimshankar @skye I'm observing an issue with `AddControlInput` in `python_api.h`. It seems to not be working for me actually and I'm not sure why. Everything is ok if I add the control dependency during op creation. However, if I add it right after, it's not enforced during execution. A simple example is creating a `switch` op, creating two constant ops and adding one control dependency for each on each switch output, and then feeding these two constant ops into a `merge`op. The result will be whichever constant op was fed first into the merge op (i.e., the control dependencies are not satisfied and both ops are executed). If I add the control dependency during op construction, all is good.\r\n\r\nNote that the control input does show up in the `GraphDef` that I generated after the call. It's simply not enforced during execution.\r\n\r\nDo you have any idea why that might be happening? I am aware that this is not part of the public API and thus is not stable, but it is still unexpected behavior. I am using that in my implementation of control flow ops and gradients (I ended up re-implementing it based on the Python version because I depend on it and the C++ functionality is currently very limited -- I'll update on this later on, once I release it)."}