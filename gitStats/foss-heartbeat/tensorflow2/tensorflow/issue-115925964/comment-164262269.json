{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/164262269", "html_url": "https://github.com/tensorflow/tensorflow/issues/17#issuecomment-164262269", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17", "id": 164262269, "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDI2MjI2OQ==", "user": {"login": "4creators", "id": 801959, "node_id": "MDQ6VXNlcjgwMTk1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/801959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4creators", "html_url": "https://github.com/4creators", "followers_url": "https://api.github.com/users/4creators/followers", "following_url": "https://api.github.com/users/4creators/following{/other_user}", "gists_url": "https://api.github.com/users/4creators/gists{/gist_id}", "starred_url": "https://api.github.com/users/4creators/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4creators/subscriptions", "organizations_url": "https://api.github.com/users/4creators/orgs", "repos_url": "https://api.github.com/users/4creators/repos", "events_url": "https://api.github.com/users/4creators/events{/privacy}", "received_events_url": "https://api.github.com/users/4creators/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-13T14:06:26Z", "updated_at": "2015-12-13T14:07:14Z", "author_association": "NONE", "body_html": "<p>Perhaps using Clang frontend with VC++ CodeGen would be a fastest pathway to get working Windows builds -&gt; <a href=\"http://blogs.msdn.com/b/vcblog/archive/2015/12/04/introducing-clang-with-microsoft-codegen-in-vs-2015-update-1.aspx\" rel=\"nofollow\">Clang with Microsoft CodeGen in VS 2015 Update 1</a>. Project was designed to provide consistently working toolchain for cross platform   builds of code primarily targeting windows, nonetheless scenario in which *nix code is compiled on windows could be equally interesting. MSFT C++ team states that code they write is contributed back to LLVM project so it should allow for fast and joint work on getting good cross platform support.</p>", "body_text": "Perhaps using Clang frontend with VC++ CodeGen would be a fastest pathway to get working Windows builds -> Clang with Microsoft CodeGen in VS 2015 Update 1. Project was designed to provide consistently working toolchain for cross platform   builds of code primarily targeting windows, nonetheless scenario in which *nix code is compiled on windows could be equally interesting. MSFT C++ team states that code they write is contributed back to LLVM project so it should allow for fast and joint work on getting good cross platform support.", "body": "Perhaps using Clang frontend with VC++ CodeGen would be a fastest pathway to get working Windows builds -> [Clang with Microsoft CodeGen in VS 2015 Update 1](http://blogs.msdn.com/b/vcblog/archive/2015/12/04/introducing-clang-with-microsoft-codegen-in-vs-2015-update-1.aspx). Project was designed to provide consistently working toolchain for cross platform   builds of code primarily targeting windows, nonetheless scenario in which *nix code is compiled on windows could be equally interesting. MSFT C++ team states that code they write is contributed back to LLVM project so it should allow for fast and joint work on getting good cross platform support. \n"}