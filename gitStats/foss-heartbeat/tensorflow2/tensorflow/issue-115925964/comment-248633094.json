{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/248633094", "html_url": "https://github.com/tensorflow/tensorflow/issues/17#issuecomment-248633094", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17", "id": 248633094, "node_id": "MDEyOklzc3VlQ29tbWVudDI0ODYzMzA5NA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-21T14:40:48Z", "updated_at": "2016-09-21T14:40:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for all of the interest in TensorFlow on Windows! We're making progress on two main fronts:</p>\n<ol>\n<li>Adapting TensorFlow's Bazel <code>BUILD</code> files to work on Windows. You may have seen some recent pull requests from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4171702\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/meteorcloudy\">@meteorcloudy</a> in that direction (like <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"177735966\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4449\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/4449/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/4449\">#4449</a>), and our eventual plan is to have full support for building TensorFlow, using Bazel, on Windows.</li>\n<li>Modifying the TensorFlow runtime to build with the Visual C++ 2015 compiler. I've been working on this effort, and the diff between HEAD and my working branch is getting smaller every day. For now, I'm using CMake to build TensorFlow using Visual Studio/MSBuild, but I plan to switch to Bazel when the <code>BUILD</code> files work cross-platform.</li>\n</ol>\n<p>We expect to make an announcement soon, with a binary PIP package and instructions for building TensorFlow on Windows. In the meantime, we will update this issue when we have news to share.</p>\n<hr>\n<p>Responding to the <a href=\"https://github.com/tensorflow/tensorflow/issues/17#issuecomment-239970521\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/17/hovercard\">specific questions</a> from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=12298573\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kestrelm\">@kestrelm</a>:</p>\n<ol>\n<li>I am currently using CMake to generate a VS solution with multiple projects, and we'll merge this as part of item (2) above.</li>\n<li>At the very least, we can generate a Python extension DLL containing the runtime and all kernels (the equivalent of <code>tensorflow/python/_pywrap_tensorflow.so</code>), and provide instructions for building a statically linked C++ binary (the equivalent of <code>tensorflow/cc/tutorials/example_trainer.cc</code>).</li>\n<li>We can easily make a version of the runtime with those features (something like the Android subset of inference-related kernels in a DLL behind the C API), although it probably won't be part of the initial release. It will however be possible to modify the build files to make a target that has these properties, and I'll be happy to help anyone who's trying to do that.</li>\n</ol>", "body_text": "Thanks for all of the interest in TensorFlow on Windows! We're making progress on two main fronts:\n\nAdapting TensorFlow's Bazel BUILD files to work on Windows. You may have seen some recent pull requests from @meteorcloudy in that direction (like #4449), and our eventual plan is to have full support for building TensorFlow, using Bazel, on Windows.\nModifying the TensorFlow runtime to build with the Visual C++ 2015 compiler. I've been working on this effort, and the diff between HEAD and my working branch is getting smaller every day. For now, I'm using CMake to build TensorFlow using Visual Studio/MSBuild, but I plan to switch to Bazel when the BUILD files work cross-platform.\n\nWe expect to make an announcement soon, with a binary PIP package and instructions for building TensorFlow on Windows. In the meantime, we will update this issue when we have news to share.\n\nResponding to the specific questions from @kestrelm:\n\nI am currently using CMake to generate a VS solution with multiple projects, and we'll merge this as part of item (2) above.\nAt the very least, we can generate a Python extension DLL containing the runtime and all kernels (the equivalent of tensorflow/python/_pywrap_tensorflow.so), and provide instructions for building a statically linked C++ binary (the equivalent of tensorflow/cc/tutorials/example_trainer.cc).\nWe can easily make a version of the runtime with those features (something like the Android subset of inference-related kernels in a DLL behind the C API), although it probably won't be part of the initial release. It will however be possible to modify the build files to make a target that has these properties, and I'll be happy to help anyone who's trying to do that.", "body": "Thanks for all of the interest in TensorFlow on Windows! We're making progress on two main fronts:\n1. Adapting TensorFlow's Bazel `BUILD` files to work on Windows. You may have seen some recent pull requests from @meteorcloudy in that direction (like #4449), and our eventual plan is to have full support for building TensorFlow, using Bazel, on Windows.\n2. Modifying the TensorFlow runtime to build with the Visual C++ 2015 compiler. I've been working on this effort, and the diff between HEAD and my working branch is getting smaller every day. For now, I'm using CMake to build TensorFlow using Visual Studio/MSBuild, but I plan to switch to Bazel when the `BUILD` files work cross-platform.\n\nWe expect to make an announcement soon, with a binary PIP package and instructions for building TensorFlow on Windows. In the meantime, we will update this issue when we have news to share.\n\n---\n\nResponding to the [specific questions](https://github.com/tensorflow/tensorflow/issues/17#issuecomment-239970521) from @kestrelm:\n1. I am currently using CMake to generate a VS solution with multiple projects, and we'll merge this as part of item (2) above.\n2. At the very least, we can generate a Python extension DLL containing the runtime and all kernels (the equivalent of `tensorflow/python/_pywrap_tensorflow.so`), and provide instructions for building a statically linked C++ binary (the equivalent of `tensorflow/cc/tutorials/example_trainer.cc`).\n3. We can easily make a version of the runtime with those features (something like the Android subset of inference-related kernels in a DLL behind the C API), although it probably won't be part of the initial release. It will however be possible to modify the build files to make a target that has these properties, and I'll be happy to help anyone who's trying to do that.\n"}