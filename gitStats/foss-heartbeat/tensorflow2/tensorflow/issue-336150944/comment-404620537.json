{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/404620537", "html_url": "https://github.com/tensorflow/tensorflow/issues/20338#issuecomment-404620537", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20338", "id": 404620537, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDYyMDUzNw==", "user": {"login": "raymond-yuan", "id": 17325195, "node_id": "MDQ6VXNlcjE3MzI1MTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/17325195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raymond-yuan", "html_url": "https://github.com/raymond-yuan", "followers_url": "https://api.github.com/users/raymond-yuan/followers", "following_url": "https://api.github.com/users/raymond-yuan/following{/other_user}", "gists_url": "https://api.github.com/users/raymond-yuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/raymond-yuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raymond-yuan/subscriptions", "organizations_url": "https://api.github.com/users/raymond-yuan/orgs", "repos_url": "https://api.github.com/users/raymond-yuan/repos", "events_url": "https://api.github.com/users/raymond-yuan/events{/privacy}", "received_events_url": "https://api.github.com/users/raymond-yuan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-12T19:14:42Z", "updated_at": "2018-07-12T19:14:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=12476624\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/David-Mao\">@David-Mao</a> there's an issue with how the output shapes are used right now and is being looked at. However, the workaround right now is to simply wrap your output shape with a TensorShape, e.g. doing this will work.</p>\n<pre><code>    class SubModel(keras.Model):\n\n      def __init__(self):\n        super(SubModel, self).__init__()\n        self.layer = keras.layers.Dense(3)\n\n      def call(self, inputs):\n        return self.layer(inputs)\n\n      def compute_output_shape(self, input_shape):\n        # wrap (input_shape[0], 3, 3) with tensorshape \n        return tf.TensorShape((input_shape[0], 3, 3))\n\n    def func_model(input_shape):\n      func_input = keras.layers.Input(shape=input_shape)\n      m = SubModel()\n      output = m(func_input)\n      return keras.Model(func_input, output)\n\n    input_shape = (3, 3)\n    m = func_model(input_shape)\n    input_vals = tf.ones((32,) + input_shape)\n    m(input_vals)\n</code></pre>", "body_text": "@David-Mao there's an issue with how the output shapes are used right now and is being looked at. However, the workaround right now is to simply wrap your output shape with a TensorShape, e.g. doing this will work.\n    class SubModel(keras.Model):\n\n      def __init__(self):\n        super(SubModel, self).__init__()\n        self.layer = keras.layers.Dense(3)\n\n      def call(self, inputs):\n        return self.layer(inputs)\n\n      def compute_output_shape(self, input_shape):\n        # wrap (input_shape[0], 3, 3) with tensorshape \n        return tf.TensorShape((input_shape[0], 3, 3))\n\n    def func_model(input_shape):\n      func_input = keras.layers.Input(shape=input_shape)\n      m = SubModel()\n      output = m(func_input)\n      return keras.Model(func_input, output)\n\n    input_shape = (3, 3)\n    m = func_model(input_shape)\n    input_vals = tf.ones((32,) + input_shape)\n    m(input_vals)", "body": "@David-Mao there's an issue with how the output shapes are used right now and is being looked at. However, the workaround right now is to simply wrap your output shape with a TensorShape, e.g. doing this will work. \r\n\r\n```\r\n    class SubModel(keras.Model):\r\n\r\n      def __init__(self):\r\n        super(SubModel, self).__init__()\r\n        self.layer = keras.layers.Dense(3)\r\n\r\n      def call(self, inputs):\r\n        return self.layer(inputs)\r\n\r\n      def compute_output_shape(self, input_shape):\r\n        # wrap (input_shape[0], 3, 3) with tensorshape \r\n        return tf.TensorShape((input_shape[0], 3, 3))\r\n\r\n    def func_model(input_shape):\r\n      func_input = keras.layers.Input(shape=input_shape)\r\n      m = SubModel()\r\n      output = m(func_input)\r\n      return keras.Model(func_input, output)\r\n\r\n    input_shape = (3, 3)\r\n    m = func_model(input_shape)\r\n    input_vals = tf.ones((32,) + input_shape)\r\n    m(input_vals)\r\n```"}