{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/401230024", "html_url": "https://github.com/tensorflow/tensorflow/issues/20338#issuecomment-401230024", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20338", "id": 401230024, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTIzMDAyNA==", "user": {"login": "David-Mao", "id": 12476624, "node_id": "MDQ6VXNlcjEyNDc2NjI0", "avatar_url": "https://avatars3.githubusercontent.com/u/12476624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/David-Mao", "html_url": "https://github.com/David-Mao", "followers_url": "https://api.github.com/users/David-Mao/followers", "following_url": "https://api.github.com/users/David-Mao/following{/other_user}", "gists_url": "https://api.github.com/users/David-Mao/gists{/gist_id}", "starred_url": "https://api.github.com/users/David-Mao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/David-Mao/subscriptions", "organizations_url": "https://api.github.com/users/David-Mao/orgs", "repos_url": "https://api.github.com/users/David-Mao/repos", "events_url": "https://api.github.com/users/David-Mao/events{/privacy}", "received_events_url": "https://api.github.com/users/David-Mao/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-29T02:36:47Z", "updated_at": "2018-06-29T02:36:47Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=32556631\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/anj-s\">@anj-s</a><br>\nYes in my particular case there is a workaround. But in general it's quite possible that we have to use a subclass model. For example, I might need to use a 3rd party model written by others as a part in my model,  which I cannot control how they wrote.</p>\n<p>As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> mentioned, the ideal vision is that Keras API should work smoothly with or without eager execution enabled. It would be very frustrated for a user to tell (and remember) in which case which API is working or not.</p>\n<p>I just tested  the following 4 possible use cases (all in eager execution):</p>\n<p>A) A model written as subclass calling another model written as subclass<br>\nB) A model written by functional API calling another model written by functional API<br>\nC) A model written as subclass calling another model written by functional API<br>\nD) A model written by functional API calling another model written as subclass</p>\n<p>It seems A, B, C work but only D doesn't. It's quite unexpected and confusing.</p>", "body_text": "@anj-s\nYes in my particular case there is a workaround. But in general it's quite possible that we have to use a subclass model. For example, I might need to use a 3rd party model written by others as a part in my model,  which I cannot control how they wrote.\nAs @asimshankar mentioned, the ideal vision is that Keras API should work smoothly with or without eager execution enabled. It would be very frustrated for a user to tell (and remember) in which case which API is working or not.\nI just tested  the following 4 possible use cases (all in eager execution):\nA) A model written as subclass calling another model written as subclass\nB) A model written by functional API calling another model written by functional API\nC) A model written as subclass calling another model written by functional API\nD) A model written by functional API calling another model written as subclass\nIt seems A, B, C work but only D doesn't. It's quite unexpected and confusing.", "body": "@anj-s \r\nYes in my particular case there is a workaround. But in general it's quite possible that we have to use a subclass model. For example, I might need to use a 3rd party model written by others as a part in my model,  which I cannot control how they wrote.\r\n\r\nAs @asimshankar mentioned, the ideal vision is that Keras API should work smoothly with or without eager execution enabled. It would be very frustrated for a user to tell (and remember) in which case which API is working or not. \r\n\r\nI just tested  the following 4 possible use cases (all in eager execution):\r\n\r\nA) A model written as subclass calling another model written as subclass\r\nB) A model written by functional API calling another model written by functional API\r\nC) A model written as subclass calling another model written by functional API\r\nD) A model written by functional API calling another model written as subclass\r\n\r\nIt seems A, B, C work but only D doesn't. It's quite unexpected and confusing.\r\n"}