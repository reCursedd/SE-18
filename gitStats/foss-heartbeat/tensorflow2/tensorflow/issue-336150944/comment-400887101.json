{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/400887101", "html_url": "https://github.com/tensorflow/tensorflow/issues/20338#issuecomment-400887101", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20338", "id": 400887101, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDg4NzEwMQ==", "user": {"login": "David-Mao", "id": 12476624, "node_id": "MDQ6VXNlcjEyNDc2NjI0", "avatar_url": "https://avatars3.githubusercontent.com/u/12476624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/David-Mao", "html_url": "https://github.com/David-Mao", "followers_url": "https://api.github.com/users/David-Mao/followers", "following_url": "https://api.github.com/users/David-Mao/following{/other_user}", "gists_url": "https://api.github.com/users/David-Mao/gists{/gist_id}", "starred_url": "https://api.github.com/users/David-Mao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/David-Mao/subscriptions", "organizations_url": "https://api.github.com/users/David-Mao/orgs", "repos_url": "https://api.github.com/users/David-Mao/repos", "events_url": "https://api.github.com/users/David-Mao/events{/privacy}", "received_events_url": "https://api.github.com/users/David-Mao/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-28T02:03:05Z", "updated_at": "2018-06-28T17:36:09Z", "author_association": "NONE", "body_html": "<p>I would like to explain on why I need the functional API. I actually prefer the model subclassing API, but it seems to have a problem: it cannot hold multiple layers defined by a loop. Say I would like to have a Model that contains 20 same layers with different weights, and I cannot use <code>Sequential()</code> model because my layer is a non-trivial one with multiple inputs. For example my model is something like:</p>\n<pre><code>class MyModel(tf.keras.Model):\n    def __init__(self):\n        super(MyModel, self).__init__()\n        self.layers = []\n        for i in range(20):\n            self.layers.append(MyLayer())\n    def call(self, inputs):\n        x = inputs[0]\n        y = inputs[1]\n        for i in range(20):\n            x = self.layers[i](x, y)\n        return x\n</code></pre>\n<p>This model would not work correctly. In fact <code>MyModel().variables</code> would give an empty list. Apparently Keras is not smart enough to recognize the list member containing layers. (The <code>call()</code> method actually works, but others, e.g. <code>Save()</code> won't work.) So in this case I have to use the function API to define such a model (or I will need to repeat one same line 20 times in the code. Edit: as discussed below, we can also use <code>setattr</code> here. )</p>", "body_text": "I would like to explain on why I need the functional API. I actually prefer the model subclassing API, but it seems to have a problem: it cannot hold multiple layers defined by a loop. Say I would like to have a Model that contains 20 same layers with different weights, and I cannot use Sequential() model because my layer is a non-trivial one with multiple inputs. For example my model is something like:\nclass MyModel(tf.keras.Model):\n    def __init__(self):\n        super(MyModel, self).__init__()\n        self.layers = []\n        for i in range(20):\n            self.layers.append(MyLayer())\n    def call(self, inputs):\n        x = inputs[0]\n        y = inputs[1]\n        for i in range(20):\n            x = self.layers[i](x, y)\n        return x\n\nThis model would not work correctly. In fact MyModel().variables would give an empty list. Apparently Keras is not smart enough to recognize the list member containing layers. (The call() method actually works, but others, e.g. Save() won't work.) So in this case I have to use the function API to define such a model (or I will need to repeat one same line 20 times in the code. Edit: as discussed below, we can also use setattr here. )", "body": "I would like to explain on why I need the functional API. I actually prefer the model subclassing API, but it seems to have a problem: it cannot hold multiple layers defined by a loop. Say I would like to have a Model that contains 20 same layers with different weights, and I cannot use `Sequential()` model because my layer is a non-trivial one with multiple inputs. For example my model is something like:\r\n```\r\nclass MyModel(tf.keras.Model):\r\n    def __init__(self):\r\n        super(MyModel, self).__init__()\r\n        self.layers = []\r\n        for i in range(20):\r\n            self.layers.append(MyLayer())\r\n    def call(self, inputs):\r\n        x = inputs[0]\r\n        y = inputs[1]\r\n        for i in range(20):\r\n            x = self.layers[i](x, y)\r\n        return x\r\n```\r\nThis model would not work correctly. In fact `MyModel().variables` would give an empty list. Apparently Keras is not smart enough to recognize the list member containing layers. (The `call()` method actually works, but others, e.g. `Save()` won't work.) So in this case I have to use the function API to define such a model (or I will need to repeat one same line 20 times in the code. Edit: as discussed below, we can also use `setattr` here. )"}