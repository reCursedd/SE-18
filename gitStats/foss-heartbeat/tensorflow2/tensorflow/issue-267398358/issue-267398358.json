{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13883", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13883/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13883/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13883/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13883", "id": 267398358, "node_id": "MDU6SXNzdWUyNjczOTgzNTg=", "number": 13883, "title": "Why do custom read op only works on test_session", "user": {"login": "littleDing", "id": 882790, "node_id": "MDQ6VXNlcjg4Mjc5MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/882790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/littleDing", "html_url": "https://github.com/littleDing", "followers_url": "https://api.github.com/users/littleDing/followers", "following_url": "https://api.github.com/users/littleDing/following{/other_user}", "gists_url": "https://api.github.com/users/littleDing/gists{/gist_id}", "starred_url": "https://api.github.com/users/littleDing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/littleDing/subscriptions", "organizations_url": "https://api.github.com/users/littleDing/orgs", "repos_url": "https://api.github.com/users/littleDing/repos", "events_url": "https://api.github.com/users/littleDing/events{/privacy}", "received_events_url": "https://api.github.com/users/littleDing/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-10-21T17:21:08Z", "updated_at": "2017-10-23T14:48:37Z", "closed_at": "2017-10-23T14:48:36Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nNO</p>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 16.04</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>:<br>\npip install tensorflow</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>:<br>\n('v1.3.0-rc2-20-g0787eee', '1.3.0')</p>\n</li>\n<li>\n<p><strong>Python version</strong>:<br>\nPython 2.7.12 from anaconda</p>\n</li>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:<br>\nI'm using a cpu only tensorflow.</p>\n</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>I wrote an custom kernel op in tensorflow for reading csv format data.</p>\n<p>It works just fine in the TestCase with the\u00a0sess\u00a0object return by\u00a0test_session()\u00a0function.</p>\n<p>When I turn to normal codes, the reader op returns the same result every time. Then I put some debug printing at the beginning of the\u00a0MyOp:Compute\u00a0function. It seems like after the first run, the\u00a0sess.run(myop)\u00a0never calls the\u00a0MyOp:Compute\u00a0function at all.</p>\n<p>Then I return to my test cases, if I replace the session object with an\u00a0tf.Session()\u00a0instead of\u00a0self.test_session(), it failed the same way.</p>\n<h3>Source code / logs</h3>\n<p>to share more details, here's my mini demo codes: <a href=\"https://github.com/littleDing/mini_csv_reader\">https://github.com/littleDing/mini_csv_reader</a></p>\n<p>major codes in test cases</p>\n<pre><code>def testSimple(self):\n  input_data_schema, feas, batch_size = self.get_simple_format()\n  iter_op = ops.csv_iter('./sample_data.txt', input_data_schema, feas, batch_size=batch_size, label='label2')\n  with self.test_session() as sess:\n    label,sign = sess.run(iter_op)\n    print label\n\n    self.assertAllEqual(label.shape, [batch_size])\n    self.assertAllEqual(sign.shape, [batch_size, len(feas)])\n    self.assertAllEqual(sum(label), 2)\n    self.assertAllEqual(sign[0,:], [7,0,4,1,1,1,5,9,8])\n\n    label,sign = sess.run(iter_op)\n    self.assertAllEqual(label.shape, [batch_size])\n    self.assertAllEqual(sign.shape, [batch_size, len(feas)])\n    self.assertAllEqual(sum(label), 1)\n    self.assertAllEqual(sign[0,:], [9,9,3,1,1,1,5,4,8])\n</code></pre>\n<p>major codes in normal session call:</p>\n<pre><code>def testing_tf():\n    path = './sample_data.txt'\n    input_data_schema, feas, batch_size = get_simple_format()\n    with tf.device('/cpu:0'):\n        n_data_op = tf.placeholder(dtype=tf.float32)\n        iter_op = ops.csv_iter(path, input_data_schema, feas, batch_size=batch_size, label='label2') \n        init_op = [tf.global_variables_initializer(), tf.local_variables_initializer() ]\n\n    with tf.Session() as sess:\n      sess.run(init_op)\n      n_data = 0\n      for batch_idx in range(3):\n        print '&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; before run batch', batch_idx\n        ## it should be some debug printing here, but nothing come out when batch_idx&gt;0\n        label,sign = sess.run(iter_op)\n        print '&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; after run batch', batch_idx\n        ## the content of sign remain the same every time\n        print sign\n        if len(label) == 0:\n          break\n</code></pre>", "body_text": "System information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nNO\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 16.04\n\n\nTensorFlow installed from (source or binary):\npip install tensorflow\n\n\nTensorFlow version (use command below):\n('v1.3.0-rc2-20-g0787eee', '1.3.0')\n\n\nPython version:\nPython 2.7.12 from anaconda\n\n\nBazel version (if compiling from source):\n\n\nCUDA/cuDNN version:\n\n\nGPU model and memory:\n\n\nExact command to reproduce:\nI'm using a cpu only tensorflow.\n\n\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nI wrote an custom kernel op in tensorflow for reading csv format data.\nIt works just fine in the TestCase with the\u00a0sess\u00a0object return by\u00a0test_session()\u00a0function.\nWhen I turn to normal codes, the reader op returns the same result every time. Then I put some debug printing at the beginning of the\u00a0MyOp:Compute\u00a0function. It seems like after the first run, the\u00a0sess.run(myop)\u00a0never calls the\u00a0MyOp:Compute\u00a0function at all.\nThen I return to my test cases, if I replace the session object with an\u00a0tf.Session()\u00a0instead of\u00a0self.test_session(), it failed the same way.\nSource code / logs\nto share more details, here's my mini demo codes: https://github.com/littleDing/mini_csv_reader\nmajor codes in test cases\ndef testSimple(self):\n  input_data_schema, feas, batch_size = self.get_simple_format()\n  iter_op = ops.csv_iter('./sample_data.txt', input_data_schema, feas, batch_size=batch_size, label='label2')\n  with self.test_session() as sess:\n    label,sign = sess.run(iter_op)\n    print label\n\n    self.assertAllEqual(label.shape, [batch_size])\n    self.assertAllEqual(sign.shape, [batch_size, len(feas)])\n    self.assertAllEqual(sum(label), 2)\n    self.assertAllEqual(sign[0,:], [7,0,4,1,1,1,5,9,8])\n\n    label,sign = sess.run(iter_op)\n    self.assertAllEqual(label.shape, [batch_size])\n    self.assertAllEqual(sign.shape, [batch_size, len(feas)])\n    self.assertAllEqual(sum(label), 1)\n    self.assertAllEqual(sign[0,:], [9,9,3,1,1,1,5,4,8])\n\nmajor codes in normal session call:\ndef testing_tf():\n    path = './sample_data.txt'\n    input_data_schema, feas, batch_size = get_simple_format()\n    with tf.device('/cpu:0'):\n        n_data_op = tf.placeholder(dtype=tf.float32)\n        iter_op = ops.csv_iter(path, input_data_schema, feas, batch_size=batch_size, label='label2') \n        init_op = [tf.global_variables_initializer(), tf.local_variables_initializer() ]\n\n    with tf.Session() as sess:\n      sess.run(init_op)\n      n_data = 0\n      for batch_idx in range(3):\n        print '>>>>>>>>>>>>>> before run batch', batch_idx\n        ## it should be some debug printing here, but nothing come out when batch_idx>0\n        label,sign = sess.run(iter_op)\n        print '>>>>>>>>>>>>>> after run batch', batch_idx\n        ## the content of sign remain the same every time\n        print sign\n        if len(label) == 0:\n          break", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: \r\nNO\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 16.04\r\n\r\n- **TensorFlow installed from (source or binary)**:\r\npip install tensorflow\r\n\r\n- **TensorFlow version (use command below)**:\r\n('v1.3.0-rc2-20-g0787eee', '1.3.0')\r\n\r\n- **Python version**: \r\nPython 2.7.12 from anaconda\r\n\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\nI'm using a cpu only tensorflow.\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nI wrote an custom kernel op in tensorflow for reading csv format data.\r\n\r\nIt works just fine in the TestCase with the\u00a0sess\u00a0object return by\u00a0test_session()\u00a0function.\r\n\r\nWhen I turn to normal codes, the reader op returns the same result every time. Then I put some debug printing at the beginning of the\u00a0MyOp:Compute\u00a0function. It seems like after the first run, the\u00a0sess.run(myop)\u00a0never calls the\u00a0MyOp:Compute\u00a0function at all.\r\n\r\nThen I return to my test cases, if I replace the session object with an\u00a0tf.Session()\u00a0instead of\u00a0self.test_session(), it failed the same way.\r\n\r\n### Source code / logs\r\nto share more details, here's my mini demo codes: https://github.com/littleDing/mini_csv_reader\r\n\r\nmajor codes in test cases\r\n```\r\ndef testSimple(self):\r\n  input_data_schema, feas, batch_size = self.get_simple_format()\r\n  iter_op = ops.csv_iter('./sample_data.txt', input_data_schema, feas, batch_size=batch_size, label='label2')\r\n  with self.test_session() as sess:\r\n    label,sign = sess.run(iter_op)\r\n    print label\r\n\r\n    self.assertAllEqual(label.shape, [batch_size])\r\n    self.assertAllEqual(sign.shape, [batch_size, len(feas)])\r\n    self.assertAllEqual(sum(label), 2)\r\n    self.assertAllEqual(sign[0,:], [7,0,4,1,1,1,5,9,8])\r\n\r\n    label,sign = sess.run(iter_op)\r\n    self.assertAllEqual(label.shape, [batch_size])\r\n    self.assertAllEqual(sign.shape, [batch_size, len(feas)])\r\n    self.assertAllEqual(sum(label), 1)\r\n    self.assertAllEqual(sign[0,:], [9,9,3,1,1,1,5,4,8])\r\n```\r\nmajor codes in normal session call:\r\n```\r\ndef testing_tf():\r\n    path = './sample_data.txt'\r\n    input_data_schema, feas, batch_size = get_simple_format()\r\n    with tf.device('/cpu:0'):\r\n        n_data_op = tf.placeholder(dtype=tf.float32)\r\n        iter_op = ops.csv_iter(path, input_data_schema, feas, batch_size=batch_size, label='label2') \r\n        init_op = [tf.global_variables_initializer(), tf.local_variables_initializer() ]\r\n\r\n    with tf.Session() as sess:\r\n      sess.run(init_op)\r\n      n_data = 0\r\n      for batch_idx in range(3):\r\n        print '>>>>>>>>>>>>>> before run batch', batch_idx\r\n        ## it should be some debug printing here, but nothing come out when batch_idx>0\r\n        label,sign = sess.run(iter_op)\r\n        print '>>>>>>>>>>>>>> after run batch', batch_idx\r\n        ## the content of sign remain the same every time\r\n        print sign\r\n        if len(label) == 0:\r\n          break\r\n```\r\n\r\n"}