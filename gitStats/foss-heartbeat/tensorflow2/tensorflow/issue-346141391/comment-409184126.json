{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/409184126", "html_url": "https://github.com/tensorflow/tensorflow/pull/21270#issuecomment-409184126", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21270", "id": 409184126, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTE4NDEyNg==", "user": {"login": "tobegit3hub", "id": 2715000, "node_id": "MDQ6VXNlcjI3MTUwMDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2715000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobegit3hub", "html_url": "https://github.com/tobegit3hub", "followers_url": "https://api.github.com/users/tobegit3hub/followers", "following_url": "https://api.github.com/users/tobegit3hub/following{/other_user}", "gists_url": "https://api.github.com/users/tobegit3hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobegit3hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobegit3hub/subscriptions", "organizations_url": "https://api.github.com/users/tobegit3hub/orgs", "repos_url": "https://api.github.com/users/tobegit3hub/repos", "events_url": "https://api.github.com/users/tobegit3hub/events{/privacy}", "received_events_url": "https://api.github.com/users/tobegit3hub/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-31T11:12:59Z", "updated_at": "2018-07-31T11:12:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It is well tested with the following script and <code>TensorFlow Serving</code>.</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\n\ndef input_fn():\n  features = {'a': tf.constant([[\"1\"], [\"2\"]]), 'b': tf.constant([[3], [4]])}\n  labels = tf.constant([0, 1])\n  return features, labels\n\nfeature_a = tf.contrib.layers.sparse_column_with_hash_bucket(\n    \"a\", hash_bucket_size=1000)\nfeature_b = tf.contrib.layers.real_valued_column(\"b\")\nfeature_columns = [feature_a, feature_b]\nmodel = tf.contrib.learn.LinearClassifier(feature_columns=feature_columns)\nmodel.fit(input_fn=input_fn, steps=10)\nfeature_spec = tf.contrib.layers.create_feature_spec_for_parsing(\n    feature_columns)\n\n#serving_input_fn = input_fn_utils.build_parsing_serving_input_fn(feature_spec)\nserving_input_fn = input_fn_utils.build_parsing_serving_input_fn(feature_spec, base64_encode_example=True)\nsavedmodel_path = \"./savedmodel\"\nmodel.export_savedmodel(savedmodel_path, serving_input_fn)\n</code></pre>", "body_text": "It is well tested with the following script and TensorFlow Serving.\nimport tensorflow as tf\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\n\ndef input_fn():\n  features = {'a': tf.constant([[\"1\"], [\"2\"]]), 'b': tf.constant([[3], [4]])}\n  labels = tf.constant([0, 1])\n  return features, labels\n\nfeature_a = tf.contrib.layers.sparse_column_with_hash_bucket(\n    \"a\", hash_bucket_size=1000)\nfeature_b = tf.contrib.layers.real_valued_column(\"b\")\nfeature_columns = [feature_a, feature_b]\nmodel = tf.contrib.learn.LinearClassifier(feature_columns=feature_columns)\nmodel.fit(input_fn=input_fn, steps=10)\nfeature_spec = tf.contrib.layers.create_feature_spec_for_parsing(\n    feature_columns)\n\n#serving_input_fn = input_fn_utils.build_parsing_serving_input_fn(feature_spec)\nserving_input_fn = input_fn_utils.build_parsing_serving_input_fn(feature_spec, base64_encode_example=True)\nsavedmodel_path = \"./savedmodel\"\nmodel.export_savedmodel(savedmodel_path, serving_input_fn)", "body": "It is well tested with the following script and `TensorFlow Serving`.\r\n\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\r\n\r\ndef input_fn():\r\n  features = {'a': tf.constant([[\"1\"], [\"2\"]]), 'b': tf.constant([[3], [4]])}\r\n  labels = tf.constant([0, 1])\r\n  return features, labels\r\n\r\nfeature_a = tf.contrib.layers.sparse_column_with_hash_bucket(\r\n    \"a\", hash_bucket_size=1000)\r\nfeature_b = tf.contrib.layers.real_valued_column(\"b\")\r\nfeature_columns = [feature_a, feature_b]\r\nmodel = tf.contrib.learn.LinearClassifier(feature_columns=feature_columns)\r\nmodel.fit(input_fn=input_fn, steps=10)\r\nfeature_spec = tf.contrib.layers.create_feature_spec_for_parsing(\r\n    feature_columns)\r\n\r\n#serving_input_fn = input_fn_utils.build_parsing_serving_input_fn(feature_spec)\r\nserving_input_fn = input_fn_utils.build_parsing_serving_input_fn(feature_spec, base64_encode_example=True)\r\nsavedmodel_path = \"./savedmodel\"\r\nmodel.export_savedmodel(savedmodel_path, serving_input_fn)\r\n```"}