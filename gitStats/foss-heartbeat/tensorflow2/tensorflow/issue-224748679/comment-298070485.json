{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/298070485", "html_url": "https://github.com/tensorflow/tensorflow/issues/9484#issuecomment-298070485", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9484", "id": 298070485, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODA3MDQ4NQ==", "user": {"login": "guschmue", "id": 22941064, "node_id": "MDQ6VXNlcjIyOTQxMDY0", "avatar_url": "https://avatars3.githubusercontent.com/u/22941064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guschmue", "html_url": "https://github.com/guschmue", "followers_url": "https://api.github.com/users/guschmue/followers", "following_url": "https://api.github.com/users/guschmue/following{/other_user}", "gists_url": "https://api.github.com/users/guschmue/gists{/gist_id}", "starred_url": "https://api.github.com/users/guschmue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guschmue/subscriptions", "organizations_url": "https://api.github.com/users/guschmue/orgs", "repos_url": "https://api.github.com/users/guschmue/repos", "events_url": "https://api.github.com/users/guschmue/events{/privacy}", "received_events_url": "https://api.github.com/users/guschmue/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-28T18:19:17Z", "updated_at": "2017-04-28T18:19:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For the missing cudnn?.dll issue in general (maybe we should open a new issue for this) ...<br>\nThe important thing first:<br>\nIf people run into this missing \u2018cudnn64_5.dll\u2019 if they installed cudnn6, it is better to ask them to download cudnn5.1 instead of \u2018mv cudnn64_6.dll  cudnn64_5.dll\u2019 until we have builds with cudnn6 because there might be some compatibility issues.</p>\n<p>Some findings:<br>\nAfter building with cudnn6 (master) bunch of unit tests are failing. As far I can tell cudnn related. I think<br>\nthis might be also the case on linux since there is no windows specific code here.<br>\nNeed to take a closer look.<br>\ntensorflow/python/kernel_tests/atrous_conv2d_test.py<br>\ntensorflow/python/kernel_tests/atrous_convolution_test.py<br>\ntensorflow/python/kernel_tests/conv2d_transpose_test.py<br>\ntensorflow/python/kernel_tests/conv_ops_3d_test.py<br>\ntensorflow/python/kernel_tests/conv_ops_test.py<br>\ntensorflow/python/kernel_tests/depthwise_conv_op_test.py<br>\ntensorflow/python/kernel_tests/lrn_op_test.py<br>\ntensorflow/python/kernel_tests/pooling_ops_3d_test.py<br>\ntensorflow/python/kernel_tests/pooling_ops_test.py<br>\ntensorflow/python/kernel_tests/pool_test.py</p>\n<p>Loading cudnn?.dll on master<br>\nSince the master  links now against cudnn.lib, cudnn.lib has the cudnn?.dll burned in that goes with the lib.<br>\nThe effect of this is that if you had tensorflow-gpu installed and in the future update to a version that is<br>\nbuild with cudnn6 you get this error message<br>\nImportError: No module named '_pywrap_tensorflow_internal'<br>\nFailed to load the native TensorFlow runtime.<br>\nwhich will not guide users to install cudnn6 on their system. We need to add figure some way to get a proper error  message to the user. This is maybe part of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"221322019\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9170\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/9170/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/9170\">#9170</a></p>\n<p>Loading cudnn?.dll on 1.1<br>\nSince 1.1 still uses the dynamic load of the cudnn?.dll and the name of the dll to load comes from CMakefiles.txt. If we want switch to cudnn6 we could either update the dll in CMakefile.txt or we could build the dll name on the fly by using the CUDNN_MAJOR from cudnn.h.<br>\nLater might be better but since the master is no longer using the dynamic load might not be worth the change.</p>\n<p>In summary I think we need to:</p>\n<ul>\n<li>Fix the unit tests for cudnn6</li>\n<li>do something for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"221322019\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9170\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/9170/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/9170\">#9170</a> to tell users why what the real<br>\nerror was when  if we fail to load tensorflow because the wrong cudnn version was installed.</li>\n<li>If we want to switch 1.1 to cudnn6 a make a change from in CMakefile.txt to reflect<br>\nthe new cudnn?.dll name</li>\n</ul>", "body_text": "For the missing cudnn?.dll issue in general (maybe we should open a new issue for this) ...\nThe important thing first:\nIf people run into this missing \u2018cudnn64_5.dll\u2019 if they installed cudnn6, it is better to ask them to download cudnn5.1 instead of \u2018mv cudnn64_6.dll  cudnn64_5.dll\u2019 until we have builds with cudnn6 because there might be some compatibility issues.\nSome findings:\nAfter building with cudnn6 (master) bunch of unit tests are failing. As far I can tell cudnn related. I think\nthis might be also the case on linux since there is no windows specific code here.\nNeed to take a closer look.\ntensorflow/python/kernel_tests/atrous_conv2d_test.py\ntensorflow/python/kernel_tests/atrous_convolution_test.py\ntensorflow/python/kernel_tests/conv2d_transpose_test.py\ntensorflow/python/kernel_tests/conv_ops_3d_test.py\ntensorflow/python/kernel_tests/conv_ops_test.py\ntensorflow/python/kernel_tests/depthwise_conv_op_test.py\ntensorflow/python/kernel_tests/lrn_op_test.py\ntensorflow/python/kernel_tests/pooling_ops_3d_test.py\ntensorflow/python/kernel_tests/pooling_ops_test.py\ntensorflow/python/kernel_tests/pool_test.py\nLoading cudnn?.dll on master\nSince the master  links now against cudnn.lib, cudnn.lib has the cudnn?.dll burned in that goes with the lib.\nThe effect of this is that if you had tensorflow-gpu installed and in the future update to a version that is\nbuild with cudnn6 you get this error message\nImportError: No module named '_pywrap_tensorflow_internal'\nFailed to load the native TensorFlow runtime.\nwhich will not guide users to install cudnn6 on their system. We need to add figure some way to get a proper error  message to the user. This is maybe part of #9170\nLoading cudnn?.dll on 1.1\nSince 1.1 still uses the dynamic load of the cudnn?.dll and the name of the dll to load comes from CMakefiles.txt. If we want switch to cudnn6 we could either update the dll in CMakefile.txt or we could build the dll name on the fly by using the CUDNN_MAJOR from cudnn.h.\nLater might be better but since the master is no longer using the dynamic load might not be worth the change.\nIn summary I think we need to:\n\nFix the unit tests for cudnn6\ndo something for #9170 to tell users why what the real\nerror was when  if we fail to load tensorflow because the wrong cudnn version was installed.\nIf we want to switch 1.1 to cudnn6 a make a change from in CMakefile.txt to reflect\nthe new cudnn?.dll name", "body": "For the missing cudnn?.dll issue in general (maybe we should open a new issue for this) ...\r\nThe important thing first:\r\nIf people run into this missing \u2018cudnn64_5.dll\u2019 if they installed cudnn6, it is better to ask them to download cudnn5.1 instead of \u2018mv cudnn64_6.dll  cudnn64_5.dll\u2019 until we have builds with cudnn6 because there might be some compatibility issues.\r\n\r\nSome findings:\r\nAfter building with cudnn6 (master) bunch of unit tests are failing. As far I can tell cudnn related. I think \r\nthis might be also the case on linux since there is no windows specific code here.\r\nNeed to take a closer look.\r\n tensorflow/python/kernel_tests/atrous_conv2d_test.py\r\n tensorflow/python/kernel_tests/atrous_convolution_test.py\r\n tensorflow/python/kernel_tests/conv2d_transpose_test.py\r\n tensorflow/python/kernel_tests/conv_ops_3d_test.py\r\n tensorflow/python/kernel_tests/conv_ops_test.py\r\n tensorflow/python/kernel_tests/depthwise_conv_op_test.py\r\n tensorflow/python/kernel_tests/lrn_op_test.py\r\n tensorflow/python/kernel_tests/pooling_ops_3d_test.py\r\n tensorflow/python/kernel_tests/pooling_ops_test.py\r\n tensorflow/python/kernel_tests/pool_test.py\r\n\r\nLoading cudnn?.dll on master\r\nSince the master  links now against cudnn.lib, cudnn.lib has the cudnn?.dll burned in that goes with the lib.\r\nThe effect of this is that if you had tensorflow-gpu installed and in the future update to a version that is\r\nbuild with cudnn6 you get this error message\r\n  ImportError: No module named '_pywrap_tensorflow_internal' \r\n  Failed to load the native TensorFlow runtime.\r\nwhich will not guide users to install cudnn6 on their system. We need to add figure some way to get a proper error  message to the user. This is maybe part of https://github.com/tensorflow/tensorflow/issues/9170\r\n\r\nLoading cudnn?.dll on 1.1\r\nSince 1.1 still uses the dynamic load of the cudnn?.dll and the name of the dll to load comes from CMakefiles.txt. If we want switch to cudnn6 we could either update the dll in CMakefile.txt or we could build the dll name on the fly by using the CUDNN_MAJOR from cudnn.h.\r\nLater might be better but since the master is no longer using the dynamic load might not be worth the change.\r\n\r\nIn summary I think we need to:\r\n- Fix the unit tests for cudnn6\r\n- do something for https://github.com/tensorflow/tensorflow/issues/9170 to tell users why what the real \r\n  error was when  if we fail to load tensorflow because the wrong cudnn version was installed.\r\n- If we want to switch 1.1 to cudnn6 a make a change from in CMakefile.txt to reflect \r\n  the new cudnn?.dll name\r\n"}