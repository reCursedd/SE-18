{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23892", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23892/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23892/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23892/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23892", "id": 382891688, "node_id": "MDU6SXNzdWUzODI4OTE2ODg=", "number": 23892, "title": "TensorBoard Callback write_images", "user": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097546578, "node_id": "MDU6TGFiZWwxMDk3NTQ2NTc4", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:keras", "name": "comp:keras", "color": "0052cc", "default": false}, {"id": 1125315826, "node_id": "MDU6TGFiZWwxMTI1MzE1ODI2", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:cross-posted%20from%20Keras", "name": "stat:cross-posted from Keras", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-20T23:33:28Z", "updated_at": "2018-11-20T23:57:42Z", "closed_at": "2018-11-20T23:57:42Z", "author_association": "NONE", "body_html": "<p>I want to use the TensorBoard callback to visualize my conv layer kernels. But i can only see the first conv layer kernel in TensorBoard and my Dense layers at the end. For the other conv layers i can just see the bias values and not the kernels.</p>\n<p>Here is my sample code for the Keras model.</p>\n<h1>Imports</h1>\n<p>import tensorflow as tf<br>\nimport numpy as np<br>\nimport os<br>\nfrom os import makedirs<br>\nfrom os.path import exists, join<br>\nfrom keras.datasets import mnist<br>\nimport time</p>\n<p>from keras.layers import *<br>\nfrom keras.activations import *<br>\nfrom keras.models import *<br>\nfrom keras.optimizers import *<br>\nfrom keras.initializers import *<br>\nfrom keras.callbacks import TensorBoard<br>\nfrom keras.callbacks import ModelCheckpoint<br>\nfrom keras.utils.np_utils import to_categorical</p>\n<p>from plotting import *</p>\n<p>log_dir = '\"./\"</p>\n<h1>Load MNIST dataset</h1>\n<p>(x_train, y_train), (x_test, y_test) = mnist.load_data()</p>\n<p>batch_size = 128<br>\nepochs = 10<br>\nwidth = 28<br>\nheight = 28<br>\ndepth = 1<br>\nnum_classes = 10<br>\ntrain_size = x_train.shape[0]<br>\ntest_size = x_test.shape[0]</p>\n<p>x_train = x_train.reshape(train_size, width, height, depth)<br>\ny_train = to_categorical(y_train, num_classes=num_classes)<br>\nx_test = x_test.reshape(test_size, width, height, depth)<br>\ny_test = to_categorical(y_test, num_classes=num_classes)</p>\n<p>tb = TensorBoard(<br>\nlog_dir=log_dir,<br>\nhistogram_freq=1,<br>\nwrite_graph=True,<br>\nwrite_images=True)</p>\n<h1>Define the DNN</h1>\n<p>model = Sequential()<br>\nmodel.add(Conv2D(filters=16, kernel_size=3, input_shape=(width, height, depth), name=\"conv1\"))<br>\nmodel.add(Activation(\"relu\"))<br>\nmodel.add(Conv2D(filters=20, kernel_size=3, name=\"conv2\"))<br>\nmodel.add(Activation(\"relu\"))<br>\nmodel.add(MaxPool2D())</p>\n<p>model.add(Conv2D(filters=24, kernel_size=3, name=\"conv3\"))<br>\nmodel.add(Activation(\"relu\"))<br>\nmodel.add(Conv2D(filters=28, kernel_size=3, name=\"conv4\"))<br>\nmodel.add(Activation(\"relu\"))<br>\nmodel.add(MaxPool2D())</p>\n<p>model.add(Flatten())<br>\nmodel.add(Dense(128))<br>\nmodel.add(Activation(\"relu\"))<br>\nmodel.add(Dense(num_classes, name=\"features\"))<br>\nmodel.add(Activation(\"softmax\"))</p>\n<h1>Print the DNN layers</h1>\n<p>model.summary()</p>\n<h1>Train the DNN</h1>\n<p>lr = 1e-3<br>\noptimizer = Adam(lr=lr)<br>\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])<br>\nmodel.fit(x_train, y_train, verbose=1, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test), callbacks=[tb])</p>\n<h1>Test the DNN</h1>\n<p>score = model.evaluate(x_test, y_test, batch_size=batch_size)<br>\nprint(\"Test performance: \", score)</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/42785357/48809367-29508000-ecd9-11e8-93e8-dd73713c4515.png\"><img src=\"https://user-images.githubusercontent.com/42785357/48809367-29508000-ecd9-11e8-93e8-dd73713c4515.png\" alt=\"ktb\" style=\"max-width:100%;\"></a></p>", "body_text": "I want to use the TensorBoard callback to visualize my conv layer kernels. But i can only see the first conv layer kernel in TensorBoard and my Dense layers at the end. For the other conv layers i can just see the bias values and not the kernels.\nHere is my sample code for the Keras model.\nImports\nimport tensorflow as tf\nimport numpy as np\nimport os\nfrom os import makedirs\nfrom os.path import exists, join\nfrom keras.datasets import mnist\nimport time\nfrom keras.layers import *\nfrom keras.activations import *\nfrom keras.models import *\nfrom keras.optimizers import *\nfrom keras.initializers import *\nfrom keras.callbacks import TensorBoard\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.utils.np_utils import to_categorical\nfrom plotting import *\nlog_dir = '\"./\"\nLoad MNIST dataset\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nbatch_size = 128\nepochs = 10\nwidth = 28\nheight = 28\ndepth = 1\nnum_classes = 10\ntrain_size = x_train.shape[0]\ntest_size = x_test.shape[0]\nx_train = x_train.reshape(train_size, width, height, depth)\ny_train = to_categorical(y_train, num_classes=num_classes)\nx_test = x_test.reshape(test_size, width, height, depth)\ny_test = to_categorical(y_test, num_classes=num_classes)\ntb = TensorBoard(\nlog_dir=log_dir,\nhistogram_freq=1,\nwrite_graph=True,\nwrite_images=True)\nDefine the DNN\nmodel = Sequential()\nmodel.add(Conv2D(filters=16, kernel_size=3, input_shape=(width, height, depth), name=\"conv1\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(Conv2D(filters=20, kernel_size=3, name=\"conv2\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D())\nmodel.add(Conv2D(filters=24, kernel_size=3, name=\"conv3\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(Conv2D(filters=28, kernel_size=3, name=\"conv4\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D())\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(num_classes, name=\"features\"))\nmodel.add(Activation(\"softmax\"))\nPrint the DNN layers\nmodel.summary()\nTrain the DNN\nlr = 1e-3\noptimizer = Adam(lr=lr)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])\nmodel.fit(x_train, y_train, verbose=1, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test), callbacks=[tb])\nTest the DNN\nscore = model.evaluate(x_test, y_test, batch_size=batch_size)\nprint(\"Test performance: \", score)", "body": "I want to use the TensorBoard callback to visualize my conv layer kernels. But i can only see the first conv layer kernel in TensorBoard and my Dense layers at the end. For the other conv layers i can just see the bias values and not the kernels.\r\n\r\nHere is my sample code for the Keras model.\r\n\r\n# Imports\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport os\r\nfrom os import makedirs\r\nfrom os.path import exists, join\r\nfrom keras.datasets import mnist\r\nimport time\r\n\r\nfrom keras.layers import *\r\nfrom keras.activations import *\r\nfrom keras.models import *\r\nfrom keras.optimizers import *\r\nfrom keras.initializers import *\r\nfrom keras.callbacks import TensorBoard\r\nfrom keras.callbacks import ModelCheckpoint\r\nfrom keras.utils.np_utils import to_categorical\r\n\r\nfrom plotting import *\r\n\r\nlog_dir = '\"./\"\r\n\r\n# Load MNIST dataset\r\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\r\n\r\nbatch_size = 128\r\nepochs = 10\r\nwidth = 28\r\nheight = 28\r\ndepth = 1\r\nnum_classes = 10\r\ntrain_size = x_train.shape[0]\r\ntest_size = x_test.shape[0]\r\n\r\nx_train = x_train.reshape(train_size, width, height, depth)\r\ny_train = to_categorical(y_train, num_classes=num_classes)\r\nx_test = x_test.reshape(test_size, width, height, depth)\r\ny_test = to_categorical(y_test, num_classes=num_classes)\r\n\r\ntb = TensorBoard(\r\n    log_dir=log_dir, \r\n    histogram_freq=1, \r\n    write_graph=True, \r\n    write_images=True)\r\n\r\n# Define the DNN\r\nmodel = Sequential()\r\nmodel.add(Conv2D(filters=16, kernel_size=3, input_shape=(width, height, depth), name=\"conv1\"))\r\nmodel.add(Activation(\"relu\"))\r\nmodel.add(Conv2D(filters=20, kernel_size=3, name=\"conv2\"))\r\nmodel.add(Activation(\"relu\"))\r\nmodel.add(MaxPool2D())\r\n\r\nmodel.add(Conv2D(filters=24, kernel_size=3, name=\"conv3\"))\r\nmodel.add(Activation(\"relu\"))\r\nmodel.add(Conv2D(filters=28, kernel_size=3, name=\"conv4\"))\r\nmodel.add(Activation(\"relu\"))\r\nmodel.add(MaxPool2D())\r\n\r\nmodel.add(Flatten())\r\nmodel.add(Dense(128))\r\nmodel.add(Activation(\"relu\"))\r\nmodel.add(Dense(num_classes, name=\"features\"))\r\nmodel.add(Activation(\"softmax\"))\r\n\r\n# Print the DNN layers\r\nmodel.summary()\r\n\r\n# Train the DNN\r\nlr = 1e-3\r\noptimizer = Adam(lr=lr)\r\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])\r\nmodel.fit(x_train, y_train, verbose=1, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test), callbacks=[tb])\r\n\r\n# Test the DNN\r\nscore = model.evaluate(x_test, y_test, batch_size=batch_size)\r\nprint(\"Test performance: \", score)\r\n\r\n![ktb](https://user-images.githubusercontent.com/42785357/48809367-29508000-ecd9-11e8-93e8-dd73713c4515.png)\r\n"}