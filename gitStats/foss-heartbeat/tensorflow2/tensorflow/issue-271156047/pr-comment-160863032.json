{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/160863032", "pull_request_review_id": 88055049, "id": 160863032, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDg2MzAzMg==", "diff_hunk": "@@ -308,7 +308,7 @@ def log_prob_beta(x):\n \n \n def kernel(step_size, n_leapfrog_steps, x, target_log_prob_fn, event_dims=(),", "path": "tensorflow/contrib/bayesflow/python/ops/hmc_impl.py", "position": 3, "original_position": 3, "commit_id": "c457cb20e1f251f41f9086f229a7779c98860111", "original_commit_id": "c457cb20e1f251f41f9086f229a7779c98860111", "user": {"login": "langmore", "id": 178152, "node_id": "MDQ6VXNlcjE3ODE1Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/178152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/langmore", "html_url": "https://github.com/langmore", "followers_url": "https://api.github.com/users/langmore/followers", "following_url": "https://api.github.com/users/langmore/following{/other_user}", "gists_url": "https://api.github.com/users/langmore/gists{/gist_id}", "starred_url": "https://api.github.com/users/langmore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/langmore/subscriptions", "organizations_url": "https://api.github.com/users/langmore/orgs", "repos_url": "https://api.github.com/users/langmore/repos", "events_url": "https://api.github.com/users/langmore/events{/privacy}", "received_events_url": "https://api.github.com/users/langmore/received_events", "type": "User", "site_admin": false}, "body": "To make your test pass, you'll have to do a few things.  The end result will be simpler.\r\n\r\nFirst, add the import and a separate alias\r\n```import tensorflow.python.ops.distributions import util as distribution_util```\r\n\r\nSecond, to `kernel()` and every function called by `kernel()`, you'll have to add a kwarg `seed` (make it the last kwarg), with default value `None`.\r\n\r\nThird, every time a random number is generated, you need to add a \"salted\" version of `seed`.  E.g.\r\n```m = random_ops.random_normal(x_shape, dtype=x.dtype, seed=distribution_util.gen_new_seed(seed, salt=\"m\")```\r\nMake sure the salt is unique for every call.  Also make sure that if one function calls another, a salted version of the seed is passed on.\r\n\r\nFinally, inside your test, you can use the same seed for both calls to `kernel()`.  This should make things work.\r\n\r\nHave fun!", "created_at": "2018-01-11T04:28:29Z", "updated_at": "2018-01-11T04:28:29Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14237#discussion_r160863032", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14237", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/160863032"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14237#discussion_r160863032"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14237"}}, "body_html": "<p>To make your test pass, you'll have to do a few things.  The end result will be simpler.</p>\n<p>First, add the import and a separate alias<br>\n<code>import tensorflow.python.ops.distributions import util as distribution_util</code></p>\n<p>Second, to <code>kernel()</code> and every function called by <code>kernel()</code>, you'll have to add a kwarg <code>seed</code> (make it the last kwarg), with default value <code>None</code>.</p>\n<p>Third, every time a random number is generated, you need to add a \"salted\" version of <code>seed</code>.  E.g.<br>\n<code>m = random_ops.random_normal(x_shape, dtype=x.dtype, seed=distribution_util.gen_new_seed(seed, salt=\"m\")</code><br>\nMake sure the salt is unique for every call.  Also make sure that if one function calls another, a salted version of the seed is passed on.</p>\n<p>Finally, inside your test, you can use the same seed for both calls to <code>kernel()</code>.  This should make things work.</p>\n<p>Have fun!</p>", "body_text": "To make your test pass, you'll have to do a few things.  The end result will be simpler.\nFirst, add the import and a separate alias\nimport tensorflow.python.ops.distributions import util as distribution_util\nSecond, to kernel() and every function called by kernel(), you'll have to add a kwarg seed (make it the last kwarg), with default value None.\nThird, every time a random number is generated, you need to add a \"salted\" version of seed.  E.g.\nm = random_ops.random_normal(x_shape, dtype=x.dtype, seed=distribution_util.gen_new_seed(seed, salt=\"m\")\nMake sure the salt is unique for every call.  Also make sure that if one function calls another, a salted version of the seed is passed on.\nFinally, inside your test, you can use the same seed for both calls to kernel().  This should make things work.\nHave fun!"}