{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/141243450", "pull_request_review_id": 65426246, "id": 141243450, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTI0MzQ1MA==", "diff_hunk": "@@ -432,6 +433,43 @@ CUDA_ATOMIC_WRAPPER(Add, double) {\n   return __longlong_as_double(old);\n }\n \n+// Custom implementation of atomicAdd for std::complex<float>.\n+// This implementation performs to atomic additions on the components.\n+CUDA_ATOMIC_WRAPPER(Add, std::complex<float>) {\n+#if defined(__CUDA_ARCH__)\n+#if __CUDA_ARCH__ >= 350\n+  float2* addr_as_float2 = reinterpret_cast<float2*>(address);\n+  float2* val_as_float2 = reinterpret_cast<float2*>(&val);\n+  CudaAtomicAdd(&(addr_as_float2->x), val_as_float2->x);\n+  CudaAtomicAdd(&(addr_as_float2->y), val_as_float2->y);\n+#else\n+  static_assert(false,\n+                \"Unable to compile CudaAtomicAdd for complex64 because \"\n+                \"architectures < sm35 are not supported\");\n+#endif\n+#endif\n+  return *address;\n+}\n+\n+// Custom implementation of atomicAdd for std::complex<double>.\n+// This implementation performs to atomic additions on the components\n+// using the double atomic wrapper above.\n+CUDA_ATOMIC_WRAPPER(Add, complex128) {\n+#if defined(__CUDA_ARCH__)\n+#if __CUDA_ARCH__ >= 350\n+  double2* addr_as_double2 = reinterpret_cast<double2*>(address);\n+  double2* val_as_double2 = reinterpret_cast<double2*>(&val);\n+  CudaAtomicAdd(&(addr_as_double2->x), val_as_double2->x);\n+  CudaAtomicAdd(&(addr_as_double2->y), val_as_double2->y);\n+#else\n+  static_assert(false,", "path": "tensorflow/core/util/cuda_kernel_helper.h", "position": null, "original_position": 71, "commit_id": "9774ee4c249417a044f06f2b693e80159b3a0c70", "original_commit_id": "e9d1946a574f2ecb059211f4c0f6dce6d897e968", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "Why do we set cuda min compute capabilities to 30?  I thought we supported only 35 and up?  The error is:\r\n\r\n./tensorflow/core/util/cuda_kernel_helper.h(465): error: static assertion failed with \"Unable to compile CudaAtomicAdd for complex128 because architectures < sm35 are not supported", "created_at": "2017-09-27T04:43:41Z", "updated_at": "2017-09-27T23:34:54Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13323#discussion_r141243450", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13323", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/141243450"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13323#discussion_r141243450"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13323"}}, "body_html": "<p>Why do we set cuda min compute capabilities to 30?  I thought we supported only 35 and up?  The error is:</p>\n<p>./tensorflow/core/util/cuda_kernel_helper.h(465): error: static assertion failed with \"Unable to compile CudaAtomicAdd for complex128 because architectures &lt; sm35 are not supported</p>", "body_text": "Why do we set cuda min compute capabilities to 30?  I thought we supported only 35 and up?  The error is:\n./tensorflow/core/util/cuda_kernel_helper.h(465): error: static assertion failed with \"Unable to compile CudaAtomicAdd for complex128 because architectures < sm35 are not supported", "in_reply_to_id": 141204651}