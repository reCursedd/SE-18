{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/333422727", "html_url": "https://github.com/tensorflow/tensorflow/issues/13101#issuecomment-333422727", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13101", "id": 333422727, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzQyMjcyNw==", "user": {"login": "Utumno", "id": 1365079, "node_id": "MDQ6VXNlcjEzNjUwNzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1365079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Utumno", "html_url": "https://github.com/Utumno", "followers_url": "https://api.github.com/users/Utumno/followers", "following_url": "https://api.github.com/users/Utumno/following{/other_user}", "gists_url": "https://api.github.com/users/Utumno/gists{/gist_id}", "starred_url": "https://api.github.com/users/Utumno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Utumno/subscriptions", "organizations_url": "https://api.github.com/users/Utumno/orgs", "repos_url": "https://api.github.com/users/Utumno/repos", "events_url": "https://api.github.com/users/Utumno/events{/privacy}", "received_events_url": "https://api.github.com/users/Utumno/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-02T01:37:44Z", "updated_at": "2017-10-06T13:42:54Z", "author_association": "NONE", "body_html": "<p>My 2 cents of feedback: I have been trying to use the <code>Dataset.from_generator</code> API (thanks) to return an iterator to another dataset, constructed in the generator - but I can't really make it work without passing the session in:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nrange5 <span class=\"pl-k\">=</span> tf.contrib.data.Dataset.range(<span class=\"pl-c1\">5</span>).make_one_shot_iterator()\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    <span class=\"pl-c1\">print</span>(tf.<span class=\"pl-c1\">__version__</span>)\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_dataset_generator</span>():\n        <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n            <span class=\"pl-k\">try</span>:\n                <span class=\"pl-k\">yield</span> sess.run(range5.get_next())\n            <span class=\"pl-k\">except</span> tf.errors.OutOfRangeError:\n                <span class=\"pl-k\">return</span>\n    gen_dataset <span class=\"pl-k\">=</span> tf.contrib.data.Dataset.from_generator(_dataset_generator,\n                                                         tf.int64)\n    gen_it <span class=\"pl-k\">=</span> gen_dataset.make_one_shot_iterator()\n    <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n        <span class=\"pl-k\">try</span>:\n            <span class=\"pl-c1\">print</span>(sess.run(gen_it.get_next()))\n        <span class=\"pl-k\">except</span> tf.errors.OutOfRangeError:\n            <span class=\"pl-k\">break</span></pre></div>\n<p>I may be missing something obvious but there seems to be no way to \"chain\" the iterators - so just issue <code>yield range5.get_next()</code> . Moreover the pattern above does not (easily ?) generalize to more complex datasets (<strong>EDIT 2017.10.06:</strong> see <a href=\"https://stackoverflow.com/q/46604371/281545\" rel=\"nofollow\">SO question</a> for an example of what I mean with \"complex\") . Implementing the generator as a python generator over a typical Dataset needs not use the session (but we still must explicitly loop in python)<br>\nAnd a note on errors - I erroneously wrote <code>Dataset.zip((Dataset.from_tensors(...), tf.range(count))</code> and I got the rather cryptic <code>errors_impl.UnknownError: AttributeError: 'Tensor' object has no attribute 'output_types'</code>. It seemed rather natural to pass a tensor as argument - I guess many will be tripped by this. Would help to have some type checks in zip for a clearer error message maybe?<br>\nThanks!</p>", "body_text": "My 2 cents of feedback: I have been trying to use the Dataset.from_generator API (thanks) to return an iterator to another dataset, constructed in the generator - but I can't really make it work without passing the session in:\nimport tensorflow as tf\n\nrange5 = tf.contrib.data.Dataset.range(5).make_one_shot_iterator()\nwith tf.Session() as sess:\n    print(tf.__version__)\n    def _dataset_generator():\n        while True:\n            try:\n                yield sess.run(range5.get_next())\n            except tf.errors.OutOfRangeError:\n                return\n    gen_dataset = tf.contrib.data.Dataset.from_generator(_dataset_generator,\n                                                         tf.int64)\n    gen_it = gen_dataset.make_one_shot_iterator()\n    while True:\n        try:\n            print(sess.run(gen_it.get_next()))\n        except tf.errors.OutOfRangeError:\n            break\nI may be missing something obvious but there seems to be no way to \"chain\" the iterators - so just issue yield range5.get_next() . Moreover the pattern above does not (easily ?) generalize to more complex datasets (EDIT 2017.10.06: see SO question for an example of what I mean with \"complex\") . Implementing the generator as a python generator over a typical Dataset needs not use the session (but we still must explicitly loop in python)\nAnd a note on errors - I erroneously wrote Dataset.zip((Dataset.from_tensors(...), tf.range(count)) and I got the rather cryptic errors_impl.UnknownError: AttributeError: 'Tensor' object has no attribute 'output_types'. It seemed rather natural to pass a tensor as argument - I guess many will be tripped by this. Would help to have some type checks in zip for a clearer error message maybe?\nThanks!", "body": "My 2 cents of feedback: I have been trying to use the `Dataset.from_generator` API (thanks) to return an iterator to another dataset, constructed in the generator - but I can't really make it work without passing the session in:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nrange5 = tf.contrib.data.Dataset.range(5).make_one_shot_iterator()\r\nwith tf.Session() as sess:\r\n    print(tf.__version__)\r\n    def _dataset_generator():\r\n        while True:\r\n            try:\r\n                yield sess.run(range5.get_next())\r\n            except tf.errors.OutOfRangeError:\r\n                return\r\n    gen_dataset = tf.contrib.data.Dataset.from_generator(_dataset_generator,\r\n                                                         tf.int64)\r\n    gen_it = gen_dataset.make_one_shot_iterator()\r\n    while True:\r\n        try:\r\n            print(sess.run(gen_it.get_next()))\r\n        except tf.errors.OutOfRangeError:\r\n            break\r\n```\r\n\r\nI may be missing something obvious but there seems to be no way to \"chain\" the iterators - so just issue `yield range5.get_next()` . Moreover the pattern above does not (easily ?) generalize to more complex datasets (**EDIT 2017.10.06:** see [SO question](https://stackoverflow.com/q/46604371/281545) for an example of what I mean with \"complex\") . Implementing the generator as a python generator over a typical Dataset needs not use the session (but we still must explicitly loop in python)\r\nAnd a note on errors - I erroneously wrote `Dataset.zip((Dataset.from_tensors(...), tf.range(count))` and I got the rather cryptic `errors_impl.UnknownError: AttributeError: 'Tensor' object has no attribute 'output_types'`. It seemed rather natural to pass a tensor as argument - I guess many will be tripped by this. Would help to have some type checks in zip for a clearer error message maybe?\r\nThanks!"}