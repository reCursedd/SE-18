{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/352841554", "html_url": "https://github.com/tensorflow/tensorflow/issues/13101#issuecomment-352841554", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13101", "id": 352841554, "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mjg0MTU1NA==", "user": {"login": "boeddeker", "id": 13744128, "node_id": "MDQ6VXNlcjEzNzQ0MTI4", "avatar_url": "https://avatars3.githubusercontent.com/u/13744128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boeddeker", "html_url": "https://github.com/boeddeker", "followers_url": "https://api.github.com/users/boeddeker/followers", "following_url": "https://api.github.com/users/boeddeker/following{/other_user}", "gists_url": "https://api.github.com/users/boeddeker/gists{/gist_id}", "starred_url": "https://api.github.com/users/boeddeker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boeddeker/subscriptions", "organizations_url": "https://api.github.com/users/boeddeker/orgs", "repos_url": "https://api.github.com/users/boeddeker/repos", "events_url": "https://api.github.com/users/boeddeker/events{/privacy}", "received_events_url": "https://api.github.com/users/boeddeker/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-19T18:14:00Z", "updated_at": "2017-12-19T18:14:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1072079\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jsimsa\">@jsimsa</a> Thanks for the explanation.<br>\nI had a bad example, where the element <code>0, num_parallel_calls, ...</code> are the slowest.</p>\n<p>Do you also know, why calling <code>20</code> times <code>time.sleep(1)</code> with  <code>num_parallel_calls=20</code> takes 5 seconds on a computer with 4 cores (I expect 1 second)?<br>\nIt seems that the \"prefetching\" rule in <code>map</code> follows your explanation, but the numbers of threads are limited to <code>min(num_parallel_calls, cpu_core_count)</code>.</p>", "body_text": "@jsimsa Thanks for the explanation.\nI had a bad example, where the element 0, num_parallel_calls, ... are the slowest.\nDo you also know, why calling 20 times time.sleep(1) with  num_parallel_calls=20 takes 5 seconds on a computer with 4 cores (I expect 1 second)?\nIt seems that the \"prefetching\" rule in map follows your explanation, but the numbers of threads are limited to min(num_parallel_calls, cpu_core_count).", "body": "@jsimsa Thanks for the explanation. \r\nI had a bad example, where the element `0, num_parallel_calls, ...` are the slowest.\r\n\r\nDo you also know, why calling `20` times `time.sleep(1)` with  `num_parallel_calls=20` takes 5 seconds on a computer with 4 cores (I expect 1 second)?\r\nIt seems that the \"prefetching\" rule in `map` follows your explanation, but the numbers of threads are limited to `min(num_parallel_calls, cpu_core_count)`.\r\n\r\n"}