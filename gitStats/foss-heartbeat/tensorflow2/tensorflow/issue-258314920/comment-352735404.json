{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/352735404", "html_url": "https://github.com/tensorflow/tensorflow/issues/13101#issuecomment-352735404", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13101", "id": 352735404, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjczNTQwNA==", "user": {"login": "boeddeker", "id": 13744128, "node_id": "MDQ6VXNlcjEzNzQ0MTI4", "avatar_url": "https://avatars3.githubusercontent.com/u/13744128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boeddeker", "html_url": "https://github.com/boeddeker", "followers_url": "https://api.github.com/users/boeddeker/followers", "following_url": "https://api.github.com/users/boeddeker/following{/other_user}", "gists_url": "https://api.github.com/users/boeddeker/gists{/gist_id}", "starred_url": "https://api.github.com/users/boeddeker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boeddeker/subscriptions", "organizations_url": "https://api.github.com/users/boeddeker/orgs", "repos_url": "https://api.github.com/users/boeddeker/repos", "events_url": "https://api.github.com/users/boeddeker/events{/privacy}", "received_events_url": "https://api.github.com/users/boeddeker/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-19T12:27:24Z", "updated_at": "2017-12-19T12:27:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1710528\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bhack\">@bhack</a> Afaik is <code>dataset.batch</code> independent from <code>num_parallel_calls</code>. Using the example code for <code>from_indexable</code> from Stack Overflow, below a small example. The execution time is <code>time to get one item</code> devided by <code>num_parallel_calls</code> and is independent from batch size.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> time\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">PyDataSet</span>:\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__len__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">20</span>\n        \n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">item</span>):\n        time.sleep(<span class=\"pl-c1\">0.5</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;----------------- Takes 0.5 seconds to \"load\" the data</span>\n        <span class=\"pl-k\">return</span> np.random.normal(<span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">10</span>))\n\nds <span class=\"pl-k\">=</span> from_indexable(PyDataSet(), <span class=\"pl-v\">output_types</span><span class=\"pl-k\">=</span>tf.float64, <span class=\"pl-v\">output_shapes</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">10</span>], <span class=\"pl-v\">num_parallel_calls</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>)\nds <span class=\"pl-k\">=</span> ds.batch(<span class=\"pl-c1\">9</span>)\nit <span class=\"pl-k\">=</span> ds.make_one_shot_iterator()\nentry <span class=\"pl-k\">=</span> it.get_next()\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    start <span class=\"pl-k\">=</span> time.perf_counter()\n    <span class=\"pl-k\">try</span>:\n        <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n            <span class=\"pl-c1\">print</span>(sess.run(entry).shape)\n    <span class=\"pl-k\">except</span> tf.errors.OutOfRangeError:\n        <span class=\"pl-k\">pass</span>\n    delta <span class=\"pl-k\">=</span> time.perf_counter() <span class=\"pl-k\">-</span> start\n    <span class=\"pl-c1\">print</span>(delta)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 2.5277008840057533</span></pre></div>", "body_text": "@bhack Afaik is dataset.batch independent from num_parallel_calls. Using the example code for from_indexable from Stack Overflow, below a small example. The execution time is time to get one item devided by num_parallel_calls and is independent from batch size.\nimport time\n\nclass PyDataSet:\n    def __len__(self):\n        return 20\n        \n    def __getitem__(self, item):\n        time.sleep(0.5)  # <----------------- Takes 0.5 seconds to \"load\" the data\n        return np.random.normal(size=(10))\n\nds = from_indexable(PyDataSet(), output_types=tf.float64, output_shapes=[None, 10], num_parallel_calls=4)\nds = ds.batch(9)\nit = ds.make_one_shot_iterator()\nentry = it.get_next()\nwith tf.Session() as sess:\n    start = time.perf_counter()\n    try:\n        while True:\n            print(sess.run(entry).shape)\n    except tf.errors.OutOfRangeError:\n        pass\n    delta = time.perf_counter() - start\n    print(delta)  # 2.5277008840057533", "body": "@bhack Afaik is `dataset.batch` independent from `num_parallel_calls`. Using the example code for `from_indexable` from Stack Overflow, below a small example. The execution time is `time to get one item` devided by `num_parallel_calls` and is independent from batch size.\r\n\r\n```python\r\nimport time\r\n\r\nclass PyDataSet:\r\n    def __len__(self):\r\n        return 20\r\n        \r\n    def __getitem__(self, item):\r\n        time.sleep(0.5)  # <----------------- Takes 0.5 seconds to \"load\" the data\r\n        return np.random.normal(size=(10))\r\n\r\nds = from_indexable(PyDataSet(), output_types=tf.float64, output_shapes=[None, 10], num_parallel_calls=4)\r\nds = ds.batch(9)\r\nit = ds.make_one_shot_iterator()\r\nentry = it.get_next()\r\nwith tf.Session() as sess:\r\n    start = time.perf_counter()\r\n    try:\r\n        while True:\r\n            print(sess.run(entry).shape)\r\n    except tf.errors.OutOfRangeError:\r\n        pass\r\n    delta = time.perf_counter() - start\r\n    print(delta)  # 2.5277008840057533\r\n```"}