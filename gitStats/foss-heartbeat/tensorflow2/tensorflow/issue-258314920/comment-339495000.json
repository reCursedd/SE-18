{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/339495000", "html_url": "https://github.com/tensorflow/tensorflow/issues/13101#issuecomment-339495000", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13101", "id": 339495000, "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTQ5NTAwMA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-25T22:35:26Z", "updated_at": "2017-10-25T22:35:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I haven't had time to dig into this in depth, but I did notice that when I dial the batch size down to 1, the <code>Dataset.from_generator()</code> version is faster than using a <code>feed_dict</code>. This suggests that the overhead might be coming from the <code>Dataset.batch()</code> transformation. I'm surprised that batching a <code>std::vector&lt;Tensor&gt;</code> (even by a pretty naive approach) would be slower than stacking together a batch of ndarrays (which implicitly happens when you feed the list), but perhaps there's something to be learned from the NumPy implementation?</p>\n<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1072079\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jsimsa\">@jsimsa</a> who has looked at batch performance in other contexts.</p>", "body_text": "I haven't had time to dig into this in depth, but I did notice that when I dial the batch size down to 1, the Dataset.from_generator() version is faster than using a feed_dict. This suggests that the overhead might be coming from the Dataset.batch() transformation. I'm surprised that batching a std::vector<Tensor> (even by a pretty naive approach) would be slower than stacking together a batch of ndarrays (which implicitly happens when you feed the list), but perhaps there's something to be learned from the NumPy implementation?\n/cc @jsimsa who has looked at batch performance in other contexts.", "body": "I haven't had time to dig into this in depth, but I did notice that when I dial the batch size down to 1, the `Dataset.from_generator()` version is faster than using a `feed_dict`. This suggests that the overhead might be coming from the `Dataset.batch()` transformation. I'm surprised that batching a `std::vector<Tensor>` (even by a pretty naive approach) would be slower than stacking together a batch of ndarrays (which implicitly happens when you feed the list), but perhaps there's something to be learned from the NumPy implementation?\r\n\r\n/cc @jsimsa who has looked at batch performance in other contexts. "}