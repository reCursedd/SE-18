{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/242808621", "html_url": "https://github.com/tensorflow/tensorflow/issues/4033#issuecomment-242808621", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4033", "id": 242808621, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjgwODYyMQ==", "user": {"login": "abhijayghildyal", "id": 11029633, "node_id": "MDQ6VXNlcjExMDI5NjMz", "avatar_url": "https://avatars2.githubusercontent.com/u/11029633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhijayghildyal", "html_url": "https://github.com/abhijayghildyal", "followers_url": "https://api.github.com/users/abhijayghildyal/followers", "following_url": "https://api.github.com/users/abhijayghildyal/following{/other_user}", "gists_url": "https://api.github.com/users/abhijayghildyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhijayghildyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhijayghildyal/subscriptions", "organizations_url": "https://api.github.com/users/abhijayghildyal/orgs", "repos_url": "https://api.github.com/users/abhijayghildyal/repos", "events_url": "https://api.github.com/users/abhijayghildyal/events{/privacy}", "received_events_url": "https://api.github.com/users/abhijayghildyal/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-26T18:07:04Z", "updated_at": "2016-08-26T18:07:04Z", "author_association": "NONE", "body_html": "<p>I made a simple experiment with deepMNIST for bench marking results. I made minimum changes to the codes mentioned in the TensorFlow documentation (deepMNIST and distributed tensorflow). I used two machines for running three tasks, machine 1 had ps task_index=0 and worker task_index=1, and machine 2 had worker task_index=0.</p>\n<pre><code>from tensorflow.examples.tutorials.mnist import input_data\nimport tensorflow as tf\nimport tempfile\nimport time\nimport numpy as np\n\n# Flags for defining the tf.train.ClusterSpec\ntf.app.flags.DEFINE_string(\"ps_hosts\", \"\", \"Comma-separated list of hostname:port pairs\")\ntf.app.flags.DEFINE_string(\"worker_hosts\", \"\",\"Comma-separated list of hostname:port pairs\")\ntf.app.flags.DEFINE_string(\"folder_no\", \"\", \"save summary in this folder\")\ntf.app.flags.DEFINE_string(\"job_name\", \"\", \"One of 'ps', 'worker'\")\ntf.app.flags.DEFINE_integer(\"task_index\", 0, \"Index of task within the job\")\ntf.app.flags.DEFINE_integer(\"epochs\", \"\", \"no of epochs\")\ntf.app.flags.DEFINE_string(\"weights_name\", \"\", \"weight file name\")\n\n\nFLAGS = tf.app.flags.FLAGS\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\ndef main(_):\n  ps_hosts = FLAGS.ps_hosts.split(\",\")\n  worker_hosts = FLAGS.worker_hosts.split(\",\")\n\n  # Create a cluster from the parameter server and worker hosts.\n  cluster = tf.train.ClusterSpec({\"ps\": ps_hosts, \"worker\": worker_hosts})\n\n  # Create and start a server for the local task.\n  server = tf.train.Server(cluster,\n                           job_name=FLAGS.job_name,\n                           task_index=FLAGS.task_index)\n\n  if FLAGS.job_name == \"ps\":\n    server.join()\n    with tf.device(\"/job:ps/task:0\"):\n      global_step = tf.Variable(0)\n      print global_step\n\n  elif FLAGS.job_name == \"worker\":\n\n    # Load data\n    mnist = input_data.read_data_sets('MNIST_data', one_hot=True)\n\n\n    # Assigns ops to the local worker by default.\n    with tf.device(tf.train.replica_device_setter(\n        worker_device=\"/job:worker/task:%d\" % FLAGS.task_index,\n        cluster=cluster)):\n\n      x = tf.placeholder(tf.float32, shape=[None, 784])\n      y_ = tf.placeholder(tf.float32, shape=[None, 10])\n\n      W = tf.Variable(tf.zeros([784,10]))\n      b = tf.Variable(tf.zeros([10]))\n\n      y = tf.nn.softmax(tf.matmul(x,W) + b)\n\n\n      # Build model...\n      # loss = 0.5\n\n      ##### deepMNIST code. Additions to the skeleton of distributed tensorflow code (taken from official documentation) #####\n      W_conv1 = weight_variable([5, 5, 1, 32])\n      b_conv1 = bias_variable([32])\n\n\n      x_image = tf.reshape(x, [-1,28,28,1])\n\n\n\n      h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\n      h_pool1 = max_pool_2x2(h_conv1)\n\n\n      W_conv2 = weight_variable([5, 5, 32, 64])\n      b_conv2 = bias_variable([64])\n\n      h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n      h_pool2 = max_pool_2x2(h_conv2)\n\n\n      W_fc1 = weight_variable([7 * 7 * 64, 1024])\n      b_fc1 = bias_variable([1024])\n\n      h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\n      h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n\n      keep_prob = tf.placeholder(tf.float32)\n      h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n\n      W_fc2 = weight_variable([1024, 10])\n      b_fc2 = bias_variable([10])\n\n      y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\n\n      cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y_conv), reduction_indices=[1]))\n\n      tf.scalar_summary('cross entropy', cross_entropy)\n\n      correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\n      accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n      tf.scalar_summary('accuracy', accuracy)\n\n      ##################################################################################\n      global_step = tf.Variable(0)\n\n      train_op = tf.train.AdagradOptimizer(0.01).minimize(\n          cross_entropy, global_step=global_step)\n          # loss, global_step=global_step)\n\n      saver = tf.train.Saver()\n      summary_op = tf.merge_all_summaries()\n      init_op = tf.initialize_all_variables()\n      merged = summary_op\n\n\n    # Create a \"supervisor\", which oversees the training process.\n    sv = tf.train.Supervisor(is_chief=(FLAGS.task_index == 0),\n                             init_op=init_op,\n                             summary_op=summary_op,\n                             saver=saver,\n                             global_step=global_step,\n                             save_model_secs=600)\n\n    # The supervisor takes care of session initialization, restoring from\n    # a checkpoint, and closing when done or an error occurs.\n    with sv.managed_session(server.target) as sess:\n      # Loop until the supervisor shuts down or 1000000 steps have completed.\n\n      summaries_dir = 'summaries/'\n\n      train_writer = tf.train.SummaryWriter(summaries_dir + FLAGS.folder_no + '/train', sess.graph)\n      test_writer = tf.train.SummaryWriter(summaries_dir + FLAGS.folder_no + '/test', sess.graph)\n\n      step=0\n      time_start = time.time()\n      while not sv.should_stop() and step &lt; FLAGS.epochs:\n        batch = mnist.train.next_batch(1000)\n        train_feed = {x: batch[0], y_: batch[1], keep_prob: 0.5}        \n\n        # Run a training step asynchronously.\n        _, step = sess.run([train_op, global_step], feed_dict=train_feed)\n        print \"step: \",step\n\n        summary, _ = sess.run([merged, train_op], train_feed)\n        train_writer.add_summary(summary, step)\n\n      time_end = time.time()\n      training_time = time_end - time_start\n      print(\"Training elapsed time: %f s\" % training_time)\n\n      np.savetxt(\"weights_dist_\"+FLAGS.weights_name+\".csv\", W_fc2.eval(session=sess), delimiter=\",\")\n\n\n      # Test\n      for i in xrange(10):\n        testSet = mnist.test.next_batch(50)\n        summary, acc = sess.run([merged, accuracy], feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n        test_writer.add_summary(summary, i)\n        print('Accuracy at step %s: %s' % (i, acc))\n\n\n    # Ask for all the services to stop.\n    sv.stop()\n\nif  __name__ == \"__main__\":\n  tf.app.run()\n</code></pre>\n<p>When i run the three tasks on three different machines, the error does not occur.</p>", "body_text": "I made a simple experiment with deepMNIST for bench marking results. I made minimum changes to the codes mentioned in the TensorFlow documentation (deepMNIST and distributed tensorflow). I used two machines for running three tasks, machine 1 had ps task_index=0 and worker task_index=1, and machine 2 had worker task_index=0.\nfrom tensorflow.examples.tutorials.mnist import input_data\nimport tensorflow as tf\nimport tempfile\nimport time\nimport numpy as np\n\n# Flags for defining the tf.train.ClusterSpec\ntf.app.flags.DEFINE_string(\"ps_hosts\", \"\", \"Comma-separated list of hostname:port pairs\")\ntf.app.flags.DEFINE_string(\"worker_hosts\", \"\",\"Comma-separated list of hostname:port pairs\")\ntf.app.flags.DEFINE_string(\"folder_no\", \"\", \"save summary in this folder\")\ntf.app.flags.DEFINE_string(\"job_name\", \"\", \"One of 'ps', 'worker'\")\ntf.app.flags.DEFINE_integer(\"task_index\", 0, \"Index of task within the job\")\ntf.app.flags.DEFINE_integer(\"epochs\", \"\", \"no of epochs\")\ntf.app.flags.DEFINE_string(\"weights_name\", \"\", \"weight file name\")\n\n\nFLAGS = tf.app.flags.FLAGS\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\ndef main(_):\n  ps_hosts = FLAGS.ps_hosts.split(\",\")\n  worker_hosts = FLAGS.worker_hosts.split(\",\")\n\n  # Create a cluster from the parameter server and worker hosts.\n  cluster = tf.train.ClusterSpec({\"ps\": ps_hosts, \"worker\": worker_hosts})\n\n  # Create and start a server for the local task.\n  server = tf.train.Server(cluster,\n                           job_name=FLAGS.job_name,\n                           task_index=FLAGS.task_index)\n\n  if FLAGS.job_name == \"ps\":\n    server.join()\n    with tf.device(\"/job:ps/task:0\"):\n      global_step = tf.Variable(0)\n      print global_step\n\n  elif FLAGS.job_name == \"worker\":\n\n    # Load data\n    mnist = input_data.read_data_sets('MNIST_data', one_hot=True)\n\n\n    # Assigns ops to the local worker by default.\n    with tf.device(tf.train.replica_device_setter(\n        worker_device=\"/job:worker/task:%d\" % FLAGS.task_index,\n        cluster=cluster)):\n\n      x = tf.placeholder(tf.float32, shape=[None, 784])\n      y_ = tf.placeholder(tf.float32, shape=[None, 10])\n\n      W = tf.Variable(tf.zeros([784,10]))\n      b = tf.Variable(tf.zeros([10]))\n\n      y = tf.nn.softmax(tf.matmul(x,W) + b)\n\n\n      # Build model...\n      # loss = 0.5\n\n      ##### deepMNIST code. Additions to the skeleton of distributed tensorflow code (taken from official documentation) #####\n      W_conv1 = weight_variable([5, 5, 1, 32])\n      b_conv1 = bias_variable([32])\n\n\n      x_image = tf.reshape(x, [-1,28,28,1])\n\n\n\n      h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\n      h_pool1 = max_pool_2x2(h_conv1)\n\n\n      W_conv2 = weight_variable([5, 5, 32, 64])\n      b_conv2 = bias_variable([64])\n\n      h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n      h_pool2 = max_pool_2x2(h_conv2)\n\n\n      W_fc1 = weight_variable([7 * 7 * 64, 1024])\n      b_fc1 = bias_variable([1024])\n\n      h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\n      h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n\n      keep_prob = tf.placeholder(tf.float32)\n      h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n\n      W_fc2 = weight_variable([1024, 10])\n      b_fc2 = bias_variable([10])\n\n      y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\n\n      cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y_conv), reduction_indices=[1]))\n\n      tf.scalar_summary('cross entropy', cross_entropy)\n\n      correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\n      accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n      tf.scalar_summary('accuracy', accuracy)\n\n      ##################################################################################\n      global_step = tf.Variable(0)\n\n      train_op = tf.train.AdagradOptimizer(0.01).minimize(\n          cross_entropy, global_step=global_step)\n          # loss, global_step=global_step)\n\n      saver = tf.train.Saver()\n      summary_op = tf.merge_all_summaries()\n      init_op = tf.initialize_all_variables()\n      merged = summary_op\n\n\n    # Create a \"supervisor\", which oversees the training process.\n    sv = tf.train.Supervisor(is_chief=(FLAGS.task_index == 0),\n                             init_op=init_op,\n                             summary_op=summary_op,\n                             saver=saver,\n                             global_step=global_step,\n                             save_model_secs=600)\n\n    # The supervisor takes care of session initialization, restoring from\n    # a checkpoint, and closing when done or an error occurs.\n    with sv.managed_session(server.target) as sess:\n      # Loop until the supervisor shuts down or 1000000 steps have completed.\n\n      summaries_dir = 'summaries/'\n\n      train_writer = tf.train.SummaryWriter(summaries_dir + FLAGS.folder_no + '/train', sess.graph)\n      test_writer = tf.train.SummaryWriter(summaries_dir + FLAGS.folder_no + '/test', sess.graph)\n\n      step=0\n      time_start = time.time()\n      while not sv.should_stop() and step < FLAGS.epochs:\n        batch = mnist.train.next_batch(1000)\n        train_feed = {x: batch[0], y_: batch[1], keep_prob: 0.5}        \n\n        # Run a training step asynchronously.\n        _, step = sess.run([train_op, global_step], feed_dict=train_feed)\n        print \"step: \",step\n\n        summary, _ = sess.run([merged, train_op], train_feed)\n        train_writer.add_summary(summary, step)\n\n      time_end = time.time()\n      training_time = time_end - time_start\n      print(\"Training elapsed time: %f s\" % training_time)\n\n      np.savetxt(\"weights_dist_\"+FLAGS.weights_name+\".csv\", W_fc2.eval(session=sess), delimiter=\",\")\n\n\n      # Test\n      for i in xrange(10):\n        testSet = mnist.test.next_batch(50)\n        summary, acc = sess.run([merged, accuracy], feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n        test_writer.add_summary(summary, i)\n        print('Accuracy at step %s: %s' % (i, acc))\n\n\n    # Ask for all the services to stop.\n    sv.stop()\n\nif  __name__ == \"__main__\":\n  tf.app.run()\n\nWhen i run the three tasks on three different machines, the error does not occur.", "body": "I made a simple experiment with deepMNIST for bench marking results. I made minimum changes to the codes mentioned in the TensorFlow documentation (deepMNIST and distributed tensorflow). I used two machines for running three tasks, machine 1 had ps task_index=0 and worker task_index=1, and machine 2 had worker task_index=0.\n\n```\nfrom tensorflow.examples.tutorials.mnist import input_data\nimport tensorflow as tf\nimport tempfile\nimport time\nimport numpy as np\n\n# Flags for defining the tf.train.ClusterSpec\ntf.app.flags.DEFINE_string(\"ps_hosts\", \"\", \"Comma-separated list of hostname:port pairs\")\ntf.app.flags.DEFINE_string(\"worker_hosts\", \"\",\"Comma-separated list of hostname:port pairs\")\ntf.app.flags.DEFINE_string(\"folder_no\", \"\", \"save summary in this folder\")\ntf.app.flags.DEFINE_string(\"job_name\", \"\", \"One of 'ps', 'worker'\")\ntf.app.flags.DEFINE_integer(\"task_index\", 0, \"Index of task within the job\")\ntf.app.flags.DEFINE_integer(\"epochs\", \"\", \"no of epochs\")\ntf.app.flags.DEFINE_string(\"weights_name\", \"\", \"weight file name\")\n\n\nFLAGS = tf.app.flags.FLAGS\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\ndef main(_):\n  ps_hosts = FLAGS.ps_hosts.split(\",\")\n  worker_hosts = FLAGS.worker_hosts.split(\",\")\n\n  # Create a cluster from the parameter server and worker hosts.\n  cluster = tf.train.ClusterSpec({\"ps\": ps_hosts, \"worker\": worker_hosts})\n\n  # Create and start a server for the local task.\n  server = tf.train.Server(cluster,\n                           job_name=FLAGS.job_name,\n                           task_index=FLAGS.task_index)\n\n  if FLAGS.job_name == \"ps\":\n    server.join()\n    with tf.device(\"/job:ps/task:0\"):\n      global_step = tf.Variable(0)\n      print global_step\n\n  elif FLAGS.job_name == \"worker\":\n\n    # Load data\n    mnist = input_data.read_data_sets('MNIST_data', one_hot=True)\n\n\n    # Assigns ops to the local worker by default.\n    with tf.device(tf.train.replica_device_setter(\n        worker_device=\"/job:worker/task:%d\" % FLAGS.task_index,\n        cluster=cluster)):\n\n      x = tf.placeholder(tf.float32, shape=[None, 784])\n      y_ = tf.placeholder(tf.float32, shape=[None, 10])\n\n      W = tf.Variable(tf.zeros([784,10]))\n      b = tf.Variable(tf.zeros([10]))\n\n      y = tf.nn.softmax(tf.matmul(x,W) + b)\n\n\n      # Build model...\n      # loss = 0.5\n\n      ##### deepMNIST code. Additions to the skeleton of distributed tensorflow code (taken from official documentation) #####\n      W_conv1 = weight_variable([5, 5, 1, 32])\n      b_conv1 = bias_variable([32])\n\n\n      x_image = tf.reshape(x, [-1,28,28,1])\n\n\n\n      h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\n      h_pool1 = max_pool_2x2(h_conv1)\n\n\n      W_conv2 = weight_variable([5, 5, 32, 64])\n      b_conv2 = bias_variable([64])\n\n      h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n      h_pool2 = max_pool_2x2(h_conv2)\n\n\n      W_fc1 = weight_variable([7 * 7 * 64, 1024])\n      b_fc1 = bias_variable([1024])\n\n      h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\n      h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n\n      keep_prob = tf.placeholder(tf.float32)\n      h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n\n      W_fc2 = weight_variable([1024, 10])\n      b_fc2 = bias_variable([10])\n\n      y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\n\n      cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y_conv), reduction_indices=[1]))\n\n      tf.scalar_summary('cross entropy', cross_entropy)\n\n      correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\n      accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n      tf.scalar_summary('accuracy', accuracy)\n\n      ##################################################################################\n      global_step = tf.Variable(0)\n\n      train_op = tf.train.AdagradOptimizer(0.01).minimize(\n          cross_entropy, global_step=global_step)\n          # loss, global_step=global_step)\n\n      saver = tf.train.Saver()\n      summary_op = tf.merge_all_summaries()\n      init_op = tf.initialize_all_variables()\n      merged = summary_op\n\n\n    # Create a \"supervisor\", which oversees the training process.\n    sv = tf.train.Supervisor(is_chief=(FLAGS.task_index == 0),\n                             init_op=init_op,\n                             summary_op=summary_op,\n                             saver=saver,\n                             global_step=global_step,\n                             save_model_secs=600)\n\n    # The supervisor takes care of session initialization, restoring from\n    # a checkpoint, and closing when done or an error occurs.\n    with sv.managed_session(server.target) as sess:\n      # Loop until the supervisor shuts down or 1000000 steps have completed.\n\n      summaries_dir = 'summaries/'\n\n      train_writer = tf.train.SummaryWriter(summaries_dir + FLAGS.folder_no + '/train', sess.graph)\n      test_writer = tf.train.SummaryWriter(summaries_dir + FLAGS.folder_no + '/test', sess.graph)\n\n      step=0\n      time_start = time.time()\n      while not sv.should_stop() and step < FLAGS.epochs:\n        batch = mnist.train.next_batch(1000)\n        train_feed = {x: batch[0], y_: batch[1], keep_prob: 0.5}        \n\n        # Run a training step asynchronously.\n        _, step = sess.run([train_op, global_step], feed_dict=train_feed)\n        print \"step: \",step\n\n        summary, _ = sess.run([merged, train_op], train_feed)\n        train_writer.add_summary(summary, step)\n\n      time_end = time.time()\n      training_time = time_end - time_start\n      print(\"Training elapsed time: %f s\" % training_time)\n\n      np.savetxt(\"weights_dist_\"+FLAGS.weights_name+\".csv\", W_fc2.eval(session=sess), delimiter=\",\")\n\n\n      # Test\n      for i in xrange(10):\n        testSet = mnist.test.next_batch(50)\n        summary, acc = sess.run([merged, accuracy], feed_dict={ x: testSet[0], y_: testSet[1], keep_prob: 1.0})\n        test_writer.add_summary(summary, i)\n        print('Accuracy at step %s: %s' % (i, acc))\n\n\n    # Ask for all the services to stop.\n    sv.stop()\n\nif  __name__ == \"__main__\":\n  tf.app.run()\n```\n\nWhen i run the three tasks on three different machines, the error does not occur.\n"}