{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/235882334", "html_url": "https://github.com/tensorflow/tensorflow/issues/3526#issuecomment-235882334", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3526", "id": 235882334, "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTg4MjMzNA==", "user": {"login": "adam-erickson", "id": 5751456, "node_id": "MDQ6VXNlcjU3NTE0NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5751456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adam-erickson", "html_url": "https://github.com/adam-erickson", "followers_url": "https://api.github.com/users/adam-erickson/followers", "following_url": "https://api.github.com/users/adam-erickson/following{/other_user}", "gists_url": "https://api.github.com/users/adam-erickson/gists{/gist_id}", "starred_url": "https://api.github.com/users/adam-erickson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adam-erickson/subscriptions", "organizations_url": "https://api.github.com/users/adam-erickson/orgs", "repos_url": "https://api.github.com/users/adam-erickson/repos", "events_url": "https://api.github.com/users/adam-erickson/events{/privacy}", "received_events_url": "https://api.github.com/users/adam-erickson/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-28T12:39:05Z", "updated_at": "2016-07-28T14:25:15Z", "author_association": "NONE", "body_html": "<p>It looks like the solution of <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> should work for the install with gcc 4.8.</p>\n<p>Since I'm not running Pascal architecture GPUs, but rather a node with four GeForce GTX Titan X GPUs, I ended up installing the latest CUDA 367.35 display drivers from ppa (the display drivers included with CUDA Toolkit 7.5 cause <code>nvidia-smi</code> to freeze on Ubuntu 16.04), CUDA Toolkit 7.5 from Ubuntu 16.04 LTS package management, and cuDNN 5.0.5 from the Nvidia site. I then built and ran the samples from source. One function appears to error in tests, but maybe that's because the samples are intended for Ubuntu 15.04 with cuDNN 4. I'm happily back to only the standard gcc now. TensorFlow is functioning well with the standard Python distribution. Here was my full process, after removing previous installations:</p>\n<p><strong>Recommended: Install OpenCL libraries</strong><br>\nUpdate list:<br>\n<code>apt-get update</code><br>\nInstall OpenCL libraries:<br>\n<code>apt-get install mesa-common-dev freeglut3-dev</code><br>\n<code>apt-get install libxmu-dev libxi-dev</code></p>\n<p><strong>Install CUDA Toolkit 7.5 and 367.xx display driver from Ubuntu 16.04 apt-get</strong><br>\nInstall Python dependencies:<br>\n<code>apt-get install python-pip python-dev</code><br>\nRemove existing CUDA installation:<br>\n<code>apt-get purge nvidia-*</code><br>\nInstall CUDA display driver 367.35:<br>\n<code>add-apt-repository ppa:graphics-drivers/ppa</code><br>\n<code>apt-get update</code><br>\n<code>apt-get install nvidia-367</code><br>\n<code>reboot</code><br>\nInstall CUDA Toolkit 7.5<br>\n<code>apt-get install nvidia-cuda-toolkit</code><br>\n<code>apt-get install nvidia-nsight</code><br>\n<code>apt-get install nvidia-profiler</code><br>\n<code>apt-get install libcupti-dev zliblg-dev</code><br>\nLink files:<br>\n<code>mkdir /usr/local/cuda</code><br>\n<code>ln -s /usr/lib/x86_64-linux-gnu/ lib64</code><br>\n<code>ln -s /usr/include/ include</code><br>\n<code>ln -s /usr/bin/ bin</code><br>\n<code>ln -s /usr/lib/x86_64-linux-gnu/ nvvm</code><br>\n<code>mkdir -p extras/CUPTI</code><br>\n<code>cd extras/CUPTI</code><br>\n<code>ln -s /usr/lib/x86_64-linux-gnu/ lib64</code><br>\n<code>ln -s /usr/include/ include</code></p>\n<p><strong>Install cuDNN 5.0.5</strong><br>\n<code>cd /opt</code><br>\nDownload cuDNN 5.0.5 from: [(https://developer.nvidia.com/rdp/cudnn-download)]<br>\n<code>tar xvf cudnn-8.0-linux-x64-v5.0-ga.tar</code><br>\nAdd to <code>~/.bashrc</code>: <code>export LD_LIBRARY_PATH=/opt/cuda:$LD_LIBRARY_PATH</code><br>\nCopy cudnn files to the default CUDA directories and set permissions:<br>\n<code>cp cuda/include/cudnn.h /usr/local/cuda/include/</code><br>\n<code>cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/</code><br>\n<code>chmod a+r /usr/local/cuda/include/cudnn.h</code><br>\n<code>chmod a+r /usr/local/cuda/lib64/libcudnn*</code><br>\nDownload and run the CUDA Toolkit 7.5 samples:<br>\nGet the full run file here: [https://developer.nvidia.com/cuda-toolkit]<br>\nExtract to path:<br>\n<code>mkdir /opt/cuda/cudatoolkit</code><br>\n<code>sh cuda_7.5.xxx_linux_64.run -extract=/opt/cuda/cudatoolkit</code><br>\n<code>cd /opt/cuda/cudatoolkit</code><br>\nInstall only the samples to /opt/cuda/samples:<br>\n<code>sh cuda-samples-linux-7.5.xx-xxxx.run</code><br>\n<code>cd ..</code><br>\n<code>rm -rf cudatoolkit</code><br>\nRun the Device Query tool:<br>\n<code>cd samples/1_Utilities/deviceQuery</code><br>\n<code>make</code><br>\n<code>./deviceQuery</code><br>\nRun the bandwidth test:<br>\n<code>cd /opt/cuda/samples/1_Utilities/bandwidthTest</code><br>\n<code>make</code><br>\n<code>./bandwidthTest</code><br>\nRun the n-body sample with nvprof:<br>\n<code>cd ../..</code><br>\n<code>cd 5_Simulations/nbody</code><br>\n<code>make</code><br>\n<code>nvprof ./nbody -benchmark -numdevices=4</code><br>\n<code>nvprof --print-gpu-trace ./nbody -benchmark -numdevices=4</code></p>\n<p><strong>Install TensorFlow from binary for CUDA Toolkit 7.5</strong><br>\n-Set new variable and install:<br>\n<code>cd /opt</code><br>\n<code>export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.9.0-cp27-none-linux_x86_64.whl</code><br>\n<code>pip install --upgrade $TF_BINARY_URL</code></p>", "body_text": "It looks like the solution of @yaroslavvb should work for the install with gcc 4.8.\nSince I'm not running Pascal architecture GPUs, but rather a node with four GeForce GTX Titan X GPUs, I ended up installing the latest CUDA 367.35 display drivers from ppa (the display drivers included with CUDA Toolkit 7.5 cause nvidia-smi to freeze on Ubuntu 16.04), CUDA Toolkit 7.5 from Ubuntu 16.04 LTS package management, and cuDNN 5.0.5 from the Nvidia site. I then built and ran the samples from source. One function appears to error in tests, but maybe that's because the samples are intended for Ubuntu 15.04 with cuDNN 4. I'm happily back to only the standard gcc now. TensorFlow is functioning well with the standard Python distribution. Here was my full process, after removing previous installations:\nRecommended: Install OpenCL libraries\nUpdate list:\napt-get update\nInstall OpenCL libraries:\napt-get install mesa-common-dev freeglut3-dev\napt-get install libxmu-dev libxi-dev\nInstall CUDA Toolkit 7.5 and 367.xx display driver from Ubuntu 16.04 apt-get\nInstall Python dependencies:\napt-get install python-pip python-dev\nRemove existing CUDA installation:\napt-get purge nvidia-*\nInstall CUDA display driver 367.35:\nadd-apt-repository ppa:graphics-drivers/ppa\napt-get update\napt-get install nvidia-367\nreboot\nInstall CUDA Toolkit 7.5\napt-get install nvidia-cuda-toolkit\napt-get install nvidia-nsight\napt-get install nvidia-profiler\napt-get install libcupti-dev zliblg-dev\nLink files:\nmkdir /usr/local/cuda\nln -s /usr/lib/x86_64-linux-gnu/ lib64\nln -s /usr/include/ include\nln -s /usr/bin/ bin\nln -s /usr/lib/x86_64-linux-gnu/ nvvm\nmkdir -p extras/CUPTI\ncd extras/CUPTI\nln -s /usr/lib/x86_64-linux-gnu/ lib64\nln -s /usr/include/ include\nInstall cuDNN 5.0.5\ncd /opt\nDownload cuDNN 5.0.5 from: [(https://developer.nvidia.com/rdp/cudnn-download)]\ntar xvf cudnn-8.0-linux-x64-v5.0-ga.tar\nAdd to ~/.bashrc: export LD_LIBRARY_PATH=/opt/cuda:$LD_LIBRARY_PATH\nCopy cudnn files to the default CUDA directories and set permissions:\ncp cuda/include/cudnn.h /usr/local/cuda/include/\ncp cuda/lib64/libcudnn* /usr/local/cuda/lib64/\nchmod a+r /usr/local/cuda/include/cudnn.h\nchmod a+r /usr/local/cuda/lib64/libcudnn*\nDownload and run the CUDA Toolkit 7.5 samples:\nGet the full run file here: [https://developer.nvidia.com/cuda-toolkit]\nExtract to path:\nmkdir /opt/cuda/cudatoolkit\nsh cuda_7.5.xxx_linux_64.run -extract=/opt/cuda/cudatoolkit\ncd /opt/cuda/cudatoolkit\nInstall only the samples to /opt/cuda/samples:\nsh cuda-samples-linux-7.5.xx-xxxx.run\ncd ..\nrm -rf cudatoolkit\nRun the Device Query tool:\ncd samples/1_Utilities/deviceQuery\nmake\n./deviceQuery\nRun the bandwidth test:\ncd /opt/cuda/samples/1_Utilities/bandwidthTest\nmake\n./bandwidthTest\nRun the n-body sample with nvprof:\ncd ../..\ncd 5_Simulations/nbody\nmake\nnvprof ./nbody -benchmark -numdevices=4\nnvprof --print-gpu-trace ./nbody -benchmark -numdevices=4\nInstall TensorFlow from binary for CUDA Toolkit 7.5\n-Set new variable and install:\ncd /opt\nexport TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.9.0-cp27-none-linux_x86_64.whl\npip install --upgrade $TF_BINARY_URL", "body": "It looks like the solution of @yaroslavvb should work for the install with gcc 4.8.\n\nSince I'm not running Pascal architecture GPUs, but rather a node with four GeForce GTX Titan X GPUs, I ended up installing the latest CUDA 367.35 display drivers from ppa (the display drivers included with CUDA Toolkit 7.5 cause `nvidia-smi` to freeze on Ubuntu 16.04), CUDA Toolkit 7.5 from Ubuntu 16.04 LTS package management, and cuDNN 5.0.5 from the Nvidia site. I then built and ran the samples from source. One function appears to error in tests, but maybe that's because the samples are intended for Ubuntu 15.04 with cuDNN 4. I'm happily back to only the standard gcc now. TensorFlow is functioning well with the standard Python distribution. Here was my full process, after removing previous installations:\n\n**Recommended: Install OpenCL libraries**\nUpdate list:\n    `apt-get update`\nInstall OpenCL libraries:\n    `apt-get install mesa-common-dev freeglut3-dev`\n    `apt-get install libxmu-dev libxi-dev`\n\n**Install CUDA Toolkit 7.5 and 367.xx display driver from Ubuntu 16.04 apt-get**\nInstall Python dependencies:\n    `apt-get install python-pip python-dev`\nRemove existing CUDA installation:\n    `apt-get purge nvidia-*`\nInstall CUDA display driver 367.35:\n    `add-apt-repository ppa:graphics-drivers/ppa`\n    `apt-get update`\n    `apt-get install nvidia-367`\n    `reboot`\nInstall CUDA Toolkit 7.5\n    `apt-get install nvidia-cuda-toolkit`\n    `apt-get install nvidia-nsight`\n    `apt-get install nvidia-profiler`\n    `apt-get install libcupti-dev zliblg-dev`\nLink files:\n    `mkdir /usr/local/cuda`\n    `ln -s /usr/lib/x86_64-linux-gnu/ lib64`\n    `ln -s /usr/include/ include`\n    `ln -s /usr/bin/ bin`\n    `ln -s /usr/lib/x86_64-linux-gnu/ nvvm`\n    `mkdir -p extras/CUPTI`\n    `cd extras/CUPTI`\n    `ln -s /usr/lib/x86_64-linux-gnu/ lib64`\n    `ln -s /usr/include/ include`\n\n**Install cuDNN 5.0.5**\n    `cd /opt`\n    Download cuDNN 5.0.5 from: [(https://developer.nvidia.com/rdp/cudnn-download)]\n    `tar xvf cudnn-8.0-linux-x64-v5.0-ga.tar`\n    Add to `~/.bashrc`: `export LD_LIBRARY_PATH=/opt/cuda:$LD_LIBRARY_PATH`\nCopy cudnn files to the default CUDA directories and set permissions:\n    `cp cuda/include/cudnn.h /usr/local/cuda/include/`\n    `cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/`\n    `chmod a+r /usr/local/cuda/include/cudnn.h`\n    `chmod a+r /usr/local/cuda/lib64/libcudnn*`\nDownload and run the CUDA Toolkit 7.5 samples:\n    Get the full run file here: [https://developer.nvidia.com/cuda-toolkit]\nExtract to path:\n    `mkdir /opt/cuda/cudatoolkit`\n    `sh cuda_7.5.xxx_linux_64.run -extract=/opt/cuda/cudatoolkit`\n    `cd /opt/cuda/cudatoolkit`\nInstall only the samples to /opt/cuda/samples:\n        `sh cuda-samples-linux-7.5.xx-xxxx.run`\n    `cd ..`\n    `rm -rf cudatoolkit`\nRun the Device Query tool:\n    `cd samples/1_Utilities/deviceQuery`\n    `make`\n    `./deviceQuery`\nRun the bandwidth test:\n    `cd /opt/cuda/samples/1_Utilities/bandwidthTest`\n    `make`\n    `./bandwidthTest`\nRun the n-body sample with nvprof:\n    `cd ../..`\n    `cd 5_Simulations/nbody`\n    `make`\n    `nvprof ./nbody -benchmark -numdevices=4`\n    `nvprof --print-gpu-trace ./nbody -benchmark -numdevices=4`\n\n**Install TensorFlow from binary for CUDA Toolkit 7.5**\n-Set new variable and install:\n    `cd /opt`\n    `export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.9.0-cp27-none-linux_x86_64.whl`\n    `pip install --upgrade $TF_BINARY_URL`\n"}