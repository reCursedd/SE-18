{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280786193", "html_url": "https://github.com/tensorflow/tensorflow/issues/7477#issuecomment-280786193", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7477", "id": 280786193, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDc4NjE5Mw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-17T22:39:35Z", "updated_at": "2017-02-17T22:39:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm not sure what's a possible action is here... or what the utility of a new class hierarchy would be. There's already a way to register serialization and deserialization functions for custom graph-collection objects using <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/ops.py#L4219\"><code>register_proto_function()</code></a>, so perhaps you could use that? I don't think there's any additional magic we can bring for your <code>GeneratorRunner</code> since we don't have (AFAIK) a standard way to serialize a Python generator.</p>\n<p>(As an aside, we're trying to find ways to reduce the need for queue runners, but they're in the API for 1.0, so they'll be around for a while but I doubt we'll invest much effort in improving them.)</p>", "body_text": "I'm not sure what's a possible action is here... or what the utility of a new class hierarchy would be. There's already a way to register serialization and deserialization functions for custom graph-collection objects using register_proto_function(), so perhaps you could use that? I don't think there's any additional magic we can bring for your GeneratorRunner since we don't have (AFAIK) a standard way to serialize a Python generator.\n(As an aside, we're trying to find ways to reduce the need for queue runners, but they're in the API for 1.0, so they'll be around for a while but I doubt we'll invest much effort in improving them.)", "body": "I'm not sure what's a possible action is here... or what the utility of a new class hierarchy would be. There's already a way to register serialization and deserialization functions for custom graph-collection objects using [`register_proto_function()`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/ops.py#L4219), so perhaps you could use that? I don't think there's any additional magic we can bring for your `GeneratorRunner` since we don't have (AFAIK) a standard way to serialize a Python generator.\r\n\r\n(As an aside, we're trying to find ways to reduce the need for queue runners, but they're in the API for 1.0, so they'll be around for a while but I doubt we'll invest much effort in improving them.)"}