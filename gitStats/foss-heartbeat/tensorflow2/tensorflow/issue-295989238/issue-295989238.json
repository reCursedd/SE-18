{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16898", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16898/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16898/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16898/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16898", "id": 295989238, "node_id": "MDU6SXNzdWUyOTU5ODkyMzg=", "number": 16898, "title": "Tensorflow build with MKL-DNN produces garbage results", "user": {"login": "ikizhvatov", "id": 91335, "node_id": "MDQ6VXNlcjkxMzM1", "avatar_url": "https://avatars0.githubusercontent.com/u/91335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ikizhvatov", "html_url": "https://github.com/ikizhvatov", "followers_url": "https://api.github.com/users/ikizhvatov/followers", "following_url": "https://api.github.com/users/ikizhvatov/following{/other_user}", "gists_url": "https://api.github.com/users/ikizhvatov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ikizhvatov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ikizhvatov/subscriptions", "organizations_url": "https://api.github.com/users/ikizhvatov/orgs", "repos_url": "https://api.github.com/users/ikizhvatov/repos", "events_url": "https://api.github.com/users/ikizhvatov/events{/privacy}", "received_events_url": "https://api.github.com/users/ikizhvatov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-02-09T19:42:43Z", "updated_at": "2018-04-28T09:27:06Z", "closed_at": "2018-04-28T09:27:06Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes (running a keras example)</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.6.0-rc0-0-gaaf367e, 1.6.0-rc0</li>\n<li><strong>Python version</strong>: 3.6.4 (Anaconda)</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.10.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 5.4.0 20160609</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>: NA</li>\n<li><strong>Exact command to reproduce</strong>:  see below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I have built Tensorflow 1.6.0-rc0 from source in Ubuntu 16.04 with MKL-DNN support following <a href=\"https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel_mkl_dnn\" rel=\"nofollow\">this guide</a>. The build proceeds without any problem. Testing it with keras 2.1.3 on a simple convnet from <a href=\"https://github.com/fchollet/deep-learning-with-python-notebooks/blob/master/5.2-using-convnets-with-small-datasets.ipynb\">this example</a> \"as is\" is two times slower than with the non-MKL build.</p>\n<p>Now, tuning the MKL parameters as recommended in <a href=\"https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel_mkl_dnn\" rel=\"nofollow\">the guide</a> leads to almost 2 times speedup over the non-MKL build. But produces complete nonsense in terms of accuracy (and loss):</p>\n<p><a href=\"https://i.stack.imgur.com/7EUmX.png\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/7077c445ef33de7b34ce41bce68f79477b128632/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f3745556d582e706e67\" alt=\"Erroneous results from Tensorflow MKL-DNN build\" data-canonical-src=\"https://i.stack.imgur.com/7EUmX.png\" style=\"max-width:100%;\"></a></p>\n<p>This comes with no errors or warnings from the console. The CPU is an i7-4790K.</p>\n<p>For reference, results obtained from a run without tuning the MKL parameters are as expected:</p>\n<p><a href=\"https://i.stack.imgur.com/8s8jn.png\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/31925d3d91e9e9ef3d2f693e074df9ea565eb1fb/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f3873386a6e2e706e67\" alt=\"Correct results from Tensorflow\" data-canonical-src=\"https://i.stack.imgur.com/8s8jn.png\" style=\"max-width:100%;\"></a></p>\n<h3>Source code / logs</h3>\n<p>The MKL parameters were tuned as follows:</p>\n<pre><code>from keras import backend as K\nK.set_session(K.tf.Session(config=K.tf.ConfigProto(inter_op_parallelism_threads=1)))\nos.environ[\"KMP_BLOCKTIME\"] = \"0\"\nos.environ[\"KMP_AFFINITY\"] = \"granularity=fine,verbose,compact,1,0\"\n</code></pre>\n<p>and following settings were printed in the console:</p>\n<pre><code>OMP: Info #209: KMP_AFFINITY: decoding x2APIC ids.\nOMP: Info #207: KMP_AFFINITY: Affinity capable, using global cpuid leaf 11 info\nOMP: Info #154: KMP_AFFINITY: Initial OS proc set respected: {0,1,2,3,4,5,6,7}\nOMP: Info #156: KMP_AFFINITY: 8 available OS procs\nOMP: Info #157: KMP_AFFINITY: Uniform topology\nOMP: Info #179: KMP_AFFINITY: 1 packages x 4 cores/pkg x 2 threads/core (4 total cores)\nOMP: Info #211: KMP_AFFINITY: OS proc to physical thread map:\nOMP: Info #171: KMP_AFFINITY: OS proc 0 maps to package 0 core 0 thread 0 \nOMP: Info #171: KMP_AFFINITY: OS proc 4 maps to package 0 core 0 thread 1 \nOMP: Info #171: KMP_AFFINITY: OS proc 1 maps to package 0 core 1 thread 0 \nOMP: Info #171: KMP_AFFINITY: OS proc 5 maps to package 0 core 1 thread 1 \nOMP: Info #171: KMP_AFFINITY: OS proc 2 maps to package 0 core 2 thread 0 \nOMP: Info #171: KMP_AFFINITY: OS proc 6 maps to package 0 core 2 thread 1 \nOMP: Info #171: KMP_AFFINITY: OS proc 3 maps to package 0 core 3 thread 0 \nOMP: Info #171: KMP_AFFINITY: OS proc 7 maps to package 0 core 3 thread 1 \nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5323 thread 0 bound to OS proc set {0}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5334 thread 1 bound to OS proc set {1}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5335 thread 2 bound to OS proc set {2}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5336 thread 3 bound to OS proc set {3}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5337 thread 4 bound to OS proc set {4}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5338 thread 5 bound to OS proc set {5}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5339 thread 6 bound to OS proc set {6}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5340 thread 7 bound to OS proc set {7}\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes (running a keras example)\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): v1.6.0-rc0-0-gaaf367e, 1.6.0-rc0\nPython version: 3.6.4 (Anaconda)\nBazel version (if compiling from source): 0.10.0\nGCC/Compiler version (if compiling from source): 5.4.0 20160609\nCUDA/cuDNN version: NA\nGPU model and memory: NA\nExact command to reproduce:  see below\n\nDescribe the problem\nI have built Tensorflow 1.6.0-rc0 from source in Ubuntu 16.04 with MKL-DNN support following this guide. The build proceeds without any problem. Testing it with keras 2.1.3 on a simple convnet from this example \"as is\" is two times slower than with the non-MKL build.\nNow, tuning the MKL parameters as recommended in the guide leads to almost 2 times speedup over the non-MKL build. But produces complete nonsense in terms of accuracy (and loss):\n\nThis comes with no errors or warnings from the console. The CPU is an i7-4790K.\nFor reference, results obtained from a run without tuning the MKL parameters are as expected:\n\nSource code / logs\nThe MKL parameters were tuned as follows:\nfrom keras import backend as K\nK.set_session(K.tf.Session(config=K.tf.ConfigProto(inter_op_parallelism_threads=1)))\nos.environ[\"KMP_BLOCKTIME\"] = \"0\"\nos.environ[\"KMP_AFFINITY\"] = \"granularity=fine,verbose,compact,1,0\"\n\nand following settings were printed in the console:\nOMP: Info #209: KMP_AFFINITY: decoding x2APIC ids.\nOMP: Info #207: KMP_AFFINITY: Affinity capable, using global cpuid leaf 11 info\nOMP: Info #154: KMP_AFFINITY: Initial OS proc set respected: {0,1,2,3,4,5,6,7}\nOMP: Info #156: KMP_AFFINITY: 8 available OS procs\nOMP: Info #157: KMP_AFFINITY: Uniform topology\nOMP: Info #179: KMP_AFFINITY: 1 packages x 4 cores/pkg x 2 threads/core (4 total cores)\nOMP: Info #211: KMP_AFFINITY: OS proc to physical thread map:\nOMP: Info #171: KMP_AFFINITY: OS proc 0 maps to package 0 core 0 thread 0 \nOMP: Info #171: KMP_AFFINITY: OS proc 4 maps to package 0 core 0 thread 1 \nOMP: Info #171: KMP_AFFINITY: OS proc 1 maps to package 0 core 1 thread 0 \nOMP: Info #171: KMP_AFFINITY: OS proc 5 maps to package 0 core 1 thread 1 \nOMP: Info #171: KMP_AFFINITY: OS proc 2 maps to package 0 core 2 thread 0 \nOMP: Info #171: KMP_AFFINITY: OS proc 6 maps to package 0 core 2 thread 1 \nOMP: Info #171: KMP_AFFINITY: OS proc 3 maps to package 0 core 3 thread 0 \nOMP: Info #171: KMP_AFFINITY: OS proc 7 maps to package 0 core 3 thread 1 \nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5323 thread 0 bound to OS proc set {0}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5334 thread 1 bound to OS proc set {1}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5335 thread 2 bound to OS proc set {2}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5336 thread 3 bound to OS proc set {3}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5337 thread 4 bound to OS proc set {4}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5338 thread 5 bound to OS proc set {5}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5339 thread 6 bound to OS proc set {6}\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5340 thread 7 bound to OS proc set {7}", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes (running a keras example)\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: v1.6.0-rc0-0-gaaf367e, 1.6.0-rc0\r\n- **Python version**: 3.6.4 (Anaconda)\r\n- **Bazel version (if compiling from source)**: 0.10.0\r\n- **GCC/Compiler version (if compiling from source)**: 5.4.0 20160609\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**: NA\r\n- **Exact command to reproduce**:  see below\r\n\r\n### Describe the problem\r\nI have built Tensorflow 1.6.0-rc0 from source in Ubuntu 16.04 with MKL-DNN support following [this guide][1]. The build proceeds without any problem. Testing it with keras 2.1.3 on a simple convnet from [this example][2] \"as is\" is two times slower than with the non-MKL build.\r\n\r\nNow, tuning the MKL parameters as recommended in [the guide][1] leads to almost 2 times speedup over the non-MKL build. But produces complete nonsense in terms of accuracy (and loss):\r\n\r\n[![Erroneous results from Tensorflow MKL-DNN build][3]][3]\r\n\r\nThis comes with no errors or warnings from the console. The CPU is an i7-4790K.\r\n\r\nFor reference, results obtained from a run without tuning the MKL parameters are as expected:\r\n\r\n[![Correct results from Tensorflow][4]][4]\r\n\r\n  [1]: https://www.tensorflow.org/performance/performance_guide#tensorflow_with_intel_mkl_dnn\r\n  [2]: https://github.com/fchollet/deep-learning-with-python-notebooks/blob/master/5.2-using-convnets-with-small-datasets.ipynb\r\n  [3]: https://i.stack.imgur.com/7EUmX.png\r\n  [4]: https://i.stack.imgur.com/8s8jn.png\r\n\r\n### Source code / logs\r\nThe MKL parameters were tuned as follows:\r\n~~~\r\nfrom keras import backend as K\r\nK.set_session(K.tf.Session(config=K.tf.ConfigProto(inter_op_parallelism_threads=1)))\r\nos.environ[\"KMP_BLOCKTIME\"] = \"0\"\r\nos.environ[\"KMP_AFFINITY\"] = \"granularity=fine,verbose,compact,1,0\"\r\n~~~\r\nand following settings were printed in the console:\r\n~~~\r\nOMP: Info #209: KMP_AFFINITY: decoding x2APIC ids.\r\nOMP: Info #207: KMP_AFFINITY: Affinity capable, using global cpuid leaf 11 info\r\nOMP: Info #154: KMP_AFFINITY: Initial OS proc set respected: {0,1,2,3,4,5,6,7}\r\nOMP: Info #156: KMP_AFFINITY: 8 available OS procs\r\nOMP: Info #157: KMP_AFFINITY: Uniform topology\r\nOMP: Info #179: KMP_AFFINITY: 1 packages x 4 cores/pkg x 2 threads/core (4 total cores)\r\nOMP: Info #211: KMP_AFFINITY: OS proc to physical thread map:\r\nOMP: Info #171: KMP_AFFINITY: OS proc 0 maps to package 0 core 0 thread 0 \r\nOMP: Info #171: KMP_AFFINITY: OS proc 4 maps to package 0 core 0 thread 1 \r\nOMP: Info #171: KMP_AFFINITY: OS proc 1 maps to package 0 core 1 thread 0 \r\nOMP: Info #171: KMP_AFFINITY: OS proc 5 maps to package 0 core 1 thread 1 \r\nOMP: Info #171: KMP_AFFINITY: OS proc 2 maps to package 0 core 2 thread 0 \r\nOMP: Info #171: KMP_AFFINITY: OS proc 6 maps to package 0 core 2 thread 1 \r\nOMP: Info #171: KMP_AFFINITY: OS proc 3 maps to package 0 core 3 thread 0 \r\nOMP: Info #171: KMP_AFFINITY: OS proc 7 maps to package 0 core 3 thread 1 \r\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5323 thread 0 bound to OS proc set {0}\r\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5334 thread 1 bound to OS proc set {1}\r\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5335 thread 2 bound to OS proc set {2}\r\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5336 thread 3 bound to OS proc set {3}\r\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5337 thread 4 bound to OS proc set {4}\r\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5338 thread 5 bound to OS proc set {5}\r\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5339 thread 6 bound to OS proc set {6}\r\nOMP: Info #247: KMP_AFFINITY: pid 5271 tid 5340 thread 7 bound to OS proc set {7}\r\n~~~"}