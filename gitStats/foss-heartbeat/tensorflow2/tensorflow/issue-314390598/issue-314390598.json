{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18528", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18528/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18528/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18528/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18528", "id": 314390598, "node_id": "MDU6SXNzdWUzMTQzOTA1OTg=", "number": 18528, "title": "Gradient Inconsistency ", "user": {"login": "ming-c", "id": 24259860, "node_id": "MDQ6VXNlcjI0MjU5ODYw", "avatar_url": "https://avatars2.githubusercontent.com/u/24259860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ming-c", "html_url": "https://github.com/ming-c", "followers_url": "https://api.github.com/users/ming-c/followers", "following_url": "https://api.github.com/users/ming-c/following{/other_user}", "gists_url": "https://api.github.com/users/ming-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/ming-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ming-c/subscriptions", "organizations_url": "https://api.github.com/users/ming-c/orgs", "repos_url": "https://api.github.com/users/ming-c/repos", "events_url": "https://api.github.com/users/ming-c/events{/privacy}", "received_events_url": "https://api.github.com/users/ming-c/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-04-15T06:43:03Z", "updated_at": "2018-06-10T18:33:45Z", "closed_at": "2018-06-10T18:33:45Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: <em>No</em></li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: <em>Linux Ubuntu 14.04.5</em></li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: <em>pip install from binary</em></li>\n<li><strong>TensorFlow version (use command below)</strong>: <em>v1.4.0-19-ga52c8d9 1.4.1</em></li>\n<li><strong>Python version</strong>: <em>Python3.5 (Anaconda)</em></li>\n<li><strong>Bazel version (if compiling from source)</strong>: <em>N/A</em></li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: <em>N/A</em></li>\n<li><strong>CUDA/cuDNN version</strong>: <em>CUDA-8.0</em></li>\n<li><strong>GPU model and memory</strong>: <em>GeForce GTX 1070(8GB) &amp; GeForce GTX 770(4GB)</em></li>\n<li><strong>Exact command to reproduce</strong>: <em>N/A</em></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When use operation <code>tf.transpose()</code>, <code>tf.gather()</code>, <code>tf.cholesky()</code> all together in a row over instance of <code>tf.Variable()</code>, the backward gradient computation may seems inconsistent. By using 'inconsistent', I mean that after run the same script multiple times with fixed random seeds, the computed gradient of <strong>result of <code>tf.cholesky()</code></strong> over <strong>input of <code>tf.transpose()</code></strong> are not always identical.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nnp.random.seed(<span class=\"pl-c1\">1024</span>)\ntf.set_random_seed(<span class=\"pl-c1\">1024</span>)\n\nN <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> indices for `tf.gather()`</span>\nindices_for_gather <span class=\"pl-k\">=</span> tf.constant(np.concatenate((np.zeros(N), np.ones(N))).reshape(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,).astype(np.int32))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> build a 2-by-2 PSD matrix as `param` for 'tf.gather()'</span>\nW <span class=\"pl-k\">=</span> tf.constant(np.random.rand(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nW <span class=\"pl-k\">=</span> tf.Variable(W)\n\nPSD2x2 <span class=\"pl-k\">=</span> tf.matmul(W, W, <span class=\"pl-v\">transpose_b</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> do the `tf.gather()`</span>\nM_temp <span class=\"pl-k\">=</span> tf.gather(PSD2x2, indices_for_gather)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Then transpose the M_Temp and tf.gather() again (to ensure the result is a PSD for cholesky)</span>\nM_temp_T <span class=\"pl-k\">=</span> tf.transpose(M_temp)\n\n<span class=\"pl-c1\">PSD</span> <span class=\"pl-k\">=</span> tf.gather(M_temp_T, indices_for_gather) <span class=\"pl-k\">+</span> tf.eye(<span class=\"pl-c1\">2</span><span class=\"pl-k\">*</span>N, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">0.01</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> cholesky</span>\nL <span class=\"pl-k\">=</span> tf.cholesky(<span class=\"pl-c1\">PSD</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> compute the gradient of `L` over `M_temp`</span>\ngrad <span class=\"pl-k\">=</span> tf.gradients(L, M_temp)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> build a session and compute the gradient</span>\nconfig <span class=\"pl-k\">=</span> tf.ConfigProto()\nconfig.gpu_options.allow_growth <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\nresults <span class=\"pl-k\">=</span> []\n<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config) <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer())\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n        result <span class=\"pl-k\">=</span> sess.run(grad)\n        results.append(result[<span class=\"pl-c1\">0</span>]) \n        \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> check the results are whether identical or not</span>\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">len</span>(results) <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>): \n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(results[i], np.ndarray):\n        <span class=\"pl-c1\">print</span>(np.all(np.equal(results[i], results[i<span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span>])))\n    <span class=\"pl-k\">else</span>:\n        <span class=\"pl-c1\">print</span>(np.all(np.equal(results[i].values, results[i<span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span>].values)))</pre></div>\n<p>The output result is</p>\n<pre><code>False\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n</code></pre>\n<p>If I comment the line <code>W = tf.Variable(W)</code> making the <code>W</code> a constant tensor, the results are ideally all <code>True</code>. And I've also tried to compute the gradient of<code>L</code> over <code>M_temp_T</code> and <code>PSD</code>, both of them are all <code>True</code>. So I think the problem lies in the using of <code>tf.transpose()</code>, <code>tf.gather()</code>, <code>tf.cholesky()</code> all together over instance of <code>tf.Variable()</code>.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04.5\nTensorFlow installed from (source or binary): pip install from binary\nTensorFlow version (use command below): v1.4.0-19-ga52c8d9 1.4.1\nPython version: Python3.5 (Anaconda)\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: CUDA-8.0\nGPU model and memory: GeForce GTX 1070(8GB) & GeForce GTX 770(4GB)\nExact command to reproduce: N/A\n\nDescribe the problem\nWhen use operation tf.transpose(), tf.gather(), tf.cholesky() all together in a row over instance of tf.Variable(), the backward gradient computation may seems inconsistent. By using 'inconsistent', I mean that after run the same script multiple times with fixed random seeds, the computed gradient of result of tf.cholesky() over input of tf.transpose() are not always identical.\nSource code / logs\nimport tensorflow as tf\nimport numpy as np\n\nnp.random.seed(1024)\ntf.set_random_seed(1024)\n\nN = 10\n\n# indices for `tf.gather()`\nindices_for_gather = tf.constant(np.concatenate((np.zeros(N), np.ones(N))).reshape(-1,).astype(np.int32))\n\n# build a 2-by-2 PSD matrix as `param` for 'tf.gather()'\nW = tf.constant(np.random.rand(2, 1), dtype=tf.float32)\nW = tf.Variable(W)\n\nPSD2x2 = tf.matmul(W, W, transpose_b=True)\n\n# do the `tf.gather()`\nM_temp = tf.gather(PSD2x2, indices_for_gather)\n\n# Then transpose the M_Temp and tf.gather() again (to ensure the result is a PSD for cholesky)\nM_temp_T = tf.transpose(M_temp)\n\nPSD = tf.gather(M_temp_T, indices_for_gather) + tf.eye(2*N, dtype=tf.float32) * 0.01\n\n# cholesky\nL = tf.cholesky(PSD)\n\n# compute the gradient of `L` over `M_temp`\ngrad = tf.gradients(L, M_temp)\n\n# build a session and compute the gradient\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True\nresults = []\nwith tf.Session(config=config) as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(10):\n        result = sess.run(grad)\n        results.append(result[0]) \n        \n# check the results are whether identical or not\nfor i in range(len(results) - 1): \n    if isinstance(results[i], np.ndarray):\n        print(np.all(np.equal(results[i], results[i+1])))\n    else:\n        print(np.all(np.equal(results[i].values, results[i+1].values)))\nThe output result is\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\nIf I comment the line W = tf.Variable(W) making the W a constant tensor, the results are ideally all True. And I've also tried to compute the gradient ofL over M_temp_T and PSD, both of them are all True. So I think the problem lies in the using of tf.transpose(), tf.gather(), tf.cholesky() all together over instance of tf.Variable().", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: *No*\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: *Linux Ubuntu 14.04.5*\r\n- **TensorFlow installed from (source or binary)**: *pip install from binary*\r\n- **TensorFlow version (use command below)**: *v1.4.0-19-ga52c8d9 1.4.1*\r\n- **Python version**: *Python3.5 (Anaconda)*\r\n- **Bazel version (if compiling from source)**: *N/A*\r\n- **GCC/Compiler version (if compiling from source)**: *N/A*\r\n- **CUDA/cuDNN version**: *CUDA-8.0*\r\n- **GPU model and memory**: *GeForce GTX 1070(8GB) & GeForce GTX 770(4GB)*\r\n- **Exact command to reproduce**: *N/A*\r\n\r\n\r\n### Describe the problem\r\nWhen use operation `tf.transpose()`, `tf.gather()`, `tf.cholesky()` all together in a row over instance of `tf.Variable()`, the backward gradient computation may seems inconsistent. By using 'inconsistent', I mean that after run the same script multiple times with fixed random seeds, the computed gradient of **result of `tf.cholesky()`** over **input of `tf.transpose()`** are not always identical.\r\n\r\n### Source code / logs\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nnp.random.seed(1024)\r\ntf.set_random_seed(1024)\r\n\r\nN = 10\r\n\r\n# indices for `tf.gather()`\r\nindices_for_gather = tf.constant(np.concatenate((np.zeros(N), np.ones(N))).reshape(-1,).astype(np.int32))\r\n\r\n# build a 2-by-2 PSD matrix as `param` for 'tf.gather()'\r\nW = tf.constant(np.random.rand(2, 1), dtype=tf.float32)\r\nW = tf.Variable(W)\r\n\r\nPSD2x2 = tf.matmul(W, W, transpose_b=True)\r\n\r\n# do the `tf.gather()`\r\nM_temp = tf.gather(PSD2x2, indices_for_gather)\r\n\r\n# Then transpose the M_Temp and tf.gather() again (to ensure the result is a PSD for cholesky)\r\nM_temp_T = tf.transpose(M_temp)\r\n\r\nPSD = tf.gather(M_temp_T, indices_for_gather) + tf.eye(2*N, dtype=tf.float32) * 0.01\r\n\r\n# cholesky\r\nL = tf.cholesky(PSD)\r\n\r\n# compute the gradient of `L` over `M_temp`\r\ngrad = tf.gradients(L, M_temp)\r\n\r\n# build a session and compute the gradient\r\nconfig = tf.ConfigProto()\r\nconfig.gpu_options.allow_growth = True\r\nresults = []\r\nwith tf.Session(config=config) as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n    for i in range(10):\r\n        result = sess.run(grad)\r\n        results.append(result[0]) \r\n        \r\n# check the results are whether identical or not\r\nfor i in range(len(results) - 1): \r\n    if isinstance(results[i], np.ndarray):\r\n        print(np.all(np.equal(results[i], results[i+1])))\r\n    else:\r\n        print(np.all(np.equal(results[i].values, results[i+1].values)))\r\n```\r\n\r\nThe output result is\r\n```\r\nFalse\r\nFalse\r\nFalse\r\nFalse\r\nFalse\r\nFalse\r\nFalse\r\nFalse\r\nFalse\r\n```\r\nIf I comment the line `W = tf.Variable(W)` making the `W` a constant tensor, the results are ideally all `True`. And I've also tried to compute the gradient of`L` over `M_temp_T` and `PSD`, both of them are all `True`. So I think the problem lies in the using of `tf.transpose()`, `tf.gather()`, `tf.cholesky()` all together over instance of `tf.Variable()`."}