{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/184870812", "pull_request_review_id": 116154549, "id": 184870812, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDg3MDgxMg==", "diff_hunk": "@@ -969,6 +969,110 @@ def resize_images(images,\n     return images\n \n \n+@tf_export('image.resize_image_with_pad')\n+def resize_image_with_pad(image, target_height, target_width,\n+                                 method=ResizeMethod.BILINEAR):\n+  \"\"\"\n+  Resizes and pads an image to a target width and height.\n+\n+  Resizes an image to a target width and height by keeping\n+  the aspect ratio the same without distortion. If the target\n+  dimensions don't match the image dimensions, the image\n+  is padded with zeroes prior to resizing.\n+\n+  Args:\n+    image: 4-D Tensor of shape `[batch, height, width, channels]` or\n+           3-D Tensor of shape `[height, width, channels]`.\n+    target_height: Target height.\n+    target_width: Target width.\n+    method: Method to use for resizing image. See `resize_images()`\n+\n+  Raises:\n+    ValueError: if `target_height` or `target_width` are zero or negative.\n+\n+  Returns:\n+    Resized and padded image.\n+    If `images` was 4-D, a 4-D float Tensor of shape\n+    `[batch, new_height, new_width, channels]`.\n+    If `images` was 3-D, a 3-D float Tensor of shape\n+    `[new_height, new_width, channels]`.\n+  \"\"\"\n+  with ops.name_scope(None, 'resize_image_with_pad', [image]):\n+    image = ops.convert_to_tensor(image, name='image')\n+    image_shape = image.get_shape()\n+    is_batch = True\n+    if image_shape.ndims == 3:\n+      is_batch = False\n+      image = array_ops.expand_dims(image, 0)\n+    elif image_shape.ndims is None:\n+      is_batch = False\n+      image = array_ops.expand_dims(image, 0)\n+      image.set_shape([None] * 4)\n+    elif image_shape.ndims != 4:\n+      raise ValueError('\\'image\\' must have either 3 or 4 dimensions.')\n+\n+    assert_ops = _CheckAtLeast3DImage(image, require_static=False)\n+    assert_ops += _assert(target_width > 0, ValueError,\n+                          'target_width must be > 0.')\n+    assert_ops += _assert(target_height > 0, ValueError,\n+                          'target_height must be > 0.')\n+\n+    image = control_flow_ops.with_dependencies(assert_ops, image)\n+    if _is_tensor(target_height):\n+      target_height = control_flow_ops.with_dependencies(\n+          assert_ops, target_height)\n+    if _is_tensor(target_width):\n+      target_width = control_flow_ops.with_dependencies(assert_ops,\n+                                                        target_width)\n+\n+    def max_(x, y):\n+      if _is_tensor(x) or _is_tensor(y):\n+        return math_ops.maximum(x, y)\n+      else:\n+        return max(x, y)\n+\n+    def equal_(x, y):\n+      if _is_tensor(x) or _is_tensor(y):\n+        return math_ops.equal(x, y)\n+      else:\n+        return x == y", "path": "tensorflow/python/ops/image_ops_impl.py", "position": null, "original_position": 70, "commit_id": "2863cd7f72d69cdbb94af7673873d1c83ac91a6a", "original_commit_id": "764ea231d9b649ad167fd1ffd4f4c5c4e79642c7", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "body": "Will these ever get used? Since your inputs are the results of `math_ops.cast`, they will always be Tensors. I wouldn't worry too much about this optimization, constant folding will take care of it in the graph. So remove these and just use regular python operators, they work on both tensors and python primitives.", "created_at": "2018-04-29T04:17:30Z", "updated_at": "2018-06-18T20:25:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/17814#discussion_r184870812", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17814", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/184870812"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/17814#discussion_r184870812"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17814"}}, "body_html": "<p>Will these ever get used? Since your inputs are the results of <code>math_ops.cast</code>, they will always be Tensors. I wouldn't worry too much about this optimization, constant folding will take care of it in the graph. So remove these and just use regular python operators, they work on both tensors and python primitives.</p>", "body_text": "Will these ever get used? Since your inputs are the results of math_ops.cast, they will always be Tensors. I wouldn't worry too much about this optimization, constant folding will take care of it in the graph. So remove these and just use regular python operators, they work on both tensors and python primitives."}