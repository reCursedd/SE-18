{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/213877706", "html_url": "https://github.com/tensorflow/tensorflow/issues/2072#issuecomment-213877706", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2072", "id": 213877706, "node_id": "MDEyOklzc3VlQ29tbWVudDIxMzg3NzcwNg==", "user": {"login": "thair116", "id": 3717516, "node_id": "MDQ6VXNlcjM3MTc1MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thair116", "html_url": "https://github.com/thair116", "followers_url": "https://api.github.com/users/thair116/followers", "following_url": "https://api.github.com/users/thair116/following{/other_user}", "gists_url": "https://api.github.com/users/thair116/gists{/gist_id}", "starred_url": "https://api.github.com/users/thair116/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thair116/subscriptions", "organizations_url": "https://api.github.com/users/thair116/orgs", "repos_url": "https://api.github.com/users/thair116/repos", "events_url": "https://api.github.com/users/thair116/events{/privacy}", "received_events_url": "https://api.github.com/users/thair116/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-24T03:45:26Z", "updated_at": "2016-04-24T03:45:26Z", "author_association": "NONE", "body_html": "<p>You probably saw this warning when running: <code>WARNING: Folder has less than 20 images, which may cause issues.</code></p>\n<p>The retrain script randomly assigns images into three sets: 'training', 'testing', and 'validation' in a way that means you may have 0 validation files if you have less than 20 total training images for a particular label. Try adding at least 20 images per label and you should be good.</p>\n<p>Here is the comment in tensorflow/tensorflow/examples/image_retraining/retrain.py that explains what is happening:<br>\n<code># This looks a bit magical, but we need to decide whether this file should # go into the training, testing, or validation sets, and we want to keep # existing files in the same set even if more files are subsequently # added. # To do that, we need a stable way of deciding based on just the file name # itself, so we do a hash of that and then use that to generate a # probability value that we use to assign it.</code></p>", "body_text": "You probably saw this warning when running: WARNING: Folder has less than 20 images, which may cause issues.\nThe retrain script randomly assigns images into three sets: 'training', 'testing', and 'validation' in a way that means you may have 0 validation files if you have less than 20 total training images for a particular label. Try adding at least 20 images per label and you should be good.\nHere is the comment in tensorflow/tensorflow/examples/image_retraining/retrain.py that explains what is happening:\n# This looks a bit magical, but we need to decide whether this file should # go into the training, testing, or validation sets, and we want to keep # existing files in the same set even if more files are subsequently # added. # To do that, we need a stable way of deciding based on just the file name # itself, so we do a hash of that and then use that to generate a # probability value that we use to assign it.", "body": "You probably saw this warning when running: `WARNING: Folder has less than 20 images, which may cause issues.`\n\nThe retrain script randomly assigns images into three sets: 'training', 'testing', and 'validation' in a way that means you may have 0 validation files if you have less than 20 total training images for a particular label. Try adding at least 20 images per label and you should be good.\n\nHere is the comment in tensorflow/tensorflow/examples/image_retraining/retrain.py that explains what is happening:\n`# This looks a bit magical, but we need to decide whether this file should\n      # go into the training, testing, or validation sets, and we want to keep\n      # existing files in the same set even if more files are subsequently\n      # added.\n      # To do that, we need a stable way of deciding based on just the file name\n      # itself, so we do a hash of that and then use that to generate a\n      # probability value that we use to assign it.`\n"}