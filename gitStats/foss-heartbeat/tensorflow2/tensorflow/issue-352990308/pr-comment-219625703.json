{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/219625703", "pull_request_review_id": 157455315, "id": 219625703, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTYyNTcwMw==", "diff_hunk": "@@ -0,0 +1,270 @@\n+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Estimator classes for TensorForest.\"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import collections\n+import math\n+\n+from tensorflow.python.estimator import estimator\n+from tensorflow.python.estimator.canned import head as head_lib\n+from tensorflow.python.estimator.canned import prediction_keys\n+from tensorflow.python.ops.losses import losses\n+from tensorflow.python.summary import summary\n+from tensorflow.python.feature_column import feature_column as feature_column_lib\n+from tensorflow.python.ops import gen_tensor_forest_ops\n+from tensorflow.python.ops import tensor_forest_ops, math_ops, array_ops\n+\n+# from tensorflow.python.util.tf_export import estimator_export\n+\n+_ForestHParams = collections.namedtuple('TreeHParams', [\n+    'logits_dimension',\n+    'n_trees', 'max_nodes', 'num_splits_to_consider',\n+    'split_node_after_samples', 'is_regression',\n+])\n+\n+VARIANCE_LOGITS_KEY = 'logits_variance'\n+VARIANCE_AFTER_ACTIVATION_KEY = 'probs_variance'\n+\n+\n+class TensorForestGraphs(object):\n+  \"\"\"Builds TF graphs for tensor forest training and inference.\"\"\"\n+\n+  def __init__(self,\n+               params,\n+               configs,\n+               tree_configs=None):\n+    self._params = params\n+    self._configs = configs\n+    self._variables = tensor_forest_ops.ForestVariables(\n+        self._params,\n+        tree_configs=tree_configs)\n+\n+  def inference_graph(self, dense_features):\n+    \"\"\" Builds inference graphs\"\"\"\n+    # Get predictions from all the trees\n+    logits = [\n+        gen_tensor_forest_ops.tensor_forest_tree_predict(\n+            tree_variable,\n+            dense_features,\n+            self._params.logits_dimension)\n+        for tree_variable in self._variables\n+    ]\n+\n+    # shape of all_predict should be [batch_size, n_trees, logits_dimension]\n+    all_predict = array_ops.stack(logits, axis=1)\n+\n+    average_values = math_ops.reduce_mean(\n+        all_predict, name='logits', axis=1)\n+    expected_squares = math_ops.reduce_mean(\n+        all_predict * all_predict, axis=1)\n+    logit_variance = math_ops.maximum(\n+        0., expected_squares - average_values * average_values)\n+\n+    return average_values, logit_variance\n+\n+  def average_size(self):\n+    sizes = [gen_tensor_forest_ops.tensor_forest_tree_size(tree_variable)\n+             for tree_variable in self._variables]\n+    return math_ops.reduce_mean(math_ops.to_float(array_ops.stack(sizes)))\n+\n+\n+def _tensor_forest_model_fn(features,\n+                            labels,\n+                            mode,\n+                            head,\n+                            sorted_feature_columns,\n+                            forest_hparams,\n+                            config,\n+                            name='tensor_forest'):\n+  \"\"\"tensor forest model function\"\"\"", "path": "tensorflow/python/estimator/canned/tensor_forest.py", "position": null, "original_position": 94, "commit_id": "8e85fe418aa40e5e4d4d4700dd491f4cbef4b30e", "original_commit_id": "3323223e1d208ef34ef8a9a3d30e6bb385d47f8e", "user": {"login": "nataliaponomareva", "id": 4313109, "node_id": "MDQ6VXNlcjQzMTMxMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4313109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nataliaponomareva", "html_url": "https://github.com/nataliaponomareva", "followers_url": "https://api.github.com/users/nataliaponomareva/followers", "following_url": "https://api.github.com/users/nataliaponomareva/following{/other_user}", "gists_url": "https://api.github.com/users/nataliaponomareva/gists{/gist_id}", "starred_url": "https://api.github.com/users/nataliaponomareva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nataliaponomareva/subscriptions", "organizations_url": "https://api.github.com/users/nataliaponomareva/orgs", "repos_url": "https://api.github.com/users/nataliaponomareva/repos", "events_url": "https://api.github.com/users/nataliaponomareva/events{/privacy}", "received_events_url": "https://api.github.com/users/nataliaponomareva/received_events", "type": "User", "site_admin": false}, "body": "Capitalize", "created_at": "2018-09-21T20:58:39Z", "updated_at": "2018-11-13T17:25:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r219625703", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/219625703"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r219625703"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803"}}, "body_html": "<p>Capitalize</p>", "body_text": "Capitalize"}