{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/216738702", "pull_request_review_id": 154277870, "id": 216738702, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjczODcwMg==", "diff_hunk": "@@ -0,0 +1,257 @@\n+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Estimator classes for TensorForest.\"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import collections\n+import math\n+\n+from tensorflow.python.estimator import estimator\n+from tensorflow.python.estimator.canned import head as head_lib\n+from tensorflow.python.ops.losses import losses\n+from tensorflow.python.summary import summary\n+from tensorflow.python.feature_column import feature_column as feature_column_lib\n+from tensorflow.python.ops import gen_tensor_forest_ops\n+from tensorflow.python.ops import tensor_forest_ops, math_ops, array_ops\n+\n+# from tensorflow.python.util.tf_export import estimator_export\n+\n+_ForestHParams = collections.namedtuple('TreeHParams', [\n+    'logits_dimension',\n+    'n_trees', 'max_nodes', 'num_splits_to_consider',\n+    'split_node_after_samples', 'is_regression',\n+])\n+\n+VARIANCE_PREDICTION_KEY = 'prediction_variance'\n+\n+\n+class RandomForestGraphs(object):\n+  \"\"\"Builds TF graphs for random forest training and inference.\"\"\"\n+\n+  def __init__(self,\n+               params,\n+               configs,\n+               tree_configs=None):\n+    self._params = params\n+    self._configs = configs\n+    self._variables = tensor_forest_ops.ForestVariables(\n+        self._params,\n+        tree_configs=tree_configs)\n+\n+  def inference_graph(self, dense_features):\n+    \"\"\" Builds inference graphs\"\"\"\n+\n+    logits = [\n+        gen_tensor_forest_ops.tensor_forest_tree_predict(\n+            tree_variable,\n+            dense_features,\n+            self._params.logits_dimension)\n+        for tree_variable in self._variables\n+    ]\n+\n+    # shape of all_predict should be [batch_size, n_trees, logits_dimension]\n+    all_predict = array_ops.stack(logits, axis=1)\n+    average_values = math_ops.div(\n+        math_ops.reduce_sum(all_predict, 1),\n+        self._params.n_trees,\n+        name='probabilities')\n+\n+    expected_squares = math_ops.div(\n+        math_ops.reduce_sum(all_predict * all_predict, 1),\n+        self._params.n_trees)\n+    regression_variance = math_ops.maximum(\n+        0., expected_squares - average_values * average_values)\n+\n+    return average_values, regression_variance", "path": "tensorflow/python/estimator/canned/tensor_forest.py", "position": null, "original_position": 79, "commit_id": "8e85fe418aa40e5e4d4d4700dd491f4cbef4b30e", "original_commit_id": "bde776ab80be61a02b3714459acf4076b671456b", "user": {"login": "nataliaponomareva", "id": 4313109, "node_id": "MDQ6VXNlcjQzMTMxMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4313109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nataliaponomareva", "html_url": "https://github.com/nataliaponomareva", "followers_url": "https://api.github.com/users/nataliaponomareva/followers", "following_url": "https://api.github.com/users/nataliaponomareva/following{/other_user}", "gists_url": "https://api.github.com/users/nataliaponomareva/gists{/gist_id}", "starred_url": "https://api.github.com/users/nataliaponomareva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nataliaponomareva/subscriptions", "organizations_url": "https://api.github.com/users/nataliaponomareva/orgs", "repos_url": "https://api.github.com/users/nataliaponomareva/repos", "events_url": "https://api.github.com/users/nataliaponomareva/events{/privacy}", "received_events_url": "https://api.github.com/users/nataliaponomareva/received_events", "type": "User", "site_admin": false}, "body": "So before it was\r\n- regression value var\r\n- or classification probabilities variance, because we stored not logits but probs in the leafs for classification\r\nHere if we want to return the classication prob variance, we will have to invoke the head's activation func first\r\nSomething like this \r\nhead.create_estimator_spec(logit, mode=...).predictions to get the activation function that the head is using. Then using these logits_after_activation, you can calculate the real variance (probs variance for classification, or for regression it is the same because there is no activation func)\r\n\r\nI suggest to return both logits var and var_after_activation (so that would be probs variance for the classification)\r\n", "created_at": "2018-09-11T16:42:56Z", "updated_at": "2018-11-13T17:25:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r216738702", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/216738702"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r216738702"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803"}}, "body_html": "<p>So before it was</p>\n<ul>\n<li>regression value var</li>\n<li>or classification probabilities variance, because we stored not logits but probs in the leafs for classification<br>\nHere if we want to return the classication prob variance, we will have to invoke the head's activation func first<br>\nSomething like this<br>\nhead.create_estimator_spec(logit, mode=...).predictions to get the activation function that the head is using. Then using these logits_after_activation, you can calculate the real variance (probs variance for classification, or for regression it is the same because there is no activation func)</li>\n</ul>\n<p>I suggest to return both logits var and var_after_activation (so that would be probs variance for the classification)</p>", "body_text": "So before it was\n\nregression value var\nor classification probabilities variance, because we stored not logits but probs in the leafs for classification\nHere if we want to return the classication prob variance, we will have to invoke the head's activation func first\nSomething like this\nhead.create_estimator_spec(logit, mode=...).predictions to get the activation function that the head is using. Then using these logits_after_activation, you can calculate the real variance (probs variance for classification, or for regression it is the same because there is no activation func)\n\nI suggest to return both logits var and var_after_activation (so that would be probs variance for the classification)", "in_reply_to_id": 216737150}