{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/212423978", "pull_request_review_id": 149055364, "id": 212423978, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjQyMzk3OA==", "diff_hunk": "@@ -0,0 +1,146 @@\n+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Ops for tensor_forest.\"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.ops import resources\n+\n+from tensorflow.python import ops\n+from tensorflow.python.ops import gen_tensor_forest_ops\n+from tensorflow.python.training import saver\n+\n+\n+class LeafModelType(object):\n+  LEAF_TYPE = {'classification': 0,\n+               'regression': 1}\n+\n+  @classmethod\n+  def get_type(cls, params):\n+    if params.is_regression:\n+      return cls.LEAF_TYPE['regression']\n+    else:\n+      return cls.LEAF_TYPE['classification']\n+\n+\n+def predict(tree_handle, data, params):\n+    return gen_tensor_forest_ops.tree_predictions(tree_handle, data, num_output=params.num_output, leaf_model_type=LeafModelType.get_type(params))\n+\n+\n+class VariableSavable(saver.BaseSaverBuilder.SaveableObject):\n+\n+  def __init__(self, leaf_model_type, num_output, config, name, container,  type_name, resource_handle_func, create_op_func,\n+               is_initialized_op_func, serialize_op_func, deserialize_op_func):\n+\n+    with ops.name_scope(name, type_name) as name:\n+      self._resource_handle = resource_handle_func(\n+          container, shared_name=name, name=name)\n+\n+    self._is_initialized_op = is_initialized_op_func(\n+        self._resource_handle)\n+    tensor = serialize_op_func(self._resource_handle)\n+    self._create_op = create_op_func(\n+        self._resource_handle,\n+        config,\n+        leaf_model_type=leaf_model_type,\n+        num_output=num_output)\n+    # slice_spec is useful for saving a slice from a variable.\n+    # It's not meaningful the tree variable. So we just pass an empty\n+    # value.\n+    slice_spec = \"\"\n+    specs = [saver.BaseSaverBuilder.SaveSpec(\n+        tensor, slice_spec, name), ]\n+    super(VariableSavable,\n+          self).__init__(self._resource_handle, specs, name)\n+\n+    ops.add_to_collection(\n+        ops.GraphKeys.SAVEABLE_OBJECTS, self)\n+\n+    resources.register_resource(\n+        self._resource_handle, self._create_op, self._is_initialized_op)\n+    self._deserialize_op_func = deserialize_op_func\n+\n+  def restore(self, restored_tensors, unused_restored_shapes):\n+    \"\"\"Restores the associated tree from 'restored_tensors'.\n+\n+    Args:\n+      restored_tensors: the tensors that were loaded from a checkpoint.\n+      unused_restored_shapes: the shapes this object should conform to after\n+        restore. Not meaningful for trees.\n+\n+    Returns:\n+      The operation that restores the state of the tree variable.\n+    \"\"\"\n+    with ops.control_dependencies([self._create_op]):\n+      return self._deserialize_op_func(\n+          self._resource_handle,\n+          restored_tensors[0],\n+      )\n+\n+  @property\n+  def resource(self):\n+    return self._resource_handle\n+\n+\n+def tree_variable(leaf_model_type, num_output, tree_config, name, container=None):\n+  return VariableSavable(leaf_model_type,\n+                         num_output,\n+                         tree_config,\n+                         name,\n+                         container,\n+                         \"TreeVariable\",\n+                         gen_tensor_forest_ops.decision_tree_resource_handle_op,\n+                         gen_tensor_forest_ops.create_tree_variable,\n+                         gen_tensor_forest_ops.tree_is_initialized_op,\n+                         gen_tensor_forest_ops.tree_serialize,\n+                         gen_tensor_forest_ops.tree_deserialize).resource\n+\n+\n+class DecisionTreeVariables(object):\n+\n+  def __init__(self, leaf_model_type, num_output, tree_num, tree_config='', tree_stat=''):\n+    self.stats = None", "path": "tensorflow/python/ops/tensor_forest_ops.py", "position": null, "original_position": 115, "commit_id": "8e85fe418aa40e5e4d4d4700dd491f4cbef4b30e", "original_commit_id": "53a8c626c2fd8898be5cf74fa3b5afe14c443641", "user": {"login": "yupbank", "id": 741544, "node_id": "MDQ6VXNlcjc0MTU0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/741544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yupbank", "html_url": "https://github.com/yupbank", "followers_url": "https://api.github.com/users/yupbank/followers", "following_url": "https://api.github.com/users/yupbank/following{/other_user}", "gists_url": "https://api.github.com/users/yupbank/gists{/gist_id}", "starred_url": "https://api.github.com/users/yupbank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yupbank/subscriptions", "organizations_url": "https://api.github.com/users/yupbank/orgs", "repos_url": "https://api.github.com/users/yupbank/repos", "events_url": "https://api.github.com/users/yupbank/events{/privacy}", "received_events_url": "https://api.github.com/users/yupbank/received_events", "type": "User", "site_admin": false}, "body": "`tree_id` it is. thank you!", "created_at": "2018-08-23T19:07:30Z", "updated_at": "2018-11-13T17:25:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r212423978", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/212423978"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r212423978"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803"}}, "body_html": "<p><code>tree_id</code> it is. thank you!</p>", "body_text": "tree_id it is. thank you!", "in_reply_to_id": 212397387}