{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/212392412", "pull_request_review_id": 149008816, "id": 212392412, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjM5MjQxMg==", "diff_hunk": "@@ -0,0 +1,80 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+#ifndef TENSORFLOW_CORE_KERNELS_TENSOR_FOREST_LEAF_MODEL_H_\n+#define TENSORFLOW_CORE_KERNELS_TENSOR_FOREST_LEAF_MODEL_H_\n+\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/kernels/tensor_forest/tensor_forest.pb.h\"\n+\n+namespace tensorflow {\n+\n+using tensorforest::Leaf;\n+using tensorforest::LeafStat;\n+\n+typedef TTypes<const float, 2>::ConstTensor DenseTensorType;\n+\n+namespace {\n+enum LeafModelType { CLASSIFICATION = 0, REGRESSION = 1 };\n+}\n+\n+class LeafModelOperator {\n+ public:\n+  // Number of outputs is interpreted differently for classification and\n+  // regression.  For classification, it's the number of possible classes.\n+  // For regression, it's the target dimensions.\n+  explicit LeafModelOperator(const int32& num_output)\n+      : num_output_(num_output) {}\n+  virtual ~LeafModelOperator() {}\n+\n+  // Returns the value of the requested output, which should be\n+  // in [0, num_outputs_).  For classification, it's the class count (weighted\n+  // number of instances seen).  For regression, it's e.g. the average value.\n+  float GetOutputValue(const Leaf& leaf, int32 o) const;\n+\n+  // Initialize an empty Leaf model.\n+  void InitModel(Leaf* leaf) const;\n+\n+  // Update the given Leaf's model with the given example.\n+  virtual void UpdateModel(Leaf* leaf,\n+                           const std::unique_ptr<DenseTensorType>& target,\n+                           int example) const = 0;\n+", "path": "tensorflow/core/kernels/tensor_forest/leaf_model.h", "position": null, "original_position": 54, "commit_id": "8e85fe418aa40e5e4d4d4700dd491f4cbef4b30e", "original_commit_id": "53a8c626c2fd8898be5cf74fa3b5afe14c443641", "user": {"login": "nataliaponomareva", "id": 4313109, "node_id": "MDQ6VXNlcjQzMTMxMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4313109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nataliaponomareva", "html_url": "https://github.com/nataliaponomareva", "followers_url": "https://api.github.com/users/nataliaponomareva/followers", "following_url": "https://api.github.com/users/nataliaponomareva/following{/other_user}", "gists_url": "https://api.github.com/users/nataliaponomareva/gists{/gist_id}", "starred_url": "https://api.github.com/users/nataliaponomareva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nataliaponomareva/subscriptions", "organizations_url": "https://api.github.com/users/nataliaponomareva/orgs", "repos_url": "https://api.github.com/users/nataliaponomareva/repos", "events_url": "https://api.github.com/users/nataliaponomareva/events{/privacy}", "received_events_url": "https://api.github.com/users/nataliaponomareva/received_events", "type": "User", "site_admin": false}, "body": "const int32?\r\nAlso lets settle on a convention - all immutable args first, then mutable (eg ptr)", "created_at": "2018-08-23T17:28:09Z", "updated_at": "2018-11-13T17:25:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r212392412", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/212392412"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r212392412"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803"}}, "body_html": "<p>const int32?<br>\nAlso lets settle on a convention - all immutable args first, then mutable (eg ptr)</p>", "body_text": "const int32?\nAlso lets settle on a convention - all immutable args first, then mutable (eg ptr)"}