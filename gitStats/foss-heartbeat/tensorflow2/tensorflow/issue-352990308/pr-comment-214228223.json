{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/214228223", "pull_request_review_id": 151234463, "id": 214228223, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIyODIyMw==", "diff_hunk": "@@ -0,0 +1,138 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/resource_mgr.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/kernels/tensor_forest/resources.h\"\n+\n+namespace tensorflow {\n+\n+class TensorForestCreateTreeVariableOp : public OpKernel {\n+ public:\n+  explicit TensorForestCreateTreeVariableOp(OpKernelConstruction* context)\n+      : OpKernel(context){};\n+\n+  void Compute(OpKernelContext* context) override {\n+    const Tensor* tree_config_t;\n+    OP_REQUIRES_OK(context, context->input(\"tree_config\", &tree_config_t));\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(tree_config_t->shape()),\n+                errors::InvalidArgument(\"Tree config must be a scalar.\"));\n+\n+    auto* result = new TensorForestTreeResource();\n+\n+    if (!result->InitFromSerialized(tree_config_t->scalar<string>()())) {\n+      result->Unref();\n+      OP_REQUIRES(context, false,\n+                  errors::InvalidArgument(\"Unable to parse tree config.\"));\n+    }\n+\n+    // Only create one, if one does not exist already. Report status for all\n+    // other exceptions.\n+    auto status = CreateResource(context, HandleFromInput(context, 0), result);\n+    if (!status.ok() && status.code() != tensorflow::error::ALREADY_EXISTS) {\n+      OP_REQUIRES(context, false, status);\n+    }\n+  }\n+};\n+\n+// Op for serializing a model.\n+class TensorForestTreeSerializeOp : public OpKernel {\n+ public:\n+  explicit TensorForestTreeSerializeOp(OpKernelConstruction* context)\n+      : OpKernel(context) {}\n+\n+  void Compute(OpKernelContext* context) override {\n+    TensorForestTreeResource* decision_tree_resource;\n+    OP_REQUIRES_OK(context, LookupResource(context, HandleFromInput(context, 0),\n+                                           &decision_tree_resource));\n+    mutex_lock l(*decision_tree_resource->get_mutex());\n+    core::ScopedUnref unref_me(decision_tree_resource);\n+    Tensor* output_config_t = nullptr;\n+    OP_REQUIRES_OK(\n+        context, context->allocate_output(0, TensorShape(), &output_config_t));\n+    output_config_t->scalar<string>()() =\n+        decision_tree_resource->decision_tree().SerializeAsString();\n+  }\n+};\n+\n+// Op for deserializing a tree variable from a checkpoint.\n+class TensorForestTreeDeserializeOp : public OpKernel {\n+ public:\n+  explicit TensorForestTreeDeserializeOp(OpKernelConstruction* context)\n+      : OpKernel(context) {}\n+  void Compute(OpKernelContext* context) override {\n+    TensorForestTreeResource* decision_tree_resource;\n+    auto handle = HandleFromInput(context, 0);\n+    OP_REQUIRES_OK(context,", "path": "tensorflow/core/kernels/tensor_forest/resource_ops.cc", "position": null, "original_position": 80, "commit_id": "8e85fe418aa40e5e4d4d4700dd491f4cbef4b30e", "original_commit_id": "cdef0717509b3605505000ed878301fe9f1b49d6", "user": {"login": "nataliaponomareva", "id": 4313109, "node_id": "MDQ6VXNlcjQzMTMxMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4313109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nataliaponomareva", "html_url": "https://github.com/nataliaponomareva", "followers_url": "https://api.github.com/users/nataliaponomareva/followers", "following_url": "https://api.github.com/users/nataliaponomareva/following{/other_user}", "gists_url": "https://api.github.com/users/nataliaponomareva/gists{/gist_id}", "starred_url": "https://api.github.com/users/nataliaponomareva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nataliaponomareva/subscriptions", "organizations_url": "https://api.github.com/users/nataliaponomareva/orgs", "repos_url": "https://api.github.com/users/nataliaponomareva/repos", "events_url": "https://api.github.com/users/nataliaponomareva/events{/privacy}", "received_events_url": "https://api.github.com/users/nataliaponomareva/received_events", "type": "User", "site_admin": false}, "body": " OP_REQUIRES_OK(context, LookupResource(context, HandleFromInput(context, 0),\r\n                                           &resource)); is doing all that in just one line", "created_at": "2018-08-31T02:04:22Z", "updated_at": "2018-11-13T17:25:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r214228223", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/214228223"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r214228223"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803"}}, "body_html": "<p>OP_REQUIRES_OK(context, LookupResource(context, HandleFromInput(context, 0),<br>\n&amp;resource)); is doing all that in just one line</p>", "body_text": "OP_REQUIRES_OK(context, LookupResource(context, HandleFromInput(context, 0),\n&resource)); is doing all that in just one line"}