{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/212406739", "pull_request_review_id": 149008816, "id": 212406739, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjQwNjczOQ==", "diff_hunk": "@@ -0,0 +1,200 @@\n+syntax = \"proto3\";\n+\n+package tensorflow.tensorforest;\n+option cc_enable_arenas = true;\n+option java_outer_classname = \"TensorForestProtos\";\n+option java_multiple_files = true;\n+option java_package = \"org.tensorflow.framework\";\n+\n+import \"google/protobuf/any.proto\";\n+import \"google/protobuf/wrappers.proto\";\n+\n+// Represents a single value of any type, e.g. 5 or \"abc\".\n+message Value {", "path": "tensorflow/core/kernels/tensor_forest/tensor_forest.proto", "position": null, "original_position": 13, "commit_id": "8e85fe418aa40e5e4d4d4700dd491f4cbef4b30e", "original_commit_id": "53a8c626c2fd8898be5cf74fa3b5afe14c443641", "user": {"login": "nataliaponomareva", "id": 4313109, "node_id": "MDQ6VXNlcjQzMTMxMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4313109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nataliaponomareva", "html_url": "https://github.com/nataliaponomareva", "followers_url": "https://api.github.com/users/nataliaponomareva/followers", "following_url": "https://api.github.com/users/nataliaponomareva/following{/other_user}", "gists_url": "https://api.github.com/users/nataliaponomareva/gists{/gist_id}", "starred_url": "https://api.github.com/users/nataliaponomareva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nataliaponomareva/subscriptions", "organizations_url": "https://api.github.com/users/nataliaponomareva/orgs", "repos_url": "https://api.github.com/users/nataliaponomareva/repos", "events_url": "https://api.github.com/users/nataliaponomareva/events{/privacy}", "received_events_url": "https://api.github.com/users/nataliaponomareva/received_events", "type": "User", "site_admin": false}, "body": "Ok so historically this proto was chosen so any possible tree could be represented this way (eg universal format). When we were rewriting boosted trees, we decided to simplify and not to do this.\r\nI strongly suggest to do the same. Just storing floats in the leaves should be enough\r\nPlease take a look at tensorflow/core/kernels/boosted_trees/boosted_trees.proto. can we reuse the same proto TreeEnsemble? For a forest, the weights would be 1/num trees and the trees between booosted trees and forest are the same (we will need to add a new split type, instead of bucketized split)", "created_at": "2018-08-23T18:11:24Z", "updated_at": "2018-11-13T17:25:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r212406739", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/212406739"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21803#discussion_r212406739"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21803"}}, "body_html": "<p>Ok so historically this proto was chosen so any possible tree could be represented this way (eg universal format). When we were rewriting boosted trees, we decided to simplify and not to do this.<br>\nI strongly suggest to do the same. Just storing floats in the leaves should be enough<br>\nPlease take a look at tensorflow/core/kernels/boosted_trees/boosted_trees.proto. can we reuse the same proto TreeEnsemble? For a forest, the weights would be 1/num trees and the trees between booosted trees and forest are the same (we will need to add a new split type, instead of bucketized split)</p>", "body_text": "Ok so historically this proto was chosen so any possible tree could be represented this way (eg universal format). When we were rewriting boosted trees, we decided to simplify and not to do this.\nI strongly suggest to do the same. Just storing floats in the leaves should be enough\nPlease take a look at tensorflow/core/kernels/boosted_trees/boosted_trees.proto. can we reuse the same proto TreeEnsemble? For a forest, the weights would be 1/num trees and the trees between booosted trees and forest are the same (we will need to add a new split type, instead of bucketized split)"}