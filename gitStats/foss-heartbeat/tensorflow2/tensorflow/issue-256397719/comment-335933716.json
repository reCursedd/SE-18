{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335933716", "html_url": "https://github.com/tensorflow/tensorflow/pull/12922#issuecomment-335933716", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12922", "id": 335933716, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTkzMzcxNg==", "user": {"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-11T20:12:52Z", "updated_at": "2017-10-11T20:18:47Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2288294\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cloudbank\">@cloudbank</a> I'm not sure I understand why no compression leads to OOM. Where is the 100mb limit coming from? For a properly trained model, the entropy should be high enough that you won't get any significant compression gains anyway. For reference this is the unzip -v output for the graphs in the nightly build of tensorflow_demo.apk:</p>\n<pre><code> Length   Method    Size  Cmpr    Date    Time   CRC-32   Name\n--------  ------  ------- ---- ---------- ----- --------  ----\n 3771239  Stored  3771239   0% 1980-01-01 00:00 9225f2cc  assets/conv_actions_frozen.pb\n29083865  Defl:X 25434578  13% 1980-01-01 00:00 ac57f5c3  assets/ssd_mobilenet_v1_android_export.pb\n  563897  Defl:X   257084  54% 1980-01-01 00:00 7d7f4ff3  assets/stylize_quantized.pb\n53884595  Stored 53884595   0% 1980-01-01 00:00 6d3b8d15  assets/tensorflow_inception_graph.pb\n\n</code></pre>\n<p>Compression was not deliberately turned off here, zip just decided it wasn't worth it for 2/4 graphs. The savings from the other two are very minimal overall. The fact that stylize (already by far the smallest graph) gets such a large boost probably points to an opportunity to shrink its design even more.</p>\n<p>What I think might be ideal would be to have the res/raw path as you have it now, and also the assets/ path if the user has not chosen to compressed the pb file. Then the user automatically gets the improvement if they set things up the default way with assets (e.g. the default classifier demo will be improved), and get the even bigger speed boost you've found if they take the time to move things to res/raw. Unless I am misunderstanding something, and there's some intrinsic difference between memmapping from uncompressed assets and e.g. /sdcard/tmp</p>", "body_text": "@cloudbank I'm not sure I understand why no compression leads to OOM. Where is the 100mb limit coming from? For a properly trained model, the entropy should be high enough that you won't get any significant compression gains anyway. For reference this is the unzip -v output for the graphs in the nightly build of tensorflow_demo.apk:\n Length   Method    Size  Cmpr    Date    Time   CRC-32   Name\n--------  ------  ------- ---- ---------- ----- --------  ----\n 3771239  Stored  3771239   0% 1980-01-01 00:00 9225f2cc  assets/conv_actions_frozen.pb\n29083865  Defl:X 25434578  13% 1980-01-01 00:00 ac57f5c3  assets/ssd_mobilenet_v1_android_export.pb\n  563897  Defl:X   257084  54% 1980-01-01 00:00 7d7f4ff3  assets/stylize_quantized.pb\n53884595  Stored 53884595   0% 1980-01-01 00:00 6d3b8d15  assets/tensorflow_inception_graph.pb\n\n\nCompression was not deliberately turned off here, zip just decided it wasn't worth it for 2/4 graphs. The savings from the other two are very minimal overall. The fact that stylize (already by far the smallest graph) gets such a large boost probably points to an opportunity to shrink its design even more.\nWhat I think might be ideal would be to have the res/raw path as you have it now, and also the assets/ path if the user has not chosen to compressed the pb file. Then the user automatically gets the improvement if they set things up the default way with assets (e.g. the default classifier demo will be improved), and get the even bigger speed boost you've found if they take the time to move things to res/raw. Unless I am misunderstanding something, and there's some intrinsic difference between memmapping from uncompressed assets and e.g. /sdcard/tmp", "body": "@cloudbank I'm not sure I understand why no compression leads to OOM. Where is the 100mb limit coming from? For a properly trained model, the entropy should be high enough that you won't get any significant compression gains anyway. For reference this is the unzip -v output for the graphs in the nightly build of tensorflow_demo.apk:\r\n\r\n```\r\n Length   Method    Size  Cmpr    Date    Time   CRC-32   Name\r\n--------  ------  ------- ---- ---------- ----- --------  ----\r\n 3771239  Stored  3771239   0% 1980-01-01 00:00 9225f2cc  assets/conv_actions_frozen.pb\r\n29083865  Defl:X 25434578  13% 1980-01-01 00:00 ac57f5c3  assets/ssd_mobilenet_v1_android_export.pb\r\n  563897  Defl:X   257084  54% 1980-01-01 00:00 7d7f4ff3  assets/stylize_quantized.pb\r\n53884595  Stored 53884595   0% 1980-01-01 00:00 6d3b8d15  assets/tensorflow_inception_graph.pb\r\n\r\n```\r\nCompression was not deliberately turned off here, zip just decided it wasn't worth it for 2/4 graphs. The savings from the other two are very minimal overall. The fact that stylize (already by far the smallest graph) gets such a large boost probably points to an opportunity to shrink its design even more.\r\n\r\nWhat I think might be ideal would be to have the res/raw path as you have it now, and also the assets/ path if the user has not chosen to compressed the pb file. Then the user automatically gets the improvement if they set things up the default way with assets (e.g. the default classifier demo will be improved), and get the even bigger speed boost you've found if they take the time to move things to res/raw. Unless I am misunderstanding something, and there's some intrinsic difference between memmapping from uncompressed assets and e.g. /sdcard/tmp\r\n\r\n"}