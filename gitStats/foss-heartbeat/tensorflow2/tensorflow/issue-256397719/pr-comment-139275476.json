{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/139275476", "pull_request_review_id": 63191850, "id": 139275476, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTI3NTQ3Ng==", "diff_hunk": "@@ -46,9 +53,99 @@\n  * example usage.\n  */\n public class TensorFlowInferenceInterface {\n-  private static final String TAG = \"TensorFlowInferenceInterface\";\n+  private static final String TAG = \"TensorFlowInferenceInt\";\n   private static final String ASSET_FILE_PREFIX = \"file:///android_asset/\";\n \n+  /**\n+   * Copies raw resource to a cache file.\n+   *\n+   * @return File reference to cache file.\n+   */\n+  private File createCacheFile(Context context, int resourceId, String filename)\n+      throws IOException {\n+    File cacheFile = new File(context.getCacheDir(), filename);\n+\n+    if (cacheFile.createNewFile() == false) {", "path": "tensorflow/contrib/android/java/org/tensorflow/contrib/android/TensorFlowInferenceInterface.java", "position": 41, "original_position": 46, "commit_id": "6cd443476753209accef4f1f0e6c89f04ac5166d", "original_commit_id": "4b12af447a8b57987a3cba434fb2ac149ce038cf", "user": {"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}, "body": "What is the advantage of res/raw over assets/?\r\n\r\nIt's possible to explicitly keep aapt from compressing extensions, e.g. with [noCompress](https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.AaptOptions.html#com.android.build.gradle.internal.dsl.AaptOptions:noCompress) in Gradle. In bazel nocompress_extensions on the android_binary rule will do the same thing.\r\n\r\nA properly trained model will probably be very high entropy anyway, so typically you won't see a lot of compression savings. And in fact I just checked the demo -- found that none of the .pb files in it are compressed at all, simply stored. In that case, can we just mmap it from assets/ directly without the copy?", "created_at": "2017-09-16T01:56:29Z", "updated_at": "2017-09-16T21:20:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12922#discussion_r139275476", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12922", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/139275476"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12922#discussion_r139275476"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12922"}}, "body_html": "<p>What is the advantage of res/raw over assets/?</p>\n<p>It's possible to explicitly keep aapt from compressing extensions, e.g. with <a href=\"https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.AaptOptions.html#com.android.build.gradle.internal.dsl.AaptOptions:noCompress\" rel=\"nofollow\">noCompress</a> in Gradle. In bazel nocompress_extensions on the android_binary rule will do the same thing.</p>\n<p>A properly trained model will probably be very high entropy anyway, so typically you won't see a lot of compression savings. And in fact I just checked the demo -- found that none of the .pb files in it are compressed at all, simply stored. In that case, can we just mmap it from assets/ directly without the copy?</p>", "body_text": "What is the advantage of res/raw over assets/?\nIt's possible to explicitly keep aapt from compressing extensions, e.g. with noCompress in Gradle. In bazel nocompress_extensions on the android_binary rule will do the same thing.\nA properly trained model will probably be very high entropy anyway, so typically you won't see a lot of compression savings. And in fact I just checked the demo -- found that none of the .pb files in it are compressed at all, simply stored. In that case, can we just mmap it from assets/ directly without the copy?", "in_reply_to_id": 139271759}