{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14625", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14625/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14625/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14625/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14625", "id": 274578226, "node_id": "MDU6SXNzdWUyNzQ1NzgyMjY=", "number": 14625, "title": "float16 support for separable_convolutions", "user": {"login": "afroze100", "id": 6174152, "node_id": "MDQ6VXNlcjYxNzQxNTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6174152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afroze100", "html_url": "https://github.com/afroze100", "followers_url": "https://api.github.com/users/afroze100/followers", "following_url": "https://api.github.com/users/afroze100/following{/other_user}", "gists_url": "https://api.github.com/users/afroze100/gists{/gist_id}", "starred_url": "https://api.github.com/users/afroze100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afroze100/subscriptions", "organizations_url": "https://api.github.com/users/afroze100/orgs", "repos_url": "https://api.github.com/users/afroze100/repos", "events_url": "https://api.github.com/users/afroze100/events{/privacy}", "received_events_url": "https://api.github.com/users/afroze100/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-11-16T16:26:34Z", "updated_at": "2018-10-27T17:07:31Z", "closed_at": "2018-10-27T17:07:31Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code</strong>:<br>\nNo</li>\n<li>**OS Platform and Distribution **:<br>\n16.04</li>\n<li><strong>TensorFlow installed from</strong>:<br>\nfrom pip package</li>\n<li><strong>TensorFlow version</strong>:<br>\n1.4.0</li>\n<li><strong>Python version</strong>:<br>\n3.5.2</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nCUDA 8.0, cuDNN 6.0</li>\n<li><strong>GPU model and memory</strong>:<br>\n1080Ti with 12GB Memory</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>It appears that half precision support is still not available for separable_convolutions even with tf 1.4.0 release.</p>\n<pre><code>inputs_32 = tf.placeholder(tf.float32, shape=(1,16,16,3))\ninputs_16 = tf.placeholder(tf.float16, shape=(1,16,16,3))\nslim.separable_conv2d(inputs_32,16,[3,3],depth_multiplier=1)\nslim.separable_conv2d(inputs_16,16,[3,3],depth_multiplier=1)\n</code></pre>\n<p>The first call succeeds (as expected), while the second fails with the following error:<br>\n<code>TypeError: Value passed to parameter 'input' has DataType float16 not in list of allowed values: float32, float64</code></p>\n<p>I also tried that with tf.nn.separable_conv2d(.), but with same results.</p>\n<p><strong>Full Error Traceback</strong></p>\n<pre><code>---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-6-61a1fd560923&gt; in &lt;module&gt;()\n----&gt; 1 slim.separable_conv2d(inputs_16,16,[3,3],depth_multiplier=1)\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    179       current_args = current_scope[key_func].copy()\n    180       current_args.update(kwargs)\n--&gt; 181     return func(*args, **current_args)\n    182   _add_op(func)\n    183   setattr(func_with_args, '_key_op', _key_op(func))\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/contrib/layers/python/layers/layers.py in separable_convolution2d(inputs, num_outputs, kernel_size, depth_multiplier, stride, padding, data_format, rate, activation_fn, normalizer_fn, normalizer_params, weights_initializer, weights_regularizer, biases_initializer, biases_regularizer, reuse, variables_collections, outputs_collections, trainable, scope)\n   2500           _scope=sc,\n   2501           _reuse=reuse)\n-&gt; 2502       outputs = layer.apply(inputs)\n   2503 \n   2504       # Add variables to collections.\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/layers/base.py in apply(self, inputs, *args, **kwargs)\n    669       Output tensor(s).\n    670     \"\"\"\n--&gt; 671     return self.__call__(inputs, *args, **kwargs)\n    672 \n    673   def _add_inbound_node(self,\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/layers/base.py in __call__(self, inputs, *args, **kwargs)\n    573         if in_graph_mode:\n    574           self._assert_input_compatibility(inputs)\n--&gt; 575         outputs = self.call(inputs, *args, **kwargs)\n    576 \n    577         if outputs is None:\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/layers/convolutional.py in call(self, inputs)\n    982         padding=self.padding.upper(),\n    983         rate=self.dilation_rate,\n--&gt; 984         data_format=utils.convert_data_format(self.data_format, ndim=4))\n    985 \n    986     if self.use_bias:\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_impl.py in separable_conv2d(input, depthwise_filter, pointwise_filter, strides, padding, rate, name, data_format)\n    488         padding=padding,\n    489         data_format=data_format,\n--&gt; 490         op=op)\n    491 \n    492     return nn_ops.conv2d(\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py in with_space_to_batch(input, dilation_rate, padding, op, filter_shape, spatial_dims, data_format)\n    343                              spatial_dims=spatial_dims,\n    344                              data_format=data_format)\n--&gt; 345   return new_op(input, None)\n    346 \n    347 \n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py in __call__(self, inp, filter)\n    497 \n    498   def __call__(self, inp, filter):  # pylint: disable=redefined-builtin\n--&gt; 499     return self.call(inp, filter)\n    500 \n    501 \n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py in &lt;lambda&gt;(inp, _)\n    334 \n    335   def build_op(num_spatial_dims, padding):\n--&gt; 336     return lambda inp, _: op(inp, num_spatial_dims, padding)\n    337 \n    338   new_op = _WithSpaceToBatch(input_shape,\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_impl.py in op(input_converted, _, padding)\n    480           padding=padding,\n    481           data_format=data_format,\n--&gt; 482           name=\"depthwise\")\n    483 \n    484     depthwise = nn_ops.with_space_to_batch(\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/gen_nn_ops.py in depthwise_conv2d_native(input, filter, strides, padding, data_format, name)\n   1159     _, _, _op = _op_def_lib._apply_op_helper(\n   1160         \"DepthwiseConv2dNative\", input=input, filter=filter, strides=strides,\n-&gt; 1161         padding=padding, data_format=data_format, name=name)\n   1162     _result = _op.outputs[:]\n   1163     _inputs_flat = _op.inputs\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\n    607               _SatisfiesTypeConstraint(base_type,\n    608                                        _Attr(op_def, input_arg.type_attr),\n--&gt; 609                                        param_name=input_name)\n    610             attrs[input_arg.type_attr] = attr_value\n    611             inferred_from[input_arg.type_attr] = input_name\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in _SatisfiesTypeConstraint(dtype, attr_def, param_name)\n     58           \"allowed values: %s\" %\n     59           (param_name, dtypes.as_dtype(dtype).name,\n---&gt; 60            \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\n     61 \n     62 \n\nTypeError: Value passed to parameter 'input' has DataType float16 not in list of allowed values: float32, float64\n</code></pre>", "body_text": "System information\n\nHave I written custom code:\nNo\n**OS Platform and Distribution **:\n16.04\nTensorFlow installed from:\nfrom pip package\nTensorFlow version:\n1.4.0\nPython version:\n3.5.2\nCUDA/cuDNN version:\nCUDA 8.0, cuDNN 6.0\nGPU model and memory:\n1080Ti with 12GB Memory\nExact command to reproduce:\n\nIt appears that half precision support is still not available for separable_convolutions even with tf 1.4.0 release.\ninputs_32 = tf.placeholder(tf.float32, shape=(1,16,16,3))\ninputs_16 = tf.placeholder(tf.float16, shape=(1,16,16,3))\nslim.separable_conv2d(inputs_32,16,[3,3],depth_multiplier=1)\nslim.separable_conv2d(inputs_16,16,[3,3],depth_multiplier=1)\n\nThe first call succeeds (as expected), while the second fails with the following error:\nTypeError: Value passed to parameter 'input' has DataType float16 not in list of allowed values: float32, float64\nI also tried that with tf.nn.separable_conv2d(.), but with same results.\nFull Error Traceback\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-6-61a1fd560923> in <module>()\n----> 1 slim.separable_conv2d(inputs_16,16,[3,3],depth_multiplier=1)\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    179       current_args = current_scope[key_func].copy()\n    180       current_args.update(kwargs)\n--> 181     return func(*args, **current_args)\n    182   _add_op(func)\n    183   setattr(func_with_args, '_key_op', _key_op(func))\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/contrib/layers/python/layers/layers.py in separable_convolution2d(inputs, num_outputs, kernel_size, depth_multiplier, stride, padding, data_format, rate, activation_fn, normalizer_fn, normalizer_params, weights_initializer, weights_regularizer, biases_initializer, biases_regularizer, reuse, variables_collections, outputs_collections, trainable, scope)\n   2500           _scope=sc,\n   2501           _reuse=reuse)\n-> 2502       outputs = layer.apply(inputs)\n   2503 \n   2504       # Add variables to collections.\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/layers/base.py in apply(self, inputs, *args, **kwargs)\n    669       Output tensor(s).\n    670     \"\"\"\n--> 671     return self.__call__(inputs, *args, **kwargs)\n    672 \n    673   def _add_inbound_node(self,\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/layers/base.py in __call__(self, inputs, *args, **kwargs)\n    573         if in_graph_mode:\n    574           self._assert_input_compatibility(inputs)\n--> 575         outputs = self.call(inputs, *args, **kwargs)\n    576 \n    577         if outputs is None:\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/layers/convolutional.py in call(self, inputs)\n    982         padding=self.padding.upper(),\n    983         rate=self.dilation_rate,\n--> 984         data_format=utils.convert_data_format(self.data_format, ndim=4))\n    985 \n    986     if self.use_bias:\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_impl.py in separable_conv2d(input, depthwise_filter, pointwise_filter, strides, padding, rate, name, data_format)\n    488         padding=padding,\n    489         data_format=data_format,\n--> 490         op=op)\n    491 \n    492     return nn_ops.conv2d(\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py in with_space_to_batch(input, dilation_rate, padding, op, filter_shape, spatial_dims, data_format)\n    343                              spatial_dims=spatial_dims,\n    344                              data_format=data_format)\n--> 345   return new_op(input, None)\n    346 \n    347 \n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py in __call__(self, inp, filter)\n    497 \n    498   def __call__(self, inp, filter):  # pylint: disable=redefined-builtin\n--> 499     return self.call(inp, filter)\n    500 \n    501 \n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py in <lambda>(inp, _)\n    334 \n    335   def build_op(num_spatial_dims, padding):\n--> 336     return lambda inp, _: op(inp, num_spatial_dims, padding)\n    337 \n    338   new_op = _WithSpaceToBatch(input_shape,\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_impl.py in op(input_converted, _, padding)\n    480           padding=padding,\n    481           data_format=data_format,\n--> 482           name=\"depthwise\")\n    483 \n    484     depthwise = nn_ops.with_space_to_batch(\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/gen_nn_ops.py in depthwise_conv2d_native(input, filter, strides, padding, data_format, name)\n   1159     _, _, _op = _op_def_lib._apply_op_helper(\n   1160         \"DepthwiseConv2dNative\", input=input, filter=filter, strides=strides,\n-> 1161         padding=padding, data_format=data_format, name=name)\n   1162     _result = _op.outputs[:]\n   1163     _inputs_flat = _op.inputs\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\n    607               _SatisfiesTypeConstraint(base_type,\n    608                                        _Attr(op_def, input_arg.type_attr),\n--> 609                                        param_name=input_name)\n    610             attrs[input_arg.type_attr] = attr_value\n    611             inferred_from[input_arg.type_attr] = input_name\n\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in _SatisfiesTypeConstraint(dtype, attr_def, param_name)\n     58           \"allowed values: %s\" %\n     59           (param_name, dtypes.as_dtype(dtype).name,\n---> 60            \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\n     61 \n     62 \n\nTypeError: Value passed to parameter 'input' has DataType float16 not in list of allowed values: float32, float64", "body": "### System information\r\n- **Have I written custom code**:\r\nNo\r\n- **OS Platform and Distribution **:\r\n16.04\r\n- **TensorFlow installed from**:\r\nfrom pip package\r\n- **TensorFlow version**:\r\n1.4.0\r\n- **Python version**: \r\n3.5.2\r\n- **CUDA/cuDNN version**:\r\nCUDA 8.0, cuDNN 6.0\r\n- **GPU model and memory**:\r\n1080Ti with 12GB Memory\r\n- **Exact command to reproduce**:\r\n\r\nIt appears that half precision support is still not available for separable_convolutions even with tf 1.4.0 release.\r\n\r\n```\r\ninputs_32 = tf.placeholder(tf.float32, shape=(1,16,16,3))\r\ninputs_16 = tf.placeholder(tf.float16, shape=(1,16,16,3))\r\nslim.separable_conv2d(inputs_32,16,[3,3],depth_multiplier=1)\r\nslim.separable_conv2d(inputs_16,16,[3,3],depth_multiplier=1)\r\n```\r\n\r\nThe first call succeeds (as expected), while the second fails with the following error:\r\n`TypeError: Value passed to parameter 'input' has DataType float16 not in list of allowed values: float32, float64`\r\n\r\nI also tried that with tf.nn.separable_conv2d(.), but with same results.\r\n\r\n**Full Error Traceback**\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-6-61a1fd560923> in <module>()\r\n----> 1 slim.separable_conv2d(inputs_16,16,[3,3],depth_multiplier=1)\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\r\n    179       current_args = current_scope[key_func].copy()\r\n    180       current_args.update(kwargs)\r\n--> 181     return func(*args, **current_args)\r\n    182   _add_op(func)\r\n    183   setattr(func_with_args, '_key_op', _key_op(func))\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/contrib/layers/python/layers/layers.py in separable_convolution2d(inputs, num_outputs, kernel_size, depth_multiplier, stride, padding, data_format, rate, activation_fn, normalizer_fn, normalizer_params, weights_initializer, weights_regularizer, biases_initializer, biases_regularizer, reuse, variables_collections, outputs_collections, trainable, scope)\r\n   2500           _scope=sc,\r\n   2501           _reuse=reuse)\r\n-> 2502       outputs = layer.apply(inputs)\r\n   2503 \r\n   2504       # Add variables to collections.\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/layers/base.py in apply(self, inputs, *args, **kwargs)\r\n    669       Output tensor(s).\r\n    670     \"\"\"\r\n--> 671     return self.__call__(inputs, *args, **kwargs)\r\n    672 \r\n    673   def _add_inbound_node(self,\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/layers/base.py in __call__(self, inputs, *args, **kwargs)\r\n    573         if in_graph_mode:\r\n    574           self._assert_input_compatibility(inputs)\r\n--> 575         outputs = self.call(inputs, *args, **kwargs)\r\n    576 \r\n    577         if outputs is None:\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/layers/convolutional.py in call(self, inputs)\r\n    982         padding=self.padding.upper(),\r\n    983         rate=self.dilation_rate,\r\n--> 984         data_format=utils.convert_data_format(self.data_format, ndim=4))\r\n    985 \r\n    986     if self.use_bias:\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_impl.py in separable_conv2d(input, depthwise_filter, pointwise_filter, strides, padding, rate, name, data_format)\r\n    488         padding=padding,\r\n    489         data_format=data_format,\r\n--> 490         op=op)\r\n    491 \r\n    492     return nn_ops.conv2d(\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py in with_space_to_batch(input, dilation_rate, padding, op, filter_shape, spatial_dims, data_format)\r\n    343                              spatial_dims=spatial_dims,\r\n    344                              data_format=data_format)\r\n--> 345   return new_op(input, None)\r\n    346 \r\n    347 \r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py in __call__(self, inp, filter)\r\n    497 \r\n    498   def __call__(self, inp, filter):  # pylint: disable=redefined-builtin\r\n--> 499     return self.call(inp, filter)\r\n    500 \r\n    501 \r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py in <lambda>(inp, _)\r\n    334 \r\n    335   def build_op(num_spatial_dims, padding):\r\n--> 336     return lambda inp, _: op(inp, num_spatial_dims, padding)\r\n    337 \r\n    338   new_op = _WithSpaceToBatch(input_shape,\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/nn_impl.py in op(input_converted, _, padding)\r\n    480           padding=padding,\r\n    481           data_format=data_format,\r\n--> 482           name=\"depthwise\")\r\n    483 \r\n    484     depthwise = nn_ops.with_space_to_batch(\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/ops/gen_nn_ops.py in depthwise_conv2d_native(input, filter, strides, padding, data_format, name)\r\n   1159     _, _, _op = _op_def_lib._apply_op_helper(\r\n   1160         \"DepthwiseConv2dNative\", input=input, filter=filter, strides=strides,\r\n-> 1161         padding=padding, data_format=data_format, name=name)\r\n   1162     _result = _op.outputs[:]\r\n   1163     _inputs_flat = _op.inputs\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\r\n    607               _SatisfiesTypeConstraint(base_type,\r\n    608                                        _Attr(op_def, input_arg.type_attr),\r\n--> 609                                        param_name=input_name)\r\n    610             attrs[input_arg.type_attr] = attr_value\r\n    611             inferred_from[input_arg.type_attr] = input_name\r\n\r\n~/.virtualenvs/p3.5-tf1.4/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in _SatisfiesTypeConstraint(dtype, attr_def, param_name)\r\n     58           \"allowed values: %s\" %\r\n     59           (param_name, dtypes.as_dtype(dtype).name,\r\n---> 60            \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\r\n     61 \r\n     62 \r\n\r\nTypeError: Value passed to parameter 'input' has DataType float16 not in list of allowed values: float32, float64\r\n```\r\n\r\n"}