{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21243", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21243/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21243/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21243/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21243", "id": 345742665, "node_id": "MDU6SXNzdWUzNDU3NDI2NjU=", "number": 21243, "title": "aggregation of sparse gradient and dense gradient is unexpected", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-07-30T12:46:55Z", "updated_at": "2018-11-14T19:23:56Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOSX 10.13.5</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: No</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.9.0-0-g25c197e023 1.9.0</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: -</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: -</li>\n<li><strong>CUDA/cuDNN version</strong>: -</li>\n<li><strong>GPU model and memory</strong>: -</li>\n<li><strong>Exact command to reproduce</strong>: see below</li>\n</ul>\n<h3>Describe the problem</h3>\n<h3>Source code / logs</h3>\n<p>Example code:</p>\n<pre><code>    var = tf.get_variable(\"var\", (3, 5), initializer=tf.ones_initializer())\n    session.run(var.initializer)\n    loss = tf.reduce_sum(tf.nn.embedding_lookup(var, [1]) ** 2) + tf.reduce_sum(var ** 2)\n    grad, = tf.gradients(loss, var)\n    print(\"grad:\", grad)  # It is an IndexedSlices.\n    grad_np = session.run(grad)\n    print(\"grad value:\")\n    print(grad_np)\n</code></pre>\n<p>Output:</p>\n<pre><code>...\ngrad value:\nIndexedSlicesValue(values=array([[2., 2., 2., 2., 2.],\n       [2., 2., 2., 2., 2.],\n       [2., 2., 2., 2., 2.],\n       [2., 2., 2., 2., 2.]], dtype=float32), indices=array([0, 1, 2, 1], dtype=int32), dense_shape=array([3, 5], dtype=int32))\n</code></pre>\n<p>The logic in TF is implemented in <code>_AggregatedGrads</code> and <code>_AggregateIndexedSlicesGradients</code>.<br>\nAs there is one dense gradient, I would have expected also a final dense gradient.<br>\nI think that the dense var updates of the optimizers (e.g. <code>ApplyAdam</code>) also perform more efficient compared to the corresponding sparse updates (implemented in <code>_apply_sparse</code>).</p>\n<p>Regarding how to accumulate the dense and sparse gradients: Probably it can stay like it is, via first accumulating them in <code>IndexedSlices</code>, and an additional flag whether there was a dense gradient, and if so, then do a final dense conversion, via <code>tf.convert_to_tensor</code>.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOSX 10.13.5\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No\nTensorFlow installed from (source or binary): pip binary\nTensorFlow version (use command below): v1.9.0-0-g25c197e023 1.9.0\nPython version: 3.6.5\nBazel version (if compiling from source): -\nGCC/Compiler version (if compiling from source): -\nCUDA/cuDNN version: -\nGPU model and memory: -\nExact command to reproduce: see below\n\nDescribe the problem\nSource code / logs\nExample code:\n    var = tf.get_variable(\"var\", (3, 5), initializer=tf.ones_initializer())\n    session.run(var.initializer)\n    loss = tf.reduce_sum(tf.nn.embedding_lookup(var, [1]) ** 2) + tf.reduce_sum(var ** 2)\n    grad, = tf.gradients(loss, var)\n    print(\"grad:\", grad)  # It is an IndexedSlices.\n    grad_np = session.run(grad)\n    print(\"grad value:\")\n    print(grad_np)\n\nOutput:\n...\ngrad value:\nIndexedSlicesValue(values=array([[2., 2., 2., 2., 2.],\n       [2., 2., 2., 2., 2.],\n       [2., 2., 2., 2., 2.],\n       [2., 2., 2., 2., 2.]], dtype=float32), indices=array([0, 1, 2, 1], dtype=int32), dense_shape=array([3, 5], dtype=int32))\n\nThe logic in TF is implemented in _AggregatedGrads and _AggregateIndexedSlicesGradients.\nAs there is one dense gradient, I would have expected also a final dense gradient.\nI think that the dense var updates of the optimizers (e.g. ApplyAdam) also perform more efficient compared to the corresponding sparse updates (implemented in _apply_sparse).\nRegarding how to accumulate the dense and sparse gradients: Probably it can stay like it is, via first accumulating them in IndexedSlices, and an additional flag whether there was a dense gradient, and if so, then do a final dense conversion, via tf.convert_to_tensor.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOSX 10.13.5\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: No\r\n- **TensorFlow installed from (source or binary)**: pip binary\r\n- **TensorFlow version (use command below)**: v1.9.0-0-g25c197e023 1.9.0\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: -\r\n- **GCC/Compiler version (if compiling from source)**: -\r\n- **CUDA/cuDNN version**: -\r\n- **GPU model and memory**: -\r\n- **Exact command to reproduce**: see below\r\n\r\n### Describe the problem\r\n\r\n\r\n### Source code / logs\r\n\r\nExample code:\r\n\r\n```\r\n    var = tf.get_variable(\"var\", (3, 5), initializer=tf.ones_initializer())\r\n    session.run(var.initializer)\r\n    loss = tf.reduce_sum(tf.nn.embedding_lookup(var, [1]) ** 2) + tf.reduce_sum(var ** 2)\r\n    grad, = tf.gradients(loss, var)\r\n    print(\"grad:\", grad)  # It is an IndexedSlices.\r\n    grad_np = session.run(grad)\r\n    print(\"grad value:\")\r\n    print(grad_np)\r\n```\r\n\r\nOutput:\r\n```\r\n...\r\ngrad value:\r\nIndexedSlicesValue(values=array([[2., 2., 2., 2., 2.],\r\n       [2., 2., 2., 2., 2.],\r\n       [2., 2., 2., 2., 2.],\r\n       [2., 2., 2., 2., 2.]], dtype=float32), indices=array([0, 1, 2, 1], dtype=int32), dense_shape=array([3, 5], dtype=int32))\r\n```\r\n\r\nThe logic in TF is implemented in `_AggregatedGrads` and `_AggregateIndexedSlicesGradients`.\r\nAs there is one dense gradient, I would have expected also a final dense gradient.\r\nI think that the dense var updates of the optimizers (e.g. `ApplyAdam`) also perform more efficient compared to the corresponding sparse updates (implemented in `_apply_sparse`).\r\n\r\nRegarding how to accumulate the dense and sparse gradients: Probably it can stay like it is, via first accumulating them in `IndexedSlices`, and an additional flag whether there was a dense gradient, and if so, then do a final dense conversion, via `tf.convert_to_tensor`.\r\n"}