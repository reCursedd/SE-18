{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10727", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10727/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10727/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10727/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10727", "id": 236132325, "node_id": "MDU6SXNzdWUyMzYxMzIzMjU=", "number": 10727, "title": "Redundant Computation of tf.cond()", "user": {"login": "whuguozili", "id": 19986708, "node_id": "MDQ6VXNlcjE5OTg2NzA4", "avatar_url": "https://avatars0.githubusercontent.com/u/19986708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whuguozili", "html_url": "https://github.com/whuguozili", "followers_url": "https://api.github.com/users/whuguozili/followers", "following_url": "https://api.github.com/users/whuguozili/following{/other_user}", "gists_url": "https://api.github.com/users/whuguozili/gists{/gist_id}", "starred_url": "https://api.github.com/users/whuguozili/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whuguozili/subscriptions", "organizations_url": "https://api.github.com/users/whuguozili/orgs", "repos_url": "https://api.github.com/users/whuguozili/repos", "events_url": "https://api.github.com/users/whuguozili/events{/privacy}", "received_events_url": "https://api.github.com/users/whuguozili/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-15T09:37:52Z", "updated_at": "2017-06-15T21:32:28Z", "closed_at": "2017-06-15T21:32:27Z", "author_association": "NONE", "body_html": "<h3>System information (Runs all right)</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li>OS: Linux Ubuntu 14.04.01</li>\n<li>**TensorFlow installed from pip:</li>\n<li><strong>TensorFlow version (use command below)</strong>:'v1.0.0-65-g4763edf-dirty', '1.0.1</li>\n<li>**CUDA/cuDNN version: CUDA8.0/cuDNN5.1</li>\n<li><strong>GPU model and memory</strong>: GTX1060 6GB</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>tf.cond(pred, fn1, fn2) have redundant computation when fn1 and fn2 have dependencies on other tensors. See the example code, you'll know.</p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\ndef tf_fun1(a):\n    def func1(a):\n        print 'a1 %s\\n'% a\n        return a\n    r = tf.py_func(func1, [a], tf.int32)\n    return r\n\ndef tf_fun2(a):\n    def func2(a):\n        print 'a2 %s\\n'% a\n        return a\n    r = tf.py_func(func2, [a], tf.int32)\n    return r\n\ndef test():\n    is_training = tf.placeholder(tf.bool)\n    tensor_a = tf_fun1(1)\n    tensor_b = tf_fun2(2)\n    cond_tensor = tf.cond(is_training, lambda: tensor_a, lambda: tensor_b)\n    cond_func = tf.cond(is_training, lambda: tf_fun1(1),lambda: tf_fun2(2))\n    cond_func_with_tensor = tf.cond(is_training, lambda: tf_fun1(tensor_a),lambda: tf_fun2(tensor_b))\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        print 'run cond_tensor'\n        value = sess.run(cond_tensor,feed_dict={is_training:True})\n        print 'run cond_func'\n        value = sess.run(cond_func,feed_dict={is_training:True})\n        print 'run cond_func_with_tensor'\n        value = sess.run(cond_func_with_tensor,feed_dict={is_training:True})\n\n</code></pre>\n<p>The result of running:</p>\n<pre><code>run cond_tensor\na2 2\na1 1\nrun cond_func\na1 1\nrun cond_func_with_tensor\na2 2\na1 1\na1 1\n</code></pre>", "body_text": "System information (Runs all right)\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS: Linux Ubuntu 14.04.01\n**TensorFlow installed from pip:\nTensorFlow version (use command below):'v1.0.0-65-g4763edf-dirty', '1.0.1\n**CUDA/cuDNN version: CUDA8.0/cuDNN5.1\nGPU model and memory: GTX1060 6GB\n\nDescribe the problem\ntf.cond(pred, fn1, fn2) have redundant computation when fn1 and fn2 have dependencies on other tensors. See the example code, you'll know.\nSource code / logs\nimport tensorflow as tf\ndef tf_fun1(a):\n    def func1(a):\n        print 'a1 %s\\n'% a\n        return a\n    r = tf.py_func(func1, [a], tf.int32)\n    return r\n\ndef tf_fun2(a):\n    def func2(a):\n        print 'a2 %s\\n'% a\n        return a\n    r = tf.py_func(func2, [a], tf.int32)\n    return r\n\ndef test():\n    is_training = tf.placeholder(tf.bool)\n    tensor_a = tf_fun1(1)\n    tensor_b = tf_fun2(2)\n    cond_tensor = tf.cond(is_training, lambda: tensor_a, lambda: tensor_b)\n    cond_func = tf.cond(is_training, lambda: tf_fun1(1),lambda: tf_fun2(2))\n    cond_func_with_tensor = tf.cond(is_training, lambda: tf_fun1(tensor_a),lambda: tf_fun2(tensor_b))\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        print 'run cond_tensor'\n        value = sess.run(cond_tensor,feed_dict={is_training:True})\n        print 'run cond_func'\n        value = sess.run(cond_func,feed_dict={is_training:True})\n        print 'run cond_func_with_tensor'\n        value = sess.run(cond_func_with_tensor,feed_dict={is_training:True})\n\n\nThe result of running:\nrun cond_tensor\na2 2\na1 1\nrun cond_func\na1 1\nrun cond_func_with_tensor\na2 2\na1 1\na1 1", "body": "### System information (Runs all right)\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n-  OS: Linux Ubuntu 14.04.01\r\n- **TensorFlow installed from pip:\r\n- **TensorFlow version (use command below)**:'v1.0.0-65-g4763edf-dirty', '1.0.1\r\n- **CUDA/cuDNN version: CUDA8.0/cuDNN5.1\r\n- **GPU model and memory**: GTX1060 6GB\r\n\r\n### Describe the problem\r\ntf.cond(pred, fn1, fn2) have redundant computation when fn1 and fn2 have dependencies on other tensors. See the example code, you'll know.\r\n\r\n### Source code / logs\r\n```\r\nimport tensorflow as tf\r\ndef tf_fun1(a):\r\n    def func1(a):\r\n        print 'a1 %s\\n'% a\r\n        return a\r\n    r = tf.py_func(func1, [a], tf.int32)\r\n    return r\r\n\r\ndef tf_fun2(a):\r\n    def func2(a):\r\n        print 'a2 %s\\n'% a\r\n        return a\r\n    r = tf.py_func(func2, [a], tf.int32)\r\n    return r\r\n\r\ndef test():\r\n    is_training = tf.placeholder(tf.bool)\r\n    tensor_a = tf_fun1(1)\r\n    tensor_b = tf_fun2(2)\r\n    cond_tensor = tf.cond(is_training, lambda: tensor_a, lambda: tensor_b)\r\n    cond_func = tf.cond(is_training, lambda: tf_fun1(1),lambda: tf_fun2(2))\r\n    cond_func_with_tensor = tf.cond(is_training, lambda: tf_fun1(tensor_a),lambda: tf_fun2(tensor_b))\r\n    with tf.Session() as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n        print 'run cond_tensor'\r\n        value = sess.run(cond_tensor,feed_dict={is_training:True})\r\n        print 'run cond_func'\r\n        value = sess.run(cond_func,feed_dict={is_training:True})\r\n        print 'run cond_func_with_tensor'\r\n        value = sess.run(cond_func_with_tensor,feed_dict={is_training:True})\r\n\r\n```\r\nThe result of running:\r\n```\r\nrun cond_tensor\r\na2 2\r\na1 1\r\nrun cond_func\r\na1 1\r\nrun cond_func_with_tensor\r\na2 2\r\na1 1\r\na1 1\r\n```\r\n"}