{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/336257619", "html_url": "https://github.com/tensorflow/tensorflow/pull/13282#issuecomment-336257619", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13282", "id": 336257619, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjI1NzYxOQ==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-12T20:33:07Z", "updated_at": "2017-10-12T20:33:07Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> I looked into the way <code>map_fn</code> handles nested structures. However, it seems that <code>map_fn</code>-like method (and <code>scan</code>) expects the same (nested) structure for all elems along dimension 0. But this is not the case raised in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"247823207\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12019\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12019/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12019\">#12019</a>.</p>\n<p>In <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"247823207\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12019\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12019/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12019\">#12019</a>, the input was</p>\n<pre><code>def concat2(A, B):\n    return tf.concat([A, B], axis=0)\n\nA = tf.constant([[10,10]])             # A.shape =&gt; (1,2)\nB = tf.constant([[20, 20], [30, 30]])  # B.shape =&gt; (2,2)\n\nprint(concat2(A, B).eval())              # =&gt; [[10, 10], [20, 20], [30, 30]]\nprint(tf.foldr(concat2, [A, B]).eval())  # =&gt; ERROR!\n</code></pre>\n<p>My understanding is that the above scenario will not be compatible with nested structure as <code>map_fn</code>.</p>\n<p>For that I am thinking we might consider:</p>\n<ul>\n<li>Update the <code>tf.foldl</code> and <code>tf.foldr</code> to support <code>map_fn</code>-like operations that allows nested structure.</li>\n<li>Add method <code>foldl</code> and <code>foldr</code> to <code>TensorArray</code> so that tensors with different shapes could be supported.</li>\n</ul>\n<p>Let me know if the above makes sense or not. If it does, then I can update this PR for nested structure support of <code>tf.foldl</code> and <code>tf.foldr</code>, and create another PR to address <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"247823207\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12019\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12019/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12019\">#12019</a> with <code>foldl</code> and <code>foldr</code> to <code>TensorArray</code>.</p>\n<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=393850\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/edgimar\">@edgimar</a></p>", "body_text": "@mrry @ebrevdo I looked into the way map_fn handles nested structures. However, it seems that map_fn-like method (and scan) expects the same (nested) structure for all elems along dimension 0. But this is not the case raised in #12019.\nIn #12019, the input was\ndef concat2(A, B):\n    return tf.concat([A, B], axis=0)\n\nA = tf.constant([[10,10]])             # A.shape => (1,2)\nB = tf.constant([[20, 20], [30, 30]])  # B.shape => (2,2)\n\nprint(concat2(A, B).eval())              # => [[10, 10], [20, 20], [30, 30]]\nprint(tf.foldr(concat2, [A, B]).eval())  # => ERROR!\n\nMy understanding is that the above scenario will not be compatible with nested structure as map_fn.\nFor that I am thinking we might consider:\n\nUpdate the tf.foldl and tf.foldr to support map_fn-like operations that allows nested structure.\nAdd method foldl and foldr to TensorArray so that tensors with different shapes could be supported.\n\nLet me know if the above makes sense or not. If it does, then I can update this PR for nested structure support of tf.foldl and tf.foldr, and create another PR to address #12019 with foldl and foldr to TensorArray.\n/cc @edgimar", "body": "@mrry @ebrevdo I looked into the way `map_fn` handles nested structures. However, it seems that `map_fn`-like method (and `scan`) expects the same (nested) structure for all elems along dimension 0. But this is not the case raised in #12019.\r\n\r\nIn #12019, the input was\r\n```\r\ndef concat2(A, B):\r\n    return tf.concat([A, B], axis=0)\r\n\r\nA = tf.constant([[10,10]])             # A.shape => (1,2)\r\nB = tf.constant([[20, 20], [30, 30]])  # B.shape => (2,2)\r\n\r\nprint(concat2(A, B).eval())              # => [[10, 10], [20, 20], [30, 30]]\r\nprint(tf.foldr(concat2, [A, B]).eval())  # => ERROR!\r\n```\r\n\r\nMy understanding is that the above scenario will not be compatible with nested structure as `map_fn`.\r\n\r\nFor that I am thinking we might consider:\r\n- Update the `tf.foldl` and `tf.foldr` to support `map_fn`-like operations that allows nested structure.\r\n- Add method `foldl` and `foldr` to `TensorArray` so that tensors with different shapes could be supported.\r\n\r\nLet me know if the above makes sense or not. If it does, then I can update this PR for nested structure support of `tf.foldl` and `tf.foldr`, and create another PR to address #12019 with `foldl` and `foldr` to `TensorArray`.\r\n\r\n/cc @edgimar\r\n"}