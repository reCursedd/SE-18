{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/367486190", "html_url": "https://github.com/tensorflow/tensorflow/issues/16603#issuecomment-367486190", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16603", "id": 367486190, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzQ4NjE5MA==", "user": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-21T21:51:14Z", "updated_at": "2018-02-21T21:51:14Z", "author_association": "MEMBER", "body_html": "<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=577277\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinwicke\">@martinwicke</a></p>\n<p>Looking at this<br>\n<a href=\"https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SpectreAndMeltdown#Userspace_Mitigations\" rel=\"nofollow\">https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SpectreAndMeltdown#Userspace_Mitigations</a><br>\nI do not see any package that we knowingly include in our cpu dockerfiles.</p>\n<p>Moreover, even if we add \"apt-get upgrade\" at the end of our dockerfiles, it only runs upgrade at build time.<br>\nSo for 1.3, 1.4, 1.5 those would be when the releases were last built. What we upload to docker are static docker images, which you simply download and start working on. So whatever we do, the image will only be updated at the time of the build/release we are doing, we cannot make the built images pickup security updates automatically.</p>\n<p>Also looking at your comment about dockerfile best practices in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"292942889\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/16603\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/16603/hovercard?comment_id=362939637&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/issues/16603#issuecomment-362939637\">#16603 (comment)</a> , I think we can use the same logic to argue that ubuntu images are the ones where apt-get upgrade should be run, rather than ours.</p>\n<p>I am not sure how to proceed here. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=577277\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinwicke\">@martinwicke</a> On our side what is needed would be to pull every single image we have, run apt-get upgrade repush them.<br>\nI am not sure if it is something we would like to do since the main place the vulnerabilities should be mitigated is the host kernel.</p>", "body_text": "CC @martinwicke\nLooking at this\nhttps://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SpectreAndMeltdown#Userspace_Mitigations\nI do not see any package that we knowingly include in our cpu dockerfiles.\nMoreover, even if we add \"apt-get upgrade\" at the end of our dockerfiles, it only runs upgrade at build time.\nSo for 1.3, 1.4, 1.5 those would be when the releases were last built. What we upload to docker are static docker images, which you simply download and start working on. So whatever we do, the image will only be updated at the time of the build/release we are doing, we cannot make the built images pickup security updates automatically.\nAlso looking at your comment about dockerfile best practices in #16603 (comment) , I think we can use the same logic to argue that ubuntu images are the ones where apt-get upgrade should be run, rather than ours.\nI am not sure how to proceed here. @martinwicke On our side what is needed would be to pull every single image we have, run apt-get upgrade repush them.\nI am not sure if it is something we would like to do since the main place the vulnerabilities should be mitigated is the host kernel.", "body": "CC @martinwicke \r\n\r\nLooking at this\r\nhttps://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/SpectreAndMeltdown#Userspace_Mitigations\r\nI do not see any package that we knowingly include in our cpu dockerfiles.\r\n\r\nMoreover, even if we add \"apt-get upgrade\" at the end of our dockerfiles, it only runs upgrade at build time.\r\nSo for 1.3, 1.4, 1.5 those would be when the releases were last built. What we upload to docker are static docker images, which you simply download and start working on. So whatever we do, the image will only be updated at the time of the build/release we are doing, we cannot make the built images pickup security updates automatically.\r\n\r\nAlso looking at your comment about dockerfile best practices in https://github.com/tensorflow/tensorflow/issues/16603#issuecomment-362939637 , I think we can use the same logic to argue that ubuntu images are the ones where apt-get upgrade should be run, rather than ours. \r\n\r\nI am not sure how to proceed here. @martinwicke On our side what is needed would be to pull every single image we have, run apt-get upgrade repush them.\r\nI am not sure if it is something we would like to do since the main place the vulnerabilities should be mitigated is the host kernel."}