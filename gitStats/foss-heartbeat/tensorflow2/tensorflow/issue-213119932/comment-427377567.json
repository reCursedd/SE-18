{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/427377567", "html_url": "https://github.com/tensorflow/tensorflow/issues/8246#issuecomment-427377567", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8246", "id": 427377567, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzM3NzU2Nw==", "user": {"login": "mspinaci", "id": 32176505, "node_id": "MDQ6VXNlcjMyMTc2NTA1", "avatar_url": "https://avatars2.githubusercontent.com/u/32176505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mspinaci", "html_url": "https://github.com/mspinaci", "followers_url": "https://api.github.com/users/mspinaci/followers", "following_url": "https://api.github.com/users/mspinaci/following{/other_user}", "gists_url": "https://api.github.com/users/mspinaci/gists{/gist_id}", "starred_url": "https://api.github.com/users/mspinaci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mspinaci/subscriptions", "organizations_url": "https://api.github.com/users/mspinaci/orgs", "repos_url": "https://api.github.com/users/mspinaci/repos", "events_url": "https://api.github.com/users/mspinaci/events{/privacy}", "received_events_url": "https://api.github.com/users/mspinaci/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-05T14:05:36Z", "updated_at": "2018-10-05T14:52:33Z", "author_association": "NONE", "body_html": "<p>At least for 1D tensors, a combination of tf.cumsum and tf.sparse_to_dense should do the trick:</p>\n<pre><code>import tensorflow as tf\n\n\ndef tf_repeat_1D(x,repeats):\n    x = tf.constant(x, dtype=tf.float64)\n    repeats = tf.constant(repeats, dtype=tf.int32)\n\n    shape = tf.reduce_sum(repeats)\n    idx = tf.concat([tf.constant([0], dtype=tf.int32), tf.cumsum(repeats[:-1])], axis=0)\n    y = tf.sparse_to_dense(\n        sparse_indices = idx,\n        output_shape=(shape,),\n        sparse_values=x - tf.concat([tf.constant([0], dtype=tf.float64), x[:-1]], axis=0)\n    )\n\n    return tf.cumsum(y)\n\nz1 = tf_repeat_1D([0,1,2], [3,4,5])\nz2 = tf_repeat_1D([4,2,5], [1, 3, 2])\n\nwith tf.Session() as sess:\n    print(z1.eval())\n    print(z2.eval())\n</code></pre>\n<p>This prints:</p>\n<pre><code>[0. 0. 0. 1. 1. 1. 1. 2. 2. 2. 2. 2.]\n[4. 2. 2. 2. 5. 5.]\n</code></pre>\n<p>The trick is to use something like <code>np.concatenate(([x[0]], x[1:]-x[:-1]))</code> (placed at the correct indices) in order to reconstruct the correct values when using cumsum.</p>\n<p>Generalizing to higher dim is made complicated by the fact that sparse_to_dense only accepts 1d sparse_values input... so probably using another function there is better.</p>", "body_text": "At least for 1D tensors, a combination of tf.cumsum and tf.sparse_to_dense should do the trick:\nimport tensorflow as tf\n\n\ndef tf_repeat_1D(x,repeats):\n    x = tf.constant(x, dtype=tf.float64)\n    repeats = tf.constant(repeats, dtype=tf.int32)\n\n    shape = tf.reduce_sum(repeats)\n    idx = tf.concat([tf.constant([0], dtype=tf.int32), tf.cumsum(repeats[:-1])], axis=0)\n    y = tf.sparse_to_dense(\n        sparse_indices = idx,\n        output_shape=(shape,),\n        sparse_values=x - tf.concat([tf.constant([0], dtype=tf.float64), x[:-1]], axis=0)\n    )\n\n    return tf.cumsum(y)\n\nz1 = tf_repeat_1D([0,1,2], [3,4,5])\nz2 = tf_repeat_1D([4,2,5], [1, 3, 2])\n\nwith tf.Session() as sess:\n    print(z1.eval())\n    print(z2.eval())\n\nThis prints:\n[0. 0. 0. 1. 1. 1. 1. 2. 2. 2. 2. 2.]\n[4. 2. 2. 2. 5. 5.]\n\nThe trick is to use something like np.concatenate(([x[0]], x[1:]-x[:-1])) (placed at the correct indices) in order to reconstruct the correct values when using cumsum.\nGeneralizing to higher dim is made complicated by the fact that sparse_to_dense only accepts 1d sparse_values input... so probably using another function there is better.", "body": "At least for 1D tensors, a combination of tf.cumsum and tf.sparse_to_dense should do the trick:\r\n\r\n    import tensorflow as tf\r\n\r\n\r\n    def tf_repeat_1D(x,repeats):\r\n        x = tf.constant(x, dtype=tf.float64)\r\n        repeats = tf.constant(repeats, dtype=tf.int32)\r\n\r\n        shape = tf.reduce_sum(repeats)\r\n        idx = tf.concat([tf.constant([0], dtype=tf.int32), tf.cumsum(repeats[:-1])], axis=0)\r\n        y = tf.sparse_to_dense(\r\n            sparse_indices = idx,\r\n            output_shape=(shape,),\r\n            sparse_values=x - tf.concat([tf.constant([0], dtype=tf.float64), x[:-1]], axis=0)\r\n        )\r\n\r\n        return tf.cumsum(y)\r\n\r\n    z1 = tf_repeat_1D([0,1,2], [3,4,5])\r\n    z2 = tf_repeat_1D([4,2,5], [1, 3, 2])\r\n\r\n    with tf.Session() as sess:\r\n        print(z1.eval())\r\n        print(z2.eval())\r\n\r\nThis prints:\r\n\r\n    [0. 0. 0. 1. 1. 1. 1. 2. 2. 2. 2. 2.]\r\n    [4. 2. 2. 2. 5. 5.]\r\n\r\nThe trick is to use something like `np.concatenate(([x[0]], x[1:]-x[:-1]))` (placed at the correct indices) in order to reconstruct the correct values when using cumsum.\r\n\r\nGeneralizing to higher dim is made complicated by the fact that sparse_to_dense only accepts 1d sparse_values input... so probably using another function there is better."}