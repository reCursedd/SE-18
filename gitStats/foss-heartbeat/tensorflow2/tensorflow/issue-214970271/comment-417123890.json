{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/417123890", "html_url": "https://github.com/tensorflow/tensorflow/issues/8496#issuecomment-417123890", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8496", "id": 417123890, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzEyMzg5MA==", "user": {"login": "nrhine1", "id": 372326, "node_id": "MDQ6VXNlcjM3MjMyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/372326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrhine1", "html_url": "https://github.com/nrhine1", "followers_url": "https://api.github.com/users/nrhine1/followers", "following_url": "https://api.github.com/users/nrhine1/following{/other_user}", "gists_url": "https://api.github.com/users/nrhine1/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrhine1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrhine1/subscriptions", "organizations_url": "https://api.github.com/users/nrhine1/orgs", "repos_url": "https://api.github.com/users/nrhine1/repos", "events_url": "https://api.github.com/users/nrhine1/events{/privacy}", "received_events_url": "https://api.github.com/users/nrhine1/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-29T22:13:22Z", "updated_at": "2018-08-29T22:13:22Z", "author_association": "NONE", "body_html": "<p>Here's an implementation for uniform sampling with replacement along a specific axis (untested).</p>\n<pre><code>def random_choice(a, axis, samples_shape=None):\n    \"\"\"\n\n    :param a: tf.Tensor\n    :param axis: int axis to sample along\n    :param samples_shape: (optional) shape of samples to produce. if not provided, will sample once.\n    :returns: tf.Tensor of shape a.shape[:axis] + samples_shape + a.shape[axis + 1:]\n    :rtype: \n\n    Examples:\n    &gt;&gt;&gt; a = tf.placeholder(shape=(10, 20, 30), dtype=tf.float32)\n    &gt;&gt;&gt; random_choice(a, axis=0)\n    &lt;tf.Tensor 'GatherV2:0' shape=(1, 20, 30) dtype=float32&gt;\n    &gt;&gt;&gt; random_choice(a, axis=1)\n    &lt;tf.Tensor 'GatherV2_1:0' shape=(10, 1, 30) dtype=float32&gt;\n    &gt;&gt;&gt; random_choice(a, axis=1, samples_shape=(2, 3))\n    &lt;tf.Tensor 'GatherV2_2:0' shape=(10, 2, 3, 30) dtype=float32\n    &gt;&gt;&gt; random_choice(a, axis=0, samples_shape=(100,))\n    &lt;tf.Tensor 'GatherV2_3:0' shape=(100, 20, 30) dtype=float32&gt;\n    \"\"\"\n    \n    if samples_shape is None:\n        samples_shape = (1,)\n    shape = tuple(a.get_shape().as_list())\n    dim = shape[axis]\n    choice_indices = tf.random_uniform(samples_shape, minval=0, maxval=dim, dtype=tf.int32)\n    samples = tf.gather(a, choice_indices, axis=axis)\n    return samples\n</code></pre>", "body_text": "Here's an implementation for uniform sampling with replacement along a specific axis (untested).\ndef random_choice(a, axis, samples_shape=None):\n    \"\"\"\n\n    :param a: tf.Tensor\n    :param axis: int axis to sample along\n    :param samples_shape: (optional) shape of samples to produce. if not provided, will sample once.\n    :returns: tf.Tensor of shape a.shape[:axis] + samples_shape + a.shape[axis + 1:]\n    :rtype: \n\n    Examples:\n    >>> a = tf.placeholder(shape=(10, 20, 30), dtype=tf.float32)\n    >>> random_choice(a, axis=0)\n    <tf.Tensor 'GatherV2:0' shape=(1, 20, 30) dtype=float32>\n    >>> random_choice(a, axis=1)\n    <tf.Tensor 'GatherV2_1:0' shape=(10, 1, 30) dtype=float32>\n    >>> random_choice(a, axis=1, samples_shape=(2, 3))\n    <tf.Tensor 'GatherV2_2:0' shape=(10, 2, 3, 30) dtype=float32\n    >>> random_choice(a, axis=0, samples_shape=(100,))\n    <tf.Tensor 'GatherV2_3:0' shape=(100, 20, 30) dtype=float32>\n    \"\"\"\n    \n    if samples_shape is None:\n        samples_shape = (1,)\n    shape = tuple(a.get_shape().as_list())\n    dim = shape[axis]\n    choice_indices = tf.random_uniform(samples_shape, minval=0, maxval=dim, dtype=tf.int32)\n    samples = tf.gather(a, choice_indices, axis=axis)\n    return samples", "body": "Here's an implementation for uniform sampling with replacement along a specific axis (untested).\r\n\r\n```\r\ndef random_choice(a, axis, samples_shape=None):\r\n    \"\"\"\r\n\r\n    :param a: tf.Tensor\r\n    :param axis: int axis to sample along\r\n    :param samples_shape: (optional) shape of samples to produce. if not provided, will sample once.\r\n    :returns: tf.Tensor of shape a.shape[:axis] + samples_shape + a.shape[axis + 1:]\r\n    :rtype: \r\n\r\n    Examples:\r\n    >>> a = tf.placeholder(shape=(10, 20, 30), dtype=tf.float32)\r\n    >>> random_choice(a, axis=0)\r\n    <tf.Tensor 'GatherV2:0' shape=(1, 20, 30) dtype=float32>\r\n    >>> random_choice(a, axis=1)\r\n    <tf.Tensor 'GatherV2_1:0' shape=(10, 1, 30) dtype=float32>\r\n    >>> random_choice(a, axis=1, samples_shape=(2, 3))\r\n    <tf.Tensor 'GatherV2_2:0' shape=(10, 2, 3, 30) dtype=float32\r\n    >>> random_choice(a, axis=0, samples_shape=(100,))\r\n    <tf.Tensor 'GatherV2_3:0' shape=(100, 20, 30) dtype=float32>\r\n    \"\"\"\r\n    \r\n    if samples_shape is None:\r\n        samples_shape = (1,)\r\n    shape = tuple(a.get_shape().as_list())\r\n    dim = shape[axis]\r\n    choice_indices = tf.random_uniform(samples_shape, minval=0, maxval=dim, dtype=tf.int32)\r\n    samples = tf.gather(a, choice_indices, axis=axis)\r\n    return samples\r\n```"}