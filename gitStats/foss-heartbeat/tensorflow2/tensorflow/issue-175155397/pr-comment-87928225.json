{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/87928225", "pull_request_review_id": 8518908, "id": 87928225, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3OTI4MjI1", "diff_hunk": "@@ -1406,49 +1403,37 @@ def decode_image(contents, channels=None, ratio=None, fancy_upscaling=None,\n \n   Args:\n     contents: 0-D `string`. The encoded image bytes.\n-    channels: Number of color channels for the decoded image.\n-    ratio: Downscaling ratio (only used when decoding JPEG images)\n-    fancy_upscaling: If true use a slower but nicer upscaling of the chroma \n-      planes (yuv420/422 JPEG images only).\n-    try_recover_truncated: If true, try to recover an image from truncated input\n-      (only used when decoding JPEG images).\n-    acceptable_fraction: The minimum required fraction of lines before a \n-      truncated input is accepted (only used when decoding JPEG images).\n+    channels: Number of color channels for the decoded image. (No GIF support)\n   \n   Returns:\n     `Tensor` with type `uint8`. Shape `[height, width, num_channels]` for JPEG \n       and PNG images. Shape `[num_frames, height, width, 3]` for GIF images.\n   \"\"\"\n   with ops.name_scope(name, 'decode_image') as scope:\n-    def _gif():\n-      return gen_image_ops.decode_gif(contents)\n-\n     def _jpeg():\n-      return gen_image_ops.decode_jpeg(contents, channels, ratio, \n-                                       fancy_upscaling, try_recover_truncated, \n-                                       acceptable_fraction)\n+      return decode_jpeg(contents, channels)\n     def _png():\n-      return gen_image_ops.decode_png(contents, channels, dtypes.uint8)\n-\n-    is_gif = math_ops.equal(gen_string_ops.substr(contents, 0, 4),\n-                            b'\\x47\\x49\\x46\\x38')\n-    is_jpeg = math_ops.equal(gen_string_ops.substr(contents, 0, 4), \n-                            b'\\xff\\xd8\\xff\\xe0')\n-    is_png = math_ops.equal(gen_string_ops.substr(contents, 0, 8), \n-                            b'\\211PNG\\r\\n\\032\\n')\n-    is_decodable = math_ops.logical_or(is_gif, is_jpeg)\n-    is_decodable = math_ops.logical_or(is_decodable, is_png)\n-    assert_decodable = control_flow_ops.Assert(is_decodable, \n-                                               [b'Unable to decode bytes as a '\n-                                                b'PNG or JPEG. Is the file '\n-                                                b'encoded properly?'])\n-    # Leaving default case to be decode_png\n-    cases = [(is_gif, _gif),\n-             (is_jpeg, _jpeg),\n-            ]\n-    with ops.control_dependencies([assert_decodable]):\n-      return control_flow_ops.case(cases, _png, exclusive=True, \n-                                   name=scope)\n+      return decode_png(contents, channels)\n+    def _gif():\n+      return decode_gif(contents)\n+\n+    header = string_ops.substr(contents, 0, 4)\n+    is_jpeg = math_ops.equal(header, b'\\xff\\xd8\\xff\\xe0')\n+    is_png = math_ops.equal(header, b'\\211PNG')\n+    is_gif = math_ops.equal(header, b'\\x47\\x49\\x46\\x38')\n+\n+    def _try_gif():\n+      if channels is not None and channels not in (0, 3):", "path": "tensorflow/python/ops/image_ops.py", "position": null, "original_position": 83, "commit_id": "30a964bda83860f7398189669c3cd44afed1c0d8", "original_commit_id": "0879d37555f509410c24e5ef383be19931942ca2", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "body": "`if channels not in (None, 0, 3):`\n", "created_at": "2016-11-15T00:56:32Z", "updated_at": "2016-11-30T21:00:32Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4222#discussion_r87928225", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4222", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/87928225"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4222#discussion_r87928225"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4222"}}, "body_html": "<p><code>if channels not in (None, 0, 3):</code></p>", "body_text": "if channels not in (None, 0, 3):"}