{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/87888264", "pull_request_review_id": 8481319, "id": 87888264, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3ODg4MjY0", "diff_hunk": "@@ -0,0 +1,116 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Tests for decode_image.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import numpy as np\n+import tensorflow as tf\n+\n+\n+class DecodeImageOpTest(tf.test.TestCase):\n+\n+  def testGif(self):\n+    # GIF encoded 2x2 image\n+    image_bytes = (b'GIF89a\\x02\\x00\\x02\\x00\\xf1\\x01\\x00\\x00\\x00\\x00\\xff\\xff\\xff'\n+                   b'\\xff\\xff\\xff\\x00\\x00\\x00!\\xf9\\x04\\x00\\x00\\x00\\x00\\x00,\\x00'\n+                   b'\\x00\\x00\\x00\\x02\\x00\\x02\\x00\\x00\\x02\\x03D4\\x05\\x00;')\n+    expected_values = np.array([[[[  0,   0,   0], [255, 255, 255]],\n+                                [[255, 255, 255], [0, 0, 0]]]], \n+                                dtype=np.uint8)\n+    decode = tf.image.decode_image(image_bytes)\n+    with self.test_session():\n+      decoded_pixels = decode.eval()\n+      self.assertAllEqual(decoded_pixels, expected_values)\n+\n+  def testJpeg(self):\n+    # JPEG encoded 2x2 image\n+    image_bytes = (b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x01\\x01\\x00H\\x00H\\x00'\n+                   b'\\x00\\xff\\xdb\\x00C\\x00\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n+                   b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n+                   b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n+                   b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n+                   b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\xff'\n+                   b'\\xdb\\x00C\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n+                   b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n+                   b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n+                   b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n+                   b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\xff\\xc2\\x00'\n+                   b'\\x11\\x08\\x00\\x02\\x00\\x02\\x03\\x01\\x11\\x00\\x02\\x11\\x01\\x03'\n+                   b'\\x11\\x01\\xff\\xc4\\x00\\x14\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00'\n+                   b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\t\\xff\\xc4\\x00\\x14\\x01'\n+                   b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n+                   b'\\x00\\x00\\x00\\xff\\xda\\x00\\x0c\\x03\\x01\\x00\\x02\\x10\\x03\\x10'\n+                   b'\\x00\\x00\\x01hO\\xff\\xc4\\x00\\x16\\x10\\x01\\x01\\x01\\x00\\x00\\x00'\n+                   b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x06\\x03\\xff'\n+                   b'\\xda\\x00\\x08\\x01\\x01\\x00\\x01\\x05\\x02*JW\"\\xff\\x00\\xff\\xc4'\n+                   b'\\x00\\x14\\x11\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n+                   b'\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xda\\x00\\x08\\x01\\x03\\x01\\x01?'\n+                   b'\\x01\\x7f\\xff\\xc4\\x00\\x14\\x11\\x01\\x00\\x00\\x00\\x00\\x00\\x00'\n+                   b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xda\\x00\\x08'\n+                   b'\\x01\\x02\\x01\\x01?\\x01\\x7f\\xff\\xc4\\x00\\x1b\\x10\\x01\\x01\\x01'\n+                   b'\\x00\\x03\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02'\n+                   b'\\x01\\x03\\x04\\x05\\x06\\x00\\x11\\xff\\xda\\x00\\x08\\x01\\x01\\x00'\n+                   b'\\x06?\\x02\\xebs\\xcf\\xcc\\xf9\\xfc\\xf3\\xcf\\x81\\xc3\\x19\\xe6:n'\n+                   b'\\xb8\\x00\\x07\\x1f2@\\'\\x8d\\t$\\xc9\\t\\x92I\\'\\xe4\\xfb\\xff\\xc4'\n+                   b'\\x00\\x15\\x10\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n+                   b'\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\xff\\xda\\x00\\x08\\x01\\x01\\x00'\n+                   b'\\x01?! \\xd5N\\xe1!\\xc4\\x9c\\x00\\x05\\xff\\xda\\x00\\x0c\\x03\\x01'\n+                   b'\\x00\\x02\\x00\\x03\\x00\\x00\\x00\\x10\\x9f\\xff\\xc4\\x00\\x14\\x11'\n+                   b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n+                   b'\\x00\\x00\\x00\\xff\\xda\\x00\\x08\\x01\\x03\\x01\\x01?\\x10\\x7f\\xff'\n+                   b'\\xc4\\x00\\x14\\x11\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n+                   b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xda\\x00\\x08\\x01\\x02\\x01'\n+                   b'\\x01?\\x10\\x7f\\xff\\xc4\\x00\\x14\\x10\\x01\\x00\\x00\\x00\\x00\\x00'\n+                   b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xff\\xda\\x00'\n+                   b'\\x08\\x01\\x01\\x00\\x01?\\x10\\x0f\\xcaHM\\xe0\\x84\\x89\\xe8\\xff'\n+                   b'\\xd9')\n+    expected_values = np.array([[[  0,   0,   0], [136, 136, 136]],\n+                                [[204, 204, 204], [255, 255, 255]]], \n+                               dtype=np.uint8)\n+    decode = tf.image.decode_image(image_bytes, channels=3)\n+    with self.test_session():\n+      decoded_pixels = decode.eval()\n+      self.assertAllEqual(decoded_pixels, expected_values)\n+\n+  def testPng(self):\n+    # PNG encoded 2x2 image\n+    image_bytes = (b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x02\\x00\\x00'\n+                   b'\\x00\\x02\\x08\\x06\\x00\\x00\\x00r\\xb6\\r$\\x00\\x00\\x00\\tpHYs\\x00'\n+                   b'\\x00\\x0b\\x13\\x00\\x00\\x0b\\x13\\x01\\x00\\x9a\\x9c\\x18\\x00\\x00'\n+                   b'\\x00\\x07tIME\\x07\\xe0\\t\\x06\\x023\\x1c\\x11\\x05a\\x9e\\x00\\x00'\n+                   b'\\x00\\x1bIDAT\\x08\\xd7cd``\\xf8\\xdf\\xd1\\xd1\\xc1\\xc0p\\xe6\\xcc'\n+                   b'\\x99\\xff\\xff\\xff\\xff\\xff\\x0f\\x00@\\xe3\\t\\xf8tP\\x9c\\xec\\x00'\n+                   b'\\x00\\x00\\x00IEND\\xaeB`\\x82')", "path": "tensorflow/python/kernel_tests/decode_image_op_test.py", "position": null, "original_position": 98, "commit_id": "30a964bda83860f7398189669c3cd44afed1c0d8", "original_commit_id": "9f2f2f2ab1dd174e8de128ae7f568b76273dde2b", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "body": "Use test files.\n", "created_at": "2016-11-14T20:43:44Z", "updated_at": "2016-11-30T21:00:32Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4222#discussion_r87888264", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4222", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/87888264"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4222#discussion_r87888264"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4222"}}, "body_html": "<p>Use test files.</p>", "body_text": "Use test files."}