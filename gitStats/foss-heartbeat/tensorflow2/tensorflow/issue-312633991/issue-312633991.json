{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18352", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18352/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18352/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18352/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18352", "id": 312633991, "node_id": "MDU6SXNzdWUzMTI2MzM5OTE=", "number": 18352, "title": "Placeholder not replaced by import_graph_def input_map argument", "user": {"login": "matejaputic", "id": 2180391, "node_id": "MDQ6VXNlcjIxODAzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2180391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matejaputic", "html_url": "https://github.com/matejaputic", "followers_url": "https://api.github.com/users/matejaputic/followers", "following_url": "https://api.github.com/users/matejaputic/following{/other_user}", "gists_url": "https://api.github.com/users/matejaputic/gists{/gist_id}", "starred_url": "https://api.github.com/users/matejaputic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matejaputic/subscriptions", "organizations_url": "https://api.github.com/users/matejaputic/orgs", "repos_url": "https://api.github.com/users/matejaputic/repos", "events_url": "https://api.github.com/users/matejaputic/events{/privacy}", "received_events_url": "https://api.github.com/users/matejaputic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-04-09T18:17:27Z", "updated_at": "2018-09-18T19:06:26Z", "closed_at": "2018-09-18T19:01:19Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: I have written custom code</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.6</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n/a</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: n/a</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Problem Description</h3>\n<p>I'm having trouble connecting a placeholder in a GraphDef loaded from a file to a dataset provider using the<code>input_map</code> argument to <code>tf.import_graph_def</code>, and I don't think it's behaving as expected.</p>\n<p>I first set up a data source, referenced in a tensor called <code>images</code>. Then I load a GraphDef from a file that contains a Placeholder called <code>batch</code>. Then I call</p>\n<pre><code>  tf.import_graph_def(quantized_graph_def, input_map={'batch': images}, name='')\n</code></pre>\n<p>to connect them together. When I run this I get the error:</p>\n<pre><code>InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor \n'batch_1' with dtype float and shape [100,224,224,3]\n             [[Node: batch_1 = Placeholder[dtype=DT_FLOAT, shape=[100,224,224,3], \n_device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n</code></pre>\n<p>According to the documentation for <code>tf.import_graph_def</code>:</p>\n<blockquote>\n<p><code>input_map</code>: A dictionary mapping input names (as strings) in graph_def to Tensor objects. The values of the named input tensors in the imported graph will be re-mapped to the respective Tensor values.</p>\n</blockquote>\n<p>As I understand it, the <code>input_map</code> argument should connect the two graphs, but that doesn't seem to be working. See related article <a href=\"https://blog.konpat.me/tf-connecting-two-graphs-together/\" rel=\"nofollow\">\"Connecting Two Graphs Together using <code>import_graph_def</code>\"</a>. I believe that I am doing the same thing as in the article.</p>\n<h3>Source Code/Logs</h3>\n<p>This script borrows heavily from <a href=\"https://github.com/tensorflow/models/blob/master/research/slim/eval_image_classifier.py\"><code>models/research/slim/eval_image_classifier.py</code></a>.</p>\n<p>First I open a graph</p>\n<pre><code>with tf.Graph().as_default():\n</code></pre>\n<p>Then I set up a dataset provider and preprocessing function using the <code>slim</code> API</p>\n<pre><code>  # Select the dataset\n  # Create a dataset provider that loads data from the dataset\n  # Select the preprocessing function\n  ...\n  image = image_preprocessing_fn(image, eval_image_size, eval_image_size)\n\n  images, labels = tf.train.batch(\n      [image, label],\n      batch_size=batch_size,\n      num_threads=num_preprocessing_threads,\n      capacity=5 * batch_size)\n</code></pre>\n<p>Then I import a graph from a GraphDef from a file and load it into the current graph using <code>import_graph_def</code></p>\n<pre><code>  quantized_graph_def = graph_pb2.GraphDef()\n  with tf.gfile.FastGFile(path.join(cwd(), quantized_graph_filename), 'rb') as f:\n    quantized_graph_def.ParseFromString(f.read())\n  tf.import_graph_def(quantized_graph_def, input_map={'batch': images}, name='')\n</code></pre>\n<p>Then I set up the metrics and call <code>slim.evaluation.evaluate_once</code> to process the batches</p>\n<pre><code>  # Define the metrics:\n  names_to_values, names_to_updates = slim.metrics.aggregate_metric_map({\n      'Accuracy': slim.metrics.streaming_accuracy(predictions, labels),\n      'Recall_5': slim.metrics.streaming_recall_at_k(\n          logits, labels, 5),\n  })\n\n  ...\n\n  slim.evaluation.evaluate_once(\n      master=master,\n      checkpoint_path=checkpoint_path,\n      logdir=log_dir,\n      num_evals=num_batches,\n      eval_op=list(names_to_updates.values()))\n</code></pre>\n<p>When I run this I get the following error:</p>\n<pre><code>Caused by op 'batch_1', defined at:\n  File \"vanilla_vgg.py\", line 319, in &lt;module&gt;\n    import_quantized_graph_with_imagenet()\n  File \"vanilla_vgg.py\", line 251, in import_quantized_graph_with_imagenet\n    tf.import_graph_def(quantized_graph_def, input_map={'batch': images}, name='')\n  File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py\", line 432, in new_func\n    return func(*args, **kwargs)\n  File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 553, in import_graph_def\n    op_def=op_def)\n  File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 3271, in create_op\n    op_def=op_def)\n  File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 1650, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'batch_1' with dtype float and shape [100,224,224,3]\n         [[Node: batch_1 = Placeholder[dtype=DT_FLOAT, shape=[100,224,224,3], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n</code></pre>\n<p>The GraphDef that I am loading has a Placeholder op with the name <code>batch</code>, with the same shape and dtype as the tensor <code>images</code>. For reference, running <code>print(images)</code> returns:</p>\n<pre><code>Tensor(\"batch:0\", shape=(100, 224, 224, 3), dtype=float32)\n</code></pre>\n<p>I have also tried using <code>batch:0</code> and <code>batch_1</code> as the key to the <code>input_map</code> but neither works.</p>\n<p>The <code>evaluate_once</code> function runs a batch of images in a single function call, so I cannot simply call <code>images.eval()</code> and pass the result to <code>evaluate_once</code> because it would only run the first batch. So the two graphs must be connected and able to be run with a single invocation.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): I have written custom code\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.6\nPython version: 3.5\nBazel version (if compiling from source): n/a\nGCC/Compiler version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce:\n\nProblem Description\nI'm having trouble connecting a placeholder in a GraphDef loaded from a file to a dataset provider using theinput_map argument to tf.import_graph_def, and I don't think it's behaving as expected.\nI first set up a data source, referenced in a tensor called images. Then I load a GraphDef from a file that contains a Placeholder called batch. Then I call\n  tf.import_graph_def(quantized_graph_def, input_map={'batch': images}, name='')\n\nto connect them together. When I run this I get the error:\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor \n'batch_1' with dtype float and shape [100,224,224,3]\n             [[Node: batch_1 = Placeholder[dtype=DT_FLOAT, shape=[100,224,224,3], \n_device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n\nAccording to the documentation for tf.import_graph_def:\n\ninput_map: A dictionary mapping input names (as strings) in graph_def to Tensor objects. The values of the named input tensors in the imported graph will be re-mapped to the respective Tensor values.\n\nAs I understand it, the input_map argument should connect the two graphs, but that doesn't seem to be working. See related article \"Connecting Two Graphs Together using import_graph_def\". I believe that I am doing the same thing as in the article.\nSource Code/Logs\nThis script borrows heavily from models/research/slim/eval_image_classifier.py.\nFirst I open a graph\nwith tf.Graph().as_default():\n\nThen I set up a dataset provider and preprocessing function using the slim API\n  # Select the dataset\n  # Create a dataset provider that loads data from the dataset\n  # Select the preprocessing function\n  ...\n  image = image_preprocessing_fn(image, eval_image_size, eval_image_size)\n\n  images, labels = tf.train.batch(\n      [image, label],\n      batch_size=batch_size,\n      num_threads=num_preprocessing_threads,\n      capacity=5 * batch_size)\n\nThen I import a graph from a GraphDef from a file and load it into the current graph using import_graph_def\n  quantized_graph_def = graph_pb2.GraphDef()\n  with tf.gfile.FastGFile(path.join(cwd(), quantized_graph_filename), 'rb') as f:\n    quantized_graph_def.ParseFromString(f.read())\n  tf.import_graph_def(quantized_graph_def, input_map={'batch': images}, name='')\n\nThen I set up the metrics and call slim.evaluation.evaluate_once to process the batches\n  # Define the metrics:\n  names_to_values, names_to_updates = slim.metrics.aggregate_metric_map({\n      'Accuracy': slim.metrics.streaming_accuracy(predictions, labels),\n      'Recall_5': slim.metrics.streaming_recall_at_k(\n          logits, labels, 5),\n  })\n\n  ...\n\n  slim.evaluation.evaluate_once(\n      master=master,\n      checkpoint_path=checkpoint_path,\n      logdir=log_dir,\n      num_evals=num_batches,\n      eval_op=list(names_to_updates.values()))\n\nWhen I run this I get the following error:\nCaused by op 'batch_1', defined at:\n  File \"vanilla_vgg.py\", line 319, in <module>\n    import_quantized_graph_with_imagenet()\n  File \"vanilla_vgg.py\", line 251, in import_quantized_graph_with_imagenet\n    tf.import_graph_def(quantized_graph_def, input_map={'batch': images}, name='')\n  File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py\", line 432, in new_func\n    return func(*args, **kwargs)\n  File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 553, in import_graph_def\n    op_def=op_def)\n  File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 3271, in create_op\n    op_def=op_def)\n  File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 1650, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'batch_1' with dtype float and shape [100,224,224,3]\n         [[Node: batch_1 = Placeholder[dtype=DT_FLOAT, shape=[100,224,224,3], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n\nThe GraphDef that I am loading has a Placeholder op with the name batch, with the same shape and dtype as the tensor images. For reference, running print(images) returns:\nTensor(\"batch:0\", shape=(100, 224, 224, 3), dtype=float32)\n\nI have also tried using batch:0 and batch_1 as the key to the input_map but neither works.\nThe evaluate_once function runs a batch of images in a single function call, so I cannot simply call images.eval() and pass the result to evaluate_once because it would only run the first batch. So the two graphs must be connected and able to be run with a single invocation.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: I have written custom code\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04 \r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.6\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**: n/a\r\n- **GCC/Compiler version (if compiling from source)**: n/a\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: \r\n\r\n### Problem Description\r\nI'm having trouble connecting a placeholder in a GraphDef loaded from a file to a dataset provider using the`input_map` argument to `tf.import_graph_def`, and I don't think it's behaving as expected.\r\n\r\nI first set up a data source, referenced in a tensor called `images`. Then I load a GraphDef from a file that contains a Placeholder called `batch`. Then I call\r\n\r\n      tf.import_graph_def(quantized_graph_def, input_map={'batch': images}, name='')\r\n\r\nto connect them together. When I run this I get the error:\r\n\r\n    InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor \r\n    'batch_1' with dtype float and shape [100,224,224,3]\r\n                 [[Node: batch_1 = Placeholder[dtype=DT_FLOAT, shape=[100,224,224,3], \r\n    _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\r\n\r\nAccording to the documentation for `tf.import_graph_def`:\r\n\r\n> `input_map`: A dictionary mapping input names (as strings) in graph_def to Tensor objects. The values of the named input tensors in the imported graph will be re-mapped to the respective Tensor values.\r\n\r\nAs I understand it, the `input_map` argument should connect the two graphs, but that doesn't seem to be working. See related article [\"Connecting Two Graphs Together using `import_graph_def`\"](https://blog.konpat.me/tf-connecting-two-graphs-together/). I believe that I am doing the same thing as in the article.\r\n\r\n### Source Code/Logs\r\n\r\nThis script borrows heavily from [`models/research/slim/eval_image_classifier.py`](https://github.com/tensorflow/models/blob/master/research/slim/eval_image_classifier.py).\r\n\r\nFirst I open a graph\r\n\r\n    with tf.Graph().as_default():\r\n\r\nThen I set up a dataset provider and preprocessing function using the `slim` API\r\n\r\n      # Select the dataset\r\n      # Create a dataset provider that loads data from the dataset\r\n      # Select the preprocessing function\r\n      ...\r\n      image = image_preprocessing_fn(image, eval_image_size, eval_image_size)\r\n\r\n      images, labels = tf.train.batch(\r\n          [image, label],\r\n          batch_size=batch_size,\r\n          num_threads=num_preprocessing_threads,\r\n          capacity=5 * batch_size)\r\n\r\nThen I import a graph from a GraphDef from a file and load it into the current graph using `import_graph_def`\r\n\r\n      quantized_graph_def = graph_pb2.GraphDef()\r\n      with tf.gfile.FastGFile(path.join(cwd(), quantized_graph_filename), 'rb') as f:\r\n        quantized_graph_def.ParseFromString(f.read())\r\n      tf.import_graph_def(quantized_graph_def, input_map={'batch': images}, name='')\r\n\r\nThen I set up the metrics and call `slim.evaluation.evaluate_once` to process the batches\r\n\r\n      # Define the metrics:\r\n      names_to_values, names_to_updates = slim.metrics.aggregate_metric_map({\r\n          'Accuracy': slim.metrics.streaming_accuracy(predictions, labels),\r\n          'Recall_5': slim.metrics.streaming_recall_at_k(\r\n              logits, labels, 5),\r\n      })\r\n\r\n      ...\r\n\r\n      slim.evaluation.evaluate_once(\r\n          master=master,\r\n          checkpoint_path=checkpoint_path,\r\n          logdir=log_dir,\r\n          num_evals=num_batches,\r\n          eval_op=list(names_to_updates.values()))\r\n\r\nWhen I run this I get the following error:\r\n\r\n    Caused by op 'batch_1', defined at:\r\n      File \"vanilla_vgg.py\", line 319, in <module>\r\n        import_quantized_graph_with_imagenet()\r\n      File \"vanilla_vgg.py\", line 251, in import_quantized_graph_with_imagenet\r\n        tf.import_graph_def(quantized_graph_def, input_map={'batch': images}, name='')\r\n      File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py\", line 432, in new_func\r\n        return func(*args, **kwargs)\r\n      File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 553, in import_graph_def\r\n        op_def=op_def)\r\n      File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 3271, in create_op\r\n        op_def=op_def)\r\n      File \"/localtmp/mp3t/venv/doggett/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 1650, in __init__\r\n        self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\r\n\r\n    InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'batch_1' with dtype float and shape [100,224,224,3]\r\n             [[Node: batch_1 = Placeholder[dtype=DT_FLOAT, shape=[100,224,224,3], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\r\n\r\nThe GraphDef that I am loading has a Placeholder op with the name `batch`, with the same shape and dtype as the tensor `images`. For reference, running `print(images)` returns:\r\n\r\n    Tensor(\"batch:0\", shape=(100, 224, 224, 3), dtype=float32)\r\n\r\nI have also tried using `batch:0` and `batch_1` as the key to the `input_map` but neither works.\r\n\r\nThe `evaluate_once` function runs a batch of images in a single function call, so I cannot simply call `images.eval()` and pass the result to `evaluate_once` because it would only run the first batch. So the two graphs must be connected and able to be run with a single invocation.\r\n"}