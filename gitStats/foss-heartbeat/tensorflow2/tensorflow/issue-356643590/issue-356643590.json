{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22039", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22039/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22039/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22039/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22039", "id": 356643590, "node_id": "MDU6SXNzdWUzNTY2NDM1OTA=", "number": 22039, "title": "Session.run () takes a long time", "user": {"login": "gulingfengze", "id": 16677891, "node_id": "MDQ6VXNlcjE2Njc3ODkx", "avatar_url": "https://avatars0.githubusercontent.com/u/16677891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gulingfengze", "html_url": "https://github.com/gulingfengze", "followers_url": "https://api.github.com/users/gulingfengze/followers", "following_url": "https://api.github.com/users/gulingfengze/following{/other_user}", "gists_url": "https://api.github.com/users/gulingfengze/gists{/gist_id}", "starred_url": "https://api.github.com/users/gulingfengze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gulingfengze/subscriptions", "organizations_url": "https://api.github.com/users/gulingfengze/orgs", "repos_url": "https://api.github.com/users/gulingfengze/repos", "events_url": "https://api.github.com/users/gulingfengze/events{/privacy}", "received_events_url": "https://api.github.com/users/gulingfengze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-09-04T03:49:40Z", "updated_at": "2018-11-20T13:30:32Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>:1.9.0</li>\n<li><strong>Python version</strong>:3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:6.4.0</li>\n<li><strong>CUDA/cuDNN version</strong>:9.0 / 7.0</li>\n<li><strong>GPU model and memory</strong>:GeForce GTX960</li>\n<li><strong>Exact command to reproduce</strong>:N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Each time tensorflow performs session.run() for target detection, the detection time of the first image is very long (including some initialization operations, of course), while the detection time of other images is normal. Suppose I detect the image under a certain path (for example, there are ten images), the time of detecting the first image is relatively long, and the remaining nine images are relatively short (basically consistent). However, my operation in practical application is as follows: the session.run() is called every once in a while to detect a picture. I hope that the detection time after the first one is normal except for the long time. However, through my test (guess), after exiting the loop logic of detection, tensorflow redid a series of initialization operations the next time the detection was done, which puzzled me.</p>\n<p>With other frameworks, such as mxnet, initial detection takes longer. And then the detection time is normal, as if it's not doing some initialization anymore. I thought, could tensorflow do the same thing?</p>\n<h3>Source code / logs</h3>\n<p>2018-09-04 14:48:59.111510: W tensorflow/core/common_runtime/bfc_allocator.cc:219] Allocator (GPU_0_bfc) ran out of memory trying to allocate 3.57GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.<br>\ntime\uff1a5627.940655ms<br>\n0.9999423027038574<br>\ntime\uff1a657.650471ms<br>\n0.9996843338012695<br>\ntime\uff1a676.565170ms<br>\n0.9722122550010681<br>\n0.6320008635520935<br>\ntime\uff1a667.881966ms<br>\n0.996504545211792</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:N/A\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below):1.9.0\nPython version:3.6\nBazel version (if compiling from source):N/A\nGCC/Compiler version (if compiling from source):6.4.0\nCUDA/cuDNN version:9.0 / 7.0\nGPU model and memory:GeForce GTX960\nExact command to reproduce:N/A\n\nDescribe the problem\nEach time tensorflow performs session.run() for target detection, the detection time of the first image is very long (including some initialization operations, of course), while the detection time of other images is normal. Suppose I detect the image under a certain path (for example, there are ten images), the time of detecting the first image is relatively long, and the remaining nine images are relatively short (basically consistent). However, my operation in practical application is as follows: the session.run() is called every once in a while to detect a picture. I hope that the detection time after the first one is normal except for the long time. However, through my test (guess), after exiting the loop logic of detection, tensorflow redid a series of initialization operations the next time the detection was done, which puzzled me.\nWith other frameworks, such as mxnet, initial detection takes longer. And then the detection time is normal, as if it's not doing some initialization anymore. I thought, could tensorflow do the same thing?\nSource code / logs\n2018-09-04 14:48:59.111510: W tensorflow/core/common_runtime/bfc_allocator.cc:219] Allocator (GPU_0_bfc) ran out of memory trying to allocate 3.57GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.\ntime\uff1a5627.940655ms\n0.9999423027038574\ntime\uff1a657.650471ms\n0.9996843338012695\ntime\uff1a676.565170ms\n0.9722122550010681\n0.6320008635520935\ntime\uff1a667.881966ms\n0.996504545211792", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:N/A\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**:1.9.0\r\n- **Python version**:3.6\r\n- **Bazel version (if compiling from source)**:N/A\r\n- **GCC/Compiler version (if compiling from source)**:6.4.0\r\n- **CUDA/cuDNN version**:9.0 / 7.0\r\n- **GPU model and memory**:GeForce GTX960\r\n- **Exact command to reproduce**:N/A\r\n\r\n### Describe the problem\r\n\r\nEach time tensorflow performs session.run() for target detection, the detection time of the first image is very long (including some initialization operations, of course), while the detection time of other images is normal. Suppose I detect the image under a certain path (for example, there are ten images), the time of detecting the first image is relatively long, and the remaining nine images are relatively short (basically consistent). However, my operation in practical application is as follows: the session.run() is called every once in a while to detect a picture. I hope that the detection time after the first one is normal except for the long time. However, through my test (guess), after exiting the loop logic of detection, tensorflow redid a series of initialization operations the next time the detection was done, which puzzled me.\r\n\r\nWith other frameworks, such as mxnet, initial detection takes longer. And then the detection time is normal, as if it's not doing some initialization anymore. I thought, could tensorflow do the same thing?\r\n\r\n### Source code / logs\r\n\r\n2018-09-04 14:48:59.111510: W tensorflow/core/common_runtime/bfc_allocator.cc:219] Allocator (GPU_0_bfc) ran out of memory trying to allocate 3.57GiB. The caller indicates that this is not a failure, but may mean that there could be performance gains if more memory were available.\r\ntime\uff1a5627.940655ms\r\n0.9999423027038574\r\ntime\uff1a657.650471ms\r\n0.9996843338012695\r\ntime\uff1a676.565170ms\r\n0.9722122550010681\r\n0.6320008635520935\r\ntime\uff1a667.881966ms\r\n0.996504545211792\r\n"}