{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/359489371", "html_url": "https://github.com/tensorflow/tensorflow/issues/16128#issuecomment-359489371", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16128", "id": 359489371, "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTQ4OTM3MQ==", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-22T16:51:31Z", "updated_at": "2018-01-22T16:51:31Z", "author_association": "MEMBER", "body_html": "<p><code>ones_like</code> and <code>zeros_like</code> come from the eponymous <a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.zeros_like.html\" rel=\"nofollow\">numpy</a> functions, and we will not be able to get rid of them, even if we have alphas_like (though of course they can share implementation).</p>\n<p>Given the simple workarounds (in particular, <code>tf.fill</code>), and the fact that these rarely sit in performance critical path, how important is this? I'd like to avoid adding stuff we'll have to maintain.</p>", "body_text": "ones_like and zeros_like come from the eponymous numpy functions, and we will not be able to get rid of them, even if we have alphas_like (though of course they can share implementation).\nGiven the simple workarounds (in particular, tf.fill), and the fact that these rarely sit in performance critical path, how important is this? I'd like to avoid adding stuff we'll have to maintain.", "body": "`ones_like` and `zeros_like` come from the eponymous [numpy](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.zeros_like.html) functions, and we will not be able to get rid of them, even if we have alphas_like (though of course they can share implementation).\r\n\r\nGiven the simple workarounds (in particular, `tf.fill`), and the fact that these rarely sit in performance critical path, how important is this? I'd like to avoid adding stuff we'll have to maintain."}