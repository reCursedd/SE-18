{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/357810120", "html_url": "https://github.com/tensorflow/tensorflow/issues/16128#issuecomment-357810120", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16128", "id": 357810120, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzgxMDEyMA==", "user": {"login": "DEKHTIARJonathan", "id": 10923599, "node_id": "MDQ6VXNlcjEwOTIzNTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/10923599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DEKHTIARJonathan", "html_url": "https://github.com/DEKHTIARJonathan", "followers_url": "https://api.github.com/users/DEKHTIARJonathan/followers", "following_url": "https://api.github.com/users/DEKHTIARJonathan/following{/other_user}", "gists_url": "https://api.github.com/users/DEKHTIARJonathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/DEKHTIARJonathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DEKHTIARJonathan/subscriptions", "organizations_url": "https://api.github.com/users/DEKHTIARJonathan/orgs", "repos_url": "https://api.github.com/users/DEKHTIARJonathan/repos", "events_url": "https://api.github.com/users/DEKHTIARJonathan/events{/privacy}", "received_events_url": "https://api.github.com/users/DEKHTIARJonathan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-15T23:15:22Z", "updated_at": "2018-01-18T01:40:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p>After your remark <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a>, I tried to run a simple benchmark test to measure any difference in speed,<br>\nhere is what I find.</p>\n<p>Each run has been executed 5 times and execution time averaged:</p>\n<ul>\n<li>\n<p>The method working today (by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a>) : [47.5s, 47.5s, 48.1s, 47.6s; 47.8s] =&gt; <strong>Average Time: 47.7 secs</strong></p>\n</li>\n<li>\n<p>The method I implemented \"alphas_like\": [25.0s, 25.0s, 25.0s, 24.9s, 25.0s] =&gt; <strong>Average Time: 25 secs</strong></p>\n</li>\n</ul>\n<p><strong>My method is almost twice as fast !</strong></p>\n<h3>Code used to produce this numbers:</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> time\n\na  <span class=\"pl-k\">=</span> tf.ones(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">64</span>,<span class=\"pl-c1\">255</span>,<span class=\"pl-c1\">255</span>,<span class=\"pl-c1\">3</span>))\n\nmethod1 <span class=\"pl-k\">=</span> tf.ones_like(a) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2.55</span>\nmethod2 <span class=\"pl-k\">=</span> tf.alphas_like(a, <span class=\"pl-v\">alpha_value</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2.55</span>)\n\n\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">5</span>):\n    <span class=\"pl-c1\">TIC</span> <span class=\"pl-k\">=</span> time.time()\n    <span class=\"pl-k\">for</span> __ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n\n        <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n            tmp <span class=\"pl-k\">=</span> sess.run(method1)\n\n    <span class=\"pl-c1\">TOC</span> <span class=\"pl-k\">=</span> time.time()\n\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Execution with method 1 took: <span class=\"pl-c1\">%s</span>ms<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">str</span>((<span class=\"pl-c1\">TOC</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">TIC</span>)<span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span>))\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\n</span>######################################<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">5</span>):\n    <span class=\"pl-c1\">TIC</span> <span class=\"pl-k\">=</span> time.time()\n    <span class=\"pl-k\">for</span> __ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n\n        <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n            tmp <span class=\"pl-k\">=</span> sess.run(method2)\n\n    <span class=\"pl-c1\">TOC</span> <span class=\"pl-k\">=</span> time.time()\n\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Execution with method 2 took: <span class=\"pl-c1\">%s</span>ms<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">str</span>((<span class=\"pl-c1\">TOC</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">TIC</span>)<span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span>))</pre></div>\n<h3>Which gives me these results:</h3>\n<pre><code>Execution with method 1 took: 47542.79899597168ms\nExecution with method 1 took: 47539.61968421936ms\nExecution with method 1 took: 48089.28418159485ms\nExecution with method 1 took: 47630.205392837524ms\nExecution with method 1 took: 47837.78142929077ms\n\n######################################\n\nExecution with method 2 took: 25034.541845321655ms\nExecution with method 2 took: 25057.311058044434ms\nExecution with method 2 took: 25051.66268348694ms\nExecution with method 2 took: 24936.548471450806ms\nExecution with method 2 took: 24955.832958221436ms\n</code></pre>", "body_text": "After your remark @facaiy, I tried to run a simple benchmark test to measure any difference in speed,\nhere is what I find.\nEach run has been executed 5 times and execution time averaged:\n\n\nThe method working today (by @facaiy) : [47.5s, 47.5s, 48.1s, 47.6s; 47.8s] => Average Time: 47.7 secs\n\n\nThe method I implemented \"alphas_like\": [25.0s, 25.0s, 25.0s, 24.9s, 25.0s] => Average Time: 25 secs\n\n\nMy method is almost twice as fast !\nCode used to produce this numbers:\nimport tensorflow as tf\nimport time\n\na  = tf.ones(shape=(64,255,255,3))\n\nmethod1 = tf.ones_like(a) * 2.55\nmethod2 = tf.alphas_like(a, alpha_value=2.55)\n\n\nfor _ in range(5):\n    TIC = time.time()\n    for __ in range(100):\n\n        with tf.Session() as sess:\n            tmp = sess.run(method1)\n\n    TOC = time.time()\n\n    print(\"Execution with method 1 took: %sms\" % str((TOC-TIC)*1000))\n\nprint(\"\\n######################################\\n\")\n\nfor _ in range(5):\n    TIC = time.time()\n    for __ in range(100):\n\n        with tf.Session() as sess:\n            tmp = sess.run(method2)\n\n    TOC = time.time()\n\n    print(\"Execution with method 2 took: %sms\" % str((TOC-TIC)*1000))\nWhich gives me these results:\nExecution with method 1 took: 47542.79899597168ms\nExecution with method 1 took: 47539.61968421936ms\nExecution with method 1 took: 48089.28418159485ms\nExecution with method 1 took: 47630.205392837524ms\nExecution with method 1 took: 47837.78142929077ms\n\n######################################\n\nExecution with method 2 took: 25034.541845321655ms\nExecution with method 2 took: 25057.311058044434ms\nExecution with method 2 took: 25051.66268348694ms\nExecution with method 2 took: 24936.548471450806ms\nExecution with method 2 took: 24955.832958221436ms", "body": "After your remark @facaiy, I tried to run a simple benchmark test to measure any difference in speed,\r\nhere is what I find.\r\n\r\nEach run has been executed 5 times and execution time averaged:\r\n- The method working today (by @facaiy) : [47.5s, 47.5s, 48.1s, 47.6s; 47.8s] => **Average Time: 47.7 secs**\r\n\r\n- The method I implemented \"alphas_like\": [25.0s, 25.0s, 25.0s, 24.9s, 25.0s] => **Average Time: 25 secs**\r\n\r\n**My method is almost twice as fast !**\r\n\r\n### Code used to produce this numbers:\r\n\r\n``` python\r\nimport tensorflow as tf\r\nimport time\r\n\r\na  = tf.ones(shape=(64,255,255,3))\r\n\r\nmethod1 = tf.ones_like(a) * 2.55\r\nmethod2 = tf.alphas_like(a, alpha_value=2.55)\r\n\r\n\r\nfor _ in range(5):\r\n    TIC = time.time()\r\n    for __ in range(100):\r\n\r\n        with tf.Session() as sess:\r\n            tmp = sess.run(method1)\r\n\r\n    TOC = time.time()\r\n\r\n    print(\"Execution with method 1 took: %sms\" % str((TOC-TIC)*1000))\r\n\r\nprint(\"\\n######################################\\n\")\r\n\r\nfor _ in range(5):\r\n    TIC = time.time()\r\n    for __ in range(100):\r\n\r\n        with tf.Session() as sess:\r\n            tmp = sess.run(method2)\r\n\r\n    TOC = time.time()\r\n\r\n    print(\"Execution with method 2 took: %sms\" % str((TOC-TIC)*1000))\r\n```\r\n\r\n### Which gives me these results:\r\n\r\n```\r\nExecution with method 1 took: 47542.79899597168ms\r\nExecution with method 1 took: 47539.61968421936ms\r\nExecution with method 1 took: 48089.28418159485ms\r\nExecution with method 1 took: 47630.205392837524ms\r\nExecution with method 1 took: 47837.78142929077ms\r\n\r\n######################################\r\n\r\nExecution with method 2 took: 25034.541845321655ms\r\nExecution with method 2 took: 25057.311058044434ms\r\nExecution with method 2 took: 25051.66268348694ms\r\nExecution with method 2 took: 24936.548471450806ms\r\nExecution with method 2 took: 24955.832958221436ms\r\n```\r\n"}