{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16128", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16128/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16128/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16128/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16128", "id": 288545703, "node_id": "MDU6SXNzdWUyODg1NDU3MDM=", "number": 16128, "title": "Improvement Proposal - tf.alphas_like (merging tf.ones_like and tf.zeros_like into one)", "user": {"login": "DEKHTIARJonathan", "id": 10923599, "node_id": "MDQ6VXNlcjEwOTIzNTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/10923599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DEKHTIARJonathan", "html_url": "https://github.com/DEKHTIARJonathan", "followers_url": "https://api.github.com/users/DEKHTIARJonathan/followers", "following_url": "https://api.github.com/users/DEKHTIARJonathan/following{/other_user}", "gists_url": "https://api.github.com/users/DEKHTIARJonathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/DEKHTIARJonathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DEKHTIARJonathan/subscriptions", "organizations_url": "https://api.github.com/users/DEKHTIARJonathan/orgs", "repos_url": "https://api.github.com/users/DEKHTIARJonathan/repos", "events_url": "https://api.github.com/users/DEKHTIARJonathan/events{/privacy}", "received_events_url": "https://api.github.com/users/DEKHTIARJonathan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-01-15T10:26:30Z", "updated_at": "2018-11-08T15:28:09Z", "closed_at": "2018-11-08T15:28:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hello dear tensorflowers,</p>\n<p>In a research project, I encountered the need to create tensors of the same shape than any other tensor with a custom value (not just 0 or 1), could be Boolean, Floats, Integers and so on.</p>\n<p>The functions prototypes are the following and will be implemented in <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/array_ops.py\"> tensorflow/python/ops/array_ops.py</a>:</p>\n<ul>\n<li><strong>tf.alphas</strong> (shape, alpha_value, name=None)</li>\n<li><strong>tf.alphas_like</strong> (tensor, alpha_value, name=None, optimize=True)</li>\n</ul>\n<p>The code is not created from scratch. It is <strong>highly</strong> inspired by the functions tf.ones, tf.zeros for tf.alphas and by tf.zeros_like, tf.ones_like for tf.alphas_like.</p>\n<p>The code use the latest implementation and has been designed to work with <em>eager_mode</em>.<br>\nThe number of modification is relatively small, thus I am relatively confident on the robustness of the new implementation (largely based on the existing one).</p>\n<p>The idea is to reproduce and merge the functions while enabling to set any custom value in the tensor:</p>\n<ul>\n<li><strong>tf.alphas merges:</strong>\n<ul>\n<li>tf.ones</li>\n<li>tf.zeros</li>\n</ul>\n</li>\n<li><strong>tf.alphas_like merges:</strong>\n<ul>\n<li>tf.zeros_like</li>\n<li>tf.ones_like</li>\n</ul>\n</li>\n</ul>\n<h3>How is the API Working ?</h3>\n<p>My new functions take a parameter <em>alpha_value</em> and fill the tensor with this value. This allows me to run such a script:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\na <span class=\"pl-k\">=</span> tf.constant([\n    [\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>],\n        [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]\n    ],\n    [\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>],\n        [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]\n    ]\n])\n\nb1 <span class=\"pl-k\">=</span> tf.alphas_like(a, <span class=\"pl-c1\">0.5431</span>)\nb2 <span class=\"pl-k\">=</span> tf.alphas_like(a, <span class=\"pl-c1\">5</span>)\nb3 <span class=\"pl-k\">=</span> tf.alphas_like(a, <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span>)\nb4 <span class=\"pl-k\">=</span> tf.alphas_like(a, <span class=\"pl-c1\">True</span>)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    _b1, _b2, _b3, _b4 <span class=\"pl-k\">=</span> sess.run([b1, b2, b3, b4])\n    \n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b1:<span class=\"pl-pds\">\"</span></span>, _b1)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b2:<span class=\"pl-pds\">\"</span></span>, _b2)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b3:<span class=\"pl-pds\">\"</span></span>, _b3)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b4:<span class=\"pl-pds\">\"</span></span>, _b4)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>############## OUTPUTS ###############</span>\n\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> b1: [\n  [\n    [ <span class=\"pl-c1\">0.5431</span>  <span class=\"pl-c1\">0.5431</span>  <span class=\"pl-c1\">0.5431</span>]\n    [ <span class=\"pl-c1\">0.5431</span>  <span class=\"pl-c1\">0.5431</span>  <span class=\"pl-c1\">0.5431</span>]\n  ]\n  [\n    [ <span class=\"pl-c1\">0.5431</span>  <span class=\"pl-c1\">0.5431</span>  <span class=\"pl-c1\">0.5431</span>]\n    [ <span class=\"pl-c1\">0.5431</span>  <span class=\"pl-c1\">0.5431</span>  <span class=\"pl-c1\">0.5431</span>]\n  ]\n]\n\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> b2: [\n  [\n    [<span class=\"pl-c1\">5</span> <span class=\"pl-c1\">5</span> <span class=\"pl-c1\">5</span>]\n    [<span class=\"pl-c1\">5</span> <span class=\"pl-c1\">5</span> <span class=\"pl-c1\">5</span>]\n  ]\n  [\n    [<span class=\"pl-c1\">5</span> <span class=\"pl-c1\">5</span> <span class=\"pl-c1\">5</span>]\n    [<span class=\"pl-c1\">5</span> <span class=\"pl-c1\">5</span> <span class=\"pl-c1\">5</span>]\n  ]\n]\n\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> b3: [\n  [\n    [<span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span>]\n    [<span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span>]\n  ]\n  [\n    [<span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span>]\n    [<span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span>]\n  ]\n]\n\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> b4: [\n  [\n    [ <span class=\"pl-c1\">True</span>  <span class=\"pl-c1\">True</span>  <span class=\"pl-c1\">True</span>]\n    [ <span class=\"pl-c1\">True</span>  <span class=\"pl-c1\">True</span>  <span class=\"pl-c1\">True</span>]\n  ]\n  [\n    [ <span class=\"pl-c1\">True</span>  <span class=\"pl-c1\">True</span>  <span class=\"pl-c1\">True</span>]\n    [ <span class=\"pl-c1\">True</span>  <span class=\"pl-c1\">True</span>  <span class=\"pl-c1\">True</span>]\n  ]\n]</pre></div>\n<h3>How can you help ?</h3>\n<p>Before submitting a PR, I would like to know a few things:</p>\n<ul>\n<li>Is it something that would be any kind of interest and worth a PR?</li>\n<li>Are the names I have chosen (tf.alphas and tf.alphas_like) okay with everyone ?</li>\n<li>In my PR, should I delete the implementation of tf.zeros_likes and tf.ones_likes and replace them as an alias of my new function which basically does the same job, just in a more flexible way ?</li>\n</ul>\n<p>Thanks for your time and attention,</p>\n<p>Best Regards,</p>\n<p>Jonathan</p>", "body_text": "Hello dear tensorflowers,\nIn a research project, I encountered the need to create tensors of the same shape than any other tensor with a custom value (not just 0 or 1), could be Boolean, Floats, Integers and so on.\nThe functions prototypes are the following and will be implemented in  tensorflow/python/ops/array_ops.py:\n\ntf.alphas (shape, alpha_value, name=None)\ntf.alphas_like (tensor, alpha_value, name=None, optimize=True)\n\nThe code is not created from scratch. It is highly inspired by the functions tf.ones, tf.zeros for tf.alphas and by tf.zeros_like, tf.ones_like for tf.alphas_like.\nThe code use the latest implementation and has been designed to work with eager_mode.\nThe number of modification is relatively small, thus I am relatively confident on the robustness of the new implementation (largely based on the existing one).\nThe idea is to reproduce and merge the functions while enabling to set any custom value in the tensor:\n\ntf.alphas merges:\n\ntf.ones\ntf.zeros\n\n\ntf.alphas_like merges:\n\ntf.zeros_like\ntf.ones_like\n\n\n\nHow is the API Working ?\nMy new functions take a parameter alpha_value and fill the tensor with this value. This allows me to run such a script:\nimport tensorflow as tf\n\na = tf.constant([\n    [\n        [4, 5, 6],\n        [1, 2, 3]\n    ],\n    [\n        [4, 5, 6],\n        [1, 2, 3]\n    ]\n])\n\nb1 = tf.alphas_like(a, 0.5431)\nb2 = tf.alphas_like(a, 5)\nb3 = tf.alphas_like(a, -5)\nb4 = tf.alphas_like(a, True)\n\nwith tf.Session() as sess:\n    _b1, _b2, _b3, _b4 = sess.run([b1, b2, b3, b4])\n    \nprint(\"b1:\", _b1)\nprint(\"b2:\", _b2)\nprint(\"b3:\", _b3)\nprint(\"b4:\", _b4)\n\n############### OUTPUTS ###############\n\n>>> b1: [\n  [\n    [ 0.5431  0.5431  0.5431]\n    [ 0.5431  0.5431  0.5431]\n  ]\n  [\n    [ 0.5431  0.5431  0.5431]\n    [ 0.5431  0.5431  0.5431]\n  ]\n]\n\n>>> b2: [\n  [\n    [5 5 5]\n    [5 5 5]\n  ]\n  [\n    [5 5 5]\n    [5 5 5]\n  ]\n]\n\n>>> b3: [\n  [\n    [-5 -5 -5]\n    [-5 -5 -5]\n  ]\n  [\n    [-5 -5 -5]\n    [-5 -5 -5]\n  ]\n]\n\n>>> b4: [\n  [\n    [ True  True  True]\n    [ True  True  True]\n  ]\n  [\n    [ True  True  True]\n    [ True  True  True]\n  ]\n]\nHow can you help ?\nBefore submitting a PR, I would like to know a few things:\n\nIs it something that would be any kind of interest and worth a PR?\nAre the names I have chosen (tf.alphas and tf.alphas_like) okay with everyone ?\nIn my PR, should I delete the implementation of tf.zeros_likes and tf.ones_likes and replace them as an alias of my new function which basically does the same job, just in a more flexible way ?\n\nThanks for your time and attention,\nBest Regards,\nJonathan", "body": "Hello dear tensorflowers,\r\n\r\nIn a research project, I encountered the need to create tensors of the same shape than any other tensor with a custom value (not just 0 or 1), could be Boolean, Floats, Integers and so on.\r\n\r\nThe functions prototypes are the following and will be implemented in [ tensorflow/python/ops/array_ops.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/array_ops.py): \r\n- **tf.alphas** (shape, alpha_value, name=None)\r\n- **tf.alphas_like** (tensor, alpha_value, name=None, optimize=True)\r\n\r\nThe code is not created from scratch. It is **highly** inspired by the functions tf.ones, tf.zeros for tf.alphas and by tf.zeros_like, tf.ones_like for tf.alphas_like.\r\n\r\nThe code use the latest implementation and has been designed to work with *eager_mode*.\r\nThe number of modification is relatively small, thus I am relatively confident on the robustness of the new implementation (largely based on the existing one).\r\n\r\nThe idea is to reproduce and merge the functions while enabling to set any custom value in the tensor:\r\n\r\n- **tf.alphas merges:**\r\n  - tf.ones\r\n  - tf.zeros\r\n- **tf.alphas_like merges:**\r\n  - tf.zeros_like\r\n  - tf.ones_like\r\n\r\n### How is the API Working ?\r\n\r\nMy new functions take a parameter _alpha_value_ and fill the tensor with this value. This allows me to run such a script:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\na = tf.constant([\r\n    [\r\n        [4, 5, 6],\r\n        [1, 2, 3]\r\n    ],\r\n    [\r\n        [4, 5, 6],\r\n        [1, 2, 3]\r\n    ]\r\n])\r\n\r\nb1 = tf.alphas_like(a, 0.5431)\r\nb2 = tf.alphas_like(a, 5)\r\nb3 = tf.alphas_like(a, -5)\r\nb4 = tf.alphas_like(a, True)\r\n\r\nwith tf.Session() as sess:\r\n    _b1, _b2, _b3, _b4 = sess.run([b1, b2, b3, b4])\r\n    \r\nprint(\"b1:\", _b1)\r\nprint(\"b2:\", _b2)\r\nprint(\"b3:\", _b3)\r\nprint(\"b4:\", _b4)\r\n\r\n############### OUTPUTS ###############\r\n\r\n>>> b1: [\r\n  [\r\n    [ 0.5431  0.5431  0.5431]\r\n    [ 0.5431  0.5431  0.5431]\r\n  ]\r\n  [\r\n    [ 0.5431  0.5431  0.5431]\r\n    [ 0.5431  0.5431  0.5431]\r\n  ]\r\n]\r\n\r\n>>> b2: [\r\n  [\r\n    [5 5 5]\r\n    [5 5 5]\r\n  ]\r\n  [\r\n    [5 5 5]\r\n    [5 5 5]\r\n  ]\r\n]\r\n\r\n>>> b3: [\r\n  [\r\n    [-5 -5 -5]\r\n    [-5 -5 -5]\r\n  ]\r\n  [\r\n    [-5 -5 -5]\r\n    [-5 -5 -5]\r\n  ]\r\n]\r\n\r\n>>> b4: [\r\n  [\r\n    [ True  True  True]\r\n    [ True  True  True]\r\n  ]\r\n  [\r\n    [ True  True  True]\r\n    [ True  True  True]\r\n  ]\r\n]\r\n```\r\n\r\n### How can you help ?\r\n\r\nBefore submitting a PR, I would like to know a few things:\r\n  - Is it something that would be any kind of interest and worth a PR?\r\n  - Are the names I have chosen (tf.alphas and tf.alphas_like) okay with everyone ?\r\n  - In my PR, should I delete the implementation of tf.zeros_likes and tf.ones_likes and replace them as an alias of my new function which basically does the same job, just in a more flexible way ?\r\n\r\nThanks for your time and attention,\r\n\r\nBest Regards,\r\n\r\nJonathan"}