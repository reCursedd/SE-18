{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21889", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21889/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21889/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21889/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21889", "id": 354272181, "node_id": "MDU6SXNzdWUzNTQyNzIxODE=", "number": 21889, "title": "Unable to serialize graph with Embedding layers with graph_util.convert_variables_to_constants", "user": {"login": "mmv", "id": 47368, "node_id": "MDQ6VXNlcjQ3MzY4", "avatar_url": "https://avatars2.githubusercontent.com/u/47368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmv", "html_url": "https://github.com/mmv", "followers_url": "https://api.github.com/users/mmv/followers", "following_url": "https://api.github.com/users/mmv/following{/other_user}", "gists_url": "https://api.github.com/users/mmv/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmv/subscriptions", "organizations_url": "https://api.github.com/users/mmv/orgs", "repos_url": "https://api.github.com/users/mmv/repos", "events_url": "https://api.github.com/users/mmv/events{/privacy}", "received_events_url": "https://api.github.com/users/mmv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750616506, "node_id": "MDU6TGFiZWw3NTA2MTY1MDY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:lite", "name": "comp:lite", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-08-27T10:54:03Z", "updated_at": "2018-11-19T22:10:55Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: -</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.10.0-rc1-19-g656e7a2b34</li>\n<li><strong>Python version</strong>: 3.6.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>: (run script inlined in this issue)</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Attempting to serialize a model containing a keras Embeddings layer with <code>tf.graph_util.convert_variables_to_constants</code> yields a graph that can't be restored. Restoring the graph makes TF complain that some nodes are missing; forcing those into the graphdef will cause TF to complain about mismatching types.</p>\n<h3>Source code / logs</h3>\n<p>The following script tries to serialize two very simple models \u2014 one without an embeddings layer and the other with such a layer. Restoring the model will the embeddings layer will fail with <code>Node 'embedding/embedding_lookup' expects to be colocated with unknown node 'embedding/embedding_lookup/Read/ReadVariableOp'</code>.</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\ndef serialize_graph(model):\n    g = tf.graph_util.convert_variables_to_constants(\n        tf.keras.backend.get_session(),\n        tf.keras.backend.get_session().graph.as_graph_def(),\n        #[n.name for n in tf.keras.backend.get_session().graph.as_graph_def().node],\n        [t.op.name for t in model.outputs]\n    )\n    return g\n\ndef build_save_restore(model):\n    model.compile('sgd', loss='mse')\n    model.fit(np.array([[1]]),np.array([[1]]), verbose=0)\n\n    gdef = serialize_graph(model)\n    newg = tf.Graph()\n    with newg.as_default():\n        tf.import_graph_def(gdef)\n    print(\"*\"*25)\n    print(\"restored successfully\")\n    print(\"*\"*25)\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(1)\n])\nbuild_save_restore(model)\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Embedding(1, 1, input_length=1),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(1),\n])\nbuild_save_restore(model)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: -\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.10.0-rc1-19-g656e7a2b34\nPython version: 3.6.3\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce: (run script inlined in this issue)\n\nDescribe the problem\nAttempting to serialize a model containing a keras Embeddings layer with tf.graph_util.convert_variables_to_constants yields a graph that can't be restored. Restoring the graph makes TF complain that some nodes are missing; forcing those into the graphdef will cause TF to complain about mismatching types.\nSource code / logs\nThe following script tries to serialize two very simple models \u2014 one without an embeddings layer and the other with such a layer. Restoring the model will the embeddings layer will fail with Node 'embedding/embedding_lookup' expects to be colocated with unknown node 'embedding/embedding_lookup/Read/ReadVariableOp'.\nimport tensorflow as tf\nimport numpy as np\n\ndef serialize_graph(model):\n    g = tf.graph_util.convert_variables_to_constants(\n        tf.keras.backend.get_session(),\n        tf.keras.backend.get_session().graph.as_graph_def(),\n        #[n.name for n in tf.keras.backend.get_session().graph.as_graph_def().node],\n        [t.op.name for t in model.outputs]\n    )\n    return g\n\ndef build_save_restore(model):\n    model.compile('sgd', loss='mse')\n    model.fit(np.array([[1]]),np.array([[1]]), verbose=0)\n\n    gdef = serialize_graph(model)\n    newg = tf.Graph()\n    with newg.as_default():\n        tf.import_graph_def(gdef)\n    print(\"*\"*25)\n    print(\"restored successfully\")\n    print(\"*\"*25)\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(1)\n])\nbuild_save_restore(model)\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Embedding(1, 1, input_length=1),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(1),\n])\nbuild_save_restore(model)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: -\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.10.0-rc1-19-g656e7a2b34\r\n- **Python version**: 3.6.3\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: \r\n- **GPU model and memory**: \r\n- **Exact command to reproduce**: (run script inlined in this issue)\r\n\r\n### Describe the problem\r\nAttempting to serialize a model containing a keras Embeddings layer with `tf.graph_util.convert_variables_to_constants` yields a graph that can't be restored. Restoring the graph makes TF complain that some nodes are missing; forcing those into the graphdef will cause TF to complain about mismatching types.\r\n\r\n### Source code / logs\r\nThe following script tries to serialize two very simple models \u2014 one without an embeddings layer and the other with such a layer. Restoring the model will the embeddings layer will fail with `Node 'embedding/embedding_lookup' expects to be colocated with unknown node 'embedding/embedding_lookup/Read/ReadVariableOp'`.\r\n\r\n    import tensorflow as tf\r\n    import numpy as np\r\n\r\n    def serialize_graph(model):\r\n        g = tf.graph_util.convert_variables_to_constants(\r\n            tf.keras.backend.get_session(),\r\n            tf.keras.backend.get_session().graph.as_graph_def(),\r\n            #[n.name for n in tf.keras.backend.get_session().graph.as_graph_def().node],\r\n            [t.op.name for t in model.outputs]\r\n        )\r\n        return g\r\n\r\n    def build_save_restore(model):\r\n        model.compile('sgd', loss='mse')\r\n        model.fit(np.array([[1]]),np.array([[1]]), verbose=0)\r\n\r\n        gdef = serialize_graph(model)\r\n        newg = tf.Graph()\r\n        with newg.as_default():\r\n            tf.import_graph_def(gdef)\r\n        print(\"*\"*25)\r\n        print(\"restored successfully\")\r\n        print(\"*\"*25)\r\n\r\n    model = tf.keras.models.Sequential([\r\n        tf.keras.layers.Dense(1)\r\n    ])\r\n    build_save_restore(model)\r\n\r\n    model = tf.keras.models.Sequential([\r\n        tf.keras.layers.Embedding(1, 1, input_length=1),\r\n        tf.keras.layers.Flatten(),\r\n        tf.keras.layers.Dense(1),\r\n    ])\r\n    build_save_restore(model)\r\n"}