{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12121", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12121/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12121/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12121/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12121", "id": 248866848, "node_id": "MDU6SXNzdWUyNDg4NjY4NDg=", "number": 12121, "title": "tf.random_normal_initializer produces inconsistent results with fixed seed on GPU", "user": {"login": "izmailovpavel", "id": 14368801, "node_id": "MDQ6VXNlcjE0MzY4ODAx", "avatar_url": "https://avatars2.githubusercontent.com/u/14368801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izmailovpavel", "html_url": "https://github.com/izmailovpavel", "followers_url": "https://api.github.com/users/izmailovpavel/followers", "following_url": "https://api.github.com/users/izmailovpavel/following{/other_user}", "gists_url": "https://api.github.com/users/izmailovpavel/gists{/gist_id}", "starred_url": "https://api.github.com/users/izmailovpavel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izmailovpavel/subscriptions", "organizations_url": "https://api.github.com/users/izmailovpavel/orgs", "repos_url": "https://api.github.com/users/izmailovpavel/repos", "events_url": "https://api.github.com/users/izmailovpavel/events{/privacy}", "received_events_url": "https://api.github.com/users/izmailovpavel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-08-08T22:38:01Z", "updated_at": "2018-10-12T21:37:22Z", "closed_at": "2018-10-12T21:37:22Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.0.0, 1.1.0, 1.2.1</li>\n<li><strong>Python version</strong>: 2.7.10, 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: -</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA release 8.0, V8.0.46; cuDNN 8.0</li>\n<li><strong>GPU model and memory</strong>: GeForce GTX TITAN X 12GB, GK210GL [Tesla K80] 12GB</li>\n<li><strong>Exact command to reproduce</strong>: below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Setting both graph-level and op-level random seeds to fixed values, I still get inconsistent results initializing variables with <code>tf.random_normal_initializer</code>. Here's the code to reproduce the problem</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\ntf.set_random_seed(0)\nnp.random.seed(0)\nshape = (100, 2048)\nseed = 0\nfor i in range(100):\n    seed += 1\n    init = tf.random_normal_initializer(stddev=0.02, seed=seed)\n    tf.get_variable(str(i), shape, initializer=init)\n\nsession = tf.Session()\nsession.run(tf.global_variables_initializer())\nvar_dict = {}\nfor var in tf.trainable_variables():\n    var_dict[var.name] = session.run(var.name)\n\nnp.savez_compressed(\"weights.npz\", **var_dict)\nsession.close()\n</code></pre>\n<p>Here I initialize 100 variables with <code>tf.random_normal_initializer</code> with a fixed op-level seed and with a fixed graph-level seed.</p>\n<p>Running this two times I get different results saved in <code>weights.npz</code>. Interestingly, this happens only when using GPU and the difference between the saved weights is very slight: usually only some of the variables are different, and they only differ in some small number of positions.</p>\n<p>I experience this problem on Tensorflow 1.0.0 (Python2), 1.1.0, 1.2.1 (Python3) and on two different GPUs.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.0.0, 1.1.0, 1.2.1\nPython version: 2.7.10, 3.5.2\nBazel version (if compiling from source): -\nCUDA/cuDNN version: CUDA release 8.0, V8.0.46; cuDNN 8.0\nGPU model and memory: GeForce GTX TITAN X 12GB, GK210GL [Tesla K80] 12GB\nExact command to reproduce: below\n\nDescribe the problem\nSetting both graph-level and op-level random seeds to fixed values, I still get inconsistent results initializing variables with tf.random_normal_initializer. Here's the code to reproduce the problem\nimport numpy as np\nimport tensorflow as tf\n\ntf.set_random_seed(0)\nnp.random.seed(0)\nshape = (100, 2048)\nseed = 0\nfor i in range(100):\n    seed += 1\n    init = tf.random_normal_initializer(stddev=0.02, seed=seed)\n    tf.get_variable(str(i), shape, initializer=init)\n\nsession = tf.Session()\nsession.run(tf.global_variables_initializer())\nvar_dict = {}\nfor var in tf.trainable_variables():\n    var_dict[var.name] = session.run(var.name)\n\nnp.savez_compressed(\"weights.npz\", **var_dict)\nsession.close()\n\nHere I initialize 100 variables with tf.random_normal_initializer with a fixed op-level seed and with a fixed graph-level seed.\nRunning this two times I get different results saved in weights.npz. Interestingly, this happens only when using GPU and the difference between the saved weights is very slight: usually only some of the variables are different, and they only differ in some small number of positions.\nI experience this problem on Tensorflow 1.0.0 (Python2), 1.1.0, 1.2.1 (Python3) and on two different GPUs.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.0.0, 1.1.0, 1.2.1\r\n- **Python version**: 2.7.10, 3.5.2\r\n- **Bazel version (if compiling from source)**: -\r\n- **CUDA/cuDNN version**: CUDA release 8.0, V8.0.46; cuDNN 8.0\r\n- **GPU model and memory**: GeForce GTX TITAN X 12GB, GK210GL [Tesla K80] 12GB\r\n- **Exact command to reproduce**: below\r\n\r\n### Describe the problem\r\nSetting both graph-level and op-level random seeds to fixed values, I still get inconsistent results initializing variables with `tf.random_normal_initializer`. Here's the code to reproduce the problem\r\n\r\n\timport numpy as np\r\n\timport tensorflow as tf\r\n\t\r\n\ttf.set_random_seed(0)\r\n\tnp.random.seed(0)\r\n\tshape = (100, 2048)\r\n\tseed = 0\r\n\tfor i in range(100):\r\n\t    seed += 1\r\n\t    init = tf.random_normal_initializer(stddev=0.02, seed=seed)\r\n\t    tf.get_variable(str(i), shape, initializer=init)\r\n\t\r\n\tsession = tf.Session()\r\n\tsession.run(tf.global_variables_initializer())\r\n\tvar_dict = {}\r\n\tfor var in tf.trainable_variables():\r\n\t    var_dict[var.name] = session.run(var.name)\r\n\t\r\n\tnp.savez_compressed(\"weights.npz\", **var_dict)\r\n\tsession.close()\r\n\r\nHere I initialize 100 variables with `tf.random_normal_initializer` with a fixed op-level seed and with a fixed graph-level seed.\r\n\r\nRunning this two times I get different results saved in `weights.npz`. Interestingly, this happens only when using GPU and the difference between the saved weights is very slight: usually only some of the variables are different, and they only differ in some small number of positions. \r\n\r\nI experience this problem on Tensorflow 1.0.0 (Python2), 1.1.0, 1.2.1 (Python3) and on two different GPUs. "}