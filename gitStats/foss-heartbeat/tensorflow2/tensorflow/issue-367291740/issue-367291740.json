{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22771", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22771/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22771/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22771/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22771", "id": 367291740, "node_id": "MDU6SXNzdWUzNjcyOTE3NDA=", "number": 22771, "title": "Use of bias term in tensorflow.keras conv3Dtranspose layer breaks if layer size is not defined", "user": {"login": "str4w", "id": 1618555, "node_id": "MDQ6VXNlcjE2MTg1NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1618555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/str4w", "html_url": "https://github.com/str4w", "followers_url": "https://api.github.com/users/str4w/followers", "following_url": "https://api.github.com/users/str4w/following{/other_user}", "gists_url": "https://api.github.com/users/str4w/gists{/gist_id}", "starred_url": "https://api.github.com/users/str4w/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/str4w/subscriptions", "organizations_url": "https://api.github.com/users/str4w/orgs", "repos_url": "https://api.github.com/users/str4w/repos", "events_url": "https://api.github.com/users/str4w/events{/privacy}", "received_events_url": "https://api.github.com/users/str4w/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-10-05T16:56:51Z", "updated_at": "2018-11-22T18:59:00Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<pre><code>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows, Colab\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.10 / 1.11\nPython version: 3.6.x\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: see code below\n</code></pre>\n<h3>Describe the problem</h3>\n<p>If the input layer size is None for a conv3Dtranspose layer the calculation of the bias term emits an error because it reshapes the tensor to be multiplied by the bias, even when just initializing with no input.  Note that this is supported for the 2D layer.</p>\n<h3>Source code / logs</h3>\n<p><a href=\"https://colab.research.google.com/gist/str4w/d60705ac54c5574f67ff2ec15cf89b42/conv_transpose_problem.ipynb\" rel=\"nofollow\">https://colab.research.google.com/gist/str4w/d60705ac54c5574f67ff2ec15cf89b42/conv_transpose_problem.ipynb</a></p>\n<pre><code># use these to show tensorflow.keras issue\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.layers as kl\nimport tensorflow.keras.models as km\nimport tensorflow.keras.backend as K\nprint(tf.__version__)\nprint(keras.__version__)\n\nimport numpy as np\n\n\n# In 2d, the conv2dtranspose layer works fine with bias.\n\ninp=kl.Input(shape=(None,None,1))\nx=kl.Conv2D(1,kernel_size=5,padding='same')(inp)\nx=kl.MaxPooling2D(pool_size=2)(x)\nx=tf.layers.Conv2DTranspose(1,kernel_size=1,strides=2,use_bias=True)(x)\n#x=kl.Conv2DTranspose(1,kernel_size=1,strides=2)(x)\nmodel=km.Model(inputs=inp,outputs=x)\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\nmodel.summary()\ndata2D=np.random.random_sample((1,42,74,1))\nZ2=model.predict(data2D)\nassert(Z2.shape == data2D.shape)\n\n\n# in 3d, the bias term has issues\n# Setting use_bias to false will allow this to pass\ninp=kl.Input(shape=(None,None,None,1))\nx=kl.Conv3D(1,kernel_size=5,padding='same')(inp)\nx=kl.MaxPooling3D(pool_size=2)(x)\nx=kl.Conv3DTranspose(1,kernel_size=1,strides=2,use_bias=True)(x)\n#x=kl.Conv3DTranspose(1,kernel_size=1,strides=2)(x)\nmodel=km.Model(inputs=inp,outputs=x)\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\nmodel.summary()\n\ndata3D=np.random.random_sample((1,42,74,34,1))\nZ3=model.predict(data3D)\nassert(Z3.shape == data3D.shape)\n</code></pre>\n<p>Output:</p>\n<pre><code>1.11.0\n2.1.6-tf\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ninput_1 (InputLayer)         (None, None, None, 1)     0         \n_________________________________________________________________\nconv2d (Conv2D)              (None, None, None, 1)     26        \n_________________________________________________________________\nmax_pooling2d (MaxPooling2D) (None, None, None, 1)     0         \n_________________________________________________________________\nconv2d_transpose_1 (Conv2DTr (None, None, None, 1)     2         \n=================================================================\nTotal params: 28\nTrainable params: 28\nNon-trainable params: 0\n_________________________________________________________________\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-1-ff267c7f58e9&gt; in &lt;module&gt;()\n     32 x=kl.Conv3D(1,kernel_size=5,padding='same')(inp)\n     33 x=kl.MaxPooling3D(pool_size=2)(x)\n---&gt; 34 x=kl.Conv3DTranspose(1,kernel_size=1,strides=2,use_bias=True)(x)\n     35 #x=kl.Conv3DTranspose(1,kernel_size=1,strides=2)(x)\n     36 model=km.Model(inputs=inp,outputs=x)\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)\n    767 \n    768       if not in_deferred_mode:\n--&gt; 769         outputs = self.call(inputs, *args, **kwargs)\n    770         if outputs is None:\n    771           raise ValueError('A layer\\'s `call` method should return a Tensor '\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/convolutional.py in call(self, inputs)\n   1064       else:\n   1065         outputs_4d = array_ops.reshape(outputs, [\n-&gt; 1066             outputs_shape[0], outputs_shape[1] * outputs_shape[2],\n   1067             outputs_shape[3], outputs_shape[4]\n   1068         ])\n\nTypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'\n</code></pre>\n<p>Pinging: <a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/nuance-research/hovercard\" href=\"https://github.com/nuance-research\">@nuance-research</a></p>", "body_text": "System information\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows, Colab\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.10 / 1.11\nPython version: 3.6.x\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: see code below\n\nDescribe the problem\nIf the input layer size is None for a conv3Dtranspose layer the calculation of the bias term emits an error because it reshapes the tensor to be multiplied by the bias, even when just initializing with no input.  Note that this is supported for the 2D layer.\nSource code / logs\nhttps://colab.research.google.com/gist/str4w/d60705ac54c5574f67ff2ec15cf89b42/conv_transpose_problem.ipynb\n# use these to show tensorflow.keras issue\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.layers as kl\nimport tensorflow.keras.models as km\nimport tensorflow.keras.backend as K\nprint(tf.__version__)\nprint(keras.__version__)\n\nimport numpy as np\n\n\n# In 2d, the conv2dtranspose layer works fine with bias.\n\ninp=kl.Input(shape=(None,None,1))\nx=kl.Conv2D(1,kernel_size=5,padding='same')(inp)\nx=kl.MaxPooling2D(pool_size=2)(x)\nx=tf.layers.Conv2DTranspose(1,kernel_size=1,strides=2,use_bias=True)(x)\n#x=kl.Conv2DTranspose(1,kernel_size=1,strides=2)(x)\nmodel=km.Model(inputs=inp,outputs=x)\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\nmodel.summary()\ndata2D=np.random.random_sample((1,42,74,1))\nZ2=model.predict(data2D)\nassert(Z2.shape == data2D.shape)\n\n\n# in 3d, the bias term has issues\n# Setting use_bias to false will allow this to pass\ninp=kl.Input(shape=(None,None,None,1))\nx=kl.Conv3D(1,kernel_size=5,padding='same')(inp)\nx=kl.MaxPooling3D(pool_size=2)(x)\nx=kl.Conv3DTranspose(1,kernel_size=1,strides=2,use_bias=True)(x)\n#x=kl.Conv3DTranspose(1,kernel_size=1,strides=2)(x)\nmodel=km.Model(inputs=inp,outputs=x)\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\nmodel.summary()\n\ndata3D=np.random.random_sample((1,42,74,34,1))\nZ3=model.predict(data3D)\nassert(Z3.shape == data3D.shape)\n\nOutput:\n1.11.0\n2.1.6-tf\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ninput_1 (InputLayer)         (None, None, None, 1)     0         \n_________________________________________________________________\nconv2d (Conv2D)              (None, None, None, 1)     26        \n_________________________________________________________________\nmax_pooling2d (MaxPooling2D) (None, None, None, 1)     0         \n_________________________________________________________________\nconv2d_transpose_1 (Conv2DTr (None, None, None, 1)     2         \n=================================================================\nTotal params: 28\nTrainable params: 28\nNon-trainable params: 0\n_________________________________________________________________\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-1-ff267c7f58e9> in <module>()\n     32 x=kl.Conv3D(1,kernel_size=5,padding='same')(inp)\n     33 x=kl.MaxPooling3D(pool_size=2)(x)\n---> 34 x=kl.Conv3DTranspose(1,kernel_size=1,strides=2,use_bias=True)(x)\n     35 #x=kl.Conv3DTranspose(1,kernel_size=1,strides=2)(x)\n     36 model=km.Model(inputs=inp,outputs=x)\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)\n    767 \n    768       if not in_deferred_mode:\n--> 769         outputs = self.call(inputs, *args, **kwargs)\n    770         if outputs is None:\n    771           raise ValueError('A layer\\'s `call` method should return a Tensor '\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/convolutional.py in call(self, inputs)\n   1064       else:\n   1065         outputs_4d = array_ops.reshape(outputs, [\n-> 1066             outputs_shape[0], outputs_shape[1] * outputs_shape[2],\n   1067             outputs_shape[3], outputs_shape[4]\n   1068         ])\n\nTypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'\n\nPinging: @nuance-research", "body": "### System information\r\n\r\n    Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\r\n    OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows, Colab\r\n    Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA\r\n    TensorFlow installed from (source or binary): binary\r\n    TensorFlow version (use command below): 1.10 / 1.11\r\n    Python version: 3.6.x\r\n    Bazel version (if compiling from source): NA\r\n    GCC/Compiler version (if compiling from source): NA\r\n    CUDA/cuDNN version: n/a\r\n    GPU model and memory: n/a\r\n    Exact command to reproduce: see code below\r\n\r\n### Describe the problem\r\nIf the input layer size is None for a conv3Dtranspose layer the calculation of the bias term emits an error because it reshapes the tensor to be multiplied by the bias, even when just initializing with no input.  Note that this is supported for the 2D layer.\r\n\r\n### Source code / logs\r\nhttps://colab.research.google.com/gist/str4w/d60705ac54c5574f67ff2ec15cf89b42/conv_transpose_problem.ipynb\r\n\r\n```\r\n# use these to show tensorflow.keras issue\r\nimport tensorflow as tf\r\nimport tensorflow.keras as keras\r\nimport tensorflow.keras.layers as kl\r\nimport tensorflow.keras.models as km\r\nimport tensorflow.keras.backend as K\r\nprint(tf.__version__)\r\nprint(keras.__version__)\r\n\r\nimport numpy as np\r\n\r\n\r\n# In 2d, the conv2dtranspose layer works fine with bias.\r\n\r\ninp=kl.Input(shape=(None,None,1))\r\nx=kl.Conv2D(1,kernel_size=5,padding='same')(inp)\r\nx=kl.MaxPooling2D(pool_size=2)(x)\r\nx=tf.layers.Conv2DTranspose(1,kernel_size=1,strides=2,use_bias=True)(x)\r\n#x=kl.Conv2DTranspose(1,kernel_size=1,strides=2)(x)\r\nmodel=km.Model(inputs=inp,outputs=x)\r\nmodel.compile(loss=keras.losses.categorical_crossentropy,\r\n              optimizer=keras.optimizers.Adadelta(),\r\n              metrics=['accuracy'])\r\nmodel.summary()\r\ndata2D=np.random.random_sample((1,42,74,1))\r\nZ2=model.predict(data2D)\r\nassert(Z2.shape == data2D.shape)\r\n\r\n\r\n# in 3d, the bias term has issues\r\n# Setting use_bias to false will allow this to pass\r\ninp=kl.Input(shape=(None,None,None,1))\r\nx=kl.Conv3D(1,kernel_size=5,padding='same')(inp)\r\nx=kl.MaxPooling3D(pool_size=2)(x)\r\nx=kl.Conv3DTranspose(1,kernel_size=1,strides=2,use_bias=True)(x)\r\n#x=kl.Conv3DTranspose(1,kernel_size=1,strides=2)(x)\r\nmodel=km.Model(inputs=inp,outputs=x)\r\nmodel.compile(loss=keras.losses.categorical_crossentropy,\r\n              optimizer=keras.optimizers.Adadelta(),\r\n              metrics=['accuracy'])\r\nmodel.summary()\r\n\r\ndata3D=np.random.random_sample((1,42,74,34,1))\r\nZ3=model.predict(data3D)\r\nassert(Z3.shape == data3D.shape)\r\n```\r\nOutput:\r\n```\r\n1.11.0\r\n2.1.6-tf\r\n_________________________________________________________________\r\nLayer (type)                 Output Shape              Param #   \r\n=================================================================\r\ninput_1 (InputLayer)         (None, None, None, 1)     0         \r\n_________________________________________________________________\r\nconv2d (Conv2D)              (None, None, None, 1)     26        \r\n_________________________________________________________________\r\nmax_pooling2d (MaxPooling2D) (None, None, None, 1)     0         \r\n_________________________________________________________________\r\nconv2d_transpose_1 (Conv2DTr (None, None, None, 1)     2         \r\n=================================================================\r\nTotal params: 28\r\nTrainable params: 28\r\nNon-trainable params: 0\r\n_________________________________________________________________\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-1-ff267c7f58e9> in <module>()\r\n     32 x=kl.Conv3D(1,kernel_size=5,padding='same')(inp)\r\n     33 x=kl.MaxPooling3D(pool_size=2)(x)\r\n---> 34 x=kl.Conv3DTranspose(1,kernel_size=1,strides=2,use_bias=True)(x)\r\n     35 #x=kl.Conv3DTranspose(1,kernel_size=1,strides=2)(x)\r\n     36 model=km.Model(inputs=inp,outputs=x)\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)\r\n    767 \r\n    768       if not in_deferred_mode:\r\n--> 769         outputs = self.call(inputs, *args, **kwargs)\r\n    770         if outputs is None:\r\n    771           raise ValueError('A layer\\'s `call` method should return a Tensor '\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/layers/convolutional.py in call(self, inputs)\r\n   1064       else:\r\n   1065         outputs_4d = array_ops.reshape(outputs, [\r\n-> 1066             outputs_shape[0], outputs_shape[1] * outputs_shape[2],\r\n   1067             outputs_shape[3], outputs_shape[4]\r\n   1068         ])\r\n\r\nTypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'\r\n```\r\n\r\nPinging: @nuance-research"}