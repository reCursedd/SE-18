{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/180883183", "html_url": "https://github.com/tensorflow/tensorflow/issues/491#issuecomment-180883183", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/491", "id": 180883183, "node_id": "MDEyOklzc3VlQ29tbWVudDE4MDg4MzE4Mw==", "user": {"login": "ageitgey", "id": 896692, "node_id": "MDQ6VXNlcjg5NjY5Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/896692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ageitgey", "html_url": "https://github.com/ageitgey", "followers_url": "https://api.github.com/users/ageitgey/followers", "following_url": "https://api.github.com/users/ageitgey/following{/other_user}", "gists_url": "https://api.github.com/users/ageitgey/gists{/gist_id}", "starred_url": "https://api.github.com/users/ageitgey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ageitgey/subscriptions", "organizations_url": "https://api.github.com/users/ageitgey/orgs", "repos_url": "https://api.github.com/users/ageitgey/repos", "events_url": "https://api.github.com/users/ageitgey/events{/privacy}", "received_events_url": "https://api.github.com/users/ageitgey/received_events", "type": "User", "site_admin": false}, "created_at": "2016-02-06T23:13:03Z", "updated_at": "2016-02-06T23:13:03Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=798674\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hurshprasad\">@hurshprasad</a> I think those solutions are meant for Linux Docker hosts running Linux Docker images.</p>\n<p>But Docker doesn't run natively on OS X like it does on Linux. When you run Docker on OSX, it actually boots a tiny Linux VM inside either VirtualBox or VMWare Fusion. Then that Linux VM is then what actually runs Docker. It's Russian nesting dolls :)</p>\n<p>So to share an OS X GPU with a running Docker image, there's actually two levels of indirection: VirtualBox has to allow the Linux VM to access the host GPU. Then the Linux VM has to allow the docker images running inside of it to access that GPU.</p>\n<p>I'm not an expert, but I'd guess that making that work would be way harder than just supporting OS X GPUs directly in Tensorflow.</p>", "body_text": "@hurshprasad I think those solutions are meant for Linux Docker hosts running Linux Docker images.\nBut Docker doesn't run natively on OS X like it does on Linux. When you run Docker on OSX, it actually boots a tiny Linux VM inside either VirtualBox or VMWare Fusion. Then that Linux VM is then what actually runs Docker. It's Russian nesting dolls :)\nSo to share an OS X GPU with a running Docker image, there's actually two levels of indirection: VirtualBox has to allow the Linux VM to access the host GPU. Then the Linux VM has to allow the docker images running inside of it to access that GPU.\nI'm not an expert, but I'd guess that making that work would be way harder than just supporting OS X GPUs directly in Tensorflow.", "body": "@hurshprasad I think those solutions are meant for Linux Docker hosts running Linux Docker images.\n\nBut Docker doesn't run natively on OS X like it does on Linux. When you run Docker on OSX, it actually boots a tiny Linux VM inside either VirtualBox or VMWare Fusion. Then that Linux VM is then what actually runs Docker. It's Russian nesting dolls :)\n\nSo to share an OS X GPU with a running Docker image, there's actually two levels of indirection: VirtualBox has to allow the Linux VM to access the host GPU. Then the Linux VM has to allow the docker images running inside of it to access that GPU. \n\nI'm not an expert, but I'd guess that making that work would be way harder than just supporting OS X GPUs directly in Tensorflow.\n"}