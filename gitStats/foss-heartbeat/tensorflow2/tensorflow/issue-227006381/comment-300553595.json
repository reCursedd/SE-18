{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/300553595", "html_url": "https://github.com/tensorflow/tensorflow/issues/9754#issuecomment-300553595", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9754", "id": 300553595, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDU1MzU5NQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-10T17:24:13Z", "updated_at": "2017-05-10T17:24:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So if calling <code>truncated_normal_initializer</code> to generate 20k randoms takes 400ms per call, and this timing doesn't go down after a few iterations, it would be a bug. A small self-contained repro case would be useful here, something that isolates the issue to <code>truncated_normal_initializer</code> (you can call it directly with <code>sess.run(tf.truncated_normal((n,)))</code></p>", "body_text": "So if calling truncated_normal_initializer to generate 20k randoms takes 400ms per call, and this timing doesn't go down after a few iterations, it would be a bug. A small self-contained repro case would be useful here, something that isolates the issue to truncated_normal_initializer (you can call it directly with sess.run(tf.truncated_normal((n,)))", "body": "So if calling `truncated_normal_initializer` to generate 20k randoms takes 400ms per call, and this timing doesn't go down after a few iterations, it would be a bug. A small self-contained repro case would be useful here, something that isolates the issue to `truncated_normal_initializer` (you can call it directly with `sess.run(tf.truncated_normal((n,)))`"}