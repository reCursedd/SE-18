{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271736413", "html_url": "https://github.com/tensorflow/tensorflow/issues/6360#issuecomment-271736413", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6360", "id": 271736413, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTczNjQxMw==", "user": {"login": "danijar", "id": 2111293, "node_id": "MDQ6VXNlcjIxMTEyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2111293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danijar", "html_url": "https://github.com/danijar", "followers_url": "https://api.github.com/users/danijar/followers", "following_url": "https://api.github.com/users/danijar/following{/other_user}", "gists_url": "https://api.github.com/users/danijar/gists{/gist_id}", "starred_url": "https://api.github.com/users/danijar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danijar/subscriptions", "organizations_url": "https://api.github.com/users/danijar/orgs", "repos_url": "https://api.github.com/users/danijar/repos", "events_url": "https://api.github.com/users/danijar/events{/privacy}", "received_events_url": "https://api.github.com/users/danijar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-10T23:56:44Z", "updated_at": "2017-01-10T23:56:44Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> Okay cool. Will this change the last paragraph of the <code>tf.Variable.value()</code> docs? I think that's the unexpected behavior we ran into for A3C. It's definitely not safe behavior when running sessions from multiple threads.</p>\n<blockquote>\n<p>tf.Variable.value()</p>\n<p>Returns the last snapshot of this variable.</p>\n<p>You usually do not need to call this method as all ops that need the value of the variable call it automatically through a convert_to_tensor() call.</p>\n<p>Returns a Tensor which holds the value of the variable. You can not assign a new value to this tensor as it is not a reference to the variable. See ref() if you want to get a reference to the variable.</p>\n<p>To avoid copies, if the consumer of the returned value is on the same device as the variable, this actually returns the live value of the variable, not a copy. Updates to the variable are seen by the consumer. If the consumer is on a different device it will get a copy of the variable.</p>\n</blockquote>", "body_text": "@alextp Okay cool. Will this change the last paragraph of the tf.Variable.value() docs? I think that's the unexpected behavior we ran into for A3C. It's definitely not safe behavior when running sessions from multiple threads.\n\ntf.Variable.value()\nReturns the last snapshot of this variable.\nYou usually do not need to call this method as all ops that need the value of the variable call it automatically through a convert_to_tensor() call.\nReturns a Tensor which holds the value of the variable. You can not assign a new value to this tensor as it is not a reference to the variable. See ref() if you want to get a reference to the variable.\nTo avoid copies, if the consumer of the returned value is on the same device as the variable, this actually returns the live value of the variable, not a copy. Updates to the variable are seen by the consumer. If the consumer is on a different device it will get a copy of the variable.", "body": "@alextp Okay cool. Will this change the last paragraph of the `tf.Variable.value()` docs? I think that's the unexpected behavior we ran into for A3C. It's definitely not safe behavior when running sessions from multiple threads.\r\n\r\n> tf.Variable.value()\r\n>\r\n> Returns the last snapshot of this variable.\r\n>\r\n> You usually do not need to call this method as all ops that need the value of the variable call it automatically through a convert_to_tensor() call.\r\n>\r\n> Returns a Tensor which holds the value of the variable. You can not assign a new value to this tensor as it is not a reference to the variable. See ref() if you want to get a reference to the variable.\r\n>\r\n> To avoid copies, if the consumer of the returned value is on the same device as the variable, this actually returns the live value of the variable, not a copy. Updates to the variable are seen by the consumer. If the consumer is on a different device it will get a copy of the variable."}