{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269928224", "html_url": "https://github.com/tensorflow/tensorflow/issues/6360#issuecomment-269928224", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6360", "id": 269928224, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTkyODIyNA==", "user": {"login": "michaelisard", "id": 5376757, "node_id": "MDQ6VXNlcjUzNzY3NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5376757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelisard", "html_url": "https://github.com/michaelisard", "followers_url": "https://api.github.com/users/michaelisard/followers", "following_url": "https://api.github.com/users/michaelisard/following{/other_user}", "gists_url": "https://api.github.com/users/michaelisard/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelisard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelisard/subscriptions", "organizations_url": "https://api.github.com/users/michaelisard/orgs", "repos_url": "https://api.github.com/users/michaelisard/repos", "events_url": "https://api.github.com/users/michaelisard/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelisard/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-02T01:22:10Z", "updated_at": "2017-01-02T01:22:10Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> has been leading the design and implementation of the new variables and can give you details about status and immediate future plans.</p>\n<p>We have in the past discussed high-level locks like the one you describe, but we have struggled to come up with the use cases to help design what is required. We in general like to keep as much of TensorFlow as possible functional, because it simplifies automatic optimizations, and placement onto a variety of devices. The most common original use case for variables was asynchronous updates, which by their nature are expected to be somewhat racy. We have talked about putting support in the graph for \"short\" transactional updates of multiple variables, but for your initial example where you hold a lock around an entire training step it might make more sense to do higher-level serialization from the session API, as you are doing currently.</p>\n<p>We would definitely be happy to hear more details about what you are trying to achieve, to help us plan!</p>", "body_text": "@alextp has been leading the design and implementation of the new variables and can give you details about status and immediate future plans.\nWe have in the past discussed high-level locks like the one you describe, but we have struggled to come up with the use cases to help design what is required. We in general like to keep as much of TensorFlow as possible functional, because it simplifies automatic optimizations, and placement onto a variety of devices. The most common original use case for variables was asynchronous updates, which by their nature are expected to be somewhat racy. We have talked about putting support in the graph for \"short\" transactional updates of multiple variables, but for your initial example where you hold a lock around an entire training step it might make more sense to do higher-level serialization from the session API, as you are doing currently.\nWe would definitely be happy to hear more details about what you are trying to achieve, to help us plan!", "body": "@alextp has been leading the design and implementation of the new variables and can give you details about status and immediate future plans.\r\n\r\nWe have in the past discussed high-level locks like the one you describe, but we have struggled to come up with the use cases to help design what is required. We in general like to keep as much of TensorFlow as possible functional, because it simplifies automatic optimizations, and placement onto a variety of devices. The most common original use case for variables was asynchronous updates, which by their nature are expected to be somewhat racy. We have talked about putting support in the graph for \"short\" transactional updates of multiple variables, but for your initial example where you hold a lock around an entire training step it might make more sense to do higher-level serialization from the session API, as you are doing currently.\r\n\r\nWe would definitely be happy to hear more details about what you are trying to achieve, to help us plan!"}