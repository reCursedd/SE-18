{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/284331206", "html_url": "https://github.com/tensorflow/tensorflow/issues/6360#issuecomment-284331206", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6360", "id": 284331206, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDMzMTIwNg==", "user": {"login": "benring", "id": 7797929, "node_id": "MDQ6VXNlcjc3OTc5Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7797929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benring", "html_url": "https://github.com/benring", "followers_url": "https://api.github.com/users/benring/followers", "following_url": "https://api.github.com/users/benring/following{/other_user}", "gists_url": "https://api.github.com/users/benring/gists{/gist_id}", "starred_url": "https://api.github.com/users/benring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benring/subscriptions", "organizations_url": "https://api.github.com/users/benring/orgs", "repos_url": "https://api.github.com/users/benring/repos", "events_url": "https://api.github.com/users/benring/events{/privacy}", "received_events_url": "https://api.github.com/users/benring/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-06T08:25:22Z", "updated_at": "2017-03-06T08:25:22Z", "author_association": "NONE", "body_html": "<p>I have a different use case and/or question -- which may need another thread. I am trying to implement a custom op to run a L-BFGS solver. On the C++, I have a co-routine using threads: one runs the solver detached, the other manages the TF control. It operates inside a TF while_loop with the <code>compute</code> call serving as a defacto generator function to fetch data when needed. I can run this on a single node, but it seems to lock up the graph somewhere when I run it in distributed. Can I prevent another thread from trying to acquire a lock and/or can I manage the locks to update the variable when needed and release the lock otherwise?</p>", "body_text": "I have a different use case and/or question -- which may need another thread. I am trying to implement a custom op to run a L-BFGS solver. On the C++, I have a co-routine using threads: one runs the solver detached, the other manages the TF control. It operates inside a TF while_loop with the compute call serving as a defacto generator function to fetch data when needed. I can run this on a single node, but it seems to lock up the graph somewhere when I run it in distributed. Can I prevent another thread from trying to acquire a lock and/or can I manage the locks to update the variable when needed and release the lock otherwise?", "body": "I have a different use case and/or question -- which may need another thread. I am trying to implement a custom op to run a L-BFGS solver. On the C++, I have a co-routine using threads: one runs the solver detached, the other manages the TF control. It operates inside a TF while_loop with the `compute` call serving as a defacto generator function to fetch data when needed. I can run this on a single node, but it seems to lock up the graph somewhere when I run it in distributed. Can I prevent another thread from trying to acquire a lock and/or can I manage the locks to update the variable when needed and release the lock otherwise?"}