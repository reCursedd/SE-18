{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269314121", "html_url": "https://github.com/tensorflow/tensorflow/issues/6360#issuecomment-269314121", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6360", "id": 269314121, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTMxNDEyMQ==", "user": {"login": "danijar", "id": 2111293, "node_id": "MDQ6VXNlcjIxMTEyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2111293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danijar", "html_url": "https://github.com/danijar", "followers_url": "https://api.github.com/users/danijar/followers", "following_url": "https://api.github.com/users/danijar/following{/other_user}", "gists_url": "https://api.github.com/users/danijar/gists{/gist_id}", "starred_url": "https://api.github.com/users/danijar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danijar/subscriptions", "organizations_url": "https://api.github.com/users/danijar/orgs", "repos_url": "https://api.github.com/users/danijar/repos", "events_url": "https://api.github.com/users/danijar/events{/privacy}", "received_events_url": "https://api.github.com/users/danijar/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-27T11:31:59Z", "updated_at": "2016-12-27T11:31:59Z", "author_association": "MEMBER", "body_html": "<p>So access to variables is already protected by a lock that allows multiple reads or one write? My understanding was that assigning to a variable while using it in a computation from another <code>sess.run()</code> can cause interference.</p>", "body_text": "So access to variables is already protected by a lock that allows multiple reads or one write? My understanding was that assigning to a variable while using it in a computation from another sess.run() can cause interference.", "body": "So access to variables is already protected by a lock that allows multiple reads or one write? My understanding was that assigning to a variable while using it in a computation from another `sess.run()` can cause interference."}