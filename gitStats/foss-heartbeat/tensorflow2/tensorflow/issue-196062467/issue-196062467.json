{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6360", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6360/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6360/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6360/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6360", "id": 196062467, "node_id": "MDU6SXNzdWUxOTYwNjI0Njc=", "number": 6360, "title": "Locking mechanisms", "user": {"login": "danijar", "id": 2111293, "node_id": "MDQ6VXNlcjIxMTEyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2111293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danijar", "html_url": "https://github.com/danijar", "followers_url": "https://api.github.com/users/danijar/followers", "following_url": "https://api.github.com/users/danijar/following{/other_user}", "gists_url": "https://api.github.com/users/danijar/gists{/gist_id}", "starred_url": "https://api.github.com/users/danijar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danijar/subscriptions", "organizations_url": "https://api.github.com/users/danijar/orgs", "repos_url": "https://api.github.com/users/danijar/repos", "events_url": "https://api.github.com/users/danijar/events{/privacy}", "received_events_url": "https://api.github.com/users/danijar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 47, "created_at": "2016-12-16T13:45:13Z", "updated_at": "2018-02-08T00:34:34Z", "closed_at": "2018-02-08T00:34:34Z", "author_association": "MEMBER", "body_html": "<p>Especially when integrating TensorFlow into an exiting multi-threaded application, it's not always easy to use queues for synchronization. Currently, we must use Python locks to lock the <code>sess.run(...)</code> calls from different threads. Exposing a TensorFlow lock interface could allow to synchronize access only to needed values of the session:</p>\n<div class=\"highlight highlight-source-python\"><pre>x <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">784</span>])\ny <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">10</span>])\nW <span class=\"pl-k\">=</span> tf.Variable(tf.zeros([<span class=\"pl-c1\">784</span>, <span class=\"pl-c1\">10</span>]))\nb <span class=\"pl-k\">=</span> tf.Variable(tf.zeros([<span class=\"pl-c1\">10</span>]))\n\nlock <span class=\"pl-k\">=</span> tf.Lock()\n<span class=\"pl-k\">with</span> lock:\n  pred <span class=\"pl-k\">=</span> tf.nn.softmax(tf.matmul(x, W) <span class=\"pl-k\">+</span> b)\nloss <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span>tf.reduce_mean(tf.reduce_sum(y <span class=\"pl-k\">*</span> tf.log(pred), <span class=\"pl-c1\">1</span>))\n<span class=\"pl-k\">with</span> lock:\n  train_step <span class=\"pl-k\">=</span> tf.train.GradientDescentOptimizer(<span class=\"pl-c1\">0.5</span>).minimize(loss)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">inference_thread</span>():\n  <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Generate data...</span>\n    sess.run(pred, data)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">training_thread</span>():\n  <span class=\"pl-k\">while</span> <span class=\"pl-c1\">True</span>:\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Generate data...</span>\n    sess.run(train_step, data)</pre></div>\n<p>Or simpler:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.Lock():\n  W <span class=\"pl-k\">=</span> tf.Variable(tf.zeros([<span class=\"pl-c1\">784</span>, <span class=\"pl-c1\">10</span>]))\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>", "body_text": "Especially when integrating TensorFlow into an exiting multi-threaded application, it's not always easy to use queues for synchronization. Currently, we must use Python locks to lock the sess.run(...) calls from different threads. Exposing a TensorFlow lock interface could allow to synchronize access only to needed values of the session:\nx = tf.placeholder(tf.float32, [None, 784])\ny = tf.placeholder(tf.float32, [None, 10])\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\n\nlock = tf.Lock()\nwith lock:\n  pred = tf.nn.softmax(tf.matmul(x, W) + b)\nloss = -tf.reduce_mean(tf.reduce_sum(y * tf.log(pred), 1))\nwith lock:\n  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(loss)\n\ndef inference_thread():\n  while True:\n    # Generate data...\n    sess.run(pred, data)\n\ndef training_thread():\n  while True:\n    # Generate data...\n    sess.run(train_step, data)\nOr simpler:\nwith tf.Lock():\n  W = tf.Variable(tf.zeros([784, 10]))\n# ...", "body": "Especially when integrating TensorFlow into an exiting multi-threaded application, it's not always easy to use queues for synchronization. Currently, we must use Python locks to lock the `sess.run(...)` calls from different threads. Exposing a TensorFlow lock interface could allow to synchronize access only to needed values of the session:\r\n\r\n```python\r\nx = tf.placeholder(tf.float32, [None, 784])\r\ny = tf.placeholder(tf.float32, [None, 10])\r\nW = tf.Variable(tf.zeros([784, 10]))\r\nb = tf.Variable(tf.zeros([10]))\r\n\r\nlock = tf.Lock()\r\nwith lock:\r\n  pred = tf.nn.softmax(tf.matmul(x, W) + b)\r\nloss = -tf.reduce_mean(tf.reduce_sum(y * tf.log(pred), 1))\r\nwith lock:\r\n  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(loss)\r\n\r\ndef inference_thread():\r\n  while True:\r\n    # Generate data...\r\n    sess.run(pred, data)\r\n\r\ndef training_thread():\r\n  while True:\r\n    # Generate data...\r\n    sess.run(train_step, data)\r\n```\r\n\r\nOr simpler:\r\n\r\n```python\r\nwith tf.Lock():\r\n  W = tf.Variable(tf.zeros([784, 10]))\r\n# ...\r\n```"}