{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280964638", "html_url": "https://github.com/tensorflow/tensorflow/issues/7677#issuecomment-280964638", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7677", "id": 280964638, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDk2NDYzOA==", "user": {"login": "headdab", "id": 1169194, "node_id": "MDQ6VXNlcjExNjkxOTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1169194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/headdab", "html_url": "https://github.com/headdab", "followers_url": "https://api.github.com/users/headdab/followers", "following_url": "https://api.github.com/users/headdab/following{/other_user}", "gists_url": "https://api.github.com/users/headdab/gists{/gist_id}", "starred_url": "https://api.github.com/users/headdab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/headdab/subscriptions", "organizations_url": "https://api.github.com/users/headdab/orgs", "repos_url": "https://api.github.com/users/headdab/repos", "events_url": "https://api.github.com/users/headdab/events{/privacy}", "received_events_url": "https://api.github.com/users/headdab/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-20T00:56:46Z", "updated_at": "2017-02-20T00:58:40Z", "author_association": "NONE", "body_html": "<p>I just redid this experiment.  I copied the code from the page mentioned above, i.e.</p>\n<blockquote>\n<p>cat line2.py</p>\n</blockquote>\n<pre><code>import tensorflow as tf\n# NumPy is often used to load, manipulate and preprocess data.\nimport numpy as np\n\n# Declare list of features. We only have one real-valued feature. There are many\n# other types of columns that are more complicated and useful.\nfeatures = [tf.contrib.layers.real_valued_column(\"x\", dimension=1)]\n\n# An estimator is the front end to invoke training (fitting) and evaluation\n# (inference). There are many predefined types like linear regression,\n# logistic regression, linear classification, logistic classification, and\n# many neural network classifiers and regressors. The following code\n# provides an estimator that does linear regression.\nestimator = tf.contrib.learn.LinearRegressor(feature_columns=features)\n\n# TensorFlow provides many helper methods to read and set up data sets.\n# Here we use `numpy_input_fn`. We have to tell the function how many batches\n# of data (num_epochs) we want and how big each batch should be.\nx = np.array([1., 2., 3., 4.])\ny = np.array([0., -1., -2., -3.])\ninput_fn = tf.contrib.learn.io.numpy_input_fn({\"x\":x}, y, batch_size=4,\n                                              num_epochs=1000)\n\n# We can invoke 1000 training steps by invoking the `fit` method and passing the\n# training data set.\nestimator.fit(input_fn=input_fn, steps=1000)\n\n# Here we evaluate how well our model did. In a real example, we would want\n# to use a separate validation and testing data set to avoid overfitting.\nestimator.evaluate(input_fn=input_fn)\n</code></pre>\n<p>and ran it using:</p>\n<blockquote>\n<p>python line2.py</p>\n</blockquote>\n<p>and got warning like above, i.e.</p>\n<p>WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpnvvddpq0<br>\nWARNING:tensorflow:Rank of input Tensor (1) should be the same as output_rank (2) for column. Will attempt to expand dims. It is highly recommended that you resize your input, as this behavior may change.<br>\nWARNING:tensorflow:From /home/estes/.virtualenv/tf/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:1362: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.<br>\nInstructions for updating:<br>\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.<br>\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.<br>\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.<br>\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.<br>\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.<br>\nWARNING:tensorflow:Rank of input Tensor (1) should be the same as output_rank (2) for column. Will attempt to expand dims. It is highly recommended that you resize your input, as this behavior may change.<br>\nWARNING:tensorflow:From /home/estes/.virtualenv/tf/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:1362: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.<br>\nInstructions for updating:<br>\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.<br>\nWARNING:tensorflow:Skipping summary for global_step, must be a float or np.float32.</p>\n<p>On the getting started page it says:</p>\n<p>When run, it produces</p>\n<pre><code>{'global_step': 1000, 'loss': 1.9650059e-11}\n</code></pre>\n<p>That output doesn't exist anywhere within the output generated.  Thus, I assume it failed.<br>\nI just started learning TF today, so could be missing something.</p>\n<p>I used the pip-based install for a non-GPU config with python3; in a virtual environment which has been 'activated'.  There were no complexities during the install process as described on the getting started page.</p>", "body_text": "I just redid this experiment.  I copied the code from the page mentioned above, i.e.\n\ncat line2.py\n\nimport tensorflow as tf\n# NumPy is often used to load, manipulate and preprocess data.\nimport numpy as np\n\n# Declare list of features. We only have one real-valued feature. There are many\n# other types of columns that are more complicated and useful.\nfeatures = [tf.contrib.layers.real_valued_column(\"x\", dimension=1)]\n\n# An estimator is the front end to invoke training (fitting) and evaluation\n# (inference). There are many predefined types like linear regression,\n# logistic regression, linear classification, logistic classification, and\n# many neural network classifiers and regressors. The following code\n# provides an estimator that does linear regression.\nestimator = tf.contrib.learn.LinearRegressor(feature_columns=features)\n\n# TensorFlow provides many helper methods to read and set up data sets.\n# Here we use `numpy_input_fn`. We have to tell the function how many batches\n# of data (num_epochs) we want and how big each batch should be.\nx = np.array([1., 2., 3., 4.])\ny = np.array([0., -1., -2., -3.])\ninput_fn = tf.contrib.learn.io.numpy_input_fn({\"x\":x}, y, batch_size=4,\n                                              num_epochs=1000)\n\n# We can invoke 1000 training steps by invoking the `fit` method and passing the\n# training data set.\nestimator.fit(input_fn=input_fn, steps=1000)\n\n# Here we evaluate how well our model did. In a real example, we would want\n# to use a separate validation and testing data set to avoid overfitting.\nestimator.evaluate(input_fn=input_fn)\n\nand ran it using:\n\npython line2.py\n\nand got warning like above, i.e.\nWARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpnvvddpq0\nWARNING:tensorflow:Rank of input Tensor (1) should be the same as output_rank (2) for column. Will attempt to expand dims. It is highly recommended that you resize your input, as this behavior may change.\nWARNING:tensorflow:From /home/estes/.virtualenv/tf/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:1362: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\nInstructions for updating:\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\nWARNING:tensorflow:Rank of input Tensor (1) should be the same as output_rank (2) for column. Will attempt to expand dims. It is highly recommended that you resize your input, as this behavior may change.\nWARNING:tensorflow:From /home/estes/.virtualenv/tf/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:1362: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\nInstructions for updating:\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\nWARNING:tensorflow:Skipping summary for global_step, must be a float or np.float32.\nOn the getting started page it says:\nWhen run, it produces\n{'global_step': 1000, 'loss': 1.9650059e-11}\n\nThat output doesn't exist anywhere within the output generated.  Thus, I assume it failed.\nI just started learning TF today, so could be missing something.\nI used the pip-based install for a non-GPU config with python3; in a virtual environment which has been 'activated'.  There were no complexities during the install process as described on the getting started page.", "body": "I just redid this experiment.  I copied the code from the page mentioned above, i.e.\r\n\r\n> cat line2.py\r\n\r\n```\r\nimport tensorflow as tf\r\n# NumPy is often used to load, manipulate and preprocess data.\r\nimport numpy as np\r\n\r\n# Declare list of features. We only have one real-valued feature. There are many\r\n# other types of columns that are more complicated and useful.\r\nfeatures = [tf.contrib.layers.real_valued_column(\"x\", dimension=1)]\r\n\r\n# An estimator is the front end to invoke training (fitting) and evaluation\r\n# (inference). There are many predefined types like linear regression,\r\n# logistic regression, linear classification, logistic classification, and\r\n# many neural network classifiers and regressors. The following code\r\n# provides an estimator that does linear regression.\r\nestimator = tf.contrib.learn.LinearRegressor(feature_columns=features)\r\n\r\n# TensorFlow provides many helper methods to read and set up data sets.\r\n# Here we use `numpy_input_fn`. We have to tell the function how many batches\r\n# of data (num_epochs) we want and how big each batch should be.\r\nx = np.array([1., 2., 3., 4.])\r\ny = np.array([0., -1., -2., -3.])\r\ninput_fn = tf.contrib.learn.io.numpy_input_fn({\"x\":x}, y, batch_size=4,\r\n                                              num_epochs=1000)\r\n\r\n# We can invoke 1000 training steps by invoking the `fit` method and passing the\r\n# training data set.\r\nestimator.fit(input_fn=input_fn, steps=1000)\r\n\r\n# Here we evaluate how well our model did. In a real example, we would want\r\n# to use a separate validation and testing data set to avoid overfitting.\r\nestimator.evaluate(input_fn=input_fn)\r\n```\r\n\r\nand ran it using:\r\n\r\n> python line2.py\r\n\r\nand got warning like above, i.e.\r\n\r\nWARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpnvvddpq0\r\nWARNING:tensorflow:Rank of input Tensor (1) should be the same as output_rank (2) for column. Will attempt to expand dims. It is highly recommended that you resize your input, as this behavior may change.\r\nWARNING:tensorflow:From /home/estes/.virtualenv/tf/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:1362: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\r\nInstructions for updating:\r\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\r\nW tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\r\nWARNING:tensorflow:Rank of input Tensor (1) should be the same as output_rank (2) for column. Will attempt to expand dims. It is highly recommended that you resize your input, as this behavior may change.\r\nWARNING:tensorflow:From /home/estes/.virtualenv/tf/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/head.py:1362: scalar_summary (from tensorflow.python.ops.logging_ops) is deprecated and will be removed after 2016-11-30.\r\nInstructions for updating:\r\nPlease switch to tf.summary.scalar. Note that tf.summary.scalar uses the node name instead of the tag. This means that TensorFlow will automatically de-duplicate summary names based on the scope they are created in. Also, passing a tensor or list of tags to a scalar summary op is no longer supported.\r\nWARNING:tensorflow:Skipping summary for global_step, must be a float or np.float32.\r\n\r\nOn the getting started page it says:\r\n\r\nWhen run, it produces\r\n\r\n    {'global_step': 1000, 'loss': 1.9650059e-11}\r\n\r\nThat output doesn't exist anywhere within the output generated.  Thus, I assume it failed.\r\nI just started learning TF today, so could be missing something.\r\n\r\nI used the pip-based install for a non-GPU config with python3; in a virtual environment which has been 'activated'.  There were no complexities during the install process as described on the getting started page.\r\n\r\n"}