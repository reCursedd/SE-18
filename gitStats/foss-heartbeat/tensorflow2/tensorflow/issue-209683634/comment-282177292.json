{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/282177292", "html_url": "https://github.com/tensorflow/tensorflow/issues/7810#issuecomment-282177292", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7810", "id": 282177292, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjE3NzI5Mg==", "user": {"login": "AlvinChen13", "id": 20574558, "node_id": "MDQ6VXNlcjIwNTc0NTU4", "avatar_url": "https://avatars1.githubusercontent.com/u/20574558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlvinChen13", "html_url": "https://github.com/AlvinChen13", "followers_url": "https://api.github.com/users/AlvinChen13/followers", "following_url": "https://api.github.com/users/AlvinChen13/following{/other_user}", "gists_url": "https://api.github.com/users/AlvinChen13/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlvinChen13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlvinChen13/subscriptions", "organizations_url": "https://api.github.com/users/AlvinChen13/orgs", "repos_url": "https://api.github.com/users/AlvinChen13/repos", "events_url": "https://api.github.com/users/AlvinChen13/events{/privacy}", "received_events_url": "https://api.github.com/users/AlvinChen13/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-24T01:33:22Z", "updated_at": "2017-02-24T01:33:22Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15676913\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/poxvoculi\">@poxvoculi</a> We have another system&amp;1 2 GPUs are connected by SOC legend, so the HW is not support peer to peer memory accessing (I mean GPUDirect), this system has no issue, and I believe it should do DeviceToDeviceCopy also. But our current system&amp;2, the 2 GPUs are connected by PXI which is supported GPPUDirect, and it will cause the system reboot. CUDA has a testing program 'simpleP2P' can test the peer to peer memory accessing. For system &amp;1, 'simpleP2P' will not run since the GPU connection doesn't support it, but for system&amp;2, 'simpleP2P' will make the system reboot. It must be HW or driver issue. To workaround it, I want to disable the GPUDirect feature. For Tensorflow, I find the following code: (./tensorflow/stream_executor/cuda/cuda_gpu_executor.cc)<br>\nbool CUDAExecutor::CanEnablePeerAccessTo(StreamExecutorInterface *other) {<br>\nCUDAExecutor *cuda_other = static_cast&lt;CUDAExecutor *&gt;(other);<br>\nreturn CUDADriver::CanEnablePeerAccess(context_, cuda_other-&gt;context_);<br>\n}<br>\nI'd like to hack the code to make 'CUDAExecutor::CanEnablePeerAccessTo' always return 'false'.</p>", "body_text": "@poxvoculi We have another system&1 2 GPUs are connected by SOC legend, so the HW is not support peer to peer memory accessing (I mean GPUDirect), this system has no issue, and I believe it should do DeviceToDeviceCopy also. But our current system&2, the 2 GPUs are connected by PXI which is supported GPPUDirect, and it will cause the system reboot. CUDA has a testing program 'simpleP2P' can test the peer to peer memory accessing. For system &1, 'simpleP2P' will not run since the GPU connection doesn't support it, but for system&2, 'simpleP2P' will make the system reboot. It must be HW or driver issue. To workaround it, I want to disable the GPUDirect feature. For Tensorflow, I find the following code: (./tensorflow/stream_executor/cuda/cuda_gpu_executor.cc)\nbool CUDAExecutor::CanEnablePeerAccessTo(StreamExecutorInterface *other) {\nCUDAExecutor *cuda_other = static_cast<CUDAExecutor *>(other);\nreturn CUDADriver::CanEnablePeerAccess(context_, cuda_other->context_);\n}\nI'd like to hack the code to make 'CUDAExecutor::CanEnablePeerAccessTo' always return 'false'.", "body": "@poxvoculi We have another system&1 2 GPUs are connected by SOC legend, so the HW is not support peer to peer memory accessing (I mean GPUDirect), this system has no issue, and I believe it should do DeviceToDeviceCopy also. But our current system&2, the 2 GPUs are connected by PXI which is supported GPPUDirect, and it will cause the system reboot. CUDA has a testing program 'simpleP2P' can test the peer to peer memory accessing. For system &1, 'simpleP2P' will not run since the GPU connection doesn't support it, but for system&2, 'simpleP2P' will make the system reboot. It must be HW or driver issue. To workaround it, I want to disable the GPUDirect feature. For Tensorflow, I find the following code: (./tensorflow/stream_executor/cuda/cuda_gpu_executor.cc)\r\nbool CUDAExecutor::CanEnablePeerAccessTo(StreamExecutorInterface *other) {\r\n  CUDAExecutor *cuda_other = static_cast<CUDAExecutor *>(other);\r\n  return CUDADriver::CanEnablePeerAccess(context_, cuda_other->context_);\r\n}\r\nI'd like to hack the code to make 'CUDAExecutor::CanEnablePeerAccessTo' always return 'false'."}