{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350492061", "html_url": "https://github.com/tensorflow/tensorflow/issues/10749#issuecomment-350492061", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10749", "id": 350492061, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDQ5MjA2MQ==", "user": {"login": "Rassibassi", "id": 2855550, "node_id": "MDQ6VXNlcjI4NTU1NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2855550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rassibassi", "html_url": "https://github.com/Rassibassi", "followers_url": "https://api.github.com/users/Rassibassi/followers", "following_url": "https://api.github.com/users/Rassibassi/following{/other_user}", "gists_url": "https://api.github.com/users/Rassibassi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rassibassi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rassibassi/subscriptions", "organizations_url": "https://api.github.com/users/Rassibassi/orgs", "repos_url": "https://api.github.com/users/Rassibassi/repos", "events_url": "https://api.github.com/users/Rassibassi/events{/privacy}", "received_events_url": "https://api.github.com/users/Rassibassi/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-09T17:30:32Z", "updated_at": "2017-12-10T09:04:50Z", "author_association": "NONE", "body_html": "<p>Hi,<br>\nusing tensorflow to do some signal processing and the fft problem has appeared. I did some tests and hope they are helpful. I also created a repository with the example signal where the fft really goes wrong using the cpu, error after fft is <code>&gt;1e+14</code>. With a gpu it looks good.</p>\n<p>Code:<br>\n(<a href=\"https://github.com/rassibassi/fftTensorflow\">https://github.com/rassibassi/fftTensorflow</a>)</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> scipy.io\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>tf:<span class=\"pl-pds\">'</span></span>,tf.<span class=\"pl-c1\">__version__</span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scipy:<span class=\"pl-pds\">'</span></span>,scipy.<span class=\"pl-c1\">__version__</span>)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>np:<span class=\"pl-pds\">'</span></span>,np.<span class=\"pl-c1\">__version__</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> numpy fft</span>\nsignal <span class=\"pl-k\">=</span> scipy.io.loadmat(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>signal.mat<span class=\"pl-pds\">'</span></span>)[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>signal<span class=\"pl-pds\">'</span></span>]\nsignal_f <span class=\"pl-k\">=</span> np.fft.fft(signal)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> tf fft</span>\ntf_signal <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>signal.shape,<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.complex64)\ntf_signal_f <span class=\"pl-k\">=</span> tf.fft(tf_signal)\nsession <span class=\"pl-k\">=</span> tf.InteractiveSession()\nout_signal_f, out_signal <span class=\"pl-k\">=</span> session.run([tf_signal_f,tf_signal], <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{tf_signal:signal})\n\nerrorBefore <span class=\"pl-k\">=</span> np.mean(np.power(np.abs(out_signal<span class=\"pl-k\">-</span>signal),<span class=\"pl-c1\">2</span>))\nerrorAfter <span class=\"pl-k\">=</span> np.mean(np.power(np.abs(out_signal_f<span class=\"pl-k\">-</span>signal_f),<span class=\"pl-c1\">2</span>))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Error before fft:<span class=\"pl-pds\">'</span></span>,errorBefore)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Error after fft:<span class=\"pl-pds\">'</span></span>,errorAfter)</pre></div>\n<p>unix ubuntu cpu:</p>\n<pre><code>tf: 1.4.0\nscipy: 0.19.1\nnp: 1.13.1\nError before fft: 6.43755807539e-22\nError after fft: 4.21685308781e+14\n</code></pre>\n<p>scientific linux hpc-cluster cpu:</p>\n<pre><code>tf: 1.3.0\nscipy: 0.17.1\nnp: 1.11.0\nError before fft: 6.43755807539e-22\nError after fft: 4.21685308781e+14\n</code></pre>\n<p>scientific linux hpc-cluster gpu (Tesla K80) with cudnn/v5.1:</p>\n<pre><code>('tf:', '1.0.1')\n('scipy:', '0.18.1')\n('np:', '1.11.2')\n('Error before fft:', 6.4375580753914162e-22)\n('Error after fft:', 2.8628744462657876e-15)\n</code></pre>", "body_text": "Hi,\nusing tensorflow to do some signal processing and the fft problem has appeared. I did some tests and hope they are helpful. I also created a repository with the example signal where the fft really goes wrong using the cpu, error after fft is >1e+14. With a gpu it looks good.\nCode:\n(https://github.com/rassibassi/fftTensorflow)\nimport tensorflow as tf\nimport scipy.io\nimport numpy as np\n\nprint('tf:',tf.__version__)\nprint('scipy:',scipy.__version__)\nprint('np:',np.__version__)\n\n# numpy fft\nsignal = scipy.io.loadmat('signal.mat')['signal']\nsignal_f = np.fft.fft(signal)\n\n# tf fft\ntf_signal = tf.placeholder(shape=signal.shape,dtype=tf.complex64)\ntf_signal_f = tf.fft(tf_signal)\nsession = tf.InteractiveSession()\nout_signal_f, out_signal = session.run([tf_signal_f,tf_signal], feed_dict={tf_signal:signal})\n\nerrorBefore = np.mean(np.power(np.abs(out_signal-signal),2))\nerrorAfter = np.mean(np.power(np.abs(out_signal_f-signal_f),2))\nprint('Error before fft:',errorBefore)\nprint('Error after fft:',errorAfter)\nunix ubuntu cpu:\ntf: 1.4.0\nscipy: 0.19.1\nnp: 1.13.1\nError before fft: 6.43755807539e-22\nError after fft: 4.21685308781e+14\n\nscientific linux hpc-cluster cpu:\ntf: 1.3.0\nscipy: 0.17.1\nnp: 1.11.0\nError before fft: 6.43755807539e-22\nError after fft: 4.21685308781e+14\n\nscientific linux hpc-cluster gpu (Tesla K80) with cudnn/v5.1:\n('tf:', '1.0.1')\n('scipy:', '0.18.1')\n('np:', '1.11.2')\n('Error before fft:', 6.4375580753914162e-22)\n('Error after fft:', 2.8628744462657876e-15)", "body": "Hi,\r\nusing tensorflow to do some signal processing and the fft problem has appeared. I did some tests and hope they are helpful. I also created a repository with the example signal where the fft really goes wrong using the cpu, error after fft is `>1e+14`. With a gpu it looks good.\r\n\r\nCode:\r\n(https://github.com/rassibassi/fftTensorflow)\r\n```python\r\nimport tensorflow as tf\r\nimport scipy.io\r\nimport numpy as np\r\n\r\nprint('tf:',tf.__version__)\r\nprint('scipy:',scipy.__version__)\r\nprint('np:',np.__version__)\r\n\r\n# numpy fft\r\nsignal = scipy.io.loadmat('signal.mat')['signal']\r\nsignal_f = np.fft.fft(signal)\r\n\r\n# tf fft\r\ntf_signal = tf.placeholder(shape=signal.shape,dtype=tf.complex64)\r\ntf_signal_f = tf.fft(tf_signal)\r\nsession = tf.InteractiveSession()\r\nout_signal_f, out_signal = session.run([tf_signal_f,tf_signal], feed_dict={tf_signal:signal})\r\n\r\nerrorBefore = np.mean(np.power(np.abs(out_signal-signal),2))\r\nerrorAfter = np.mean(np.power(np.abs(out_signal_f-signal_f),2))\r\nprint('Error before fft:',errorBefore)\r\nprint('Error after fft:',errorAfter)\r\n```\r\nunix ubuntu cpu:\r\n```\r\ntf: 1.4.0\r\nscipy: 0.19.1\r\nnp: 1.13.1\r\nError before fft: 6.43755807539e-22\r\nError after fft: 4.21685308781e+14\r\n```\r\n\r\nscientific linux hpc-cluster cpu:\r\n```\r\ntf: 1.3.0\r\nscipy: 0.17.1\r\nnp: 1.11.0\r\nError before fft: 6.43755807539e-22\r\nError after fft: 4.21685308781e+14\r\n```\r\n\r\nscientific linux hpc-cluster gpu (Tesla K80) with cudnn/v5.1:\r\n```\r\n('tf:', '1.0.1')\r\n('scipy:', '0.18.1')\r\n('np:', '1.11.2')\r\n('Error before fft:', 6.4375580753914162e-22)\r\n('Error after fft:', 2.8628744462657876e-15)\r\n```"}