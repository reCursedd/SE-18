{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/408264523", "html_url": "https://github.com/tensorflow/tensorflow/issues/20899#issuecomment-408264523", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20899", "id": 408264523, "node_id": "MDEyOklzc3VlQ29tbWVudDQwODI2NDUyMw==", "user": {"login": "iandreariley", "id": 4681957, "node_id": "MDQ6VXNlcjQ2ODE5NTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4681957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iandreariley", "html_url": "https://github.com/iandreariley", "followers_url": "https://api.github.com/users/iandreariley/followers", "following_url": "https://api.github.com/users/iandreariley/following{/other_user}", "gists_url": "https://api.github.com/users/iandreariley/gists{/gist_id}", "starred_url": "https://api.github.com/users/iandreariley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iandreariley/subscriptions", "organizations_url": "https://api.github.com/users/iandreariley/orgs", "repos_url": "https://api.github.com/users/iandreariley/repos", "events_url": "https://api.github.com/users/iandreariley/events{/privacy}", "received_events_url": "https://api.github.com/users/iandreariley/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-26T23:21:32Z", "updated_at": "2018-07-26T23:21:32Z", "author_association": "NONE", "body_html": "<p><strong>update</strong>: This appears not due to having multiple environments, but that tensorflow binaries that I installed via conda were built with GCC 5.x using the C++11 ABI</p>\n<p>User defined op libraries (in this case, zero_out.so) are linked against <code>/path/to/tf/libtensorflow_framework.so</code>. If I check the symbol table of that library in the failing conda env (tf17) for <code>_ZN10tensorflow8internal21CheckOpMessageBuilder9NewStringEv</code>, nothing shows up. However, if I remove the \u201cEv: at the end, I get this:</p>\n<div class=\"highlight highlight-source-shell\"><pre>iriley@iriley_cpu<span class=\"pl-k\">&gt;</span> nm libtensorflow_framework.so <span class=\"pl-k\">|</span> grep _ZN10tensorflow8internal21CheckOpMessageBuilder9NewString\n000000000055e75c T _ZN10tensorflow8internal21CheckOpMessageBuilder9NewStringB5cxx11Ev</pre></div>\n<p>Note the <code>cxx11</code> towards the end of the symbol name. If you have GCC 5.x, setting -<code>D_GLIBCXX_USE_CXX11_ABI=1</code> should fix the problem.</p>", "body_text": "update: This appears not due to having multiple environments, but that tensorflow binaries that I installed via conda were built with GCC 5.x using the C++11 ABI\nUser defined op libraries (in this case, zero_out.so) are linked against /path/to/tf/libtensorflow_framework.so. If I check the symbol table of that library in the failing conda env (tf17) for _ZN10tensorflow8internal21CheckOpMessageBuilder9NewStringEv, nothing shows up. However, if I remove the \u201cEv: at the end, I get this:\niriley@iriley_cpu> nm libtensorflow_framework.so | grep _ZN10tensorflow8internal21CheckOpMessageBuilder9NewString\n000000000055e75c T _ZN10tensorflow8internal21CheckOpMessageBuilder9NewStringB5cxx11Ev\nNote the cxx11 towards the end of the symbol name. If you have GCC 5.x, setting -D_GLIBCXX_USE_CXX11_ABI=1 should fix the problem.", "body": "**update**: This appears not due to having multiple environments, but that tensorflow binaries that I installed via conda were built with GCC 5.x using the C++11 ABI\r\n\r\nUser defined op libraries (in this case, zero_out.so) are linked against `/path/to/tf/libtensorflow_framework.so`. If I check the symbol table of that library in the failing conda env (tf17) for `_ZN10tensorflow8internal21CheckOpMessageBuilder9NewStringEv`, nothing shows up. However, if I remove the \u201cEv: at the end, I get this:\r\n\r\n```sh\r\niriley@iriley_cpu> nm libtensorflow_framework.so | grep _ZN10tensorflow8internal21CheckOpMessageBuilder9NewString\r\n000000000055e75c T _ZN10tensorflow8internal21CheckOpMessageBuilder9NewStringB5cxx11Ev\r\n```\r\n\r\nNote the `cxx11` towards the end of the symbol name. If you have GCC 5.x, setting -`D_GLIBCXX_USE_CXX11_ABI=1` should fix the problem."}