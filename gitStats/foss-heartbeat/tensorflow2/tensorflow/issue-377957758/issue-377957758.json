{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23561", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23561/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23561/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23561/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23561", "id": 377957758, "node_id": "MDU6SXNzdWUzNzc5NTc3NTg=", "number": 23561, "title": "Custom op kernels compiled with C++17 are binary incompatible with tensorflow", "user": {"login": "liamuk", "id": 486096, "node_id": "MDQ6VXNlcjQ4NjA5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/486096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liamuk", "html_url": "https://github.com/liamuk", "followers_url": "https://api.github.com/users/liamuk/followers", "following_url": "https://api.github.com/users/liamuk/following{/other_user}", "gists_url": "https://api.github.com/users/liamuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/liamuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liamuk/subscriptions", "organizations_url": "https://api.github.com/users/liamuk/orgs", "repos_url": "https://api.github.com/users/liamuk/repos", "events_url": "https://api.github.com/users/liamuk/events{/privacy}", "received_events_url": "https://api.github.com/users/liamuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097543484, "node_id": "MDU6TGFiZWwxMDk3NTQzNDg0", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:runtime", "name": "comp:runtime", "color": "0052cc", "default": false}, {"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-11-06T17:36:54Z", "updated_at": "2018-11-19T22:19:00Z", "closed_at": null, "author_association": "NONE", "body_html": "<ul>\n<li>Have I written custom code: yes</li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux CentOS 7.5 (in docker)</li>\n<li>TensorFlow installed from (source or binary): pip binary</li>\n<li>TensorFlow version (use command below): 1.11</li>\n<li>Python version: 3.6.4</li>\n<li>GCC/Compiler version (if compiling from source): 7.3.1</li>\n</ul>\n<p><strong>current behavior</strong><br>\nWhen compiling a custom op kernel with c++17 features, compilation succeeds, but loading the generated library fails at runtime with the following error:</p>\n<pre><code>tensorflow.python.framework.errors_impl.NotFoundError: /usr/local/lib64/python3.6/site-packages/package-0.0.1-py3.6-linux-x86_64.egg/_package_ops.cpython-36m-x86_64-linux-gnu.so: undefined symbol: _ZN10tensorflow11GetNodeAttrERKNS_9AttrSliceESt17basic_string_viewIcSt11char_traitsIcEEPSs\n</code></pre>\n<p><strong>expected behavior</strong><br>\nLoading the library should succeed</p>\n<p><strong>Code to reproduce the issue</strong><br>\nAny custom op using <code>GetAttr</code> should reproduce this, e.g. the custom op in the custom op tutorial</p>\n<p><strong>Other info / logs</strong><br>\nThis symbol that is undefined is <code>tensorflow::GetNodeAttr(tensorflow::AttrSlice const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*)</code></p>\n<p>the symbol that it should have linked against (which exists in libtensorflow_framework.so) is <code>tensorflow::GetNodeAttr(tensorflow::AttrSlice const&amp;, absl::string_view, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*)</code></p>\n<p>the difference is <code>std::basic_string&lt;char, std::char_traits&lt;char&gt;</code> vs. <code>absl::string_view</code> for the second argument.</p>\n<p>It appears to be this way because <a href=\"https://github.com/abseil/abseil-cpp/blob/master/absl/strings/string_view.h\">https://github.com/abseil/abseil-cpp/blob/master/absl/strings/string_view.h</a> uses <code>std::string_view</code> to provide <code>absl::string_view</code> when <code>std::string_view</code> is available (i.e. when compiling using c++17 standard)</p>\n<p>The tensorflow binary is compiled with c++11, so it has absl::string_view provided by the custom absl implementation, whereas my custom op, compiled with c++17 gets the standard library implementation, so they are binary incompatible.</p>", "body_text": "Have I written custom code: yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux CentOS 7.5 (in docker)\nTensorFlow installed from (source or binary): pip binary\nTensorFlow version (use command below): 1.11\nPython version: 3.6.4\nGCC/Compiler version (if compiling from source): 7.3.1\n\ncurrent behavior\nWhen compiling a custom op kernel with c++17 features, compilation succeeds, but loading the generated library fails at runtime with the following error:\ntensorflow.python.framework.errors_impl.NotFoundError: /usr/local/lib64/python3.6/site-packages/package-0.0.1-py3.6-linux-x86_64.egg/_package_ops.cpython-36m-x86_64-linux-gnu.so: undefined symbol: _ZN10tensorflow11GetNodeAttrERKNS_9AttrSliceESt17basic_string_viewIcSt11char_traitsIcEEPSs\n\nexpected behavior\nLoading the library should succeed\nCode to reproduce the issue\nAny custom op using GetAttr should reproduce this, e.g. the custom op in the custom op tutorial\nOther info / logs\nThis symbol that is undefined is tensorflow::GetNodeAttr(tensorflow::AttrSlice const&, std::basic_string_view<char, std::char_traits<char> >, std::basic_string<char, std::char_traits<char>, std::allocator<char> >*)\nthe symbol that it should have linked against (which exists in libtensorflow_framework.so) is tensorflow::GetNodeAttr(tensorflow::AttrSlice const&, absl::string_view, std::basic_string<char, std::char_traits<char>, std::allocator<char> >*)\nthe difference is std::basic_string<char, std::char_traits<char> vs. absl::string_view for the second argument.\nIt appears to be this way because https://github.com/abseil/abseil-cpp/blob/master/absl/strings/string_view.h uses std::string_view to provide absl::string_view when std::string_view is available (i.e. when compiling using c++17 standard)\nThe tensorflow binary is compiled with c++11, so it has absl::string_view provided by the custom absl implementation, whereas my custom op, compiled with c++17 gets the standard library implementation, so they are binary incompatible.", "body": "- Have I written custom code: yes\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux CentOS 7.5 (in docker)\r\n- TensorFlow installed from (source or binary): pip binary\r\n- TensorFlow version (use command below): 1.11\r\n- Python version: 3.6.4\r\n- GCC/Compiler version (if compiling from source): 7.3.1\r\n\r\n**current behavior**\r\nWhen compiling a custom op kernel with c++17 features, compilation succeeds, but loading the generated library fails at runtime with the following error:\r\n```\r\ntensorflow.python.framework.errors_impl.NotFoundError: /usr/local/lib64/python3.6/site-packages/package-0.0.1-py3.6-linux-x86_64.egg/_package_ops.cpython-36m-x86_64-linux-gnu.so: undefined symbol: _ZN10tensorflow11GetNodeAttrERKNS_9AttrSliceESt17basic_string_viewIcSt11char_traitsIcEEPSs\r\n```\r\n**expected behavior**\r\nLoading the library should succeed\r\n\r\n**Code to reproduce the issue**\r\nAny custom op using `GetAttr` should reproduce this, e.g. the custom op in the custom op tutorial\r\n\r\n**Other info / logs**\r\nThis symbol that is undefined is `tensorflow::GetNodeAttr(tensorflow::AttrSlice const&, std::basic_string_view<char, std::char_traits<char> >, std::basic_string<char, std::char_traits<char>, std::allocator<char> >*)`\r\n\r\nthe symbol that it should have linked against (which exists in libtensorflow_framework.so) is `tensorflow::GetNodeAttr(tensorflow::AttrSlice const&, absl::string_view, std::basic_string<char, std::char_traits<char>, std::allocator<char> >*)`\r\n\r\nthe difference is `std::basic_string<char, std::char_traits<char>` vs. `absl::string_view` for the second argument.\r\n\r\nIt appears to be this way because https://github.com/abseil/abseil-cpp/blob/master/absl/strings/string_view.h uses `std::string_view` to provide `absl::string_view` when `std::string_view` is available (i.e. when compiling using c++17 standard)\r\n\r\nThe tensorflow binary is compiled with c++11, so it has absl::string_view provided by the custom absl implementation, whereas my custom op, compiled with c++17 gets the standard library implementation, so they are binary incompatible.\r\n"}