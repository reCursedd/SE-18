{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/165674572", "html_url": "https://github.com/tensorflow/tensorflow/issues/470#issuecomment-165674572", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/470", "id": 165674572, "node_id": "MDEyOklzc3VlQ29tbWVudDE2NTY3NDU3Mg==", "user": {"login": "dankolbman", "id": 2495894, "node_id": "MDQ6VXNlcjI0OTU4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2495894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dankolbman", "html_url": "https://github.com/dankolbman", "followers_url": "https://api.github.com/users/dankolbman/followers", "following_url": "https://api.github.com/users/dankolbman/following{/other_user}", "gists_url": "https://api.github.com/users/dankolbman/gists{/gist_id}", "starred_url": "https://api.github.com/users/dankolbman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dankolbman/subscriptions", "organizations_url": "https://api.github.com/users/dankolbman/orgs", "repos_url": "https://api.github.com/users/dankolbman/repos", "events_url": "https://api.github.com/users/dankolbman/events{/privacy}", "received_events_url": "https://api.github.com/users/dankolbman/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-18T05:10:16Z", "updated_at": "2015-12-18T05:10:16Z", "author_association": "NONE", "body_html": "<p>Yeah sure, here are the diffs. <code>2to3</code> will take care of everything except for the encoding issue on line 171 of <code>tensorboard_handler.py</code>. Just replace it with <code>self.wfile.write(output.encode('utf-8'))</code></p>\n<p><code>tensorboard.py</code>:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-md\"><span class=\"pl-md\">-</span>import http.server</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>import BaseHTTPServer</span>\n import functools\n import os\n import socket\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>import socketserver</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>import SocketServer</span>\n\n<span class=\"pl-mdr\">@@ -107,8 +107,8 @@</span> def ParseEventFilesFlag(flag_value):\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>class ThreadedHTTPServer(socketserver.ThreadingMixIn,</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>                         http.server.HTTPServer):</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>class ThreadedHTTPServer(SocketServer.ThreadingMixIn,</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>                         BaseHTTPServer.HTTPServer):</span></pre></div>\n<p><code>tensorboard_handler.py</code>:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-md\"><span class=\"pl-md\">-</span>import http.server</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>import BaseHTTPServer</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>import io</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>import urllib.parse</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>import StringIO</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>import urlparse</span>\n\n<span class=\"pl-mdr\">@@ -76,7 +76,7 @@</span> class _OutputFormat(object):\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>class TensorboardHandler(http.server.BaseHTTPRequestHandler):</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>class TensorboardHandler(BaseHTTPServer.BaseHTTPRequestHandler):</span>\n   \"\"\"Handler class for use with BaseHTTPServer.HTTPServer.\n\n<span class=\"pl-mdr\">@@ -85,7 +85,7 @@</span> class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n   def __init__(self, multiplexer, *args):\n     self._multiplexer = multiplexer\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    http.server.BaseHTTPRequestHandler.__init__(self, *args)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    BaseHTTPServer.BaseHTTPRequestHandler.__init__(self, *args)</span>\n\n<span class=\"pl-mdr\">@@ -140,7 +140,7 @@</span> class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    out = io.StringIO()</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    out = StringIO.StringIO()</span>\n     f = gzip.GzipFile(fileobj=out, mode='w')\n\n<span class=\"pl-mdr\">@@ -168,7 +168,7 @@</span> class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     self.send_header('Content-Type', 'application/json')\n     self.send_header('Content-Length', len(output))\n     self.end_headers()\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    self.wfile.write(output.encode('utf-8'))</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    self.wfile.write(output)</span>\n\n<span class=\"pl-mdr\">@@ -195,7 +195,7 @@</span> class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     values = self._multiplexer.Scalars(run, tag)\n\n     if query_params.get('format') == _OutputFormat.CSV:\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      string_io = io.StringIO()</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      string_io = StringIO.StringIO()</span>\n       writer = csv.writer(string_io)\n\n<span class=\"pl-mdr\">@@ -234,7 +234,7 @@</span> class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     run = query_params.get('run')\n     compressed_histograms = self._multiplexer.CompressedHistograms(run, tag)\n     if query_params.get('format') == _OutputFormat.CSV:\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      string_io = io.StringIO()</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      string_io = StringIO.StringIO()</span>\n       writer = csv.writer(string_io)\n\n<span class=\"pl-mdr\">@@ -242,7 +242,7 @@</span> class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n       headers = ['Wall time', 'Step']\n       if compressed_histograms:\n         bucket_count = len(compressed_histograms[0].compressed_histogram_values)\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>        for i in range(bucket_count):</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        for i in xrange(bucket_count):</span>\n           headers += ['Edge %d basis points' % i, 'Edge %d value' % i]\n       writer.writerow(headers)\n\n<span class=\"pl-mdr\">@@ -366,7 +366,7 @@</span> class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n   def do_GET(self):  # pylint: disable=invalid-name\n     \"\"\"Handler for all get requests.\"\"\"\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    parsed_url = urllib.parse.urlparse(self.path)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    parsed_url = urlparse.urlparse(self.path)</span>\n\n<span class=\"pl-mdr\">@@ -386,7 +386,7 @@</span> class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     if clean_path in handlers:\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>      query_params = urllib.parse.parse_qs(parsed_url.query)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>      query_params = urlparse.parse_qs(parsed_url.query)</span>\n       # parse_qs returns a list of values for each key; we're only interested in</pre></div>", "body_text": "Yeah sure, here are the diffs. 2to3 will take care of everything except for the encoding issue on line 171 of tensorboard_handler.py. Just replace it with self.wfile.write(output.encode('utf-8'))\ntensorboard.py:\n-import http.server\n+import BaseHTTPServer\n import functools\n import os\n import socket\n-import socketserver\n+import SocketServer\n\n@@ -107,8 +107,8 @@ def ParseEventFilesFlag(flag_value):\n-class ThreadedHTTPServer(socketserver.ThreadingMixIn,\n-                         http.server.HTTPServer):\n+class ThreadedHTTPServer(SocketServer.ThreadingMixIn,\n+                         BaseHTTPServer.HTTPServer):\ntensorboard_handler.py:\n-import http.server\n+import BaseHTTPServer\n-import io\n-import urllib.parse\n+import StringIO\n+import urlparse\n\n@@ -76,7 +76,7 @@ class _OutputFormat(object):\n-class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n+class TensorboardHandler(BaseHTTPServer.BaseHTTPRequestHandler):\n   \"\"\"Handler class for use with BaseHTTPServer.HTTPServer.\n\n@@ -85,7 +85,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n   def __init__(self, multiplexer, *args):\n     self._multiplexer = multiplexer\n-    http.server.BaseHTTPRequestHandler.__init__(self, *args)\n+    BaseHTTPServer.BaseHTTPRequestHandler.__init__(self, *args)\n\n@@ -140,7 +140,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n-    out = io.StringIO()\n+    out = StringIO.StringIO()\n     f = gzip.GzipFile(fileobj=out, mode='w')\n\n@@ -168,7 +168,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     self.send_header('Content-Type', 'application/json')\n     self.send_header('Content-Length', len(output))\n     self.end_headers()\n-    self.wfile.write(output.encode('utf-8'))\n+    self.wfile.write(output)\n\n@@ -195,7 +195,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     values = self._multiplexer.Scalars(run, tag)\n\n     if query_params.get('format') == _OutputFormat.CSV:\n-      string_io = io.StringIO()\n+      string_io = StringIO.StringIO()\n       writer = csv.writer(string_io)\n\n@@ -234,7 +234,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     run = query_params.get('run')\n     compressed_histograms = self._multiplexer.CompressedHistograms(run, tag)\n     if query_params.get('format') == _OutputFormat.CSV:\n-      string_io = io.StringIO()\n+      string_io = StringIO.StringIO()\n       writer = csv.writer(string_io)\n\n@@ -242,7 +242,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n       headers = ['Wall time', 'Step']\n       if compressed_histograms:\n         bucket_count = len(compressed_histograms[0].compressed_histogram_values)\n-        for i in range(bucket_count):\n+        for i in xrange(bucket_count):\n           headers += ['Edge %d basis points' % i, 'Edge %d value' % i]\n       writer.writerow(headers)\n\n@@ -366,7 +366,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n   def do_GET(self):  # pylint: disable=invalid-name\n     \"\"\"Handler for all get requests.\"\"\"\n-    parsed_url = urllib.parse.urlparse(self.path)\n+    parsed_url = urlparse.urlparse(self.path)\n\n@@ -386,7 +386,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     if clean_path in handlers:\n-      query_params = urllib.parse.parse_qs(parsed_url.query)\n+      query_params = urlparse.parse_qs(parsed_url.query)\n       # parse_qs returns a list of values for each key; we're only interested in", "body": "Yeah sure, here are the diffs. `2to3` will take care of everything except for the encoding issue on line 171 of `tensorboard_handler.py`. Just replace it with `self.wfile.write(output.encode('utf-8'))`\n\n`tensorboard.py`:\n\n``` diff\n-import http.server\n+import BaseHTTPServer\n import functools\n import os\n import socket\n-import socketserver\n+import SocketServer\n\n@@ -107,8 +107,8 @@ def ParseEventFilesFlag(flag_value):\n-class ThreadedHTTPServer(socketserver.ThreadingMixIn,\n-                         http.server.HTTPServer):\n+class ThreadedHTTPServer(SocketServer.ThreadingMixIn,\n+                         BaseHTTPServer.HTTPServer):\n```\n\n`tensorboard_handler.py`:\n\n``` diff\n-import http.server\n+import BaseHTTPServer\n-import io\n-import urllib.parse\n+import StringIO\n+import urlparse\n\n@@ -76,7 +76,7 @@ class _OutputFormat(object):\n-class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n+class TensorboardHandler(BaseHTTPServer.BaseHTTPRequestHandler):\n   \"\"\"Handler class for use with BaseHTTPServer.HTTPServer.\n\n@@ -85,7 +85,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n   def __init__(self, multiplexer, *args):\n     self._multiplexer = multiplexer\n-    http.server.BaseHTTPRequestHandler.__init__(self, *args)\n+    BaseHTTPServer.BaseHTTPRequestHandler.__init__(self, *args)\n\n@@ -140,7 +140,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n-    out = io.StringIO()\n+    out = StringIO.StringIO()\n     f = gzip.GzipFile(fileobj=out, mode='w')\n\n@@ -168,7 +168,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     self.send_header('Content-Type', 'application/json')\n     self.send_header('Content-Length', len(output))\n     self.end_headers()\n-    self.wfile.write(output.encode('utf-8'))\n+    self.wfile.write(output)\n\n@@ -195,7 +195,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     values = self._multiplexer.Scalars(run, tag)\n\n     if query_params.get('format') == _OutputFormat.CSV:\n-      string_io = io.StringIO()\n+      string_io = StringIO.StringIO()\n       writer = csv.writer(string_io)\n\n@@ -234,7 +234,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     run = query_params.get('run')\n     compressed_histograms = self._multiplexer.CompressedHistograms(run, tag)\n     if query_params.get('format') == _OutputFormat.CSV:\n-      string_io = io.StringIO()\n+      string_io = StringIO.StringIO()\n       writer = csv.writer(string_io)\n\n@@ -242,7 +242,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n       headers = ['Wall time', 'Step']\n       if compressed_histograms:\n         bucket_count = len(compressed_histograms[0].compressed_histogram_values)\n-        for i in range(bucket_count):\n+        for i in xrange(bucket_count):\n           headers += ['Edge %d basis points' % i, 'Edge %d value' % i]\n       writer.writerow(headers)\n\n@@ -366,7 +366,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n   def do_GET(self):  # pylint: disable=invalid-name\n     \"\"\"Handler for all get requests.\"\"\"\n-    parsed_url = urllib.parse.urlparse(self.path)\n+    parsed_url = urlparse.urlparse(self.path)\n\n@@ -386,7 +386,7 @@ class TensorboardHandler(http.server.BaseHTTPRequestHandler):\n     if clean_path in handlers:\n-      query_params = urllib.parse.parse_qs(parsed_url.query)\n+      query_params = urlparse.parse_qs(parsed_url.query)\n       # parse_qs returns a list of values for each key; we're only interested in\n```\n"}