{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21894", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21894/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21894/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21894/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21894", "id": 354305536, "node_id": "MDU6SXNzdWUzNTQzMDU1MzY=", "number": 21894, "title": "Tensorflow with Keras fit and tensors in dataset input result in list index out of range", "user": {"login": "pbosch", "id": 11026657, "node_id": "MDQ6VXNlcjExMDI2NjU3", "avatar_url": "https://avatars3.githubusercontent.com/u/11026657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pbosch", "html_url": "https://github.com/pbosch", "followers_url": "https://api.github.com/users/pbosch/followers", "following_url": "https://api.github.com/users/pbosch/following{/other_user}", "gists_url": "https://api.github.com/users/pbosch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pbosch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pbosch/subscriptions", "organizations_url": "https://api.github.com/users/pbosch/orgs", "repos_url": "https://api.github.com/users/pbosch/repos", "events_url": "https://api.github.com/users/pbosch/events{/privacy}", "received_events_url": "https://api.github.com/users/pbosch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-08-27T12:50:16Z", "updated_at": "2018-10-01T18:16:04Z", "closed_at": "2018-09-07T16:34:14Z", "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOS 10.13.6</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.10.1</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I encountered a strange error when using tf.keras in python with a dataset that consists out of tensors.</p>\n<p>What I do is create a dataset from a csv file and modify it as it contains a time series. In the end, I end up with a dataset that has tuples of input and output tensor.</p>\n<p>These are fed into a tf.keras model and here is where it becomes interesting. Fit calls a function in training.py of the keras enginge which is called _standardize_user_data. This should return the input, targets, and so on for fit_loop, which in turn checks something on it and crashes with <em>if issparse is not None and issparse(ins[i]) and not K.is_sparse(feed[i]): IndexError: list index out of range</em> in line 187 of training_arrays.py. This is due to the fact _standardize_user_data returns empty lists, with the reasoning that if tensors are the input, then everything should be set up already, which it apparently isn't.</p>\n<h3>Source code / logs</h3>\n<p>A small script to reproduce the problem:</p>\n<pre><code>#!/usr/bin/env python3\nimport argparse\nimport glob\nimport logging\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\n\ndef read_dataset(filename, columns, field_defaults, input_size, output_size, stride, input_features):\n    def decode_csv(row):\n        fields = tf.decode_csv(row, record_defaults=field_defaults, field_delim=',')\n        all_columns = dict(zip(columns, fields))\n        return all_columns\n\n    def split_window(window):\n        inputs = tf.reshape(tf.concat(window['value'][0:input_size], axis=1), [input_size, input_features])\n        outputs = tf.reshape(tf.concat(window['value'][input_size:input_size + output_size], axis=1),\n                             [output_size, input_features])\n\n        return inputs, outputs\n\n    dataset = tf.data.TextLineDataset(filenames=filename)\n    dataset = dataset.map(decode_csv)\n    dataset = dataset.apply(tf.contrib.data.sliding_window_batch(window_size=input_size + output_size, stride=stride))\n    dataset = dataset.map(split_window)\n    dataset = dataset.repeat()\n\n    return dataset\n\n\nif __name__ == \"__main__\":\n    COLUMNS = ['value']\n    FIELD_DEFAULTS = [[0.0]]\n    INPUT_FEATURES = 1\n\n    epochs = 1\n    steps = 1\n    INPUT_SIZE = 4\n    OUTPUT_SIZE = 2\n    STRIDE = 1\n    input_train = \"./data/\"\n\n    input_train_list = glob.glob(input_train + \"*\")\n\n    model = keras.Sequential()\n    model.add(tf.keras.layers.Dense(OUTPUT_SIZE, activation=None))\n    set = read_dataset(input_train_list, COLUMNS, FIELD_DEFAULTS, INPUT_SIZE, OUTPUT_SIZE, STRIDE, INPUT_FEATURES)\n\n    model.compile(optimizer=tf.train.AdamOptimizer(0.01), loss='mse', metrics=['mse'])\n    model.fit(set, epochs=epochs, steps_per_epoch=steps)\n</code></pre>\n<p>And the error itself:</p>\n<pre><code>2018-08-27 14:29:33.238328: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\nTraceback (most recent call last):\n  File \"/.../test.py\", line 102, in &lt;module&gt;\n    model.fit(set, epochs=epochs, steps_per_epoch=steps)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 1363, in fit\n    validation_steps=validation_steps)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_arrays.py\", line 187, in fit_loop\n    if issparse is not None and issparse(ins[i]) and not K.is_sparse(feed[i]):\nIndexError: list index out of range\n</code></pre>\n<p>The data itself is something like this:</p>\n<pre><code>0.047910000000000785\n3.0999999999892225e-05\n0.0160979999999995\n2.9000000000500847e-05\n0.01716599999999957\n2.800000000036107e-05\n2.9999999999752447e-05\n0.019235000000000113\n</code></pre>\n<p>I am not sure if this behaviour is intended or not. In the Keras example, a dataset is used as well and I assume it should work with datasets consisting out of tensors. Is it possible that the return in this case should not be empty, but should only have an empty sample weight?</p>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.13.6\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.10.1\nPython version: 3.6.5\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nI encountered a strange error when using tf.keras in python with a dataset that consists out of tensors.\nWhat I do is create a dataset from a csv file and modify it as it contains a time series. In the end, I end up with a dataset that has tuples of input and output tensor.\nThese are fed into a tf.keras model and here is where it becomes interesting. Fit calls a function in training.py of the keras enginge which is called _standardize_user_data. This should return the input, targets, and so on for fit_loop, which in turn checks something on it and crashes with if issparse is not None and issparse(ins[i]) and not K.is_sparse(feed[i]): IndexError: list index out of range in line 187 of training_arrays.py. This is due to the fact _standardize_user_data returns empty lists, with the reasoning that if tensors are the input, then everything should be set up already, which it apparently isn't.\nSource code / logs\nA small script to reproduce the problem:\n#!/usr/bin/env python3\nimport argparse\nimport glob\nimport logging\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\n\ndef read_dataset(filename, columns, field_defaults, input_size, output_size, stride, input_features):\n    def decode_csv(row):\n        fields = tf.decode_csv(row, record_defaults=field_defaults, field_delim=',')\n        all_columns = dict(zip(columns, fields))\n        return all_columns\n\n    def split_window(window):\n        inputs = tf.reshape(tf.concat(window['value'][0:input_size], axis=1), [input_size, input_features])\n        outputs = tf.reshape(tf.concat(window['value'][input_size:input_size + output_size], axis=1),\n                             [output_size, input_features])\n\n        return inputs, outputs\n\n    dataset = tf.data.TextLineDataset(filenames=filename)\n    dataset = dataset.map(decode_csv)\n    dataset = dataset.apply(tf.contrib.data.sliding_window_batch(window_size=input_size + output_size, stride=stride))\n    dataset = dataset.map(split_window)\n    dataset = dataset.repeat()\n\n    return dataset\n\n\nif __name__ == \"__main__\":\n    COLUMNS = ['value']\n    FIELD_DEFAULTS = [[0.0]]\n    INPUT_FEATURES = 1\n\n    epochs = 1\n    steps = 1\n    INPUT_SIZE = 4\n    OUTPUT_SIZE = 2\n    STRIDE = 1\n    input_train = \"./data/\"\n\n    input_train_list = glob.glob(input_train + \"*\")\n\n    model = keras.Sequential()\n    model.add(tf.keras.layers.Dense(OUTPUT_SIZE, activation=None))\n    set = read_dataset(input_train_list, COLUMNS, FIELD_DEFAULTS, INPUT_SIZE, OUTPUT_SIZE, STRIDE, INPUT_FEATURES)\n\n    model.compile(optimizer=tf.train.AdamOptimizer(0.01), loss='mse', metrics=['mse'])\n    model.fit(set, epochs=epochs, steps_per_epoch=steps)\n\nAnd the error itself:\n2018-08-27 14:29:33.238328: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\nTraceback (most recent call last):\n  File \"/.../test.py\", line 102, in <module>\n    model.fit(set, epochs=epochs, steps_per_epoch=steps)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 1363, in fit\n    validation_steps=validation_steps)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_arrays.py\", line 187, in fit_loop\n    if issparse is not None and issparse(ins[i]) and not K.is_sparse(feed[i]):\nIndexError: list index out of range\n\nThe data itself is something like this:\n0.047910000000000785\n3.0999999999892225e-05\n0.0160979999999995\n2.9000000000500847e-05\n0.01716599999999957\n2.800000000036107e-05\n2.9999999999752447e-05\n0.019235000000000113\n\nI am not sure if this behaviour is intended or not. In the Keras example, a dataset is used as well and I assume it should work with datasets consisting out of tensors. Is it possible that the return in this case should not be empty, but should only have an empty sample weight?", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOS 10.13.6\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.10.1\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nI encountered a strange error when using tf.keras in python with a dataset that consists out of tensors.\r\n\r\nWhat I do is create a dataset from a csv file and modify it as it contains a time series. In the end, I end up with a dataset that has tuples of input and output tensor.\r\n\r\nThese are fed into a tf.keras model and here is where it becomes interesting. Fit calls a function in training.py of the keras enginge which is called _standardize_user_data. This should return the input, targets, and so on for fit_loop, which in turn checks something on it and crashes with _if issparse is not None and issparse(ins[i]) and not K.is_sparse(feed[i]): IndexError: list index out of range_ in line 187 of training_arrays.py. This is due to the fact _standardize_user_data returns empty lists, with the reasoning that if tensors are the input, then everything should be set up already, which it apparently isn't.\r\n\r\n### Source code / logs\r\nA small script to reproduce the problem:\r\n```\r\n#!/usr/bin/env python3\r\nimport argparse\r\nimport glob\r\nimport logging\r\nimport numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow import keras\r\n\r\n\r\ndef read_dataset(filename, columns, field_defaults, input_size, output_size, stride, input_features):\r\n    def decode_csv(row):\r\n        fields = tf.decode_csv(row, record_defaults=field_defaults, field_delim=',')\r\n        all_columns = dict(zip(columns, fields))\r\n        return all_columns\r\n\r\n    def split_window(window):\r\n        inputs = tf.reshape(tf.concat(window['value'][0:input_size], axis=1), [input_size, input_features])\r\n        outputs = tf.reshape(tf.concat(window['value'][input_size:input_size + output_size], axis=1),\r\n                             [output_size, input_features])\r\n\r\n        return inputs, outputs\r\n\r\n    dataset = tf.data.TextLineDataset(filenames=filename)\r\n    dataset = dataset.map(decode_csv)\r\n    dataset = dataset.apply(tf.contrib.data.sliding_window_batch(window_size=input_size + output_size, stride=stride))\r\n    dataset = dataset.map(split_window)\r\n    dataset = dataset.repeat()\r\n\r\n    return dataset\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    COLUMNS = ['value']\r\n    FIELD_DEFAULTS = [[0.0]]\r\n    INPUT_FEATURES = 1\r\n\r\n    epochs = 1\r\n    steps = 1\r\n    INPUT_SIZE = 4\r\n    OUTPUT_SIZE = 2\r\n    STRIDE = 1\r\n    input_train = \"./data/\"\r\n\r\n    input_train_list = glob.glob(input_train + \"*\")\r\n\r\n    model = keras.Sequential()\r\n    model.add(tf.keras.layers.Dense(OUTPUT_SIZE, activation=None))\r\n    set = read_dataset(input_train_list, COLUMNS, FIELD_DEFAULTS, INPUT_SIZE, OUTPUT_SIZE, STRIDE, INPUT_FEATURES)\r\n\r\n    model.compile(optimizer=tf.train.AdamOptimizer(0.01), loss='mse', metrics=['mse'])\r\n    model.fit(set, epochs=epochs, steps_per_epoch=steps)\r\n```\r\nAnd the error itself:\r\n```\r\n2018-08-27 14:29:33.238328: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\r\nTraceback (most recent call last):\r\n  File \"/.../test.py\", line 102, in <module>\r\n    model.fit(set, epochs=epochs, steps_per_epoch=steps)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 1363, in fit\r\n    validation_steps=validation_steps)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training_arrays.py\", line 187, in fit_loop\r\n    if issparse is not None and issparse(ins[i]) and not K.is_sparse(feed[i]):\r\nIndexError: list index out of range\r\n```\r\nThe data itself is something like this:\r\n```\r\n0.047910000000000785\r\n3.0999999999892225e-05\r\n0.0160979999999995\r\n2.9000000000500847e-05\r\n0.01716599999999957\r\n2.800000000036107e-05\r\n2.9999999999752447e-05\r\n0.019235000000000113\r\n```\r\n\r\nI am not sure if this behaviour is intended or not. In the Keras example, a dataset is used as well and I assume it should work with datasets consisting out of tensors. Is it possible that the return in this case should not be empty, but should only have an empty sample weight? "}