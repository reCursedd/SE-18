{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/134871462", "pull_request_review_id": 58215341, "id": 134871462, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDg3MTQ2Mg==", "diff_hunk": "@@ -1153,8 +1154,13 @@ __launch_bounds__(1024, 2) void DepthwiseConv2dBackpropFilterGPUKernelNHWCSmall(\n       if (filter_depth < in_depth) {\n         T val = accum_data[i];\n         // Warp-accumulate the pixels of the same depth from the accumulator.\n+        int lane_id;\n+        asm volatile (\"mov.u32 %0, %laneid;\" : \"=r\"(lane_id));", "path": "tensorflow/core/kernels/depthwise_conv_op_gpu.cu.cc", "position": null, "original_position": 22, "commit_id": "ef71383cf2d8d8241d813ac11695a26c34ae3ceb", "original_commit_id": "c4f7d053a667974edda7335585502597f66343c8", "user": {"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, "body": "In the past we've used the threadIdx % 32.  Does that no longer work?\r\n\r\nIt's kind of a layering violation to put inline assembly here.  If there's no good way to get the lane ID other than inline asm, it should be abstracted away in a function.", "created_at": "2017-08-23T21:08:32Z", "updated_at": "2017-09-06T23:30:12Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12502#discussion_r134871462", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12502", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/134871462"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12502#discussion_r134871462"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12502"}}, "body_html": "<p>In the past we've used the threadIdx % 32.  Does that no longer work?</p>\n<p>It's kind of a layering violation to put inline assembly here.  If there's no good way to get the lane ID other than inline asm, it should be abstracted away in a function.</p>", "body_text": "In the past we've used the threadIdx % 32.  Does that no longer work?\nIt's kind of a layering violation to put inline assembly here.  If there's no good way to get the lane ID other than inline asm, it should be abstracted away in a function."}