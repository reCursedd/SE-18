{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/316589390", "html_url": "https://github.com/tensorflow/tensorflow/issues/11605#issuecomment-316589390", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11605", "id": 316589390, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjU4OTM5MA==", "user": {"login": "jakiechris", "id": 12059735, "node_id": "MDQ6VXNlcjEyMDU5NzM1", "avatar_url": "https://avatars2.githubusercontent.com/u/12059735?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakiechris", "html_url": "https://github.com/jakiechris", "followers_url": "https://api.github.com/users/jakiechris/followers", "following_url": "https://api.github.com/users/jakiechris/following{/other_user}", "gists_url": "https://api.github.com/users/jakiechris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakiechris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakiechris/subscriptions", "organizations_url": "https://api.github.com/users/jakiechris/orgs", "repos_url": "https://api.github.com/users/jakiechris/repos", "events_url": "https://api.github.com/users/jakiechris/events{/privacy}", "received_events_url": "https://api.github.com/users/jakiechris/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-20T03:53:10Z", "updated_at": "2017-07-20T03:53:10Z", "author_association": "NONE", "body_html": "<p>my  c++ code \uff1a</p>\n<p>int MyTensorflow::OfflineTensorFlowIsAf(deque &amp; section)<br>\n{<br>\nSession* session;<br>\nGraphDef graph_def;<br>\nSessionOptions opts;<br>\nstd::vector outputs;<br>\nstd::vector y_outputs;<br>\nint i;<br>\nint sectionLen;</p>\n<p>//    QPrint(\"begin:%u\\n\", GetSystemTime());<br>\nQPrint(\"1MyTensorflow::OfflineTensorFlowIsAf:pbPathFile:%s\\n\", pbPathFile.c_str());<br>\nif (pbPathFile == \"\")<br>\n{<br>\nQPrint(\"MyTensorflow::OfflineTensorFlowIsAf:fatal error: pbPathFile is empty\\n\");<br>\nreturn 0;<br>\n}</p>\n<pre><code>TF_CHECK_OK(ReadBinaryProto(Env::Default(), pbPathFile, &amp;graph_def));\n\nTF_CHECK_OK(NewSession(opts, &amp;session));\n\nTF_CHECK_OK(session-&gt;Create(graph_def));\n\nTensor x(DT_FLOAT, TensorShape({1, 321}));\n\nsectionLen = section.size();\n\nfor (i = 0; i &lt; 321; i++)\n{\n    if (i &lt; sectionLen)\n    {\n        x.matrix&lt;float&gt;()(i) = section[i];\n    }\n    else\n    {\n        x.matrix&lt;float&gt;()(i) = 0;\n    }\n}\n\nTF_CHECK_OK(session-&gt;Run({{\"inputx\", x}}, {\"aFclass\"}, {}, &amp;y_outputs)); // Get y_out\n\nfloat y_out = y_outputs[0].scalar&lt;int&gt;()(0);\n\nQPrint(\"MyTensorflow::OfflineTensorFlowIsAf:y_out:%f,sectionLen:%d\\n\", y_out, sectionLen);\n</code></pre>\n<p>//    QPrint(\"end:%u\\n\", GetSystemTime());</p>\n<pre><code>if (0 == FloatCompares(y_out, 0))\n{\n    return 0;\n}\nelse\n{\n    return 1;\n}\n</code></pre>\n<p>}</p>", "body_text": "my  c++ code \uff1a\nint MyTensorflow::OfflineTensorFlowIsAf(deque & section)\n{\nSession* session;\nGraphDef graph_def;\nSessionOptions opts;\nstd::vector outputs;\nstd::vector y_outputs;\nint i;\nint sectionLen;\n//    QPrint(\"begin:%u\\n\", GetSystemTime());\nQPrint(\"1MyTensorflow::OfflineTensorFlowIsAf:pbPathFile:%s\\n\", pbPathFile.c_str());\nif (pbPathFile == \"\")\n{\nQPrint(\"MyTensorflow::OfflineTensorFlowIsAf:fatal error: pbPathFile is empty\\n\");\nreturn 0;\n}\nTF_CHECK_OK(ReadBinaryProto(Env::Default(), pbPathFile, &graph_def));\n\nTF_CHECK_OK(NewSession(opts, &session));\n\nTF_CHECK_OK(session->Create(graph_def));\n\nTensor x(DT_FLOAT, TensorShape({1, 321}));\n\nsectionLen = section.size();\n\nfor (i = 0; i < 321; i++)\n{\n    if (i < sectionLen)\n    {\n        x.matrix<float>()(i) = section[i];\n    }\n    else\n    {\n        x.matrix<float>()(i) = 0;\n    }\n}\n\nTF_CHECK_OK(session->Run({{\"inputx\", x}}, {\"aFclass\"}, {}, &y_outputs)); // Get y_out\n\nfloat y_out = y_outputs[0].scalar<int>()(0);\n\nQPrint(\"MyTensorflow::OfflineTensorFlowIsAf:y_out:%f,sectionLen:%d\\n\", y_out, sectionLen);\n\n//    QPrint(\"end:%u\\n\", GetSystemTime());\nif (0 == FloatCompares(y_out, 0))\n{\n    return 0;\n}\nelse\n{\n    return 1;\n}\n\n}", "body": "my  c++ code \uff1a\r\n\r\nint MyTensorflow::OfflineTensorFlowIsAf(deque<double> & section)\r\n{\r\n    Session* session;\r\n    GraphDef graph_def;\r\n    SessionOptions opts;\r\n    std::vector<Tensor> outputs;\r\n    std::vector<Tensor> y_outputs;\r\n    int i;\r\n    int sectionLen;\r\n\r\n//    QPrint(\"begin:%u\\n\", GetSystemTime());\r\n    QPrint(\"1MyTensorflow::OfflineTensorFlowIsAf:pbPathFile:%s\\n\", pbPathFile.c_str());\r\n    if (pbPathFile == \"\")\r\n    {\r\n        QPrint(\"MyTensorflow::OfflineTensorFlowIsAf:fatal error: pbPathFile is empty\\n\");\r\n        return 0;\r\n    }\r\n\r\n    TF_CHECK_OK(ReadBinaryProto(Env::Default(), pbPathFile, &graph_def));\r\n\r\n    TF_CHECK_OK(NewSession(opts, &session));\r\n\r\n    TF_CHECK_OK(session->Create(graph_def));\r\n\r\n    Tensor x(DT_FLOAT, TensorShape({1, 321}));\r\n\r\n    sectionLen = section.size();\r\n\r\n    for (i = 0; i < 321; i++)\r\n    {\r\n        if (i < sectionLen)\r\n        {\r\n            x.matrix<float>()(i) = section[i];\r\n        }\r\n        else\r\n        {\r\n            x.matrix<float>()(i) = 0;\r\n        }\r\n    }\r\n\r\n    TF_CHECK_OK(session->Run({{\"inputx\", x}}, {\"aFclass\"}, {}, &y_outputs)); // Get y_out\r\n\r\n    float y_out = y_outputs[0].scalar<int>()(0);\r\n\r\n    QPrint(\"MyTensorflow::OfflineTensorFlowIsAf:y_out:%f,sectionLen:%d\\n\", y_out, sectionLen);\r\n\r\n//    QPrint(\"end:%u\\n\", GetSystemTime());\r\n\r\n    if (0 == FloatCompares(y_out, 0))\r\n    {\r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        return 1;\r\n    }\r\n}"}