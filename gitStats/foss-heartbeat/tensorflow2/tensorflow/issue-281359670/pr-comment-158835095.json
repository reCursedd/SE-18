{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/158835095", "pull_request_review_id": 85696857, "id": 158835095, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODgzNTA5NQ==", "diff_hunk": "@@ -1010,26 +1008,24 @@ def hessians(ys, xs, name=\"hessians\", colocate_gradients_with_ops=False,\n   hessians = []\n   _gradients = gradients(ys, xs, **kwargs)\n   for i, _gradient, x in zip(range(len(xs)), _gradients, xs):\n-    # Ensure that x is a vector.\n-    check_rank = check_ops.assert_rank(\n-      x, 1, message='Cannot compute Hessian because element %d of `xs` does '\n-      'not have rank one.' % i\n+    # change shape to one-dimension without graph branching\n+    _gradient = array_ops.reshape(_gradient, [-1])\n+    \n+    # Declare an iterator and tensor array loop variables for the gradients.\n+    n = array_ops.size(x)\n+    loop_vars = [\n+      array_ops.constant(0, dtypes.int32),\n+      tensor_array_ops.TensorArray(x.dtype, n)\n+    ]\n+    # Iterate over all elements of the gradient and compute second order\n+    # derivatives.\n+    _, hessian = control_flow_ops.while_loop(\n+        lambda j, _: j < n,\n+        lambda j, result: (j + 1,\n+                           result.write(j, gradients(_gradient[j], x)[0])),\n+        loop_vars\n     )\n-    with ops.control_dependencies([check_rank]):\n-      # Declare an iterator and tensor array loop variables for the gradients.\n-      n = array_ops.size(x)\n-      loop_vars = [\n-        array_ops.constant(0, dtypes.int32),\n-        tensor_array_ops.TensorArray(x.dtype, n)\n-      ]\n-      # Iterate over all elements of the gradient and compute second order\n-      # derivatives.\n-      _, hessian = control_flow_ops.while_loop(\n-          lambda j, _: j < n,\n-          lambda j, result: (j + 1,\n-                             result.write(j, gradients(_gradient[j], x)[0])),\n-          loop_vars\n-      )\n-\n-      hessians.append(hessian.stack())\n+\n+    _shape = x.shape.as_list()", "path": "tensorflow/python/ops/gradients_impl.py", "position": null, "original_position": 54, "commit_id": "c818d57d7837c6b85c78c9c30b529342911f232f", "original_commit_id": "bde9be325fc631ecc1431b472c97b73b3d2dbd98", "user": {"login": "tillahoffmann", "id": 966348, "node_id": "MDQ6VXNlcjk2NjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/966348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tillahoffmann", "html_url": "https://github.com/tillahoffmann", "followers_url": "https://api.github.com/users/tillahoffmann/followers", "following_url": "https://api.github.com/users/tillahoffmann/following{/other_user}", "gists_url": "https://api.github.com/users/tillahoffmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tillahoffmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tillahoffmann/subscriptions", "organizations_url": "https://api.github.com/users/tillahoffmann/orgs", "repos_url": "https://api.github.com/users/tillahoffmann/repos", "events_url": "https://api.github.com/users/tillahoffmann/events{/privacy}", "received_events_url": "https://api.github.com/users/tillahoffmann/received_events", "type": "User", "site_admin": false}, "body": "Let's use `array_ops.shape` here and then `array_ops.concat` in the line below such that we do not require the shape to be known a priori.", "created_at": "2017-12-27T16:12:23Z", "updated_at": "2017-12-29T03:17:48Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/15308#discussion_r158835095", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15308", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/158835095"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/15308#discussion_r158835095"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15308"}}, "body_html": "<p>Let's use <code>array_ops.shape</code> here and then <code>array_ops.concat</code> in the line below such that we do not require the shape to be known a priori.</p>", "body_text": "Let's use array_ops.shape here and then array_ops.concat in the line below such that we do not require the shape to be known a priori."}