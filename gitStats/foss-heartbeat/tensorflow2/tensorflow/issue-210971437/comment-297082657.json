{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/297082657", "html_url": "https://github.com/tensorflow/tensorflow/issues/7958#issuecomment-297082657", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7958", "id": 297082657, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzA4MjY1Nw==", "user": {"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-25T16:14:30Z", "updated_at": "2017-04-25T16:14:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1121581\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ajtulloch\">@ajtulloch</a> Thanks for your detailed comments. It looks like the C2 implementation is further along than what I have, but it would be great to share code if possible. I haven't looked at the C2 implementation in detail yet, but I am thinking about all the points you bring up here. Especially, I am super frustrated by the <code>texture2d/texture2d_array</code> issue too. Here are some thoughts I have on some of your points.</p>\n<ul>\n<li>Using textures: I want to be using <code>MPS[Temporary]Image</code> to represent tensors. One of the biggest use cases that is going to benefit from Metal is a model that works on individual frames of a video (batch size of 1). I am inclined towards supporting that use case well. So the limitation on the number of textures won't be too bad.</li>\n<li>Memory management: Since the Metal framework manages the underlying memory of a <code>MPSTemporaryImage</code> pretty efficiently, I didn't think I needed any analysis (I may be wrong). Effectively, I declare one <code>MPSTemporaryImage</code> per tensor in the graph and set its <code>readCount</code> to <code>0</code> as soon as its last consumer is enqueued.</li>\n<li>Double buffering: Yes, the host side cost of spinning up a pipeline and enqueing kernels is pretty significant. I don't have a great answer for this yet.</li>\n</ul>", "body_text": "@ajtulloch Thanks for your detailed comments. It looks like the C2 implementation is further along than what I have, but it would be great to share code if possible. I haven't looked at the C2 implementation in detail yet, but I am thinking about all the points you bring up here. Especially, I am super frustrated by the texture2d/texture2d_array issue too. Here are some thoughts I have on some of your points.\n\nUsing textures: I want to be using MPS[Temporary]Image to represent tensors. One of the biggest use cases that is going to benefit from Metal is a model that works on individual frames of a video (batch size of 1). I am inclined towards supporting that use case well. So the limitation on the number of textures won't be too bad.\nMemory management: Since the Metal framework manages the underlying memory of a MPSTemporaryImage pretty efficiently, I didn't think I needed any analysis (I may be wrong). Effectively, I declare one MPSTemporaryImage per tensor in the graph and set its readCount to 0 as soon as its last consumer is enqueued.\nDouble buffering: Yes, the host side cost of spinning up a pipeline and enqueing kernels is pretty significant. I don't have a great answer for this yet.", "body": "@ajtulloch Thanks for your detailed comments. It looks like the C2 implementation is further along than what I have, but it would be great to share code if possible. I haven't looked at the C2 implementation in detail yet, but I am thinking about all the points you bring up here. Especially, I am super frustrated by the `texture2d/texture2d_array` issue too. Here are some thoughts I have on some of your points.\r\n\r\n- Using textures: I want to be using `MPS[Temporary]Image` to represent tensors. One of the biggest use cases that is going to benefit from Metal is a model that works on individual frames of a video (batch size of 1). I am inclined towards supporting that use case well. So the limitation on the number of textures won't be too bad.\r\n- Memory management: Since the Metal framework manages the underlying memory of a `MPSTemporaryImage` pretty efficiently, I didn't think I needed any analysis (I may be wrong). Effectively, I declare one `MPSTemporaryImage` per tensor in the graph and set its `readCount` to `0` as soon as its last consumer is enqueued.\r\n- Double buffering: Yes, the host side cost of spinning up a pipeline and enqueing kernels is pretty significant. I don't have a great answer for this yet."}