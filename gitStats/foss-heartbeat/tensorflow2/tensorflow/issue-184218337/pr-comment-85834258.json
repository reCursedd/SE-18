{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85834258", "pull_request_review_id": 6524578, "id": 85834258, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1ODM0MjU4", "diff_hunk": "@@ -0,0 +1,78 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.client import session\n+\n+def register_session_fetch_feed_conversion_functions(tensor_type,\n+    fetch_function, feed_function=None, feed_function_for_partial_run=None):\n+  \"\"\" Register fetch and feed conversion functions for session.run.\n+  This function is for registering fetch and feed conversion functions for\n+  user defined type which may be passed to session.run as fetch or feed params.\n+\n+  An example\n+\n+  class SquaredTensor(object):\n+    def __init__(self, tensor):\n+      self.sq = tf.square(tensor)\n+\n+  you can define conversion functions like that:\n+\n+  fetch_function = lambda squared_tensor:([squared_tensor.sq],\n+                                          lambda val: val[0])\n+  feed_function = lambda feed, feed_val: [(feed.sq, feed_val)]\n+  feed_function_for_partial_run = lambda feed: [feed.sq]\n+\n+  then after invoke this register function, you can use like that:\n+\n+  session.run(squared_tensor1, feed_dict = {squared_tensor2 : some_numpy_array}\n+\n+  Args:\n+    tensor_type: a type that you want to register conversion functions.\n+    fetch_function: a function or lambda expression that takes user defined\n+      type object as input, and returns a tuple\n+      (list_of_tensors,  contraction_function), list_of_tensors is a list\n+      contains all tensors that should be passed to fetch in the object,\n+      contraction_function is a function or lambda expression that takes a list\n+      of result corresponding to the list_of_tensors as input, and returns\n+      the result as whatever type or structure you defined in this function.", "path": "tensorflow/contrib/client/python/framework/session_run.py", "position": null, "original_position": 54, "commit_id": "5c1e9cda5bc7d7fcfd57890fe2938bf5d87e909a", "original_commit_id": "d2148dfc62e8bfa0a498ab0ee177c752c6085b63", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "fetch_function: A callable that takes an object of type `tensor_type` and returns a tuple, where the first element is a list of `tf.Tensor` objects, and the second element is a callable that takes a list of ndarrays and returns an object of some value type that corresponds to `tensor_type`. \n", "created_at": "2016-10-31T21:12:38Z", "updated_at": "2016-11-08T06:09:42Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5094#discussion_r85834258", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5094", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85834258"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5094#discussion_r85834258"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5094"}}, "body_html": "<p>fetch_function: A callable that takes an object of type <code>tensor_type</code> and returns a tuple, where the first element is a list of <code>tf.Tensor</code> objects, and the second element is a callable that takes a list of ndarrays and returns an object of some value type that corresponds to <code>tensor_type</code>.</p>", "body_text": "fetch_function: A callable that takes an object of type tensor_type and returns a tuple, where the first element is a list of tf.Tensor objects, and the second element is a callable that takes a list of ndarrays and returns an object of some value type that corresponds to tensor_type."}