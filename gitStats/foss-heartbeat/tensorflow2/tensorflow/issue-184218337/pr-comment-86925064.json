{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/86925064", "pull_request_review_id": 7557832, "id": 86925064, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2OTI1MDY0", "diff_hunk": "@@ -121,6 +121,54 @@ def _get_feeds_for_indexed_slices(feed, feed_val):\n      lambda feed: [feed])]\n # pylint: enable=g-long-lambda\n \n+def register_session_run_conversion_functions(tensor_type, fetch_function,\n+    feed_function=None, feed_function_for_partial_run=None):\n+  \"\"\"Register fetch and feed conversion functions for `tf.Session.run()`.\n+\n+  This function registers a triple of conversion functions for fetching and/or\n+  feeding values of user-defined types in a call to tf.Session.run().\n+\n+  An example\n+\n+  ```python\n+     class SquaredTensor(object):\n+       def __init__(self, tensor):\n+         self.sq = tf.square(tensor)\n+     #you can define conversion functions as follows:\n+     fetch_function = lambda squared_tensor:([squared_tensor.sq],\n+                                             lambda val: val[0])\n+     feed_function = lambda feed, feed_val: [(feed.sq, feed_val)]\n+     feed_function_for_partial_run = lambda feed: [feed.sq]\n+     #then after invoking this register function, you can use as follows:\n+     session.run(squared_tensor1,\n+                 feed_dict = {squared_tensor2 : some_numpy_array})\n+  ```\n+\n+  Args:\n+    tensor_type: The type for which you want to register a conversion function.\n+    fetch_function: A callable that takes an object of type `tensor_type` and\n+      returns a tuple, where the first element is a list of `tf.Tensor` objects,\n+      and the second element is a callable that takes a list of ndarrays and\n+      returns an object of some value type that corresponds to `tensor_type`.\n+      fetch_function describes how to expand fetch into its component Tensors\n+      and how to contract the fetched results back into a single return value.\n+    feed_function: A callable that takes feed_key and feed_value as input, and\n+      returns a list of tuples (feed_tensor, feed_val), feed_key must have type\n+      `tensor_type`, and feed_tensor must have type `tf.Tensor`. Each feed\n+      function describes how to unpack a single fed value and map it to feeds\n+      of one or more tensors and their corresponding values.\n+    feed_function_for_partial_run: A callable for specifying tensor values to\n+      feed when setting up a partial run, which takes a `tensor_type` type\n+      object as input, and returns a list of Tensors.\n+  \"\"\"\n+  for conversion_function in _REGISTERED_EXPANSIONS:\n+    if conversion_function[0] == tensor_type:", "path": "tensorflow/python/client/session.py", "position": null, "original_position": 45, "commit_id": "5c1e9cda5bc7d7fcfd57890fe2938bf5d87e909a", "original_commit_id": "e4d582907e94b5606a632aab7a552947238c0492", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "Instead of comparing the types for equality, use `issubclass(conversion_function[0], tensor_type)` to prevent the caller from overriding an existing function.\n", "created_at": "2016-11-08T05:17:59Z", "updated_at": "2016-11-08T06:09:42Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5094#discussion_r86925064", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5094", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/86925064"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5094#discussion_r86925064"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5094"}}, "body_html": "<p>Instead of comparing the types for equality, use <code>issubclass(conversion_function[0], tensor_type)</code> to prevent the caller from overriding an existing function.</p>", "body_text": "Instead of comparing the types for equality, use issubclass(conversion_function[0], tensor_type) to prevent the caller from overriding an existing function."}