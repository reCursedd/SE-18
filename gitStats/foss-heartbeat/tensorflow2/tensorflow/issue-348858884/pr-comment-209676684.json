{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/209676684", "pull_request_review_id": 145734061, "id": 209676684, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY3NjY4NA==", "diff_hunk": "@@ -324,13 +393,69 @@ def _Add_sync_queues_and_barrier(enqueue_after_list):\n       init_ops.append(state_ops.assign(lc_var, gc_var))\n \n     init_op = control_flow_ops.group(*(init_ops))\n+    if self._sync_flag == False:\n+      return init_op\n+\n     sync_queue_op = _Add_sync_queues_and_barrier([init_op])\n     return sync_queue_op\n \n   def make_session_run_hook(self, is_chief, task_index):\n     \"\"\"Creates a hook to handle ElasticAverageOptimizerHook ops such as initialization.\"\"\"\n     return _ElasticAverageOptimizerHook(self, is_chief, task_index)\n \n+  def swapping_saver(self, var_list=None, name='swapping_saver', **kwargs):\n+    \"\"\"Create a saver copy global_center_variable to trainable variables\n+    Please call this function after all your variables created with EACustomGetter.\n+    For evaluations or inference, use this saver during training.  It will save the\n+    global_center_variable of the trained parameters under the original parameter names.\n+    Args:\n+      var_list: List of variables to save, as per `Saver()`.\n+                If set to None, will save all the trainable_variables that have been\n+                created before this call.\n+      name: The name of the saver.\n+      **kwargs: Keyword arguments of `Saver()`.\n+    Returns:\n+      A `tf.train.Saver` object.\n+    Raises:\n+      RuntimeError: global_center_variable is empty, please make sure\n+                    this is called after model created and\n+                    EACustomGetter is used when declaring you model\n+    \"\"\"\n+    if not self._global_map:\n+      raise RuntimeError('global_center_variable is empty, please make sure '\n+                         'this is called after model created and '\n+                         'ElasticAverageCustomGetter is used when declaring you model')\n+\n+    if var_list is None:\n+      var_list = variables.trainable_variables()\n+    if not isinstance(var_list, dict):\n+      var_list = saver.BaseSaverBuilder.OpListToDict(var_list)\n+\n+    swapped_var_list = {}\n+    has_global_step = False\n+    for key, var in var_list.items():\n+      tensor = var\n+      if False == has_global_step\\\n+          and GLOBAL_STEP in key.split('/'):\n+        has_global_step = True\n+\n+      if isinstance(var, list) == False:", "path": "tensorflow/contrib/opt/python/training/elastic_average_optimizer.py", "position": null, "original_position": 249, "commit_id": "7d9a839a26b7b801ffc53eff59688672021d6a43", "original_commit_id": "167487ebf7e50e13779fb344038b2002056e9b81", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "body": "\"if not isinstance(..\"", "created_at": "2018-08-13T16:33:46Z", "updated_at": "2018-08-16T18:44:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21486#discussion_r209676684", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21486", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/209676684"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21486#discussion_r209676684"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21486"}}, "body_html": "<p>\"if not isinstance(..\"</p>", "body_text": "\"if not isinstance(..\""}