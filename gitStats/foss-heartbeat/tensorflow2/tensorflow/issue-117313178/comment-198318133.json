{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/198318133", "html_url": "https://github.com/tensorflow/tensorflow/issues/254#issuecomment-198318133", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/254", "id": 198318133, "node_id": "MDEyOklzc3VlQ29tbWVudDE5ODMxODEzMw==", "user": {"login": "danbri", "id": 170265, "node_id": "MDQ6VXNlcjE3MDI2NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/170265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danbri", "html_url": "https://github.com/danbri", "followers_url": "https://api.github.com/users/danbri/followers", "following_url": "https://api.github.com/users/danbri/following{/other_user}", "gists_url": "https://api.github.com/users/danbri/gists{/gist_id}", "starred_url": "https://api.github.com/users/danbri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danbri/subscriptions", "organizations_url": "https://api.github.com/users/danbri/orgs", "repos_url": "https://api.github.com/users/danbri/repos", "events_url": "https://api.github.com/users/danbri/events{/privacy}", "received_events_url": "https://api.github.com/users/danbri/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-18T11:36:11Z", "updated_at": "2016-03-18T11:36:11Z", "author_association": "NONE", "body_html": "<p>All I had time to try so far was default output of raspiutil via the Python wrapper code. I started trying to build the C++ but didn't finish yet. For realtime camera access (staying within python) I believe <a href=\"http://picamera.readthedocs.org/en/latest/api_camera.html\" rel=\"nofollow\">http://picamera.readthedocs.org/en/latest/api_camera.html</a> would be the way to go. The camera needs some warmup time to judge light balance, I read.  And I didn't break down the python timings yet either into setup vs inference. Anyway:</p>\n<p>tensorflow/tensorflow/models/image/imagenet $</p>\n<p>time raspistill  --timeout 3 --nopreview -o ~/Desktop/headless.jpg</p>\n<p>real    0m0.765s<br>\nuser    0m0.010s<br>\nsys 0m0.030s</p>\n<p>time python classify_image.py --model_dir $HOME/imagenet/ --image_file ~/Desktop/headless.jpg --num_top_predictions 5 2&gt;/dev/null<br>\nhourglass (score = 0.47746)<br>\nlampshade, lamp shade (score = 0.19448)<br>\ntable lamp (score = 0.06217)<br>\nfour-poster (score = 0.01556)<br>\nwall clock (score = 0.00718)</p>\n<p>real    0m33.291s<br>\nuser    0m53.120s<br>\nsys 0m2.420s</p>\n<p>file ~/Desktop/headless.jpg<br>\n/home/pi/Desktop/headless.jpg: JPEG image data, Exif standard: [TIFF image data, big-endian, direntries=10, height=0, manufacturer=RaspberryPi, model=RP_OV5647, xresolution=156, yresolution=164, resolutionunit=2, datetime=2016:03:18 11:22:43, width=0], baseline, precision 8, 2592x1944, frames 3</p>\n<p>FWIW here's the picture <a href=\"http://imgur.com/UbsYZYC\" rel=\"nofollow\">http://imgur.com/UbsYZYC</a> (upside down and truncated salt/pepperpots, so 'hourglass' was close ;)</p>\n<p>I'm also curious about the Python wrapper being slower than plain C++ since I thought Python offloaded all TF's heavy lifting to compiled code anyway. Is it possible it's running a different build of the TF core in one case?</p>", "body_text": "All I had time to try so far was default output of raspiutil via the Python wrapper code. I started trying to build the C++ but didn't finish yet. For realtime camera access (staying within python) I believe http://picamera.readthedocs.org/en/latest/api_camera.html would be the way to go. The camera needs some warmup time to judge light balance, I read.  And I didn't break down the python timings yet either into setup vs inference. Anyway:\ntensorflow/tensorflow/models/image/imagenet $\ntime raspistill  --timeout 3 --nopreview -o ~/Desktop/headless.jpg\nreal    0m0.765s\nuser    0m0.010s\nsys 0m0.030s\ntime python classify_image.py --model_dir $HOME/imagenet/ --image_file ~/Desktop/headless.jpg --num_top_predictions 5 2>/dev/null\nhourglass (score = 0.47746)\nlampshade, lamp shade (score = 0.19448)\ntable lamp (score = 0.06217)\nfour-poster (score = 0.01556)\nwall clock (score = 0.00718)\nreal    0m33.291s\nuser    0m53.120s\nsys 0m2.420s\nfile ~/Desktop/headless.jpg\n/home/pi/Desktop/headless.jpg: JPEG image data, Exif standard: [TIFF image data, big-endian, direntries=10, height=0, manufacturer=RaspberryPi, model=RP_OV5647, xresolution=156, yresolution=164, resolutionunit=2, datetime=2016:03:18 11:22:43, width=0], baseline, precision 8, 2592x1944, frames 3\nFWIW here's the picture http://imgur.com/UbsYZYC (upside down and truncated salt/pepperpots, so 'hourglass' was close ;)\nI'm also curious about the Python wrapper being slower than plain C++ since I thought Python offloaded all TF's heavy lifting to compiled code anyway. Is it possible it's running a different build of the TF core in one case?", "body": "All I had time to try so far was default output of raspiutil via the Python wrapper code. I started trying to build the C++ but didn't finish yet. For realtime camera access (staying within python) I believe http://picamera.readthedocs.org/en/latest/api_camera.html would be the way to go. The camera needs some warmup time to judge light balance, I read.  And I didn't break down the python timings yet either into setup vs inference. Anyway:\n\ntensorflow/tensorflow/models/image/imagenet $ \n\ntime raspistill  --timeout 3 --nopreview -o ~/Desktop/headless.jpg\n\nreal    0m0.765s\nuser    0m0.010s\nsys 0m0.030s\n\ntime python classify_image.py --model_dir $HOME/imagenet/ --image_file ~/Desktop/headless.jpg --num_top_predictions 5 2>/dev/null \nhourglass (score = 0.47746)\nlampshade, lamp shade (score = 0.19448)\ntable lamp (score = 0.06217)\nfour-poster (score = 0.01556)\nwall clock (score = 0.00718)\n\nreal    0m33.291s\nuser    0m53.120s\nsys 0m2.420s\n\nfile ~/Desktop/headless.jpg \n/home/pi/Desktop/headless.jpg: JPEG image data, Exif standard: [TIFF image data, big-endian, direntries=10, height=0, manufacturer=RaspberryPi, model=RP_OV5647, xresolution=156, yresolution=164, resolutionunit=2, datetime=2016:03:18 11:22:43, width=0], baseline, precision 8, 2592x1944, frames 3\n\nFWIW here's the picture http://imgur.com/UbsYZYC (upside down and truncated salt/pepperpots, so 'hourglass' was close ;)\n\nI'm also curious about the Python wrapper being slower than plain C++ since I thought Python offloaded all TF's heavy lifting to compiled code anyway. Is it possible it's running a different build of the TF core in one case?\n"}