{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349669446", "html_url": "https://github.com/tensorflow/tensorflow/issues/15122#issuecomment-349669446", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15122", "id": 349669446, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTY2OTQ0Ng==", "user": {"login": "andrehentz", "id": 25754898, "node_id": "MDQ6VXNlcjI1NzU0ODk4", "avatar_url": "https://avatars3.githubusercontent.com/u/25754898?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrehentz", "html_url": "https://github.com/andrehentz", "followers_url": "https://api.github.com/users/andrehentz/followers", "following_url": "https://api.github.com/users/andrehentz/following{/other_user}", "gists_url": "https://api.github.com/users/andrehentz/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrehentz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrehentz/subscriptions", "organizations_url": "https://api.github.com/users/andrehentz/orgs", "repos_url": "https://api.github.com/users/andrehentz/repos", "events_url": "https://api.github.com/users/andrehentz/events{/privacy}", "received_events_url": "https://api.github.com/users/andrehentz/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-06T15:14:48Z", "updated_at": "2017-12-06T15:14:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Retraining  mobilenet_1.0_224_quantized is something we are still working on and we hope to update our docs and code soon.</p>\n<p>Meanwhile, I have to suboptimal workarounds for you:</p>\n<ol>\n<li>\n<p>Change the demo app to work with floating-point numbers (it requires changes <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/java/demo/app/src/main/java/com/example/android/tflitecamerademo/ImageClassifier.java#L75\">here</a> and <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/java/demo/app/src/main/java/com/example/android/tflitecamerademo/ImageClassifier.java#L157\">here</a> at least)</p>\n</li>\n<li>\n<p>Use \"approximate\" quantization when converting with toco:</p>\n</li>\n</ol>\n<pre><code>python tensorflow/examples/image_retraining/retrain.py \\\n  --image_dir /home/ubuntu/flower_photos \\\n  --architecture mobilenet_1.0_224\n\nbazel-bin/tensorflow/contrib/lite/toco/toco \\\n  --input_format=TENSORFLOW_GRAPHDEF \\\n  --input_file=/tmp/output_graph.pb \\\n  --output_format=TFLITE \\\n  --output_file=/tmp/mobilenet_v1_1.0_224.lite \\\n  --inference_type=QUANTIZED_UINT8 \\\n  --inference_input_type=QUANTIZED_UINT8 \\\n  --input_arrays=input \\\n  --output_arrays=final_result \\\n  --input_shapes=1,224,224,3\\\n  --mean_values=128 \\\n  --std_values=128 \\\n  --default_ranges_min=0 \\\n  --default_ranges_max=6\n</code></pre>", "body_text": "Retraining  mobilenet_1.0_224_quantized is something we are still working on and we hope to update our docs and code soon.\nMeanwhile, I have to suboptimal workarounds for you:\n\n\nChange the demo app to work with floating-point numbers (it requires changes here and here at least)\n\n\nUse \"approximate\" quantization when converting with toco:\n\n\npython tensorflow/examples/image_retraining/retrain.py \\\n  --image_dir /home/ubuntu/flower_photos \\\n  --architecture mobilenet_1.0_224\n\nbazel-bin/tensorflow/contrib/lite/toco/toco \\\n  --input_format=TENSORFLOW_GRAPHDEF \\\n  --input_file=/tmp/output_graph.pb \\\n  --output_format=TFLITE \\\n  --output_file=/tmp/mobilenet_v1_1.0_224.lite \\\n  --inference_type=QUANTIZED_UINT8 \\\n  --inference_input_type=QUANTIZED_UINT8 \\\n  --input_arrays=input \\\n  --output_arrays=final_result \\\n  --input_shapes=1,224,224,3\\\n  --mean_values=128 \\\n  --std_values=128 \\\n  --default_ranges_min=0 \\\n  --default_ranges_max=6", "body": "Retraining  mobilenet_1.0_224_quantized is something we are still working on and we hope to update our docs and code soon.\r\n\r\nMeanwhile, I have to suboptimal workarounds for you:\r\n  1) Change the demo app to work with floating-point numbers (it requires changes [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/java/demo/app/src/main/java/com/example/android/tflitecamerademo/ImageClassifier.java#L75) and [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/java/demo/app/src/main/java/com/example/android/tflitecamerademo/ImageClassifier.java#L157) at least)\r\n\r\n  2) Use \"approximate\" quantization when converting with toco:\r\n```\r\npython tensorflow/examples/image_retraining/retrain.py \\\r\n  --image_dir /home/ubuntu/flower_photos \\\r\n  --architecture mobilenet_1.0_224\r\n\r\nbazel-bin/tensorflow/contrib/lite/toco/toco \\\r\n  --input_format=TENSORFLOW_GRAPHDEF \\\r\n  --input_file=/tmp/output_graph.pb \\\r\n  --output_format=TFLITE \\\r\n  --output_file=/tmp/mobilenet_v1_1.0_224.lite \\\r\n  --inference_type=QUANTIZED_UINT8 \\\r\n  --inference_input_type=QUANTIZED_UINT8 \\\r\n  --input_arrays=input \\\r\n  --output_arrays=final_result \\\r\n  --input_shapes=1,224,224,3\\\r\n  --mean_values=128 \\\r\n  --std_values=128 \\\r\n  --default_ranges_min=0 \\\r\n  --default_ranges_max=6\r\n```\r\n"}