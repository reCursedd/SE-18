{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/301206334", "html_url": "https://github.com/tensorflow/tensorflow/issues/9861#issuecomment-301206334", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9861", "id": 301206334, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTIwNjMzNA==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-12T23:17:13Z", "updated_at": "2017-05-12T23:30:47Z", "author_association": "MEMBER", "body_html": "<p>Ops defined in <code>contrib</code> are built as shared libraries which need to be loaded into the address space before they are used. Currently, this load happens when the corresponding Python module is imported. Unfortunately, no other piece of code knows where to find the shared libraries for ops found in the graph.</p>\n<p>As a workaround for now, add:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tensorflow.contrib.layers.python <span class=\"pl-k\">import</span> ops</pre></div>\n<p>to your program before invoking <code>tf.saved_model.loader.load</code> (which triggers a <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/contrib/layers/python/ops/sparse_feature_cross_op.py#L30\">load library call</a>), so something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.contrib.layers.python <span class=\"pl-k\">import</span> ops\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> session:\n    model <span class=\"pl-k\">=</span> tf.saved_model.loader.load(session, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>serve<span class=\"pl-pds\">'</span></span>], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>simple-cross/export/1494601566/<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>FWIW, you can see all the custom op libraries installed with the pip package using something like:</p>\n<div class=\"highlight highlight-source-shell\"><pre>find <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>dirname <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>python -c <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>import tensorflow; print tensorflow.__file__<span class=\"pl-pds\">\"</span></span><span class=\"pl-pds\">)</span></span><span class=\"pl-pds\">)</span></span> -name <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>*.so<span class=\"pl-pds\">\"</span></span></pre></div>\n<p>Unfortunately, loading custom op libraries from within Java or other language bindings is not working at the moment, primarily because the way custom op libraries are built right now requires the use of <code>RTLD_GLOBAL</code> when loading them. We <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/python/pywrap_tensorflow.py#L31\">hack this up in Python right now</a>.</p>\n<p>A believe a more correct solution would be to have the custom op libraries explicitly depend on the framework shared library and not rely on <code>RTLD_GLOBAL</code>, but that is a longer fix (FYI <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a>)</p>\n<p>In the mean time, possible workarounds for Java will require some source modification and compilation of <code>libtensorflow_jni.so</code>. Options include:</p>\n<ul>\n<li>Changing <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/core/platform/posix/load_library.cc#L27\"><code>load_library.cc</code></a> to use <code>RTLD_GLOBAL</code> and then initiating a call to <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/c/c_api.h#L1116\"><code>TF_LoadLibrary</code></a> from Java</li>\n<li>Statically linking the ops needed by <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/java/BUILD#L151\">adding explicit dependencies in the BUILD rule</a></li>\n</ul>\n<p>I'm sincerely sorry that things aren't in better shape at this time. Improving support for custom (contrib) ops in other languages is on our TODO list. A related aside, ops needed for the linear model used in wide-and-deep are slowly moving towards core anyway (e.g. commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/65283e269fac1306089303143daf550b7b1a6658/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/65283e269fac1306089303143daf550b7b1a6658\"><tt>65283e2</tt></a>).</p>\n<p>Hope that helps.</p>\n<p>FYI <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=170179\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jhseu\">@jhseu</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88808\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/skye\">@skye</a></p>", "body_text": "Ops defined in contrib are built as shared libraries which need to be loaded into the address space before they are used. Currently, this load happens when the corresponding Python module is imported. Unfortunately, no other piece of code knows where to find the shared libraries for ops found in the graph.\nAs a workaround for now, add:\nfrom tensorflow.contrib.layers.python import ops\nto your program before invoking tf.saved_model.loader.load (which triggers a load library call), so something like:\nimport tensorflow as tf\nfrom tensorflow.contrib.layers.python import ops\nwith tf.Session() as session:\n    model = tf.saved_model.loader.load(session, ['serve'], \"simple-cross/export/1494601566/\")\nFWIW, you can see all the custom op libraries installed with the pip package using something like:\nfind $(dirname $(python -c \"import tensorflow; print tensorflow.__file__\")) -name \"*.so\"\nUnfortunately, loading custom op libraries from within Java or other language bindings is not working at the moment, primarily because the way custom op libraries are built right now requires the use of RTLD_GLOBAL when loading them. We hack this up in Python right now.\nA believe a more correct solution would be to have the custom op libraries explicitly depend on the framework shared library and not rely on RTLD_GLOBAL, but that is a longer fix (FYI @allenlavoie)\nIn the mean time, possible workarounds for Java will require some source modification and compilation of libtensorflow_jni.so. Options include:\n\nChanging load_library.cc to use RTLD_GLOBAL and then initiating a call to TF_LoadLibrary from Java\nStatically linking the ops needed by adding explicit dependencies in the BUILD rule\n\nI'm sincerely sorry that things aren't in better shape at this time. Improving support for custom (contrib) ops in other languages is on our TODO list. A related aside, ops needed for the linear model used in wide-and-deep are slowly moving towards core anyway (e.g. commit 65283e2).\nHope that helps.\nFYI @allenlavoie @jhseu @skye", "body": "Ops defined in `contrib` are built as shared libraries which need to be loaded into the address space before they are used. Currently, this load happens when the corresponding Python module is imported. Unfortunately, no other piece of code knows where to find the shared libraries for ops found in the graph.\r\n\r\nAs a workaround for now, add:\r\n\r\n```python\r\nfrom tensorflow.contrib.layers.python import ops\r\n```\r\n\r\nto your program before invoking `tf.saved_model.loader.load` (which triggers a [load library call](https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/contrib/layers/python/ops/sparse_feature_cross_op.py#L30)), so something like:\r\n\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.layers.python import ops\r\nwith tf.Session() as session:\r\n    model = tf.saved_model.loader.load(session, ['serve'], \"simple-cross/export/1494601566/\")\r\n```\r\n\r\nFWIW, you can see all the custom op libraries installed with the pip package using something like:\r\n\r\n```sh\r\nfind $(dirname $(python -c \"import tensorflow; print tensorflow.__file__\")) -name \"*.so\"\r\n```\r\n\r\nUnfortunately, loading custom op libraries from within Java or other language bindings is not working at the moment, primarily because the way custom op libraries are built right now requires the use of `RTLD_GLOBAL` when loading them. We [hack this up in Python right now](https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/python/pywrap_tensorflow.py#L31).\r\n\r\nA believe a more correct solution would be to have the custom op libraries explicitly depend on the framework shared library and not rely on `RTLD_GLOBAL`, but that is a longer fix (FYI @allenlavoie)\r\n\r\nIn the mean time, possible workarounds for Java will require some source modification and compilation of `libtensorflow_jni.so`. Options include:\r\n\r\n- Changing [`load_library.cc`](https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/core/platform/posix/load_library.cc#L27) to use `RTLD_GLOBAL` and then initiating a call to [`TF_LoadLibrary`](https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/c/c_api.h#L1116) from Java\r\n- Statically linking the ops needed by [adding explicit dependencies in the BUILD rule](https://github.com/tensorflow/tensorflow/blob/r1.1/tensorflow/java/BUILD#L151)\r\n\r\nI'm sincerely sorry that things aren't in better shape at this time. Improving support for custom (contrib) ops in other languages is on our TODO list. A related aside, ops needed for the linear model used in wide-and-deep are slowly moving towards core anyway (e.g. commit 65283e269fac1306089303143daf550b7b1a6658). \r\n\r\nHope that helps.\r\n\r\nFYI @allenlavoie @jhseu @skye"}