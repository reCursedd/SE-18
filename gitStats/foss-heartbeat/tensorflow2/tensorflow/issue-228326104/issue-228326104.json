{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9861", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9861/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9861/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9861/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9861", "id": 228326104, "node_id": "MDU6SXNzdWUyMjgzMjYxMDQ=", "number": 9861, "title": "Exporting and loading models with crossed_columns gives errors", "user": {"login": "jan-apptornado", "id": 6253344, "node_id": "MDQ6VXNlcjYyNTMzNDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6253344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jan-apptornado", "html_url": "https://github.com/jan-apptornado", "followers_url": "https://api.github.com/users/jan-apptornado/followers", "following_url": "https://api.github.com/users/jan-apptornado/following{/other_user}", "gists_url": "https://api.github.com/users/jan-apptornado/gists{/gist_id}", "starred_url": "https://api.github.com/users/jan-apptornado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jan-apptornado/subscriptions", "organizations_url": "https://api.github.com/users/jan-apptornado/orgs", "repos_url": "https://api.github.com/users/jan-apptornado/repos", "events_url": "https://api.github.com/users/jan-apptornado/events{/privacy}", "received_events_url": "https://api.github.com/users/jan-apptornado/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-05-12T15:24:37Z", "updated_at": "2017-08-29T16:30:16Z", "closed_at": "2017-06-16T22:41:39Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nyes, see below</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.1.0</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I trained a <code>LinearClassifier</code> that includes a <code>crossed_column</code>. When I export it and then load and run it again I get an error message: \"ValueError: No op named SparseFeatureCross in defined operations\".</p>\n<h3>Source code / logs</h3>\n<p>To train and export the model I used the following python script:</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\n\ndef input_fn():\n    features = {'a': tf.constant([[1],[2]]),\n                'b': tf.constant([[3],[4]]) }\n    labels = tf.constant([0, 1])\n    return features, labels\n\nfeature_a = tf.contrib.layers.sparse_column_with_integerized_feature(\"a\", bucket_size=10)\nfeature_b = tf.contrib.layers.sparse_column_with_integerized_feature(\"b\", bucket_size=10)\nfeature_c = tf.contrib.layers.crossed_column([feature_a, feature_b], hash_bucket_size=100)\nfeature_columns = [feature_a, feature_b, feature_c]\nmodel = tf.contrib.learn.LinearClassifier(feature_columns=feature_columns)\nmodel.fit(input_fn=input_fn, steps=10)\n\nfeature_spec = tf.contrib.layers.create_feature_spec_for_parsing(feature_columns)\nserving_input_fn = input_fn_utils.build_parsing_serving_input_fn(feature_spec)\nmodel.export_savedmodel('simple-cross/export', serving_input_fn)\n</code></pre>\n<p>To load and run the model I used the following python script:</p>\n<pre><code>import tensorflow as tf\n\ndef _int_feature(value):\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\nwith tf.Session() as session:\n    model = tf.saved_model.loader.load(session, ['serve'], \"simple-cross/export/1494601566/\")\n    probs = tf.get_default_graph().get_tensor_by_name('linear/binary_logistic_head/predictions/probabilities:0')\n\n    feature_dict = {'a': _int_feature(value=0),\n                    'b': _int_feature(value=5)}\n    example = tf.train.Example(features=tf.train.Features(feature=feature_dict)).SerializeToString()\n    feed_dict = { 'input_example_tensor:0' : [example] }\n    print(session.run(probs, feed_dict=feed_dict))\n</code></pre>\n<p>(BTW: is this the best way to import/run a saved model? It feels like plugging in constants like <code>linear/binary_logistic_head/predictions/probabilities:0</code> isn't the way to go.)</p>\n<p>This results in the following error:</p>\n<pre><code>ValueError: No op named SparseFeatureCross in defined operations.\n</code></pre>\n<h3>Notes</h3>\n<p>When I add the import</p>\n<pre><code>from tensorflow.contrib.learn.python.learn.utils import input_fn_utils\n</code></pre>\n<p>to the load/run script, it magically works.</p>\n<p>Unfortunately, I like to run the model from Java as well, and in Java there is no analogous workaround AFAIK (input_fn_utils doesn't exist there).</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nyes, see below\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nubuntu 16.04\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\n1.1.0\n\nDescribe the problem\nI trained a LinearClassifier that includes a crossed_column. When I export it and then load and run it again I get an error message: \"ValueError: No op named SparseFeatureCross in defined operations\".\nSource code / logs\nTo train and export the model I used the following python script:\nimport tensorflow as tf\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\n\ndef input_fn():\n    features = {'a': tf.constant([[1],[2]]),\n                'b': tf.constant([[3],[4]]) }\n    labels = tf.constant([0, 1])\n    return features, labels\n\nfeature_a = tf.contrib.layers.sparse_column_with_integerized_feature(\"a\", bucket_size=10)\nfeature_b = tf.contrib.layers.sparse_column_with_integerized_feature(\"b\", bucket_size=10)\nfeature_c = tf.contrib.layers.crossed_column([feature_a, feature_b], hash_bucket_size=100)\nfeature_columns = [feature_a, feature_b, feature_c]\nmodel = tf.contrib.learn.LinearClassifier(feature_columns=feature_columns)\nmodel.fit(input_fn=input_fn, steps=10)\n\nfeature_spec = tf.contrib.layers.create_feature_spec_for_parsing(feature_columns)\nserving_input_fn = input_fn_utils.build_parsing_serving_input_fn(feature_spec)\nmodel.export_savedmodel('simple-cross/export', serving_input_fn)\n\nTo load and run the model I used the following python script:\nimport tensorflow as tf\n\ndef _int_feature(value):\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\nwith tf.Session() as session:\n    model = tf.saved_model.loader.load(session, ['serve'], \"simple-cross/export/1494601566/\")\n    probs = tf.get_default_graph().get_tensor_by_name('linear/binary_logistic_head/predictions/probabilities:0')\n\n    feature_dict = {'a': _int_feature(value=0),\n                    'b': _int_feature(value=5)}\n    example = tf.train.Example(features=tf.train.Features(feature=feature_dict)).SerializeToString()\n    feed_dict = { 'input_example_tensor:0' : [example] }\n    print(session.run(probs, feed_dict=feed_dict))\n\n(BTW: is this the best way to import/run a saved model? It feels like plugging in constants like linear/binary_logistic_head/predictions/probabilities:0 isn't the way to go.)\nThis results in the following error:\nValueError: No op named SparseFeatureCross in defined operations.\n\nNotes\nWhen I add the import\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\n\nto the load/run script, it magically works.\nUnfortunately, I like to run the model from Java as well, and in Java there is no analogous workaround AFAIK (input_fn_utils doesn't exist there).", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nyes, see below\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\n1.1.0\r\n\r\n### Describe the problem\r\nI trained a `LinearClassifier` that includes a `crossed_column`. When I export it and then load and run it again I get an error message: \"ValueError: No op named SparseFeatureCross in defined operations\".\r\n\r\n### Source code / logs\r\nTo train and export the model I used the following python script:\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\r\n\r\ndef input_fn():\r\n    features = {'a': tf.constant([[1],[2]]),\r\n                'b': tf.constant([[3],[4]]) }\r\n    labels = tf.constant([0, 1])\r\n    return features, labels\r\n\r\nfeature_a = tf.contrib.layers.sparse_column_with_integerized_feature(\"a\", bucket_size=10)\r\nfeature_b = tf.contrib.layers.sparse_column_with_integerized_feature(\"b\", bucket_size=10)\r\nfeature_c = tf.contrib.layers.crossed_column([feature_a, feature_b], hash_bucket_size=100)\r\nfeature_columns = [feature_a, feature_b, feature_c]\r\nmodel = tf.contrib.learn.LinearClassifier(feature_columns=feature_columns)\r\nmodel.fit(input_fn=input_fn, steps=10)\r\n\r\nfeature_spec = tf.contrib.layers.create_feature_spec_for_parsing(feature_columns)\r\nserving_input_fn = input_fn_utils.build_parsing_serving_input_fn(feature_spec)\r\nmodel.export_savedmodel('simple-cross/export', serving_input_fn)\r\n```\r\nTo load and run the model I used the following python script:\r\n```\r\nimport tensorflow as tf\r\n\r\ndef _int_feature(value):\r\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\r\n\r\nwith tf.Session() as session:\r\n    model = tf.saved_model.loader.load(session, ['serve'], \"simple-cross/export/1494601566/\")\r\n    probs = tf.get_default_graph().get_tensor_by_name('linear/binary_logistic_head/predictions/probabilities:0')\r\n\r\n    feature_dict = {'a': _int_feature(value=0),\r\n                    'b': _int_feature(value=5)}\r\n    example = tf.train.Example(features=tf.train.Features(feature=feature_dict)).SerializeToString()\r\n    feed_dict = { 'input_example_tensor:0' : [example] }\r\n    print(session.run(probs, feed_dict=feed_dict))\r\n```\r\n(BTW: is this the best way to import/run a saved model? It feels like plugging in constants like `linear/binary_logistic_head/predictions/probabilities:0` isn't the way to go.)\r\n\r\nThis results in the following error:\r\n```\r\nValueError: No op named SparseFeatureCross in defined operations.\r\n```\r\n### Notes\r\nWhen I add the import\r\n```\r\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\r\n```\r\nto the load/run script, it magically works.\r\n\r\nUnfortunately, I like to run the model from Java as well, and in Java there is no analogous workaround AFAIK (input_fn_utils doesn't exist there).\r\n"}