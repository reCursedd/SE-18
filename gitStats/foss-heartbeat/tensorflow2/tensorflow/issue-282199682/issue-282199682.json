{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15369", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15369/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15369/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15369/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15369", "id": 282199682, "node_id": "MDU6SXNzdWUyODIxOTk2ODI=", "number": 15369, "title": "CMake OBJECT library Xcode problems", "user": {"login": "headupinclouds", "id": 554720, "node_id": "MDQ6VXNlcjU1NDcyMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/554720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/headupinclouds", "html_url": "https://github.com/headupinclouds", "followers_url": "https://api.github.com/users/headupinclouds/followers", "following_url": "https://api.github.com/users/headupinclouds/following{/other_user}", "gists_url": "https://api.github.com/users/headupinclouds/gists{/gist_id}", "starred_url": "https://api.github.com/users/headupinclouds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/headupinclouds/subscriptions", "organizations_url": "https://api.github.com/users/headupinclouds/orgs", "repos_url": "https://api.github.com/users/headupinclouds/repos", "events_url": "https://api.github.com/users/headupinclouds/events{/privacy}", "received_events_url": "https://api.github.com/users/headupinclouds/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}, {"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-14T18:40:17Z", "updated_at": "2018-02-07T18:51:55Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: N/A</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: OS X 10.12.2 (Any)</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Source</li>\n<li><strong>TensorFlow version (use command below)</strong>: Master <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=51700\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Head\">@Head</a></li>\n<li><strong>Python version</strong>: N/A</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A (CMake)</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: Xcode 8.3.3 (Any)</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: <code>cmake -GXcode ...</code></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>CMake's OBJECT libraries don't play well with Xcode generators.  In particular, there is an incompatibility (effectively a bug) that prevents an object library from containing multiple files with the same base filename (\"stem\"), i.e.</p>\n<ul>\n<li>tensorflow//core/platform/env_time.cc</li>\n<li>tensorflow//core/platform/posix/env_time.cc</li>\n</ul>\n<p>This pattern occurs in quite a few places in the tensorflow source code (and is otherwise perfectly reasonable).  For reference, here is a minimal sample project that directly reproduces a test case originally shared in a <a href=\"http://cmake.3232098.n2.nabble.com/OBJECT-Libraries-with-Xcode-Generator-td7593197.html\" rel=\"nofollow\">post by Matthew Wheeler</a> on the CMake mailing list:</p>\n<p><a href=\"https://github.com/headupinclouds/cmake_xcode_object_lib\">https://github.com/headupinclouds/cmake_xcode_object_lib</a></p>\n<p>I'd like to help provide a fix for this, but would like some input on the preferred approach prior to implementing anything.  I see a few options:</p>\n<ol>\n<li>identify duplicates manually and add an alias for the offending files in the repository: <code>for i in ${FAILURES}; do echo -e \"#include \\\"$i\\\"\" &gt; ${i%.cc}_fix.cc; done</code> and then update CMake to include those files.  Maybe <code>_fix</code> could be replaced with a more unique directory name.  PRO: Reasonably easy; CON: The problem will likely occur again, <code>#include \"source.cc\"</code> violates some style guides</li>\n<li>iterate through each list of object files in CMake at generate time and identify duplicates automatically, then map each of these files to an alias for the build using something like <code>configure_file(${duplicate_file} ${CMAKE_CURRENT_BINARY_DIR}/${duplicat_file_w_suffix} COPYONLY)</code> (for Xcode only).  PRO: Automatic (future proof); CON: More complicated and users can't apply changes directly in their IDE</li>\n<li>(long term) replace OBJECT libraries with standard libraries (static or shared based on <code>CMAKE_BUILD_SHARED</code>): In addition to the Xcode related bug above, OBJECT libraries have a number of other limitations which make the CMake code more complicated, or rather, standard libraries have a number of benefits that could make the CMake code cleaner.  Perhaps the most significant drawback is that OBJECT libraries can't be used with <code>target_link_libraries()</code>, so we lose the ability to pass along transitive dependency chains and scoped <a href=\"https://cgold.readthedocs.io/en/latest/rejected/object-libraries.html#usage-requirements\" rel=\"nofollow\">usage requirements</a> from  <code>find_package()</code> (future) system dependencies using <code>target_link_libraries()</code>.  This relates to <a href=\"https://github.com/tensorflow/tensorflow/issues/13061\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/13061/hovercard\">Proposal: Making the cmake build distribution friendly</a>, where common system dependencies would be included using <code>find_package()</code> calls and linked directly to the tensorflow submodules: <code>target_link_libraries(tf_core_lib PRIVATE ${tensorflow_EXTERNAL_PACKAGES}) # zlib, etc</code>.  This would also allow most of the manual <code>add_dependencies()</code> calls to be removed.  (Note: I've already added CMake package config installation steps to most of the google repository dependencies in forks, and will try to get this stuff accepted upstream.)</li>\n</ol>\n<p>The last one is broader in scope, so I'm hoping there is an initial workaround based on some variation of (1) or (2) that would be accepted upstream in the near future for CMake + Xcode.  If there is interest in using standard libraries (3), I can help work on putting an initial solution together in a branch for evaluation as a follow up effort.</p>\n<p>I understand CMake status is <a href=\"https://github.com/tensorflow/tensorflow/issues/14014#issuecomment-340344678\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/14014/hovercard\">currently under discussion</a>.  In any event, I'd like to help get tensorflow building through CMake for easy integration with other CMake based projects, including iOS builds, where Xcode is required.  I also appreciate tensorflow is an incredibly complicated piece of SW, and I appreciate the work that has gone in to supporting CMake builds to date.  Thanks!</p>\n<h3>Source code / logs</h3>\n<p>Numerous \"no such file or directory\" errors such as these:</p>\n<pre><code>clang: error: no such file or directory: '/Users/developer/tensorflow/tensorflow/contrib/cmake/_builds/xcode-hid-sections/tensorflow.build/Release/tf_core_lib.build/Objects-normal/x86_64/env.o'\nclang: error: no such file or directory: '/Users/developer/tensorflow/tensorflow/contrib/cmake/_builds/xcode-hid-sections/tensorflow.build/Release/tf_core_lib.build/Objects-normal/x86_64/env_time.o'\nclang: error: no such file or directory: '/Users/developer/tensorflow/tensorflow/contrib/cmake/_builds/xcode-hid-sections/tensorflow.build/Release/tf_core_lib.build/Objects-normal/x86_64/tracing.o\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): N/A\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): OS X 10.12.2 (Any)\nTensorFlow installed from (source or binary): Source\nTensorFlow version (use command below): Master @Head\nPython version: N/A\nBazel version (if compiling from source): N/A (CMake)\nGCC/Compiler version (if compiling from source): Xcode 8.3.3 (Any)\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: cmake -GXcode ...\n\nDescribe the problem\nCMake's OBJECT libraries don't play well with Xcode generators.  In particular, there is an incompatibility (effectively a bug) that prevents an object library from containing multiple files with the same base filename (\"stem\"), i.e.\n\ntensorflow//core/platform/env_time.cc\ntensorflow//core/platform/posix/env_time.cc\n\nThis pattern occurs in quite a few places in the tensorflow source code (and is otherwise perfectly reasonable).  For reference, here is a minimal sample project that directly reproduces a test case originally shared in a post by Matthew Wheeler on the CMake mailing list:\nhttps://github.com/headupinclouds/cmake_xcode_object_lib\nI'd like to help provide a fix for this, but would like some input on the preferred approach prior to implementing anything.  I see a few options:\n\nidentify duplicates manually and add an alias for the offending files in the repository: for i in ${FAILURES}; do echo -e \"#include \\\"$i\\\"\" > ${i%.cc}_fix.cc; done and then update CMake to include those files.  Maybe _fix could be replaced with a more unique directory name.  PRO: Reasonably easy; CON: The problem will likely occur again, #include \"source.cc\" violates some style guides\niterate through each list of object files in CMake at generate time and identify duplicates automatically, then map each of these files to an alias for the build using something like configure_file(${duplicate_file} ${CMAKE_CURRENT_BINARY_DIR}/${duplicat_file_w_suffix} COPYONLY) (for Xcode only).  PRO: Automatic (future proof); CON: More complicated and users can't apply changes directly in their IDE\n(long term) replace OBJECT libraries with standard libraries (static or shared based on CMAKE_BUILD_SHARED): In addition to the Xcode related bug above, OBJECT libraries have a number of other limitations which make the CMake code more complicated, or rather, standard libraries have a number of benefits that could make the CMake code cleaner.  Perhaps the most significant drawback is that OBJECT libraries can't be used with target_link_libraries(), so we lose the ability to pass along transitive dependency chains and scoped usage requirements from  find_package() (future) system dependencies using target_link_libraries().  This relates to Proposal: Making the cmake build distribution friendly, where common system dependencies would be included using find_package() calls and linked directly to the tensorflow submodules: target_link_libraries(tf_core_lib PRIVATE ${tensorflow_EXTERNAL_PACKAGES}) # zlib, etc.  This would also allow most of the manual add_dependencies() calls to be removed.  (Note: I've already added CMake package config installation steps to most of the google repository dependencies in forks, and will try to get this stuff accepted upstream.)\n\nThe last one is broader in scope, so I'm hoping there is an initial workaround based on some variation of (1) or (2) that would be accepted upstream in the near future for CMake + Xcode.  If there is interest in using standard libraries (3), I can help work on putting an initial solution together in a branch for evaluation as a follow up effort.\nI understand CMake status is currently under discussion.  In any event, I'd like to help get tensorflow building through CMake for easy integration with other CMake based projects, including iOS builds, where Xcode is required.  I also appreciate tensorflow is an incredibly complicated piece of SW, and I appreciate the work that has gone in to supporting CMake builds to date.  Thanks!\nSource code / logs\nNumerous \"no such file or directory\" errors such as these:\nclang: error: no such file or directory: '/Users/developer/tensorflow/tensorflow/contrib/cmake/_builds/xcode-hid-sections/tensorflow.build/Release/tf_core_lib.build/Objects-normal/x86_64/env.o'\nclang: error: no such file or directory: '/Users/developer/tensorflow/tensorflow/contrib/cmake/_builds/xcode-hid-sections/tensorflow.build/Release/tf_core_lib.build/Objects-normal/x86_64/env_time.o'\nclang: error: no such file or directory: '/Users/developer/tensorflow/tensorflow/contrib/cmake/_builds/xcode-hid-sections/tensorflow.build/Release/tf_core_lib.build/Objects-normal/x86_64/tracing.o", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: N/A\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: OS X 10.12.2 (Any)\r\n- **TensorFlow installed from (source or binary)**: Source\r\n- **TensorFlow version (use command below)**: Master @HEAD\r\n- **Python version**: N/A\r\n- **Bazel version (if compiling from source)**: N/A (CMake)\r\n- **GCC/Compiler version (if compiling from source)**: Xcode 8.3.3 (Any)\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: `cmake -GXcode ...`\r\n\r\n### Describe the problem\r\n\r\nCMake's OBJECT libraries don't play well with Xcode generators.  In particular, there is an incompatibility (effectively a bug) that prevents an object library from containing multiple files with the same base filename (\"stem\"), i.e.\r\n\r\n* tensorflow//core/platform/env_time.cc\r\n* tensorflow//core/platform/posix/env_time.cc\r\n\r\nThis pattern occurs in quite a few places in the tensorflow source code (and is otherwise perfectly reasonable).  For reference, here is a minimal sample project that directly reproduces a test case originally shared in a [post by Matthew Wheeler](http://cmake.3232098.n2.nabble.com/OBJECT-Libraries-with-Xcode-Generator-td7593197.html) on the CMake mailing list:\r\n\r\nhttps://github.com/headupinclouds/cmake_xcode_object_lib\r\n\r\nI'd like to help provide a fix for this, but would like some input on the preferred approach prior to implementing anything.  I see a few options:\r\n\r\n1. identify duplicates manually and add an alias for the offending files in the repository: `for i in ${FAILURES}; do echo -e \"#include \\\"$i\\\"\" > ${i%.cc}_fix.cc; done` and then update CMake to include those files.  Maybe `_fix` could be replaced with a more unique directory name.  PRO: Reasonably easy; CON: The problem will likely occur again, `#include \"source.cc\"` violates some style guides\r\n2. iterate through each list of object files in CMake at generate time and identify duplicates automatically, then map each of these files to an alias for the build using something like `configure_file(${duplicate_file} ${CMAKE_CURRENT_BINARY_DIR}/${duplicat_file_w_suffix} COPYONLY)` (for Xcode only).  PRO: Automatic (future proof); CON: More complicated and users can't apply changes directly in their IDE \r\n3. (long term) replace OBJECT libraries with standard libraries (static or shared based on `CMAKE_BUILD_SHARED`): In addition to the Xcode related bug above, OBJECT libraries have a number of other limitations which make the CMake code more complicated, or rather, standard libraries have a number of benefits that could make the CMake code cleaner.  Perhaps the most significant drawback is that OBJECT libraries can't be used with `target_link_libraries()`, so we lose the ability to pass along transitive dependency chains and scoped [usage requirements](https://cgold.readthedocs.io/en/latest/rejected/object-libraries.html#usage-requirements) from  `find_package()` (future) system dependencies using `target_link_libraries()`.  This relates to [Proposal: Making the cmake build distribution friendly](https://github.com/tensorflow/tensorflow/issues/13061), where common system dependencies would be included using `find_package()` calls and linked directly to the tensorflow submodules: `target_link_libraries(tf_core_lib PRIVATE ${tensorflow_EXTERNAL_PACKAGES}) # zlib, etc`.  This would also allow most of the manual `add_dependencies()` calls to be removed.  (Note: I've already added CMake package config installation steps to most of the google repository dependencies in forks, and will try to get this stuff accepted upstream.)\r\n\r\nThe last one is broader in scope, so I'm hoping there is an initial workaround based on some variation of (1) or (2) that would be accepted upstream in the near future for CMake + Xcode.  If there is interest in using standard libraries (3), I can help work on putting an initial solution together in a branch for evaluation as a follow up effort.\r\n\r\nI understand CMake status is [currently under discussion](https://github.com/tensorflow/tensorflow/issues/14014#issuecomment-340344678).  In any event, I'd like to help get tensorflow building through CMake for easy integration with other CMake based projects, including iOS builds, where Xcode is required.  I also appreciate tensorflow is an incredibly complicated piece of SW, and I appreciate the work that has gone in to supporting CMake builds to date.  Thanks!\r\n\r\n### Source code / logs\r\n\r\nNumerous \"no such file or directory\" errors such as these:\r\n```\r\nclang: error: no such file or directory: '/Users/developer/tensorflow/tensorflow/contrib/cmake/_builds/xcode-hid-sections/tensorflow.build/Release/tf_core_lib.build/Objects-normal/x86_64/env.o'\r\nclang: error: no such file or directory: '/Users/developer/tensorflow/tensorflow/contrib/cmake/_builds/xcode-hid-sections/tensorflow.build/Release/tf_core_lib.build/Objects-normal/x86_64/env_time.o'\r\nclang: error: no such file or directory: '/Users/developer/tensorflow/tensorflow/contrib/cmake/_builds/xcode-hid-sections/tensorflow.build/Release/tf_core_lib.build/Objects-normal/x86_64/tracing.o\r\n```"}