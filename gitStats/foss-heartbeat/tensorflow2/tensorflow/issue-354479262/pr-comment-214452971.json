{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/214452971", "pull_request_review_id": 151512515, "id": 214452971, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ1Mjk3MQ==", "diff_hunk": "@@ -48,6 +50,120 @@ class MklSubAllocator : public SubAllocator {\n   void Free(void* ptr, size_t num_bytes) override { port::AlignedFree(ptr); }\n };\n \n+/// CPU allocator that handles small-size allocations by calling\n+/// suballocator directly. Mostly, it is just a wrapper around a suballocator\n+/// (that calls malloc and free directly) with support for bookkeeping.\n+class MklSmallSizeAllocator : public VisitableAllocator {\n+ public:\n+  MklSmallSizeAllocator(SubAllocator* sub_allocator, size_t total_memory,\n+                        const string& name) : sub_allocator_(sub_allocator),\n+                        name_(name) {\n+    stats_.bytes_limit = total_memory;\n+  }\n+  ~MklSmallSizeAllocator() override {}\n+\n+  TF_DISALLOW_COPY_AND_ASSIGN(MklSmallSizeAllocator);\n+\n+  inline string Name() override { return name_; }\n+\n+  void* AllocateRaw(size_t alignment, size_t num_bytes) override {\n+    void* ptr = nullptr;\n+    if ((ptr = sub_allocator_->Alloc(alignment, num_bytes)) != nullptr) {\n+      std::pair<void*, size_t> map_val(ptr, num_bytes);\n+      mutex_lock l(mutex_);\n+      // Check that insertion in the hash map was successful.\n+      CHECK_EQ(map_.insert(map_val).second, true);\n+      // Increment statistics for small-size allocations.\n+      IncrementStats(num_bytes);\n+      // Call alloc visitors.\n+      for (const auto& visitor : alloc_visitors_) {\n+        visitor(ptr, num_bytes);\n+      }\n+    }\n+    return ptr;\n+  }\n+\n+  void DeallocateRaw(void* ptr) override {\n+    if (ptr == nullptr) {\n+      LOG(ERROR) << \"tried to deallocate nullptr\";\n+      return;\n+    }\n+\n+    mutex_lock l(mutex_);\n+    auto map_iter = map_.find(ptr);\n+    if (map_iter != map_.end()) {\n+      // Call free visitors.\n+      size_t dealloc_bytes = map_iter->second;\n+      for (const auto& visitor : free_visitors_) {\n+        visitor(ptr, dealloc_bytes);\n+      }\n+      sub_allocator_->Free(ptr, dealloc_bytes);\n+      DecrementStats(dealloc_bytes);\n+      map_.erase(map_iter);\n+    }\n+  }\n+\n+  inline bool IsSmallSizeAllocation(const void* ptr) const {\n+    mutex_lock l(mutex_);\n+    return map_.find(ptr) != map_.end();\n+  }\n+\n+  void GetStats(AllocatorStats* stats) override {\n+    mutex_lock l(mutex_);\n+    *stats = stats_;\n+  }\n+\n+  void ClearStats() override {\n+    mutex_lock l(mutex_);\n+    stats_.Clear();\n+  }\n+\n+  void AddAllocVisitor(Visitor visitor) override {\n+    mutex_lock l(mutex_);\n+    alloc_visitors_.push_back(visitor);\n+  }\n+\n+  void AddFreeVisitor(Visitor visitor) override {\n+    mutex_lock l(mutex_);\n+    free_visitors_.push_back(visitor);\n+  }\n+\n+ private:\n+  /// Increment statistics for the allocator handling small allocations.", "path": "tensorflow/core/common_runtime/mkl_cpu_allocator.h", "position": null, "original_position": 92, "commit_id": "380abf51677b180face81953ddf63676074d4de2", "original_commit_id": "b146281fd7f11325251fb085aca6bda8e2d77bfd", "user": {"login": "penpornk", "id": 38085909, "node_id": "MDQ6VXNlcjM4MDg1OTA5", "avatar_url": "https://avatars3.githubusercontent.com/u/38085909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/penpornk", "html_url": "https://github.com/penpornk", "followers_url": "https://api.github.com/users/penpornk/followers", "following_url": "https://api.github.com/users/penpornk/following{/other_user}", "gists_url": "https://api.github.com/users/penpornk/gists{/gist_id}", "starred_url": "https://api.github.com/users/penpornk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/penpornk/subscriptions", "organizations_url": "https://api.github.com/users/penpornk/orgs", "repos_url": "https://api.github.com/users/penpornk/repos", "events_url": "https://api.github.com/users/penpornk/events{/privacy}", "received_events_url": "https://api.github.com/users/penpornk/received_events", "type": "User", "site_admin": false}, "body": "Please add that this method assumes/requires that `mutex_` is acquired.", "created_at": "2018-08-31T19:23:05Z", "updated_at": "2018-09-06T20:50:32Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21912#discussion_r214452971", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21912", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/214452971"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21912#discussion_r214452971"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21912"}}, "body_html": "<p>Please add that this method assumes/requires that <code>mutex_</code> is acquired.</p>", "body_text": "Please add that this method assumes/requires that mutex_ is acquired."}