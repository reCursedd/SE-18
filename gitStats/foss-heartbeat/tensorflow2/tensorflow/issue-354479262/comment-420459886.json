{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/420459886", "html_url": "https://github.com/tensorflow/tensorflow/pull/21912#issuecomment-420459886", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21912", "id": 420459886, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDQ1OTg4Ng==", "user": {"login": "nhasabni", "id": 22304502, "node_id": "MDQ6VXNlcjIyMzA0NTAy", "avatar_url": "https://avatars0.githubusercontent.com/u/22304502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhasabni", "html_url": "https://github.com/nhasabni", "followers_url": "https://api.github.com/users/nhasabni/followers", "following_url": "https://api.github.com/users/nhasabni/following{/other_user}", "gists_url": "https://api.github.com/users/nhasabni/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhasabni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhasabni/subscriptions", "organizations_url": "https://api.github.com/users/nhasabni/orgs", "repos_url": "https://api.github.com/users/nhasabni/repos", "events_url": "https://api.github.com/users/nhasabni/events{/privacy}", "received_events_url": "https://api.github.com/users/nhasabni/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-11T23:27:26Z", "updated_at": "2018-09-11T23:27:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15676913\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/poxvoculi\">@poxvoculi</a> Based on my initial analysis I found that BFC allocator implementation currently uses single shared lock and long critical sections, and does not do well when the number of concurrent alloc/dealloc is quite high. BFC allocator offers decent improvement for large-sized allocations and a small number of concurrent allocs/deallocs.</p>", "body_text": "@poxvoculi Based on my initial analysis I found that BFC allocator implementation currently uses single shared lock and long critical sections, and does not do well when the number of concurrent alloc/dealloc is quite high. BFC allocator offers decent improvement for large-sized allocations and a small number of concurrent allocs/deallocs.", "body": "@poxvoculi Based on my initial analysis I found that BFC allocator implementation currently uses single shared lock and long critical sections, and does not do well when the number of concurrent alloc/dealloc is quite high. BFC allocator offers decent improvement for large-sized allocations and a small number of concurrent allocs/deallocs."}