{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/214470927", "pull_request_review_id": 151512515, "id": 214470927, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ3MDkyNw==", "diff_hunk": "@@ -112,23 +235,52 @@ class MklCPUAllocator : public VisitableAllocator {\n   inline string Name() override { return kName; }\n \n   inline void* AllocateRaw(size_t alignment, size_t num_bytes) override {\n-    return allocator_->AllocateRaw(alignment, num_bytes);\n+    // If the allocation size is less than threshold, call small allocator,\n+    // otherwise call large-size allocator (BFC). We found that BFC allocator\n+    // does not deliver good performance for small allocations when\n+    // inter_op_parallelism_threads is high.\n+    return (num_bytes < kSmallAllocationsThreshold) ?\n+          small_size_allocator_->AllocateRaw(alignment, num_bytes) :\n+          large_size_allocator_->AllocateRaw(alignment, num_bytes);\n   }\n \n   inline void DeallocateRaw(void* ptr) override {\n-    allocator_->DeallocateRaw(ptr);\n+    // Check if ptr is for \"small\" allocation. If it is, then call Free\n+    // directly. Otherwise, call BFC to handle free.\n+    if (small_size_allocator_->IsSmallSizeAllocation(ptr)) {\n+      small_size_allocator_->DeallocateRaw(ptr);\n+    } else {\n+      large_size_allocator_->DeallocateRaw(ptr);\n+    }\n   }\n \n-  void GetStats(AllocatorStats* stats) override { allocator_->GetStats(stats); }\n+  void GetStats(AllocatorStats* stats) override {\n+    AllocatorStats l_stats, s_stats;\n+    small_size_allocator_->GetStats(&s_stats);\n+    large_size_allocator_->GetStats(&l_stats);\n+\n+    // Combine statistics from small-size and large-size allocator.\n+    stats->num_allocs = l_stats.num_allocs + s_stats.num_allocs;\n+    stats->bytes_in_use = l_stats.bytes_in_use + s_stats.bytes_in_use;\n+    stats->max_bytes_in_use = l_stats.max_bytes_in_use +\n+                              s_stats.max_bytes_in_use;\n+    stats->max_alloc_size = std::max(l_stats.max_alloc_size,", "path": "tensorflow/core/common_runtime/mkl_cpu_allocator.h", "position": null, "original_position": 191, "commit_id": "380abf51677b180face81953ddf63676074d4de2", "original_commit_id": "b146281fd7f11325251fb085aca6bda8e2d77bfd", "user": {"login": "penpornk", "id": 38085909, "node_id": "MDQ6VXNlcjM4MDg1OTA5", "avatar_url": "https://avatars3.githubusercontent.com/u/38085909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/penpornk", "html_url": "https://github.com/penpornk", "followers_url": "https://api.github.com/users/penpornk/followers", "following_url": "https://api.github.com/users/penpornk/following{/other_user}", "gists_url": "https://api.github.com/users/penpornk/gists{/gist_id}", "starred_url": "https://api.github.com/users/penpornk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/penpornk/subscriptions", "organizations_url": "https://api.github.com/users/penpornk/orgs", "repos_url": "https://api.github.com/users/penpornk/repos", "events_url": "https://api.github.com/users/penpornk/events{/privacy}", "received_events_url": "https://api.github.com/users/penpornk/received_events", "type": "User", "site_admin": false}, "body": "`l_stats.max_alloc_size` should always be larger than `s_stats.max_alloc_size`, right? Is it safe to just use this instead?\r\n```c\r\nstats->max_alloc_size = l_stats.max_alloc_size;\r\n```", "created_at": "2018-08-31T20:42:36Z", "updated_at": "2018-09-06T20:50:32Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21912#discussion_r214470927", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21912", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/214470927"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21912#discussion_r214470927"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21912"}}, "body_html": "<p><code>l_stats.max_alloc_size</code> should always be larger than <code>s_stats.max_alloc_size</code>, right? Is it safe to just use this instead?</p>\n<div class=\"highlight highlight-source-c\"><pre>stats-&gt;max_alloc_size = l_stats.max_alloc_size;</pre></div>", "body_text": "l_stats.max_alloc_size should always be larger than s_stats.max_alloc_size, right? Is it safe to just use this instead?\nstats->max_alloc_size = l_stats.max_alloc_size;"}