{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302306641", "html_url": "https://github.com/tensorflow/tensorflow/issues/9939#issuecomment-302306641", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9939", "id": 302306641, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjMwNjY0MQ==", "user": {"login": "JeremyCCHsu", "id": 16027371, "node_id": "MDQ6VXNlcjE2MDI3Mzcx", "avatar_url": "https://avatars2.githubusercontent.com/u/16027371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeremyCCHsu", "html_url": "https://github.com/JeremyCCHsu", "followers_url": "https://api.github.com/users/JeremyCCHsu/followers", "following_url": "https://api.github.com/users/JeremyCCHsu/following{/other_user}", "gists_url": "https://api.github.com/users/JeremyCCHsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeremyCCHsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeremyCCHsu/subscriptions", "organizations_url": "https://api.github.com/users/JeremyCCHsu/orgs", "repos_url": "https://api.github.com/users/JeremyCCHsu/repos", "events_url": "https://api.github.com/users/JeremyCCHsu/events{/privacy}", "received_events_url": "https://api.github.com/users/JeremyCCHsu/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-18T05:44:47Z", "updated_at": "2017-05-18T05:44:47Z", "author_association": "NONE", "body_html": "<p>I also frequently encounter this issue since I started to use the <code>tf.layers</code> module in TF 1.1.<br>\nIt seems that something related to naming went wrong in some of the modules.</p>\n<p>For example, the following code triggered the issue:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nx <span class=\"pl-k\">=</span> tf.zeros([<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">3</span>])\ny <span class=\"pl-k\">=</span> tf.layers.dense(x, <span class=\"pl-c1\">5</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> the issue is originated from this line</span>\n\nsv <span class=\"pl-k\">=</span> tf.train.Supervisor()\nsess <span class=\"pl-k\">=</span> sv.prepare_or_wait_for_session()\nsv.saver.save(sess, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>.<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p>Return:</p>\n<pre><code>WARNING:tensorflow:Error encountered when serializing LAYER_NAME_UIDS.\nType is unsupported, or the types of the items don't match field type in CollectionDef.\n'dict' object has no attribute 'name'\n</code></pre>\n<p>However, the issue can be easily avoided (in this simple case) by specifying the <code>name</code> argument:<br>\nIn contrast, using <code>slim</code>, <code>keras</code>, or <code>tf.Variable</code> doesn't trigger such an issue.<br>\nHere are some examples that work smoothly without triggering the warning above.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> The Tensorflow infrastructure</span>\nw <span class=\"pl-k\">=</span> tf.Variable(tf.zeros([<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>]))\ny <span class=\"pl-k\">=</span> tf.matmul(x, w)</pre></div>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> The `layers` module with the `name` arg specified</span>\ny <span class=\"pl-k\">=</span> tf.layers.dense(x, <span class=\"pl-c1\">5</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>y<span class=\"pl-pds\">'</span></span>)</pre></div>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Slim</span>\n<span class=\"pl-k\">from</span> tensorflow.contrib <span class=\"pl-k\">import</span> slim\ny <span class=\"pl-k\">=</span> slim.fully_connected(x, <span class=\"pl-c1\">5</span>)</pre></div>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Keras</span>\ny <span class=\"pl-k\">=</span> tf.contrib.keras.layers.Dense(<span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>)(x)</pre></div>", "body_text": "I also frequently encounter this issue since I started to use the tf.layers module in TF 1.1.\nIt seems that something related to naming went wrong in some of the modules.\nFor example, the following code triggered the issue:\nimport tensorflow as tf\n\nx = tf.zeros([10, 3])\ny = tf.layers.dense(x, 5)  # the issue is originated from this line\n\nsv = tf.train.Supervisor()\nsess = sv.prepare_or_wait_for_session()\nsv.saver.save(sess, '.')\nReturn:\nWARNING:tensorflow:Error encountered when serializing LAYER_NAME_UIDS.\nType is unsupported, or the types of the items don't match field type in CollectionDef.\n'dict' object has no attribute 'name'\n\nHowever, the issue can be easily avoided (in this simple case) by specifying the name argument:\nIn contrast, using slim, keras, or tf.Variable doesn't trigger such an issue.\nHere are some examples that work smoothly without triggering the warning above.\n# The Tensorflow infrastructure\nw = tf.Variable(tf.zeros([3, 5]))\ny = tf.matmul(x, w)\n# The `layers` module with the `name` arg specified\ny = tf.layers.dense(x, 5, name='y')\n# Slim\nfrom tensorflow.contrib import slim\ny = slim.fully_connected(x, 5)\n# Keras\ny = tf.contrib.keras.layers.Dense(units=5)(x)", "body": "I also frequently encounter this issue since I started to use the `tf.layers` module in TF 1.1.\r\nIt seems that something related to naming went wrong in some of the modules.\r\n\r\nFor example, the following code triggered the issue:\r\n```python\r\nimport tensorflow as tf\r\n\r\nx = tf.zeros([10, 3])\r\ny = tf.layers.dense(x, 5)  # the issue is originated from this line\r\n\r\nsv = tf.train.Supervisor()\r\nsess = sv.prepare_or_wait_for_session()\r\nsv.saver.save(sess, '.')\r\n```\r\nReturn:\r\n```\r\nWARNING:tensorflow:Error encountered when serializing LAYER_NAME_UIDS.\r\nType is unsupported, or the types of the items don't match field type in CollectionDef.\r\n'dict' object has no attribute 'name'\r\n```\r\n\r\nHowever, the issue can be easily avoided (in this simple case) by specifying the `name` argument:\r\nIn contrast, using `slim`, `keras`, or `tf.Variable` doesn't trigger such an issue.\r\nHere are some examples that work smoothly without triggering the warning above.\r\n```python\r\n# The Tensorflow infrastructure\r\nw = tf.Variable(tf.zeros([3, 5]))\r\ny = tf.matmul(x, w)\r\n```\r\n\r\n```python\r\n# The `layers` module with the `name` arg specified\r\ny = tf.layers.dense(x, 5, name='y')\r\n```\r\n\r\n```python\r\n# Slim\r\nfrom tensorflow.contrib import slim\r\ny = slim.fully_connected(x, 5)\r\n```\r\n\r\n```python\r\n# Keras\r\ny = tf.contrib.keras.layers.Dense(units=5)(x)\r\n```\r\n"}