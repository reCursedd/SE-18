{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/299544145", "html_url": "https://github.com/tensorflow/tensorflow/pull/9686#issuecomment-299544145", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9686", "id": 299544145, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTU0NDE0NQ==", "user": {"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-05T18:41:20Z", "updated_at": "2017-05-05T18:41:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi Simon,</p>\n<p>Thanks for this nice patch.  We had a couple of thoughts for a re-organization to avoid creating multiple classes with slightly different functionality and naming conventions:</p>\n<ol>\n<li>\n<p>Rather than creating new python high level ops, could we slightly modify the existing StagingArea interface by adding an optional key argument to get and put?  If the key is present, then your C++ ops would be used, otherwise the current C++ ops would be used.  The constructor could take an argument that decides on ordering.</p>\n</li>\n<li>\n<p>Your pop method would map to get and if you want to retain the ability to inspect the StagingArea without removing an element, then add a new method 'peek'.</p>\n</li>\n<li>\n<p>You can choose to add fixed capacity to the existing StagingArea or remove it from the new classes (so only unbounded).</p>\n</li>\n</ol>\n<p>Thanks,<br>\nErich</p>", "body_text": "Hi Simon,\nThanks for this nice patch.  We had a couple of thoughts for a re-organization to avoid creating multiple classes with slightly different functionality and naming conventions:\n\n\nRather than creating new python high level ops, could we slightly modify the existing StagingArea interface by adding an optional key argument to get and put?  If the key is present, then your C++ ops would be used, otherwise the current C++ ops would be used.  The constructor could take an argument that decides on ordering.\n\n\nYour pop method would map to get and if you want to retain the ability to inspect the StagingArea without removing an element, then add a new method 'peek'.\n\n\nYou can choose to add fixed capacity to the existing StagingArea or remove it from the new classes (so only unbounded).\n\n\nThanks,\nErich", "body": "Hi Simon,\r\n\r\nThanks for this nice patch.  We had a couple of thoughts for a re-organization to avoid creating multiple classes with slightly different functionality and naming conventions:\r\n\r\n1) Rather than creating new python high level ops, could we slightly modify the existing StagingArea interface by adding an optional key argument to get and put?  If the key is present, then your C++ ops would be used, otherwise the current C++ ops would be used.  The constructor could take an argument that decides on ordering.\r\n\r\n2) Your pop method would map to get and if you want to retain the ability to inspect the StagingArea without removing an element, then add a new method 'peek'.\r\n\r\n3) You can choose to add fixed capacity to the existing StagingArea or remove it from the new classes (so only unbounded).\r\n\r\nThanks,\r\nErich"}