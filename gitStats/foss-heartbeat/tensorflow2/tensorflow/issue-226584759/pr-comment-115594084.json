{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/115594084", "pull_request_review_id": 37144031, "id": 115594084, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU5NDA4NA==", "diff_hunk": "@@ -0,0 +1,244 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import ops\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import data_flow_ops\n+from tensorflow.python.ops import math_ops\n+from tensorflow.python.platform import test\n+\n+\n+class MapStageTest(test.TestCase):\n+\n+  def testSimple(self):\n+    with self.test_session(use_gpu=True) as sess:\n+      with ops.device('/cpu:0'):\n+        x = array_ops.placeholder(dtypes.float32)\n+        pi = array_ops.placeholder(dtypes.int64)\n+        gi = array_ops.placeholder(dtypes.int64)\n+        v = 2. * (array_ops.zeros([128, 128]) + x)\n+      with ops.device('/gpu:0'):\n+        stager = data_flow_ops.MapStagingArea([dtypes.float32])\n+        stage = stager.put(pi,[v])\n+        k, y = stager.get(gi)\n+        y = math_ops.reduce_max(math_ops.matmul(y, y))\n+      sess.run(stage, feed_dict={x: -1, pi: 0})\n+      for i in range(10):\n+        _, yval = sess.run([stage, y], feed_dict={x: i, pi: i+1, gi:i})\n+        self.assertAllClose(4 * (i - 1) * (i - 1) * 128, yval, rtol=1e-4)\n+\n+  def testMultiple(self):\n+    with self.test_session(use_gpu=True) as sess:\n+      with ops.device('/cpu:0'):\n+        x = array_ops.placeholder(dtypes.float32)\n+        pi = array_ops.placeholder(dtypes.int64)\n+        gi = array_ops.placeholder(dtypes.int64)\n+        v = 2. * (array_ops.zeros([128, 128]) + x)\n+      with ops.device('/gpu:0'):\n+        stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32])\n+        stage = stager.put(pi,[x, v])\n+        k, (z, y) = stager.get(gi)\n+        y = math_ops.reduce_max(z * math_ops.matmul(y, y))\n+      sess.run(stage, feed_dict={x: -1, pi: 0})\n+      for i in range(10):\n+        _, yval = sess.run([stage, y], feed_dict={x: i, pi: i+1, gi:i})\n+        self.assertAllClose(\n+            4 * (i - 1) * (i - 1) * (i - 1) * 128, yval, rtol=1e-4)\n+\n+  def testDictionary(self):\n+    with self.test_session(use_gpu=True) as sess:\n+      with ops.device('/cpu:0'):\n+        x = array_ops.placeholder(dtypes.float32)\n+        pi = array_ops.placeholder(dtypes.int64)\n+        gi = array_ops.placeholder(dtypes.int64)\n+        v = 2. * (array_ops.zeros([128, 128]) + x)\n+      with ops.device(test.gpu_device_name()):\n+        stager = data_flow_ops.MapStagingArea(\n+            [dtypes.float32, dtypes.float32],\n+            shapes=[[], [128, 128]],\n+            names=['x', 'v'])\n+        stage = stager.put(pi,{'x': x, 'v': v})\n+        key, ret = stager.get(gi)\n+        z = ret['x']\n+        y = ret['v']\n+        y = math_ops.reduce_max(z * math_ops.matmul(y, y))\n+      sess.run(stage, feed_dict={x: -1, pi: 0})\n+      for i in range(10):\n+        _, yval = sess.run([stage, y], feed_dict={x: i, pi: i+1, gi:i})\n+        self.assertAllClose(\n+            4 * (i - 1) * (i - 1) * (i - 1) * 128, yval, rtol=1e-4)\n+\n+  def testColocation1(self):\n+    with ops.device('/cpu:0'):\n+      x = array_ops.placeholder(dtypes.float32)\n+      v = 2. * (array_ops.zeros([128, 128]) + x)\n+    with ops.device('/gpu:0'):\n+      stager = data_flow_ops.MapStagingArea([dtypes.float32])\n+      y = stager.put(1,[v])\n+      self.assertEqual(y.device, '/device:GPU:0')\n+    with ops.device('/cpu:0'):\n+      _, x = stager.get(1)\n+      y = stager.peek(1)\n+      _, z = stager.get()\n+      self.assertEqual(x.device, '/device:CPU:0')\n+      self.assertEqual(y.device, '/device:CPU:0')\n+      self.assertEqual(z.device, '/device:CPU:0')\n+\n+  def testPeek(self):\n+    with ops.device('/cpu:0'):\n+      x = array_ops.placeholder(dtypes.int32, name='x')\n+      pi = array_ops.placeholder(dtypes.int64)\n+      gi = array_ops.placeholder(dtypes.int64)\n+      p = array_ops.placeholder(dtypes.int32, name='p')\n+    with ops.device(test.gpu_device_name()):\n+      stager = data_flow_ops.MapStagingArea([dtypes.int32, ], shapes=[[]])\n+      stage = stager.put(pi,[x])\n+      peek = stager.peek(gi)\n+      size = stager.size()\n+\n+    n = 10\n+\n+    with self.test_session(use_gpu=True) as sess:\n+      for i in range(n):\n+        sess.run(stage, feed_dict={x:i, pi:i})\n+\n+      for i in range(n):\n+        self.assertTrue(sess.run(peek, feed_dict={gi: i}) == i)\n+\n+      self.assertTrue(sess.run(size) == 10)\n+\n+  def testSizeAndClear(self):\n+    with ops.device('/cpu:0'):\n+      x = array_ops.placeholder(dtypes.float32, name='x')\n+      pi = array_ops.placeholder(dtypes.int64)\n+      gi = array_ops.placeholder(dtypes.int64)\n+      v = 2. * (array_ops.zeros([128, 128]) + x)\n+    with ops.device(test.gpu_device_name()):", "path": "tensorflow/python/kernel_tests/map_stage_op_test.py", "position": 135, "original_position": 132, "commit_id": "b292353578075c3a31ad438458a74a8538360ec6", "original_commit_id": "92d4d732cab8c6b8db83a38166298ed9a4e8961c", "user": {"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}, "body": "there seems to be some inconsistency about when gpu:0 is used vs. gpu_device_name, standardize?", "created_at": "2017-05-09T20:28:54Z", "updated_at": "2017-05-19T19:22:57Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9686#discussion_r115594084", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9686", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/115594084"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9686#discussion_r115594084"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9686"}}, "body_html": "<p>there seems to be some inconsistency about when gpu:0 is used vs. gpu_device_name, standardize?</p>", "body_text": "there seems to be some inconsistency about when gpu:0 is used vs. gpu_device_name, standardize?"}