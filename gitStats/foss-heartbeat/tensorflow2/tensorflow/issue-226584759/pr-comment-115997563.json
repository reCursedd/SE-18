{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/115997563", "pull_request_review_id": 37584119, "id": 115997563, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTk5NzU2Mw==", "diff_hunk": "@@ -1584,19 +1642,270 @@ def get(self, name=None):\n     if name is None:\n       name = \"%s_get\" % self._name\n \n-    with ops.colocate_with(self._coloc_op):\n-      ret = gen_data_flow_ops.unstage(dtypes=self._dtypes,\n-                                      shared_name=self._name, name=name)\n+    fn = lambda: gen_data_flow_ops.unstage(dtypes=self._dtypes,\n+                    shared_name=self._name, name=name,\n+                    capacity=self._capacity)\n \n-    curr_device_scope = control_flow_ops.no_op().device\n-    if curr_device_scope != self._coloc_op.device:\n-      for i in range(len(ret)):\n-        ret[i] = array_ops.identity(ret[i])\n+    return self.__internal_get(fn, name)\n \n-    for output, shape in zip(ret, self._shapes):\n-      output.set_shape(shape)\n+  def peek(self, index, name=None):\n+    \"\"\"Peeks at an element in the staging area.\n \n-    return self._get_return_value(ret)\n+    If the staging area is too small to contain the element at\n+    the specified index, it will block until enough elements\n+    are inserted to complete the operation.\n+\n+    The placement of the returned tensor will be determined by the current\n+    device scope when this function is called.\n+\n+    Args:\n+      index: The index of the tensor within the staging area\n+              to look up.\n+      name: A name for the operation (optional).\n+\n+    Returns:\n+      The tuple of tensors that was gotten.\n+    \"\"\"\n+    if name is None:\n+      name = \"%s_peek\" % self._name\n+\n+    fn = lambda: gen_data_flow_ops.stage_peek(index,\n+                    dtypes=self._dtypes, shared_name=self._name,\n+                    name=name, capacity=self._capacity)\n+\n+    return self.__internal_get(fn, name)\n+\n+  def size(self, name=None):\n+    \"\"\"Returns the number of elements in the staging area.\n+\n+    Args:\n+        name: A name for the operation (optional)\n+\n+    Returns:\n+        The created op\n+    \"\"\"\n+    if name is None:\n+        name = \"%s_size\" % self._name\n+\n+    return gen_data_flow_ops.stage_size(shared_name=self._name,\n+                        name=name,\n+                        capacity=self._capacity)\n+\n+  def clear(self, name=None):\n+    \"\"\"Empties the staging area.\"\"\"\n+    if name is None:\n+      name = \"%s_clear\" % self._name\n+\n+    return gen_data_flow_ops.stage_clear(shared_name=self._name,\n+                        name=name,\n+                        capacity=self._capacity)\n+\n+class MapStagingArea(BaseStagingArea):\n+    \"\"\"\n+    Class for staging inputs. Similar to `StagingArea` but behaves\n+    like a hashtable with support for puts, gets, pops, popitems,", "path": "tensorflow/python/ops/data_flow_ops.py", "position": null, "original_position": 383, "commit_id": "b292353578075c3a31ad438458a74a8538360ec6", "original_commit_id": "92d4d732cab8c6b8db83a38166298ed9a4e8961c", "user": {"login": "sjperkins", "id": 3530212, "node_id": "MDQ6VXNlcjM1MzAyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3530212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjperkins", "html_url": "https://github.com/sjperkins", "followers_url": "https://api.github.com/users/sjperkins/followers", "following_url": "https://api.github.com/users/sjperkins/following{/other_user}", "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions", "organizations_url": "https://api.github.com/users/sjperkins/orgs", "repos_url": "https://api.github.com/users/sjperkins/repos", "events_url": "https://api.github.com/users/sjperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/sjperkins/received_events", "type": "User", "site_admin": false}, "body": "https://github.com/tensorflow/tensorflow/pull/9686/commits/ce326f6aa03e4375331a8ddbcec25e0dc97c681b", "created_at": "2017-05-11T14:01:16Z", "updated_at": "2017-05-19T19:22:57Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9686#discussion_r115997563", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9686", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/115997563"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9686#discussion_r115997563"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9686"}}, "body_html": "<p><a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/ce326f6aa03e4375331a8ddbcec25e0dc97c681b/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/ce326f6aa03e4375331a8ddbcec25e0dc97c681b\"><tt>ce326f6</tt></a></p>", "body_text": "ce326f6", "in_reply_to_id": 115601063}