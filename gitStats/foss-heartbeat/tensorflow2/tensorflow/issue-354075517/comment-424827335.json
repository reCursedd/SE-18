{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424827335", "html_url": "https://github.com/tensorflow/tensorflow/issues/21880#issuecomment-424827335", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21880", "id": 424827335, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDgyNzMzNQ==", "user": {"login": "PinkySan", "id": 25133849, "node_id": "MDQ6VXNlcjI1MTMzODQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/25133849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PinkySan", "html_url": "https://github.com/PinkySan", "followers_url": "https://api.github.com/users/PinkySan/followers", "following_url": "https://api.github.com/users/PinkySan/following{/other_user}", "gists_url": "https://api.github.com/users/PinkySan/gists{/gist_id}", "starred_url": "https://api.github.com/users/PinkySan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PinkySan/subscriptions", "organizations_url": "https://api.github.com/users/PinkySan/orgs", "repos_url": "https://api.github.com/users/PinkySan/repos", "events_url": "https://api.github.com/users/PinkySan/events{/privacy}", "received_events_url": "https://api.github.com/users/PinkySan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-26T18:45:12Z", "updated_at": "2018-09-26T18:45:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4171702\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/meteorcloudy\">@meteorcloudy</a> That is a very uncommon behaviour. If it is a known problem, i can totally live with that. But does bazel support an installing target? It is pretty simple in CMake to create an INSTALL-Target, which contains the relevant binaries, includes, etc.</p>\n<p>I therefore cannot understand the release note in 1.10, which discontinues the CMake support. Especially the integration of c++ tensorflow into another c++ project with CMake is really simple</p>\n<p><code>find_package(Tensorflow)</code><br>\n<code>add_executable(myExe ...)</code><br>\n<code>target_link_libraries(myExe PRIVATE tensorflow)</code></p>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"347931733\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/21409\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/21409/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/21409\">#21409</a></p>", "body_text": "@meteorcloudy That is a very uncommon behaviour. If it is a known problem, i can totally live with that. But does bazel support an installing target? It is pretty simple in CMake to create an INSTALL-Target, which contains the relevant binaries, includes, etc.\nI therefore cannot understand the release note in 1.10, which discontinues the CMake support. Especially the integration of c++ tensorflow into another c++ project with CMake is really simple\nfind_package(Tensorflow)\nadd_executable(myExe ...)\ntarget_link_libraries(myExe PRIVATE tensorflow)\n#21409", "body": "@meteorcloudy That is a very uncommon behaviour. If it is a known problem, i can totally live with that. But does bazel support an installing target? It is pretty simple in CMake to create an INSTALL-Target, which contains the relevant binaries, includes, etc.\r\n\r\nI therefore cannot understand the release note in 1.10, which discontinues the CMake support. Especially the integration of c++ tensorflow into another c++ project with CMake is really simple\r\n\r\n`find_package(Tensorflow)`\r\n`add_executable(myExe ...)`\r\n`target_link_libraries(myExe PRIVATE tensorflow)`\r\n\r\n#21409"}