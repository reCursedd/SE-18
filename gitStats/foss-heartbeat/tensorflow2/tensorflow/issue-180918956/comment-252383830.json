{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/252383830", "html_url": "https://github.com/tensorflow/tensorflow/issues/4757#issuecomment-252383830", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4757", "id": 252383830, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjM4MzgzMA==", "user": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-07T23:27:32Z", "updated_at": "2016-10-07T23:27:32Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6323467\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/chenghuige\">@chenghuige</a> I'm sorry, my comment about python <code>string.replace</code> was irrelevant; I'd misinterpreted your code.</p>\n<p>But the problem still remains in your second step <code>rename-scope.py</code>.  After that step, the checkpoint <code>/tmp/new.model</code> will have a single entry for <code>new/w</code>.  That is what you want.  But the MetaGraphDef <code>/tmp/new.model.meta</code> will still hold a graph that contains the <code>old/w</code> node.  That is because the <code>out_vars</code> that you passed to <code>tf.train.Saver</code> only renamed the checkpoint entry, but not the graph itself.</p>\n<p>There is no bug in <code>import_meta_graph</code>, since it's just loading the graph that was provided.</p>\n<p>We could try to make the argument that there's a bug in <code>tf.train.Saver</code>.  I.e. we passed it new names for some variables, so maybe it should rename the graph nodes too.  But that doesn't really work; e.g. the <code>old/w</code> variable also has related nodes <code>old/w/Initializer/Const</code>, <code>old/w/Assign</code>, <code>old/w/read</code> that are used to initialize the variable.  In general isn't possible for us to infer the renames that would be required.</p>\n<hr>\n<p>So basically the best way to accomplish your goal is your step 3 <code>read-renamed-buildgraph.py</code>.</p>\n<p>Hope that helps!  If you have further questions, just comment on this issue, and I'll re-open.</p>", "body_text": "@chenghuige I'm sorry, my comment about python string.replace was irrelevant; I'd misinterpreted your code.\nBut the problem still remains in your second step rename-scope.py.  After that step, the checkpoint /tmp/new.model will have a single entry for new/w.  That is what you want.  But the MetaGraphDef /tmp/new.model.meta will still hold a graph that contains the old/w node.  That is because the out_vars that you passed to tf.train.Saver only renamed the checkpoint entry, but not the graph itself.\nThere is no bug in import_meta_graph, since it's just loading the graph that was provided.\nWe could try to make the argument that there's a bug in tf.train.Saver.  I.e. we passed it new names for some variables, so maybe it should rename the graph nodes too.  But that doesn't really work; e.g. the old/w variable also has related nodes old/w/Initializer/Const, old/w/Assign, old/w/read that are used to initialize the variable.  In general isn't possible for us to infer the renames that would be required.\n\nSo basically the best way to accomplish your goal is your step 3 read-renamed-buildgraph.py.\nHope that helps!  If you have further questions, just comment on this issue, and I'll re-open.", "body": "@chenghuige I'm sorry, my comment about python `string.replace` was irrelevant; I'd misinterpreted your code.\n\nBut the problem still remains in your second step `rename-scope.py`.  After that step, the checkpoint `/tmp/new.model` will have a single entry for `new/w`.  That is what you want.  But the MetaGraphDef `/tmp/new.model.meta` will still hold a graph that contains the `old/w` node.  That is because the `out_vars` that you passed to `tf.train.Saver` only renamed the checkpoint entry, but not the graph itself.\n\nThere is no bug in `import_meta_graph`, since it's just loading the graph that was provided.\n\nWe could try to make the argument that there's a bug in `tf.train.Saver`.  I.e. we passed it new names for some variables, so maybe it should rename the graph nodes too.  But that doesn't really work; e.g. the `old/w` variable also has related nodes `old/w/Initializer/Const`, `old/w/Assign`, `old/w/read` that are used to initialize the variable.  In general isn't possible for us to infer the renames that would be required.\n\n---\n\nSo basically the best way to accomplish your goal is your step 3 `read-renamed-buildgraph.py`.\n\nHope that helps!  If you have further questions, just comment on this issue, and I'll re-open.\n"}