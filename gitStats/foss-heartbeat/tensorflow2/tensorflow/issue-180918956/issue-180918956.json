{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4757", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4757/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4757/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4757/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4757", "id": 180918956, "node_id": "MDU6SXNzdWUxODA5MTg5NTY=", "number": 4757, "title": "import meta graph bug reading model with scope name changed", "user": {"login": "chenghuige", "id": 6323467, "node_id": "MDQ6VXNlcjYzMjM0Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6323467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenghuige", "html_url": "https://github.com/chenghuige", "followers_url": "https://api.github.com/users/chenghuige/followers", "following_url": "https://api.github.com/users/chenghuige/following{/other_user}", "gists_url": "https://api.github.com/users/chenghuige/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenghuige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenghuige/subscriptions", "organizations_url": "https://api.github.com/users/chenghuige/orgs", "repos_url": "https://api.github.com/users/chenghuige/repos", "events_url": "https://api.github.com/users/chenghuige/events{/privacy}", "received_events_url": "https://api.github.com/users/chenghuige/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-04T15:03:13Z", "updated_at": "2016-10-09T10:45:11Z", "closed_at": "2016-10-07T23:27:32Z", "author_association": "NONE", "body_html": "<p>Same issue for tf 0.10 and 0.11.rc0.<br>\nThe problem is if you read one model, change the top scope name, write a new model, then you read the new model, but still you got the old top scope name.<br>\nHow to reproduce</p>\n<ul>\n<li>\n<p>create model<br>\npython create-model.py</p>\n<pre><code>import tensorflow as tf  \n\nsess = tf.InteractiveSession()  \n\nwith tf.variable_scope('old'):  \n\n    w = tf.get_variable('w', shape=[1], initializer=tf.constant_initializer(1.0))  \n\nsess.run(tf.initialize_all_variables())  \n\ntf.train.Saver().save(sess, '/tmp/old.model')  \n</code></pre>\n</li>\n<li>\n<p>read this model (using import meta graph), then rename top scope and save to one new model<br>\npython rename-scope.py<br>\nold_vars: [u'old/w:0']<br>\nnew_vars: [u'new/w']</p>\n<pre><code>import tensorflow as tf  \n\nsess = tf.InteractiveSession()  \n\nsaver = tf.train.import_meta_graph('/tmp/old.model.meta')  \n\nsaver.restore(sess, '/tmp/old.model')  \n\nsrc_vars = [v for v in tf.all_variables() if v.name.startswith('old')]  \n\nprint('old_vars:', [v.name for v in src_vars])\n\nout_vars = {v.name[:v.name.rfind(':')].replace('old', 'new', 1): v for v in src_vars}  \n\nprint('new_vars:', [key for key in out_vars])  \n\ntf.train.Saver(var_list=out_vars).save(sess, '/tmp/new.model') \n</code></pre>\n</li>\n<li>\n<p>read new model(It is ok if you buid graph from scratch with new scope, but not ok if using import meta graph again)</p>\n<h1>-------------------this is ok</h1>\n<p>python read-renamed-buildgraph.py<br>\ntf.all_variables: [u'new/w:0']<br>\nw val: [ 1.]</p>\n<pre><code>import tensorflow as tf  \n\nsess = tf.InteractiveSession()\n\nwith tf.variable_scope('new'):\n    w = tf.get_variable('w', shape=[1], initializer=tf.constant_initializer(2.0))  \n\ntf.train.Saver().restore(sess, '/tmp/new.model')  \n\nprint('tf.all_variables:', [v.name for v in tf.all_variables()])  \n\nprint('w val:',  w.eval())\n</code></pre>\n<h1>---------------this is wrong</h1>\n<p>python read-renamed-metagraph.py<br>\ntf.all_variables: [u'old/w:0']</p>\n<pre><code> import tensorflow as tf  \n\n sess = tf.InteractiveSession()  \n\n saver = tf.train.import_meta_graph('/tmp/new.model.meta')\n\n saver.restore(sess, '/tmp/new.model')\n\n print('tf.all_variables:', [v.name for v in tf.all_variables()])\n</code></pre>\n</li>\n</ul>", "body_text": "Same issue for tf 0.10 and 0.11.rc0.\nThe problem is if you read one model, change the top scope name, write a new model, then you read the new model, but still you got the old top scope name.\nHow to reproduce\n\n\ncreate model\npython create-model.py\nimport tensorflow as tf  \n\nsess = tf.InteractiveSession()  \n\nwith tf.variable_scope('old'):  \n\n    w = tf.get_variable('w', shape=[1], initializer=tf.constant_initializer(1.0))  \n\nsess.run(tf.initialize_all_variables())  \n\ntf.train.Saver().save(sess, '/tmp/old.model')  \n\n\n\nread this model (using import meta graph), then rename top scope and save to one new model\npython rename-scope.py\nold_vars: [u'old/w:0']\nnew_vars: [u'new/w']\nimport tensorflow as tf  \n\nsess = tf.InteractiveSession()  \n\nsaver = tf.train.import_meta_graph('/tmp/old.model.meta')  \n\nsaver.restore(sess, '/tmp/old.model')  \n\nsrc_vars = [v for v in tf.all_variables() if v.name.startswith('old')]  \n\nprint('old_vars:', [v.name for v in src_vars])\n\nout_vars = {v.name[:v.name.rfind(':')].replace('old', 'new', 1): v for v in src_vars}  \n\nprint('new_vars:', [key for key in out_vars])  \n\ntf.train.Saver(var_list=out_vars).save(sess, '/tmp/new.model') \n\n\n\nread new model(It is ok if you buid graph from scratch with new scope, but not ok if using import meta graph again)\n-------------------this is ok\npython read-renamed-buildgraph.py\ntf.all_variables: [u'new/w:0']\nw val: [ 1.]\nimport tensorflow as tf  \n\nsess = tf.InteractiveSession()\n\nwith tf.variable_scope('new'):\n    w = tf.get_variable('w', shape=[1], initializer=tf.constant_initializer(2.0))  \n\ntf.train.Saver().restore(sess, '/tmp/new.model')  \n\nprint('tf.all_variables:', [v.name for v in tf.all_variables()])  \n\nprint('w val:',  w.eval())\n\n---------------this is wrong\npython read-renamed-metagraph.py\ntf.all_variables: [u'old/w:0']\n import tensorflow as tf  \n\n sess = tf.InteractiveSession()  \n\n saver = tf.train.import_meta_graph('/tmp/new.model.meta')\n\n saver.restore(sess, '/tmp/new.model')\n\n print('tf.all_variables:', [v.name for v in tf.all_variables()])", "body": "Same issue for tf 0.10 and 0.11.rc0.\nThe problem is if you read one model, change the top scope name, write a new model, then you read the new model, but still you got the old top scope name.\nHow to reproduce \n- create model\n  python create-model.py\n  \n  ```\n  import tensorflow as tf  \n  \n  sess = tf.InteractiveSession()  \n  \n  with tf.variable_scope('old'):  \n  \n      w = tf.get_variable('w', shape=[1], initializer=tf.constant_initializer(1.0))  \n  \n  sess.run(tf.initialize_all_variables())  \n  \n  tf.train.Saver().save(sess, '/tmp/old.model')  \n  ```\n- read this model (using import meta graph), then rename top scope and save to one new model\n  python rename-scope.py\n  old_vars: [u'old/w:0']\n  new_vars: [u'new/w']  \n  \n  ```\n  import tensorflow as tf  \n  \n  sess = tf.InteractiveSession()  \n  \n  saver = tf.train.import_meta_graph('/tmp/old.model.meta')  \n  \n  saver.restore(sess, '/tmp/old.model')  \n  \n  src_vars = [v for v in tf.all_variables() if v.name.startswith('old')]  \n  \n  print('old_vars:', [v.name for v in src_vars])\n  \n  out_vars = {v.name[:v.name.rfind(':')].replace('old', 'new', 1): v for v in src_vars}  \n  \n  print('new_vars:', [key for key in out_vars])  \n  \n  tf.train.Saver(var_list=out_vars).save(sess, '/tmp/new.model') \n  ```\n- read new model(It is ok if you buid graph from scratch with new scope, but not ok if using import meta graph again)\n  # -------------------this is ok\n  \n  python read-renamed-buildgraph.py  \n  tf.all_variables: [u'new/w:0']\n  w val: [ 1.]\n  \n  ```\n  import tensorflow as tf  \n  \n  sess = tf.InteractiveSession()\n  \n  with tf.variable_scope('new'):\n      w = tf.get_variable('w', shape=[1], initializer=tf.constant_initializer(2.0))  \n  \n  tf.train.Saver().restore(sess, '/tmp/new.model')  \n  \n  print('tf.all_variables:', [v.name for v in tf.all_variables()])  \n  \n  print('w val:',  w.eval())\n  ```\n  # ---------------this is wrong\n  \n  python read-renamed-metagraph.py\n  tf.all_variables: [u'old/w:0']\n  \n  ```\n   import tensorflow as tf  \n  \n   sess = tf.InteractiveSession()  \n  \n   saver = tf.train.import_meta_graph('/tmp/new.model.meta')\n  \n   saver.restore(sess, '/tmp/new.model')\n  \n   print('tf.all_variables:', [v.name for v in tf.all_variables()])\n  ```\n"}