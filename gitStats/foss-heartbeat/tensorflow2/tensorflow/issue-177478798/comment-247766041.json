{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/247766041", "html_url": "https://github.com/tensorflow/tensorflow/issues/4413#issuecomment-247766041", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4413", "id": 247766041, "node_id": "MDEyOklzc3VlQ29tbWVudDI0Nzc2NjA0MQ==", "user": {"login": "liviu-", "id": 9915183, "node_id": "MDQ6VXNlcjk5MTUxODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/9915183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liviu-", "html_url": "https://github.com/liviu-", "followers_url": "https://api.github.com/users/liviu-/followers", "following_url": "https://api.github.com/users/liviu-/following{/other_user}", "gists_url": "https://api.github.com/users/liviu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/liviu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liviu-/subscriptions", "organizations_url": "https://api.github.com/users/liviu-/orgs", "repos_url": "https://api.github.com/users/liviu-/repos", "events_url": "https://api.github.com/users/liviu-/events{/privacy}", "received_events_url": "https://api.github.com/users/liviu-/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-17T12:10:49Z", "updated_at": "2016-09-17T12:17:48Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> I also think it may be something related to the GC, but perhaps Jupyter has a more complex variable persistence system?<br>\nIf you run a cell with</p>\n<div class=\"highlight highlight-source-python\"><pre>tf.InteractiveSession()</pre></div>\n<p>and then delete the contents of the cell, and run</p>\n<pre><code>1\n</code></pre>\n<p>Then <code>1</code> is stored in <code>_</code> (as verified by running <code>print(_)</code>), but the session still works (as verified by <code>tf.constant(0).eval()</code>). Could it be that Jupyter stores a history of outputs somewhere?</p>\n<p>In any case, I understand that the best way to avoid all this is to assign the output of <code>tf.InteractiveSession()</code> to a variable, and I'm not sure if TensorFlow can do anything to avoid this confusion likely caused by Jupyter.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6200749\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hholst80\">@hholst80</a> Bit off-topic, but how did you set Jupyter to output such verbose cell output?</p>", "body_text": "@yaroslavvb I also think it may be something related to the GC, but perhaps Jupyter has a more complex variable persistence system?\nIf you run a cell with\ntf.InteractiveSession()\nand then delete the contents of the cell, and run\n1\n\nThen 1 is stored in _ (as verified by running print(_)), but the session still works (as verified by tf.constant(0).eval()). Could it be that Jupyter stores a history of outputs somewhere?\nIn any case, I understand that the best way to avoid all this is to assign the output of tf.InteractiveSession() to a variable, and I'm not sure if TensorFlow can do anything to avoid this confusion likely caused by Jupyter.\n@hholst80 Bit off-topic, but how did you set Jupyter to output such verbose cell output?", "body": "@yaroslavvb I also think it may be something related to the GC, but perhaps Jupyter has a more complex variable persistence system?\nIf you run a cell with\n\n``` python\ntf.InteractiveSession()\n```\n\nand then delete the contents of the cell, and run\n\n```\n1\n```\n\nThen `1` is stored in `_` (as verified by running `print(_)`), but the session still works (as verified by `tf.constant(0).eval()`). Could it be that Jupyter stores a history of outputs somewhere?\n\nIn any case, I understand that the best way to avoid all this is to assign the output of `tf.InteractiveSession()` to a variable, and I'm not sure if TensorFlow can do anything to avoid this confusion likely caused by Jupyter.\n\n@hholst80 Bit off-topic, but how did you set Jupyter to output such verbose cell output?\n"}