{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22140", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22140/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22140/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22140/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22140", "id": 357956557, "node_id": "MDU6SXNzdWUzNTc5NTY1NTc=", "number": 22140, "title": "Eager mode model.save will not save layer vars if the layer is in list of list", "user": {"login": "chenghuige", "id": 6323467, "node_id": "MDQ6VXNlcjYzMjM0Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6323467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenghuige", "html_url": "https://github.com/chenghuige", "followers_url": "https://api.github.com/users/chenghuige/followers", "following_url": "https://api.github.com/users/chenghuige/following{/other_user}", "gists_url": "https://api.github.com/users/chenghuige/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenghuige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenghuige/subscriptions", "organizations_url": "https://api.github.com/users/chenghuige/orgs", "repos_url": "https://api.github.com/users/chenghuige/repos", "events_url": "https://api.github.com/users/chenghuige/events{/privacy}", "received_events_url": "https://api.github.com/users/chenghuige/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-09-07T07:46:22Z", "updated_at": "2018-09-18T23:36:34Z", "closed_at": "2018-09-18T23:36:34Z", "author_association": "NONE", "body_html": "<p>tf 1.10.1<br>\nlike below model.save will not save CuDNNGRU vars if you use MyLayer in a tf.keras.Model.</p>\n<pre><code>class MyLayer(keras.Model):\n   def __init__(self):\n    super(MyLayer, self).__init__()\n      self.encodes =  [(keras.layers.CuDNNGRU(units=100, \n                                    return_sequences=True, \n                                    return_state=False, \n                                    recurrent_initializer='glorot_uniform'),)]\n\n  def call(self, x):\n    return self.encodes[0][0](x)\n</code></pre>", "body_text": "tf 1.10.1\nlike below model.save will not save CuDNNGRU vars if you use MyLayer in a tf.keras.Model.\nclass MyLayer(keras.Model):\n   def __init__(self):\n    super(MyLayer, self).__init__()\n      self.encodes =  [(keras.layers.CuDNNGRU(units=100, \n                                    return_sequences=True, \n                                    return_state=False, \n                                    recurrent_initializer='glorot_uniform'),)]\n\n  def call(self, x):\n    return self.encodes[0][0](x)", "body": "tf 1.10.1 \r\nlike below model.save will not save CuDNNGRU vars if you use MyLayer in a tf.keras.Model.\r\n\r\n\r\n    class MyLayer(keras.Model):\r\n       def __init__(self):\r\n        super(MyLayer, self).__init__()\r\n          self.encodes =  [(keras.layers.CuDNNGRU(units=100, \r\n                                        return_sequences=True, \r\n                                        return_state=False, \r\n                                        recurrent_initializer='glorot_uniform'),)]\r\n\r\n      def call(self, x):\r\n        return self.encodes[0][0](x)"}