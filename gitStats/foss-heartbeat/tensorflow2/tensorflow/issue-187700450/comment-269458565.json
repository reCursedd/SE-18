{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269458565", "html_url": "https://github.com/tensorflow/tensorflow/pull/5450#issuecomment-269458565", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5450", "id": 269458565, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTQ1ODU2NQ==", "user": {"login": "namrata-ibm", "id": 21953668, "node_id": "MDQ6VXNlcjIxOTUzNjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/21953668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/namrata-ibm", "html_url": "https://github.com/namrata-ibm", "followers_url": "https://api.github.com/users/namrata-ibm/followers", "following_url": "https://api.github.com/users/namrata-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/namrata-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/namrata-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/namrata-ibm/subscriptions", "organizations_url": "https://api.github.com/users/namrata-ibm/orgs", "repos_url": "https://api.github.com/users/namrata-ibm/repos", "events_url": "https://api.github.com/users/namrata-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/namrata-ibm/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-28T10:32:24Z", "updated_at": "2016-12-28T10:32:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22941064\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/guschmue\">@guschmue</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> , While debugging sparse_split_op_test on big endian system, I could observe that tests involving column wise splitting are failing.<br>\nThis seems to happen because <code>context-&gt;input(0).scalar&lt;int&gt;()();</code>  returns 0 instead of 1  in OpKernel for sparse_split test ( from <a href=\"https://github.com/tensorflow/tensorflow/blob/v0.10.0/tensorflow/core/kernels/sparse_split_op.cc\">file</a> - pasted code snippet below : )</p>\n<pre><code>void Compute(OpKernelContext* context) override { \n     const int32 split_dim = context-&gt;input(0).scalar&lt;int&gt;()();  \n     const Tensor&amp; input_indices = context-&gt;input(1); \n</code></pre>\n<p>looks like the <strong>scalar&lt;int&gt;()()</strong> is not converting the data correctly. While stepping through the scalar function, came across below code snippets:<br>\nFrom <a href=\"https://github.com/tensorflow/tensorflow/blob/v0.10.0/tensorflow/core/framework/tensor.h#L621\">file<br>\n</a></p>\n<pre><code>  template &lt;typename T&gt;\n  T* base() const {\n    return reinterpret_cast&lt;T*&gt;(data());\n  }\n};\n\ntemplate &lt;typename T&gt;\nT* Tensor::base() const {\n  return buf_ == nullptr ? nullptr : buf_-&gt;base&lt;T&gt;();\n}\n</code></pre>\n<p>data() picks value<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/tensor.cc#L92\"> from</a>:</p>\n<p><code> void* data() const override { return data_; }</code><br>\nHere printing *data_ gives 1! However this does not propagate to split_dim which remains 0.</p>\n<p>I am unable to catch the exact point where the manipulation is happening. Could you please have a look?</p>", "body_text": "@mrry, @guschmue, @vrv , While debugging sparse_split_op_test on big endian system, I could observe that tests involving column wise splitting are failing.\nThis seems to happen because context->input(0).scalar<int>()();  returns 0 instead of 1  in OpKernel for sparse_split test ( from file - pasted code snippet below : )\nvoid Compute(OpKernelContext* context) override { \n     const int32 split_dim = context->input(0).scalar<int>()();  \n     const Tensor& input_indices = context->input(1); \n\nlooks like the scalar<int>()() is not converting the data correctly. While stepping through the scalar function, came across below code snippets:\nFrom file\n\n  template <typename T>\n  T* base() const {\n    return reinterpret_cast<T*>(data());\n  }\n};\n\ntemplate <typename T>\nT* Tensor::base() const {\n  return buf_ == nullptr ? nullptr : buf_->base<T>();\n}\n\ndata() picks value from:\n void* data() const override { return data_; }\nHere printing *data_ gives 1! However this does not propagate to split_dim which remains 0.\nI am unable to catch the exact point where the manipulation is happening. Could you please have a look?", "body": "@mrry, @guschmue, @vrv , While debugging sparse_split_op_test on big endian system, I could observe that tests involving column wise splitting are failing.\r\n This seems to happen because `context->input(0).scalar<int>()();`  returns 0 instead of 1  in OpKernel for sparse_split test ( from [file](https://github.com/tensorflow/tensorflow/blob/v0.10.0/tensorflow/core/kernels/sparse_split_op.cc ) - pasted code snippet below : ) \r\n```\r\nvoid Compute(OpKernelContext* context) override { \r\n     const int32 split_dim = context->input(0).scalar<int>()();  \r\n     const Tensor& input_indices = context->input(1); \r\n```\r\nlooks like the **scalar\\<int\\>()()** is not converting the data correctly. While stepping through the scalar function, came across below code snippets:\r\nFrom [file\r\n](https://github.com/tensorflow/tensorflow/blob/v0.10.0/tensorflow/core/framework/tensor.h#L621)\r\n\r\n```\r\n  template <typename T>\r\n  T* base() const {\r\n    return reinterpret_cast<T*>(data());\r\n  }\r\n};\r\n\r\ntemplate <typename T>\r\nT* Tensor::base() const {\r\n  return buf_ == nullptr ? nullptr : buf_->base<T>();\r\n}\r\n```\r\ndata() picks value[ from](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/tensor.cc#L92):\r\n\r\n` void* data() const override { return data_; }`\r\nHere printing *data_ gives 1! However this does not propagate to split_dim which remains 0.\r\n\r\n I am unable to catch the exact point where the manipulation is happening. Could you please have a look?"}