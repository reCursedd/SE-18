{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/429450682", "html_url": "https://github.com/tensorflow/tensorflow/issues/22854#issuecomment-429450682", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22854", "id": 429450682, "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTQ1MDY4Mg==", "user": {"login": "dhingratul", "id": 4759327, "node_id": "MDQ6VXNlcjQ3NTkzMjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4759327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhingratul", "html_url": "https://github.com/dhingratul", "followers_url": "https://api.github.com/users/dhingratul/followers", "following_url": "https://api.github.com/users/dhingratul/following{/other_user}", "gists_url": "https://api.github.com/users/dhingratul/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhingratul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhingratul/subscriptions", "organizations_url": "https://api.github.com/users/dhingratul/orgs", "repos_url": "https://api.github.com/users/dhingratul/repos", "events_url": "https://api.github.com/users/dhingratul/events{/privacy}", "received_events_url": "https://api.github.com/users/dhingratul/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-12T20:19:29Z", "updated_at": "2018-10-12T20:19:54Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10539540\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/samikama\">@samikama</a> Based on your recommendation, this is the workflow I have, but i am facing a weird CUBLAS issue now<br>\n<code>2018-10-12 13:15:52.338802: E tensorflow/stream_executor/cuda/cuda_blas.cc:652] failed to run cuBLAS routine cublasSgemm_v2: CUBLAS_STATUS_INTERNAL_ERROR </code></p>\n<pre><code>fid = \"model.pb\"\noutput_nodenames = 'op1,op2,op3'\noutput_node = list(output_nodenames.split(\",\"))\ng = load_graph(fid)\nwith tf.Session(graph=g) as sess:\n\t# Step 1 -- Create Inference graph\n    trt_graph = trt.create_inference_graph(\n    input_graph_def=tf.get_default_graph().as_graph_def(),\n    outputs=output_node,\n    max_batch_size=20000,\n    max_workspace_size_bytes=1 &lt;&lt; 25,\n    precision_mode=\"INT8\",  # TRT Engine precision \"FP32\",\"FP16\" or \"INT8\"\n    minimum_segment_size=2  # minimum number of nodes in an engine\n    )\n    # Step 2 -- Calibration\n    tf.import_graph_def(\n    trt_graph,\n    name='', #DEBUG\n\t)\n    num_samples = 10\n    np.random.seed(0)\n    ip1_data = np.random.rand(num_samples,700,800,6).astype(np.float32)\n    ip1 = tf.get_default_graph().get_tensor_by_name(\"ip1:0\")\n\n    ip2_data = np.random.rand(4).astype(np.float32)\n    ip2 = tf.get_default_graph().get_tensor_by_name(\"ip2:0\")\n\n    ip3_data = np.random.rand(20000,6).astype(np.float32)\n    ip3 = tf.get_default_graph().get_tensor_by_name(\"ip3:0\")\n\n    ip4_data = np.random.rand(20000,4).astype(np.float32)\n    ip4 = tf.get_default_graph().get_tensor_by_name(\"ip4:0\")\n    out1 = tf.get_default_graph().get_tensor_by_name(\"op1:0\")\n    out2 = tf.get_default_graph().get_tensor_by_name(\"op2:0\")\n    out3 = tf.get_default_graph().get_tensor_by_name(\"op3:0\")\n\n    for i in range(num_samples):\n        start_time = timeit.default_timer()\n        _ = sess.run([out1, out2, out3], feed_dict={ip1:ip1_data[i], ip2:ip2_data, ip3:ip3_data, ip4:ip4_data})\n    # Step 3 -- pass through calib_graph_to_infer_graph\n    trt_graph = trt.calib_graph_to_infer_graph(trt_graph)\n    with tf.gfile.GFile(\"trt.pb\", \"wb\") as f:\n        f.write(trt_graph.SerializeToString())\n</code></pre>", "body_text": "@samikama Based on your recommendation, this is the workflow I have, but i am facing a weird CUBLAS issue now\n2018-10-12 13:15:52.338802: E tensorflow/stream_executor/cuda/cuda_blas.cc:652] failed to run cuBLAS routine cublasSgemm_v2: CUBLAS_STATUS_INTERNAL_ERROR \nfid = \"model.pb\"\noutput_nodenames = 'op1,op2,op3'\noutput_node = list(output_nodenames.split(\",\"))\ng = load_graph(fid)\nwith tf.Session(graph=g) as sess:\n\t# Step 1 -- Create Inference graph\n    trt_graph = trt.create_inference_graph(\n    input_graph_def=tf.get_default_graph().as_graph_def(),\n    outputs=output_node,\n    max_batch_size=20000,\n    max_workspace_size_bytes=1 << 25,\n    precision_mode=\"INT8\",  # TRT Engine precision \"FP32\",\"FP16\" or \"INT8\"\n    minimum_segment_size=2  # minimum number of nodes in an engine\n    )\n    # Step 2 -- Calibration\n    tf.import_graph_def(\n    trt_graph,\n    name='', #DEBUG\n\t)\n    num_samples = 10\n    np.random.seed(0)\n    ip1_data = np.random.rand(num_samples,700,800,6).astype(np.float32)\n    ip1 = tf.get_default_graph().get_tensor_by_name(\"ip1:0\")\n\n    ip2_data = np.random.rand(4).astype(np.float32)\n    ip2 = tf.get_default_graph().get_tensor_by_name(\"ip2:0\")\n\n    ip3_data = np.random.rand(20000,6).astype(np.float32)\n    ip3 = tf.get_default_graph().get_tensor_by_name(\"ip3:0\")\n\n    ip4_data = np.random.rand(20000,4).astype(np.float32)\n    ip4 = tf.get_default_graph().get_tensor_by_name(\"ip4:0\")\n    out1 = tf.get_default_graph().get_tensor_by_name(\"op1:0\")\n    out2 = tf.get_default_graph().get_tensor_by_name(\"op2:0\")\n    out3 = tf.get_default_graph().get_tensor_by_name(\"op3:0\")\n\n    for i in range(num_samples):\n        start_time = timeit.default_timer()\n        _ = sess.run([out1, out2, out3], feed_dict={ip1:ip1_data[i], ip2:ip2_data, ip3:ip3_data, ip4:ip4_data})\n    # Step 3 -- pass through calib_graph_to_infer_graph\n    trt_graph = trt.calib_graph_to_infer_graph(trt_graph)\n    with tf.gfile.GFile(\"trt.pb\", \"wb\") as f:\n        f.write(trt_graph.SerializeToString())", "body": "@samikama Based on your recommendation, this is the workflow I have, but i am facing a weird CUBLAS issue now\r\n`2018-10-12 13:15:52.338802: E tensorflow/stream_executor/cuda/cuda_blas.cc:652] failed to run cuBLAS routine cublasSgemm_v2: CUBLAS_STATUS_INTERNAL_ERROR\r\n`\r\n\r\n```\r\nfid = \"model.pb\"\r\noutput_nodenames = 'op1,op2,op3'\r\noutput_node = list(output_nodenames.split(\",\"))\r\ng = load_graph(fid)\r\nwith tf.Session(graph=g) as sess:\r\n\t# Step 1 -- Create Inference graph\r\n    trt_graph = trt.create_inference_graph(\r\n    input_graph_def=tf.get_default_graph().as_graph_def(),\r\n    outputs=output_node,\r\n    max_batch_size=20000,\r\n    max_workspace_size_bytes=1 << 25,\r\n    precision_mode=\"INT8\",  # TRT Engine precision \"FP32\",\"FP16\" or \"INT8\"\r\n    minimum_segment_size=2  # minimum number of nodes in an engine\r\n    )\r\n    # Step 2 -- Calibration\r\n    tf.import_graph_def(\r\n    trt_graph,\r\n    name='', #DEBUG\r\n\t)\r\n    num_samples = 10\r\n    np.random.seed(0)\r\n    ip1_data = np.random.rand(num_samples,700,800,6).astype(np.float32)\r\n    ip1 = tf.get_default_graph().get_tensor_by_name(\"ip1:0\")\r\n\r\n    ip2_data = np.random.rand(4).astype(np.float32)\r\n    ip2 = tf.get_default_graph().get_tensor_by_name(\"ip2:0\")\r\n\r\n    ip3_data = np.random.rand(20000,6).astype(np.float32)\r\n    ip3 = tf.get_default_graph().get_tensor_by_name(\"ip3:0\")\r\n\r\n    ip4_data = np.random.rand(20000,4).astype(np.float32)\r\n    ip4 = tf.get_default_graph().get_tensor_by_name(\"ip4:0\")\r\n    out1 = tf.get_default_graph().get_tensor_by_name(\"op1:0\")\r\n    out2 = tf.get_default_graph().get_tensor_by_name(\"op2:0\")\r\n    out3 = tf.get_default_graph().get_tensor_by_name(\"op3:0\")\r\n\r\n    for i in range(num_samples):\r\n        start_time = timeit.default_timer()\r\n        _ = sess.run([out1, out2, out3], feed_dict={ip1:ip1_data[i], ip2:ip2_data, ip3:ip3_data, ip4:ip4_data})\r\n    # Step 3 -- pass through calib_graph_to_infer_graph\r\n    trt_graph = trt.calib_graph_to_infer_graph(trt_graph)\r\n    with tf.gfile.GFile(\"trt.pb\", \"wb\") as f:\r\n        f.write(trt_graph.SerializeToString())\r\n```\r\n "}