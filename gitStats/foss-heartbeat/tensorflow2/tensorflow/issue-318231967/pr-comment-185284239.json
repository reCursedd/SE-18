{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185284239", "pull_request_review_id": 116641267, "id": 185284239, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTI4NDIzOQ==", "diff_hunk": "@@ -32,74 +32,92 @@ namespace tensorflow {\n namespace tensorrt {\n namespace segment {\n using ::tensorflow::strings::StrAppend;\n-namespace {\n-\n-bool CheckCycles(const SimpleGraph* g, const SimpleNode* src,\n-                 const std::vector<SimpleNode*>& start) {\n-  //  copied from TF ReverseDFS\n-  struct Work {\n-    SimpleNode* node;\n-    bool leave;  // Are we entering or leaving n?\n-  };\n-\n-  std::vector<Work> stack(start.size());\n-  for (int i = 0; i < start.size(); ++i) {\n-    stack[i] = Work{start[i], false};\n-  }\n-\n-  std::vector<bool> visited(g->num_node_ids(), false);\n-  while (!stack.empty()) {\n-    Work w = stack.back();\n-    stack.pop_back();\n-\n-    auto n = w.node;\n-    if (w.leave) {\n-      if (n == src) {\n-        return true;\n-      }\n-      continue;\n-    }\n-\n-    if (visited[n->id()]) continue;\n-    visited[n->id()] = true;\n-    // Arrange to call leave(n) when all done with descendants.\n-    stack.push_back(Work{n, true});\n-\n-    auto nodes = n->in_nodes();\n-    for (const auto node : nodes) {\n-      if (!visited[node->id()]) {\n-        stack.push_back(Work{node, false});\n-      }\n+// A simple graph representation to mirror tensorflow::Graph. This structure\n+// helps saving memory since segmenter modifies the graph in place, preventing\n+// the need to create a copy of the graph. It is composed of edges and nodes.\n+// Nodes keep pointers to original TF nodes.\n+class SimpleNode;\n+class SimpleGraph;\n+class SimpleEdge {\n+ public:\n+  SimpleEdge(int id, SimpleNode* src, int src_port, SimpleNode* dst,\n+             int dst_port, bool is_control = false)\n+      : id_(id),\n+        src_(src),\n+        src_port_(src_port),\n+        dst_(dst),\n+        dst_port_(dst_port),\n+        control_(is_control){};\n+  SimpleNode* src() const { return src_; }\n+  SimpleNode* dst() const { return dst_; }\n+  int src_output() const { return src_port_; }\n+  int dst_input() const { return dst_port_; }\n+  int id() const { return id_; }\n+  bool IsControlEdge() const { return control_; }\n+  ~SimpleEdge() {}\n+\n+ private:\n+  int id_;\n+  SimpleNode* src_;\n+  int src_port_;\n+  SimpleNode* dst_;\n+  int dst_port_;\n+  bool control_;\n+};\n+class SimpleNode {\n+ public:\n+  SimpleNode(const tensorflow::Node* node, const int id);\n+  const std::vector<SimpleEdge*>& in_edges() const { return in_edges_; };\n+  const std::vector<SimpleEdge*>& out_edges() const { return out_edges_; };\n+  std::vector<SimpleNode*> in_nodes() const {\n+    std::vector<SimpleNode*> res;\n+    res.reserve(in_edges_.size());\n+    for (const auto e : in_edges_) {\n+      if (e) res.push_back(e->src());\n     }\n+    return res;\n   }\n-  return false;\n-}\n-\n-bool CanContractEdge(const SimpleEdge* edge, const SimpleGraph* graph) {\n-  const auto src = edge->src();\n-  const auto dst = edge->dst();\n-\n-  // Can't contract edge if doing so would cause a cycle in the\n-  // graph. So, if there is a directed path from 'src' to 'dst', other\n-  // than 'edge' (or any other direct edge from 'src' to 'dst'), then\n-  // combining 'src' and 'dst' will cause a cycle along that path.\n-  //\n-  // In practice, to avoid modifying the graph and to take advantage\n-  // of existing graph functions, we perform an equivalent.\n-  //   1. Get all nodes incoming to 'dst', excluding 'src'\n-  //   2. Reverse DFS from those nodes\n-  //   3. If reverse DFS reaches 'src' then we have a cycle\n-  std::vector<SimpleNode*> dfs_start_nodes;\n-  for (SimpleNode* node : dst->in_nodes()) {\n-    if (node != src) {\n-      dfs_start_nodes.push_back(node);\n-    }\n+  const string& name() const { return node_->name(); }\n+  const tensorflow::Node* tf_node() const { return node_; }\n+  int id() const { return id_; }\n+\n+ private:\n+  const tensorflow::Node* node_;\n+  std::vector<SimpleEdge*> in_edges_;\n+  std::vector<SimpleEdge*> out_edges_;\n+  int id_;\n+\n+  friend class SimpleGraph;\n+};\n+\n+class SimpleGraph {\n+ public:\n+  SimpleGraph(const tensorflow::Graph* g);\n+  void AddControlEdge(SimpleNode* src, SimpleNode* dst);\n+  void AddEdge(SimpleNode* src, int out_port, SimpleNode* dst, int in_port);\n+  void RemoveEdge(const SimpleEdge*);\n+  SimpleNode* FindNodeId(int node_id) {\n+    if (node_id < 0 || node_id > (int)nodes_.size()) return nullptr;\n+    return nodes_[node_id];\n+  }\n+  ~SimpleGraph();\n+  int num_node_ids() const { return nodes_.size(); }\n+  const SimpleNode* source_node() const {\n+    return nodes_[tensorflow::Graph::kSourceId];\n+  }\n+  const SimpleNode* sink_node() const {\n+    return nodes_[tensorflow::Graph::kSinkId];\n   }\n \n-  bool is_cycle = CheckCycles(graph, src, dfs_start_nodes);\n-  return !is_cycle;\n-}\n-}  // namespace\n+ private:\n+  const tensorflow::Graph* g_;\n+  std::vector<SimpleNode*> nodes_;\n+  std::vector<SimpleEdge*> edges_;\n+  // edge_ids_ and node_ids_ contain freed indices.\n+  std::set<int> free_edge_ids_;\n+  std::set<int> free_node_ids_;", "path": "tensorflow/contrib/tensorrt/segment/segment.cc", "position": null, "original_position": 151, "commit_id": "bf70368d36df3ee9a16f5285940d73fb54d911c0", "original_commit_id": "7525a48ebf6f8175cd2845f0fa7ae8ae2a10e1c1", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "This is not used, remove?", "created_at": "2018-05-01T17:45:04Z", "updated_at": "2018-05-02T21:46:24Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18909#discussion_r185284239", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18909", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185284239"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18909#discussion_r185284239"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18909"}}, "body_html": "<p>This is not used, remove?</p>", "body_text": "This is not used, remove?"}