{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/381699239", "html_url": "https://github.com/tensorflow/tensorflow/issues/18532#issuecomment-381699239", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18532", "id": 381699239, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTY5OTIzOQ==", "user": {"login": "knkumar", "id": 989771, "node_id": "MDQ6VXNlcjk4OTc3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/989771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/knkumar", "html_url": "https://github.com/knkumar", "followers_url": "https://api.github.com/users/knkumar/followers", "following_url": "https://api.github.com/users/knkumar/following{/other_user}", "gists_url": "https://api.github.com/users/knkumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/knkumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/knkumar/subscriptions", "organizations_url": "https://api.github.com/users/knkumar/orgs", "repos_url": "https://api.github.com/users/knkumar/repos", "events_url": "https://api.github.com/users/knkumar/events{/privacy}", "received_events_url": "https://api.github.com/users/knkumar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-16T18:14:15Z", "updated_at": "2018-04-16T18:32:20Z", "author_association": "NONE", "body_html": "<p>Hi, thanks for your reply. I am not sure what aspects define the queue internally but let me try to highlight the aspects</p>\n<pre><code>    # create a string input producer to read the tfrecords\n    filename_queue = tf.train.string_input_producer([filenames_train], shuffle=False)\n    ...decoded vars... = read_and_decode(filename_queue)  \n\n    # create a batch to train the model\n    batch = tf.train.batch([...decoded vars... ], \n                           batch_size=1, capacity=2000, num_threads=1) \n</code></pre>\n<p>I process this batch and feed the variables</p>\n<pre><code>x_ord,y_ord,x_acc,y_acc,out_x,out_y,out_xacc,out_yacc = sess.run(batch)\n                               \n_,X_hat_val,loss_val = sess.run([train,X_hat,loss],  \n                        feed_dict={X : np.array([[ x_ord[0,0],y_ord[0,0]]]), \n                                  a : np.array([[ x_acc[0,0], y_acc[0,0] ]]),\n                                  a_prev : np.array([[ out_xacc[0,0], out_yacc[0,0] ]]) })\n</code></pre>", "body_text": "Hi, thanks for your reply. I am not sure what aspects define the queue internally but let me try to highlight the aspects\n    # create a string input producer to read the tfrecords\n    filename_queue = tf.train.string_input_producer([filenames_train], shuffle=False)\n    ...decoded vars... = read_and_decode(filename_queue)  \n\n    # create a batch to train the model\n    batch = tf.train.batch([...decoded vars... ], \n                           batch_size=1, capacity=2000, num_threads=1) \n\nI process this batch and feed the variables\nx_ord,y_ord,x_acc,y_acc,out_x,out_y,out_xacc,out_yacc = sess.run(batch)\n                               \n_,X_hat_val,loss_val = sess.run([train,X_hat,loss],  \n                        feed_dict={X : np.array([[ x_ord[0,0],y_ord[0,0]]]), \n                                  a : np.array([[ x_acc[0,0], y_acc[0,0] ]]),\n                                  a_prev : np.array([[ out_xacc[0,0], out_yacc[0,0] ]]) })", "body": "Hi, thanks for your reply. I am not sure what aspects define the queue internally but let me try to highlight the aspects\r\n\r\n```\r\n    # create a string input producer to read the tfrecords\r\n    filename_queue = tf.train.string_input_producer([filenames_train], shuffle=False)\r\n    ...decoded vars... = read_and_decode(filename_queue)  \r\n\r\n    # create a batch to train the model\r\n    batch = tf.train.batch([...decoded vars... ], \r\n                           batch_size=1, capacity=2000, num_threads=1) \r\n```\r\n\r\nI process this batch and feed the variables\r\n```\r\nx_ord,y_ord,x_acc,y_acc,out_x,out_y,out_xacc,out_yacc = sess.run(batch)\r\n                               \r\n_,X_hat_val,loss_val = sess.run([train,X_hat,loss],  \r\n                        feed_dict={X : np.array([[ x_ord[0,0],y_ord[0,0]]]), \r\n                                  a : np.array([[ x_acc[0,0], y_acc[0,0] ]]),\r\n                                  a_prev : np.array([[ out_xacc[0,0], out_yacc[0,0] ]]) })\r\n```"}