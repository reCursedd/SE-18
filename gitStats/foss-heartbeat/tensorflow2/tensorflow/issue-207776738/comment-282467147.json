{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/282467147", "html_url": "https://github.com/tensorflow/tensorflow/issues/7524#issuecomment-282467147", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7524", "id": 282467147, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjQ2NzE0Nw==", "user": {"login": "mahatosourav91", "id": 25343161, "node_id": "MDQ6VXNlcjI1MzQzMTYx", "avatar_url": "https://avatars0.githubusercontent.com/u/25343161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahatosourav91", "html_url": "https://github.com/mahatosourav91", "followers_url": "https://api.github.com/users/mahatosourav91/followers", "following_url": "https://api.github.com/users/mahatosourav91/following{/other_user}", "gists_url": "https://api.github.com/users/mahatosourav91/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahatosourav91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahatosourav91/subscriptions", "organizations_url": "https://api.github.com/users/mahatosourav91/orgs", "repos_url": "https://api.github.com/users/mahatosourav91/repos", "events_url": "https://api.github.com/users/mahatosourav91/events{/privacy}", "received_events_url": "https://api.github.com/users/mahatosourav91/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-25T07:32:27Z", "updated_at": "2017-02-25T07:32:27Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a></p>\n<p>I have modified the gen_clustering_ops.py and executed the following code.</p>\n<pre><code>from tensorflow.contrib.learn.python.learn.estimators import kmeans as kmeans_lib\nfrom tensorflow.contrib.factorization.python.ops import clustering_ops\nimport random\nimport numpy as np\n\nx = np.array([[random.random() for i in range(198)] for j in range(2384)], dtype=np.float32)\nkm = kmeans_lib.KMeansClustering(num_clusters=200, initial_clusters=clustering_ops.KMEANS_PLUS_PLUS_INIT)\nkm.fit(x, max_steps=300)\n\n</code></pre>\n<p>The previous error got resolved but it generated a new error.</p>\n<pre><code>InvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'input' with dtype float\n\t [[Node: input = Placeholder[dtype=DT_FLOAT, shape=[], _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\n</code></pre>\n<p>After consulting the kmeans_test.py, I modified the code and it works</p>\n<pre><code>from tensorflow.contrib.learn.python.learn.estimators import kmeans as kmeans_lib\nfrom tensorflow.contrib.factorization.python.ops import clustering_ops\nimport random\nimport numpy as np\nimport tensorflow as tf\n\n\ndef input_fn(x):\n\"\"\"Returns an input_fn\"\"\"\ndef _fn():\n       return tf.constant(x), None\nreturn _fn\n\nx = np.array([[random.random() for i in range(198)] for j in range(2384)], dtype=np.float32)\nkm = kmeans_lib.KMeansClustering(num_clusters=200, initial_clusters=clustering_ops.KMEANS_PLUS_PLUS_INIT)\nkm.fit(input_fn=input_fn(x), max_steps=300)\n</code></pre>\n<p>Now looking into the documentation of <code>fit </code>method I couldn't understand if we are allowed to pass only a <code>input_fn</code> as input and not x(numpy ndarray)</p>\n<pre><code>  @deprecated_args(\n      SCIKIT_DECOUPLE_DATE, SCIKIT_DECOUPLE_INSTRUCTIONS, ('x', None),\n      ('y', None), ('batch_size', None)\n  )\n  def fit(self, x=None, y=None, input_fn=None, steps=None, batch_size=None,\n          monitors=None, max_steps=None):\n    # pylint: disable=g-doc-args,g-doc-return-or-yield\n    \"\"\"See `Trainable`.\n\n    Raises:\n      ValueError: If `x` or `y` are not `None` while `input_fn` is not `None`.\n      ValueError: If both `steps` and `max_steps` are not `None`.\n    \"\"\"\n\n</code></pre>\n<p>Please look into it</p>", "body_text": "Hi @yaroslavvb\nI have modified the gen_clustering_ops.py and executed the following code.\nfrom tensorflow.contrib.learn.python.learn.estimators import kmeans as kmeans_lib\nfrom tensorflow.contrib.factorization.python.ops import clustering_ops\nimport random\nimport numpy as np\n\nx = np.array([[random.random() for i in range(198)] for j in range(2384)], dtype=np.float32)\nkm = kmeans_lib.KMeansClustering(num_clusters=200, initial_clusters=clustering_ops.KMEANS_PLUS_PLUS_INIT)\nkm.fit(x, max_steps=300)\n\n\nThe previous error got resolved but it generated a new error.\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'input' with dtype float\n\t [[Node: input = Placeholder[dtype=DT_FLOAT, shape=[], _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\n\nAfter consulting the kmeans_test.py, I modified the code and it works\nfrom tensorflow.contrib.learn.python.learn.estimators import kmeans as kmeans_lib\nfrom tensorflow.contrib.factorization.python.ops import clustering_ops\nimport random\nimport numpy as np\nimport tensorflow as tf\n\n\ndef input_fn(x):\n\"\"\"Returns an input_fn\"\"\"\ndef _fn():\n       return tf.constant(x), None\nreturn _fn\n\nx = np.array([[random.random() for i in range(198)] for j in range(2384)], dtype=np.float32)\nkm = kmeans_lib.KMeansClustering(num_clusters=200, initial_clusters=clustering_ops.KMEANS_PLUS_PLUS_INIT)\nkm.fit(input_fn=input_fn(x), max_steps=300)\n\nNow looking into the documentation of fit method I couldn't understand if we are allowed to pass only a input_fn as input and not x(numpy ndarray)\n  @deprecated_args(\n      SCIKIT_DECOUPLE_DATE, SCIKIT_DECOUPLE_INSTRUCTIONS, ('x', None),\n      ('y', None), ('batch_size', None)\n  )\n  def fit(self, x=None, y=None, input_fn=None, steps=None, batch_size=None,\n          monitors=None, max_steps=None):\n    # pylint: disable=g-doc-args,g-doc-return-or-yield\n    \"\"\"See `Trainable`.\n\n    Raises:\n      ValueError: If `x` or `y` are not `None` while `input_fn` is not `None`.\n      ValueError: If both `steps` and `max_steps` are not `None`.\n    \"\"\"\n\n\nPlease look into it", "body": "Hi @yaroslavvb \r\n\r\nI have modified the gen_clustering_ops.py and executed the following code.\r\n\r\n```\r\nfrom tensorflow.contrib.learn.python.learn.estimators import kmeans as kmeans_lib\r\nfrom tensorflow.contrib.factorization.python.ops import clustering_ops\r\nimport random\r\nimport numpy as np\r\n\r\nx = np.array([[random.random() for i in range(198)] for j in range(2384)], dtype=np.float32)\r\nkm = kmeans_lib.KMeansClustering(num_clusters=200, initial_clusters=clustering_ops.KMEANS_PLUS_PLUS_INIT)\r\nkm.fit(x, max_steps=300)\r\n\r\n```\r\nThe previous error got resolved but it generated a new error.\r\n\r\n```\r\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'input' with dtype float\r\n\t [[Node: input = Placeholder[dtype=DT_FLOAT, shape=[], _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\r\n```\r\n\r\nAfter consulting the kmeans_test.py, I modified the code and it works\r\n\r\n```\r\nfrom tensorflow.contrib.learn.python.learn.estimators import kmeans as kmeans_lib\r\nfrom tensorflow.contrib.factorization.python.ops import clustering_ops\r\nimport random\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n\r\ndef input_fn(x):\r\n\"\"\"Returns an input_fn\"\"\"\r\ndef _fn():\r\n       return tf.constant(x), None\r\nreturn _fn\r\n\r\nx = np.array([[random.random() for i in range(198)] for j in range(2384)], dtype=np.float32)\r\nkm = kmeans_lib.KMeansClustering(num_clusters=200, initial_clusters=clustering_ops.KMEANS_PLUS_PLUS_INIT)\r\nkm.fit(input_fn=input_fn(x), max_steps=300)\r\n```\r\n\r\nNow looking into the documentation of `fit `method I couldn't understand if we are allowed to pass only a `input_fn` as input and not x(numpy ndarray)\r\n\r\n```\r\n  @deprecated_args(\r\n      SCIKIT_DECOUPLE_DATE, SCIKIT_DECOUPLE_INSTRUCTIONS, ('x', None),\r\n      ('y', None), ('batch_size', None)\r\n  )\r\n  def fit(self, x=None, y=None, input_fn=None, steps=None, batch_size=None,\r\n          monitors=None, max_steps=None):\r\n    # pylint: disable=g-doc-args,g-doc-return-or-yield\r\n    \"\"\"See `Trainable`.\r\n\r\n    Raises:\r\n      ValueError: If `x` or `y` are not `None` while `input_fn` is not `None`.\r\n      ValueError: If both `steps` and `max_steps` are not `None`.\r\n    \"\"\"\r\n\r\n```\r\nPlease look into it\r\n"}