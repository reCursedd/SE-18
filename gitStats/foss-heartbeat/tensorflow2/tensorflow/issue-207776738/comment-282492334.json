{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/282492334", "html_url": "https://github.com/tensorflow/tensorflow/issues/7524#issuecomment-282492334", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7524", "id": 282492334, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjQ5MjMzNA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-25T15:50:44Z", "updated_at": "2017-02-25T15:52:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=577277\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinwicke\">@martinwicke</a>  -- do you know if kmeans is still maintained, and if so, who to assign for <a href=\"https://github.com/tensorflow/tensorflow/blob/b07791f6e9b306937eb58f7bb6c3300cd26583af/tensorflow/contrib/learn/python/learn/estimators/kmeans.py\">kmeans.py</a> ?</p>\n<p>Something inside kmeans.py is trying to pass <code>float64</code> to NearestNeighbor op which crashes:</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow.contrib.learn.python.learn.estimators import kmeans as kmeans_lib\nimport random\nimport numpy as np\nx = np.array([[random.random() for i in range(198)] for j in range(2384)])\nkm = kmeans_lib.KMeansClustering(num_clusters=200)\nkm.fit(x)\n</code></pre>\n<p>crashes with</p>\n<pre><code>/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    279             _call_location(), decorator_utils.get_qualified_name(func),\n    280             func.__module__, arg_name, date, instructions)\n--&gt; 281       return func(*args, **kwargs)\n    282     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\n    283         func.__doc__, date, instructions)\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    406     _verify_input_args(x, y, input_fn, None, batch_size)\n    407     if x is not None:\n--&gt; 408       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\n    409       return self\n    410 \n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, batch_size, steps, max_steps, monitors)\n   1336                         steps=steps,\n   1337                         max_steps=max_steps,\n-&gt; 1338                         monitors=all_monitors)\n   1339     return self\n   1340 \n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    279             _call_location(), decorator_utils.get_qualified_name(func),\n    280             func.__module__, arg_name, date, instructions)\n--&gt; 281       return func(*args, **kwargs)\n    282     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\n    283         func.__doc__, date, instructions)\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    422       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\n    423 \n--&gt; 424     loss = self._train_model(input_fn=input_fn, hooks=hooks)\n    425     logging.info('Loss for final step: %s.', loss)\n    426     return self\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)\n    931       features, labels = input_fn()\n    932       self._check_inputs(features, labels)\n--&gt; 933       model_fn_ops = self._call_legacy_get_train_ops(features, labels)\n    934       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)\n    935       all_hooks.extend([\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_legacy_get_train_ops(self, features, labels)\n   1000 \n   1001   def _call_legacy_get_train_ops(self, features, labels):\n-&gt; 1002     train_ops = self._get_train_ops(features, labels)\n   1003     if isinstance(train_ops, model_fn_lib.ModelFnOps):  # Default signature\n   1004       return train_ops\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _get_train_ops(self, features, labels)\n   1159       `ModelFnOps` object.\n   1160     \"\"\"\n-&gt; 1161     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n   1162 \n   1163   def _get_eval_ops(self, features, labels, metrics):\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_model_fn(self, features, labels, mode)\n   1130     if 'model_dir' in model_fn_args:\n   1131       kwargs['model_dir'] = self.model_dir\n-&gt; 1132     model_fn_results = self._model_fn(features, labels, **kwargs)\n   1133 \n   1134     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/kmeans.py in _model_fn(features, labels, mode)\n    199            self._use_mini_batch,\n    200            random_seed=self._random_seed,\n--&gt; 201            kmeans_plus_plus_num_retries=self.\n    202            _kmeans_plus_plus_num_retries).training_graph()\n    203       incr_step = state_ops.assign_add(variables.get_global_step(), 1)\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/factorization/python/ops/clustering_ops.py in training_graph(self)\n    303         cluster_centers = nn_impl.l2_normalize(cluster_centers, dim=1)\n    304 \n--&gt; 305     all_scores, scores, cluster_idx = self._infer_graph(inputs, cluster_centers)\n    306     if self._use_mini_batch:\n    307       training_op = self._mini_batch_training_op(inputs, cluster_idx,\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/factorization/python/ops/clustering_ops.py in _infer_graph(self, inputs, clusters)\n    201       with ops.colocate_with(inp):\n    202         (indices,\n--&gt; 203          distances) = gen_clustering_ops.nearest_neighbors(inp, clusters, 1)\n    204         if self._distance_metric == COSINE_DISTANCE:\n    205           distances *= 0.5\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/factorization/python/ops/gen_clustering_ops.py in nearest_neighbors(points, centers, k, name)\n     89   \"\"\"\n     90   result = _op_def_lib.apply_op(\"NearestNeighbors\", points=points,\n---&gt; 91                                 centers=centers, k=k, name=name)\n     92   return _NearestNeighborsOutput._make(result)\n     93 \n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\n    511             if input_arg.type != types_pb2.DT_INVALID:\n    512               raise TypeError(\"%s expected type of %s.\" %\n--&gt; 513                               (prefix, dtypes.as_dtype(input_arg.type).name))\n    514             else:\n    515               # Update the maps with the default, if needed.\n\nTypeError: Input 'points' of 'NearestNeighbors' Op has type float64 that does not match expected type of float32.\n\n</code></pre>", "body_text": "@martinwicke  -- do you know if kmeans is still maintained, and if so, who to assign for kmeans.py ?\nSomething inside kmeans.py is trying to pass float64 to NearestNeighbor op which crashes:\nimport tensorflow as tf\nfrom tensorflow.contrib.learn.python.learn.estimators import kmeans as kmeans_lib\nimport random\nimport numpy as np\nx = np.array([[random.random() for i in range(198)] for j in range(2384)])\nkm = kmeans_lib.KMeansClustering(num_clusters=200)\nkm.fit(x)\n\ncrashes with\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    279             _call_location(), decorator_utils.get_qualified_name(func),\n    280             func.__module__, arg_name, date, instructions)\n--> 281       return func(*args, **kwargs)\n    282     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\n    283         func.__doc__, date, instructions)\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    406     _verify_input_args(x, y, input_fn, None, batch_size)\n    407     if x is not None:\n--> 408       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\n    409       return self\n    410 \n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, batch_size, steps, max_steps, monitors)\n   1336                         steps=steps,\n   1337                         max_steps=max_steps,\n-> 1338                         monitors=all_monitors)\n   1339     return self\n   1340 \n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    279             _call_location(), decorator_utils.get_qualified_name(func),\n    280             func.__module__, arg_name, date, instructions)\n--> 281       return func(*args, **kwargs)\n    282     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\n    283         func.__doc__, date, instructions)\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    422       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\n    423 \n--> 424     loss = self._train_model(input_fn=input_fn, hooks=hooks)\n    425     logging.info('Loss for final step: %s.', loss)\n    426     return self\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)\n    931       features, labels = input_fn()\n    932       self._check_inputs(features, labels)\n--> 933       model_fn_ops = self._call_legacy_get_train_ops(features, labels)\n    934       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)\n    935       all_hooks.extend([\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_legacy_get_train_ops(self, features, labels)\n   1000 \n   1001   def _call_legacy_get_train_ops(self, features, labels):\n-> 1002     train_ops = self._get_train_ops(features, labels)\n   1003     if isinstance(train_ops, model_fn_lib.ModelFnOps):  # Default signature\n   1004       return train_ops\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _get_train_ops(self, features, labels)\n   1159       `ModelFnOps` object.\n   1160     \"\"\"\n-> 1161     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n   1162 \n   1163   def _get_eval_ops(self, features, labels, metrics):\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_model_fn(self, features, labels, mode)\n   1130     if 'model_dir' in model_fn_args:\n   1131       kwargs['model_dir'] = self.model_dir\n-> 1132     model_fn_results = self._model_fn(features, labels, **kwargs)\n   1133 \n   1134     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/kmeans.py in _model_fn(features, labels, mode)\n    199            self._use_mini_batch,\n    200            random_seed=self._random_seed,\n--> 201            kmeans_plus_plus_num_retries=self.\n    202            _kmeans_plus_plus_num_retries).training_graph()\n    203       incr_step = state_ops.assign_add(variables.get_global_step(), 1)\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/factorization/python/ops/clustering_ops.py in training_graph(self)\n    303         cluster_centers = nn_impl.l2_normalize(cluster_centers, dim=1)\n    304 \n--> 305     all_scores, scores, cluster_idx = self._infer_graph(inputs, cluster_centers)\n    306     if self._use_mini_batch:\n    307       training_op = self._mini_batch_training_op(inputs, cluster_idx,\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/factorization/python/ops/clustering_ops.py in _infer_graph(self, inputs, clusters)\n    201       with ops.colocate_with(inp):\n    202         (indices,\n--> 203          distances) = gen_clustering_ops.nearest_neighbors(inp, clusters, 1)\n    204         if self._distance_metric == COSINE_DISTANCE:\n    205           distances *= 0.5\n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/factorization/python/ops/gen_clustering_ops.py in nearest_neighbors(points, centers, k, name)\n     89   \"\"\"\n     90   result = _op_def_lib.apply_op(\"NearestNeighbors\", points=points,\n---> 91                                 centers=centers, k=k, name=name)\n     92   return _NearestNeighborsOutput._make(result)\n     93 \n\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\n    511             if input_arg.type != types_pb2.DT_INVALID:\n    512               raise TypeError(\"%s expected type of %s.\" %\n--> 513                               (prefix, dtypes.as_dtype(input_arg.type).name))\n    514             else:\n    515               # Update the maps with the default, if needed.\n\nTypeError: Input 'points' of 'NearestNeighbors' Op has type float64 that does not match expected type of float32.", "body": "@martinwicke  -- do you know if kmeans is still maintained, and if so, who to assign for [kmeans.py](https://github.com/tensorflow/tensorflow/blob/b07791f6e9b306937eb58f7bb6c3300cd26583af/tensorflow/contrib/learn/python/learn/estimators/kmeans.py) ?\r\n\r\nSomething inside kmeans.py is trying to pass `float64` to NearestNeighbor op which crashes:\r\n\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.learn.python.learn.estimators import kmeans as kmeans_lib\r\nimport random\r\nimport numpy as np\r\nx = np.array([[random.random() for i in range(198)] for j in range(2384)])\r\nkm = kmeans_lib.KMeansClustering(num_clusters=200)\r\nkm.fit(x)\r\n```\r\ncrashes with\r\n\r\n```\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    279             _call_location(), decorator_utils.get_qualified_name(func),\r\n    280             func.__module__, arg_name, date, instructions)\r\n--> 281       return func(*args, **kwargs)\r\n    282     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\r\n    283         func.__doc__, date, instructions)\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\r\n    406     _verify_input_args(x, y, input_fn, None, batch_size)\r\n    407     if x is not None:\r\n--> 408       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\r\n    409       return self\r\n    410 \r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, batch_size, steps, max_steps, monitors)\r\n   1336                         steps=steps,\r\n   1337                         max_steps=max_steps,\r\n-> 1338                         monitors=all_monitors)\r\n   1339     return self\r\n   1340 \r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    279             _call_location(), decorator_utils.get_qualified_name(func),\r\n    280             func.__module__, arg_name, date, instructions)\r\n--> 281       return func(*args, **kwargs)\r\n    282     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\r\n    283         func.__doc__, date, instructions)\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\r\n    422       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\r\n    423 \r\n--> 424     loss = self._train_model(input_fn=input_fn, hooks=hooks)\r\n    425     logging.info('Loss for final step: %s.', loss)\r\n    426     return self\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)\r\n    931       features, labels = input_fn()\r\n    932       self._check_inputs(features, labels)\r\n--> 933       model_fn_ops = self._call_legacy_get_train_ops(features, labels)\r\n    934       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)\r\n    935       all_hooks.extend([\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_legacy_get_train_ops(self, features, labels)\r\n   1000 \r\n   1001   def _call_legacy_get_train_ops(self, features, labels):\r\n-> 1002     train_ops = self._get_train_ops(features, labels)\r\n   1003     if isinstance(train_ops, model_fn_lib.ModelFnOps):  # Default signature\r\n   1004       return train_ops\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _get_train_ops(self, features, labels)\r\n   1159       `ModelFnOps` object.\r\n   1160     \"\"\"\r\n-> 1161     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\r\n   1162 \r\n   1163   def _get_eval_ops(self, features, labels, metrics):\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_model_fn(self, features, labels, mode)\r\n   1130     if 'model_dir' in model_fn_args:\r\n   1131       kwargs['model_dir'] = self.model_dir\r\n-> 1132     model_fn_results = self._model_fn(features, labels, **kwargs)\r\n   1133 \r\n   1134     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/kmeans.py in _model_fn(features, labels, mode)\r\n    199            self._use_mini_batch,\r\n    200            random_seed=self._random_seed,\r\n--> 201            kmeans_plus_plus_num_retries=self.\r\n    202            _kmeans_plus_plus_num_retries).training_graph()\r\n    203       incr_step = state_ops.assign_add(variables.get_global_step(), 1)\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/factorization/python/ops/clustering_ops.py in training_graph(self)\r\n    303         cluster_centers = nn_impl.l2_normalize(cluster_centers, dim=1)\r\n    304 \r\n--> 305     all_scores, scores, cluster_idx = self._infer_graph(inputs, cluster_centers)\r\n    306     if self._use_mini_batch:\r\n    307       training_op = self._mini_batch_training_op(inputs, cluster_idx,\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/factorization/python/ops/clustering_ops.py in _infer_graph(self, inputs, clusters)\r\n    201       with ops.colocate_with(inp):\r\n    202         (indices,\r\n--> 203          distances) = gen_clustering_ops.nearest_neighbors(inp, clusters, 1)\r\n    204         if self._distance_metric == COSINE_DISTANCE:\r\n    205           distances *= 0.5\r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/contrib/factorization/python/ops/gen_clustering_ops.py in nearest_neighbors(points, centers, k, name)\r\n     89   \"\"\"\r\n     90   result = _op_def_lib.apply_op(\"NearestNeighbors\", points=points,\r\n---> 91                                 centers=centers, k=k, name=name)\r\n     92   return _NearestNeighborsOutput._make(result)\r\n     93 \r\n\r\n/Users/yaroslav/anaconda/envs/tim-jan17/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in apply_op(self, op_type_name, name, **keywords)\r\n    511             if input_arg.type != types_pb2.DT_INVALID:\r\n    512               raise TypeError(\"%s expected type of %s.\" %\r\n--> 513                               (prefix, dtypes.as_dtype(input_arg.type).name))\r\n    514             else:\r\n    515               # Update the maps with the default, if needed.\r\n\r\nTypeError: Input 'points' of 'NearestNeighbors' Op has type float64 that does not match expected type of float32.\r\n\r\n```"}