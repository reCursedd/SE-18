{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/415165045", "html_url": "https://github.com/tensorflow/tensorflow/issues/9073#issuecomment-415165045", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9073", "id": 415165045, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTE2NTA0NQ==", "user": {"login": "avishayzanbar", "id": 16937034, "node_id": "MDQ6VXNlcjE2OTM3MDM0", "avatar_url": "https://avatars0.githubusercontent.com/u/16937034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avishayzanbar", "html_url": "https://github.com/avishayzanbar", "followers_url": "https://api.github.com/users/avishayzanbar/followers", "following_url": "https://api.github.com/users/avishayzanbar/following{/other_user}", "gists_url": "https://api.github.com/users/avishayzanbar/gists{/gist_id}", "starred_url": "https://api.github.com/users/avishayzanbar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avishayzanbar/subscriptions", "organizations_url": "https://api.github.com/users/avishayzanbar/orgs", "repos_url": "https://api.github.com/users/avishayzanbar/repos", "events_url": "https://api.github.com/users/avishayzanbar/events{/privacy}", "received_events_url": "https://api.github.com/users/avishayzanbar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-22T20:16:28Z", "updated_at": "2018-08-23T07:53:49Z", "author_association": "NONE", "body_html": "<p>hello, I am a new user of tensorflow. I wish to integrate graph.pb file into an ios device, and have followed all the compilation instructions carefully, yet when I try to run the camera example app I get the same error as previously mentioned:</p>\n<pre><code>E \n/tensorflow/tensorflow/examples/ios/camera_copy/tensorflow_utils.mm:140] Could not create TensorFlow Graph: Invalid argument: No OpKernel was registered to support Op 'Conv2D' with these attrs.  Registered devices: [CPU], Registered kernels:\n  &lt;no registered kernels&gt;\n\n\t [[{{node pyramid_regression_0/convolution}} = Conv2D[T=DT_FLOAT, data_format=\"NHWC\", dilations=[1, 1, 1, 1], padding=\"SAME\", strides=[1, 1, 1, 1], use_cudnn_on_gpu=true](input_2, pyramid_regression_0/kernel/read)]]\n2018-08-22 16:54:00.303760: F tensorflow/examples/ios/camera_copy/tensorflowUtil.mm:68] Couldn't load model: Invalid argument: No OpKernel was registered to support Op 'Conv2D' with these attrs.  Registered devices: [CPU], Registered kernels:\n  &lt;no registered kernels&gt;\n\n\t [[{{node pyramid_regression_0/convolution}} = Conv2D[T=DT_FLOAT, data_format=\"NHWC\", dilations=[1, 1, 1, 1], padding=\"SAME\", strides=[1, 1, 1, 1], use_cudnn_on_gpu=true](input_2, pyramid_regression_0/kernel/read)]]\n</code></pre>\n<p>I also followed the instructions that <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9924\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/timanglade\">@timanglade</a> detailed in the comments above, but there are some differences (probably due to the versions diffs between a year ago and now)</p>\n<ol>\n<li>\n<p><code>bazel build --copt=\"-DUSE_GEMM_FOR_CONV\" tensorflow/python/tools/print_selective_registration_header</code> compiled without errors</p>\n</li>\n<li>\n<p>when I create the <code>ops_to_register.h</code> file using the <em>bazel-bin</em> command, it adds a strange print of <code>tf.estimator package not installed</code> to the first line. In addition, during the file creation this warning appears multiple times:<br>\n<code> RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88</code></p>\n</li>\n<li>\n<p>when I create the <code>ops_to_register.h</code> file using  <em>python3</em> , it creates the file without strange prints</p>\n</li>\n<li>\n<p>in both cases there are no occurrences of <code>strcmp</code> or <code>strcmpc</code> at all, but instead of <code>Conv2DUsingGemmOp</code> got <code>Conv2DOp</code></p>\n</li>\n<li>\n<p>i tried to use the <code>ops_to_register.h</code> file for the <code>tensorflow/contrib/makefile/compile_ios_tensorflow.sh</code> compilation, but it fails during the compilation:</p>\n</li>\n</ol>\n<pre><code>Undefined symbols for architecture arm64:\n  \"nsync::nsync_cv_signal(nsync::nsync_cv_s_*)\", referenced from:\n      tensorflow::condition_variable::notify_one() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_cv_wait_with_deadline(nsync::nsync_cv_s_*, nsync::nsync_mu_s_*, timespec, nsync::nsync_note_s_*)\", referenced from:\n      tensorflow::condition_variable::wait_until_system_clock(tensorflow::mutex_lock&amp;, std::__1::chrono::time_point&lt;std::__1::chrono::system_clock, std::__1::chrono::duration&lt;long long, std::__1::ratio&lt;1l, 1000000l&gt; &gt; &gt;) in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_cv_init(nsync::nsync_cv_s_*)\", referenced from:\n      tensorflow::condition_variable::condition_variable() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_from_time_point_(std::__1::chrono::time_point&lt;std::__1::chrono::system_clock, std::__1::chrono::duration&lt;long long, std::__1::ratio&lt;1l, 1000000l&gt; &gt; &gt;)\", referenced from:\n      tensorflow::condition_variable::wait_until_system_clock(tensorflow::mutex_lock&amp;, std::__1::chrono::time_point&lt;std::__1::chrono::system_clock, std::__1::chrono::duration&lt;long long, std::__1::ratio&lt;1l, 1000000l&gt; &gt; &gt;) in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_cv_wait(nsync::nsync_cv_s_*, nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::condition_variable::wait(tensorflow::mutex_lock&amp;) in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_runlock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::unlock_shared() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_rlock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::lock_shared() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_unlock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::unlock() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_lock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::lock() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_cv_broadcast(nsync::nsync_cv_s_*)\", referenced from:\n      tensorflow::condition_variable::notify_all() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_init(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::mutex() in libtensorflow-core-arm64.a(mutex.o)\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [/tensorflow/tensorflow/contrib/makefile/gen/bin/ios_ARM64/benchmark] Error 1\n+ '[' 2 -ne 0 ']'\n+ echo 'arm64 compilation failed.'\narm64 compilation failed.\n+ exit 1\n</code></pre>\n<p>environment details:</p>\n<ul>\n<li>tensorflow 1.9.0 (there is tensorflow 1.10.0, but is currently not supported for the ios compilations)</li>\n<li>python 3.6.6</li>\n<li>all the compilations are done with <strong><code>-a arm64</code></strong> only</li>\n</ul>\n<p>does anyone have an idea what went wrong here?</p>", "body_text": "hello, I am a new user of tensorflow. I wish to integrate graph.pb file into an ios device, and have followed all the compilation instructions carefully, yet when I try to run the camera example app I get the same error as previously mentioned:\nE \n/tensorflow/tensorflow/examples/ios/camera_copy/tensorflow_utils.mm:140] Could not create TensorFlow Graph: Invalid argument: No OpKernel was registered to support Op 'Conv2D' with these attrs.  Registered devices: [CPU], Registered kernels:\n  <no registered kernels>\n\n\t [[{{node pyramid_regression_0/convolution}} = Conv2D[T=DT_FLOAT, data_format=\"NHWC\", dilations=[1, 1, 1, 1], padding=\"SAME\", strides=[1, 1, 1, 1], use_cudnn_on_gpu=true](input_2, pyramid_regression_0/kernel/read)]]\n2018-08-22 16:54:00.303760: F tensorflow/examples/ios/camera_copy/tensorflowUtil.mm:68] Couldn't load model: Invalid argument: No OpKernel was registered to support Op 'Conv2D' with these attrs.  Registered devices: [CPU], Registered kernels:\n  <no registered kernels>\n\n\t [[{{node pyramid_regression_0/convolution}} = Conv2D[T=DT_FLOAT, data_format=\"NHWC\", dilations=[1, 1, 1, 1], padding=\"SAME\", strides=[1, 1, 1, 1], use_cudnn_on_gpu=true](input_2, pyramid_regression_0/kernel/read)]]\n\nI also followed the instructions that @timanglade detailed in the comments above, but there are some differences (probably due to the versions diffs between a year ago and now)\n\n\nbazel build --copt=\"-DUSE_GEMM_FOR_CONV\" tensorflow/python/tools/print_selective_registration_header compiled without errors\n\n\nwhen I create the ops_to_register.h file using the bazel-bin command, it adds a strange print of tf.estimator package not installed to the first line. In addition, during the file creation this warning appears multiple times:\n RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88\n\n\nwhen I create the ops_to_register.h file using  python3 , it creates the file without strange prints\n\n\nin both cases there are no occurrences of strcmp or strcmpc at all, but instead of Conv2DUsingGemmOp got Conv2DOp\n\n\ni tried to use the ops_to_register.h file for the tensorflow/contrib/makefile/compile_ios_tensorflow.sh compilation, but it fails during the compilation:\n\n\nUndefined symbols for architecture arm64:\n  \"nsync::nsync_cv_signal(nsync::nsync_cv_s_*)\", referenced from:\n      tensorflow::condition_variable::notify_one() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_cv_wait_with_deadline(nsync::nsync_cv_s_*, nsync::nsync_mu_s_*, timespec, nsync::nsync_note_s_*)\", referenced from:\n      tensorflow::condition_variable::wait_until_system_clock(tensorflow::mutex_lock&, std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000l> > >) in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_cv_init(nsync::nsync_cv_s_*)\", referenced from:\n      tensorflow::condition_variable::condition_variable() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_from_time_point_(std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000l> > >)\", referenced from:\n      tensorflow::condition_variable::wait_until_system_clock(tensorflow::mutex_lock&, std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000l> > >) in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_cv_wait(nsync::nsync_cv_s_*, nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::condition_variable::wait(tensorflow::mutex_lock&) in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_runlock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::unlock_shared() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_rlock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::lock_shared() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_unlock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::unlock() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_lock(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::lock() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_cv_broadcast(nsync::nsync_cv_s_*)\", referenced from:\n      tensorflow::condition_variable::notify_all() in libtensorflow-core-arm64.a(mutex.o)\n  \"nsync::nsync_mu_init(nsync::nsync_mu_s_*)\", referenced from:\n      tensorflow::mutex::mutex() in libtensorflow-core-arm64.a(mutex.o)\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake: *** [/tensorflow/tensorflow/contrib/makefile/gen/bin/ios_ARM64/benchmark] Error 1\n+ '[' 2 -ne 0 ']'\n+ echo 'arm64 compilation failed.'\narm64 compilation failed.\n+ exit 1\n\nenvironment details:\n\ntensorflow 1.9.0 (there is tensorflow 1.10.0, but is currently not supported for the ios compilations)\npython 3.6.6\nall the compilations are done with -a arm64 only\n\ndoes anyone have an idea what went wrong here?", "body": "hello, I am a new user of tensorflow. I wish to integrate graph.pb file into an ios device, and have followed all the compilation instructions carefully, yet when I try to run the camera example app I get the same error as previously mentioned:\r\n```\r\nE \r\n/tensorflow/tensorflow/examples/ios/camera_copy/tensorflow_utils.mm:140] Could not create TensorFlow Graph: Invalid argument: No OpKernel was registered to support Op 'Conv2D' with these attrs.  Registered devices: [CPU], Registered kernels:\r\n  <no registered kernels>\r\n\r\n\t [[{{node pyramid_regression_0/convolution}} = Conv2D[T=DT_FLOAT, data_format=\"NHWC\", dilations=[1, 1, 1, 1], padding=\"SAME\", strides=[1, 1, 1, 1], use_cudnn_on_gpu=true](input_2, pyramid_regression_0/kernel/read)]]\r\n2018-08-22 16:54:00.303760: F tensorflow/examples/ios/camera_copy/tensorflowUtil.mm:68] Couldn't load model: Invalid argument: No OpKernel was registered to support Op 'Conv2D' with these attrs.  Registered devices: [CPU], Registered kernels:\r\n  <no registered kernels>\r\n\r\n\t [[{{node pyramid_regression_0/convolution}} = Conv2D[T=DT_FLOAT, data_format=\"NHWC\", dilations=[1, 1, 1, 1], padding=\"SAME\", strides=[1, 1, 1, 1], use_cudnn_on_gpu=true](input_2, pyramid_regression_0/kernel/read)]]\r\n```\r\n\r\nI also followed the instructions that @timanglade detailed in the comments above, but there are some differences (probably due to the versions diffs between a year ago and now)\r\n1. `bazel build --copt=\"-DUSE_GEMM_FOR_CONV\" tensorflow/python/tools/print_selective_registration_header` compiled without errors\r\n\r\n2. when I create the `ops_to_register.h` file using the _bazel-bin_ command, it adds a strange print of `tf.estimator package not installed` to the first line. In addition, during the file creation this warning appears multiple times:\r\n` RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88`\r\n\r\n3. when I create the `ops_to_register.h` file using  _python3_ , it creates the file without strange prints\r\n4. in both cases there are no occurrences of `strcmp` or `strcmpc` at all, but instead of `Conv2DUsingGemmOp` got `Conv2DOp`\r\n\r\n5. i tried to use the `ops_to_register.h` file for the `tensorflow/contrib/makefile/compile_ios_tensorflow.sh` compilation, but it fails during the compilation:\r\n```\r\nUndefined symbols for architecture arm64:\r\n  \"nsync::nsync_cv_signal(nsync::nsync_cv_s_*)\", referenced from:\r\n      tensorflow::condition_variable::notify_one() in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_cv_wait_with_deadline(nsync::nsync_cv_s_*, nsync::nsync_mu_s_*, timespec, nsync::nsync_note_s_*)\", referenced from:\r\n      tensorflow::condition_variable::wait_until_system_clock(tensorflow::mutex_lock&, std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000l> > >) in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_cv_init(nsync::nsync_cv_s_*)\", referenced from:\r\n      tensorflow::condition_variable::condition_variable() in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_from_time_point_(std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000l> > >)\", referenced from:\r\n      tensorflow::condition_variable::wait_until_system_clock(tensorflow::mutex_lock&, std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000l> > >) in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_cv_wait(nsync::nsync_cv_s_*, nsync::nsync_mu_s_*)\", referenced from:\r\n      tensorflow::condition_variable::wait(tensorflow::mutex_lock&) in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_mu_runlock(nsync::nsync_mu_s_*)\", referenced from:\r\n      tensorflow::mutex::unlock_shared() in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_mu_rlock(nsync::nsync_mu_s_*)\", referenced from:\r\n      tensorflow::mutex::lock_shared() in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_mu_unlock(nsync::nsync_mu_s_*)\", referenced from:\r\n      tensorflow::mutex::unlock() in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_mu_lock(nsync::nsync_mu_s_*)\", referenced from:\r\n      tensorflow::mutex::lock() in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_cv_broadcast(nsync::nsync_cv_s_*)\", referenced from:\r\n      tensorflow::condition_variable::notify_all() in libtensorflow-core-arm64.a(mutex.o)\r\n  \"nsync::nsync_mu_init(nsync::nsync_mu_s_*)\", referenced from:\r\n      tensorflow::mutex::mutex() in libtensorflow-core-arm64.a(mutex.o)\r\nld: symbol(s) not found for architecture arm64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake: *** [/tensorflow/tensorflow/contrib/makefile/gen/bin/ios_ARM64/benchmark] Error 1\r\n+ '[' 2 -ne 0 ']'\r\n+ echo 'arm64 compilation failed.'\r\narm64 compilation failed.\r\n+ exit 1\r\n```\r\n\r\nenvironment details:\r\n- tensorflow 1.9.0 (there is tensorflow 1.10.0, but is currently not supported for the ios compilations)\r\n- python 3.6.6\r\n- all the compilations are done with **`-a arm64`** only\r\n\r\ndoes anyone have an idea what went wrong here?\r\n\r\n"}