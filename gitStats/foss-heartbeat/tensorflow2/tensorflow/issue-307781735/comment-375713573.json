{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/375713573", "html_url": "https://github.com/tensorflow/tensorflow/issues/17932#issuecomment-375713573", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17932", "id": 375713573, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTcxMzU3Mw==", "user": {"login": "rsepassi", "id": 1115739, "node_id": "MDQ6VXNlcjExMTU3Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1115739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsepassi", "html_url": "https://github.com/rsepassi", "followers_url": "https://api.github.com/users/rsepassi/followers", "following_url": "https://api.github.com/users/rsepassi/following{/other_user}", "gists_url": "https://api.github.com/users/rsepassi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsepassi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsepassi/subscriptions", "organizations_url": "https://api.github.com/users/rsepassi/orgs", "repos_url": "https://api.github.com/users/rsepassi/repos", "events_url": "https://api.github.com/users/rsepassi/events{/privacy}", "received_events_url": "https://api.github.com/users/rsepassi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-23T15:59:21Z", "updated_at": "2018-03-23T15:59:21Z", "author_association": "MEMBER", "body_html": "<p>This is consistent with the behavior of all callables in <code>tf.data</code> with <code>tuple</code> inputs. The function <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/data/ops/dataset_ops.py#L1769\"><code>_should_unpack_args</code></a> is used to determine whether inputs to a user-supplied callable should be unpacked (i.e. called as <code>fn(*args)</code>) and is <code>True</code> if the inputs are a <code>tuple</code>. If the elements of a <code>Dataset</code> are tuples, as they are in the example in this thread, then callables must expect the arguments to be passed unpacked.</p>\n<p>For example, here's a <code>Dataset</code> where the elements are tuples and a call to <code>map</code> fails when the <code>map_fn</code> expects only 1 element.</p>\n<pre><code>    def data_gen():\n      text = [[1, 2, 3], [3, 4, 5, 6, 7], [1, 2], [8, 9, 0, 2, 3]]\n      label = [1, 2, 1, 2]\n      for x, y in zip(text, label):\n        yield (x, y)\n\n    dataset = tf.data.Dataset.from_generator(\n        generator=data_gen,\n        output_shapes=(tensor_shape.TensorShape([None]), tensor_shape.TensorShape([])),\n        output_types=(dtypes.int32, dtypes.int32))\n\n    # Fails\n    dataset.map(lambda el: el)\n</code></pre>\n<p>We may want to update this behavior but that's where it stands right now.<br>\nFix right now would be to use a <code>dict</code> going in and apply a <code>map</code> to turn into a tuple afterwards.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>, should we look into updating the behavior of Dataset callables?</p>", "body_text": "This is consistent with the behavior of all callables in tf.data with tuple inputs. The function _should_unpack_args is used to determine whether inputs to a user-supplied callable should be unpacked (i.e. called as fn(*args)) and is True if the inputs are a tuple. If the elements of a Dataset are tuples, as they are in the example in this thread, then callables must expect the arguments to be passed unpacked.\nFor example, here's a Dataset where the elements are tuples and a call to map fails when the map_fn expects only 1 element.\n    def data_gen():\n      text = [[1, 2, 3], [3, 4, 5, 6, 7], [1, 2], [8, 9, 0, 2, 3]]\n      label = [1, 2, 1, 2]\n      for x, y in zip(text, label):\n        yield (x, y)\n\n    dataset = tf.data.Dataset.from_generator(\n        generator=data_gen,\n        output_shapes=(tensor_shape.TensorShape([None]), tensor_shape.TensorShape([])),\n        output_types=(dtypes.int32, dtypes.int32))\n\n    # Fails\n    dataset.map(lambda el: el)\n\nWe may want to update this behavior but that's where it stands right now.\nFix right now would be to use a dict going in and apply a map to turn into a tuple afterwards.\n@mrry, should we look into updating the behavior of Dataset callables?", "body": "This is consistent with the behavior of all callables in `tf.data` with `tuple` inputs. The function [`_should_unpack_args`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/data/ops/dataset_ops.py#L1769) is used to determine whether inputs to a user-supplied callable should be unpacked (i.e. called as `fn(*args)`) and is `True` if the inputs are a `tuple`. If the elements of a `Dataset` are tuples, as they are in the example in this thread, then callables must expect the arguments to be passed unpacked.\r\n\r\nFor example, here's a `Dataset` where the elements are tuples and a call to `map` fails when the `map_fn` expects only 1 element.\r\n\r\n```\r\n    def data_gen():\r\n      text = [[1, 2, 3], [3, 4, 5, 6, 7], [1, 2], [8, 9, 0, 2, 3]]\r\n      label = [1, 2, 1, 2]\r\n      for x, y in zip(text, label):\r\n        yield (x, y)\r\n\r\n    dataset = tf.data.Dataset.from_generator(\r\n        generator=data_gen,\r\n        output_shapes=(tensor_shape.TensorShape([None]), tensor_shape.TensorShape([])),\r\n        output_types=(dtypes.int32, dtypes.int32))\r\n\r\n    # Fails\r\n    dataset.map(lambda el: el)\r\n```\r\n\r\nWe may want to update this behavior but that's where it stands right now.\r\nFix right now would be to use a `dict` going in and apply a `map` to turn into a tuple afterwards.\r\n\r\n@mrry, should we look into updating the behavior of Dataset callables?"}