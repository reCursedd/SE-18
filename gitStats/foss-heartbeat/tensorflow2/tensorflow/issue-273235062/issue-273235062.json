{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14498", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14498/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14498/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14498/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14498", "id": 273235062, "node_id": "MDU6SXNzdWUyNzMyMzUwNjI=", "number": 14498, "title": "The result of tf.control_dependencies is undetermined.", "user": {"login": "gauss-clb", "id": 11674304, "node_id": "MDQ6VXNlcjExNjc0MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/11674304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gauss-clb", "html_url": "https://github.com/gauss-clb", "followers_url": "https://api.github.com/users/gauss-clb/followers", "following_url": "https://api.github.com/users/gauss-clb/following{/other_user}", "gists_url": "https://api.github.com/users/gauss-clb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gauss-clb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gauss-clb/subscriptions", "organizations_url": "https://api.github.com/users/gauss-clb/orgs", "repos_url": "https://api.github.com/users/gauss-clb/repos", "events_url": "https://api.github.com/users/gauss-clb/events{/privacy}", "received_events_url": "https://api.github.com/users/gauss-clb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-12T14:36:29Z", "updated_at": "2017-11-14T21:36:21Z", "closed_at": "2017-11-14T21:36:21Z", "author_association": "NONE", "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nw <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">0</span>)\nop1 <span class=\"pl-k\">=</span> tf.assign(w, <span class=\"pl-c1\">1</span>)\nop2 <span class=\"pl-k\">=</span> tf.assign(w, <span class=\"pl-c1\">2</span>)\nop_1 <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>op1<span class=\"pl-pds\">'</span></span>)\nop_2 <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>op2<span class=\"pl-pds\">'</span></span>)\n\nop1 <span class=\"pl-k\">=</span> tf.Print(op1, [op_1])\nop2 <span class=\"pl-k\">=</span> tf.Print(op2, [op_2])\n\n<span class=\"pl-k\">with</span> tf.control_dependencies([op2]):\n    <span class=\"pl-k\">with</span> tf.control_dependencies([op1]):\n        op <span class=\"pl-k\">=</span> tf.no_op()\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    tf.global_variables_initializer().run()\n    sess.run(op)\n    <span class=\"pl-c1\">print</span>(sess.run(w))</pre></div>\n<p>It sometimes prints <code>1</code> and sometimes prints <code>2</code>.</p>\n<p>Another example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nw <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">0</span>)\nop1 <span class=\"pl-k\">=</span> tf.assign(w, <span class=\"pl-c1\">0</span>)\nop2 <span class=\"pl-k\">=</span> tf.assign(w, <span class=\"pl-c1\">2</span>)\nop_1 <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>op1<span class=\"pl-pds\">'</span></span>)\nop_2 <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>op2<span class=\"pl-pds\">'</span></span>)\n\nop1 <span class=\"pl-k\">=</span> tf.Print(op1, [op_1])\nop2 <span class=\"pl-k\">=</span> tf.Print(op2, [op_2])\n\n<span class=\"pl-k\">with</span> tf.control_dependencies([op1]):\n    op3 <span class=\"pl-k\">=</span> tf.no_op()\n\n<span class=\"pl-k\">with</span> tf.control_dependencies([op3, op2]):\n    op4 <span class=\"pl-k\">=</span> tf.no_op()\n\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    tf.global_variables_initializer().run()\n    sess.run(op4)\n    <span class=\"pl-c1\">print</span>(sess.run(w))</pre></div>\n<p>Sometimes <code>0</code> and sometimes <code>2</code>.</p>", "body_text": "import tensorflow as tf\n\nw = tf.Variable(0)\nop1 = tf.assign(w, 1)\nop2 = tf.assign(w, 2)\nop_1 = tf.constant('op1')\nop_2 = tf.constant('op2')\n\nop1 = tf.Print(op1, [op_1])\nop2 = tf.Print(op2, [op_2])\n\nwith tf.control_dependencies([op2]):\n    with tf.control_dependencies([op1]):\n        op = tf.no_op()\n\nwith tf.Session() as sess:\n    tf.global_variables_initializer().run()\n    sess.run(op)\n    print(sess.run(w))\nIt sometimes prints 1 and sometimes prints 2.\nAnother example:\nimport tensorflow as tf\n\nw = tf.Variable(0)\nop1 = tf.assign(w, 0)\nop2 = tf.assign(w, 2)\nop_1 = tf.constant('op1')\nop_2 = tf.constant('op2')\n\nop1 = tf.Print(op1, [op_1])\nop2 = tf.Print(op2, [op_2])\n\nwith tf.control_dependencies([op1]):\n    op3 = tf.no_op()\n\nwith tf.control_dependencies([op3, op2]):\n    op4 = tf.no_op()\n\n\nwith tf.Session() as sess:\n    tf.global_variables_initializer().run()\n    sess.run(op4)\n    print(sess.run(w))\nSometimes 0 and sometimes 2.", "body": "```python\r\nimport tensorflow as tf\r\n\r\nw = tf.Variable(0)\r\nop1 = tf.assign(w, 1)\r\nop2 = tf.assign(w, 2)\r\nop_1 = tf.constant('op1')\r\nop_2 = tf.constant('op2')\r\n\r\nop1 = tf.Print(op1, [op_1])\r\nop2 = tf.Print(op2, [op_2])\r\n\r\nwith tf.control_dependencies([op2]):\r\n    with tf.control_dependencies([op1]):\r\n        op = tf.no_op()\r\n\r\nwith tf.Session() as sess:\r\n    tf.global_variables_initializer().run()\r\n    sess.run(op)\r\n    print(sess.run(w))\r\n```\r\nIt sometimes prints `1` and sometimes prints `2`.\r\n\r\nAnother example:\r\n```python\r\nimport tensorflow as tf\r\n\r\nw = tf.Variable(0)\r\nop1 = tf.assign(w, 0)\r\nop2 = tf.assign(w, 2)\r\nop_1 = tf.constant('op1')\r\nop_2 = tf.constant('op2')\r\n\r\nop1 = tf.Print(op1, [op_1])\r\nop2 = tf.Print(op2, [op_2])\r\n\r\nwith tf.control_dependencies([op1]):\r\n    op3 = tf.no_op()\r\n\r\nwith tf.control_dependencies([op3, op2]):\r\n    op4 = tf.no_op()\r\n\r\n\r\nwith tf.Session() as sess:\r\n    tf.global_variables_initializer().run()\r\n    sess.run(op4)\r\n    print(sess.run(w))\r\n```\r\nSometimes `0` and sometimes `2`."}