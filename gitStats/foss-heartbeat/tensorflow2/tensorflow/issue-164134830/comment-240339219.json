{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/240339219", "html_url": "https://github.com/tensorflow/tensorflow/issues/3208#issuecomment-240339219", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3208", "id": 240339219, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDMzOTIxOQ==", "user": {"login": "cshapeshifter", "id": 3042135, "node_id": "MDQ6VXNlcjMwNDIxMzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3042135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cshapeshifter", "html_url": "https://github.com/cshapeshifter", "followers_url": "https://api.github.com/users/cshapeshifter/followers", "following_url": "https://api.github.com/users/cshapeshifter/following{/other_user}", "gists_url": "https://api.github.com/users/cshapeshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/cshapeshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cshapeshifter/subscriptions", "organizations_url": "https://api.github.com/users/cshapeshifter/orgs", "repos_url": "https://api.github.com/users/cshapeshifter/repos", "events_url": "https://api.github.com/users/cshapeshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/cshapeshifter/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-17T07:51:09Z", "updated_at": "2016-08-17T08:16:30Z", "author_association": "NONE", "body_html": "<p>I'm encountering the same error when calling <code>learn.Estimator.predict</code> on a restored, already trained model, unless I call <code>learn.Estimator.fit</code> beforehand. The following code is largely based on <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/skflow/text_classification_character_rnn.py\">this example</a>. My guess is that some important stuff isn't initialized by calling <code>predict</code>. For example, I don't see \"Creating TensorFlow device\" or anything like that when only calling <code>predict</code>.</p>\n<p>I'm using a tensorflow 0.10.0rc0 nightly from a few days ago.</p>\n<p>To reproduce:</p>\n<ol>\n<li>Run <code>./text_classification_character_rnn.py -m model</code> to train a model stored in the \"model\" directory</li>\n<li>Run <code>./text_classification_character_rnn.py -m model -t</code> to load the model and make a prediction only, without calling <code>fit</code> first, which causes the error.</li>\n</ol>\n<pre><code>from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom optparse import OptionParser\nimport numpy as np\nfrom sklearn import metrics\nimport pandas\n\nimport tensorflow as tf\nfrom tensorflow.contrib import learn\n\nFLAGS = tf.app.flags.FLAGS\ntf.app.flags.DEFINE_bool('test_with_fake_data', False,\n                         'Test the example code with fake data.')\n\nMAX_DOCUMENT_LENGTH = 200\nHIDDEN_SIZE = 60\n\nparser = OptionParser()\nparser.add_option(\"-m\", \"--model\", dest=\"model_dir\",\n                  help=\"specify current model directory\")\nparser.add_option(\"-t\", \"--testonly\", action=\"store_true\", dest=\"testonly\",\n                  default=False, help=\"test the model without training\")\n\n(options, args) = parser.parse_args()\n\nclass ProgressMonitor(learn.monitors.BaseMonitor):\n    def __init__(self):\n        print('[Monitor] Init')\n    def begin(self, max_steps):\n        print('[Monitor] Starting run.')\n    def end(self):\n        print('[Monitor] Completed run.')\n    def step_begin(self, step):\n        print('[Monitor] Step %d...' % step)\n        return []\n    def step_end(self, step, outputs):\n        pass\n\ndef char_rnn_model(x, y):\n  \"\"\"Character level recurrent neural network model to predict classes.\"\"\"\n\n  # restore saved model if provided\n  y = tf.one_hot(y, 15, 1, 0)\n  byte_list = learn.ops.one_hot_matrix(x, 128)\n  byte_list = tf.unpack(byte_list, axis=1)\n\n  cell = tf.nn.rnn_cell.GRUCell(HIDDEN_SIZE)\n  #cell = tf.nn.rnn_cell.BasicLSTMCell(HIDDEN_SIZE)\n  #cell = tf.nn.rnn_cell.LSTMCell(HIDDEN_SIZE)\n  _, encoding = tf.nn.rnn(cell, byte_list, dtype=tf.float32)\n\n  prediction, loss = learn.models.logistic_regression(encoding, y)\n\n  train_op = tf.contrib.layers.optimize_loss(\n      loss, tf.contrib.framework.get_global_step(),\n      optimizer='Adam', learning_rate=0.01)\n\n  return {'class': tf.argmax(prediction, 1), 'prob': prediction}, loss, train_op\n\n\ndef main(unused_argv):\n\n  # Prepare training and testing data\n  dbpedia = learn.datasets.load_dataset(\n      'dbpedia', test_with_fake_data=FLAGS.test_with_fake_data)\n  x_train = pandas.DataFrame(dbpedia.train.data)[1]\n  y_train = pandas.Series(dbpedia.train.target)\n  x_test = pandas.DataFrame(dbpedia.test.data)[1]\n  y_test = pandas.Series(dbpedia.test.target)\n\n  # Process vocabulary\n  char_processor = learn.preprocessing.ByteProcessor(MAX_DOCUMENT_LENGTH)\n  x_train = np.array(list(char_processor.fit_transform(x_train)))\n  x_test = np.array(list(char_processor.transform(x_test)))\n\n  # Build model\n  classifier = learn.Estimator(model_fn=char_rnn_model, model_dir=options.model_dir)\n\n  # Train and predict\n  monitor = ProgressMonitor()\n  if not options.testonly:\n    classifier.fit(x_train, y_train, max_steps=10, batch_size=10000, monitors=[monitor])\n  y_predicted = classifier.predict(x_test, batch_size=10000)\n  score = metrics.accuracy_score(y_test, y_predicted['class'])\n  print('Accuracy: {0:f}'.format(score))\n\n\nif __name__ == '__main__':\n  tf.app.run()\n</code></pre>\n<p>The error:</p>\n<pre><code>[Monitor] Init\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 454, in apply_op\n    as_ref=input_arg.is_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 628, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 180, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 163, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 346, in make_tensor_proto\n    raise ValueError(\"None values not supported.\")\nValueError: None values not supported.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"./text_classification_character_rnn.py\", line 119, in &lt;module&gt;\n    tf.app.run()\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"./text_classification_character_rnn.py\", line 113, in main\n    y_predicted = classifier.predict(x_test, batch_size=10000)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 323, in predict\n    as_iterable=as_iterable)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 592, in _infer_model\n    predictions = self._get_predict_ops(features)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 824, in _get_predict_ops\n    predictions, _, _ = self._call_model_fn(features, targets, ModeKeys.INFER)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 733, in _call_model_fn\n    return self._model_fn(features, targets)\n  File \"./text_classification_character_rnn.py\", line 73, in char_rnn_model\n    y = tf.one_hot(y, 15, 1, 0)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/array_ops.py\", line 2717, in one_hot\n    name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 1421, in _one_hot\n    axis=axis, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 458, in apply_op\n    as_ref=input_arg.is_ref).dtype.name\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 628, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 180, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 163, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 346, in make_tensor_proto\n    raise ValueError(\"None values not supported.\")\n</code></pre>\n<p>As a workaround, I can call <code>classifier.evaluate(x_train, y_train, batch_size=10000)</code> before calling <code>predict</code>, and then it works fine. Maybe this is not a bug but simply an API misunderstanding. I don't see any indication that <code>evaluate</code> must be called before <code>predict</code> can be called.</p>", "body_text": "I'm encountering the same error when calling learn.Estimator.predict on a restored, already trained model, unless I call learn.Estimator.fit beforehand. The following code is largely based on this example. My guess is that some important stuff isn't initialized by calling predict. For example, I don't see \"Creating TensorFlow device\" or anything like that when only calling predict.\nI'm using a tensorflow 0.10.0rc0 nightly from a few days ago.\nTo reproduce:\n\nRun ./text_classification_character_rnn.py -m model to train a model stored in the \"model\" directory\nRun ./text_classification_character_rnn.py -m model -t to load the model and make a prediction only, without calling fit first, which causes the error.\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom optparse import OptionParser\nimport numpy as np\nfrom sklearn import metrics\nimport pandas\n\nimport tensorflow as tf\nfrom tensorflow.contrib import learn\n\nFLAGS = tf.app.flags.FLAGS\ntf.app.flags.DEFINE_bool('test_with_fake_data', False,\n                         'Test the example code with fake data.')\n\nMAX_DOCUMENT_LENGTH = 200\nHIDDEN_SIZE = 60\n\nparser = OptionParser()\nparser.add_option(\"-m\", \"--model\", dest=\"model_dir\",\n                  help=\"specify current model directory\")\nparser.add_option(\"-t\", \"--testonly\", action=\"store_true\", dest=\"testonly\",\n                  default=False, help=\"test the model without training\")\n\n(options, args) = parser.parse_args()\n\nclass ProgressMonitor(learn.monitors.BaseMonitor):\n    def __init__(self):\n        print('[Monitor] Init')\n    def begin(self, max_steps):\n        print('[Monitor] Starting run.')\n    def end(self):\n        print('[Monitor] Completed run.')\n    def step_begin(self, step):\n        print('[Monitor] Step %d...' % step)\n        return []\n    def step_end(self, step, outputs):\n        pass\n\ndef char_rnn_model(x, y):\n  \"\"\"Character level recurrent neural network model to predict classes.\"\"\"\n\n  # restore saved model if provided\n  y = tf.one_hot(y, 15, 1, 0)\n  byte_list = learn.ops.one_hot_matrix(x, 128)\n  byte_list = tf.unpack(byte_list, axis=1)\n\n  cell = tf.nn.rnn_cell.GRUCell(HIDDEN_SIZE)\n  #cell = tf.nn.rnn_cell.BasicLSTMCell(HIDDEN_SIZE)\n  #cell = tf.nn.rnn_cell.LSTMCell(HIDDEN_SIZE)\n  _, encoding = tf.nn.rnn(cell, byte_list, dtype=tf.float32)\n\n  prediction, loss = learn.models.logistic_regression(encoding, y)\n\n  train_op = tf.contrib.layers.optimize_loss(\n      loss, tf.contrib.framework.get_global_step(),\n      optimizer='Adam', learning_rate=0.01)\n\n  return {'class': tf.argmax(prediction, 1), 'prob': prediction}, loss, train_op\n\n\ndef main(unused_argv):\n\n  # Prepare training and testing data\n  dbpedia = learn.datasets.load_dataset(\n      'dbpedia', test_with_fake_data=FLAGS.test_with_fake_data)\n  x_train = pandas.DataFrame(dbpedia.train.data)[1]\n  y_train = pandas.Series(dbpedia.train.target)\n  x_test = pandas.DataFrame(dbpedia.test.data)[1]\n  y_test = pandas.Series(dbpedia.test.target)\n\n  # Process vocabulary\n  char_processor = learn.preprocessing.ByteProcessor(MAX_DOCUMENT_LENGTH)\n  x_train = np.array(list(char_processor.fit_transform(x_train)))\n  x_test = np.array(list(char_processor.transform(x_test)))\n\n  # Build model\n  classifier = learn.Estimator(model_fn=char_rnn_model, model_dir=options.model_dir)\n\n  # Train and predict\n  monitor = ProgressMonitor()\n  if not options.testonly:\n    classifier.fit(x_train, y_train, max_steps=10, batch_size=10000, monitors=[monitor])\n  y_predicted = classifier.predict(x_test, batch_size=10000)\n  score = metrics.accuracy_score(y_test, y_predicted['class'])\n  print('Accuracy: {0:f}'.format(score))\n\n\nif __name__ == '__main__':\n  tf.app.run()\n\nThe error:\n[Monitor] Init\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 454, in apply_op\n    as_ref=input_arg.is_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 628, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 180, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 163, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 346, in make_tensor_proto\n    raise ValueError(\"None values not supported.\")\nValueError: None values not supported.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"./text_classification_character_rnn.py\", line 119, in <module>\n    tf.app.run()\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"./text_classification_character_rnn.py\", line 113, in main\n    y_predicted = classifier.predict(x_test, batch_size=10000)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 323, in predict\n    as_iterable=as_iterable)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 592, in _infer_model\n    predictions = self._get_predict_ops(features)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 824, in _get_predict_ops\n    predictions, _, _ = self._call_model_fn(features, targets, ModeKeys.INFER)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 733, in _call_model_fn\n    return self._model_fn(features, targets)\n  File \"./text_classification_character_rnn.py\", line 73, in char_rnn_model\n    y = tf.one_hot(y, 15, 1, 0)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/array_ops.py\", line 2717, in one_hot\n    name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 1421, in _one_hot\n    axis=axis, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 458, in apply_op\n    as_ref=input_arg.is_ref).dtype.name\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 628, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 180, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 163, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 346, in make_tensor_proto\n    raise ValueError(\"None values not supported.\")\n\nAs a workaround, I can call classifier.evaluate(x_train, y_train, batch_size=10000) before calling predict, and then it works fine. Maybe this is not a bug but simply an API misunderstanding. I don't see any indication that evaluate must be called before predict can be called.", "body": "I'm encountering the same error when calling `learn.Estimator.predict` on a restored, already trained model, unless I call `learn.Estimator.fit` beforehand. The following code is largely based on [this example](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/skflow/text_classification_character_rnn.py). My guess is that some important stuff isn't initialized by calling `predict`. For example, I don't see \"Creating TensorFlow device\" or anything like that when only calling `predict`.\n\nI'm using a tensorflow 0.10.0rc0 nightly from a few days ago.\n\nTo reproduce:\n1. Run `./text_classification_character_rnn.py -m model` to train a model stored in the \"model\" directory\n2. Run `./text_classification_character_rnn.py -m model -t` to load the model and make a prediction only, without calling `fit` first, which causes the error.\n\n```\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom optparse import OptionParser\nimport numpy as np\nfrom sklearn import metrics\nimport pandas\n\nimport tensorflow as tf\nfrom tensorflow.contrib import learn\n\nFLAGS = tf.app.flags.FLAGS\ntf.app.flags.DEFINE_bool('test_with_fake_data', False,\n                         'Test the example code with fake data.')\n\nMAX_DOCUMENT_LENGTH = 200\nHIDDEN_SIZE = 60\n\nparser = OptionParser()\nparser.add_option(\"-m\", \"--model\", dest=\"model_dir\",\n                  help=\"specify current model directory\")\nparser.add_option(\"-t\", \"--testonly\", action=\"store_true\", dest=\"testonly\",\n                  default=False, help=\"test the model without training\")\n\n(options, args) = parser.parse_args()\n\nclass ProgressMonitor(learn.monitors.BaseMonitor):\n    def __init__(self):\n        print('[Monitor] Init')\n    def begin(self, max_steps):\n        print('[Monitor] Starting run.')\n    def end(self):\n        print('[Monitor] Completed run.')\n    def step_begin(self, step):\n        print('[Monitor] Step %d...' % step)\n        return []\n    def step_end(self, step, outputs):\n        pass\n\ndef char_rnn_model(x, y):\n  \"\"\"Character level recurrent neural network model to predict classes.\"\"\"\n\n  # restore saved model if provided\n  y = tf.one_hot(y, 15, 1, 0)\n  byte_list = learn.ops.one_hot_matrix(x, 128)\n  byte_list = tf.unpack(byte_list, axis=1)\n\n  cell = tf.nn.rnn_cell.GRUCell(HIDDEN_SIZE)\n  #cell = tf.nn.rnn_cell.BasicLSTMCell(HIDDEN_SIZE)\n  #cell = tf.nn.rnn_cell.LSTMCell(HIDDEN_SIZE)\n  _, encoding = tf.nn.rnn(cell, byte_list, dtype=tf.float32)\n\n  prediction, loss = learn.models.logistic_regression(encoding, y)\n\n  train_op = tf.contrib.layers.optimize_loss(\n      loss, tf.contrib.framework.get_global_step(),\n      optimizer='Adam', learning_rate=0.01)\n\n  return {'class': tf.argmax(prediction, 1), 'prob': prediction}, loss, train_op\n\n\ndef main(unused_argv):\n\n  # Prepare training and testing data\n  dbpedia = learn.datasets.load_dataset(\n      'dbpedia', test_with_fake_data=FLAGS.test_with_fake_data)\n  x_train = pandas.DataFrame(dbpedia.train.data)[1]\n  y_train = pandas.Series(dbpedia.train.target)\n  x_test = pandas.DataFrame(dbpedia.test.data)[1]\n  y_test = pandas.Series(dbpedia.test.target)\n\n  # Process vocabulary\n  char_processor = learn.preprocessing.ByteProcessor(MAX_DOCUMENT_LENGTH)\n  x_train = np.array(list(char_processor.fit_transform(x_train)))\n  x_test = np.array(list(char_processor.transform(x_test)))\n\n  # Build model\n  classifier = learn.Estimator(model_fn=char_rnn_model, model_dir=options.model_dir)\n\n  # Train and predict\n  monitor = ProgressMonitor()\n  if not options.testonly:\n    classifier.fit(x_train, y_train, max_steps=10, batch_size=10000, monitors=[monitor])\n  y_predicted = classifier.predict(x_test, batch_size=10000)\n  score = metrics.accuracy_score(y_test, y_predicted['class'])\n  print('Accuracy: {0:f}'.format(score))\n\n\nif __name__ == '__main__':\n  tf.app.run()\n```\n\nThe error:\n\n```\n[Monitor] Init\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 454, in apply_op\n    as_ref=input_arg.is_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 628, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 180, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 163, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 346, in make_tensor_proto\n    raise ValueError(\"None values not supported.\")\nValueError: None values not supported.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"./text_classification_character_rnn.py\", line 119, in <module>\n    tf.app.run()\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"./text_classification_character_rnn.py\", line 113, in main\n    y_predicted = classifier.predict(x_test, batch_size=10000)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 323, in predict\n    as_iterable=as_iterable)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 592, in _infer_model\n    predictions = self._get_predict_ops(features)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 824, in _get_predict_ops\n    predictions, _, _ = self._call_model_fn(features, targets, ModeKeys.INFER)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 733, in _call_model_fn\n    return self._model_fn(features, targets)\n  File \"./text_classification_character_rnn.py\", line 73, in char_rnn_model\n    y = tf.one_hot(y, 15, 1, 0)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/array_ops.py\", line 2717, in one_hot\n    name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 1421, in _one_hot\n    axis=axis, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 458, in apply_op\n    as_ref=input_arg.is_ref).dtype.name\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 628, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 180, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py\", line 163, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 346, in make_tensor_proto\n    raise ValueError(\"None values not supported.\")\n```\n\nAs a workaround, I can call `classifier.evaluate(x_train, y_train, batch_size=10000)` before calling `predict`, and then it works fine. Maybe this is not a bug but simply an API misunderstanding. I don't see any indication that `evaluate` must be called before `predict` can be called.\n"}