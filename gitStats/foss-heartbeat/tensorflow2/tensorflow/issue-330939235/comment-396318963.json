{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/396318963", "html_url": "https://github.com/tensorflow/tensorflow/issues/19885#issuecomment-396318963", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19885", "id": 396318963, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjMxODk2Mw==", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-11T17:20:21Z", "updated_at": "2018-06-11T17:20:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For each <code>tf.summary</code> call you can choose the collection to put it into, and then in <code>merge_all</code> you can choose which collection to merge. I don't like this solution but it's one way to go.</p>\n<p>I think this reflects a design issue with the normal global-collection-based workflow. A similar issue comes with UPDATE_OPS collection: if I want to train two networks alternatively, I'll need to maintain two separate UPDATE_OPS collection.</p>", "body_text": "For each tf.summary call you can choose the collection to put it into, and then in merge_all you can choose which collection to merge. I don't like this solution but it's one way to go.\nI think this reflects a design issue with the normal global-collection-based workflow. A similar issue comes with UPDATE_OPS collection: if I want to train two networks alternatively, I'll need to maintain two separate UPDATE_OPS collection.", "body": "For each `tf.summary` call you can choose the collection to put it into, and then in `merge_all` you can choose which collection to merge. I don't like this solution but it's one way to go.\r\n\r\nI think this reflects a design issue with the normal global-collection-based workflow. A similar issue comes with UPDATE_OPS collection: if I want to train two networks alternatively, I'll need to maintain two separate UPDATE_OPS collection."}