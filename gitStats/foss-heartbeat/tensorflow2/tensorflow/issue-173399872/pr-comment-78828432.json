{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/78828432", "pull_request_review_id": 37278, "id": 78828432, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4ODI4NDMy", "diff_hunk": "@@ -288,27 +313,66 @@ class UnsortedSegmentSumOp : public OpKernel {\n     auto output_flat = output->flat_outer_dims<T>();\n \n     auto data_ptr = data.template flat<T>().data();\n-    functor::UnsortedSegmentSumFunctor<Device, T, Index>()(\n-        context, context->template eigen_device<Device>(), output_rows,\n+    ReductionFunction(context, context->template eigen_device<Device>(), output_rows,\n         segment_ids.shape(), segment_flat, data.NumElements(), data_ptr,\n         output_flat);\n   }\n+private:\n+  Functype ReductionFunction;\n };\n \n-#define REGISTER_CPU_UNSORTED_KERNELS(type, index_type)                \\\n+template <typename Device, class T, class Index>\n+class UnsortedSegmentSumOp\n+  : public UnsortedSegmentBaseOp<Device, T, Index,\n+                                   functor::UnsortedSegmentSumFunctor<Device, T, Index>> {\n+public:\n+  explicit UnsortedSegmentSumOp(OpKernelConstruction* context)\n+    : UnsortedSegmentBaseOp<Device, T, Index, functor::UnsortedSegmentSumFunctor<Device, T, Index>>(context, functor::UnsortedSegmentSumFunctor<Device, T, Index>()) {}\n+};\n+\n+template <typename Device, class T, class Index>\n+class UnsortedSegmentMaxOp\n+  : public UnsortedSegmentBaseOp<Device, T, Index,\n+                functor::UnsortedSegmentMaxFunctor<Device, T, Index>> {", "path": "tensorflow/core/kernels/segment_reduction_ops.cc", "position": null, "original_position": 75, "commit_id": "be3f5a052dad6a40654b8643d258acaf5e16bbef", "original_commit_id": "83fa25331eb279152a5ccd678d1339996e2de794", "user": {"login": "nikste", "id": 11996097, "node_id": "MDQ6VXNlcjExOTk2MDk3", "avatar_url": "https://avatars1.githubusercontent.com/u/11996097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikste", "html_url": "https://github.com/nikste", "followers_url": "https://api.github.com/users/nikste/followers", "following_url": "https://api.github.com/users/nikste/following{/other_user}", "gists_url": "https://api.github.com/users/nikste/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikste/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikste/subscriptions", "organizations_url": "https://api.github.com/users/nikste/orgs", "repos_url": "https://api.github.com/users/nikste/repos", "events_url": "https://api.github.com/users/nikste/events{/privacy}", "received_events_url": "https://api.github.com/users/nikste/received_events", "type": "User", "site_admin": false}, "body": "@andydavis1 , unfortunately I don't see a way to implement this easily.\nI've tried to introduce a BaseFunctor, to pass the specialized Functors as argument for the BaseOp, unfortunately it will only use the BaseFunctors operator, instead of the specialized max and sum operators.\nYou can introduce pointers to use the specialized functors as here:\nhttps://github.com/nikste/tensorflow/blob/TF-test2/tensorflow/core/kernels/segment_reduction_ops.cc#L316\nThis compiles, but breaks upon execution in python.\nMaybe you have a suggestion how this could be done better?\n", "created_at": "2016-09-14T20:07:10Z", "updated_at": "2016-12-12T20:03:37Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4051#discussion_r78828432", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4051", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/78828432"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4051#discussion_r78828432"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4051"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15696327\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/andydavis1\">@andydavis1</a> , unfortunately I don't see a way to implement this easily.<br>\nI've tried to introduce a BaseFunctor, to pass the specialized Functors as argument for the BaseOp, unfortunately it will only use the BaseFunctors operator, instead of the specialized max and sum operators.<br>\nYou can introduce pointers to use the specialized functors as here:<br>\n<a href=\"https://github.com/nikste/tensorflow/blob/TF-test2/tensorflow/core/kernels/segment_reduction_ops.cc#L316\">https://github.com/nikste/tensorflow/blob/TF-test2/tensorflow/core/kernels/segment_reduction_ops.cc#L316</a><br>\nThis compiles, but breaks upon execution in python.<br>\nMaybe you have a suggestion how this could be done better?</p>", "body_text": "@andydavis1 , unfortunately I don't see a way to implement this easily.\nI've tried to introduce a BaseFunctor, to pass the specialized Functors as argument for the BaseOp, unfortunately it will only use the BaseFunctors operator, instead of the specialized max and sum operators.\nYou can introduce pointers to use the specialized functors as here:\nhttps://github.com/nikste/tensorflow/blob/TF-test2/tensorflow/core/kernels/segment_reduction_ops.cc#L316\nThis compiles, but breaks upon execution in python.\nMaybe you have a suggestion how this could be done better?", "in_reply_to_id": 78421740}