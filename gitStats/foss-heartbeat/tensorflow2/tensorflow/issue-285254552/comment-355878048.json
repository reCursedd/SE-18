{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355878048", "html_url": "https://github.com/tensorflow/tensorflow/issues/15755#issuecomment-355878048", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15755", "id": 355878048, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTg3ODA0OA==", "user": {"login": "xiaoshenxian", "id": 10596590, "node_id": "MDQ6VXNlcjEwNTk2NTkw", "avatar_url": "https://avatars0.githubusercontent.com/u/10596590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaoshenxian", "html_url": "https://github.com/xiaoshenxian", "followers_url": "https://api.github.com/users/xiaoshenxian/followers", "following_url": "https://api.github.com/users/xiaoshenxian/following{/other_user}", "gists_url": "https://api.github.com/users/xiaoshenxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaoshenxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaoshenxian/subscriptions", "organizations_url": "https://api.github.com/users/xiaoshenxian/orgs", "repos_url": "https://api.github.com/users/xiaoshenxian/repos", "events_url": "https://api.github.com/users/xiaoshenxian/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaoshenxian/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-08T03:24:11Z", "updated_at": "2018-01-08T03:24:11Z", "author_association": "NONE", "body_html": "<p>Yeah, I agree that there are two many races in that code. However, do you really think that it is normal that the entire work flow failed to process a single simple request in at least 5 seconds (the minimum sleep time after each <code>queue.put()</code>)? I don't think this is reasonable. Thus the log must be printed in a deterministic order as long as the entire work flow can finish to process a single request in no more than 5 seconds.</p>\n<p>So actually it is not important that which thread win the race, but the program failed to process the data in even 5 seconds. If you check the log carefully when the program is running, you can find that some results which should have been print out immediately delayed until several <code>put()</code> actions executed, which spanned to tens of seconds or more.</p>\n<p>Another proof is that when I changed the <code>task()</code> method to using <code>tf.placeholder</code>, as I mentioned before, the log printed very well just as what I expected.</p>\n<p>I found this problem in building a request server. The clients frequently received the result after incredibly long time. During the debug, I cannot find any other place which might block the work flow. I am sorry I can't work out a better way to reproduce the problem.</p>", "body_text": "Yeah, I agree that there are two many races in that code. However, do you really think that it is normal that the entire work flow failed to process a single simple request in at least 5 seconds (the minimum sleep time after each queue.put())? I don't think this is reasonable. Thus the log must be printed in a deterministic order as long as the entire work flow can finish to process a single request in no more than 5 seconds.\nSo actually it is not important that which thread win the race, but the program failed to process the data in even 5 seconds. If you check the log carefully when the program is running, you can find that some results which should have been print out immediately delayed until several put() actions executed, which spanned to tens of seconds or more.\nAnother proof is that when I changed the task() method to using tf.placeholder, as I mentioned before, the log printed very well just as what I expected.\nI found this problem in building a request server. The clients frequently received the result after incredibly long time. During the debug, I cannot find any other place which might block the work flow. I am sorry I can't work out a better way to reproduce the problem.", "body": "Yeah, I agree that there are two many races in that code. However, do you really think that it is normal that the entire work flow failed to process a single simple request in at least 5 seconds (the minimum sleep time after each `queue.put()`)? I don't think this is reasonable. Thus the log must be printed in a deterministic order as long as the entire work flow can finish to process a single request in no more than 5 seconds.\r\n\r\nSo actually it is not important that which thread win the race, but the program failed to process the data in even 5 seconds. If you check the log carefully when the program is running, you can find that some results which should have been print out immediately delayed until several `put()` actions executed, which spanned to tens of seconds or more.\r\n\r\nAnother proof is that when I changed the `task()` method to using `tf.placeholder`, as I mentioned before, the log printed very well just as what I expected.\r\n\r\nI found this problem in building a request server. The clients frequently received the result after incredibly long time. During the debug, I cannot find any other place which might block the work flow. I am sorry I can't work out a better way to reproduce the problem."}