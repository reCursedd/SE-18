{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355469907", "html_url": "https://github.com/tensorflow/tensorflow/issues/15755#issuecomment-355469907", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15755", "id": 355469907, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQ2OTkwNw==", "user": {"login": "xiaoshenxian", "id": 10596590, "node_id": "MDQ6VXNlcjEwNTk2NTkw", "avatar_url": "https://avatars0.githubusercontent.com/u/10596590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaoshenxian", "html_url": "https://github.com/xiaoshenxian", "followers_url": "https://api.github.com/users/xiaoshenxian/followers", "following_url": "https://api.github.com/users/xiaoshenxian/following{/other_user}", "gists_url": "https://api.github.com/users/xiaoshenxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaoshenxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaoshenxian/subscriptions", "organizations_url": "https://api.github.com/users/xiaoshenxian/orgs", "repos_url": "https://api.github.com/users/xiaoshenxian/repos", "events_url": "https://api.github.com/users/xiaoshenxian/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaoshenxian/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-05T04:24:44Z", "updated_at": "2018-01-05T04:24:44Z", "author_association": "NONE", "body_html": "<p>The point is not the exception at the end of the procedure, but the order of the log printed. Also I know nothing missed. But as I mentioned before, the main thread will sleep long enough time after each <code>put()</code> to the queue. So I expect the tensorflow thread would print out the result immediately after the \"put log\" if there is no block happen. Thus the \"put log\" and the \"tensorflow log\" should be printed one after another like below regardless how many threads running:</p>\n<pre><code>[[0 0 0 0 0 0 0 0]]\nround 0, request_queue size is about 0, sleeping 8 secs...\n[[1 1 1 1 1 1 1 1]]\nround 1, request_queue size is about 0, sleeping 7 secs...\n[[2 2 2 2 2 2 2 2]]\nround 2, request_queue size is about 0, sleeping 7 secs...\n[[3 3 3 3 3 3 3 3]]\nround 3, request_queue size is about 0, sleeping 9 secs...\n...\n</code></pre>\n<p>But if the log printed as more than one \"put log\" after a \"tensorflow log\" or more than one \"tensorflow log\" after a \"put log\" (like below), it must indicate that there were some blocks happened so that some thread failed to process the data in time.</p>\n<pre><code>round 0, request_queue size is about 1, sleeping 9 secs...\n[[0 0 0 0 0 0 0 0]]\n[[1 1 1 1 1 1 1 1]]\nround 1, request_queue size is about 0, sleeping 5 secs...\nround 2, request_queue size is about 0, sleeping 8 secs... # \"[[2 2 2 2 2 2 2 2]]\" did not be printed after this line indicates tensorflow thread failed to give the output in even 8 seconds after the queue received the data\nround 3, request_queue size is about 0, sleeping 10 secs...\n[[4 4 4 4 4 4 4 4]] # these 3 lines printed after 10 seconds after the time the line \"round 3\" printed, and right before the time the line \"round 4\" printed, which indicates that the tensorflow thread failed to process both the \"round 2\" and \"round 3\" in time.\n[[2 2 2 2 2 2 2 2]]\n[[3 3 3 3 3 3 3 3]]\nround 4, request_queue size is about 0, sleeping 8 secs...\nround 5, request_queue size is about 0, sleeping 6 secs...\nround 6, request_queue size is about 0, sleeping 10 secs...\n[[6 6 6 6 6 6 6 6]]\n[[5 5 5 5 5 5 5 5]]\n...\n</code></pre>\n<p>I wrote several comments in the log above, providing the proof that tensorflow thread failed to process data in time. Moreover, I believe the python generator got the data right after it was put in the queue, since the size of <code>request_queue</code> was always zero.</p>", "body_text": "The point is not the exception at the end of the procedure, but the order of the log printed. Also I know nothing missed. But as I mentioned before, the main thread will sleep long enough time after each put() to the queue. So I expect the tensorflow thread would print out the result immediately after the \"put log\" if there is no block happen. Thus the \"put log\" and the \"tensorflow log\" should be printed one after another like below regardless how many threads running:\n[[0 0 0 0 0 0 0 0]]\nround 0, request_queue size is about 0, sleeping 8 secs...\n[[1 1 1 1 1 1 1 1]]\nround 1, request_queue size is about 0, sleeping 7 secs...\n[[2 2 2 2 2 2 2 2]]\nround 2, request_queue size is about 0, sleeping 7 secs...\n[[3 3 3 3 3 3 3 3]]\nround 3, request_queue size is about 0, sleeping 9 secs...\n...\n\nBut if the log printed as more than one \"put log\" after a \"tensorflow log\" or more than one \"tensorflow log\" after a \"put log\" (like below), it must indicate that there were some blocks happened so that some thread failed to process the data in time.\nround 0, request_queue size is about 1, sleeping 9 secs...\n[[0 0 0 0 0 0 0 0]]\n[[1 1 1 1 1 1 1 1]]\nround 1, request_queue size is about 0, sleeping 5 secs...\nround 2, request_queue size is about 0, sleeping 8 secs... # \"[[2 2 2 2 2 2 2 2]]\" did not be printed after this line indicates tensorflow thread failed to give the output in even 8 seconds after the queue received the data\nround 3, request_queue size is about 0, sleeping 10 secs...\n[[4 4 4 4 4 4 4 4]] # these 3 lines printed after 10 seconds after the time the line \"round 3\" printed, and right before the time the line \"round 4\" printed, which indicates that the tensorflow thread failed to process both the \"round 2\" and \"round 3\" in time.\n[[2 2 2 2 2 2 2 2]]\n[[3 3 3 3 3 3 3 3]]\nround 4, request_queue size is about 0, sleeping 8 secs...\nround 5, request_queue size is about 0, sleeping 6 secs...\nround 6, request_queue size is about 0, sleeping 10 secs...\n[[6 6 6 6 6 6 6 6]]\n[[5 5 5 5 5 5 5 5]]\n...\n\nI wrote several comments in the log above, providing the proof that tensorflow thread failed to process data in time. Moreover, I believe the python generator got the data right after it was put in the queue, since the size of request_queue was always zero.", "body": "The point is not the exception at the end of the procedure, but the order of the log printed. Also I know nothing missed. But as I mentioned before, the main thread will sleep long enough time after each `put()` to the queue. So I expect the tensorflow thread would print out the result immediately after the \"put log\" if there is no block happen. Thus the \"put log\" and the \"tensorflow log\" should be printed one after another like below regardless how many threads running:\r\n\r\n    [[0 0 0 0 0 0 0 0]]\r\n    round 0, request_queue size is about 0, sleeping 8 secs...\r\n    [[1 1 1 1 1 1 1 1]]\r\n    round 1, request_queue size is about 0, sleeping 7 secs...\r\n    [[2 2 2 2 2 2 2 2]]\r\n    round 2, request_queue size is about 0, sleeping 7 secs...\r\n    [[3 3 3 3 3 3 3 3]]\r\n    round 3, request_queue size is about 0, sleeping 9 secs...\r\n    ...\r\n\r\nBut if the log printed as more than one \"put log\" after a \"tensorflow log\" or more than one \"tensorflow log\" after a \"put log\" (like below), it must indicate that there were some blocks happened so that some thread failed to process the data in time. \r\n\r\n    round 0, request_queue size is about 1, sleeping 9 secs...\r\n    [[0 0 0 0 0 0 0 0]]\r\n    [[1 1 1 1 1 1 1 1]]\r\n    round 1, request_queue size is about 0, sleeping 5 secs...\r\n    round 2, request_queue size is about 0, sleeping 8 secs... # \"[[2 2 2 2 2 2 2 2]]\" did not be printed after this line indicates tensorflow thread failed to give the output in even 8 seconds after the queue received the data\r\n    round 3, request_queue size is about 0, sleeping 10 secs...\r\n    [[4 4 4 4 4 4 4 4]] # these 3 lines printed after 10 seconds after the time the line \"round 3\" printed, and right before the time the line \"round 4\" printed, which indicates that the tensorflow thread failed to process both the \"round 2\" and \"round 3\" in time.\r\n    [[2 2 2 2 2 2 2 2]]\r\n    [[3 3 3 3 3 3 3 3]]\r\n    round 4, request_queue size is about 0, sleeping 8 secs...\r\n    round 5, request_queue size is about 0, sleeping 6 secs...\r\n    round 6, request_queue size is about 0, sleeping 10 secs...\r\n    [[6 6 6 6 6 6 6 6]]\r\n    [[5 5 5 5 5 5 5 5]]\r\n    ...\r\n\r\nI wrote several comments in the log above, providing the proof that tensorflow thread failed to process data in time. Moreover, I believe the python generator got the data right after it was put in the queue, since the size of `request_queue` was always zero."}