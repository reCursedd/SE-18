{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4767", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4767/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4767/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4767/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4767", "id": 181014071, "node_id": "MDU6SXNzdWUxODEwMTQwNzE=", "number": 4767, "title": "Problem initializing DT_DOUBLE variables in distributed TF", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-04T21:50:05Z", "updated_at": "2016-10-04T23:33:44Z", "closed_at": "2016-10-04T22:47:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>If you save code below as <code>init_bug.py</code> and run as <code>python init_bug.py</code>, it crashes with error below when running <code>init_op</code>. It works fine using local session or when changing <code>dtype</code> to <code>np.float32</code>. Also fails for <code>np.int32</code> type. Tried on 0.11rc0 on MacOS</p>\n<p><code>tensorflow.python.framework.errors.InternalError: Output 0 of type float_ref does not match declared output type double_ref for node Variable = Variable[container=\"\", dtype=DT_DOUBLE, shape=[], shared_name=\"\", _device=\"/job:worker/replica:0/task:0/cpu:0\"]() </code></p>\n<pre><code>import subprocess, sys\nimport tensorflow as tf\nimport numpy as np\n\nworker_ip=\"127.0.0.1:12222\"\ncluster = {\"worker\": [worker_ip]}\nclusterspec = tf.train.ClusterSpec(cluster).as_cluster_def()\n\ndef launch_worker():\n  def runcmd(cmd): subprocess.Popen(cmd, shell=True, stderr=subprocess.STDOUT)\n  runcmd(\"python init_bug.py worker\")\n\nif __name__=='__main__':\n  if len(sys.argv)&lt;2:\n    dtype=np.float64\n    global_param_var = tf.Variable(np.array(1).astype(dtype), dtype=dtype)\n    init_op = tf.initialize_all_variables()\n    launch_worker()\n    sess = tf.Session(\"grpc://\"+worker_ip)\n    sess.run(init_op)\n\n  else:\n    print(\"Launching worker\")\n    server = tf.train.Server(clusterspec, job_name=\"worker\")\n    server.join()\n</code></pre>", "body_text": "If you save code below as init_bug.py and run as python init_bug.py, it crashes with error below when running init_op. It works fine using local session or when changing dtype to np.float32. Also fails for np.int32 type. Tried on 0.11rc0 on MacOS\ntensorflow.python.framework.errors.InternalError: Output 0 of type float_ref does not match declared output type double_ref for node Variable = Variable[container=\"\", dtype=DT_DOUBLE, shape=[], shared_name=\"\", _device=\"/job:worker/replica:0/task:0/cpu:0\"]() \nimport subprocess, sys\nimport tensorflow as tf\nimport numpy as np\n\nworker_ip=\"127.0.0.1:12222\"\ncluster = {\"worker\": [worker_ip]}\nclusterspec = tf.train.ClusterSpec(cluster).as_cluster_def()\n\ndef launch_worker():\n  def runcmd(cmd): subprocess.Popen(cmd, shell=True, stderr=subprocess.STDOUT)\n  runcmd(\"python init_bug.py worker\")\n\nif __name__=='__main__':\n  if len(sys.argv)<2:\n    dtype=np.float64\n    global_param_var = tf.Variable(np.array(1).astype(dtype), dtype=dtype)\n    init_op = tf.initialize_all_variables()\n    launch_worker()\n    sess = tf.Session(\"grpc://\"+worker_ip)\n    sess.run(init_op)\n\n  else:\n    print(\"Launching worker\")\n    server = tf.train.Server(clusterspec, job_name=\"worker\")\n    server.join()", "body": "If you save code below as `init_bug.py` and run as `python init_bug.py`, it crashes with error below when running `init_op`. It works fine using local session or when changing `dtype` to `np.float32`. Also fails for `np.int32` type. Tried on 0.11rc0 on MacOS\n\n`tensorflow.python.framework.errors.InternalError: Output 0 of type float_ref does not match declared output type double_ref for node Variable = Variable[container=\"\", dtype=DT_DOUBLE, shape=[], shared_name=\"\", _device=\"/job:worker/replica:0/task:0/cpu:0\"]()\n`\n\n```\nimport subprocess, sys\nimport tensorflow as tf\nimport numpy as np\n\nworker_ip=\"127.0.0.1:12222\"\ncluster = {\"worker\": [worker_ip]}\nclusterspec = tf.train.ClusterSpec(cluster).as_cluster_def()\n\ndef launch_worker():\n  def runcmd(cmd): subprocess.Popen(cmd, shell=True, stderr=subprocess.STDOUT)\n  runcmd(\"python init_bug.py worker\")\n\nif __name__=='__main__':\n  if len(sys.argv)<2:\n    dtype=np.float64\n    global_param_var = tf.Variable(np.array(1).astype(dtype), dtype=dtype)\n    init_op = tf.initialize_all_variables()\n    launch_worker()\n    sess = tf.Session(\"grpc://\"+worker_ip)\n    sess.run(init_op)\n\n  else:\n    print(\"Launching worker\")\n    server = tf.train.Server(clusterspec, job_name=\"worker\")\n    server.join()\n```\n"}