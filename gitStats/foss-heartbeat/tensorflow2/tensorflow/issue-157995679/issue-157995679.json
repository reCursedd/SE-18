{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2609", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2609/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2609/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2609/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2609", "id": 157995679, "node_id": "MDU6SXNzdWUxNTc5OTU2Nzk=", "number": 2609, "title": "Feed Cifar10 tutorial with an external image (jpg/png) 32x32 image get label as output", "user": {"login": "nsalman", "id": 19695943, "node_id": "MDQ6VXNlcjE5Njk1OTQz", "avatar_url": "https://avatars3.githubusercontent.com/u/19695943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsalman", "html_url": "https://github.com/nsalman", "followers_url": "https://api.github.com/users/nsalman/followers", "following_url": "https://api.github.com/users/nsalman/following{/other_user}", "gists_url": "https://api.github.com/users/nsalman/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsalman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsalman/subscriptions", "organizations_url": "https://api.github.com/users/nsalman/orgs", "repos_url": "https://api.github.com/users/nsalman/repos", "events_url": "https://api.github.com/users/nsalman/events{/privacy}", "received_events_url": "https://api.github.com/users/nsalman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-01T20:09:31Z", "updated_at": "2016-06-01T20:24:55Z", "closed_at": "2016-06-01T20:24:55Z", "author_association": "NONE", "body_html": "<p>Hello,</p>\n<p>I am trying to use the trained machine based on the Cifar10 tutorial and would like to feed<br>\nit with an external image 32x32 (jpg or png). My goal is to be able to get the label as an output.<br>\nIn other words, I want to feed the Network with a jpeg image of size 32 x 32 with no label as an input and have the inference process \u201cgive me\u201dthe tf.argmax(logits, 1).</p>\n<p>I have been trying to do that based on the CIfar10 Tutorial and unfortunately always have issues. especially with the Session concept and the batch concept.</p>\n<p>here is the implemented code so far:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python</span>\n\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> absolute_import\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> division\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n\n<span class=\"pl-k\">from</span> datetime <span class=\"pl-k\">import</span> datetime\n<span class=\"pl-k\">import</span> math\n<span class=\"pl-k\">import</span> time\n\n<span class=\"pl-k\">import</span> tensorflow.python.platform\n<span class=\"pl-k\">from</span> tensorflow.python.platform <span class=\"pl-k\">import</span> gfile\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">import</span> cifar10\n<span class=\"pl-k\">import</span> cifar10_input\n<span class=\"pl-k\">import</span> os\n<span class=\"pl-k\">import</span> faultnet_flags\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">PIL</span> <span class=\"pl-k\">import</span> Image\n\n<span class=\"pl-c1\">FLAGS</span> <span class=\"pl-k\">=</span> tf.app.flags.<span class=\"pl-c1\">FLAGS</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">evaluate</span>():\n\n  filename_queue <span class=\"pl-k\">=</span> tf.train.string_input_producer([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/home/tensor/.../inputImage.jpg<span class=\"pl-pds\">'</span></span>])\n\n  reader <span class=\"pl-k\">=</span> tf.WholeFileReader()\n  key, value <span class=\"pl-k\">=</span> reader.read(filename_queue)\n\n  input_img <span class=\"pl-k\">=</span> tf.image.decode_jpeg(value)\n\n  init_op <span class=\"pl-k\">=</span> tf.initialize_all_variables()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Problem in here with Graph / session</span>\n  <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(init_op)\n\n    coord <span class=\"pl-k\">=</span> tf.train.Coordinator()\n    threads <span class=\"pl-k\">=</span> tf.train.start_queue_runners(<span class=\"pl-v\">coord</span><span class=\"pl-k\">=</span>coord)\n\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1</span>): \n      image <span class=\"pl-k\">=</span> input_img.eval()\n\n    <span class=\"pl-c1\">print</span>(image.shape)\n    Image.fromarray(np.asarray(image)).show()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Problem in here is that I have only one image as input and have no label and would like to have</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> it compatible with the Cifar10 network</span>\n    reshaped_image <span class=\"pl-k\">=</span> tf.cast(image, tf.float32)\n    height <span class=\"pl-k\">=</span> <span class=\"pl-c1\">FLAGS</span>.resized_image_size\n    width <span class=\"pl-k\">=</span> <span class=\"pl-c1\">FLAGS</span>.resized_image_size\n    resized_image <span class=\"pl-k\">=</span> tf.image.resize_image_with_crop_or_pad(reshaped_image, width, height)\n    float_image <span class=\"pl-k\">=</span> tf.image.per_image_whitening(resized_image)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> reshaped_image</span>\n    num_preprocess_threads <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\n    images <span class=\"pl-k\">=</span> tf.train.batch(\n      [float_image],\n      <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">128</span>,\n      <span class=\"pl-v\">num_threads</span><span class=\"pl-k\">=</span>num_preprocess_threads,\n      <span class=\"pl-v\">capacity</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">128</span>)\n    coord.request_stop()\n    coord.join(threads)\n\n    logits <span class=\"pl-k\">=</span> faultnet.inference(images)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Calculate predictions.</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>top_k_predict_op = tf.argmax(logits, 1)</span>\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print('Current image is: ')</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> print(top_k_predict_op[0])</span>\n\n    my_classification <span class=\"pl-k\">=</span> sess.run(tf.argmax(logits, <span class=\"pl-c1\">1</span>))\n\n    <span class=\"pl-c1\">print</span> (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Predicted <span class=\"pl-pds\">'</span></span>, my_classification[<span class=\"pl-c1\">0</span>], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> for your input image.<span class=\"pl-pds\">\"</span></span>)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">argv</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n  evaluate()\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n  tf.app.run()</pre></div>\n<p>Thank your for your help.<br>\nN.</p>", "body_text": "Hello,\nI am trying to use the trained machine based on the Cifar10 tutorial and would like to feed\nit with an external image 32x32 (jpg or png). My goal is to be able to get the label as an output.\nIn other words, I want to feed the Network with a jpeg image of size 32 x 32 with no label as an input and have the inference process \u201cgive me\u201dthe tf.argmax(logits, 1).\nI have been trying to do that based on the CIfar10 Tutorial and unfortunately always have issues. especially with the Session concept and the batch concept.\nhere is the implemented code so far:\n#!/usr/bin/env python\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom datetime import datetime\nimport math\nimport time\n\nimport tensorflow.python.platform\nfrom tensorflow.python.platform import gfile\nimport numpy as np\nimport tensorflow as tf\n\nimport cifar10\nimport cifar10_input\nimport os\nimport faultnet_flags\nfrom PIL import Image\n\nFLAGS = tf.app.flags.FLAGS\n\ndef evaluate():\n\n  filename_queue = tf.train.string_input_producer(['/home/tensor/.../inputImage.jpg'])\n\n  reader = tf.WholeFileReader()\n  key, value = reader.read(filename_queue)\n\n  input_img = tf.image.decode_jpeg(value)\n\n  init_op = tf.initialize_all_variables()\n\n# Problem in here with Graph / session\n  with tf.Session() as sess:\n    sess.run(init_op)\n\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(coord=coord)\n\n    for i in range(1): \n      image = input_img.eval()\n\n    print(image.shape)\n    Image.fromarray(np.asarray(image)).show()\n\n# Problem in here is that I have only one image as input and have no label and would like to have\n# it compatible with the Cifar10 network\n    reshaped_image = tf.cast(image, tf.float32)\n    height = FLAGS.resized_image_size\n    width = FLAGS.resized_image_size\n    resized_image = tf.image.resize_image_with_crop_or_pad(reshaped_image, width, height)\n    float_image = tf.image.per_image_whitening(resized_image)  # reshaped_image\n    num_preprocess_threads = 1\n    images = tf.train.batch(\n      [float_image],\n      batch_size=128,\n      num_threads=num_preprocess_threads,\n      capacity=128)\n    coord.request_stop()\n    coord.join(threads)\n\n    logits = faultnet.inference(images)\n\n    # Calculate predictions.\n    #top_k_predict_op = tf.argmax(logits, 1)\n\n    # print('Current image is: ')\n    # print(top_k_predict_op[0])\n\n    my_classification = sess.run(tf.argmax(logits, 1))\n\n    print ('Predicted ', my_classification[0], \" for your input image.\")\n\n\ndef main(argv=None):\n  evaluate()\n\nif __name__ == '__main__':\n  tf.app.run()\nThank your for your help.\nN.", "body": "Hello,\n\nI am trying to use the trained machine based on the Cifar10 tutorial and would like to feed\nit with an external image 32x32 (jpg or png). My goal is to be able to get the label as an output.\nIn other words, I want to feed the Network with a jpeg image of size 32 x 32 with no label as an input and have the inference process \u201cgive me\u201dthe tf.argmax(logits, 1). \n\nI have been trying to do that based on the CIfar10 Tutorial and unfortunately always have issues. especially with the Session concept and the batch concept.\n\nhere is the implemented code so far:\n\n``` python\n\n#!/usr/bin/env python\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom datetime import datetime\nimport math\nimport time\n\nimport tensorflow.python.platform\nfrom tensorflow.python.platform import gfile\nimport numpy as np\nimport tensorflow as tf\n\nimport cifar10\nimport cifar10_input\nimport os\nimport faultnet_flags\nfrom PIL import Image\n\nFLAGS = tf.app.flags.FLAGS\n\ndef evaluate():\n\n  filename_queue = tf.train.string_input_producer(['/home/tensor/.../inputImage.jpg'])\n\n  reader = tf.WholeFileReader()\n  key, value = reader.read(filename_queue)\n\n  input_img = tf.image.decode_jpeg(value)\n\n  init_op = tf.initialize_all_variables()\n\n# Problem in here with Graph / session\n  with tf.Session() as sess:\n    sess.run(init_op)\n\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(coord=coord)\n\n    for i in range(1): \n      image = input_img.eval()\n\n    print(image.shape)\n    Image.fromarray(np.asarray(image)).show()\n\n# Problem in here is that I have only one image as input and have no label and would like to have\n# it compatible with the Cifar10 network\n    reshaped_image = tf.cast(image, tf.float32)\n    height = FLAGS.resized_image_size\n    width = FLAGS.resized_image_size\n    resized_image = tf.image.resize_image_with_crop_or_pad(reshaped_image, width, height)\n    float_image = tf.image.per_image_whitening(resized_image)  # reshaped_image\n    num_preprocess_threads = 1\n    images = tf.train.batch(\n      [float_image],\n      batch_size=128,\n      num_threads=num_preprocess_threads,\n      capacity=128)\n    coord.request_stop()\n    coord.join(threads)\n\n    logits = faultnet.inference(images)\n\n    # Calculate predictions.\n    #top_k_predict_op = tf.argmax(logits, 1)\n\n    # print('Current image is: ')\n    # print(top_k_predict_op[0])\n\n    my_classification = sess.run(tf.argmax(logits, 1))\n\n    print ('Predicted ', my_classification[0], \" for your input image.\")\n\n\ndef main(argv=None):\n  evaluate()\n\nif __name__ == '__main__':\n  tf.app.run()\n```\n\nThank your for your help.\nN.\n"}