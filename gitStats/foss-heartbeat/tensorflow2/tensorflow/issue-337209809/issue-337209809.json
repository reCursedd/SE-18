{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20436", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20436/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20436/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20436/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20436", "id": 337209809, "node_id": "MDU6SXNzdWUzMzcyMDk4MDk=", "number": 20436, "title": "Memory leaking in tf.data.Dataset in eager mode", "user": {"login": "phizaz", "id": 451667, "node_id": "MDQ6VXNlcjQ1MTY2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/451667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phizaz", "html_url": "https://github.com/phizaz", "followers_url": "https://api.github.com/users/phizaz/followers", "following_url": "https://api.github.com/users/phizaz/following{/other_user}", "gists_url": "https://api.github.com/users/phizaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/phizaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phizaz/subscriptions", "organizations_url": "https://api.github.com/users/phizaz/orgs", "repos_url": "https://api.github.com/users/phizaz/repos", "events_url": "https://api.github.com/users/phizaz/events{/privacy}", "received_events_url": "https://api.github.com/users/phizaz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 736653459, "node_id": "MDU6TGFiZWw3MzY2NTM0NTk=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:eager", "name": "comp:eager", "color": "0052cc", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-06-30T12:01:32Z", "updated_at": "2018-07-24T22:42:08Z", "closed_at": "2018-07-24T22:42:08Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>:  3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 9.0</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p><code>tf.data.Dataset</code> doesn't seem to free its own memory usage even it is out of scope in eager execution mode.</p>\n<p>The memory I'm mentioning is the main memory not GPU's memory.</p>\n<h3>Source code / logs</h3>\n<p>The following codes are run in Jupyterlab.</p>\n<p>Block 1:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\ntf.enable_eager_execution()\n</code></pre>\n<p>Block 2:</p>\n<pre><code>def run():\n    data = tf.data.Dataset.from_tensor_slices(np.zeros((60000, 32, 32, 3))) \n    data = data.shuffle(10000)\n    data = data.batch(128)\n    x = next(iter(data))\n\nrun()\n</code></pre>\n<p>I repeat Block 2 many times and the memory usage grows each time.</p>\n<p>Note: <code>gc.collect()</code> doesn't have any effect.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.8.0\nPython version:  3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: CUDA 9.0\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\ntf.data.Dataset doesn't seem to free its own memory usage even it is out of scope in eager execution mode.\nThe memory I'm mentioning is the main memory not GPU's memory.\nSource code / logs\nThe following codes are run in Jupyterlab.\nBlock 1:\nimport tensorflow as tf\nimport numpy as np\n\ntf.enable_eager_execution()\n\nBlock 2:\ndef run():\n    data = tf.data.Dataset.from_tensor_slices(np.zeros((60000, 32, 32, 3))) \n    data = data.shuffle(10000)\n    data = data.batch(128)\n    x = next(iter(data))\n\nrun()\n\nI repeat Block 2 many times and the memory usage grows each time.\nNote: gc.collect() doesn't have any effect.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**:  3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: CUDA 9.0\r\n- **GPU model and memory**: \r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\n\r\n`tf.data.Dataset` doesn't seem to free its own memory usage even it is out of scope in eager execution mode.\r\n\r\nThe memory I'm mentioning is the main memory not GPU's memory.\r\n\r\n### Source code / logs\r\n\r\nThe following codes are run in Jupyterlab.\r\n\r\nBlock 1: \r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ntf.enable_eager_execution()\r\n```\r\n\r\nBlock 2: \r\n```\r\ndef run():\r\n    data = tf.data.Dataset.from_tensor_slices(np.zeros((60000, 32, 32, 3))) \r\n    data = data.shuffle(10000)\r\n    data = data.batch(128)\r\n    x = next(iter(data))\r\n\r\nrun()\r\n```\r\n\r\nI repeat Block 2 many times and the memory usage grows each time.\r\n\r\nNote: `gc.collect()` doesn't have any effect."}