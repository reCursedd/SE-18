{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/379122521", "html_url": "https://github.com/tensorflow/tensorflow/pull/18140#issuecomment-379122521", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18140", "id": 379122521, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTEyMjUyMQ==", "user": {"login": "markostam", "id": 14855383, "node_id": "MDQ6VXNlcjE0ODU1Mzgz", "avatar_url": "https://avatars2.githubusercontent.com/u/14855383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markostam", "html_url": "https://github.com/markostam", "followers_url": "https://api.github.com/users/markostam/followers", "following_url": "https://api.github.com/users/markostam/following{/other_user}", "gists_url": "https://api.github.com/users/markostam/gists{/gist_id}", "starred_url": "https://api.github.com/users/markostam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markostam/subscriptions", "organizations_url": "https://api.github.com/users/markostam/orgs", "repos_url": "https://api.github.com/users/markostam/repos", "events_url": "https://api.github.com/users/markostam/events{/privacy}", "received_events_url": "https://api.github.com/users/markostam/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-06T01:23:27Z", "updated_at": "2018-04-06T01:23:27Z", "author_association": "NONE", "body_html": "<p>Seems to be failing on this test:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">RootMeanSquaredErrorTest</span>(<span class=\"pl-e\">test</span>.<span class=\"pl-e\">TestCase</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">testVars</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    metrics.root_mean_squared_error(\n        <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>array_ops.ones((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">1</span>)), <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>array_ops.ones((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">1</span>)))\n    _assert_metric_variables(\n        <span class=\"pl-c1\">self</span>,\n        (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>root_mean_squared_error/count:0<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>root_mean_squared_error/total:0<span class=\"pl-pds\">'</span></span>))\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">_assert_metric_variables</span>(<span class=\"pl-smi\">test_case</span>, <span class=\"pl-smi\">expected</span>):\n    test_case.assertEquals(\n        <span class=\"pl-c1\">set</span>(expected), <span class=\"pl-c1\">set</span>(v.name <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> variables.local_variables()))\n    test_case.assertEquals(\n        <span class=\"pl-c1\">set</span>(expected),\n        <span class=\"pl-c1\">set</span>(v.name <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> ops.get_collection(ops.GraphKeys.<span class=\"pl-c1\">METRIC_VARIABLES</span>)))</pre></div>", "body_text": "Seems to be failing on this test:\nclass RootMeanSquaredErrorTest(test.TestCase):\n  def testVars(self):\n    metrics.root_mean_squared_error(\n        predictions=array_ops.ones((10, 1)), labels=array_ops.ones((10, 1)))\n    _assert_metric_variables(\n        self,\n        ('root_mean_squared_error/count:0', 'root_mean_squared_error/total:0'))\n\n  def _assert_metric_variables(test_case, expected):\n    test_case.assertEquals(\n        set(expected), set(v.name for v in variables.local_variables()))\n    test_case.assertEquals(\n        set(expected),\n        set(v.name for v in ops.get_collection(ops.GraphKeys.METRIC_VARIABLES)))", "body": "Seems to be failing on this test:\r\n```python\r\nclass RootMeanSquaredErrorTest(test.TestCase):\r\n  def testVars(self):\r\n    metrics.root_mean_squared_error(\r\n        predictions=array_ops.ones((10, 1)), labels=array_ops.ones((10, 1)))\r\n    _assert_metric_variables(\r\n        self,\r\n        ('root_mean_squared_error/count:0', 'root_mean_squared_error/total:0'))\r\n\r\n  def _assert_metric_variables(test_case, expected):\r\n    test_case.assertEquals(\r\n        set(expected), set(v.name for v in variables.local_variables()))\r\n    test_case.assertEquals(\r\n        set(expected),\r\n        set(v.name for v in ops.get_collection(ops.GraphKeys.METRIC_VARIABLES)))\r\n```"}