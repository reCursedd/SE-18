{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/217833681", "pull_request_review_id": 155649957, "id": 217833681, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzgzMzY4MQ==", "diff_hunk": "@@ -2567,7 +2591,90 @@ ENTRY main {\n   Literal arg = LiteralUtil::CreateR1<bfloat16>(\n       {bfloat16(1.0f), bfloat16(3.0f), bfloat16(-2.0f), bfloat16(42.0f)});\n   Literal expected = LiteralUtil::CreateR0<bfloat16>(bfloat16(44.0f));\n-  EXPECT_TRUE(LiteralTestUtil::Equal(expected, Evaluate({&arg})));\n+  TF_ASSERT_OK_AND_ASSIGN(Literal result, Evaluate({&arg}));\n+  EXPECT_TRUE(LiteralTestUtil::Equal(expected, result));\n+}\n+\n+TEST_P(HloEvaluatorTest, DontFailOnCall) {\n+  // The following test used to trigger unimplemented error instead of returning\n+  // false. This was due to HandleCall in HloEvaluator using ConsumeValueOrDie\n+  // to get a literal value, however this is not possible with RNG.\n+  const string hlo_text = R\"(\n+HloModule DontFailOnCall\n+\n+call {\n+  constant = f32[] constant(0)\n+  constant.1 = f32[] constant(1)\n+  ROOT rng = f32[] rng(constant, constant.1), distribution=rng_uniform\n+}\n+\n+ENTRY main {\n+  ROOT result = f32[] call(), to_apply=call\n+}\n+)\";\n+  ParseAndVerifyModule(hlo_text);\n+  auto statusor = Evaluate();\n+  ASSERT_FALSE(statusor.status().ok());\n+}\n+\n+TEST_P(HloEvaluatorTest, DontFailOnFusion) {\n+  // The following test used to trigger unimplemented error instead of returning\n+  // false. This was due to HandleFusion in HloEvaluator using ConsumeValueOrDie\n+  // to get a literal value, however this is not possible with RNG.\n+  const string hlo_text = R\"(\n+HloModule DontFailOnFusion\n+\n+fused_computation {\n+  constant = f32[] constant(0)\n+  constant.1 = f32[] constant(1)\n+  ROOT rng = f32[] rng(constant, constant.1), distribution=rng_uniform\n+}\n+\n+ENTRY main {\n+  ROOT result = f32[] fusion(), kind=kLoop, calls=fused_computation\n+}\n+)\";\n+  ParseAndVerifyModule(hlo_text);\n+  auto statusor = Evaluate();\n+  ASSERT_FALSE(statusor.status().ok());\n+}\n+\n+TEST_P(HloEvaluatorTest, DontFailOnConditional) {\n+  // The following test used to trigger unimplemented error instead of returning\n+  // false. This was due to HandleConditional in HloEvaluator using\n+  // ConsumeValueOrDie to get a literal value, however this is not possible\n+  // with RNG.\n+  const string hlo_text = R\"(\n+HloModule DontFailOnConditional\n+\n+True (tuple: (f32[], f32[])) -> f32[] {\n+  tuple = (f32[], f32[]) parameter(0)\n+  lower = f32[] get-tuple-element((f32[], f32[]) tuple), index=0\n+  upper = f32[] get-tuple-element((f32[], f32[]) tuple), index=1\n+  ROOT rng = f32[] rng(lower, upper), distribution=rng_uniform\n+}\n+\n+False (tuple: (f32[], f32[])) -> f32[] {\n+  tuple = (f32[], f32[]) parameter(0)\n+  mean = f32[] get-tuple-element((f32[], f32[]) tuple), index=0\n+  sigma = f32[] get-tuple-element((f32[], f32[]) tuple), index=1\n+  ROOT rng = f32[] rng(mean, sigma), distribution=rng_normal\n+}\n+\n+ENTRY main (pred: pred[]) -> f32[]{\n+  pred = pred[] parameter(0)\n+  constant = f32[] constant(0)\n+  constant.1 = f32[] constant(1)\n+  params = (f32[], f32[]) tuple(constant, constant.1)\n+  ROOT result = f32[] conditional(pred, params, params),\n+    true_computation=True,\n+    false_computation=False\n+}\n+)\";\n+  ParseAndVerifyModule(hlo_text);\n+  Literal arg = LiteralUtil::CreateR0<bool>(false);\n+  auto statusor = Evaluate({&arg});\n+  ASSERT_FALSE(statusor.status().ok());", "path": "tensorflow/compiler/xla/service/hlo_evaluator_test.cc", "position": null, "original_position": 758, "commit_id": "79e843fcd6ae68783f05bc96c73dc9eb8a1c9808", "original_commit_id": "2a021c2628bc67ba8df669aeeb4ef74bf83c99cd", "user": {"login": "kayzhu", "id": 1530877, "node_id": "MDQ6VXNlcjE1MzA4Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1530877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kayzhu", "html_url": "https://github.com/kayzhu", "followers_url": "https://api.github.com/users/kayzhu/followers", "following_url": "https://api.github.com/users/kayzhu/following{/other_user}", "gists_url": "https://api.github.com/users/kayzhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/kayzhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kayzhu/subscriptions", "organizations_url": "https://api.github.com/users/kayzhu/orgs", "repos_url": "https://api.github.com/users/kayzhu/repos", "events_url": "https://api.github.com/users/kayzhu/events{/privacy}", "received_events_url": "https://api.github.com/users/kayzhu/received_events", "type": "User", "site_admin": false}, "body": "And here.", "created_at": "2018-09-14T20:29:17Z", "updated_at": "2018-10-16T08:07:51Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20967#discussion_r217833681", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20967", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/217833681"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20967#discussion_r217833681"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20967"}}, "body_html": "<p>And here.</p>", "body_text": "And here."}