{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21438", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21438/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21438/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21438/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21438", "id": 348248209, "node_id": "MDU6SXNzdWUzNDgyNDgyMDk=", "number": 21438, "title": "Resnet50.py apply pooling at last layer regardless pooling parameter.", "user": {"login": "weishi258", "id": 869593, "node_id": "MDQ6VXNlcjg2OTU5Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/869593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weishi258", "html_url": "https://github.com/weishi258", "followers_url": "https://api.github.com/users/weishi258/followers", "following_url": "https://api.github.com/users/weishi258/following{/other_user}", "gists_url": "https://api.github.com/users/weishi258/gists{/gist_id}", "starred_url": "https://api.github.com/users/weishi258/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weishi258/subscriptions", "organizations_url": "https://api.github.com/users/weishi258/orgs", "repos_url": "https://api.github.com/users/weishi258/repos", "events_url": "https://api.github.com/users/weishi258/events{/privacy}", "received_events_url": "https://api.github.com/users/weishi258/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-08-07T09:51:03Z", "updated_at": "2018-09-04T17:57:02Z", "closed_at": "2018-09-04T17:57:02Z", "author_association": "NONE", "body_html": "<h3>Describe the problem</h3>\n<p>Resnet50.py apply pooling at last layer regardless pooling parameter.<br>\nThe issue has been fixed in keras 2.2.0</p>\n<h3>Source code / logs</h3>\n<p>Current:</p>\n<div class=\"highlight highlight-source-python\"><pre>  x <span class=\"pl-k\">=</span> AveragePooling2D((<span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">7</span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>avg_pool<span class=\"pl-pds\">'</span></span>)(x)\n  <span class=\"pl-k\">if</span> include_top:\n    x <span class=\"pl-k\">=</span> Flatten()(x)\n    x <span class=\"pl-k\">=</span> Dense(classes, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>softmax<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>fc1000<span class=\"pl-pds\">'</span></span>)(x)\n  <span class=\"pl-k\">else</span>:\n    <span class=\"pl-k\">if</span> pooling <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>avg<span class=\"pl-pds\">'</span></span>:\n      x <span class=\"pl-k\">=</span> GlobalAveragePooling2D()(x)\n    <span class=\"pl-k\">elif</span> pooling <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>max<span class=\"pl-pds\">'</span></span>:\n      x <span class=\"pl-k\">=</span> GlobalMaxPooling2D()(x)</pre></div>\n<p>Fix:</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">if</span> include_top:\n    x <span class=\"pl-k\">=</span> AveragePooling2D((<span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">7</span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>avg_pool<span class=\"pl-pds\">'</span></span>)(x)\n    x <span class=\"pl-k\">=</span> Flatten()(x)\n    x <span class=\"pl-k\">=</span> Dense(classes, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>softmax<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>fc1000<span class=\"pl-pds\">'</span></span>)(x)\n  <span class=\"pl-k\">else</span>:\n    <span class=\"pl-k\">if</span> pooling <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>avg<span class=\"pl-pds\">'</span></span>:\n      x <span class=\"pl-k\">=</span> GlobalAveragePooling2D()(x)\n    <span class=\"pl-k\">elif</span> pooling <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>max<span class=\"pl-pds\">'</span></span>:\n      x <span class=\"pl-k\">=</span> GlobalMaxPooling2D()(x)</pre></div>", "body_text": "Describe the problem\nResnet50.py apply pooling at last layer regardless pooling parameter.\nThe issue has been fixed in keras 2.2.0\nSource code / logs\nCurrent:\n  x = AveragePooling2D((7, 7), name='avg_pool')(x)\n  if include_top:\n    x = Flatten()(x)\n    x = Dense(classes, activation='softmax', name='fc1000')(x)\n  else:\n    if pooling == 'avg':\n      x = GlobalAveragePooling2D()(x)\n    elif pooling == 'max':\n      x = GlobalMaxPooling2D()(x)\nFix:\n  if include_top:\n    x = AveragePooling2D((7, 7), name='avg_pool')(x)\n    x = Flatten()(x)\n    x = Dense(classes, activation='softmax', name='fc1000')(x)\n  else:\n    if pooling == 'avg':\n      x = GlobalAveragePooling2D()(x)\n    elif pooling == 'max':\n      x = GlobalMaxPooling2D()(x)", "body": "### Describe the problem\r\nResnet50.py apply pooling at last layer regardless pooling parameter.\r\nThe issue has been fixed in keras 2.2.0\r\n### Source code / logs\r\nCurrent:\r\n```python  \r\n  x = AveragePooling2D((7, 7), name='avg_pool')(x)\r\n  if include_top:\r\n    x = Flatten()(x)\r\n    x = Dense(classes, activation='softmax', name='fc1000')(x)\r\n  else:\r\n    if pooling == 'avg':\r\n      x = GlobalAveragePooling2D()(x)\r\n    elif pooling == 'max':\r\n      x = GlobalMaxPooling2D()(x)\r\n```\r\nFix:\r\n```python\r\n  if include_top:\r\n    x = AveragePooling2D((7, 7), name='avg_pool')(x)\r\n    x = Flatten()(x)\r\n    x = Dense(classes, activation='softmax', name='fc1000')(x)\r\n  else:\r\n    if pooling == 'avg':\r\n      x = GlobalAveragePooling2D()(x)\r\n    elif pooling == 'max':\r\n      x = GlobalMaxPooling2D()(x)\r\n```"}