{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5847", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5847/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5847/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5847/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5847", "id": 191637773, "node_id": "MDU6SXNzdWUxOTE2Mzc3NzM=", "number": 5847, "title": "the embedding_lookup() returns zeros when the index exceed embedding matrix size?", "user": {"login": "kkjh0723", "id": 10104262, "node_id": "MDQ6VXNlcjEwMTA0MjYy", "avatar_url": "https://avatars3.githubusercontent.com/u/10104262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kkjh0723", "html_url": "https://github.com/kkjh0723", "followers_url": "https://api.github.com/users/kkjh0723/followers", "following_url": "https://api.github.com/users/kkjh0723/following{/other_user}", "gists_url": "https://api.github.com/users/kkjh0723/gists{/gist_id}", "starred_url": "https://api.github.com/users/kkjh0723/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kkjh0723/subscriptions", "organizations_url": "https://api.github.com/users/kkjh0723/orgs", "repos_url": "https://api.github.com/users/kkjh0723/repos", "events_url": "https://api.github.com/users/kkjh0723/events{/privacy}", "received_events_url": "https://api.github.com/users/kkjh0723/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-11-25T07:08:56Z", "updated_at": "2018-04-12T10:13:52Z", "closed_at": "2016-11-29T20:18:33Z", "author_association": "NONE", "body_html": "<p>NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.</p>\n<p>I wrote an issues a month ago about the same problem <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"185907028\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/5260\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5260/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/5260\">#5260</a><br>\nI recently update the TF to latest master branch(<code>0.11.head</code>) without any custom modification and the commit hash is <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/55dbc54192a378c5e685c52595f42503f037320e/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/55dbc54192a378c5e685c52595f42503f037320e\"><tt>55dbc54</tt></a></p>\n<p>The tf.embedding_lookup() still do not raise error even though the index is exceeding the embedding matrix size. It automatically fills zeros as you can see in the below example.</p>\n<p>I tested same code with two different machines and the result was same.<br>\nIn the previous issue(<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"185907028\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/5260\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5260/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/5260\">#5260</a>), <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=246351\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/strategist333\">@strategist333</a> said it raise an <code>InvalidArgumentError</code> in binary release.<br>\nBut when I tested TF installed from source, it didn't...</p>\n<pre><code> import tensorflow as tf\n import numpy as np\n\n embd_mat = np.linspace(1,10,10).reshape([10,1])*np.array([1,2,3]).reshape([1,3])\n idx = np.linspace(0,19,20)\n\n embd_in = tf.placeholder(tf.float32,[10,3])\n idx_in = tf.placeholder(tf.int32,[20])\n\n output = tf.nn.embedding_lookup(embd_in,idx_in)\n\n with tf.Session() as sess:\n     sess.run(tf.initialize_all_variables())\n\n     embd_out = sess.run(output,feed_dict={embd_in:embd_mat, idx_in:idx})\n\n     print embd_out\n</code></pre>\n<p>The output of above code is,</p>\n<pre><code>[[  1.   2.   3.]\n [  2.   4.   6.]\n [  3.   6.   9.]\n [  4.   8.  12.]\n [  5.  10.  15.]\n [  6.  12.  18.]\n [  7.  14.  21.]\n [  8.  16.  24.]\n [  9.  18.  27.]\n [ 10.  20.  30.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]]\n</code></pre>", "body_text": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\nI wrote an issues a month ago about the same problem #5260\nI recently update the TF to latest master branch(0.11.head) without any custom modification and the commit hash is 55dbc54\nThe tf.embedding_lookup() still do not raise error even though the index is exceeding the embedding matrix size. It automatically fills zeros as you can see in the below example.\nI tested same code with two different machines and the result was same.\nIn the previous issue(#5260), @strategist333 said it raise an InvalidArgumentError in binary release.\nBut when I tested TF installed from source, it didn't...\n import tensorflow as tf\n import numpy as np\n\n embd_mat = np.linspace(1,10,10).reshape([10,1])*np.array([1,2,3]).reshape([1,3])\n idx = np.linspace(0,19,20)\n\n embd_in = tf.placeholder(tf.float32,[10,3])\n idx_in = tf.placeholder(tf.int32,[20])\n\n output = tf.nn.embedding_lookup(embd_in,idx_in)\n\n with tf.Session() as sess:\n     sess.run(tf.initialize_all_variables())\n\n     embd_out = sess.run(output,feed_dict={embd_in:embd_mat, idx_in:idx})\n\n     print embd_out\n\nThe output of above code is,\n[[  1.   2.   3.]\n [  2.   4.   6.]\n [  3.   6.   9.]\n [  4.   8.  12.]\n [  5.  10.  15.]\n [  6.  12.  18.]\n [  7.  14.  21.]\n [  8.  16.  24.]\n [  9.  18.  27.]\n [ 10.  20.  30.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]]", "body": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\r\n\r\nI wrote an issues a month ago about the same problem #5260 \r\nI recently update the TF to latest master branch(`0.11.head`) without any custom modification and the commit hash is 55dbc54192a378c5e685c52595f42503f037320e\r\n\r\nThe tf.embedding_lookup() still do not raise error even though the index is exceeding the embedding matrix size. It automatically fills zeros as you can see in the below example. \r\n\r\nI tested same code with two different machines and the result was same.\r\nIn the previous issue(#5260), @strategist333 said it raise an `InvalidArgumentError` in binary release.\r\nBut when I tested TF installed from source, it didn't...\r\n \r\n\r\n```\r\n import tensorflow as tf\r\n import numpy as np\r\n\r\n embd_mat = np.linspace(1,10,10).reshape([10,1])*np.array([1,2,3]).reshape([1,3])\r\n idx = np.linspace(0,19,20)\r\n\r\n embd_in = tf.placeholder(tf.float32,[10,3])\r\n idx_in = tf.placeholder(tf.int32,[20])\r\n\r\n output = tf.nn.embedding_lookup(embd_in,idx_in)\r\n\r\n with tf.Session() as sess:\r\n     sess.run(tf.initialize_all_variables())\r\n\r\n     embd_out = sess.run(output,feed_dict={embd_in:embd_mat, idx_in:idx})\r\n\r\n     print embd_out\r\n```\r\n\r\nThe output of above code is,\r\n\r\n```\r\n[[  1.   2.   3.]\r\n [  2.   4.   6.]\r\n [  3.   6.   9.]\r\n [  4.   8.  12.]\r\n [  5.  10.  15.]\r\n [  6.  12.  18.]\r\n [  7.  14.  21.]\r\n [  8.  16.  24.]\r\n [  9.  18.  27.]\r\n [ 10.  20.  30.]\r\n [  0.   0.   0.]\r\n [  0.   0.   0.]\r\n [  0.   0.   0.]\r\n [  0.   0.   0.]\r\n [  0.   0.   0.]\r\n [  0.   0.   0.]\r\n [  0.   0.   0.]\r\n [  0.   0.   0.]\r\n [  0.   0.   0.]\r\n [  0.   0.   0.]]\r\n```"}