{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12078", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12078/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12078/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12078/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12078", "id": 248406640, "node_id": "MDU6SXNzdWUyNDg0MDY2NDA=", "number": 12078, "title": "Assert randomly fails when training with multiple threads", "user": {"login": "manuelreis", "id": 4721640, "node_id": "MDQ6VXNlcjQ3MjE2NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4721640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manuelreis", "html_url": "https://github.com/manuelreis", "followers_url": "https://api.github.com/users/manuelreis/followers", "following_url": "https://api.github.com/users/manuelreis/following{/other_user}", "gists_url": "https://api.github.com/users/manuelreis/gists{/gist_id}", "starred_url": "https://api.github.com/users/manuelreis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manuelreis/subscriptions", "organizations_url": "https://api.github.com/users/manuelreis/orgs", "repos_url": "https://api.github.com/users/manuelreis/repos", "events_url": "https://api.github.com/users/manuelreis/events{/privacy}", "received_events_url": "https://api.github.com/users/manuelreis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-07T13:11:05Z", "updated_at": "2017-08-09T15:20:31Z", "closed_at": "2017-08-09T15:20:30Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:  Ubuntu 16.04.2 LTS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.3.0-rc2</li>\n<li><strong>Python version</strong>:  2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.4.5</li>\n<li><strong>CUDA/cuDNN version</strong>: no</li>\n<li><strong>GPU model and memory</strong>: no</li>\n<li><strong>Exact command to reproduce</strong>: <code>for ((n=0;n&lt;100;n++)); do python mnist_softmax_parallel_issue.py; done</code></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The following script randomly crashes (i.e., sometimes crashes and produces this traceback, most of the times it does not). The script trains the MNIST softmax model in parallel leveraging several threads.</p>\n<h3>Source code / logs</h3>\n<p><em>mnist_softmax_device_issue.py</em></p>\n<pre><code>from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport argparse\nimport sys\n\nfrom tensorflow.examples.tutorials.mnist import input_data\n\nimport tensorflow as tf\nimport threading\nimport numpy as np\nimport json\nimport os\nimport time\n\nFLAGS = None\n\nINTER_OP_PARALLELISM = 76\nINTRA_OP_PARALLELISM = 1\nBATCH_SIZE = 100\nITERATIONS = 1000\nTRAINING_THREADS = 46\n\nthreads = [None] * TRAINING_THREADS\n\ndef train_function(thread_idx, mnist, sess, train_step, x, y_, y):\n  iterations = int(ITERATIONS/TRAINING_THREADS)\n  for i in range(iterations):\n    batch_xs, batch_ys = mnist.train.next_batch(BATCH_SIZE)\n    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\ndef main(_):\n  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)\n\n  x = tf.placeholder(tf.float32, [None, 784])\n  W = tf.Variable(tf.zeros([784, 10]))\n  b = tf.Variable(tf.zeros([10]))\n  y = tf.matmul(x, W) + b\n\n  y_ = tf.placeholder(tf.float32, [None, 10])\n\n  cross_entropy = tf.reduce_mean(\n      tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))\n  train_step = tf.train.GradientDescentOptimizer(0.5, use_locking=True).minimize(cross_entropy)\n\n  sess = tf.InteractiveSession(config=tf.ConfigProto(intra_op_parallelism_threads = INTRA_OP_PARALLELISM, inter_op_parallelism_threads= INTER_OP_PARALLELISM))\n  sess.run(tf.global_variables_initializer())\n\n  for i in range(TRAINING_THREADS):\n      threads[i] = threading.Thread(target=train_function, args=[i, mnist, sess, train_step, x, y_, y])\n\n  for thread in threads:\n      thread.start()\n  for thread in threads:\n      thread.join()\n\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser()\n  parser.add_argument('--data_dir', type=str, default='mnist-data',\n                      help='Directory for storing input data')\n  FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\n\n</code></pre>\n<p><em>Traceback</em></p>\n<p><code>external/eigen_archive/unsupported/Eigen/CXX11/src/Tensor/TensorBroadcasting.h:125: Eigen::TensorEvaluator&lt;const Eigen::TensorBroadcastingOp&lt;Broadcast, XprType&gt;, Device&gt;::T ensorEvaluator(const XprType&amp;, const Device&amp;) [with Broadcast = const Eigen::IndexList&lt;Eigen::type2index&lt;1l&gt;, int&gt;; ArgType = const Eigen::TensorMap&lt;Eigen::Tensor&lt;float, 2, 1, long int&gt;, 16, Eigen::MakePointer&gt;; Device = Eigen::ThreadPoolDevice; Eigen::TensorEvaluator&lt;const Eigen::TensorBroadcastingOp&lt;Broadcast, XprType&gt;, Device&gt;::XprType = Eigen::TensorBroadcastingOp&lt;const Eigen::IndexList&lt;Eigen::type2index&lt;1l&gt;, int&gt;, const Eigen::TensorMap&lt;Eigen::Tensor&lt;float, 2, 1, long int&gt;, 16, Eigen::MakePointer&gt; &gt;]: Assertion input_dims[i] &gt; $' failed.</code></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Ubuntu 16.04.2 LTS\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.3.0-rc2\nPython version:  2.7.12\nBazel version (if compiling from source): 0.4.5\nCUDA/cuDNN version: no\nGPU model and memory: no\nExact command to reproduce: for ((n=0;n<100;n++)); do python mnist_softmax_parallel_issue.py; done\n\nDescribe the problem\nThe following script randomly crashes (i.e., sometimes crashes and produces this traceback, most of the times it does not). The script trains the MNIST softmax model in parallel leveraging several threads.\nSource code / logs\nmnist_softmax_device_issue.py\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport argparse\nimport sys\n\nfrom tensorflow.examples.tutorials.mnist import input_data\n\nimport tensorflow as tf\nimport threading\nimport numpy as np\nimport json\nimport os\nimport time\n\nFLAGS = None\n\nINTER_OP_PARALLELISM = 76\nINTRA_OP_PARALLELISM = 1\nBATCH_SIZE = 100\nITERATIONS = 1000\nTRAINING_THREADS = 46\n\nthreads = [None] * TRAINING_THREADS\n\ndef train_function(thread_idx, mnist, sess, train_step, x, y_, y):\n  iterations = int(ITERATIONS/TRAINING_THREADS)\n  for i in range(iterations):\n    batch_xs, batch_ys = mnist.train.next_batch(BATCH_SIZE)\n    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\ndef main(_):\n  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)\n\n  x = tf.placeholder(tf.float32, [None, 784])\n  W = tf.Variable(tf.zeros([784, 10]))\n  b = tf.Variable(tf.zeros([10]))\n  y = tf.matmul(x, W) + b\n\n  y_ = tf.placeholder(tf.float32, [None, 10])\n\n  cross_entropy = tf.reduce_mean(\n      tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))\n  train_step = tf.train.GradientDescentOptimizer(0.5, use_locking=True).minimize(cross_entropy)\n\n  sess = tf.InteractiveSession(config=tf.ConfigProto(intra_op_parallelism_threads = INTRA_OP_PARALLELISM, inter_op_parallelism_threads= INTER_OP_PARALLELISM))\n  sess.run(tf.global_variables_initializer())\n\n  for i in range(TRAINING_THREADS):\n      threads[i] = threading.Thread(target=train_function, args=[i, mnist, sess, train_step, x, y_, y])\n\n  for thread in threads:\n      thread.start()\n  for thread in threads:\n      thread.join()\n\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser()\n  parser.add_argument('--data_dir', type=str, default='mnist-data',\n                      help='Directory for storing input data')\n  FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\n\n\nTraceback\nexternal/eigen_archive/unsupported/Eigen/CXX11/src/Tensor/TensorBroadcasting.h:125: Eigen::TensorEvaluator<const Eigen::TensorBroadcastingOp<Broadcast, XprType>, Device>::T ensorEvaluator(const XprType&, const Device&) [with Broadcast = const Eigen::IndexList<Eigen::type2index<1l>, int>; ArgType = const Eigen::TensorMap<Eigen::Tensor<float, 2, 1, long int>, 16, Eigen::MakePointer>; Device = Eigen::ThreadPoolDevice; Eigen::TensorEvaluator<const Eigen::TensorBroadcastingOp<Broadcast, XprType>, Device>::XprType = Eigen::TensorBroadcastingOp<const Eigen::IndexList<Eigen::type2index<1l>, int>, const Eigen::TensorMap<Eigen::Tensor<float, 2, 1, long int>, 16, Eigen::MakePointer> >]: Assertion input_dims[i] > $' failed.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:  Ubuntu 16.04.2 LTS\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 1.3.0-rc2\r\n- **Python version**:  2.7.12\r\n- **Bazel version (if compiling from source)**: 0.4.5\r\n- **CUDA/cuDNN version**: no\r\n- **GPU model and memory**: no\r\n- **Exact command to reproduce**: `for ((n=0;n<100;n++)); do python mnist_softmax_parallel_issue.py; done`\r\n\r\n\r\n### Describe the problem\r\nThe following script randomly crashes (i.e., sometimes crashes and produces this traceback, most of the times it does not). The script trains the MNIST softmax model in parallel leveraging several threads. \r\n\r\n### Source code / logs\r\n\r\n_mnist_softmax_device_issue.py_\r\n\r\n\r\n```\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n\r\nimport argparse\r\nimport sys\r\n\r\nfrom tensorflow.examples.tutorials.mnist import input_data\r\n\r\nimport tensorflow as tf\r\nimport threading\r\nimport numpy as np\r\nimport json\r\nimport os\r\nimport time\r\n\r\nFLAGS = None\r\n\r\nINTER_OP_PARALLELISM = 76\r\nINTRA_OP_PARALLELISM = 1\r\nBATCH_SIZE = 100\r\nITERATIONS = 1000\r\nTRAINING_THREADS = 46\r\n\r\nthreads = [None] * TRAINING_THREADS\r\n\r\ndef train_function(thread_idx, mnist, sess, train_step, x, y_, y):\r\n  iterations = int(ITERATIONS/TRAINING_THREADS)\r\n  for i in range(iterations):\r\n    batch_xs, batch_ys = mnist.train.next_batch(BATCH_SIZE)\r\n    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\r\n\r\ndef main(_):\r\n  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)\r\n\r\n  x = tf.placeholder(tf.float32, [None, 784])\r\n  W = tf.Variable(tf.zeros([784, 10]))\r\n  b = tf.Variable(tf.zeros([10]))\r\n  y = tf.matmul(x, W) + b\r\n\r\n  y_ = tf.placeholder(tf.float32, [None, 10])\r\n\r\n  cross_entropy = tf.reduce_mean(\r\n      tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))\r\n  train_step = tf.train.GradientDescentOptimizer(0.5, use_locking=True).minimize(cross_entropy)\r\n\r\n  sess = tf.InteractiveSession(config=tf.ConfigProto(intra_op_parallelism_threads = INTRA_OP_PARALLELISM, inter_op_parallelism_threads= INTER_OP_PARALLELISM))\r\n  sess.run(tf.global_variables_initializer())\r\n\r\n  for i in range(TRAINING_THREADS):\r\n      threads[i] = threading.Thread(target=train_function, args=[i, mnist, sess, train_step, x, y_, y])\r\n\r\n  for thread in threads:\r\n      thread.start()\r\n  for thread in threads:\r\n      thread.join()\r\n\r\n\r\nif __name__ == '__main__':\r\n  parser = argparse.ArgumentParser()\r\n  parser.add_argument('--data_dir', type=str, default='mnist-data',\r\n                      help='Directory for storing input data')\r\n  FLAGS, unparsed = parser.parse_known_args()\r\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\r\n\r\n```\r\n\r\n_Traceback_\r\n\r\n`\r\nexternal/eigen_archive/unsupported/Eigen/CXX11/src/Tensor/TensorBroadcasting.h:125: Eigen::TensorEvaluator<const Eigen::TensorBroadcastingOp<Broadcast, XprType>, Device>::T\r\nensorEvaluator(const XprType&, const Device&) [with Broadcast = const Eigen::IndexList<Eigen::type2index<1l>, int>; ArgType = const Eigen::TensorMap<Eigen::Tensor<float, 2, 1, long\r\n int>, 16, Eigen::MakePointer>; Device = Eigen::ThreadPoolDevice; Eigen::TensorEvaluator<const Eigen::TensorBroadcastingOp<Broadcast, XprType>, Device>::XprType = Eigen::TensorBroadcastingOp<const Eigen::IndexList<Eigen::type2index<1l>, int>, const Eigen::TensorMap<Eigen::Tensor<float, 2, 1, long int>, 16, Eigen::MakePointer> >]: Assertion input_dims[i] > $' failed.\r\n`\r\n"}