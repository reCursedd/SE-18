{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149849683", "pull_request_review_id": 75307653, "id": 149849683, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTg0OTY4Mw==", "diff_hunk": "@@ -416,6 +417,100 @@ bool ConsumeNonWhitespace(StringPiece* s, StringPiece* val) {\n   }\n }\n \n+Status SplitUTF8(StringPiece text, const string& delim, const bool skip_empty,\n+                 std::vector<string>* result) {\n+  // Bytes    Byte 1    Byte 2    Byte 3    Byte 4\n+  //   1     0xxxxxxx\n+  //   2     110xxxxx  10xxxxxx\n+  //   3     1110xxxx  10xxxxxx  10xxxxxx\n+  //   4     11110xxx  10xxxxxx  10xxxxxx  10xxxxxx\n+  result->clear();\n+  size_t char_start = 0, char_len = 0;\n+  bool last_char_was_a_delimiter = true;\n+  for (size_t i = 0; i < text.size(); ++i) {\n+    if (char_start == i) {\n+      if (!UTF8CharNumBytes(text, &char_len)) {\n+        result->clear();\n+        return errors::InvalidArgument(\"Invalid UTF8 encoding at byte \", i);\n+      }\n+    }\n+    // Validate all intermediate bytes are valid UTF-8\n+    if (TF_PREDICT_FALSE((char_start != i) && (text[i] & 0xC0) != 0x80)) {\n+      return errors::InvalidArgument(\"Invalid UTF8 encoding at byte \", i);\n+    }\n+    // Reached the end of a character\n+    if (char_start + char_len == i + 1) {\n+      const StringPiece entry = text.substr(char_start, char_len).ToString();\n+      if (delim == \"\") {\n+        result->emplace_back(entry.ToString());\n+      } else if (delim == entry) {\n+        if (last_char_was_a_delimiter && !skip_empty) {\n+          result->emplace_back(\"\");\n+        }\n+        last_char_was_a_delimiter = true;\n+        if (i + 1 == text.size() && !skip_empty) {", "path": "tensorflow/core/lib/strings/str_util.cc", "position": null, "original_position": 43, "commit_id": "95f2a5cf9d08d4ed07eb88057ead689ce61faa54", "original_commit_id": "066ad9d19d72ca4e79fe98fdf1b9c7aeb33308aa", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Instead of doing this in the loop, couldn't this be done outside the loop since it only applies at the end (thereby avoiding unnecessary checks in the loop)?\r\nSomething like:\r\n\r\n```c++\r\nfor (size_t i = 0; i < text.size(); ++i) {\r\n  ...\r\n}\r\nif (last_char_was_delimiter && !skip_empty && !text.empty()) {\r\n  result->emplace_back(\"\");\r\n}\r\n```\r\n?", "created_at": "2017-11-09T01:56:47Z", "updated_at": "2018-05-27T18:27:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r149849683", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149849683"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r149849683"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971"}}, "body_html": "<p>Instead of doing this in the loop, couldn't this be done outside the loop since it only applies at the end (thereby avoiding unnecessary checks in the loop)?<br>\nSomething like:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">for</span> (<span class=\"pl-c1\">size_t</span> i = <span class=\"pl-c1\">0</span>; i &lt; text.size(); ++i) {\n  ...\n}\n<span class=\"pl-k\">if</span> (last_char_was_delimiter &amp;&amp; !skip_empty &amp;&amp; !text.empty()) {\n  result-&gt;<span class=\"pl-c1\">emplace_back</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>);\n}</pre></div>\n<p>?</p>", "body_text": "Instead of doing this in the loop, couldn't this be done outside the loop since it only applies at the end (thereby avoiding unnecessary checks in the loop)?\nSomething like:\nfor (size_t i = 0; i < text.size(); ++i) {\n  ...\n}\nif (last_char_was_delimiter && !skip_empty && !text.empty()) {\n  result->emplace_back(\"\");\n}\n?"}