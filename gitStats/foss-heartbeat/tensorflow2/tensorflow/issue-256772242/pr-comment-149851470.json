{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149851470", "pull_request_review_id": 75307653, "id": 149851470, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTg1MTQ3MA==", "diff_hunk": "@@ -247,6 +247,57 @@ shape: a length-2 vector of int64 representing the shape of the sparse\n   of tokens in a single input entry.\n )doc\");\n \n+REGISTER_OP(\"StringSplitUTF8\")\n+    .Input(\"input: string\")\n+    .Input(\"delimiter: string\")\n+    .Output(\"indices: int64\")\n+    .Output(\"values: string\")\n+    .Output(\"shape: int64\")\n+    .Attr(\"skip_empty: bool = true\")\n+    .SetShapeFn([](InferenceContext* c) {\n+      ShapeHandle unused;\n+      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 1, &unused));\n+      TF_RETURN_IF_ERROR(c->WithRankAtMost(c->input(1), 1, &unused));\n+\n+      c->set_output(0, c->Matrix(InferenceContext::kUnknownDim, 2));\n+      c->set_output(1, c->Vector(InferenceContext::kUnknownDim));\n+      c->set_output(2, c->Vector(2));\n+      return Status::OK();\n+    })\n+    .Doc(R\"doc(\n+Split elements of `input` based on `delimiter` into a `SparseTensor`.\n+\n+Let N be the size of source (typically N will be the batch size). Split each\n+element of `input` based on `delimiter` and return a `SparseTensor`\n+containing the splitted tokens. Empty tokens are ignored.\n+\n+`delimiter` can be empty, or a string of split characters. If `delimiter` is an\n+ empty string, each element of `input` is split into individual single-UTF-8\n+ character strings, including splitting of UTF-8 multibyte sequences. Otherwise\n+ every character of `delimiter` is a potential split point.", "path": "tensorflow/core/ops/string_ops.cc", "position": null, "original_position": 31, "commit_id": "95f2a5cf9d08d4ed07eb88057ead689ce61faa54", "original_commit_id": "066ad9d19d72ca4e79fe98fdf1b9c7aeb33308aa", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Sorry, I should have caught this earlier - the documentation here says that `delimiter` can be a sequence of characters, in which case, it splits on any of them. However, the implementation does not seem to do that.\r\n\r\nFor the original `StringSplit` op:\r\n- [this test](https://github.com/tensorflow/tensorflow/blob/r1.4/tensorflow/core/lib/strings/str_util_test.cc#L242), and\r\n- [this test](https://github.com/tensorflow/tensorflow/blob/r1.4/tensorflow/python/kernel_tests/string_split_op_test.py#L110)\r\nexercise the case where there are multiple delimiter characters specified.\r\n\r\nSo, long story short, unless I'm missing something - for `StringSplitUTF8`, delimiter cannot be a string of split characters, it has to be a single split character.\r\n\r\nIs that correct? Instead of adding the complexity of handling multiple split characters for now (unless you're up for it), I'd change this to expect a single split character, and if the feature ever comes up then we'd allow for multiple.\r\n\r\nSound reasonable?", "created_at": "2017-11-09T02:11:43Z", "updated_at": "2018-05-27T18:27:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r149851470", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149851470"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r149851470"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971"}}, "body_html": "<p>Sorry, I should have caught this earlier - the documentation here says that <code>delimiter</code> can be a sequence of characters, in which case, it splits on any of them. However, the implementation does not seem to do that.</p>\n<p>For the original <code>StringSplit</code> op:</p>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/r1.4/tensorflow/core/lib/strings/str_util_test.cc#L242\">this test</a>, and</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/r1.4/tensorflow/python/kernel_tests/string_split_op_test.py#L110\">this test</a><br>\nexercise the case where there are multiple delimiter characters specified.</li>\n</ul>\n<p>So, long story short, unless I'm missing something - for <code>StringSplitUTF8</code>, delimiter cannot be a string of split characters, it has to be a single split character.</p>\n<p>Is that correct? Instead of adding the complexity of handling multiple split characters for now (unless you're up for it), I'd change this to expect a single split character, and if the feature ever comes up then we'd allow for multiple.</p>\n<p>Sound reasonable?</p>", "body_text": "Sorry, I should have caught this earlier - the documentation here says that delimiter can be a sequence of characters, in which case, it splits on any of them. However, the implementation does not seem to do that.\nFor the original StringSplit op:\n\nthis test, and\nthis test\nexercise the case where there are multiple delimiter characters specified.\n\nSo, long story short, unless I'm missing something - for StringSplitUTF8, delimiter cannot be a string of split characters, it has to be a single split character.\nIs that correct? Instead of adding the complexity of handling multiple split characters for now (unless you're up for it), I'd change this to expect a single split character, and if the feature ever comes up then we'd allow for multiple.\nSound reasonable?"}