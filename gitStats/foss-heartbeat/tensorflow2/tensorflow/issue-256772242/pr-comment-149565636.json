{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149565636", "pull_request_review_id": 74966567, "id": 149565636, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTU2NTYzNg==", "diff_hunk": "@@ -416,6 +417,103 @@ bool ConsumeNonWhitespace(StringPiece* s, StringPiece* val) {\n   }\n }\n \n+Status SplitUTF8(StringPiece text, const string& delim, const bool skip_empty,\n+                 std::vector<string>* result) {\n+  // Bytes    Byte 1    Byte 2    Byte 3    Byte 4\n+  //   1     0xxxxxxx\n+  //   2     110xxxxx  10xxxxxx\n+  //   3     1110xxxx  10xxxxxx  10xxxxxx\n+  //   4     11110xxx  10xxxxxx  10xxxxxx  10xxxxxx\n+  result->clear();\n+  size_t char_start = 0, char_len = 0;\n+  bool advance = true;\n+  for (size_t i = 0; i < text.size(); ++i) {\n+    if (char_start == i) {\n+      if (!UTF8CharNumBytes(text, &char_len)) {\n+        result->clear();\n+        return errors::InvalidArgument(\"Invalid UTF8 encoding at byte \", i);\n+      }\n+    }\n+    // Validate all intermediate bytes are valid UTF-8\n+    if (TF_PREDICT_FALSE((char_len > 1) && (char_start != i) &&\n+                         (text[i] & 0xC0) != 0x80)) {\n+      return errors::InvalidArgument(\"Invalid UTF8 encoding at byte \", i);\n+    }\n+    // Reached the end of a character\n+    if (char_start + char_len == i + 1) {\n+      const StringPiece entry = text.substr(char_start, char_len).ToString();\n+      if (delim == \"\") {\n+        result->emplace_back(entry.ToString());\n+      } else if (delim == entry) {\n+        advance = true;\n+        if (!skip_empty) {\n+          // Follow python style, if it is beginning or the end, always add ''\n+          // >>> \"##a##b##c##\".split(\"#\")\n+          // ['', '', 'a', '', 'b', '', 'c', '', '']\n+          if (result->size() == 0 || result->back() != \"\") {\n+            result->emplace_back(\"\");\n+          } else if (result->size() == 1) {", "path": "tensorflow/core/lib/strings/str_util.cc", "position": null, "original_position": 47, "commit_id": "95f2a5cf9d08d4ed07eb88057ead689ce61faa54", "original_commit_id": "c3ae15f5b6674751a36a385346104c914b0a5c73", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I didn't quite follow the logic here (in particulary while `result->size() == 1` is any more special that `result->size() == 2` etc.). For example, let's say the the call is:\r\n\r\n```\r\nSplitUTF8(\"###a#\", '#')\r\n```\r\n\r\nthen I think this will end up with: `{ \"\", \"\", \"a\", \"\"}` instead of three empty strings before \"a\".\r\nIf that is correct, probably worth adding the unittest that would have caught the bug here.\r\n\r\nI think this can be simplified a bit by keeping a boolean indicating whether the last character was a delimiter and using that instead. Something like:\r\n\r\n```c++\r\n} else if (delim == entry) {\r\n  if (last_char_was_a_delimiter && !skip_empty) {\r\n    result->emplace_back(\"\");\r\n  }\r\n  last_char_was_a_delimiter = true;\r\n} else if (last_char_was_a_delimiter) {\r\n  last_char_was_a_delimiter = false;\r\n  result->emplace_back(entry.ToString());\r\n} else {\r\n  result->back() += enty.ToString();\r\n}\r\n```", "created_at": "2017-11-08T03:12:04Z", "updated_at": "2018-05-27T18:27:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r149565636", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149565636"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r149565636"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971"}}, "body_html": "<p>I didn't quite follow the logic here (in particulary while <code>result-&gt;size() == 1</code> is any more special that <code>result-&gt;size() == 2</code> etc.). For example, let's say the the call is:</p>\n<pre><code>SplitUTF8(\"###a#\", '#')\n</code></pre>\n<p>then I think this will end up with: <code>{ \"\", \"\", \"a\", \"\"}</code> instead of three empty strings before \"a\".<br>\nIf that is correct, probably worth adding the unittest that would have caught the bug here.</p>\n<p>I think this can be simplified a bit by keeping a boolean indicating whether the last character was a delimiter and using that instead. Something like:</p>\n<div class=\"highlight highlight-source-c++\"><pre>} <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (delim == entry) {\n  <span class=\"pl-k\">if</span> (last_char_was_a_delimiter &amp;&amp; !skip_empty) {\n    result-&gt;<span class=\"pl-c1\">emplace_back</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>);\n  }\n  last_char_was_a_delimiter = <span class=\"pl-c1\">true</span>;\n} <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (last_char_was_a_delimiter) {\n  last_char_was_a_delimiter = <span class=\"pl-c1\">false</span>;\n  result-&gt;<span class=\"pl-c1\">emplace_back</span>(entry.<span class=\"pl-c1\">ToString</span>());\n} <span class=\"pl-k\">else</span> {\n  result-&gt;<span class=\"pl-c1\">back</span>() += enty.<span class=\"pl-c1\">ToString</span>();\n}</pre></div>", "body_text": "I didn't quite follow the logic here (in particulary while result->size() == 1 is any more special that result->size() == 2 etc.). For example, let's say the the call is:\nSplitUTF8(\"###a#\", '#')\n\nthen I think this will end up with: { \"\", \"\", \"a\", \"\"} instead of three empty strings before \"a\".\nIf that is correct, probably worth adding the unittest that would have caught the bug here.\nI think this can be simplified a bit by keeping a boolean indicating whether the last character was a delimiter and using that instead. Something like:\n} else if (delim == entry) {\n  if (last_char_was_a_delimiter && !skip_empty) {\n    result->emplace_back(\"\");\n  }\n  last_char_was_a_delimiter = true;\n} else if (last_char_was_a_delimiter) {\n  last_char_was_a_delimiter = false;\n  result->emplace_back(entry.ToString());\n} else {\n  result->back() += enty.ToString();\n}"}