{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/144674909", "pull_request_review_id": 69368959, "id": 144674909, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDY3NDkwOQ==", "diff_hunk": "@@ -122,6 +122,84 @@ class StringSplitOp : public OpKernel {\n   bool skip_empty_;\n };\n \n+class StringUTF8SplitOp : public OpKernel {", "path": "tensorflow/core/kernels/string_split_op.cc", "position": null, "original_position": 4, "commit_id": "95f2a5cf9d08d4ed07eb88057ead689ce61faa54", "original_commit_id": "5d767978be03a123d2b95fce16e060a5836074b9", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "IIUC, the implementation of these two kernels is almost identical, save for the different function call to split (and the vall to validating UTF8 of the delimiter).\r\n\r\nCould we refactor the kernel implementation so that a bulk of the code is shared? Something along the lines of:\r\n\r\n```c++\r\nclass StringSplitOpBase : public OpKernel {\r\n    ...\r\n    Status ValidateDelimiter(const string& delimiter) = 0;\r\n    Status Split(const string& input, const string& delimiter, vector<string>* parts) = 0;\r\n}\r\n\r\nclass StrignSplitOp : public StringSplitOpBase {\r\n  Status ValidateDelimiter(const string& delimiter) { return Status::OK(); }\r\n  Status Split(const string& input, const string& delimiter, vector<string>* parts) {\r\n    return str_util::Split(...);\r\n  }  \r\n};\r\n\r\nclass StringSplitUTF8Op : public StringSplitOp {\r\n  Status ValidateDelimiter(const string& delimiter) { return str_util::ValidUTF8(delimiter); }\r\n  Status Split(...) { return str_util::SplitUTF8(...); }\r\n};\r\n```\r\n\r\nThat way it's easy to keep a bulk of the logic in sync?", "created_at": "2017-10-13T23:20:41Z", "updated_at": "2018-05-27T18:27:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r144674909", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/144674909"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r144674909"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971"}}, "body_html": "<p>IIUC, the implementation of these two kernels is almost identical, save for the different function call to split (and the vall to validating UTF8 of the delimiter).</p>\n<p>Could we refactor the kernel implementation so that a bulk of the code is shared? Something along the lines of:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">StringSplitOpBase</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">OpKernel</span> {\n    ...\n    Status <span class=\"pl-en\">ValidateDelimiter</span>(<span class=\"pl-k\">const</span> string&amp; delimiter) = 0;\n    Status <span class=\"pl-en\">Split</span>(<span class=\"pl-k\">const</span> string&amp; input, <span class=\"pl-k\">const</span> string&amp; delimiter, vector&lt;string&gt;* parts) = 0;\n}<span class=\"pl-ii\"></span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">StrignSplitOp</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">StringSplitOpBase</span> {\n  Status <span class=\"pl-en\">ValidateDelimiter</span>(<span class=\"pl-k\">const</span> string&amp; delimiter) { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Status::OK</span>(); }\n  Status <span class=\"pl-en\">Split</span>(<span class=\"pl-k\">const</span> string&amp; input, <span class=\"pl-k\">const</span> string&amp; delimiter, vector&lt;string&gt;* parts) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">str_util::Split</span>(...);\n  }  \n};\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">StringSplitUTF8Op</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">StringSplitOp</span> {\n  Status <span class=\"pl-en\">ValidateDelimiter</span>(<span class=\"pl-k\">const</span> string&amp; delimiter) { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">str_util::ValidUTF8</span>(delimiter); }\n  Status <span class=\"pl-en\">Split</span>(...) { <span class=\"pl-k\">return</span> <span class=\"pl-c1\">str_util::SplitUTF8</span>(...); }\n};</pre></div>\n<p>That way it's easy to keep a bulk of the logic in sync?</p>", "body_text": "IIUC, the implementation of these two kernels is almost identical, save for the different function call to split (and the vall to validating UTF8 of the delimiter).\nCould we refactor the kernel implementation so that a bulk of the code is shared? Something along the lines of:\nclass StringSplitOpBase : public OpKernel {\n    ...\n    Status ValidateDelimiter(const string& delimiter) = 0;\n    Status Split(const string& input, const string& delimiter, vector<string>* parts) = 0;\n}\n\nclass StrignSplitOp : public StringSplitOpBase {\n  Status ValidateDelimiter(const string& delimiter) { return Status::OK(); }\n  Status Split(const string& input, const string& delimiter, vector<string>* parts) {\n    return str_util::Split(...);\n  }  \n};\n\nclass StringSplitUTF8Op : public StringSplitOp {\n  Status ValidateDelimiter(const string& delimiter) { return str_util::ValidUTF8(delimiter); }\n  Status Split(...) { return str_util::SplitUTF8(...); }\n};\nThat way it's easy to keep a bulk of the logic in sync?"}