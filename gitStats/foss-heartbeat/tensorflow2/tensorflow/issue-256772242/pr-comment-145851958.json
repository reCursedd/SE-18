{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/145851958", "pull_request_review_id": 70714692, "id": 145851958, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTg1MTk1OA==", "diff_hunk": "@@ -416,6 +417,99 @@ bool ConsumeNonWhitespace(StringPiece* s, StringPiece* val) {\n   }\n }\n \n+Status SplitUTF8(StringPiece text, const string& delim, const bool skip_empty,\n+                 std::vector<string>* result) {\n+  // Bytes    Byte 1    Byte 2    Byte 3    Byte 4\n+  //   1     0xxxxxxx\n+  //   2     110xxxxx  10xxxxxx\n+  //   3     1110xxxx  10xxxxxx  10xxxxxx\n+  //   4     11110xxx  10xxxxxx  10xxxxxx  10xxxxxx\n+  result->clear();\n+  size_t char_start = 0, char_len = 0;\n+  bool advance = true;\n+  for (size_t i = 0; i < text.size(); ++i) {\n+    if (char_start == i) {\n+      if (!UTF8CharNumBytes(text, &char_len)) {\n+        result->clear();\n+        return errors::InvalidArgument(\"Invalid UTF8 encoding at byte \", i);\n+      }\n+    }\n+    // Validate all intermediate bytes are valid UTF-8\n+    if (TF_PREDICT_FALSE((char_len > 1) && (char_start != i) &&\n+                         (text[i] & 0xC0) != 0x80)) {\n+      return errors::InvalidArgument(\"Invalid UTF8 encoding at byte \", i);\n+    }\n+    // Reached the end of a character\n+    if (char_start + char_len == i + 1) {\n+      const StringPiece entry = text.substr(char_start, char_len).ToString();\n+      if (delim == \"\") {\n+        result->emplace_back(entry.ToString());\n+      } else if (delim == entry) {\n+        advance = true;\n+        if (!skip_empty) {\n+          if (TF_PREDICT_FALSE(char_start == 0)) {", "path": "tensorflow/core/lib/strings/str_util.cc", "position": null, "original_position": 42, "commit_id": "95f2a5cf9d08d4ed07eb88057ead689ce61faa54", "original_commit_id": "c4e6240ef9b48597e06dc02c0753e560f0c2ed25", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "body": "Thanks @asimshankar. My previous interpretation was not right. I have updated the PR so that now it will match python behavior in case `skip_empty=False`, i.e.,\r\n```\r\n>>> \"##a##b##c##\".split(\"#\")\r\n['', '', 'a', '', 'b', '', 'c', '', '']\r\n>>> \r\n```  ", "created_at": "2017-10-19T23:54:21Z", "updated_at": "2018-05-27T18:27:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r145851958", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/145851958"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r145851958"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971"}}, "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a>. My previous interpretation was not right. I have updated the PR so that now it will match python behavior in case <code>skip_empty=False</code>, i.e.,</p>\n<pre><code>&gt;&gt;&gt; \"##a##b##c##\".split(\"#\")\n['', '', 'a', '', 'b', '', 'c', '', '']\n&gt;&gt;&gt; \n</code></pre>", "body_text": "Thanks @asimshankar. My previous interpretation was not right. I have updated the PR so that now it will match python behavior in case skip_empty=False, i.e.,\n>>> \"##a##b##c##\".split(\"#\")\n['', '', 'a', '', 'b', '', 'c', '', '']\n>>>", "in_reply_to_id": 145828821}