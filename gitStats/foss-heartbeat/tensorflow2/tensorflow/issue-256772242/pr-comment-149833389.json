{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149833389", "pull_request_review_id": 75292199, "id": 149833389, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTgzMzM4OQ==", "diff_hunk": "@@ -416,6 +417,103 @@ bool ConsumeNonWhitespace(StringPiece* s, StringPiece* val) {\n   }\n }\n \n+Status SplitUTF8(StringPiece text, const string& delim, const bool skip_empty,\n+                 std::vector<string>* result) {\n+  // Bytes    Byte 1    Byte 2    Byte 3    Byte 4\n+  //   1     0xxxxxxx\n+  //   2     110xxxxx  10xxxxxx\n+  //   3     1110xxxx  10xxxxxx  10xxxxxx\n+  //   4     11110xxx  10xxxxxx  10xxxxxx  10xxxxxx\n+  result->clear();\n+  size_t char_start = 0, char_len = 0;\n+  bool advance = true;\n+  for (size_t i = 0; i < text.size(); ++i) {\n+    if (char_start == i) {\n+      if (!UTF8CharNumBytes(text, &char_len)) {\n+        result->clear();\n+        return errors::InvalidArgument(\"Invalid UTF8 encoding at byte \", i);\n+      }\n+    }\n+    // Validate all intermediate bytes are valid UTF-8\n+    if (TF_PREDICT_FALSE((char_len > 1) && (char_start != i) &&\n+                         (text[i] & 0xC0) != 0x80)) {\n+      return errors::InvalidArgument(\"Invalid UTF8 encoding at byte \", i);\n+    }\n+    // Reached the end of a character\n+    if (char_start + char_len == i + 1) {\n+      const StringPiece entry = text.substr(char_start, char_len).ToString();\n+      if (delim == \"\") {\n+        result->emplace_back(entry.ToString());\n+      } else if (delim == entry) {\n+        advance = true;\n+        if (!skip_empty) {\n+          // Follow python style, if it is beginning or the end, always add ''\n+          // >>> \"##a##b##c##\".split(\"#\")\n+          // ['', '', 'a', '', 'b', '', 'c', '', '']\n+          if (result->size() == 0 || result->back() != \"\") {\n+            result->emplace_back(\"\");\n+          } else if (result->size() == 1) {", "path": "tensorflow/core/lib/strings/str_util.cc", "position": null, "original_position": 47, "commit_id": "95f2a5cf9d08d4ed07eb88057ead689ce61faa54", "original_commit_id": "c3ae15f5b6674751a36a385346104c914b0a5c73", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "body": "@asimshankar I think some special handling of begin and end may still be needed. For example, in python:\r\n```python\r\nPython 2.7.10 (default, Feb  7 2017, 00:08:15) \r\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> \"###a#\".split(\"#\")\r\n['', '', '', 'a', '']\r\n>>> \",\".split(\",\")\r\n['', '']\r\n>>> \r\n```\r\n\r\nThe first case ` \"###a#\".split(\"#\")` returns 3 empty chars before `a` and the second case will return 2 chars.\r\n\r\nI updated the PR to try to match the above situation. Please take a look and see if it fit.", "created_at": "2017-11-08T23:59:39Z", "updated_at": "2018-05-27T18:27:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r149833389", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149833389"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12971#discussion_r149833389"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12971"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> I think some special handling of begin and end may still be needed. For example, in python:</p>\n<div class=\"highlight highlight-source-python\"><pre>Python <span class=\"pl-c1\">2.7</span>.10 (default, Feb  <span class=\"pl-c1\">7</span> <span class=\"pl-c1\">2017</span>, <span class=\"pl-c1\">00</span>:<span class=\"pl-c1\">0<span class=\"pl-ii\">8</span></span>:<span class=\"pl-c1\">15</span>) \n[<span class=\"pl-c1\">GCC</span> <span class=\"pl-c1\">4.2</span>.1 Compatible Apple <span class=\"pl-c1\">LLVM</span> <span class=\"pl-c1\">8.0</span>.0 (clang<span class=\"pl-k\">-</span><span class=\"pl-c1\">800.0</span>.34)] on darwin\nType <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>help<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>copyright<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>credits<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">or</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>license<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">for</span> more information.\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>###a#<span class=\"pl-pds\">\"</span></span>.split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#<span class=\"pl-pds\">\"</span></span>)\n[<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>.split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>)\n[<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> </pre></div>\n<p>The first case <code> \"###a#\".split(\"#\")</code> returns 3 empty chars before <code>a</code> and the second case will return 2 chars.</p>\n<p>I updated the PR to try to match the above situation. Please take a look and see if it fit.</p>", "body_text": "@asimshankar I think some special handling of begin and end may still be needed. For example, in python:\nPython 2.7.10 (default, Feb  7 2017, 00:08:15) \n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \"###a#\".split(\"#\")\n['', '', '', 'a', '']\n>>> \",\".split(\",\")\n['', '']\n>>> \nThe first case  \"###a#\".split(\"#\") returns 3 empty chars before a and the second case will return 2 chars.\nI updated the PR to try to match the above situation. Please take a look and see if it fit.", "in_reply_to_id": 149565636}