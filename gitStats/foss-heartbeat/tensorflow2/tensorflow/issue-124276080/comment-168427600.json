{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/168427600", "html_url": "https://github.com/tensorflow/tensorflow/pull/648#issuecomment-168427600", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/648", "id": 168427600, "node_id": "MDEyOklzc3VlQ29tbWVudDE2ODQyNzYwMA==", "user": {"login": "samjabrahams", "id": 11607205, "node_id": "MDQ6VXNlcjExNjA3MjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/11607205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samjabrahams", "html_url": "https://github.com/samjabrahams", "followers_url": "https://api.github.com/users/samjabrahams/followers", "following_url": "https://api.github.com/users/samjabrahams/following{/other_user}", "gists_url": "https://api.github.com/users/samjabrahams/gists{/gist_id}", "starred_url": "https://api.github.com/users/samjabrahams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samjabrahams/subscriptions", "organizations_url": "https://api.github.com/users/samjabrahams/orgs", "repos_url": "https://api.github.com/users/samjabrahams/repos", "events_url": "https://api.github.com/users/samjabrahams/events{/privacy}", "received_events_url": "https://api.github.com/users/samjabrahams/received_events", "type": "User", "site_admin": false}, "created_at": "2016-01-02T20:56:01Z", "updated_at": "2016-01-02T20:57:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p>After realizing I missed some details for the GitHub-ification of header anchors, <a href=\"https://github.com/samjabrahams/tensorflow_util/blob/master/md/github_header_test.md\">I played around with more edge cases</a> to hone the algorithm. I had to make three small changes to what I had above:</p>\n<ol>\n<li>GitHub does not remove trailing hyphens</li>\n<li>It replaces groups of whitespace with hyphens <em>before</em> removing strange characters.\n<ul>\n<li>This can lead to trailing hyphens. e.g. \"This header ends with ellipses ...\" -&gt; \"#this-header-ends-with-ellipses-\"</li>\n</ul>\n</li>\n<li>Make sure that the regex substitution is flagged for UTF-8 encoding</li>\n</ol>\n<p>GitHub handles UTF-8 encoding in its header anchors, so make sure that any settings necessary to enable UTF-8 are switched on.</p>\n<p>I changed the code in the line notes above, but here is the fixed Python code again so going back up to read it isn't necessary. To test out Unicode letters in Python, make sure to explicitly make the string unicode with <code>u\"This is my h\u00e9ader string!\"</code> syntax:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">create_anchor_from_header</span>(<span class=\"pl-smi\">header</span>, <span class=\"pl-smi\">existingAnchors</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Strip white space on the left/right and make lower case</span>\n    out <span class=\"pl-k\">=</span> header.strip().lower()\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Replace groups of white space with hyphens</span>\n    out <span class=\"pl-k\">=</span> re.sub(<span class=\"pl-sr\"><span class=\"pl-bu\">ur</span><span class=\"pl-pds\">'</span><span class=\"pl-c1\">\\s</span><span class=\"pl-k\">+</span><span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-<span class=\"pl-pds\">\"</span></span>, out, <span class=\"pl-v\">flags</span><span class=\"pl-k\">=</span>re.<span class=\"pl-c1\">UNICODE</span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Remove non-alphanumeric characters, hyphens, and spaces</span>\n    out <span class=\"pl-k\">=</span> re.sub(<span class=\"pl-sr\"><span class=\"pl-bu\">ur</span><span class=\"pl-pds\">'</span>[<span class=\"pl-k\">^</span><span class=\"pl-c1\">\\w</span><span class=\"pl-cce\">\\-</span><span class=\"pl-c1\"> </span>]<span class=\"pl-k\">+</span><span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, out, <span class=\"pl-v\">flags</span><span class=\"pl-k\">=</span>re.<span class=\"pl-c1\">UNICODE</span>)\n\n    <span class=\"pl-k\">if</span> existingAnchors:\n        <span class=\"pl-k\">if</span> out <span class=\"pl-k\">in</span> existingAnchors:\n            i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\n            <span class=\"pl-k\">while</span> (out <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(i)) <span class=\"pl-k\">in</span> existingAnchors <span class=\"pl-k\">and</span> i <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">100</span>:\n                i <span class=\"pl-k\">=</span> i <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>\n            out <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(i)\n    <span class=\"pl-k\">return</span> out</pre></div>", "body_text": "After realizing I missed some details for the GitHub-ification of header anchors, I played around with more edge cases to hone the algorithm. I had to make three small changes to what I had above:\n\nGitHub does not remove trailing hyphens\nIt replaces groups of whitespace with hyphens before removing strange characters.\n\nThis can lead to trailing hyphens. e.g. \"This header ends with ellipses ...\" -> \"#this-header-ends-with-ellipses-\"\n\n\nMake sure that the regex substitution is flagged for UTF-8 encoding\n\nGitHub handles UTF-8 encoding in its header anchors, so make sure that any settings necessary to enable UTF-8 are switched on.\nI changed the code in the line notes above, but here is the fixed Python code again so going back up to read it isn't necessary. To test out Unicode letters in Python, make sure to explicitly make the string unicode with u\"This is my h\u00e9ader string!\" syntax:\ndef create_anchor_from_header(header, existingAnchors=None):\n\n    # Strip white space on the left/right and make lower case\n    out = header.strip().lower()\n\n    # Replace groups of white space with hyphens\n    out = re.sub(ur'\\s+', lambda x: \"-\", out, flags=re.UNICODE)\n\n    # Remove non-alphanumeric characters, hyphens, and spaces\n    out = re.sub(ur'[^\\w\\- ]+', lambda x: \"\", out, flags=re.UNICODE)\n\n    if existingAnchors:\n        if out in existingAnchors:\n            i = 1\n            while (out + \"-\" + str(i)) in existingAnchors and i < 100:\n                i = i + 1\n            out += \"-\" + str(i)\n    return out", "body": "After realizing I missed some details for the GitHub-ification of header anchors, [I played around with more edge cases](https://github.com/samjabrahams/tensorflow_util/blob/master/md/github_header_test.md) to hone the algorithm. I had to make three small changes to what I had above:\n1. GitHub does not remove trailing hyphens\n2. It replaces groups of whitespace with hyphens _before_ removing strange characters. \n   - This can lead to trailing hyphens. e.g. \"This header ends with ellipses ...\" -> \"#this-header-ends-with-ellipses-\"\n3. Make sure that the regex substitution is flagged for UTF-8 encoding\n\nGitHub handles UTF-8 encoding in its header anchors, so make sure that any settings necessary to enable UTF-8 are switched on.\n\nI changed the code in the line notes above, but here is the fixed Python code again so going back up to read it isn't necessary. To test out Unicode letters in Python, make sure to explicitly make the string unicode with `u\"This is my h\u00e9ader string!\"` syntax:\n\n``` python\ndef create_anchor_from_header(header, existingAnchors=None):\n\n    # Strip white space on the left/right and make lower case\n    out = header.strip().lower()\n\n    # Replace groups of white space with hyphens\n    out = re.sub(ur'\\s+', lambda x: \"-\", out, flags=re.UNICODE)\n\n    # Remove non-alphanumeric characters, hyphens, and spaces\n    out = re.sub(ur'[^\\w\\- ]+', lambda x: \"\", out, flags=re.UNICODE)\n\n    if existingAnchors:\n        if out in existingAnchors:\n            i = 1\n            while (out + \"-\" + str(i)) in existingAnchors and i < 100:\n                i = i + 1\n            out += \"-\" + str(i)\n    return out\n```\n"}