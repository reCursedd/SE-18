{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22538", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22538/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22538/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22538/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22538", "id": 364058244, "node_id": "MDU6SXNzdWUzNjQwNTgyNDQ=", "number": 22538, "title": "tfe.Saver only stores last 5 checkpoints", "user": {"login": "gokul-uf", "id": 5398125, "node_id": "MDQ6VXNlcjUzOTgxMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5398125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gokul-uf", "html_url": "https://github.com/gokul-uf", "followers_url": "https://api.github.com/users/gokul-uf/followers", "following_url": "https://api.github.com/users/gokul-uf/following{/other_user}", "gists_url": "https://api.github.com/users/gokul-uf/gists{/gist_id}", "starred_url": "https://api.github.com/users/gokul-uf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gokul-uf/subscriptions", "organizations_url": "https://api.github.com/users/gokul-uf/orgs", "repos_url": "https://api.github.com/users/gokul-uf/repos", "events_url": "https://api.github.com/users/gokul-uf/events{/privacy}", "received_events_url": "https://api.github.com/users/gokul-uf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-26T14:27:34Z", "updated_at": "2018-09-26T19:15:51Z", "closed_at": "2018-09-26T19:14:13Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 18.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: NA</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.10.1</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 9.0</li>\n<li><strong>GPU model and memory</strong>: 940 MX</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>import numpy as np\nimport os\n\nimport tensorflow as tf\nimport tensorflow.contrib.eager as tfe\n\n\n '''The following should be irrelevant, but nevertheless'''\nclass CNNClassifier(tf.keras.Model):\n\n    def __init__(self):\n        super(CNNClassifier, self).__init__()\n        xav_init = tf.contrib.layers.xavier_initializer\n\n        self.layer_1 = tf.layers.Conv2D(\n            filters=32,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.layer_2 = tf.layers.Conv2D(\n            filters=64,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.layer_3 = tf.layers.Conv2D(\n            filters=128,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.layer_4 = tf.layers.Conv2D(\n            filters=256,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.layer_5 = tf.layers.Conv2D(\n            filters=512,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.dense = tf.layers.Dense(units=10)\n\n    def call(self, inputs):\n        inputs = tf.convert_to_tensor(inputs)\n        x = tf.layers.max_pooling2d(\n            self.layer_1(inputs), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.max_pooling2d(\n            self.layer_2(x), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.max_pooling2d(\n            self.layer_3(x), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.max_pooling2d(\n            self.layer_4(x), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.max_pooling2d(\n            self.layer_5(x), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.flatten(x)\n        x = self.dense(x)\n        return x\n\nif __name__ == \"__main__\":\n\tos.mkdir(\"saved_models\")\n    tfe.enable_eager_execution()\n\n    c = CNNClassifier()\n    c(np.random.randn(1, 32, 32, 3))\n\n    saver = tfe.Saver(c.variables)\n\n    for i in range(100):\n        print(i)\n        saver.save(f\"saved_models/step_{i}.ckpt\")\n\n</code></pre>\n<h3>Problem Description</h3>\n<p>I am using eager execution and the <code>tfe.Saver</code> class to save my model's weights. However, if I am saving many checkpoints, only last five checkpoints are saved. This is very similar to issues with <code>tf.train.Saver</code> where the <code>max_to_keep</code> argument defaults to <code>5</code>. Since <code>tfe.Saver</code> doesn't have a corresponding argument, it seems to me that it is impossible to store more than the 5 most recent checkpoints.</p>\n<p>I am happy to submit PRs if there's any guidance on how to fix this issue.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.10.1\nPython version: 3.6.5\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: CUDA 9.0\nGPU model and memory: 940 MX\nExact command to reproduce:\n\nimport numpy as np\nimport os\n\nimport tensorflow as tf\nimport tensorflow.contrib.eager as tfe\n\n\n '''The following should be irrelevant, but nevertheless'''\nclass CNNClassifier(tf.keras.Model):\n\n    def __init__(self):\n        super(CNNClassifier, self).__init__()\n        xav_init = tf.contrib.layers.xavier_initializer\n\n        self.layer_1 = tf.layers.Conv2D(\n            filters=32,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.layer_2 = tf.layers.Conv2D(\n            filters=64,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.layer_3 = tf.layers.Conv2D(\n            filters=128,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.layer_4 = tf.layers.Conv2D(\n            filters=256,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.layer_5 = tf.layers.Conv2D(\n            filters=512,\n            kernel_size=[3, 3],\n            padding=\"same\",\n            activation=tf.nn.relu,\n            kernel_initializer=xav_init())\n        self.dense = tf.layers.Dense(units=10)\n\n    def call(self, inputs):\n        inputs = tf.convert_to_tensor(inputs)\n        x = tf.layers.max_pooling2d(\n            self.layer_1(inputs), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.max_pooling2d(\n            self.layer_2(x), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.max_pooling2d(\n            self.layer_3(x), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.max_pooling2d(\n            self.layer_4(x), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.max_pooling2d(\n            self.layer_5(x), pool_size=[2, 2], strides=[2, 2])\n        x = tf.layers.flatten(x)\n        x = self.dense(x)\n        return x\n\nif __name__ == \"__main__\":\n\tos.mkdir(\"saved_models\")\n    tfe.enable_eager_execution()\n\n    c = CNNClassifier()\n    c(np.random.randn(1, 32, 32, 3))\n\n    saver = tfe.Saver(c.variables)\n\n    for i in range(100):\n        print(i)\n        saver.save(f\"saved_models/step_{i}.ckpt\")\n\n\nProblem Description\nI am using eager execution and the tfe.Saver class to save my model's weights. However, if I am saving many checkpoints, only last five checkpoints are saved. This is very similar to issues with tf.train.Saver where the max_to_keep argument defaults to 5. Since tfe.Saver doesn't have a corresponding argument, it seems to me that it is impossible to store more than the 5 most recent checkpoints.\nI am happy to submit PRs if there's any guidance on how to fix this issue.", "body": "\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 18.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: NA\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.10.1\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: CUDA 9.0\r\n- **GPU model and memory**: 940 MX\r\n- **Exact command to reproduce**:\r\n```\r\nimport numpy as np\r\nimport os\r\n\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.eager as tfe\r\n\r\n\r\n '''The following should be irrelevant, but nevertheless'''\r\nclass CNNClassifier(tf.keras.Model):\r\n\r\n    def __init__(self):\r\n        super(CNNClassifier, self).__init__()\r\n        xav_init = tf.contrib.layers.xavier_initializer\r\n\r\n        self.layer_1 = tf.layers.Conv2D(\r\n            filters=32,\r\n            kernel_size=[3, 3],\r\n            padding=\"same\",\r\n            activation=tf.nn.relu,\r\n            kernel_initializer=xav_init())\r\n        self.layer_2 = tf.layers.Conv2D(\r\n            filters=64,\r\n            kernel_size=[3, 3],\r\n            padding=\"same\",\r\n            activation=tf.nn.relu,\r\n            kernel_initializer=xav_init())\r\n        self.layer_3 = tf.layers.Conv2D(\r\n            filters=128,\r\n            kernel_size=[3, 3],\r\n            padding=\"same\",\r\n            activation=tf.nn.relu,\r\n            kernel_initializer=xav_init())\r\n        self.layer_4 = tf.layers.Conv2D(\r\n            filters=256,\r\n            kernel_size=[3, 3],\r\n            padding=\"same\",\r\n            activation=tf.nn.relu,\r\n            kernel_initializer=xav_init())\r\n        self.layer_5 = tf.layers.Conv2D(\r\n            filters=512,\r\n            kernel_size=[3, 3],\r\n            padding=\"same\",\r\n            activation=tf.nn.relu,\r\n            kernel_initializer=xav_init())\r\n        self.dense = tf.layers.Dense(units=10)\r\n\r\n    def call(self, inputs):\r\n        inputs = tf.convert_to_tensor(inputs)\r\n        x = tf.layers.max_pooling2d(\r\n            self.layer_1(inputs), pool_size=[2, 2], strides=[2, 2])\r\n        x = tf.layers.max_pooling2d(\r\n            self.layer_2(x), pool_size=[2, 2], strides=[2, 2])\r\n        x = tf.layers.max_pooling2d(\r\n            self.layer_3(x), pool_size=[2, 2], strides=[2, 2])\r\n        x = tf.layers.max_pooling2d(\r\n            self.layer_4(x), pool_size=[2, 2], strides=[2, 2])\r\n        x = tf.layers.max_pooling2d(\r\n            self.layer_5(x), pool_size=[2, 2], strides=[2, 2])\r\n        x = tf.layers.flatten(x)\r\n        x = self.dense(x)\r\n        return x\r\n\r\nif __name__ == \"__main__\":\r\n\tos.mkdir(\"saved_models\")\r\n    tfe.enable_eager_execution()\r\n\r\n    c = CNNClassifier()\r\n    c(np.random.randn(1, 32, 32, 3))\r\n\r\n    saver = tfe.Saver(c.variables)\r\n\r\n    for i in range(100):\r\n        print(i)\r\n        saver.save(f\"saved_models/step_{i}.ckpt\")\r\n\r\n```\r\n\r\n### Problem Description\r\nI am using eager execution and the `tfe.Saver` class to save my model's weights. However, if I am saving many checkpoints, only last five checkpoints are saved. This is very similar to issues with `tf.train.Saver` where the `max_to_keep` argument defaults to `5`. Since `tfe.Saver` doesn't have a corresponding argument, it seems to me that it is impossible to store more than the 5 most recent checkpoints.\r\n\r\nI am happy to submit PRs if there's any guidance on how to fix this issue.\r\n\r\n\r\n"}