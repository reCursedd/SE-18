{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3952", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3952/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3952/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3952/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3952", "id": 172456395, "node_id": "MDU6SXNzdWUxNzI0NTYzOTU=", "number": 3952, "title": "Poor results with tensorflow DNNClassifier and cross_val_score", "user": {"login": "lms-bv", "id": 3215990, "node_id": "MDQ6VXNlcjMyMTU5OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3215990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lms-bv", "html_url": "https://github.com/lms-bv", "followers_url": "https://api.github.com/users/lms-bv/followers", "following_url": "https://api.github.com/users/lms-bv/following{/other_user}", "gists_url": "https://api.github.com/users/lms-bv/gists{/gist_id}", "starred_url": "https://api.github.com/users/lms-bv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lms-bv/subscriptions", "organizations_url": "https://api.github.com/users/lms-bv/orgs", "repos_url": "https://api.github.com/users/lms-bv/repos", "events_url": "https://api.github.com/users/lms-bv/events{/privacy}", "received_events_url": "https://api.github.com/users/lms-bv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-22T13:46:24Z", "updated_at": "2016-08-23T04:35:58Z", "closed_at": "2016-08-22T23:41:18Z", "author_association": "NONE", "body_html": "<p>I am using python 3.5, tensorflow 0.10 and its DNNClassifier. If I perform a single training and testing stage, as below, the test result is decent: accuracy = 0.9333</p>\n<p>import tensorflow as tf<br>\nfrom tensorflow.contrib import learn<br>\nfrom sklearn.cross_validation import cross_val_score, ShuffleSplit, train_test_split<br>\nfrom sklearn.metrics import accuracy_score<br>\nimport numpy as np<br>\nfrom sklearn.metrics import accuracy_score<br>\nfrom sklearn import datasets, cross_validation</p>\n<p>iris = datasets.load_iris()</p>\n<p>feature_columns = learn.infer_real_valued_columns_from_input(iris.data)</p>\n<p>x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.20, random_state = 20)</p>\n<p>model = learn.DNNClassifier(hidden_units=[5],<br>\nn_classes=3,<br>\nfeature_columns=feature_columns,<br>\n)</p>\n<p>model.fit(x_train, y_train, steps=1000)<br>\npredicted = model.predict(x_test)</p>\n<p>print('Accuracy on test set: %f' % accuracy_score(y_test, predicted))<br>\nIf I use sklearn's cross_val_score, then the final results is much poorer, about 0.33 accuracy:</p>\n<p>model = learn.DNNClassifier(hidden_units=[5],<br>\nn_classes=3,<br>\nfeature_columns=feature_columns,<br>\n)</p>\n<p>scores = cross_val_score(estimator=model,<br>\nX=iris.data,<br>\ny=iris.target,<br>\nscoring = 'accuracy',<br>\ncv=5,<br>\nfit_params={'steps': 1000},<br>\n)</p>\n<p>print(scores)<br>\nprint(np.mean(scores))<br>\nThe scores ad their mean are:</p>\n<p>[ 0.          0.33333333  1.          0.33333333  0.        ]<br>\n0.333333333333<br>\nWhat's wrong with my code in cross validation estimation?</p>", "body_text": "I am using python 3.5, tensorflow 0.10 and its DNNClassifier. If I perform a single training and testing stage, as below, the test result is decent: accuracy = 0.9333\nimport tensorflow as tf\nfrom tensorflow.contrib import learn\nfrom sklearn.cross_validation import cross_val_score, ShuffleSplit, train_test_split\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import datasets, cross_validation\niris = datasets.load_iris()\nfeature_columns = learn.infer_real_valued_columns_from_input(iris.data)\nx_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.20, random_state = 20)\nmodel = learn.DNNClassifier(hidden_units=[5],\nn_classes=3,\nfeature_columns=feature_columns,\n)\nmodel.fit(x_train, y_train, steps=1000)\npredicted = model.predict(x_test)\nprint('Accuracy on test set: %f' % accuracy_score(y_test, predicted))\nIf I use sklearn's cross_val_score, then the final results is much poorer, about 0.33 accuracy:\nmodel = learn.DNNClassifier(hidden_units=[5],\nn_classes=3,\nfeature_columns=feature_columns,\n)\nscores = cross_val_score(estimator=model,\nX=iris.data,\ny=iris.target,\nscoring = 'accuracy',\ncv=5,\nfit_params={'steps': 1000},\n)\nprint(scores)\nprint(np.mean(scores))\nThe scores ad their mean are:\n[ 0.          0.33333333  1.          0.33333333  0.        ]\n0.333333333333\nWhat's wrong with my code in cross validation estimation?", "body": "I am using python 3.5, tensorflow 0.10 and its DNNClassifier. If I perform a single training and testing stage, as below, the test result is decent: accuracy = 0.9333\n\nimport tensorflow as tf\nfrom tensorflow.contrib import learn\nfrom sklearn.cross_validation import cross_val_score, ShuffleSplit, train_test_split\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import datasets, cross_validation\n\niris = datasets.load_iris()\n\nfeature_columns = learn.infer_real_valued_columns_from_input(iris.data)\n\nx_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.20, random_state = 20)\n\nmodel = learn.DNNClassifier(hidden_units=[5], \n                             n_classes=3, \n                             feature_columns=feature_columns, \n                            )\n\nmodel.fit(x_train, y_train, steps=1000)\npredicted = model.predict(x_test)\n\nprint('Accuracy on test set: %f' % accuracy_score(y_test, predicted))\nIf I use sklearn's cross_val_score, then the final results is much poorer, about 0.33 accuracy:\n\nmodel = learn.DNNClassifier(hidden_units=[5], \n                             n_classes=3, \n                             feature_columns=feature_columns, \n                            )\n\nscores = cross_val_score(estimator=model, \n                         X=iris.data, \n                         y=iris.target, \n                         scoring = 'accuracy',\n                         cv=5,\n                         fit_params={'steps': 1000},\n                        )\n\nprint(scores)\nprint(np.mean(scores))\nThe scores ad their mean are:\n\n[ 0.          0.33333333  1.          0.33333333  0.        ]\n0.333333333333\nWhat's wrong with my code in cross validation estimation?\n"}