{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5861", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5861/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5861/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5861/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5861", "id": 191699715, "node_id": "MDU6SXNzdWUxOTE2OTk3MTU=", "number": 5861, "title": "compute_gradients error, if there are unneeded variables", "user": {"login": "FelixGruen", "id": 15670778, "node_id": "MDQ6VXNlcjE1NjcwNzc4", "avatar_url": "https://avatars0.githubusercontent.com/u/15670778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixGruen", "html_url": "https://github.com/FelixGruen", "followers_url": "https://api.github.com/users/FelixGruen/followers", "following_url": "https://api.github.com/users/FelixGruen/following{/other_user}", "gists_url": "https://api.github.com/users/FelixGruen/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixGruen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixGruen/subscriptions", "organizations_url": "https://api.github.com/users/FelixGruen/orgs", "repos_url": "https://api.github.com/users/FelixGruen/repos", "events_url": "https://api.github.com/users/FelixGruen/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixGruen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-25T13:12:24Z", "updated_at": "2016-11-26T00:21:38Z", "closed_at": "2016-11-26T00:11:55Z", "author_association": "NONE", "body_html": "<p>I hope this hasn't been reported already. A Google and GitHub search came up empty.</p>\n<h3>Minimum example</h3>\n<div class=\"highlight highlight-source-python\"><pre>tf.reset_default_graph()\n\noptimizer <span class=\"pl-k\">=</span> tf.train.GradientDescentOptimizer(<span class=\"pl-c1\">0.1</span>)\n\nx1_var <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nx2_var <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n\ngrad_op <span class=\"pl-k\">=</span> optimizer.compute_gradients(x1_var)\n\ninit <span class=\"pl-k\">=</span> tf.initialize_all_variables()\n\nsess <span class=\"pl-k\">=</span> tf.Session()\n\nsess.run(init)\n\ngrads <span class=\"pl-k\">=</span> sess.run(grad_op)\n\n<span class=\"pl-c1\">print</span> grads</pre></div>\n<h3>Expected Output</h3>\n<p>A list of tuples containing all variables needed to compute the input, <code>x1_var</code> in this example, and their gradients. Alternativly, a list of all variables in the graph with zeros or <code>None</code> values for the gradients of those variables that are not needed to compute the input to <code>compute_gradients</code>.</p>\n<h3>Actual Output</h3>\n<pre><code>---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-9-868cc989ac50&gt; in &lt;module&gt;()\n     15 \n     16 sess.run(init)\n---&gt; 17 print sess.run(grad_op)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in run(self, fetches, feed_dict, options, run_metadata)\n    715     try:\n    716       result = self._run(None, fetches, feed_dict, options_ptr,\n--&gt; 717                          run_metadata_ptr)\n    718       if run_metadata:\n    719         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in _run(self, handle, fetches, feed_dict, options, run_metadata)\n    900 \n    901     # Create a fetch handler to take care of the structure of fetches.\n--&gt; 902     fetch_handler = _FetchHandler(self._graph, fetches, feed_dict_string)\n    903 \n    904     # Run request and get response.\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in __init__(self, graph, fetches, feeds)\n    356     \"\"\"\n    357     with graph.as_default():\n--&gt; 358       self._fetch_mapper = _FetchMapper.for_fetch(fetches)\n    359     self._fetches = []\n    360     self._targets = []\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in for_fetch(fetch)\n    179     elif isinstance(fetch, (list, tuple)):\n    180       # NOTE(touts): This is also the code path for namedtuples.\n--&gt; 181       return _ListFetchMapper(fetch)\n    182     elif isinstance(fetch, dict):\n    183       return _DictFetchMapper(fetch)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in __init__(self, fetches)\n    286     \"\"\"\n    287     self._fetch_type = type(fetches)\n--&gt; 288     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]\n    289     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)\n    290 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in for_fetch(fetch)\n    179     elif isinstance(fetch, (list, tuple)):\n    180       # NOTE(touts): This is also the code path for namedtuples.\n--&gt; 181       return _ListFetchMapper(fetch)\n    182     elif isinstance(fetch, dict):\n    183       return _DictFetchMapper(fetch)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in __init__(self, fetches)\n    286     \"\"\"\n    287     self._fetch_type = type(fetches)\n--&gt; 288     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]\n    289     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)\n    290 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in for_fetch(fetch)\n    176     if fetch is None:\n    177       raise TypeError('Fetch argument %r has invalid type %r' %\n--&gt; 178                       (fetch, type(fetch)))\n    179     elif isinstance(fetch, (list, tuple)):\n    180       # NOTE(touts): This is also the code path for namedtuples.\n\nTypeError: Fetch argument None has invalid type &lt;type 'NoneType'&gt;\n</code></pre>\n<h3>Further examples</h3>\n<p>This works:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span>\n\nx1_var <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> x2_var = tf.Variable([2, 3, 4], dtype=tf.float32)</span>\n\ngrad_op <span class=\"pl-k\">=</span> optimizer.compute_gradients(x1_var)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>\n<pre><code>[(array([ 1.,  1.,  1.], dtype=float32), array([ 1.,  2.,  3.], dtype=float32))]\n</code></pre>\n<p>This works:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span>\n\nx1_var <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nx2_var <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n\ncombined_op <span class=\"pl-k\">=</span> tf.concat(<span class=\"pl-c1\">0</span>, [x1_var, x2_var])\n\ngrad_op <span class=\"pl-k\">=</span> optimizer.compute_gradients(combined_op)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>\n<pre><code>[(array([ 1.,  1.,  1.], dtype=float32), array([ 1.,  2.,  3.], dtype=float32)), (array([ 1.,  1.,  1.], dtype=float32), array([ 2.,  3.,  4.], dtype=float32))]\n</code></pre>\n<p>This doesn't:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span>\n\nx1_var <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nx2_var <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n\ncombined_op <span class=\"pl-k\">=</span> tf.concat(<span class=\"pl-c1\">0</span>, [x1_var, x2_var])\n\ngrad_op <span class=\"pl-k\">=</span> optimizer.compute_gradients(x1_var)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>\n<pre><code>---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-18-23fbf6b769d2&gt; in &lt;module&gt;()\n     16 sess.run(init)\n     17 \n---&gt; 18 grads = sess.run(grad_op)\n     19 \n     20 print grads\n...\n</code></pre>\n<h3>Workaround</h3>\n<p>Keep track of all variables needed to compute the input and pass them explicitly to <code>compute_gradients</code>.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span>\n\nx1_var <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nx2_var <span class=\"pl-k\">=</span> tf.Variable([<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n\ngrad_op <span class=\"pl-k\">=</span> optimizer.compute_gradients(x1_var, [x1_var])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>\n<pre><code>[(array([ 1.,  1.,  1.], dtype=float32), array([ 1.,  2.,  3.], dtype=float32))]\n</code></pre>\n<p>Tensorflow version: 0.11.0rc0</p>", "body_text": "I hope this hasn't been reported already. A Google and GitHub search came up empty.\nMinimum example\ntf.reset_default_graph()\n\noptimizer = tf.train.GradientDescentOptimizer(0.1)\n\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\nx2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\n\ngrad_op = optimizer.compute_gradients(x1_var)\n\ninit = tf.initialize_all_variables()\n\nsess = tf.Session()\n\nsess.run(init)\n\ngrads = sess.run(grad_op)\n\nprint grads\nExpected Output\nA list of tuples containing all variables needed to compute the input, x1_var in this example, and their gradients. Alternativly, a list of all variables in the graph with zeros or None values for the gradients of those variables that are not needed to compute the input to compute_gradients.\nActual Output\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-9-868cc989ac50> in <module>()\n     15 \n     16 sess.run(init)\n---> 17 print sess.run(grad_op)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in run(self, fetches, feed_dict, options, run_metadata)\n    715     try:\n    716       result = self._run(None, fetches, feed_dict, options_ptr,\n--> 717                          run_metadata_ptr)\n    718       if run_metadata:\n    719         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in _run(self, handle, fetches, feed_dict, options, run_metadata)\n    900 \n    901     # Create a fetch handler to take care of the structure of fetches.\n--> 902     fetch_handler = _FetchHandler(self._graph, fetches, feed_dict_string)\n    903 \n    904     # Run request and get response.\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in __init__(self, graph, fetches, feeds)\n    356     \"\"\"\n    357     with graph.as_default():\n--> 358       self._fetch_mapper = _FetchMapper.for_fetch(fetches)\n    359     self._fetches = []\n    360     self._targets = []\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in for_fetch(fetch)\n    179     elif isinstance(fetch, (list, tuple)):\n    180       # NOTE(touts): This is also the code path for namedtuples.\n--> 181       return _ListFetchMapper(fetch)\n    182     elif isinstance(fetch, dict):\n    183       return _DictFetchMapper(fetch)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in __init__(self, fetches)\n    286     \"\"\"\n    287     self._fetch_type = type(fetches)\n--> 288     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]\n    289     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)\n    290 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in for_fetch(fetch)\n    179     elif isinstance(fetch, (list, tuple)):\n    180       # NOTE(touts): This is also the code path for namedtuples.\n--> 181       return _ListFetchMapper(fetch)\n    182     elif isinstance(fetch, dict):\n    183       return _DictFetchMapper(fetch)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in __init__(self, fetches)\n    286     \"\"\"\n    287     self._fetch_type = type(fetches)\n--> 288     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]\n    289     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)\n    290 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in for_fetch(fetch)\n    176     if fetch is None:\n    177       raise TypeError('Fetch argument %r has invalid type %r' %\n--> 178                       (fetch, type(fetch)))\n    179     elif isinstance(fetch, (list, tuple)):\n    180       # NOTE(touts): This is also the code path for namedtuples.\n\nTypeError: Fetch argument None has invalid type <type 'NoneType'>\n\nFurther examples\nThis works:\n# ...\n\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\n# x2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\n\ngrad_op = optimizer.compute_gradients(x1_var)\n\n# ...\n[(array([ 1.,  1.,  1.], dtype=float32), array([ 1.,  2.,  3.], dtype=float32))]\n\nThis works:\n# ...\n\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\nx2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\n\ncombined_op = tf.concat(0, [x1_var, x2_var])\n\ngrad_op = optimizer.compute_gradients(combined_op)\n\n# ...\n[(array([ 1.,  1.,  1.], dtype=float32), array([ 1.,  2.,  3.], dtype=float32)), (array([ 1.,  1.,  1.], dtype=float32), array([ 2.,  3.,  4.], dtype=float32))]\n\nThis doesn't:\n# ...\n\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\nx2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\n\ncombined_op = tf.concat(0, [x1_var, x2_var])\n\ngrad_op = optimizer.compute_gradients(x1_var)\n\n# ...\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-18-23fbf6b769d2> in <module>()\n     16 sess.run(init)\n     17 \n---> 18 grads = sess.run(grad_op)\n     19 \n     20 print grads\n...\n\nWorkaround\nKeep track of all variables needed to compute the input and pass them explicitly to compute_gradients.\n# ...\n\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\nx2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\n\ngrad_op = optimizer.compute_gradients(x1_var, [x1_var])\n\n# ...\n[(array([ 1.,  1.,  1.], dtype=float32), array([ 1.,  2.,  3.], dtype=float32))]\n\nTensorflow version: 0.11.0rc0", "body": "I hope this hasn't been reported already. A Google and GitHub search came up empty.\r\n\r\n### Minimum example\r\n```python\r\ntf.reset_default_graph()\r\n\r\noptimizer = tf.train.GradientDescentOptimizer(0.1)\r\n\r\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\r\nx2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\r\n\r\ngrad_op = optimizer.compute_gradients(x1_var)\r\n\r\ninit = tf.initialize_all_variables()\r\n\r\nsess = tf.Session()\r\n\r\nsess.run(init)\r\n\r\ngrads = sess.run(grad_op)\r\n\r\nprint grads\r\n```\r\n\r\n### Expected Output\r\nA list of tuples containing all variables needed to compute the input, `x1_var` in this example, and their gradients. Alternativly, a list of all variables in the graph with zeros or `None` values for the gradients of those variables that are not needed to compute the input to `compute_gradients`.\r\n\r\n### Actual Output\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-9-868cc989ac50> in <module>()\r\n     15 \r\n     16 sess.run(init)\r\n---> 17 print sess.run(grad_op)\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in run(self, fetches, feed_dict, options, run_metadata)\r\n    715     try:\r\n    716       result = self._run(None, fetches, feed_dict, options_ptr,\r\n--> 717                          run_metadata_ptr)\r\n    718       if run_metadata:\r\n    719         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in _run(self, handle, fetches, feed_dict, options, run_metadata)\r\n    900 \r\n    901     # Create a fetch handler to take care of the structure of fetches.\r\n--> 902     fetch_handler = _FetchHandler(self._graph, fetches, feed_dict_string)\r\n    903 \r\n    904     # Run request and get response.\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in __init__(self, graph, fetches, feeds)\r\n    356     \"\"\"\r\n    357     with graph.as_default():\r\n--> 358       self._fetch_mapper = _FetchMapper.for_fetch(fetches)\r\n    359     self._fetches = []\r\n    360     self._targets = []\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in for_fetch(fetch)\r\n    179     elif isinstance(fetch, (list, tuple)):\r\n    180       # NOTE(touts): This is also the code path for namedtuples.\r\n--> 181       return _ListFetchMapper(fetch)\r\n    182     elif isinstance(fetch, dict):\r\n    183       return _DictFetchMapper(fetch)\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in __init__(self, fetches)\r\n    286     \"\"\"\r\n    287     self._fetch_type = type(fetches)\r\n--> 288     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]\r\n    289     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)\r\n    290 \r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in for_fetch(fetch)\r\n    179     elif isinstance(fetch, (list, tuple)):\r\n    180       # NOTE(touts): This is also the code path for namedtuples.\r\n--> 181       return _ListFetchMapper(fetch)\r\n    182     elif isinstance(fetch, dict):\r\n    183       return _DictFetchMapper(fetch)\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in __init__(self, fetches)\r\n    286     \"\"\"\r\n    287     self._fetch_type = type(fetches)\r\n--> 288     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]\r\n    289     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)\r\n    290 \r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.pyc in for_fetch(fetch)\r\n    176     if fetch is None:\r\n    177       raise TypeError('Fetch argument %r has invalid type %r' %\r\n--> 178                       (fetch, type(fetch)))\r\n    179     elif isinstance(fetch, (list, tuple)):\r\n    180       # NOTE(touts): This is also the code path for namedtuples.\r\n\r\nTypeError: Fetch argument None has invalid type <type 'NoneType'>\r\n```\r\n\r\n### Further examples\r\nThis works:\r\n```python\r\n# ...\r\n\r\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\r\n# x2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\r\n\r\ngrad_op = optimizer.compute_gradients(x1_var)\r\n\r\n# ...\r\n```\r\n```\r\n[(array([ 1.,  1.,  1.], dtype=float32), array([ 1.,  2.,  3.], dtype=float32))]\r\n```\r\n\r\nThis works:\r\n```python\r\n# ...\r\n\r\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\r\nx2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\r\n\r\ncombined_op = tf.concat(0, [x1_var, x2_var])\r\n\r\ngrad_op = optimizer.compute_gradients(combined_op)\r\n\r\n# ...\r\n```\r\n```\r\n[(array([ 1.,  1.,  1.], dtype=float32), array([ 1.,  2.,  3.], dtype=float32)), (array([ 1.,  1.,  1.], dtype=float32), array([ 2.,  3.,  4.], dtype=float32))]\r\n```\r\n\r\nThis doesn't:\r\n```python\r\n# ...\r\n\r\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\r\nx2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\r\n\r\ncombined_op = tf.concat(0, [x1_var, x2_var])\r\n\r\ngrad_op = optimizer.compute_gradients(x1_var)\r\n\r\n# ...\r\n```\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-18-23fbf6b769d2> in <module>()\r\n     16 sess.run(init)\r\n     17 \r\n---> 18 grads = sess.run(grad_op)\r\n     19 \r\n     20 print grads\r\n...\r\n```\r\n\r\n### Workaround\r\nKeep track of all variables needed to compute the input and pass them explicitly to `compute_gradients`.\r\n\r\n```python\r\n# ...\r\n\r\nx1_var = tf.Variable([1, 2, 3], dtype=tf.float32)\r\nx2_var = tf.Variable([2, 3, 4], dtype=tf.float32)\r\n\r\ngrad_op = optimizer.compute_gradients(x1_var, [x1_var])\r\n\r\n# ...\r\n```\r\n```\r\n[(array([ 1.,  1.,  1.], dtype=float32), array([ 1.,  2.,  3.], dtype=float32))]\r\n```\r\n\r\nTensorflow version: 0.11.0rc0"}