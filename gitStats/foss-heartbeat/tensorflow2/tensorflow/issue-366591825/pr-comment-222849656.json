{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/222849656", "pull_request_review_id": 161838327, "id": 222849656, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg0OTY1Ng==", "diff_hunk": "@@ -296,7 +296,7 @@ def _verify_destinations_not_different_worker(self, destinations):\n       return\n     for d in cross_tower_ops_lib.get_devices_from(destinations):\n       d_spec = tf_device.DeviceSpec.from_string(d)\n-      if d_spec.job == self._task_type and d_spec.task != self._task_id:\n+      if d_spec.job == self._task_type and d_spec.task != (self._task_id or 0):", "path": "tensorflow/contrib/distribute/python/parameter_server_strategy.py", "position": null, "original_position": 5, "commit_id": "b4d1ab8208e91b0d45a85b003bb27d84521080e5", "original_commit_id": "a9eb0c737f40d691a08ba88e4ac21219451f5e24", "user": {"login": "dave-msk", "id": 20377823, "node_id": "MDQ6VXNlcjIwMzc3ODIz", "avatar_url": "https://avatars0.githubusercontent.com/u/20377823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dave-msk", "html_url": "https://github.com/dave-msk", "followers_url": "https://api.github.com/users/dave-msk/followers", "following_url": "https://api.github.com/users/dave-msk/following{/other_user}", "gists_url": "https://api.github.com/users/dave-msk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dave-msk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dave-msk/subscriptions", "organizations_url": "https://api.github.com/users/dave-msk/orgs", "repos_url": "https://api.github.com/users/dave-msk/repos", "events_url": "https://api.github.com/users/dave-msk/events{/privacy}", "received_events_url": "https://api.github.com/users/dave-msk/received_events", "type": "User", "site_admin": false}, "body": "When running locally through `tf.estimator.train_and_evaluate`, the destination is set to `\"/device:CPU:0\"`. The `d_spec` obtained would have `d_spec.job == None` and `d_spec.task == 0`.\r\n\r\nHowever, `ParameterServerStrategy` assigns both `self._task_type` and `self._task_id` to `None` for local execution, and this line always evaluates to `True` as the first expression becomes `None == None` and the second becomes `0 != None`, which results in an error thrown and effectively disallows local usage.\r\n\r\nThere are several changes I can think of to tackle this problem, one would be to set the initial value for `self._task_id` as `0` in `_initialize_local`, or change this line to consider `None` as `0` in the check. The former approach does solve this problem, but I'm not sure if that would break other code that depends on `self._task_id` being initially `None`, I went for the second approach to minimize the impact of the change.\r\n\r\nP.S. The expression is equivalent to the following\r\n\r\n```python\r\nif not self._task_id:\r\n  task_id = 0\r\nelse:\r\n  task_id = self._task_id\r\nif d_spec.job == self._task_type and d_spec.task != task_id:\r\n  ...\r\n```", "created_at": "2018-10-04T22:45:09Z", "updated_at": "2018-10-15T11:59:05Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22713#discussion_r222849656", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22713", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/222849656"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22713#discussion_r222849656"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22713"}}, "body_html": "<p>When running locally through <code>tf.estimator.train_and_evaluate</code>, the destination is set to <code>\"/device:CPU:0\"</code>. The <code>d_spec</code> obtained would have <code>d_spec.job == None</code> and <code>d_spec.task == 0</code>.</p>\n<p>However, <code>ParameterServerStrategy</code> assigns both <code>self._task_type</code> and <code>self._task_id</code> to <code>None</code> for local execution, and this line always evaluates to <code>True</code> as the first expression becomes <code>None == None</code> and the second becomes <code>0 != None</code>, which results in an error thrown and effectively disallows local usage.</p>\n<p>There are several changes I can think of to tackle this problem, one would be to set the initial value for <code>self._task_id</code> as <code>0</code> in <code>_initialize_local</code>, or change this line to consider <code>None</code> as <code>0</code> in the check. The former approach does solve this problem, but I'm not sure if that would break other code that depends on <code>self._task_id</code> being initially <code>None</code>, I went for the second approach to minimize the impact of the change.</p>\n<p>P.S. The expression is equivalent to the following</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">self</span>._task_id:\n  task_id <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-k\">else</span>:\n  task_id <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._task_id\n<span class=\"pl-k\">if</span> d_spec.job <span class=\"pl-k\">==</span> <span class=\"pl-c1\">self</span>._task_type <span class=\"pl-k\">and</span> d_spec.task <span class=\"pl-k\">!=</span> task_id:\n  <span class=\"pl-c1\">...</span></pre></div>", "body_text": "When running locally through tf.estimator.train_and_evaluate, the destination is set to \"/device:CPU:0\". The d_spec obtained would have d_spec.job == None and d_spec.task == 0.\nHowever, ParameterServerStrategy assigns both self._task_type and self._task_id to None for local execution, and this line always evaluates to True as the first expression becomes None == None and the second becomes 0 != None, which results in an error thrown and effectively disallows local usage.\nThere are several changes I can think of to tackle this problem, one would be to set the initial value for self._task_id as 0 in _initialize_local, or change this line to consider None as 0 in the check. The former approach does solve this problem, but I'm not sure if that would break other code that depends on self._task_id being initially None, I went for the second approach to minimize the impact of the change.\nP.S. The expression is equivalent to the following\nif not self._task_id:\n  task_id = 0\nelse:\n  task_id = self._task_id\nif d_spec.job == self._task_type and d_spec.task != task_id:\n  ...", "in_reply_to_id": 222727502}