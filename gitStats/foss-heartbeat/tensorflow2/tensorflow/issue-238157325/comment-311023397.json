{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/311023397", "html_url": "https://github.com/tensorflow/tensorflow/pull/11012#issuecomment-311023397", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11012", "id": 311023397, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTAyMzM5Nw==", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-26T10:35:10Z", "updated_at": "2017-06-26T10:35:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ok:  this error</p>\n<pre><code>LLVM ERROR: Cannot select: 0x7f9838182938: f64 = fcos 0x7f98381828d0\n  0x7f98381828d0: f64,ch = load&lt;LD8[%2(addrspace=1)](tbaa=&lt;0x7f9838183580&gt;)(noalias=&lt;0x7f983814be50&gt;)(invariant)&gt; 0x7f983824c518, 0x7f9838182868, undef:i64\n    0x7f9838182868: i64 = add 0x7f9838182528, 0x7f9838182c10\n      0x7f9838182528: i64 = addrspacecast[0 -&gt; 1] 0x7f9838182a08\n        0x7f9838182a08: i64,ch = load&lt;LD8[null(addrspace=101)](dereferenceable)(invariant)&gt; 0x7f983824c518, TargetExternalSymbol:i64'_cosine_param_0', undef:i64\n          0x7f9838182180: i64 = TargetExternalSymbol'_cosine_param_0'\n          0x7f9838182250: i64 = undef\n      0x7f9838182c10: i64 = NVPTXISD::MUL_WIDE_UNSIGNED 0x7f98381826c8, Constant:i32&lt;8&gt;\n        0x7f98381826c8: i32 = AssertZext 0x7f98381825f8, ValueType:ch:i2\n          0x7f98381825f8: i32 = llvm.nvvm.read.ptx.sreg.tid.x TargetConstant:i64&lt;3350&gt;\n            0x7f9838182590: i64 = TargetConstant&lt;3350&gt;\n        0x7f9838182ba8: i32 = Constant&lt;8&gt;\n    0x7f9838182250: i64 = undef\nIn function: _cosine\n================================================================================\n</code></pre>\n<p>this indicates that LLVM cannot find a cosine function for f64 that targets the GPU.  Out LLVM person suggests that a possible solution is to add the following to the NVPTXInstrInfo.tf file:</p>\n<pre><code>def SINF64:  NVPTXInst&lt;(outs Float64Regs:$dst), (ins Float64Regs:$src),\n                      \"sin.approx.f64 \\t$dst, $src;\",\n                      [(set Float64Regs:$dst, (fsin Float64Regs:$src))]&gt;,\n                      Requires&lt;[allowUnsafeFPMath]&gt;;\ndef COSF64:  NVPTXInst&lt;(outs Float64Regs:$dst), (ins Float64Regs:$src),\n                      \"cos.approx.f64 \\t$dst, $src;\",\n                      [(set Float64Regs:$dst, (fcos Float64Regs:$src))]&gt;,\n                      Requires&lt;[allowUnsafeFPMath]&gt;;\n</code></pre>\n<p>but that is a quick guess about the right thing.  we have not tested it or anything.</p>\n<p>I'm not going to try to fix this.  I will leave the pull request open for a while, in case you want to use it as a test for making the NVIDIA support in LLVM work.</p>", "body_text": "Ok:  this error\nLLVM ERROR: Cannot select: 0x7f9838182938: f64 = fcos 0x7f98381828d0\n  0x7f98381828d0: f64,ch = load<LD8[%2(addrspace=1)](tbaa=<0x7f9838183580>)(noalias=<0x7f983814be50>)(invariant)> 0x7f983824c518, 0x7f9838182868, undef:i64\n    0x7f9838182868: i64 = add 0x7f9838182528, 0x7f9838182c10\n      0x7f9838182528: i64 = addrspacecast[0 -> 1] 0x7f9838182a08\n        0x7f9838182a08: i64,ch = load<LD8[null(addrspace=101)](dereferenceable)(invariant)> 0x7f983824c518, TargetExternalSymbol:i64'_cosine_param_0', undef:i64\n          0x7f9838182180: i64 = TargetExternalSymbol'_cosine_param_0'\n          0x7f9838182250: i64 = undef\n      0x7f9838182c10: i64 = NVPTXISD::MUL_WIDE_UNSIGNED 0x7f98381826c8, Constant:i32<8>\n        0x7f98381826c8: i32 = AssertZext 0x7f98381825f8, ValueType:ch:i2\n          0x7f98381825f8: i32 = llvm.nvvm.read.ptx.sreg.tid.x TargetConstant:i64<3350>\n            0x7f9838182590: i64 = TargetConstant<3350>\n        0x7f9838182ba8: i32 = Constant<8>\n    0x7f9838182250: i64 = undef\nIn function: _cosine\n================================================================================\n\nthis indicates that LLVM cannot find a cosine function for f64 that targets the GPU.  Out LLVM person suggests that a possible solution is to add the following to the NVPTXInstrInfo.tf file:\ndef SINF64:  NVPTXInst<(outs Float64Regs:$dst), (ins Float64Regs:$src),\n                      \"sin.approx.f64 \\t$dst, $src;\",\n                      [(set Float64Regs:$dst, (fsin Float64Regs:$src))]>,\n                      Requires<[allowUnsafeFPMath]>;\ndef COSF64:  NVPTXInst<(outs Float64Regs:$dst), (ins Float64Regs:$src),\n                      \"cos.approx.f64 \\t$dst, $src;\",\n                      [(set Float64Regs:$dst, (fcos Float64Regs:$src))]>,\n                      Requires<[allowUnsafeFPMath]>;\n\nbut that is a quick guess about the right thing.  we have not tested it or anything.\nI'm not going to try to fix this.  I will leave the pull request open for a while, in case you want to use it as a test for making the NVIDIA support in LLVM work.", "body": "Ok:  this error\r\n\r\n```\r\nLLVM ERROR: Cannot select: 0x7f9838182938: f64 = fcos 0x7f98381828d0\r\n  0x7f98381828d0: f64,ch = load<LD8[%2(addrspace=1)](tbaa=<0x7f9838183580>)(noalias=<0x7f983814be50>)(invariant)> 0x7f983824c518, 0x7f9838182868, undef:i64\r\n    0x7f9838182868: i64 = add 0x7f9838182528, 0x7f9838182c10\r\n      0x7f9838182528: i64 = addrspacecast[0 -> 1] 0x7f9838182a08\r\n        0x7f9838182a08: i64,ch = load<LD8[null(addrspace=101)](dereferenceable)(invariant)> 0x7f983824c518, TargetExternalSymbol:i64'_cosine_param_0', undef:i64\r\n          0x7f9838182180: i64 = TargetExternalSymbol'_cosine_param_0'\r\n          0x7f9838182250: i64 = undef\r\n      0x7f9838182c10: i64 = NVPTXISD::MUL_WIDE_UNSIGNED 0x7f98381826c8, Constant:i32<8>\r\n        0x7f98381826c8: i32 = AssertZext 0x7f98381825f8, ValueType:ch:i2\r\n          0x7f98381825f8: i32 = llvm.nvvm.read.ptx.sreg.tid.x TargetConstant:i64<3350>\r\n            0x7f9838182590: i64 = TargetConstant<3350>\r\n        0x7f9838182ba8: i32 = Constant<8>\r\n    0x7f9838182250: i64 = undef\r\nIn function: _cosine\r\n================================================================================\r\n```\r\n\r\nthis indicates that LLVM cannot find a cosine function for f64 that targets the GPU.  Out LLVM person suggests that a possible solution is to add the following to the NVPTXInstrInfo.tf file:\r\n\r\n```\r\ndef SINF64:  NVPTXInst<(outs Float64Regs:$dst), (ins Float64Regs:$src),\r\n                      \"sin.approx.f64 \\t$dst, $src;\",\r\n                      [(set Float64Regs:$dst, (fsin Float64Regs:$src))]>,\r\n                      Requires<[allowUnsafeFPMath]>;\r\ndef COSF64:  NVPTXInst<(outs Float64Regs:$dst), (ins Float64Regs:$src),\r\n                      \"cos.approx.f64 \\t$dst, $src;\",\r\n                      [(set Float64Regs:$dst, (fcos Float64Regs:$src))]>,\r\n                      Requires<[allowUnsafeFPMath]>;\r\n```\r\n\r\nbut that is a quick guess about the right thing.  we have not tested it or anything.   \r\n\r\nI'm not going to try to fix this.  I will leave the pull request open for a while, in case you want to use it as a test for making the NVIDIA support in LLVM work.\r\n\r\n"}