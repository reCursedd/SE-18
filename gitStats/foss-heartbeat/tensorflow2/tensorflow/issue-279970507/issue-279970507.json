{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15171", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15171/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15171/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15171/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15171", "id": 279970507, "node_id": "MDU6SXNzdWUyNzk5NzA1MDc=", "number": 15171, "title": "[FeatureRequest] Decorator for estimator input_fn", "user": {"login": "damienpontifex", "id": 1321276, "node_id": "MDQ6VXNlcjEzMjEyNzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1321276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damienpontifex", "html_url": "https://github.com/damienpontifex", "followers_url": "https://api.github.com/users/damienpontifex/followers", "following_url": "https://api.github.com/users/damienpontifex/following{/other_user}", "gists_url": "https://api.github.com/users/damienpontifex/gists{/gist_id}", "starred_url": "https://api.github.com/users/damienpontifex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damienpontifex/subscriptions", "organizations_url": "https://api.github.com/users/damienpontifex/orgs", "repos_url": "https://api.github.com/users/damienpontifex/repos", "events_url": "https://api.github.com/users/damienpontifex/events{/privacy}", "received_events_url": "https://api.github.com/users/damienpontifex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-12-07T01:45:44Z", "updated_at": "2018-01-01T10:25:55Z", "closed_at": "2018-01-01T10:25:54Z", "author_association": "NONE", "body_html": "<p>In the documentation for <a href=\"https://www.tensorflow.org/get_started/input_fn#passing_input_fn_data_to_your_model\" rel=\"nofollow\">Passing input_fn Data to Your Model</a> there are a few methods provided for using a function to construct input data and then wrapping that to get a function object. The documentation suggests <code>functools.partial</code> or <code>lambda</code>.</p>\n<p>Would it be possible to provide a python decorator (maybe under the <code>tf.estimator</code> module)?</p>\n<p>Looking at suggested decorator and usage below, I think it makes the code cleaner when making these reusable input functions.</p>\n<h2>Proposed decorator</h2>\n<p><em>n.b. name to be improved/aligned with TF</em></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> functools\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">tf_data_input_fn</span>(<span class=\"pl-smi\">old_func</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">inside</span>(<span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n        <span class=\"pl-k\">return</span> functools.partial(old_func, <span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n    <span class=\"pl-k\">return</span> inside</pre></div>\n<h2>Usage</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-en\">@tf_data_input_fn</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">my_input_fn</span>(<span class=\"pl-smi\">data_set</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Construct dataset, repeat, maps etc</span>\n    features, labels <span class=\"pl-k\">=</span> dataset.make_one_shot_iterator().get_next()\n    <span class=\"pl-k\">return</span> features, labels\n\ntrain_input_fn <span class=\"pl-k\">=</span> my_input_fn(training_set)\neval_input_fn <span class=\"pl-k\">=</span> my_input_fn(test_set)\n\nclassifier.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>train_input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2000</span>)\nclassifier.evaluate(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span> eval_input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2000</span>)</pre></div>\n<p>If this is favourable, I'd be happy to provide a contribution towards such an addition.</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-8-gbca50da6eb 1.4.0</li>\n<li><strong>Python version</strong>: 3.6.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>", "body_text": "In the documentation for Passing input_fn Data to Your Model there are a few methods provided for using a function to construct input data and then wrapping that to get a function object. The documentation suggests functools.partial or lambda.\nWould it be possible to provide a python decorator (maybe under the tf.estimator module)?\nLooking at suggested decorator and usage below, I think it makes the code cleaner when making these reusable input functions.\nProposed decorator\nn.b. name to be improved/aligned with TF\nimport functools\n\ndef tf_data_input_fn(old_func):\n    def inside(*args, **kwargs):\n        return functools.partial(old_func, *args, **kwargs)\n    return inside\nUsage\n@tf_data_input_fn\ndef my_input_fn(data_set):\n    # Construct dataset, repeat, maps etc\n    features, labels = dataset.make_one_shot_iterator().get_next()\n    return features, labels\n\ntrain_input_fn = my_input_fn(training_set)\neval_input_fn = my_input_fn(test_set)\n\nclassifier.train(input_fn=train_input_fn, steps=2000)\nclassifier.evaluate(input_fn= eval_input_fn, steps=2000)\nIf this is favourable, I'd be happy to provide a contribution towards such an addition.\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS\nTensorFlow installed from (source or binary): pip\nTensorFlow version (use command below): v1.4.0-8-gbca50da6eb 1.4.0\nPython version: 3.6.3\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A", "body": "In the documentation for [Passing input_fn Data to Your Model](https://www.tensorflow.org/get_started/input_fn#passing_input_fn_data_to_your_model) there are a few methods provided for using a function to construct input data and then wrapping that to get a function object. The documentation suggests `functools.partial` or `lambda`.\r\n\r\nWould it be possible to provide a python decorator (maybe under the `tf.estimator` module)? \r\n\r\nLooking at suggested decorator and usage below, I think it makes the code cleaner when making these reusable input functions. \r\n\r\n## Proposed decorator\r\n_n.b. name to be improved/aligned with TF_\r\n```python\r\nimport functools\r\n\r\ndef tf_data_input_fn(old_func):\r\n    def inside(*args, **kwargs):\r\n        return functools.partial(old_func, *args, **kwargs)\r\n    return inside\r\n```\r\n\r\n## Usage\r\n```python\r\n@tf_data_input_fn\r\ndef my_input_fn(data_set):\r\n    # Construct dataset, repeat, maps etc\r\n    features, labels = dataset.make_one_shot_iterator().get_next()\r\n    return features, labels\r\n\r\ntrain_input_fn = my_input_fn(training_set)\r\neval_input_fn = my_input_fn(test_set)\r\n\r\nclassifier.train(input_fn=train_input_fn, steps=2000)\r\nclassifier.evaluate(input_fn= eval_input_fn, steps=2000)\r\n```\r\n\r\nIf this is favourable, I'd be happy to provide a contribution towards such an addition.\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS\r\n- **TensorFlow installed from (source or binary)**: pip\r\n- **TensorFlow version (use command below)**: v1.4.0-8-gbca50da6eb 1.4.0\r\n- **Python version**: 3.6.3\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A"}