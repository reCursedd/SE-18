{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132520299", "pull_request_review_id": 55610476, "id": 132520299, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjUyMDI5OQ==", "diff_hunk": "@@ -1057,4 +1092,250 @@ def _linear(args,\n           _BIAS_VARIABLE_NAME, [output_size],\n           dtype=dtype,\n           initializer=bias_initializer)\n-    return nn_ops.bias_add(res, biases)\n+\n+    if not layer_norm:\n+      res = nn_ops.bias_add(res, biases)\n+\n+    return res\n+\n+def _get_variable_collections(variables_collections, name):\n+  if isinstance(variables_collections, dict):\n+    variable_collections = variables_collections.get(name, None)\n+  else:\n+    variable_collections = variables_collections\n+  return variable_collections\n+\n+def _append_tensor_alias(tensor, alias):\n+  \"\"\"Append an alias to the list of aliases of the tensor.\n+\n+  Args:\n+    tensor: A `Tensor`.\n+    alias: String, to add to the list of aliases of the tensor.\n+\n+  Returns:\n+    The tensor with a new alias appended to its list of aliases.\n+  \"\"\"\n+  # Remove ending '/' if present.\n+  if alias[-1] == '/':\n+    alias = alias[:-1]\n+  if hasattr(tensor, 'aliases'):\n+    tensor.aliases.append(alias)\n+  else:\n+    tensor.aliases = [alias]\n+  return tensor\n+\n+def _collect_named_outputs(collections, alias, outputs):\n+  \"\"\"Add `Tensor` outputs tagged with alias to collections.\n+\n+  It is useful to collect end-points or tags for summaries. Example of usage:\n+\n+  logits = collect_named_outputs('end_points', 'inception_v3/logits', logits)\n+  assert 'inception_v3/logits' in logits.aliases\n+\n+  Args:\n+    collections: A collection or list of collections. If None skip collection.\n+    alias: String to append to the list of aliases of outputs, for example,\n+           'inception_v3/conv1'.\n+    outputs: Tensor, an output tensor to collect\n+\n+  Returns:\n+    The outputs Tensor to allow inline call.\n+  \"\"\"\n+  if collections:\n+    _append_tensor_alias(outputs, alias)\n+    ops.add_to_collections(collections, outputs)\n+  return outputs\n+\n+def _layer_norm(inputs,\n+               center=True,\n+               scale=True,\n+               activation_fn=None,\n+               reuse=None,\n+               variables_collections=None,\n+               outputs_collections=None,\n+               trainable=True,\n+               scope=None):\n+  \"\"\"Adds a Layer Normalization layer from https://arxiv.org/abs/1607.06450.\n+\n+    \"Layer Normalization\"\n+\n+    Jimmy Lei Ba, Jamie Ryan Kiros, Geoffrey E. Hinton\n+\n+  Can be used as a normalizer function for conv2d and fully_connected.\n+\n+  Args:\n+    inputs: A tensor with 2 or more dimensions. The normalization\n+            occurs over all but the first dimension.\n+    center: If True, add offset of `beta` to normalized tensor. If False, `beta`\n+      is ignored.\n+    scale: If True, multiply by `gamma`. If False, `gamma` is\n+      not used. When the next layer is linear (also e.g. `nn.relu`), this can be\n+      disabled since the scaling can be done by the next layer.\n+    activation_fn: Activation function, default set to None to skip it and\n+      maintain a linear activation.\n+    reuse: Whether or not the layer and its variables should be reused. To be\n+      able to reuse the layer scope must be given.\n+    variables_collections: Optional collections for the variables.\n+    outputs_collections: Collections to add the outputs.\n+    trainable: If `True` also add variables to the graph collection\n+      `GraphKeys.TRAINABLE_VARIABLES` (see tf.Variable).\n+    scope: Optional scope for `variable_scope`.\n+\n+  Returns:\n+    A `Tensor` representing the output of the operation.\n+\n+  Raises:\n+    ValueError: If rank or last dimension of `inputs` is undefined.\n+  \"\"\"\n+  with vs.variable_scope(scope, 'LayerNorm', [inputs],\n+                                     reuse=reuse) as sc:\n+    inputs = ops.convert_to_tensor(inputs)\n+    inputs_shape = inputs.get_shape()\n+    inputs_rank = inputs_shape.ndims\n+    if inputs_rank is None:\n+      raise ValueError('Inputs %s has undefined rank.' % inputs.name)\n+    dtype = inputs.dtype.base_dtype\n+    axis = list(range(1, inputs_rank))\n+    params_shape = inputs_shape[-1:]\n+    if not params_shape.is_fully_defined():\n+      raise ValueError('Inputs %s has undefined last dimension %s.' % (\n+        inputs.name, params_shape))\n+    # Allocate parameters for the beta and gamma of the normalization.\n+    beta, gamma = None, None\n+    if center:\n+      beta_collections = _get_variable_collections(variables_collections,\n+                                                        'beta')\n+      beta = model_variable(\n+        'beta',\n+        shape=params_shape,\n+        dtype=dtype,\n+        initializer=init_ops.zeros_initializer(),\n+        collections=beta_collections,\n+        trainable=trainable)\n+    if scale:\n+      gamma_collections = _get_variable_collections(variables_collections,\n+                                                         'gamma')\n+      gamma = model_variable(\n+        'gamma',\n+        shape=params_shape,\n+        dtype=dtype,\n+        initializer=init_ops.ones_initializer(),\n+        collections=gamma_collections,\n+        trainable=trainable)\n+    # Calculate the moments on the last axis (layer activations).\n+    mean, variance = nn_impl.moments(inputs, axis, keep_dims=True)\n+    # Compute layer normalization using the batch_normalization function.\n+    variance_epsilon = 1E-12\n+    outputs = nn_impl.batch_normalization(\n+      inputs, mean, variance, beta, gamma, variance_epsilon)\n+    outputs.set_shape(inputs_shape)\n+    if activation_fn is not None:\n+      outputs = activation_fn(outputs)\n+    return _collect_named_outputs(outputs_collections,\n+                                 sc.original_name_scope,\n+                                 outputs)\n+\n+def _norm(g, b, inp, scope):\n+  shape = inp.get_shape()[-1:]\n+  gamma_init = init_ops.constant_initializer(g)\n+  beta_init = init_ops.constant_initializer(b)\n+  with vs.variable_scope(scope):\n+    # Initialize beta and gamma for use by layer_norm.\n+    vs.get_variable(\"gamma\", shape=shape, initializer=gamma_init)\n+    vs.get_variable(\"beta\", shape=shape, initializer=beta_init)\n+  normalized = _layer_norm(inp, reuse=True, scope=scope)\n+  return normalized\n+\n+\n+def model_variable(name, shape=None, dtype=dtypes.float32, initializer=None,\n+                   regularizer=None, trainable=True, collections=None,\n+                   caching_device=None, device=None, partitioner=None,\n+                   custom_getter=None, use_resource=None):\n+  \"\"\"Gets an existing model variable with these parameters or creates a new one.\n+\n+  Args:\n+    name: the name of the new or existing variable.\n+    shape: shape of the new or existing variable.\n+    dtype: type of the new or existing variable (defaults to `DT_FLOAT`).\n+    initializer: initializer for the variable if one is created.\n+    regularizer: a (Tensor -> Tensor or None) function; the result of\n+        applying it on a newly created variable will be added to the collection\n+        GraphKeys.REGULARIZATION_LOSSES and can be used for regularization.\n+    trainable: If `True` also add the variable to the graph collection\n+      `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).\n+    collections: A list of collection names to which the Variable will be added.\n+      Note that the variable is always also added to the\n+      `GraphKeys.GLOBAL_VARIABLES` and `GraphKeys.MODEL_VARIABLES` collections.\n+    caching_device: Optional device string or function describing where the\n+        Variable should be cached for reading.  Defaults to the Variable's\n+        device.\n+    device: Optional device to place the variable. It can be an string or a\n+      function that is called to get the device for the variable.\n+    partitioner: Optional callable that accepts a fully defined `TensorShape`\n+      and dtype of the `Variable` to be created, and returns a list of\n+      partitions for each axis (currently only one axis can be partitioned).\n+    custom_getter: Callable that allows overwriting the internal\n+      get_variable method and has to have the same signature.\n+    use_resource: If `True` use a ResourceVariable instead of a Variable.\n+\n+  Returns:\n+    The created or existing variable.\n+  \"\"\"\n+  collections = list(collections or [])\n+  collections += [ops.GraphKeys.GLOBAL_VARIABLES, ops.GraphKeys.MODEL_VARIABLES]\n+  var = variable(name, shape=shape, dtype=dtype,\n+                 initializer=initializer, regularizer=regularizer,\n+                 trainable=trainable, collections=collections,\n+                 caching_device=caching_device, device=device,\n+                 partitioner=partitioner, custom_getter=custom_getter,\n+                 use_resource=use_resource)\n+  return var\n+\n+def variable(name, shape=None, dtype=None, initializer=None,\n+             regularizer=None, trainable=True, collections=None,\n+             caching_device=None, device=None,\n+             partitioner=None, custom_getter=None, use_resource=None):\n+  \"\"\"Gets an existing variable with these parameters or creates a new one.\n+\n+  Args:\n+    name: the name of the new or existing variable.\n+    shape: shape of the new or existing variable.\n+    dtype: type of the new or existing variable (defaults to `DT_FLOAT`).\n+    initializer: initializer for the variable if one is created.\n+    regularizer: a (Tensor -> Tensor or None) function; the result of\n+        applying it on a newly created variable will be added to the collection\n+        GraphKeys.REGULARIZATION_LOSSES and can be used for regularization.\n+    trainable: If `True` also add the variable to the graph collection\n+      `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).\n+    collections: A list of collection names to which the Variable will be added.\n+      If None it would default to `tf.GraphKeys.GLOBAL_VARIABLES`.\n+    caching_device: Optional device string or function describing where the\n+        Variable should be cached for reading.  Defaults to the Variable's\n+        device.\n+    device: Optional device to place the variable. It can be an string or a\n+      function that is called to get the device for the variable.\n+    partitioner: Optional callable that accepts a fully defined `TensorShape`\n+      and dtype of the `Variable` to be created, and returns a list of\n+      partitions for each axis (currently only one axis can be partitioned).\n+    custom_getter: Callable that allows overwriting the internal\n+      get_variable method and has to have the same signature.\n+    use_resource: If `True` use a ResourceVariable instead of a Variable.\n+\n+  Returns:\n+    The created or existing variable.\n+  \"\"\"\n+  collections = list(collections if collections is not None\n+                     else [ops.GraphKeys.GLOBAL_VARIABLES])\n+\n+  # Remove duplicates\n+  collections = set(collections)\n+  getter = vs.get_variable\n+  with ops.device(device or ''):", "path": "tensorflow/python/ops/rnn_cell_impl.py", "position": null, "original_position": 357, "commit_id": "b435d2ceac8dc9077f3f2f35842d1929c889acd3", "original_commit_id": "8dff2eec077444af77197b776212ecf04dc97d40", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "why ''?  is it OK to pass None to tf.device?", "created_at": "2017-08-10T17:40:35Z", "updated_at": "2017-10-29T10:04:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9839#discussion_r132520299", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9839", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132520299"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9839#discussion_r132520299"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9839"}}, "body_html": "<p>why ''?  is it OK to pass None to tf.device?</p>", "body_text": "why ''?  is it OK to pass None to tf.device?"}