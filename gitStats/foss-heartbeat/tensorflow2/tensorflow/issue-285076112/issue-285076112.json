{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15717", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15717/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15717/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15717/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15717", "id": 285076112, "node_id": "MDU6SXNzdWUyODUwNzYxMTI=", "number": 15717, "title": "Performance issues when multiplying constant matrices", "user": {"login": "acbellini", "id": 1515754, "node_id": "MDQ6VXNlcjE1MTU3NTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1515754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acbellini", "html_url": "https://github.com/acbellini", "followers_url": "https://api.github.com/users/acbellini/followers", "following_url": "https://api.github.com/users/acbellini/following{/other_user}", "gists_url": "https://api.github.com/users/acbellini/gists{/gist_id}", "starred_url": "https://api.github.com/users/acbellini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acbellini/subscriptions", "organizations_url": "https://api.github.com/users/acbellini/orgs", "repos_url": "https://api.github.com/users/acbellini/repos", "events_url": "https://api.github.com/users/acbellini/events{/privacy}", "received_events_url": "https://api.github.com/users/acbellini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 15, "created_at": "2017-12-29T11:12:36Z", "updated_at": "2018-06-11T23:19:08Z", "closed_at": "2018-06-11T23:19:08Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes, the code sample is provided below</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Installed from official wheel</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-rc1-11-g130a514 1.4.0</li>\n<li><strong>Python version</strong>:  Python 3.6.3 | packaged by conda-forge | (default, Dec  9 2017, 16:18:26)<br>\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>:  8.0/6.0.21</li>\n<li><strong>GPU model and memory</strong>: GTX 1070, 8GB</li>\n<li><strong>Exact command to reproduce</strong>: run the provided code sample</li>\n</ul>\n<h3>Describe the problem</h3>\n<p><em>I think this is a bug or an unclear performance issue. I also posted on StackOverflow to check if it was a known issue before posting, but not getting replies and I don't think it's a support problem.</em></p>\n<p>I'm using Tensorflow for some non-DL computation, and I'm running into a behaviour I don't understand. I am testing the multiplication of a square matrix by itself: tf.matmul(a, a):</p>\n<ol>\n<li>when the matrix is created with tf.constant</li>\n<li>when the matrix is randomly initialized at each run</li>\n</ol>\n<p>My expectation is that the first case should have some overhead for transferring the initial data, 100 MB (5000x5000 matrix using float32) but then the execution of the second case should be slightly slower due to the random initialization at each run.</p>\n<p>However, what I see is that the multiplication of the constant is much slower even on successive runs in the same session.</p>\n<p>Below I include logs generated on different GPUs: it seems that on lower-level GPUs (K1100M, GTX 940MX) constant multiplication is faster or the same, while on newer GPUs (GTX 1070, Tesla P100) it's slower. Details included in the logs.</p>\n<h3>Source code</h3>\n<pre><code>import tensorflow as tf\nimport numpy as np\nfrom timeit import timeit\nimport os\n\nos.environ[\"TF_CPP_MIN_LOG_LEVEL\"]=\"2\"\nSIZE = 5000\nNUM_RUNS = 10\n\na = np.random.random((SIZE, SIZE))\n_const_a = tf.constant(a, dtype=tf.float32, name=\"Const_A\")\n_mul_const_a = tf.matmul(_const_a, _const_a, name=\"Mul_Const\")\n\n_random_a = tf.random_uniform((SIZE, SIZE), dtype=tf.float32, name=\"Random_A\")\n_mul_random_a = tf.matmul(_random_a, _random_a, name=\"Mul_Random\")\n\nwith tf.Session(config=tf.ConfigProto(log_device_placement=True)) as s:\n    # Run once to make sure everything is initialised\n    s.run((_const_a, _mul_const_a, _random_a, _mul_random_a))\n\n    # timeit\n    print(\"TF with const\\t\", timeit(lambda: s.run((_mul_const_a.op)), number=NUM_RUNS))\n    print(\"TF with random\\t\", timeit(lambda: s.run((_mul_random_a.op)), number=NUM_RUNS))\n\n</code></pre>\n<h3>Logs: I have accurate environment details only for the GTX 1070 and the P100, as reported above.</h3>\n<h4>GTX 1070 X (multiplying constants is much slower)</h4>\n<pre><code>Device mapping:\n/job:localhost/replica:0/task:0/device:GPU:0 -&gt; device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0, compute capability: 6.1\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A: (Add): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nConst_A: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nTF with const    2.9953213009994215\nTF with random   0.513827863998813\n</code></pre>\n<h4>Tesla P100 (multiplying constants is much slower)</h4>\n<pre><code>Device mapping:\n/job:localhost/replica:0/task:0/device:GPU:0 -&gt; device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n/job:localhost/replica:0/task:0/device:GPU:1 -&gt; device: 1, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:05.0, compute capability: 6.0\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A: (Add): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nConst_A: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nTF with const     1.5770663949660957\nTF with random     0.32687677699141204\n\n</code></pre>\n<h4>K1100M (multiplying constants is much faster. But I am not sure which version of TF this was run with)</h4>\n<pre><code>Device mapping:\n/job:localhost/replica:0/task:0/device:GPU:0 -&gt; device: 0, name: Quadro K1100M, pci bus id: 0000:01:00.0, compute capability: 3.0\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A: (Add): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nConst_A: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nTF with const    4.3167382130868175\nTF with random   9.889055849542306\n</code></pre>\n<h4>GTX 940 MX (multiplying constants is slightly slower)</h4>\n<pre><code>/job:localhost/replica:0/task:0/gpu:0 -&gt; device: 0, name: GeForce 940MX, pci bus id: 0000:01:00.0\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/gpu:0\nRandom_A: (Add): /job:localhost/replica:0/task:0/gpu:0\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/gpu:0\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/gpu:0\nConst_A: (Const): /job:localhost/replica:0/task:0/gpu:0\nTF with const    3.5542741210010718\nTF with random   3.519956939999247\n\n\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, the code sample is provided below\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): Installed from official wheel\nTensorFlow version (use command below): v1.4.0-rc1-11-g130a514 1.4.0\nPython version:  Python 3.6.3 | packaged by conda-forge | (default, Dec  9 2017, 16:18:26)\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version:  8.0/6.0.21\nGPU model and memory: GTX 1070, 8GB\nExact command to reproduce: run the provided code sample\n\nDescribe the problem\nI think this is a bug or an unclear performance issue. I also posted on StackOverflow to check if it was a known issue before posting, but not getting replies and I don't think it's a support problem.\nI'm using Tensorflow for some non-DL computation, and I'm running into a behaviour I don't understand. I am testing the multiplication of a square matrix by itself: tf.matmul(a, a):\n\nwhen the matrix is created with tf.constant\nwhen the matrix is randomly initialized at each run\n\nMy expectation is that the first case should have some overhead for transferring the initial data, 100 MB (5000x5000 matrix using float32) but then the execution of the second case should be slightly slower due to the random initialization at each run.\nHowever, what I see is that the multiplication of the constant is much slower even on successive runs in the same session.\nBelow I include logs generated on different GPUs: it seems that on lower-level GPUs (K1100M, GTX 940MX) constant multiplication is faster or the same, while on newer GPUs (GTX 1070, Tesla P100) it's slower. Details included in the logs.\nSource code\nimport tensorflow as tf\nimport numpy as np\nfrom timeit import timeit\nimport os\n\nos.environ[\"TF_CPP_MIN_LOG_LEVEL\"]=\"2\"\nSIZE = 5000\nNUM_RUNS = 10\n\na = np.random.random((SIZE, SIZE))\n_const_a = tf.constant(a, dtype=tf.float32, name=\"Const_A\")\n_mul_const_a = tf.matmul(_const_a, _const_a, name=\"Mul_Const\")\n\n_random_a = tf.random_uniform((SIZE, SIZE), dtype=tf.float32, name=\"Random_A\")\n_mul_random_a = tf.matmul(_random_a, _random_a, name=\"Mul_Random\")\n\nwith tf.Session(config=tf.ConfigProto(log_device_placement=True)) as s:\n    # Run once to make sure everything is initialised\n    s.run((_const_a, _mul_const_a, _random_a, _mul_random_a))\n\n    # timeit\n    print(\"TF with const\\t\", timeit(lambda: s.run((_mul_const_a.op)), number=NUM_RUNS))\n    print(\"TF with random\\t\", timeit(lambda: s.run((_mul_random_a.op)), number=NUM_RUNS))\n\n\nLogs: I have accurate environment details only for the GTX 1070 and the P100, as reported above.\nGTX 1070 X (multiplying constants is much slower)\nDevice mapping:\n/job:localhost/replica:0/task:0/device:GPU:0 -> device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0, compute capability: 6.1\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A: (Add): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nConst_A: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nTF with const    2.9953213009994215\nTF with random   0.513827863998813\n\nTesla P100 (multiplying constants is much slower)\nDevice mapping:\n/job:localhost/replica:0/task:0/device:GPU:0 -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n/job:localhost/replica:0/task:0/device:GPU:1 -> device: 1, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:05.0, compute capability: 6.0\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A: (Add): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nConst_A: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nTF with const     1.5770663949660957\nTF with random     0.32687677699141204\n\n\nK1100M (multiplying constants is much faster. But I am not sure which version of TF this was run with)\nDevice mapping:\n/job:localhost/replica:0/task:0/device:GPU:0 -> device: 0, name: Quadro K1100M, pci bus id: 0000:01:00.0, compute capability: 3.0\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A: (Add): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nConst_A: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nTF with const    4.3167382130868175\nTF with random   9.889055849542306\n\nGTX 940 MX (multiplying constants is slightly slower)\n/job:localhost/replica:0/task:0/gpu:0 -> device: 0, name: GeForce 940MX, pci bus id: 0000:01:00.0\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/gpu:0\nRandom_A: (Add): /job:localhost/replica:0/task:0/gpu:0\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/gpu:0\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/gpu:0\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/gpu:0\nConst_A: (Const): /job:localhost/replica:0/task:0/gpu:0\nTF with const    3.5542741210010718\nTF with random   3.519956939999247", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes, the code sample is provided below\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Installed from official wheel\r\n- **TensorFlow version (use command below)**: v1.4.0-rc1-11-g130a514 1.4.0\r\n- **Python version**:  Python 3.6.3 | packaged by conda-forge | (default, Dec  9 2017, 16:18:26) \r\n[GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**:  8.0/6.0.21\r\n- **GPU model and memory**: GTX 1070, 8GB\r\n- **Exact command to reproduce**: run the provided code sample\r\n\r\n### Describe the problem\r\n_I think this is a bug or an unclear performance issue. I also posted on StackOverflow to check if it was a known issue before posting, but not getting replies and I don't think it's a support problem._\r\n\r\nI'm using Tensorflow for some non-DL computation, and I'm running into a behaviour I don't understand. I am testing the multiplication of a square matrix by itself: tf.matmul(a, a):\r\n\r\n1. when the matrix is created with tf.constant\r\n2. when the matrix is randomly initialized at each run\r\n\r\nMy expectation is that the first case should have some overhead for transferring the initial data, 100 MB (5000x5000 matrix using float32) but then the execution of the second case should be slightly slower due to the random initialization at each run.\r\n\r\nHowever, what I see is that the multiplication of the constant is much slower even on successive runs in the same session.\r\n\r\nBelow I include logs generated on different GPUs: it seems that on lower-level GPUs (K1100M, GTX 940MX) constant multiplication is faster or the same, while on newer GPUs (GTX 1070, Tesla P100) it's slower. Details included in the logs.\r\n\r\n### Source code \r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nfrom timeit import timeit\r\nimport os\r\n\r\nos.environ[\"TF_CPP_MIN_LOG_LEVEL\"]=\"2\"\r\nSIZE = 5000\r\nNUM_RUNS = 10\r\n\r\na = np.random.random((SIZE, SIZE))\r\n_const_a = tf.constant(a, dtype=tf.float32, name=\"Const_A\")\r\n_mul_const_a = tf.matmul(_const_a, _const_a, name=\"Mul_Const\")\r\n\r\n_random_a = tf.random_uniform((SIZE, SIZE), dtype=tf.float32, name=\"Random_A\")\r\n_mul_random_a = tf.matmul(_random_a, _random_a, name=\"Mul_Random\")\r\n\r\nwith tf.Session(config=tf.ConfigProto(log_device_placement=True)) as s:\r\n    # Run once to make sure everything is initialised\r\n    s.run((_const_a, _mul_const_a, _random_a, _mul_random_a))\r\n\r\n    # timeit\r\n    print(\"TF with const\\t\", timeit(lambda: s.run((_mul_const_a.op)), number=NUM_RUNS))\r\n    print(\"TF with random\\t\", timeit(lambda: s.run((_mul_random_a.op)), number=NUM_RUNS))\r\n\r\n```\r\n### Logs: I have accurate environment details only for the GTX 1070 and the P100, as reported above. \r\n\r\n#### GTX 1070 X (multiplying constants is much slower)\r\n```\r\nDevice mapping:\r\n/job:localhost/replica:0/task:0/device:GPU:0 -> device: 0, name: GeForce GTX 1070, pci bus id: 0000:01:00.0, compute capability: 6.1\r\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A: (Add): /job:localhost/replica:0/task:0/device:GPU:0\r\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\r\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nConst_A: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nTF with const    2.9953213009994215\r\nTF with random   0.513827863998813\r\n```\r\n\r\n#### Tesla P100 (multiplying constants is much slower)\r\n```\r\nDevice mapping:\r\n/job:localhost/replica:0/task:0/device:GPU:0 -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\r\n/job:localhost/replica:0/task:0/device:GPU:1 -> device: 1, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:05.0, compute capability: 6.0\r\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A: (Add): /job:localhost/replica:0/task:0/device:GPU:0\r\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\r\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nConst_A: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nTF with const     1.5770663949660957\r\nTF with random     0.32687677699141204\r\n\r\n```\r\n#### K1100M (multiplying constants is much faster. But I am not sure which version of TF this was run with)\r\n```\r\nDevice mapping:\r\n/job:localhost/replica:0/task:0/device:GPU:0 -> device: 0, name: Quadro K1100M, pci bus id: 0000:01:00.0, compute capability: 3.0\r\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A: (Add): /job:localhost/replica:0/task:0/device:GPU:0\r\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\r\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nConst_A: (Const): /job:localhost/replica:0/task:0/device:GPU:0\r\nTF with const    4.3167382130868175\r\nTF with random   9.889055849542306\r\n```\r\n\r\n#### GTX 940 MX (multiplying constants is slightly slower)\r\n```\r\n/job:localhost/replica:0/task:0/gpu:0 -> device: 0, name: GeForce 940MX, pci bus id: 0000:01:00.0\r\nRandom_A/sub: (Sub): /job:localhost/replica:0/task:0/gpu:0\r\nRandom_A/RandomUniform: (RandomUniform): /job:localhost/replica:0/task:0/gpu:0\r\nRandom_A/mul: (Mul): /job:localhost/replica:0/task:0/gpu:0\r\nRandom_A: (Add): /job:localhost/replica:0/task:0/gpu:0\r\nMul_Random: (MatMul): /job:localhost/replica:0/task:0/gpu:0\r\nMul_Const: (MatMul): /job:localhost/replica:0/task:0/gpu:0\r\nRandom_A/max: (Const): /job:localhost/replica:0/task:0/gpu:0\r\nRandom_A/min: (Const): /job:localhost/replica:0/task:0/gpu:0\r\nRandom_A/shape: (Const): /job:localhost/replica:0/task:0/gpu:0\r\nConst_A: (Const): /job:localhost/replica:0/task:0/gpu:0\r\nTF with const    3.5542741210010718\r\nTF with random   3.519956939999247\r\n\r\n\r\n```"}