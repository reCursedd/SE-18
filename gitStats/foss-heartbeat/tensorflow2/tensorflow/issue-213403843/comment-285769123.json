{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/285769123", "html_url": "https://github.com/tensorflow/tensorflow/issues/8280#issuecomment-285769123", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8280", "id": 285769123, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTc2OTEyMw==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-10T19:57:04Z", "updated_at": "2017-03-11T03:05:22Z", "author_association": "MEMBER", "body_html": "<p>This question is probably better suited for <a href=\"http://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">stackoverflow</a> since the primitives for building such operations are available in the Java API, so there isn't a missing \"feature\" as such  :)</p>\n<p>The Python reduction functions like <a href=\"https://github.com/tensorflow/tensorflow/blob/169a096/tensorflow/python/ops/math_ops.py#L1329\"><code>tf.reduce_mean</code></a> are simple wrappers over the TensorFlow operations like <a href=\"https://github.com/tensorflow/tensorflow/blob/169a096a2d9f4c129363d3f56b8b25c9ca4d8aa6/tensorflow/core/ops/math_ops.cc#L1102\"><code>Mean</code></a>, where it fills in the <code>ReductionIndices</code> argument based on the shape of the input.</p>\n<p>For example, to reduce a vector of floats, the following works:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.DataType</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.Graph</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.Output</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.Session</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.Tensor</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">ReduceMean</span> {\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">String</span>[] <span class=\"pl-v\">args</span>) {\n    <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Graph</span> g <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Graph</span>();\n        <span class=\"pl-smi\">Session</span> s <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Session</span>(g)) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Build the graph</span>\n      <span class=\"pl-smi\">Output</span> placeholder <span class=\"pl-k\">=</span>\n          g<span class=\"pl-k\">.</span>opBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Placeholder<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>setAttr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">DataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FLOAT</span>)<span class=\"pl-k\">.</span>build()<span class=\"pl-k\">.</span>output(<span class=\"pl-c1\">0</span>);\n      <span class=\"pl-smi\">Output</span> mean <span class=\"pl-k\">=</span> reduce(g, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mean<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output<span class=\"pl-pds\">\"</span></span>, placeholder);\n\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Execute it</span>\n      <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Tensor</span> in <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Tensor</span><span class=\"pl-k\">.</span>create(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">float</span>[]{<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>});\n          <span class=\"pl-smi\">Tensor</span> out <span class=\"pl-k\">=</span> s<span class=\"pl-k\">.</span>runner()<span class=\"pl-k\">.</span>feed(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input<span class=\"pl-pds\">\"</span></span>, in)<span class=\"pl-k\">.</span>fetch(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>run()<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>)) {\n        <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Result: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> out<span class=\"pl-k\">.</span>floatValue());\n      }\n    }\n  }\n\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Output</span> <span class=\"pl-en\">reduce</span>(<span class=\"pl-smi\">Graph</span> <span class=\"pl-v\">g</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-v\">type</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-v\">name</span>, <span class=\"pl-smi\">Output</span> <span class=\"pl-v\">input</span>) {\n    <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Tensor</span> t <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Tensor</span><span class=\"pl-k\">.</span>create(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[] {<span class=\"pl-c1\">0</span>})) {\n      <span class=\"pl-smi\">Output</span> reductionIndices <span class=\"pl-k\">=</span>\n          g<span class=\"pl-k\">.</span>opBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ReductionIndices<span class=\"pl-pds\">\"</span></span>)\n              .setAttr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span>, t<span class=\"pl-k\">.</span>dataType())\n              .setAttr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>value<span class=\"pl-pds\">\"</span></span>, t)\n              .build()\n              .output(<span class=\"pl-c1\">0</span>);\n      <span class=\"pl-k\">return</span> g<span class=\"pl-k\">.</span>opBuilder(type, name)\n          .setAttr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>T<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">DataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FLOAT</span>)\n          .setAttr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Tidx<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">DataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INT32</span>)\n          .addInput(input)\n          .addInput(reductionIndices)\n          .build()\n          .output(<span class=\"pl-c1\">0</span>);\n    }\n  }\n}</pre></div>\n<p>Admittedly, this is not easy to discover, primarily because we don't yet generate Java code for all the TensorFlow ops (and thus they aren't discoverable via javadoc).  <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"204090379\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/7149\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/7149/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/7149\">#7149</a>  is about that.</p>\n<p>I'll close this issue for now, given that I think it is helped by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"204090379\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/7149\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/7149/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/7149\">#7149</a> and similar questions are probably best suited for stackoverflow at this time.</p>", "body_text": "This question is probably better suited for stackoverflow since the primitives for building such operations are available in the Java API, so there isn't a missing \"feature\" as such  :)\nThe Python reduction functions like tf.reduce_mean are simple wrappers over the TensorFlow operations like Mean, where it fills in the ReductionIndices argument based on the shape of the input.\nFor example, to reduce a vector of floats, the following works:\nimport org.tensorflow.DataType;\nimport org.tensorflow.Graph;\nimport org.tensorflow.Output;\nimport org.tensorflow.Session;\nimport org.tensorflow.Tensor;\n\npublic class ReduceMean {\n  public static void main(String[] args) {\n    try (Graph g = new Graph();\n        Session s = new Session(g)) {\n      // Build the graph\n      Output placeholder =\n          g.opBuilder(\"Placeholder\", \"input\").setAttr(\"dtype\", DataType.FLOAT).build().output(0);\n      Output mean = reduce(g, \"Mean\", \"output\", placeholder);\n\n      // Execute it\n      try (Tensor in = Tensor.create(new float[]{1,2,3,4,5});\n          Tensor out = s.runner().feed(\"input\", in).fetch(\"output\").run().get(0)) {\n        System.out.println(\"Result: \" + out.floatValue());\n      }\n    }\n  }\n\n  public static Output reduce(Graph g, String type, String name, Output input) {\n    try (Tensor t = Tensor.create(new int[] {0})) {\n      Output reductionIndices =\n          g.opBuilder(\"Const\", \"ReductionIndices\")\n              .setAttr(\"dtype\", t.dataType())\n              .setAttr(\"value\", t)\n              .build()\n              .output(0);\n      return g.opBuilder(type, name)\n          .setAttr(\"T\", DataType.FLOAT)\n          .setAttr(\"Tidx\", DataType.INT32)\n          .addInput(input)\n          .addInput(reductionIndices)\n          .build()\n          .output(0);\n    }\n  }\n}\nAdmittedly, this is not easy to discover, primarily because we don't yet generate Java code for all the TensorFlow ops (and thus they aren't discoverable via javadoc).  #7149  is about that.\nI'll close this issue for now, given that I think it is helped by #7149 and similar questions are probably best suited for stackoverflow at this time.", "body": "This question is probably better suited for [stackoverflow](http://stackoverflow.com/questions/tagged/tensorflow) since the primitives for building such operations are available in the Java API, so there isn't a missing \"feature\" as such  :)\r\n\r\nThe Python reduction functions like [`tf.reduce_mean`](https://github.com/tensorflow/tensorflow/blob/169a096/tensorflow/python/ops/math_ops.py#L1329) are simple wrappers over the TensorFlow operations like [`Mean`](https://github.com/tensorflow/tensorflow/blob/169a096a2d9f4c129363d3f56b8b25c9ca4d8aa6/tensorflow/core/ops/math_ops.cc#L1102), where it fills in the `ReductionIndices` argument based on the shape of the input.\r\n\r\nFor example, to reduce a vector of floats, the following works:\r\n```java\r\nimport org.tensorflow.DataType;\r\nimport org.tensorflow.Graph;\r\nimport org.tensorflow.Output;\r\nimport org.tensorflow.Session;\r\nimport org.tensorflow.Tensor;\r\n\r\npublic class ReduceMean {\r\n  public static void main(String[] args) {\r\n    try (Graph g = new Graph();\r\n        Session s = new Session(g)) {\r\n      // Build the graph\r\n      Output placeholder =\r\n          g.opBuilder(\"Placeholder\", \"input\").setAttr(\"dtype\", DataType.FLOAT).build().output(0);\r\n      Output mean = reduce(g, \"Mean\", \"output\", placeholder);\r\n\r\n      // Execute it\r\n      try (Tensor in = Tensor.create(new float[]{1,2,3,4,5});\r\n          Tensor out = s.runner().feed(\"input\", in).fetch(\"output\").run().get(0)) {\r\n        System.out.println(\"Result: \" + out.floatValue());\r\n      }\r\n    }\r\n  }\r\n\r\n  public static Output reduce(Graph g, String type, String name, Output input) {\r\n    try (Tensor t = Tensor.create(new int[] {0})) {\r\n      Output reductionIndices =\r\n          g.opBuilder(\"Const\", \"ReductionIndices\")\r\n              .setAttr(\"dtype\", t.dataType())\r\n              .setAttr(\"value\", t)\r\n              .build()\r\n              .output(0);\r\n      return g.opBuilder(type, name)\r\n          .setAttr(\"T\", DataType.FLOAT)\r\n          .setAttr(\"Tidx\", DataType.INT32)\r\n          .addInput(input)\r\n          .addInput(reductionIndices)\r\n          .build()\r\n          .output(0);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAdmittedly, this is not easy to discover, primarily because we don't yet generate Java code for all the TensorFlow ops (and thus they aren't discoverable via javadoc).  #7149  is about that.\r\n\r\nI'll close this issue for now, given that I think it is helped by #7149 and similar questions are probably best suited for stackoverflow at this time."}