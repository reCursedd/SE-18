{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/205159997", "html_url": "https://github.com/tensorflow/tensorflow/issues/1758#issuecomment-205159997", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1758", "id": 205159997, "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTE1OTk5Nw==", "user": {"login": "kmader", "id": 116120, "node_id": "MDQ6VXNlcjExNjEyMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/116120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmader", "html_url": "https://github.com/kmader", "followers_url": "https://api.github.com/users/kmader/followers", "following_url": "https://api.github.com/users/kmader/following{/other_user}", "gists_url": "https://api.github.com/users/kmader/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmader/subscriptions", "organizations_url": "https://api.github.com/users/kmader/orgs", "repos_url": "https://api.github.com/users/kmader/repos", "events_url": "https://api.github.com/users/kmader/events{/privacy}", "received_events_url": "https://api.github.com/users/kmader/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-04T06:46:15Z", "updated_at": "2016-04-04T06:47:19Z", "author_association": "NONE", "body_html": "<p>Thanks I had briefly tried this before with both <code>DecodeJpeg:0</code> and the following node <code>Cast:0</code>, but it wasn't able to calculate the gradients</p>\n<p>Loading the network works fine</p>\n<pre><code>with gfile.FastGFile(os.path.join(\n  my_model_dir, 'classify_image_graph_def.pb'), 'r') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    tf_new_image = tf.Variable(image_arr.astype(np.float32))\n    _ = tf.import_graph_def(graph_def, name='', input_map={\"Cast:0\": tf_new_image})\n    c_graph = graph_def\n</code></pre>\n<p>But trying to have the optimizer change the input to improve the output (making the image more panda-like) did not work</p>\n<pre><code>ppanda = np.zeros(predictions.shape,np.float32)\nppanda[0,169] = 1 # perfect panda\ntf_ppanda = tf.constant(ppanda)\nsoftmax_tensor = sess.graph.get_tensor_by_name('softmax:0')\npanda_loss = tf.nn.softmax_cross_entropy_with_logits(softmax_tensor, tf_ppanda)\noptimizer = tf.train.GradientDescentOptimizer(0.05).minimize(panda_loss)\n</code></pre>\n<p>Saying the gradient is not computable</p>\n<pre><code>ValueError: No gradients provided for any variable: ((None, &lt;tensorflow.python.ops.variables.Variable object at 0x117c33c90&gt;), (None, &lt;tensorflow.python.ops.variables.Variable object at 0x140965f90&gt;), (None, &lt;tensorflow.python.ops.variables.Variable object at 0x13b59ff10&gt;))\n</code></pre>\n<p>Even explicitly listing the variable in <code>var_list</code> didn't fix the issue</p>\n<pre><code>optimizer = tf.train.GradientDescentOptimizer(0.05).minimize(panda_loss, var_list = [tf_new_image])\n</code></pre>\n<p>resulting in</p>\n<pre><code>ValueError: No gradients provided for any variable: ((None, &lt;tensorflow.python.ops.variables.Variable object at 0x13b59ff10&gt;),)\n</code></pre>\n<p>My final attempt was to explicitly pull it from the graph</p>\n<pre><code>tf_input_image = sess.graph.get_tensor_by_name('Cast:0')\noptimizer = tf.train.GradientDescentOptimizer(0.05).minimize(panda_loss, var_list = [tf_input_image])\n</code></pre>\n<p>Resulting in the expected Type mismatch</p>\n<pre><code>TypeError: Argument is not a tf.Variable: Tensor(\"Cast:0\", shape=(100, 100, 3), dtype=float32)\n</code></pre>", "body_text": "Thanks I had briefly tried this before with both DecodeJpeg:0 and the following node Cast:0, but it wasn't able to calculate the gradients\nLoading the network works fine\nwith gfile.FastGFile(os.path.join(\n  my_model_dir, 'classify_image_graph_def.pb'), 'r') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    tf_new_image = tf.Variable(image_arr.astype(np.float32))\n    _ = tf.import_graph_def(graph_def, name='', input_map={\"Cast:0\": tf_new_image})\n    c_graph = graph_def\n\nBut trying to have the optimizer change the input to improve the output (making the image more panda-like) did not work\nppanda = np.zeros(predictions.shape,np.float32)\nppanda[0,169] = 1 # perfect panda\ntf_ppanda = tf.constant(ppanda)\nsoftmax_tensor = sess.graph.get_tensor_by_name('softmax:0')\npanda_loss = tf.nn.softmax_cross_entropy_with_logits(softmax_tensor, tf_ppanda)\noptimizer = tf.train.GradientDescentOptimizer(0.05).minimize(panda_loss)\n\nSaying the gradient is not computable\nValueError: No gradients provided for any variable: ((None, <tensorflow.python.ops.variables.Variable object at 0x117c33c90>), (None, <tensorflow.python.ops.variables.Variable object at 0x140965f90>), (None, <tensorflow.python.ops.variables.Variable object at 0x13b59ff10>))\n\nEven explicitly listing the variable in var_list didn't fix the issue\noptimizer = tf.train.GradientDescentOptimizer(0.05).minimize(panda_loss, var_list = [tf_new_image])\n\nresulting in\nValueError: No gradients provided for any variable: ((None, <tensorflow.python.ops.variables.Variable object at 0x13b59ff10>),)\n\nMy final attempt was to explicitly pull it from the graph\ntf_input_image = sess.graph.get_tensor_by_name('Cast:0')\noptimizer = tf.train.GradientDescentOptimizer(0.05).minimize(panda_loss, var_list = [tf_input_image])\n\nResulting in the expected Type mismatch\nTypeError: Argument is not a tf.Variable: Tensor(\"Cast:0\", shape=(100, 100, 3), dtype=float32)", "body": "Thanks I had briefly tried this before with both `DecodeJpeg:0` and the following node `Cast:0`, but it wasn't able to calculate the gradients\n\nLoading the network works fine\n\n```\nwith gfile.FastGFile(os.path.join(\n  my_model_dir, 'classify_image_graph_def.pb'), 'r') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    tf_new_image = tf.Variable(image_arr.astype(np.float32))\n    _ = tf.import_graph_def(graph_def, name='', input_map={\"Cast:0\": tf_new_image})\n    c_graph = graph_def\n```\n\nBut trying to have the optimizer change the input to improve the output (making the image more panda-like) did not work\n\n```\nppanda = np.zeros(predictions.shape,np.float32)\nppanda[0,169] = 1 # perfect panda\ntf_ppanda = tf.constant(ppanda)\nsoftmax_tensor = sess.graph.get_tensor_by_name('softmax:0')\npanda_loss = tf.nn.softmax_cross_entropy_with_logits(softmax_tensor, tf_ppanda)\noptimizer = tf.train.GradientDescentOptimizer(0.05).minimize(panda_loss)\n```\n\nSaying the gradient is not computable\n\n```\nValueError: No gradients provided for any variable: ((None, <tensorflow.python.ops.variables.Variable object at 0x117c33c90>), (None, <tensorflow.python.ops.variables.Variable object at 0x140965f90>), (None, <tensorflow.python.ops.variables.Variable object at 0x13b59ff10>))\n```\n\nEven explicitly listing the variable in `var_list` didn't fix the issue\n\n```\noptimizer = tf.train.GradientDescentOptimizer(0.05).minimize(panda_loss, var_list = [tf_new_image])\n```\n\nresulting in \n\n```\nValueError: No gradients provided for any variable: ((None, <tensorflow.python.ops.variables.Variable object at 0x13b59ff10>),)\n```\n\nMy final attempt was to explicitly pull it from the graph \n\n```\ntf_input_image = sess.graph.get_tensor_by_name('Cast:0')\noptimizer = tf.train.GradientDescentOptimizer(0.05).minimize(panda_loss, var_list = [tf_input_image])\n```\n\nResulting in the expected Type mismatch\n\n```\nTypeError: Argument is not a tf.Variable: Tensor(\"Cast:0\", shape=(100, 100, 3), dtype=float32)\n```\n"}