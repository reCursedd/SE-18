{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/437716301", "html_url": "https://github.com/tensorflow/tensorflow/issues/23334#issuecomment-437716301", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23334", "id": 437716301, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzcxNjMwMQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-11T23:38:52Z", "updated_at": "2018-11-11T23:38:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This does appear to be a bug in the latest version. One workaround is to ensure that all calls to <code>make_initializer()</code> have been made before creating the <code>tf.Session</code>. For example, the following program should work as intended:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">g</span>():\n  <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n    <span class=\"pl-k\">yield</span> i\n\niterator <span class=\"pl-k\">=</span> tf.data.Iterator.from_structure(tf.int64, tf.TensorShape([]))\nx <span class=\"pl-k\">=</span> iterator.get_next()\n\ndataset_1 <span class=\"pl-k\">=</span> tf.data.Dataset.from_generator(g, <span class=\"pl-v\">output_types</span><span class=\"pl-k\">=</span>tf.int64)\ndataset_2 <span class=\"pl-k\">=</span> tf.data.Dataset.from_generator(g, <span class=\"pl-v\">output_types</span><span class=\"pl-k\">=</span>tf.int64)\n\ninit_1 <span class=\"pl-k\">=</span> iterator.make_initializer(dataset_1)\ninit_2 <span class=\"pl-k\">=</span> iterator.make_initializer(dataset_2)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  sess.run(init_1)\n  <span class=\"pl-c1\">print</span> sess.run(x)\n\n  sess.run(init_2)\n  <span class=\"pl-c1\">print</span> sess.run(x)</pre></div>", "body_text": "This does appear to be a bug in the latest version. One workaround is to ensure that all calls to make_initializer() have been made before creating the tf.Session. For example, the following program should work as intended:\nimport tensorflow as tf\n\ndef g():\n  for i in range(10):\n    yield i\n\niterator = tf.data.Iterator.from_structure(tf.int64, tf.TensorShape([]))\nx = iterator.get_next()\n\ndataset_1 = tf.data.Dataset.from_generator(g, output_types=tf.int64)\ndataset_2 = tf.data.Dataset.from_generator(g, output_types=tf.int64)\n\ninit_1 = iterator.make_initializer(dataset_1)\ninit_2 = iterator.make_initializer(dataset_2)\n\nwith tf.Session() as sess:\n  sess.run(init_1)\n  print sess.run(x)\n\n  sess.run(init_2)\n  print sess.run(x)", "body": "This does appear to be a bug in the latest version. One workaround is to ensure that all calls to `make_initializer()` have been made before creating the `tf.Session`. For example, the following program should work as intended:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\ndef g():\r\n  for i in range(10):\r\n    yield i\r\n\r\niterator = tf.data.Iterator.from_structure(tf.int64, tf.TensorShape([]))\r\nx = iterator.get_next()\r\n\r\ndataset_1 = tf.data.Dataset.from_generator(g, output_types=tf.int64)\r\ndataset_2 = tf.data.Dataset.from_generator(g, output_types=tf.int64)\r\n\r\ninit_1 = iterator.make_initializer(dataset_1)\r\ninit_2 = iterator.make_initializer(dataset_2)\r\n\r\nwith tf.Session() as sess:\r\n  sess.run(init_1)\r\n  print sess.run(x)\r\n\r\n  sess.run(init_2)\r\n  print sess.run(x)\r\n```"}