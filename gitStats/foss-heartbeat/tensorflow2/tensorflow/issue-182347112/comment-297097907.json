{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/297097907", "html_url": "https://github.com/tensorflow/tensorflow/issues/4897#issuecomment-297097907", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4897", "id": 297097907, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzA5NzkwNw==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-25T17:05:44Z", "updated_at": "2018-01-01T22:08:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5317244\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/altosaar\">@altosaar</a> I recently had to compute per-example gradients, and ended up with implementation <a href=\"https://github.com/yaroslavvb/stuff/blob/master/natural_gradient_multilayer.py\">here</a> . To make things fast I had to drop <code>tf.gradients</code> and compute things manually. There's two orders of magnitude speed-up if you use specialized structures, specifically, use \"khatri-rao\" product which gives you a batch of matmul gradients given a batch of activations + batch of backprops. It can be computed efficiently through <a href=\"https://github.com/yaroslavvb/stuff/blob/2c716e7abde25018ccfeeeff96c6397fef4f33ba/whitening_util.py#L515\">einsum</a></p>", "body_text": "@altosaar I recently had to compute per-example gradients, and ended up with implementation here . To make things fast I had to drop tf.gradients and compute things manually. There's two orders of magnitude speed-up if you use specialized structures, specifically, use \"khatri-rao\" product which gives you a batch of matmul gradients given a batch of activations + batch of backprops. It can be computed efficiently through einsum", "body": "@altosaar I recently had to compute per-example gradients, and ended up with implementation [here](https://github.com/yaroslavvb/stuff/blob/master/natural_gradient_multilayer.py) . To make things fast I had to drop `tf.gradients` and compute things manually. There's two orders of magnitude speed-up if you use specialized structures, specifically, use \"khatri-rao\" product which gives you a batch of matmul gradients given a batch of activations + batch of backprops. It can be computed efficiently through [einsum](https://github.com/yaroslavvb/stuff/blob/2c716e7abde25018ccfeeeff96c6397fef4f33ba/whitening_util.py#L515)"}