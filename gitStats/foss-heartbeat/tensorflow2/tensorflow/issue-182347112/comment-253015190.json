{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/253015190", "html_url": "https://github.com/tensorflow/tensorflow/issues/4897#issuecomment-253015190", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4897", "id": 253015190, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzAxNTE5MA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-11T19:11:42Z", "updated_at": "2016-10-11T19:11:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p>TensorFlow is just a regular automatic differentiation system, it gives the gradient that you ask for -- so if you ask for a gradient of the mean loss over all examples, the gradient is aggregated, but if you ask for the gradient of loss over a single example, it gives you \"unaggregated\" gradient for that particular datapoint. Naively, if you have a batch of size k, you could have \"k\" <code>tf.gradient</code> calls, and that would give you gradient for each of the k examples. You can make this more efficient by reformulating your task, here's a <a href=\"https://plus.google.com/+IanGoodfellow/posts/Re2QnrNBvJm\" rel=\"nofollow\">post</a> from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=387866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goodfeli\">@goodfeli</a>  For networks with conv layers it's more tricky</p>", "body_text": "TensorFlow is just a regular automatic differentiation system, it gives the gradient that you ask for -- so if you ask for a gradient of the mean loss over all examples, the gradient is aggregated, but if you ask for the gradient of loss over a single example, it gives you \"unaggregated\" gradient for that particular datapoint. Naively, if you have a batch of size k, you could have \"k\" tf.gradient calls, and that would give you gradient for each of the k examples. You can make this more efficient by reformulating your task, here's a post from @goodfeli  For networks with conv layers it's more tricky", "body": "TensorFlow is just a regular automatic differentiation system, it gives the gradient that you ask for -- so if you ask for a gradient of the mean loss over all examples, the gradient is aggregated, but if you ask for the gradient of loss over a single example, it gives you \"unaggregated\" gradient for that particular datapoint. Naively, if you have a batch of size k, you could have \"k\" `tf.gradient` calls, and that would give you gradient for each of the k examples. You can make this more efficient by reformulating your task, here's a [post](https://plus.google.com/+IanGoodfellow/posts/Re2QnrNBvJm) from @goodfeli  For networks with conv layers it's more tricky\n"}