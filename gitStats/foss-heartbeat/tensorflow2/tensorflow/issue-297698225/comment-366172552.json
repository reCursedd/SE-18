{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/366172552", "html_url": "https://github.com/tensorflow/tensorflow/issues/17059#issuecomment-366172552", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17059", "id": 366172552, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjE3MjU1Mg==", "user": {"login": "Lancerchiang", "id": 35952525, "node_id": "MDQ6VXNlcjM1OTUyNTI1", "avatar_url": "https://avatars2.githubusercontent.com/u/35952525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lancerchiang", "html_url": "https://github.com/Lancerchiang", "followers_url": "https://api.github.com/users/Lancerchiang/followers", "following_url": "https://api.github.com/users/Lancerchiang/following{/other_user}", "gists_url": "https://api.github.com/users/Lancerchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lancerchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lancerchiang/subscriptions", "organizations_url": "https://api.github.com/users/Lancerchiang/orgs", "repos_url": "https://api.github.com/users/Lancerchiang/repos", "events_url": "https://api.github.com/users/Lancerchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/Lancerchiang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-16T08:29:44Z", "updated_at": "2018-02-16T09:09:25Z", "author_association": "NONE", "body_html": "<p>I just confirmed that the problem comes from the use of <code>tf.py_func</code>. I wrote another simple piece of code, and found out that the shape is defined if the mapping function is within <code>tensorflow</code> (which means don't use <code>tf.py_func</code>), otherwise the shape is <code>None</code><br>\nFor example, try this first:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\ndef image_parser(image_name):\n    a = np.array([1.0,2.0,3.0], dtype=np.float32)\n    return a\n\nimages = [[1,2,3],[4,5,6]]\nim_dataset = tf.data.Dataset.from_tensor_slices(images)\nim_dataset = im_dataset.map(lambda image:tuple(tf.py_func(image_parser, [image], [tf.float32])), num_parallel_calls = 2)\nim_dataset = im_dataset.prefetch(4)\niterator = im_dataset.make_initializable_iterator()\nprint(im_dataset.output_shapes)\n\n</code></pre>\n<p>It will give you <code>(TensorShape(None),)</code><br>\nIf you try this:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\ndef image_parser(image_name)\n    return image_name\nimages = [[1,2,3],[4,5,6]]\nim_dataset = tf.data.Dataset.from_tensor_slices(images)\nim_dataset = im_dataset.map(image_parser)\nim_dataset = im_dataset.prefetch(4)\niterator = im_dataset.make_initializable_iterator()\nprint(im_dataset.output_shapes)\n\n</code></pre>\n<p>It will give you the exact tensor dimension <code>(3,)</code><br>\nBut I need the <code>tf.py_func</code> in my case. Is there any way to resolve this?</p>", "body_text": "I just confirmed that the problem comes from the use of tf.py_func. I wrote another simple piece of code, and found out that the shape is defined if the mapping function is within tensorflow (which means don't use tf.py_func), otherwise the shape is None\nFor example, try this first:\nimport tensorflow as tf\nimport numpy as np\ndef image_parser(image_name):\n    a = np.array([1.0,2.0,3.0], dtype=np.float32)\n    return a\n\nimages = [[1,2,3],[4,5,6]]\nim_dataset = tf.data.Dataset.from_tensor_slices(images)\nim_dataset = im_dataset.map(lambda image:tuple(tf.py_func(image_parser, [image], [tf.float32])), num_parallel_calls = 2)\nim_dataset = im_dataset.prefetch(4)\niterator = im_dataset.make_initializable_iterator()\nprint(im_dataset.output_shapes)\n\n\nIt will give you (TensorShape(None),)\nIf you try this:\nimport tensorflow as tf\nimport numpy as np\n\ndef image_parser(image_name)\n    return image_name\nimages = [[1,2,3],[4,5,6]]\nim_dataset = tf.data.Dataset.from_tensor_slices(images)\nim_dataset = im_dataset.map(image_parser)\nim_dataset = im_dataset.prefetch(4)\niterator = im_dataset.make_initializable_iterator()\nprint(im_dataset.output_shapes)\n\n\nIt will give you the exact tensor dimension (3,)\nBut I need the tf.py_func in my case. Is there any way to resolve this?", "body": "I just confirmed that the problem comes from the use of `tf.py_func`. I wrote another simple piece of code, and found out that the shape is defined if the mapping function is within `tensorflow` (which means don't use `tf.py_func`), otherwise the shape is `None`\r\nFor example, try this first:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\ndef image_parser(image_name):\r\n    a = np.array([1.0,2.0,3.0], dtype=np.float32)\r\n    return a\r\n\r\nimages = [[1,2,3],[4,5,6]]\r\nim_dataset = tf.data.Dataset.from_tensor_slices(images)\r\nim_dataset = im_dataset.map(lambda image:tuple(tf.py_func(image_parser, [image], [tf.float32])), num_parallel_calls = 2)\r\nim_dataset = im_dataset.prefetch(4)\r\niterator = im_dataset.make_initializable_iterator()\r\nprint(im_dataset.output_shapes)\r\n\r\n```\r\nIt will give you `(TensorShape(None),)`\r\nIf you try this:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndef image_parser(image_name)\r\n    return image_name\r\nimages = [[1,2,3],[4,5,6]]\r\nim_dataset = tf.data.Dataset.from_tensor_slices(images)\r\nim_dataset = im_dataset.map(image_parser)\r\nim_dataset = im_dataset.prefetch(4)\r\niterator = im_dataset.make_initializable_iterator()\r\nprint(im_dataset.output_shapes)\r\n\r\n```\r\nIt will give you the exact tensor dimension `(3,)`\r\nBut I need the `tf.py_func` in my case. Is there any way to resolve this?"}