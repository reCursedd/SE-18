{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/130519970", "pull_request_review_id": 53402442, "id": 130519970, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMDUxOTk3MA==", "diff_hunk": "@@ -0,0 +1,950 @@\n+# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"configure script to get build parameters from user.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import errno\n+import os\n+import platform\n+import re\n+import site\n+import subprocess\n+import sys\n+\n+_TF_BAZELRC = '.tf_configure.bazelrc'\n+_DEFAULT_CUDA_VERSION = '8.0'\n+_DEFAULT_CUDNN_VERSION = '6'\n+_DEFAULT_CUDA_COMPUTE_CAPABILITIES = '3.5,5.2'\n+_DEFAULT_CUDA_PATH = '/usr/local/cuda'\n+_DEFAULT_CUDA_PATH_LINUX = '/opt/cuda'\n+_DEFAULT_CUDA_PATH_WIN = ('C:/Program Files/NVIDIA GPU Computing '\n+                          'Toolkit/CUDA/v%s' % _DEFAULT_CUDA_VERSION)\n+_TF_OPENCL_VERSION = '1.2'\n+_DEFAULT_COMPUTECPP_TOOLKIT_PATH = '/usr/local/computecpp'\n+\n+\n+def is_windows():\n+  return platform.system() == 'Windows'\n+\n+\n+def is_linux():\n+  return platform.system() == 'Linux'\n+\n+\n+def is_macos():\n+  return platform.system() == 'Darwin'\n+\n+\n+def is_ppc64le():\n+  return platform.machine() == 'ppc64le'\n+\n+\n+def get_input(question):\n+  try:\n+    try:\n+      answer = raw_input(question)\n+    except NameError:\n+      answer = input(question)  # pylint: disable=bad-builtin\n+  except EOFError:\n+    answer = ''\n+  return answer\n+\n+\n+def symlink_force(target, link_name):\n+  \"\"\"Force symlink, equivalent of 'ln -sf'.\n+\n+  Args:\n+    target: items to link to.\n+    link_name: name of the link.\n+  \"\"\"\n+  try:\n+    os.symlink(target, link_name)\n+  except OSError as e:\n+    if e.errno == errno.EEXIST:\n+      os.remove(link_name)\n+      os.symlink(target, link_name)\n+    else:\n+      raise e\n+\n+\n+def sed_in_place(filename, old, new):\n+  \"\"\"Replace old string with new string in file.\n+\n+  Args:\n+    filename: string for filename.\n+    old: string to replace.\n+    new: new string to replace to.\n+  \"\"\"\n+  with open(filename, 'r') as f:\n+    filedata = f.read()\n+  newdata = filedata.replace(old, new)\n+  with open(filename, 'w') as f:\n+    f.write(newdata)\n+\n+\n+def remove_line_with(filename, token):\n+  \"\"\"Remove lines that contain token from file.\n+\n+  Args:\n+    filename: string for filename.\n+    token: string token to check if to remove a line from file or not.\n+  \"\"\"\n+  with open(filename, 'r') as f:\n+    filedata = f.read()\n+\n+  with open(filename, 'w') as f:\n+    for line in filedata.strip().split('\\n'):\n+      if token not in line:\n+        f.write(line + '\\n')\n+\n+\n+def write_to_bazelrc(line):\n+  with open(_TF_BAZELRC, 'a') as f:\n+    f.write(line + '\\n')\n+\n+\n+def write_action_env_to_bazelrc(var_name, var):\n+  write_to_bazelrc('build --action_env %s=\"%s\"' % (var_name, str(var)))\n+\n+\n+def run_shell(cmd):\n+  return subprocess.check_output(cmd, shell=True).decode('UTF-8').strip()\n+\n+\n+def cygpath(path):\n+  \"\"\"Convert path from posix to windows.\"\"\"\n+  return run_shell('cygpath  -m \"%s\"' % path)\n+\n+\n+def get_python_path(environ_cp):\n+  \"\"\"Get the python site package paths.\"\"\"\n+  python_paths = []\n+  if environ_cp.get('PYTHONPATH'):\n+    python_paths = environ_cp.get('PYTHONPATH').split(':')\n+  try:\n+    library_paths = site.getsitepackages()\n+  except AttributeError:\n+    from distutils.sysconfig import get_python_lib  # pylint: disable=g-import-not-at-top\n+    library_paths = [get_python_lib()]\n+  all_paths = set(python_paths + library_paths)\n+\n+  paths = []\n+  for path in all_paths:\n+    if os.path.isdir(path):\n+      paths.append(path)\n+  return paths\n+\n+\n+def setup_python(environ_cp):\n+  \"\"\"Setup python related env variables.\"\"\"\n+  # Get PYTHON_BIN_PATH, default is the current running python.\n+  default_python_bin_path = sys.executable\n+  ask_python_bin_path = ('Please specify the location of python. [Default is '\n+                         '%s]: ') % default_python_bin_path\n+  while True:\n+    python_bin_path = get_from_env_or_user_or_default(\n+        environ_cp, 'PYTHON_BIN_PATH', ask_python_bin_path,\n+        default_python_bin_path)\n+    # Check if the path is valid\n+    if (os.path.isfile(python_bin_path) and os.access(\n+        python_bin_path, os.X_OK)) or (os.path.isdir(python_bin_path)):\n+      break\n+    elif not os.path.exists(python_bin_path):\n+      print('Invalid python path: %s cannot be found.' % python_bin_path)\n+    else:\n+      print('%s is not executable.  Is it the python binary?' % python_bin_path)\n+    environ_cp['PYTHON_BIN_PATH'] = ''\n+\n+  # Get PYTHON_LIB_PATH\n+  python_lib_path = environ_cp.get('PYTHON_LIB_PATH')\n+  if not python_lib_path:\n+    python_lib_paths = get_python_path(environ_cp)\n+    if environ_cp.get('USE_DEFAULT_PYTHON_LIB_PATH') == '1':\n+      environ_cp['PYTHON_LIB_PATH'] = python_lib_paths[0]\n+    else:\n+      print('Found possible Python library paths:\\n%s' %", "path": "configure.py", "position": 180, "original_position": 180, "commit_id": "03d6a85998a923983f859e7b55ee02e719fabfb1", "original_commit_id": "03d6a85998a923983f859e7b55ee02e719fabfb1", "user": {"login": "suiyuan2009", "id": 5105569, "node_id": "MDQ6VXNlcjUxMDU1Njk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5105569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suiyuan2009", "html_url": "https://github.com/suiyuan2009", "followers_url": "https://api.github.com/users/suiyuan2009/followers", "following_url": "https://api.github.com/users/suiyuan2009/following{/other_user}", "gists_url": "https://api.github.com/users/suiyuan2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/suiyuan2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suiyuan2009/subscriptions", "organizations_url": "https://api.github.com/users/suiyuan2009/orgs", "repos_url": "https://api.github.com/users/suiyuan2009/repos", "events_url": "https://api.github.com/users/suiyuan2009/events{/privacy}", "received_events_url": "https://api.github.com/users/suiyuan2009/received_events", "type": "User", "site_admin": false}, "body": "I set python location to `/usr/bin/python3`, but possible python library paths returned by configure are all python2's paths.", "created_at": "2017-08-01T05:04:09Z", "updated_at": "2017-08-01T05:04:09Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11767#discussion_r130519970", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11767", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/130519970"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11767#discussion_r130519970"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11767"}}, "body_html": "<p>I set python location to <code>/usr/bin/python3</code>, but possible python library paths returned by configure are all python2's paths.</p>", "body_text": "I set python location to /usr/bin/python3, but possible python library paths returned by configure are all python2's paths."}