{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/89435462", "pull_request_review_id": 9980604, "id": 89435462, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NDM1NDYy", "diff_hunk": "@@ -571,6 +571,7 @@ def _get_or_make_slot(self, var, val, slot_name, op_name):\n     Returns:\n       A `Variable` object.\n     \"\"\"\n+    op_name += '/' + slot_name", "path": "tensorflow/python/training/optimizer.py", "position": null, "original_position": 4, "commit_id": "3cb6d632f5585e0ab093d4c2a0b3695f32c15557", "original_commit_id": "06b751fd7c5dbf5ae359156c6bbaf4c78881d72e", "user": {"login": "Syndrome777", "id": 6788909, "node_id": "MDQ6VXNlcjY3ODg5MDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6788909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Syndrome777", "html_url": "https://github.com/Syndrome777", "followers_url": "https://api.github.com/users/Syndrome777/followers", "following_url": "https://api.github.com/users/Syndrome777/following{/other_user}", "gists_url": "https://api.github.com/users/Syndrome777/gists{/gist_id}", "starred_url": "https://api.github.com/users/Syndrome777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Syndrome777/subscriptions", "organizations_url": "https://api.github.com/users/Syndrome777/orgs", "repos_url": "https://api.github.com/users/Syndrome777/repos", "events_url": "https://api.github.com/users/Syndrome777/events{/privacy}", "received_events_url": "https://api.github.com/users/Syndrome777/received_events", "type": "User", "site_admin": false}, "body": "Yeah, there may be something hard to understand.\r\n## The reason is:\r\nSome optimizers have to create more than one list of shared variables. As the master's implementation, it use `ops.name_scope(name) as scope` to distinguish the creations of different variables' lists. It will add a suffix to the scope name if a variable with such name already exists. So it will give two lists of variables(call 'm' list and 'v' list) in Adam like below:\r\n```\r\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam:0 (50000, 256)\r\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_1:0 (50000, 256)\r\n```\r\nAnd in my implementation, it doesn't allow the repeated creation of variable with the same scope name. So the Adam optimizer will fail to create its second list of variables which is called 'v' in Adam.\r\n```python\r\n# Adam will call _zeros_slot twice\r\n    for v in var_list:\r\n      self._zeros_slot(v, \"m\", self._name)\r\n      self._zeros_slot(v, \"v\", self._name)\r\n```\r\nTo solve this issue, it need to use different scope names between 'm' list and 'v' list in Adam.\r\nFortunately the slot_name in optimizer is not used now, so I think `op_name + '/' + slot_name` is suitable to use as different scope name to deal with this issue.\r\n```python\r\ndef _zeros_slot(self, var, slot_name, op_name)\r\n    # add here\r\n    op_name += '/' + slot_name\r\n    named_slots = self._slot_dict(slot_name)\r\n    if var not in named_slots:\r\n      named_slots[var] = slot_creator.create_zeros_slot(var, op_name)\r\n    return named_slots[var]\r\n```\r\nAnd meanwhile using op_name with a number as the suffix may be confusing, using `op_name + slot_name` will be clearer.\r\n```\r\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam/m:0 (50000, 256)\r\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam/v:0 (50000, 256)\r\n```\r\n\r\n", "created_at": "2016-11-24T04:48:36Z", "updated_at": "2016-12-01T03:46:45Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5813#discussion_r89435462", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5813", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/89435462"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5813#discussion_r89435462"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5813"}}, "body_html": "<p>Yeah, there may be something hard to understand.</p>\n<h2>The reason is:</h2>\n<p>Some optimizers have to create more than one list of shared variables. As the master's implementation, it use <code>ops.name_scope(name) as scope</code> to distinguish the creations of different variables' lists. It will add a suffix to the scope name if a variable with such name already exists. So it will give two lists of variables(call 'm' list and 'v' list) in Adam like below:</p>\n<pre><code>embedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam:0 (50000, 256)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_1:0 (50000, 256)\n</code></pre>\n<p>And in my implementation, it doesn't allow the repeated creation of variable with the same scope name. So the Adam optimizer will fail to create its second list of variables which is called 'v' in Adam.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Adam will call _zeros_slot twice</span>\n    <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> var_list:\n      <span class=\"pl-c1\">self</span>._zeros_slot(v, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>m<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">self</span>._name)\n      <span class=\"pl-c1\">self</span>._zeros_slot(v, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">self</span>._name)</pre></div>\n<p>To solve this issue, it need to use different scope names between 'm' list and 'v' list in Adam.<br>\nFortunately the slot_name in optimizer is not used now, so I think <code>op_name + '/' + slot_name</code> is suitable to use as different scope name to deal with this issue.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">_zeros_slot</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">var</span>, <span class=\"pl-smi\">slot_name</span>, <span class=\"pl-smi\">op_name</span>)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> add here</span>\n    op_name <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> slot_name\n    named_slots <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._slot_dict(slot_name)\n    <span class=\"pl-k\">if</span> var <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> named_slots:\n      named_slots[var] <span class=\"pl-k\">=</span> slot_creator.create_zeros_slot(var, op_name)\n    <span class=\"pl-k\">return</span> named_slots[var]</pre></div>\n<p>And meanwhile using op_name with a number as the suffix may be confusing, using <code>op_name + slot_name</code> will be clearer.</p>\n<pre><code>embedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam/m:0 (50000, 256)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam/v:0 (50000, 256)\n</code></pre>", "body_text": "Yeah, there may be something hard to understand.\nThe reason is:\nSome optimizers have to create more than one list of shared variables. As the master's implementation, it use ops.name_scope(name) as scope to distinguish the creations of different variables' lists. It will add a suffix to the scope name if a variable with such name already exists. So it will give two lists of variables(call 'm' list and 'v' list) in Adam like below:\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam:0 (50000, 256)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_1:0 (50000, 256)\n\nAnd in my implementation, it doesn't allow the repeated creation of variable with the same scope name. So the Adam optimizer will fail to create its second list of variables which is called 'v' in Adam.\n# Adam will call _zeros_slot twice\n    for v in var_list:\n      self._zeros_slot(v, \"m\", self._name)\n      self._zeros_slot(v, \"v\", self._name)\nTo solve this issue, it need to use different scope names between 'm' list and 'v' list in Adam.\nFortunately the slot_name in optimizer is not used now, so I think op_name + '/' + slot_name is suitable to use as different scope name to deal with this issue.\ndef _zeros_slot(self, var, slot_name, op_name)\n    # add here\n    op_name += '/' + slot_name\n    named_slots = self._slot_dict(slot_name)\n    if var not in named_slots:\n      named_slots[var] = slot_creator.create_zeros_slot(var, op_name)\n    return named_slots[var]\nAnd meanwhile using op_name with a number as the suffix may be confusing, using op_name + slot_name will be clearer.\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam/m:0 (50000, 256)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam/v:0 (50000, 256)", "in_reply_to_id": 89415635}