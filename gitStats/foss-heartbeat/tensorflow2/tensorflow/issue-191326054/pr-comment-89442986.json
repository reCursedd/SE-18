{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/89442986", "pull_request_review_id": 9987872, "id": 89442986, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5NDQyOTg2", "diff_hunk": "@@ -42,12 +42,13 @@\n from tensorflow.python.framework import ops\n from tensorflow.python.ops import array_ops\n from tensorflow.python.ops import variables\n+from tensorflow.python.ops import variable_scope\n \n \n def _create_slot_var(primary, val, scope):\n   \"\"\"Helper function for creating a slot variable.\"\"\"\n \n-  slot = variables.Variable(val, name=scope, trainable=False)\n+  slot = variable_scope.get_variable(scope, initializer=val, trainable=False)", "path": "tensorflow/python/training/slot_creator.py", "position": 11, "original_position": 11, "commit_id": "3cb6d632f5585e0ab093d4c2a0b3695f32c15557", "original_commit_id": "02ae644d249969447343429d220d7fc0f52b40aa", "user": {"login": "Syndrome777", "id": 6788909, "node_id": "MDQ6VXNlcjY3ODg5MDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6788909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Syndrome777", "html_url": "https://github.com/Syndrome777", "followers_url": "https://api.github.com/users/Syndrome777/followers", "following_url": "https://api.github.com/users/Syndrome777/following{/other_user}", "gists_url": "https://api.github.com/users/Syndrome777/gists{/gist_id}", "starred_url": "https://api.github.com/users/Syndrome777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Syndrome777/subscriptions", "organizations_url": "https://api.github.com/users/Syndrome777/orgs", "repos_url": "https://api.github.com/users/Syndrome777/repos", "events_url": "https://api.github.com/users/Syndrome777/events{/privacy}", "received_events_url": "https://api.github.com/users/Syndrome777/received_events", "type": "User", "site_admin": false}, "body": "Great! I think it's a good idea.\r\nAnd I hope to make a small change to your example code. \r\n```python\r\ndef create_slot(primary, val, name, colocate_with_primary=True):\r\n  with variable_scope.variable_scope(None, primary.op.name):\r\n    return _create_slot_var(primary, val, name)\r\n```\r\nWhen I use `two adam optimizers` with the same kind, it will create:\r\n```\r\nRNN/GRUCell/Gates/Linear/Matrix/Adam/m:0 (150, 200)\r\nRNN/GRUCell/Gates/Linear/Matrix_1/Adam/v:0 (150, 200)\r\nRNN/GRUCell/Gates/Linear/Matrix_2/Adam/m:0 (150, 200)\r\nRNN/GRUCell/Gates/Linear/Matrix_3/Adam/v:0 (150, 200)\r\n```\r\nOf course, it works. But I think `Matrix_N` is not good enough for understanding.\r\nSo I hope to change like below:\r\n```python\r\ndef create_slot(primary, val, name, colocate_with_primary=True):\r\n  with variable_scope.variable_scope(None, primary.op.name + '/' + name)\r\n    return _create_slot_var(primary, val, '')\r\n```\r\nAnd now it will create like below:\r\n```\r\nRNN/GRUCell/Gates/Linear/Matrix/Adam/m:0 (150, 200)\r\nRNN/GRUCell/Gates/Linear/Matrix/Adam/v:0 (150, 200)\r\nRNN/GRUCell/Gates/Linear/Matrix/Adam/m_1:0 (150, 200)\r\nRNN/GRUCell/Gates/Linear/Matrix/Adam/v_1:0 (150, 200)\r\n```\r\nMaybe `Matrix/Adam/v_1` is better than `Matrix_3/Adam/v`, do you think so?", "created_at": "2016-11-24T06:58:37Z", "updated_at": "2016-12-01T03:46:45Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5813#discussion_r89442986", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5813", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/89442986"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5813#discussion_r89442986"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5813"}}, "body_html": "<p>Great! I think it's a good idea.<br>\nAnd I hope to make a small change to your example code.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">create_slot</span>(<span class=\"pl-smi\">primary</span>, <span class=\"pl-smi\">val</span>, <span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">colocate_with_primary</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>):\n  <span class=\"pl-k\">with</span> variable_scope.variable_scope(<span class=\"pl-c1\">None</span>, primary.op.name):\n    <span class=\"pl-k\">return</span> _create_slot_var(primary, val, name)</pre></div>\n<p>When I use <code>two adam optimizers</code> with the same kind, it will create:</p>\n<pre><code>RNN/GRUCell/Gates/Linear/Matrix/Adam/m:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix_1/Adam/v:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix_2/Adam/m:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix_3/Adam/v:0 (150, 200)\n</code></pre>\n<p>Of course, it works. But I think <code>Matrix_N</code> is not good enough for understanding.<br>\nSo I hope to change like below:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">create_slot</span>(<span class=\"pl-smi\">primary</span>, <span class=\"pl-smi\">val</span>, <span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">colocate_with_primary</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>):\n  <span class=\"pl-k\">with</span> variable_scope.variable_scope(<span class=\"pl-c1\">None</span>, primary.op.name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> name)\n    <span class=\"pl-k\">return</span> _create_slot_var(primary, val, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)</pre></div>\n<p>And now it will create like below:</p>\n<pre><code>RNN/GRUCell/Gates/Linear/Matrix/Adam/m:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix/Adam/v:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix/Adam/m_1:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix/Adam/v_1:0 (150, 200)\n</code></pre>\n<p>Maybe <code>Matrix/Adam/v_1</code> is better than <code>Matrix_3/Adam/v</code>, do you think so?</p>", "body_text": "Great! I think it's a good idea.\nAnd I hope to make a small change to your example code.\ndef create_slot(primary, val, name, colocate_with_primary=True):\n  with variable_scope.variable_scope(None, primary.op.name):\n    return _create_slot_var(primary, val, name)\nWhen I use two adam optimizers with the same kind, it will create:\nRNN/GRUCell/Gates/Linear/Matrix/Adam/m:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix_1/Adam/v:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix_2/Adam/m:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix_3/Adam/v:0 (150, 200)\n\nOf course, it works. But I think Matrix_N is not good enough for understanding.\nSo I hope to change like below:\ndef create_slot(primary, val, name, colocate_with_primary=True):\n  with variable_scope.variable_scope(None, primary.op.name + '/' + name)\n    return _create_slot_var(primary, val, '')\nAnd now it will create like below:\nRNN/GRUCell/Gates/Linear/Matrix/Adam/m:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix/Adam/v:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix/Adam/m_1:0 (150, 200)\nRNN/GRUCell/Gates/Linear/Matrix/Adam/v_1:0 (150, 200)\n\nMaybe Matrix/Adam/v_1 is better than Matrix_3/Adam/v, do you think so?", "in_reply_to_id": 89437503}