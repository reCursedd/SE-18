{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5813", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5813/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5813/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5813/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/5813", "id": 191326054, "node_id": "MDExOlB1bGxSZXF1ZXN0OTUwNDA2MzI=", "number": 5813, "title": "Fix a bug which repeated variable creation in optimizer when using bucketing", "user": {"login": "Syndrome777", "id": 6788909, "node_id": "MDQ6VXNlcjY3ODg5MDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6788909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Syndrome777", "html_url": "https://github.com/Syndrome777", "followers_url": "https://api.github.com/users/Syndrome777/followers", "following_url": "https://api.github.com/users/Syndrome777/following{/other_user}", "gists_url": "https://api.github.com/users/Syndrome777/gists{/gist_id}", "starred_url": "https://api.github.com/users/Syndrome777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Syndrome777/subscriptions", "organizations_url": "https://api.github.com/users/Syndrome777/orgs", "repos_url": "https://api.github.com/users/Syndrome777/repos", "events_url": "https://api.github.com/users/Syndrome777/events{/privacy}", "received_events_url": "https://api.github.com/users/Syndrome777/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}, {"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 33, "created_at": "2016-11-23T16:48:44Z", "updated_at": "2016-12-01T19:00:52Z", "closed_at": "2016-12-01T18:58:23Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5813", "html_url": "https://github.com/tensorflow/tensorflow/pull/5813", "diff_url": "https://github.com/tensorflow/tensorflow/pull/5813.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/5813.patch"}, "body_html": "<p>Hi, all,</p>\n<p>It's a pull request mentioned in <a href=\"https://github.com/tensorflow/tensorflow/issues/5786\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5786/hovercard\">#5786</a>.</p>\n<p>When we use adam or momentum as optimizer in bucketing, the variables in optimizer will not be shared between different buckets.</p>\n<p>Because it uses <code>name_scope</code> to create scope name (and potentially add a suffix to the scope name if a variable with such name already exists) and uses <code>Variable</code> to create variable.<br>\nSee <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/slot_creator.py#L47\">_create_slot_var</a> and <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/slot_creator.py#L67\">create_slot</a>.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">_create_slot_var</span>(<span class=\"pl-smi\">primary</span>, <span class=\"pl-smi\">val</span>, <span class=\"pl-smi\">scope</span>):\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Helper function for creating a slot variable.<span class=\"pl-pds\">\"\"\"</span></span>\n  slot <span class=\"pl-k\">=</span> variables.Variable(val, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>scope, <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n  <span class=\"pl-c1\">...</span>\n  <span class=\"pl-k\">return</span> slot\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">create_slot</span>(<span class=\"pl-smi\">primary</span>, <span class=\"pl-smi\">val</span>, <span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">colocate_with_primary</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>):\n  <span class=\"pl-k\">with</span> ops.name_scope(primary.op.name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> name) <span class=\"pl-k\">as</span> scope:\n    <span class=\"pl-k\">if</span> colocate_with_primary:\n      <span class=\"pl-k\">with</span> ops.colocate_with(primary):\n        <span class=\"pl-k\">return</span> _create_slot_var(primary, val, scope)\n    <span class=\"pl-k\">else</span>:\n      <span class=\"pl-k\">return</span> _create_slot_var(primary, val, scope)</pre></div>\n<p>But there is a potential bug when using bucketing in seq2seq task.<br>\nEvery bucket will create a list of variables in its optimizer and they should be shared with each other. But now these variables will not be shared.<br>\nDiscussion is <a href=\"https://github.com/tensorflow/tensorflow/issues/5786\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5786/hovercard\">#5786</a>.</p>\n<p>For example,<br>\nwhen I use two buckets and adam optimizer in my task, it will create two repeated variable lists:</p>\n<pre><code>embedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam:0 (50000, 256)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_1:0 (50000, 256)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam:0 (1056, 1600)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam_1:0 (1056, 1600)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam:0 (1600,)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam_1:0 (1600,)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_2:0 (50000, 256)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_3:0 (50000, 256)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam_2:0 (1056, 1600)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam_3:0 (1056, 1600)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam_2:0 (1600,)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam_3:0 (1600,)\n</code></pre>\n<p>As a solution, I remove <code>name_scope</code> and replace <code>Variable</code> to <code>get_variable</code> for sharing variables in bucketing.</p>\n<p>And meanwhile adam optimizer will create two different lists of variables for parameter update.<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/adam.py#L118\">Adam</a></p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> var_list:\n      <span class=\"pl-c1\">self</span>._zeros_slot(v, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>m<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">self</span>._name)\n      <span class=\"pl-c1\">self</span>._zeros_slot(v, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">self</span>._name)</pre></div>\n<p>And we have to distinguish the creations of these two variables' lists.<br>\nSo I think add <code>slot_name</code> as a suffix to <code>op_name</code> is a suitable solution. It use <code>op_name + '/' + slot_name</code> to create different shared variables.</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">def</span> <span class=\"pl-en\">_zeros_slot</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">var</span>, <span class=\"pl-smi\">slot_name</span>, <span class=\"pl-smi\">op_name</span>):\n    named_slots <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._slot_dict(slot_name)\n    <span class=\"pl-k\">if</span> var <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> named_slots:\n      named_slots[var] <span class=\"pl-k\">=</span> slot_creator.create_zeros_slot(var, op_name)\n    <span class=\"pl-k\">return</span> named_slots[var]</pre></div>\n<p>So I add <code>op_name += '/' + slot_name</code> in <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/optimizer.py#L561\">Optimizer._zeros_slot</a> and <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/optimizer.py#L579\">Optimizer._zeros_slot</a>.</p>\n<h2>Testing</h2>\n<p>I have run the tests in <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/python/training\">training</a> and there are all OK.<br>\nAnd I have run my code, and it seems that it works well.<br>\nAnd I have run the example of mnist, the log is below:</p>\n<pre><code>#Result of MNIST in tensorflow/models/image/mnist/convolutional.py\nStep 8500 (epoch 9.89), 122.8 ms\nMinibatch loss: 1.618, learning rate: 0.006302\nMinibatch error: 0.0%\nValidation error: 0.9%\nTest error: 0.8%\n</code></pre>\n<p>I'm not sure if I miss some important things.<br>\nAnd please read my pull request and give some advices if it could fix this bug.</p>\n<p>Getting a lot of help from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=684901\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lukaszkaiser\">@lukaszkaiser</a> .Thanks so much.</p>", "body_text": "Hi, all,\nIt's a pull request mentioned in #5786.\nWhen we use adam or momentum as optimizer in bucketing, the variables in optimizer will not be shared between different buckets.\nBecause it uses name_scope to create scope name (and potentially add a suffix to the scope name if a variable with such name already exists) and uses Variable to create variable.\nSee _create_slot_var and create_slot.\ndef _create_slot_var(primary, val, scope):\n  \"\"\"Helper function for creating a slot variable.\"\"\"\n  slot = variables.Variable(val, name=scope, trainable=False)\n  ...\n  return slot\n\n\ndef create_slot(primary, val, name, colocate_with_primary=True):\n  with ops.name_scope(primary.op.name + \"/\" + name) as scope:\n    if colocate_with_primary:\n      with ops.colocate_with(primary):\n        return _create_slot_var(primary, val, scope)\n    else:\n      return _create_slot_var(primary, val, scope)\nBut there is a potential bug when using bucketing in seq2seq task.\nEvery bucket will create a list of variables in its optimizer and they should be shared with each other. But now these variables will not be shared.\nDiscussion is #5786.\nFor example,\nwhen I use two buckets and adam optimizer in my task, it will create two repeated variable lists:\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam:0 (50000, 256)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_1:0 (50000, 256)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam:0 (1056, 1600)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam_1:0 (1056, 1600)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam:0 (1600,)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam_1:0 (1600,)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_2:0 (50000, 256)\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_3:0 (50000, 256)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam_2:0 (1056, 1600)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam_3:0 (1056, 1600)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam_2:0 (1600,)\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam_3:0 (1600,)\n\nAs a solution, I remove name_scope and replace Variable to get_variable for sharing variables in bucketing.\nAnd meanwhile adam optimizer will create two different lists of variables for parameter update.\nAdam\n    for v in var_list:\n      self._zeros_slot(v, \"m\", self._name)\n      self._zeros_slot(v, \"v\", self._name)\nAnd we have to distinguish the creations of these two variables' lists.\nSo I think add slot_name as a suffix to op_name is a suitable solution. It use op_name + '/' + slot_name to create different shared variables.\n  def _zeros_slot(self, var, slot_name, op_name):\n    named_slots = self._slot_dict(slot_name)\n    if var not in named_slots:\n      named_slots[var] = slot_creator.create_zeros_slot(var, op_name)\n    return named_slots[var]\nSo I add op_name += '/' + slot_name in Optimizer._zeros_slot and Optimizer._zeros_slot.\nTesting\nI have run the tests in training and there are all OK.\nAnd I have run my code, and it seems that it works well.\nAnd I have run the example of mnist, the log is below:\n#Result of MNIST in tensorflow/models/image/mnist/convolutional.py\nStep 8500 (epoch 9.89), 122.8 ms\nMinibatch loss: 1.618, learning rate: 0.006302\nMinibatch error: 0.0%\nValidation error: 0.9%\nTest error: 0.8%\n\nI'm not sure if I miss some important things.\nAnd please read my pull request and give some advices if it could fix this bug.\nGetting a lot of help from @lukaszkaiser .Thanks so much.", "body": "Hi, all,\r\n\r\nIt's a pull request mentioned in [#5786](https://github.com/tensorflow/tensorflow/issues/5786).\r\n\r\nWhen we use adam or momentum as optimizer in bucketing, the variables in optimizer will not be shared between different buckets.\r\n\r\nBecause it uses `name_scope` to create scope name (and potentially add a suffix to the scope name if a variable with such name already exists) and uses `Variable` to create variable.\r\nSee [_create_slot_var](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/slot_creator.py#L47) and [create_slot](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/slot_creator.py#L67).\r\n```python\r\ndef _create_slot_var(primary, val, scope):\r\n  \"\"\"Helper function for creating a slot variable.\"\"\"\r\n  slot = variables.Variable(val, name=scope, trainable=False)\r\n  ...\r\n  return slot\r\n\r\n\r\ndef create_slot(primary, val, name, colocate_with_primary=True):\r\n  with ops.name_scope(primary.op.name + \"/\" + name) as scope:\r\n    if colocate_with_primary:\r\n      with ops.colocate_with(primary):\r\n        return _create_slot_var(primary, val, scope)\r\n    else:\r\n      return _create_slot_var(primary, val, scope)\r\n```\r\n\r\nBut there is a potential bug when using bucketing in seq2seq task. \r\nEvery bucket will create a list of variables in its optimizer and they should be shared with each other. But now these variables will not be shared.\r\nDiscussion is [#5786](https://github.com/tensorflow/tensorflow/issues/5786).\r\n\r\nFor example, \r\nwhen I use two buckets and adam optimizer in my task, it will create two repeated variable lists:\r\n```\r\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam:0 (50000, 256)\r\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_1:0 (50000, 256)\r\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam:0 (1056, 1600)\r\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam_1:0 (1056, 1600)\r\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam:0 (1600,)\r\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam_1:0 (1600,)\r\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_2:0 (50000, 256)\r\nembedding_attention_seq2seq/RNN/EmbeddingWrapper/embedding/Adam_3:0 (50000, 256)\r\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam_2:0 (1056, 1600)\r\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Matrix/Adam_3:0 (1056, 1600)\r\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam_2:0 (1600,)\r\nembedding_attention_seq2seq/RNN/MultiRNNCell/Cell0/GRUCell/Gates/Linear/Bias/Adam_3:0 (1600,)\r\n```\r\nAs a solution, I remove `name_scope` and replace `Variable` to `get_variable` for sharing variables in bucketing.\r\n\r\nAnd meanwhile adam optimizer will create two different lists of variables for parameter update.\r\n[Adam](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/adam.py#L118)\r\n```python\r\n    for v in var_list:\r\n      self._zeros_slot(v, \"m\", self._name)\r\n      self._zeros_slot(v, \"v\", self._name)\r\n```\r\nAnd we have to distinguish the creations of these two variables' lists.\r\nSo I think add `slot_name` as a suffix to `op_name` is a suitable solution. It use `op_name + '/' + slot_name` to create different shared variables.\r\n\r\n```python\r\n  def _zeros_slot(self, var, slot_name, op_name):\r\n    named_slots = self._slot_dict(slot_name)\r\n    if var not in named_slots:\r\n      named_slots[var] = slot_creator.create_zeros_slot(var, op_name)\r\n    return named_slots[var]\r\n```\r\nSo I add `op_name += '/' + slot_name` in [Optimizer._zeros_slot](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/optimizer.py#L561\r\n) and [Optimizer._zeros_slot](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/training/optimizer.py#L579\r\n).\r\n\r\n## Testing\r\nI have run the tests in [training](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/python/training) and there are all OK.\r\nAnd I have run my code, and it seems that it works well.\r\nAnd I have run the example of mnist, the log is below:\r\n```\r\n#Result of MNIST in tensorflow/models/image/mnist/convolutional.py\r\nStep 8500 (epoch 9.89), 122.8 ms\r\nMinibatch loss: 1.618, learning rate: 0.006302\r\nMinibatch error: 0.0%\r\nValidation error: 0.9%\r\nTest error: 0.8%\r\n```\r\n\r\nI'm not sure if I miss some important things. \r\nAnd please read my pull request and give some advices if it could fix this bug. \r\n\r\nGetting a lot of help from @lukaszkaiser .Thanks so much.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}