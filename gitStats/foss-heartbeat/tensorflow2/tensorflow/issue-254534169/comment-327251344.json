{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327251344", "html_url": "https://github.com/tensorflow/tensorflow/pull/12741#issuecomment-327251344", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12741", "id": 327251344, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzI1MTM0NA==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-05T17:42:37Z", "updated_at": "2017-09-05T17:42:37Z", "author_association": "MEMBER", "body_html": "<p>We are planning to split out a shared object, which precompiled op libraries will depend on, and remove RTLD_GLOBAL when loading pywrap_tensorflow. This shared object will not include the C API symbols (the C API relies on several ops, and we'd like to keep ops and kernels out of this new shared object). Both the C API and pywrap_tensorflow will depend on this new shared object, but trying to load both of them will attempt to register ops and kernels twice and throw an error.</p>\n<p>So this PR is probably your best bet medium-term for adding Python API calls to an otherwise C API usage. Removing RTLD_GLOBAL will mean that you'll need to explicitly link against _pywrap_tensorflow_internal.so for the C API symbols (you don't need to do it now, but I'd recommend it to avoid breaking in the future).</p>", "body_text": "We are planning to split out a shared object, which precompiled op libraries will depend on, and remove RTLD_GLOBAL when loading pywrap_tensorflow. This shared object will not include the C API symbols (the C API relies on several ops, and we'd like to keep ops and kernels out of this new shared object). Both the C API and pywrap_tensorflow will depend on this new shared object, but trying to load both of them will attempt to register ops and kernels twice and throw an error.\nSo this PR is probably your best bet medium-term for adding Python API calls to an otherwise C API usage. Removing RTLD_GLOBAL will mean that you'll need to explicitly link against _pywrap_tensorflow_internal.so for the C API symbols (you don't need to do it now, but I'd recommend it to avoid breaking in the future).", "body": "We are planning to split out a shared object, which precompiled op libraries will depend on, and remove RTLD_GLOBAL when loading pywrap_tensorflow. This shared object will not include the C API symbols (the C API relies on several ops, and we'd like to keep ops and kernels out of this new shared object). Both the C API and pywrap_tensorflow will depend on this new shared object, but trying to load both of them will attempt to register ops and kernels twice and throw an error.\r\n\r\nSo this PR is probably your best bet medium-term for adding Python API calls to an otherwise C API usage. Removing RTLD_GLOBAL will mean that you'll need to explicitly link against _pywrap_tensorflow_internal.so for the C API symbols (you don't need to do it now, but I'd recommend it to avoid breaking in the future)."}