{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/141240108", "pull_request_review_id": 65422507, "id": 141240108, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTI0MDEwOA==", "diff_hunk": "@@ -64,10 +65,27 @@ def testChainOfMatmul(self):\n       d = math_ops.matmul(c, b)\n       sess.run(d)\n \n-      max_bytes_in_use = sess.run(memory_stats_ops.MaxBytesInUse())\n+      max_bytes_in_use_op = memory_stats_ops.MaxBytesInUse()\n+      max_bytes_in_use = sess.run(max_bytes_in_use_op)\n       self.assertGreaterEqual(max_bytes_in_use, matrix_size_in_bytes * 3)\n       self.assertLess(max_bytes_in_use, matrix_size_in_bytes * 4)\n \n+      # run chain with 2 ops, make sure BytesInUse captures intermediate\n+      # memory usage\n+      a = random_ops.random_uniform(matrix_shape, dtype=dtype)\n+      with ops.control_dependencies([a]):\n+        bytes_in_use_op = memory_stats_ops.BytesInUse()\n+      with ops.control_dependencies([bytes_in_use_op]):\n+        b = random_ops.random_uniform(matrix_shape, dtype=dtype)\n+\n+      _, bytes_in_use, max_bytes_in_use = sess.run([a, bytes_in_use_op,\n+                                                    max_bytes_in_use_op])\n+\n+      # intermediate result allocates 1 matrix, max usage is at least 2\n+      self.assertGreaterEqual(bytes_in_use, matrix_size_in_bytes * 1)\n+      self.assertLess(bytes_in_use, matrix_size_in_bytes * 2)\n+      self.assertGreaterEqual(max_bytes_in_use, matrix_size_in_bytes * 2)", "path": "tensorflow/contrib/memory_stats/python/kernel_tests/memory_stats_ops_test.py", "position": null, "original_position": 32, "commit_id": "6c42648cf5504e2e99f609b8dd8dc39c2e388334", "original_commit_id": "7e6fd8a2402acc37854a4eae3634340ca451271f", "user": {"login": "wujingyue", "id": 2772612, "node_id": "MDQ6VXNlcjI3NzI2MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2772612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wujingyue", "html_url": "https://github.com/wujingyue", "followers_url": "https://api.github.com/users/wujingyue/followers", "following_url": "https://api.github.com/users/wujingyue/following{/other_user}", "gists_url": "https://api.github.com/users/wujingyue/gists{/gist_id}", "starred_url": "https://api.github.com/users/wujingyue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wujingyue/subscriptions", "organizations_url": "https://api.github.com/users/wujingyue/orgs", "repos_url": "https://api.github.com/users/wujingyue/repos", "events_url": "https://api.github.com/users/wujingyue/events{/privacy}", "received_events_url": "https://api.github.com/users/wujingyue/received_events", "type": "User", "site_admin": false}, "body": "Can we make this more strict? max_bytes_in_use should >= matrix_size_in_bytes * 3, because as you said it's sticky to the allocator. ", "created_at": "2017-09-27T04:00:02Z", "updated_at": "2017-09-27T15:19:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13107#discussion_r141240108", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13107", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/141240108"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13107#discussion_r141240108"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13107"}}, "body_html": "<p>Can we make this more strict? max_bytes_in_use should &gt;= matrix_size_in_bytes * 3, because as you said it's sticky to the allocator.</p>", "body_text": "Can we make this more strict? max_bytes_in_use should >= matrix_size_in_bytes * 3, because as you said it's sticky to the allocator."}