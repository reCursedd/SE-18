{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/422969577", "html_url": "https://github.com/tensorflow/tensorflow/issues/11756#issuecomment-422969577", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11756", "id": 422969577, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjk2OTU3Nw==", "user": {"login": "jhultman", "id": 27909223, "node_id": "MDQ6VXNlcjI3OTA5MjIz", "avatar_url": "https://avatars3.githubusercontent.com/u/27909223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhultman", "html_url": "https://github.com/jhultman", "followers_url": "https://api.github.com/users/jhultman/followers", "following_url": "https://api.github.com/users/jhultman/following{/other_user}", "gists_url": "https://api.github.com/users/jhultman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhultman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhultman/subscriptions", "organizations_url": "https://api.github.com/users/jhultman/orgs", "repos_url": "https://api.github.com/users/jhultman/repos", "events_url": "https://api.github.com/users/jhultman/events{/privacy}", "received_events_url": "https://api.github.com/users/jhultman/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-19T21:46:31Z", "updated_at": "2018-09-19T21:47:37Z", "author_association": "NONE", "body_html": "<p>I recently dealt with a similar problem involving <code>reduce_max()</code> over a tensor where I couldn't apply a boolean mask since that would yield a \"jagged\" tensor. Instead of \"turning off\" values with negative infinity (or pos inf for reduce_min), I suggest simply replacing unwanted values with an arbitrary slice of the tensor immediately before the reduce (for a matrix you can pick the first row, assuming it's True in the mask). You willl need to tile the tensors appropriately since the broadcasting support is lackluster. Pseudocode:</p>\n<pre><code>matrix = [\n    [1, 2],\n    [5, 6],\n    [2, 4],\n]\n\nmask = [\n    True,\n    False,\n    True,\n]\n\narbitary_row = tf.boolean_mask(matrix, mask)[0, :]\nmasked = tf.where(mask, matrix, arbitary_row)\nmax_val = tf.reduce_max(masked, axis=0)\n\nprint(max_val)\n&gt;&gt; [2, 4]\n</code></pre>", "body_text": "I recently dealt with a similar problem involving reduce_max() over a tensor where I couldn't apply a boolean mask since that would yield a \"jagged\" tensor. Instead of \"turning off\" values with negative infinity (or pos inf for reduce_min), I suggest simply replacing unwanted values with an arbitrary slice of the tensor immediately before the reduce (for a matrix you can pick the first row, assuming it's True in the mask). You willl need to tile the tensors appropriately since the broadcasting support is lackluster. Pseudocode:\nmatrix = [\n    [1, 2],\n    [5, 6],\n    [2, 4],\n]\n\nmask = [\n    True,\n    False,\n    True,\n]\n\narbitary_row = tf.boolean_mask(matrix, mask)[0, :]\nmasked = tf.where(mask, matrix, arbitary_row)\nmax_val = tf.reduce_max(masked, axis=0)\n\nprint(max_val)\n>> [2, 4]", "body": "I recently dealt with a similar problem involving `reduce_max()` over a tensor where I couldn't apply a boolean mask since that would yield a \"jagged\" tensor. Instead of \"turning off\" values with negative infinity (or pos inf for reduce_min), I suggest simply replacing unwanted values with an arbitrary slice of the tensor immediately before the reduce (for a matrix you can pick the first row, assuming it's True in the mask). You willl need to tile the tensors appropriately since the broadcasting support is lackluster. Pseudocode:\r\n\r\n```\r\nmatrix = [\r\n    [1, 2],\r\n    [5, 6],\r\n    [2, 4],\r\n]\r\n\r\nmask = [\r\n    True,\r\n    False,\r\n    True,\r\n]\r\n\r\narbitary_row = tf.boolean_mask(matrix, mask)[0, :]\r\nmasked = tf.where(mask, matrix, arbitary_row)\r\nmax_val = tf.reduce_max(masked, axis=0)\r\n\r\nprint(max_val)\r\n>> [2, 4]\r\n```"}