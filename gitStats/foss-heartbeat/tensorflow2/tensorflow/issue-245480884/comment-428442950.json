{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/428442950", "html_url": "https://github.com/tensorflow/tensorflow/issues/11756#issuecomment-428442950", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11756", "id": 428442950, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODQ0Mjk1MA==", "user": {"login": "LordBlackhawk", "id": 12414594, "node_id": "MDQ6VXNlcjEyNDE0NTk0", "avatar_url": "https://avatars2.githubusercontent.com/u/12414594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LordBlackhawk", "html_url": "https://github.com/LordBlackhawk", "followers_url": "https://api.github.com/users/LordBlackhawk/followers", "following_url": "https://api.github.com/users/LordBlackhawk/following{/other_user}", "gists_url": "https://api.github.com/users/LordBlackhawk/gists{/gist_id}", "starred_url": "https://api.github.com/users/LordBlackhawk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LordBlackhawk/subscriptions", "organizations_url": "https://api.github.com/users/LordBlackhawk/orgs", "repos_url": "https://api.github.com/users/LordBlackhawk/repos", "events_url": "https://api.github.com/users/LordBlackhawk/events{/privacy}", "received_events_url": "https://api.github.com/users/LordBlackhawk/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-10T05:30:42Z", "updated_at": "2018-10-10T16:37:54Z", "author_association": "NONE", "body_html": "<p>My solution to this problem:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">maskedSoftmax</span>(<span class=\"pl-smi\">logits</span>, <span class=\"pl-smi\">mask</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">    Masked softmax over dim 1</span>\n<span class=\"pl-s\">    :param logits: (N, L)</span>\n<span class=\"pl-s\">    :param mask: (N, L)</span>\n<span class=\"pl-s\">    :return: probabilities (N, L)</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n    indices <span class=\"pl-k\">=</span> tf.where(mask)\n    values <span class=\"pl-k\">=</span> tf.gather_nd(logits, indices)\n    denseShape <span class=\"pl-k\">=</span> tf.cast(tf.shape(logits), tf.int64)\n    sparseResult <span class=\"pl-k\">=</span> tf.sparse_softmax(tf.SparseTensor(indices, values, denseShape))\n    result <span class=\"pl-k\">=</span> tf.scatter_nd(sparseResult.indices, sparseResult.values, sparseResult.dense_shape)\n    result.set_shape(logits.shape)\n    <span class=\"pl-k\">return</span> result</pre></div>\n<p>(Edit: My first proposal had problems with <code>None</code> in shape of logits)</p>", "body_text": "My solution to this problem:\ndef maskedSoftmax(logits, mask):\n    \"\"\"\n    Masked softmax over dim 1\n    :param logits: (N, L)\n    :param mask: (N, L)\n    :return: probabilities (N, L)\n    \"\"\"\n    indices = tf.where(mask)\n    values = tf.gather_nd(logits, indices)\n    denseShape = tf.cast(tf.shape(logits), tf.int64)\n    sparseResult = tf.sparse_softmax(tf.SparseTensor(indices, values, denseShape))\n    result = tf.scatter_nd(sparseResult.indices, sparseResult.values, sparseResult.dense_shape)\n    result.set_shape(logits.shape)\n    return result\n(Edit: My first proposal had problems with None in shape of logits)", "body": "My solution to this problem:\r\n\r\n```python\r\ndef maskedSoftmax(logits, mask):\r\n    \"\"\"\r\n    Masked softmax over dim 1\r\n    :param logits: (N, L)\r\n    :param mask: (N, L)\r\n    :return: probabilities (N, L)\r\n    \"\"\"\r\n    indices = tf.where(mask)\r\n    values = tf.gather_nd(logits, indices)\r\n    denseShape = tf.cast(tf.shape(logits), tf.int64)\r\n    sparseResult = tf.sparse_softmax(tf.SparseTensor(indices, values, denseShape))\r\n    result = tf.scatter_nd(sparseResult.indices, sparseResult.values, sparseResult.dense_shape)\r\n    result.set_shape(logits.shape)\r\n    return result\r\n```\r\n\r\n(Edit: My first proposal had problems with `None` in shape of logits)"}