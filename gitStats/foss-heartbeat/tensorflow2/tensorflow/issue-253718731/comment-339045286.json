{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/339045286", "html_url": "https://github.com/tensorflow/tensorflow/issues/12686#issuecomment-339045286", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12686", "id": 339045286, "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTA0NTI4Ng==", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-24T16:13:11Z", "updated_at": "2017-10-24T16:13:11Z", "author_association": "MEMBER", "body_html": "<p>Suharsh's suggestion is correct (create a new variable), but it's not because of Output (you can assign Outputs). Mul and Add are both classes, so when you call them, you're calling their constructors. See <a href=\"https://www.tensorflow.org/api_guides/cc/guide#operation_constructors\" rel=\"nofollow\">https://www.tensorflow.org/api_guides/cc/guide#operation_constructors</a>. So you're creating a Mul variable, then trying to assign an Add to it. You need to create a new Add variable instead.</p>\n<p>And if you're wondering, no, Mul and Add (and all the other generated op classes) are not all subclasses of the same base class. So you might be further wondering, how is it legal to copy Mul and Add objects into vector grad_outputs? We clearly don't have an overloaded Output constructor for every generated op. The answer is that the generated op classes that have a single Output use an implicit Output conversion operator (see <a href=\"http://en.cppreference.com/w/cpp/language/cast_operator\" rel=\"nofollow\">http://en.cppreference.com/w/cpp/language/cast_operator</a>).</p>\n<p>Also, definitely not a super noob question, no worries :)</p>", "body_text": "Suharsh's suggestion is correct (create a new variable), but it's not because of Output (you can assign Outputs). Mul and Add are both classes, so when you call them, you're calling their constructors. See https://www.tensorflow.org/api_guides/cc/guide#operation_constructors. So you're creating a Mul variable, then trying to assign an Add to it. You need to create a new Add variable instead.\nAnd if you're wondering, no, Mul and Add (and all the other generated op classes) are not all subclasses of the same base class. So you might be further wondering, how is it legal to copy Mul and Add objects into vector grad_outputs? We clearly don't have an overloaded Output constructor for every generated op. The answer is that the generated op classes that have a single Output use an implicit Output conversion operator (see http://en.cppreference.com/w/cpp/language/cast_operator).\nAlso, definitely not a super noob question, no worries :)", "body": "Suharsh's suggestion is correct (create a new variable), but it's not because of Output (you can assign Outputs). Mul and Add are both classes, so when you call them, you're calling their constructors. See https://www.tensorflow.org/api_guides/cc/guide#operation_constructors. So you're creating a Mul variable, then trying to assign an Add to it. You need to create a new Add variable instead.\r\n\r\nAnd if you're wondering, no, Mul and Add (and all the other generated op classes) are not all subclasses of the same base class. So you might be further wondering, how is it legal to copy Mul and Add objects into vector<Output> grad_outputs? We clearly don't have an overloaded Output constructor for every generated op. The answer is that the generated op classes that have a single Output use an implicit Output conversion operator (see http://en.cppreference.com/w/cpp/language/cast_operator).\r\n\r\nAlso, definitely not a super noob question, no worries :)"}