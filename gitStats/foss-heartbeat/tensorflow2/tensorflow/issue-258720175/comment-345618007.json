{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345618007", "html_url": "https://github.com/tensorflow/tensorflow/issues/13147#issuecomment-345618007", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13147", "id": 345618007, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTYxODAwNw==", "user": {"login": "materacer", "id": 32087307, "node_id": "MDQ6VXNlcjMyMDg3MzA3", "avatar_url": "https://avatars1.githubusercontent.com/u/32087307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/materacer", "html_url": "https://github.com/materacer", "followers_url": "https://api.github.com/users/materacer/followers", "following_url": "https://api.github.com/users/materacer/following{/other_user}", "gists_url": "https://api.github.com/users/materacer/gists{/gist_id}", "starred_url": "https://api.github.com/users/materacer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/materacer/subscriptions", "organizations_url": "https://api.github.com/users/materacer/orgs", "repos_url": "https://api.github.com/users/materacer/repos", "events_url": "https://api.github.com/users/materacer/events{/privacy}", "received_events_url": "https://api.github.com/users/materacer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-20T07:59:40Z", "updated_at": "2017-11-20T07:59:40Z", "author_association": "NONE", "body_html": "<p>Hi JulyJohn,</p>\n<p>The following lists sample code.<br>\nHope it help you or people need.</p>\n<p><em>Important</em> : Please not include any opencl library in header. It avoids Bazel dependency issue.<br>\nBesides, I fixed this issue via adding external class to package.</p>\n<ol>\n<li>Implement libMatConvFPGA.so library</li>\n</ol>\n<p>MatConvFPGA.h</p>\n<pre><code>\n#ifndef MATCONV_FPGA_H\n#define MATCONV_FPGA_H \n\nclass MatConvFPGA;\nclass MatConvFPGAInterface{\npublic:\n\tMatConvFPGAInterface();\n\tbool init_opencl(...);\n\tfloat* compute(...);\n\tvoid cleanup();\n\t~MatConvFPGAInterface();\nprivate:\n\tMatConvFPGA *_MatConvFPGA;\n}; \n#endif\n</code></pre>\n<p>MatConvFPGA.cpp</p>\n<pre><code>\n#include \"CL/opencl.h\"\n#include \"AOCLUtils/aocl_utils.h\"\n#include \"MatConvFPGA.h\"\n\nclass MatConvFPGA\n{\nprivate:\n\tcl_platform_id platform = NULL;\n\tunsigned num_devices = 0;\n\tscoped_array devices;\n\tcl_context context = NULL;\n\tcl_program program = NULL; \npublic:\n\tbool init_opencl(....)   { .... }     //Implement OpenCL Initialization\n        bool compute(...)  { ... }      //Implement function\n\tvoid cleanup() {...}         //Clean OpenCL object\n};\n\nMatConvFPGAInterface::MatConvFPGAInterface() {\n\t_MatConvFPGA = new MatConvFPGA();\n} \n\nMatConvFPGAInterface::~MatConvFPGAInterface() {\n\tcleanup();\n\tdelete _MatConvFPGA;\n} \nfloat* MatConvFPGAInterface::compute(...) {\n\tfloat *Outputs = NULL;\n\n\tbool result = _MatConvFPGA-&gt;compute(...); \n\tif (!result)\n\t\tOutputs = NULL;\n\treturn Outputs;\n} \nbool MatConvFPGAInterface::init_opencl(...) {\n\tinit_opencl_success = _MatConvFPGA-&gt;init_opencl(....);\n\treturn init_opencl_success;\n} \nvoid MatConvFPGAInterface::cleanup() {\n\tinit_opencl_success = false;\n\t_MatConvFPGA-&gt;cleanup();\n} \n</code></pre>\n<p>Compile</p>\n<pre><code>\n g++ -std=c++11 -shared MatConvFPGA.cpp -o bin/libMatConvFPGA.so -fPIC -I/home/mater/intelFPGA/17.0/hld/host/include ../common/src/AOCLUtils/opencl.cpp ../common/src/AOCLUtils/options.cpp -L/home/mater/intelFPGA_pro/17.0/hld/board/a10_ref/linux64/lib -L/home/mater/intelFPGA_pro/17.0/hld/host/linux64/lib -Wl,--no-as-needed -lalteracl -laltera_a10_ref_mmd -lelf -I../common/inc -O2 -D_GLIBCXX_USE_CXX11_ABI=0\n</code></pre>\n<ol start=\"2\">\n<li>Add libMatConvFPGA.so into TensorFlow source code folder</li>\n</ol>\n<ul>\n<li>Create new sub folder \u201cmatconv_fpga\u201d</li>\n<li>Copy MatConvFPGA.h &amp; libMatConvFPGA.so into \u201cmatconv_fpga\u201d folder</li>\n<li>Create new file as \u201cBUILD\u201d for TensorFlow in \u201cmatconv_fpga\u201d folder and edit as the following</li>\n</ul>\n<pre><code>\ncc_library(\n\tname=\"MatConvFPGA\",\n\tsrcs = [\"libMatConvFPGA.so\"],\n\thdrs = glob([\"*.h\"]),\n\tvisibility=[\"//visibility:public\"],\n)\n</code></pre>\n<ol start=\"3\">\n<li>Select ops which you would like to modify and add dependency  into  XXX/BUILD<br>\n&lt;--- Example (tensorflow/core/kernels/BUILD)</li>\n</ol>\n<pre><code>\ntf_kernel_library(\n    name = \"conv_ops\",\n....\n  deps = [..] + [\"//matconv_fpga:MatConvFPGA\"],\n</code></pre>\n<p>Then, you can include MatConvFPGA object in your ops<br>\n&lt;--- Example (tensorflow/core/kernels/conv_ops.cc)</p>\n<ol start=\"4\">\n<li>Build TensorFlow via Bazel<br>\n$ bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package<br>\n$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg</li>\n</ol>", "body_text": "Hi JulyJohn,\nThe following lists sample code.\nHope it help you or people need.\nImportant : Please not include any opencl library in header. It avoids Bazel dependency issue.\nBesides, I fixed this issue via adding external class to package.\n\nImplement libMatConvFPGA.so library\n\nMatConvFPGA.h\n\n#ifndef MATCONV_FPGA_H\n#define MATCONV_FPGA_H \n\nclass MatConvFPGA;\nclass MatConvFPGAInterface{\npublic:\n\tMatConvFPGAInterface();\n\tbool init_opencl(...);\n\tfloat* compute(...);\n\tvoid cleanup();\n\t~MatConvFPGAInterface();\nprivate:\n\tMatConvFPGA *_MatConvFPGA;\n}; \n#endif\n\nMatConvFPGA.cpp\n\n#include \"CL/opencl.h\"\n#include \"AOCLUtils/aocl_utils.h\"\n#include \"MatConvFPGA.h\"\n\nclass MatConvFPGA\n{\nprivate:\n\tcl_platform_id platform = NULL;\n\tunsigned num_devices = 0;\n\tscoped_array devices;\n\tcl_context context = NULL;\n\tcl_program program = NULL; \npublic:\n\tbool init_opencl(....)   { .... }     //Implement OpenCL Initialization\n        bool compute(...)  { ... }      //Implement function\n\tvoid cleanup() {...}         //Clean OpenCL object\n};\n\nMatConvFPGAInterface::MatConvFPGAInterface() {\n\t_MatConvFPGA = new MatConvFPGA();\n} \n\nMatConvFPGAInterface::~MatConvFPGAInterface() {\n\tcleanup();\n\tdelete _MatConvFPGA;\n} \nfloat* MatConvFPGAInterface::compute(...) {\n\tfloat *Outputs = NULL;\n\n\tbool result = _MatConvFPGA->compute(...); \n\tif (!result)\n\t\tOutputs = NULL;\n\treturn Outputs;\n} \nbool MatConvFPGAInterface::init_opencl(...) {\n\tinit_opencl_success = _MatConvFPGA->init_opencl(....);\n\treturn init_opencl_success;\n} \nvoid MatConvFPGAInterface::cleanup() {\n\tinit_opencl_success = false;\n\t_MatConvFPGA->cleanup();\n} \n\nCompile\n\n g++ -std=c++11 -shared MatConvFPGA.cpp -o bin/libMatConvFPGA.so -fPIC -I/home/mater/intelFPGA/17.0/hld/host/include ../common/src/AOCLUtils/opencl.cpp ../common/src/AOCLUtils/options.cpp -L/home/mater/intelFPGA_pro/17.0/hld/board/a10_ref/linux64/lib -L/home/mater/intelFPGA_pro/17.0/hld/host/linux64/lib -Wl,--no-as-needed -lalteracl -laltera_a10_ref_mmd -lelf -I../common/inc -O2 -D_GLIBCXX_USE_CXX11_ABI=0\n\n\nAdd libMatConvFPGA.so into TensorFlow source code folder\n\n\nCreate new sub folder \u201cmatconv_fpga\u201d\nCopy MatConvFPGA.h & libMatConvFPGA.so into \u201cmatconv_fpga\u201d folder\nCreate new file as \u201cBUILD\u201d for TensorFlow in \u201cmatconv_fpga\u201d folder and edit as the following\n\n\ncc_library(\n\tname=\"MatConvFPGA\",\n\tsrcs = [\"libMatConvFPGA.so\"],\n\thdrs = glob([\"*.h\"]),\n\tvisibility=[\"//visibility:public\"],\n)\n\n\nSelect ops which you would like to modify and add dependency  into  XXX/BUILD\n<--- Example (tensorflow/core/kernels/BUILD)\n\n\ntf_kernel_library(\n    name = \"conv_ops\",\n....\n  deps = [..] + [\"//matconv_fpga:MatConvFPGA\"],\n\nThen, you can include MatConvFPGA object in your ops\n<--- Example (tensorflow/core/kernels/conv_ops.cc)\n\nBuild TensorFlow via Bazel\n$ bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package\n$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg", "body": "Hi JulyJohn,\r\n\r\nThe following lists sample code.\r\nHope it help you or people need.\r\n\r\n*Important* : Please not include any opencl library in header. It avoids Bazel dependency issue.\r\nBesides, I fixed this issue via adding external class to package.\r\n\r\n\r\n1. Implement libMatConvFPGA.so library\r\n\r\nMatConvFPGA.h\r\n<pre><code>\r\n#ifndef MATCONV_FPGA_H\r\n#define MATCONV_FPGA_H \r\n\r\nclass MatConvFPGA;\r\nclass MatConvFPGAInterface{\r\npublic:\r\n\tMatConvFPGAInterface();\r\n\tbool init_opencl(...);\r\n\tfloat* compute(...);\r\n\tvoid cleanup();\r\n\t~MatConvFPGAInterface();\r\nprivate:\r\n\tMatConvFPGA *_MatConvFPGA;\r\n}; \r\n#endif\r\n</code></pre>\r\n\r\nMatConvFPGA.cpp\r\n<pre><code>\r\n#include \"CL/opencl.h\"\r\n#include \"AOCLUtils/aocl_utils.h\"\r\n#include \"MatConvFPGA.h\"\r\n\r\nclass MatConvFPGA\r\n{\r\nprivate:\r\n\tcl_platform_id platform = NULL;\r\n\tunsigned num_devices = 0;\r\n\tscoped_array<cl_device_id> devices;\r\n\tcl_context context = NULL;\r\n\tcl_program program = NULL; \r\npublic:\r\n\tbool init_opencl(....)   { .... }     //Implement OpenCL Initialization\r\n        bool compute(...)  { ... }      //Implement function\r\n\tvoid cleanup() {...}         //Clean OpenCL object\r\n};\r\n\r\nMatConvFPGAInterface::MatConvFPGAInterface() {\r\n\t_MatConvFPGA = new MatConvFPGA();\r\n} \r\n\r\nMatConvFPGAInterface::~MatConvFPGAInterface() {\r\n\tcleanup();\r\n\tdelete _MatConvFPGA;\r\n} \r\nfloat* MatConvFPGAInterface::compute(...) {\r\n\tfloat *Outputs = NULL;\r\n\r\n\tbool result = _MatConvFPGA->compute(...); \r\n\tif (!result)\r\n\t\tOutputs = NULL;\r\n\treturn Outputs;\r\n} \r\nbool MatConvFPGAInterface::init_opencl(...) {\r\n\tinit_opencl_success = _MatConvFPGA->init_opencl(....);\r\n\treturn init_opencl_success;\r\n} \r\nvoid MatConvFPGAInterface::cleanup() {\r\n\tinit_opencl_success = false;\r\n\t_MatConvFPGA->cleanup();\r\n} \r\n</code></pre>\r\n\r\nCompile\r\n\r\n<pre><code>\r\n g++ -std=c++11 -shared MatConvFPGA.cpp -o bin/libMatConvFPGA.so -fPIC -I/home/mater/intelFPGA/17.0/hld/host/include ../common/src/AOCLUtils/opencl.cpp ../common/src/AOCLUtils/options.cpp -L/home/mater/intelFPGA_pro/17.0/hld/board/a10_ref/linux64/lib -L/home/mater/intelFPGA_pro/17.0/hld/host/linux64/lib -Wl,--no-as-needed -lalteracl -laltera_a10_ref_mmd -lelf -I../common/inc -O2 -D_GLIBCXX_USE_CXX11_ABI=0\r\n</code></pre>\r\n\r\n2. Add libMatConvFPGA.so into TensorFlow source code folder\r\n* Create new sub folder \u201cmatconv_fpga\u201d\r\n* Copy MatConvFPGA.h & libMatConvFPGA.so into \u201cmatconv_fpga\u201d folder\r\n* Create new file as \u201cBUILD\u201d for TensorFlow in \u201cmatconv_fpga\u201d folder and edit as the following\r\n\r\n<pre><code>\r\ncc_library(\r\n\tname=\"MatConvFPGA\",\r\n\tsrcs = [\"libMatConvFPGA.so\"],\r\n\thdrs = glob([\"*.h\"]),\r\n\tvisibility=[\"//visibility:public\"],\r\n)\r\n</code></pre>\r\n\r\n3. Select ops which you would like to modify and add dependency  into  XXX/BUILD  \r\n<--- Example (tensorflow/core/kernels/BUILD)\r\n \r\n<pre><code>\r\ntf_kernel_library(\r\n    name = \"conv_ops\",\r\n....\r\n  deps = [..] + [\"//matconv_fpga:MatConvFPGA\"],\r\n</code></pre>\r\n\r\nThen, you can include MatConvFPGA object in your ops\r\n<--- Example (tensorflow/core/kernels/conv_ops.cc)\r\n\r\n4. Build TensorFlow via Bazel\r\n$ bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package \r\n$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\r\n"}