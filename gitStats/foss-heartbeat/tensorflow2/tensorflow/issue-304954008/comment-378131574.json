{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/378131574", "html_url": "https://github.com/tensorflow/tensorflow/issues/17694#issuecomment-378131574", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17694", "id": 378131574, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODEzMTU3NA==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-03T05:21:13Z", "updated_at": "2018-04-03T05:21:13Z", "author_association": "MEMBER", "body_html": "<p>In the code snippet provided, <code>tf.map_fn</code> is being called on <code>input_tensor</code>, which wasn't defined in the snippet. But given that it's being fed into the <code>sess.run()</code>, I'm guessing it corresponds to a placeholder tensor, which, I think, means the original code was more like this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">identity_map</span>(<span class=\"pl-smi\">input</span>):\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">input</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Using tf.Session() and sess.run(). This runs without errors.</span>\n<span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>abc<span class=\"pl-pds\">'</span></span>]\ninput_tensor <span class=\"pl-k\">=</span> tf.placeholder(tf.string)\nx <span class=\"pl-k\">=</span> tf.map_fn(identity_map, input_tensor, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.string)\nx <span class=\"pl-k\">=</span> tf.stack(x)\nx <span class=\"pl-k\">=</span> tf.reshape(<span class=\"pl-v\">tensor</span><span class=\"pl-k\">=</span>x, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  result <span class=\"pl-k\">=</span> sess.run(x, {input_tensor: <span class=\"pl-c1\">input</span>})\n  <span class=\"pl-c1\">print</span>(result)</pre></div>\n<p>Writing the test the same way works as well:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">SimpleTest</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">test</span>.<span class=\"pl-e\">TestCase</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">testMapString</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-c1\">input</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>abc<span class=\"pl-pds\">'</span></span>]\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">self</span>.test_session():\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Run map function</span>\n      input_tensor <span class=\"pl-k\">=</span> tf.placeholder(tf.string)\n      x <span class=\"pl-k\">=</span> tf.map_fn(identity_map, input_tensor, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.string)\n      x <span class=\"pl-k\">=</span> tf.stack(x)\n      x <span class=\"pl-k\">=</span> tf.reshape(<span class=\"pl-v\">tensor</span><span class=\"pl-k\">=</span>x, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n      result <span class=\"pl-k\">=</span> x.eval(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{input_tensor:<span class=\"pl-c1\">input</span>})\n      <span class=\"pl-c1\">print</span>(result)</pre></div>\n<p>The behavior you see in the test should be consistent with the behavior you see outside the test. Please do let me know if I'm mistaken. That said, coming to why you get an error with:</p>\n<div class=\"highlight highlight-source-python\"><pre>tf.map_fn(identity_map, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>456<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.string)</pre></div>\n<p>but don't get the error with:</p>\n<div class=\"highlight highlight-source-python\"><pre>tf.map_fn(identity_map, tf.convert_to_tensor([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>456<span class=\"pl-pds\">'</span></span>]), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.string)</pre></div>\n<p>or</p>\n<div class=\"highlight highlight-source-python\"><pre>tf.map_fn(identity_map, np.array([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>456<span class=\"pl-pds\">'</span></span>]), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.string)</pre></div>\n<p>This is because in the latter two cases, the <code>elems</code> parameter to <a href=\"https://www.tensorflow.org/api_docs/python/tf/map_fn\" rel=\"nofollow\"><code>tf.map_fn</code></a> is a single tensor (a vector of 2 elements). While the the first case, <code>elems</code> is being interpreted as a sequence of tensors (instead of a single tensor). <code>tf.map_fn</code> requires that <code>elems</code> be either a single <code>Tensor</code> with more than 1 dimension, or <code>elems</code> be a sequence of <code>Tensor</code>s, each with more than 1 dimension.</p>\n<p>In the erroneous case, <code>elems</code> is a sequence of scalar (0-dimensional) tensors, which is where the error is coming from.</p>\n<p>The error message could certainly be improved, and I'll try to do that. But hopefully the response makes sense?</p>", "body_text": "In the code snippet provided, tf.map_fn is being called on input_tensor, which wasn't defined in the snippet. But given that it's being fed into the sess.run(), I'm guessing it corresponds to a placeholder tensor, which, I think, means the original code was more like this:\nimport tensorflow as tf\n\ndef identity_map(input):\n  return input\n\n# Using tf.Session() and sess.run(). This runs without errors.\ninput = ['123', 'abc']\ninput_tensor = tf.placeholder(tf.string)\nx = tf.map_fn(identity_map, input_tensor, dtype=tf.string)\nx = tf.stack(x)\nx = tf.reshape(tensor=x, shape=[-1])\n\nwith tf.Session() as sess:\n  result = sess.run(x, {input_tensor: input})\n  print(result)\nWriting the test the same way works as well:\nclass SimpleTest(tf.test.TestCase):\n  def testMapString(self):\n    input = ['123', 'abc']\n    with self.test_session():\n      # Run map function\n      input_tensor = tf.placeholder(tf.string)\n      x = tf.map_fn(identity_map, input_tensor, dtype=tf.string)\n      x = tf.stack(x)\n      x = tf.reshape(tensor=x, shape=[-1])\n      result = x.eval(feed_dict={input_tensor:input})\n      print(result)\nThe behavior you see in the test should be consistent with the behavior you see outside the test. Please do let me know if I'm mistaken. That said, coming to why you get an error with:\ntf.map_fn(identity_map, ['123', '456'], dtype=tf.string)\nbut don't get the error with:\ntf.map_fn(identity_map, tf.convert_to_tensor(['123', '456']), dtype=tf.string)\nor\ntf.map_fn(identity_map, np.array(['123', '456']), dtype=tf.string)\nThis is because in the latter two cases, the elems parameter to tf.map_fn is a single tensor (a vector of 2 elements). While the the first case, elems is being interpreted as a sequence of tensors (instead of a single tensor). tf.map_fn requires that elems be either a single Tensor with more than 1 dimension, or elems be a sequence of Tensors, each with more than 1 dimension.\nIn the erroneous case, elems is a sequence of scalar (0-dimensional) tensors, which is where the error is coming from.\nThe error message could certainly be improved, and I'll try to do that. But hopefully the response makes sense?", "body": "In the code snippet provided, `tf.map_fn` is being called on `input_tensor`, which wasn't defined in the snippet. But given that it's being fed into the `sess.run()`, I'm guessing it corresponds to a placeholder tensor, which, I think, means the original code was more like this:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\ndef identity_map(input):\r\n  return input\r\n\r\n# Using tf.Session() and sess.run(). This runs without errors.\r\ninput = ['123', 'abc']\r\ninput_tensor = tf.placeholder(tf.string)\r\nx = tf.map_fn(identity_map, input_tensor, dtype=tf.string)\r\nx = tf.stack(x)\r\nx = tf.reshape(tensor=x, shape=[-1])\r\n\r\nwith tf.Session() as sess:\r\n  result = sess.run(x, {input_tensor: input})\r\n  print(result)\r\n```\r\n\r\nWriting the test the same way works as well:\r\n\r\n```python\r\nclass SimpleTest(tf.test.TestCase):\r\n  def testMapString(self):\r\n    input = ['123', 'abc']\r\n    with self.test_session():\r\n      # Run map function\r\n      input_tensor = tf.placeholder(tf.string)\r\n      x = tf.map_fn(identity_map, input_tensor, dtype=tf.string)\r\n      x = tf.stack(x)\r\n      x = tf.reshape(tensor=x, shape=[-1])\r\n      result = x.eval(feed_dict={input_tensor:input})\r\n      print(result)\r\n```\r\n\r\nThe behavior you see in the test should be consistent with the behavior you see outside the test. Please do let me know if I'm mistaken. That said, coming to why you get an error with:\r\n\r\n```python\r\ntf.map_fn(identity_map, ['123', '456'], dtype=tf.string)\r\n```\r\n\r\nbut don't get the error with:\r\n\r\n```python\r\ntf.map_fn(identity_map, tf.convert_to_tensor(['123', '456']), dtype=tf.string)\r\n```\r\n\r\nor\r\n\r\n```python\r\ntf.map_fn(identity_map, np.array(['123', '456']), dtype=tf.string)\r\n```\r\n\r\nThis is because in the latter two cases, the `elems` parameter to [`tf.map_fn`](https://www.tensorflow.org/api_docs/python/tf/map_fn) is a single tensor (a vector of 2 elements). While the the first case, `elems` is being interpreted as a sequence of tensors (instead of a single tensor). `tf.map_fn` requires that `elems` be either a single `Tensor` with more than 1 dimension, or `elems` be a sequence of `Tensor`s, each with more than 1 dimension.\r\n\r\nIn the erroneous case, `elems` is a sequence of scalar (0-dimensional) tensors, which is where the error is coming from.\r\n\r\nThe error message could certainly be improved, and I'll try to do that. But hopefully the response makes sense?"}