{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/394086708", "html_url": "https://github.com/tensorflow/tensorflow/issues/1924#issuecomment-394086708", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1924", "id": 394086708, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDA4NjcwOA==", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-02T13:12:22Z", "updated_at": "2018-06-02T13:12:22Z", "author_association": "NONE", "body_html": "<p>A workaround I've done is that I loaded the image with an external library (stb_image) and then fed the data to the <code>cv::Mat</code> like so:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>opencv2/opencv.hpp<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">define</span> <span class=\"pl-en\">STB_IMAGE_IMPLEMENTATION</span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>stb_image.h<span class=\"pl-pds\">&gt;</span></span>\n\nstd::map&lt;<span class=\"pl-k\">int</span>, <span class=\"pl-k\">int</span>&gt; channels_map = {\n\t{<span class=\"pl-c1\">1</span>, CV_8UC1},\n\t{<span class=\"pl-c1\">3</span>, CV_8UC3},\n\t{<span class=\"pl-c1\">4</span>, CV_8UC4}\n};\n\n<span class=\"pl-k\">int</span> width, height, channels;\nstd::<span class=\"pl-c1\">uint8_t</span>* image_data = stbi_load(file_name.c_str(), &amp;width, &amp;height, &amp;channels, <span class=\"pl-c1\">0</span>);\ncv::Mat <span class=\"pl-en\">img</span>(height, width, channels_map[channels], image_data); <span class=\"pl-c\"><span class=\"pl-c\">//</span> You must free the image_data yourself</span></pre></div>\n<p>Hope that helps.</p>", "body_text": "A workaround I've done is that I loaded the image with an external library (stb_image) and then fed the data to the cv::Mat like so:\n#include <opencv2/opencv.hpp>\n#define STB_IMAGE_IMPLEMENTATION\n#include <stb_image.h>\n\nstd::map<int, int> channels_map = {\n\t{1, CV_8UC1},\n\t{3, CV_8UC3},\n\t{4, CV_8UC4}\n};\n\nint width, height, channels;\nstd::uint8_t* image_data = stbi_load(file_name.c_str(), &width, &height, &channels, 0);\ncv::Mat img(height, width, channels_map[channels], image_data); // You must free the image_data yourself\nHope that helps.", "body": "A workaround I've done is that I loaded the image with an external library (stb_image) and then fed the data to the `cv::Mat` like so:\r\n\r\n```c++\r\n#include <opencv2/opencv.hpp>\r\n#define STB_IMAGE_IMPLEMENTATION\r\n#include <stb_image.h>\r\n\r\nstd::map<int, int> channels_map = {\r\n\t{1, CV_8UC1},\r\n\t{3, CV_8UC3},\r\n\t{4, CV_8UC4}\r\n};\r\n\r\nint width, height, channels;\r\nstd::uint8_t* image_data = stbi_load(file_name.c_str(), &width, &height, &channels, 0);\r\ncv::Mat img(height, width, channels_map[channels], image_data); // You must free the image_data yourself\r\n```\r\n\r\nHope that helps."}