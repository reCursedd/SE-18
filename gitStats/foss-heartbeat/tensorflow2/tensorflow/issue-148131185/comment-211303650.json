{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/211303650", "html_url": "https://github.com/tensorflow/tensorflow/issues/1924#issuecomment-211303650", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1924", "id": 211303650, "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTMwMzY1MA==", "user": {"login": "beniz", "id": 3530657, "node_id": "MDQ6VXNlcjM1MzA2NTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3530657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beniz", "html_url": "https://github.com/beniz", "followers_url": "https://api.github.com/users/beniz/followers", "following_url": "https://api.github.com/users/beniz/following{/other_user}", "gists_url": "https://api.github.com/users/beniz/gists{/gist_id}", "starred_url": "https://api.github.com/users/beniz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beniz/subscriptions", "organizations_url": "https://api.github.com/users/beniz/orgs", "repos_url": "https://api.github.com/users/beniz/repos", "events_url": "https://api.github.com/users/beniz/events{/privacy}", "received_events_url": "https://api.github.com/users/beniz/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-18T09:50:30Z", "updated_at": "2016-04-18T09:55:53Z", "author_association": "NONE", "body_html": "<p>It is much more than just <code>jpeg</code>. I've been hit by this problem for weeks now, and investigating a bit further, I have a snippet of C++ code below that helps reproducing the weird behavior:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>iostream<span class=\"pl-pds\">&gt;</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>#include \"tensorflow/core/public/session.h\"                                                                   </span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/platform/env.h<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>#include \"tensorflow/core/framework/tensor.h\"                                                                 </span>\n\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>opencv2/opencv.hpp<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>opencv2/imgproc/imgproc.hpp<span class=\"pl-pds\">&gt;</span></span>\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">int</span> argc, <span class=\"pl-k\">char</span>** argv)\n{\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Loading the file path provided in the arg into a mat objects                                               </span>\n  std::string path = argv[<span class=\"pl-c1\">1</span>];\n  cv::Mat readImage = <span class=\"pl-c1\">cv::imread</span>(path);\n  std::cerr &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>read image size<span class=\"pl-pds\">\"</span></span> &lt;&lt; readImage.<span class=\"pl-c1\">size</span>() &lt;&lt; std::endl;\n}</pre></div>\n<p>Compile and execute</p>\n<pre><code>./opencv_tensor grace_hopper.jpg\n</code></pre>\n<p>yields</p>\n<pre><code>read image size[517 x 606]\n</code></pre>\n<p>Now uncomment either <code>tensorflow/core/public/session.h</code> or <code>tensorflow/core/framework/tensor.h</code>, compile and execute:</p>\n<pre><code>read image size[0 x 0]\n</code></pre>\n<p>A few notes:</p>\n<ul>\n<li>this uses OpenCV 2.x</li>\n<li>including OpenCV headers before TF headers doesn't change anything</li>\n<li>this also occurs with some but not all <code>png</code> images</li>\n<li>I've tried to trace the problem back, and one of my current leading hypotheses is related to the <code>allocator.h</code> header of TF, as I see a possibility that the <code>Allocate</code> functions may be interfering with OpenCV allocator. EDIT: this may be ruled out by the fact that inverting the header import does not change this behavior.</li>\n</ul>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=229914\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/keveman\">@keveman</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>  I'm open to any lead I could help testing, typically if you know how I could investigate the <code>dlopen</code> lead you are mentioning, I'm your jack of all trade on this one!</p>", "body_text": "It is much more than just jpeg. I've been hit by this problem for weeks now, and investigating a bit further, I have a snippet of C++ code below that helps reproducing the weird behavior:\n#include <iostream>\n//#include \"tensorflow/core/public/session.h\"                                                                   \n#include \"tensorflow/core/platform/env.h\"\n//#include \"tensorflow/core/framework/tensor.h\"                                                                 \n\n#include <opencv2/opencv.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n\nint main(int argc, char** argv)\n{\n  // Loading the file path provided in the arg into a mat objects                                               \n  std::string path = argv[1];\n  cv::Mat readImage = cv::imread(path);\n  std::cerr << \"read image size\" << readImage.size() << std::endl;\n}\nCompile and execute\n./opencv_tensor grace_hopper.jpg\n\nyields\nread image size[517 x 606]\n\nNow uncomment either tensorflow/core/public/session.h or tensorflow/core/framework/tensor.h, compile and execute:\nread image size[0 x 0]\n\nA few notes:\n\nthis uses OpenCV 2.x\nincluding OpenCV headers before TF headers doesn't change anything\nthis also occurs with some but not all png images\nI've tried to trace the problem back, and one of my current leading hypotheses is related to the allocator.h header of TF, as I see a possibility that the Allocate functions may be interfering with OpenCV allocator. EDIT: this may be ruled out by the fact that inverting the header import does not change this behavior.\n\n@keveman @mrry  I'm open to any lead I could help testing, typically if you know how I could investigate the dlopen lead you are mentioning, I'm your jack of all trade on this one!", "body": "It is much more than just `jpeg`. I've been hit by this problem for weeks now, and investigating a bit further, I have a snippet of C++ code below that helps reproducing the weird behavior:\n\n``` C++\n#include <iostream>\n//#include \"tensorflow/core/public/session.h\"                                                                   \n#include \"tensorflow/core/platform/env.h\"\n//#include \"tensorflow/core/framework/tensor.h\"                                                                 \n\n#include <opencv2/opencv.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n\nint main(int argc, char** argv)\n{\n  // Loading the file path provided in the arg into a mat objects                                               \n  std::string path = argv[1];\n  cv::Mat readImage = cv::imread(path);\n  std::cerr << \"read image size\" << readImage.size() << std::endl;\n}\n```\n\nCompile and execute\n\n```\n./opencv_tensor grace_hopper.jpg\n```\n\nyields\n\n```\nread image size[517 x 606]\n```\n\nNow uncomment either `tensorflow/core/public/session.h` or `tensorflow/core/framework/tensor.h`, compile and execute:\n\n```\nread image size[0 x 0]\n```\n\nA few notes:\n- this uses OpenCV 2.x\n- including OpenCV headers before TF headers doesn't change anything\n- this also occurs with some but not all `png` images\n- I've tried to trace the problem back, and one of my current leading hypotheses is related to the `allocator.h` header of TF, as I see a possibility that the `Allocate` functions may be interfering with OpenCV allocator. EDIT: this may be ruled out by the fact that inverting the header import does not change this behavior.\n\n@keveman @mrry  I'm open to any lead I could help testing, typically if you know how I could investigate the `dlopen` lead you are mentioning, I'm your jack of all trade on this one!\n"}