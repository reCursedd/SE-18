{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8559", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8559/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8559/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8559/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8559", "id": 215481632, "node_id": "MDU6SXNzdWUyMTU0ODE2MzI=", "number": 8559, "title": "forward pass projection", "user": {"login": "Alexivia", "id": 23476569, "node_id": "MDQ6VXNlcjIzNDc2NTY5", "avatar_url": "https://avatars1.githubusercontent.com/u/23476569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexivia", "html_url": "https://github.com/Alexivia", "followers_url": "https://api.github.com/users/Alexivia/followers", "following_url": "https://api.github.com/users/Alexivia/following{/other_user}", "gists_url": "https://api.github.com/users/Alexivia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexivia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexivia/subscriptions", "organizations_url": "https://api.github.com/users/Alexivia/orgs", "repos_url": "https://api.github.com/users/Alexivia/repos", "events_url": "https://api.github.com/users/Alexivia/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexivia/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-20T16:42:18Z", "updated_at": "2017-03-24T16:58:08Z", "closed_at": "2017-03-24T16:58:06Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>Is there any way to define a layer that for forward-pass calculates its output by projecting the weight values into a different value range, but for the back-propagation uses the real weight values? i.e., as an example from the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/mnist.py\">mnist.py</a> file, if for the hidden layer 1 forward pass we could have <code>hidden1 = tf.nn.relu(tf.matmul(images, projection_func(weights)) + biases)</code>, but for the gradient calculation during back-propagation the weights were updated without <code>projection_func()</code>.</p>\n<p>This would be useful to implement BNNs, to apply functions such as the ones mentioned by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=21156038\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Jony101K\">@Jony101K</a> <a href=\"https://github.com/itayhubara/BinaryNet/issues/9#issuecomment-243705218\" data-hovercard-type=\"issue\" data-hovercard-url=\"/itayhubara/BinaryNet/issues/9/hovercard\">here</a>.</p>\n<p>Thanks.<br>\nAlexandre</p>", "body_text": "Hi,\nIs there any way to define a layer that for forward-pass calculates its output by projecting the weight values into a different value range, but for the back-propagation uses the real weight values? i.e., as an example from the mnist.py file, if for the hidden layer 1 forward pass we could have hidden1 = tf.nn.relu(tf.matmul(images, projection_func(weights)) + biases), but for the gradient calculation during back-propagation the weights were updated without projection_func().\nThis would be useful to implement BNNs, to apply functions such as the ones mentioned by @Jony101K here.\nThanks.\nAlexandre", "body": "Hi,\r\n\r\nIs there any way to define a layer that for forward-pass calculates its output by projecting the weight values into a different value range, but for the back-propagation uses the real weight values? i.e., as an example from the [mnist.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/mnist/mnist.py) file, if for the hidden layer 1 forward pass we could have `hidden1 = tf.nn.relu(tf.matmul(images, projection_func(weights)) + biases)`, but for the gradient calculation during back-propagation the weights were updated without `projection_func()`.\r\n\r\nThis would be useful to implement BNNs, to apply functions such as the ones mentioned by @Jony101K [here](https://github.com/itayhubara/BinaryNet/issues/9#issuecomment-243705218).\r\n\r\nThanks.\r\nAlexandre"}