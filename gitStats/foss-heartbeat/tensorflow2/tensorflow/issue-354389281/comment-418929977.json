{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/418929977", "html_url": "https://github.com/tensorflow/tensorflow/issues/21901#issuecomment-418929977", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21901", "id": 418929977, "node_id": "MDEyOklzc3VlQ29tbWVudDQxODkyOTk3Nw==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-06T01:05:46Z", "updated_at": "2018-09-06T02:33:05Z", "author_association": "MEMBER", "body_html": "<p>Actually, it seems OK if broadcasted shape can be divide exactly by input shape:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/7ec8114697a78271277c1b81707f53057d047901/tensorflow/core/kernels/broadcast_to_op.h#L37-L49\">tensorflow/tensorflow/core/kernels/broadcast_to_op.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 37 to 49\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/7ec8114697a78271277c1b81707f53057d047901\">7ec8114</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L37\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"37\"></td>\n          <td id=\"LC37\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (reshape[i] != broadcast[i]) {                                         \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L38\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"38\"></td>\n          <td id=\"LC38\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">OP_REQUIRES</span>(ctx,                                                        \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L39\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"39\"></td>\n          <td id=\"LC39\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 ((reshape[i] != <span class=\"pl-c1\">0</span>) &amp;&amp; (broadcast[i] % reshape[i] == <span class=\"pl-c1\">0</span>)),    \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L40\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"40\"></td>\n          <td id=\"LC40\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 <span class=\"pl-c1\">errors::InvalidArgument</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>invalid shape to broadcast from <span class=\"pl-pds\">\"</span></span>, \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L41\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"41\"></td>\n          <td id=\"LC41\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                                         input_shape.<span class=\"pl-c1\">DebugString</span>(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> to <span class=\"pl-pds\">\"</span></span>,  \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L42\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"42\"></td>\n          <td id=\"LC42\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                                         output_shape.<span class=\"pl-c1\">DebugString</span>()));       \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L43\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"43\"></td>\n          <td id=\"LC43\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     broadcast[i] = broadcast[i] / reshape[i];                               \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L44\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"44\"></td>\n          <td id=\"LC44\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } <span class=\"pl-k\">else</span> {                                                                  \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L45\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"45\"></td>\n          <td id=\"LC45\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     broadcast[i] = <span class=\"pl-c1\">1</span>;                                                       \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L46\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"46\"></td>\n          <td id=\"LC46\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   }                                                                         \\ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L47\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"47\"></td>\n          <td id=\"LC47\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L48\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"48\"></td>\n          <td id=\"LC48\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L49\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"49\"></td>\n          <td id=\"LC49\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (output_shape.<span class=\"pl-c1\">num_elements</span>() == <span class=\"pl-c1\">0</span>) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>Test script:</p>\n<div class=\"highlight highlight-source-python\"><pre>In [<span class=\"pl-c1\">1</span>]: <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nIn [<span class=\"pl-c1\">2</span>]: a <span class=\"pl-k\">=</span> tf.constant([[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>]])\n\nIn [<span class=\"pl-c1\">3</span>]: b <span class=\"pl-k\">=</span> tf.broadcast_to(a, [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">3</span>])\n\nIn [<span class=\"pl-c1\">4</span>]: sess <span class=\"pl-k\">=</span> tf.Session()\n\nIn [<span class=\"pl-c1\">5</span>]: sess.run(b)\nOut[<span class=\"pl-c1\">5</span>]:\narray([[[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>],\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>],\n        [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>],\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>]],\n\n       [[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>],\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>],\n        [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>],\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>]],\n\n       [[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>],\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>],\n        [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>],\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>]],\n\n       [[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>],\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>],\n        [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>],\n        [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>]]], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>int32)</pre></div>", "body_text": "Actually, it seems OK if broadcasted shape can be divide exactly by input shape:\n\n  \n    \n      tensorflow/tensorflow/core/kernels/broadcast_to_op.h\n    \n    \n        Lines 37 to 49\n      in\n      7ec8114\n    \n    \n    \n    \n\n        \n          \n             if (reshape[i] != broadcast[i]) {                                         \\ \n        \n\n        \n          \n               OP_REQUIRES(ctx,                                                        \\ \n        \n\n        \n          \n                           ((reshape[i] != 0) && (broadcast[i] % reshape[i] == 0)),    \\ \n        \n\n        \n          \n                           errors::InvalidArgument(\"invalid shape to broadcast from \", \\ \n        \n\n        \n          \n                                                   input_shape.DebugString(), \" to \",  \\ \n        \n\n        \n          \n                                                   output_shape.DebugString()));       \\ \n        \n\n        \n          \n               broadcast[i] = broadcast[i] / reshape[i];                               \\ \n        \n\n        \n          \n             } else {                                                                  \\ \n        \n\n        \n          \n               broadcast[i] = 1;                                                       \\ \n        \n\n        \n          \n             }                                                                         \\ \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n             if (output_shape.num_elements() == 0) { \n        \n    \n  \n\n\nTest script:\nIn [1]: import tensorflow as tf\n\nIn [2]: a = tf.constant([[1, 2, 3], [4, 5, 6]])\n\nIn [3]: b = tf.broadcast_to(a, [4, 4, 3])\n\nIn [4]: sess = tf.Session()\n\nIn [5]: sess.run(b)\nOut[5]:\narray([[[1, 2, 3],\n        [4, 5, 6],\n        [1, 2, 3],\n        [4, 5, 6]],\n\n       [[1, 2, 3],\n        [4, 5, 6],\n        [1, 2, 3],\n        [4, 5, 6]],\n\n       [[1, 2, 3],\n        [4, 5, 6],\n        [1, 2, 3],\n        [4, 5, 6]],\n\n       [[1, 2, 3],\n        [4, 5, 6],\n        [1, 2, 3],\n        [4, 5, 6]]], dtype=int32)", "body": "Actually, it seems OK if broadcasted shape can be divide exactly by input shape:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/7ec8114697a78271277c1b81707f53057d047901/tensorflow/core/kernels/broadcast_to_op.h#L37-L49\r\n\r\nTest script:\r\n\r\n```python\r\nIn [1]: import tensorflow as tf\r\n\r\nIn [2]: a = tf.constant([[1, 2, 3], [4, 5, 6]])\r\n\r\nIn [3]: b = tf.broadcast_to(a, [4, 4, 3])\r\n\r\nIn [4]: sess = tf.Session()\r\n\r\nIn [5]: sess.run(b)\r\nOut[5]:\r\narray([[[1, 2, 3],\r\n        [4, 5, 6],\r\n        [1, 2, 3],\r\n        [4, 5, 6]],\r\n\r\n       [[1, 2, 3],\r\n        [4, 5, 6],\r\n        [1, 2, 3],\r\n        [4, 5, 6]],\r\n\r\n       [[1, 2, 3],\r\n        [4, 5, 6],\r\n        [1, 2, 3],\r\n        [4, 5, 6]],\r\n\r\n       [[1, 2, 3],\r\n        [4, 5, 6],\r\n        [1, 2, 3],\r\n        [4, 5, 6]]], dtype=int32)\r\n```"}