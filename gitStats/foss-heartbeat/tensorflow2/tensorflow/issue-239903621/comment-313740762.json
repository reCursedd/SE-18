{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/313740762", "html_url": "https://github.com/tensorflow/tensorflow/issues/11196#issuecomment-313740762", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11196", "id": 313740762, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzc0MDc2Mg==", "user": {"login": "jongsae", "id": 13041074, "node_id": "MDQ6VXNlcjEzMDQxMDc0", "avatar_url": "https://avatars0.githubusercontent.com/u/13041074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jongsae", "html_url": "https://github.com/jongsae", "followers_url": "https://api.github.com/users/jongsae/followers", "following_url": "https://api.github.com/users/jongsae/following{/other_user}", "gists_url": "https://api.github.com/users/jongsae/gists{/gist_id}", "starred_url": "https://api.github.com/users/jongsae/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jongsae/subscriptions", "organizations_url": "https://api.github.com/users/jongsae/orgs", "repos_url": "https://api.github.com/users/jongsae/repos", "events_url": "https://api.github.com/users/jongsae/events{/privacy}", "received_events_url": "https://api.github.com/users/jongsae/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-07T17:13:38Z", "updated_at": "2017-07-07T17:19:22Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15676913\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/poxvoculi\">@poxvoculi</a> Thanks for your answer! Following your suggestion, I will consider re-implementing the existing TF application such that the parameter server and workers sit in the same process and they use the intra-process communication. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1284535\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/saeta\">@saeta</a>, I am looking forward to hearing regarding your experience in deploying data parallel programs in a single process.</p>\n<p>In a short-term perspective, I agree with this approach. However, in a long run,  as I argued earlier in my second comment in this issue, I believe it would be useful for many use-cases that TF incorporates the inter-process DtoD communication to support multi-process data parallel TF programs. An alternative approach would be to modify TF wrappers (e.g., Estimator or Experiment) so that they support single-process distributed TF in case where the configured parameter servers and workers (e.g., via tf.train.ClusterSpec or tf.estimators.run_config) are placed in the same local machine, which I think, is a better (or cleaner) approach.</p>\n<p>I wondered what TF folks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2613663\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/byronyi\">@byronyi</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=577277\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinwicke\">@martinwicke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=29663194\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cy89\">@cy89</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15676913\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/poxvoculi\">@poxvoculi</a> think about it?</p>", "body_text": "@poxvoculi Thanks for your answer! Following your suggestion, I will consider re-implementing the existing TF application such that the parameter server and workers sit in the same process and they use the intra-process communication. @saeta, I am looking forward to hearing regarding your experience in deploying data parallel programs in a single process.\nIn a short-term perspective, I agree with this approach. However, in a long run,  as I argued earlier in my second comment in this issue, I believe it would be useful for many use-cases that TF incorporates the inter-process DtoD communication to support multi-process data parallel TF programs. An alternative approach would be to modify TF wrappers (e.g., Estimator or Experiment) so that they support single-process distributed TF in case where the configured parameter servers and workers (e.g., via tf.train.ClusterSpec or tf.estimators.run_config) are placed in the same local machine, which I think, is a better (or cleaner) approach.\nI wondered what TF folks @byronyi @martinwicke @cy89 @poxvoculi think about it?", "body": "@poxvoculi Thanks for your answer! Following your suggestion, I will consider re-implementing the existing TF application such that the parameter server and workers sit in the same process and they use the intra-process communication. @saeta, I am looking forward to hearing regarding your experience in deploying data parallel programs in a single process. \r\n\r\nIn a short-term perspective, I agree with this approach. However, in a long run,  as I argued earlier in my second comment in this issue, I believe it would be useful for many use-cases that TF incorporates the inter-process DtoD communication to support multi-process data parallel TF programs. An alternative approach would be to modify TF wrappers (e.g., Estimator or Experiment) so that they support single-process distributed TF in case where the configured parameter servers and workers (e.g., via tf.train.ClusterSpec or tf.estimators.run_config) are placed in the same local machine, which I think, is a better (or cleaner) approach. \r\n\r\nI wondered what TF folks @byronyi @martinwicke @cy89 @poxvoculi think about it?"}