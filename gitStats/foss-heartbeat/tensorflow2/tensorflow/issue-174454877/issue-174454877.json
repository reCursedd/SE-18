{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4146", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4146/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4146/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4146/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4146", "id": 174454877, "node_id": "MDU6SXNzdWUxNzQ0NTQ4Nzc=", "number": 4146, "title": "Provide generic android JNI interface", "user": {"login": "llhe", "id": 192829, "node_id": "MDQ6VXNlcjE5MjgyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/192829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llhe", "html_url": "https://github.com/llhe", "followers_url": "https://api.github.com/users/llhe/followers", "following_url": "https://api.github.com/users/llhe/following{/other_user}", "gists_url": "https://api.github.com/users/llhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/llhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llhe/subscriptions", "organizations_url": "https://api.github.com/users/llhe/orgs", "repos_url": "https://api.github.com/users/llhe/repos", "events_url": "https://api.github.com/users/llhe/events{/privacy}", "received_events_url": "https://api.github.com/users/llhe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, {"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2016-09-01T07:28:23Z", "updated_at": "2016-09-21T19:45:53Z", "closed_at": "2016-09-21T19:45:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In the Android example, the developer need to write some customized C++ code for the JNI call, this extra effort is not needed especially in the prototyping step.</p>\n<p>Could we provide a generic JNI interface (just like generic inference serving, with input/output as a map of tensors, using serialized protobuf bytes or customized serialization), then the developer will not need to write and BUILD C++ code anymore.</p>\n<p>Of course, the developers are free to optimize the code by writing the customized JNI calls. This feature will definitely boost the development process.</p>", "body_text": "In the Android example, the developer need to write some customized C++ code for the JNI call, this extra effort is not needed especially in the prototyping step.\nCould we provide a generic JNI interface (just like generic inference serving, with input/output as a map of tensors, using serialized protobuf bytes or customized serialization), then the developer will not need to write and BUILD C++ code anymore.\nOf course, the developers are free to optimize the code by writing the customized JNI calls. This feature will definitely boost the development process.", "body": "In the Android example, the developer need to write some customized C++ code for the JNI call, this extra effort is not needed especially in the prototyping step.\n\nCould we provide a generic JNI interface (just like generic inference serving, with input/output as a map of tensors, using serialized protobuf bytes or customized serialization), then the developer will not need to write and BUILD C++ code anymore.\n\nOf course, the developers are free to optimize the code by writing the customized JNI calls. This feature will definitely boost the development process.\n"}