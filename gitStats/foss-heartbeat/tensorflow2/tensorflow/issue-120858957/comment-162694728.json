{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/162694728", "html_url": "https://github.com/tensorflow/tensorflow/issues/434#issuecomment-162694728", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/434", "id": 162694728, "node_id": "MDEyOklzc3VlQ29tbWVudDE2MjY5NDcyOA==", "user": {"login": "alexatknit", "id": 15474222, "node_id": "MDQ6VXNlcjE1NDc0MjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/15474222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexatknit", "html_url": "https://github.com/alexatknit", "followers_url": "https://api.github.com/users/alexatknit/followers", "following_url": "https://api.github.com/users/alexatknit/following{/other_user}", "gists_url": "https://api.github.com/users/alexatknit/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexatknit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexatknit/subscriptions", "organizations_url": "https://api.github.com/users/alexatknit/orgs", "repos_url": "https://api.github.com/users/alexatknit/repos", "events_url": "https://api.github.com/users/alexatknit/events{/privacy}", "received_events_url": "https://api.github.com/users/alexatknit/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-07T22:49:06Z", "updated_at": "2015-12-07T22:49:06Z", "author_association": "NONE", "body_html": "<p>try this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">identity_initializer</span>():\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_initializer</span>(<span class=\"pl-smi\">shape</span>, <span class=\"pl-smi\">dtype</span><span class=\"pl-k\">=</span>tf.float32):\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(shape) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">1</span>:\n            <span class=\"pl-k\">return</span> tf.constant_op.constant(<span class=\"pl-c1\">0</span>., <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>shape)\n        <span class=\"pl-k\">elif</span> <span class=\"pl-c1\">len</span>(shape) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">and</span> shape[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">==</span> shape[<span class=\"pl-c1\">1</span>]:\n            <span class=\"pl-k\">return</span> tf.constant_op.constant(np.identity(shape[<span class=\"pl-c1\">0</span>], dtype))\n        <span class=\"pl-k\">elif</span> <span class=\"pl-c1\">len</span>(shape) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">4</span> <span class=\"pl-k\">and</span> shape[<span class=\"pl-c1\">2</span>] <span class=\"pl-k\">==</span> shape[<span class=\"pl-c1\">3</span>]:\n            array <span class=\"pl-k\">=</span> np.zeros(shape, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">float</span>)\n            cx, cy <span class=\"pl-k\">=</span> shape[<span class=\"pl-c1\">0</span>]<span class=\"pl-k\">/</span><span class=\"pl-c1\">2</span>, shape[<span class=\"pl-c1\">1</span>]<span class=\"pl-k\">/</span><span class=\"pl-c1\">2</span>\n            <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(shape[<span class=\"pl-c1\">2</span>]):\n                array[cx, cy, i, i] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\n            <span class=\"pl-k\">return</span> tf.constant_op.constant(array, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype)\n        <span class=\"pl-k\">else</span>:\n            <span class=\"pl-k\">raise</span>\n    <span class=\"pl-k\">return</span> _initializer</pre></div>", "body_text": "try this:\ndef identity_initializer():\n    def _initializer(shape, dtype=tf.float32):\n        if len(shape) == 1:\n            return tf.constant_op.constant(0., dtype=dtype, shape=shape)\n        elif len(shape) == 2 and shape[0] == shape[1]:\n            return tf.constant_op.constant(np.identity(shape[0], dtype))\n        elif len(shape) == 4 and shape[2] == shape[3]:\n            array = np.zeros(shape, dtype=float)\n            cx, cy = shape[0]/2, shape[1]/2\n            for i in range(shape[2]):\n                array[cx, cy, i, i] = 1\n            return tf.constant_op.constant(array, dtype=dtype)\n        else:\n            raise\n    return _initializer", "body": "try this:\n\n``` python\ndef identity_initializer():\n    def _initializer(shape, dtype=tf.float32):\n        if len(shape) == 1:\n            return tf.constant_op.constant(0., dtype=dtype, shape=shape)\n        elif len(shape) == 2 and shape[0] == shape[1]:\n            return tf.constant_op.constant(np.identity(shape[0], dtype))\n        elif len(shape) == 4 and shape[2] == shape[3]:\n            array = np.zeros(shape, dtype=float)\n            cx, cy = shape[0]/2, shape[1]/2\n            for i in range(shape[2]):\n                array[cx, cy, i, i] = 1\n            return tf.constant_op.constant(array, dtype=dtype)\n        else:\n            raise\n    return _initializer\n```\n"}