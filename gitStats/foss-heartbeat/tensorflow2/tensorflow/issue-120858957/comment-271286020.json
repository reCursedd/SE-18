{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271286020", "html_url": "https://github.com/tensorflow/tensorflow/issues/434#issuecomment-271286020", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/434", "id": 271286020, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTI4NjAyMA==", "user": {"login": "carlthome", "id": 1595907, "node_id": "MDQ6VXNlcjE1OTU5MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1595907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlthome", "html_url": "https://github.com/carlthome", "followers_url": "https://api.github.com/users/carlthome/followers", "following_url": "https://api.github.com/users/carlthome/following{/other_user}", "gists_url": "https://api.github.com/users/carlthome/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlthome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlthome/subscriptions", "organizations_url": "https://api.github.com/users/carlthome/orgs", "repos_url": "https://api.github.com/users/carlthome/repos", "events_url": "https://api.github.com/users/carlthome/events{/privacy}", "received_events_url": "https://api.github.com/users/carlthome/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-09T13:38:20Z", "updated_at": "2017-01-09T13:38:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a>, thanks!</p>\n<p>Matter of taste, I guess, but it's cleaner to keep with the <code>tf.get_variable</code> / <code>tf.variable_initializer</code> API instead of mixing in <code>tf.Variable</code>, especially for variable scoping and sharing variables.</p>\n<p>Passing a <code>tf.constant</code> to <code>tf.get_variable</code>, or making a custom initializer just for this, isn't very clean IMO. E.g. I like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>my_scope<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.identity_initializer()):\n  x <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-c1\">...</span>)\n  y <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-c1\">...</span>)\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> ...and so on...</span></pre></div>", "body_text": "@yaroslavvb, thanks!\nMatter of taste, I guess, but it's cleaner to keep with the tf.get_variable / tf.variable_initializer API instead of mixing in tf.Variable, especially for variable scoping and sharing variables.\nPassing a tf.constant to tf.get_variable, or making a custom initializer just for this, isn't very clean IMO. E.g. I like:\nwith tf.variable_scope('my_scope', initializer=tf.identity_initializer()):\n  x = tf.get_variable(...)\n  y = tf.get_variable(...)\n  # ...and so on...", "body": "@yaroslavvb, thanks! \r\n\r\nMatter of taste, I guess, but it's cleaner to keep with the `tf.get_variable` / `tf.variable_initializer` API instead of mixing in `tf.Variable`, especially for variable scoping and sharing variables. \r\n\r\nPassing a `tf.constant` to `tf.get_variable`, or making a custom initializer just for this, isn't very clean IMO. E.g. I like:\r\n\r\n```py\r\nwith tf.variable_scope('my_scope', initializer=tf.identity_initializer()):\r\n  x = tf.get_variable(...)\r\n  y = tf.get_variable(...)\r\n  # ...and so on...\r\n```\r\n"}