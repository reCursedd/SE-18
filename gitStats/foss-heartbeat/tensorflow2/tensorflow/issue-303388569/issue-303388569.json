{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17544", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17544/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17544/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17544/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/17544", "id": 303388569, "node_id": "MDExOlB1bGxSZXF1ZXN0MTczNjY4NjMw", "number": 17544, "title": "Register half in some ops which support all floating point types", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-08T08:00:03Z", "updated_at": "2018-04-03T12:20:52Z", "closed_at": "2018-04-03T12:20:52Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17544", "html_url": "https://github.com/tensorflow/tensorflow/pull/17544", "diff_url": "https://github.com/tensorflow/tensorflow/pull/17544.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/17544.patch"}, "body_html": "<p>Add 'half' to the acceptable data types for the depthwise convolution gradients, and some pooling ops.</p>\n<p>I've just added 'half', although it seems that these ops should be able to operate on any real value.  in general there isn't a lot of consistency in the op constraints...</p>\n<p>Conv2D doesn't accept double, but DepthwiseConv2D does. BiadAdd works on any numbertype, but would typically follow a Convolution. Conv3D supports bfloat16, but its back prop versions do not.</p>\n<p>Perhaps there is a bigger job to be done in the future, to replace all of the explicit types with classes of types (real, int, etc).</p>", "body_text": "Add 'half' to the acceptable data types for the depthwise convolution gradients, and some pooling ops.\nI've just added 'half', although it seems that these ops should be able to operate on any real value.  in general there isn't a lot of consistency in the op constraints...\nConv2D doesn't accept double, but DepthwiseConv2D does. BiadAdd works on any numbertype, but would typically follow a Convolution. Conv3D supports bfloat16, but its back prop versions do not.\nPerhaps there is a bigger job to be done in the future, to replace all of the explicit types with classes of types (real, int, etc).", "body": "Add 'half' to the acceptable data types for the depthwise convolution gradients, and some pooling ops.\r\n\r\nI've just added 'half', although it seems that these ops should be able to operate on any real value.  in general there isn't a lot of consistency in the op constraints...\r\n\r\nConv2D doesn't accept double, but DepthwiseConv2D does. BiadAdd works on any numbertype, but would typically follow a Convolution. Conv3D supports bfloat16, but its back prop versions do not.\r\n\r\nPerhaps there is a bigger job to be done in the future, to replace all of the explicit types with classes of types (real, int, etc).\r\n"}