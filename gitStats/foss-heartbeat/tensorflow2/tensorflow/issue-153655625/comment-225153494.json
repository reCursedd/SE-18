{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/225153494", "html_url": "https://github.com/tensorflow/tensorflow/issues/2271#issuecomment-225153494", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2271", "id": 225153494, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTE1MzQ5NA==", "user": {"login": "ivankreso", "id": 2056432, "node_id": "MDQ6VXNlcjIwNTY0MzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankreso", "html_url": "https://github.com/ivankreso", "followers_url": "https://api.github.com/users/ivankreso/followers", "following_url": "https://api.github.com/users/ivankreso/following{/other_user}", "gists_url": "https://api.github.com/users/ivankreso/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankreso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankreso/subscriptions", "organizations_url": "https://api.github.com/users/ivankreso/orgs", "repos_url": "https://api.github.com/users/ivankreso/repos", "events_url": "https://api.github.com/users/ivankreso/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankreso/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-10T10:57:33Z", "updated_at": "2016-06-14T15:56:29Z", "author_association": "NONE", "body_html": "<p>This is the graph that shows a drop in page faults after I clear all cached memory.<br>\nI don't have an idea why would the number of memory page faults decrease after the cache is cleared.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/849130e3a41b2c7588d369b7fb1d4bad6c814311/687474703a2f2f692e696d6775722e636f6d2f526169766158712e706e67\"><img src=\"https://camo.githubusercontent.com/849130e3a41b2c7588d369b7fb1d4bad6c814311/687474703a2f2f692e696d6775722e636f6d2f526169766158712e706e67\" alt=\"Image\" data-canonical-src=\"http://i.imgur.com/RaivaXq.png\" style=\"max-width:100%;\"></a></p>\n<p>I forgot to mention that I am using tf.train.batch for data fetching, defined like this:</p>\n<pre><code>def _read_and_decode(filename_queue):\n  reader = tf.TFRecordReader()\n  _, serialized_example = reader.read(filename_queue)\n  features = tf.parse_single_example(\n      serialized_example,\n      features={\n          'height': tf.FixedLenFeature([], tf.int64),\n          'width': tf.FixedLenFeature([], tf.int64),\n          'depth': tf.FixedLenFeature([], tf.int64),\n          'num_labels': tf.FixedLenFeature([], tf.int64),\n          'img_name': tf.FixedLenFeature([], tf.string),\n          'rgb': tf.FixedLenFeature([], tf.string),\n          'label_weights': tf.FixedLenFeature([], tf.string),\n          'labels': tf.FixedLenFeature([], tf.string),\n      })\n\n  labels = tf.to_int32(tf.decode_raw(features['labels'], tf.int8, name='decode_labels'))\n  image = tf.decode_raw(features['rgb'], tf.float32, name='decode_image')\n  weights = tf.decode_raw(features['label_weights'], tf.float32, name='decode_weights')\n  num_labels = features['num_labels']\n  img_name = features['img_name']\n\n  image = tf.reshape(image, shape=[FLAGS.img_height, FLAGS.img_width, FLAGS.img_depth])\n  num_pixels = FLAGS.img_height * FLAGS.img_width\n  labels = tf.reshape(labels, shape=[num_pixels])\n  weights = tf.reshape(weights, shape=[num_pixels])\n\n  return image, labels, weights, num_labels, img_name\n\ndef inputs(dataset, shuffle=True, num_epochs=None):\n  with tf.name_scope('input'), tf.device('/cpu:0'):\n    filename_queue = tf.train.string_input_producer(dataset.get_filenames(),\n        num_epochs=num_epochs, shuffle=shuffle, capacity=dataset.num_examples())\n\n    image, labels, weights, num_labels, img_name = _read_and_decode(filename_queue)\n\n    image, labels, weights, num_labels, img_name = tf.train.batch(\n        [image, labels, weights, num_labels, img_name], batch_size=FLAGS.batch_size, num_threads=2,\n        capacity=64)\n    return image, labels, weights, num_labels, img_name\n</code></pre>", "body_text": "This is the graph that shows a drop in page faults after I clear all cached memory.\nI don't have an idea why would the number of memory page faults decrease after the cache is cleared.\n\nI forgot to mention that I am using tf.train.batch for data fetching, defined like this:\ndef _read_and_decode(filename_queue):\n  reader = tf.TFRecordReader()\n  _, serialized_example = reader.read(filename_queue)\n  features = tf.parse_single_example(\n      serialized_example,\n      features={\n          'height': tf.FixedLenFeature([], tf.int64),\n          'width': tf.FixedLenFeature([], tf.int64),\n          'depth': tf.FixedLenFeature([], tf.int64),\n          'num_labels': tf.FixedLenFeature([], tf.int64),\n          'img_name': tf.FixedLenFeature([], tf.string),\n          'rgb': tf.FixedLenFeature([], tf.string),\n          'label_weights': tf.FixedLenFeature([], tf.string),\n          'labels': tf.FixedLenFeature([], tf.string),\n      })\n\n  labels = tf.to_int32(tf.decode_raw(features['labels'], tf.int8, name='decode_labels'))\n  image = tf.decode_raw(features['rgb'], tf.float32, name='decode_image')\n  weights = tf.decode_raw(features['label_weights'], tf.float32, name='decode_weights')\n  num_labels = features['num_labels']\n  img_name = features['img_name']\n\n  image = tf.reshape(image, shape=[FLAGS.img_height, FLAGS.img_width, FLAGS.img_depth])\n  num_pixels = FLAGS.img_height * FLAGS.img_width\n  labels = tf.reshape(labels, shape=[num_pixels])\n  weights = tf.reshape(weights, shape=[num_pixels])\n\n  return image, labels, weights, num_labels, img_name\n\ndef inputs(dataset, shuffle=True, num_epochs=None):\n  with tf.name_scope('input'), tf.device('/cpu:0'):\n    filename_queue = tf.train.string_input_producer(dataset.get_filenames(),\n        num_epochs=num_epochs, shuffle=shuffle, capacity=dataset.num_examples())\n\n    image, labels, weights, num_labels, img_name = _read_and_decode(filename_queue)\n\n    image, labels, weights, num_labels, img_name = tf.train.batch(\n        [image, labels, weights, num_labels, img_name], batch_size=FLAGS.batch_size, num_threads=2,\n        capacity=64)\n    return image, labels, weights, num_labels, img_name", "body": "This is the graph that shows a drop in page faults after I clear all cached memory.\nI don't have an idea why would the number of memory page faults decrease after the cache is cleared.\n\n![Image](http://i.imgur.com/RaivaXq.png)\n\nI forgot to mention that I am using tf.train.batch for data fetching, defined like this:\n\n```\ndef _read_and_decode(filename_queue):\n  reader = tf.TFRecordReader()\n  _, serialized_example = reader.read(filename_queue)\n  features = tf.parse_single_example(\n      serialized_example,\n      features={\n          'height': tf.FixedLenFeature([], tf.int64),\n          'width': tf.FixedLenFeature([], tf.int64),\n          'depth': tf.FixedLenFeature([], tf.int64),\n          'num_labels': tf.FixedLenFeature([], tf.int64),\n          'img_name': tf.FixedLenFeature([], tf.string),\n          'rgb': tf.FixedLenFeature([], tf.string),\n          'label_weights': tf.FixedLenFeature([], tf.string),\n          'labels': tf.FixedLenFeature([], tf.string),\n      })\n\n  labels = tf.to_int32(tf.decode_raw(features['labels'], tf.int8, name='decode_labels'))\n  image = tf.decode_raw(features['rgb'], tf.float32, name='decode_image')\n  weights = tf.decode_raw(features['label_weights'], tf.float32, name='decode_weights')\n  num_labels = features['num_labels']\n  img_name = features['img_name']\n\n  image = tf.reshape(image, shape=[FLAGS.img_height, FLAGS.img_width, FLAGS.img_depth])\n  num_pixels = FLAGS.img_height * FLAGS.img_width\n  labels = tf.reshape(labels, shape=[num_pixels])\n  weights = tf.reshape(weights, shape=[num_pixels])\n\n  return image, labels, weights, num_labels, img_name\n\ndef inputs(dataset, shuffle=True, num_epochs=None):\n  with tf.name_scope('input'), tf.device('/cpu:0'):\n    filename_queue = tf.train.string_input_producer(dataset.get_filenames(),\n        num_epochs=num_epochs, shuffle=shuffle, capacity=dataset.num_examples())\n\n    image, labels, weights, num_labels, img_name = _read_and_decode(filename_queue)\n\n    image, labels, weights, num_labels, img_name = tf.train.batch(\n        [image, labels, weights, num_labels, img_name], batch_size=FLAGS.batch_size, num_threads=2,\n        capacity=64)\n    return image, labels, weights, num_labels, img_name\n```\n"}