{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17869", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17869/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17869/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17869/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17869", "id": 307054149, "node_id": "MDU6SXNzdWUzMDcwNTQxNDk=", "number": 17869, "title": "Unable to run inference on mobilenet", "user": {"login": "santoshchilkunda", "id": 24641339, "node_id": "MDQ6VXNlcjI0NjQxMzM5", "avatar_url": "https://avatars2.githubusercontent.com/u/24641339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/santoshchilkunda", "html_url": "https://github.com/santoshchilkunda", "followers_url": "https://api.github.com/users/santoshchilkunda/followers", "following_url": "https://api.github.com/users/santoshchilkunda/following{/other_user}", "gists_url": "https://api.github.com/users/santoshchilkunda/gists{/gist_id}", "starred_url": "https://api.github.com/users/santoshchilkunda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/santoshchilkunda/subscriptions", "organizations_url": "https://api.github.com/users/santoshchilkunda/orgs", "repos_url": "https://api.github.com/users/santoshchilkunda/repos", "events_url": "https://api.github.com/users/santoshchilkunda/events{/privacy}", "received_events_url": "https://api.github.com/users/santoshchilkunda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-03-20T21:59:03Z", "updated_at": "2018-03-22T22:08:27Z", "closed_at": "2018-03-22T22:08:25Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.1</li>\n<li><strong>Python version</strong>: 3.5.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I want to run mobilenet inference on one image. I have converted the JPEG image to binary. The binary file size is 602112 bytes [3 x 224 x 224 x sizeof(float32)]</p>\n<p>I downloaded the mobilenet model from:<br>\n<a href=\"https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.md\">https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.md</a></p>\n<p>And tried running inference on it as follows:</p>\n<h1>init</h1>\n<p>protobuf = 'mobilenet_v1_0.25_128_frozen.pb'<br>\nimg_fname = 'ILSVRC2012_val_00000001.bin'<br>\niname = 'prefix/input:0'<br>\noname = 'prefix/MobilenetV1/Predictions/Softmax:0'</p>\n<h1>read graph definition</h1>\n<p>gfile = tf.gfile.GFile(protobuf, \"rb\")<br>\ngraph_def = tf.GraphDef()<br>\ngraph_def.ParseFromString(gfile.read())<br>\n_ = tf.import_graph_def(graph_def, name='prefix')</p>\n<h1>load image</h1>\n<p>image_data = tf.gfile.GFile(img_fname,'rb').read()</p>\n<h1>run inference</h1>\n<p>with tf.Session() as sess:<br>\noutput_tensor = sess.graph.get_tensor_by_name(oname)<br>\noutput = sess.run(output_tensor, {iname:image_data})</p>\n<p>data_fname, _ = oname.split(':0')<br>\ndata_fname = data_fname.replace(\"/\", \".\") + \".bin\"<br>\noutput.tofile(data_fname)<br>\nprint(data_fname, 'saved')</p>\n<p>It doesn't seem to work. It's not crashing but printing a lot of numbers like:<br>\n\\x86Bo\\x13QB\\x05\\xf6\\x89B\\xeb\\x01qB\\x9bb\\x80B\\xe7\\xa7VBA\\xb3\\x80B\\xe3c\\x85Bs\\x03kB\\xd7\\xe5\\x7fBs;{B\\x8be\\x8eB[+jB/\\x08{B\\xff6RB\\x87\\xe3&amp;B\\x15\\x1f\\xb3A\\xc7\\xfdQB\\xf3\\xe6UB\\x0b\\xa8\\nB\\xab\\xc5GB\\xef\\x12JB'</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.4.1\nPython version: 3.5.4\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nI want to run mobilenet inference on one image. I have converted the JPEG image to binary. The binary file size is 602112 bytes [3 x 224 x 224 x sizeof(float32)]\nI downloaded the mobilenet model from:\nhttps://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.md\nAnd tried running inference on it as follows:\ninit\nprotobuf = 'mobilenet_v1_0.25_128_frozen.pb'\nimg_fname = 'ILSVRC2012_val_00000001.bin'\niname = 'prefix/input:0'\noname = 'prefix/MobilenetV1/Predictions/Softmax:0'\nread graph definition\ngfile = tf.gfile.GFile(protobuf, \"rb\")\ngraph_def = tf.GraphDef()\ngraph_def.ParseFromString(gfile.read())\n_ = tf.import_graph_def(graph_def, name='prefix')\nload image\nimage_data = tf.gfile.GFile(img_fname,'rb').read()\nrun inference\nwith tf.Session() as sess:\noutput_tensor = sess.graph.get_tensor_by_name(oname)\noutput = sess.run(output_tensor, {iname:image_data})\ndata_fname, _ = oname.split(':0')\ndata_fname = data_fname.replace(\"/\", \".\") + \".bin\"\noutput.tofile(data_fname)\nprint(data_fname, 'saved')\nIt doesn't seem to work. It's not crashing but printing a lot of numbers like:\n\\x86Bo\\x13QB\\x05\\xf6\\x89B\\xeb\\x01qB\\x9bb\\x80B\\xe7\\xa7VBA\\xb3\\x80B\\xe3c\\x85Bs\\x03kB\\xd7\\xe5\\x7fBs;{B\\x8be\\x8eB[+jB/\\x08{B\\xff6RB\\x87\\xe3&B\\x15\\x1f\\xb3A\\xc7\\xfdQB\\xf3\\xe6UB\\x0b\\xa8\\nB\\xab\\xc5GB\\xef\\x12JB'", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.4.1\r\n- **Python version**: 3.5.4\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nI want to run mobilenet inference on one image. I have converted the JPEG image to binary. The binary file size is 602112 bytes [3 x 224 x 224 x sizeof(float32)]\r\n\r\nI downloaded the mobilenet model from: \r\nhttps://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.md\r\n\r\nAnd tried running inference on it as follows:\r\n\r\n# init\r\nprotobuf = 'mobilenet_v1_0.25_128_frozen.pb'\r\nimg_fname = 'ILSVRC2012_val_00000001.bin'\r\niname = 'prefix/input:0'\r\noname = 'prefix/MobilenetV1/Predictions/Softmax:0'\r\n\r\n# read graph definition\r\ngfile = tf.gfile.GFile(protobuf, \"rb\")\r\ngraph_def = tf.GraphDef()\r\ngraph_def.ParseFromString(gfile.read())\r\n_ = tf.import_graph_def(graph_def, name='prefix')\r\n\r\n# load image\r\nimage_data = tf.gfile.GFile(img_fname,'rb').read()\r\n\r\n# run inference\r\nwith tf.Session() as sess:\r\n output_tensor = sess.graph.get_tensor_by_name(oname)\r\n output = sess.run(output_tensor, {iname:image_data})\r\n\r\n data_fname, _ = oname.split(':0')\r\n data_fname = data_fname.replace(\"/\", \".\") + \".bin\"\r\n output.tofile(data_fname)\r\n print(data_fname, 'saved')\r\n\r\nIt doesn't seem to work. It's not crashing but printing a lot of numbers like:\r\n\\x86Bo\\x13QB\\x05\\xf6\\x89B\\xeb\\x01qB\\x9bb\\x80B\\xe7\\xa7VBA\\xb3\\x80B\\xe3c\\x85Bs\\x03kB\\xd7\\xe5\\x7fBs;{B\\x8be\\x8eB[+jB/\\x08{B\\xff6RB\\x87\\xe3&B\\x15\\x1f\\xb3A\\xc7\\xfdQB\\xf3\\xe6UB\\x0b\\xa8\\nB\\xab\\xc5GB\\xef\\x12JB'"}