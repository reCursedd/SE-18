{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/265526975", "html_url": "https://github.com/tensorflow/tensorflow/issues/6166#issuecomment-265526975", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6166", "id": 265526975, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTUyNjk3NQ==", "user": {"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-07T18:17:14Z", "updated_at": "2016-12-07T23:19:34Z", "author_association": "MEMBER", "body_html": "<p>Several generalized targets exist currently (by generalized I basically mean not tensorflow/examples/android-specific). It just depends what your requirements are and the tools you want to use.</p>\n<p>You can build the TF library suitable for dropping into your app with the Android inference JNI bindings defined in tensorflow/contrib/android/BUILD using Bazel as so:</p>\n<pre><code>bazel build //tensorflow/contrib/android:libtensorflow_inference.so \\\n   --crosstool_top=//external:android/crosstool \\\n   --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \\\n   --cpu=armeabi-v7a\n</code></pre>\n<p>The Java src counterpart is found under tensorflow/contrib/android/java. See <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/android/src/org/tensorflow/demo/TensorFlowImageClassifier.java\">TensorFlowImageClassifier.java</a> for example using it.</p>\n<p>Otherwise, if you want to link TF into the rest of your native code, try tensorflow/core:android_tensorflow_lib (without inference bindings), or tensorflow/contrib/android: android_tensorflow_inference_jni (with inference bindings), which should give you a .a out.</p>\n<p>Additionally, we have a makefile-based build equivalent to android_tensorflow_inference_jni under tensorflow/contrib/makefile, and a gradle-wrapper using cmake/make that eliminates the need for bazel under tensorflow/android/cmake.</p>\n<p>edit: corrected libtensorflow_inference.so target name</p>", "body_text": "Several generalized targets exist currently (by generalized I basically mean not tensorflow/examples/android-specific). It just depends what your requirements are and the tools you want to use.\nYou can build the TF library suitable for dropping into your app with the Android inference JNI bindings defined in tensorflow/contrib/android/BUILD using Bazel as so:\nbazel build //tensorflow/contrib/android:libtensorflow_inference.so \\\n   --crosstool_top=//external:android/crosstool \\\n   --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \\\n   --cpu=armeabi-v7a\n\nThe Java src counterpart is found under tensorflow/contrib/android/java. See TensorFlowImageClassifier.java for example using it.\nOtherwise, if you want to link TF into the rest of your native code, try tensorflow/core:android_tensorflow_lib (without inference bindings), or tensorflow/contrib/android: android_tensorflow_inference_jni (with inference bindings), which should give you a .a out.\nAdditionally, we have a makefile-based build equivalent to android_tensorflow_inference_jni under tensorflow/contrib/makefile, and a gradle-wrapper using cmake/make that eliminates the need for bazel under tensorflow/android/cmake.\nedit: corrected libtensorflow_inference.so target name", "body": "Several generalized targets exist currently (by generalized I basically mean not tensorflow/examples/android-specific). It just depends what your requirements are and the tools you want to use.\r\n\r\nYou can build the TF library suitable for dropping into your app with the Android inference JNI bindings defined in tensorflow/contrib/android/BUILD using Bazel as so:\r\n```\r\nbazel build //tensorflow/contrib/android:libtensorflow_inference.so \\\r\n   --crosstool_top=//external:android/crosstool \\\r\n   --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \\\r\n   --cpu=armeabi-v7a\r\n```\r\n\r\nThe Java src counterpart is found under tensorflow/contrib/android/java. See [TensorFlowImageClassifier.java](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/android/src/org/tensorflow/demo/TensorFlowImageClassifier.java) for example using it.\r\n\r\nOtherwise, if you want to link TF into the rest of your native code, try tensorflow/core:android_tensorflow_lib (without inference bindings), or tensorflow/contrib/android: android_tensorflow_inference_jni (with inference bindings), which should give you a .a out.\r\n\r\nAdditionally, we have a makefile-based build equivalent to android_tensorflow_inference_jni under tensorflow/contrib/makefile, and a gradle-wrapper using cmake/make that eliminates the need for bazel under tensorflow/android/cmake.\r\n\r\nedit: corrected libtensorflow_inference.so target name"}