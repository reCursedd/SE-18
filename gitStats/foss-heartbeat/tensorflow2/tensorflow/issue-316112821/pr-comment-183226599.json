{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/183226599", "pull_request_review_id": 114190456, "id": 183226599, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyNjU5OQ==", "diff_hunk": "@@ -36,9 +36,22 @@\n    * @return a bundle containing the graph and associated session.\n    */\n   public static SavedModelBundle load(String exportDir, String... tags) {\n-    return load(exportDir, tags, null);\n+    return load(exportDir, tags, null, null);\n   }\n-\n+   \n+    /**\n+   * Load a saved model from an export directory. The model that is being loaded should be created\n+   * using the <a href=\"https://www.tensorflow.org/api_docs/python/tf/saved_model\">Saved Model\n+   * API</a>.\n+   *\n+   * @param exportDir the directory path containing a saved model.\n+   * @param tags the tags identifying the specific metagraphdef to load.\n+   * @return a bundle containing the graph and associated session.\n+   */\n+  public static SavedModelBundle load(String exportDir,byte[] runOptions, byte[] sessionOptions, String... tags) {", "path": "tensorflow/java/src/main/java/org/tensorflow/SavedModelBundle.java", "position": null, "original_position": 18, "commit_id": "f7a303f148e6b225110635d0298ee2f651968826", "original_commit_id": "f8a7579d35e93d31eca002f43633f41e47d3d15d", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "It appears that `sessionOptions` here is just the serialized `ConfigProto` message, not something equivalent to [`TF_SessionOptions`](https://github.com/tensorflow/tensorflow/blob/r1.7/tensorflow/c/c_api.h#L304) which has both a [`ConfigProto`](https://github.com/tensorflow/tensorflow/blob/r1.7/tensorflow/c/c_api.h#L322) and a [\"target\" address](https://github.com/tensorflow/tensorflow/blob/r1.7/tensorflow/c/c_api.h#L315)  associated with it.\r\n\r\nThese are a bunch of options, so I'm wondering that instead of having a single function that takes multiple arguments, would it make sense to use the builder pattern for this? So calling code would look something like so:\r\n\r\n```java\r\nSavedModelBundle model = SavedModelBundle.loader(\"/tmp/exportdir\")\r\n    .withConfig(configProto)\r\n    .withRunOptions(runOptions)\r\n    .addTag(\"serve\")\r\n    .load();\r\n```\r\n\r\nUsing something like:\r\n\r\n```java\r\npublic class SavedModelBundle {\r\n  public final class Loader {\r\n    public Loader withRunOptions(byte[] options) {\r\n      this.runOptions = options;\r\n      return this;\r\n    }\r\n    public Loader withSessionConfig(byte[] config) {\r\n     this.config = config;\r\n     return this;\r\n    }\r\n    public Loader addTag(String tag) ...\r\n\r\n    public SavedModelBundle load() { ... }\r\n\r\n    private Loader(String exportDir) ...\r\n    // etc\r\n \r\n   public static Loader loader(String exportDir) { return new Loader(exportDir);  }\r\n   ...\r\n}\r\n```\r\n\r\nThe private JNI function though could of course just be a flat function that takes all the arguments.\r\n\r\nThoughts?", "created_at": "2018-04-22T06:19:11Z", "updated_at": "2018-04-23T03:12:30Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18716#discussion_r183226599", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18716", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/183226599"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18716#discussion_r183226599"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18716"}}, "body_html": "<p>It appears that <code>sessionOptions</code> here is just the serialized <code>ConfigProto</code> message, not something equivalent to <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.7/tensorflow/c/c_api.h#L304\"><code>TF_SessionOptions</code></a> which has both a <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.7/tensorflow/c/c_api.h#L322\"><code>ConfigProto</code></a> and a <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.7/tensorflow/c/c_api.h#L315\">\"target\" address</a>  associated with it.</p>\n<p>These are a bunch of options, so I'm wondering that instead of having a single function that takes multiple arguments, would it make sense to use the builder pattern for this? So calling code would look something like so:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-smi\">SavedModelBundle</span> model <span class=\"pl-k\">=</span> <span class=\"pl-smi\">SavedModelBundle</span><span class=\"pl-k\">.</span>loader(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/tmp/exportdir<span class=\"pl-pds\">\"</span></span>)\n    .withConfig(configProto)\n    .withRunOptions(runOptions)\n    .addTag(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>serve<span class=\"pl-pds\">\"</span></span>)\n    .load();</pre></div>\n<p>Using something like:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">SavedModelBundle</span> {\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Loader</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Loader</span> <span class=\"pl-en\">withRunOptions</span>(<span class=\"pl-k\">byte</span>[] <span class=\"pl-v\">options</span>) {\n      <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>runOptions <span class=\"pl-k\">=</span> options;\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>;\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Loader</span> <span class=\"pl-en\">withSessionConfig</span>(<span class=\"pl-k\">byte</span>[] <span class=\"pl-v\">config</span>) {\n     <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>config <span class=\"pl-k\">=</span> config;\n     <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>;\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Loader</span> <span class=\"pl-en\">addTag</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-v\">tag</span>) ...\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">SavedModelBundle</span> <span class=\"pl-en\">load</span>() { <span class=\"pl-c1\">...</span> }\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-en\">Loader</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-v\">exportDir</span>) ...\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> etc</span>\n \n   <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Loader</span> <span class=\"pl-en\">loader</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-v\">exportDir</span>) { <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Loader</span>(exportDir);  }\n   <span class=\"pl-c1\">...</span>\n}</pre></div>\n<p>The private JNI function though could of course just be a flat function that takes all the arguments.</p>\n<p>Thoughts?</p>", "body_text": "It appears that sessionOptions here is just the serialized ConfigProto message, not something equivalent to TF_SessionOptions which has both a ConfigProto and a \"target\" address  associated with it.\nThese are a bunch of options, so I'm wondering that instead of having a single function that takes multiple arguments, would it make sense to use the builder pattern for this? So calling code would look something like so:\nSavedModelBundle model = SavedModelBundle.loader(\"/tmp/exportdir\")\n    .withConfig(configProto)\n    .withRunOptions(runOptions)\n    .addTag(\"serve\")\n    .load();\nUsing something like:\npublic class SavedModelBundle {\n  public final class Loader {\n    public Loader withRunOptions(byte[] options) {\n      this.runOptions = options;\n      return this;\n    }\n    public Loader withSessionConfig(byte[] config) {\n     this.config = config;\n     return this;\n    }\n    public Loader addTag(String tag) ...\n\n    public SavedModelBundle load() { ... }\n\n    private Loader(String exportDir) ...\n    // etc\n \n   public static Loader loader(String exportDir) { return new Loader(exportDir);  }\n   ...\n}\nThe private JNI function though could of course just be a flat function that takes all the arguments.\nThoughts?"}