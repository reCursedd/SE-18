{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/219707382", "html_url": "https://github.com/tensorflow/tensorflow/issues/2403#issuecomment-219707382", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2403", "id": 219707382, "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTcwNzM4Mg==", "user": {"login": "Remper", "id": 451747, "node_id": "MDQ6VXNlcjQ1MTc0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/451747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Remper", "html_url": "https://github.com/Remper", "followers_url": "https://api.github.com/users/Remper/followers", "following_url": "https://api.github.com/users/Remper/following{/other_user}", "gists_url": "https://api.github.com/users/Remper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Remper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Remper/subscriptions", "organizations_url": "https://api.github.com/users/Remper/orgs", "repos_url": "https://api.github.com/users/Remper/repos", "events_url": "https://api.github.com/users/Remper/events{/privacy}", "received_events_url": "https://api.github.com/users/Remper/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-17T12:49:56Z", "updated_at": "2016-05-17T12:50:04Z", "author_association": "NONE", "body_html": "<p><code>nan</code> can appear in many situations like, for example, division by zero.<br>\nI guess in your case <code>calculated_output</code> produces zero, therefore a subsequent log produces <code>nan</code>.</p>\n<p>To prevent this from happening you can, for example, clip the value like this:</p>\n<pre><code>clipped_output =  tf.clip_by_value(calculated_output, 1e-37, 1e+37)\n</code></pre>", "body_text": "nan can appear in many situations like, for example, division by zero.\nI guess in your case calculated_output produces zero, therefore a subsequent log produces nan.\nTo prevent this from happening you can, for example, clip the value like this:\nclipped_output =  tf.clip_by_value(calculated_output, 1e-37, 1e+37)", "body": "`nan` can appear in many situations like, for example, division by zero.\nI guess in your case `calculated_output` produces zero, therefore a subsequent log produces `nan`.\n\nTo prevent this from happening you can, for example, clip the value like this:\n\n```\nclipped_output =  tf.clip_by_value(calculated_output, 1e-37, 1e+37)\n```\n"}