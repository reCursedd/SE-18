{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/161836184", "pull_request_review_id": 89188963, "id": 161836184, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTgzNjE4NA==", "diff_hunk": "@@ -189,6 +189,45 @@ def _check_maybe(t):\n     raise ValueError(\n         \"Expected tensor (%s) to have known rank, but ndims == None.\" % t)\n \n+def _check_static_batch_beam_maybe(shape, batch_size, beam_width):\n+  \"\"\"Raises an exception if dimensions are known statically and can not be\n+  reshaped to [batch_size, beam_size, -1].\n+  \"\"\"\n+  reshaped_shape = tensor_shape.TensorShape([batch_size, beam_width, None])\n+  if (batch_size is not None and shape[0].value is not None\n+      and (shape[0] != batch_size * beam_width\n+           or (shape.ndims >= 2 and shape[1].value is not None\n+               and (shape[0] != batch_size or shape[1] != beam_width)))):\n+    raise ValueError(\"TensorArray reordering expects elements to be \"\n+                     \"reshapable to %s which is incompatible with the \"\n+                     \"current shape %s. Consider setting \"\n+                     \"reorder_tensor_arrays to False to disable TensorArray \"\n+                     \"reordering during the beam search.\"\n+                     % (reshaped_shape, shape))\n+\n+def _check_batch_beam(t, batch_size, beam_width):\n+  \"\"\"Returns an Assert operation checking that the elements of the stacked\n+  TensorArray can be reshaped to [batch_size, beam_size, -1].\n+  \"\"\"\n+  error_message = (\"TensorArray reordering expects elements to be \"\n+                   \"reshapable to [batch_size, beam_size, -1] which is \"\n+                   \"incompatible with the dynamic shape of %s elements. \"\n+                   \"Consider setting reorder_tensor_arrays to False to disable \"\n+                   \"TensorArray reordering during the beam search.\"\n+                   % (t.name))\n+  return control_flow_ops.Assert(\n+      math_ops.logical_and(\n+          math_ops.greater_equal(array_ops.rank(t), 2),", "path": "tensorflow/contrib/seq2seq/python/ops/beam_search_decoder.py", "position": null, "original_position": 54, "commit_id": "d3eb228f1db2d60caf380833684944ce12203634", "original_commit_id": "a1ceaf8ba5f7820edca92ff9e61d4a28251a5b9e", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "here for ease of reading, you can use:\r\n\r\narray_ops.rank(t) >= 2\r\n\r\nbelow you can use:\r\n\r\narray_ops.rank(t) > 2", "created_at": "2018-01-16T17:54:17Z", "updated_at": "2018-03-17T07:09:51Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13312#discussion_r161836184", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13312", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/161836184"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13312#discussion_r161836184"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13312"}}, "body_html": "<p>here for ease of reading, you can use:</p>\n<p>array_ops.rank(t) &gt;= 2</p>\n<p>below you can use:</p>\n<p>array_ops.rank(t) &gt; 2</p>", "body_text": "here for ease of reading, you can use:\narray_ops.rank(t) >= 2\nbelow you can use:\narray_ops.rank(t) > 2"}