{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/112811802", "pull_request_review_id": 34159466, "id": 112811802, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjgxMTgwMg==", "diff_hunk": "@@ -423,5 +423,72 @@ def testConsistent(self):\n       self.assertAllEqual(tf_result, expanded_nums)\n \n \n+class PartialReduceTest(test_util.TensorFlowTestCase):\n+\n+  def testPartialSum(self):\n+    x = np.array([[1, 2, 3], [40, 50, 60], [700,800,900]], dtype=np.int32)\n+    indices = np.array([[0, 1], [0, 3], [1, 2], [1, 3], [0,2]], dtype=np.int32)\n+    result = np.array([[1, 2, 3], [741, 852, 963], [40, 50, 60], [740, 850, 960], [41, 52, 63]], dtype=np.int32)\n+    with self.test_session(use_gpu=True):\n+      y_tf = math_ops.partial_sum(x,indices).eval()\n+      self.assertAllEqual(y_tf, result)\n+\n+  def testPartialSum1D(self):\n+    x = np.array([1, 40, 700], dtype=np.int32)\n+    indices = np.array([[0, 1], [0, 3], [1, 2], [1, 3], [0,2]], dtype=np.int32)\n+    result = np.array([1, 741, 40, 740, 41], dtype=np.int32)\n+    with self.test_session(use_gpu=True):\n+      y_tf = math_ops.partial_sum(x,indices).eval()\n+      self.assertAllEqual(y_tf, result)\n+\n+  def testPartialProd(self):\n+    x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.int32)\n+    indices = np.array([[0, 1], [0, 3], [1, 2], [1, 3], [0,2]], dtype=np.int32)\n+    result = np.array([[1, 2, 3], [28, 80, 162], [4, 5, 6], [28, 40, 54], [4, 10, 18]], dtype=np.int32)\n+    with self.test_session(use_gpu=True):\n+      y_tf = math_ops.partial_prod(x,indices).eval()\n+      self.assertAllEqual(y_tf, result)\n+\n+  def testPartialMax(self):\n+    x = np.array([[1, 2, 3], [4, 5, 6], [7,8,9]], dtype=np.int32)\n+    indices = np.array([[0, 1], [0, 3], [1, 2], [1, 3], [0,2]], dtype=np.int32)\n+    result = np.array([[1, 2, 3], [7,8,9], [4, 5, 6], [7, 8, 9], [4, 5, 6]], dtype=np.int32)\n+    with self.test_session(use_gpu=True):\n+      y_tf = math_ops.partial_max(x,indices).eval()\n+      self.assertAllEqual(y_tf, result)\n+\n+  def testPartialMin(self):\n+    x = np.array([[1, 2, 3], [4, 5, 6], [7,8,9]], dtype=np.int32)\n+    indices = np.array([[0, 1], [0, 3], [1, 2], [1, 3], [0,2]], dtype=np.int32)\n+    result = np.array([[1, 2, 3], [1, 2, 3], [4, 5, 6], [4, 5, 6], [1, 2, 3]], dtype=np.int32)\n+    with self.test_session(use_gpu=True):\n+      y_tf = math_ops.partial_min(x,indices).eval()\n+      self.assertAllEqual(y_tf, result)\n+\n+  def testPartialReduceEmptyDataRows(self):\n+    x = np.empty((0,1,2,3,4,5,6), dtype=np.int32)\n+    indices = np.array([[0, 1], [0, 3], [1, 2], [1, 3], [0,2]], dtype=np.int32)\n+    result = np.zeros((5,1,2,3,4,5,6), dtype=np.int32)\n+    with self.test_session(use_gpu=True):\n+      y_tf = math_ops.partial_sum(x,indices).eval()\n+      self.assertAllEqual(y_tf, result)\n+\n+  def testPartialReduceEmptyDataCols(self):\n+    x = np.empty((100,0,2,3,4,5,6), dtype=np.int32)\n+    indices = np.array([[0, 1], [0, 3], [1, 2], [1, 3], [0,2]], dtype=np.int32)\n+    result = np.empty((5,0,2,3,4,5,6), dtype=np.int32)\n+    with self.test_session(use_gpu=True):\n+      y_tf = math_ops.partial_sum(x,indices).eval()\n+      self.assertAllEqual(y_tf, result)\n+\n+  def testPartialReduceEmptyIndicesRows(self):\n+    x = np.array([[1, 2, 3], [4, 5, 6], [7,8,9]], dtype=np.int32)\n+    indices = np.empty((0,2), dtype=np.int32)\n+    result = np.empty((0,3), dtype=np.int32)\n+    with self.test_session(use_gpu=True):\n+      y_tf = math_ops.partial_sum(x,indices).eval()\n+      self.assertAllEqual(y_tf, result)\n+", "path": "tensorflow/python/ops/math_ops_test.py", "position": null, "original_position": 69, "commit_id": "686d7fffa42ca0e78268fa2b94ca480da2f22368", "original_commit_id": "5e34a4fccdd28af7f89a2840b0a8731bfcd86787", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "body": "Do you mean the case where \"data\" and \"indices\" are scalars? In my shape function, I explicitly forbid this case. See math_ops_test.cc: 493-495 in this PR", "created_at": "2017-04-22T15:18:20Z", "updated_at": "2017-08-10T00:09:10Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9063#discussion_r112811802", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9063", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/112811802"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9063#discussion_r112811802"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9063"}}, "body_html": "<p>Do you mean the case where \"data\" and \"indices\" are scalars? In my shape function, I explicitly forbid this case. See math_ops_test.cc: 493-495 in this PR</p>", "body_text": "Do you mean the case where \"data\" and \"indices\" are scalars? In my shape function, I explicitly forbid this case. See math_ops_test.cc: 493-495 in this PR", "in_reply_to_id": 112804140}