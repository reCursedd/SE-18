{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15296", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15296/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15296/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15296/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15296", "id": 281275924, "node_id": "MDU6SXNzdWUyODEyNzU5MjQ=", "number": 15296, "title": "variable_scopes_count miscalculates when reentering variable_scope again", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-12T06:49:54Z", "updated_at": "2018-01-04T05:07:58Z", "closed_at": "2018-01-04T05:07:58Z", "author_association": "MEMBER", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: mac 10.11</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4</li>\n<li><strong>Python version</strong>:  3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The unexpected results are fund when I  investigates <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"275163354\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/14703\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/14703/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/14703\">#14703</a>, see code here:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/4806cb0646bd21f713722bd97c0d0262c575f7e0/tensorflow/python/ops/variable_scope.py#L1621-L1623\">tensorflow/tensorflow/python/ops/variable_scope.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 1621 to 1623\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/4806cb0646bd21f713722bd97c0d0262c575f7e0\">4806cb0</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L1621\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1621\"></td>\n          <td id=\"LC1621\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(<span class=\"pl-c1\">self</span>._name_or_scope, VariableScope): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1622\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1622\"></td>\n          <td id=\"LC1622\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">self</span>._var_store.variable_scopes_count <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._old_subscopes </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1623\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1623\"></td>\n          <td id=\"LC1623\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">else</span>: </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>variable_scope always restores its old <code>variable_scopes_count</code> after exit, unfortunately, it seems that we forget reentering case. I am not sure whether the behavior is a bug.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.ops <span class=\"pl-k\">import</span> variable_scope\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">print_scope</span>(<span class=\"pl-smi\">scope</span>):\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scope: <span class=\"pl-c1\">{}</span>, variable_scopes_count: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(\n        scope.name,\n        variable_scope._get_default_variable_store().variable_scopes_count))\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> scope:\n    print_scope(scope)\n\n<span class=\"pl-k\">with</span> tf.variable_scope(scope) <span class=\"pl-k\">as</span> scope2:\n    print_scope(scope2)\n    <span class=\"pl-k\">with</span> tf.variable_scope(scope2) <span class=\"pl-k\">as</span> scope3:\n        print_scope(scope3)\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>===============<span class=\"pl-pds\">\"</span></span>)\nprint_scope(tf.get_variable_scope())</pre></div>\n<p>output:</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-k\">~</span>/Downloads \u276f\u276f\u276f python var_store_test.py\nscope: a, variable_scopes_count: {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>: 1}\nscope: a, variable_scopes_count: {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>: 2}\nscope: a, variable_scopes_count: {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>: 3}\n===============\nscope: , variable_scopes_count: {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>: 2}</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): mac 10.11\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.4\nPython version:  3.5\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nDescribe the problem\nThe unexpected results are fund when I  investigates #14703, see code here:\n\n  \n    \n      tensorflow/tensorflow/python/ops/variable_scope.py\n    \n    \n        Lines 1621 to 1623\n      in\n      4806cb0\n    \n    \n    \n    \n\n        \n          \n           if isinstance(self._name_or_scope, VariableScope): \n        \n\n        \n          \n             self._var_store.variable_scopes_count = self._old_subscopes \n        \n\n        \n          \n           else: \n        \n    \n  \n\n\nvariable_scope always restores its old variable_scopes_count after exit, unfortunately, it seems that we forget reentering case. I am not sure whether the behavior is a bug.\nSource code / logs\nimport tensorflow as tf\nfrom tensorflow.python.ops import variable_scope\n\ndef print_scope(scope):\n    print(\"scope: {}, variable_scopes_count: {}\".format(\n        scope.name,\n        variable_scope._get_default_variable_store().variable_scopes_count))\n\nwith tf.variable_scope(\"a\") as scope:\n    print_scope(scope)\n\nwith tf.variable_scope(scope) as scope2:\n    print_scope(scope2)\n    with tf.variable_scope(scope2) as scope3:\n        print_scope(scope3)\n\nprint(\"===============\")\nprint_scope(tf.get_variable_scope())\noutput:\n~/Downloads \u276f\u276f\u276f python var_store_test.py\nscope: a, variable_scopes_count: {'a': 1}\nscope: a, variable_scopes_count: {'a': 2}\nscope: a, variable_scopes_count: {'a': 3}\n===============\nscope: , variable_scopes_count: {'a': 2}", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: mac 10.11\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.4\r\n- **Python version**:  3.5\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\n\r\nThe unexpected results are fund when I  investigates #14703, see code here:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/4806cb0646bd21f713722bd97c0d0262c575f7e0/tensorflow/python/ops/variable_scope.py#L1621-L1623\r\n\r\nvariable_scope always restores its old `variable_scopes_count` after exit, unfortunately, it seems that we forget reentering case. I am not sure whether the behavior is a bug.\r\n\r\n### Source code / logs\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow.python.ops import variable_scope\r\n\r\ndef print_scope(scope):\r\n    print(\"scope: {}, variable_scopes_count: {}\".format(\r\n        scope.name,\r\n        variable_scope._get_default_variable_store().variable_scopes_count))\r\n\r\nwith tf.variable_scope(\"a\") as scope:\r\n    print_scope(scope)\r\n\r\nwith tf.variable_scope(scope) as scope2:\r\n    print_scope(scope2)\r\n    with tf.variable_scope(scope2) as scope3:\r\n        print_scope(scope3)\r\n\r\nprint(\"===============\")\r\nprint_scope(tf.get_variable_scope())\r\n```\r\n\r\noutput:\r\n```bash\r\n~/Downloads \u276f\u276f\u276f python var_store_test.py\r\nscope: a, variable_scopes_count: {'a': 1}\r\nscope: a, variable_scopes_count: {'a': 2}\r\nscope: a, variable_scopes_count: {'a': 3}\r\n===============\r\nscope: , variable_scopes_count: {'a': 2}\r\n```\r\n"}