{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15058", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15058/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15058/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15058/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15058", "id": 278701534, "node_id": "MDU6SXNzdWUyNzg3MDE1MzQ=", "number": 15058, "title": "Go bindings: Two variables interfere unless op.VarHandleOpSharedName is used", "user": {"login": "is8ac", "id": 8010041, "node_id": "MDQ6VXNlcjgwMTAwNDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8010041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/is8ac", "html_url": "https://github.com/is8ac", "followers_url": "https://api.github.com/users/is8ac/followers", "following_url": "https://api.github.com/users/is8ac/following{/other_user}", "gists_url": "https://api.github.com/users/is8ac/gists{/gist_id}", "starred_url": "https://api.github.com/users/is8ac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/is8ac/subscriptions", "organizations_url": "https://api.github.com/users/is8ac/orgs", "repos_url": "https://api.github.com/users/is8ac/repos", "events_url": "https://api.github.com/users/is8ac/events{/privacy}", "received_events_url": "https://api.github.com/users/is8ac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-02T17:34:38Z", "updated_at": "2017-12-03T16:09:33Z", "closed_at": "2017-12-03T01:13:01Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Arch linux</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.0</li>\n<li><strong>Python version</strong>:  NA</li>\n<li><strong>GPU model and memory</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When creating and assigning values to two variables in the Go bindings, they conflict, one value gets assigned to both variables. The variables assign OPs race, so it is somewhat non deterministic which gets assigned to both.</p>\n<p>Reproduce:<br>\nUse <code>op.VarHandleOp()</code> to create two variable handles, and then use <code>op.AssignVariableOp()</code> to create OPs to assign the constant 1 to the first variable, and 2 to the second. Pull on the two assign OPs.<br>\nEvaluate the variable reader outputs for the two variables.<br>\nExpected result: First variable has a value of 1, and second variable has a value of 2.<br>\nObserved result: Both variables have the same value, usually 2, but occasionally 1.</p>\n<p>Is this behavior correct?</p>\n<p>If I use the optional parameter <code>op.VarHandleOpSharedName</code> in op.VarHandleOp, giving the two variables different names, it works as expected, so this is easy to work around.</p>\n<h3>Source code / logs</h3>\n<pre><code>package main\n\nimport (\n\t\"fmt\"\n\n\ttf \"github.com/tensorflow/tensorflow/tensorflow/go\"\n\t\"github.com/tensorflow/tensorflow/tensorflow/go/op\"\n)\n\nfunc makeVariable(s *op.Scope, i int32, name string) (init *tf.Operation, output tf.Output) {\n\tconstant := op.Const(s, i)\n\tvariable := op.VarHandleOp(s, tf.Int32, tf.ScalarShape())\n\t//variable := op.VarHandleOp(s, tf.Int32, tf.ScalarShape(), op.VarHandleOpSharedName(name))\n\tinit = op.AssignVariableOp(s, variable, constant)\n\toutput = op.ReadVariableOp(s, variable, tf.Int32)\n\treturn\n}\n\nfunc main() {\n\ts := op.NewScope()\n\tinit1, output1 := makeVariable(s.SubScope(\"var1\"), 1, \"variable_1\")\n\tinit2, output2 := makeVariable(s.SubScope(\"var2\"), 2, \"variable_2\")\n\n\tgraph, err := s.Finalize()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsess, err := tf.NewSession(graph, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_, err = sess.Run(nil, nil, []*tf.Operation{init1, init2})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tresults, err := sess.Run(nil, []tf.Output{output1, output2}, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(results[0].Value(), results[1].Value())\n}\n</code></pre>\n<p>Prints:</p>\n<pre><code>[isaac@d6-arch tfes]$ go run shape_bug_demo.go \n2017-12-02 09:17:06.516455: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA\n2017-12-02 09:17:06.594468: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:892] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n2017-12-02 09:17:06.594676: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties: \nname: GeForce GTX 1060 6GB major: 6 minor: 1 memoryClockRate(GHz): 1.7085\npciBusID: 0000:01:00.0\ntotalMemory: 5.93GiB freeMemory: 5.15GiB\n2017-12-02 09:17:06.594688: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -&gt; (device: 0, name: GeForce GTX 1060 6GB, pci bus id: 0000:01:00.0, compute capability: 6.1)\n2 2\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch linux\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.4.0\nPython version:  NA\nGPU model and memory:\n\nDescribe the problem\nWhen creating and assigning values to two variables in the Go bindings, they conflict, one value gets assigned to both variables. The variables assign OPs race, so it is somewhat non deterministic which gets assigned to both.\nReproduce:\nUse op.VarHandleOp() to create two variable handles, and then use op.AssignVariableOp() to create OPs to assign the constant 1 to the first variable, and 2 to the second. Pull on the two assign OPs.\nEvaluate the variable reader outputs for the two variables.\nExpected result: First variable has a value of 1, and second variable has a value of 2.\nObserved result: Both variables have the same value, usually 2, but occasionally 1.\nIs this behavior correct?\nIf I use the optional parameter op.VarHandleOpSharedName in op.VarHandleOp, giving the two variables different names, it works as expected, so this is easy to work around.\nSource code / logs\npackage main\n\nimport (\n\t\"fmt\"\n\n\ttf \"github.com/tensorflow/tensorflow/tensorflow/go\"\n\t\"github.com/tensorflow/tensorflow/tensorflow/go/op\"\n)\n\nfunc makeVariable(s *op.Scope, i int32, name string) (init *tf.Operation, output tf.Output) {\n\tconstant := op.Const(s, i)\n\tvariable := op.VarHandleOp(s, tf.Int32, tf.ScalarShape())\n\t//variable := op.VarHandleOp(s, tf.Int32, tf.ScalarShape(), op.VarHandleOpSharedName(name))\n\tinit = op.AssignVariableOp(s, variable, constant)\n\toutput = op.ReadVariableOp(s, variable, tf.Int32)\n\treturn\n}\n\nfunc main() {\n\ts := op.NewScope()\n\tinit1, output1 := makeVariable(s.SubScope(\"var1\"), 1, \"variable_1\")\n\tinit2, output2 := makeVariable(s.SubScope(\"var2\"), 2, \"variable_2\")\n\n\tgraph, err := s.Finalize()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsess, err := tf.NewSession(graph, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_, err = sess.Run(nil, nil, []*tf.Operation{init1, init2})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tresults, err := sess.Run(nil, []tf.Output{output1, output2}, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(results[0].Value(), results[1].Value())\n}\n\nPrints:\n[isaac@d6-arch tfes]$ go run shape_bug_demo.go \n2017-12-02 09:17:06.516455: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA\n2017-12-02 09:17:06.594468: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:892] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n2017-12-02 09:17:06.594676: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties: \nname: GeForce GTX 1060 6GB major: 6 minor: 1 memoryClockRate(GHz): 1.7085\npciBusID: 0000:01:00.0\ntotalMemory: 5.93GiB freeMemory: 5.15GiB\n2017-12-02 09:17:06.594688: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: GeForce GTX 1060 6GB, pci bus id: 0000:01:00.0, compute capability: 6.1)\n2 2", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Arch linux\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.4.0\r\n- **Python version**:  NA\r\n- **GPU model and memory**:\r\n\r\n### Describe the problem\r\nWhen creating and assigning values to two variables in the Go bindings, they conflict, one value gets assigned to both variables. The variables assign OPs race, so it is somewhat non deterministic which gets assigned to both.\r\n\r\nReproduce:\r\nUse `op.VarHandleOp()` to create two variable handles, and then use `op.AssignVariableOp()` to create OPs to assign the constant 1 to the first variable, and 2 to the second. Pull on the two assign OPs.\r\nEvaluate the variable reader outputs for the two variables.\r\nExpected result: First variable has a value of 1, and second variable has a value of 2.\r\nObserved result: Both variables have the same value, usually 2, but occasionally 1.\r\n\r\nIs this behavior correct?\r\n\r\nIf I use the optional parameter `op.VarHandleOpSharedName` in op.VarHandleOp, giving the two variables different names, it works as expected, so this is easy to work around.\r\n\r\n\r\n### Source code / logs\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\r\n\ttf \"github.com/tensorflow/tensorflow/tensorflow/go\"\r\n\t\"github.com/tensorflow/tensorflow/tensorflow/go/op\"\r\n)\r\n\r\nfunc makeVariable(s *op.Scope, i int32, name string) (init *tf.Operation, output tf.Output) {\r\n\tconstant := op.Const(s, i)\r\n\tvariable := op.VarHandleOp(s, tf.Int32, tf.ScalarShape())\r\n\t//variable := op.VarHandleOp(s, tf.Int32, tf.ScalarShape(), op.VarHandleOpSharedName(name))\r\n\tinit = op.AssignVariableOp(s, variable, constant)\r\n\toutput = op.ReadVariableOp(s, variable, tf.Int32)\r\n\treturn\r\n}\r\n\r\nfunc main() {\r\n\ts := op.NewScope()\r\n\tinit1, output1 := makeVariable(s.SubScope(\"var1\"), 1, \"variable_1\")\r\n\tinit2, output2 := makeVariable(s.SubScope(\"var2\"), 2, \"variable_2\")\r\n\r\n\tgraph, err := s.Finalize()\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tsess, err := tf.NewSession(graph, nil)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\t_, err = sess.Run(nil, nil, []*tf.Operation{init1, init2})\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tresults, err := sess.Run(nil, []tf.Output{output1, output2}, nil)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfmt.Println(results[0].Value(), results[1].Value())\r\n}\r\n```\r\nPrints:\r\n```\r\n[isaac@d6-arch tfes]$ go run shape_bug_demo.go \r\n2017-12-02 09:17:06.516455: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA\r\n2017-12-02 09:17:06.594468: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:892] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\r\n2017-12-02 09:17:06.594676: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties: \r\nname: GeForce GTX 1060 6GB major: 6 minor: 1 memoryClockRate(GHz): 1.7085\r\npciBusID: 0000:01:00.0\r\ntotalMemory: 5.93GiB freeMemory: 5.15GiB\r\n2017-12-02 09:17:06.594688: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: GeForce GTX 1060 6GB, pci bus id: 0000:01:00.0, compute capability: 6.1)\r\n2 2\r\n```"}