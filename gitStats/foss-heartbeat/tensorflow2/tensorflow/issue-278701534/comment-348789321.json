{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/348789321", "html_url": "https://github.com/tensorflow/tensorflow/issues/15058#issuecomment-348789321", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15058", "id": 348789321, "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODc4OTMyMQ==", "user": {"login": "is8ac", "id": 8010041, "node_id": "MDQ6VXNlcjgwMTAwNDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8010041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/is8ac", "html_url": "https://github.com/is8ac", "followers_url": "https://api.github.com/users/is8ac/followers", "following_url": "https://api.github.com/users/is8ac/following{/other_user}", "gists_url": "https://api.github.com/users/is8ac/gists{/gist_id}", "starred_url": "https://api.github.com/users/is8ac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/is8ac/subscriptions", "organizations_url": "https://api.github.com/users/is8ac/orgs", "repos_url": "https://api.github.com/users/is8ac/repos", "events_url": "https://api.github.com/users/is8ac/events{/privacy}", "received_events_url": "https://api.github.com/users/is8ac/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-03T16:09:32Z", "updated_at": "2017-12-03T16:09:32Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> Thank you for clarifying. This is a good and useful behavior.</p>\n<p>I first encountered this behavior when it was leading to a non-deterministic bug. It would be nice to make the result of pulling on two assign operation for the same resource deterministic. Or else return an error when two assign operations for the same resource are being pulled on in the same call to <code>session.Run()</code>. This would help developers to avoid my mistake (hopefully) without breaking backwards compatibility. AFAIK, there are no circumstances in which a developer would want to assign two different values to the same resource in the same run. If they do, it's by accident, and the API should warn them.</p>", "body_text": "@asimshankar Thank you for clarifying. This is a good and useful behavior.\nI first encountered this behavior when it was leading to a non-deterministic bug. It would be nice to make the result of pulling on two assign operation for the same resource deterministic. Or else return an error when two assign operations for the same resource are being pulled on in the same call to session.Run(). This would help developers to avoid my mistake (hopefully) without breaking backwards compatibility. AFAIK, there are no circumstances in which a developer would want to assign two different values to the same resource in the same run. If they do, it's by accident, and the API should warn them.", "body": "@asimshankar Thank you for clarifying. This is a good and useful behavior.\r\n\r\nI first encountered this behavior when it was leading to a non-deterministic bug. It would be nice to make the result of pulling on two assign operation for the same resource deterministic. Or else return an error when two assign operations for the same resource are being pulled on in the same call to `session.Run()`. This would help developers to avoid my mistake (hopefully) without breaking backwards compatibility. AFAIK, there are no circumstances in which a developer would want to assign two different values to the same resource in the same run. If they do, it's by accident, and the API should warn them."}