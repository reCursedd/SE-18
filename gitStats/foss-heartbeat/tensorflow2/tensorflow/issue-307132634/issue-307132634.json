{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17886", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17886/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17886/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17886/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17886", "id": 307132634, "node_id": "MDU6SXNzdWUzMDcxMzI2MzQ=", "number": 17886, "title": "Data on GPU not garbage collected", "user": {"login": "haasdo95", "id": 20941623, "node_id": "MDQ6VXNlcjIwOTQxNjIz", "avatar_url": "https://avatars2.githubusercontent.com/u/20941623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haasdo95", "html_url": "https://github.com/haasdo95", "followers_url": "https://api.github.com/users/haasdo95/followers", "following_url": "https://api.github.com/users/haasdo95/following{/other_user}", "gists_url": "https://api.github.com/users/haasdo95/gists{/gist_id}", "starred_url": "https://api.github.com/users/haasdo95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haasdo95/subscriptions", "organizations_url": "https://api.github.com/users/haasdo95/orgs", "repos_url": "https://api.github.com/users/haasdo95/repos", "events_url": "https://api.github.com/users/haasdo95/events{/privacy}", "received_events_url": "https://api.github.com/users/haasdo95/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-03-21T06:32:59Z", "updated_at": "2018-05-04T00:34:45Z", "closed_at": "2018-05-04T00:34:45Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>No custom code written</li>\n<li>Linux Ubuntu 16.04)</li>\n<li>from source</li>\n<li>TF 1.6</li>\n<li>Python 2.7</li>\n</ul>\n<p>I've also posted the question on stack overflow (<a href=\"https://stackoverflow.com/questions/49399495/data-on-gpu-not-garbage-collected\" rel=\"nofollow\">https://stackoverflow.com/questions/49399495/data-on-gpu-not-garbage-collected</a>). However this could potentially be a bug so I decided to post an issue anyway.</p>\n<p>For our current implementation, the return value of a sess.run() will be stored in a dictionary. We do that to implement statefulness of RNN.</p>\n<p>However, it turns out that storing data that way prevents tensorflow from garbage-collecting the data allocated on GPU. GPU memory usage simply keeps growing and it eventually blows up.</p>\n<p>The return value from a sess.run() should be an numpy.ndarray as far as I'm concerned. And the data of an numpy.ndarray should live on good old CPU, shouldn't it?</p>\n<p>Then why would storing the return value prevent GC? I don't think this is a reference counting problem.</p>\n<p>Our current theory is that the returned numpy.ndarray actually has some reference to the GPU memory. Hope someone could verify/debunk this.</p>\n<p>We actually tried commenting out the data storing part. Then the GPU memory becomes constant.</p>\n<p>Thanks!!!</p>", "body_text": "System information\n\nNo custom code written\nLinux Ubuntu 16.04)\nfrom source\nTF 1.6\nPython 2.7\n\nI've also posted the question on stack overflow (https://stackoverflow.com/questions/49399495/data-on-gpu-not-garbage-collected). However this could potentially be a bug so I decided to post an issue anyway.\nFor our current implementation, the return value of a sess.run() will be stored in a dictionary. We do that to implement statefulness of RNN.\nHowever, it turns out that storing data that way prevents tensorflow from garbage-collecting the data allocated on GPU. GPU memory usage simply keeps growing and it eventually blows up.\nThe return value from a sess.run() should be an numpy.ndarray as far as I'm concerned. And the data of an numpy.ndarray should live on good old CPU, shouldn't it?\nThen why would storing the return value prevent GC? I don't think this is a reference counting problem.\nOur current theory is that the returned numpy.ndarray actually has some reference to the GPU memory. Hope someone could verify/debunk this.\nWe actually tried commenting out the data storing part. Then the GPU memory becomes constant.\nThanks!!!", "body": "### System information\r\n- No custom code written\r\n- Linux Ubuntu 16.04)\r\n- from source\r\n- TF 1.6\r\n- Python 2.7\r\n\r\nI've also posted the question on stack overflow (https://stackoverflow.com/questions/49399495/data-on-gpu-not-garbage-collected). However this could potentially be a bug so I decided to post an issue anyway.\r\n\r\nFor our current implementation, the return value of a sess.run() will be stored in a dictionary. We do that to implement statefulness of RNN.\r\n\r\nHowever, it turns out that storing data that way prevents tensorflow from garbage-collecting the data allocated on GPU. GPU memory usage simply keeps growing and it eventually blows up.\r\n\r\nThe return value from a sess.run() should be an numpy.ndarray as far as I'm concerned. And the data of an numpy.ndarray should live on good old CPU, shouldn't it?\r\n\r\nThen why would storing the return value prevent GC? I don't think this is a reference counting problem.\r\n\r\nOur current theory is that the returned numpy.ndarray actually has some reference to the GPU memory. Hope someone could verify/debunk this.\r\n\r\nWe actually tried commenting out the data storing part. Then the GPU memory becomes constant.\r\n\r\nThanks!!!"}