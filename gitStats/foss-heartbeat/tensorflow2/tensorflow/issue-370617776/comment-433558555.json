{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/433558555", "html_url": "https://github.com/tensorflow/tensorflow/issues/23025#issuecomment-433558555", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23025", "id": 433558555, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzU1ODU1NQ==", "user": {"login": "Coac", "id": 7363034, "node_id": "MDQ6VXNlcjczNjMwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7363034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Coac", "html_url": "https://github.com/Coac", "followers_url": "https://api.github.com/users/Coac/followers", "following_url": "https://api.github.com/users/Coac/following{/other_user}", "gists_url": "https://api.github.com/users/Coac/gists{/gist_id}", "starred_url": "https://api.github.com/users/Coac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Coac/subscriptions", "organizations_url": "https://api.github.com/users/Coac/orgs", "repos_url": "https://api.github.com/users/Coac/repos", "events_url": "https://api.github.com/users/Coac/events{/privacy}", "received_events_url": "https://api.github.com/users/Coac/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-26T22:21:07Z", "updated_at": "2018-10-26T22:22:23Z", "author_association": "NONE", "body_html": "<p>I tried using <code>saved_model.builder.SavedModelBuilder()</code>, however I also get the exported .pb bigger after each call :(</p>\n<p>What I want to do is training the model, for some time then export it to serve it, then retraining.<br>\nTraining -&gt; Export -&gt; Training -&gt; Export -&gt; ...</p>\n<p>The version using a builder:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> time\n\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.keras.layers <span class=\"pl-k\">import</span> Dense\n<span class=\"pl-k\">from</span> tensorflow.keras.models <span class=\"pl-k\">import</span> Sequential\n<span class=\"pl-k\">from</span> tensorflow.keras.optimizers <span class=\"pl-k\">import</span> <span class=\"pl-c1\">SGD</span>\n<span class=\"pl-k\">from</span> tensorflow.python.saved_model <span class=\"pl-k\">import</span> tag_constants\n<span class=\"pl-k\">from</span> tensorflow.python.saved_model.signature_def_utils_impl <span class=\"pl-k\">import</span> predict_signature_def\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n\n    sess <span class=\"pl-k\">=</span> tf.keras.backend.get_session()\n\n    model <span class=\"pl-k\">=</span> Sequential()\n\n    model.add(Dense(<span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">64</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">input_dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>))\n    model.add(Dense(<span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>linear<span class=\"pl-pds\">'</span></span>))\n\n    opt <span class=\"pl-k\">=</span> SGD(<span class=\"pl-v\">lr</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.01</span>)\n    model.compile(<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mse<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span>opt)\n\n    graph <span class=\"pl-k\">=</span> tf.get_default_graph()\n\n    model.predict(np.array([[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>]]))\n\n    <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n        <span class=\"pl-k\">with</span> graph.as_default():\n            time.sleep(<span class=\"pl-c1\">1</span>)\n            model.fit(np.array([[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>]]), np.array([[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>]]))\n            temp_export_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/tmp/models/<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(time.time()).split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.<span class=\"pl-pds\">\"</span></span>)[<span class=\"pl-c1\">0</span>]\n\n            <span class=\"pl-c\"><span class=\"pl-c\">#</span> Saving</span>\n            builder <span class=\"pl-k\">=</span> tf.saved_model.builder.SavedModelBuilder(temp_export_path)\n            signature <span class=\"pl-k\">=</span> predict_signature_def(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>state<span class=\"pl-pds\">'</span></span>: model.input},\n                                              <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>{t.name: t <span class=\"pl-k\">for</span> t <span class=\"pl-k\">in</span> model.outputs})\n            builder.add_meta_graph_and_variables(sess, [tag_constants.<span class=\"pl-c1\">SERVING</span>],\n                                                 <span class=\"pl-v\">signature_def_map</span><span class=\"pl-k\">=</span>{\n                                                     tf.saved_model.signature_constants.<span class=\"pl-c1\">DEFAULT_SERVING_SIGNATURE_DEF_KEY</span>: signature})\n            builder.save()\n</pre></div>\n<p>The builder instantiation is inside the loop as I would like to save the model to a separate model each time.</p>", "body_text": "I tried using saved_model.builder.SavedModelBuilder(), however I also get the exported .pb bigger after each call :(\nWhat I want to do is training the model, for some time then export it to serve it, then retraining.\nTraining -> Export -> Training -> Export -> ...\nThe version using a builder:\nimport time\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import SGD\nfrom tensorflow.python.saved_model import tag_constants\nfrom tensorflow.python.saved_model.signature_def_utils_impl import predict_signature_def\n\nif __name__ == '__main__':\n\n    sess = tf.keras.backend.get_session()\n\n    model = Sequential()\n\n    model.add(Dense(units=64, activation='relu', input_dim=4))\n    model.add(Dense(units=4, activation='linear'))\n\n    opt = SGD(lr=0.01)\n    model.compile(loss='mse', optimizer=opt)\n\n    graph = tf.get_default_graph()\n\n    model.predict(np.array([[1, 1, 1, 1], [1, 1, 1, 1]]))\n\n    for _ in range(100):\n        with graph.as_default():\n            time.sleep(1)\n            model.fit(np.array([[1, 1, 1, 1], [1, 1, 1, 1]]), np.array([[1, 1, 1, 1], [1, 1, 1, 1]]))\n            temp_export_path = '/tmp/models/' + str(time.time()).split(\".\")[0]\n\n            # Saving\n            builder = tf.saved_model.builder.SavedModelBuilder(temp_export_path)\n            signature = predict_signature_def(inputs={'state': model.input},\n                                              outputs={t.name: t for t in model.outputs})\n            builder.add_meta_graph_and_variables(sess, [tag_constants.SERVING],\n                                                 signature_def_map={\n                                                     tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY: signature})\n            builder.save()\n\nThe builder instantiation is inside the loop as I would like to save the model to a separate model each time.", "body": "I tried using `saved_model.builder.SavedModelBuilder()`, however I also get the exported .pb bigger after each call :(\r\n\r\nWhat I want to do is training the model, for some time then export it to serve it, then retraining.\r\nTraining -> Export -> Training -> Export -> ...\r\n\r\nThe version using a builder:\r\n```python\r\nimport time\r\n\r\nimport numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow.keras.layers import Dense\r\nfrom tensorflow.keras.models import Sequential\r\nfrom tensorflow.keras.optimizers import SGD\r\nfrom tensorflow.python.saved_model import tag_constants\r\nfrom tensorflow.python.saved_model.signature_def_utils_impl import predict_signature_def\r\n\r\nif __name__ == '__main__':\r\n\r\n    sess = tf.keras.backend.get_session()\r\n\r\n    model = Sequential()\r\n\r\n    model.add(Dense(units=64, activation='relu', input_dim=4))\r\n    model.add(Dense(units=4, activation='linear'))\r\n\r\n    opt = SGD(lr=0.01)\r\n    model.compile(loss='mse', optimizer=opt)\r\n\r\n    graph = tf.get_default_graph()\r\n\r\n    model.predict(np.array([[1, 1, 1, 1], [1, 1, 1, 1]]))\r\n\r\n    for _ in range(100):\r\n        with graph.as_default():\r\n            time.sleep(1)\r\n            model.fit(np.array([[1, 1, 1, 1], [1, 1, 1, 1]]), np.array([[1, 1, 1, 1], [1, 1, 1, 1]]))\r\n            temp_export_path = '/tmp/models/' + str(time.time()).split(\".\")[0]\r\n\r\n            # Saving\r\n            builder = tf.saved_model.builder.SavedModelBuilder(temp_export_path)\r\n            signature = predict_signature_def(inputs={'state': model.input},\r\n                                              outputs={t.name: t for t in model.outputs})\r\n            builder.add_meta_graph_and_variables(sess, [tag_constants.SERVING],\r\n                                                 signature_def_map={\r\n                                                     tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY: signature})\r\n            builder.save()\r\n\r\n```\r\nThe builder instantiation is inside the loop as I would like to save the model to a separate model each time.\r\n"}