{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/329821317", "html_url": "https://github.com/tensorflow/tensorflow/issues/12659#issuecomment-329821317", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12659", "id": 329821317, "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTgyMTMxNw==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-15T15:47:11Z", "updated_at": "2017-09-15T17:00:45Z", "author_association": "MEMBER", "body_html": "<p>Depending on what the desired output is, the fix might varies.</p>\n<p>In C99' <code>&lt;math.h&gt;</code> there is <code>fmax</code> which covers <code>nan</code>. However, the behavior is exactly opposite to <code>numpy</code>:<br>\n<a href=\"http://en.cppreference.com/w/c/numeric/math/fmax\" rel=\"nofollow\">http://en.cppreference.com/w/c/numeric/math/fmax</a></p>\n<blockquote>\n<p>Error handling<br>\nThis function is not subject to any of the error conditions specified in math_errhandling.<br>\nIf the implementation supports IEEE floating-point arithmetic (IEC 60559),</p>\n<ul>\n<li>If one of the two arguments is NaN, the value of the other argument is returned</li>\n<li>Only if both arguments are NaN, NaN is returned</li>\n</ul>\n</blockquote>\n<p>To achieve the same behavior as <code>numpy</code> I think <code>isnan()</code> might have to be used even though this is less ideal.</p>", "body_text": "Depending on what the desired output is, the fix might varies.\nIn C99' <math.h> there is fmax which covers nan. However, the behavior is exactly opposite to numpy:\nhttp://en.cppreference.com/w/c/numeric/math/fmax\n\nError handling\nThis function is not subject to any of the error conditions specified in math_errhandling.\nIf the implementation supports IEEE floating-point arithmetic (IEC 60559),\n\nIf one of the two arguments is NaN, the value of the other argument is returned\nOnly if both arguments are NaN, NaN is returned\n\n\nTo achieve the same behavior as numpy I think isnan() might have to be used even though this is less ideal.", "body": "Depending on what the desired output is, the fix might varies.\r\n\r\nIn C99' `<math.h>` there is `fmax` which covers `nan`. However, the behavior is exactly opposite to `numpy`:\r\nhttp://en.cppreference.com/w/c/numeric/math/fmax\r\n> Error handling\r\n> This function is not subject to any of the error conditions specified in math_errhandling.\r\n> If the implementation supports IEEE floating-point arithmetic (IEC 60559),\r\n> - If one of the two arguments is NaN, the value of the other argument is returned\r\n> - Only if both arguments are NaN, NaN is returned\r\n\r\nTo achieve the same behavior as `numpy` I think `isnan()` might have to be used even though this is less ideal.\r\n\r\n"}