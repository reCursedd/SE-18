{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/329818832", "html_url": "https://github.com/tensorflow/tensorflow/issues/12659#issuecomment-329818832", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12659", "id": 329818832, "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTgxODgzMg==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-15T15:38:30Z", "updated_at": "2017-09-15T15:38:30Z", "author_association": "MEMBER", "body_html": "<p>I tends to think the issue comes from using <code>std::max</code> as the op. As far as I know, <code>std::max</code> is implemented as <code>(a &lt; b) ? b : a</code> which does not take into consideration if <code>a</code> or <code>b</code> is <code>nan</code>.</p>\n<p>For example, with the following:</p>\n<div class=\"highlight highlight-source-c++\"><pre>$ cat max.cpp \n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>algorithm<span class=\"pl-pds\">&gt;</span></span>\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">int</span> argc, <span class=\"pl-k\">char</span> *argv[])\n{\n    <span class=\"pl-c1\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::max(1., nan) = %f<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">std::max</span>(<span class=\"pl-c1\">1.0</span>, std::numeric_limits&lt;<span class=\"pl-k\">double</span>&gt;::<span class=\"pl-c1\">quiet_NaN</span>()));\n    <span class=\"pl-c1\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>std::max(nan, 1.) = %f<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">std::max</span>(std::numeric_limits&lt;<span class=\"pl-k\">double</span>&gt;::<span class=\"pl-c1\">quiet_NaN</span>(), <span class=\"pl-c1\">1.0</span>));\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n}\n$ g++ max.cpp\n$ ./a.out \n<span class=\"pl-en\">std::max</span>(<span class=\"pl-c1\">1</span>., nan) = 1.000000\nstd::max(nan, <span class=\"pl-c1\">1</span>.) = nan\n$ </pre></div>\n<p>And in TensorFlow with CPU version:</p>\n<div class=\"highlight highlight-source-python\"><pre>Python <span class=\"pl-c1\">2.7</span>.12 (default, Nov <span class=\"pl-c1\">19</span> <span class=\"pl-c1\">2016</span>, <span class=\"pl-c1\">0<span class=\"pl-ii\">6</span></span>:<span class=\"pl-c1\">48</span>:<span class=\"pl-c1\">10</span>) \n[<span class=\"pl-c1\">GCC</span> <span class=\"pl-c1\">5.4</span>.0 <span class=\"pl-c1\">20160609</span>] on linux2\nType <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>help<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>copyright<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>credits<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">or</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>license<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">for</span> more information.\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span> tf.Session().run(tf.maximum(np.nan, <span class=\"pl-c1\">1</span>.))\nnan\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span> tf.Session().run(tf.maximum(<span class=\"pl-c1\">1</span>., np.nan))\n<span class=\"pl-c1\">1.0</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> a <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> max_a <span class=\"pl-k\">=</span> tf.maximum(a, <span class=\"pl-c1\">1</span>.)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">with</span> tf.Session():\n<span class=\"pl-c1\">...</span>     <span class=\"pl-c1\">print</span> max_a.eval(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{a: np.nan})\n<span class=\"pl-c1\">...</span> \nnan\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> a <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> max_a <span class=\"pl-k\">=</span> tf.maximum(<span class=\"pl-c1\">1</span>., a)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">with</span> tf.Session():\n<span class=\"pl-c1\">...</span>      <span class=\"pl-c1\">print</span> max_a.eval(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{a: np.nan})\n<span class=\"pl-c1\">...</span> \n<span class=\"pl-c1\">1.0</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> </pre></div>", "body_text": "I tends to think the issue comes from using std::max as the op. As far as I know, std::max is implemented as (a < b) ? b : a which does not take into consideration if a or b is nan.\nFor example, with the following:\n$ cat max.cpp \n#include <algorithm>\n\nint main(int argc, char *argv[])\n{\n    printf(\"std::max(1., nan) = %f\\n\", std::max(1.0, std::numeric_limits<double>::quiet_NaN()));\n    printf(\"std::max(nan, 1.) = %f\\n\", std::max(std::numeric_limits<double>::quiet_NaN(), 1.0));\n\n    return 0;\n}\n$ g++ max.cpp\n$ ./a.out \nstd::max(1., nan) = 1.000000\nstd::max(nan, 1.) = nan\n$ \nAnd in TensorFlow with CPU version:\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import tensorflow as tf\n>>> import numpy as np\n>>> \n>>> print tf.Session().run(tf.maximum(np.nan, 1.))\nnan\n>>> \n>>> print tf.Session().run(tf.maximum(1., np.nan))\n1.0\n>>> \n>>> a = tf.placeholder(dtype=tf.float32)\n>>> max_a = tf.maximum(a, 1.)\n>>> with tf.Session():\n...     print max_a.eval(feed_dict={a: np.nan})\n... \nnan\n>>> a = tf.placeholder(dtype=tf.float32)\n>>> max_a = tf.maximum(1., a)\n>>> with tf.Session():\n...      print max_a.eval(feed_dict={a: np.nan})\n... \n1.0\n>>>", "body": "I tends to think the issue comes from using `std::max` as the op. As far as I know, `std::max` is implemented as `(a < b) ? b : a` which does not take into consideration if `a` or `b` is `nan`.\r\n\r\nFor example, with the following:\r\n```c++\r\n$ cat max.cpp \r\n#include <algorithm>\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    printf(\"std::max(1., nan) = %f\\n\", std::max(1.0, std::numeric_limits<double>::quiet_NaN()));\r\n    printf(\"std::max(nan, 1.) = %f\\n\", std::max(std::numeric_limits<double>::quiet_NaN(), 1.0));\r\n\r\n    return 0;\r\n}\r\n$ g++ max.cpp\r\n$ ./a.out \r\nstd::max(1., nan) = 1.000000\r\nstd::max(nan, 1.) = nan\r\n$ \r\n```\r\n\r\nAnd in TensorFlow with CPU version:\r\n```python\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \r\n[GCC 5.4.0 20160609] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import tensorflow as tf\r\n>>> import numpy as np\r\n>>> \r\n>>> print tf.Session().run(tf.maximum(np.nan, 1.))\r\nnan\r\n>>> \r\n>>> print tf.Session().run(tf.maximum(1., np.nan))\r\n1.0\r\n>>> \r\n>>> a = tf.placeholder(dtype=tf.float32)\r\n>>> max_a = tf.maximum(a, 1.)\r\n>>> with tf.Session():\r\n...     print max_a.eval(feed_dict={a: np.nan})\r\n... \r\nnan\r\n>>> a = tf.placeholder(dtype=tf.float32)\r\n>>> max_a = tf.maximum(1., a)\r\n>>> with tf.Session():\r\n...      print max_a.eval(feed_dict={a: np.nan})\r\n... \r\n1.0\r\n>>> \r\n```\r\n"}