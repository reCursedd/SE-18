{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12659", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12659/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12659/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12659/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12659", "id": 253452842, "node_id": "MDU6SXNzdWUyNTM0NTI4NDI=", "number": 12659, "title": "tf.maximum does not return nan when inputs contain nan", "user": {"login": "meijun", "id": 22214696, "node_id": "MDQ6VXNlcjIyMjE0Njk2", "avatar_url": "https://avatars0.githubusercontent.com/u/22214696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meijun", "html_url": "https://github.com/meijun", "followers_url": "https://api.github.com/users/meijun/followers", "following_url": "https://api.github.com/users/meijun/following{/other_user}", "gists_url": "https://api.github.com/users/meijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/meijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meijun/subscriptions", "organizations_url": "https://api.github.com/users/meijun/orgs", "repos_url": "https://api.github.com/users/meijun/repos", "events_url": "https://api.github.com/users/meijun/events{/privacy}", "received_events_url": "https://api.github.com/users/meijun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 21, "created_at": "2017-08-28T20:51:57Z", "updated_at": "2018-11-14T19:13:27Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux CentOS 7</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.3.0</li>\n<li><strong>Python version</strong>: 2.7.13</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0/6.0</li>\n<li><strong>GPU model and memory</strong>: Tesla K40m, 11439MiB</li>\n<li><strong>Exact command to reproduce</strong>: python main.py</li>\n</ul>\n<h3>Describe the problem</h3>\n<p><code>tf.maximum(a, b)</code> should return <code>nan</code> when <code>a</code> or <code>b</code> contain <code>nan</code>. However, it does not at some cases.</p>\n<h3>Source code / logs</h3>\n<p>main.py</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\na <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nmax_a <span class=\"pl-k\">=</span> tf.maximum(a, <span class=\"pl-c1\">1</span>.)\n<span class=\"pl-k\">with</span> tf.Session():\n    <span class=\"pl-c1\">print</span> max_a.eval(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{a: np.nan})</pre></div>\n<p>The output is:</p>\n<pre><code>1.0\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux CentOS 7\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.3.0\nPython version: 2.7.13\nBazel version (if compiling from source):\nCUDA/cuDNN version: 8.0/6.0\nGPU model and memory: Tesla K40m, 11439MiB\nExact command to reproduce: python main.py\n\nDescribe the problem\ntf.maximum(a, b) should return nan when a or b contain nan. However, it does not at some cases.\nSource code / logs\nmain.py\nimport tensorflow as tf\nimport numpy as np\n\na = tf.placeholder(dtype=tf.float32)\nmax_a = tf.maximum(a, 1.)\nwith tf.Session():\n    print max_a.eval(feed_dict={a: np.nan})\nThe output is:\n1.0", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux CentOS 7\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.3.0\r\n- **Python version**: 2.7.13\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: 8.0/6.0\r\n- **GPU model and memory**: Tesla K40m, 11439MiB\r\n- **Exact command to reproduce**: python main.py\r\n\r\n### Describe the problem\r\n`tf.maximum(a, b)` should return `nan` when `a` or `b` contain `nan`. However, it does not at some cases.\r\n\r\n### Source code / logs\r\nmain.py\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\na = tf.placeholder(dtype=tf.float32)\r\nmax_a = tf.maximum(a, 1.)\r\nwith tf.Session():\r\n    print max_a.eval(feed_dict={a: np.nan})\r\n```\r\nThe output is:\r\n```\r\n1.0\r\n```"}