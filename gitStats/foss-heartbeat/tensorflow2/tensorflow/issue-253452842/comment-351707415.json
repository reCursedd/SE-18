{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/351707415", "html_url": "https://github.com/tensorflow/tensorflow/issues/12659#issuecomment-351707415", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12659", "id": 351707415, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTcwNzQxNQ==", "user": {"login": "npanpaliya", "id": 14196089, "node_id": "MDQ6VXNlcjE0MTk2MDg5", "avatar_url": "https://avatars3.githubusercontent.com/u/14196089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npanpaliya", "html_url": "https://github.com/npanpaliya", "followers_url": "https://api.github.com/users/npanpaliya/followers", "following_url": "https://api.github.com/users/npanpaliya/following{/other_user}", "gists_url": "https://api.github.com/users/npanpaliya/gists{/gist_id}", "starred_url": "https://api.github.com/users/npanpaliya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npanpaliya/subscriptions", "organizations_url": "https://api.github.com/users/npanpaliya/orgs", "repos_url": "https://api.github.com/users/npanpaliya/repos", "events_url": "https://api.github.com/users/npanpaliya/events{/privacy}", "received_events_url": "https://api.github.com/users/npanpaliya/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-14T13:14:29Z", "updated_at": "2017-12-14T13:15:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>We are also facing same problem with TF's relu operator (with GPU) test case for NaNs on Linux RHEL ppc64le.<br>\nRelu operator computes rectified max which calls Eigen's cwiseMax function.<br>\nThe behavior is weird on ppc64le shown by below code snippet-</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n#from tensorflow.python.ops import nn_ops\n\nwith tf.Session() as sess:\n  for i in range(18):\n    x = np.zeros(i) + np.nan\n    z = tf.nn.relu(tf.constant(x))\n#    z = tf.maximum(x, np.zeros(i))\n    result = sess.run(z)\n    np.isnan(result).all()\n    print(\"For i = %d, result is %s\" % (i, result))\n</code></pre>\n<p>Output of this on ppc64le:</p>\n<pre><code>For i = 0, result is []\nFor i = 1, result is [ nan]\nFor i = 2, result is [ 0.  0.]\nFor i = 3, result is [  0.   0.  nan]\nFor i = 4, result is [ 0.  0.  0.  0.]\nFor i = 5, result is [  0.   0.   0.   0.  nan]\nFor i = 6, result is [ 0.  0.  0.  0.  0.  0.]\nFor i = 7, result is [  0.   0.   0.   0.   0.   0.  nan]\nFor i = 8, result is [ 0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 9, result is [  0.   0.   0.   0.   0.   0.   0.   0.  nan]\nFor i = 10, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 11, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\nFor i = 12, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 13, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\nFor i = 14, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 15, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\nFor i = 16, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 17, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\n</code></pre>\n<p>For odd sized array, all elements in output are 0 except last element. And for even sized input array, output contains all zeros.<br>\nOn x86, output of same code is</p>\n<pre><code>For i = 0, result is []\nFor i = 1, result is [ nan]\nFor i = 2, result is [ nan  nan]\nFor i = 3, result is [ nan  nan  nan]\nFor i = 4, result is [ nan  nan  nan  nan]\nFor i = 5, result is [ nan  nan  nan  nan  nan]\nFor i = 6, result is [ nan  nan  nan  nan  nan  nan]\nFor i = 7, result is [ nan  nan  nan  nan  nan  nan  nan]\nFor i = 8, result is [ nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 9, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 10, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 11, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 12, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 13, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 14, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 15, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 16, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan\n  nan]\nFor i = 17, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\n</code></pre>\n<p>Which linux architecture this original issue is reported on? And could anyone give any pointers on how to make TF behave similar to numpy. I know underlying implementation of this max operator is in Eigen. I tried modifying Eigen's code too for ppc64le (Altivec/PacketMath.h) but no luck.<br>\nPlease refer <a href=\"https://github.com/tensorflow/tensorflow/issues/11603\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/11603/hovercard\">our issue</a> for more details.</p>", "body_text": "We are also facing same problem with TF's relu operator (with GPU) test case for NaNs on Linux RHEL ppc64le.\nRelu operator computes rectified max which calls Eigen's cwiseMax function.\nThe behavior is weird on ppc64le shown by below code snippet-\nimport tensorflow as tf\nimport numpy as np\n#from tensorflow.python.ops import nn_ops\n\nwith tf.Session() as sess:\n  for i in range(18):\n    x = np.zeros(i) + np.nan\n    z = tf.nn.relu(tf.constant(x))\n#    z = tf.maximum(x, np.zeros(i))\n    result = sess.run(z)\n    np.isnan(result).all()\n    print(\"For i = %d, result is %s\" % (i, result))\n\nOutput of this on ppc64le:\nFor i = 0, result is []\nFor i = 1, result is [ nan]\nFor i = 2, result is [ 0.  0.]\nFor i = 3, result is [  0.   0.  nan]\nFor i = 4, result is [ 0.  0.  0.  0.]\nFor i = 5, result is [  0.   0.   0.   0.  nan]\nFor i = 6, result is [ 0.  0.  0.  0.  0.  0.]\nFor i = 7, result is [  0.   0.   0.   0.   0.   0.  nan]\nFor i = 8, result is [ 0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 9, result is [  0.   0.   0.   0.   0.   0.   0.   0.  nan]\nFor i = 10, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 11, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\nFor i = 12, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 13, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\nFor i = 14, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 15, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\nFor i = 16, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\nFor i = 17, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\n\nFor odd sized array, all elements in output are 0 except last element. And for even sized input array, output contains all zeros.\nOn x86, output of same code is\nFor i = 0, result is []\nFor i = 1, result is [ nan]\nFor i = 2, result is [ nan  nan]\nFor i = 3, result is [ nan  nan  nan]\nFor i = 4, result is [ nan  nan  nan  nan]\nFor i = 5, result is [ nan  nan  nan  nan  nan]\nFor i = 6, result is [ nan  nan  nan  nan  nan  nan]\nFor i = 7, result is [ nan  nan  nan  nan  nan  nan  nan]\nFor i = 8, result is [ nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 9, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 10, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 11, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 12, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 13, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 14, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 15, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\nFor i = 16, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan\n  nan]\nFor i = 17, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\n\nWhich linux architecture this original issue is reported on? And could anyone give any pointers on how to make TF behave similar to numpy. I know underlying implementation of this max operator is in Eigen. I tried modifying Eigen's code too for ppc64le (Altivec/PacketMath.h) but no luck.\nPlease refer our issue for more details.", "body": "We are also facing same problem with TF's relu operator (with GPU) test case for NaNs on Linux RHEL ppc64le. \r\nRelu operator computes rectified max which calls Eigen's cwiseMax function. \r\nThe behavior is weird on ppc64le shown by below code snippet-\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\n#from tensorflow.python.ops import nn_ops\r\n\r\nwith tf.Session() as sess:\r\n  for i in range(18):\r\n    x = np.zeros(i) + np.nan\r\n    z = tf.nn.relu(tf.constant(x))\r\n#    z = tf.maximum(x, np.zeros(i))\r\n    result = sess.run(z)\r\n    np.isnan(result).all()\r\n    print(\"For i = %d, result is %s\" % (i, result))\r\n```\r\nOutput of this on ppc64le:\r\n```\r\nFor i = 0, result is []\r\nFor i = 1, result is [ nan]\r\nFor i = 2, result is [ 0.  0.]\r\nFor i = 3, result is [  0.   0.  nan]\r\nFor i = 4, result is [ 0.  0.  0.  0.]\r\nFor i = 5, result is [  0.   0.   0.   0.  nan]\r\nFor i = 6, result is [ 0.  0.  0.  0.  0.  0.]\r\nFor i = 7, result is [  0.   0.   0.   0.   0.   0.  nan]\r\nFor i = 8, result is [ 0.  0.  0.  0.  0.  0.  0.  0.]\r\nFor i = 9, result is [  0.   0.   0.   0.   0.   0.   0.   0.  nan]\r\nFor i = 10, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\r\nFor i = 11, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\r\nFor i = 12, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\r\nFor i = 13, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\r\nFor i = 14, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\r\nFor i = 15, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\r\nFor i = 16, result is [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\r\nFor i = 17, result is [  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  nan]\r\n```\r\nFor odd sized array, all elements in output are 0 except last element. And for even sized input array, output contains all zeros. \r\nOn x86, output of same code is\r\n```\r\nFor i = 0, result is []\r\nFor i = 1, result is [ nan]\r\nFor i = 2, result is [ nan  nan]\r\nFor i = 3, result is [ nan  nan  nan]\r\nFor i = 4, result is [ nan  nan  nan  nan]\r\nFor i = 5, result is [ nan  nan  nan  nan  nan]\r\nFor i = 6, result is [ nan  nan  nan  nan  nan  nan]\r\nFor i = 7, result is [ nan  nan  nan  nan  nan  nan  nan]\r\nFor i = 8, result is [ nan  nan  nan  nan  nan  nan  nan  nan]\r\nFor i = 9, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan]\r\nFor i = 10, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\r\nFor i = 11, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\r\nFor i = 12, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\r\nFor i = 13, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\r\nFor i = 14, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\r\nFor i = 15, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\r\nFor i = 16, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan\r\n  nan]\r\nFor i = 17, result is [ nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan  nan]\r\n```\r\n\r\nWhich linux architecture this original issue is reported on? And could anyone give any pointers on how to make TF behave similar to numpy. I know underlying implementation of this max operator is in Eigen. I tried modifying Eigen's code too for ppc64le (Altivec/PacketMath.h) but no luck.\r\nPlease refer [our issue](https://github.com/tensorflow/tensorflow/issues/11603) for more details.\r\n"}