{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/204253233", "html_url": "https://github.com/tensorflow/tensorflow/issues/1095#issuecomment-204253233", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1095", "id": 204253233, "node_id": "MDEyOklzc3VlQ29tbWVudDIwNDI1MzIzMw==", "user": {"login": "zffchen78", "id": 7943790, "node_id": "MDQ6VXNlcjc5NDM3OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7943790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zffchen78", "html_url": "https://github.com/zffchen78", "followers_url": "https://api.github.com/users/zffchen78/followers", "following_url": "https://api.github.com/users/zffchen78/following{/other_user}", "gists_url": "https://api.github.com/users/zffchen78/gists{/gist_id}", "starred_url": "https://api.github.com/users/zffchen78/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zffchen78/subscriptions", "organizations_url": "https://api.github.com/users/zffchen78/orgs", "repos_url": "https://api.github.com/users/zffchen78/repos", "events_url": "https://api.github.com/users/zffchen78/events{/privacy}", "received_events_url": "https://api.github.com/users/zffchen78/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-01T05:22:18Z", "updated_at": "2016-04-01T05:22:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p>oops. sorry that I were distracted. But yes, you are welcome to extend the code to support gradient of a pyfunc. What I have in mind may be slightly different from your sketch. I'm thinking you can change<br>\ntf.py_func(lambda, ...) to take an extra argument grad_func=lambda. In the py_func.py's registry, keep lambda and grad_lambda keyed by the unique token. In the PyFuncGrad(op), dispatch to grad_lambda based on op.attr['token'].</p>", "body_text": "oops. sorry that I were distracted. But yes, you are welcome to extend the code to support gradient of a pyfunc. What I have in mind may be slightly different from your sketch. I'm thinking you can change\ntf.py_func(lambda, ...) to take an extra argument grad_func=lambda. In the py_func.py's registry, keep lambda and grad_lambda keyed by the unique token. In the PyFuncGrad(op), dispatch to grad_lambda based on op.attr['token'].", "body": "oops. sorry that I were distracted. But yes, you are welcome to extend the code to support gradient of a pyfunc. What I have in mind may be slightly different from your sketch. I'm thinking you can change\ntf.py_func(lambda, ...) to take an extra argument grad_func=lambda. In the py_func.py's registry, keep lambda and grad_lambda keyed by the unique token. In the PyFuncGrad(op), dispatch to grad_lambda based on op.attr['token'].\n"}