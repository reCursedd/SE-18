{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424524631", "html_url": "https://github.com/tensorflow/tensorflow/issues/22481#issuecomment-424524631", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22481", "id": 424524631, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDUyNDYzMQ==", "user": {"login": "axch", "id": 233710, "node_id": "MDQ6VXNlcjIzMzcxMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/233710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axch", "html_url": "https://github.com/axch", "followers_url": "https://api.github.com/users/axch/followers", "following_url": "https://api.github.com/users/axch/following{/other_user}", "gists_url": "https://api.github.com/users/axch/gists{/gist_id}", "starred_url": "https://api.github.com/users/axch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axch/subscriptions", "organizations_url": "https://api.github.com/users/axch/orgs", "repos_url": "https://api.github.com/users/axch/repos", "events_url": "https://api.github.com/users/axch/events{/privacy}", "received_events_url": "https://api.github.com/users/axch/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-25T22:36:04Z", "updated_at": "2018-09-25T22:36:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I don't think the cost is that bad: The function already does a complete sort, so the NaN check should be asymptotically cheaper.  There shouldn't be any control flow, either: compute a mask of which batch members have NaNs, then tf.where on that mask to select either NaN or the sort+index result.</p>\n<p>I don't think this is a job for <code>validate_args</code> -- having a NaN argument isn't invalid, it just means a NaN answer.  Maybe instead add <code>allow_nan_stats=True</code> and raise an exception if there is a NaN in the input and this flag is false?</p>", "body_text": "I don't think the cost is that bad: The function already does a complete sort, so the NaN check should be asymptotically cheaper.  There shouldn't be any control flow, either: compute a mask of which batch members have NaNs, then tf.where on that mask to select either NaN or the sort+index result.\nI don't think this is a job for validate_args -- having a NaN argument isn't invalid, it just means a NaN answer.  Maybe instead add allow_nan_stats=True and raise an exception if there is a NaN in the input and this flag is false?", "body": "I don't think the cost is that bad: The function already does a complete sort, so the NaN check should be asymptotically cheaper.  There shouldn't be any control flow, either: compute a mask of which batch members have NaNs, then tf.where on that mask to select either NaN or the sort+index result.\r\n\r\nI don't think this is a job for `validate_args` -- having a NaN argument isn't invalid, it just means a NaN answer.  Maybe instead add `allow_nan_stats=True` and raise an exception if there is a NaN in the input and this flag is false?"}