{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424523029", "html_url": "https://github.com/tensorflow/tensorflow/issues/22481#issuecomment-424523029", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22481", "id": 424523029, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDUyMzAyOQ==", "user": {"login": "jvdillon", "id": 1137078, "node_id": "MDQ6VXNlcjExMzcwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1137078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvdillon", "html_url": "https://github.com/jvdillon", "followers_url": "https://api.github.com/users/jvdillon/followers", "following_url": "https://api.github.com/users/jvdillon/following{/other_user}", "gists_url": "https://api.github.com/users/jvdillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvdillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvdillon/subscriptions", "organizations_url": "https://api.github.com/users/jvdillon/orgs", "repos_url": "https://api.github.com/users/jvdillon/repos", "events_url": "https://api.github.com/users/jvdillon/events{/privacy}", "received_events_url": "https://api.github.com/users/jvdillon/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-25T22:28:49Z", "updated_at": "2018-09-25T22:29:50Z", "author_association": "MEMBER", "body_html": "<p>Always tough to decide how to handle NaN.  I think the best thing would be to add <code>validate_args</code> which when true would enable an assertion which fires on detection of NaN.</p>\n<p>I think we should be hesitant to do anything more (such as pruning NaN's, masking them with some user specifiable value, etc) since this would potentially incur a cost whether or not the input actually had NaNs. (And this because TFP: avoids <code>tf.cond</code> if possible and has a strict \"only pay for what you eat\" policy.)</p>\n<p>Thoughts?</p>", "body_text": "Always tough to decide how to handle NaN.  I think the best thing would be to add validate_args which when true would enable an assertion which fires on detection of NaN.\nI think we should be hesitant to do anything more (such as pruning NaN's, masking them with some user specifiable value, etc) since this would potentially incur a cost whether or not the input actually had NaNs. (And this because TFP: avoids tf.cond if possible and has a strict \"only pay for what you eat\" policy.)\nThoughts?", "body": "Always tough to decide how to handle NaN.  I think the best thing would be to add `validate_args` which when true would enable an assertion which fires on detection of NaN.\r\n\r\nI think we should be hesitant to do anything more (such as pruning NaN's, masking them with some user specifiable value, etc) since this would potentially incur a cost whether or not the input actually had NaNs. (And this because TFP: avoids `tf.cond` if possible and has a strict \"only pay for what you eat\" policy.)\r\n\r\nThoughts?"}