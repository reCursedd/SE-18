{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22481", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22481/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22481/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22481/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22481", "id": 363120908, "node_id": "MDU6SXNzdWUzNjMxMjA5MDg=", "number": 22481, "title": "Inconsistent behavior in tf.contrib.distributions.percentile for NaN values", "user": {"login": "javidcf", "id": 1098280, "node_id": "MDQ6VXNlcjEwOTgyODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1098280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javidcf", "html_url": "https://github.com/javidcf", "followers_url": "https://api.github.com/users/javidcf/followers", "following_url": "https://api.github.com/users/javidcf/following{/other_user}", "gists_url": "https://api.github.com/users/javidcf/gists{/gist_id}", "starred_url": "https://api.github.com/users/javidcf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javidcf/subscriptions", "organizations_url": "https://api.github.com/users/javidcf/orgs", "repos_url": "https://api.github.com/users/javidcf/repos", "events_url": "https://api.github.com/users/javidcf/events{/privacy}", "received_events_url": "https://api.github.com/users/javidcf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "axch", "id": 233710, "node_id": "MDQ6VXNlcjIzMzcxMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/233710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axch", "html_url": "https://github.com/axch", "followers_url": "https://api.github.com/users/axch/followers", "following_url": "https://api.github.com/users/axch/following{/other_user}", "gists_url": "https://api.github.com/users/axch/gists{/gist_id}", "starred_url": "https://api.github.com/users/axch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axch/subscriptions", "organizations_url": "https://api.github.com/users/axch/orgs", "repos_url": "https://api.github.com/users/axch/repos", "events_url": "https://api.github.com/users/axch/events{/privacy}", "received_events_url": "https://api.github.com/users/axch/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "axch", "id": 233710, "node_id": "MDQ6VXNlcjIzMzcxMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/233710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axch", "html_url": "https://github.com/axch", "followers_url": "https://api.github.com/users/axch/followers", "following_url": "https://api.github.com/users/axch/following{/other_user}", "gists_url": "https://api.github.com/users/axch/gists{/gist_id}", "starred_url": "https://api.github.com/users/axch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axch/subscriptions", "organizations_url": "https://api.github.com/users/axch/orgs", "repos_url": "https://api.github.com/users/axch/repos", "events_url": "https://api.github.com/users/axch/events{/privacy}", "received_events_url": "https://api.github.com/users/axch/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-09-24T12:17:27Z", "updated_at": "2018-11-10T18:51:09Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: NA</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.10.0-rc1-19-g656e7a2b34 1.10.0</li>\n<li><strong>Python version</strong>: 3.6.6 (Anaconda)</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>: NA</li>\n<li><strong>Exact command to reproduce</strong>: NA</li>\n</ul>\n<h3>Describe the problem</h3>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/contrib/distributions/percentile\" rel=\"nofollow\"><code>tf.contrib.distributions.percentile</code></a> behaves inconsistently when NaN values are given. While the documentation does not explicitly states how this case should be handled, one would normally expect to always receive NaN, or maybe ignore them in the computation (compute the percentile of non-NaN values), or even replace them with 0. But the current logic seems to somehow depend on the order of the values in the input: trying to compute the median of <code>[1.0, NaN]</code> results in <code>1.0</code>, while for <code>[NaN, 1.0]</code> it is <code>NaN</code>.</p>\n<p>The behavior seems to be different also between CPU and GPU. I obtained the results above while running on CPU. The same test on GPU (CUDA 9.0, CUDNN 7, Titan V) produced <code>NaN</code> in both cases; however, the computed median on GPU for <code>[1.0, 1.0, NaN]</code> was again <code>1.0</code>.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> math\n\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>])\nm <span class=\"pl-k\">=</span> tf.contrib.distributions.percentile(x, <span class=\"pl-v\">q</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">50</span>., <span class=\"pl-v\">validate_args</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    <span class=\"pl-c1\">print</span>(sess.run(m, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{ x: [<span class=\"pl-c1\">1</span>, math.nan] }))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Prints 1.0</span>\n    <span class=\"pl-c1\">print</span>(sess.run(m, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{ x: [math.nan, <span class=\"pl-c1\">1</span>] }))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Prints nan</span></pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): v1.10.0-rc1-19-g656e7a2b34 1.10.0\nPython version: 3.6.6 (Anaconda)\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: NA\nGPU model and memory: NA\nExact command to reproduce: NA\n\nDescribe the problem\ntf.contrib.distributions.percentile behaves inconsistently when NaN values are given. While the documentation does not explicitly states how this case should be handled, one would normally expect to always receive NaN, or maybe ignore them in the computation (compute the percentile of non-NaN values), or even replace them with 0. But the current logic seems to somehow depend on the order of the values in the input: trying to compute the median of [1.0, NaN] results in 1.0, while for [NaN, 1.0] it is NaN.\nThe behavior seems to be different also between CPU and GPU. I obtained the results above while running on CPU. The same test on GPU (CUDA 9.0, CUDNN 7, Titan V) produced NaN in both cases; however, the computed median on GPU for [1.0, 1.0, NaN] was again 1.0.\nSource code / logs\nimport tensorflow as tf\nimport math\n\nx = tf.placeholder(tf.float32, [None])\nm = tf.contrib.distributions.percentile(x, q=50., validate_args=True)\nwith tf.Session() as sess:\n    print(sess.run(m, feed_dict={ x: [1, math.nan] }))  # Prints 1.0\n    print(sess.run(m, feed_dict={ x: [math.nan, 1] }))  # Prints nan", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: NA\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: v1.10.0-rc1-19-g656e7a2b34 1.10.0\r\n- **Python version**: 3.6.6 (Anaconda)\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**: NA\r\n- **Exact command to reproduce**: NA\r\n\r\n### Describe the problem\r\n[`tf.contrib.distributions.percentile`](https://www.tensorflow.org/api_docs/python/tf/contrib/distributions/percentile) behaves inconsistently when NaN values are given. While the documentation does not explicitly states how this case should be handled, one would normally expect to always receive NaN, or maybe ignore them in the computation (compute the percentile of non-NaN values), or even replace them with 0. But the current logic seems to somehow depend on the order of the values in the input: trying to compute the median of `[1.0, NaN]` results in `1.0`, while for `[NaN, 1.0]` it is `NaN`.\r\n\r\nThe behavior seems to be different also between CPU and GPU. I obtained the results above while running on CPU. The same test on GPU (CUDA 9.0, CUDNN 7, Titan V) produced `NaN` in both cases; however, the computed median on GPU for `[1.0, 1.0, NaN]` was again `1.0`.\r\n\r\n### Source code / logs\r\n\r\n```py\r\nimport tensorflow as tf\r\nimport math\r\n\r\nx = tf.placeholder(tf.float32, [None])\r\nm = tf.contrib.distributions.percentile(x, q=50., validate_args=True)\r\nwith tf.Session() as sess:\r\n    print(sess.run(m, feed_dict={ x: [1, math.nan] }))  # Prints 1.0\r\n    print(sess.run(m, feed_dict={ x: [math.nan, 1] }))  # Prints nan\r\n```"}