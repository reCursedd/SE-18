{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424525382", "html_url": "https://github.com/tensorflow/tensorflow/issues/22481#issuecomment-424525382", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22481", "id": 424525382, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDUyNTM4Mg==", "user": {"login": "jvdillon", "id": 1137078, "node_id": "MDQ6VXNlcjExMzcwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1137078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvdillon", "html_url": "https://github.com/jvdillon", "followers_url": "https://api.github.com/users/jvdillon/followers", "following_url": "https://api.github.com/users/jvdillon/following{/other_user}", "gists_url": "https://api.github.com/users/jvdillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvdillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvdillon/subscriptions", "organizations_url": "https://api.github.com/users/jvdillon/orgs", "repos_url": "https://api.github.com/users/jvdillon/repos", "events_url": "https://api.github.com/users/jvdillon/events{/privacy}", "received_events_url": "https://api.github.com/users/jvdillon/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-25T22:39:24Z", "updated_at": "2018-09-25T22:39:31Z", "author_association": "MEMBER", "body_html": "<p><code>allow_nan_stats=True</code> sgtm.  However our policy is pretty strict, asymptotic costs or otherwise. We could add another percentile function which masks <code>NaN</code>, however that seems weirdly specific. Can you make a case why this should be handled on the TFP side? Ie, a user can do this today:</p>\n<pre><code> percentile(tfp.where(tf.isnan(x),tf.zeros_like(x),x))\n</code></pre>\n<p>The advantage of this is its fully self-documenting and nearly as terse as if percentile took a mask arg.</p>", "body_text": "allow_nan_stats=True sgtm.  However our policy is pretty strict, asymptotic costs or otherwise. We could add another percentile function which masks NaN, however that seems weirdly specific. Can you make a case why this should be handled on the TFP side? Ie, a user can do this today:\n percentile(tfp.where(tf.isnan(x),tf.zeros_like(x),x))\n\nThe advantage of this is its fully self-documenting and nearly as terse as if percentile took a mask arg.", "body": "`allow_nan_stats=True` sgtm.  However our policy is pretty strict, asymptotic costs or otherwise. We could add another percentile function which masks `NaN`, however that seems weirdly specific. Can you make a case why this should be handled on the TFP side? Ie, a user can do this today:\r\n\r\n     percentile(tfp.where(tf.isnan(x),tf.zeros_like(x),x))\r\n\r\nThe advantage of this is its fully self-documenting and nearly as terse as if percentile took a mask arg."}