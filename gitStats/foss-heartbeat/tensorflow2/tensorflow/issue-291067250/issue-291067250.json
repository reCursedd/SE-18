{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16347", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16347/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16347/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16347/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16347", "id": 291067250, "node_id": "MDU6SXNzdWUyOTEwNjcyNTA=", "number": 16347, "title": "Golang API to serialize data into tf.Example protos(tfrecords)", "user": {"login": "wenruij", "id": 5120224, "node_id": "MDQ6VXNlcjUxMjAyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5120224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenruij", "html_url": "https://github.com/wenruij", "followers_url": "https://api.github.com/users/wenruij/followers", "following_url": "https://api.github.com/users/wenruij/following{/other_user}", "gists_url": "https://api.github.com/users/wenruij/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenruij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenruij/subscriptions", "organizations_url": "https://api.github.com/users/wenruij/orgs", "repos_url": "https://api.github.com/users/wenruij/repos", "events_url": "https://api.github.com/users/wenruij/events{/privacy}", "received_events_url": "https://api.github.com/users/wenruij/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-24T02:53:13Z", "updated_at": "2018-01-25T06:51:52Z", "closed_at": "2018-01-25T06:51:38Z", "author_association": "NONE", "body_html": "<p>The Golang api <a href=\"https://godoc.org/github.com/tensorflow/tensorflow/tensorflow/go#Tensor.WriteContentsTo\" rel=\"nofollow\">WriteContentsTo</a> can be used to writes the serialized contents of a tensor to io.Writer, where the tensor is built from golang scalars, slices, and arrays.</p>\n<p>Yet there's not a Golang API to serialize data into tf.Example protos(tfrecords).</p>\n<p>For example, when i want serialize a libsvm into tf.Example protos, i can do this by:</p>\n<pre><code>def libsvm2tfrecords(data_source, target_dir, delimiter='\\t'):\n    \"\"\"\n    a single file should not contain lines more than 1000,000, or we should use libsvm2proto_par\n    :param data_source: libsvm file path\n    :param target_dir: dir to storage the serialize proto file\n    :param delimiter: delimiter for csv reader\n    :return:\n    \"\"\"\n    if not os.path.isfile(data_source):\n        raise ValueError('data file passed do not exist or not a file')\n\n    file_name = os.path.join(target_dir, os.path.splitext(\n        os.path.basename(data_source))[0] + '.tfrecords')\n    writer = tf.python_io.TFRecordWriter(file_name)\n    start = datetime.now()\n    line_c = 0\n    with open(data_source, 'rb') as rf:\n        f_reader = csv.reader(rf, delimiter=delimiter, quotechar='|')\n        for row in f_reader:\n            line_c += 1\n            feature = dict()\n            indexes = []\n            values = []\n            feature.update({'label': _float_feature([float(row[0])])})\n            for e in row[1:]:\n                index, value = e.split(':')\n                indexes.append(int(index))\n                values.append(float(value))\n                feature.update({'index': _int64_feature(indexes)})\n                feature.update({'value': _float_feature(values)})\n\n            example = tf.train.Example(features=tf.train.Features(feature=feature))\n            writer.write(example.SerializeToString())\n\n        writer.close()\n        end = datetime.now()\n\n        print(\"- consumed time: %ds for %s\" % ((end-start).seconds, data_source))\n</code></pre>\n<p>BUT Golang api does not seem to be able to achieve this.</p>", "body_text": "The Golang api WriteContentsTo can be used to writes the serialized contents of a tensor to io.Writer, where the tensor is built from golang scalars, slices, and arrays.\nYet there's not a Golang API to serialize data into tf.Example protos(tfrecords).\nFor example, when i want serialize a libsvm into tf.Example protos, i can do this by:\ndef libsvm2tfrecords(data_source, target_dir, delimiter='\\t'):\n    \"\"\"\n    a single file should not contain lines more than 1000,000, or we should use libsvm2proto_par\n    :param data_source: libsvm file path\n    :param target_dir: dir to storage the serialize proto file\n    :param delimiter: delimiter for csv reader\n    :return:\n    \"\"\"\n    if not os.path.isfile(data_source):\n        raise ValueError('data file passed do not exist or not a file')\n\n    file_name = os.path.join(target_dir, os.path.splitext(\n        os.path.basename(data_source))[0] + '.tfrecords')\n    writer = tf.python_io.TFRecordWriter(file_name)\n    start = datetime.now()\n    line_c = 0\n    with open(data_source, 'rb') as rf:\n        f_reader = csv.reader(rf, delimiter=delimiter, quotechar='|')\n        for row in f_reader:\n            line_c += 1\n            feature = dict()\n            indexes = []\n            values = []\n            feature.update({'label': _float_feature([float(row[0])])})\n            for e in row[1:]:\n                index, value = e.split(':')\n                indexes.append(int(index))\n                values.append(float(value))\n                feature.update({'index': _int64_feature(indexes)})\n                feature.update({'value': _float_feature(values)})\n\n            example = tf.train.Example(features=tf.train.Features(feature=feature))\n            writer.write(example.SerializeToString())\n\n        writer.close()\n        end = datetime.now()\n\n        print(\"- consumed time: %ds for %s\" % ((end-start).seconds, data_source))\n\nBUT Golang api does not seem to be able to achieve this.", "body": "The Golang api [WriteContentsTo](https://godoc.org/github.com/tensorflow/tensorflow/tensorflow/go#Tensor.WriteContentsTo) can be used to writes the serialized contents of a tensor to io.Writer, where the tensor is built from golang scalars, slices, and arrays. \r\n\r\nYet there's not a Golang API to serialize data into tf.Example protos(tfrecords).\r\n\r\nFor example, when i want serialize a libsvm into tf.Example protos, i can do this by:\r\n```\r\ndef libsvm2tfrecords(data_source, target_dir, delimiter='\\t'):\r\n    \"\"\"\r\n    a single file should not contain lines more than 1000,000, or we should use libsvm2proto_par\r\n    :param data_source: libsvm file path\r\n    :param target_dir: dir to storage the serialize proto file\r\n    :param delimiter: delimiter for csv reader\r\n    :return:\r\n    \"\"\"\r\n    if not os.path.isfile(data_source):\r\n        raise ValueError('data file passed do not exist or not a file')\r\n\r\n    file_name = os.path.join(target_dir, os.path.splitext(\r\n        os.path.basename(data_source))[0] + '.tfrecords')\r\n    writer = tf.python_io.TFRecordWriter(file_name)\r\n    start = datetime.now()\r\n    line_c = 0\r\n    with open(data_source, 'rb') as rf:\r\n        f_reader = csv.reader(rf, delimiter=delimiter, quotechar='|')\r\n        for row in f_reader:\r\n            line_c += 1\r\n            feature = dict()\r\n            indexes = []\r\n            values = []\r\n            feature.update({'label': _float_feature([float(row[0])])})\r\n            for e in row[1:]:\r\n                index, value = e.split(':')\r\n                indexes.append(int(index))\r\n                values.append(float(value))\r\n                feature.update({'index': _int64_feature(indexes)})\r\n                feature.update({'value': _float_feature(values)})\r\n\r\n            example = tf.train.Example(features=tf.train.Features(feature=feature))\r\n            writer.write(example.SerializeToString())\r\n\r\n        writer.close()\r\n        end = datetime.now()\r\n\r\n        print(\"- consumed time: %ds for %s\" % ((end-start).seconds, data_source))\r\n```\r\nBUT Golang api does not seem to be able to achieve this. "}