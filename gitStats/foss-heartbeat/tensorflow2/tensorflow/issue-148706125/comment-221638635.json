{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/221638635", "html_url": "https://github.com/tensorflow/tensorflow/issues/1968#issuecomment-221638635", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1968", "id": 221638635, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTYzODYzNQ==", "user": {"login": "concretevitamin", "id": 592670, "node_id": "MDQ6VXNlcjU5MjY3MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/592670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/concretevitamin", "html_url": "https://github.com/concretevitamin", "followers_url": "https://api.github.com/users/concretevitamin/followers", "following_url": "https://api.github.com/users/concretevitamin/following{/other_user}", "gists_url": "https://api.github.com/users/concretevitamin/gists{/gist_id}", "starred_url": "https://api.github.com/users/concretevitamin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/concretevitamin/subscriptions", "organizations_url": "https://api.github.com/users/concretevitamin/orgs", "repos_url": "https://api.github.com/users/concretevitamin/repos", "events_url": "https://api.github.com/users/concretevitamin/events{/privacy}", "received_events_url": "https://api.github.com/users/concretevitamin/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-25T16:56:37Z", "updated_at": "2016-05-25T16:56:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2789456\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/siddharth-agrawal\">@siddharth-agrawal</a> I think this can be implemented entirely in Python.  In <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/array_ops.py\">array_ops.py</a>, you could add a <code>def rank(...)</code> function with the correct signature and convention.  Inside that, if <code>isinstance(t, ops.SparseTensor)</code>, you can return <code>size(t.shape)</code>, because the number of elements in <code>t.shape</code> is the rank of <code>t</code>.</p>\n<p>(More explanation: right now, when <code>tf.rank()</code> is called, what really happens is <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/array_ops.py#L89\">this line</a>. So once we override it properly, the Python frontend can handle the dispatch. )</p>", "body_text": "@siddharth-agrawal I think this can be implemented entirely in Python.  In array_ops.py, you could add a def rank(...) function with the correct signature and convention.  Inside that, if isinstance(t, ops.SparseTensor), you can return size(t.shape), because the number of elements in t.shape is the rank of t.\n(More explanation: right now, when tf.rank() is called, what really happens is this line. So once we override it properly, the Python frontend can handle the dispatch. )", "body": "@siddharth-agrawal I think this can be implemented entirely in Python.  In [array_ops.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/array_ops.py), you could add a `def rank(...)` function with the correct signature and convention.  Inside that, if `isinstance(t, ops.SparseTensor)`, you can return `size(t.shape)`, because the number of elements in `t.shape` is the rank of `t`. \n\n(More explanation: right now, when `tf.rank()` is called, what really happens is [this line](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/array_ops.py#L89). So once we override it properly, the Python frontend can handle the dispatch. )\n"}