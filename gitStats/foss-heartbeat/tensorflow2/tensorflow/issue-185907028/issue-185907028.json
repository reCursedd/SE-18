{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5260", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5260/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5260/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5260/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5260", "id": 185907028, "node_id": "MDU6SXNzdWUxODU5MDcwMjg=", "number": 5260, "title": "Why the embedding_lookup() returns zeros when the index exceed embedding matrix size?", "user": {"login": "kkjh0723", "id": 10104262, "node_id": "MDQ6VXNlcjEwMTA0MjYy", "avatar_url": "https://avatars3.githubusercontent.com/u/10104262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kkjh0723", "html_url": "https://github.com/kkjh0723", "followers_url": "https://api.github.com/users/kkjh0723/followers", "following_url": "https://api.github.com/users/kkjh0723/following{/other_user}", "gists_url": "https://api.github.com/users/kkjh0723/gists{/gist_id}", "starred_url": "https://api.github.com/users/kkjh0723/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kkjh0723/subscriptions", "organizations_url": "https://api.github.com/users/kkjh0723/orgs", "repos_url": "https://api.github.com/users/kkjh0723/repos", "events_url": "https://api.github.com/users/kkjh0723/events{/privacy}", "received_events_url": "https://api.github.com/users/kkjh0723/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-10-28T12:06:26Z", "updated_at": "2016-11-28T19:21:31Z", "closed_at": "2016-10-29T00:49:03Z", "author_association": "NONE", "body_html": "<p>NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.</p>\n<p>I'm now using TF version 0.10.0 installed from source.<br>\nI'm not sure its a bug or intended implementation but the <code>embedding_lookup()</code> returns zeros when the index exceed embedding matrix size. For example,</p>\n<pre><code> import tensorflow as tf\n import numpy as np\n\n embd_mat = np.linspace(1,10,10).reshape([10,1])*np.array([1,2,3]).reshape([1,3])\n idx = np.linspace(0,19,20)\n\n embd_in = tf.placeholder(tf.float32,[10,3])\n idx_in = tf.placeholder(tf.int32,[20])\n\n output = tf.nn.embedding_lookup(embd_in,idx_in)\n\n with tf.Session() as sess:\n     sess.run(tf.initialize_all_variables())\n\n     embd_out = sess.run(output,feed_dict={embd_in:embd_mat, idx_in:idx})\n\n     print embd_out\n</code></pre>\n<p>The output of above code is,</p>\n<pre><code>[[  1.   2.   3.]\n [  2.   4.   6.]\n [  3.   6.   9.]\n [  4.   8.  12.]\n [  5.  10.  15.]\n [  6.  12.  18.]\n [  7.  14.  21.]\n [  8.  16.  24.]\n [  9.  18.  27.]\n [ 10.  20.  30.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]]\n</code></pre>\n<p>Is there any reason it returns zeros not raises an error?<br>\nI think that case happens only when programmers make a mistake.<br>\nUnless there is any specific reason which I don't know of, I think it should raise a value error that the index is exceeding the matrix size.</p>", "body_text": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\nI'm now using TF version 0.10.0 installed from source.\nI'm not sure its a bug or intended implementation but the embedding_lookup() returns zeros when the index exceed embedding matrix size. For example,\n import tensorflow as tf\n import numpy as np\n\n embd_mat = np.linspace(1,10,10).reshape([10,1])*np.array([1,2,3]).reshape([1,3])\n idx = np.linspace(0,19,20)\n\n embd_in = tf.placeholder(tf.float32,[10,3])\n idx_in = tf.placeholder(tf.int32,[20])\n\n output = tf.nn.embedding_lookup(embd_in,idx_in)\n\n with tf.Session() as sess:\n     sess.run(tf.initialize_all_variables())\n\n     embd_out = sess.run(output,feed_dict={embd_in:embd_mat, idx_in:idx})\n\n     print embd_out\n\nThe output of above code is,\n[[  1.   2.   3.]\n [  2.   4.   6.]\n [  3.   6.   9.]\n [  4.   8.  12.]\n [  5.  10.  15.]\n [  6.  12.  18.]\n [  7.  14.  21.]\n [  8.  16.  24.]\n [  9.  18.  27.]\n [ 10.  20.  30.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]]\n\nIs there any reason it returns zeros not raises an error?\nI think that case happens only when programmers make a mistake.\nUnless there is any specific reason which I don't know of, I think it should raise a value error that the index is exceeding the matrix size.", "body": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\n\nI'm now using TF version 0.10.0 installed from source.\nI'm not sure its a bug or intended implementation but the `embedding_lookup()` returns zeros when the index exceed embedding matrix size. For example,\n\n```\n import tensorflow as tf\n import numpy as np\n\n embd_mat = np.linspace(1,10,10).reshape([10,1])*np.array([1,2,3]).reshape([1,3])\n idx = np.linspace(0,19,20)\n\n embd_in = tf.placeholder(tf.float32,[10,3])\n idx_in = tf.placeholder(tf.int32,[20])\n\n output = tf.nn.embedding_lookup(embd_in,idx_in)\n\n with tf.Session() as sess:\n     sess.run(tf.initialize_all_variables())\n\n     embd_out = sess.run(output,feed_dict={embd_in:embd_mat, idx_in:idx})\n\n     print embd_out\n```\n\nThe output of above code is,\n\n```\n[[  1.   2.   3.]\n [  2.   4.   6.]\n [  3.   6.   9.]\n [  4.   8.  12.]\n [  5.  10.  15.]\n [  6.  12.  18.]\n [  7.  14.  21.]\n [  8.  16.  24.]\n [  9.  18.  27.]\n [ 10.  20.  30.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]\n [  0.   0.   0.]]\n```\n\nIs there any reason it returns zeros not raises an error?\nI think that case happens only when programmers make a mistake.\nUnless there is any specific reason which I don't know of, I think it should raise a value error that the index is exceeding the matrix size.    \n"}