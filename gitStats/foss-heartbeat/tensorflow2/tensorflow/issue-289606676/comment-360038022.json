{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/360038022", "html_url": "https://github.com/tensorflow/tensorflow/pull/16220#issuecomment-360038022", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16220", "id": 360038022, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDAzODAyMg==", "user": {"login": "lspvic", "id": 4335658, "node_id": "MDQ6VXNlcjQzMzU2NTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/4335658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lspvic", "html_url": "https://github.com/lspvic", "followers_url": "https://api.github.com/users/lspvic/followers", "following_url": "https://api.github.com/users/lspvic/following{/other_user}", "gists_url": "https://api.github.com/users/lspvic/gists{/gist_id}", "starred_url": "https://api.github.com/users/lspvic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lspvic/subscriptions", "organizations_url": "https://api.github.com/users/lspvic/orgs", "repos_url": "https://api.github.com/users/lspvic/repos", "events_url": "https://api.github.com/users/lspvic/events{/privacy}", "received_events_url": "https://api.github.com/users/lspvic/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-24T06:54:30Z", "updated_at": "2018-01-24T06:54:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16907534\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rmlarsen\">@rmlarsen</a> Thanks for your advise. Now this PR do the following things and should be compatible with previous codes:</p>\n<ol>\n<li>Fix the bug that scalar <code>axes</code> will not output correct tensor shape. Test is add for <code>tensordot(a, b, 1)</code> on <code>test_partial_shape_inference</code>;</li>\n<li><code>axes</code> can be set to 0 now while previous codes just disable 0. Actually <code>axes=0</code> is supported before with the equivalent format <code>axes=[[[], []]</code>. Tests for <code>axes=0</code> and <code>axes=[[], []]</code> are added and they both works well.</li>\n<li>Additional check on that <code>axes</code> scalar values must be less or equal than either of input tensors. Test case is also added.</li>\n</ol>", "body_text": "@rmlarsen Thanks for your advise. Now this PR do the following things and should be compatible with previous codes:\n\nFix the bug that scalar axes will not output correct tensor shape. Test is add for tensordot(a, b, 1) on test_partial_shape_inference;\naxes can be set to 0 now while previous codes just disable 0. Actually axes=0 is supported before with the equivalent format axes=[[[], []]. Tests for axes=0 and axes=[[], []] are added and they both works well.\nAdditional check on that axes scalar values must be less or equal than either of input tensors. Test case is also added.", "body": "@rmlarsen Thanks for your advise. Now this PR do the following things and should be compatible with previous codes:\r\n1. Fix the bug that scalar `axes` will not output correct tensor shape. Test is add for `tensordot(a, b, 1)` on `test_partial_shape_inference`;\r\n2. `axes` can be set to 0 now while previous codes just disable 0. Actually `axes=0` is supported before with the equivalent format `axes=[[[], []]`. Tests for `axes=0` and `axes=[[], []]` are added and they both works well.\r\n3. Additional check on that `axes` scalar values must be less or equal than either of input tensors. Test case is also added."}