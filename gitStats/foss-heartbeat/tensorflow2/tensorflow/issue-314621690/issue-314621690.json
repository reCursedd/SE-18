{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18553", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18553/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18553/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18553/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/18553", "id": 314621690, "node_id": "MDExOlB1bGxSZXF1ZXN0MTgxODM5Mzcx", "number": 18553, "title": "libtensorflow_cc.so on Android", "user": {"login": "linusmartensson", "id": 452169, "node_id": "MDQ6VXNlcjQ1MjE2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/452169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linusmartensson", "html_url": "https://github.com/linusmartensson", "followers_url": "https://api.github.com/users/linusmartensson/followers", "following_url": "https://api.github.com/users/linusmartensson/following{/other_user}", "gists_url": "https://api.github.com/users/linusmartensson/gists{/gist_id}", "starred_url": "https://api.github.com/users/linusmartensson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linusmartensson/subscriptions", "organizations_url": "https://api.github.com/users/linusmartensson/orgs", "repos_url": "https://api.github.com/users/linusmartensson/repos", "events_url": "https://api.github.com/users/linusmartensson/events{/privacy}", "received_events_url": "https://api.github.com/users/linusmartensson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-04-16T12:07:26Z", "updated_at": "2018-07-24T08:14:29Z", "closed_at": "2018-07-24T08:14:29Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18553", "html_url": "https://github.com/tensorflow/tensorflow/pull/18553", "diff_url": "https://github.com/tensorflow/tensorflow/pull/18553.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/18553.patch"}, "body_html": "<p>Hello again team TF!</p>\n<p>After revisions, I made a more stable solution for building libtensorflow_cc.so on android that should avoid breaking common build scenarios. There may be issues if attempting to build for non-android armeabi-v7a or arm64-v8a, but I'm unable to confirm.</p>\n<p>I found issues with android NDK r15 and bazel 0.11.0, forcing an update to NDK r16 and bazel 0.12.0 to ensure a working android build. As part of this, I also made a switch to the new libc++ version of STL in android for the tensorflow build, which does not suffer from the near proximity to GPLv3 with gnustl_static/shared.<br>\nI am not certain, but it seems like the default --config=android chain still uses gnustl libraries, which are not fully C++11-compatible and due to be deprecated in the android NDK.</p>\n<p>A terrifying build command is still being used:<br>\nbazel build -c opt --config=monolithic --android_crosstool_top=@androidndk//:toolchain-libcpp --crosstool_top=@androidndk//:toolchain-libcpp --host_crosstool_top=@bazel_tools//tools/cpp:toolchain --cpu=$ARCH //tensorflow:libtensorflow_cc.so --cxxopt=\"-std=c++11\" --copt=\"-DMDB_USE_ROBUST=0\" --cxxopt=\"-DTENSORFLOW_DISABLE_META\" --cxxopt=\"-DEIGEN_HAS_C99_MATH\" --cxxopt=\"-Wno-c++11-narrowing\" --copt=\"-DS_IREAD=00400\" --copt=\"-DS_IWRITE=00200\" --verbose_failures --copt=\"-DABSL_BASE_POLICY_CHECKS_H_\" --copt=\"-DPNG_ARM_NEON_OPT=0\"</p>\n<p>Most of these are to avoid build issues within libraries that do not have specific checks in place for android toolchains. I presume the build command could be shortened by introducing the commands into the android_cc flag and the specific libraries in question, but it's out of scope for my case right now.<br>\nSome of these flags may also have been resolved by using @androidndk//:toolchain-libcpp, especially the need for TENSORFLOW_DISABLE_META, EIGEN_HAS_C99_MATH and MDB_USE_ROBUST, and DS_*, but I did not have time to test all variants.</p>\n<p>To enable the C++ API, I created a new config, android_cc, which is checked for in all applicable places. The - beyond all others - most common fault is -lpthread being set in various files and libraries. This may be possible to resolve by instead using \"-pthread\", which is reportedly a flag for specifying pthread inclusion in a platform-compatible manner.</p>\n<p>Further, I had to add build files for gemmlowp, protobuf_archive and boringssl, to correct similar flag issues. Ideally, these should be resolved in the respective packages.</p>\n<p>A remaining problem is that tensorflow is currently linking the static android STL library versions. I could not find a way to resolve this with bazel. Fortunately it does not seem to be visible externally, so other libraries linked with c++_shared/static still work.</p>", "body_text": "Hello again team TF!\nAfter revisions, I made a more stable solution for building libtensorflow_cc.so on android that should avoid breaking common build scenarios. There may be issues if attempting to build for non-android armeabi-v7a or arm64-v8a, but I'm unable to confirm.\nI found issues with android NDK r15 and bazel 0.11.0, forcing an update to NDK r16 and bazel 0.12.0 to ensure a working android build. As part of this, I also made a switch to the new libc++ version of STL in android for the tensorflow build, which does not suffer from the near proximity to GPLv3 with gnustl_static/shared.\nI am not certain, but it seems like the default --config=android chain still uses gnustl libraries, which are not fully C++11-compatible and due to be deprecated in the android NDK.\nA terrifying build command is still being used:\nbazel build -c opt --config=monolithic --android_crosstool_top=@androidndk//:toolchain-libcpp --crosstool_top=@androidndk//:toolchain-libcpp --host_crosstool_top=@bazel_tools//tools/cpp:toolchain --cpu=$ARCH //tensorflow:libtensorflow_cc.so --cxxopt=\"-std=c++11\" --copt=\"-DMDB_USE_ROBUST=0\" --cxxopt=\"-DTENSORFLOW_DISABLE_META\" --cxxopt=\"-DEIGEN_HAS_C99_MATH\" --cxxopt=\"-Wno-c++11-narrowing\" --copt=\"-DS_IREAD=00400\" --copt=\"-DS_IWRITE=00200\" --verbose_failures --copt=\"-DABSL_BASE_POLICY_CHECKS_H_\" --copt=\"-DPNG_ARM_NEON_OPT=0\"\nMost of these are to avoid build issues within libraries that do not have specific checks in place for android toolchains. I presume the build command could be shortened by introducing the commands into the android_cc flag and the specific libraries in question, but it's out of scope for my case right now.\nSome of these flags may also have been resolved by using @androidndk//:toolchain-libcpp, especially the need for TENSORFLOW_DISABLE_META, EIGEN_HAS_C99_MATH and MDB_USE_ROBUST, and DS_*, but I did not have time to test all variants.\nTo enable the C++ API, I created a new config, android_cc, which is checked for in all applicable places. The - beyond all others - most common fault is -lpthread being set in various files and libraries. This may be possible to resolve by instead using \"-pthread\", which is reportedly a flag for specifying pthread inclusion in a platform-compatible manner.\nFurther, I had to add build files for gemmlowp, protobuf_archive and boringssl, to correct similar flag issues. Ideally, these should be resolved in the respective packages.\nA remaining problem is that tensorflow is currently linking the static android STL library versions. I could not find a way to resolve this with bazel. Fortunately it does not seem to be visible externally, so other libraries linked with c++_shared/static still work.", "body": "Hello again team TF!\r\n\r\nAfter revisions, I made a more stable solution for building libtensorflow_cc.so on android that should avoid breaking common build scenarios. There may be issues if attempting to build for non-android armeabi-v7a or arm64-v8a, but I'm unable to confirm.\r\n\r\nI found issues with android NDK r15 and bazel 0.11.0, forcing an update to NDK r16 and bazel 0.12.0 to ensure a working android build. As part of this, I also made a switch to the new libc++ version of STL in android for the tensorflow build, which does not suffer from the near proximity to GPLv3 with gnustl_static/shared.\r\nI am not certain, but it seems like the default --config=android chain still uses gnustl libraries, which are not fully C++11-compatible and due to be deprecated in the android NDK.\r\n\r\nA terrifying build command is still being used:\r\nbazel build -c opt --config=monolithic --android_crosstool_top=@androidndk//:toolchain-libcpp --crosstool_top=@androidndk//:toolchain-libcpp --host_crosstool_top=@bazel_tools//tools/cpp:toolchain --cpu=$ARCH //tensorflow:libtensorflow_cc.so --cxxopt=\"-std=c++11\" --copt=\"-DMDB_USE_ROBUST=0\" --cxxopt=\"-DTENSORFLOW_DISABLE_META\" --cxxopt=\"-DEIGEN_HAS_C99_MATH\" --cxxopt=\"-Wno-c++11-narrowing\" --copt=\"-DS_IREAD=00400\" --copt=\"-DS_IWRITE=00200\" --verbose_failures --copt=\"-DABSL_BASE_POLICY_CHECKS_H_\" --copt=\"-DPNG_ARM_NEON_OPT=0\"\r\n\r\nMost of these are to avoid build issues within libraries that do not have specific checks in place for android toolchains. I presume the build command could be shortened by introducing the commands into the android_cc flag and the specific libraries in question, but it's out of scope for my case right now. \r\nSome of these flags may also have been resolved by using @androidndk//:toolchain-libcpp, especially the need for TENSORFLOW_DISABLE_META, EIGEN_HAS_C99_MATH and MDB_USE_ROBUST, and DS_*, but I did not have time to test all variants.\r\n\r\nTo enable the C++ API, I created a new config, android_cc, which is checked for in all applicable places. The - beyond all others - most common fault is -lpthread being set in various files and libraries. This may be possible to resolve by instead using \"-pthread\", which is reportedly a flag for specifying pthread inclusion in a platform-compatible manner.\r\n\r\nFurther, I had to add build files for gemmlowp, protobuf_archive and boringssl, to correct similar flag issues. Ideally, these should be resolved in the respective packages.\r\n\r\nA remaining problem is that tensorflow is currently linking the static android STL library versions. I could not find a way to resolve this with bazel. Fortunately it does not seem to be visible externally, so other libraries linked with c++_shared/static still work."}