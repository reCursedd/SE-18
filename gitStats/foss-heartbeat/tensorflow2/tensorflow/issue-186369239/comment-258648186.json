{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/258648186", "html_url": "https://github.com/tensorflow/tensorflow/issues/5308#issuecomment-258648186", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5308", "id": 258648186, "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODY0ODE4Ng==", "user": {"login": "zafartahirov", "id": 4216323, "node_id": "MDQ6VXNlcjQyMTYzMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4216323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zafartahirov", "html_url": "https://github.com/zafartahirov", "followers_url": "https://api.github.com/users/zafartahirov/followers", "following_url": "https://api.github.com/users/zafartahirov/following{/other_user}", "gists_url": "https://api.github.com/users/zafartahirov/gists{/gist_id}", "starred_url": "https://api.github.com/users/zafartahirov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zafartahirov/subscriptions", "organizations_url": "https://api.github.com/users/zafartahirov/orgs", "repos_url": "https://api.github.com/users/zafartahirov/repos", "events_url": "https://api.github.com/users/zafartahirov/events{/privacy}", "received_events_url": "https://api.github.com/users/zafartahirov/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-05T23:04:39Z", "updated_at": "2016-11-05T23:04:39Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I was trying to see how this issue might get resolved without hurting the maintainability and without breaking the package integrity, and nothing comes to mind -- sorry, have nothing to contribute in here.</p>\n<p>I think I have found the two solutions that are being \"tried\" in the <a href=\"https://github.com/tensorflow/tensorflow/tree/163357b7f3e02ef9b68cd5f107285e27a7f16c8c\">current master</a>, I am not sure which one you guys are inclined to use:</p>\n<ol>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/163357b7f3e02ef9b68cd5f107285e27a7f16c8c/tensorflow/python/util/all_util.py#L28\"><code>make_all</code></a></li>\n<li>resolution in the <a href=\"https://github.com/tensorflow/tensorflow/tree/163357b7f3e02ef9b68cd5f107285e27a7f16c8c\"><code>tensorflow/python/__init__.py</code></a></li>\n</ol>\n<p>Personally I would just make sure the files that are not supposed to be imported start with <code>_</code> to indicate the protection, and use <code>glob.glob('./[a-zA-Z]*.py')</code> to get all the public files. After small preprocessing the paths could be converted to the import strings. Protected <code>_</code> and private <code>__</code> files would be a special case, and would have to be imported/included manually.</p>\n<p>The problem with this approach it is non-standard and requires a lot of rewriting. What is the current standard at TF for in-package imports?</p>", "body_text": "I was trying to see how this issue might get resolved without hurting the maintainability and without breaking the package integrity, and nothing comes to mind -- sorry, have nothing to contribute in here.\nI think I have found the two solutions that are being \"tried\" in the current master, I am not sure which one you guys are inclined to use:\n\nmake_all\nresolution in the tensorflow/python/__init__.py\n\nPersonally I would just make sure the files that are not supposed to be imported start with _ to indicate the protection, and use glob.glob('./[a-zA-Z]*.py') to get all the public files. After small preprocessing the paths could be converted to the import strings. Protected _ and private __ files would be a special case, and would have to be imported/included manually.\nThe problem with this approach it is non-standard and requires a lot of rewriting. What is the current standard at TF for in-package imports?", "body": "I was trying to see how this issue might get resolved without hurting the maintainability and without breaking the package integrity, and nothing comes to mind -- sorry, have nothing to contribute in here.\n\nI think I have found the two solutions that are being \"tried\" in the [current master](https://github.com/tensorflow/tensorflow/tree/163357b7f3e02ef9b68cd5f107285e27a7f16c8c), I am not sure which one you guys are inclined to use:\n1. [`make_all`](https://github.com/tensorflow/tensorflow/blob/163357b7f3e02ef9b68cd5f107285e27a7f16c8c/tensorflow/python/util/all_util.py#L28)\n2. resolution in the [`tensorflow/python/__init__.py`](https://github.com/tensorflow/tensorflow/tree/163357b7f3e02ef9b68cd5f107285e27a7f16c8c)\n\nPersonally I would just make sure the files that are not supposed to be imported start with `_` to indicate the protection, and use `glob.glob('./[a-zA-Z]*.py')` to get all the public files. After small preprocessing the paths could be converted to the import strings. Protected `_` and private `__` files would be a special case, and would have to be imported/included manually.\n\nThe problem with this approach it is non-standard and requires a lot of rewriting. What is the current standard at TF for in-package imports?\n"}