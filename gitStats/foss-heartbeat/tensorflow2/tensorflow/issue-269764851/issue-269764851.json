{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14110", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14110/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14110/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14110/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14110", "id": 269764851, "node_id": "MDU6SXNzdWUyNjk3NjQ4NTE=", "number": 14110, "title": "GPU underutilized using DNNClassifier", "user": {"login": "feranick", "id": 35967, "node_id": "MDQ6VXNlcjM1OTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/35967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feranick", "html_url": "https://github.com/feranick", "followers_url": "https://api.github.com/users/feranick/followers", "following_url": "https://api.github.com/users/feranick/following{/other_user}", "gists_url": "https://api.github.com/users/feranick/gists{/gist_id}", "starred_url": "https://api.github.com/users/feranick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feranick/subscriptions", "organizations_url": "https://api.github.com/users/feranick/orgs", "repos_url": "https://api.github.com/users/feranick/repos", "events_url": "https://api.github.com/users/feranick/events{/privacy}", "received_events_url": "https://api.github.com/users/feranick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-30T21:45:47Z", "updated_at": "2017-10-31T04:55:20Z", "closed_at": "2017-10-31T04:55:20Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Using stock code: <a href=\"https://www.tensorflow.org/get_started/estimator\" rel=\"nofollow\">https://www.tensorflow.org/get_started/estimator</a></li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary from pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.3.1, 1.4rc1, master</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.7</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 8; cuDNN 6.0</li>\n<li><strong>GPU model and memory</strong>: NVidia GeForce 1070 (8GB)</li>\n<li><strong>Exact command to reproduce</strong>: run the above code for the estimator (or see below)</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Running this code results in GPU use of up to 5-10% of GPU resources (measured using nvidia-smi). Changing the network nodes won't improve performance. Using derived code (but essentially the same) on much larger datasets increases GPU performance up to 25%. I would expect max GPU utilization. Memory allocation is in any case 100%.</p>\n<h3>Source code / logs</h3>\n<p>The code used is from <a href=\"https://www.tensorflow.org/get_started/estimator\" rel=\"nofollow\">https://www.tensorflow.org/get_started/estimator</a> , here reproduced with minor fixes (it won't run on python3 otherwise):</p>\n<pre lang=\"from\" data-meta=\"__future__ import absolute_import\"><code>from __future__ import division\nfrom __future__ import print_function\n\nimport os, json\n#import urllib\nfrom urllib.request import urlopen\n\nimport numpy as np\nimport tensorflow as tf\n\n# Data sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TRAINING_URL = \"http://download.tensorflow.org/data/iris_training.csv\"\n\nIRIS_TEST = \"iris_test.csv\"\nIRIS_TEST_URL = \"http://download.tensorflow.org/data/iris_test.csv\"\n\ndef main():\n  # If the training and test sets aren't stored locally, download them.\n  if not os.path.exists(IRIS_TRAINING):\n    raw = urlopen(IRIS_TRAINING_URL).read()\n    print(raw)\n    with open(IRIS_TRAINING, \"w\") as f:\n      #f.write(raw)\n      f.write(json.loads(raw.decode('utf-8')))\n\n  if not os.path.exists(IRIS_TEST):\n    raw = urlopen(IRIS_TEST_URL).read()\n    with open(IRIS_TEST, \"w\") as f:\n      #f.write(raw)\n      f.write(json.loads(raw.decode('utf-8')))\n\n\n  # Load datasets.\n  training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n      filename=IRIS_TRAINING,\n      target_dtype=np.int,\n      features_dtype=np.float32)\n  test_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n      filename=IRIS_TEST,\n      target_dtype=np.int,\n      features_dtype=np.float32)\n\n  # Specify that all features have real-value data\n  feature_columns = [tf.feature_column.numeric_column(\"x\", shape=[4])]\n\n  # Build 3 layer DNN with 10, 20, 10 units respectively.\n  classifier = tf.estimator.DNNClassifier(feature_columns=feature_columns,\n                                          hidden_units=[100],\n                                          n_classes=3,\n                                          model_dir=\"./iris_model\")\n  # Define the training inputs\n  train_input_fn = tf.estimator.inputs.numpy_input_fn(\n      x={\"x\": np.array(training_set.data)},\n      y=np.array(training_set.target),\n      num_epochs=None,\n      shuffle=True)\n\n  # Train model.\n  classifier.train(input_fn=train_input_fn, steps=2000)\n\n  # Define the test inputs\n  test_input_fn = tf.estimator.inputs.numpy_input_fn(\n      x={\"x\": np.array(test_set.data)},\n      y=np.array(test_set.target),\n      num_epochs=1,\n      shuffle=False)\n\n  # Evaluate accuracy.\n  accuracy_score = classifier.evaluate(input_fn=test_input_fn)[\"accuracy\"]\n\n  print(\"\\nTest Accuracy: {0:f}\\n\".format(accuracy_score))\n\n  # Classify two new flower samples.\n  new_samples = np.array(\n      [[6.4, 3.2, 4.5, 1.5],\n       [5.8, 3.1, 5.0, 1.7]], dtype=np.float32)\n  predict_input_fn = tf.estimator.inputs.numpy_input_fn(\n      x={\"x\": new_samples},\n      num_epochs=1,\n      shuffle=False)\n\n  predictions = list(classifier.predict(input_fn=predict_input_fn))\n  predicted_classes = [p[\"classes\"] for p in predictions]\n\n  print(\n      \"New Samples, Class Predictions:    {}\\n\"\n      .format(predicted_classes))\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Using stock code: https://www.tensorflow.org/get_started/estimator\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): binary from pip\nTensorFlow version (use command below): 1.3.1, 1.4rc1, master\nPython version: 3.5\nBazel version (if compiling from source): 0.7\nCUDA/cuDNN version: CUDA 8; cuDNN 6.0\nGPU model and memory: NVidia GeForce 1070 (8GB)\nExact command to reproduce: run the above code for the estimator (or see below)\n\nDescribe the problem\nRunning this code results in GPU use of up to 5-10% of GPU resources (measured using nvidia-smi). Changing the network nodes won't improve performance. Using derived code (but essentially the same) on much larger datasets increases GPU performance up to 25%. I would expect max GPU utilization. Memory allocation is in any case 100%.\nSource code / logs\nThe code used is from https://www.tensorflow.org/get_started/estimator , here reproduced with minor fixes (it won't run on python3 otherwise):\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os, json\n#import urllib\nfrom urllib.request import urlopen\n\nimport numpy as np\nimport tensorflow as tf\n\n# Data sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TRAINING_URL = \"http://download.tensorflow.org/data/iris_training.csv\"\n\nIRIS_TEST = \"iris_test.csv\"\nIRIS_TEST_URL = \"http://download.tensorflow.org/data/iris_test.csv\"\n\ndef main():\n  # If the training and test sets aren't stored locally, download them.\n  if not os.path.exists(IRIS_TRAINING):\n    raw = urlopen(IRIS_TRAINING_URL).read()\n    print(raw)\n    with open(IRIS_TRAINING, \"w\") as f:\n      #f.write(raw)\n      f.write(json.loads(raw.decode('utf-8')))\n\n  if not os.path.exists(IRIS_TEST):\n    raw = urlopen(IRIS_TEST_URL).read()\n    with open(IRIS_TEST, \"w\") as f:\n      #f.write(raw)\n      f.write(json.loads(raw.decode('utf-8')))\n\n\n  # Load datasets.\n  training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n      filename=IRIS_TRAINING,\n      target_dtype=np.int,\n      features_dtype=np.float32)\n  test_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n      filename=IRIS_TEST,\n      target_dtype=np.int,\n      features_dtype=np.float32)\n\n  # Specify that all features have real-value data\n  feature_columns = [tf.feature_column.numeric_column(\"x\", shape=[4])]\n\n  # Build 3 layer DNN with 10, 20, 10 units respectively.\n  classifier = tf.estimator.DNNClassifier(feature_columns=feature_columns,\n                                          hidden_units=[100],\n                                          n_classes=3,\n                                          model_dir=\"./iris_model\")\n  # Define the training inputs\n  train_input_fn = tf.estimator.inputs.numpy_input_fn(\n      x={\"x\": np.array(training_set.data)},\n      y=np.array(training_set.target),\n      num_epochs=None,\n      shuffle=True)\n\n  # Train model.\n  classifier.train(input_fn=train_input_fn, steps=2000)\n\n  # Define the test inputs\n  test_input_fn = tf.estimator.inputs.numpy_input_fn(\n      x={\"x\": np.array(test_set.data)},\n      y=np.array(test_set.target),\n      num_epochs=1,\n      shuffle=False)\n\n  # Evaluate accuracy.\n  accuracy_score = classifier.evaluate(input_fn=test_input_fn)[\"accuracy\"]\n\n  print(\"\\nTest Accuracy: {0:f}\\n\".format(accuracy_score))\n\n  # Classify two new flower samples.\n  new_samples = np.array(\n      [[6.4, 3.2, 4.5, 1.5],\n       [5.8, 3.1, 5.0, 1.7]], dtype=np.float32)\n  predict_input_fn = tf.estimator.inputs.numpy_input_fn(\n      x={\"x\": new_samples},\n      num_epochs=1,\n      shuffle=False)\n\n  predictions = list(classifier.predict(input_fn=predict_input_fn))\n  predicted_classes = [p[\"classes\"] for p in predictions]\n\n  print(\n      \"New Samples, Class Predictions:    {}\\n\"\n      .format(predicted_classes))\n\nif __name__ == \"__main__\":\n    main()", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Using stock code: https://www.tensorflow.org/get_started/estimator\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary from pip\r\n- **TensorFlow version (use command below)**: 1.3.1, 1.4rc1, master\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**: 0.7\r\n- **CUDA/cuDNN version**: CUDA 8; cuDNN 6.0\r\n- **GPU model and memory**: NVidia GeForce 1070 (8GB)\r\n- **Exact command to reproduce**: run the above code for the estimator (or see below)\r\n\r\n### Describe the problem\r\nRunning this code results in GPU use of up to 5-10% of GPU resources (measured using nvidia-smi). Changing the network nodes won't improve performance. Using derived code (but essentially the same) on much larger datasets increases GPU performance up to 25%. I would expect max GPU utilization. Memory allocation is in any case 100%.\r\n\r\n### Source code / logs\r\nThe code used is from https://www.tensorflow.org/get_started/estimator , here reproduced with minor fixes (it won't run on python3 otherwise):\r\n\r\n```from __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n\r\nimport os, json\r\n#import urllib\r\nfrom urllib.request import urlopen\r\n\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n# Data sets\r\nIRIS_TRAINING = \"iris_training.csv\"\r\nIRIS_TRAINING_URL = \"http://download.tensorflow.org/data/iris_training.csv\"\r\n\r\nIRIS_TEST = \"iris_test.csv\"\r\nIRIS_TEST_URL = \"http://download.tensorflow.org/data/iris_test.csv\"\r\n\r\ndef main():\r\n  # If the training and test sets aren't stored locally, download them.\r\n  if not os.path.exists(IRIS_TRAINING):\r\n    raw = urlopen(IRIS_TRAINING_URL).read()\r\n    print(raw)\r\n    with open(IRIS_TRAINING, \"w\") as f:\r\n      #f.write(raw)\r\n      f.write(json.loads(raw.decode('utf-8')))\r\n\r\n  if not os.path.exists(IRIS_TEST):\r\n    raw = urlopen(IRIS_TEST_URL).read()\r\n    with open(IRIS_TEST, \"w\") as f:\r\n      #f.write(raw)\r\n      f.write(json.loads(raw.decode('utf-8')))\r\n\r\n\r\n  # Load datasets.\r\n  training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\r\n      filename=IRIS_TRAINING,\r\n      target_dtype=np.int,\r\n      features_dtype=np.float32)\r\n  test_set = tf.contrib.learn.datasets.base.load_csv_with_header(\r\n      filename=IRIS_TEST,\r\n      target_dtype=np.int,\r\n      features_dtype=np.float32)\r\n\r\n  # Specify that all features have real-value data\r\n  feature_columns = [tf.feature_column.numeric_column(\"x\", shape=[4])]\r\n\r\n  # Build 3 layer DNN with 10, 20, 10 units respectively.\r\n  classifier = tf.estimator.DNNClassifier(feature_columns=feature_columns,\r\n                                          hidden_units=[100],\r\n                                          n_classes=3,\r\n                                          model_dir=\"./iris_model\")\r\n  # Define the training inputs\r\n  train_input_fn = tf.estimator.inputs.numpy_input_fn(\r\n      x={\"x\": np.array(training_set.data)},\r\n      y=np.array(training_set.target),\r\n      num_epochs=None,\r\n      shuffle=True)\r\n\r\n  # Train model.\r\n  classifier.train(input_fn=train_input_fn, steps=2000)\r\n\r\n  # Define the test inputs\r\n  test_input_fn = tf.estimator.inputs.numpy_input_fn(\r\n      x={\"x\": np.array(test_set.data)},\r\n      y=np.array(test_set.target),\r\n      num_epochs=1,\r\n      shuffle=False)\r\n\r\n  # Evaluate accuracy.\r\n  accuracy_score = classifier.evaluate(input_fn=test_input_fn)[\"accuracy\"]\r\n\r\n  print(\"\\nTest Accuracy: {0:f}\\n\".format(accuracy_score))\r\n\r\n  # Classify two new flower samples.\r\n  new_samples = np.array(\r\n      [[6.4, 3.2, 4.5, 1.5],\r\n       [5.8, 3.1, 5.0, 1.7]], dtype=np.float32)\r\n  predict_input_fn = tf.estimator.inputs.numpy_input_fn(\r\n      x={\"x\": new_samples},\r\n      num_epochs=1,\r\n      shuffle=False)\r\n\r\n  predictions = list(classifier.predict(input_fn=predict_input_fn))\r\n  predicted_classes = [p[\"classes\"] for p in predictions]\r\n\r\n  print(\r\n      \"New Samples, Class Predictions:    {}\\n\"\r\n      .format(predicted_classes))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n"}