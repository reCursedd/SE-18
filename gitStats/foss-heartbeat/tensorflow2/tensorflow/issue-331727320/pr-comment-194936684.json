{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194936684", "pull_request_review_id": 128200676, "id": 194936684, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDkzNjY4NA==", "diff_hunk": "@@ -0,0 +1,205 @@\n+/*\n+Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package tensorflow\n+\n+// #include <stdlib.h>\n+// #include \"tensorflow/c/c_api.h\"\n+//\n+// TF_AttrType attrMetadataType(TF_AttrMetadata meta) {\n+//   return meta.type;\n+// }\n+import \"C\"\n+import (\n+\t\"unsafe\"\n+\n+\t\"github.com/pkg/errors\"\n+)\n+\n+// Attr returns info about an attribute on the operation.\n+func (op *Operation) Attr(name string) (interface{}, error) {\n+\tcname := C.CString(name)\n+\tdefer C.free(unsafe.Pointer(cname))\n+\n+\tstatus := newStatus()\n+\tmeta := C.TF_OperationGetAttrMetadata(op.c, cname, status.c)\n+\tif err := status.Err(); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tattrType := C.attrMetadataType(meta)\n+\n+\tif meta.is_list == 1 {\n+\t\tswitch attrType {\n+\t\tcase C.TF_ATTR_STRING:\n+\t\t\tvalues := make([]unsafe.Pointer, meta.list_size)\n+\t\t\tlengths := make([]C.size_t, meta.list_size)\n+\t\t\tstorage := make([]C.char, meta.total_size)\n+\t\t\tC.TF_OperationGetAttrStringList(op.c, cname, &values[0], &lengths[0], C.int(meta.list_size), unsafe.Pointer(&storage[0]), C.size_t(meta.total_size), status.c)\n+\t\t\tif err := status.Err(); err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tlist := make([]string, meta.list_size)\n+\t\t\tfor i, val := range values {\n+\t\t\t\tlength := lengths[i]\n+\t\t\t\tlist[i] = C.GoStringN((*C.char)(val), C.int(length))\n+\t\t\t}\n+\t\t\treturn list, nil\n+\n+\t\tcase C.TF_ATTR_INT:\n+\t\t\tlist := make([]C.int64_t, meta.list_size)\n+\t\t\tC.TF_OperationGetAttrIntList(op.c, cname, &list[0], C.int(meta.list_size), status.c)\n+\t\t\tif err := status.Err(); err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tvals := make([]int64, meta.list_size)\n+\t\t\tfor i, val := range list {\n+\t\t\t\tvals[i] = int64(val)\n+\t\t\t}\n+\t\t\treturn vals, nil\n+\n+\t\tcase C.TF_ATTR_FLOAT:\n+\t\t\tlist := make([]C.float, meta.list_size)\n+\t\t\tC.TF_OperationGetAttrFloatList(op.c, cname, &list[0], C.int(meta.list_size), status.c)\n+\t\t\tif err := status.Err(); err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tvals := make([]float32, meta.list_size)\n+\t\t\tfor i, val := range list {\n+\t\t\t\tvals[i] = float32(val)\n+\t\t\t}\n+\t\t\treturn vals, nil\n+\n+\t\tcase C.TF_ATTR_BOOL:\n+\t\t\tlist := make([]C.uchar, meta.list_size)\n+\t\t\tC.TF_OperationGetAttrBoolList(op.c, cname, &list[0], C.int(meta.list_size), status.c)\n+\t\t\tif err := status.Err(); err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tvals := make([]bool, meta.list_size)\n+\t\t\tfor i, val := range list {\n+\t\t\t\tvals[i] = val == 1\n+\t\t\t}\n+\t\t\treturn vals, nil\n+\n+\t\tcase C.TF_ATTR_TYPE:\n+\t\t\tlist := make([]C.TF_DataType, meta.list_size)\n+\t\t\tC.TF_OperationGetAttrTypeList(op.c, cname, &list[0], C.int(meta.list_size), status.c)\n+\t\t\tif err := status.Err(); err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tvals := make([]DataType, meta.list_size)\n+\t\t\tfor i, val := range list {\n+\t\t\t\tvals[i] = DataType(val)\n+\t\t\t}\n+\t\t\treturn vals, nil\n+\n+\t\tcase C.TF_ATTR_TENSOR:\n+\t\t\tlist := make([]*C.TF_Tensor, meta.list_size)\n+\t\t\tC.TF_OperationGetAttrTensorList(op.c, cname, &list[0], C.int(meta.list_size), status.c)\n+\t\t\tif err := status.Err(); err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tvals := make([]*Tensor, meta.list_size)\n+\t\t\tfor i, t := range list {\n+\t\t\t\tvals[i] = newTensorFromC(t)\n+\t\t\t}\n+\t\t\treturn vals, nil\n+\n+\t\tcase C.TF_ATTR_SHAPE:\n+\t\t\tdims := make([]*C.int64_t, meta.list_size)\n+\t\t\tnumDims := make([]C.int, meta.list_size)\n+\t\t\tstorage := make([]C.int64_t, meta.total_size)\n+\t\t\tC.TF_OperationGetAttrShapeList(op.c, cname, &dims[0], &numDims[0], C.int(meta.list_size), &storage[0], C.int(meta.total_size), status.c)\n+\t\t\tif err := status.Err(); err != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tlist := make([]Shape, meta.list_size)\n+\t\t\tfor i, dim := range dims {\n+\t\t\t\tnumDim := numDims[i]", "path": "tensorflow/go/attrs.go", "position": null, "original_position": 131, "commit_id": "f00771010853734065a73453f8e73df4b51483da", "original_commit_id": "8e43cd98e358f8602a075f9b2e1b93b241a313af", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "`numDim` can be <= 0 (where < 0 means unknown shape). Don't we need to handle that (otherwise `slice` below might run into trouble?)\r\n\r\n```go\r\nif numDim == 0 {\r\n  list[i] = ScalarShape()\r\n} else if numDim > 0 {\r\n  slice = ...\r\n  list[i] ...\r\n}\r\n", "created_at": "2018-06-13T01:55:25Z", "updated_at": "2018-06-13T16:41:25Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19953#discussion_r194936684", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19953", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194936684"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19953#discussion_r194936684"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19953"}}, "body_html": "<p><code>numDim</code> can be &lt;= 0 (where &lt; 0 means unknown shape). Don't we need to handle that (otherwise <code>slice</code> below might run into trouble?)</p>\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">if</span> numDim == <span class=\"pl-c1\">0</span> {\n  list[i] = <span class=\"pl-c1\">ScalarShape</span>()\n} <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> numDim &gt; <span class=\"pl-c1\">0</span> {\n  slice = ...\n  list[i] ...\n}</pre></div>", "body_text": "numDim can be <= 0 (where < 0 means unknown shape). Don't we need to handle that (otherwise slice below might run into trouble?)\nif numDim == 0 {\n  list[i] = ScalarShape()\n} else if numDim > 0 {\n  slice = ...\n  list[i] ...\n}"}