{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21543", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21543/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21543/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21543/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21543", "id": 349583165, "node_id": "MDU6SXNzdWUzNDk1ODMxNjU=", "number": 21543, "title": "ConditionalBijectors not Chainable due to Bijector _Mapping not supporting deep dicts", "user": {"login": "hartikainen", "id": 2308543, "node_id": "MDQ6VXNlcjIzMDg1NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2308543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartikainen", "html_url": "https://github.com/hartikainen", "followers_url": "https://api.github.com/users/hartikainen/followers", "following_url": "https://api.github.com/users/hartikainen/following{/other_user}", "gists_url": "https://api.github.com/users/hartikainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartikainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartikainen/subscriptions", "organizations_url": "https://api.github.com/users/hartikainen/orgs", "repos_url": "https://api.github.com/users/hartikainen/repos", "events_url": "https://api.github.com/users/hartikainen/events{/privacy}", "received_events_url": "https://api.github.com/users/hartikainen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "jvdillon", "id": 1137078, "node_id": "MDQ6VXNlcjExMzcwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1137078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvdillon", "html_url": "https://github.com/jvdillon", "followers_url": "https://api.github.com/users/jvdillon/followers", "following_url": "https://api.github.com/users/jvdillon/following{/other_user}", "gists_url": "https://api.github.com/users/jvdillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvdillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvdillon/subscriptions", "organizations_url": "https://api.github.com/users/jvdillon/orgs", "repos_url": "https://api.github.com/users/jvdillon/repos", "events_url": "https://api.github.com/users/jvdillon/events{/privacy}", "received_events_url": "https://api.github.com/users/jvdillon/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jvdillon", "id": 1137078, "node_id": "MDQ6VXNlcjExMzcwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1137078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvdillon", "html_url": "https://github.com/jvdillon", "followers_url": "https://api.github.com/users/jvdillon/followers", "following_url": "https://api.github.com/users/jvdillon/following{/other_user}", "gists_url": "https://api.github.com/users/jvdillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvdillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvdillon/subscriptions", "organizations_url": "https://api.github.com/users/jvdillon/orgs", "repos_url": "https://api.github.com/users/jvdillon/repos", "events_url": "https://api.github.com/users/jvdillon/events{/privacy}", "received_events_url": "https://api.github.com/users/jvdillon/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-08-10T16:38:54Z", "updated_at": "2018-11-21T19:01:18Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: OSX High Sierra 10.13.1</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: n/a</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.9.0-0-g25c197e023 1.9.0</li>\n<li><strong>Python version</strong>: Python 3.6.5 :: Anaconda, Inc.</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n/a</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: n/a</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>: n/a</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I would like to use the <a href=\"https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/chain.py\">bijectors.Chain</a> to create a flow of bijector that extend <a href=\"https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/conditional_bijector.py#L28\">bijectors.ConditionalBijector</a>. It looks like Chain <a href=\"https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/chain.py#L263\">already supports conditioning under the hood</a>, but the other parts of Bijector are not fully compatible with it.</p>\n<p>Suppose we have the following test function:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow_probability <span class=\"pl-k\">as</span> tfp\n\ntfb <span class=\"pl-k\">=</span> tfp.bijectors\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_chained_condition_bijector</span>(<span class=\"pl-smi\">ChainClass</span>):\n    flow <span class=\"pl-k\">=</span> ChainClass([\n        BijectorWithSupportForConditioning(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bijector_1<span class=\"pl-pds\">\"</span></span>),\n        BijectorWithSupportForConditioning(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bijector_2<span class=\"pl-pds\">\"</span></span>)\n    ])\n\n    x <span class=\"pl-k\">=</span> tf.random_uniform([<span class=\"pl-c1\">5</span>])\n    flow.forward(\n        x,\n        <span class=\"pl-v\">bijector_1</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>conditions<span class=\"pl-pds\">'</span></span>: tf.random_uniform([<span class=\"pl-c1\">2</span>])},\n        <span class=\"pl-v\">bijector_2</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>conditions<span class=\"pl-pds\">'</span></span>: tf.random_uniform([<span class=\"pl-c1\">3</span>])},\n    )</pre></div>\n<p>Calling <code>test_chained_condition_bijector</code> with <code>bijector.Chain</code>, we get the following error:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> test_chained_condition_bijector(tfb.Chain)\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Users/kristian/code/softqlearning-private/broken_conditional_bijector.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">52</span>, <span class=\"pl-k\">in</span> test_chained_condition_bijector\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bijector_2<span class=\"pl-pds\">'</span></span>: { <span class=\"pl-s\"><span class=\"pl-pds\">'</span>conditions<span class=\"pl-pds\">'</span></span>: tf.random_uniform([<span class=\"pl-c1\">3</span>]) },\n<span class=\"pl-c1\">TypeError</span>: forward() got an unexpected keyword argument <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bijector_1<span class=\"pl-pds\">'</span></span></pre></div>\n<p>This error can be overcome by creating a <code>ConditionalChain</code> class, which extends <code>ConditionalBijector</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ConditionalChain</span>(<span class=\"pl-e\">tfb</span>.<span class=\"pl-e\">ConditionalBijector</span>, <span class=\"pl-e\">tfb</span>.<span class=\"pl-e\">Chain</span>):\n    <span class=\"pl-k\">pass</span></pre></div>\n<p>Now, if we run the same code again, this time with ConditionalChain, we get the following:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> test_chained_condition_bijector(ConditionalChain)\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Users/kristian/code/softqlearning-private/broken_conditional_bijector.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">52</span>, <span class=\"pl-k\">in</span> test_chained_condition_bijector\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bijector_2<span class=\"pl-pds\">'</span></span>: { <span class=\"pl-s\"><span class=\"pl-pds\">'</span>conditions<span class=\"pl-pds\">'</span></span>: tf.random_uniform([<span class=\"pl-c1\">3</span>]) },\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/util.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1461</span>, <span class=\"pl-k\">in</span> _fn\n    <span class=\"pl-k\">return</span> fn(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow_probability/python/bijectors/conditional_bijector.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">35</span>, <span class=\"pl-k\">in</span> forward\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._call_forward(x, name, <span class=\"pl-k\">**</span>condition_kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/bijector_impl.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">750</span>, <span class=\"pl-k\">in</span> _call_forward\n    mapping <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._lookup(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>x, <span class=\"pl-v\">kwargs</span><span class=\"pl-k\">=</span>kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/bijector_impl.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1014</span>, <span class=\"pl-k\">in</span> _lookup\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._from_x.get(mapping.x_key, mapping)\n<span class=\"pl-c1\">TypeError</span>: unhashable <span class=\"pl-c1\">type</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dict<span class=\"pl-pds\">'</span></span></pre></div>\n<p>This happens because the <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.10/tensorflow/python/ops/distributions/bijector_impl.py#L126\">_deep_tuple</a>, which is used to cache Bijector inputs/outputs, doesn't support nested dicts.</p>\n<p>I would expect the code to run normally with <code>ConditionalChain</code>. Not sure if this is a feature or a bug. If it's a bug, then this is a bug report, and if it's a feature, then this is a feature request to change the behavior. It's also possible that I'm misusing the ConditionalBijectors, in which case I should move this to stackoverflow.</p>\n<p>Here's the full code snippet to test the behavior:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow_probability <span class=\"pl-k\">as</span> tfp\n\ntf.enable_eager_execution()\n\n\ntfb <span class=\"pl-k\">=</span> tfp.bijectors\n\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">BijectorWithSupportForConditioning</span>(<span class=\"pl-e\">tfb</span>.<span class=\"pl-e\">ConditionalBijector</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">validate_args</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>exp<span class=\"pl-pds\">\"</span></span>):\n        <span class=\"pl-c1\">super</span>(BijectorWithSupportForConditioning, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>(\n            <span class=\"pl-v\">validate_args</span><span class=\"pl-k\">=</span>validate_args,\n            <span class=\"pl-v\">forward_min_event_ndims</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>,\n            <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_concat_input</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">condition_kwargs</span>):\n        <span class=\"pl-k\">return</span> tf.concat(\n            [x] <span class=\"pl-k\">+</span> [condition_kwargs[k] <span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> <span class=\"pl-c1\">sorted</span>(condition_kwargs)],\n            <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">condition_kwargs</span>):\n        <span class=\"pl-k\">return</span> tf.exp(<span class=\"pl-c1\">self</span>._concat_input(x, <span class=\"pl-k\">**</span>condition_kwargs))\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_inverse</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">y</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">condition_kwargs</span>):\n        <span class=\"pl-k\">return</span> tf.log(<span class=\"pl-c1\">self</span>._concat_input(y, <span class=\"pl-k\">**</span>condition_kwargs))\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_inverse_log_det_jacobian</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">y</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">condition_kwargs</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">self</span>._forward_log_det_jacobian(<span class=\"pl-c1\">self</span>._inverse(\n            <span class=\"pl-c1\">self</span>._concat_input(y, <span class=\"pl-k\">**</span>condition_kwargs)))\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">_forward_log_det_jacobian</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">condition_kwargs</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._concat_input(x, <span class=\"pl-k\">**</span>condition_kwargs)\n\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">ConditionalChain</span>(<span class=\"pl-e\">tfb</span>.<span class=\"pl-e\">ConditionalBijector</span>, <span class=\"pl-e\">tfb</span>.<span class=\"pl-e\">Chain</span>):\n    <span class=\"pl-k\">pass</span>\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_chained_condition_bijector</span>(<span class=\"pl-smi\">ChainClass</span>):\n    flow <span class=\"pl-k\">=</span> ChainClass([\n        BijectorWithSupportForConditioning(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bijector_1<span class=\"pl-pds\">\"</span></span>),\n        BijectorWithSupportForConditioning(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bijector_2<span class=\"pl-pds\">\"</span></span>)\n    ])\n\n    x <span class=\"pl-k\">=</span> tf.random_uniform([<span class=\"pl-c1\">5</span>])\n    flow.forward(\n        x,\n        <span class=\"pl-v\">bijector_1</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>conditions<span class=\"pl-pds\">'</span></span>: tf.random_uniform([<span class=\"pl-c1\">2</span>])},\n        <span class=\"pl-v\">bijector_2</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>conditions<span class=\"pl-pds\">'</span></span>: tf.random_uniform([<span class=\"pl-c1\">3</span>])},\n    )\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    test_chained_condition_bijector(tfb.Chain)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> test_chained_condition_bijector(ConditionalChain)</span></pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): OSX High Sierra 10.13.1\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.9.0-0-g25c197e023 1.9.0\nPython version: Python 3.6.5 :: Anaconda, Inc.\nBazel version (if compiling from source): n/a\nGCC/Compiler version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: n/a\n\nDescribe the problem\nI would like to use the bijectors.Chain to create a flow of bijector that extend bijectors.ConditionalBijector. It looks like Chain already supports conditioning under the hood, but the other parts of Bijector are not fully compatible with it.\nSuppose we have the following test function:\nimport tensorflow as tf\nimport tensorflow_probability as tfp\n\ntfb = tfp.bijectors\n\n\ndef test_chained_condition_bijector(ChainClass):\n    flow = ChainClass([\n        BijectorWithSupportForConditioning(name=\"bijector_1\"),\n        BijectorWithSupportForConditioning(name=\"bijector_2\")\n    ])\n\n    x = tf.random_uniform([5])\n    flow.forward(\n        x,\n        bijector_1={'conditions': tf.random_uniform([2])},\n        bijector_2={'conditions': tf.random_uniform([3])},\n    )\nCalling test_chained_condition_bijector with bijector.Chain, we get the following error:\n>>> test_chained_condition_bijector(tfb.Chain)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/kristian/code/softqlearning-private/broken_conditional_bijector.py\", line 52, in test_chained_condition_bijector\n    'bijector_2': { 'conditions': tf.random_uniform([3]) },\nTypeError: forward() got an unexpected keyword argument 'bijector_1'\nThis error can be overcome by creating a ConditionalChain class, which extends ConditionalBijector:\nclass ConditionalChain(tfb.ConditionalBijector, tfb.Chain):\n    pass\nNow, if we run the same code again, this time with ConditionalChain, we get the following:\n>>> test_chained_condition_bijector(ConditionalChain)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/kristian/code/softqlearning-private/broken_conditional_bijector.py\", line 52, in test_chained_condition_bijector\n    'bijector_2': { 'conditions': tf.random_uniform([3]) },\n  File \"/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/util.py\", line 1461, in _fn\n    return fn(*args, **kwargs)\n  File \"/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow_probability/python/bijectors/conditional_bijector.py\", line 35, in forward\n    return self._call_forward(x, name, **condition_kwargs)\n  File \"/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/bijector_impl.py\", line 750, in _call_forward\n    mapping = self._lookup(x=x, kwargs=kwargs)\n  File \"/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/bijector_impl.py\", line 1014, in _lookup\n    return self._from_x.get(mapping.x_key, mapping)\nTypeError: unhashable type: 'dict'\nThis happens because the _deep_tuple, which is used to cache Bijector inputs/outputs, doesn't support nested dicts.\nI would expect the code to run normally with ConditionalChain. Not sure if this is a feature or a bug. If it's a bug, then this is a bug report, and if it's a feature, then this is a feature request to change the behavior. It's also possible that I'm misusing the ConditionalBijectors, in which case I should move this to stackoverflow.\nHere's the full code snippet to test the behavior:\nimport tensorflow as tf\nimport tensorflow_probability as tfp\n\ntf.enable_eager_execution()\n\n\ntfb = tfp.bijectors\n\n\nclass BijectorWithSupportForConditioning(tfb.ConditionalBijector):\n    def __init__(self, validate_args=False, name=\"exp\"):\n        super(BijectorWithSupportForConditioning, self).__init__(\n            validate_args=validate_args,\n            forward_min_event_ndims=0,\n            name=name)\n\n    def _concat_input(self, x, **condition_kwargs):\n        return tf.concat(\n            [x] + [condition_kwargs[k] for k in sorted(condition_kwargs)],\n            axis=-1)\n\n    def _forward(self, x, **condition_kwargs):\n        return tf.exp(self._concat_input(x, **condition_kwargs))\n\n    def _inverse(self, y, **condition_kwargs):\n        return tf.log(self._concat_input(y, **condition_kwargs))\n\n    def _inverse_log_det_jacobian(self, y, **condition_kwargs):\n        return -self._forward_log_det_jacobian(self._inverse(\n            self._concat_input(y, **condition_kwargs)))\n\n    def _forward_log_det_jacobian(self, x, **condition_kwargs):\n        return self._concat_input(x, **condition_kwargs)\n\n\nclass ConditionalChain(tfb.ConditionalBijector, tfb.Chain):\n    pass\n\n\ndef test_chained_condition_bijector(ChainClass):\n    flow = ChainClass([\n        BijectorWithSupportForConditioning(name=\"bijector_1\"),\n        BijectorWithSupportForConditioning(name=\"bijector_2\")\n    ])\n\n    x = tf.random_uniform([5])\n    flow.forward(\n        x,\n        bijector_1={'conditions': tf.random_uniform([2])},\n        bijector_2={'conditions': tf.random_uniform([3])},\n    )\n\n\nif __name__ == '__main__':\n    test_chained_condition_bijector(tfb.Chain)\n    # test_chained_condition_bijector(ConditionalChain)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: OSX High Sierra 10.13.1\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: n/a\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.9.0-0-g25c197e023 1.9.0\r\n- **Python version**: Python 3.6.5 :: Anaconda, Inc.\r\n- **Bazel version (if compiling from source)**: n/a\r\n- **GCC/Compiler version (if compiling from source)**: n/a\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: n/a\r\n\r\n### Describe the problem\r\nI would like to use the [bijectors.Chain](https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/chain.py) to create a flow of bijector that extend [bijectors.ConditionalBijector](https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/conditional_bijector.py#L28). It looks like Chain [already supports conditioning under the hood](https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/chain.py#L263), but the other parts of Bijector are not fully compatible with it.\r\n\r\nSuppose we have the following test function:\r\n\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\ntfb = tfp.bijectors\r\n\r\n\r\ndef test_chained_condition_bijector(ChainClass):\r\n    flow = ChainClass([\r\n        BijectorWithSupportForConditioning(name=\"bijector_1\"),\r\n        BijectorWithSupportForConditioning(name=\"bijector_2\")\r\n    ])\r\n\r\n    x = tf.random_uniform([5])\r\n    flow.forward(\r\n        x,\r\n        bijector_1={'conditions': tf.random_uniform([2])},\r\n        bijector_2={'conditions': tf.random_uniform([3])},\r\n    )\r\n```\r\n\r\nCalling `test_chained_condition_bijector` with `bijector.Chain`, we get the following error:\r\n\r\n```python\r\n>>> test_chained_condition_bijector(tfb.Chain)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/kristian/code/softqlearning-private/broken_conditional_bijector.py\", line 52, in test_chained_condition_bijector\r\n    'bijector_2': { 'conditions': tf.random_uniform([3]) },\r\nTypeError: forward() got an unexpected keyword argument 'bijector_1'\r\n```\r\n\r\nThis error can be overcome by creating a `ConditionalChain` class, which extends `ConditionalBijector`:\r\n```python\r\nclass ConditionalChain(tfb.ConditionalBijector, tfb.Chain):\r\n    pass\r\n```\r\n\r\nNow, if we run the same code again, this time with ConditionalChain, we get the following:\r\n\r\n```python\r\n>>> test_chained_condition_bijector(ConditionalChain)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/kristian/code/softqlearning-private/broken_conditional_bijector.py\", line 52, in test_chained_condition_bijector\r\n    'bijector_2': { 'conditions': tf.random_uniform([3]) },\r\n  File \"/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/util.py\", line 1461, in _fn\r\n    return fn(*args, **kwargs)\r\n  File \"/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow_probability/python/bijectors/conditional_bijector.py\", line 35, in forward\r\n    return self._call_forward(x, name, **condition_kwargs)\r\n  File \"/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/bijector_impl.py\", line 750, in _call_forward\r\n    mapping = self._lookup(x=x, kwargs=kwargs)\r\n  File \"/Users/kristian/anaconda3/envs/softlearning/lib/python3.6/site-packages/tensorflow/python/ops/distributions/bijector_impl.py\", line 1014, in _lookup\r\n    return self._from_x.get(mapping.x_key, mapping)\r\nTypeError: unhashable type: 'dict'\r\n```\r\n\r\nThis happens because the [_deep_tuple](https://github.com/tensorflow/tensorflow/blob/r1.10/tensorflow/python/ops/distributions/bijector_impl.py#L126), which is used to cache Bijector inputs/outputs, doesn't support nested dicts.\r\n\r\nI would expect the code to run normally with `ConditionalChain`. Not sure if this is a feature or a bug. If it's a bug, then this is a bug report, and if it's a feature, then this is a feature request to change the behavior. It's also possible that I'm misusing the ConditionalBijectors, in which case I should move this to stackoverflow.\r\n\r\nHere's the full code snippet to test the behavior:\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\ntf.enable_eager_execution()\r\n\r\n\r\ntfb = tfp.bijectors\r\n\r\n\r\nclass BijectorWithSupportForConditioning(tfb.ConditionalBijector):\r\n    def __init__(self, validate_args=False, name=\"exp\"):\r\n        super(BijectorWithSupportForConditioning, self).__init__(\r\n            validate_args=validate_args,\r\n            forward_min_event_ndims=0,\r\n            name=name)\r\n\r\n    def _concat_input(self, x, **condition_kwargs):\r\n        return tf.concat(\r\n            [x] + [condition_kwargs[k] for k in sorted(condition_kwargs)],\r\n            axis=-1)\r\n\r\n    def _forward(self, x, **condition_kwargs):\r\n        return tf.exp(self._concat_input(x, **condition_kwargs))\r\n\r\n    def _inverse(self, y, **condition_kwargs):\r\n        return tf.log(self._concat_input(y, **condition_kwargs))\r\n\r\n    def _inverse_log_det_jacobian(self, y, **condition_kwargs):\r\n        return -self._forward_log_det_jacobian(self._inverse(\r\n            self._concat_input(y, **condition_kwargs)))\r\n\r\n    def _forward_log_det_jacobian(self, x, **condition_kwargs):\r\n        return self._concat_input(x, **condition_kwargs)\r\n\r\n\r\nclass ConditionalChain(tfb.ConditionalBijector, tfb.Chain):\r\n    pass\r\n\r\n\r\ndef test_chained_condition_bijector(ChainClass):\r\n    flow = ChainClass([\r\n        BijectorWithSupportForConditioning(name=\"bijector_1\"),\r\n        BijectorWithSupportForConditioning(name=\"bijector_2\")\r\n    ])\r\n\r\n    x = tf.random_uniform([5])\r\n    flow.forward(\r\n        x,\r\n        bijector_1={'conditions': tf.random_uniform([2])},\r\n        bijector_2={'conditions': tf.random_uniform([3])},\r\n    )\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_chained_condition_bijector(tfb.Chain)\r\n    # test_chained_condition_bijector(ConditionalChain)\r\n```"}