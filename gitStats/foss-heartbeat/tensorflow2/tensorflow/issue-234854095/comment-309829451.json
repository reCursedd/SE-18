{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/309829451", "html_url": "https://github.com/tensorflow/tensorflow/pull/10598#issuecomment-309829451", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10598", "id": 309829451, "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTgyOTQ1MQ==", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-20T17:25:13Z", "updated_at": "2017-06-20T17:25:29Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7976315\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lakshayg\">@lakshayg</a> is inf the mathematically correct answer? We should strive for compatibility with numpy whenever possible, even for arguments that give nan/in, unless it is clearly wrong. Does this depend on the version of numpy? I'm OK with the PR as is, but perhaps add a TODO in the test code to investigate this edge case?</p>", "body_text": "@lakshayg is inf the mathematically correct answer? We should strive for compatibility with numpy whenever possible, even for arguments that give nan/in, unless it is clearly wrong. Does this depend on the version of numpy? I'm OK with the PR as is, but perhaps add a TODO in the test code to investigate this edge case?", "body": "@lakshayg is inf the mathematically correct answer? We should strive for compatibility with numpy whenever possible, even for arguments that give nan/in, unless it is clearly wrong. Does this depend on the version of numpy? I'm OK with the PR as is, but perhaps add a TODO in the test code to investigate this edge case?"}