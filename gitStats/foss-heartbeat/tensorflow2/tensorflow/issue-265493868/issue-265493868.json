{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13713", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13713/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13713/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13713/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13713", "id": 265493868, "node_id": "MDU6SXNzdWUyNjU0OTM4Njg=", "number": 13713, "title": "Unable to change reuse from True to False when using a variable scope to create new one.", "user": {"login": "tianzhi0549", "id": 5263226, "node_id": "MDQ6VXNlcjUyNjMyMjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5263226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tianzhi0549", "html_url": "https://github.com/tianzhi0549", "followers_url": "https://api.github.com/users/tianzhi0549/followers", "following_url": "https://api.github.com/users/tianzhi0549/following{/other_user}", "gists_url": "https://api.github.com/users/tianzhi0549/gists{/gist_id}", "starred_url": "https://api.github.com/users/tianzhi0549/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tianzhi0549/subscriptions", "organizations_url": "https://api.github.com/users/tianzhi0549/orgs", "repos_url": "https://api.github.com/users/tianzhi0549/repos", "events_url": "https://api.github.com/users/tianzhi0549/events{/privacy}", "received_events_url": "https://api.github.com/users/tianzhi0549/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-10-14T14:11:43Z", "updated_at": "2018-01-24T22:54:41Z", "closed_at": "2018-01-24T22:54:41Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nNo.</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 14.04.</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nFrom source.</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n('v1.3.0-rc1-633-gcf375f0', '1.2.1-rc1').</li>\n<li><strong>Python version</strong>:<br>\n2.7.6.</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\n0.5.3.</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nCUDA 8.0.</li>\n<li><strong>GPU model and memory</strong>:<br>\nN/A.</li>\n<li><strong>Exact command to reproduce</strong>:\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test_scope<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>) <span class=\"pl-k\">as</span> scope:\n    <span class=\"pl-k\">pass</span>\n<span class=\"pl-k\">with</span> tf.variable_scope(scope, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>) <span class=\"pl-k\">as</span> scope2:\n    <span class=\"pl-c1\">print</span> scope2.reuse</pre></div>\n</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When users using a variable scope to create another variable scope, the <code>reuse</code> can not be changed from <code>True</code> to <code>False</code>. But it's OK if users change <code>reuse</code> from <code>False</code> to <code>True</code>. You can use the code above to reproduce the issue.</p>\n<h3>Source code / logs</h3>\n<p>I debugged the problem and found the root cause is at <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/ops/variable_scope.py#L1322\">https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/ops/variable_scope.py#L1322</a>.</p>\n<div class=\"highlight highlight-source-python\"><pre>default_varscope[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> VariableScope(\n    name_or_scope.reuse <span class=\"pl-k\">if</span> reuse <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">else</span> reuse, <span class=\"pl-c\"><span class=\"pl-c\">#</span> the line of code causing the bug</span>\n    <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>new_name,\n    <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>name_or_scope.initializer,\n    <span class=\"pl-v\">regularizer</span><span class=\"pl-k\">=</span>name_or_scope.regularizer,\n    <span class=\"pl-v\">caching_device</span><span class=\"pl-k\">=</span>name_or_scope.caching_device,\n    <span class=\"pl-v\">partitioner</span><span class=\"pl-k\">=</span>name_or_scope.partitioner,\n    <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>name_or_scope.dtype,\n    <span class=\"pl-v\">custom_getter</span><span class=\"pl-k\">=</span>name_or_scope.custom_getter,\n    <span class=\"pl-v\">name_scope</span><span class=\"pl-k\">=</span>name_scope,\n    <span class=\"pl-v\">use_resource</span><span class=\"pl-k\">=</span>name_or_scope.use_resource)</pre></div>\n<p>The line of code means that if <code>reuse</code> is <code>None</code>, it will use <code>name_or_scope.reuse</code>, preventing users from changing <code>reuse</code> to <code>None or False</code>. Note that  <code>None</code> is the same as <code>False</code> for <code>reuse</code> and tensorflow replaces <code>False</code> with <code>None</code> beforehand at <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/ops/variable_scope.py#L1540\">https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/ops/variable_scope.py#L1540</a>.</p>\n<p>I think it should be changed to <code>reuse</code>.</p>\n<p>Thank you.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nNo.\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 14.04.\nTensorFlow installed from (source or binary):\nFrom source.\nTensorFlow version (use command below):\n('v1.3.0-rc1-633-gcf375f0', '1.2.1-rc1').\nPython version:\n2.7.6.\nBazel version (if compiling from source):\n0.5.3.\nCUDA/cuDNN version:\nCUDA 8.0.\nGPU model and memory:\nN/A.\nExact command to reproduce:\nwith tf.variable_scope(\"test_scope\", reuse=True) as scope:\n    pass\nwith tf.variable_scope(scope, reuse=False) as scope2:\n    print scope2.reuse\n\n\nDescribe the problem\nWhen users using a variable scope to create another variable scope, the reuse can not be changed from True to False. But it's OK if users change reuse from False to True. You can use the code above to reproduce the issue.\nSource code / logs\nI debugged the problem and found the root cause is at https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/ops/variable_scope.py#L1322.\ndefault_varscope[0] = VariableScope(\n    name_or_scope.reuse if reuse is None else reuse, # the line of code causing the bug\n    name=new_name,\n    initializer=name_or_scope.initializer,\n    regularizer=name_or_scope.regularizer,\n    caching_device=name_or_scope.caching_device,\n    partitioner=name_or_scope.partitioner,\n    dtype=name_or_scope.dtype,\n    custom_getter=name_or_scope.custom_getter,\n    name_scope=name_scope,\n    use_resource=name_or_scope.use_resource)\nThe line of code means that if reuse is None, it will use name_or_scope.reuse, preventing users from changing reuse to None or False. Note that  None is the same as False for reuse and tensorflow replaces False with None beforehand at https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/ops/variable_scope.py#L1540.\nI think it should be changed to reuse.\nThank you.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nNo.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 14.04.\r\n- **TensorFlow installed from (source or binary)**:\r\nFrom source.\r\n- **TensorFlow version (use command below)**:\r\n('v1.3.0-rc1-633-gcf375f0', '1.2.1-rc1').\r\n- **Python version**: \r\n2.7.6.\r\n- **Bazel version (if compiling from source)**:\r\n0.5.3.\r\n- **CUDA/cuDNN version**:\r\nCUDA 8.0.\r\n- **GPU model and memory**:\r\nN/A.\r\n- **Exact command to reproduce**:\r\n    ```python\r\n    with tf.variable_scope(\"test_scope\", reuse=True) as scope:\r\n        pass\r\n    with tf.variable_scope(scope, reuse=False) as scope2:\r\n        print scope2.reuse\r\n    ```\r\n\r\n### Describe the problem\r\nWhen users using a variable scope to create another variable scope, the `reuse` can not be changed from `True` to `False`. But it's OK if users change `reuse` from `False` to `True`. You can use the code above to reproduce the issue.\r\n\r\n### Source code / logs\r\nI debugged the problem and found the root cause is at https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/ops/variable_scope.py#L1322.\r\n```python\r\ndefault_varscope[0] = VariableScope(\r\n    name_or_scope.reuse if reuse is None else reuse, # the line of code causing the bug\r\n    name=new_name,\r\n    initializer=name_or_scope.initializer,\r\n    regularizer=name_or_scope.regularizer,\r\n    caching_device=name_or_scope.caching_device,\r\n    partitioner=name_or_scope.partitioner,\r\n    dtype=name_or_scope.dtype,\r\n    custom_getter=name_or_scope.custom_getter,\r\n    name_scope=name_scope,\r\n    use_resource=name_or_scope.use_resource)\r\n```\r\nThe line of code means that if `reuse` is `None`, it will use `name_or_scope.reuse`, preventing users from changing `reuse` to `None or False`. Note that  `None` is the same as `False` for `reuse` and tensorflow replaces `False` with `None` beforehand at https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/ops/variable_scope.py#L1540.\r\n\r\nI think it should be changed to `reuse`.\r\n\r\nThank you.\r\n"}