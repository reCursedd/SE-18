{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/337308060", "html_url": "https://github.com/tensorflow/tensorflow/issues/13713#issuecomment-337308060", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13713", "id": 337308060, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzMwODA2MA==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-17T17:34:43Z", "updated_at": "2017-10-17T17:34:43Z", "author_association": "MEMBER", "body_html": "<p>Just setting that line to <code>reuse</code> unconditionally would mean that failing to set <code>reuse</code> in a <code>variable_scope</code> would also disable variable reuse rather than inheriting from the scope that was passed in. That doesn't seem workable.</p>\n<p>So we'd need <code>reuse={True, False, None, AUTO_REUSE, REALLY_FALSE}</code>, which is getting to be a bit much for a Boolean. Does <code>AUTO_REUSE</code>, recently added, satisfy your use case? What are you trying to do?</p>", "body_text": "Just setting that line to reuse unconditionally would mean that failing to set reuse in a variable_scope would also disable variable reuse rather than inheriting from the scope that was passed in. That doesn't seem workable.\nSo we'd need reuse={True, False, None, AUTO_REUSE, REALLY_FALSE}, which is getting to be a bit much for a Boolean. Does AUTO_REUSE, recently added, satisfy your use case? What are you trying to do?", "body": "Just setting that line to `reuse` unconditionally would mean that failing to set `reuse` in a `variable_scope` would also disable variable reuse rather than inheriting from the scope that was passed in. That doesn't seem workable.\r\n\r\nSo we'd need `reuse={True, False, None, AUTO_REUSE, REALLY_FALSE}`, which is getting to be a bit much for a Boolean. Does `AUTO_REUSE`, recently added, satisfy your use case? What are you trying to do?"}