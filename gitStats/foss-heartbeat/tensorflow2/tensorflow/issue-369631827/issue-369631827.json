{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22942", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22942/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22942/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22942/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22942", "id": 369631827, "node_id": "MDU6SXNzdWUzNjk2MzE4Mjc=", "number": 22942, "title": "Keras tensorflow : Freeze calibrated mode, extract graph, input and output tensors", "user": {"login": "volvador", "id": 15655730, "node_id": "MDQ6VXNlcjE1NjU1NzMw", "avatar_url": "https://avatars1.githubusercontent.com/u/15655730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/volvador", "html_url": "https://github.com/volvador", "followers_url": "https://api.github.com/users/volvador/followers", "following_url": "https://api.github.com/users/volvador/following{/other_user}", "gists_url": "https://api.github.com/users/volvador/gists{/gist_id}", "starred_url": "https://api.github.com/users/volvador/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/volvador/subscriptions", "organizations_url": "https://api.github.com/users/volvador/orgs", "repos_url": "https://api.github.com/users/volvador/repos", "events_url": "https://api.github.com/users/volvador/events{/privacy}", "received_events_url": "https://api.github.com/users/volvador/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097546578, "node_id": "MDU6TGFiZWwxMDk3NTQ2NTc4", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:keras", "name": "comp:keras", "color": "0052cc", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-12T16:57:05Z", "updated_at": "2018-11-02T01:13:04Z", "closed_at": "2018-11-02T01:13:04Z", "author_association": "NONE", "body_html": "<p>I create a tensorflow medel using keras embedded in tensorflow:</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense \nmodel = Sequential()\nmodel.add(Dense(input_dim=input_dim, units=hidden_dim))\nmodel.add(Dense(units=output_dim, activation='linear'))\nmodel.compile(loss='mse', optimizer='adam')\n</code></pre>\n<p>After fitting the model, I want to freeze it and to extract the graph, the input tensor, and the output tensor.</p>\n<pre><code>session = tf.keras.backend.get_session()\noutput_node_names = [node.op.name for node in model.outputs]\ngraphdef = tf.graph_util.convert_variables_to_constants(session, session.graph_def, \noutput_node_names)\n\nwith tf.Graph().as_default() as graph:\n    tf.import_graph_def(graphdef)\n    input_tensor = graph.get_tensor_by_name(graph.get_operations()[0].name+':0')\n    output_tensor = graph.get_tensor_by_name(graph.get_operations()[-1].name+':0')\n</code></pre>\n<p>So that after the above code, the variable <code>graph</code> will contain the graph, and <code>input_tensor</code> and <code>output_tensor</code> will contain respectively the  input and output of the graph.</p>\n<p>The graph does not offer a method to get its input and output tensors, hence my complicated method above. But it does not work.</p>\n<p>Can you help please or advise a better way to do it?</p>\n<p>Using Tensorflow 1.5</p>", "body_text": "I create a tensorflow medel using keras embedded in tensorflow:\nimport tensorflow as tf\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense \nmodel = Sequential()\nmodel.add(Dense(input_dim=input_dim, units=hidden_dim))\nmodel.add(Dense(units=output_dim, activation='linear'))\nmodel.compile(loss='mse', optimizer='adam')\n\nAfter fitting the model, I want to freeze it and to extract the graph, the input tensor, and the output tensor.\nsession = tf.keras.backend.get_session()\noutput_node_names = [node.op.name for node in model.outputs]\ngraphdef = tf.graph_util.convert_variables_to_constants(session, session.graph_def, \noutput_node_names)\n\nwith tf.Graph().as_default() as graph:\n    tf.import_graph_def(graphdef)\n    input_tensor = graph.get_tensor_by_name(graph.get_operations()[0].name+':0')\n    output_tensor = graph.get_tensor_by_name(graph.get_operations()[-1].name+':0')\n\nSo that after the above code, the variable graph will contain the graph, and input_tensor and output_tensor will contain respectively the  input and output of the graph.\nThe graph does not offer a method to get its input and output tensors, hence my complicated method above. But it does not work.\nCan you help please or advise a better way to do it?\nUsing Tensorflow 1.5", "body": "I create a tensorflow medel using keras embedded in tensorflow:\r\n\r\n    import tensorflow as tf\r\n    from tensorflow.python.keras.models import Sequential\r\n    from tensorflow.python.keras.layers import Dense \r\n    model = Sequential()\r\n    model.add(Dense(input_dim=input_dim, units=hidden_dim))\r\n    model.add(Dense(units=output_dim, activation='linear'))\r\n    model.compile(loss='mse', optimizer='adam')\r\n\r\nAfter fitting the model, I want to freeze it and to extract the graph, the input tensor, and the output tensor. \r\n    \r\n    session = tf.keras.backend.get_session()\r\n    output_node_names = [node.op.name for node in model.outputs]\r\n    graphdef = tf.graph_util.convert_variables_to_constants(session, session.graph_def, \r\n    output_node_names)\r\n\r\n    with tf.Graph().as_default() as graph:\r\n        tf.import_graph_def(graphdef)\r\n        input_tensor = graph.get_tensor_by_name(graph.get_operations()[0].name+':0')\r\n        output_tensor = graph.get_tensor_by_name(graph.get_operations()[-1].name+':0')\r\n\r\n\r\nSo that after the above code, the variable `graph` will contain the graph, and `input_tensor` and `output_tensor` will contain respectively the  input and output of the graph.\r\n\r\nThe graph does not offer a method to get its input and output tensors, hence my complicated method above. But it does not work.\r\n\r\nCan you help please or advise a better way to do it?\r\n\r\nUsing Tensorflow 1.5"}