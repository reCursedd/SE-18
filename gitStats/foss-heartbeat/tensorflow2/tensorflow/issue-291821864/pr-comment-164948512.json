{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/164948512", "pull_request_review_id": 92800922, "id": 164948512, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDk0ODUxMg==", "diff_hunk": "@@ -16,30 +16,74 @@ limitations under the License.\n #ifndef TENSORFLOW_CONTRIB_LITE_EXAMPLES_LABEL_IMAGE_BITMAP_HELPERS_IMPL_H\n #define TENSORFLOW_CONTRIB_LITE_EXAMPLES_LABEL_IMAGE_BITMAP_HELPERS_IMPL_H\n \n+#include \"tensorflow/contrib/lite/builtin_op_data.h\"\n+#include \"tensorflow/contrib/lite/interpreter.h\"\n+#include \"tensorflow/contrib/lite/kernels/register.h\"\n+#include \"tensorflow/contrib/lite/string_util.h\"\n+#include \"tensorflow/contrib/lite/version.h\"\n+\n #include \"tensorflow/contrib/lite/examples/label_image/label_image.h\"\n \n namespace tflite {\n namespace label_image {\n \n template <class T>\n-void downsize(T* out, uint8_t* in, int image_height, int image_width,\n-              int image_channels, int wanted_height, int wanted_width,\n-              int wanted_channels, Settings* s) {\n-  for (int y = 0; y < wanted_height; ++y) {\n-    const int in_y = (y * image_height) / wanted_height;\n-    uint8_t* in_row = in + (in_y * image_width * image_channels);\n-    T* out_row = out + (y * wanted_width * wanted_channels);\n-    for (int x = 0; x < wanted_width; ++x) {\n-      const int in_x = (x * image_width) / wanted_width;\n-      uint8_t* in_pixel = in_row + (in_x * image_channels);\n-      T* out_pixel = out_row + (x * wanted_channels);\n-      for (int c = 0; c < wanted_channels; ++c) {\n-        if (s->input_floating)\n-          out_pixel[c] = (in_pixel[c] - s->input_mean) / s->input_std;\n-        else\n-          out_pixel[c] = in_pixel[c];\n-      }\n-    }\n+void resize(T* out, uint8_t* in, int image_height, int image_width,\n+            int image_channels, int wanted_height, int wanted_width,\n+            int wanted_channels, Settings* s) {\n+\n+  int number_of_pixels = image_height * image_width * image_channels;\n+  std::unique_ptr<Interpreter> interpreter(new Interpreter);\n+\n+  int base_index = 0;\n+\n+  // two inputs: input and new_sizes\n+  interpreter->AddTensors(2, &base_index);\n+  // one output\n+  interpreter->AddTensors(1, &base_index);\n+  // set input and output tensors\n+  interpreter->SetInputs({0, 1});\n+  interpreter->SetOutputs({2});\n+\n+  // set paramters of tensors\n+  TfLiteQuantizationParams quant;\n+  interpreter->SetTensorParametersReadWrite(\n+      0, kTfLiteFloat32, \"input\",\n+      {1, image_height, image_width, image_channels}, quant);\n+  interpreter->SetTensorParametersReadWrite(1, kTfLiteInt32, \"new_size\", {2},\n+                                            quant);\n+  interpreter->SetTensorParametersReadWrite(\n+      2, kTfLiteFloat32, \"output\",\n+      {1, wanted_height, wanted_width, wanted_channels}, quant);\n+\n+  ops::builtin::BuiltinOpResolver resolver;\n+  TfLiteRegistration* resize_op =\n+      resolver.FindOp(BuiltinOperator_RESIZE_BILINEAR);\n+  interpreter->AddNodeWithParameters({0, 1}, {2}, nullptr, 0, nullptr,\n+                                     resize_op, nullptr);\n+\n+  interpreter->AllocateTensors();\n+\n+  // fill input image\n+  // in[] are integers, cannot do memcpy() directly\n+  auto input = interpreter->typed_tensor<float>(0);\n+  for (int i = 0; i < number_of_pixels; i++) input[i] = in[i];", "path": "tensorflow/contrib/lite/examples/label_image/bitmap_helpers_impl.h", "position": null, "original_position": 73, "commit_id": "00c4febdac23cade71d6fdcf10c9ccb982e2a582", "original_commit_id": "3cf36b440e7866895e5fc20f2c15ac56f0d96cbc", "user": {"login": "freedomtan", "id": 3395998, "node_id": "MDQ6VXNlcjMzOTU5OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3395998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freedomtan", "html_url": "https://github.com/freedomtan", "followers_url": "https://api.github.com/users/freedomtan/followers", "following_url": "https://api.github.com/users/freedomtan/following{/other_user}", "gists_url": "https://api.github.com/users/freedomtan/gists{/gist_id}", "starred_url": "https://api.github.com/users/freedomtan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freedomtan/subscriptions", "organizations_url": "https://api.github.com/users/freedomtan/orgs", "repos_url": "https://api.github.com/users/freedomtan/repos", "events_url": "https://api.github.com/users/freedomtan/events{/privacy}", "received_events_url": "https://api.github.com/users/freedomtan/received_events", "type": "User", "site_admin": false}, "body": "OK, will do. Clang-format did it :-)", "created_at": "2018-01-31T03:58:50Z", "updated_at": "2018-01-31T05:29:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16446#discussion_r164948512", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16446", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/164948512"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16446#discussion_r164948512"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16446"}}, "body_html": "<p>OK, will do. Clang-format did it :-)</p>", "body_text": "OK, will do. Clang-format did it :-)", "in_reply_to_id": 164823011}