{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/259356303", "html_url": "https://github.com/tensorflow/tensorflow/issues/5477#issuecomment-259356303", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5477", "id": 259356303, "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTM1NjMwMw==", "user": {"login": "thjashin", "id": 5267554, "node_id": "MDQ6VXNlcjUyNjc1NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5267554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thjashin", "html_url": "https://github.com/thjashin", "followers_url": "https://api.github.com/users/thjashin/followers", "following_url": "https://api.github.com/users/thjashin/following{/other_user}", "gists_url": "https://api.github.com/users/thjashin/gists{/gist_id}", "starred_url": "https://api.github.com/users/thjashin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thjashin/subscriptions", "organizations_url": "https://api.github.com/users/thjashin/orgs", "repos_url": "https://api.github.com/users/thjashin/repos", "events_url": "https://api.github.com/users/thjashin/events{/privacy}", "received_events_url": "https://api.github.com/users/thjashin/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-09T08:16:00Z", "updated_at": "2016-11-09T08:19:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=12770037\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sherrym\">@sherrym</a> Thanks. This is very similar to what I want. But I feel there are some difficulties when using it to copy ops in a subgraph.</p>\n<p>First these operations are not always in the same scope, so I have to copy them one by one. What I do is to traverse the subgraph and get those ops. However, some operations share the same name with their uproot scopes, e.g. <code>tf.random_normal</code> creates a name_scope named \"random_normal\" while the <code>tf.add</code> operation in it shares the same name. This causes problems when I'm trying to copy this <code>tf.add</code> using its name because <code>copy_scoped_meta_graph()</code> will copy the outer name_scope.</p>\n<p>Do you have some workaround for this? Maybe a copy function accepting operation objects other than scope names could be more suitable for my case.</p>", "body_text": "@sherrym Thanks. This is very similar to what I want. But I feel there are some difficulties when using it to copy ops in a subgraph.\nFirst these operations are not always in the same scope, so I have to copy them one by one. What I do is to traverse the subgraph and get those ops. However, some operations share the same name with their uproot scopes, e.g. tf.random_normal creates a name_scope named \"random_normal\" while the tf.add operation in it shares the same name. This causes problems when I'm trying to copy this tf.add using its name because copy_scoped_meta_graph() will copy the outer name_scope.\nDo you have some workaround for this? Maybe a copy function accepting operation objects other than scope names could be more suitable for my case.", "body": "@sherrym Thanks. This is very similar to what I want. But I feel there are some difficulties when using it to copy ops in a subgraph.\n\nFirst these operations are not always in the same scope, so I have to copy them one by one. What I do is to traverse the subgraph and get those ops. However, some operations share the same name with their uproot scopes, e.g. `tf.random_normal` creates a name_scope named \"random_normal\" while the `tf.add` operation in it shares the same name. This causes problems when I'm trying to copy this `tf.add` using its name because `copy_scoped_meta_graph()` will copy the outer name_scope.\n\nDo you have some workaround for this? Maybe a copy function accepting operation objects other than scope names could be more suitable for my case.\n"}