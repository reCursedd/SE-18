{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/276520076", "html_url": "https://github.com/tensorflow/tensorflow/issues/6132#issuecomment-276520076", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6132", "id": 276520076, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjUyMDA3Ng==", "user": {"login": "vvpreetham", "id": 16869974, "node_id": "MDQ6VXNlcjE2ODY5OTc0", "avatar_url": "https://avatars2.githubusercontent.com/u/16869974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvpreetham", "html_url": "https://github.com/vvpreetham", "followers_url": "https://api.github.com/users/vvpreetham/followers", "following_url": "https://api.github.com/users/vvpreetham/following{/other_user}", "gists_url": "https://api.github.com/users/vvpreetham/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvpreetham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvpreetham/subscriptions", "organizations_url": "https://api.github.com/users/vvpreetham/orgs", "repos_url": "https://api.github.com/users/vvpreetham/repos", "events_url": "https://api.github.com/users/vvpreetham/events{/privacy}", "received_events_url": "https://api.github.com/users/vvpreetham/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-31T22:54:39Z", "updated_at": "2017-01-31T22:54:39Z", "author_association": "NONE", "body_html": "<p>The problem seems to be the SparseTensor. Note that the following piece of code works:</p>\n<pre><code>categorical_cols = {k: tf.SparseTensor(\n        indices=[[i, 0] for i in range(df[k].size)],\n        values=df[k].values,\n        shape=[df[k].size, 1]) for k in CATEGORICAL_COLUMNS}\nfor d in ['/gpu:0','/gpu:1','/gpu:2']:\n    with tf.device(d):\n        # Converts the label column into a constant Tensor.\n        label = tf.constant(df[REGRESSOR_LABEL_COLUMN].values)\n        # Returns the feature columns and the label.\n</code></pre>\n<p>BUT if I do the following (that-is, assign the SparseTensor to the devices, it fails)</p>\n<pre><code>for d in ['/gpu:0','/gpu:1','/gpu:2']:\n    with tf.device(d):\n        # Creates a dictionary mapping from each categorical feature column name (k)\n        # to the values of that column stored in a tf.SparseTensor.\n        categorical_cols = {k: tf.SparseTensor(\n                indices=[[i, 0] for i in range(df[k].size)],\n                values=df[k].values,\n                shape=[df[k].size, 1]) for k in CATEGORICAL_COLUMNS}\n        # Converts the label column into a constant Tensor.\n        label = tf.constant(df[REGRESSOR_LABEL_COLUMN].values)\n        # Returns the feature columns and the label.\n</code></pre>", "body_text": "The problem seems to be the SparseTensor. Note that the following piece of code works:\ncategorical_cols = {k: tf.SparseTensor(\n        indices=[[i, 0] for i in range(df[k].size)],\n        values=df[k].values,\n        shape=[df[k].size, 1]) for k in CATEGORICAL_COLUMNS}\nfor d in ['/gpu:0','/gpu:1','/gpu:2']:\n    with tf.device(d):\n        # Converts the label column into a constant Tensor.\n        label = tf.constant(df[REGRESSOR_LABEL_COLUMN].values)\n        # Returns the feature columns and the label.\n\nBUT if I do the following (that-is, assign the SparseTensor to the devices, it fails)\nfor d in ['/gpu:0','/gpu:1','/gpu:2']:\n    with tf.device(d):\n        # Creates a dictionary mapping from each categorical feature column name (k)\n        # to the values of that column stored in a tf.SparseTensor.\n        categorical_cols = {k: tf.SparseTensor(\n                indices=[[i, 0] for i in range(df[k].size)],\n                values=df[k].values,\n                shape=[df[k].size, 1]) for k in CATEGORICAL_COLUMNS}\n        # Converts the label column into a constant Tensor.\n        label = tf.constant(df[REGRESSOR_LABEL_COLUMN].values)\n        # Returns the feature columns and the label.", "body": "The problem seems to be the SparseTensor. Note that the following piece of code works:\r\n\r\n    categorical_cols = {k: tf.SparseTensor(\r\n            indices=[[i, 0] for i in range(df[k].size)],\r\n            values=df[k].values,\r\n            shape=[df[k].size, 1]) for k in CATEGORICAL_COLUMNS}\r\n    for d in ['/gpu:0','/gpu:1','/gpu:2']:\r\n        with tf.device(d):\r\n            # Converts the label column into a constant Tensor.\r\n            label = tf.constant(df[REGRESSOR_LABEL_COLUMN].values)\r\n            # Returns the feature columns and the label.\r\n\r\n\r\nBUT if I do the following (that-is, assign the SparseTensor to the devices, it fails)\r\n\r\n    for d in ['/gpu:0','/gpu:1','/gpu:2']:\r\n        with tf.device(d):\r\n            # Creates a dictionary mapping from each categorical feature column name (k)\r\n            # to the values of that column stored in a tf.SparseTensor.\r\n            categorical_cols = {k: tf.SparseTensor(\r\n                    indices=[[i, 0] for i in range(df[k].size)],\r\n                    values=df[k].values,\r\n                    shape=[df[k].size, 1]) for k in CATEGORICAL_COLUMNS}\r\n            # Converts the label column into a constant Tensor.\r\n            label = tf.constant(df[REGRESSOR_LABEL_COLUMN].values)\r\n            # Returns the feature columns and the label.\r\n"}