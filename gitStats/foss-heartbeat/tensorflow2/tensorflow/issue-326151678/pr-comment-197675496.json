{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/197675496", "pull_request_review_id": 131461969, "id": 197675496, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzY3NTQ5Ng==", "diff_hunk": "@@ -0,0 +1,80 @@\n+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"SequenceFile Dataset.\"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.contrib.hadoop.python.ops import hadoop_op_loader  # pylint: disable=unused-import\n+from tensorflow.contrib.hadoop.python.ops import gen_dataset_ops\n+from tensorflow.python.data.ops.dataset_ops import Dataset\n+from tensorflow.python.data.util import nest\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import ops\n+from tensorflow.python.framework import tensor_shape\n+\n+\n+class SequenceFileDataset(Dataset):\n+  \"\"\"A Sequence File Dataset that reads the sequence file.\"\"\"\n+\n+  def __init__(self, filenames, output_types=(dtypes.string, dtypes.string)):\n+    \"\"\"Create a `SequenceFileDataset`.\n+\n+    `SequenceFileDataset` allows a user to read data from a hadoop sequence\n+    file. A sequence file consists of (key value) pairs sequentially. At\n+    the moment, `org.apache.hadoop.io.Text` is the only serialization type\n+    being supported, and there is no compression support.\n+\n+    For example:\n+\n+    ```python\n+    dataset = tf.contrib.hadoop.SequenceFileDataset(\n+        \"/foo/bar.seq\", (tf.string, tf.string))\n+    iterator = dataset.make_one_shot_iterator()\n+    next_element = iterator.get_next()\n+    # Prints the (key, value) pairs inside a hadoop sequence file.\n+    while True:\n+      try:\n+        print(sess.run(next_element))\n+      except tf.errors.OutOfRangeError:\n+        break\n+    ```\n+\n+    Args:\n+      filenames: A `tf.string` tensor containing one or more filenames.\n+      output_types: A tuple of `tf.DType` objects representing the types of the\n+        key-value pairs returned. Only `(tf.string, tf.string)` is supported\n+        at the moment.\n+    \"\"\"\n+    super(SequenceFileDataset, self).__init__()\n+    self._filenames = ops.convert_to_tensor(\n+        filenames, dtype=dtypes.string, name=\"filenames\")\n+    self._output_types = output_types\n+\n+  def _as_variant_tensor(self):\n+    return gen_dataset_ops.sequence_file_dataset(\n+        self._filenames, nest.flatten(self.output_types))\n+\n+  @property\n+  def output_classes(self):\n+    return nest.map_structure(lambda _: ops.Tensor, self._output_types)\n+\n+  @property\n+  def output_shapes(self):\n+    return (tensor_shape.TensorShape([]), tensor_shape.TensorShape([]))\n+\n+  @property\n+  def output_types(self):\n+    return self._output_types", "path": "tensorflow/contrib/hadoop/python/ops/hadoop_dataset_ops.py", "position": null, "original_position": 80, "commit_id": "c8e2668612189bcb2784334ce61636a6502c1603", "original_commit_id": "951f26d6af78707412434275efc769f4ec4194a6", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "Simplify these: \r\n\r\n```python\r\n\r\n  @property\r\n  def output_classes(self):\r\n    return ops.Tensor, ops.Tensor\r\n\r\n  ...\r\n\r\n  @property\r\n  def output_types(self):\r\n    return dtypes.string, dtypes.string", "created_at": "2018-06-25T04:08:21Z", "updated_at": "2018-08-09T18:44:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19534#discussion_r197675496", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19534", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/197675496"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19534#discussion_r197675496"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19534"}}, "body_html": "<p>Simplify these:</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">output_classes</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-k\">return</span> ops.Tensor, ops.Tensor\n\n  <span class=\"pl-c1\">...</span>\n\n  <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">output_types</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-k\">return</span> dtypes.string, dtypes.string</pre></div>", "body_text": "Simplify these:\n  @property\n  def output_classes(self):\n    return ops.Tensor, ops.Tensor\n\n  ...\n\n  @property\n  def output_types(self):\n    return dtypes.string, dtypes.string"}