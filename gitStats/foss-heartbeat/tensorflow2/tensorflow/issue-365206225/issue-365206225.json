{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22632", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22632/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22632/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22632/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22632", "id": 365206225, "node_id": "MDU6SXNzdWUzNjUyMDYyMjU=", "number": 22632, "title": "Sometimes Deadlock from TF Dataset using Generator", "user": {"login": "ghostplant", "id": 12099308, "node_id": "MDQ6VXNlcjEyMDk5MzA4", "avatar_url": "https://avatars2.githubusercontent.com/u/12099308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghostplant", "html_url": "https://github.com/ghostplant", "followers_url": "https://api.github.com/users/ghostplant/followers", "following_url": "https://api.github.com/users/ghostplant/following{/other_user}", "gists_url": "https://api.github.com/users/ghostplant/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghostplant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghostplant/subscriptions", "organizations_url": "https://api.github.com/users/ghostplant/orgs", "repos_url": "https://api.github.com/users/ghostplant/repos", "events_url": "https://api.github.com/users/ghostplant/events{/privacy}", "received_events_url": "https://api.github.com/users/ghostplant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-09-30T08:45:31Z", "updated_at": "2018-11-09T18:53:53Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Seems to be a normal generator code, but 50% possibility to hang on exit / or print deconstruction exceptions, and it is also possible to exit successfully.<br>\nThe Tensorflow version I use v1.10</p>\n<div class=\"highlight highlight-source-shell\"><pre>import tensorflow as tf\nimport numpy as np\n\ndata_dir, batch_size, depth, height, width = <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/tmp/dataset/flowers_jpegs<span class=\"pl-pds\">'</span></span>, 64, 3, 224, 224\n\ndef <span class=\"pl-en\">generator</span>():\n  from keras.preprocessing.image import ImageDataGenerator\n  from keras.utils import OrderedEnqueuer\n  gen = ImageDataGenerator(data_format=<span class=\"pl-s\"><span class=\"pl-pds\">'</span>channels_first<span class=\"pl-pds\">'</span></span>, rescale=1./255, fill_mode=<span class=\"pl-s\"><span class=\"pl-pds\">'</span>nearest<span class=\"pl-pds\">'</span></span>).flow_from_directory(\n                           data_dir + <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/train<span class=\"pl-pds\">'</span></span>, target_size=(height, width), batch_size=batch_size)\n  enqueuer = OrderedEnqueuer(gen, use_multiprocessing=False)\n  enqueuer.start(workers=16)\n  n_classes = gen.num_classes\n\n  <span class=\"pl-k\">while</span> True:\n    batch_xs, batch_ys = <span class=\"pl-en\">next(enqueuer.get</span>())\n    yield batch_xs, batch_ys\n\nds = tf.data.Dataset.from_generator(generator, (tf.float32, tf.float32))\nds = ds.prefetch(buffer_size=batch_size)\nds_iter = <span class=\"pl-en\">ds.make_one_shot_iterator</span>()\n\n\nwith <span class=\"pl-en\">tf.Session</span>() as sess:\n  images, labels = <span class=\"pl-en\">ds_iter.get_next</span>()\n  images = tf.reshape(images, (-1, 3, height, width))\n  labels = tf.reshape(labels, (-1, 2))\n  print(sess.run(images).reshape([-1])[0:8])\n\n  images, labels = <span class=\"pl-en\">ds_iter.get_next</span>()\n  images = tf.reshape(images, (-1, 3, height, width))\n  labels = tf.reshape(labels, (-1, 2))\n  print(sess.run(images).reshape([-1])[0:8])</pre></div>\n<p><strong>Environment:</strong><br>\n<strong>Have I written custom code:</strong> The code above the the complete single python3 file, and no other libraries include customized changes.<br>\n**OS Platform and Distribution: Ubuntu 16.04 x86-64 LTS;<br>\n<strong>TensorFlow installed from:</strong> clone <code>tensorflow:v1.10.1</code> from github and build for CUDA 1.10 and CUDNN 7.3;<br>\n<strong>Bazel version:</strong> 0.15.0<br>\n<strong>CUDA/cuDNN version:</strong> CUDA = 10.0; CUDNN = 7.3;<br>\n<strong>GPU model and memory:</strong> Tesla V100 (each GPU 16 GB memory)<br>\n<strong>Exact command to reproduce:</strong> <code>python3 above-code.py</code> (note that \"/tmp/dataset/flowers_jpegs\" is a standard directory including original jpeg images inside serveral subfolders (as different classes) which satisfies Keras ImageData directory input format.)<br>\n<strong>Mobile device:</strong> N/A</p>", "body_text": "Seems to be a normal generator code, but 50% possibility to hang on exit / or print deconstruction exceptions, and it is also possible to exit successfully.\nThe Tensorflow version I use v1.10\nimport tensorflow as tf\nimport numpy as np\n\ndata_dir, batch_size, depth, height, width = '/tmp/dataset/flowers_jpegs', 64, 3, 224, 224\n\ndef generator():\n  from keras.preprocessing.image import ImageDataGenerator\n  from keras.utils import OrderedEnqueuer\n  gen = ImageDataGenerator(data_format='channels_first', rescale=1./255, fill_mode='nearest').flow_from_directory(\n                           data_dir + '/train', target_size=(height, width), batch_size=batch_size)\n  enqueuer = OrderedEnqueuer(gen, use_multiprocessing=False)\n  enqueuer.start(workers=16)\n  n_classes = gen.num_classes\n\n  while True:\n    batch_xs, batch_ys = next(enqueuer.get())\n    yield batch_xs, batch_ys\n\nds = tf.data.Dataset.from_generator(generator, (tf.float32, tf.float32))\nds = ds.prefetch(buffer_size=batch_size)\nds_iter = ds.make_one_shot_iterator()\n\n\nwith tf.Session() as sess:\n  images, labels = ds_iter.get_next()\n  images = tf.reshape(images, (-1, 3, height, width))\n  labels = tf.reshape(labels, (-1, 2))\n  print(sess.run(images).reshape([-1])[0:8])\n\n  images, labels = ds_iter.get_next()\n  images = tf.reshape(images, (-1, 3, height, width))\n  labels = tf.reshape(labels, (-1, 2))\n  print(sess.run(images).reshape([-1])[0:8])\nEnvironment:\nHave I written custom code: The code above the the complete single python3 file, and no other libraries include customized changes.\n**OS Platform and Distribution: Ubuntu 16.04 x86-64 LTS;\nTensorFlow installed from: clone tensorflow:v1.10.1 from github and build for CUDA 1.10 and CUDNN 7.3;\nBazel version: 0.15.0\nCUDA/cuDNN version: CUDA = 10.0; CUDNN = 7.3;\nGPU model and memory: Tesla V100 (each GPU 16 GB memory)\nExact command to reproduce: python3 above-code.py (note that \"/tmp/dataset/flowers_jpegs\" is a standard directory including original jpeg images inside serveral subfolders (as different classes) which satisfies Keras ImageData directory input format.)\nMobile device: N/A", "body": "Seems to be a normal generator code, but 50% possibility to hang on exit / or print deconstruction exceptions, and it is also possible to exit successfully.\r\nThe Tensorflow version I use v1.10\r\n\r\n```sh\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndata_dir, batch_size, depth, height, width = '/tmp/dataset/flowers_jpegs', 64, 3, 224, 224\r\n\r\ndef generator():\r\n  from keras.preprocessing.image import ImageDataGenerator\r\n  from keras.utils import OrderedEnqueuer\r\n  gen = ImageDataGenerator(data_format='channels_first', rescale=1./255, fill_mode='nearest').flow_from_directory(\r\n                           data_dir + '/train', target_size=(height, width), batch_size=batch_size)\r\n  enqueuer = OrderedEnqueuer(gen, use_multiprocessing=False)\r\n  enqueuer.start(workers=16)\r\n  n_classes = gen.num_classes\r\n\r\n  while True:\r\n    batch_xs, batch_ys = next(enqueuer.get())\r\n    yield batch_xs, batch_ys\r\n\r\nds = tf.data.Dataset.from_generator(generator, (tf.float32, tf.float32))\r\nds = ds.prefetch(buffer_size=batch_size)\r\nds_iter = ds.make_one_shot_iterator()\r\n\r\n\r\nwith tf.Session() as sess:\r\n  images, labels = ds_iter.get_next()\r\n  images = tf.reshape(images, (-1, 3, height, width))\r\n  labels = tf.reshape(labels, (-1, 2))\r\n  print(sess.run(images).reshape([-1])[0:8])\r\n\r\n  images, labels = ds_iter.get_next()\r\n  images = tf.reshape(images, (-1, 3, height, width))\r\n  labels = tf.reshape(labels, (-1, 2))\r\n  print(sess.run(images).reshape([-1])[0:8])\r\n```\r\n\r\n**Environment:**\r\n**Have I written custom code:** The code above the the complete single python3 file, and no other libraries include customized changes.\r\n**OS Platform and Distribution: Ubuntu 16.04 x86-64 LTS;\r\n**TensorFlow installed from:** clone `tensorflow:v1.10.1` from github and build for CUDA 1.10 and CUDNN 7.3;\r\n**Bazel version:** 0.15.0\r\n**CUDA/cuDNN version:** CUDA = 10.0; CUDNN = 7.3;\r\n**GPU model and memory:** Tesla V100 (each GPU 16 GB memory)\r\n**Exact command to reproduce:** `python3 above-code.py` (note that \"/tmp/dataset/flowers_jpegs\" is a standard directory including original jpeg images inside serveral subfolders (as different classes) which satisfies Keras ImageData directory input format.)\r\n**Mobile device:** N/A\r\n"}