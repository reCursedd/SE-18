{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/313917326", "html_url": "https://github.com/tensorflow/tensorflow/issues/11171#issuecomment-313917326", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11171", "id": 313917326, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzkxNzMyNg==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-09T12:34:28Z", "updated_at": "2017-07-09T12:34:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> manually wrapping sqrt(n) nodes into defun would do the trick, I just didn't get how the decorator would do this.</p>\n<p>There's some ambiguity in docs on whether Defun recomputes the values. There's <code>noinline=True</code> option to Defun, although when I tried on 1.1, it worked without having to set that attribute.</p>\n<p>PS, swapping stuff to main memory is not that great for O(n) operations. I benchmarked it on TitanX, and recomputing large <code>Mul</code> from inputs on GPU was 7x faster than fetching result from main memory. Recomputing <code>Concat</code> was 10x faster</p>", "body_text": "@ebrevdo manually wrapping sqrt(n) nodes into defun would do the trick, I just didn't get how the decorator would do this.\nThere's some ambiguity in docs on whether Defun recomputes the values. There's noinline=True option to Defun, although when I tried on 1.1, it worked without having to set that attribute.\nPS, swapping stuff to main memory is not that great for O(n) operations. I benchmarked it on TitanX, and recomputing large Mul from inputs on GPU was 7x faster than fetching result from main memory. Recomputing Concat was 10x faster", "body": "@ebrevdo manually wrapping sqrt(n) nodes into defun would do the trick, I just didn't get how the decorator would do this.\r\n\r\nThere's some ambiguity in docs on whether Defun recomputes the values. There's `noinline=True` option to Defun, although when I tried on 1.1, it worked without having to set that attribute.\r\n\r\nPS, swapping stuff to main memory is not that great for O(n) operations. I benchmarked it on TitanX, and recomputing large `Mul` from inputs on GPU was 7x faster than fetching result from main memory. Recomputing `Concat` was 10x faster"}