{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18222", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18222/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18222/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18222/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18222", "id": 311021401, "node_id": "MDU6SXNzdWUzMTEwMjE0MDE=", "number": 18222, "title": "Synchronized BatchNorm statistics across GPUs", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "yuefengz", "id": 1647833, "node_id": "MDQ6VXNlcjE2NDc4MzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1647833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuefengz", "html_url": "https://github.com/yuefengz", "followers_url": "https://api.github.com/users/yuefengz/followers", "following_url": "https://api.github.com/users/yuefengz/following{/other_user}", "gists_url": "https://api.github.com/users/yuefengz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuefengz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuefengz/subscriptions", "organizations_url": "https://api.github.com/users/yuefengz/orgs", "repos_url": "https://api.github.com/users/yuefengz/repos", "events_url": "https://api.github.com/users/yuefengz/events{/privacy}", "received_events_url": "https://api.github.com/users/yuefengz/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yuefengz", "id": 1647833, "node_id": "MDQ6VXNlcjE2NDc4MzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1647833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuefengz", "html_url": "https://github.com/yuefengz", "followers_url": "https://api.github.com/users/yuefengz/followers", "following_url": "https://api.github.com/users/yuefengz/following{/other_user}", "gists_url": "https://api.github.com/users/yuefengz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuefengz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuefengz/subscriptions", "organizations_url": "https://api.github.com/users/yuefengz/orgs", "repos_url": "https://api.github.com/users/yuefengz/repos", "events_url": "https://api.github.com/users/yuefengz/events{/privacy}", "received_events_url": "https://api.github.com/users/yuefengz/received_events", "type": "User", "site_admin": false}, {"login": "seemuch", "id": 2233625, "node_id": "MDQ6VXNlcjIyMzM2MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2233625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seemuch", "html_url": "https://github.com/seemuch", "followers_url": "https://api.github.com/users/seemuch/followers", "following_url": "https://api.github.com/users/seemuch/following{/other_user}", "gists_url": "https://api.github.com/users/seemuch/gists{/gist_id}", "starred_url": "https://api.github.com/users/seemuch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seemuch/subscriptions", "organizations_url": "https://api.github.com/users/seemuch/orgs", "repos_url": "https://api.github.com/users/seemuch/repos", "events_url": "https://api.github.com/users/seemuch/events{/privacy}", "received_events_url": "https://api.github.com/users/seemuch/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2018-04-03T22:32:28Z", "updated_at": "2018-11-20T01:06:28Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: n/a</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: n/a</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: n/a</li>\n<li><strong>TensorFlow version (use command below)</strong>: n/a</li>\n<li><strong>Python version</strong>:  n/a</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n/a</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: n/a</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>: n/a</li>\n</ul>\n<p>Following the discussion with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=234070\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/isaprykin\">@isaprykin</a> last Friday, there should be an option for batchnorm to compute the mean &amp; variance over the entire batch across GPUs, when running with distribution strategy.<br>\nFor typical image classification models it's not needed, however this is essential to other applications where batch-per-GPU is highly limited, such as object detection.</p>\n<p>Some related papers:<br>\n<a href=\"https://arxiv.org/pdf/1711.07240.pdf\" rel=\"nofollow\">https://arxiv.org/pdf/1711.07240.pdf</a><br>\n<a href=\"https://arxiv.org/abs/1803.08494\" rel=\"nofollow\">https://arxiv.org/abs/1803.08494</a></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): n/a\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): n/a\nTensorFlow installed from (source or binary): n/a\nTensorFlow version (use command below): n/a\nPython version:  n/a\nBazel version (if compiling from source): n/a\nGCC/Compiler version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: n/a\n\nFollowing the discussion with @isaprykin last Friday, there should be an option for batchnorm to compute the mean & variance over the entire batch across GPUs, when running with distribution strategy.\nFor typical image classification models it's not needed, however this is essential to other applications where batch-per-GPU is highly limited, such as object detection.\nSome related papers:\nhttps://arxiv.org/pdf/1711.07240.pdf\nhttps://arxiv.org/abs/1803.08494", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: n/a\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: n/a\r\n- **TensorFlow installed from (source or binary)**: n/a\r\n- **TensorFlow version (use command below)**: n/a\r\n- **Python version**:  n/a\r\n- **Bazel version (if compiling from source)**: n/a\r\n- **GCC/Compiler version (if compiling from source)**: n/a\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: n/a\r\n\r\nFollowing the discussion with @isaprykin last Friday, there should be an option for batchnorm to compute the mean & variance over the entire batch across GPUs, when running with distribution strategy.\r\nFor typical image classification models it's not needed, however this is essential to other applications where batch-per-GPU is highly limited, such as object detection.\r\n\r\nSome related papers:\r\nhttps://arxiv.org/pdf/1711.07240.pdf \r\nhttps://arxiv.org/abs/1803.08494"}