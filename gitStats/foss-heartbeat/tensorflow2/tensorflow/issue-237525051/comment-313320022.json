{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/313320022", "html_url": "https://github.com/tensorflow/tensorflow/issues/10950#issuecomment-313320022", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10950", "id": 313320022, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzMyMDAyMg==", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-06T07:36:36Z", "updated_at": "2017-07-06T07:36:36Z", "author_association": "NONE", "body_html": "<p>Ok, I reduced the test case a bit.</p>\n<p><code>demo.cpp</code>:</p>\n<pre><code>// Demo for: https://github.com/tensorflow/tensorflow/issues/10950\n// See demo.py.\n\n#include &lt;vector&gt;\n\n// For Eigen::ThreadPoolDevice.\n#define EIGEN_USE_THREADS 1\n\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/resource_mgr.h\"\n#include \"tensorflow/core/framework/resource_op_kernel.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/platform/mutex.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nusing namespace tensorflow;\n\nREGISTER_OP(\"ResourceBugDemo\")\n.Attr(\"container: string = ''\")\n.Attr(\"shared_name: string = ''\")\n.Output(\"resource: resource\")\n.SetIsStateful()\n.SetShapeFn(shape_inference::ScalarShape)\n.Doc(\"demo\");\n\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_mgr.h\nstruct ArrayContainer : public ResourceBase {\n    ArrayContainer() {}\n\n    string DebugString() override { return \"ArrayContainer\"; }\n    int64 MemoryUsed() const override { return 0; };\n};\n\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_op_kernel.h\nclass ResourceBugDemoOp : public ResourceOpKernel&lt;ArrayContainer&gt; {\npublic:\n    explicit ResourceBugDemoOp(OpKernelConstruction* context) : ResourceOpKernel(context) {}\n\n    void Compute(OpKernelContext* context) override {\n        ResourceOpKernel&lt;ArrayContainer&gt;::Compute(context);\n        mutex_lock l(mu_);\n        ResourceHandle rhandle = MakeResourceHandle&lt;ArrayContainer&gt;(context, cinfo_.container(), cinfo_.name());\n        printf(\"rhandle.device: %s\\n\", rhandle.device().c_str());\n        printf(\"rhandle.container: %s\\n\", rhandle.container().c_str());\n        printf(\"rhandle.name: %s\\n\", rhandle.name().c_str());\n        printf(\"rhandle.device should be: %s\\n\", context-&gt;device()-&gt;attributes().name().c_str());\n        printf(\"rhandle.name should be: %s\\n\", cinfo_.name().c_str());\n    }\n    \nprivate:\n    virtual bool IsCancellable() const { return false; }\n    virtual void Cancel() {}\n\n    Status CreateResource(ArrayContainer** ret) override EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n        *ret = new ArrayContainer();\n        if(*ret == nullptr)\n            return errors::ResourceExhausted(\"Failed to allocate\");\n        return Status::OK();\n    }\n\n    Status VerifyResource(ArrayContainer* ar) override {\n        return Status::OK();\n    }\n};\nREGISTER_KERNEL_BUILDER(Name(\"ResourceBugDemo\").Device(DEVICE_CPU), ResourceBugDemoOp);\n</code></pre>\n<p><code>demo.py</code>:</p>\n<pre><code>#!/usr/bin/env python\n\n# Demo for: https://github.com/tensorflow/tensorflow/issues/10950\n\nfrom __future__ import print_function\nimport os\nimport sys\nimport tensorflow as tf\n\n\nmy_dir = os.path.dirname(os.path.abspath(__file__))\nso_filename = \"demo.so\"\ncc_filename = \"demo.cpp\"\n\n\ndef compile():\n    # Fix for undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE.\n    # https://github.com/tensorflow/tensorflow/issues/1419\n    from google.protobuf.pyext import _message as msg\n    lib = msg.__file__\n    ld_flags = [\n        \"-Xlinker\", \"-rpath\", \"-Xlinker\", os.path.dirname(lib),\n        \"-L\", os.path.dirname(lib), \"-l\", \":\" + os.path.basename(lib)]\n    common_opts = [\"-shared\", \"-O2\", \"-std=c++11\"]\n    if sys.platform == \"darwin\":\n        common_opts += [\"-undefined\", \"dynamic_lookup\"]\n    common_opts += [\"-I\", tf.sysconfig.get_include()]\n    common_opts += [\"-fPIC\"]\n    common_opts += [\"-D_GLIBCXX_USE_CXX11_ABI=0\"]  # might be obsolete in the future\n    opts = common_opts + [cc_filename, \"-o\", so_filename]\n    opts += ld_flags\n    cmd_bin = \"g++\"\n    cmd_args = [cmd_bin] + opts\n    from subprocess import Popen, PIPE, STDOUT, CalledProcessError\n    print(\"compile call: %s\" % \" \".join(cmd_args))\n    proc = Popen(cmd_args, stdout=PIPE, stderr=STDOUT)\n    stdout, stderr = proc.communicate()\n    assert stderr is None  # should only have stdout\n    if proc.returncode != 0:\n      print(\"compile failed: %s\" % cmd_bin)\n      print(\"Original stdout/stderr:\")\n      print(stdout)\n      raise CalledProcessError(returncode=proc.returncode, cmd=cmd_args)\n    assert os.path.exists(so_filename)\n\n\ndef main():\n    print(\"TensorFlow version:\", tf.GIT_VERSION, tf.VERSION)\n    os.chdir(my_dir)\n    compile()\n    mod = tf.load_op_library(\"%s/%s\" % (my_dir, so_filename))\n    handle = mod.resource_bug_demo()\n    with tf.Session() as session:\n        session.run(handle)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<p>If you call <code>demo.py</code>, with Python 2.7.12, on Ubuntu 16.04, I get this output:</p>\n<pre><code>TensorFlow version: v1.2.0-5-g435cdfc 1.2.1\ncompile call: g++ -shared -O2 -std=c++11 -I /u/zeyer/.local/lib/python2.7/site-packages/tensorflow/include -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 demo.cpp -o demo.so -Xlinker -rpath -Xlinker /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -L /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -l :_message.so\n...\nrhandle.device: 14ArrayContainer\nrhandle.container: 14ArrayContainer\nrhandle.name: 14ArrayContainer\nrhandle.device should be: /job:localhost/replica:0/task:0/cpu:0\nrhandle.name should be: _0_ResourceBugDemo\n</code></pre>\n<p>But as I already guessed in the title, the problem is probably that the TF binary from the pip package is binary-incompatible to the protobuf pip package (3.3.0).<br>\nAnd the solution, as written maybe indirectly in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"138951694\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1419\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1419/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1419\">#1419</a>, is to just export the protobuf symbols by TF itself (in <code>_pywrap_tensorflow_internal.so</code>).</p>", "body_text": "Ok, I reduced the test case a bit.\ndemo.cpp:\n// Demo for: https://github.com/tensorflow/tensorflow/issues/10950\n// See demo.py.\n\n#include <vector>\n\n// For Eigen::ThreadPoolDevice.\n#define EIGEN_USE_THREADS 1\n\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/resource_mgr.h\"\n#include \"tensorflow/core/framework/resource_op_kernel.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/platform/mutex.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nusing namespace tensorflow;\n\nREGISTER_OP(\"ResourceBugDemo\")\n.Attr(\"container: string = ''\")\n.Attr(\"shared_name: string = ''\")\n.Output(\"resource: resource\")\n.SetIsStateful()\n.SetShapeFn(shape_inference::ScalarShape)\n.Doc(\"demo\");\n\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_mgr.h\nstruct ArrayContainer : public ResourceBase {\n    ArrayContainer() {}\n\n    string DebugString() override { return \"ArrayContainer\"; }\n    int64 MemoryUsed() const override { return 0; };\n};\n\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_op_kernel.h\nclass ResourceBugDemoOp : public ResourceOpKernel<ArrayContainer> {\npublic:\n    explicit ResourceBugDemoOp(OpKernelConstruction* context) : ResourceOpKernel(context) {}\n\n    void Compute(OpKernelContext* context) override {\n        ResourceOpKernel<ArrayContainer>::Compute(context);\n        mutex_lock l(mu_);\n        ResourceHandle rhandle = MakeResourceHandle<ArrayContainer>(context, cinfo_.container(), cinfo_.name());\n        printf(\"rhandle.device: %s\\n\", rhandle.device().c_str());\n        printf(\"rhandle.container: %s\\n\", rhandle.container().c_str());\n        printf(\"rhandle.name: %s\\n\", rhandle.name().c_str());\n        printf(\"rhandle.device should be: %s\\n\", context->device()->attributes().name().c_str());\n        printf(\"rhandle.name should be: %s\\n\", cinfo_.name().c_str());\n    }\n    \nprivate:\n    virtual bool IsCancellable() const { return false; }\n    virtual void Cancel() {}\n\n    Status CreateResource(ArrayContainer** ret) override EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n        *ret = new ArrayContainer();\n        if(*ret == nullptr)\n            return errors::ResourceExhausted(\"Failed to allocate\");\n        return Status::OK();\n    }\n\n    Status VerifyResource(ArrayContainer* ar) override {\n        return Status::OK();\n    }\n};\nREGISTER_KERNEL_BUILDER(Name(\"ResourceBugDemo\").Device(DEVICE_CPU), ResourceBugDemoOp);\n\ndemo.py:\n#!/usr/bin/env python\n\n# Demo for: https://github.com/tensorflow/tensorflow/issues/10950\n\nfrom __future__ import print_function\nimport os\nimport sys\nimport tensorflow as tf\n\n\nmy_dir = os.path.dirname(os.path.abspath(__file__))\nso_filename = \"demo.so\"\ncc_filename = \"demo.cpp\"\n\n\ndef compile():\n    # Fix for undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE.\n    # https://github.com/tensorflow/tensorflow/issues/1419\n    from google.protobuf.pyext import _message as msg\n    lib = msg.__file__\n    ld_flags = [\n        \"-Xlinker\", \"-rpath\", \"-Xlinker\", os.path.dirname(lib),\n        \"-L\", os.path.dirname(lib), \"-l\", \":\" + os.path.basename(lib)]\n    common_opts = [\"-shared\", \"-O2\", \"-std=c++11\"]\n    if sys.platform == \"darwin\":\n        common_opts += [\"-undefined\", \"dynamic_lookup\"]\n    common_opts += [\"-I\", tf.sysconfig.get_include()]\n    common_opts += [\"-fPIC\"]\n    common_opts += [\"-D_GLIBCXX_USE_CXX11_ABI=0\"]  # might be obsolete in the future\n    opts = common_opts + [cc_filename, \"-o\", so_filename]\n    opts += ld_flags\n    cmd_bin = \"g++\"\n    cmd_args = [cmd_bin] + opts\n    from subprocess import Popen, PIPE, STDOUT, CalledProcessError\n    print(\"compile call: %s\" % \" \".join(cmd_args))\n    proc = Popen(cmd_args, stdout=PIPE, stderr=STDOUT)\n    stdout, stderr = proc.communicate()\n    assert stderr is None  # should only have stdout\n    if proc.returncode != 0:\n      print(\"compile failed: %s\" % cmd_bin)\n      print(\"Original stdout/stderr:\")\n      print(stdout)\n      raise CalledProcessError(returncode=proc.returncode, cmd=cmd_args)\n    assert os.path.exists(so_filename)\n\n\ndef main():\n    print(\"TensorFlow version:\", tf.GIT_VERSION, tf.VERSION)\n    os.chdir(my_dir)\n    compile()\n    mod = tf.load_op_library(\"%s/%s\" % (my_dir, so_filename))\n    handle = mod.resource_bug_demo()\n    with tf.Session() as session:\n        session.run(handle)\n\n\nif __name__ == \"__main__\":\n    main()\n\nIf you call demo.py, with Python 2.7.12, on Ubuntu 16.04, I get this output:\nTensorFlow version: v1.2.0-5-g435cdfc 1.2.1\ncompile call: g++ -shared -O2 -std=c++11 -I /u/zeyer/.local/lib/python2.7/site-packages/tensorflow/include -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 demo.cpp -o demo.so -Xlinker -rpath -Xlinker /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -L /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -l :_message.so\n...\nrhandle.device: 14ArrayContainer\nrhandle.container: 14ArrayContainer\nrhandle.name: 14ArrayContainer\nrhandle.device should be: /job:localhost/replica:0/task:0/cpu:0\nrhandle.name should be: _0_ResourceBugDemo\n\nBut as I already guessed in the title, the problem is probably that the TF binary from the pip package is binary-incompatible to the protobuf pip package (3.3.0).\nAnd the solution, as written maybe indirectly in #1419, is to just export the protobuf symbols by TF itself (in _pywrap_tensorflow_internal.so).", "body": "Ok, I reduced the test case a bit.\r\n\r\n`demo.cpp`:\r\n```\r\n// Demo for: https://github.com/tensorflow/tensorflow/issues/10950\r\n// See demo.py.\r\n\r\n#include <vector>\r\n\r\n// For Eigen::ThreadPoolDevice.\r\n#define EIGEN_USE_THREADS 1\r\n\r\n#include \"tensorflow/core/framework/op.h\"\r\n#include \"tensorflow/core/framework/shape_inference.h\"\r\n#include \"tensorflow/core/framework/op_kernel.h\"\r\n#include \"tensorflow/core/framework/resource_mgr.h\"\r\n#include \"tensorflow/core/framework/resource_op_kernel.h\"\r\n#include \"tensorflow/core/framework/tensor.h\"\r\n#include \"tensorflow/core/framework/tensor_shape.h\"\r\n#include \"tensorflow/core/framework/types.h\"\r\n#include \"tensorflow/core/platform/macros.h\"\r\n#include \"tensorflow/core/platform/mutex.h\"\r\n#include \"tensorflow/core/platform/types.h\"\r\n\r\nusing namespace tensorflow;\r\n\r\nREGISTER_OP(\"ResourceBugDemo\")\r\n.Attr(\"container: string = ''\")\r\n.Attr(\"shared_name: string = ''\")\r\n.Output(\"resource: resource\")\r\n.SetIsStateful()\r\n.SetShapeFn(shape_inference::ScalarShape)\r\n.Doc(\"demo\");\r\n\r\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_mgr.h\r\nstruct ArrayContainer : public ResourceBase {\r\n    ArrayContainer() {}\r\n\r\n    string DebugString() override { return \"ArrayContainer\"; }\r\n    int64 MemoryUsed() const override { return 0; };\r\n};\r\n\r\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_op_kernel.h\r\nclass ResourceBugDemoOp : public ResourceOpKernel<ArrayContainer> {\r\npublic:\r\n    explicit ResourceBugDemoOp(OpKernelConstruction* context) : ResourceOpKernel(context) {}\r\n\r\n    void Compute(OpKernelContext* context) override {\r\n        ResourceOpKernel<ArrayContainer>::Compute(context);\r\n        mutex_lock l(mu_);\r\n        ResourceHandle rhandle = MakeResourceHandle<ArrayContainer>(context, cinfo_.container(), cinfo_.name());\r\n        printf(\"rhandle.device: %s\\n\", rhandle.device().c_str());\r\n        printf(\"rhandle.container: %s\\n\", rhandle.container().c_str());\r\n        printf(\"rhandle.name: %s\\n\", rhandle.name().c_str());\r\n        printf(\"rhandle.device should be: %s\\n\", context->device()->attributes().name().c_str());\r\n        printf(\"rhandle.name should be: %s\\n\", cinfo_.name().c_str());\r\n    }\r\n    \r\nprivate:\r\n    virtual bool IsCancellable() const { return false; }\r\n    virtual void Cancel() {}\r\n\r\n    Status CreateResource(ArrayContainer** ret) override EXCLUSIVE_LOCKS_REQUIRED(mu_) {\r\n        *ret = new ArrayContainer();\r\n        if(*ret == nullptr)\r\n            return errors::ResourceExhausted(\"Failed to allocate\");\r\n        return Status::OK();\r\n    }\r\n\r\n    Status VerifyResource(ArrayContainer* ar) override {\r\n        return Status::OK();\r\n    }\r\n};\r\nREGISTER_KERNEL_BUILDER(Name(\"ResourceBugDemo\").Device(DEVICE_CPU), ResourceBugDemoOp);\r\n```\r\n\r\n`demo.py`:\r\n```\r\n#!/usr/bin/env python\r\n\r\n# Demo for: https://github.com/tensorflow/tensorflow/issues/10950\r\n\r\nfrom __future__ import print_function\r\nimport os\r\nimport sys\r\nimport tensorflow as tf\r\n\r\n\r\nmy_dir = os.path.dirname(os.path.abspath(__file__))\r\nso_filename = \"demo.so\"\r\ncc_filename = \"demo.cpp\"\r\n\r\n\r\ndef compile():\r\n    # Fix for undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE.\r\n    # https://github.com/tensorflow/tensorflow/issues/1419\r\n    from google.protobuf.pyext import _message as msg\r\n    lib = msg.__file__\r\n    ld_flags = [\r\n        \"-Xlinker\", \"-rpath\", \"-Xlinker\", os.path.dirname(lib),\r\n        \"-L\", os.path.dirname(lib), \"-l\", \":\" + os.path.basename(lib)]\r\n    common_opts = [\"-shared\", \"-O2\", \"-std=c++11\"]\r\n    if sys.platform == \"darwin\":\r\n        common_opts += [\"-undefined\", \"dynamic_lookup\"]\r\n    common_opts += [\"-I\", tf.sysconfig.get_include()]\r\n    common_opts += [\"-fPIC\"]\r\n    common_opts += [\"-D_GLIBCXX_USE_CXX11_ABI=0\"]  # might be obsolete in the future\r\n    opts = common_opts + [cc_filename, \"-o\", so_filename]\r\n    opts += ld_flags\r\n    cmd_bin = \"g++\"\r\n    cmd_args = [cmd_bin] + opts\r\n    from subprocess import Popen, PIPE, STDOUT, CalledProcessError\r\n    print(\"compile call: %s\" % \" \".join(cmd_args))\r\n    proc = Popen(cmd_args, stdout=PIPE, stderr=STDOUT)\r\n    stdout, stderr = proc.communicate()\r\n    assert stderr is None  # should only have stdout\r\n    if proc.returncode != 0:\r\n      print(\"compile failed: %s\" % cmd_bin)\r\n      print(\"Original stdout/stderr:\")\r\n      print(stdout)\r\n      raise CalledProcessError(returncode=proc.returncode, cmd=cmd_args)\r\n    assert os.path.exists(so_filename)\r\n\r\n\r\ndef main():\r\n    print(\"TensorFlow version:\", tf.GIT_VERSION, tf.VERSION)\r\n    os.chdir(my_dir)\r\n    compile()\r\n    mod = tf.load_op_library(\"%s/%s\" % (my_dir, so_filename))\r\n    handle = mod.resource_bug_demo()\r\n    with tf.Session() as session:\r\n        session.run(handle)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nIf you call `demo.py`, with Python 2.7.12, on Ubuntu 16.04, I get this output:\r\n```\r\nTensorFlow version: v1.2.0-5-g435cdfc 1.2.1\r\ncompile call: g++ -shared -O2 -std=c++11 -I /u/zeyer/.local/lib/python2.7/site-packages/tensorflow/include -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 demo.cpp -o demo.so -Xlinker -rpath -Xlinker /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -L /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -l :_message.so\r\n...\r\nrhandle.device: 14ArrayContainer\r\nrhandle.container: 14ArrayContainer\r\nrhandle.name: 14ArrayContainer\r\nrhandle.device should be: /job:localhost/replica:0/task:0/cpu:0\r\nrhandle.name should be: _0_ResourceBugDemo\r\n```\r\n\r\nBut as I already guessed in the title, the problem is probably that the TF binary from the pip package is binary-incompatible to the protobuf pip package (3.3.0).\r\nAnd the solution, as written maybe indirectly in #1419, is to just export the protobuf symbols by TF itself (in `_pywrap_tensorflow_internal.so`).\r\n"}