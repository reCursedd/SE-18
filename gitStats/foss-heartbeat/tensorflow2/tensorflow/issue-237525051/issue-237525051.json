{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10950", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10950/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10950/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10950/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10950", "id": 237525051, "node_id": "MDU6SXNzdWUyMzc1MjUwNTE=", "number": 10950, "title": "TF binary incompatible to protobuf?", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173351, "node_id": "MDU6TGFiZWw0NzMxNzMzNTE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:build/install", "name": "type:build/install", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2017-06-21T12:58:47Z", "updated_at": "2017-07-11T19:04:16Z", "closed_at": "2017-07-11T19:04:16Z", "author_association": "NONE", "body_html": "<p>I tried with TensorFlow 1.1.0 and 1.2.0, on Python 2.7 (and 3.5).<br>\nNote that I also asked about this <a href=\"https://stackoverflow.com/questions/44455722/create-my-own-resource-types-tf-resource\" rel=\"nofollow\">on StackOverflow</a> but I think this might actually be a bug (either in the pip packaging of TF or protobuf or sth else), so I post it here.</p>\n<p>Summary:</p>\n<p>I think the protobuf pip package is binary incompatible with the TF pip package but I'm not exactly sure on this.</p>\n<p>I try to write some own operator which creates some own <code>tf.resource</code>. I use the C++ header files from the TF pip install, and I link it to the <code>_message.so</code> file from the protobuf 3.3.0 pip package, because anything <code>tf.resource</code> related will need linking to protobuf.</p>\n<p>My current code:</p>\n<pre><code>// For Eigen::ThreadPoolDevice.\n#define EIGEN_USE_THREADS 1\n\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/resource_mgr.h\"\n#include \"tensorflow/core/framework/resource_op_kernel.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/platform/mutex.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nusing namespace tensorflow;\n\nREGISTER_OP(\"ArrayContainerCreate\")\n.Attr(\"T: type\")\n.Attr(\"container: string = ''\")\n.Attr(\"shared_name: string = ''\")\n.Output(\"resource: resource\")\n.SetIsStateful()\n.SetShapeFn(shape_inference::ScalarShape)\n.Doc(R\"doc(Array container, random index access)doc\");\n\nREGISTER_OP(\"ArrayContainerGetSize\")\n.Input(\"handle: resource\")\n.Output(\"out: int32\")\n.SetShapeFn(shape_inference::ScalarShape)\n;\n\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_mgr.h\nstruct ArrayContainer : public ResourceBase {\n  ArrayContainer(const DataType&amp; dtype) : dtype_(dtype) {}\n\n  string DebugString() override { return \"ArrayContainer\"; }\n  int64 MemoryUsed() const override { return 0; };\n\n  mutex mu_;\n  const DataType dtype_;\n\n  int32 get_size() {\n    mutex_lock l(mu_);\n    return (int32) 42;\n  }\n\n};\n\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_op_kernel.h\nclass ArrayContainerCreateOp : public ResourceOpKernel&lt;ArrayContainer&gt; {\npublic:\n  explicit ArrayContainerCreateOp(OpKernelConstruction* context) : ResourceOpKernel(context) {\n    OP_REQUIRES_OK(context, context-&gt;GetAttr(\"T\", &amp;dtype_));\n  }\n\nprivate:\n  virtual bool IsCancellable() const { return false; }\n  virtual void Cancel() {}\n\n  Status CreateResource(ArrayContainer** ret) override EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    *ret = new ArrayContainer(dtype_);\n    if(*ret == nullptr)\n      return errors::ResourceExhausted(\"Failed to allocate\");\n    return Status::OK();\n  }\n\n  Status VerifyResource(ArrayContainer* ar) override {\n    if(ar-&gt;dtype_ != dtype_)\n      return errors::InvalidArgument(\"Data type mismatch: expected \", DataTypeString(dtype_),\n                                     \" but got \", DataTypeString(ar-&gt;dtype_), \".\");\n    return Status::OK();\n  }\n\n  DataType dtype_;\n};\nREGISTER_KERNEL_BUILDER(Name(\"ArrayContainerCreate\").Device(DEVICE_CPU), ArrayContainerCreateOp);\n\nclass ArrayContainerGetSizeOp : public OpKernel {\npublic:\n  using OpKernel::OpKernel;\n\n  void Compute(OpKernelContext* context) override {\n    ArrayContainer* ar;\n    OP_REQUIRES_OK(context, GetResourceFromContext(context, \"handle\", &amp;ar));\n    core::ScopedUnref unref(ar);\n\n    int32 size = ar-&gt;get_size();\n    Tensor* tensor_size = nullptr;\n    OP_REQUIRES_OK(context, context-&gt;allocate_output(0, TensorShape({}), &amp;tensor_size));\n    tensor_size-&gt;flat&lt;int32&gt;().setConstant(size);\n  }\n};\nREGISTER_KERNEL_BUILDER(Name(\"ArrayContainerGetSize\").Device(DEVICE_CPU), ArrayContainerGetSizeOp);\n</code></pre>\n<p>I compile that. Note that I first got some <code>undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE</code> error but I resolved that by adding these additional compiler flags:</p>\n<pre><code>from google.protobuf.pyext import _message as msg\nlib = msg.__file__\n\nextra_compiler_flags = [\n    \"-Xlinker\", \"-rpath\", \"-Xlinker\", os.path.dirname(lib),\n    \"-L\", os.path.dirname(lib), \"-l\", \":\" + os.path.basename(lib)]\n</code></pre>\n<p>I read about that <a href=\"https://github.com/tensorflow/tensorflow/issues/1419\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1419/hovercard\">here</a>.</p>\n<p>I end up with flags like these:</p>\n<p><code>-shared -O2 -std=c++11 -I /u/zeyer/.local/lib/python2.7/site-packages/tensorflow/include -I /usr/local/cuda-8.0/include -L /usr/local/cuda-8.0/lib64 -x cu -DGOOGLE_CUDA=1 -Xcompiler -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 TFArrayContainer.cc -o TFArrayContainer.so -Xlinker -rpath -Xlinker /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -L /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -l :_message.so</code></p>\n<p>Then I load that as a module via <code>tf.load_op_library</code>.</p>\n<p>Then, I have this Python code:</p>\n<pre><code>handle = mod.array_container_create(T=tf.int32)\nsize = mod.array_container_get_size(handle=handle)\n</code></pre>\n<p>When I try to evaluate <code>size</code>, I get the error:</p>\n<pre><code>InvalidArgumentError (see above for traceback): Trying to access resource located in device 14ArrayContainer from device /job:localhost/replica:0/task:0/cpu:0\n         [[Node: ArrayContainerGetSize = ArrayContainerGetSize[_device=\"/job:localhost/replica:0/task:0/cpu:0\"](array_container)]]\n</code></pre>\n<p>The device name (<code>14ArrayContainer</code>) somehow seem to be messed up. Why is that? What is the problem with the code?</p>\n<p>For some more testing, I added this additional code in the <code>ArrayContainerCreateOp</code>:</p>\n<pre><code>    ResourceHandle rhandle = MakeResourceHandle&lt;ArrayContainer&gt;(context, cinfo_.container(), cinfo_.name());\n    printf(\"created. device: %s\\n\", rhandle.device().c_str());\n    printf(\"container: %s\\n\", rhandle.container().c_str());\n    printf(\"name: %s\\n\", rhandle.name().c_str());\n    printf(\"actual device: %s\\n\", context-&gt;device()-&gt;attributes().name().c_str());\n    printf(\"actual name: %s\\n\", cinfo_.name().c_str());\n</code></pre>\n<p>This gives me the output:</p>\n<pre><code>created. device: 14ArrayContainer\ncontainer: 14ArrayContainer\nname: 14ArrayContainer\nactual device: /job:localhost/replica:0/task:0/cpu:0\nactual name: _2_array_container\n</code></pre>\n<p>So clearly, there is some of the problem.</p>\n<p>This looks like something is messed up with the protobuf? Maybe I am linking the wrong lib? But I have not found which lib to link instead.</p>", "body_text": "I tried with TensorFlow 1.1.0 and 1.2.0, on Python 2.7 (and 3.5).\nNote that I also asked about this on StackOverflow but I think this might actually be a bug (either in the pip packaging of TF or protobuf or sth else), so I post it here.\nSummary:\nI think the protobuf pip package is binary incompatible with the TF pip package but I'm not exactly sure on this.\nI try to write some own operator which creates some own tf.resource. I use the C++ header files from the TF pip install, and I link it to the _message.so file from the protobuf 3.3.0 pip package, because anything tf.resource related will need linking to protobuf.\nMy current code:\n// For Eigen::ThreadPoolDevice.\n#define EIGEN_USE_THREADS 1\n\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/resource_mgr.h\"\n#include \"tensorflow/core/framework/resource_op_kernel.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/platform/mutex.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nusing namespace tensorflow;\n\nREGISTER_OP(\"ArrayContainerCreate\")\n.Attr(\"T: type\")\n.Attr(\"container: string = ''\")\n.Attr(\"shared_name: string = ''\")\n.Output(\"resource: resource\")\n.SetIsStateful()\n.SetShapeFn(shape_inference::ScalarShape)\n.Doc(R\"doc(Array container, random index access)doc\");\n\nREGISTER_OP(\"ArrayContainerGetSize\")\n.Input(\"handle: resource\")\n.Output(\"out: int32\")\n.SetShapeFn(shape_inference::ScalarShape)\n;\n\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_mgr.h\nstruct ArrayContainer : public ResourceBase {\n  ArrayContainer(const DataType& dtype) : dtype_(dtype) {}\n\n  string DebugString() override { return \"ArrayContainer\"; }\n  int64 MemoryUsed() const override { return 0; };\n\n  mutex mu_;\n  const DataType dtype_;\n\n  int32 get_size() {\n    mutex_lock l(mu_);\n    return (int32) 42;\n  }\n\n};\n\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_op_kernel.h\nclass ArrayContainerCreateOp : public ResourceOpKernel<ArrayContainer> {\npublic:\n  explicit ArrayContainerCreateOp(OpKernelConstruction* context) : ResourceOpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"T\", &dtype_));\n  }\n\nprivate:\n  virtual bool IsCancellable() const { return false; }\n  virtual void Cancel() {}\n\n  Status CreateResource(ArrayContainer** ret) override EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    *ret = new ArrayContainer(dtype_);\n    if(*ret == nullptr)\n      return errors::ResourceExhausted(\"Failed to allocate\");\n    return Status::OK();\n  }\n\n  Status VerifyResource(ArrayContainer* ar) override {\n    if(ar->dtype_ != dtype_)\n      return errors::InvalidArgument(\"Data type mismatch: expected \", DataTypeString(dtype_),\n                                     \" but got \", DataTypeString(ar->dtype_), \".\");\n    return Status::OK();\n  }\n\n  DataType dtype_;\n};\nREGISTER_KERNEL_BUILDER(Name(\"ArrayContainerCreate\").Device(DEVICE_CPU), ArrayContainerCreateOp);\n\nclass ArrayContainerGetSizeOp : public OpKernel {\npublic:\n  using OpKernel::OpKernel;\n\n  void Compute(OpKernelContext* context) override {\n    ArrayContainer* ar;\n    OP_REQUIRES_OK(context, GetResourceFromContext(context, \"handle\", &ar));\n    core::ScopedUnref unref(ar);\n\n    int32 size = ar->get_size();\n    Tensor* tensor_size = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, TensorShape({}), &tensor_size));\n    tensor_size->flat<int32>().setConstant(size);\n  }\n};\nREGISTER_KERNEL_BUILDER(Name(\"ArrayContainerGetSize\").Device(DEVICE_CPU), ArrayContainerGetSizeOp);\n\nI compile that. Note that I first got some undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE error but I resolved that by adding these additional compiler flags:\nfrom google.protobuf.pyext import _message as msg\nlib = msg.__file__\n\nextra_compiler_flags = [\n    \"-Xlinker\", \"-rpath\", \"-Xlinker\", os.path.dirname(lib),\n    \"-L\", os.path.dirname(lib), \"-l\", \":\" + os.path.basename(lib)]\n\nI read about that here.\nI end up with flags like these:\n-shared -O2 -std=c++11 -I /u/zeyer/.local/lib/python2.7/site-packages/tensorflow/include -I /usr/local/cuda-8.0/include -L /usr/local/cuda-8.0/lib64 -x cu -DGOOGLE_CUDA=1 -Xcompiler -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 TFArrayContainer.cc -o TFArrayContainer.so -Xlinker -rpath -Xlinker /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -L /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -l :_message.so\nThen I load that as a module via tf.load_op_library.\nThen, I have this Python code:\nhandle = mod.array_container_create(T=tf.int32)\nsize = mod.array_container_get_size(handle=handle)\n\nWhen I try to evaluate size, I get the error:\nInvalidArgumentError (see above for traceback): Trying to access resource located in device 14ArrayContainer from device /job:localhost/replica:0/task:0/cpu:0\n         [[Node: ArrayContainerGetSize = ArrayContainerGetSize[_device=\"/job:localhost/replica:0/task:0/cpu:0\"](array_container)]]\n\nThe device name (14ArrayContainer) somehow seem to be messed up. Why is that? What is the problem with the code?\nFor some more testing, I added this additional code in the ArrayContainerCreateOp:\n    ResourceHandle rhandle = MakeResourceHandle<ArrayContainer>(context, cinfo_.container(), cinfo_.name());\n    printf(\"created. device: %s\\n\", rhandle.device().c_str());\n    printf(\"container: %s\\n\", rhandle.container().c_str());\n    printf(\"name: %s\\n\", rhandle.name().c_str());\n    printf(\"actual device: %s\\n\", context->device()->attributes().name().c_str());\n    printf(\"actual name: %s\\n\", cinfo_.name().c_str());\n\nThis gives me the output:\ncreated. device: 14ArrayContainer\ncontainer: 14ArrayContainer\nname: 14ArrayContainer\nactual device: /job:localhost/replica:0/task:0/cpu:0\nactual name: _2_array_container\n\nSo clearly, there is some of the problem.\nThis looks like something is messed up with the protobuf? Maybe I am linking the wrong lib? But I have not found which lib to link instead.", "body": "I tried with TensorFlow 1.1.0 and 1.2.0, on Python 2.7 (and 3.5).\r\nNote that I also asked about this [on StackOverflow](https://stackoverflow.com/questions/44455722/create-my-own-resource-types-tf-resource) but I think this might actually be a bug (either in the pip packaging of TF or protobuf or sth else), so I post it here.\r\n\r\nSummary:\r\n\r\nI think the protobuf pip package is binary incompatible with the TF pip package but I'm not exactly sure on this.\r\n\r\nI try to write some own operator which creates some own `tf.resource`. I use the C++ header files from the TF pip install, and I link it to the `_message.so` file from the protobuf 3.3.0 pip package, because anything `tf.resource` related will need linking to protobuf.\r\n\r\nMy current code:\r\n\r\n\r\n    // For Eigen::ThreadPoolDevice.\r\n    #define EIGEN_USE_THREADS 1\r\n\r\n    #include \"tensorflow/core/framework/op.h\"\r\n    #include \"tensorflow/core/framework/shape_inference.h\"\r\n    #include \"tensorflow/core/framework/op_kernel.h\"\r\n    #include \"tensorflow/core/framework/resource_mgr.h\"\r\n    #include \"tensorflow/core/framework/resource_op_kernel.h\"\r\n    #include \"tensorflow/core/framework/tensor.h\"\r\n    #include \"tensorflow/core/framework/tensor_shape.h\"\r\n    #include \"tensorflow/core/framework/types.h\"\r\n    #include \"tensorflow/core/platform/macros.h\"\r\n    #include \"tensorflow/core/platform/mutex.h\"\r\n    #include \"tensorflow/core/platform/types.h\"\r\n\r\n    using namespace tensorflow;\r\n\r\n    REGISTER_OP(\"ArrayContainerCreate\")\r\n    .Attr(\"T: type\")\r\n    .Attr(\"container: string = ''\")\r\n    .Attr(\"shared_name: string = ''\")\r\n    .Output(\"resource: resource\")\r\n    .SetIsStateful()\r\n    .SetShapeFn(shape_inference::ScalarShape)\r\n    .Doc(R\"doc(Array container, random index access)doc\");\r\n\r\n    REGISTER_OP(\"ArrayContainerGetSize\")\r\n    .Input(\"handle: resource\")\r\n    .Output(\"out: int32\")\r\n    .SetShapeFn(shape_inference::ScalarShape)\r\n    ;\r\n\r\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_mgr.h\r\n    struct ArrayContainer : public ResourceBase {\r\n      ArrayContainer(const DataType& dtype) : dtype_(dtype) {}\r\n\r\n      string DebugString() override { return \"ArrayContainer\"; }\r\n      int64 MemoryUsed() const override { return 0; };\r\n\r\n      mutex mu_;\r\n      const DataType dtype_;\r\n\r\n      int32 get_size() {\r\n        mutex_lock l(mu_);\r\n        return (int32) 42;\r\n      }\r\n\r\n    };\r\n\r\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/resource_op_kernel.h\r\n    class ArrayContainerCreateOp : public ResourceOpKernel<ArrayContainer> {\r\n    public:\r\n      explicit ArrayContainerCreateOp(OpKernelConstruction* context) : ResourceOpKernel(context) {\r\n        OP_REQUIRES_OK(context, context->GetAttr(\"T\", &dtype_));\r\n      }\r\n\r\n    private:\r\n      virtual bool IsCancellable() const { return false; }\r\n      virtual void Cancel() {}\r\n\r\n      Status CreateResource(ArrayContainer** ret) override EXCLUSIVE_LOCKS_REQUIRED(mu_) {\r\n        *ret = new ArrayContainer(dtype_);\r\n        if(*ret == nullptr)\r\n          return errors::ResourceExhausted(\"Failed to allocate\");\r\n        return Status::OK();\r\n      }\r\n\r\n      Status VerifyResource(ArrayContainer* ar) override {\r\n        if(ar->dtype_ != dtype_)\r\n          return errors::InvalidArgument(\"Data type mismatch: expected \", DataTypeString(dtype_),\r\n                                         \" but got \", DataTypeString(ar->dtype_), \".\");\r\n        return Status::OK();\r\n      }\r\n  \r\n      DataType dtype_;\r\n    };\r\n    REGISTER_KERNEL_BUILDER(Name(\"ArrayContainerCreate\").Device(DEVICE_CPU), ArrayContainerCreateOp);\r\n\r\n    class ArrayContainerGetSizeOp : public OpKernel {\r\n    public:\r\n      using OpKernel::OpKernel;\r\n\r\n      void Compute(OpKernelContext* context) override {\r\n        ArrayContainer* ar;\r\n        OP_REQUIRES_OK(context, GetResourceFromContext(context, \"handle\", &ar));\r\n        core::ScopedUnref unref(ar);\r\n\r\n        int32 size = ar->get_size();\r\n        Tensor* tensor_size = nullptr;\r\n        OP_REQUIRES_OK(context, context->allocate_output(0, TensorShape({}), &tensor_size));\r\n        tensor_size->flat<int32>().setConstant(size);\r\n      }\r\n    };\r\n    REGISTER_KERNEL_BUILDER(Name(\"ArrayContainerGetSize\").Device(DEVICE_CPU), ArrayContainerGetSizeOp);\r\n\r\nI compile that. Note that I first got some `undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE` error but I resolved that by adding these additional compiler flags:\r\n\r\n    from google.protobuf.pyext import _message as msg\r\n    lib = msg.__file__\r\n    \r\n    extra_compiler_flags = [\r\n        \"-Xlinker\", \"-rpath\", \"-Xlinker\", os.path.dirname(lib),\r\n        \"-L\", os.path.dirname(lib), \"-l\", \":\" + os.path.basename(lib)]\r\n\r\nI read about that [here](https://github.com/tensorflow/tensorflow/issues/1419).\r\n\r\nI end up with flags like these:\r\n\r\n`-shared -O2 -std=c++11 -I /u/zeyer/.local/lib/python2.7/site-packages/tensorflow/include -I /usr/local/cuda-8.0/include -L /usr/local/cuda-8.0/lib64 -x cu -DGOOGLE_CUDA=1 -Xcompiler -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 TFArrayContainer.cc -o TFArrayContainer.so -Xlinker -rpath -Xlinker /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -L /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext -l :_message.so`\r\n\r\nThen I load that as a module via `tf.load_op_library`.\r\n\r\nThen, I have this Python code:\r\n\r\n    handle = mod.array_container_create(T=tf.int32)\r\n    size = mod.array_container_get_size(handle=handle)\r\n\r\nWhen I try to evaluate `size`, I get the error:\r\n\r\n\r\n    InvalidArgumentError (see above for traceback): Trying to access resource located in device 14ArrayContainer from device /job:localhost/replica:0/task:0/cpu:0\r\n             [[Node: ArrayContainerGetSize = ArrayContainerGetSize[_device=\"/job:localhost/replica:0/task:0/cpu:0\"](array_container)]]\r\n\r\nThe device name (`14ArrayContainer`) somehow seem to be messed up. Why is that? What is the problem with the code?\r\n\r\nFor some more testing, I added this additional code in the `ArrayContainerCreateOp`:\r\n\r\n        ResourceHandle rhandle = MakeResourceHandle<ArrayContainer>(context, cinfo_.container(), cinfo_.name());\r\n        printf(\"created. device: %s\\n\", rhandle.device().c_str());\r\n        printf(\"container: %s\\n\", rhandle.container().c_str());\r\n        printf(\"name: %s\\n\", rhandle.name().c_str());\r\n        printf(\"actual device: %s\\n\", context->device()->attributes().name().c_str());\r\n        printf(\"actual name: %s\\n\", cinfo_.name().c_str());\r\n\r\nThis gives me the output:\r\n\r\n    created. device: 14ArrayContainer\r\n    container: 14ArrayContainer\r\n    name: 14ArrayContainer\r\n    actual device: /job:localhost/replica:0/task:0/cpu:0\r\n    actual name: _2_array_container\r\n\r\nSo clearly, there is some of the problem.\r\n\r\nThis looks like something is messed up with the protobuf? Maybe I am linking the wrong lib? But I have not found which lib to link instead.\r\n"}