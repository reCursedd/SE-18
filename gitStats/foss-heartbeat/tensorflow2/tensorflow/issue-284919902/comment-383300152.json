{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/383300152", "html_url": "https://github.com/tensorflow/tensorflow/issues/15694#issuecomment-383300152", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15694", "id": 383300152, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzMwMDE1Mg==", "user": {"login": "bhack", "id": 1710528, "node_id": "MDQ6VXNlcjE3MTA1Mjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1710528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhack", "html_url": "https://github.com/bhack", "followers_url": "https://api.github.com/users/bhack/followers", "following_url": "https://api.github.com/users/bhack/following{/other_user}", "gists_url": "https://api.github.com/users/bhack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhack/subscriptions", "organizations_url": "https://api.github.com/users/bhack/orgs", "repos_url": "https://api.github.com/users/bhack/repos", "events_url": "https://api.github.com/users/bhack/events{/privacy}", "received_events_url": "https://api.github.com/users/bhack/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-21T14:24:20Z", "updated_at": "2018-04-21T14:25:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>  I have another small example where seems it cannot fulfill all the cpus with num_parallel_calls.</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\nimport os\nimport sys\nimport psutil\n\ndef read_fn(pairs):\n    res = np.zeros((5000, 5000, 3)).astype(np.float32)\n    return res\n\n\ndef main():\n    tf.logging.set_verbosity(tf.logging.INFO)\n\n    pairs = [['a'],['b'],['c'],['d'],['e'],['f'],['g'],['h'],['i'],['l'],['m'],['n']]\n\n    num_cpu = len(os.sched_getaffinity(0))\n    print(num_cpu)\n    dataset = tf.data.Dataset.from_tensor_slices(pairs)\n\n    dataset = dataset.map(\n           lambda x: tf.py_func(\n             func=read_fn, inp=[x],\n             Tout=[tf.float32], stateful=False\n           ),\n           num_parallel_calls=num_cpu)\n    dataset = dataset.repeat(20000)\n\n    iterator = dataset.make_one_shot_iterator()\n    next_element = iterator.get_next()\n\n    count = 0\n    with tf.Session() as sess:\n        while (True):\n            try:\n                a = (sess.run(next_element))\n                print(psutil.cpu_percent(interval=0.0, percpu=False))\n                count=count+1\n                print(count)\n\n            except Exception as err:\n                print(count)\n                print(err)\n                sys.exit(0)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>", "body_text": "@mrry  I have another small example where seems it cannot fulfill all the cpus with num_parallel_calls.\nimport tensorflow as tf\nimport numpy as np\nimport os\nimport sys\nimport psutil\n\ndef read_fn(pairs):\n    res = np.zeros((5000, 5000, 3)).astype(np.float32)\n    return res\n\n\ndef main():\n    tf.logging.set_verbosity(tf.logging.INFO)\n\n    pairs = [['a'],['b'],['c'],['d'],['e'],['f'],['g'],['h'],['i'],['l'],['m'],['n']]\n\n    num_cpu = len(os.sched_getaffinity(0))\n    print(num_cpu)\n    dataset = tf.data.Dataset.from_tensor_slices(pairs)\n\n    dataset = dataset.map(\n           lambda x: tf.py_func(\n             func=read_fn, inp=[x],\n             Tout=[tf.float32], stateful=False\n           ),\n           num_parallel_calls=num_cpu)\n    dataset = dataset.repeat(20000)\n\n    iterator = dataset.make_one_shot_iterator()\n    next_element = iterator.get_next()\n\n    count = 0\n    with tf.Session() as sess:\n        while (True):\n            try:\n                a = (sess.run(next_element))\n                print(psutil.cpu_percent(interval=0.0, percpu=False))\n                count=count+1\n                print(count)\n\n            except Exception as err:\n                print(count)\n                print(err)\n                sys.exit(0)\n\n\nif __name__ == \"__main__\":\n    main()", "body": "@mrry  I have another small example where seems it cannot fulfill all the cpus with num_parallel_calls. \r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport os\r\nimport sys\r\nimport psutil\r\n\r\ndef read_fn(pairs):\r\n    res = np.zeros((5000, 5000, 3)).astype(np.float32)\r\n    return res\r\n\r\n\r\ndef main():\r\n    tf.logging.set_verbosity(tf.logging.INFO)\r\n\r\n    pairs = [['a'],['b'],['c'],['d'],['e'],['f'],['g'],['h'],['i'],['l'],['m'],['n']]\r\n\r\n    num_cpu = len(os.sched_getaffinity(0))\r\n    print(num_cpu)\r\n    dataset = tf.data.Dataset.from_tensor_slices(pairs)\r\n\r\n    dataset = dataset.map(\r\n           lambda x: tf.py_func(\r\n             func=read_fn, inp=[x],\r\n             Tout=[tf.float32], stateful=False\r\n           ),\r\n           num_parallel_calls=num_cpu)\r\n    dataset = dataset.repeat(20000)\r\n\r\n    iterator = dataset.make_one_shot_iterator()\r\n    next_element = iterator.get_next()\r\n\r\n    count = 0\r\n    with tf.Session() as sess:\r\n        while (True):\r\n            try:\r\n                a = (sess.run(next_element))\r\n                print(psutil.cpu_percent(interval=0.0, percpu=False))\r\n                count=count+1\r\n                print(count)\r\n\r\n            except Exception as err:\r\n                print(count)\r\n                print(err)\r\n                sys.exit(0)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```"}