{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327645764", "html_url": "https://github.com/tensorflow/tensorflow/issues/12857#issuecomment-327645764", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12857", "id": 327645764, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzY0NTc2NA==", "user": {"login": "printdhruv", "id": 17731159, "node_id": "MDQ6VXNlcjE3NzMxMTU5", "avatar_url": "https://avatars0.githubusercontent.com/u/17731159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/printdhruv", "html_url": "https://github.com/printdhruv", "followers_url": "https://api.github.com/users/printdhruv/followers", "following_url": "https://api.github.com/users/printdhruv/following{/other_user}", "gists_url": "https://api.github.com/users/printdhruv/gists{/gist_id}", "starred_url": "https://api.github.com/users/printdhruv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/printdhruv/subscriptions", "organizations_url": "https://api.github.com/users/printdhruv/orgs", "repos_url": "https://api.github.com/users/printdhruv/repos", "events_url": "https://api.github.com/users/printdhruv/events{/privacy}", "received_events_url": "https://api.github.com/users/printdhruv/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-07T00:09:53Z", "updated_at": "2017-09-07T00:09:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=157238\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/slacy\">@slacy</a> For reference, I am putting source code which is generating error.</p>\n<p><code>snippet-1</code> generated via <code>framework/tensor_util.py</code>.</p>\n<pre><code>def _AssertCompatible(values, dtype):\n  fn_list = _TF_TO_IS_OK.get(dtype, [_FilterNotTensor])\n  mismatch = _FirstNotNone([fn(values) for fn in fn_list])\n  if mismatch is not None:\n    if dtype is None:\n      raise TypeError(\"List of Tensors when single Tensor expected\")\n    else:\n      raise TypeError(\"Expected %s, got %s of type '%s' instead.\" %\n                      (dtype.name, repr(mismatch), type(mismatch).__name__))\n</code></pre>\n<p><code>snippet-2 and snippet-3</code> generated via <code>framework/op_def_library.py</code></p>\n<pre><code>def _SatisfiesTypeConstraint(dtype, attr_def, param_name):\n  if attr_def.HasField(\"allowed_values\"):\n    allowed_list = attr_def.allowed_values.list.type\n    if dtype not in allowed_list:\n      raise TypeError(\n          \"Value passed to parameter '%s' has DataType %s not in list of \"\n          \"allowed values: %s\" %\n          (param_name, dtypes.as_dtype(dtype).name,\n           \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\n</code></pre>", "body_text": "@slacy For reference, I am putting source code which is generating error.\nsnippet-1 generated via framework/tensor_util.py.\ndef _AssertCompatible(values, dtype):\n  fn_list = _TF_TO_IS_OK.get(dtype, [_FilterNotTensor])\n  mismatch = _FirstNotNone([fn(values) for fn in fn_list])\n  if mismatch is not None:\n    if dtype is None:\n      raise TypeError(\"List of Tensors when single Tensor expected\")\n    else:\n      raise TypeError(\"Expected %s, got %s of type '%s' instead.\" %\n                      (dtype.name, repr(mismatch), type(mismatch).__name__))\n\nsnippet-2 and snippet-3 generated via framework/op_def_library.py\ndef _SatisfiesTypeConstraint(dtype, attr_def, param_name):\n  if attr_def.HasField(\"allowed_values\"):\n    allowed_list = attr_def.allowed_values.list.type\n    if dtype not in allowed_list:\n      raise TypeError(\n          \"Value passed to parameter '%s' has DataType %s not in list of \"\n          \"allowed values: %s\" %\n          (param_name, dtypes.as_dtype(dtype).name,\n           \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))", "body": "@slacy For reference, I am putting source code which is generating error.\r\n\r\n`snippet-1` generated via `framework/tensor_util.py`.\r\n\r\n```\r\ndef _AssertCompatible(values, dtype):\r\n  fn_list = _TF_TO_IS_OK.get(dtype, [_FilterNotTensor])\r\n  mismatch = _FirstNotNone([fn(values) for fn in fn_list])\r\n  if mismatch is not None:\r\n    if dtype is None:\r\n      raise TypeError(\"List of Tensors when single Tensor expected\")\r\n    else:\r\n      raise TypeError(\"Expected %s, got %s of type '%s' instead.\" %\r\n                      (dtype.name, repr(mismatch), type(mismatch).__name__))\r\n```\r\n\r\n`snippet-2 and snippet-3` generated via `framework/op_def_library.py`\r\n\r\n```\r\ndef _SatisfiesTypeConstraint(dtype, attr_def, param_name):\r\n  if attr_def.HasField(\"allowed_values\"):\r\n    allowed_list = attr_def.allowed_values.list.type\r\n    if dtype not in allowed_list:\r\n      raise TypeError(\r\n          \"Value passed to parameter '%s' has DataType %s not in list of \"\r\n          \"allowed values: %s\" %\r\n          (param_name, dtypes.as_dtype(dtype).name,\r\n           \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\r\n```"}