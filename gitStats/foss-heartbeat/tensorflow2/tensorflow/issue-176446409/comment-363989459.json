{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/363989459", "html_url": "https://github.com/tensorflow/tensorflow/issues/4337#issuecomment-363989459", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4337", "id": 363989459, "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mzk4OTQ1OQ==", "user": {"login": "rueberger", "id": 8816362, "node_id": "MDQ6VXNlcjg4MTYzNjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8816362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rueberger", "html_url": "https://github.com/rueberger", "followers_url": "https://api.github.com/users/rueberger/followers", "following_url": "https://api.github.com/users/rueberger/following{/other_user}", "gists_url": "https://api.github.com/users/rueberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/rueberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rueberger/subscriptions", "organizations_url": "https://api.github.com/users/rueberger/orgs", "repos_url": "https://api.github.com/users/rueberger/repos", "events_url": "https://api.github.com/users/rueberger/events{/privacy}", "received_events_url": "https://api.github.com/users/rueberger/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-08T03:14:48Z", "updated_at": "2018-02-08T03:32:00Z", "author_association": "NONE", "body_html": "<p>I am no longer working on the particular problem which prompted me to open the issue. The workaround I used at the time as to compute the matrix multiplication outside of Tensorflow using an MKL function.</p>\n<p>However, in my opinion, a multi-cpu kernel for sparse matmul is a highly desirable feature.</p>\n<p>The need for such a feature frequently arises in advanced imaging applications (essentially large inverse problems). For instance, one can sharpen images produced by a microscope if they know the shape of the scope's point spread function, but this requires large matmuls. Classical techniques for doing this don't require the full power of Tensorflow, but there is a lot of interesting things one might do with machine learning to solve such problems, that would not be feasible without an efficient sparse matmul kernel.</p>", "body_text": "I am no longer working on the particular problem which prompted me to open the issue. The workaround I used at the time as to compute the matrix multiplication outside of Tensorflow using an MKL function.\nHowever, in my opinion, a multi-cpu kernel for sparse matmul is a highly desirable feature.\nThe need for such a feature frequently arises in advanced imaging applications (essentially large inverse problems). For instance, one can sharpen images produced by a microscope if they know the shape of the scope's point spread function, but this requires large matmuls. Classical techniques for doing this don't require the full power of Tensorflow, but there is a lot of interesting things one might do with machine learning to solve such problems, that would not be feasible without an efficient sparse matmul kernel.", "body": "I am no longer working on the particular problem which prompted me to open the issue. The workaround I used at the time as to compute the matrix multiplication outside of Tensorflow using an MKL function.\r\n\r\nHowever, in my opinion, a multi-cpu kernel for sparse matmul is a highly desirable feature.\r\n\r\nThe need for such a feature frequently arises in advanced imaging applications (essentially large inverse problems). For instance, one can sharpen images produced by a microscope if they know the shape of the scope's point spread function, but this requires large matmuls. Classical techniques for doing this don't require the full power of Tensorflow, but there is a lot of interesting things one might do with machine learning to solve such problems, that would not be feasible without an efficient sparse matmul kernel."}