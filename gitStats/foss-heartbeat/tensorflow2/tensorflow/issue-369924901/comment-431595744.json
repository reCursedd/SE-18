{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/431595744", "html_url": "https://github.com/tensorflow/tensorflow/issues/22971#issuecomment-431595744", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22971", "id": 431595744, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU5NTc0NA==", "user": {"login": "dedeibel", "id": 26708, "node_id": "MDQ6VXNlcjI2NzA4", "avatar_url": "https://avatars0.githubusercontent.com/u/26708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dedeibel", "html_url": "https://github.com/dedeibel", "followers_url": "https://api.github.com/users/dedeibel/followers", "following_url": "https://api.github.com/users/dedeibel/following{/other_user}", "gists_url": "https://api.github.com/users/dedeibel/gists{/gist_id}", "starred_url": "https://api.github.com/users/dedeibel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dedeibel/subscriptions", "organizations_url": "https://api.github.com/users/dedeibel/orgs", "repos_url": "https://api.github.com/users/dedeibel/repos", "events_url": "https://api.github.com/users/dedeibel/events{/privacy}", "received_events_url": "https://api.github.com/users/dedeibel/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-20T16:19:34Z", "updated_at": "2018-10-20T16:19:34Z", "author_association": "NONE", "body_html": "<p>Thanks for the hints to some other guides. I managed to compile it now. The guides for ubuntu where not applicable so I chose to install everything by hand.</p>\n<p>My path was now to remove all debian distribution nvidia packages. Then install all libs and tools with matching version numbers.</p>\n<ul>\n<li>bazel 0.15</li>\n<li>geforce driver NVIDIA-Linux-x86_64-410.66.run</li>\n<li>cuda_9.1.85_387.26_linux.run</li>\n<li>cuda_9.1.85.1_linux.run (patche)</li>\n<li>cuda_9.1.85.2_linux.run (patche)</li>\n<li>cuda_9.1.85.3_linux.run (patche)</li>\n<li>cudnn-9.1-linux-x64-v7.1.tgz</li>\n<li>nccl_2.1.15-1+cuda9.1_x86_64.txz</li>\n<li>gcc-4.8</li>\n</ul>\n<p>My bazel config:</p>\n<pre><code>.tf_configure.bazelrc\n\nbuild --action_env PYTHON_BIN_PATH=\"/usr/bin/python3\"\nbuild --action_env PYTHON_LIB_PATH=\"/usr/lib/python3/dist-packages\"\nbuild --python_path=\"/usr/bin/python3\"\nbuild --define with_jemalloc=true\nbuild:gcp --define with_gcp_support=true\nbuild:hdfs --define with_hdfs_support=true\nbuild:aws --define with_aws_support=true\nbuild:kafka --define with_kafka_support=true\nbuild:xla --define with_xla_support=true\nbuild:gdr --define with_gdr_support=true\nbuild:verbs --define with_verbs_support=true\nbuild:ngraph --define with_ngraph_support=true\nbuild --action_env TF_NEED_OPENCL_SYCL=\"0\"\nbuild --action_env TF_NEED_CUDA=\"1\"\nbuild --action_env CUDA_TOOLKIT_PATH=\"/usr/local/cuda\"\nbuild --action_env TF_CUDA_VERSION=\"9.1\"\nbuild --action_env CUDNN_INSTALL_PATH=\"/usr/local/cuda-9.1\"\nbuild --action_env TF_CUDNN_VERSION=\"7\"\nbuild --action_env NCCL_INSTALL_PATH=\"/usr/local/cuda-9.1\"\nbuild --action_env TF_NCCL_VERSION=\"2\"\nbuild --action_env TF_CUDA_COMPUTE_CAPABILITIES=\"6.1\"\nbuild --action_env LD_LIBRARY_PATH=\"/usr/local/cuda-9.1/lib64\"\nbuild --action_env TF_CUDA_CLANG=\"0\"\nbuild --action_env GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc-4.8\"\nbuild --config=cuda\ntest --config=cuda\nbuild --define grpc_no_ares=true\nbuild:opt --copt=-march=native\nbuild:opt --host_copt=-march=native\nbuild:opt --define with_default_optimizations=true\n</code></pre>\n<p>(I tested cuda by runnig the samples, but had to add some env variables for it to build through<br>\n<code>EXTRA_LDFLAGS='-lstdc++ -lm' HOST_COMPILER=/usr/bin/g++-6 CXX=/usr/bin/g++-6 CC=/usr/bin/gcc-6 make</code></p>\n<p>And had to \"fix\" this line and add the output redirection to /dev/null.</p>\n<pre><code>0_Simple/UnifiedMemoryStreams/Makefile:$(shell echo \"#include &lt;omp.h&gt;\" &gt; test.c ; echo \"int main() { omp_get_num_threads(); return 0; }\" &gt;&gt; test.c ; $(HOST_COMPILER) -fopenmp test.c &gt; /dev/null 2&gt; /dev/null)\n```)\n\n</code></pre>", "body_text": "Thanks for the hints to some other guides. I managed to compile it now. The guides for ubuntu where not applicable so I chose to install everything by hand.\nMy path was now to remove all debian distribution nvidia packages. Then install all libs and tools with matching version numbers.\n\nbazel 0.15\ngeforce driver NVIDIA-Linux-x86_64-410.66.run\ncuda_9.1.85_387.26_linux.run\ncuda_9.1.85.1_linux.run (patche)\ncuda_9.1.85.2_linux.run (patche)\ncuda_9.1.85.3_linux.run (patche)\ncudnn-9.1-linux-x64-v7.1.tgz\nnccl_2.1.15-1+cuda9.1_x86_64.txz\ngcc-4.8\n\nMy bazel config:\n.tf_configure.bazelrc\n\nbuild --action_env PYTHON_BIN_PATH=\"/usr/bin/python3\"\nbuild --action_env PYTHON_LIB_PATH=\"/usr/lib/python3/dist-packages\"\nbuild --python_path=\"/usr/bin/python3\"\nbuild --define with_jemalloc=true\nbuild:gcp --define with_gcp_support=true\nbuild:hdfs --define with_hdfs_support=true\nbuild:aws --define with_aws_support=true\nbuild:kafka --define with_kafka_support=true\nbuild:xla --define with_xla_support=true\nbuild:gdr --define with_gdr_support=true\nbuild:verbs --define with_verbs_support=true\nbuild:ngraph --define with_ngraph_support=true\nbuild --action_env TF_NEED_OPENCL_SYCL=\"0\"\nbuild --action_env TF_NEED_CUDA=\"1\"\nbuild --action_env CUDA_TOOLKIT_PATH=\"/usr/local/cuda\"\nbuild --action_env TF_CUDA_VERSION=\"9.1\"\nbuild --action_env CUDNN_INSTALL_PATH=\"/usr/local/cuda-9.1\"\nbuild --action_env TF_CUDNN_VERSION=\"7\"\nbuild --action_env NCCL_INSTALL_PATH=\"/usr/local/cuda-9.1\"\nbuild --action_env TF_NCCL_VERSION=\"2\"\nbuild --action_env TF_CUDA_COMPUTE_CAPABILITIES=\"6.1\"\nbuild --action_env LD_LIBRARY_PATH=\"/usr/local/cuda-9.1/lib64\"\nbuild --action_env TF_CUDA_CLANG=\"0\"\nbuild --action_env GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc-4.8\"\nbuild --config=cuda\ntest --config=cuda\nbuild --define grpc_no_ares=true\nbuild:opt --copt=-march=native\nbuild:opt --host_copt=-march=native\nbuild:opt --define with_default_optimizations=true\n\n(I tested cuda by runnig the samples, but had to add some env variables for it to build through\nEXTRA_LDFLAGS='-lstdc++ -lm' HOST_COMPILER=/usr/bin/g++-6 CXX=/usr/bin/g++-6 CC=/usr/bin/gcc-6 make\nAnd had to \"fix\" this line and add the output redirection to /dev/null.\n0_Simple/UnifiedMemoryStreams/Makefile:$(shell echo \"#include <omp.h>\" > test.c ; echo \"int main() { omp_get_num_threads(); return 0; }\" >> test.c ; $(HOST_COMPILER) -fopenmp test.c > /dev/null 2> /dev/null)\n```)", "body": "Thanks for the hints to some other guides. I managed to compile it now. The guides for ubuntu where not applicable so I chose to install everything by hand.\r\n\r\nMy path was now to remove all debian distribution nvidia packages. Then install all libs and tools with matching version numbers.\r\n\r\n- bazel 0.15\r\n- geforce driver NVIDIA-Linux-x86_64-410.66.run\r\n- cuda_9.1.85_387.26_linux.run\r\n- cuda_9.1.85.1_linux.run (patche)\r\n- cuda_9.1.85.2_linux.run (patche)\r\n- cuda_9.1.85.3_linux.run (patche)\r\n- cudnn-9.1-linux-x64-v7.1.tgz\r\n- nccl_2.1.15-1+cuda9.1_x86_64.txz\r\n- gcc-4.8\r\n\r\nMy bazel config:\r\n\r\n```\r\n.tf_configure.bazelrc\r\n\r\nbuild --action_env PYTHON_BIN_PATH=\"/usr/bin/python3\"\r\nbuild --action_env PYTHON_LIB_PATH=\"/usr/lib/python3/dist-packages\"\r\nbuild --python_path=\"/usr/bin/python3\"\r\nbuild --define with_jemalloc=true\r\nbuild:gcp --define with_gcp_support=true\r\nbuild:hdfs --define with_hdfs_support=true\r\nbuild:aws --define with_aws_support=true\r\nbuild:kafka --define with_kafka_support=true\r\nbuild:xla --define with_xla_support=true\r\nbuild:gdr --define with_gdr_support=true\r\nbuild:verbs --define with_verbs_support=true\r\nbuild:ngraph --define with_ngraph_support=true\r\nbuild --action_env TF_NEED_OPENCL_SYCL=\"0\"\r\nbuild --action_env TF_NEED_CUDA=\"1\"\r\nbuild --action_env CUDA_TOOLKIT_PATH=\"/usr/local/cuda\"\r\nbuild --action_env TF_CUDA_VERSION=\"9.1\"\r\nbuild --action_env CUDNN_INSTALL_PATH=\"/usr/local/cuda-9.1\"\r\nbuild --action_env TF_CUDNN_VERSION=\"7\"\r\nbuild --action_env NCCL_INSTALL_PATH=\"/usr/local/cuda-9.1\"\r\nbuild --action_env TF_NCCL_VERSION=\"2\"\r\nbuild --action_env TF_CUDA_COMPUTE_CAPABILITIES=\"6.1\"\r\nbuild --action_env LD_LIBRARY_PATH=\"/usr/local/cuda-9.1/lib64\"\r\nbuild --action_env TF_CUDA_CLANG=\"0\"\r\nbuild --action_env GCC_HOST_COMPILER_PATH=\"/usr/bin/gcc-4.8\"\r\nbuild --config=cuda\r\ntest --config=cuda\r\nbuild --define grpc_no_ares=true\r\nbuild:opt --copt=-march=native\r\nbuild:opt --host_copt=-march=native\r\nbuild:opt --define with_default_optimizations=true\r\n```\r\n\r\n(I tested cuda by runnig the samples, but had to add some env variables for it to build through \r\n`EXTRA_LDFLAGS='-lstdc++ -lm' HOST_COMPILER=/usr/bin/g++-6 CXX=/usr/bin/g++-6 CC=/usr/bin/gcc-6 make`\r\n\r\nAnd had to \"fix\" this line and add the output redirection to /dev/null.\r\n\r\n```\r\n0_Simple/UnifiedMemoryStreams/Makefile:$(shell echo \"#include <omp.h>\" > test.c ; echo \"int main() { omp_get_num_threads(); return 0; }\" >> test.c ; $(HOST_COMPILER) -fopenmp test.c > /dev/null 2> /dev/null)\r\n```)\r\n\r\n"}