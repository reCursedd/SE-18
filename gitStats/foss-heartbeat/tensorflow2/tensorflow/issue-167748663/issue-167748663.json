{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3520", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3520/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3520/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3520/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3520", "id": 167748663, "node_id": "MDU6SXNzdWUxNjc3NDg2NjM=", "number": 3520, "title": "verify_tensor_all_finite does not handle list of tensors of different shape", "user": {"login": "akucukelbir", "id": 329960, "node_id": "MDQ6VXNlcjMyOTk2MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/329960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akucukelbir", "html_url": "https://github.com/akucukelbir", "followers_url": "https://api.github.com/users/akucukelbir/followers", "following_url": "https://api.github.com/users/akucukelbir/following{/other_user}", "gists_url": "https://api.github.com/users/akucukelbir/gists{/gist_id}", "starred_url": "https://api.github.com/users/akucukelbir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akucukelbir/subscriptions", "organizations_url": "https://api.github.com/users/akucukelbir/orgs", "repos_url": "https://api.github.com/users/akucukelbir/repos", "events_url": "https://api.github.com/users/akucukelbir/events{/privacy}", "received_events_url": "https://api.github.com/users/akucukelbir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-27T01:26:54Z", "updated_at": "2016-07-27T11:20:13Z", "closed_at": "2016-07-27T02:46:19Z", "author_association": "NONE", "body_html": "<p><code>tf.verify_tensor_all_finite</code> works on lists of tensors that have the same shape.</p>\n<p>but it does not seem to work on lists of tensors that have different shapes.</p>\n<h3>Environment info</h3>\n<p>Operating System: Mac OSX 10.10.5</p>\n<p>Installed version of CUDA and cuDNN: None</p>\n<p>If installed from binary pip package, provide: 0.9.0rc0</p>\n<h3>Steps to reproduce</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nsess <span class=\"pl-k\">=</span> tf.Session()\n\nx0 <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([<span class=\"pl-c1\">1</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32))\nx1 <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([<span class=\"pl-c1\">1</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32))\nx2 <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([<span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32))\n\nsess.run(tf.initialize_all_variables())\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> works</span>\nassert_ops <span class=\"pl-k\">=</span> [tf.verify_tensor_all_finite(x1, <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)]\n<span class=\"pl-k\">with</span> tf.control_dependencies(assert_ops):\n    y <span class=\"pl-k\">=</span> tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\n<span class=\"pl-c1\">print</span>(y.eval(<span class=\"pl-v\">session</span><span class=\"pl-k\">=</span>sess))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> works</span>\nassert_ops <span class=\"pl-k\">=</span> [tf.verify_tensor_all_finite(x1, <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>),\n              tf.verify_tensor_all_finite(x2, <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)]\n<span class=\"pl-k\">with</span> tf.control_dependencies(assert_ops):\n    y <span class=\"pl-k\">=</span> tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\n<span class=\"pl-c1\">print</span>(y.eval(<span class=\"pl-v\">session</span><span class=\"pl-k\">=</span>sess))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> works (x0 and x1 have same shape)</span>\nassert_ops <span class=\"pl-k\">=</span> [tf.verify_tensor_all_finite([x0, x1], <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)]\n<span class=\"pl-k\">with</span> tf.control_dependencies(assert_ops):\n    y <span class=\"pl-k\">=</span> tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\n<span class=\"pl-c1\">print</span>(y.eval(<span class=\"pl-v\">session</span><span class=\"pl-k\">=</span>sess))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> fails (x0 and x2 have different shapes)</span>\nassert_ops <span class=\"pl-k\">=</span> [tf.verify_tensor_all_finite([x0, x2], <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)]\n<span class=\"pl-k\">with</span> tf.control_dependencies(assert_ops):\n    y <span class=\"pl-k\">=</span> tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\n<span class=\"pl-c1\">print</span>(y.eval(<span class=\"pl-v\">session</span><span class=\"pl-k\">=</span>sess))</pre></div>", "body_text": "tf.verify_tensor_all_finite works on lists of tensors that have the same shape.\nbut it does not seem to work on lists of tensors that have different shapes.\nEnvironment info\nOperating System: Mac OSX 10.10.5\nInstalled version of CUDA and cuDNN: None\nIf installed from binary pip package, provide: 0.9.0rc0\nSteps to reproduce\nimport tensorflow as tf\n\nsess = tf.Session()\n\nx0 = tf.Variable(tf.random_normal([1], dtype=tf.float32))\nx1 = tf.Variable(tf.random_normal([1], dtype=tf.float32))\nx2 = tf.Variable(tf.random_normal([3], dtype=tf.float32))\n\nsess.run(tf.initialize_all_variables())\n\n# works\nassert_ops = [tf.verify_tensor_all_finite(x1, msg='')]\nwith tf.control_dependencies(assert_ops):\n    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\nprint(y.eval(session=sess))\n\n# works\nassert_ops = [tf.verify_tensor_all_finite(x1, msg=''),\n              tf.verify_tensor_all_finite(x2, msg='')]\nwith tf.control_dependencies(assert_ops):\n    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\nprint(y.eval(session=sess))\n\n# works (x0 and x1 have same shape)\nassert_ops = [tf.verify_tensor_all_finite([x0, x1], msg='')]\nwith tf.control_dependencies(assert_ops):\n    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\nprint(y.eval(session=sess))\n\n# fails (x0 and x2 have different shapes)\nassert_ops = [tf.verify_tensor_all_finite([x0, x2], msg='')]\nwith tf.control_dependencies(assert_ops):\n    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\nprint(y.eval(session=sess))", "body": "`tf.verify_tensor_all_finite` works on lists of tensors that have the same shape.\n\nbut it does not seem to work on lists of tensors that have different shapes.\n### Environment info\n\nOperating System: Mac OSX 10.10.5\n\nInstalled version of CUDA and cuDNN: None\n\nIf installed from binary pip package, provide: 0.9.0rc0\n### Steps to reproduce\n\n``` Python\nimport tensorflow as tf\n\nsess = tf.Session()\n\nx0 = tf.Variable(tf.random_normal([1], dtype=tf.float32))\nx1 = tf.Variable(tf.random_normal([1], dtype=tf.float32))\nx2 = tf.Variable(tf.random_normal([3], dtype=tf.float32))\n\nsess.run(tf.initialize_all_variables())\n\n# works\nassert_ops = [tf.verify_tensor_all_finite(x1, msg='')]\nwith tf.control_dependencies(assert_ops):\n    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\nprint(y.eval(session=sess))\n\n# works\nassert_ops = [tf.verify_tensor_all_finite(x1, msg=''),\n              tf.verify_tensor_all_finite(x2, msg='')]\nwith tf.control_dependencies(assert_ops):\n    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\nprint(y.eval(session=sess))\n\n# works (x0 and x1 have same shape)\nassert_ops = [tf.verify_tensor_all_finite([x0, x1], msg='')]\nwith tf.control_dependencies(assert_ops):\n    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\nprint(y.eval(session=sess))\n\n# fails (x0 and x2 have different shapes)\nassert_ops = [tf.verify_tensor_all_finite([x0, x2], msg='')]\nwith tf.control_dependencies(assert_ops):\n    y = tf.mul(x0, tf.mul(x1, tf.reduce_sum(x2)))\nprint(y.eval(session=sess))\n```\n"}