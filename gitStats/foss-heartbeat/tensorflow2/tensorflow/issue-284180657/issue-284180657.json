{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15588", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15588/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15588/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15588/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15588", "id": 284180657, "node_id": "MDU6SXNzdWUyODQxODA2NTc=", "number": 15588, "title": "Tensorflow crashes on AVX512 systems (Core i9 / Xeon etc)", "user": {"login": "fenrus75", "id": 1302037, "node_id": "MDQ6VXNlcjEzMDIwMzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1302037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fenrus75", "html_url": "https://github.com/fenrus75", "followers_url": "https://api.github.com/users/fenrus75/followers", "following_url": "https://api.github.com/users/fenrus75/following{/other_user}", "gists_url": "https://api.github.com/users/fenrus75/gists{/gist_id}", "starred_url": "https://api.github.com/users/fenrus75/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fenrus75/subscriptions", "organizations_url": "https://api.github.com/users/fenrus75/orgs", "repos_url": "https://api.github.com/users/fenrus75/repos", "events_url": "https://api.github.com/users/fenrus75/events{/privacy}", "received_events_url": "https://api.github.com/users/fenrus75/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 16, "created_at": "2017-12-22T14:49:23Z", "updated_at": "2018-05-17T17:17:40Z", "closed_at": "2018-05-17T17:17:40Z", "author_association": "NONE", "body_html": "<p>(for now, placeholder for notes while investigating)<br>\nusing the r1.5 branch (but 1.4 and earlier have the same issues)</p>\n<p>Tensorflow crashes when compiled for AVX512. The cause is a misalignment exception; AVX512 has a 64 byte natural alignment, and Eigen and others often use instructions that explicitly fault on misaligned loads.</p>\n<p>tensorflow/core/framework/allocator.h has this code<br>\nclass Allocator {<br>\npublic:<br>\n#ifdef EIGEN_VECTORIZE_AVX512<br>\n// Align to 64 byte boundary.<br>\nstatic constexpr size_t kAllocatorAlignment = 64;<br>\n#else<br>\n// Align to 32 byte boundary.<br>\nstatic constexpr size_t kAllocatorAlignment = 32;<br>\n#endif</p>\n<p>which implies that at least this allocator tries to do the right thing, however it seems EIGEN_VECTORIZE_AVX512 is not properly defined (in cpp meaning) at this place, because when adding an #error in the 32 byte alignment case, the #error hits, so the 64 bit alignment case is not used.</p>\n<p>This is not the only case; brute forcing the 32 to be 64 still faults in misalignment... just later on in a different place.</p>", "body_text": "(for now, placeholder for notes while investigating)\nusing the r1.5 branch (but 1.4 and earlier have the same issues)\nTensorflow crashes when compiled for AVX512. The cause is a misalignment exception; AVX512 has a 64 byte natural alignment, and Eigen and others often use instructions that explicitly fault on misaligned loads.\ntensorflow/core/framework/allocator.h has this code\nclass Allocator {\npublic:\n#ifdef EIGEN_VECTORIZE_AVX512\n// Align to 64 byte boundary.\nstatic constexpr size_t kAllocatorAlignment = 64;\n#else\n// Align to 32 byte boundary.\nstatic constexpr size_t kAllocatorAlignment = 32;\n#endif\nwhich implies that at least this allocator tries to do the right thing, however it seems EIGEN_VECTORIZE_AVX512 is not properly defined (in cpp meaning) at this place, because when adding an #error in the 32 byte alignment case, the #error hits, so the 64 bit alignment case is not used.\nThis is not the only case; brute forcing the 32 to be 64 still faults in misalignment... just later on in a different place.", "body": "(for now, placeholder for notes while investigating)\r\nusing the r1.5 branch (but 1.4 and earlier have the same issues)\r\n\r\nTensorflow crashes when compiled for AVX512. The cause is a misalignment exception; AVX512 has a 64 byte natural alignment, and Eigen and others often use instructions that explicitly fault on misaligned loads.\r\n\r\ntensorflow/core/framework/allocator.h has this code\r\nclass Allocator {\r\n public:\r\n#ifdef EIGEN_VECTORIZE_AVX512\r\n  // Align to 64 byte boundary.\r\n  static constexpr size_t kAllocatorAlignment = 64;\r\n#else\r\n  // Align to 32 byte boundary.\r\n  static constexpr size_t kAllocatorAlignment = 32;\r\n#endif\r\n\r\n\r\nwhich implies that at least this allocator tries to do the right thing, however it seems EIGEN_VECTORIZE_AVX512 is not properly defined (in cpp meaning) at this place, because when adding an #error in the 32 byte alignment case, the #error hits, so the 64 bit alignment case is not used.\r\n\r\nThis is not the only case; brute forcing the 32 to be 64 still faults in misalignment... just later on in a different place.\r\n\r\n"}