{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/292541904", "html_url": "https://github.com/tensorflow/tensorflow/issues/9027#issuecomment-292541904", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9027", "id": 292541904, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjU0MTkwNA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-07T13:51:23Z", "updated_at": "2017-04-07T13:51:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I <em>think</em> <code>io::CleanPath()</code> should be safe to use on most already-clean filenames, since Windows is tolerant of a mixture of  <code>'/'</code> and  <code>'\\'</code> in paths. However it seems like it might be more useful to switch to using something like <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/hh707084(v=vs.85).aspx\" rel=\"nofollow\"><code>PathCchCanonicalizeEx()</code> </a> in <code>WindowsFileSystem::TranslateName()</code>.</p>\n<p>I'm also a bit concerned about the general logic in <code>saver.py</code>. In particular, is it guaranteed to be safe to mix <code>tf.gfile</code> functions with <code>os.path.dirname()</code> and <code>os.path.basename()</code> functions? I'm thinking this might cause the code to falsely reject e.g. an HDFS path on Windows. Or the test <a href=\"https://github.com/tensorflow/tensorflow/blob/f8dce81aeaff40dc78d398741854ad8766806f91/tensorflow/python/training/saver.py#L1457\">on L1457</a> might fail even though two filenames canonicalize to the same name. Maybe we should be delegating all <code>os.path</code> use in the Python libraries down to TensorFlow's C++ <code>Env</code> and <code>FileSystem</code> classes?</p>\n<p>One other thing we could do in <code>saver.py</code> is to detect whenever a relative path is being supplied (which IIRC wasn't supported on any platform until the latest version) and eagerly convert it to an absolute path.</p>", "body_text": "I think io::CleanPath() should be safe to use on most already-clean filenames, since Windows is tolerant of a mixture of  '/' and  '\\' in paths. However it seems like it might be more useful to switch to using something like PathCchCanonicalizeEx()  in WindowsFileSystem::TranslateName().\nI'm also a bit concerned about the general logic in saver.py. In particular, is it guaranteed to be safe to mix tf.gfile functions with os.path.dirname() and os.path.basename() functions? I'm thinking this might cause the code to falsely reject e.g. an HDFS path on Windows. Or the test on L1457 might fail even though two filenames canonicalize to the same name. Maybe we should be delegating all os.path use in the Python libraries down to TensorFlow's C++ Env and FileSystem classes?\nOne other thing we could do in saver.py is to detect whenever a relative path is being supplied (which IIRC wasn't supported on any platform until the latest version) and eagerly convert it to an absolute path.", "body": "I *think* `io::CleanPath()` should be safe to use on most already-clean filenames, since Windows is tolerant of a mixture of  `'/'` and  `'\\'` in paths. However it seems like it might be more useful to switch to using something like [`PathCchCanonicalizeEx()` ](https://msdn.microsoft.com/en-us/library/windows/desktop/hh707084(v=vs.85).aspx) in `WindowsFileSystem::TranslateName()`.\r\n\r\nI'm also a bit concerned about the general logic in `saver.py`. In particular, is it guaranteed to be safe to mix `tf.gfile` functions with `os.path.dirname()` and `os.path.basename()` functions? I'm thinking this might cause the code to falsely reject e.g. an HDFS path on Windows. Or the test [on L1457](https://github.com/tensorflow/tensorflow/blob/f8dce81aeaff40dc78d398741854ad8766806f91/tensorflow/python/training/saver.py#L1457) might fail even though two filenames canonicalize to the same name. Maybe we should be delegating all `os.path` use in the Python libraries down to TensorFlow's C++ `Env` and `FileSystem` classes?\r\n\r\nOne other thing we could do in `saver.py` is to detect whenever a relative path is being supplied (which IIRC wasn't supported on any platform until the latest version) and eagerly convert it to an absolute path."}