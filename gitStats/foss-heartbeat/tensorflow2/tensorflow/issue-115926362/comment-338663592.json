{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338663592", "html_url": "https://github.com/tensorflow/tensorflow/issues/19#issuecomment-338663592", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19", "id": 338663592, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODY2MzU5Mg==", "user": {"login": "RockfordWei", "id": 22161723, "node_id": "MDQ6VXNlcjIyMTYxNzIz", "avatar_url": "https://avatars1.githubusercontent.com/u/22161723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RockfordWei", "html_url": "https://github.com/RockfordWei", "followers_url": "https://api.github.com/users/RockfordWei/followers", "following_url": "https://api.github.com/users/RockfordWei/following{/other_user}", "gists_url": "https://api.github.com/users/RockfordWei/gists{/gist_id}", "starred_url": "https://api.github.com/users/RockfordWei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RockfordWei/subscriptions", "organizations_url": "https://api.github.com/users/RockfordWei/orgs", "repos_url": "https://api.github.com/users/RockfordWei/repos", "events_url": "https://api.github.com/users/RockfordWei/events{/privacy}", "received_events_url": "https://api.github.com/users/RockfordWei/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-23T13:45:15Z", "updated_at": "2017-10-23T13:46:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1786378\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/VolodymyrPavliukevych\">@VolodymyrPavliukevych</a></p>\n<p>Perfect TensorFlow provides a super high level &amp; convenient API to deal with the graph:</p>\n<p>For example, there is a graph protocol buffer file \"graph.pb\", you can do the following steps to load / save it:</p>\n<div class=\"highlight highlight-source-swift\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">PerfectTensorFlow</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">PerfectLib</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">Foundation</span>\n<span class=\"pl-k\">typealias</span> <span class=\"pl-en\">TF</span> <span class=\"pl-k\">=</span> TensorFlow\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> load file into Data structure first</span>\n<span class=\"pl-c\"></span><span class=\"pl-k\">let</span> fModel <span class=\"pl-k\">=</span> <span class=\"pl-c1\">File</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>graph.pb<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">try</span> fModel.<span class=\"pl-c1\">open</span>(.<span class=\"pl-smi\">read</span>)\n<span class=\"pl-k\">let</span> bytes <span class=\"pl-k\">=</span> <span class=\"pl-k\">try</span> fModel.<span class=\"pl-c1\">readSomeBytes</span>(<span class=\"pl-c1\">count</span>: fModel.<span class=\"pl-c1\">size</span>)\n<span class=\"pl-k\">let</span> data <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Data</span>(<span class=\"pl-c1\">bytes</span>: bytes)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> turn the data into graph definition</span>\n<span class=\"pl-c\"></span><span class=\"pl-k\">let</span> def <span class=\"pl-k\">=</span> <span class=\"pl-k\">try</span> TF.<span class=\"pl-c1\">GraphDef</span>(<span class=\"pl-c1\">serializedData</span>: data)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import it into the running graph</span>\n<span class=\"pl-c\"></span><span class=\"pl-k\">let</span> graph <span class=\"pl-k\">=</span> <span class=\"pl-k\">try</span> TF.<span class=\"pl-c1\">Graph</span>()\n<span class=\"pl-k\">try</span> graph.<span class=\"pl-c1\">import</span>(<span class=\"pl-c1\">definition</span>: def)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> run a session</span>\n<span class=\"pl-c\"></span><span class=\"pl-k\">let</span> session. <span class=\"pl-k\">=</span> <span class=\"pl-k\">try</span> graph.<span class=\"pl-c1\">runner</span>()\n   .<span class=\"pl-c1\">feed</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DecodeJpeg/contents<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">tensor</span>: someTensor)\n   .<span class=\"pl-c1\">fetch</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>final_result<span class=\"pl-pds\">\"</span></span>)\n   .<span class=\"pl-c1\">run</span>()\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> get the current buffer after session</span>\n<span class=\"pl-c\"></span><span class=\"pl-k\">if</span> <span class=\"pl-k\">let</span> dat <span class=\"pl-k\">=</span> graph.<span class=\"pl-c1\">buffer</span><span class=\"pl-k\">?</span>.<span class=\"pl-smi\">data</span> {\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> now you can save the data bytes into another file</span>\n<span class=\"pl-c\"></span>}\n</pre></div>", "body_text": "@VolodymyrPavliukevych\nPerfect TensorFlow provides a super high level & convenient API to deal with the graph:\nFor example, there is a graph protocol buffer file \"graph.pb\", you can do the following steps to load / save it:\nimport PerfectTensorFlow\nimport PerfectLib\nimport Foundation\ntypealias TF = TensorFlow\n\n// load file into Data structure first\nlet fModel = File(\"graph.pb\")\ntry fModel.open(.read)\nlet bytes = try fModel.readSomeBytes(count: fModel.size)\nlet data = Data(bytes: bytes)\n\n// turn the data into graph definition\nlet def = try TF.GraphDef(serializedData: data)\n\n// import it into the running graph\nlet graph = try TF.Graph()\ntry graph.import(definition: def)\n\n// run a session\nlet session. = try graph.runner()\n   .feed(\"DecodeJpeg/contents\", tensor: someTensor)\n   .fetch(\"final_result\")\n   .run()\n\n// get the current buffer after session\nif let dat = graph.buffer?.data {\n// now you can save the data bytes into another file\n}", "body": "@VolodymyrPavliukevych\r\n\r\nPerfect TensorFlow provides a super high level & convenient API to deal with the graph:\r\n\r\nFor example, there is a graph protocol buffer file \"graph.pb\", you can do the following steps to load / save it:\r\n\r\n``` swift\r\nimport PerfectTensorFlow\r\nimport PerfectLib\r\nimport Foundation\r\ntypealias TF = TensorFlow\r\n\r\n// load file into Data structure first\r\nlet fModel = File(\"graph.pb\")\r\ntry fModel.open(.read)\r\nlet bytes = try fModel.readSomeBytes(count: fModel.size)\r\nlet data = Data(bytes: bytes)\r\n\r\n// turn the data into graph definition\r\nlet def = try TF.GraphDef(serializedData: data)\r\n\r\n// import it into the running graph\r\nlet graph = try TF.Graph()\r\ntry graph.import(definition: def)\r\n\r\n// run a session\r\nlet session. = try graph.runner()\r\n   .feed(\"DecodeJpeg/contents\", tensor: someTensor)\r\n   .fetch(\"final_result\")\r\n   .run()\r\n\r\n// get the current buffer after session\r\nif let dat = graph.buffer?.data {\r\n// now you can save the data bytes into another file\r\n}\r\n\r\n```\r\n"}