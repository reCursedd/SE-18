{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/298534058", "html_url": "https://github.com/tensorflow/tensorflow/issues/9505#issuecomment-298534058", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9505", "id": 298534058, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODUzNDA1OA==", "user": {"login": "burness", "id": 3112825, "node_id": "MDQ6VXNlcjMxMTI4MjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3112825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burness", "html_url": "https://github.com/burness", "followers_url": "https://api.github.com/users/burness/followers", "following_url": "https://api.github.com/users/burness/following{/other_user}", "gists_url": "https://api.github.com/users/burness/gists{/gist_id}", "starred_url": "https://api.github.com/users/burness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burness/subscriptions", "organizations_url": "https://api.github.com/users/burness/orgs", "repos_url": "https://api.github.com/users/burness/repos", "events_url": "https://api.github.com/users/burness/events{/privacy}", "received_events_url": "https://api.github.com/users/burness/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-02T07:47:50Z", "updated_at": "2017-05-02T07:48:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22332205\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/petrosmol\">@petrosmol</a>  Thanks! It seems ok now. And In a randomforest test case as follow:</p>\n<pre><code>import tensorflow as tf\nimport pandas as pd\nfrom tensorflow.contrib.tensor_forest.client import random_forest\n\ndetailed_occupation_recode = tf.contrib.layers.sparse_column_with_hash_bucket(\n    column_name='detailed_occupation_recode', hash_bucket_size=1000)\neducation = tf.contrib.layers.sparse_column_with_hash_bucket(\n    column_name='education', hash_bucket_size=1000)\n# Continuous base columns\nage = tf.contrib.layers.real_valued_column('age')\nwage_per_hour = tf.contrib.layers.real_valued_column('wage_per_hour')\n\ncolumns = [\n    'age', 'detailed_occupation_recode', 'education', 'wage_per_hour', 'label'\n]\nFEATURE_COLUMNS = [\n    # age, age_buckets, class_of_worker, detailed_industry_recode,\n    age,\n    detailed_occupation_recode,\n    education,\n    wage_per_hour\n]\n\nLABEL_COLUMN = 'label'\n\nCONTINUOUS_COLUMNS = ['age', 'wage_per_hour']\n\nCATEGORICAL_COLUMNS = ['detailed_occupation_recode', 'education']\n\ndf_train = pd.DataFrame(\n    [[12, '12', '7th and 8th grade', 40, '- 50000'],\n     [40, '45', '7th and 8th grade', 40, '50000+'],\n     [50, '50', '10th grade', 40, '50000+'],\n     [60, '30', '7th and 8th grade', 40, '- 50000']],\n    columns=[\n        'age', 'detailed_occupation_recode', 'education', 'wage_per_hour',\n        'label'\n    ])\n\ndf_test = pd.DataFrame(\n    [[12, '12', '7th and 8th grade', 40, '- 50000'],\n     [40, '45', '7th and 8th grade', 40, '50000+'],\n     [50, '50', '10th grade', 40, '50000+'],\n     [60, '30', '7th and 8th grade', 40, '- 50000']],\n    columns=[\n        'age', 'detailed_occupation_recode', 'education', 'wage_per_hour',\n        'label'\n    ])\ndf_train[LABEL_COLUMN] = (\n    df_train[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)\ndf_test[LABEL_COLUMN] = (\n    df_test[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)\ndtypess = df_train.dtypes\n\nprint df_train\nprint df_test\n\n\ndef input_fn(df):\n    # continuous_cols = {\n    #     k: tf.expand_dims(tf.constant(df[k].values), 1)\n    #     for k in CONTINUOUS_COLUMNS\n    # }\n    continuous_cols = {\n        k: tf.constant(df[k].values)\n        for k in CONTINUOUS_COLUMNS\n    }\n    categorical_cols = {\n        k: tf.SparseTensor(\n            indices=[[i, 0] for i in range(df[k].size)],\n            values=df[k].values,\n            dense_shape=[df[k].size, 1])\n        for k in CATEGORICAL_COLUMNS\n    }\n    feature_cols = dict(continuous_cols.items() + categorical_cols.items())\n    label = tf.constant(df[LABEL_COLUMN].values)\n    return feature_cols, label\n\n\ndef train_input_fn():\n    return input_fn(df_train)\n\n\ndef eval_input_fn():\n    return input_fn(df_test)\n\n\nmodel_dir = '../rf_model_dir'\n\nhparams = tf.contrib.tensor_forest.python.tensor_forest.ForestHParams(\n    num_trees=10, max_nodes=1000, num_classes=2, num_features=4)\nclassifier = random_forest.TensorForestEstimator(hparams, model_dir=model_dir)\nclassifier.fit(input_fn=train_input_fn, steps=10)\nresults = classifier.evaluate(input_fn=eval_input_fn, steps=1)\nfor key in sorted(results):\n    print(\"%s: %s\" % (key, results[key]))\n</code></pre>\n<p>It will get the error:</p>\n<pre><code>Traceback (most recent call last):\n  File \"simple-tf-rf.py\", line 93, in &lt;module&gt;\n    classifier.fit(input_fn=train_input_fn, steps=10)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py\", line 264, in fit\n    max_steps=max_steps)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/python/util/deprecation.py\", line 280, in new_func\n    return func(*args, **kwargs)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 426, in fit\n    loss = self._train_model(input_fn=input_fn, hooks=hooks)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 934, in _train_model\n    model_fn_ops = self._call_legacy_get_train_ops(features, labels)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1003, in _call_legacy_get_t\nrain_ops\n    train_ops = self._get_train_ops(features, labels)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1162, in _get_train_ops\n    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1133, in _call_model_fn\n    model_fn_results = self._model_fn(features, labels, **kwargs)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py\", line 116, in _model_fn\n    graph_builder.inference_graph(features)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py\", line 444, in inference_graph\n    data_ops.ParseDataTensorOrDict(input_data))\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/python/ops/data_ops.py\", line 141, in ParseDataTensorOrDict\n    col_spec.size = data[k].get_shape()[1].value\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/tensor_shape.py\", line 502, in __getitem__\n    return self._dims[key]\nIndexError: list index out of range\n</code></pre>\n<p>and I replace:<br>\ncontinuous_cols = {k: tf.constant(df[k].values) for k in CONTINUOUS_COLUMNS} with<br>\ncontinuous_cols = {k: tf.expand_dims(tf.constant(df[k].values), 1) for k in CONTINUOUS_COLUMNS}</p>\n<p>It seems ok now!<br>\nIt may need to enhance this reshape problem with the process of input_fn</p>", "body_text": "@petrosmol  Thanks! It seems ok now. And In a randomforest test case as follow:\nimport tensorflow as tf\nimport pandas as pd\nfrom tensorflow.contrib.tensor_forest.client import random_forest\n\ndetailed_occupation_recode = tf.contrib.layers.sparse_column_with_hash_bucket(\n    column_name='detailed_occupation_recode', hash_bucket_size=1000)\neducation = tf.contrib.layers.sparse_column_with_hash_bucket(\n    column_name='education', hash_bucket_size=1000)\n# Continuous base columns\nage = tf.contrib.layers.real_valued_column('age')\nwage_per_hour = tf.contrib.layers.real_valued_column('wage_per_hour')\n\ncolumns = [\n    'age', 'detailed_occupation_recode', 'education', 'wage_per_hour', 'label'\n]\nFEATURE_COLUMNS = [\n    # age, age_buckets, class_of_worker, detailed_industry_recode,\n    age,\n    detailed_occupation_recode,\n    education,\n    wage_per_hour\n]\n\nLABEL_COLUMN = 'label'\n\nCONTINUOUS_COLUMNS = ['age', 'wage_per_hour']\n\nCATEGORICAL_COLUMNS = ['detailed_occupation_recode', 'education']\n\ndf_train = pd.DataFrame(\n    [[12, '12', '7th and 8th grade', 40, '- 50000'],\n     [40, '45', '7th and 8th grade', 40, '50000+'],\n     [50, '50', '10th grade', 40, '50000+'],\n     [60, '30', '7th and 8th grade', 40, '- 50000']],\n    columns=[\n        'age', 'detailed_occupation_recode', 'education', 'wage_per_hour',\n        'label'\n    ])\n\ndf_test = pd.DataFrame(\n    [[12, '12', '7th and 8th grade', 40, '- 50000'],\n     [40, '45', '7th and 8th grade', 40, '50000+'],\n     [50, '50', '10th grade', 40, '50000+'],\n     [60, '30', '7th and 8th grade', 40, '- 50000']],\n    columns=[\n        'age', 'detailed_occupation_recode', 'education', 'wage_per_hour',\n        'label'\n    ])\ndf_train[LABEL_COLUMN] = (\n    df_train[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)\ndf_test[LABEL_COLUMN] = (\n    df_test[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)\ndtypess = df_train.dtypes\n\nprint df_train\nprint df_test\n\n\ndef input_fn(df):\n    # continuous_cols = {\n    #     k: tf.expand_dims(tf.constant(df[k].values), 1)\n    #     for k in CONTINUOUS_COLUMNS\n    # }\n    continuous_cols = {\n        k: tf.constant(df[k].values)\n        for k in CONTINUOUS_COLUMNS\n    }\n    categorical_cols = {\n        k: tf.SparseTensor(\n            indices=[[i, 0] for i in range(df[k].size)],\n            values=df[k].values,\n            dense_shape=[df[k].size, 1])\n        for k in CATEGORICAL_COLUMNS\n    }\n    feature_cols = dict(continuous_cols.items() + categorical_cols.items())\n    label = tf.constant(df[LABEL_COLUMN].values)\n    return feature_cols, label\n\n\ndef train_input_fn():\n    return input_fn(df_train)\n\n\ndef eval_input_fn():\n    return input_fn(df_test)\n\n\nmodel_dir = '../rf_model_dir'\n\nhparams = tf.contrib.tensor_forest.python.tensor_forest.ForestHParams(\n    num_trees=10, max_nodes=1000, num_classes=2, num_features=4)\nclassifier = random_forest.TensorForestEstimator(hparams, model_dir=model_dir)\nclassifier.fit(input_fn=train_input_fn, steps=10)\nresults = classifier.evaluate(input_fn=eval_input_fn, steps=1)\nfor key in sorted(results):\n    print(\"%s: %s\" % (key, results[key]))\n\nIt will get the error:\nTraceback (most recent call last):\n  File \"simple-tf-rf.py\", line 93, in <module>\n    classifier.fit(input_fn=train_input_fn, steps=10)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py\", line 264, in fit\n    max_steps=max_steps)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/python/util/deprecation.py\", line 280, in new_func\n    return func(*args, **kwargs)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 426, in fit\n    loss = self._train_model(input_fn=input_fn, hooks=hooks)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 934, in _train_model\n    model_fn_ops = self._call_legacy_get_train_ops(features, labels)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1003, in _call_legacy_get_t\nrain_ops\n    train_ops = self._get_train_ops(features, labels)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1162, in _get_train_ops\n    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1133, in _call_model_fn\n    model_fn_results = self._model_fn(features, labels, **kwargs)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py\", line 116, in _model_fn\n    graph_builder.inference_graph(features)\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py\", line 444, in inference_graph\n    data_ops.ParseDataTensorOrDict(input_data))\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/python/ops/data_ops.py\", line 141, in ParseDataTensorOrDict\n    col_spec.size = data[k].get_shape()[1].value\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/tensor_shape.py\", line 502, in __getitem__\n    return self._dims[key]\nIndexError: list index out of range\n\nand I replace:\ncontinuous_cols = {k: tf.constant(df[k].values) for k in CONTINUOUS_COLUMNS} with\ncontinuous_cols = {k: tf.expand_dims(tf.constant(df[k].values), 1) for k in CONTINUOUS_COLUMNS}\nIt seems ok now!\nIt may need to enhance this reshape problem with the process of input_fn", "body": "@petrosmol  Thanks! It seems ok now. And In a randomforest test case as follow:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport pandas as pd\r\nfrom tensorflow.contrib.tensor_forest.client import random_forest\r\n\r\ndetailed_occupation_recode = tf.contrib.layers.sparse_column_with_hash_bucket(\r\n    column_name='detailed_occupation_recode', hash_bucket_size=1000)\r\neducation = tf.contrib.layers.sparse_column_with_hash_bucket(\r\n    column_name='education', hash_bucket_size=1000)\r\n# Continuous base columns\r\nage = tf.contrib.layers.real_valued_column('age')\r\nwage_per_hour = tf.contrib.layers.real_valued_column('wage_per_hour')\r\n\r\ncolumns = [\r\n    'age', 'detailed_occupation_recode', 'education', 'wage_per_hour', 'label'\r\n]\r\nFEATURE_COLUMNS = [\r\n    # age, age_buckets, class_of_worker, detailed_industry_recode,\r\n    age,\r\n    detailed_occupation_recode,\r\n    education,\r\n    wage_per_hour\r\n]\r\n\r\nLABEL_COLUMN = 'label'\r\n\r\nCONTINUOUS_COLUMNS = ['age', 'wage_per_hour']\r\n\r\nCATEGORICAL_COLUMNS = ['detailed_occupation_recode', 'education']\r\n\r\ndf_train = pd.DataFrame(\r\n    [[12, '12', '7th and 8th grade', 40, '- 50000'],\r\n     [40, '45', '7th and 8th grade', 40, '50000+'],\r\n     [50, '50', '10th grade', 40, '50000+'],\r\n     [60, '30', '7th and 8th grade', 40, '- 50000']],\r\n    columns=[\r\n        'age', 'detailed_occupation_recode', 'education', 'wage_per_hour',\r\n        'label'\r\n    ])\r\n\r\ndf_test = pd.DataFrame(\r\n    [[12, '12', '7th and 8th grade', 40, '- 50000'],\r\n     [40, '45', '7th and 8th grade', 40, '50000+'],\r\n     [50, '50', '10th grade', 40, '50000+'],\r\n     [60, '30', '7th and 8th grade', 40, '- 50000']],\r\n    columns=[\r\n        'age', 'detailed_occupation_recode', 'education', 'wage_per_hour',\r\n        'label'\r\n    ])\r\ndf_train[LABEL_COLUMN] = (\r\n    df_train[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)\r\ndf_test[LABEL_COLUMN] = (\r\n    df_test[LABEL_COLUMN].apply(lambda x: '+' in x)).astype(int)\r\ndtypess = df_train.dtypes\r\n\r\nprint df_train\r\nprint df_test\r\n\r\n\r\ndef input_fn(df):\r\n    # continuous_cols = {\r\n    #     k: tf.expand_dims(tf.constant(df[k].values), 1)\r\n    #     for k in CONTINUOUS_COLUMNS\r\n    # }\r\n    continuous_cols = {\r\n        k: tf.constant(df[k].values)\r\n        for k in CONTINUOUS_COLUMNS\r\n    }\r\n    categorical_cols = {\r\n        k: tf.SparseTensor(\r\n            indices=[[i, 0] for i in range(df[k].size)],\r\n            values=df[k].values,\r\n            dense_shape=[df[k].size, 1])\r\n        for k in CATEGORICAL_COLUMNS\r\n    }\r\n    feature_cols = dict(continuous_cols.items() + categorical_cols.items())\r\n    label = tf.constant(df[LABEL_COLUMN].values)\r\n    return feature_cols, label\r\n\r\n\r\ndef train_input_fn():\r\n    return input_fn(df_train)\r\n\r\n\r\ndef eval_input_fn():\r\n    return input_fn(df_test)\r\n\r\n\r\nmodel_dir = '../rf_model_dir'\r\n\r\nhparams = tf.contrib.tensor_forest.python.tensor_forest.ForestHParams(\r\n    num_trees=10, max_nodes=1000, num_classes=2, num_features=4)\r\nclassifier = random_forest.TensorForestEstimator(hparams, model_dir=model_dir)\r\nclassifier.fit(input_fn=train_input_fn, steps=10)\r\nresults = classifier.evaluate(input_fn=eval_input_fn, steps=1)\r\nfor key in sorted(results):\r\n    print(\"%s: %s\" % (key, results[key]))\r\n```\r\nIt will get the error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"simple-tf-rf.py\", line 93, in <module>\r\n    classifier.fit(input_fn=train_input_fn, steps=10)\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py\", line 264, in fit\r\n    max_steps=max_steps)\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/python/util/deprecation.py\", line 280, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 426, in fit\r\n    loss = self._train_model(input_fn=input_fn, hooks=hooks)\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 934, in _train_model\r\n    model_fn_ops = self._call_legacy_get_train_ops(features, labels)\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1003, in _call_legacy_get_t\r\nrain_ops\r\n    train_ops = self._get_train_ops(features, labels)\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1162, in _get_train_ops\r\n    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1133, in _call_model_fn\r\n    model_fn_results = self._model_fn(features, labels, **kwargs)\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py\", line 116, in _model_fn\r\n    graph_builder.inference_graph(features)\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py\", line 444, in inference_graph\r\n    data_ops.ParseDataTensorOrDict(input_data))\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/contrib/tensor_forest/python/ops/data_ops.py\", line 141, in ParseDataTensorOrDict\r\n    col_spec.size = data[k].get_shape()[1].value\r\n  File \"/Users/burness/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/tensor_shape.py\", line 502, in __getitem__\r\n    return self._dims[key]\r\nIndexError: list index out of range\r\n```\r\nand I replace:\r\ncontinuous_cols = {k: tf.constant(df[k].values) for k in CONTINUOUS_COLUMNS} with\r\ncontinuous_cols = {k: tf.expand_dims(tf.constant(df[k].values), 1) for k in CONTINUOUS_COLUMNS}\r\n\r\nIt seems ok now!\r\nIt may need to enhance this reshape problem with the process of input_fn"}