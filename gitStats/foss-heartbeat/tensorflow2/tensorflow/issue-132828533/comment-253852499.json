{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/253852499", "html_url": "https://github.com/tensorflow/tensorflow/issues/1045#issuecomment-253852499", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1045", "id": 253852499, "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mzg1MjQ5OQ==", "user": {"login": "jlowin", "id": 153965, "node_id": "MDQ6VXNlcjE1Mzk2NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/153965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlowin", "html_url": "https://github.com/jlowin", "followers_url": "https://api.github.com/users/jlowin/followers", "following_url": "https://api.github.com/users/jlowin/following{/other_user}", "gists_url": "https://api.github.com/users/jlowin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlowin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlowin/subscriptions", "organizations_url": "https://api.github.com/users/jlowin/orgs", "repos_url": "https://api.github.com/users/jlowin/repos", "events_url": "https://api.github.com/users/jlowin/events{/privacy}", "received_events_url": "https://api.github.com/users/jlowin/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-14T16:32:19Z", "updated_at": "2016-10-14T16:32:19Z", "author_association": "NONE", "body_html": "<p>It feels very un-user-friendly to expect users to parse the documentation for a function that they may not even call directly (since it could be buried in a convenient utility function) while still having an <code>initialize_all_variables()</code> op that doesn't actually do what its name implies.</p>\n<p>On the other hand, I totally understand why there are times that you would want your variables to be excluded from the global <code>init_op</code> and having local variables makes sense in that context. Based on what I've learned here, I believe the problem in this case is that 1) we need to initialize <code>epochs</code> but 2) we don't want to restore <code>epochs</code> when the model is loaded because we want to be able to run the model!</p>\n<p>Is there a middle ground here? Maybe a way of marking a variable as not being restored? The whole issue feels to me like a very heavy-handed way of dancing around the problem.</p>", "body_text": "It feels very un-user-friendly to expect users to parse the documentation for a function that they may not even call directly (since it could be buried in a convenient utility function) while still having an initialize_all_variables() op that doesn't actually do what its name implies.\nOn the other hand, I totally understand why there are times that you would want your variables to be excluded from the global init_op and having local variables makes sense in that context. Based on what I've learned here, I believe the problem in this case is that 1) we need to initialize epochs but 2) we don't want to restore epochs when the model is loaded because we want to be able to run the model!\nIs there a middle ground here? Maybe a way of marking a variable as not being restored? The whole issue feels to me like a very heavy-handed way of dancing around the problem.", "body": "It feels very un-user-friendly to expect users to parse the documentation for a function that they may not even call directly (since it could be buried in a convenient utility function) while still having an `initialize_all_variables()` op that doesn't actually do what its name implies. \n\nOn the other hand, I totally understand why there are times that you would want your variables to be excluded from the global `init_op` and having local variables makes sense in that context. Based on what I've learned here, I believe the problem in this case is that 1) we need to initialize `epochs` but 2) we don't want to restore `epochs` when the model is loaded because we want to be able to run the model! \n\nIs there a middle ground here? Maybe a way of marking a variable as not being restored? The whole issue feels to me like a very heavy-handed way of dancing around the problem.\n"}