{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20831", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20831/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20831/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20831/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20831", "id": 341422745, "node_id": "MDU6SXNzdWUzNDE0MjI3NDU=", "number": 20831, "title": "[Feature request] Allow `tf.estimator.train_and_evaluate` to support chief and evaluator working with different `model_dir`", "user": {"login": "fanshiqing", "id": 3927162, "node_id": "MDQ6VXNlcjM5MjcxNjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3927162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanshiqing", "html_url": "https://github.com/fanshiqing", "followers_url": "https://api.github.com/users/fanshiqing/followers", "following_url": "https://api.github.com/users/fanshiqing/following{/other_user}", "gists_url": "https://api.github.com/users/fanshiqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanshiqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanshiqing/subscriptions", "organizations_url": "https://api.github.com/users/fanshiqing/orgs", "repos_url": "https://api.github.com/users/fanshiqing/repos", "events_url": "https://api.github.com/users/fanshiqing/events{/privacy}", "received_events_url": "https://api.github.com/users/fanshiqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-16T08:01:46Z", "updated_at": "2018-07-16T15:41:51Z", "closed_at": "2018-07-16T15:41:51Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes.</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Cent OS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4</li>\n<li><strong>Python version</strong>: 2.7.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>: NA</li>\n<li><strong>Exact command to reproduce</strong>: NA</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Currently <code>tf.estimator.train_and_evaluate</code> makes it easy to use an Estimator to perform both training and evaluation, possibly in a distributed environment.</p>\n<p>In my case, <code>evaluator</code> have to</p>\n<p>(1) read from chief worker's  <code>model_dir</code>,<br>\n(2) do some extra processing,<br>\n(3) generate <strong>new model_dir</strong> ,<br>\n(4) finally concrete evaluation is based on the <strong>new model_dir</strong>.</p>\n<p>However, <code>train_and_evaluate</code> only supports one estimator <strong>with single <code>model_dir</code></strong>,  i.e. <code>chief worker</code> and <code>evaluator</code> shares the same <code>checkpoint path</code>, which makes above requirements imcompatible. It would be ideal if we could perhaps pass more than one <code>model_dir</code> to train_and_evaluate to handle the above scenes.</p>\n<p>Or maybe there are some workarounds to deal with this problem?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes.\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Cent OS\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.4\nPython version: 2.7.5\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: NA\nGPU model and memory: NA\nExact command to reproduce: NA\n\nDescribe the problem\nCurrently tf.estimator.train_and_evaluate makes it easy to use an Estimator to perform both training and evaluation, possibly in a distributed environment.\nIn my case, evaluator have to\n(1) read from chief worker's  model_dir,\n(2) do some extra processing,\n(3) generate new model_dir ,\n(4) finally concrete evaluation is based on the new model_dir.\nHowever, train_and_evaluate only supports one estimator with single model_dir,  i.e. chief worker and evaluator shares the same checkpoint path, which makes above requirements imcompatible. It would be ideal if we could perhaps pass more than one model_dir to train_and_evaluate to handle the above scenes.\nOr maybe there are some workarounds to deal with this problem?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Cent OS\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.4\r\n- **Python version**: 2.7.5\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**: NA\r\n- **Exact command to reproduce**: NA\r\n\r\n### Describe the problem\r\nCurrently `tf.estimator.train_and_evaluate` makes it easy to use an Estimator to perform both training and evaluation, possibly in a distributed environment. \r\n\r\n In my case, `evaluator` have to \r\n\r\n  (1) read from chief worker's  `model_dir`,\r\n  (2) do some extra processing,\r\n  (3) generate **new model_dir** , \r\n  (4) finally concrete evaluation is based on the **new model_dir**. \r\n\r\nHowever, `train_and_evaluate` only supports one estimator **with single `model_dir`**,  i.e. `chief worker` and `evaluator` shares the same `checkpoint path`, which makes above requirements imcompatible. It would be ideal if we could perhaps pass more than one `model_dir` to train_and_evaluate to handle the above scenes.\r\n\r\nOr maybe there are some workarounds to deal with this problem?"}