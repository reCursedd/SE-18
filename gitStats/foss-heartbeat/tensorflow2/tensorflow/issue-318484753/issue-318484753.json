{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18934", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18934/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18934/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18934/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18934", "id": 318484753, "node_id": "MDU6SXNzdWUzMTg0ODQ3NTM=", "number": 18934, "title": "Patch Request: Move CROSSTOOL_nvcc.tpl to c++14", "user": {"login": "thomasyoung", "id": 583132, "node_id": "MDQ6VXNlcjU4MzEzMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/583132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyoung", "html_url": "https://github.com/thomasyoung", "followers_url": "https://api.github.com/users/thomasyoung/followers", "following_url": "https://api.github.com/users/thomasyoung/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyoung/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyoung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyoung/subscriptions", "organizations_url": "https://api.github.com/users/thomasyoung/orgs", "repos_url": "https://api.github.com/users/thomasyoung/repos", "events_url": "https://api.github.com/users/thomasyoung/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyoung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-04-27T17:12:27Z", "updated_at": "2018-11-14T19:17:57Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>CUDA9.0 is already supporting C++14 now:<br>\n<a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cpp14\" rel=\"nofollow\">https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cpp14</a></p>\n<pre><code>diff --git a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl b/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\nindex 05290d6..237d001 100644\n--- a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n+++ b/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n@@ -51,9 +51,9 @@ toolchain {\n   # path, combined with the rest of our Bazel configuration causes our\n   # compilation to use those files.\n   tool_path { name: \"gcc\" path: \"clang/bin/crosstool_wrapper_driver_is_not_gcc\" }\n-  # Use \"-std=c++11\" for nvcc. For consistency, force both the host compiler\n-  # and the device compiler to use \"-std=c++11\".\n-  cxx_flag: \"-std=c++11\"\n+  # Use \"-std=c++14\" for nvcc. For consistency, force both the host compiler\n+  # and the device compiler to use \"-std=c++14\".\n+  cxx_flag: \"-std=c++14\"\n   linker_flag: \"-Wl,-no-as-needed\"\n   linker_flag: \"-lstdc++\"\n   linker_flag: \"-B/usr/bin/\"\ndiff --git a/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl b/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\nindex 2558f46..5b1e65c 100755\n--- a/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n+++ b/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n@@ -167,7 +167,7 @@ def InvokeNvcc(argv, log=False):\n   undefines = ''.join([' -U' + define for define in undefines])\n   std_options = GetOptionValue(argv, 'std')\n   # currently only c++11 is supported by Cuda 7.0 std argument\n-  nvcc_allowed_std_options = [\"c++11\"]\n+  nvcc_allowed_std_options = [\"c++11\",\"c++14\"]\n   std_options = ''.join([' -std=' + define\n       for define in std_options if define in nvcc_allowed_std_options])\n</code></pre>", "body_text": "CUDA9.0 is already supporting C++14 now:\nhttps://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cpp14\ndiff --git a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl b/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\nindex 05290d6..237d001 100644\n--- a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n+++ b/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n@@ -51,9 +51,9 @@ toolchain {\n   # path, combined with the rest of our Bazel configuration causes our\n   # compilation to use those files.\n   tool_path { name: \"gcc\" path: \"clang/bin/crosstool_wrapper_driver_is_not_gcc\" }\n-  # Use \"-std=c++11\" for nvcc. For consistency, force both the host compiler\n-  # and the device compiler to use \"-std=c++11\".\n-  cxx_flag: \"-std=c++11\"\n+  # Use \"-std=c++14\" for nvcc. For consistency, force both the host compiler\n+  # and the device compiler to use \"-std=c++14\".\n+  cxx_flag: \"-std=c++14\"\n   linker_flag: \"-Wl,-no-as-needed\"\n   linker_flag: \"-lstdc++\"\n   linker_flag: \"-B/usr/bin/\"\ndiff --git a/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl b/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\nindex 2558f46..5b1e65c 100755\n--- a/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n+++ b/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n@@ -167,7 +167,7 @@ def InvokeNvcc(argv, log=False):\n   undefines = ''.join([' -U' + define for define in undefines])\n   std_options = GetOptionValue(argv, 'std')\n   # currently only c++11 is supported by Cuda 7.0 std argument\n-  nvcc_allowed_std_options = [\"c++11\"]\n+  nvcc_allowed_std_options = [\"c++11\",\"c++14\"]\n   std_options = ''.join([' -std=' + define\n       for define in std_options if define in nvcc_allowed_std_options])", "body": "CUDA9.0 is already supporting C++14 now:\r\nhttps://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cpp14\r\n\r\n```\r\ndiff --git a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl b/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\r\nindex 05290d6..237d001 100644\r\n--- a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\r\n+++ b/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\r\n@@ -51,9 +51,9 @@ toolchain {\r\n   # path, combined with the rest of our Bazel configuration causes our\r\n   # compilation to use those files.\r\n   tool_path { name: \"gcc\" path: \"clang/bin/crosstool_wrapper_driver_is_not_gcc\" }\r\n-  # Use \"-std=c++11\" for nvcc. For consistency, force both the host compiler\r\n-  # and the device compiler to use \"-std=c++11\".\r\n-  cxx_flag: \"-std=c++11\"\r\n+  # Use \"-std=c++14\" for nvcc. For consistency, force both the host compiler\r\n+  # and the device compiler to use \"-std=c++14\".\r\n+  cxx_flag: \"-std=c++14\"\r\n   linker_flag: \"-Wl,-no-as-needed\"\r\n   linker_flag: \"-lstdc++\"\r\n   linker_flag: \"-B/usr/bin/\"\r\ndiff --git a/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl b/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\r\nindex 2558f46..5b1e65c 100755\r\n--- a/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\r\n+++ b/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\r\n@@ -167,7 +167,7 @@ def InvokeNvcc(argv, log=False):\r\n   undefines = ''.join([' -U' + define for define in undefines])\r\n   std_options = GetOptionValue(argv, 'std')\r\n   # currently only c++11 is supported by Cuda 7.0 std argument\r\n-  nvcc_allowed_std_options = [\"c++11\"]\r\n+  nvcc_allowed_std_options = [\"c++11\",\"c++14\"]\r\n   std_options = ''.join([' -std=' + define\r\n       for define in std_options if define in nvcc_allowed_std_options])\r\n```"}