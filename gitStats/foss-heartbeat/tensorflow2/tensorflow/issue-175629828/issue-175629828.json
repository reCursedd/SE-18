{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4259", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4259/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4259/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4259/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4259", "id": 175629828, "node_id": "MDU6SXNzdWUxNzU2Mjk4Mjg=", "number": 4259, "title": "Command line processor fails silently on mistyped args", "user": {"login": "mkolod", "id": 476135, "node_id": "MDQ6VXNlcjQ3NjEzNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/476135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkolod", "html_url": "https://github.com/mkolod", "followers_url": "https://api.github.com/users/mkolod/followers", "following_url": "https://api.github.com/users/mkolod/following{/other_user}", "gists_url": "https://api.github.com/users/mkolod/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkolod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkolod/subscriptions", "organizations_url": "https://api.github.com/users/mkolod/orgs", "repos_url": "https://api.github.com/users/mkolod/repos", "events_url": "https://api.github.com/users/mkolod/events{/privacy}", "received_events_url": "https://api.github.com/users/mkolod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-07T23:23:10Z", "updated_at": "2016-09-07T23:33:25Z", "closed_at": "2016-09-07T23:33:25Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>Problem:</h3>\n<p>The command line processor doesn't raise exceptions when the existing flags that are in common use throughout TensorFlow (at the very least by convention) are mistyped. For example, let's take</p>\n<pre><code>--num_gpus\n</code></pre>\n<p>which is frequently encountered, e.g. in Inception v3, CIFAR-10, etc. If I type a single dash instead of two, the CLI arg processor just picks up whatever the default value is defined in my app and silently ignores the misformed CLI argument. I realize that one can't restrict the args that are supported because they are pulled from sys.argv and there may be other args passed on to the user's app code, so it's not the same level of strictness as say in processing CLI switches for Unix apps which have a fixed set of options. However, perhaps the solution is to look for small typos such as Damerau-Levenshtein distance of 1 (one deletion, insertion, substitution or transposition, with 1 transposition still treated as edit distance of 1) from the arg specified as recognizable in FLAGS that should raise an exception unless the users forces literal interpretation of the args?</p>\n<h3>Affected versions:</h3>\n<p>latest 0.10, probably master top of tree and others as well</p>", "body_text": "Problem:\nThe command line processor doesn't raise exceptions when the existing flags that are in common use throughout TensorFlow (at the very least by convention) are mistyped. For example, let's take\n--num_gpus\n\nwhich is frequently encountered, e.g. in Inception v3, CIFAR-10, etc. If I type a single dash instead of two, the CLI arg processor just picks up whatever the default value is defined in my app and silently ignores the misformed CLI argument. I realize that one can't restrict the args that are supported because they are pulled from sys.argv and there may be other args passed on to the user's app code, so it's not the same level of strictness as say in processing CLI switches for Unix apps which have a fixed set of options. However, perhaps the solution is to look for small typos such as Damerau-Levenshtein distance of 1 (one deletion, insertion, substitution or transposition, with 1 transposition still treated as edit distance of 1) from the arg specified as recognizable in FLAGS that should raise an exception unless the users forces literal interpretation of the args?\nAffected versions:\nlatest 0.10, probably master top of tree and others as well", "body": "### Problem:\n\nThe command line processor doesn't raise exceptions when the existing flags that are in common use throughout TensorFlow (at the very least by convention) are mistyped. For example, let's take\n\n```\n--num_gpus\n```\n\nwhich is frequently encountered, e.g. in Inception v3, CIFAR-10, etc. If I type a single dash instead of two, the CLI arg processor just picks up whatever the default value is defined in my app and silently ignores the misformed CLI argument. I realize that one can't restrict the args that are supported because they are pulled from sys.argv and there may be other args passed on to the user's app code, so it's not the same level of strictness as say in processing CLI switches for Unix apps which have a fixed set of options. However, perhaps the solution is to look for small typos such as Damerau-Levenshtein distance of 1 (one deletion, insertion, substitution or transposition, with 1 transposition still treated as edit distance of 1) from the arg specified as recognizable in FLAGS that should raise an exception unless the users forces literal interpretation of the args?\n### Affected versions:\n\nlatest 0.10, probably master top of tree and others as well\n"}