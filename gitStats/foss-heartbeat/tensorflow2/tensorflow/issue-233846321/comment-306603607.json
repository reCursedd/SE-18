{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/306603607", "html_url": "https://github.com/tensorflow/tensorflow/issues/10454#issuecomment-306603607", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10454", "id": 306603607, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjYwMzYwNw==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-06T20:14:44Z", "updated_at": "2017-06-06T20:14:44Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6039149\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/shashank734\">@shashank734</a> : Alas, at this time, any ops defined in the Python <code>tf.contrib</code> namespace are not supported in the release binaries of other languages. This stems from the fact that these ops are implemented in their own binaries (in their own shared libraries) and we currently do not support loading custom ops.</p>\n<p>That's something we're looking into (making custom operations in <code>tf.contrib</code> available to other binary distributions), but there is no timeline on that.</p>\n<p>In the mean time, if you're willing to build from source, I can suggest a workaround, which would involve compiling from source. Something like:</p>\n<ol>\n<li>Checkout the source and install bazel:</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>git checkout github.com/tensorflow/tensorflow\n<span class=\"pl-c1\">cd</span> tensorflow\ngit checkout r1.2 <span class=\"pl-c\"><span class=\"pl-c\">#</span> Just so that you're in the release branch</span>\n\nbrew install bazel</pre></div>\n<ol start=\"2\">\n<li>Setup the build system to statically link the contrib ops into the JNI library by adding:</li>\n</ol>\n<pre><code>        \"//tensorflow/contrib/tensor_forest:tensor_forest_ops_op_lib\",\n        \"//tensorflow/contrib/tensor_forest:tensor_forest_kernels\",\n</code></pre>\n<p>to the <code>deps</code> section of the <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/java/BUILD#L163\"><code>libtensorflow_jni.so</code> build target</a></p>\n<ol start=\"3\">\n<li>Build the JNI library:</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>yes <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">|</span> ./configure\nbazel build -c opt //tensorflow/java:libtensorflow_jni.so</pre></div>\n<p>Now, you'd want to make this library instead of the one packaged in the release binary distributions. You can do that by adding <code>-Djava.library.path=bazel-bin/tensorflow/java</code> to the <code>java</code> command.</p>\n<p>Do let us know if this works or not.</p>\n<p>Hope that helps.</p>\n<p>(FYI <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=577277\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinwicke\">@martinwicke</a> )</p>", "body_text": "@shashank734 : Alas, at this time, any ops defined in the Python tf.contrib namespace are not supported in the release binaries of other languages. This stems from the fact that these ops are implemented in their own binaries (in their own shared libraries) and we currently do not support loading custom ops.\nThat's something we're looking into (making custom operations in tf.contrib available to other binary distributions), but there is no timeline on that.\nIn the mean time, if you're willing to build from source, I can suggest a workaround, which would involve compiling from source. Something like:\n\nCheckout the source and install bazel:\n\ngit checkout github.com/tensorflow/tensorflow\ncd tensorflow\ngit checkout r1.2 # Just so that you're in the release branch\n\nbrew install bazel\n\nSetup the build system to statically link the contrib ops into the JNI library by adding:\n\n        \"//tensorflow/contrib/tensor_forest:tensor_forest_ops_op_lib\",\n        \"//tensorflow/contrib/tensor_forest:tensor_forest_kernels\",\n\nto the deps section of the libtensorflow_jni.so build target\n\nBuild the JNI library:\n\nyes \"\" | ./configure\nbazel build -c opt //tensorflow/java:libtensorflow_jni.so\nNow, you'd want to make this library instead of the one packaged in the release binary distributions. You can do that by adding -Djava.library.path=bazel-bin/tensorflow/java to the java command.\nDo let us know if this works or not.\nHope that helps.\n(FYI @allenlavoie @girving @martinwicke )", "body": "@shashank734 : Alas, at this time, any ops defined in the Python `tf.contrib` namespace are not supported in the release binaries of other languages. This stems from the fact that these ops are implemented in their own binaries (in their own shared libraries) and we currently do not support loading custom ops.\r\n\r\nThat's something we're looking into (making custom operations in `tf.contrib` available to other binary distributions), but there is no timeline on that.\r\n\r\nIn the mean time, if you're willing to build from source, I can suggest a workaround, which would involve compiling from source. Something like:\r\n\r\n1. Checkout the source and install bazel:\r\n\r\n```sh\r\ngit checkout github.com/tensorflow/tensorflow\r\ncd tensorflow\r\ngit checkout r1.2 # Just so that you're in the release branch\r\n\r\nbrew install bazel\r\n```\r\n\r\n2. Setup the build system to statically link the contrib ops into the JNI library by adding:\r\n\r\n```\r\n        \"//tensorflow/contrib/tensor_forest:tensor_forest_ops_op_lib\",\r\n        \"//tensorflow/contrib/tensor_forest:tensor_forest_kernels\",\r\n```\r\n\r\nto the `deps` section of the [`libtensorflow_jni.so` build target](https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/java/BUILD#L163)\r\n\r\n3.  Build the JNI library:\r\n\r\n```sh\r\nyes \"\" | ./configure\r\nbazel build -c opt //tensorflow/java:libtensorflow_jni.so\r\n```\r\n\r\nNow, you'd want to make this library instead of the one packaged in the release binary distributions. You can do that by adding `-Djava.library.path=bazel-bin/tensorflow/java` to the `java` command.\r\n\r\nDo let us know if this works or not.\r\n\r\nHope that helps.\r\n\r\n(FYI @allenlavoie @girving @martinwicke )\r\n\r\n"}