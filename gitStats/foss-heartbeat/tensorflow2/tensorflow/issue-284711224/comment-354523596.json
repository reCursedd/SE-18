{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/354523596", "html_url": "https://github.com/tensorflow/tensorflow/pull/15654#issuecomment-354523596", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15654", "id": 354523596, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDUyMzU5Ng==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-30T02:53:50Z", "updated_at": "2017-12-30T02:53:50Z", "author_association": "MEMBER", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a>. The PR tries to handle two cases. One is <code>axis = nil</code> and another is axis is not nil (<code>0, 1, 2, etc</code>).</p>\n<p>However, the <code>Input</code> field does not have a way to handle <code>not exist</code> case. (Ref <a href=\"https://stackoverflow.com/questions/42754965/marking-input-as-optional-in-tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/42754965/marking-input-as-optional-in-tensorflow</a>).</p>\n<p>So this PR tries to use <code>axis = []</code> to represent <code>axis = nil</code> and use <code>axis =[0]</code> (one-element array) to represent <code>axis = 0</code>.</p>\n<p>I think alternatively there are some other ways to simplify:</p>\n<ol>\n<li>We could use <code>Attr</code> for <code>axis</code> then it might be possible to have a <code>not exist</code> case.</li>\n<li>We could create two Ops, one for <code>UniqueOp</code> and another for <code>UniqueWithAxisOp</code> so that axis = None could be routed to <code>UniqueOp</code> and axis = 0 could be routed to  <code>UniqueWithAxisOp</code>.</li>\n</ol>\n<p>Not sure which way is the best. Maybe we could use <code>Attr</code> instead.</p>", "body_text": "Thanks @drpngx. The PR tries to handle two cases. One is axis = nil and another is axis is not nil (0, 1, 2, etc).\nHowever, the Input field does not have a way to handle not exist case. (Ref https://stackoverflow.com/questions/42754965/marking-input-as-optional-in-tensorflow).\nSo this PR tries to use axis = [] to represent axis = nil and use axis =[0] (one-element array) to represent axis = 0.\nI think alternatively there are some other ways to simplify:\n\nWe could use Attr for axis then it might be possible to have a not exist case.\nWe could create two Ops, one for UniqueOp and another for UniqueWithAxisOp so that axis = None could be routed to UniqueOp and axis = 0 could be routed to  UniqueWithAxisOp.\n\nNot sure which way is the best. Maybe we could use Attr instead.", "body": "Thanks @drpngx. The PR tries to handle two cases. One is `axis = nil` and another is axis is not nil (`0, 1, 2, etc`).\r\n\r\nHowever, the `Input` field does not have a way to handle `not exist` case. (Ref https://stackoverflow.com/questions/42754965/marking-input-as-optional-in-tensorflow).\r\n\r\nSo this PR tries to use `axis = []` to represent `axis = nil` and use `axis =[0]` (one-element array) to represent `axis = 0`.\r\n\r\nI think alternatively there are some other ways to simplify:\r\n1. We could use `Attr` for `axis` then it might be possible to have a `not exist` case.\r\n2. We could create two Ops, one for `UniqueOp` and another for `UniqueWithAxisOp` so that axis = None could be routed to `UniqueOp` and axis = 0 could be routed to  `UniqueWithAxisOp`.\r\n\r\nNot sure which way is the best. Maybe we could use `Attr` instead. \r\n"}