{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/155159240", "pull_request_review_id": 81430437, "id": 155159240, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTE1OTI0MA==", "diff_hunk": "@@ -38,6 +38,7 @@ typedef float V8F32AVX __attribute__((__vector_size__(32)));\n \n extern \"C\" {\n \n+#ifdef __AVX__", "path": "tensorflow/compiler/xla/service/cpu/cpu_runtime_avx.h", "position": 4, "original_position": 4, "commit_id": "dcd7431b6d0f4681941860b6b20c3edfd618035b", "original_commit_id": "c495089d3c46d7e7a8008d6c673d820d9061eaf4", "user": {"login": "powderluv", "id": 74956, "node_id": "MDQ6VXNlcjc0OTU2", "avatar_url": "https://avatars1.githubusercontent.com/u/74956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powderluv", "html_url": "https://github.com/powderluv", "followers_url": "https://api.github.com/users/powderluv/followers", "following_url": "https://api.github.com/users/powderluv/following{/other_user}", "gists_url": "https://api.github.com/users/powderluv/gists{/gist_id}", "starred_url": "https://api.github.com/users/powderluv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powderluv/subscriptions", "organizations_url": "https://api.github.com/users/powderluv/orgs", "repos_url": "https://api.github.com/users/powderluv/repos", "events_url": "https://api.github.com/users/powderluv/events{/privacy}", "received_events_url": "https://api.github.com/users/powderluv/received_events", "type": "User", "site_admin": false}, "body": "Yeah weak links are weird with clang on OSX. \r\n\r\nHere is a reduced test case:\r\n```\r\n/* weaklink.c */\r\n#include <stdio.h>\r\nint weakfn() __attribute__((weak));\r\n\r\n// Uncomment next line to test a strong link\r\n//int weakfn() { return 0xCAFE; }\r\n\r\nint main()\r\n{\r\n    if (weakfn) {\r\n        printf (\"Weak link found.. 0x%x\\n\", weakfn());\r\n        return weakfn();\r\n    } else {\r\n        printf (\"No Weak link found..\");\r\n        return 0;\r\n    }\r\n}\r\n```\r\nThe above will work well with gcc or clang on linux but will fail with clang on OSX (both Apple's and clang upstream) with the following error:\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"_weakfn\", referenced from:\r\n      _main in weaklink-4baf7d.o\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation).\r\n```\r\nOur compile currently also fails with the same kind of message:\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"__xla_cpu_runtime_ExpV8F32AVX(float vector[8])\", referenced from:\r\n      xla::cpu::SimpleOrcJIT::SimpleOrcJIT(llvm::TargetOptions const&, llvm::CodeGenOpt::Level, bool, bool, bool, std::__1::function<tensorflow::Status (llvm::Module const&)>, std::__1::function<tensorflow::Status (llvm::Module const&)>) in libsimple_orc_jit.a(simple_orc_jit.o)\r\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\r\n  \"__xla_cpu_runtime_LogV8F32AVX(float vector[8])\", referenced from:\r\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\r\n  \"___xla_cpu_runtime_ExpV4F32NEON\", referenced from:\r\n      xla::cpu::SimpleOrcJIT::SimpleOrcJIT(llvm::TargetOptions const&, llvm::CodeGenOpt::Level, bool, bool, bool, std::__1::function<tensorflow::Status (llvm::Module const&)>, std::__1::function<tensorflow::Status (llvm::Module const&)>) in libsimple_orc_jit.a(simple_orc_jit.o)\r\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\r\n  \"___xla_cpu_runtime_LogV4F32NEON\", referenced from:\r\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nTarget //tensorflow/compiler/aot:tfcompile failed to build\r\n```\r\n\r\nSo I wrapped the registrations in the header file with \\_\\_AVX\\_\\_ and friends. Open to any other way to solve it. \r\n\r\n", "created_at": "2017-12-06T07:02:48Z", "updated_at": "2017-12-07T01:30:50Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14893#discussion_r155159240", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14893", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/155159240"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14893#discussion_r155159240"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14893"}}, "body_html": "<p>Yeah weak links are weird with clang on OSX.</p>\n<p>Here is a reduced test case:</p>\n<pre><code>/* weaklink.c */\n#include &lt;stdio.h&gt;\nint weakfn() __attribute__((weak));\n\n// Uncomment next line to test a strong link\n//int weakfn() { return 0xCAFE; }\n\nint main()\n{\n    if (weakfn) {\n        printf (\"Weak link found.. 0x%x\\n\", weakfn());\n        return weakfn();\n    } else {\n        printf (\"No Weak link found..\");\n        return 0;\n    }\n}\n</code></pre>\n<p>The above will work well with gcc or clang on linux but will fail with clang on OSX (both Apple's and clang upstream) with the following error:</p>\n<pre><code>Undefined symbols for architecture x86_64:\n  \"_weakfn\", referenced from:\n      _main in weaklink-4baf7d.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation).\n</code></pre>\n<p>Our compile currently also fails with the same kind of message:</p>\n<pre><code>Undefined symbols for architecture x86_64:\n  \"__xla_cpu_runtime_ExpV8F32AVX(float vector[8])\", referenced from:\n      xla::cpu::SimpleOrcJIT::SimpleOrcJIT(llvm::TargetOptions const&amp;, llvm::CodeGenOpt::Level, bool, bool, bool, std::__1::function&lt;tensorflow::Status (llvm::Module const&amp;)&gt;, std::__1::function&lt;tensorflow::Status (llvm::Module const&amp;)&gt;) in libsimple_orc_jit.a(simple_orc_jit.o)\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\n  \"__xla_cpu_runtime_LogV8F32AVX(float vector[8])\", referenced from:\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\n  \"___xla_cpu_runtime_ExpV4F32NEON\", referenced from:\n      xla::cpu::SimpleOrcJIT::SimpleOrcJIT(llvm::TargetOptions const&amp;, llvm::CodeGenOpt::Level, bool, bool, bool, std::__1::function&lt;tensorflow::Status (llvm::Module const&amp;)&gt;, std::__1::function&lt;tensorflow::Status (llvm::Module const&amp;)&gt;) in libsimple_orc_jit.a(simple_orc_jit.o)\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\n  \"___xla_cpu_runtime_LogV4F32NEON\", referenced from:\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nTarget //tensorflow/compiler/aot:tfcompile failed to build\n</code></pre>\n<p>So I wrapped the registrations in the header file with __AVX__ and friends. Open to any other way to solve it.</p>", "body_text": "Yeah weak links are weird with clang on OSX.\nHere is a reduced test case:\n/* weaklink.c */\n#include <stdio.h>\nint weakfn() __attribute__((weak));\n\n// Uncomment next line to test a strong link\n//int weakfn() { return 0xCAFE; }\n\nint main()\n{\n    if (weakfn) {\n        printf (\"Weak link found.. 0x%x\\n\", weakfn());\n        return weakfn();\n    } else {\n        printf (\"No Weak link found..\");\n        return 0;\n    }\n}\n\nThe above will work well with gcc or clang on linux but will fail with clang on OSX (both Apple's and clang upstream) with the following error:\nUndefined symbols for architecture x86_64:\n  \"_weakfn\", referenced from:\n      _main in weaklink-4baf7d.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation).\n\nOur compile currently also fails with the same kind of message:\nUndefined symbols for architecture x86_64:\n  \"__xla_cpu_runtime_ExpV8F32AVX(float vector[8])\", referenced from:\n      xla::cpu::SimpleOrcJIT::SimpleOrcJIT(llvm::TargetOptions const&, llvm::CodeGenOpt::Level, bool, bool, bool, std::__1::function<tensorflow::Status (llvm::Module const&)>, std::__1::function<tensorflow::Status (llvm::Module const&)>) in libsimple_orc_jit.a(simple_orc_jit.o)\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\n  \"__xla_cpu_runtime_LogV8F32AVX(float vector[8])\", referenced from:\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\n  \"___xla_cpu_runtime_ExpV4F32NEON\", referenced from:\n      xla::cpu::SimpleOrcJIT::SimpleOrcJIT(llvm::TargetOptions const&, llvm::CodeGenOpt::Level, bool, bool, bool, std::__1::function<tensorflow::Status (llvm::Module const&)>, std::__1::function<tensorflow::Status (llvm::Module const&)>) in libsimple_orc_jit.a(simple_orc_jit.o)\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\n  \"___xla_cpu_runtime_LogV4F32NEON\", referenced from:\n      xla::cpu::(anonymous namespace)::RegisterKnownJITSymbols() in libsimple_orc_jit.a(simple_orc_jit.o)\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nTarget //tensorflow/compiler/aot:tfcompile failed to build\n\nSo I wrapped the registrations in the header file with __AVX__ and friends. Open to any other way to solve it.", "in_reply_to_id": 155131639}