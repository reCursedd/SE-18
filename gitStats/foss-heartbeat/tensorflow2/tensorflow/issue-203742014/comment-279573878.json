{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/279573878", "html_url": "https://github.com/tensorflow/tensorflow/issues/7116#issuecomment-279573878", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7116", "id": 279573878, "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTU3Mzg3OA==", "user": {"login": "fenrus75", "id": 1302037, "node_id": "MDQ6VXNlcjEzMDIwMzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1302037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fenrus75", "html_url": "https://github.com/fenrus75", "followers_url": "https://api.github.com/users/fenrus75/followers", "following_url": "https://api.github.com/users/fenrus75/following{/other_user}", "gists_url": "https://api.github.com/users/fenrus75/gists{/gist_id}", "starred_url": "https://api.github.com/users/fenrus75/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fenrus75/subscriptions", "organizations_url": "https://api.github.com/users/fenrus75/orgs", "repos_url": "https://api.github.com/users/fenrus75/repos", "events_url": "https://api.github.com/users/fenrus75/events{/privacy}", "received_events_url": "https://api.github.com/users/fenrus75/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-14T00:58:59Z", "updated_at": "2017-02-14T00:58:59Z", "author_association": "NONE", "body_html": "<p>$ diff -u ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h.org ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h<br>\n--- ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h.org     2017-02-14 00:58:37.005624958 +0000<br>\n+++ ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h 2017-02-14 00:58:42.942727455 +0000<br>\n@@ -34,6 +34,13 @@<br>\nPacket16q32i(__m512i val) : val(val) {}<br>\n} Packet16q32i;</p>\n<p>+typedef struct Packet16q16i {</p>\n<ul>\n<li>__m512i val;</li>\n<li>operator __m512i() const { return val; }</li>\n<li>Packet16q16i();</li>\n<li>Packet16q16i(__m512i val) : val(val) {}<br>\n+} Packet16q16i;</li>\n<li></li>\n</ul>\n<p>template &lt;&gt;<br>\nstruct packet_traits : default_packet_traits {<br>\ntypedef Packet64q8i type;<br>\n@@ -127,25 +134,25 @@<br>\nstruct unpacket_traits {<br>\ntypedef QInt8 type;<br>\ntypedef Packet32q8i half;</p>\n<ul>\n<li>enum { size = 64 };</li>\n</ul>\n<ul>\n<li>enum { size = 64, alignment=Aligned64 };<br>\n};<br>\ntemplate &lt;&gt;<br>\nstruct unpacket_traits {<br>\ntypedef QInt16 type;<br>\ntypedef Packet16q16i half;</li>\n</ul>\n<ul>\n<li>enum { size = 32 };</li>\n</ul>\n<ul>\n<li>enum { size = 32, alignment=Aligned64  };<br>\n};<br>\ntemplate &lt;&gt;<br>\nstruct unpacket_traits {<br>\ntypedef QUInt8 type;<br>\ntypedef Packet32q8u half;</li>\n</ul>\n<ul>\n<li>enum { size = 64 };</li>\n</ul>\n<ul>\n<li>enum { size = 64, alignment=Aligned64  };<br>\n};<br>\ntemplate &lt;&gt;<br>\nstruct unpacket_traits {<br>\ntypedef QInt32 type;<br>\ntypedef Packet8q32i half;</li>\n</ul>\n<ul>\n<li>enum { size = 16 };</li>\n</ul>\n<ul>\n<li>enum { size = 16, alignment=Aligned64  };<br>\n};</li>\n</ul>\n<p>// Unaligned load</p>", "body_text": "$ diff -u ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h.org ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h\n--- ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h.org     2017-02-14 00:58:37.005624958 +0000\n+++ ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h 2017-02-14 00:58:42.942727455 +0000\n@@ -34,6 +34,13 @@\nPacket16q32i(__m512i val) : val(val) {}\n} Packet16q32i;\n+typedef struct Packet16q16i {\n\n__m512i val;\noperator __m512i() const { return val; }\nPacket16q16i();\nPacket16q16i(__m512i val) : val(val) {}\n+} Packet16q16i;\n\n\ntemplate <>\nstruct packet_traits : default_packet_traits {\ntypedef Packet64q8i type;\n@@ -127,25 +134,25 @@\nstruct unpacket_traits {\ntypedef QInt8 type;\ntypedef Packet32q8i half;\n\nenum { size = 64 };\n\n\nenum { size = 64, alignment=Aligned64 };\n};\ntemplate <>\nstruct unpacket_traits {\ntypedef QInt16 type;\ntypedef Packet16q16i half;\n\n\nenum { size = 32 };\n\n\nenum { size = 32, alignment=Aligned64  };\n};\ntemplate <>\nstruct unpacket_traits {\ntypedef QUInt8 type;\ntypedef Packet32q8u half;\n\n\nenum { size = 64 };\n\n\nenum { size = 64, alignment=Aligned64  };\n};\ntemplate <>\nstruct unpacket_traits {\ntypedef QInt32 type;\ntypedef Packet8q32i half;\n\n\nenum { size = 16 };\n\n\nenum { size = 16, alignment=Aligned64  };\n};\n\n// Unaligned load", "body": "$ diff -u ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h.org ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h\r\n--- ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h.org     2017-02-14 00:58:37.005624958 +0000\r\n+++ ./tensorflow-1.0.0-rc2/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/PacketMathAVX512.h 2017-02-14 00:58:42.942727455 +0000\r\n@@ -34,6 +34,13 @@\r\n   Packet16q32i(__m512i val) : val(val) {}\r\n } Packet16q32i;\r\n\r\n+typedef struct Packet16q16i {\r\n+  __m512i val;\r\n+  operator __m512i() const { return val; }\r\n+  Packet16q16i();\r\n+  Packet16q16i(__m512i val) : val(val) {}\r\n+} Packet16q16i;\r\n+\r\n template <>\r\n struct packet_traits<QInt8> : default_packet_traits {\r\n   typedef Packet64q8i type;\r\n@@ -127,25 +134,25 @@\r\n struct unpacket_traits<Packet64q8i> {\r\n   typedef QInt8 type;\r\n   typedef Packet32q8i half;\r\n-  enum { size = 64 };\r\n+  enum { size = 64, alignment=Aligned64 };\r\n };\r\n template <>\r\n struct unpacket_traits<Packet32q16i> {\r\n   typedef QInt16 type;\r\n   typedef Packet16q16i half;\r\n-  enum { size = 32 };\r\n+  enum { size = 32, alignment=Aligned64  };\r\n };\r\n template <>\r\n struct unpacket_traits<Packet64q8u> {\r\n   typedef QUInt8 type;\r\n   typedef Packet32q8u half;\r\n-  enum { size = 64 };\r\n+  enum { size = 64, alignment=Aligned64  };\r\n };\r\n template <>\r\n struct unpacket_traits<Packet16q32i> {\r\n   typedef QInt32 type;\r\n   typedef Packet8q32i half;\r\n-  enum { size = 16 };\r\n+  enum { size = 16, alignment=Aligned64  };\r\n };\r\n\r\n // Unaligned load\r\n"}