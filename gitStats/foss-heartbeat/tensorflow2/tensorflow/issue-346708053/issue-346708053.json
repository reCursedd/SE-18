{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21313", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21313/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21313/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21313/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21313", "id": 346708053, "node_id": "MDU6SXNzdWUzNDY3MDgwNTM=", "number": 21313, "title": "Feature request : sparse tensor in map_fn", "user": {"login": "unrealwill", "id": 11304248, "node_id": "MDQ6VXNlcjExMzA0MjQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/11304248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealwill", "html_url": "https://github.com/unrealwill", "followers_url": "https://api.github.com/users/unrealwill/followers", "following_url": "https://api.github.com/users/unrealwill/following{/other_user}", "gists_url": "https://api.github.com/users/unrealwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealwill/subscriptions", "organizations_url": "https://api.github.com/users/unrealwill/orgs", "repos_url": "https://api.github.com/users/unrealwill/repos", "events_url": "https://api.github.com/users/unrealwill/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealwill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-08-01T18:05:26Z", "updated_at": "2018-08-02T23:15:48Z", "closed_at": "2018-08-02T23:15:48Z", "author_association": "NONE", "body_html": "<p>Hello,</p>\n<p>I find that a class of useful ops is missing from Tensorflow : the ability to return outputs of various length while iterating over a tensor. Ideally it would support GPU.</p>\n<p>I tried to return a sparse_tensor inside map_fn but currently if fails with (TypeError: Failed to convert object of type &lt;class 'tensorflow.python.framework.sparse_tensor.SparseTensor'&gt; to Tensor )</p>\n<p>It would be useful to have a way to raster, i.e., iterate over a tensor and apply a function which can return tensor of different shapes.</p>\n<p>For example, input tensor could be the coords of the vertices of a triangle, output for each triangle the list of pixels which would be turned on. We can then use unsorted_segment_xxx on the joint list.</p>\n<p>Another example would be for a tensor [[start1,end1],[start2,end2],...,[startn,endn]] -&gt; concat( [range(start1,end1), range(start2,end2),..., range(startn,endn)] )</p>", "body_text": "Hello,\nI find that a class of useful ops is missing from Tensorflow : the ability to return outputs of various length while iterating over a tensor. Ideally it would support GPU.\nI tried to return a sparse_tensor inside map_fn but currently if fails with (TypeError: Failed to convert object of type <class 'tensorflow.python.framework.sparse_tensor.SparseTensor'> to Tensor )\nIt would be useful to have a way to raster, i.e., iterate over a tensor and apply a function which can return tensor of different shapes.\nFor example, input tensor could be the coords of the vertices of a triangle, output for each triangle the list of pixels which would be turned on. We can then use unsorted_segment_xxx on the joint list.\nAnother example would be for a tensor [[start1,end1],[start2,end2],...,[startn,endn]] -> concat( [range(start1,end1), range(start2,end2),..., range(startn,endn)] )", "body": "Hello,\r\n\r\nI find that a class of useful ops is missing from Tensorflow : the ability to return outputs of various length while iterating over a tensor. Ideally it would support GPU.\r\n\r\nI tried to return a sparse_tensor inside map_fn but currently if fails with (TypeError: Failed to convert object of type <class 'tensorflow.python.framework.sparse_tensor.SparseTensor'> to Tensor )\r\n\r\nIt would be useful to have a way to raster, i.e., iterate over a tensor and apply a function which can return tensor of different shapes.\r\n\r\nFor example, input tensor could be the coords of the vertices of a triangle, output for each triangle the list of pixels which would be turned on. We can then use unsorted_segment_xxx on the joint list.\r\n\r\nAnother example would be for a tensor [[start1,end1],[start2,end2],...,[startn,endn]] -> concat( [range(start1,end1), range(start2,end2),..., range(startn,endn)] )\r\n"}