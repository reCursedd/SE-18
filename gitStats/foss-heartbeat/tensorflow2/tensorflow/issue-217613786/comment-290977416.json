{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/290977416", "html_url": "https://github.com/tensorflow/tensorflow/issues/8779#issuecomment-290977416", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8779", "id": 290977416, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDk3NzQxNg==", "user": {"login": "Bihaqo", "id": 5630697, "node_id": "MDQ6VXNlcjU2MzA2OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5630697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bihaqo", "html_url": "https://github.com/Bihaqo", "followers_url": "https://api.github.com/users/Bihaqo/followers", "following_url": "https://api.github.com/users/Bihaqo/following{/other_user}", "gists_url": "https://api.github.com/users/Bihaqo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bihaqo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bihaqo/subscriptions", "organizations_url": "https://api.github.com/users/Bihaqo/orgs", "repos_url": "https://api.github.com/users/Bihaqo/repos", "events_url": "https://api.github.com/users/Bihaqo/events{/privacy}", "received_events_url": "https://api.github.com/users/Bihaqo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-02T10:22:49Z", "updated_at": "2017-04-02T10:22:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think these checks are useful against copypast errors.</p>\n<p>One of the ways to go is to change default value of the argument <code>dtype</code> from <code>tf.float32</code> to <code>None</code>. If <code>dtype</code> is <code>None</code> and <code>initializer</code> is provided, check the <code>dtype</code> of the existing variable against the <code>initializer</code> (not the <code>dtype</code> argument).</p>\n<p>In this case the situation should be as follows:</p>\n<pre><code>tf.get_variable('a', initializer=tf.zeros(2, tf.int32))\nwith tf.variable_scope('', reuse=True):\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int32)) # works\n  tf.get_variable('a', dtype=tf.int32) # works\n  tf.get_variable('a') # works, because nor dtype nor initializer are provided, nothing to compare against.\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int16)) # raises ValueError\n  tf.get_variable('a', dtype=tf.float32) # raises ValueError\n\ntf.get_variable('b', dtype=tf.int16, initializer=tf.zeros(2, tf.int32)) # raises ValueError\n</code></pre>\n<p>And we can apply the same principle to shape checks as well.</p>", "body_text": "I think these checks are useful against copypast errors.\nOne of the ways to go is to change default value of the argument dtype from tf.float32 to None. If dtype is None and initializer is provided, check the dtype of the existing variable against the initializer (not the dtype argument).\nIn this case the situation should be as follows:\ntf.get_variable('a', initializer=tf.zeros(2, tf.int32))\nwith tf.variable_scope('', reuse=True):\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int32)) # works\n  tf.get_variable('a', dtype=tf.int32) # works\n  tf.get_variable('a') # works, because nor dtype nor initializer are provided, nothing to compare against.\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int16)) # raises ValueError\n  tf.get_variable('a', dtype=tf.float32) # raises ValueError\n\ntf.get_variable('b', dtype=tf.int16, initializer=tf.zeros(2, tf.int32)) # raises ValueError\n\nAnd we can apply the same principle to shape checks as well.", "body": "I think these checks are useful against copypast errors.\r\n\r\nOne of the ways to go is to change default value of the argument `dtype` from `tf.float32` to `None`. If `dtype` is `None` and `initializer` is provided, check the `dtype` of the existing variable against the `initializer` (not the `dtype` argument).\r\n\r\nIn this case the situation should be as follows:\r\n```\r\ntf.get_variable('a', initializer=tf.zeros(2, tf.int32))\r\nwith tf.variable_scope('', reuse=True):\r\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int32)) # works\r\n  tf.get_variable('a', dtype=tf.int32) # works\r\n  tf.get_variable('a') # works, because nor dtype nor initializer are provided, nothing to compare against.\r\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int16)) # raises ValueError\r\n  tf.get_variable('a', dtype=tf.float32) # raises ValueError\r\n\r\ntf.get_variable('b', dtype=tf.int16, initializer=tf.zeros(2, tf.int32)) # raises ValueError\r\n```\r\n\r\nAnd we can apply the same principle to shape checks as well."}