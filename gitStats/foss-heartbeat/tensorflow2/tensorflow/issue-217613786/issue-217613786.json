{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8779", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8779/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8779/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8779/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8779", "id": 217613786, "node_id": "MDU6SXNzdWUyMTc2MTM3ODY=", "number": 8779, "title": "Contrintuitive get_variable dtype checks", "user": {"login": "Bihaqo", "id": 5630697, "node_id": "MDQ6VXNlcjU2MzA2OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5630697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bihaqo", "html_url": "https://github.com/Bihaqo", "followers_url": "https://api.github.com/users/Bihaqo/followers", "following_url": "https://api.github.com/users/Bihaqo/following{/other_user}", "gists_url": "https://api.github.com/users/Bihaqo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bihaqo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bihaqo/subscriptions", "organizations_url": "https://api.github.com/users/Bihaqo/orgs", "repos_url": "https://api.github.com/users/Bihaqo/repos", "events_url": "https://api.github.com/users/Bihaqo/events{/privacy}", "received_events_url": "https://api.github.com/users/Bihaqo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-03-28T16:13:19Z", "updated_at": "2017-06-16T20:56:09Z", "closed_at": "2017-06-16T20:56:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p>When reusing variables get_variable checks if dtypes are consistent, but it seems to compare the wrong dtypes.</p>\n<p>Example:</p>\n<pre><code>a = tf.get_variable('a', initializer=tf.zeros(2, tf.int32))\nwith tf.variable_scope('', reuse=True):\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int32)) # raises ValueError\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int16)) # raises ValueError\n\nb = tf.get_variable('b', initializer=tf.zeros(2))\nwith tf.variable_scope('', reuse=True):\n  tf.get_variable('b', initializer=tf.zeros(2, tf.int32)) # works\n</code></pre>\n<p>Here the TF will compare dtype of existing variable <code>a</code> (tf.int32) against the dtype of the next get_variable call, which is tf.float32 (which is the default value for dtype argument of get_variable).</p>\n<p>The resulting situations where get_variable raises ValueError seems counterintuitive.</p>", "body_text": "When reusing variables get_variable checks if dtypes are consistent, but it seems to compare the wrong dtypes.\nExample:\na = tf.get_variable('a', initializer=tf.zeros(2, tf.int32))\nwith tf.variable_scope('', reuse=True):\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int32)) # raises ValueError\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int16)) # raises ValueError\n\nb = tf.get_variable('b', initializer=tf.zeros(2))\nwith tf.variable_scope('', reuse=True):\n  tf.get_variable('b', initializer=tf.zeros(2, tf.int32)) # works\n\nHere the TF will compare dtype of existing variable a (tf.int32) against the dtype of the next get_variable call, which is tf.float32 (which is the default value for dtype argument of get_variable).\nThe resulting situations where get_variable raises ValueError seems counterintuitive.", "body": "When reusing variables get_variable checks if dtypes are consistent, but it seems to compare the wrong dtypes.\r\n\r\nExample:\r\n```\r\na = tf.get_variable('a', initializer=tf.zeros(2, tf.int32))\r\nwith tf.variable_scope('', reuse=True):\r\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int32)) # raises ValueError\r\n  tf.get_variable('a', initializer=tf.zeros(2, tf.int16)) # raises ValueError\r\n\r\nb = tf.get_variable('b', initializer=tf.zeros(2))\r\nwith tf.variable_scope('', reuse=True):\r\n  tf.get_variable('b', initializer=tf.zeros(2, tf.int32)) # works\r\n```\r\nHere the TF will compare dtype of existing variable `a` (tf.int32) against the dtype of the next get_variable call, which is tf.float32 (which is the default value for dtype argument of get_variable).\r\n\r\nThe resulting situations where get_variable raises ValueError seems counterintuitive."}