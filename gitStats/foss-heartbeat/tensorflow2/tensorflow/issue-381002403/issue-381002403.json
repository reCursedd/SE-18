{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23759", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23759/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23759/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23759/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23759", "id": 381002403, "node_id": "MDU6SXNzdWUzODEwMDI0MDM=", "number": 23759, "title": "longer latency after post-training quantization", "user": {"login": "mengwanguc", "id": 23745174, "node_id": "MDQ6VXNlcjIzNzQ1MTc0", "avatar_url": "https://avatars3.githubusercontent.com/u/23745174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mengwanguc", "html_url": "https://github.com/mengwanguc", "followers_url": "https://api.github.com/users/mengwanguc/followers", "following_url": "https://api.github.com/users/mengwanguc/following{/other_user}", "gists_url": "https://api.github.com/users/mengwanguc/gists{/gist_id}", "starred_url": "https://api.github.com/users/mengwanguc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mengwanguc/subscriptions", "organizations_url": "https://api.github.com/users/mengwanguc/orgs", "repos_url": "https://api.github.com/users/mengwanguc/repos", "events_url": "https://api.github.com/users/mengwanguc/events{/privacy}", "received_events_url": "https://api.github.com/users/mengwanguc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750616506, "node_id": "MDU6TGFiZWw3NTA2MTY1MDY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:lite", "name": "comp:lite", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "suharshs", "id": 1450614, "node_id": "MDQ6VXNlcjE0NTA2MTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1450614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suharshs", "html_url": "https://github.com/suharshs", "followers_url": "https://api.github.com/users/suharshs/followers", "following_url": "https://api.github.com/users/suharshs/following{/other_user}", "gists_url": "https://api.github.com/users/suharshs/gists{/gist_id}", "starred_url": "https://api.github.com/users/suharshs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suharshs/subscriptions", "organizations_url": "https://api.github.com/users/suharshs/orgs", "repos_url": "https://api.github.com/users/suharshs/repos", "events_url": "https://api.github.com/users/suharshs/events{/privacy}", "received_events_url": "https://api.github.com/users/suharshs/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "suharshs", "id": 1450614, "node_id": "MDQ6VXNlcjE0NTA2MTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1450614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suharshs", "html_url": "https://github.com/suharshs", "followers_url": "https://api.github.com/users/suharshs/followers", "following_url": "https://api.github.com/users/suharshs/following{/other_user}", "gists_url": "https://api.github.com/users/suharshs/gists{/gist_id}", "starred_url": "https://api.github.com/users/suharshs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suharshs/subscriptions", "organizations_url": "https://api.github.com/users/suharshs/orgs", "repos_url": "https://api.github.com/users/suharshs/repos", "events_url": "https://api.github.com/users/suharshs/events{/privacy}", "received_events_url": "https://api.github.com/users/suharshs/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-11-15T05:08:43Z", "updated_at": "2018-11-21T01:52:25Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nI modified the example script a bit to print inference latency</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nGoogle Colaboratory with CPU</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\n! pip install -U tf-nightly==1.13.0.dev20181027</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\ntf-nightly-1.13.0.dev20181027</li>\n<li><strong>Python version</strong>:<br>\n2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The post-training quantization documentation claims that it provides 3x lower latency: <a href=\"https://www.tensorflow.org/lite/performance/post_training_quantization\" rel=\"nofollow\">https://www.tensorflow.org/lite/performance/post_training_quantization</a></p>\n<p>But when I try with the example script: <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/tutorials/post_training_quant.ipynb\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/tutorials/post_training_quant.ipynb</a><br>\nI found that quantized model is apparently slower than original one.<br>\n(You can see the logs below. Quantized model provides longer latency).</p>\n<p>Why is the experiment result different from the documentation claim?<br>\nShould I try some other example/environment?</p>\n<h3>Source code / logs</h3>\n<p>The original one with floating-point:<br>\nAccuracy after 500 images: 0.970000 average time: 0.002977<br>\nAccuracy after 1000 images: 0.960000 average time: 0.003007<br>\nAccuracy after 1500 images: 0.952667 average time: 0.003022<br>\nAccuracy after 2000 images: 0.951500 average time: 0.003026<br>\nAccuracy after 2500 images: 0.949600 average time: 0.003026<br>\nAccuracy after 3000 images: 0.954000 average time: 0.003024<br>\nAccuracy after 3500 images: 0.956857 average time: 0.003029<br>\nAccuracy after 4000 images: 0.954000 average time: 0.003031<br>\nAccuracy after 4500 images: 0.954222 average time: 0.003032<br>\nAccuracy after 5000 images: 0.954200 average time: 0.003038<br>\nAccuracy after 5500 images: 0.957091 average time: 0.003043<br>\nAccuracy after 6000 images: 0.958500 average time: 0.003047<br>\nAccuracy after 6500 images: 0.959692 average time: 0.003050<br>\nAccuracy after 7000 images: 0.960714 average time: 0.003050<br>\nAccuracy after 7500 images: 0.962400 average time: 0.003051<br>\nAccuracy after 8000 images: 0.964375 average time: 0.003052<br>\nAccuracy after 8500 images: 0.965059 average time: 0.003051<br>\nAccuracy after 9000 images: 0.966889 average time: 0.003052<br>\nAccuracy after 9500 images: 0.968000 average time: 0.003052<br>\nAccuracy after 10000 images: 0.966700 average time: 0.003054<br>\ntotal time: 30.540090<br>\n0.9667</p>\n<p>With post-training quantization:<br>\nAccuracy after 500 images: 0.970000 average time: 0.004113<br>\nAccuracy after 1000 images: 0.959000 average time: 0.004096<br>\nAccuracy after 1500 images: 0.950667 average time: 0.004093<br>\nAccuracy after 2000 images: 0.950000 average time: 0.004084<br>\nAccuracy after 2500 images: 0.948000 average time: 0.004077<br>\nAccuracy after 3000 images: 0.952667 average time: 0.004081<br>\nAccuracy after 3500 images: 0.955714 average time: 0.004103<br>\nAccuracy after 4000 images: 0.953000 average time: 0.004125<br>\nAccuracy after 4500 images: 0.953111 average time: 0.004133<br>\nAccuracy after 5000 images: 0.953200 average time: 0.004130<br>\nAccuracy after 5500 images: 0.956182 average time: 0.004126<br>\nAccuracy after 6000 images: 0.957667 average time: 0.004132<br>\nAccuracy after 6500 images: 0.958923 average time: 0.004137<br>\nAccuracy after 7000 images: 0.960000 average time: 0.004142<br>\nAccuracy after 7500 images: 0.961600 average time: 0.004146<br>\nAccuracy after 8000 images: 0.963625 average time: 0.004149<br>\nAccuracy after 8500 images: 0.964353 average time: 0.004148<br>\nAccuracy after 9000 images: 0.966222 average time: 0.004145<br>\nAccuracy after 9500 images: 0.967368 average time: 0.004140<br>\nAccuracy after 10000 images: 0.966100 average time: 0.004136<br>\ntotal time: 41.360908<br>\n0.9661</p>\n<p>We can see after post-training quantization, the latency is apparently longer......<br>\nBut in the documentation, it claims to reduce latency....</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nI modified the example script a bit to print inference latency\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nGoogle Colaboratory with CPU\nTensorFlow installed from (source or binary):\n! pip install -U tf-nightly==1.13.0.dev20181027\nTensorFlow version (use command below):\ntf-nightly-1.13.0.dev20181027\nPython version:\n2.7\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nThe post-training quantization documentation claims that it provides 3x lower latency: https://www.tensorflow.org/lite/performance/post_training_quantization\nBut when I try with the example script: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/tutorials/post_training_quant.ipynb\nI found that quantized model is apparently slower than original one.\n(You can see the logs below. Quantized model provides longer latency).\nWhy is the experiment result different from the documentation claim?\nShould I try some other example/environment?\nSource code / logs\nThe original one with floating-point:\nAccuracy after 500 images: 0.970000 average time: 0.002977\nAccuracy after 1000 images: 0.960000 average time: 0.003007\nAccuracy after 1500 images: 0.952667 average time: 0.003022\nAccuracy after 2000 images: 0.951500 average time: 0.003026\nAccuracy after 2500 images: 0.949600 average time: 0.003026\nAccuracy after 3000 images: 0.954000 average time: 0.003024\nAccuracy after 3500 images: 0.956857 average time: 0.003029\nAccuracy after 4000 images: 0.954000 average time: 0.003031\nAccuracy after 4500 images: 0.954222 average time: 0.003032\nAccuracy after 5000 images: 0.954200 average time: 0.003038\nAccuracy after 5500 images: 0.957091 average time: 0.003043\nAccuracy after 6000 images: 0.958500 average time: 0.003047\nAccuracy after 6500 images: 0.959692 average time: 0.003050\nAccuracy after 7000 images: 0.960714 average time: 0.003050\nAccuracy after 7500 images: 0.962400 average time: 0.003051\nAccuracy after 8000 images: 0.964375 average time: 0.003052\nAccuracy after 8500 images: 0.965059 average time: 0.003051\nAccuracy after 9000 images: 0.966889 average time: 0.003052\nAccuracy after 9500 images: 0.968000 average time: 0.003052\nAccuracy after 10000 images: 0.966700 average time: 0.003054\ntotal time: 30.540090\n0.9667\nWith post-training quantization:\nAccuracy after 500 images: 0.970000 average time: 0.004113\nAccuracy after 1000 images: 0.959000 average time: 0.004096\nAccuracy after 1500 images: 0.950667 average time: 0.004093\nAccuracy after 2000 images: 0.950000 average time: 0.004084\nAccuracy after 2500 images: 0.948000 average time: 0.004077\nAccuracy after 3000 images: 0.952667 average time: 0.004081\nAccuracy after 3500 images: 0.955714 average time: 0.004103\nAccuracy after 4000 images: 0.953000 average time: 0.004125\nAccuracy after 4500 images: 0.953111 average time: 0.004133\nAccuracy after 5000 images: 0.953200 average time: 0.004130\nAccuracy after 5500 images: 0.956182 average time: 0.004126\nAccuracy after 6000 images: 0.957667 average time: 0.004132\nAccuracy after 6500 images: 0.958923 average time: 0.004137\nAccuracy after 7000 images: 0.960000 average time: 0.004142\nAccuracy after 7500 images: 0.961600 average time: 0.004146\nAccuracy after 8000 images: 0.963625 average time: 0.004149\nAccuracy after 8500 images: 0.964353 average time: 0.004148\nAccuracy after 9000 images: 0.966222 average time: 0.004145\nAccuracy after 9500 images: 0.967368 average time: 0.004140\nAccuracy after 10000 images: 0.966100 average time: 0.004136\ntotal time: 41.360908\n0.9661\nWe can see after post-training quantization, the latency is apparently longer......\nBut in the documentation, it claims to reduce latency....", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nI modified the example script a bit to print inference latency\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nGoogle Colaboratory with CPU\r\n- **TensorFlow installed from (source or binary)**:\r\n! pip install -U tf-nightly==1.13.0.dev20181027\r\n- **TensorFlow version (use command below)**:\r\ntf-nightly-1.13.0.dev20181027\r\n- **Python version**:\r\n2.7\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nThe post-training quantization documentation claims that it provides 3x lower latency: https://www.tensorflow.org/lite/performance/post_training_quantization\r\n\r\nBut when I try with the example script: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/tutorials/post_training_quant.ipynb\r\nI found that quantized model is apparently slower than original one.\r\n(You can see the logs below. Quantized model provides longer latency).\r\n\r\nWhy is the experiment result different from the documentation claim?\r\nShould I try some other example/environment?\r\n\r\n\r\n### Source code / logs\r\nThe original one with floating-point:\r\nAccuracy after 500 images: 0.970000 average time: 0.002977\r\nAccuracy after 1000 images: 0.960000 average time: 0.003007\r\nAccuracy after 1500 images: 0.952667 average time: 0.003022\r\nAccuracy after 2000 images: 0.951500 average time: 0.003026\r\nAccuracy after 2500 images: 0.949600 average time: 0.003026\r\nAccuracy after 3000 images: 0.954000 average time: 0.003024\r\nAccuracy after 3500 images: 0.956857 average time: 0.003029\r\nAccuracy after 4000 images: 0.954000 average time: 0.003031\r\nAccuracy after 4500 images: 0.954222 average time: 0.003032\r\nAccuracy after 5000 images: 0.954200 average time: 0.003038\r\nAccuracy after 5500 images: 0.957091 average time: 0.003043\r\nAccuracy after 6000 images: 0.958500 average time: 0.003047\r\nAccuracy after 6500 images: 0.959692 average time: 0.003050\r\nAccuracy after 7000 images: 0.960714 average time: 0.003050\r\nAccuracy after 7500 images: 0.962400 average time: 0.003051\r\nAccuracy after 8000 images: 0.964375 average time: 0.003052\r\nAccuracy after 8500 images: 0.965059 average time: 0.003051\r\nAccuracy after 9000 images: 0.966889 average time: 0.003052\r\nAccuracy after 9500 images: 0.968000 average time: 0.003052\r\nAccuracy after 10000 images: 0.966700 average time: 0.003054\r\ntotal time: 30.540090\r\n0.9667\r\n\r\n\r\nWith post-training quantization:\r\nAccuracy after 500 images: 0.970000 average time: 0.004113\r\nAccuracy after 1000 images: 0.959000 average time: 0.004096\r\nAccuracy after 1500 images: 0.950667 average time: 0.004093\r\nAccuracy after 2000 images: 0.950000 average time: 0.004084\r\nAccuracy after 2500 images: 0.948000 average time: 0.004077\r\nAccuracy after 3000 images: 0.952667 average time: 0.004081\r\nAccuracy after 3500 images: 0.955714 average time: 0.004103\r\nAccuracy after 4000 images: 0.953000 average time: 0.004125\r\nAccuracy after 4500 images: 0.953111 average time: 0.004133\r\nAccuracy after 5000 images: 0.953200 average time: 0.004130\r\nAccuracy after 5500 images: 0.956182 average time: 0.004126\r\nAccuracy after 6000 images: 0.957667 average time: 0.004132\r\nAccuracy after 6500 images: 0.958923 average time: 0.004137\r\nAccuracy after 7000 images: 0.960000 average time: 0.004142\r\nAccuracy after 7500 images: 0.961600 average time: 0.004146\r\nAccuracy after 8000 images: 0.963625 average time: 0.004149\r\nAccuracy after 8500 images: 0.964353 average time: 0.004148\r\nAccuracy after 9000 images: 0.966222 average time: 0.004145\r\nAccuracy after 9500 images: 0.967368 average time: 0.004140\r\nAccuracy after 10000 images: 0.966100 average time: 0.004136\r\ntotal time: 41.360908\r\n0.9661\r\n\r\nWe can see after post-training quantization, the latency is apparently longer......\r\nBut in the documentation, it claims to reduce latency....\r\n"}