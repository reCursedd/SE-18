{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/66645524", "pull_request_review_id": null, "id": 66645524, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjQ1NTI0", "diff_hunk": "@@ -28,14 +28,43 @@ def dnn(tensor_in, hidden_units, activation=nn.relu, dropout=None):\n   Args:\n     tensor_in: tensor or placeholder for input features.\n     hidden_units: list of counts of hidden units in each layer.\n-    activation: activation function between layers. Can be None.\n-    dropout: if not None, will add a dropout layer with given probability.\n+    activation: activation function between layers. Can be None. Can be list of\n+      activation function for each layer\n+    dropout: if not None, will add a dropout layer with given probability. Can\n+      be list of dropouts per layer\n \n   Returns:\n     A tensor which would be a deep neural network.\n   \"\"\"\n+\n+  def broadcast_or_noop(f, length, noop=lambda x:x):\n+    \"\"\"Creates given length list of functions, broadcasting for single functions\n+\n+    Args:\n+      f: function to broadcast. If None, broadcast noop. If list of function\n+        validate len(f) == length\n+      length: output list size\n+      noop: No operation to fill if None\n+\n+    Returns:\n+      A list which has given lenght with optionally broadcasted function\n+    \"\"\"\n+    if f is None:\n+      return([noop for _ in range(length)])\n+    try:\n+      f[0]\n+    except TypeError:\n+      return [f for _ in range(length)]\n+    if len(f) != length:\n+      raise ValueError(\"invalid supplied argument size\")\n+    return f\n+\n+  activation = broadcast_or_noop(activation, len(hidden_units))\n+  dropout = broadcast_or_noop(dropout, len(hidden_units), None)\n+\n   with vs.variable_scope('dnn'):\n-    for i, n_units in enumerate(hidden_units):\n+    for i, (n_units, activation_l, dropout_l) in \\", "path": "tensorflow/contrib/learn/python/learn/ops/dnn_ops.py", "position": 42, "original_position": 42, "commit_id": "7a72aaa12f647979eeabe10c871f03aa3a967ce0", "original_commit_id": "7a72aaa12f647979eeabe10c871f03aa3a967ce0", "user": {"login": "ilblackdragon", "id": 175486, "node_id": "MDQ6VXNlcjE3NTQ4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/175486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilblackdragon", "html_url": "https://github.com/ilblackdragon", "followers_url": "https://api.github.com/users/ilblackdragon/followers", "following_url": "https://api.github.com/users/ilblackdragon/following{/other_user}", "gists_url": "https://api.github.com/users/ilblackdragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilblackdragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilblackdragon/subscriptions", "organizations_url": "https://api.github.com/users/ilblackdragon/orgs", "repos_url": "https://api.github.com/users/ilblackdragon/repos", "events_url": "https://api.github.com/users/ilblackdragon/events{/privacy}", "received_events_url": "https://api.github.com/users/ilblackdragon/received_events", "type": "User", "site_admin": false}, "body": "may be `activation_fn` and `dropout_prob` ?\n", "created_at": "2016-06-10T16:51:21Z", "updated_at": "2016-06-10T16:51:21Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2380#discussion_r66645524", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2380", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/66645524"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2380#discussion_r66645524"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2380"}}, "body_html": "<p>may be <code>activation_fn</code> and <code>dropout_prob</code> ?</p>", "body_text": "may be activation_fn and dropout_prob ?"}