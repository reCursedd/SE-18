{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23537", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23537/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23537/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23537/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23537", "id": 377625732, "node_id": "MDU6SXNzdWUzNzc2MjU3MzI=", "number": 23537, "title": "Failed to obtain tensors of correct batch size", "user": {"login": "mingyr", "id": 5569293, "node_id": "MDQ6VXNlcjU1NjkyOTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5569293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingyr", "html_url": "https://github.com/mingyr", "followers_url": "https://api.github.com/users/mingyr/followers", "following_url": "https://api.github.com/users/mingyr/following{/other_user}", "gists_url": "https://api.github.com/users/mingyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingyr/subscriptions", "organizations_url": "https://api.github.com/users/mingyr/orgs", "repos_url": "https://api.github.com/users/mingyr/repos", "events_url": "https://api.github.com/users/mingyr/events{/privacy}", "received_events_url": "https://api.github.com/users/mingyr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-11-05T23:22:03Z", "updated_at": "2018-11-10T11:49:46Z", "closed_at": "2018-11-09T18:12:04Z", "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes</li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Red hat 7.3</li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:</li>\n<li>TensorFlow installed from (source or binary): Binary</li>\n<li>TensorFlow version (use command below): 1.10</li>\n<li>Python version: 2.7.5</li>\n<li>Bazel version (if compiling from source): N/A</li>\n<li>GCC/Compiler version (if compiling from source): N/A</li>\n<li>CUDA/cuDNN version: 9.0</li>\n<li>GPU model and memory: P5000, 16G</li>\n</ul>\n<p>The following code is just retrieving specific digits from mnist of specified batch size. But the returned tensor is just of one sample:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\nimport sonnet as snt\n\nclass Input(snt.AbstractModule):\n    def __init__(self, batch_size, name = \"input\"):\n        super(Input, self).__init__(name = name)\n\n        mnist = tf.keras.datasets.mnist\n\n        (X_train, Y_train), (X_test, Y_test) = mnist.load_data()\n\n        train_filter = np.where((Y_train == 0 ) | (Y_train == 1))\n        test_filter = np.where((Y_test == 0) | (Y_test == 1))\n\n        X_train, Y_train = X_train[train_filter], Y_train[train_filter]\n        X_test, Y_test = X_test[test_filter], Y_test[test_filter]\n\n        print(X_train.shape)\n        print(Y_train.shape)\n\n        with self._enter_variable_scope():\n            self._db_train = tf.data.Dataset.from_tensor_slices((X_train, Y_train))\n            self._db_test = tf.data.Dataset.from_tensor_slices((X_test, Y_test))\n\n            self._db_train.repeat(-1)\n            self._db_test.repeat(-1)\n\n            self._db_train.batch(batch_size)\n            self._db_test.batch(batch_size)\n\n            # self._db_train.apply(tf.contrib.data.batch_and_drop_remainder(batch_size))\n            # self._db_test.apply(tf.contrib.data.batch_and_drop_remainder(batch_size))\n\n            self._it_train = self._db_train.make_one_shot_iterator()\n            self._it_test = self._db_test.make_one_shot_iterator()\n\n\n    def _build(self, is_training = True):\n\n        if is_training:\n            inputs, labels = self._it_train.get_next()\n        else:\n            inputs, labels = self._it_test.get_next()\n\n        return inputs, labels\n\ndef test():\n    input_ = Input(32)\n\n    inputs, labels = input_()\n\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n\n        inputs_val, labels_val = sess.run([inputs, labels])\n\n\n        print(inputs_val.shape)\n        print(labels_val.shape)\n\n\nif __name__ == \"__main__\":\n    test()\n\n</code></pre>\n<p>The output of the above code snippet is as follows:</p>\n<pre><code>(12665, 28, 28)\n(12665,)\n(28, 28)\n()\n\n</code></pre>\n<p>Note I deleted something irrelevant.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Red hat 7.3\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.10\nPython version: 2.7.5\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: 9.0\nGPU model and memory: P5000, 16G\n\nThe following code is just retrieving specific digits from mnist of specified batch size. But the returned tensor is just of one sample:\nimport numpy as np\nimport tensorflow as tf\nimport sonnet as snt\n\nclass Input(snt.AbstractModule):\n    def __init__(self, batch_size, name = \"input\"):\n        super(Input, self).__init__(name = name)\n\n        mnist = tf.keras.datasets.mnist\n\n        (X_train, Y_train), (X_test, Y_test) = mnist.load_data()\n\n        train_filter = np.where((Y_train == 0 ) | (Y_train == 1))\n        test_filter = np.where((Y_test == 0) | (Y_test == 1))\n\n        X_train, Y_train = X_train[train_filter], Y_train[train_filter]\n        X_test, Y_test = X_test[test_filter], Y_test[test_filter]\n\n        print(X_train.shape)\n        print(Y_train.shape)\n\n        with self._enter_variable_scope():\n            self._db_train = tf.data.Dataset.from_tensor_slices((X_train, Y_train))\n            self._db_test = tf.data.Dataset.from_tensor_slices((X_test, Y_test))\n\n            self._db_train.repeat(-1)\n            self._db_test.repeat(-1)\n\n            self._db_train.batch(batch_size)\n            self._db_test.batch(batch_size)\n\n            # self._db_train.apply(tf.contrib.data.batch_and_drop_remainder(batch_size))\n            # self._db_test.apply(tf.contrib.data.batch_and_drop_remainder(batch_size))\n\n            self._it_train = self._db_train.make_one_shot_iterator()\n            self._it_test = self._db_test.make_one_shot_iterator()\n\n\n    def _build(self, is_training = True):\n\n        if is_training:\n            inputs, labels = self._it_train.get_next()\n        else:\n            inputs, labels = self._it_test.get_next()\n\n        return inputs, labels\n\ndef test():\n    input_ = Input(32)\n\n    inputs, labels = input_()\n\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n\n        inputs_val, labels_val = sess.run([inputs, labels])\n\n\n        print(inputs_val.shape)\n        print(labels_val.shape)\n\n\nif __name__ == \"__main__\":\n    test()\n\n\nThe output of the above code snippet is as follows:\n(12665, 28, 28)\n(12665,)\n(28, 28)\n()\n\n\nNote I deleted something irrelevant.", "body": "**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Red hat 7.3\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\r\n- TensorFlow installed from (source or binary): Binary\r\n- TensorFlow version (use command below): 1.10\r\n- Python version: 2.7.5\r\n- Bazel version (if compiling from source): N/A\r\n- GCC/Compiler version (if compiling from source): N/A\r\n- CUDA/cuDNN version: 9.0\r\n- GPU model and memory: P5000, 16G\r\n\r\n\r\nThe following code is just retrieving specific digits from mnist of specified batch size. But the returned tensor is just of one sample:\r\n\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport sonnet as snt\r\n\r\nclass Input(snt.AbstractModule):\r\n    def __init__(self, batch_size, name = \"input\"):\r\n        super(Input, self).__init__(name = name)\r\n\r\n        mnist = tf.keras.datasets.mnist\r\n\r\n        (X_train, Y_train), (X_test, Y_test) = mnist.load_data()\r\n\r\n        train_filter = np.where((Y_train == 0 ) | (Y_train == 1))\r\n        test_filter = np.where((Y_test == 0) | (Y_test == 1))\r\n\r\n        X_train, Y_train = X_train[train_filter], Y_train[train_filter]\r\n        X_test, Y_test = X_test[test_filter], Y_test[test_filter]\r\n\r\n        print(X_train.shape)\r\n        print(Y_train.shape)\r\n\r\n        with self._enter_variable_scope():\r\n            self._db_train = tf.data.Dataset.from_tensor_slices((X_train, Y_train))\r\n            self._db_test = tf.data.Dataset.from_tensor_slices((X_test, Y_test))\r\n\r\n            self._db_train.repeat(-1)\r\n            self._db_test.repeat(-1)\r\n\r\n            self._db_train.batch(batch_size)\r\n            self._db_test.batch(batch_size)\r\n\r\n            # self._db_train.apply(tf.contrib.data.batch_and_drop_remainder(batch_size))\r\n            # self._db_test.apply(tf.contrib.data.batch_and_drop_remainder(batch_size))\r\n\r\n            self._it_train = self._db_train.make_one_shot_iterator()\r\n            self._it_test = self._db_test.make_one_shot_iterator()\r\n\r\n\r\n    def _build(self, is_training = True):\r\n\r\n        if is_training:\r\n            inputs, labels = self._it_train.get_next()\r\n        else:\r\n            inputs, labels = self._it_test.get_next()\r\n\r\n        return inputs, labels\r\n\r\ndef test():\r\n    input_ = Input(32)\r\n\r\n    inputs, labels = input_()\r\n\r\n    with tf.Session() as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n\r\n        inputs_val, labels_val = sess.run([inputs, labels])\r\n\r\n\r\n        print(inputs_val.shape)\r\n        print(labels_val.shape)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test()\r\n\r\n```\r\n\r\nThe output of the above code snippet is as follows:\r\n\r\n```\r\n(12665, 28, 28)\r\n(12665,)\r\n(28, 28)\r\n()\r\n\r\n```\r\nNote I deleted something irrelevant."}