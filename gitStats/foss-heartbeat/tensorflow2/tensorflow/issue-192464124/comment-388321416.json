{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/388321416", "html_url": "https://github.com/tensorflow/tensorflow/issues/5965#issuecomment-388321416", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5965", "id": 388321416, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODMyMTQxNg==", "user": {"login": "kzjeef", "id": 113606, "node_id": "MDQ6VXNlcjExMzYwNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/113606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kzjeef", "html_url": "https://github.com/kzjeef", "followers_url": "https://api.github.com/users/kzjeef/followers", "following_url": "https://api.github.com/users/kzjeef/following{/other_user}", "gists_url": "https://api.github.com/users/kzjeef/gists{/gist_id}", "starred_url": "https://api.github.com/users/kzjeef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kzjeef/subscriptions", "organizations_url": "https://api.github.com/users/kzjeef/orgs", "repos_url": "https://api.github.com/users/kzjeef/repos", "events_url": "https://api.github.com/users/kzjeef/events{/privacy}", "received_events_url": "https://api.github.com/users/kzjeef/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-11T10:08:05Z", "updated_at": "2018-05-11T12:19:21Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2533174\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ekelsen\">@ekelsen</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15736910\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zheng-xq\">@zheng-xq</a>  I recently did some work add a GPU kernel for tf.unique op, I did local benchmark of original c++ hash table and GPU version, it's about 75-100x faster(not include memory copy time). since during training, tf.unique will take most the time of Opmimizer, I think it will help improve the training performance.</p>\n<p>although I noticed there is some comments in <code>unique_op.cc</code>:</p>\n<pre><code>// Fake integer GPU kernels so that the use of Unique in optimizers (to\n// de-duplicate sparse gradient indices) does not conflict with gradients being\n// located on a GPU. These kernels run on the CPU, their inputs and outputs\n// residing in host (not GPU) memory.\n</code></pre>\n<p>I'm not sure what this comment means, did it means this op cannot implement in GPU ?<br>\nbtw, I did this work and test based on Unique op (not the recently added UniqueV2 Op).</p>", "body_text": "@ekelsen @zheng-xq  I recently did some work add a GPU kernel for tf.unique op, I did local benchmark of original c++ hash table and GPU version, it's about 75-100x faster(not include memory copy time). since during training, tf.unique will take most the time of Opmimizer, I think it will help improve the training performance.\nalthough I noticed there is some comments in unique_op.cc:\n// Fake integer GPU kernels so that the use of Unique in optimizers (to\n// de-duplicate sparse gradient indices) does not conflict with gradients being\n// located on a GPU. These kernels run on the CPU, their inputs and outputs\n// residing in host (not GPU) memory.\n\nI'm not sure what this comment means, did it means this op cannot implement in GPU ?\nbtw, I did this work and test based on Unique op (not the recently added UniqueV2 Op).", "body": "@ekelsen @zheng-xq  I recently did some work add a GPU kernel for tf.unique op, I did local benchmark of original c++ hash table and GPU version, it's about 75-100x faster(not include memory copy time). since during training, tf.unique will take most the time of Opmimizer, I think it will help improve the training performance. \r\n\r\nalthough I noticed there is some comments in `unique_op.cc`:\r\n\r\n```\r\n// Fake integer GPU kernels so that the use of Unique in optimizers (to\r\n// de-duplicate sparse gradient indices) does not conflict with gradients being\r\n// located on a GPU. These kernels run on the CPU, their inputs and outputs\r\n// residing in host (not GPU) memory.\r\n```\r\n\r\nI'm not sure what this comment means, did it means this op cannot implement in GPU ? \r\nbtw, I did this work and test based on Unique op (not the recently added UniqueV2 Op).\r\n\r\n"}