{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338492546", "html_url": "https://github.com/tensorflow/tensorflow/issues/5965#issuecomment-338492546", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5965", "id": 338492546, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODQ5MjU0Ng==", "user": {"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-22T17:01:15Z", "updated_at": "2017-10-22T17:01:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5220571\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dantkz\">@dantkz</a> I think the best bet for a GPU version of unique would still be to create a separate op in contrib so that it doesn't mess up the current registration on the host.</p>\n<p>scatter_nd and gather_nd do have GPU registrations.  You could try to write a unique using these.  However, I think that using the CUB techniques I outlined would probably be give the best performance across a wide range of input data distributions.</p>", "body_text": "@dantkz I think the best bet for a GPU version of unique would still be to create a separate op in contrib so that it doesn't mess up the current registration on the host.\nscatter_nd and gather_nd do have GPU registrations.  You could try to write a unique using these.  However, I think that using the CUB techniques I outlined would probably be give the best performance across a wide range of input data distributions.", "body": "@dantkz I think the best bet for a GPU version of unique would still be to create a separate op in contrib so that it doesn't mess up the current registration on the host.\r\n\r\nscatter_nd and gather_nd do have GPU registrations.  You could try to write a unique using these.  However, I think that using the CUB techniques I outlined would probably be give the best performance across a wide range of input data distributions."}