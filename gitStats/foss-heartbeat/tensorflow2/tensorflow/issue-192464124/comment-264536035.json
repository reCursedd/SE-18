{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/264536035", "html_url": "https://github.com/tensorflow/tensorflow/issues/5965#issuecomment-264536035", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5965", "id": 264536035, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDUzNjAzNQ==", "user": {"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-02T19:08:36Z", "updated_at": "2016-12-02T19:08:36Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Probably the best general purpose way (arbitrary data types, arbitrary range) to write unique on gpus is to do a stable sort (that also maintains the index) and then extract the first element from each grouping.</p>\n<p>thrust::sort and thrust::unique would do this.  Thrust is already a part of cuda.  The radix sort that would be used the vast majority of time would naturally take advantage of input that has a limited range by limiting the number of passes of the sort.</p>\n<p>Downside of thrust::sort is that it is out of place and would require additional memory.  I'm not aware of any high performance sort implementations on the GPU that are in-place.</p>", "body_text": "Probably the best general purpose way (arbitrary data types, arbitrary range) to write unique on gpus is to do a stable sort (that also maintains the index) and then extract the first element from each grouping.\nthrust::sort and thrust::unique would do this.  Thrust is already a part of cuda.  The radix sort that would be used the vast majority of time would naturally take advantage of input that has a limited range by limiting the number of passes of the sort.\nDownside of thrust::sort is that it is out of place and would require additional memory.  I'm not aware of any high performance sort implementations on the GPU that are in-place.", "body": "Probably the best general purpose way (arbitrary data types, arbitrary range) to write unique on gpus is to do a stable sort (that also maintains the index) and then extract the first element from each grouping.\r\n\r\nthrust::sort and thrust::unique would do this.  Thrust is already a part of cuda.  The radix sort that would be used the vast majority of time would naturally take advantage of input that has a limited range by limiting the number of passes of the sort.\r\n\r\nDownside of thrust::sort is that it is out of place and would require additional memory.  I'm not aware of any high performance sort implementations on the GPU that are in-place."}