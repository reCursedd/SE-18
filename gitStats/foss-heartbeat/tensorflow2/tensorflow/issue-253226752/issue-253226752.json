{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12641", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12641/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12641/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12641/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12641", "id": 253226752, "node_id": "MDU6SXNzdWUyNTMyMjY3NTI=", "number": 12641, "title": "Improve all-in-memory file copy architecture (Python at least)", "user": {"login": "quaeler", "id": 22581048, "node_id": "MDQ6VXNlcjIyNTgxMDQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/22581048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quaeler", "html_url": "https://github.com/quaeler", "followers_url": "https://api.github.com/users/quaeler/followers", "following_url": "https://api.github.com/users/quaeler/following{/other_user}", "gists_url": "https://api.github.com/users/quaeler/gists{/gist_id}", "starred_url": "https://api.github.com/users/quaeler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quaeler/subscriptions", "organizations_url": "https://api.github.com/users/quaeler/orgs", "repos_url": "https://api.github.com/users/quaeler/repos", "events_url": "https://api.github.com/users/quaeler/events{/privacy}", "received_events_url": "https://api.github.com/users/quaeler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2017-08-28T04:58:44Z", "updated_at": "2018-02-08T00:46:32Z", "closed_at": "2018-02-08T00:46:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Current file copy (at least via Python <code>tf.gfile.Copy</code> (<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/platform/gfile.py#L22\">gfile.py</a>\u2192 <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.py#L371\">file_io.py</a> \u2192 <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.i#L113\">file_io.i</a>)) involves copying the source contents into memory, and then writing memory to the destination. For scenarios like <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"253147041\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12630\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12630/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12630\">#12630</a> which is working with an 11GB asset, this is unacceptable design.</p>\n<p><code>file_system.h</code>'s <code>WritableFile</code> is not stubbed to allow anything like a streaming, though its <code>RandomAccessFile</code> is. (not entirely, entirely, true - i suppose <code>WriteableFile.Append(const StringPiece&amp; data)</code> could be employed in a streamable fashion -ish.)</p>\n<p>To cull the Python low hanging fruit, at least, please implement <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.i#L113\">file_io.i</a> using a regular streaming design instead of the above described current design.</p>", "body_text": "Current file copy (at least via Python tf.gfile.Copy (gfile.py\u2192 file_io.py \u2192 file_io.i)) involves copying the source contents into memory, and then writing memory to the destination. For scenarios like #12630 which is working with an 11GB asset, this is unacceptable design.\nfile_system.h's WritableFile is not stubbed to allow anything like a streaming, though its RandomAccessFile is. (not entirely, entirely, true - i suppose WriteableFile.Append(const StringPiece& data) could be employed in a streamable fashion -ish.)\nTo cull the Python low hanging fruit, at least, please implement file_io.i using a regular streaming design instead of the above described current design.", "body": "Current file copy (at least via Python `tf.gfile.Copy` ([gfile.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/platform/gfile.py#L22)\u2192 [file_io.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.py#L371) \u2192 [file_io.i](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.i#L113))) involves copying the source contents into memory, and then writing memory to the destination. For scenarios like https://github.com/tensorflow/tensorflow/issues/12630 which is working with an 11GB asset, this is unacceptable design.\r\n\r\n`file_system.h`'s `WritableFile` is not stubbed to allow anything like a streaming, though its `RandomAccessFile` is. (not entirely, entirely, true - i suppose `WriteableFile.Append(const StringPiece& data)` could be employed in a streamable fashion -ish.)\r\n\r\nTo cull the Python low hanging fruit, at least, please implement [file_io.i](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/io/file_io.i#L113) using a regular streaming design instead of the above described current design."}