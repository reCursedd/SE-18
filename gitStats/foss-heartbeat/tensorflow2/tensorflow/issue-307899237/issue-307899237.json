{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17941", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17941/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17941/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17941/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17941", "id": 307899237, "node_id": "MDU6SXNzdWUzMDc4OTkyMzc=", "number": 17941, "title": "initial  large tf.variable error", "user": {"login": "B3N50N", "id": 11819683, "node_id": "MDQ6VXNlcjExODE5Njgz", "avatar_url": "https://avatars0.githubusercontent.com/u/11819683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/B3N50N", "html_url": "https://github.com/B3N50N", "followers_url": "https://api.github.com/users/B3N50N/followers", "following_url": "https://api.github.com/users/B3N50N/following{/other_user}", "gists_url": "https://api.github.com/users/B3N50N/gists{/gist_id}", "starred_url": "https://api.github.com/users/B3N50N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/B3N50N/subscriptions", "organizations_url": "https://api.github.com/users/B3N50N/orgs", "repos_url": "https://api.github.com/users/B3N50N/repos", "events_url": "https://api.github.com/users/B3N50N/events{/privacy}", "received_events_url": "https://api.github.com/users/B3N50N/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-03-23T04:30:04Z", "updated_at": "2018-05-03T23:49:43Z", "closed_at": "2018-05-03T23:49:43Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>**Have I written custom code: yes</li>\n<li><strong>OS Platform and Distribution Ubuntu 16.04</strong>:</li>\n<li>**TensorFlow installed from source **:</li>\n<li><strong>TensorFlow version 1.6</strong>:</li>\n<li><strong>Python version 3.5</strong>:</li>\n<li><strong>Bazel version 0.11.1</strong>:</li>\n<li><strong>GCC/Compiler version (5)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>when i'm using same code, only the weight variable have different size<br>\nand when weight array is small everything is fine, but when too big it show shape issue</p>\n<h3>Source code / logs</h3>\n<p>souce code:<br>\nwith tf.device('/cpu:0'):<br>\nW_fc1 = weight_variable([32768, 35000],\"W_fc1\")#32768<br>\nb_fc1 = bias_variable([35000],\"b_fc1\")<br>\nh_pool5_flat = tf.reshape(h_pool5, [-1, 16<em>16</em>128])<br>\nh_fc1 = tf.nn.relu(tf.matmul(h_pool5_flat, W_fc1) + b_fc1,name=\"h_fc1\")<br>\nh_fc1_drop = tf.clip_by_value(tf.cast(tf.nn.dropout(tf.cast(h_fc1,tf.float32), keep_prob),tf.float16, name=\"h_fc1_drop\"),min_clip,max_clip, name=\"h_fc1_drop\")<br>\nh_fc1_drop_1 = tf.where(tf.is_nan(h_fc1_drop), tf.constant(min_clip,dtype=tf.float16, shape=h_fc1_drop.shape), h_fc1_drop)</p>\n<p>##down sampleing fc2 layer##<br>\n#with tf.device('/cpu:0'):<br>\nW_fc2 = weight_variable([35000,65536],\"W_fc2\")<br>\nb_fc2 = bias_variable([65536],\"b_fc2\")<br>\nh_fc2 = tf.clip_by_value(tf.nn.relu(tf.matmul(h_fc1_drop_1, W_fc2) + b_fc2),min_clip,max_clip, name=\"h_fc2\")<br>\nh_fc2_1 = tf.where(tf.is_nan(h_fc2), tf.constant(min_clip,dtype=tf.float16, shape=h_fc2.shape), h_fc2)<br>\n..........<br>\nloss = tf.losses.mean_squared_error(y_reshape,prediction_1)<br>\ntrain_step = tf.train.AdamOptimizer(lr).minimize(loss)</p>\n<p>when W_fc1 is as big as the above<br>\nit show the error<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper<br>\nop_def=op_def)<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 3271, in create_op<br>\nop_def=op_def)<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1650, in <strong>init</strong><br>\nself._traceback = self._graph._extract_stack()  # pylint: disable=protected-access</p>\n<p>InvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [35000,65536] rhs shape= [32768,35000]<br>\n[[Node: W_fc2/Adam_1/Assign = Assign[T=DT_HALF, _class=[\"loc:@W_fc2\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](W_fc2/Adam_1, W_fc2/Adam/Initializer/zeros)]]</p>", "body_text": "System information\n\n**Have I written custom code: yes\nOS Platform and Distribution Ubuntu 16.04:\n**TensorFlow installed from source **:\nTensorFlow version 1.6:\nPython version 3.5:\nBazel version 0.11.1:\nGCC/Compiler version (5):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nwhen i'm using same code, only the weight variable have different size\nand when weight array is small everything is fine, but when too big it show shape issue\nSource code / logs\nsouce code:\nwith tf.device('/cpu:0'):\nW_fc1 = weight_variable([32768, 35000],\"W_fc1\")#32768\nb_fc1 = bias_variable([35000],\"b_fc1\")\nh_pool5_flat = tf.reshape(h_pool5, [-1, 1616128])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool5_flat, W_fc1) + b_fc1,name=\"h_fc1\")\nh_fc1_drop = tf.clip_by_value(tf.cast(tf.nn.dropout(tf.cast(h_fc1,tf.float32), keep_prob),tf.float16, name=\"h_fc1_drop\"),min_clip,max_clip, name=\"h_fc1_drop\")\nh_fc1_drop_1 = tf.where(tf.is_nan(h_fc1_drop), tf.constant(min_clip,dtype=tf.float16, shape=h_fc1_drop.shape), h_fc1_drop)\n##down sampleing fc2 layer##\n#with tf.device('/cpu:0'):\nW_fc2 = weight_variable([35000,65536],\"W_fc2\")\nb_fc2 = bias_variable([65536],\"b_fc2\")\nh_fc2 = tf.clip_by_value(tf.nn.relu(tf.matmul(h_fc1_drop_1, W_fc2) + b_fc2),min_clip,max_clip, name=\"h_fc2\")\nh_fc2_1 = tf.where(tf.is_nan(h_fc2), tf.constant(min_clip,dtype=tf.float16, shape=h_fc2.shape), h_fc2)\n..........\nloss = tf.losses.mean_squared_error(y_reshape,prediction_1)\ntrain_step = tf.train.AdamOptimizer(lr).minimize(loss)\nwhen W_fc1 is as big as the above\nit show the error\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\nop_def=op_def)\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 3271, in create_op\nop_def=op_def)\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1650, in init\nself._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\nInvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [35000,65536] rhs shape= [32768,35000]\n[[Node: W_fc2/Adam_1/Assign = Assign[T=DT_HALF, _class=[\"loc:@W_fc2\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](W_fc2/Adam_1, W_fc2/Adam/Initializer/zeros)]]", "body": "### System information\r\n- **Have I written custom code: yes \r\n- **OS Platform and Distribution Ubuntu 16.04**:\r\n- **TensorFlow installed from source **:\r\n- **TensorFlow version 1.6**:\r\n- **Python version 3.5**: \r\n- **Bazel version 0.11.1**:\r\n- **GCC/Compiler version (5)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n### Describe the problem\r\nwhen i'm using same code, only the weight variable have different size\r\nand when weight array is small everything is fine, but when too big it show shape issue\r\n\r\n### Source code / logs\r\nsouce code:\r\nwith tf.device('/cpu:0'):\r\n\tW_fc1 = weight_variable([32768, 35000],\"W_fc1\")#32768\r\n\tb_fc1 = bias_variable([35000],\"b_fc1\")\r\n\th_pool5_flat = tf.reshape(h_pool5, [-1, 16*16*128])\r\n\th_fc1 = tf.nn.relu(tf.matmul(h_pool5_flat, W_fc1) + b_fc1,name=\"h_fc1\")\r\n\th_fc1_drop = tf.clip_by_value(tf.cast(tf.nn.dropout(tf.cast(h_fc1,tf.float32), keep_prob),tf.float16, name=\"h_fc1_drop\"),min_clip,max_clip, name=\"h_fc1_drop\")\r\n\th_fc1_drop_1 = tf.where(tf.is_nan(h_fc1_drop), tf.constant(min_clip,dtype=tf.float16, shape=h_fc1_drop.shape), h_fc1_drop)\r\n\r\n##down sampleing fc2 layer##\r\n#with tf.device('/cpu:0'):\r\n\tW_fc2 = weight_variable([35000,65536],\"W_fc2\")\r\n\tb_fc2 = bias_variable([65536],\"b_fc2\")\r\n\th_fc2 = tf.clip_by_value(tf.nn.relu(tf.matmul(h_fc1_drop_1, W_fc2) + b_fc2),min_clip,max_clip, name=\"h_fc2\")\r\n\th_fc2_1 = tf.where(tf.is_nan(h_fc2), tf.constant(min_clip,dtype=tf.float16, shape=h_fc2.shape), h_fc2)\r\n..........\r\nloss = tf.losses.mean_squared_error(y_reshape,prediction_1)\r\ntrain_step = tf.train.AdamOptimizer(lr).minimize(loss)\r\n\r\nwhen W_fc1 is as big as the above \r\nit show the error\r\n   File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\r\n    op_def=op_def)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 3271, in create_op\r\n    op_def=op_def)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1650, in __init__\r\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\r\n\r\nInvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [35000,65536] rhs shape= [32768,35000]\r\n         [[Node: W_fc2/Adam_1/Assign = Assign[T=DT_HALF, _class=[\"loc:@W_fc2\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](W_fc2/Adam_1, W_fc2/Adam/Initializer/zeros)]]\r\n"}