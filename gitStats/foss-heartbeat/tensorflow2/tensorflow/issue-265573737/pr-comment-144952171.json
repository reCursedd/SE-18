{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/144952171", "pull_request_review_id": 69680742, "id": 144952171, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDk1MjE3MQ==", "diff_hunk": "@@ -0,0 +1,136 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+// See docs in ../ops/math_ops.cc.\n+\n+#define EIGEN_USE_THREADS\n+\n+#include \"tensorflow/core/kernels/histogram_op.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/lib/core/threadpool.h\"\n+#include \"tensorflow/core/platform/types.h\"\n+\n+namespace tensorflow {\n+\n+typedef Eigen::ThreadPoolDevice CPUDevice;\n+typedef Eigen::GpuDevice GPUDevice;\n+\n+namespace functor {\n+\n+template <typename T, typename Tout>\n+struct HistogramFixedWidthFunctor<CPUDevice, T, Tout> {\n+  static Status Compute(OpKernelContext* context,\n+                        const typename TTypes<T, 1>::ConstTensor& values,\n+                        const typename TTypes<T, 1>::ConstTensor& value_range,\n+                        int32 nbins, typename TTypes<Tout, 1>::Tensor& out) {\n+    const CPUDevice& d = context->eigen_device<CPUDevice>();\n+\n+    Tensor temp_tensor;\n+    TF_RETURN_IF_ERROR(context->allocate_temp(DataTypeToEnum<int32>::value,\n+                                              TensorShape({values.size()}),\n+                                              &temp_tensor));\n+    auto temp = temp_tensor.flat<int32>();\n+\n+    const double step = static_cast<double>(value_range(1) - value_range(0)) /\n+                        static_cast<double>(nbins);\n+\n+    // The calculation is done by finding the slot of each value in `values`.\n+    // With [a, b]:\n+    //   step = (b - a) / nbins\n+    //   (x - a) / step\n+    // , then the entries are mapped to output.\n+    temp.device(d) =\n+        ((values.cwiseMax(value_range(0)) - values.constant(value_range(0)))\n+             .template cast<double>() /\n+         step)\n+            .template cast<int32>()\n+            .cwiseMin(nbins - 1);\n+\n+    out.setZero();\n+    for (int32 i = 0; i < temp.size(); i++) {\n+      out(temp(i)) += Tout(1);\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+}  // namespace functor\n+\n+template <typename Device, typename T, typename Tout>\n+class HistogramFixedWidthOp : public OpKernel {\n+ public:\n+  explicit HistogramFixedWidthOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n+\n+  void Compute(OpKernelContext* ctx) override {\n+    const Tensor& values_tensor = ctx->input(0);\n+    const Tensor& value_range_tensor = ctx->input(1);\n+    const Tensor& nbins_tensor = ctx->input(2);\n+\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(value_range_tensor.shape()),\n+                errors::InvalidArgument(\"value_range should be a vector.\"));\n+    OP_REQUIRES(ctx, (value_range_tensor.shape().num_elements() == 2),\n+                errors::InvalidArgument(\n+                    \"value_range should be a vector of 2 elements.\"));\n+    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(nbins_tensor.shape()),\n+                errors::InvalidArgument(\"nbins should be a scalar.\"));\n+", "path": "tensorflow/core/kernels/histogram_op.cc", "position": null, "original_position": 90, "commit_id": "0569ad5fe063b58a5671eb6df6e0fa932386ba87", "original_commit_id": "5368cf0595e0593510da753b85995ae4c967b0c2", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "body": "Thanks. Done.", "created_at": "2017-10-16T20:00:17Z", "updated_at": "2017-10-16T20:00:17Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13731#discussion_r144952171", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13731", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/144952171"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13731#discussion_r144952171"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13731"}}, "body_html": "<p>Thanks. Done.</p>", "body_text": "Thanks. Done.", "in_reply_to_id": 144906677}