{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13731", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13731/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13731/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13731/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/13731", "id": 265573737, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ2NjUwNjc4", "number": 13731, "title": "Add GPU and CPU implementation of `tf.histogram_fixed_width`.", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2017-10-15T13:53:47Z", "updated_at": "2017-10-17T11:19:31Z", "closed_at": "2017-10-17T00:19:27Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13731", "html_url": "https://github.com/tensorflow/tensorflow/pull/13731", "diff_url": "https://github.com/tensorflow/tensorflow/pull/13731.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/13731.patch"}, "body_html": "<p>This fix adds the GPU and CPU implementation of <code>tf.histogram_fixed_width</code>.</p>\n<p>The previous implementation was done in python. This fix adds C++ kernel for GPU and CPU.</p>\n<p>The GPU version uses <code>CUB</code>'s API <code>cub::DeviceHistogram::HistogramRange</code>. The <code>range</code> is  constructed from the upper/lower limit and step size. (<code>HistogramEven</code> could not be used directly as the edge case is different).</p>\n<p>The CPU version uses a transform to map the input into the bucket index, then did a bin count.</p>\n<p>Note the output type of int64 on GPU is not supported yet as atomicAdd has no int64 at the moment.</p>\n<p>Signed-off-by: Yong Tang <a href=\"mailto:yong.tang.github@outlook.com\">yong.tang.github@outlook.com</a></p>", "body_text": "This fix adds the GPU and CPU implementation of tf.histogram_fixed_width.\nThe previous implementation was done in python. This fix adds C++ kernel for GPU and CPU.\nThe GPU version uses CUB's API cub::DeviceHistogram::HistogramRange. The range is  constructed from the upper/lower limit and step size. (HistogramEven could not be used directly as the edge case is different).\nThe CPU version uses a transform to map the input into the bucket index, then did a bin count.\nNote the output type of int64 on GPU is not supported yet as atomicAdd has no int64 at the moment.\nSigned-off-by: Yong Tang yong.tang.github@outlook.com", "body": "This fix adds the GPU and CPU implementation of `tf.histogram_fixed_width`.\r\n\r\nThe previous implementation was done in python. This fix adds C++ kernel for GPU and CPU.\r\n\r\nThe GPU version uses `CUB`'s API `cub::DeviceHistogram::HistogramRange`. The `range` is  constructed from the upper/lower limit and step size. (`HistogramEven` could not be used directly as the edge case is different).\r\n\r\nThe CPU version uses a transform to map the input into the bucket index, then did a bin count.\r\n\r\nNote the output type of int64 on GPU is not supported yet as atomicAdd has no int64 at the moment.\r\n\r\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>"}