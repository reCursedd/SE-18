{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9370", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9370/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9370/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9370/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9370", "id": 223445379, "node_id": "MDU6SXNzdWUyMjM0NDUzNzk=", "number": 9370, "title": "Possibly serious bug in cuDNN RNNParamsSaveable", "user": {"login": "alquraishi", "id": 5205204, "node_id": "MDQ6VXNlcjUyMDUyMDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5205204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alquraishi", "html_url": "https://github.com/alquraishi", "followers_url": "https://api.github.com/users/alquraishi/followers", "following_url": "https://api.github.com/users/alquraishi/following{/other_user}", "gists_url": "https://api.github.com/users/alquraishi/gists{/gist_id}", "starred_url": "https://api.github.com/users/alquraishi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alquraishi/subscriptions", "organizations_url": "https://api.github.com/users/alquraishi/orgs", "repos_url": "https://api.github.com/users/alquraishi/repos", "events_url": "https://api.github.com/users/alquraishi/events{/privacy}", "received_events_url": "https://api.github.com/users/alquraishi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2017-04-21T17:19:00Z", "updated_at": "2018-01-06T19:50:32Z", "closed_at": "2018-01-06T19:50:32Z", "author_association": "NONE", "body_html": "<p><code>RNNParamsSaveable</code> appears to only save half of the weights when the RNN is bidirectional. See below.</p>\n<p>When the RNN is unidirectional, <code>model.params_size()</code> matches the total size of weights + biases returned by <code>model.params_to_canonical(params)</code></p>\n<pre><code>model = cudnn_rnn_ops.CudnnLSTM(num_layers=1, num_units=100, input_size=20, direction='unidirectional')\nparams = tf.get_variable('cudnn_rnn_params', initializer=tf.random_uniform([model.params_size()]), validate_shape=False)\nmodel.params_size().eval(session=sess) # returns 48800\nsum([wts.eval(session=sess).shape[0] for wtss in model.params_to_canonical(params) for wts in wtss]) # returns 48800\n</code></pre>\n<p>On the other hand, when the RNN is bidirectional, <code>model.params_size()</code> returns twice the size of the unidirectional case, which makes sense, but the size of <code>model.params_to_canonical(params)</code> is unchanged.</p>\n<pre><code>model = cudnn_rnn_ops.CudnnLSTM(num_layers=1, num_units=100, input_size=20, direction='bidirectional')\nparams = tf.get_variable('cudnn_rnn_params', initializer=tf.random_uniform([model.params_size()]), validate_shape=False)\nmodel.params_size().eval(session=sess) # returns 97600\nsum([wts.eval(session=sess).shape[0] for wtss in model.params_to_canonical(params) for wts in wtss]) # returns 48800\n</code></pre>\n<p>I believe this may have been missed by tests because, as this <a href=\"https://github.com/tensorflow/tensorflow/blob/f0f7a1ef63c47075e3eb7eaeeb3588d057f3171d/tensorflow/contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L37\">TODO</a> suggests, both the canonical and non-canonical versions are being saved and restored, and so even if only half the weights are being restored from the canonical version, the non-canonical weights can compensate and hide the problem.</p>\n<p>Am I missing something?</p>", "body_text": "RNNParamsSaveable appears to only save half of the weights when the RNN is bidirectional. See below.\nWhen the RNN is unidirectional, model.params_size() matches the total size of weights + biases returned by model.params_to_canonical(params)\nmodel = cudnn_rnn_ops.CudnnLSTM(num_layers=1, num_units=100, input_size=20, direction='unidirectional')\nparams = tf.get_variable('cudnn_rnn_params', initializer=tf.random_uniform([model.params_size()]), validate_shape=False)\nmodel.params_size().eval(session=sess) # returns 48800\nsum([wts.eval(session=sess).shape[0] for wtss in model.params_to_canonical(params) for wts in wtss]) # returns 48800\n\nOn the other hand, when the RNN is bidirectional, model.params_size() returns twice the size of the unidirectional case, which makes sense, but the size of model.params_to_canonical(params) is unchanged.\nmodel = cudnn_rnn_ops.CudnnLSTM(num_layers=1, num_units=100, input_size=20, direction='bidirectional')\nparams = tf.get_variable('cudnn_rnn_params', initializer=tf.random_uniform([model.params_size()]), validate_shape=False)\nmodel.params_size().eval(session=sess) # returns 97600\nsum([wts.eval(session=sess).shape[0] for wtss in model.params_to_canonical(params) for wts in wtss]) # returns 48800\n\nI believe this may have been missed by tests because, as this TODO suggests, both the canonical and non-canonical versions are being saved and restored, and so even if only half the weights are being restored from the canonical version, the non-canonical weights can compensate and hide the problem.\nAm I missing something?", "body": "`RNNParamsSaveable` appears to only save half of the weights when the RNN is bidirectional. See below.\r\n\r\nWhen the RNN is unidirectional, `model.params_size()` matches the total size of weights + biases returned by `model.params_to_canonical(params)`\r\n\r\n```\r\nmodel = cudnn_rnn_ops.CudnnLSTM(num_layers=1, num_units=100, input_size=20, direction='unidirectional')\r\nparams = tf.get_variable('cudnn_rnn_params', initializer=tf.random_uniform([model.params_size()]), validate_shape=False)\r\nmodel.params_size().eval(session=sess) # returns 48800\r\nsum([wts.eval(session=sess).shape[0] for wtss in model.params_to_canonical(params) for wts in wtss]) # returns 48800\r\n```\r\n\r\nOn the other hand, when the RNN is bidirectional, `model.params_size()` returns twice the size of the unidirectional case, which makes sense, but the size of `model.params_to_canonical(params)` is unchanged.\r\n\r\n```\r\nmodel = cudnn_rnn_ops.CudnnLSTM(num_layers=1, num_units=100, input_size=20, direction='bidirectional')\r\nparams = tf.get_variable('cudnn_rnn_params', initializer=tf.random_uniform([model.params_size()]), validate_shape=False)\r\nmodel.params_size().eval(session=sess) # returns 97600\r\nsum([wts.eval(session=sess).shape[0] for wtss in model.params_to_canonical(params) for wts in wtss]) # returns 48800\r\n```\r\n\r\nI believe this may have been missed by tests because, as this [TODO](https://github.com/tensorflow/tensorflow/blob/f0f7a1ef63c47075e3eb7eaeeb3588d057f3171d/tensorflow/contrib/cudnn_rnn/python/ops/cudnn_rnn_ops.py#L37) suggests, both the canonical and non-canonical versions are being saved and restored, and so even if only half the weights are being restored from the canonical version, the non-canonical weights can compensate and hide the problem.\r\n\r\nAm I missing something?"}