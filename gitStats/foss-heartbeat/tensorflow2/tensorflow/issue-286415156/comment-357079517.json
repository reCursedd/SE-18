{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/357079517", "html_url": "https://github.com/tensorflow/tensorflow/issues/15891#issuecomment-357079517", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15891", "id": 357079517, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzA3OTUxNw==", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-11T22:16:57Z", "updated_at": "2018-01-11T22:18:27Z", "author_association": "NONE", "body_html": "<p>I just now tried adding <code>parallel_iterations=1</code> to my adapted <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"193534788\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/6087\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/6087/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/6087\">#6087</a> test case, but this didn't fix the problem.</p>\n<p>As for the first test case, you can take Parts I and III separately to reproduce the issue:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> division, print_function\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.ops <span class=\"pl-k\">import</span> resource_variable_ops <span class=\"pl-k\">as</span> rr\n\nrs <span class=\"pl-k\">=</span> np.random.RandomState(<span class=\"pl-v\">seed</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>)\nA <span class=\"pl-k\">=</span> rs.normal(<span class=\"pl-v\">size</span> <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>,))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>singular values of A: <span class=\"pl-c1\">%s</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (np.linalg.svd(A, <span class=\"pl-v\">compute_uv</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>),))\nB <span class=\"pl-k\">=</span> rs.normal(<span class=\"pl-v\">size</span> <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>,))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>singular values of B: <span class=\"pl-c1\">%s</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (np.linalg.svd(B, <span class=\"pl-v\">compute_uv</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>),))\n\nA_var <span class=\"pl-k\">=</span> tf.Variable(B)\ninit_A_var_op <span class=\"pl-k\">=</span> tf.assign(A_var, A)\nA_dep <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">9</span>, tf.int32)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">loop_condition</span>(<span class=\"pl-smi\">j</span>, <span class=\"pl-smi\">A_dep</span>):\n    <span class=\"pl-k\">return</span> j <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">1</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">loop_body</span>(<span class=\"pl-smi\">j</span>, <span class=\"pl-smi\">A_dep</span>):\n    <span class=\"pl-k\">with</span> tf.control_dependencies([init_A_var_op]):\n        A_dep <span class=\"pl-k\">=</span> A_dep <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>\n    <span class=\"pl-k\">return</span> j <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, A_dep\n\n_, A_dep <span class=\"pl-k\">=</span> tf.while_loop(loop_condition,\n                         loop_body,\n                         <span class=\"pl-v\">loop_vars</span> <span class=\"pl-k\">=</span> [tf.constant(<span class=\"pl-c1\">0</span>, tf.int32), A_dep],\n                         <span class=\"pl-v\">parallel_iterations</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>,\n                         <span class=\"pl-v\">back_prop</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>)\n\n<span class=\"pl-k\">with</span> tf.control_dependencies([A_dep]):\n    var_s <span class=\"pl-k\">=</span> tf.svd(A_var, <span class=\"pl-v\">compute_uv</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> session:\n    session.run(tf.global_variables_initializer())\n    computed_s, computed_A_dep <span class=\"pl-k\">=</span> session.run([var_s, A_dep])\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>computed_s = <span class=\"pl-c1\">%s</span>, computed_A_dep = <span class=\"pl-c1\">%d</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (computed_s, computed_A_dep,))</pre></div>\n<p>(Alternatively, take Parts I and IV separately.)</p>\n<p><code>computed_s</code> is the vector of singular values of B, whereas I am expecting that it will be the singular values of A.</p>", "body_text": "I just now tried adding parallel_iterations=1 to my adapted #6087 test case, but this didn't fix the problem.\nAs for the first test case, you can take Parts I and III separately to reproduce the issue:\nfrom __future__ import division, print_function\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.python.ops import resource_variable_ops as rr\n\nrs = np.random.RandomState(seed = 2)\nA = rs.normal(size = (10, 10,))\nprint('singular values of A: %s' % (np.linalg.svd(A, compute_uv = False),))\nB = rs.normal(size = (10, 10,))\nprint('singular values of B: %s' % (np.linalg.svd(B, compute_uv = False),))\n\nA_var = tf.Variable(B)\ninit_A_var_op = tf.assign(A_var, A)\nA_dep = tf.constant(9, tf.int32)\n\ndef loop_condition(j, A_dep):\n    return j < 1\ndef loop_body(j, A_dep):\n    with tf.control_dependencies([init_A_var_op]):\n        A_dep = A_dep + 1\n    return j + 1, A_dep\n\n_, A_dep = tf.while_loop(loop_condition,\n                         loop_body,\n                         loop_vars = [tf.constant(0, tf.int32), A_dep],\n                         parallel_iterations = 1,\n                         back_prop = False)\n\nwith tf.control_dependencies([A_dep]):\n    var_s = tf.svd(A_var, compute_uv = False)\nwith tf.Session() as session:\n    session.run(tf.global_variables_initializer())\n    computed_s, computed_A_dep = session.run([var_s, A_dep])\nprint('computed_s = %s, computed_A_dep = %d' % (computed_s, computed_A_dep,))\n(Alternatively, take Parts I and IV separately.)\ncomputed_s is the vector of singular values of B, whereas I am expecting that it will be the singular values of A.", "body": "I just now tried adding `parallel_iterations=1` to my adapted #6087 test case, but this didn't fix the problem.\r\n\r\nAs for the first test case, you can take Parts I and III separately to reproduce the issue:\r\n\r\n```python\r\nfrom __future__ import division, print_function\r\nimport numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow.python.ops import resource_variable_ops as rr\r\n\r\nrs = np.random.RandomState(seed = 2)\r\nA = rs.normal(size = (10, 10,))\r\nprint('singular values of A: %s' % (np.linalg.svd(A, compute_uv = False),))\r\nB = rs.normal(size = (10, 10,))\r\nprint('singular values of B: %s' % (np.linalg.svd(B, compute_uv = False),))\r\n\r\nA_var = tf.Variable(B)\r\ninit_A_var_op = tf.assign(A_var, A)\r\nA_dep = tf.constant(9, tf.int32)\r\n\r\ndef loop_condition(j, A_dep):\r\n    return j < 1\r\ndef loop_body(j, A_dep):\r\n    with tf.control_dependencies([init_A_var_op]):\r\n        A_dep = A_dep + 1\r\n    return j + 1, A_dep\r\n\r\n_, A_dep = tf.while_loop(loop_condition,\r\n                         loop_body,\r\n                         loop_vars = [tf.constant(0, tf.int32), A_dep],\r\n                         parallel_iterations = 1,\r\n                         back_prop = False)\r\n\r\nwith tf.control_dependencies([A_dep]):\r\n    var_s = tf.svd(A_var, compute_uv = False)\r\nwith tf.Session() as session:\r\n    session.run(tf.global_variables_initializer())\r\n    computed_s, computed_A_dep = session.run([var_s, A_dep])\r\nprint('computed_s = %s, computed_A_dep = %d' % (computed_s, computed_A_dep,))\r\n```\r\n\r\n(Alternatively, take Parts I and IV separately.)\r\n\r\n`computed_s` is the vector of singular values of B, whereas I am expecting that it will be the singular values of A."}