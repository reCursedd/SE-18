{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/259170351", "html_url": "https://github.com/tensorflow/tensorflow/issues/566#issuecomment-259170351", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/566", "id": 259170351, "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTE3MDM1MQ==", "user": {"login": "Fenugreek", "id": 3323801, "node_id": "MDQ6VXNlcjMzMjM4MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3323801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fenugreek", "html_url": "https://github.com/Fenugreek", "followers_url": "https://api.github.com/users/Fenugreek/followers", "following_url": "https://api.github.com/users/Fenugreek/following{/other_user}", "gists_url": "https://api.github.com/users/Fenugreek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fenugreek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fenugreek/subscriptions", "organizations_url": "https://api.github.com/users/Fenugreek/orgs", "repos_url": "https://api.github.com/users/Fenugreek/repos", "events_url": "https://api.github.com/users/Fenugreek/events{/privacy}", "received_events_url": "https://api.github.com/users/Fenugreek/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-08T15:38:45Z", "updated_at": "2016-11-08T15:39:39Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I am in the same boat as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16368350\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/davefairtex\">@davefairtex</a> . So far I've been using a workaround: a bash script wrapping the call to my python script, filtering out the unwanted messages. Let me share it here, in case it helps someone:</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#!</span>/bin/bash</span>\npython <span class=\"pl-smi\">$*</span> <span class=\"pl-k\">3&gt;&amp;1</span> <span class=\"pl-k\">1&gt;&amp;2</span> <span class=\"pl-k\">2&gt;&amp;3</span> <span class=\"pl-k\">3&gt;&amp;</span>- <span class=\"pl-k\">|</span> grep -v ^I<span class=\"pl-cce\">\\ </span><span class=\"pl-k\">|</span> grep -v ^pciBusID <span class=\"pl-k\">|</span> grep -v ^major: <span class=\"pl-k\">|</span> grep -v ^name: <span class=\"pl-k\">|</span>grep -v ^Total<span class=\"pl-cce\">\\ </span>memory:<span class=\"pl-k\">|</span>grep -v ^Free<span class=\"pl-cce\">\\ </span>memory:</pre></div>\n<p>I called the script <code>tf.sh</code> and simpy preface python script calls with it. e.g. <code>tf.sh my_script.py --option option1 arg1</code>.</p>\n<p>A bit non-trivial as the naive approach using <code>|&amp;</code> and then <code>grep -v</code> ends up buffering <code>STDOUT</code>, at least on my system.</p>", "body_text": "I am in the same boat as @davefairtex . So far I've been using a workaround: a bash script wrapping the call to my python script, filtering out the unwanted messages. Let me share it here, in case it helps someone:\n#!/bin/bash\npython $* 3>&1 1>&2 2>&3 3>&- | grep -v ^I\\ | grep -v ^pciBusID | grep -v ^major: | grep -v ^name: |grep -v ^Total\\ memory:|grep -v ^Free\\ memory:\nI called the script tf.sh and simpy preface python script calls with it. e.g. tf.sh my_script.py --option option1 arg1.\nA bit non-trivial as the naive approach using |& and then grep -v ends up buffering STDOUT, at least on my system.", "body": "I am in the same boat as @davefairtex . So far I've been using a workaround: a bash script wrapping the call to my python script, filtering out the unwanted messages. Let me share it here, in case it helps someone:\n\n``` bash\n#!/bin/bash\npython $* 3>&1 1>&2 2>&3 3>&- | grep -v ^I\\ | grep -v ^pciBusID | grep -v ^major: | grep -v ^name: |grep -v ^Total\\ memory:|grep -v ^Free\\ memory:\n```\n\nI called the script `tf.sh` and simpy preface python script calls with it. e.g. `tf.sh my_script.py --option option1 arg1`.\n\nA bit non-trivial as the naive approach using `|&` and then `grep -v` ends up buffering `STDOUT`, at least on my system.\n"}