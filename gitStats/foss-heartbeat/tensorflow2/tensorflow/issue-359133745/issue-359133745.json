{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22214", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22214/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22214/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22214/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22214", "id": 359133745, "node_id": "MDU6SXNzdWUzNTkxMzM3NDU=", "number": 22214, "title": "C++ API: tensorflow::ops::Mul causes read access violation when second attribute is int constant", "user": {"login": "GPhilo", "id": 4441724, "node_id": "MDQ6VXNlcjQ0NDE3MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4441724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GPhilo", "html_url": "https://github.com/GPhilo", "followers_url": "https://api.github.com/users/GPhilo/followers", "following_url": "https://api.github.com/users/GPhilo/following{/other_user}", "gists_url": "https://api.github.com/users/GPhilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/GPhilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GPhilo/subscriptions", "organizations_url": "https://api.github.com/users/GPhilo/orgs", "repos_url": "https://api.github.com/users/GPhilo/repos", "events_url": "https://api.github.com/users/GPhilo/events{/privacy}", "received_events_url": "https://api.github.com/users/GPhilo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-09-11T16:53:53Z", "updated_at": "2018-11-12T18:51:58Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes, see below</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: C++ API compiled from source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.10.0</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: Compiled via CMake</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: VS 2015</li>\n<li><strong>CUDA/cuDNN version</strong>: 9/7.0.5</li>\n<li><strong>GPU model and memory</strong>: GTX 1080, 8GBs</li>\n<li><strong>Exact command to reproduce</strong>: run the script</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>It seems <code>tensorflow::ops::Mul</code> accepts arguments of different type ad then crashes during <code>Run()</code>.</p>\n<p>Take this sample program:</p>\n<pre><code>// dunno if all are needed, some may be redundant for this small sample\n#include &lt;tensorflow/cc/ops/const_op.h&gt;\n#include &lt;tensorflow/cc/ops/image_ops.h&gt;\n#include &lt;tensorflow/cc/ops/standard_ops.h&gt;\n#include &lt;tensorflow/core/public/session.h&gt;\n#include &lt;tensorflow/core/platform/init_main.h&gt;\n#include &lt;tensorflow/cc/client/client_session.h&gt;\n\nint main(int argc, char* argv[])\n{\n    tensorflow::port::InitMain(argv[0], &amp;argc, &amp;argv);\n    auto root = tensorflow::Scope::NewRootScope();\n    auto input = tensorflow::ops::Placeholder(root, tensorflow::DataType::DT_UINT8);\n    auto id = tensorflow::ops::Identity(root, input); // just to check we get this far before the error occurs\n    auto to_float = tensorflow::ops::Cast(root, id, tensorflow::DataType::DT_FLOAT);\n    auto mul = tensorflow::ops::Mul(root, to_float, { -1 }); // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n    tensorflow::ClientSession session(root);\n\n    // Run net\n    std::vector&lt;tensorflow::Tensor&gt; outputs;\n    tensorflow::Status run_status = session.Run({ {input, {(uint8_t)42, (uint8_t)35}} }, { id, mul }, &amp;outputs);\n    std::cout &lt;&lt; \"Run status: \" &lt;&lt; run_status &lt;&lt; std::endl;\n    std::cout &lt;&lt; outputs[0].DebugString() &lt;&lt; std::endl;\n    std::cout &lt;&lt; outputs[1].DebugString() &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>\n<p>It compiles fine but it will throw an \"Access Violation reading location 0x0000000000000050\" when executing <code>Run()</code>.</p>\n<p>Changing the marked line to<br>\n<code>auto mul = tensorflow::ops::Mul(root, to_float, { -1.0f });</code><br>\n(i.e., just changing the numerical constant in the second argument from int to float) fixes the error and produces the proper output.</p>\n<p>I'm not sure whether this is a bug or my error for passing two tensors with different types, but either way IMHO this should probably emit a warning at graph construction time (or prevent compilation altogether, which would be the better solution).</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, see below\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): C++ API compiled from source\nTensorFlow version (use command below): 1.10.0\nPython version: 3.5\nBazel version (if compiling from source): Compiled via CMake\nGCC/Compiler version (if compiling from source): VS 2015\nCUDA/cuDNN version: 9/7.0.5\nGPU model and memory: GTX 1080, 8GBs\nExact command to reproduce: run the script\n\nDescribe the problem\nIt seems tensorflow::ops::Mul accepts arguments of different type ad then crashes during Run().\nTake this sample program:\n// dunno if all are needed, some may be redundant for this small sample\n#include <tensorflow/cc/ops/const_op.h>\n#include <tensorflow/cc/ops/image_ops.h>\n#include <tensorflow/cc/ops/standard_ops.h>\n#include <tensorflow/core/public/session.h>\n#include <tensorflow/core/platform/init_main.h>\n#include <tensorflow/cc/client/client_session.h>\n\nint main(int argc, char* argv[])\n{\n    tensorflow::port::InitMain(argv[0], &argc, &argv);\n    auto root = tensorflow::Scope::NewRootScope();\n    auto input = tensorflow::ops::Placeholder(root, tensorflow::DataType::DT_UINT8);\n    auto id = tensorflow::ops::Identity(root, input); // just to check we get this far before the error occurs\n    auto to_float = tensorflow::ops::Cast(root, id, tensorflow::DataType::DT_FLOAT);\n    auto mul = tensorflow::ops::Mul(root, to_float, { -1 }); // <<<<<<<<<<<<<<<<<\n\n    tensorflow::ClientSession session(root);\n\n    // Run net\n    std::vector<tensorflow::Tensor> outputs;\n    tensorflow::Status run_status = session.Run({ {input, {(uint8_t)42, (uint8_t)35}} }, { id, mul }, &outputs);\n    std::cout << \"Run status: \" << run_status << std::endl;\n    std::cout << outputs[0].DebugString() << std::endl;\n    std::cout << outputs[1].DebugString() << std::endl;\n\n    return 0;\n}\n\nIt compiles fine but it will throw an \"Access Violation reading location 0x0000000000000050\" when executing Run().\nChanging the marked line to\nauto mul = tensorflow::ops::Mul(root, to_float, { -1.0f });\n(i.e., just changing the numerical constant in the second argument from int to float) fixes the error and produces the proper output.\nI'm not sure whether this is a bug or my error for passing two tensors with different types, but either way IMHO this should probably emit a warning at graph construction time (or prevent compilation altogether, which would be the better solution).", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes, see below\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: C++ API compiled from source\r\n- **TensorFlow version (use command below)**: 1.10.0\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**: Compiled via CMake\r\n- **GCC/Compiler version (if compiling from source)**: VS 2015\r\n- **CUDA/cuDNN version**: 9/7.0.5\r\n- **GPU model and memory**: GTX 1080, 8GBs\r\n- **Exact command to reproduce**: run the script\r\n\r\n### Describe the problem\r\nIt seems `tensorflow::ops::Mul` accepts arguments of different type ad then crashes during `Run()`.\r\n\r\nTake this sample program:\r\n\r\n```\r\n// dunno if all are needed, some may be redundant for this small sample\r\n#include <tensorflow/cc/ops/const_op.h>\r\n#include <tensorflow/cc/ops/image_ops.h>\r\n#include <tensorflow/cc/ops/standard_ops.h>\r\n#include <tensorflow/core/public/session.h>\r\n#include <tensorflow/core/platform/init_main.h>\r\n#include <tensorflow/cc/client/client_session.h>\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    tensorflow::port::InitMain(argv[0], &argc, &argv);\r\n    auto root = tensorflow::Scope::NewRootScope();\r\n    auto input = tensorflow::ops::Placeholder(root, tensorflow::DataType::DT_UINT8);\r\n    auto id = tensorflow::ops::Identity(root, input); // just to check we get this far before the error occurs\r\n    auto to_float = tensorflow::ops::Cast(root, id, tensorflow::DataType::DT_FLOAT);\r\n    auto mul = tensorflow::ops::Mul(root, to_float, { -1 }); // <<<<<<<<<<<<<<<<<\r\n\r\n    tensorflow::ClientSession session(root);\r\n\r\n    // Run net\r\n    std::vector<tensorflow::Tensor> outputs;\r\n    tensorflow::Status run_status = session.Run({ {input, {(uint8_t)42, (uint8_t)35}} }, { id, mul }, &outputs);\r\n    std::cout << \"Run status: \" << run_status << std::endl;\r\n    std::cout << outputs[0].DebugString() << std::endl;\r\n    std::cout << outputs[1].DebugString() << std::endl;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nIt compiles fine but it will throw an \"Access Violation reading location 0x0000000000000050\" when executing `Run()`.\r\n\r\nChanging the marked line to\r\n`auto mul = tensorflow::ops::Mul(root, to_float, { -1.0f });`\r\n(i.e., just changing the numerical constant in the second argument from int to float) fixes the error and produces the proper output.\r\n\r\nI'm not sure whether this is a bug or my error for passing two tensors with different types, but either way IMHO this should probably emit a warning at graph construction time (or prevent compilation altogether, which would be the better solution).\r\n"}