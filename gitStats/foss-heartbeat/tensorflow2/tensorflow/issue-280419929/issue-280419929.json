{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15206", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15206/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15206/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15206/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15206", "id": 280419929, "node_id": "MDU6SXNzdWUyODA0MTk5Mjk=", "number": 15206, "title": "Unusual memory allocation while running \"tf.assign\"", "user": {"login": "stecklin", "id": 6171989, "node_id": "MDQ6VXNlcjYxNzE5ODk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6171989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stecklin", "html_url": "https://github.com/stecklin", "followers_url": "https://api.github.com/users/stecklin/followers", "following_url": "https://api.github.com/users/stecklin/following{/other_user}", "gists_url": "https://api.github.com/users/stecklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/stecklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stecklin/subscriptions", "organizations_url": "https://api.github.com/users/stecklin/orgs", "repos_url": "https://api.github.com/users/stecklin/repos", "events_url": "https://api.github.com/users/stecklin/events{/privacy}", "received_events_url": "https://api.github.com/users/stecklin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2017-12-08T09:03:33Z", "updated_at": "2018-04-02T15:07:08Z", "closed_at": "2018-04-02T15:07:07Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code</strong>: Yes</li>\n<li><strong>OS Platform and Distribution</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from</strong>: binary</li>\n<li><strong>TensorFlow version</strong>: 1.4.0</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version</strong>: 0.8.1</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0.61 / 6.0.21</li>\n<li><strong>GPU model and memory</strong>: Tesla K80</li>\n<li><strong>Exact command to reproduce</strong>: run the script attached below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>In the minimal example below, I am observing an increase in RAM usage when calling <code>assign_new_values</code>. Strangely, the extend depends on the dataset size.<br>\nI see no obvious connection between the dataset and the variables that get assigned. Commenting out either the iterator or the <code>sess.run(assign_op, ...)</code> prevents additional memory allocation.</p>\n<p>How is this possible?</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c1\">DATASET_SIZE</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1000000</span>\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">create_dataset</span>():\n    image_paths <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">DATASET_SIZE</span> <span class=\"pl-k\">*</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>image.jpg<span class=\"pl-pds\">'</span></span>])\n    labels <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">DATASET_SIZE</span> <span class=\"pl-k\">*</span> [<span class=\"pl-c1\">0</span>])\n    dataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices((image_paths, labels))\n    <span class=\"pl-k\">return</span> dataset\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">create_variables</span>():\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">20</span>):\n       tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>var_<span class=\"pl-c1\">%d</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> i, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">32</span>])\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">create_assign_ops</span>():\n    <span class=\"pl-k\">for</span> var <span class=\"pl-k\">in</span> tf.global_variables():\n        name <span class=\"pl-k\">=</span> var.op.name\n        placeholder <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>var.shape, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/placeholder<span class=\"pl-pds\">'</span></span>)\n        tf.assign(var, placeholder, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/assign_op<span class=\"pl-pds\">'</span></span>)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">assign_new_values</span>(<span class=\"pl-smi\">sess</span>):\n    <span class=\"pl-k\">for</span> var <span class=\"pl-k\">in</span> tf.global_variables():\n        name <span class=\"pl-k\">=</span> var.op.name\n        assign_op <span class=\"pl-k\">=</span> tf.get_default_graph().get_tensor_by_name(name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/assign_op:0<span class=\"pl-pds\">'</span></span>)\n        sess.run(assign_op, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/placeholder:0<span class=\"pl-pds\">'</span></span>: np.random.random(var.shape)})\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    <span class=\"pl-k\">with</span> tf.Graph().as_default():\n        <span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/cpu:0<span class=\"pl-pds\">'</span></span>):\n            dataset <span class=\"pl-k\">=</span> create_dataset()\n            iterator <span class=\"pl-k\">=</span> dataset.make_one_shot_iterator()\n\n        create_variables()\n        create_assign_ops()\n\n        <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n            sess.run(tf.global_variables_initializer())\n            <span class=\"pl-c\"><span class=\"pl-c\">#</span> Check RAM usage before</span>\n            assign_new_values(sess)\n            <span class=\"pl-c\"><span class=\"pl-c\">#</span> Check RAM usage after</span>\n</pre></div>", "body_text": "System information\n\nHave I written custom code: Yes\nOS Platform and Distribution: Linux Ubuntu 16.04\nTensorFlow installed from: binary\nTensorFlow version: 1.4.0\nPython version: 2.7\nBazel version: 0.8.1\nCUDA/cuDNN version: 8.0.61 / 6.0.21\nGPU model and memory: Tesla K80\nExact command to reproduce: run the script attached below\n\nDescribe the problem\nIn the minimal example below, I am observing an increase in RAM usage when calling assign_new_values. Strangely, the extend depends on the dataset size.\nI see no obvious connection between the dataset and the variables that get assigned. Commenting out either the iterator or the sess.run(assign_op, ...) prevents additional memory allocation.\nHow is this possible?\nSource code / logs\nimport numpy as np\nimport tensorflow as tf\n\nDATASET_SIZE = 1000000\n\n\ndef create_dataset():\n    image_paths = tf.constant(DATASET_SIZE * ['image.jpg'])\n    labels = tf.constant(DATASET_SIZE * [0])\n    dataset = tf.data.Dataset.from_tensor_slices((image_paths, labels))\n    return dataset\n\n\ndef create_variables():\n    for i in range(20):\n       tf.get_variable('var_%d' % i, shape=[3, 3, 3, 32])\n\n\ndef create_assign_ops():\n    for var in tf.global_variables():\n        name = var.op.name\n        placeholder = tf.placeholder(tf.float32, shape=var.shape, name=name + '/placeholder')\n        tf.assign(var, placeholder, name=name + '/assign_op')\n\n\ndef assign_new_values(sess):\n    for var in tf.global_variables():\n        name = var.op.name\n        assign_op = tf.get_default_graph().get_tensor_by_name(name + '/assign_op:0')\n        sess.run(assign_op, feed_dict={name + '/placeholder:0': np.random.random(var.shape)})\n\n\nif __name__ == '__main__':\n    with tf.Graph().as_default():\n        with tf.device('/cpu:0'):\n            dataset = create_dataset()\n            iterator = dataset.make_one_shot_iterator()\n\n        create_variables()\n        create_assign_ops()\n\n        with tf.Session() as sess:\n            sess.run(tf.global_variables_initializer())\n            # Check RAM usage before\n            assign_new_values(sess)\n            # Check RAM usage after", "body": "### System information\r\n- **Have I written custom code**: Yes\r\n- **OS Platform and Distribution**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from**: binary\r\n- **TensorFlow version**: 1.4.0\r\n- **Python version**: 2.7\r\n- **Bazel version**: 0.8.1\r\n- **CUDA/cuDNN version**: 8.0.61 / 6.0.21\r\n- **GPU model and memory**: Tesla K80\r\n- **Exact command to reproduce**: run the script attached below\r\n\r\n### Describe the problem\r\nIn the minimal example below, I am observing an increase in RAM usage when calling `assign_new_values`. Strangely, the extend depends on the dataset size. \r\nI see no obvious connection between the dataset and the variables that get assigned. Commenting out either the iterator or the `sess.run(assign_op, ...)` prevents additional memory allocation.\r\n\r\nHow is this possible?\r\n\r\n### Source code / logs\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nDATASET_SIZE = 1000000\r\n\r\n\r\ndef create_dataset():\r\n    image_paths = tf.constant(DATASET_SIZE * ['image.jpg'])\r\n    labels = tf.constant(DATASET_SIZE * [0])\r\n    dataset = tf.data.Dataset.from_tensor_slices((image_paths, labels))\r\n    return dataset\r\n\r\n\r\ndef create_variables():\r\n    for i in range(20):\r\n       tf.get_variable('var_%d' % i, shape=[3, 3, 3, 32])\r\n\r\n\r\ndef create_assign_ops():\r\n    for var in tf.global_variables():\r\n        name = var.op.name\r\n        placeholder = tf.placeholder(tf.float32, shape=var.shape, name=name + '/placeholder')\r\n        tf.assign(var, placeholder, name=name + '/assign_op')\r\n\r\n\r\ndef assign_new_values(sess):\r\n    for var in tf.global_variables():\r\n        name = var.op.name\r\n        assign_op = tf.get_default_graph().get_tensor_by_name(name + '/assign_op:0')\r\n        sess.run(assign_op, feed_dict={name + '/placeholder:0': np.random.random(var.shape)})\r\n\r\n\r\nif __name__ == '__main__':\r\n    with tf.Graph().as_default():\r\n        with tf.device('/cpu:0'):\r\n            dataset = create_dataset()\r\n            iterator = dataset.make_one_shot_iterator()\r\n\r\n        create_variables()\r\n        create_assign_ops()\r\n\r\n        with tf.Session() as sess:\r\n            sess.run(tf.global_variables_initializer())\r\n            # Check RAM usage before\r\n            assign_new_values(sess)\r\n            # Check RAM usage after\r\n\r\n```\r\n"}