{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20275", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20275/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20275/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20275/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20275", "id": 335400656, "node_id": "MDU6SXNzdWUzMzU0MDA2NTY=", "number": 20275, "title": "`tf.profiler.profile` outputs negative number of flops", "user": {"login": "voegtlel", "id": 5764745, "node_id": "MDQ6VXNlcjU3NjQ3NDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5764745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voegtlel", "html_url": "https://github.com/voegtlel", "followers_url": "https://api.github.com/users/voegtlel/followers", "following_url": "https://api.github.com/users/voegtlel/following{/other_user}", "gists_url": "https://api.github.com/users/voegtlel/gists{/gist_id}", "starred_url": "https://api.github.com/users/voegtlel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voegtlel/subscriptions", "organizations_url": "https://api.github.com/users/voegtlel/orgs", "repos_url": "https://api.github.com/users/voegtlel/repos", "events_url": "https://api.github.com/users/voegtlel/events{/privacy}", "received_events_url": "https://api.github.com/users/voegtlel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-06-25T13:10:47Z", "updated_at": "2018-08-01T21:01:09Z", "closed_at": "2018-08-01T21:01:09Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p><code>tf.profiler.profile</code> outputs negative number of flops for <code>tf.nn.conv2d</code> ops on large inputs because of np.int32 overflow.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.framework.ops <span class=\"pl-k\">import</span> get_stats_for_node_def\n\ntest_conv2d <span class=\"pl-k\">=</span> tf.nn.conv2d(tf.zeros((<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1024</span>, <span class=\"pl-c1\">1024</span>, <span class=\"pl-c1\">16</span>)), tf.zeros((<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">4</span>)), <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> This function is used by tf.profiler.profile</span>\nstats <span class=\"pl-k\">=</span> get_stats_for_node_def(tf.get_default_graph(), test_conv2d.op.node_def, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>flops<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Compare the results: one is negative, the other is the actual result</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> The size is exactly 2^31</span>\n<span class=\"pl-c1\">print</span>(stats.value, <span class=\"pl-c1\">1</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1024</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1024</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">4</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">16</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">4</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">4</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>)</pre></div>\n<p>The reason is:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/cfebbbc94f3edd1622a9a42379dd2ccc956ea52c/tensorflow/python/ops/nn_ops.py#L2169\">tensorflow/tensorflow/python/ops/nn_ops.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 2169\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/cfebbbc94f3edd1622a9a42379dd2ccc956ea52c\">cfebbbc</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L2169\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2169\"></td>\n          <td id=\"LC2169\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> output_count <span class=\"pl-k\">=</span> np.prod(output_shape.as_list()) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nhere <code>np.prod</code> is used which returns an <code>np.int32</code>. This enforces the next product line<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/cfebbbc94f3edd1622a9a42379dd2ccc956ea52c/tensorflow/python/ops/nn_ops.py#L2172\">tensorflow/tensorflow/python/ops/nn_ops.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 2172\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/cfebbbc94f3edd1622a9a42379dd2ccc956ea52c\">cfebbbc</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L2172\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2172\"></td>\n          <td id=\"LC2172\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> (output_count <span class=\"pl-k\">*</span> filter_in_depth <span class=\"pl-k\">*</span> filter_height <span class=\"pl-k\">*</span> filter_width <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>)) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nto compute everything as <code>np.int32</code>. Actually, the protobuf supports int64:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/cf375f06747b7be998f0df329772390f545577a1/tensorflow/core/profiler/tfprof_output.proto#L105\">tensorflow/tensorflow/core/profiler/tfprof_output.proto</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 105\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/cf375f06747b7be998f0df329772390f545577a1\">cf375f0</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L105\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"105\"></td>\n          <td id=\"LC105\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">int64</span> <span class=\"pl-smi\">float_ops</span> = <span class=\"pl-c1\">5</span>; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nso this line could be replaced by:</p>\n<div class=\"highlight highlight-source-python\"><pre>np.prod(output_shape.as_list(), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.int64)</pre></div>\n<p>There are more ops affected by this issue, as they also use <code>np.prod</code>.</p>\n<p>PS: Sorry that I cannot submit the fix straight away, everything needed to fix this issue is mentioned above.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): N/A\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.8.0\nPython version: 3.6.5\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: See below\n\nDescribe the problem\ntf.profiler.profile outputs negative number of flops for tf.nn.conv2d ops on large inputs because of np.int32 overflow.\nSource code / logs\nimport tensorflow as tf\nfrom tensorflow.python.framework.ops import get_stats_for_node_def\n\ntest_conv2d = tf.nn.conv2d(tf.zeros((1, 1024, 1024, 16)), tf.zeros((4, 4, 16, 4)), strides=[1, 1, 1, 1], padding='SAME')\n# This function is used by tf.profiler.profile\nstats = get_stats_for_node_def(tf.get_default_graph(), test_conv2d.op.node_def, 'flops')\n# Compare the results: one is negative, the other is the actual result\n# The size is exactly 2^31\nprint(stats.value, 1 * 1024 * 1024 * 4 * 16 * 4 * 4 * 2)\nThe reason is:\n\n  \n    \n      tensorflow/tensorflow/python/ops/nn_ops.py\n    \n    \n         Line 2169\n      in\n      cfebbbc\n    \n    \n    \n    \n\n        \n          \n           output_count = np.prod(output_shape.as_list()) \n        \n    \n  \n\n\nhere np.prod is used which returns an np.int32. This enforces the next product line\n\n  \n    \n      tensorflow/tensorflow/python/ops/nn_ops.py\n    \n    \n         Line 2172\n      in\n      cfebbbc\n    \n    \n    \n    \n\n        \n          \n           (output_count * filter_in_depth * filter_height * filter_width * 2)) \n        \n    \n  \n\n\nto compute everything as np.int32. Actually, the protobuf supports int64:\n\n  \n    \n      tensorflow/tensorflow/core/profiler/tfprof_output.proto\n    \n    \n         Line 105\n      in\n      cf375f0\n    \n    \n    \n    \n\n        \n          \n           int64 float_ops = 5; \n        \n    \n  \n\n\nso this line could be replaced by:\nnp.prod(output_shape.as_list(), dtype=np.int64)\nThere are more ops affected by this issue, as they also use np.prod.\nPS: Sorry that I cannot submit the fix straight away, everything needed to fix this issue is mentioned above.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: N/A\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: See below\r\n\r\n### Describe the problem\r\n`tf.profiler.profile` outputs negative number of flops for `tf.nn.conv2d` ops on large inputs because of np.int32 overflow.\r\n\r\n### Source code / logs\r\n```py\r\nimport tensorflow as tf\r\nfrom tensorflow.python.framework.ops import get_stats_for_node_def\r\n\r\ntest_conv2d = tf.nn.conv2d(tf.zeros((1, 1024, 1024, 16)), tf.zeros((4, 4, 16, 4)), strides=[1, 1, 1, 1], padding='SAME')\r\n# This function is used by tf.profiler.profile\r\nstats = get_stats_for_node_def(tf.get_default_graph(), test_conv2d.op.node_def, 'flops')\r\n# Compare the results: one is negative, the other is the actual result\r\n# The size is exactly 2^31\r\nprint(stats.value, 1 * 1024 * 1024 * 4 * 16 * 4 * 4 * 2)\r\n```\r\n\r\nThe reason is:\r\nhttps://github.com/tensorflow/tensorflow/blob/cfebbbc94f3edd1622a9a42379dd2ccc956ea52c/tensorflow/python/ops/nn_ops.py#L2169\r\nhere `np.prod` is used which returns an `np.int32`. This enforces the next product line \r\nhttps://github.com/tensorflow/tensorflow/blob/cfebbbc94f3edd1622a9a42379dd2ccc956ea52c/tensorflow/python/ops/nn_ops.py#L2172\r\nto compute everything as `np.int32`. Actually, the protobuf supports int64:\r\nhttps://github.com/tensorflow/tensorflow/blob/cf375f06747b7be998f0df329772390f545577a1/tensorflow/core/profiler/tfprof_output.proto#L105\r\nso this line could be replaced by:\r\n```py\r\nnp.prod(output_shape.as_list(), dtype=np.int64)\r\n```\r\nThere are more ops affected by this issue, as they also use `np.prod`.\r\n\r\n\r\nPS: Sorry that I cannot submit the fix straight away, everything needed to fix this issue is mentioned above."}