{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2767", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2767/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2767/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2767/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/2767", "id": 159515219, "node_id": "MDExOlB1bGxSZXF1ZXN0NzMyOTEwNTA=", "number": 2767, "title": "Initializer for Input->H & H->H weight matrices for RNNCells", "user": {"login": "PhABC", "id": 9306422, "node_id": "MDQ6VXNlcjkzMDY0MjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/9306422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PhABC", "html_url": "https://github.com/PhABC", "followers_url": "https://api.github.com/users/PhABC/followers", "following_url": "https://api.github.com/users/PhABC/following{/other_user}", "gists_url": "https://api.github.com/users/PhABC/gists{/gist_id}", "starred_url": "https://api.github.com/users/PhABC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PhABC/subscriptions", "organizations_url": "https://api.github.com/users/PhABC/orgs", "repos_url": "https://api.github.com/users/PhABC/repos", "events_url": "https://api.github.com/users/PhABC/events{/privacy}", "received_events_url": "https://api.github.com/users/PhABC/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 390482148, "node_id": "MDU6TGFiZWwzOTA0ODIxNDg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20review", "name": "awaiting review", "color": "fef2c0", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 14, "created_at": "2016-06-09T21:43:03Z", "updated_at": "2016-06-11T04:20:44Z", "closed_at": "2016-06-11T04:20:44Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2767", "html_url": "https://github.com/tensorflow/tensorflow/pull/2767", "diff_url": "https://github.com/tensorflow/tensorflow/pull/2767.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/2767.patch"}, "body_html": "<p>This modification allows initializer (with trainability) for the Input -&gt; Hidden and Hidden to Hidden layer when using the _linear function. Currently, only BasicRNNCell has the new arguments in it's <strong>call</strong> function, but this could easily be solved. The motivation for such a modification is that it would easily allow different weight architecture for each component of the cell. For example, one could have a one-to-one connection from input -&gt; H, all-to-all from H -&gt; H and one-to-one for H-&gt;Output. One could also easily create sparse weight matrices for the input-&gt;H and H-&gt;H.</p>\n<p><strong>Example code:</strong></p>\n<pre><code># Initializer ~ 1st matrix acts as an index for which unit is trainable, 2st is the weight of the units\ninit  = [ tf.constant(np.identity(n_input+n_hidden), dtype = 'float32'), tf.random_normal([n_input+n_hidden,1]) ]\n\n# Whether matrix1 and matrix2 are trainable\ntrain = [False, True]\n\n#Creating cell\ncell  = rnn_cell.BasicRNNCell(n_hidden, initializer = init, trainable = train)\n\n#Executing cell\noutputs, states = rnn.rnn(cell, Input, initial_state=_istate, dtype=tf.float32)\n</code></pre>", "body_text": "This modification allows initializer (with trainability) for the Input -> Hidden and Hidden to Hidden layer when using the _linear function. Currently, only BasicRNNCell has the new arguments in it's call function, but this could easily be solved. The motivation for such a modification is that it would easily allow different weight architecture for each component of the cell. For example, one could have a one-to-one connection from input -> H, all-to-all from H -> H and one-to-one for H->Output. One could also easily create sparse weight matrices for the input->H and H->H.\nExample code:\n# Initializer ~ 1st matrix acts as an index for which unit is trainable, 2st is the weight of the units\ninit  = [ tf.constant(np.identity(n_input+n_hidden), dtype = 'float32'), tf.random_normal([n_input+n_hidden,1]) ]\n\n# Whether matrix1 and matrix2 are trainable\ntrain = [False, True]\n\n#Creating cell\ncell  = rnn_cell.BasicRNNCell(n_hidden, initializer = init, trainable = train)\n\n#Executing cell\noutputs, states = rnn.rnn(cell, Input, initial_state=_istate, dtype=tf.float32)", "body": "This modification allows initializer (with trainability) for the Input -> Hidden and Hidden to Hidden layer when using the _linear function. Currently, only BasicRNNCell has the new arguments in it's __call__ function, but this could easily be solved. The motivation for such a modification is that it would easily allow different weight architecture for each component of the cell. For example, one could have a one-to-one connection from input -> H, all-to-all from H -> H and one-to-one for H->Output. One could also easily create sparse weight matrices for the input->H and H->H.  \n\n**Example code:**\n\n```\n# Initializer ~ 1st matrix acts as an index for which unit is trainable, 2st is the weight of the units\ninit  = [ tf.constant(np.identity(n_input+n_hidden), dtype = 'float32'), tf.random_normal([n_input+n_hidden,1]) ]\n\n# Whether matrix1 and matrix2 are trainable\ntrain = [False, True]\n\n#Creating cell\ncell  = rnn_cell.BasicRNNCell(n_hidden, initializer = init, trainable = train)\n\n#Executing cell\noutputs, states = rnn.rnn(cell, Input, initial_state=_istate, dtype=tf.float32)\n```\n"}