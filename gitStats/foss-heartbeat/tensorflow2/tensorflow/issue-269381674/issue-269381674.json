{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14068", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14068/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14068/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14068/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14068", "id": 269381674, "node_id": "MDU6SXNzdWUyNjkzODE2NzQ=", "number": 14068, "title": "why don't work this code???", "user": {"login": "wjdgkals23", "id": 23151079, "node_id": "MDQ6VXNlcjIzMTUxMDc5", "avatar_url": "https://avatars0.githubusercontent.com/u/23151079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wjdgkals23", "html_url": "https://github.com/wjdgkals23", "followers_url": "https://api.github.com/users/wjdgkals23/followers", "following_url": "https://api.github.com/users/wjdgkals23/following{/other_user}", "gists_url": "https://api.github.com/users/wjdgkals23/gists{/gist_id}", "starred_url": "https://api.github.com/users/wjdgkals23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wjdgkals23/subscriptions", "organizations_url": "https://api.github.com/users/wjdgkals23/orgs", "repos_url": "https://api.github.com/users/wjdgkals23/repos", "events_url": "https://api.github.com/users/wjdgkals23/events{/privacy}", "received_events_url": "https://api.github.com/users/wjdgkals23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-29T08:44:11Z", "updated_at": "2017-10-29T09:15:03Z", "closed_at": "2017-10-29T09:15:03Z", "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug or a feature request.</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:</li>\n<li><strong>TensorFlow version (use command below)</strong>:</li>\n<li><strong>Python version</strong>:</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<p>My source code is this</p>\n<p>import tensorflow as tf<br>\nimport random<br>\nimport matplotlib.pyplot as plt<br>\nimport numpy as np</p>\n<p>tf.set_random_seed(777)</p>\n<p>def MinMaxScaler(data):<br>\nnumerator = data - np.min(data, 0)<br>\ndenominator = np.max(data, 0) - np.min(data, 0)<br>\n# noise term prevents the zero division<br>\nreturn numerator / (denominator + 1e-7)</p>\n<p>training_epochs = 19<br>\nbatch_size = 50</p>\n<p>xy = np.loadtxt('train.csv', delimiter=',', dtype=np.float32) #read training data set<br>\nxy2 = np.loadtxt('test.csv', delimiter=',', dtype=np.float32) #read test data set</p>\n<p>train_x_batch, train_y_batch = <br>\ntf.train.batch([xy[1:], xy[0:1]], batch_size=50)</p>\n<p>train_x_batch2, train_y_batch2 = <br>\ntf.train.batch([xy2[1:], xy2[0:1]], batch_size=50)</p>\n<p>#print(x_data.shape, y_data.shape) check data shape</p>\n<p>nb_classes= 10 #0-9 labels</p>\n<p>X = tf.placeholder(tf.float32, [None, 784])<br>\nY = tf.placeholder(tf.float32, [None, nb_classes])</p>\n<p>W = tf.Variable(tf.random_normal([784, nb_classes]), name='weight')<br>\nb = tf.Variable(tf.random_normal([nb_classes]), name='bias')</p>\n<p>hypothesis = tf.nn.softmax(tf.matmul(X, W) + b)# made hypothesis using softmax</p>\n<p>cost = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis=1))<br>\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)</p>\n<h1>Test model</h1>\n<p>is_correct = tf.equal(tf.arg_max(hypothesis, 1), tf.arg_max(Y, 1))</p>\n<h1>Calculate accuracy</h1>\n<p>accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))</p>\n<p>with tf.Session() as sess:<br>\n#initialize tensorflow variables<br>\nsess.run(tf.global_variables_initializer())<br>\n#Trianing<br>\nfor epoch in range(training_epochs):<br>\navg_cost = 0<br>\ntotal_batch = int(950 / 50)</p>\n<pre><code>    for i in range(total_batch):\n        batch_xs, batch_ys = sess.run([train_x_batch, train_y_batch])\n        c, _ = sess.run([cost, optimizer], feed_dict={\n                        X: batch_xs, Y: batch_ys})\n        avg_cost += c / total_batch\n        \n    print('Epoch:', '%04d' % (epoch + 1),\n          'cost =', '{:.9f}'.format(avg_cost))\n\nprint(\"Learning finished\")\n\nbatch_xs2, batch_ys2 = sess.run([train_x_batch2, train_y_batch2])\nacc = accuracy.eval(session=sess, feed_dict={X:batch_xs2 , Y:batch_ys2})\nprint(\"%f\", acc)\n</code></pre>\n<p>Instructions for updating:<br>\nUse <code>argmax</code> instead<br>\nWARNING:tensorflow:From x-wingide-python-shell://151066184/2:43: arg_max (from tensorflow.python.ops.gen_math_ops) is deprecated and will be removed in a future version.<br>\nInstructions for updating:<br>\nUse <code>argmax</code> instead<br>\n2017-10-29 17:41:38.014455: W C:\\tf_jenkins\\home\\workspace\\rel-win\\M\\windows\\PY\\36\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.<br>\n2017-10-29 17:41:38.014701: W C:\\tf_jenkins\\home\\workspace\\rel-win\\M\\windows\\PY\\36\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.</p>\n<p>And don't working..... where is problem??</p>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug or a feature request.\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nTensorFlow installed from (source or binary):\nTensorFlow version (use command below):\nPython version:\nBazel version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nMy source code is this\nimport tensorflow as tf\nimport random\nimport matplotlib.pyplot as plt\nimport numpy as np\ntf.set_random_seed(777)\ndef MinMaxScaler(data):\nnumerator = data - np.min(data, 0)\ndenominator = np.max(data, 0) - np.min(data, 0)\n# noise term prevents the zero division\nreturn numerator / (denominator + 1e-7)\ntraining_epochs = 19\nbatch_size = 50\nxy = np.loadtxt('train.csv', delimiter=',', dtype=np.float32) #read training data set\nxy2 = np.loadtxt('test.csv', delimiter=',', dtype=np.float32) #read test data set\ntrain_x_batch, train_y_batch = \ntf.train.batch([xy[1:], xy[0:1]], batch_size=50)\ntrain_x_batch2, train_y_batch2 = \ntf.train.batch([xy2[1:], xy2[0:1]], batch_size=50)\n#print(x_data.shape, y_data.shape) check data shape\nnb_classes= 10 #0-9 labels\nX = tf.placeholder(tf.float32, [None, 784])\nY = tf.placeholder(tf.float32, [None, nb_classes])\nW = tf.Variable(tf.random_normal([784, nb_classes]), name='weight')\nb = tf.Variable(tf.random_normal([nb_classes]), name='bias')\nhypothesis = tf.nn.softmax(tf.matmul(X, W) + b)# made hypothesis using softmax\ncost = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis=1))\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)\nTest model\nis_correct = tf.equal(tf.arg_max(hypothesis, 1), tf.arg_max(Y, 1))\nCalculate accuracy\naccuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))\nwith tf.Session() as sess:\n#initialize tensorflow variables\nsess.run(tf.global_variables_initializer())\n#Trianing\nfor epoch in range(training_epochs):\navg_cost = 0\ntotal_batch = int(950 / 50)\n    for i in range(total_batch):\n        batch_xs, batch_ys = sess.run([train_x_batch, train_y_batch])\n        c, _ = sess.run([cost, optimizer], feed_dict={\n                        X: batch_xs, Y: batch_ys})\n        avg_cost += c / total_batch\n        \n    print('Epoch:', '%04d' % (epoch + 1),\n          'cost =', '{:.9f}'.format(avg_cost))\n\nprint(\"Learning finished\")\n\nbatch_xs2, batch_ys2 = sess.run([train_x_batch2, train_y_batch2])\nacc = accuracy.eval(session=sess, feed_dict={X:batch_xs2 , Y:batch_ys2})\nprint(\"%f\", acc)\n\nInstructions for updating:\nUse argmax instead\nWARNING:tensorflow:From x-wingide-python-shell://151066184/2:43: arg_max (from tensorflow.python.ops.gen_math_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse argmax instead\n2017-10-29 17:41:38.014455: W C:\\tf_jenkins\\home\\workspace\\rel-win\\M\\windows\\PY\\36\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n2017-10-29 17:41:38.014701: W C:\\tf_jenkins\\home\\workspace\\rel-win\\M\\windows\\PY\\36\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\nAnd don't working..... where is problem??", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug or a feature request.\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n- **TensorFlow installed from (source or binary)**:\r\n- **TensorFlow version (use command below)**:\r\n- **Python version**: \r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\nMy source code is this\r\n\r\nimport tensorflow as tf\r\nimport random\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\ntf.set_random_seed(777)\r\n\r\n\r\ndef MinMaxScaler(data):\r\n    numerator = data - np.min(data, 0)\r\n    denominator = np.max(data, 0) - np.min(data, 0)\r\n    # noise term prevents the zero division\r\n    return numerator / (denominator + 1e-7)\r\n\r\ntraining_epochs = 19\r\nbatch_size = 50\r\n\r\nxy = np.loadtxt('train.csv', delimiter=',', dtype=np.float32) #read training data set\r\nxy2 = np.loadtxt('test.csv', delimiter=',', dtype=np.float32) #read test data set\r\n\r\ntrain_x_batch, train_y_batch = \\\r\n    tf.train.batch([xy[1:], xy[0:1]], batch_size=50)\r\n\r\ntrain_x_batch2, train_y_batch2 = \\\r\n    tf.train.batch([xy2[1:], xy2[0:1]], batch_size=50)\r\n\r\n#print(x_data.shape, y_data.shape) check data shape\r\n\r\nnb_classes= 10 #0-9 labels\r\n\r\nX = tf.placeholder(tf.float32, [None, 784])\r\nY = tf.placeholder(tf.float32, [None, nb_classes])\r\n\r\nW = tf.Variable(tf.random_normal([784, nb_classes]), name='weight')\r\nb = tf.Variable(tf.random_normal([nb_classes]), name='bias')\r\n\r\nhypothesis = tf.nn.softmax(tf.matmul(X, W) + b)# made hypothesis using softmax\r\n\r\ncost = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis=1))\r\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)\r\n\r\n# Test model\r\nis_correct = tf.equal(tf.arg_max(hypothesis, 1), tf.arg_max(Y, 1))\r\n# Calculate accuracy\r\naccuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))\r\n\r\nwith tf.Session() as sess:\r\n    #initialize tensorflow variables\r\n    sess.run(tf.global_variables_initializer())\r\n    #Trianing\r\n    for epoch in range(training_epochs):\r\n        avg_cost = 0\r\n        total_batch = int(950 / 50)\r\n        \r\n        for i in range(total_batch):\r\n            batch_xs, batch_ys = sess.run([train_x_batch, train_y_batch])\r\n            c, _ = sess.run([cost, optimizer], feed_dict={\r\n                            X: batch_xs, Y: batch_ys})\r\n            avg_cost += c / total_batch\r\n            \r\n        print('Epoch:', '%04d' % (epoch + 1),\r\n              'cost =', '{:.9f}'.format(avg_cost))\r\n\r\n    print(\"Learning finished\")\r\n    \r\n    batch_xs2, batch_ys2 = sess.run([train_x_batch2, train_y_batch2])\r\n    acc = accuracy.eval(session=sess, feed_dict={X:batch_xs2 , Y:batch_ys2})\r\n    print(\"%f\", acc)\r\n    \r\n\r\nInstructions for updating:\r\nUse `argmax` instead\r\nWARNING:tensorflow:From x-wingide-python-shell://151066184/2:43: arg_max (from tensorflow.python.ops.gen_math_ops) is deprecated and will be removed in a future version.\r\nInstructions for updating:\r\nUse `argmax` instead\r\n2017-10-29 17:41:38.014455: W C:\\tf_jenkins\\home\\workspace\\rel-win\\M\\windows\\PY\\36\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-10-29 17:41:38.014701: W C:\\tf_jenkins\\home\\workspace\\rel-win\\M\\windows\\PY\\36\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\r\n\r\nAnd don't working..... where is problem??"}