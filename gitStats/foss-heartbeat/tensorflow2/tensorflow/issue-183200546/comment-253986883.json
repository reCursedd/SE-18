{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/253986883", "html_url": "https://github.com/tensorflow/tensorflow/pull/4985#issuecomment-253986883", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4985", "id": 253986883, "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mzk4Njg4Mw==", "user": {"login": "guotong1988", "id": 4702353, "node_id": "MDQ6VXNlcjQ3MDIzNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4702353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guotong1988", "html_url": "https://github.com/guotong1988", "followers_url": "https://api.github.com/users/guotong1988/followers", "following_url": "https://api.github.com/users/guotong1988/following{/other_user}", "gists_url": "https://api.github.com/users/guotong1988/gists{/gist_id}", "starred_url": "https://api.github.com/users/guotong1988/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guotong1988/subscriptions", "organizations_url": "https://api.github.com/users/guotong1988/orgs", "repos_url": "https://api.github.com/users/guotong1988/repos", "events_url": "https://api.github.com/users/guotong1988/events{/privacy}", "received_events_url": "https://api.github.com/users/guotong1988/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-15T14:16:23Z", "updated_at": "2016-10-16T10:36:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>also test the code with:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\nx_image = tf.placeholder(tf.float32,shape=[4,4])\nx = tf.reshape(x_image,[1,4,4,1])\n\nksize = np.array([1,2,2,1])\n\nstrides=[1,2,2,1]\npadding = 'VALID'\n\ny = tf.nn.max_pool(value=x,ksize=ksize,strides=strides,padding=padding)\n\nx_data = np.array([[4,3,1,8],[7,2,6,3],[2,0,1,1],[3,4,2,5]],\n            dtype = np.float32)\n\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x,feed_dict={x_image:x_data}))\n    y = (sess.run(y,feed_dict={x_image:x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshpe(4,4) is :\"\n    print x.reshape(4,4)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshpe(2,2) is :\"\n    print y.reshape(2,2)\n    print \"\"\n</code></pre>", "body_text": "also test the code with:\nimport numpy as np\nimport tensorflow as tf\n\nx_image = tf.placeholder(tf.float32,shape=[4,4])\nx = tf.reshape(x_image,[1,4,4,1])\n\nksize = np.array([1,2,2,1])\n\nstrides=[1,2,2,1]\npadding = 'VALID'\n\ny = tf.nn.max_pool(value=x,ksize=ksize,strides=strides,padding=padding)\n\nx_data = np.array([[4,3,1,8],[7,2,6,3],[2,0,1,1],[3,4,2,5]],\n            dtype = np.float32)\n\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x,feed_dict={x_image:x_data}))\n    y = (sess.run(y,feed_dict={x_image:x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshpe(4,4) is :\"\n    print x.reshape(4,4)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshpe(2,2) is :\"\n    print y.reshape(2,2)\n    print \"\"", "body": "also test the code with:\n\n```\nimport numpy as np\nimport tensorflow as tf\n\nx_image = tf.placeholder(tf.float32,shape=[4,4])\nx = tf.reshape(x_image,[1,4,4,1])\n\nksize = np.array([1,2,2,1])\n\nstrides=[1,2,2,1]\npadding = 'VALID'\n\ny = tf.nn.max_pool(value=x,ksize=ksize,strides=strides,padding=padding)\n\nx_data = np.array([[4,3,1,8],[7,2,6,3],[2,0,1,1],[3,4,2,5]],\n            dtype = np.float32)\n\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x,feed_dict={x_image:x_data}))\n    y = (sess.run(y,feed_dict={x_image:x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshpe(4,4) is :\"\n    print x.reshape(4,4)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshpe(2,2) is :\"\n    print y.reshape(2,2)\n    print \"\"\n```\n"}