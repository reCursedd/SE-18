{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/220382665", "html_url": "https://github.com/tensorflow/tensorflow/issues/2429#issuecomment-220382665", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2429", "id": 220382665, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDM4MjY2NQ==", "user": {"login": "333caowei", "id": 4569055, "node_id": "MDQ6VXNlcjQ1NjkwNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/4569055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/333caowei", "html_url": "https://github.com/333caowei", "followers_url": "https://api.github.com/users/333caowei/followers", "following_url": "https://api.github.com/users/333caowei/following{/other_user}", "gists_url": "https://api.github.com/users/333caowei/gists{/gist_id}", "starred_url": "https://api.github.com/users/333caowei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/333caowei/subscriptions", "organizations_url": "https://api.github.com/users/333caowei/orgs", "repos_url": "https://api.github.com/users/333caowei/repos", "events_url": "https://api.github.com/users/333caowei/events{/privacy}", "received_events_url": "https://api.github.com/users/333caowei/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-19T16:41:36Z", "updated_at": "2016-05-19T16:41:56Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a><br>\nHere is the code:</p>\n<pre><code>w_x2h   = tf.get_variable(\"w_x2h\", [word_dim, 2*hidden_dim])\nb_x2h    = tf.get_variable(\"b_x2h\", [2*hidden_dim])\nself.x     = tf.placeholder(tf.float32, [None, sentence_length, word_dim])  \nself.real_length  = tf.placeholder(tf.int64, [None])  \nself.istate_fw      = tf.placeholder(tf.float32, [None, 2*hidden_dim])\nself.istate_bw     = tf.placeholder(tf.float32, [None, 2*hidden_dim])\n\ndef RNN(x,  istate_fw, istate_bw,   real_length,  w_x2h, b_x2h):\n            x = tf.transpose(x, [1, 0, 2]) \n            x = tf.reshape(x, [-1, word_dim]) \n            x = tf.matmul(x, w_x2h) + b_x2h\n\n            lstm_fw_cell   = rnn_cell.BasicLSTMCell(hidden_dim, forget_bias=1.0)\n            lstm_bw_cell   = rnn_cell.BasicLSTMCell(hidden_dim, forget_bias=1.0)\n\n            x = tf.split(0, sentence_length, x) # sentence_length * (batch_size, hidden_dim)\n            outputs = rnn.bidirectional_rnn(lstm_fw_cell, lstm_bw_cell, x, initial_state_fw=istate_fw, initial_state_bw=istate_bw, sequence_length=real_length)\n\n            return outputs\n\noutputs  =  RNN(self.x,  self.istate_fw, self.istate_bw, self.real_length, w_x2h, b_x2h)\n</code></pre>", "body_text": "@mrry\nHere is the code:\nw_x2h   = tf.get_variable(\"w_x2h\", [word_dim, 2*hidden_dim])\nb_x2h    = tf.get_variable(\"b_x2h\", [2*hidden_dim])\nself.x     = tf.placeholder(tf.float32, [None, sentence_length, word_dim])  \nself.real_length  = tf.placeholder(tf.int64, [None])  \nself.istate_fw      = tf.placeholder(tf.float32, [None, 2*hidden_dim])\nself.istate_bw     = tf.placeholder(tf.float32, [None, 2*hidden_dim])\n\ndef RNN(x,  istate_fw, istate_bw,   real_length,  w_x2h, b_x2h):\n            x = tf.transpose(x, [1, 0, 2]) \n            x = tf.reshape(x, [-1, word_dim]) \n            x = tf.matmul(x, w_x2h) + b_x2h\n\n            lstm_fw_cell   = rnn_cell.BasicLSTMCell(hidden_dim, forget_bias=1.0)\n            lstm_bw_cell   = rnn_cell.BasicLSTMCell(hidden_dim, forget_bias=1.0)\n\n            x = tf.split(0, sentence_length, x) # sentence_length * (batch_size, hidden_dim)\n            outputs = rnn.bidirectional_rnn(lstm_fw_cell, lstm_bw_cell, x, initial_state_fw=istate_fw, initial_state_bw=istate_bw, sequence_length=real_length)\n\n            return outputs\n\noutputs  =  RNN(self.x,  self.istate_fw, self.istate_bw, self.real_length, w_x2h, b_x2h)", "body": "@mrry \nHere is the code:\n\n```\nw_x2h   = tf.get_variable(\"w_x2h\", [word_dim, 2*hidden_dim])\nb_x2h    = tf.get_variable(\"b_x2h\", [2*hidden_dim])\nself.x     = tf.placeholder(tf.float32, [None, sentence_length, word_dim])  \nself.real_length  = tf.placeholder(tf.int64, [None])  \nself.istate_fw      = tf.placeholder(tf.float32, [None, 2*hidden_dim])\nself.istate_bw     = tf.placeholder(tf.float32, [None, 2*hidden_dim])\n\ndef RNN(x,  istate_fw, istate_bw,   real_length,  w_x2h, b_x2h):\n            x = tf.transpose(x, [1, 0, 2]) \n            x = tf.reshape(x, [-1, word_dim]) \n            x = tf.matmul(x, w_x2h) + b_x2h\n\n            lstm_fw_cell   = rnn_cell.BasicLSTMCell(hidden_dim, forget_bias=1.0)\n            lstm_bw_cell   = rnn_cell.BasicLSTMCell(hidden_dim, forget_bias=1.0)\n\n            x = tf.split(0, sentence_length, x) # sentence_length * (batch_size, hidden_dim)\n            outputs = rnn.bidirectional_rnn(lstm_fw_cell, lstm_bw_cell, x, initial_state_fw=istate_fw, initial_state_bw=istate_bw, sequence_length=real_length)\n\n            return outputs\n\noutputs  =  RNN(self.x,  self.istate_fw, self.istate_bw, self.real_length, w_x2h, b_x2h)\n```\n"}