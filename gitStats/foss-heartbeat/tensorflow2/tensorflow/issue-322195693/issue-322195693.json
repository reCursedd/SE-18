{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19220", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19220/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19220/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19220/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19220", "id": 322195693, "node_id": "MDU6SXNzdWUzMjIxOTU2OTM=", "number": 19220, "title": "upsampling op for 5-D tensor with shape [batch, height, width, depth, channels] (feature request)", "user": {"login": "daikankan", "id": 20749514, "node_id": "MDQ6VXNlcjIwNzQ5NTE0", "avatar_url": "https://avatars3.githubusercontent.com/u/20749514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daikankan", "html_url": "https://github.com/daikankan", "followers_url": "https://api.github.com/users/daikankan/followers", "following_url": "https://api.github.com/users/daikankan/following{/other_user}", "gists_url": "https://api.github.com/users/daikankan/gists{/gist_id}", "starred_url": "https://api.github.com/users/daikankan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daikankan/subscriptions", "organizations_url": "https://api.github.com/users/daikankan/orgs", "repos_url": "https://api.github.com/users/daikankan/repos", "events_url": "https://api.github.com/users/daikankan/events{/privacy}", "received_events_url": "https://api.github.com/users/daikankan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-05-11T07:25:21Z", "updated_at": "2018-10-03T18:12:01Z", "closed_at": "2018-05-14T19:47:49Z", "author_association": "NONE", "body_html": "<p>My target is 3D medical image.<br>\nFor 4-D tensor B with shape [batch, height, width, channels] use tf.image.resize_* for upsampling.<br>\nFor 5-D tensor A with shape [batch, height, width, depth, channels], tf.nn.conv3d_transpose can be used for upsampling, but I don't want extra weights for training.</p>\n<p>Is there an direct op for this? instead of</p>\n<ol>\n<li>\n<p>Note: This seem to be wrong !<br>\n[batch, height, width, depth, channels] = tf.shape(A)<br>\nA1 = tf.reshape(A, [batch, height, width * depth, channels])<br>\nA2 = tf.image.resize_bilinear(A1, [2 * height, 4 * width * depth])<br>\nA3 = tf.reshape(A2, [batch, 2 * height, 2 * width, 2 * depth, channels]</p>\n</li>\n<li>\n<p>split the last dimension -&gt; reshape -&gt; resize_bilinear -&gt; reshape -&gt; concat.</p>\n</li>\n<li>\n<p>tf.nn.con3d_transpose()</p>\n</li>\n</ol>", "body_text": "My target is 3D medical image.\nFor 4-D tensor B with shape [batch, height, width, channels] use tf.image.resize_* for upsampling.\nFor 5-D tensor A with shape [batch, height, width, depth, channels], tf.nn.conv3d_transpose can be used for upsampling, but I don't want extra weights for training.\nIs there an direct op for this? instead of\n\n\nNote: This seem to be wrong !\n[batch, height, width, depth, channels] = tf.shape(A)\nA1 = tf.reshape(A, [batch, height, width * depth, channels])\nA2 = tf.image.resize_bilinear(A1, [2 * height, 4 * width * depth])\nA3 = tf.reshape(A2, [batch, 2 * height, 2 * width, 2 * depth, channels]\n\n\nsplit the last dimension -> reshape -> resize_bilinear -> reshape -> concat.\n\n\ntf.nn.con3d_transpose()", "body": "My target is 3D medical image.\r\nFor 4-D tensor B with shape [batch, height, width, channels] use tf.image.resize_* for upsampling.\r\nFor 5-D tensor A with shape [batch, height, width, depth, channels], tf.nn.conv3d_transpose can be used for upsampling, but I don't want extra weights for training.\r\n\r\nIs there an direct op for this? instead of\r\n\r\n1.  Note: This seem to be wrong !\r\n     [batch, height, width, depth, channels] = tf.shape(A)\r\n     A1 = tf.reshape(A, [batch, height, width * depth, channels]) \r\n     A2 = tf.image.resize_bilinear(A1, [2 * height, 4 * width * depth])\r\n     A3 = tf.reshape(A2, [batch, 2 * height, 2 * width, 2 * depth, channels]\r\n\r\n2. split the last dimension -> reshape -> resize_bilinear -> reshape -> concat.\r\n\r\n3. tf.nn.con3d_transpose()\r\n"}