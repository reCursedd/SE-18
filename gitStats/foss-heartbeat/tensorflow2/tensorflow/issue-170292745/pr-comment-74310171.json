{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/74310171", "pull_request_review_id": null, "id": 74310171, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc0MzEwMTcx", "diff_hunk": "@@ -43,6 +43,111 @@ struct CastFunctor {\n namespace Eigen {\n namespace internal {\n \n+// Eigen can't convert to/from complex numbers, because it is limited to cases\n+// that can be static_casted. But numpy is able to cast to/from complex, which\n+// we want to emulate. So we add specializations for complex here.\n+typedef std::complex<float> complex64;\n+typedef std::complex<double> complex128;\n+using tensorflow::uint8;\n+using tensorflow::int8;\n+using tensorflow::uint16;\n+using tensorflow::int16;\n+using tensorflow::int32;\n+using tensorflow::int64;\n+\n+// These are seperate definitions of what should happen when we cast from/to\n+// complex numbers. The actual template specializations are instantiated below.\n+template<typename From, typename To>\n+struct cast_from_complex_impl {\n+  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE To operator()(const From& a) const {\n+    return static_cast<To>(a.real());\n+  }\n+};\n+\n+template<typename From, typename To>", "path": "tensorflow/core/kernels/cast_op.h", "position": 16, "original_position": 25, "commit_id": "ce8d866ff0ab3f1bb665af4575e5ff41b1c28850", "original_commit_id": "b8fbf22e7135f5351b2449b9c14254c548f6267a", "user": {"login": "benoitsteiner", "id": 6969686, "node_id": "MDQ6VXNlcjY5Njk2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6969686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benoitsteiner", "html_url": "https://github.com/benoitsteiner", "followers_url": "https://api.github.com/users/benoitsteiner/followers", "following_url": "https://api.github.com/users/benoitsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/benoitsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benoitsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benoitsteiner/subscriptions", "organizations_url": "https://api.github.com/users/benoitsteiner/orgs", "repos_url": "https://api.github.com/users/benoitsteiner/repos", "events_url": "https://api.github.com/users/benoitsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/benoitsteiner/received_events", "type": "User", "site_admin": false}, "body": " The code would be simpler if you used partial specialization instead: you could for example write this to implement the casting from complex to real.\ntemplate <typename From, typename To>\nstruct scalar_cast_opstd::complex<From, To> {\n EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE To operator()(const std::complex<From>& a) const {\n  return static_cast<To>(a.real());\n  }\n};\n", "created_at": "2016-08-10T19:09:13Z", "updated_at": "2016-08-10T20:22:30Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/3718#discussion_r74310171", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/3718", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/74310171"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/3718#discussion_r74310171"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/3718"}}, "body_html": "<p>The code would be simpler if you used partial specialization instead: you could for example write this to implement the casting from complex to real.<br>\ntemplate &lt;typename From, typename To&gt;<br>\nstruct scalar_cast_opstd::complex&lt;From, To&gt; {<br>\nEIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE To operator()(const std::complex&amp; a) const {<br>\nreturn static_cast(a.real());<br>\n}<br>\n};</p>", "body_text": "The code would be simpler if you used partial specialization instead: you could for example write this to implement the casting from complex to real.\ntemplate <typename From, typename To>\nstruct scalar_cast_opstd::complex<From, To> {\nEIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE To operator()(const std::complex& a) const {\nreturn static_cast(a.real());\n}\n};"}