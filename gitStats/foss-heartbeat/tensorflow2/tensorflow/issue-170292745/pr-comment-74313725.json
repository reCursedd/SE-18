{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/74313725", "pull_request_review_id": null, "id": 74313725, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc0MzEzNzI1", "diff_hunk": "@@ -43,6 +43,111 @@ struct CastFunctor {\n namespace Eigen {\n namespace internal {\n \n+// Eigen can't convert to/from complex numbers, because it is limited to cases\n+// that can be static_casted. But numpy is able to cast to/from complex, which\n+// we want to emulate. So we add specializations for complex here.\n+typedef std::complex<float> complex64;\n+typedef std::complex<double> complex128;\n+using tensorflow::uint8;\n+using tensorflow::int8;\n+using tensorflow::uint16;\n+using tensorflow::int16;\n+using tensorflow::int32;\n+using tensorflow::int64;\n+\n+// These are seperate definitions of what should happen when we cast from/to\n+// complex numbers. The actual template specializations are instantiated below.\n+template<typename From, typename To>\n+struct cast_from_complex_impl {\n+  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE To operator()(const From& a) const {\n+    return static_cast<To>(a.real());\n+  }\n+};\n+\n+template<typename From, typename To>", "path": "tensorflow/core/kernels/cast_op.h", "position": 16, "original_position": 25, "commit_id": "ce8d866ff0ab3f1bb665af4575e5ff41b1c28850", "original_commit_id": "b8fbf22e7135f5351b2449b9c14254c548f6267a", "user": {"login": "ibab", "id": 890531, "node_id": "MDQ6VXNlcjg5MDUzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/890531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibab", "html_url": "https://github.com/ibab", "followers_url": "https://api.github.com/users/ibab/followers", "following_url": "https://api.github.com/users/ibab/following{/other_user}", "gists_url": "https://api.github.com/users/ibab/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibab/subscriptions", "organizations_url": "https://api.github.com/users/ibab/orgs", "repos_url": "https://api.github.com/users/ibab/repos", "events_url": "https://api.github.com/users/ibab/events{/privacy}", "received_events_url": "https://api.github.com/users/ibab/received_events", "type": "User", "site_admin": false}, "body": "Ah, I spent a lot of time trying to make a partial specialization approach work.\nBut I was trying to use SFINAE to specialize for both `complex64` and `complex128` at once, which isn't really possible here.\nI should have realized that I can do\n\n``` c++\ntemplate<typename From, typename To>\nstruct scalar_cast_op<std::complex<From>, To> {\n  To operator()(const std::complex<From>& a) const {\n     ...\n   }\n};\n```\n\nas you've suggested.\nThis works really well, and should make the code a lot more elegant.\nI'll update the PR.\n", "created_at": "2016-08-10T19:31:05Z", "updated_at": "2016-08-10T20:22:30Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/3718#discussion_r74313725", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/3718", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/74313725"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/3718#discussion_r74313725"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/3718"}}, "body_html": "<p>Ah, I spent a lot of time trying to make a partial specialization approach work.<br>\nBut I was trying to use SFINAE to specialize for both <code>complex64</code> and <code>complex128</code> at once, which isn't really possible here.<br>\nI should have realized that I can do</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">template</span>&lt;<span class=\"pl-k\">typename</span> From, <span class=\"pl-k\">typename</span> To&gt;\n<span class=\"pl-k\">struct</span> <span class=\"pl-en\">scalar_cast_op</span>&lt;std::complex&lt;From&gt;, To&gt; {\n  To <span class=\"pl-en\">operator</span>()(<span class=\"pl-k\">const</span> std::complex&lt;From&gt;&amp; a) <span class=\"pl-k\">const</span> {\n     ...\n   }\n};</pre></div>\n<p>as you've suggested.<br>\nThis works really well, and should make the code a lot more elegant.<br>\nI'll update the PR.</p>", "body_text": "Ah, I spent a lot of time trying to make a partial specialization approach work.\nBut I was trying to use SFINAE to specialize for both complex64 and complex128 at once, which isn't really possible here.\nI should have realized that I can do\ntemplate<typename From, typename To>\nstruct scalar_cast_op<std::complex<From>, To> {\n  To operator()(const std::complex<From>& a) const {\n     ...\n   }\n};\nas you've suggested.\nThis works really well, and should make the code a lot more elegant.\nI'll update the PR."}