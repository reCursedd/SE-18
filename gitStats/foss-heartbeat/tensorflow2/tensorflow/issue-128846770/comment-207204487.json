{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/207204487", "html_url": "https://github.com/tensorflow/tensorflow/issues/889#issuecomment-207204487", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/889", "id": 207204487, "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzIwNDQ4Nw==", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-08T04:29:49Z", "updated_at": "2016-04-08T04:29:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=80\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ry\">@ry</a>: I wish I could still find my code.  I remember Eigen doing something consistent across GPU and CPU and expected and cudnn doing something different (and seemingly wrong), but I might have introduced a bug.</p>\n<p>The best thing to start with is via a test: add a simple test to conv_ops_test.py that exercises say, a 1x1 convolution with input depth 1 and output depth 1 for a 1x3x3x1 input with stride 2 (so you get four values: the corners multiplied by a filter).</p>\n<p>If you try to run that, you'll first run into a problem doing conv2d shape inference in python (because it checks for stride &lt; filter) -- remove that and make sure that the shape calculation is correct.</p>\n<p>Then you'll probably have to make the same fix in the C++ code (<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ops_util.cc#L41\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ops_util.cc#L41</a>) to remove that check.</p>\n<p>Other than that, I don't think there was anything else I had to do to get the calls to run, but that's when I started seeing different output and didn't have time to debug.  It's possible it has something to do with padding or the shape inference difference between us and cudnn.  Happy to help how I can.</p>", "body_text": "@ry: I wish I could still find my code.  I remember Eigen doing something consistent across GPU and CPU and expected and cudnn doing something different (and seemingly wrong), but I might have introduced a bug.\nThe best thing to start with is via a test: add a simple test to conv_ops_test.py that exercises say, a 1x1 convolution with input depth 1 and output depth 1 for a 1x3x3x1 input with stride 2 (so you get four values: the corners multiplied by a filter).\nIf you try to run that, you'll first run into a problem doing conv2d shape inference in python (because it checks for stride < filter) -- remove that and make sure that the shape calculation is correct.\nThen you'll probably have to make the same fix in the C++ code (https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ops_util.cc#L41) to remove that check.\nOther than that, I don't think there was anything else I had to do to get the calls to run, but that's when I started seeing different output and didn't have time to debug.  It's possible it has something to do with padding or the shape inference difference between us and cudnn.  Happy to help how I can.", "body": "@ry: I wish I could still find my code.  I remember Eigen doing something consistent across GPU and CPU and expected and cudnn doing something different (and seemingly wrong), but I might have introduced a bug.\n\nThe best thing to start with is via a test: add a simple test to conv_ops_test.py that exercises say, a 1x1 convolution with input depth 1 and output depth 1 for a 1x3x3x1 input with stride 2 (so you get four values: the corners multiplied by a filter).  \n\nIf you try to run that, you'll first run into a problem doing conv2d shape inference in python (because it checks for stride < filter) -- remove that and make sure that the shape calculation is correct.\n\nThen you'll probably have to make the same fix in the C++ code (https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ops_util.cc#L41) to remove that check.\n\nOther than that, I don't think there was anything else I had to do to get the calls to run, but that's when I started seeing different output and didn't have time to debug.  It's possible it has something to do with padding or the shape inference difference between us and cudnn.  Happy to help how I can.\n"}