{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/381786075", "html_url": "https://github.com/tensorflow/tensorflow/pull/17478#issuecomment-381786075", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17478", "id": 381786075, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTc4NjA3NQ==", "user": {"login": "selcouthlyBlue", "id": 13268675, "node_id": "MDQ6VXNlcjEzMjY4Njc1", "avatar_url": "https://avatars2.githubusercontent.com/u/13268675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selcouthlyBlue", "html_url": "https://github.com/selcouthlyBlue", "followers_url": "https://api.github.com/users/selcouthlyBlue/followers", "following_url": "https://api.github.com/users/selcouthlyBlue/following{/other_user}", "gists_url": "https://api.github.com/users/selcouthlyBlue/gists{/gist_id}", "starred_url": "https://api.github.com/users/selcouthlyBlue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selcouthlyBlue/subscriptions", "organizations_url": "https://api.github.com/users/selcouthlyBlue/orgs", "repos_url": "https://api.github.com/users/selcouthlyBlue/repos", "events_url": "https://api.github.com/users/selcouthlyBlue/events{/privacy}", "received_events_url": "https://api.github.com/users/selcouthlyBlue/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-16T23:56:10Z", "updated_at": "2018-04-16T23:56:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I just use it like this:</p>\n<pre><code>optimizer = tf.train.MomentumOptimizer(learning_rate,\n                                          momentum=0.9,\n                                          use_nesterov=True)\noptimizer = TowerOptimizer(optimizer)\nreturn slim.learning.create_train_op(loss, optimizer, global_step=tf.train.get_or_create_global_step())\n</code></pre>", "body_text": "I just use it like this:\noptimizer = tf.train.MomentumOptimizer(learning_rate,\n                                          momentum=0.9,\n                                          use_nesterov=True)\noptimizer = TowerOptimizer(optimizer)\nreturn slim.learning.create_train_op(loss, optimizer, global_step=tf.train.get_or_create_global_step())", "body": "I just use it like this:\r\n\r\n```\r\noptimizer = tf.train.MomentumOptimizer(learning_rate,\r\n                                          momentum=0.9,\r\n                                          use_nesterov=True)\r\noptimizer = TowerOptimizer(optimizer)\r\nreturn slim.learning.create_train_op(loss, optimizer, global_step=tf.train.get_or_create_global_step())\r\n```"}