{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12532", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12532/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12532/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12532/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12532", "id": 252370242, "node_id": "MDU6SXNzdWUyNTIzNzAyNDI=", "number": 12532, "title": "Undefined symbol 'fixed_address_empty_string' : new tensorflow op with protobuf ", "user": {"login": "JGuillaumin", "id": 17889729, "node_id": "MDQ6VXNlcjE3ODg5NzI5", "avatar_url": "https://avatars3.githubusercontent.com/u/17889729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JGuillaumin", "html_url": "https://github.com/JGuillaumin", "followers_url": "https://api.github.com/users/JGuillaumin/followers", "following_url": "https://api.github.com/users/JGuillaumin/following{/other_user}", "gists_url": "https://api.github.com/users/JGuillaumin/gists{/gist_id}", "starred_url": "https://api.github.com/users/JGuillaumin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JGuillaumin/subscriptions", "organizations_url": "https://api.github.com/users/JGuillaumin/orgs", "repos_url": "https://api.github.com/users/JGuillaumin/repos", "events_url": "https://api.github.com/users/JGuillaumin/events{/privacy}", "received_events_url": "https://api.github.com/users/JGuillaumin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-23T18:12:33Z", "updated_at": "2017-08-28T04:27:17Z", "closed_at": "2017-08-28T04:27:17Z", "author_association": "NONE", "body_html": "<p>I would like to create a new operation that can communicate to an<br>\nexternal python process. At the momemnt, I created a new operation<br>\nthat sends to a python process \"hello world\" with <code>protobuf</code>.</p>\n<p>In this tiny example, I'm sending a string. In the future I would like<br>\nto send more complex data, like Eigen matrices, that's why I chose<br>\n<code>protobuf</code>. (and for possible 'easy integration into tensorflow).</p>\n<p><strong>msg.proto</strong> :</p>\n<pre><code>package prototest;\n\nmessage Foo {\n  required string bar = 1;\n}\n</code></pre>\n<ul>\n<li><code>protoc msg.proto --cpp_out=. --python_out=.</code></li>\n<li>generates : <code>msg.pb.cc  msg.pb.h  msg_pb2.py</code></li>\n</ul>\n<p><strong>hello_world.cc</strong> :</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op_kernel.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/tensor_shape.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/platform/default/logging.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/shape_inference.h<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> to send serialized data through UPD socket</span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>sys/socket.h<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>arpa/inet.h<span class=\"pl-pds\">&gt;</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> generated header file from protoc</span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>msg.pb.h<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">namespace</span> <span class=\"pl-en\">tensorflow</span>{\n    <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">shape_inference</span>{\n\n        Status <span class=\"pl-en\">HelloWorldShape</span>(InferenceContext* c){\n            std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape_infernce is done<span class=\"pl-pds\">\"</span></span> &lt;&lt; std::endl;\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Status::OK</span>();\n        }\n        <span class=\"pl-en\">REGISTER_OP</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>HelloWorld<span class=\"pl-pds\">\"</span></span>)\n            .SetShapeFn(HelloWorldShape)\n            .Doc(<span class=\"pl-s\"><span class=\"pl-pds\">R\"doc(</span>HelloWorld operation<span class=\"pl-pds\">)doc\"</span></span>);\n    } <span class=\"pl-c\"><span class=\"pl-c\">//</span> end namespace shape_inference</span>\n\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">HelloWorldOp</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">OpKernel</span> {\n    public :\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> constructor</span>\n        <span class=\"pl-k\">explicit</span> <span class=\"pl-en\">HelloWorldOp</span>(OpKernelConstruction* context) : OpKernel(context) {\n            std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>HelloWorldOp constructor<span class=\"pl-pds\">\"</span></span> &lt;&lt; std::endl;\n        }\n\n        <span class=\"pl-k\">void</span> <span class=\"pl-en\">Compute</span>(OpKernelContext* context) <span class=\"pl-k\">override</span> {\n            std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Start Compute method<span class=\"pl-pds\">\"</span></span> &lt;&lt; std::endl;\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span>-----------------------------------------------------------------</span>\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span> send something to a Python process with protobuf</span>\n            <span class=\"pl-k\">struct</span> <span class=\"pl-en\">sockaddr_in</span> addr;\n            addr.<span class=\"pl-smi\">sin_family</span> = AF_INET;\n            <span class=\"pl-c1\">inet_aton</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>127.0.0.1<span class=\"pl-pds\">\"</span></span>, &amp;addr.<span class=\"pl-smi\">sin_addr</span>);\n            addr.<span class=\"pl-smi\">sin_port</span> = <span class=\"pl-c1\">htons</span>(<span class=\"pl-c1\">5555</span>);\n\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span> initialise a foo and set some properties</span>\n            GOOGLE_PROTOBUF_VERIFY_VERSION;\n\n            prototest::Foo foo;\n            foo.<span class=\"pl-c1\">set_bar</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello World<span class=\"pl-pds\">\"</span></span>);\n\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span> serialise to string, this one is obvious ; )</span>\n            std::string buf;\n            foo.<span class=\"pl-c1\">SerializeToString</span>(&amp;buf);\n\n            <span class=\"pl-k\">int</span> sock = <span class=\"pl-c1\">socket</span>(PF_INET, SOCK_DGRAM, <span class=\"pl-c1\">0</span>);\n            <span class=\"pl-c1\">sendto</span>(sock, buf.<span class=\"pl-c1\">data</span>(), buf.<span class=\"pl-c1\">size</span>(), <span class=\"pl-c1\">0</span>, (<span class=\"pl-k\">struct</span> <span class=\"pl-en\">sockaddr</span> *)&amp;addr, <span class=\"pl-k\">sizeof</span>(addr));\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span>------------------------------------------------------------------</span>\n            std::cout &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Compute method is done<span class=\"pl-pds\">\"</span></span> &lt;&lt; std::endl;\n        }\n    };\n    <span class=\"pl-en\">REGISTER_KERNEL_BUILDER</span>(Name(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>HelloWorld<span class=\"pl-pds\">\"</span></span>).Device(DEVICE_CPU), HelloWorldOp);\n} <span class=\"pl-c\"><span class=\"pl-c\">//</span> end namespace tensorflow</span></pre></div>\n<p>To compile and run my code, I use a test scrip found at <a href=\"https://github.com/tensorflow/tensorflow/issues/10950\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/10950/hovercard\">#10950</a></p>\n<p><strong>compiler_and_run.py</strong> :</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python3.5</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Demo from https://github.com/tensorflow/tensorflow/issues/10950</span>\n\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n<span class=\"pl-k\">import</span> os\n<span class=\"pl-k\">import</span> sys\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n\nmy_dir <span class=\"pl-k\">=</span> os.path.dirname(os.path.abspath(<span class=\"pl-c1\">__file__</span>))\nso_filename <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lib_hello_world.so<span class=\"pl-pds\">\"</span></span>\ncc_filename <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello_world.cc<span class=\"pl-pds\">\"</span></span>\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-c1\">compile</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Fix for undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE.</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> https://github.com/tensorflow/tensorflow/issues/1419</span>\n    <span class=\"pl-k\">from</span> google.protobuf.pyext <span class=\"pl-k\">import</span> _message <span class=\"pl-k\">as</span> msg\n    lib <span class=\"pl-k\">=</span> msg.<span class=\"pl-c1\">__file__</span>\n    ld_flags <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-Xlinker<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-rpath<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-Xlinker<span class=\"pl-pds\">\"</span></span>, os.path.dirname(lib),\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-L<span class=\"pl-pds\">\"</span></span>, os.path.dirname(lib), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-l<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>:<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> os.path.basename(lib)]\n    common_opts <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-shared<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-O2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-std=c++11<span class=\"pl-pds\">\"</span></span>]\n    <span class=\"pl-k\">if</span> sys.platform <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>darwin<span class=\"pl-pds\">\"</span></span>:\n        common_opts <span class=\"pl-k\">+=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-undefined<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dynamic_lookup<span class=\"pl-pds\">\"</span></span>]\n    common_opts <span class=\"pl-k\">+=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-I<span class=\"pl-pds\">\"</span></span>, tf.sysconfig.get_include()]\n    common_opts <span class=\"pl-k\">+=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-fPIC<span class=\"pl-pds\">\"</span></span>]\n    common_opts <span class=\"pl-k\">+=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-D_GLIBCXX_USE_CXX11_ABI=0<span class=\"pl-pds\">\"</span></span>]  <span class=\"pl-c\"><span class=\"pl-c\">#</span> might be obsolete in the future</span>\n    opts <span class=\"pl-k\">=</span> common_opts <span class=\"pl-k\">+</span> [cc_filename, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-o<span class=\"pl-pds\">\"</span></span>, so_filename]\n    opts <span class=\"pl-k\">+=</span> ld_flags\n    cmd_bin <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>g++<span class=\"pl-pds\">\"</span></span>\n    cmd_args <span class=\"pl-k\">=</span> [cmd_bin] <span class=\"pl-k\">+</span> opts\n    <span class=\"pl-k\">from</span> subprocess <span class=\"pl-k\">import</span> Popen, <span class=\"pl-c1\">PIPE</span>, <span class=\"pl-c1\">STDOUT</span>, CalledProcessError\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>compile call: <span class=\"pl-c1\">%s</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>.join(cmd_args))\n    proc <span class=\"pl-k\">=</span> Popen(cmd_args, <span class=\"pl-v\">stdout</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">PIPE</span>, <span class=\"pl-v\">stderr</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">STDOUT</span>)\n    stdout, stderr <span class=\"pl-k\">=</span> proc.communicate()\n    <span class=\"pl-k\">assert</span> stderr <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>  <span class=\"pl-c\"><span class=\"pl-c\">#</span> should only have stdout</span>\n    <span class=\"pl-k\">if</span> proc.returncode <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">0</span>:\n      <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>compile failed: <span class=\"pl-c1\">%s</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> cmd_bin)\n      <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Original stdout/stderr:<span class=\"pl-pds\">\"</span></span>)\n      <span class=\"pl-c1\">print</span>(stdout)\n      <span class=\"pl-k\">raise</span> CalledProcessError(<span class=\"pl-v\">returncode</span><span class=\"pl-k\">=</span>proc.returncode, <span class=\"pl-v\">cmd</span><span class=\"pl-k\">=</span>cmd_args)\n    <span class=\"pl-k\">assert</span> os.path.exists(so_filename)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>TensorFlow version:<span class=\"pl-pds\">\"</span></span>, tf.<span class=\"pl-c1\">GIT_VERSION</span>, tf.<span class=\"pl-c1\">VERSION</span>)\n    os.chdir(my_dir)\n    <span class=\"pl-c1\">compile</span>()\n    mod <span class=\"pl-k\">=</span> tf.load_op_library(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-c1\">%s</span>/<span class=\"pl-c1\">%s</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> (my_dir, so_filename))\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>:\n    main()</pre></div>\n<p>This returns :</p>\n<pre lang=\"txt\"><code>TensorFlow version: v1.2.0-rc2-21-g12f033d 1.2.0\ncompile call: g++ -shared -O2 -std=c++11 -I /usr/local/lib/python3.5/dist-packages/tensorflow/include -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 hello_world.cc -o lib_hello_world.so -Xlinker -rpath -Xlinker /usr/local/lib/python3.5/dist-packages/protobuf-3.2.0-py3.5-linux-x86_64.egg/google/protobuf/pyext -L /usr/local/lib/python3.5/dist-packages/protobuf-3.2.0-py3.5-linux-x86_64.egg/google/protobuf/pyext -l :_message.cpython-35m-x86_64-linux-gnu.so\nTraceback (most recent call last):\n  File \"./compile_and_test.py\", line 55, in &lt;module&gt;\n    main()\n  File \"./compile_and_test.py\", line 51, in main\n    mod = tf.load_op_library(\"%s/%s\" % (my_dir, so_filename))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/load_library.py\", line 64, in load_op_library\n    None, None, error_msg, error_code)\ntensorflow.python.framework.errors_impl.NotFoundError: /src/ext_hello_world/lib_hello_world.so: undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE\n</code></pre>\n<p>Compilation seems to work (no fatal error). But `tf.load_op_library()``fails due to undefined library in shared lib (*.so).</p>\n<p>This undefined symbol seems to come from protobuf.</p>\n<p>I installed <code>protoc</code> by myself (see Note about it).</p>\n<p>In <code>tf.sysconfig.get_include()</code> there is a  <code>google/protobuf</code> folder with header files from built tensorflow.</p>\n<p>So I don't know which header files are used during compilation :</p>\n<ul>\n<li>header files from include files of tensorflow ?</li>\n<li>header files of hand-installed protobuf ?</li>\n</ul>\n<p>Or this undefined symbol is not due to this fact ?</p>\n<ul>\n<li>How can I resolve this undefined symbol error in the shared library ?</li>\n<li>May I have to install <code>protoc</code> starting from <code>tensorflow/includes/google/protobuf</code> ? (and not from scratch)</li>\n</ul>\n<p>I observed that in <a href=\"https://github.com/tensorflow/tensorflow/issues/10950\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/10950/hovercard\">#10950</a> :</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> google.protobuf.pyext <span class=\"pl-k\">import</span> _message <span class=\"pl-k\">as</span> msg\nlib <span class=\"pl-k\">=</span> msg.<span class=\"pl-c1\">__file__</span></pre></div>\n<p>returns : <code>/u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext/_message.so</code></p>\n<p>In my case it's : <code>/usr/local/lib/python3.5/dist-packages/protobuf-3.2.0-py3.5-linux-x86_64.egg/google/protobuf/pyext/_message.cpython-35m-x86_64-linux-gnu.so</code><br>\nThis file about protobuf seems to be completely different ...</p>\n<p><strong>Note about protoc install</strong> :<br>\n<code>protoc</code> (protobuf compiler) was not installed.<br>\nI identified the version of protobuf used in tensorflow : v3.2.0 !</p>\n<p>After, I followed protobuf installation instruction (C++ and Python implementation).</p>\n<pre><code>```bash\ncd /opt/\n# clone protobuf repo\ngit clone https://github.com/google/protobuf.git\ncd protobuf\n\n# change to the right branch\n# list tags\ngit tag -l\ngit checkout tags/v3.2.0\n\n# install protobuf\napt-get install autoconf automake libtool curl make g++ unzip\n./autogen.sh\n./configure\nmake\nmake check\nmake install\nldconfig\n\n# protoc version\nprotoc --version\n&gt;&gt;&gt; libprotoc 3.2.0\n\n# print linker and compiler files\npkg-config --cflags --libs protobuf\n&gt;&gt;&gt; -pthread -I/usr/local/include -L/usr/local/lib -lprotobuf -pthread -lpthread\n\n#some useful env variables\nPB_INC=$(pkg-config --cflags protobuf)\nPB_LINK=$(pkg-config --libs protobuf)\nTF_INC=$(python3.5 -c 'import tensorflow as tf; print(tf.sysconfig.get_include())')\nTF_LIBS=$(find $TF_INC/../ -name \"*.so\")\n\n# here, I used python3.5\ncd python\nexport LD_LIBRARY_PATH=../src/.libs\npython3.5 setup.py build --cpp_implementation\npython3.5 setup.py test --cpp_implementation\npython3.5 setup.py install --cpp_implementation\n```\n</code></pre>\n<h3>System information</h3>\n<ul>\n<li>docker : Docker version 1.12.6, build 78d1802</li>\n<li>image : tensorflow/tensorflow:1.2.0-devel-gpu-py3</li>\n<li>based on : ubuntu 16.04 (4.4.0-78-generic)</li>\n<li>tensorflow build from source</li>\n<li>tensorflow version : 1.2.0</li>\n<li>python version : Python 3.5.2</li>\n<li>bazel version :\n<pre><code>Build label: 0.4.5\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Thu Mar 16 12:19:38 2017 (1489666778)\nBuild timestamp: 1489666778\nBuild timestamp as int: 1489666778\n</code></pre>\n</li>\n<li>gcc -v :\n<pre><code>Using built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 5.4.0-6ubuntu1~16.04.4' --with-bugurl=file:///usr/share/doc/gcc-5/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4)\n</code></pre>\n</li>\n</ul>\n<p>Information from <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a> :</p>\n<pre lang=\"txt\"><code>== cat /etc/issue ===============================================\nLinux 2b98f5ebc987 4.4.0-78-generic #99-Ubuntu SMP Thu Apr 27 15:29:09 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\nVERSION=\"16.04.2 LTS (Xenial Xerus)\"\nVERSION_ID=\"16.04\"\nVERSION_CODENAME=xenial\n\n== are we in docker =============================================\nYes\n== compiler =====================================================\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n== uname -a =====================================================\nLinux 2b98f5ebc987 4.4.0-78-generic #99-Ubuntu SMP Thu Apr 27 15:29:09 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n== check pips ===================================================\nnumpy (1.13.0)\nprotobuf (3.3.0)\ntensorflow (1.2.0)\n\n== check for virtualenv =========================================\nFalse\n== tensorflow import ============================================\ntf.VERSION = 1.2.0\ntf.GIT_VERSION = v1.2.0-rc2-21-g12f033d\ntf.COMPILER_VERSION = v1.2.0-rc2-21-g12f033d\nSanity check: array([1], dtype=int32)\n== env ==========================================================\nLD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\nDYLD_LIBRARY_PATH is unset\n== nvidia-smi ===================================================\nWed Aug 23 17:24:13 2017\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 370.28                 Driver Version: 370.28                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce 940MX       Off  | 0000:01:00.0     Off |                  N/A |\n| N/A   54C    P0    N/A /  N/A |    277MiB /  2002MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID  Type  Process name                               Usage      |\n|=============================================================================|\n+-----------------------------------------------------------------------------+\n\n== cuda libs  ===================================================\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudart_static.a\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudart.so.8.0.61\n</code></pre>", "body_text": "I would like to create a new operation that can communicate to an\nexternal python process. At the momemnt, I created a new operation\nthat sends to a python process \"hello world\" with protobuf.\nIn this tiny example, I'm sending a string. In the future I would like\nto send more complex data, like Eigen matrices, that's why I chose\nprotobuf. (and for possible 'easy integration into tensorflow).\nmsg.proto :\npackage prototest;\n\nmessage Foo {\n  required string bar = 1;\n}\n\n\nprotoc msg.proto --cpp_out=. --python_out=.\ngenerates : msg.pb.cc  msg.pb.h  msg_pb2.py\n\nhello_world.cc :\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/platform/default/logging.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\n// to send serialized data through UPD socket\n#include <sys/socket.h>\n#include <arpa/inet.h>\n\n// generated header file from protoc\n#include \"msg.pb.h\"\n\nnamespace tensorflow{\n    namespace shape_inference{\n\n        Status HelloWorldShape(InferenceContext* c){\n            std::cout << \"shape_infernce is done\" << std::endl;\n            return Status::OK();\n        }\n        REGISTER_OP(\"HelloWorld\")\n            .SetShapeFn(HelloWorldShape)\n            .Doc(R\"doc(HelloWorld operation)doc\");\n    } // end namespace shape_inference\n\n    class HelloWorldOp : public OpKernel {\n    public :\n        // constructor\n        explicit HelloWorldOp(OpKernelConstruction* context) : OpKernel(context) {\n            std::cout << \"HelloWorldOp constructor\" << std::endl;\n        }\n\n        void Compute(OpKernelContext* context) override {\n            std::cout << \"Start Compute method\" << std::endl;\n            //-----------------------------------------------------------------\n            // send something to a Python process with protobuf\n            struct sockaddr_in addr;\n            addr.sin_family = AF_INET;\n            inet_aton(\"127.0.0.1\", &addr.sin_addr);\n            addr.sin_port = htons(5555);\n\n            // initialise a foo and set some properties\n            GOOGLE_PROTOBUF_VERIFY_VERSION;\n\n            prototest::Foo foo;\n            foo.set_bar(\"Hello World\");\n\n            // serialise to string, this one is obvious ; )\n            std::string buf;\n            foo.SerializeToString(&buf);\n\n            int sock = socket(PF_INET, SOCK_DGRAM, 0);\n            sendto(sock, buf.data(), buf.size(), 0, (struct sockaddr *)&addr, sizeof(addr));\n            //------------------------------------------------------------------\n            std::cout << \"Compute method is done\" << std::endl;\n        }\n    };\n    REGISTER_KERNEL_BUILDER(Name(\"HelloWorld\").Device(DEVICE_CPU), HelloWorldOp);\n} // end namespace tensorflow\nTo compile and run my code, I use a test scrip found at #10950\ncompiler_and_run.py :\n#!/usr/bin/env python3.5\n\n# Demo from https://github.com/tensorflow/tensorflow/issues/10950\n\nfrom __future__ import print_function\nimport os\nimport sys\nimport tensorflow as tf\n\n\nmy_dir = os.path.dirname(os.path.abspath(__file__))\nso_filename = \"lib_hello_world.so\"\ncc_filename = \"hello_world.cc\"\n\n\ndef compile():\n    # Fix for undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE.\n    # https://github.com/tensorflow/tensorflow/issues/1419\n    from google.protobuf.pyext import _message as msg\n    lib = msg.__file__\n    ld_flags = [\n        \"-Xlinker\", \"-rpath\", \"-Xlinker\", os.path.dirname(lib),\n        \"-L\", os.path.dirname(lib), \"-l\", \":\" + os.path.basename(lib)]\n    common_opts = [\"-shared\", \"-O2\", \"-std=c++11\"]\n    if sys.platform == \"darwin\":\n        common_opts += [\"-undefined\", \"dynamic_lookup\"]\n    common_opts += [\"-I\", tf.sysconfig.get_include()]\n    common_opts += [\"-fPIC\"]\n    common_opts += [\"-D_GLIBCXX_USE_CXX11_ABI=0\"]  # might be obsolete in the future\n    opts = common_opts + [cc_filename, \"-o\", so_filename]\n    opts += ld_flags\n    cmd_bin = \"g++\"\n    cmd_args = [cmd_bin] + opts\n    from subprocess import Popen, PIPE, STDOUT, CalledProcessError\n    print(\"compile call: %s\" % \" \".join(cmd_args))\n    proc = Popen(cmd_args, stdout=PIPE, stderr=STDOUT)\n    stdout, stderr = proc.communicate()\n    assert stderr is None  # should only have stdout\n    if proc.returncode != 0:\n      print(\"compile failed: %s\" % cmd_bin)\n      print(\"Original stdout/stderr:\")\n      print(stdout)\n      raise CalledProcessError(returncode=proc.returncode, cmd=cmd_args)\n    assert os.path.exists(so_filename)\n\n\ndef main():\n    print(\"TensorFlow version:\", tf.GIT_VERSION, tf.VERSION)\n    os.chdir(my_dir)\n    compile()\n    mod = tf.load_op_library(\"%s/%s\" % (my_dir, so_filename))\n\n\nif __name__ == \"__main__\":\n    main()\nThis returns :\nTensorFlow version: v1.2.0-rc2-21-g12f033d 1.2.0\ncompile call: g++ -shared -O2 -std=c++11 -I /usr/local/lib/python3.5/dist-packages/tensorflow/include -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 hello_world.cc -o lib_hello_world.so -Xlinker -rpath -Xlinker /usr/local/lib/python3.5/dist-packages/protobuf-3.2.0-py3.5-linux-x86_64.egg/google/protobuf/pyext -L /usr/local/lib/python3.5/dist-packages/protobuf-3.2.0-py3.5-linux-x86_64.egg/google/protobuf/pyext -l :_message.cpython-35m-x86_64-linux-gnu.so\nTraceback (most recent call last):\n  File \"./compile_and_test.py\", line 55, in <module>\n    main()\n  File \"./compile_and_test.py\", line 51, in main\n    mod = tf.load_op_library(\"%s/%s\" % (my_dir, so_filename))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/load_library.py\", line 64, in load_op_library\n    None, None, error_msg, error_code)\ntensorflow.python.framework.errors_impl.NotFoundError: /src/ext_hello_world/lib_hello_world.so: undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE\n\nCompilation seems to work (no fatal error). But `tf.load_op_library()``fails due to undefined library in shared lib (*.so).\nThis undefined symbol seems to come from protobuf.\nI installed protoc by myself (see Note about it).\nIn tf.sysconfig.get_include() there is a  google/protobuf folder with header files from built tensorflow.\nSo I don't know which header files are used during compilation :\n\nheader files from include files of tensorflow ?\nheader files of hand-installed protobuf ?\n\nOr this undefined symbol is not due to this fact ?\n\nHow can I resolve this undefined symbol error in the shared library ?\nMay I have to install protoc starting from tensorflow/includes/google/protobuf ? (and not from scratch)\n\nI observed that in #10950 :\nfrom google.protobuf.pyext import _message as msg\nlib = msg.__file__\nreturns : /u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext/_message.so\nIn my case it's : /usr/local/lib/python3.5/dist-packages/protobuf-3.2.0-py3.5-linux-x86_64.egg/google/protobuf/pyext/_message.cpython-35m-x86_64-linux-gnu.so\nThis file about protobuf seems to be completely different ...\nNote about protoc install :\nprotoc (protobuf compiler) was not installed.\nI identified the version of protobuf used in tensorflow : v3.2.0 !\nAfter, I followed protobuf installation instruction (C++ and Python implementation).\n```bash\ncd /opt/\n# clone protobuf repo\ngit clone https://github.com/google/protobuf.git\ncd protobuf\n\n# change to the right branch\n# list tags\ngit tag -l\ngit checkout tags/v3.2.0\n\n# install protobuf\napt-get install autoconf automake libtool curl make g++ unzip\n./autogen.sh\n./configure\nmake\nmake check\nmake install\nldconfig\n\n# protoc version\nprotoc --version\n>>> libprotoc 3.2.0\n\n# print linker and compiler files\npkg-config --cflags --libs protobuf\n>>> -pthread -I/usr/local/include -L/usr/local/lib -lprotobuf -pthread -lpthread\n\n#some useful env variables\nPB_INC=$(pkg-config --cflags protobuf)\nPB_LINK=$(pkg-config --libs protobuf)\nTF_INC=$(python3.5 -c 'import tensorflow as tf; print(tf.sysconfig.get_include())')\nTF_LIBS=$(find $TF_INC/../ -name \"*.so\")\n\n# here, I used python3.5\ncd python\nexport LD_LIBRARY_PATH=../src/.libs\npython3.5 setup.py build --cpp_implementation\npython3.5 setup.py test --cpp_implementation\npython3.5 setup.py install --cpp_implementation\n```\n\nSystem information\n\ndocker : Docker version 1.12.6, build 78d1802\nimage : tensorflow/tensorflow:1.2.0-devel-gpu-py3\nbased on : ubuntu 16.04 (4.4.0-78-generic)\ntensorflow build from source\ntensorflow version : 1.2.0\npython version : Python 3.5.2\nbazel version :\nBuild label: 0.4.5\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Thu Mar 16 12:19:38 2017 (1489666778)\nBuild timestamp: 1489666778\nBuild timestamp as int: 1489666778\n\n\ngcc -v :\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 5.4.0-6ubuntu1~16.04.4' --with-bugurl=file:///usr/share/doc/gcc-5/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4)\n\n\n\nInformation from https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh :\n== cat /etc/issue ===============================================\nLinux 2b98f5ebc987 4.4.0-78-generic #99-Ubuntu SMP Thu Apr 27 15:29:09 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\nVERSION=\"16.04.2 LTS (Xenial Xerus)\"\nVERSION_ID=\"16.04\"\nVERSION_CODENAME=xenial\n\n== are we in docker =============================================\nYes\n== compiler =====================================================\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n== uname -a =====================================================\nLinux 2b98f5ebc987 4.4.0-78-generic #99-Ubuntu SMP Thu Apr 27 15:29:09 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n== check pips ===================================================\nnumpy (1.13.0)\nprotobuf (3.3.0)\ntensorflow (1.2.0)\n\n== check for virtualenv =========================================\nFalse\n== tensorflow import ============================================\ntf.VERSION = 1.2.0\ntf.GIT_VERSION = v1.2.0-rc2-21-g12f033d\ntf.COMPILER_VERSION = v1.2.0-rc2-21-g12f033d\nSanity check: array([1], dtype=int32)\n== env ==========================================================\nLD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\nDYLD_LIBRARY_PATH is unset\n== nvidia-smi ===================================================\nWed Aug 23 17:24:13 2017\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 370.28                 Driver Version: 370.28                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce 940MX       Off  | 0000:01:00.0     Off |                  N/A |\n| N/A   54C    P0    N/A /  N/A |    277MiB /  2002MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID  Type  Process name                               Usage      |\n|=============================================================================|\n+-----------------------------------------------------------------------------+\n\n== cuda libs  ===================================================\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudart_static.a\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudart.so.8.0.61", "body": "I would like to create a new operation that can communicate to an\r\nexternal python process. At the momemnt, I created a new operation\r\nthat sends to a python process \"hello world\" with `protobuf`.\r\n\r\nIn this tiny example, I'm sending a string. In the future I would like\r\nto send more complex data, like Eigen matrices, that's why I chose\r\n`protobuf`. (and for possible 'easy integration into tensorflow).\r\n\r\n**msg.proto** :\r\n```\r\npackage prototest;\r\n\r\nmessage Foo {\r\n  required string bar = 1;\r\n}\r\n```\r\n\r\n- `protoc msg.proto --cpp_out=. --python_out=.`\r\n- generates : `msg.pb.cc  msg.pb.h  msg_pb2.py`\r\n\r\n**hello_world.cc** :\r\n\r\n```cpp\r\n#include \"tensorflow/core/framework/op_kernel.h\"\r\n#include \"tensorflow/core/framework/tensor_shape.h\"\r\n#include \"tensorflow/core/platform/default/logging.h\"\r\n#include \"tensorflow/core/framework/shape_inference.h\"\r\n\r\n// to send serialized data through UPD socket\r\n#include <sys/socket.h>\r\n#include <arpa/inet.h>\r\n\r\n// generated header file from protoc\r\n#include \"msg.pb.h\"\r\n\r\nnamespace tensorflow{\r\n    namespace shape_inference{\r\n\r\n        Status HelloWorldShape(InferenceContext* c){\r\n            std::cout << \"shape_infernce is done\" << std::endl;\r\n            return Status::OK();\r\n        }\r\n        REGISTER_OP(\"HelloWorld\")\r\n            .SetShapeFn(HelloWorldShape)\r\n            .Doc(R\"doc(HelloWorld operation)doc\");\r\n    } // end namespace shape_inference\r\n\r\n    class HelloWorldOp : public OpKernel {\r\n    public :\r\n        // constructor\r\n        explicit HelloWorldOp(OpKernelConstruction* context) : OpKernel(context) {\r\n            std::cout << \"HelloWorldOp constructor\" << std::endl;\r\n        }\r\n\r\n        void Compute(OpKernelContext* context) override {\r\n            std::cout << \"Start Compute method\" << std::endl;\r\n            //-----------------------------------------------------------------\r\n            // send something to a Python process with protobuf\r\n            struct sockaddr_in addr;\r\n            addr.sin_family = AF_INET;\r\n            inet_aton(\"127.0.0.1\", &addr.sin_addr);\r\n            addr.sin_port = htons(5555);\r\n\r\n            // initialise a foo and set some properties\r\n            GOOGLE_PROTOBUF_VERIFY_VERSION;\r\n\r\n            prototest::Foo foo;\r\n            foo.set_bar(\"Hello World\");\r\n\r\n            // serialise to string, this one is obvious ; )\r\n            std::string buf;\r\n            foo.SerializeToString(&buf);\r\n\r\n            int sock = socket(PF_INET, SOCK_DGRAM, 0);\r\n            sendto(sock, buf.data(), buf.size(), 0, (struct sockaddr *)&addr, sizeof(addr));\r\n            //------------------------------------------------------------------\r\n            std::cout << \"Compute method is done\" << std::endl;\r\n        }\r\n    };\r\n    REGISTER_KERNEL_BUILDER(Name(\"HelloWorld\").Device(DEVICE_CPU), HelloWorldOp);\r\n} // end namespace tensorflow\r\n```\r\n\r\nTo compile and run my code, I use a test scrip found at [#10950](http://github.com/tensorflow/tensorflow/issues/10950)\r\n\r\n**compiler_and_run.py** :\r\n\r\n```python\r\n#!/usr/bin/env python3.5\r\n\r\n# Demo from https://github.com/tensorflow/tensorflow/issues/10950\r\n\r\nfrom __future__ import print_function\r\nimport os\r\nimport sys\r\nimport tensorflow as tf\r\n\r\n\r\nmy_dir = os.path.dirname(os.path.abspath(__file__))\r\nso_filename = \"lib_hello_world.so\"\r\ncc_filename = \"hello_world.cc\"\r\n\r\n\r\ndef compile():\r\n    # Fix for undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE.\r\n    # https://github.com/tensorflow/tensorflow/issues/1419\r\n    from google.protobuf.pyext import _message as msg\r\n    lib = msg.__file__\r\n    ld_flags = [\r\n        \"-Xlinker\", \"-rpath\", \"-Xlinker\", os.path.dirname(lib),\r\n        \"-L\", os.path.dirname(lib), \"-l\", \":\" + os.path.basename(lib)]\r\n    common_opts = [\"-shared\", \"-O2\", \"-std=c++11\"]\r\n    if sys.platform == \"darwin\":\r\n        common_opts += [\"-undefined\", \"dynamic_lookup\"]\r\n    common_opts += [\"-I\", tf.sysconfig.get_include()]\r\n    common_opts += [\"-fPIC\"]\r\n    common_opts += [\"-D_GLIBCXX_USE_CXX11_ABI=0\"]  # might be obsolete in the future\r\n    opts = common_opts + [cc_filename, \"-o\", so_filename]\r\n    opts += ld_flags\r\n    cmd_bin = \"g++\"\r\n    cmd_args = [cmd_bin] + opts\r\n    from subprocess import Popen, PIPE, STDOUT, CalledProcessError\r\n    print(\"compile call: %s\" % \" \".join(cmd_args))\r\n    proc = Popen(cmd_args, stdout=PIPE, stderr=STDOUT)\r\n    stdout, stderr = proc.communicate()\r\n    assert stderr is None  # should only have stdout\r\n    if proc.returncode != 0:\r\n      print(\"compile failed: %s\" % cmd_bin)\r\n      print(\"Original stdout/stderr:\")\r\n      print(stdout)\r\n      raise CalledProcessError(returncode=proc.returncode, cmd=cmd_args)\r\n    assert os.path.exists(so_filename)\r\n\r\n\r\ndef main():\r\n    print(\"TensorFlow version:\", tf.GIT_VERSION, tf.VERSION)\r\n    os.chdir(my_dir)\r\n    compile()\r\n    mod = tf.load_op_library(\"%s/%s\" % (my_dir, so_filename))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n\r\nThis returns :\r\n\r\n```txt\r\nTensorFlow version: v1.2.0-rc2-21-g12f033d 1.2.0\r\ncompile call: g++ -shared -O2 -std=c++11 -I /usr/local/lib/python3.5/dist-packages/tensorflow/include -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 hello_world.cc -o lib_hello_world.so -Xlinker -rpath -Xlinker /usr/local/lib/python3.5/dist-packages/protobuf-3.2.0-py3.5-linux-x86_64.egg/google/protobuf/pyext -L /usr/local/lib/python3.5/dist-packages/protobuf-3.2.0-py3.5-linux-x86_64.egg/google/protobuf/pyext -l :_message.cpython-35m-x86_64-linux-gnu.so\r\nTraceback (most recent call last):\r\n  File \"./compile_and_test.py\", line 55, in <module>\r\n    main()\r\n  File \"./compile_and_test.py\", line 51, in main\r\n    mod = tf.load_op_library(\"%s/%s\" % (my_dir, so_filename))\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/load_library.py\", line 64, in load_op_library\r\n    None, None, error_msg, error_code)\r\ntensorflow.python.framework.errors_impl.NotFoundError: /src/ext_hello_world/lib_hello_world.so: undefined symbol: _ZN6google8protobuf8internal26fixed_address_empty_stringE\r\n```\r\n\r\nCompilation seems to work (no fatal error). But `tf.load_op_library()``fails due to undefined library in shared lib (*.so).\r\n\r\nThis undefined symbol seems to come from protobuf.\r\n\r\nI installed `protoc` by myself (see Note about it).\r\n\r\n\r\nIn `tf.sysconfig.get_include()` there is a  `google/protobuf` folder with header files from built tensorflow.\r\n\r\nSo I don't know which header files are used during compilation :\r\n - header files from include files of tensorflow ?\r\n - header files of hand-installed protobuf ?\r\n\r\nOr this undefined symbol is not due to this fact ? \r\n\r\n- How can I resolve this undefined symbol error in the shared library ?\r\n- May I have to install `protoc` starting from `tensorflow/includes/google/protobuf` ? (and not from scratch)\r\n\r\n\r\nI observed that in [#10950](https://github.com/tensorflow/tensorflow/issues/10950) : \r\n```python\r\nfrom google.protobuf.pyext import _message as msg\r\nlib = msg.__file__\r\n```\r\nreturns : `/u/zeyer/.local/lib/python2.7/site-packages/google/protobuf/pyext/_message.so`\r\n\r\nIn my case it's : `/usr/local/lib/python3.5/dist-packages/protobuf-3.2.0-py3.5-linux-x86_64.egg/google/protobuf/pyext/_message.cpython-35m-x86_64-linux-gnu.so`\r\nThis file about protobuf seems to be completely different ... \r\n\r\n \r\n\r\n**Note about protoc install** :\r\n`protoc` (protobuf compiler) was not installed.\r\nI identified the version of protobuf used in tensorflow : v3.2.0 !\r\n\r\nAfter, I followed protobuf installation instruction (C++ and Python implementation).\r\n\r\n    ```bash\r\n    cd /opt/\r\n    # clone protobuf repo\r\n    git clone https://github.com/google/protobuf.git\r\n    cd protobuf\r\n\r\n    # change to the right branch\r\n    # list tags\r\n    git tag -l\r\n    git checkout tags/v3.2.0\r\n\r\n    # install protobuf\r\n    apt-get install autoconf automake libtool curl make g++ unzip\r\n    ./autogen.sh\r\n    ./configure\r\n    make\r\n    make check\r\n    make install\r\n    ldconfig\r\n\r\n    # protoc version\r\n    protoc --version\r\n    >>> libprotoc 3.2.0\r\n\r\n    # print linker and compiler files\r\n    pkg-config --cflags --libs protobuf\r\n    >>> -pthread -I/usr/local/include -L/usr/local/lib -lprotobuf -pthread -lpthread\r\n\r\n    #some useful env variables\r\n    PB_INC=$(pkg-config --cflags protobuf)\r\n    PB_LINK=$(pkg-config --libs protobuf)\r\n    TF_INC=$(python3.5 -c 'import tensorflow as tf; print(tf.sysconfig.get_include())')\r\n    TF_LIBS=$(find $TF_INC/../ -name \"*.so\")\r\n\r\n    # here, I used python3.5\r\n    cd python\r\n    export LD_LIBRARY_PATH=../src/.libs\r\n    python3.5 setup.py build --cpp_implementation\r\n    python3.5 setup.py test --cpp_implementation\r\n    python3.5 setup.py install --cpp_implementation\r\n    ```\r\n### System information\r\n\r\n- docker : Docker version 1.12.6, build 78d1802\r\n- image : tensorflow/tensorflow:1.2.0-devel-gpu-py3\r\n- based on : ubuntu 16.04 (4.4.0-78-generic)\r\n- tensorflow build from source\r\n- tensorflow version : 1.2.0\r\n- python version : Python 3.5.2\r\n- bazel version :\r\n    ```\r\n    Build label: 0.4.5\r\n    Build target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\n    Build time: Thu Mar 16 12:19:38 2017 (1489666778)\r\n    Build timestamp: 1489666778\r\n    Build timestamp as int: 1489666778\r\n    ```\r\n- gcc -v :\r\n    ```\r\n    Using built-in specs.\r\n    COLLECT_GCC=gcc\r\n    COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper\r\n    Target: x86_64-linux-gnu\r\n    Configured with: ../src/configure -v --with-pkgversion='Ubuntu 5.4.0-6ubuntu1~16.04.4' --with-bugurl=file:///usr/share/doc/gcc-5/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\r\n    Thread model: posix\r\n    gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4)\r\n    ```\r\nInformation from https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh :\r\n\r\n```txt\r\n== cat /etc/issue ===============================================\r\nLinux 2b98f5ebc987 4.4.0-78-generic #99-Ubuntu SMP Thu Apr 27 15:29:09 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\nVERSION=\"16.04.2 LTS (Xenial Xerus)\"\r\nVERSION_ID=\"16.04\"\r\nVERSION_CODENAME=xenial\r\n\r\n== are we in docker =============================================\r\nYes\r\n== compiler =====================================================\r\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\r\nCopyright (C) 2015 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n== uname -a =====================================================\r\nLinux 2b98f5ebc987 4.4.0-78-generic #99-Ubuntu SMP Thu Apr 27 15:29:09 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n== check pips ===================================================\r\nnumpy (1.13.0)\r\nprotobuf (3.3.0)\r\ntensorflow (1.2.0)\r\n\r\n== check for virtualenv =========================================\r\nFalse\r\n== tensorflow import ============================================\r\ntf.VERSION = 1.2.0\r\ntf.GIT_VERSION = v1.2.0-rc2-21-g12f033d\r\ntf.COMPILER_VERSION = v1.2.0-rc2-21-g12f033d\r\nSanity check: array([1], dtype=int32)\r\n== env ==========================================================\r\nLD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\r\nDYLD_LIBRARY_PATH is unset\r\n== nvidia-smi ===================================================\r\nWed Aug 23 17:24:13 2017\r\n+-----------------------------------------------------------------------------+\r\n| NVIDIA-SMI 370.28                 Driver Version: 370.28                    |\r\n|-------------------------------+----------------------+----------------------+\r\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\r\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\r\n|===============================+======================+======================|\r\n|   0  GeForce 940MX       Off  | 0000:01:00.0     Off |                  N/A |\r\n| N/A   54C    P0    N/A /  N/A |    277MiB /  2002MiB |      0%      Default |\r\n+-------------------------------+----------------------+----------------------+\r\n\r\n+-----------------------------------------------------------------------------+\r\n| Processes:                                                       GPU Memory |\r\n|  GPU       PID  Type  Process name                               Usage      |\r\n|=============================================================================|\r\n+-----------------------------------------------------------------------------+\r\n\r\n== cuda libs  ===================================================\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudart_static.a\r\n/usr/local/cuda-8.0/targets/x86_64-linux/lib/libcudart.so.8.0.61\r\n```"}