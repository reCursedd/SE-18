{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/215159872", "html_url": "https://github.com/tensorflow/tensorflow/issues/2057#issuecomment-215159872", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2057", "id": 215159872, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTE1OTg3Mg==", "user": {"login": "kaiix", "id": 172202, "node_id": "MDQ6VXNlcjE3MjIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/172202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaiix", "html_url": "https://github.com/kaiix", "followers_url": "https://api.github.com/users/kaiix/followers", "following_url": "https://api.github.com/users/kaiix/following{/other_user}", "gists_url": "https://api.github.com/users/kaiix/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaiix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaiix/subscriptions", "organizations_url": "https://api.github.com/users/kaiix/orgs", "repos_url": "https://api.github.com/users/kaiix/repos", "events_url": "https://api.github.com/users/kaiix/events{/privacy}", "received_events_url": "https://api.github.com/users/kaiix/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-27T17:26:30Z", "updated_at": "2016-04-27T17:26:30Z", "author_association": "NONE", "body_html": "<p>temporary workaround</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">def</span> <span class=\"pl-en\">save_vocab</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Save the vocabulary to a file so the model can be reloaded.<span class=\"pl-pds\">\"\"\"</span></span>\n    opts <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._options\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(os.path.join(opts.save_path, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vocab.txt<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>w<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> f:\n      <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(opts.vocab_size):\n        f.write(<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">\"</span><span class=\"pl-c1\">{}</span> <span class=\"pl-c1\">{}</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>.format(tf.compat.as_text(opts.vocab_words[i]),\n                             opts.vocab_counts[i]).encode(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>utf8<span class=\"pl-pds\">'</span></span>))\n</pre></div>", "body_text": "temporary workaround\n  def save_vocab(self):\n    \"\"\"Save the vocabulary to a file so the model can be reloaded.\"\"\"\n    opts = self._options\n    with open(os.path.join(opts.save_path, \"vocab.txt\"), \"w\") as f:\n      for i in xrange(opts.vocab_size):\n        f.write(u\"{} {}\\n\".format(tf.compat.as_text(opts.vocab_words[i]),\n                             opts.vocab_counts[i]).encode('utf8'))", "body": "temporary workaround\n\n``` python\n  def save_vocab(self):\n    \"\"\"Save the vocabulary to a file so the model can be reloaded.\"\"\"\n    opts = self._options\n    with open(os.path.join(opts.save_path, \"vocab.txt\"), \"w\") as f:\n      for i in xrange(opts.vocab_size):\n        f.write(u\"{} {}\\n\".format(tf.compat.as_text(opts.vocab_words[i]),\n                             opts.vocab_counts[i]).encode('utf8'))\n\n```\n"}