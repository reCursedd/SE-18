{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/292524119", "html_url": "https://github.com/tensorflow/tensorflow/issues/8887#issuecomment-292524119", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8887", "id": 292524119, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjUyNDExOQ==", "user": {"login": "PhilJd", "id": 16101605, "node_id": "MDQ6VXNlcjE2MTAxNjA1", "avatar_url": "https://avatars2.githubusercontent.com/u/16101605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PhilJd", "html_url": "https://github.com/PhilJd", "followers_url": "https://api.github.com/users/PhilJd/followers", "following_url": "https://api.github.com/users/PhilJd/following{/other_user}", "gists_url": "https://api.github.com/users/PhilJd/gists{/gist_id}", "starred_url": "https://api.github.com/users/PhilJd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PhilJd/subscriptions", "organizations_url": "https://api.github.com/users/PhilJd/orgs", "repos_url": "https://api.github.com/users/PhilJd/repos", "events_url": "https://api.github.com/users/PhilJd/events{/privacy}", "received_events_url": "https://api.github.com/users/PhilJd/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-07T12:32:17Z", "updated_at": "2017-04-07T12:32:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The sprite sheet for the embedding visualization is independent of your training data. The sprite sheet won't be used as input for the training process.</p>\n<p>To ensure that a sprite of the sprite sheet corresponds to an embedding, you need to make sure that you compute and add the embeddings to tensorboard in the same order that you have in the sprite sheet.<br>\nMost probably you'll only add embeddings to tensorboard every x iterations. So you could shuffle your images during training and when you reach iteration x, feed them in order.</p>\n<pre><code>projector_config = projector.ProjectorConfig()\nemb_conf = self.projector_config.embeddings.add()\nemb_conf.metadata_path = \"tsv_filename\"\nemb_conf.sprite.image_path = \"spritesheet_name\"\ntrain_images = [img1, img2 ...]  # same order as in your spritesheet\n\n\ninference_op = ... # the inference op of your graph, taking images an input, outputs the embeddings\nloss_op = loss(inference_op)  # compute the loss based on your embeddings\ntrain_op = tf.Optimizer().minimize(loss_op)  # the traninig op of your graph\nsess = tf.Session()\nfor step in range(1000):\n    sess.run(train_op)\n    if step % 100 == 0:\n        for img_batch in train_images:\n            embeddings += sess.run(inference_op, feed={placeholder: img_batch})\n       ... routine to add and save the embeddings with tensorboard\n            \n</code></pre>\n<p>Regarding your third question: The only situation where creating the sprites during training might be useful is if you alter the images during training. However if you only apply small changes, e.g. add some color noise, the resulting embedding won't be too different and you'd only get a lot of images on the same spot.</p>", "body_text": "The sprite sheet for the embedding visualization is independent of your training data. The sprite sheet won't be used as input for the training process.\nTo ensure that a sprite of the sprite sheet corresponds to an embedding, you need to make sure that you compute and add the embeddings to tensorboard in the same order that you have in the sprite sheet.\nMost probably you'll only add embeddings to tensorboard every x iterations. So you could shuffle your images during training and when you reach iteration x, feed them in order.\nprojector_config = projector.ProjectorConfig()\nemb_conf = self.projector_config.embeddings.add()\nemb_conf.metadata_path = \"tsv_filename\"\nemb_conf.sprite.image_path = \"spritesheet_name\"\ntrain_images = [img1, img2 ...]  # same order as in your spritesheet\n\n\ninference_op = ... # the inference op of your graph, taking images an input, outputs the embeddings\nloss_op = loss(inference_op)  # compute the loss based on your embeddings\ntrain_op = tf.Optimizer().minimize(loss_op)  # the traninig op of your graph\nsess = tf.Session()\nfor step in range(1000):\n    sess.run(train_op)\n    if step % 100 == 0:\n        for img_batch in train_images:\n            embeddings += sess.run(inference_op, feed={placeholder: img_batch})\n       ... routine to add and save the embeddings with tensorboard\n            \n\nRegarding your third question: The only situation where creating the sprites during training might be useful is if you alter the images during training. However if you only apply small changes, e.g. add some color noise, the resulting embedding won't be too different and you'd only get a lot of images on the same spot.", "body": "The sprite sheet for the embedding visualization is independent of your training data. The sprite sheet won't be used as input for the training process. \r\n\r\nTo ensure that a sprite of the sprite sheet corresponds to an embedding, you need to make sure that you compute and add the embeddings to tensorboard in the same order that you have in the sprite sheet.\r\nMost probably you'll only add embeddings to tensorboard every x iterations. So you could shuffle your images during training and when you reach iteration x, feed them in order. \r\n\r\n```\r\nprojector_config = projector.ProjectorConfig()\r\nemb_conf = self.projector_config.embeddings.add()\r\nemb_conf.metadata_path = \"tsv_filename\"\r\nemb_conf.sprite.image_path = \"spritesheet_name\"\r\ntrain_images = [img1, img2 ...]  # same order as in your spritesheet\r\n\r\n\r\ninference_op = ... # the inference op of your graph, taking images an input, outputs the embeddings\r\nloss_op = loss(inference_op)  # compute the loss based on your embeddings\r\ntrain_op = tf.Optimizer().minimize(loss_op)  # the traninig op of your graph\r\nsess = tf.Session()\r\nfor step in range(1000):\r\n    sess.run(train_op)\r\n    if step % 100 == 0:\r\n        for img_batch in train_images:\r\n            embeddings += sess.run(inference_op, feed={placeholder: img_batch})\r\n       ... routine to add and save the embeddings with tensorboard\r\n            \r\n```\r\n\r\nRegarding your third question: The only situation where creating the sprites during training might be useful is if you alter the images during training. However if you only apply small changes, e.g. add some color noise, the resulting embedding won't be too different and you'd only get a lot of images on the same spot."}