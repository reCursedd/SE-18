{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3026", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3026/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3026/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3026/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3026", "id": 162111258, "node_id": "MDU6SXNzdWUxNjIxMTEyNTg=", "number": 3026, "title": "Accessing ALL the states in rnn.py", "user": {"login": "philipperemy", "id": 4516927, "node_id": "MDQ6VXNlcjQ1MTY5Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4516927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipperemy", "html_url": "https://github.com/philipperemy", "followers_url": "https://api.github.com/users/philipperemy/followers", "following_url": "https://api.github.com/users/philipperemy/following{/other_user}", "gists_url": "https://api.github.com/users/philipperemy/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipperemy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipperemy/subscriptions", "organizations_url": "https://api.github.com/users/philipperemy/orgs", "repos_url": "https://api.github.com/users/philipperemy/repos", "events_url": "https://api.github.com/users/philipperemy/events{/privacy}", "received_events_url": "https://api.github.com/users/philipperemy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-06-24T09:38:42Z", "updated_at": "2016-06-27T06:46:41Z", "closed_at": "2016-06-27T06:46:41Z", "author_association": "NONE", "body_html": "<p>Dear all,</p>\n<p>Would it be possible to return all the states when we call the <code>rnn</code> function in <code>tensorflow/tensorflow/python/ops/rnn.py</code> (and not only the final state):</p>\n<pre><code>def rnn(cell, inputs, initial_state=None, dtype=None,\n        sequence_length=None, scope=None):\n</code></pre>\n<p>I posted the code of the latest version as an illustration:</p>\n<pre><code>   for time, input_ in enumerate(inputs):\n      if time &gt; 0: varscope.reuse_variables()\n      # pylint: disable=cell-var-from-loop\n      call_cell = lambda: cell(input_, state)\n      # pylint: enable=cell-var-from-loop\n      if sequence_length is not None:\n        (output, state) = _rnn_step(\n            time=time,\n            sequence_length=sequence_length,\n            min_sequence_length=min_sequence_length,\n            max_sequence_length=max_sequence_length,\n            zero_output=zero_output,\n            state=state,\n            call_cell=call_cell,\n            state_size=cell.state_size)\n      else:\n        (output, state) = call_cell()\n\n      outputs.append(output)\n\n    return (outputs, state)\n</code></pre>\n<p>Thanks!</p>", "body_text": "Dear all,\nWould it be possible to return all the states when we call the rnn function in tensorflow/tensorflow/python/ops/rnn.py (and not only the final state):\ndef rnn(cell, inputs, initial_state=None, dtype=None,\n        sequence_length=None, scope=None):\n\nI posted the code of the latest version as an illustration:\n   for time, input_ in enumerate(inputs):\n      if time > 0: varscope.reuse_variables()\n      # pylint: disable=cell-var-from-loop\n      call_cell = lambda: cell(input_, state)\n      # pylint: enable=cell-var-from-loop\n      if sequence_length is not None:\n        (output, state) = _rnn_step(\n            time=time,\n            sequence_length=sequence_length,\n            min_sequence_length=min_sequence_length,\n            max_sequence_length=max_sequence_length,\n            zero_output=zero_output,\n            state=state,\n            call_cell=call_cell,\n            state_size=cell.state_size)\n      else:\n        (output, state) = call_cell()\n\n      outputs.append(output)\n\n    return (outputs, state)\n\nThanks!", "body": "Dear all,\n\nWould it be possible to return all the states when we call the `rnn` function in `tensorflow/tensorflow/python/ops/rnn.py` (and not only the final state):\n\n```\ndef rnn(cell, inputs, initial_state=None, dtype=None,\n        sequence_length=None, scope=None):\n```\n\nI posted the code of the latest version as an illustration:\n\n```\n   for time, input_ in enumerate(inputs):\n      if time > 0: varscope.reuse_variables()\n      # pylint: disable=cell-var-from-loop\n      call_cell = lambda: cell(input_, state)\n      # pylint: enable=cell-var-from-loop\n      if sequence_length is not None:\n        (output, state) = _rnn_step(\n            time=time,\n            sequence_length=sequence_length,\n            min_sequence_length=min_sequence_length,\n            max_sequence_length=max_sequence_length,\n            zero_output=zero_output,\n            state=state,\n            call_cell=call_cell,\n            state_size=cell.state_size)\n      else:\n        (output, state) = call_cell()\n\n      outputs.append(output)\n\n    return (outputs, state)\n```\n\nThanks!\n"}