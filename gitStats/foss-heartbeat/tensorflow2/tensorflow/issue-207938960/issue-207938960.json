{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7541", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7541/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7541/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7541/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7541", "id": 207938960, "node_id": "MDU6SXNzdWUyMDc5Mzg5NjA=", "number": 7541, "title": "Fatal messages mixing C libtensorflow with python tensorflow", "user": {"login": "pwaller", "id": 438648, "node_id": "MDQ6VXNlcjQzODY0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/438648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pwaller", "html_url": "https://github.com/pwaller", "followers_url": "https://api.github.com/users/pwaller/followers", "following_url": "https://api.github.com/users/pwaller/following{/other_user}", "gists_url": "https://api.github.com/users/pwaller/gists{/gist_id}", "starred_url": "https://api.github.com/users/pwaller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pwaller/subscriptions", "organizations_url": "https://api.github.com/users/pwaller/orgs", "repos_url": "https://api.github.com/users/pwaller/repos", "events_url": "https://api.github.com/users/pwaller/events{/privacy}", "received_events_url": "https://api.github.com/users/pwaller/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-02-15T21:49:22Z", "updated_at": "2018-07-25T07:31:37Z", "closed_at": "2018-02-08T00:24:18Z", "author_association": "NONE", "body_html": "<p>I'm trying to write mixed C tensorflow code with python tensorflow code by<br>\nembedding the CPython interpreter in my application.</p>\n<p>I'm mainly doing this because defining the model is only really possible in<br>\nPython at the moment due to the lack of gradients (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"195080234\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/6268\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/6268/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/6268\">#6268</a>), and I want to define<br>\nnew models from the C side at speed without needing to invoke or<br>\ncommunicate to an external python process to get a new model.</p>\n<p>To reproduce the problem is quite straightforward, simply <code>import tensorflow</code><br>\nin python after the libtensorflow library has already been dynamically linked.<br>\nHere is a quick reproducer in pure python which will not run:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> ctypes\n\ntf_dll <span class=\"pl-k\">=</span> ctypes.CDLL(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/libtensorflow.so<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">import</span> tensorflow</pre></div>\n<p>libtensorflow can be obtained like so:</p>\n<pre><code>TF_TYPE=cpu # Set to gpu for GPU support\nTF_OS=linux\ncurl -L \\\n  \"https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-${TF_TYPE}-${TF_OS}-x86_64-1.0.0.tar.gz\" |\nsudo tar -C /usr/local -xz\n</code></pre>\n<p>Here are two fatal messages I have encountered (the first from the Python reproducer above, the second from a C program):</p>\n<pre><code>F tensorflow/stream_executor/cuda/cuda_platform.cc:180] Check failed: ::perftools::gputools::port::Status::OK() == (MultiPlatformManager::RegisterPlatform(std::move(platform))) (OK vs. Internal: platform is already registered with name: \"CUDA\")\n</code></pre>\n<pre><code>F tensorflow/core/lib/monitoring/collection_registry.cc:77] Cannot register 2 metrics with the same name: /tensorflow/cc/saved_model/load_attempt_count\n</code></pre>\n<p>I assume the problem is that the <code>_pywrap_tensorflow.so</code> has tensorflow<br>\nstatically linked into them, so they don't use libtensorflow. Then you have<br>\ntwo shared libraries conflicting with one another.</p>\n<p>Is there a way to avoid this conflict?</p>", "body_text": "I'm trying to write mixed C tensorflow code with python tensorflow code by\nembedding the CPython interpreter in my application.\nI'm mainly doing this because defining the model is only really possible in\nPython at the moment due to the lack of gradients (#6268), and I want to define\nnew models from the C side at speed without needing to invoke or\ncommunicate to an external python process to get a new model.\nTo reproduce the problem is quite straightforward, simply import tensorflow\nin python after the libtensorflow library has already been dynamically linked.\nHere is a quick reproducer in pure python which will not run:\nimport ctypes\n\ntf_dll = ctypes.CDLL(\"/usr/local/lib/libtensorflow.so\")\n\nimport tensorflow\nlibtensorflow can be obtained like so:\nTF_TYPE=cpu # Set to gpu for GPU support\nTF_OS=linux\ncurl -L \\\n  \"https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-${TF_TYPE}-${TF_OS}-x86_64-1.0.0.tar.gz\" |\nsudo tar -C /usr/local -xz\n\nHere are two fatal messages I have encountered (the first from the Python reproducer above, the second from a C program):\nF tensorflow/stream_executor/cuda/cuda_platform.cc:180] Check failed: ::perftools::gputools::port::Status::OK() == (MultiPlatformManager::RegisterPlatform(std::move(platform))) (OK vs. Internal: platform is already registered with name: \"CUDA\")\n\nF tensorflow/core/lib/monitoring/collection_registry.cc:77] Cannot register 2 metrics with the same name: /tensorflow/cc/saved_model/load_attempt_count\n\nI assume the problem is that the _pywrap_tensorflow.so has tensorflow\nstatically linked into them, so they don't use libtensorflow. Then you have\ntwo shared libraries conflicting with one another.\nIs there a way to avoid this conflict?", "body": "I'm trying to write mixed C tensorflow code with python tensorflow code by\r\nembedding the CPython interpreter in my application.\r\n\r\nI'm mainly doing this because defining the model is only really possible in\r\nPython at the moment due to the lack of gradients (#6268), and I want to define\r\nnew models from the C side at speed without needing to invoke or\r\ncommunicate to an external python process to get a new model.\r\n\r\nTo reproduce the problem is quite straightforward, simply `import tensorflow`\r\nin python after the libtensorflow library has already been dynamically linked.\r\nHere is a quick reproducer in pure python which will not run:\r\n\r\n```python\r\nimport ctypes\r\n\r\ntf_dll = ctypes.CDLL(\"/usr/local/lib/libtensorflow.so\")\r\n\r\nimport tensorflow\r\n```\r\n\r\nlibtensorflow can be obtained like so:\r\n\r\n```\r\nTF_TYPE=cpu # Set to gpu for GPU support\r\nTF_OS=linux\r\ncurl -L \\\r\n  \"https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-${TF_TYPE}-${TF_OS}-x86_64-1.0.0.tar.gz\" |\r\nsudo tar -C /usr/local -xz\r\n```\r\n\r\nHere are two fatal messages I have encountered (the first from the Python reproducer above, the second from a C program):\r\n\r\n```\r\nF tensorflow/stream_executor/cuda/cuda_platform.cc:180] Check failed: ::perftools::gputools::port::Status::OK() == (MultiPlatformManager::RegisterPlatform(std::move(platform))) (OK vs. Internal: platform is already registered with name: \"CUDA\")\r\n```\r\n\r\n```\r\nF tensorflow/core/lib/monitoring/collection_registry.cc:77] Cannot register 2 metrics with the same name: /tensorflow/cc/saved_model/load_attempt_count\r\n```\r\n\r\nI assume the problem is that the `_pywrap_tensorflow.so` has tensorflow\r\nstatically linked into them, so they don't use libtensorflow. Then you have\r\ntwo shared libraries conflicting with one another.\r\n\r\nIs there a way to avoid this conflict?"}