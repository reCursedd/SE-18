{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13642", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13642/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13642/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13642/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13642", "id": 264683586, "node_id": "MDU6SXNzdWUyNjQ2ODM1ODY=", "number": 13642, "title": "[bug?] tf.nn.embedding_lookup returns 0 when ids out of range", "user": {"login": "chentingpc", "id": 1329361, "node_id": "MDQ6VXNlcjEzMjkzNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1329361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chentingpc", "html_url": "https://github.com/chentingpc", "followers_url": "https://api.github.com/users/chentingpc/followers", "following_url": "https://api.github.com/users/chentingpc/following{/other_user}", "gists_url": "https://api.github.com/users/chentingpc/gists{/gist_id}", "starred_url": "https://api.github.com/users/chentingpc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chentingpc/subscriptions", "organizations_url": "https://api.github.com/users/chentingpc/orgs", "repos_url": "https://api.github.com/users/chentingpc/repos", "events_url": "https://api.github.com/users/chentingpc/events{/privacy}", "received_events_url": "https://api.github.com/users/chentingpc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-11T18:10:52Z", "updated_at": "2018-06-14T11:33:49Z", "closed_at": "2017-10-12T01:55:42Z", "author_association": "NONE", "body_html": "<p>It seems tf.nn.embedding_lookup will simply return tensor of zeros when ids out of range (larger than the embedding table size):</p>\n<pre><code>import tensorflow as tf\nembs = tf.ones([100, 100]) \nidx = tf.cast(tf.ones([1]) * 1000, tf.int32)\nwith tf.Session() as sess:\n  emb = sess.run(tf.nn.embedding_lookup(embs, idx))\n</code></pre>\n<p>The emb will be tensor of zeros. I am not sure if this is a bug, or by design for efficiency concern? It would be nice if there is a runtime exception. That will do a big favor in avoiding hidden bugs that lead to performance degeneration.</p>\n<p>(I am running tensorflow-gpu 1.3.0 in Ubuntu 16.04)</p>", "body_text": "It seems tf.nn.embedding_lookup will simply return tensor of zeros when ids out of range (larger than the embedding table size):\nimport tensorflow as tf\nembs = tf.ones([100, 100]) \nidx = tf.cast(tf.ones([1]) * 1000, tf.int32)\nwith tf.Session() as sess:\n  emb = sess.run(tf.nn.embedding_lookup(embs, idx))\n\nThe emb will be tensor of zeros. I am not sure if this is a bug, or by design for efficiency concern? It would be nice if there is a runtime exception. That will do a big favor in avoiding hidden bugs that lead to performance degeneration.\n(I am running tensorflow-gpu 1.3.0 in Ubuntu 16.04)", "body": "It seems tf.nn.embedding_lookup will simply return tensor of zeros when ids out of range (larger than the embedding table size):\r\n```\r\nimport tensorflow as tf\r\nembs = tf.ones([100, 100]) \r\nidx = tf.cast(tf.ones([1]) * 1000, tf.int32)\r\nwith tf.Session() as sess:\r\n  emb = sess.run(tf.nn.embedding_lookup(embs, idx))\r\n```\r\nThe emb will be tensor of zeros. I am not sure if this is a bug, or by design for efficiency concern? It would be nice if there is a runtime exception. That will do a big favor in avoiding hidden bugs that lead to performance degeneration.\r\n\r\n(I am running tensorflow-gpu 1.3.0 in Ubuntu 16.04)"}