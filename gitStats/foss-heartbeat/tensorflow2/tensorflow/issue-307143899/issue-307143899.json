{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17888", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17888/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17888/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17888/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17888", "id": 307143899, "node_id": "MDU6SXNzdWUzMDcxNDM4OTk=", "number": 17888, "title": "tf.nn.softmax_cross_entropy_with_logits_v2 loss function so big", "user": {"login": "MuhammedBuyukkinaci", "id": 33747602, "node_id": "MDQ6VXNlcjMzNzQ3NjAy", "avatar_url": "https://avatars3.githubusercontent.com/u/33747602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MuhammedBuyukkinaci", "html_url": "https://github.com/MuhammedBuyukkinaci", "followers_url": "https://api.github.com/users/MuhammedBuyukkinaci/followers", "following_url": "https://api.github.com/users/MuhammedBuyukkinaci/following{/other_user}", "gists_url": "https://api.github.com/users/MuhammedBuyukkinaci/gists{/gist_id}", "starred_url": "https://api.github.com/users/MuhammedBuyukkinaci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MuhammedBuyukkinaci/subscriptions", "organizations_url": "https://api.github.com/users/MuhammedBuyukkinaci/orgs", "repos_url": "https://api.github.com/users/MuhammedBuyukkinaci/repos", "events_url": "https://api.github.com/users/MuhammedBuyukkinaci/events{/privacy}", "received_events_url": "https://api.github.com/users/MuhammedBuyukkinaci/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-03-21T07:39:03Z", "updated_at": "2018-06-23T10:00:53Z", "closed_at": "2018-03-26T22:50:50Z", "author_association": "NONE", "body_html": "<h3>Describe the problem</h3>\n<p>I am trying to build up a binary image classifcation project (2 classes are balanced) . There are 2 nodes in output layer. However, my loss function is starting from a high point(3000). Is my loss function okay? Should I change my loss function ? I want to use a metric similar to Sklearn's log-loss. At the end of 1st epoch, it reaches to 80% accuracy and after 10 epochs and its accuracy becomes 82 %. During 10 epochs, it decreases from 3000 to 20. The graph of <em>my loss function</em> is as following(1 epoch = 175 steps) .<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/33747602/37697942-0eb62702-2cf1-11e8-8ebe-cfdac4d34750.png\"><img src=\"https://user-images.githubusercontent.com/33747602/37697942-0eb62702-2cf1-11e8-8ebe-cfdac4d34750.png\" alt=\"loss\" style=\"max-width:100%;\"></a></p>\n<p>The graph of <em>accuracy</em> for 10 epochs is below:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/33747602/37697954-28500084-2cf1-11e8-93c6-3f514531a8f8.png\"><img src=\"https://user-images.githubusercontent.com/33747602/37697954-28500084-2cf1-11e8-93c6-3f514531a8f8.png\" alt=\"acc\" style=\"max-width:100%;\"></a></p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:Windows 10 Home</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip</li>\n<li><strong>TensorFlow version (use command below)</strong>:1.6.0</li>\n<li><strong>Python version</strong>: 3.6.0(no anaconda)</li>\n<li><strong>CUDA/cuDNN version</strong>:9.0 - 7.0</li>\n<li><strong>GPU model and memory</strong>:GTX 1050</li>\n<li><strong>Bazel Version</strong>:N/A</li>\n</ul>\n<h3>Source code / logs</h3>\n<p>cross_entropy=tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_true,logits=y_pred ))</p>", "body_text": "Describe the problem\nI am trying to build up a binary image classifcation project (2 classes are balanced) . There are 2 nodes in output layer. However, my loss function is starting from a high point(3000). Is my loss function okay? Should I change my loss function ? I want to use a metric similar to Sklearn's log-loss. At the end of 1st epoch, it reaches to 80% accuracy and after 10 epochs and its accuracy becomes 82 %. During 10 epochs, it decreases from 3000 to 20. The graph of my loss function is as following(1 epoch = 175 steps) .\n\nThe graph of accuracy for 10 epochs is below:\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):Windows 10 Home\nTensorFlow installed from (source or binary): pip\nTensorFlow version (use command below):1.6.0\nPython version: 3.6.0(no anaconda)\nCUDA/cuDNN version:9.0 - 7.0\nGPU model and memory:GTX 1050\nBazel Version:N/A\n\nSource code / logs\ncross_entropy=tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_true,logits=y_pred ))", "body": "### Describe the problem\r\nI am trying to build up a binary image classifcation project (2 classes are balanced) . There are 2 nodes in output layer. However, my loss function is starting from a high point(3000). Is my loss function okay? Should I change my loss function ? I want to use a metric similar to Sklearn's log-loss. At the end of 1st epoch, it reaches to 80% accuracy and after 10 epochs and its accuracy becomes 82 %. During 10 epochs, it decreases from 3000 to 20. The graph of _my loss function_ is as following(1 epoch = 175 steps) .\r\n![loss](https://user-images.githubusercontent.com/33747602/37697942-0eb62702-2cf1-11e8-8ebe-cfdac4d34750.png)\r\n\r\nThe graph of _accuracy_ for 10 epochs is below:\r\n![acc](https://user-images.githubusercontent.com/33747602/37697954-28500084-2cf1-11e8-93c6-3f514531a8f8.png)\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:Windows 10 Home\r\n- **TensorFlow installed from (source or binary)**: pip\r\n- **TensorFlow version (use command below)**:1.6.0\r\n- **Python version**: 3.6.0(no anaconda) \r\n- **CUDA/cuDNN version**:9.0 - 7.0\r\n- **GPU model and memory**:GTX 1050\r\n- **Bazel Version**:N/A\r\n\r\n### Source code / logs\r\ncross_entropy=tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_true,logits=y_pred ))\r\n"}