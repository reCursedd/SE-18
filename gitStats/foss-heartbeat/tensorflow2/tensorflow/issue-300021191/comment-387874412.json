{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/387874412", "html_url": "https://github.com/tensorflow/tensorflow/issues/17257#issuecomment-387874412", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17257", "id": 387874412, "node_id": "MDEyOklzc3VlQ29tbWVudDM4Nzg3NDQxMg==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-09T21:01:08Z", "updated_at": "2018-05-09T21:01:08Z", "author_association": "MEMBER", "body_html": "<p>It should just overwrite the dependency. I've considered making that a warning (or queuing up the warning for save/restore time?). A restore() after the second assignment should restore the second object, but otherwise it will (only) restore the first: self.test = foo, restore(), self.test = bar will only restore foo.</p>\n<p>Is that not what's happening?</p>", "body_text": "It should just overwrite the dependency. I've considered making that a warning (or queuing up the warning for save/restore time?). A restore() after the second assignment should restore the second object, but otherwise it will (only) restore the first: self.test = foo, restore(), self.test = bar will only restore foo.\nIs that not what's happening?", "body": "It should just overwrite the dependency. I've considered making that a warning (or queuing up the warning for save/restore time?). A restore() after the second assignment should restore the second object, but otherwise it will (only) restore the first: self.test = foo, restore(), self.test = bar will only restore foo.\r\n\r\nIs that not what's happening?"}