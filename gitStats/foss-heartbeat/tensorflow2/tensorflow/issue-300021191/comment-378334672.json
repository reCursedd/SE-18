{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/378334672", "html_url": "https://github.com/tensorflow/tensorflow/issues/17257#issuecomment-378334672", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17257", "id": 378334672, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODMzNDY3Mg==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-03T17:38:56Z", "updated_at": "2018-04-03T17:38:56Z", "author_association": "MEMBER", "body_html": "<p>Interesting. It's not exactly a drop-in replacement for <code>tf.train.Saver</code>, but we've been developing an object-based save/restore API in part for compatibility with eager execution, <a href=\"https://www.tensorflow.org/api_docs/python/tf/contrib/eager/Checkpoint\" rel=\"nofollow\">tfe.Checkpoint</a>.</p>\n<p>It more or less accidentally has the lazy error checking you're interested in. When executing eagerly the <code>restore</code> request may come before some variables have been created, so it won't complain unless you manually run one of its assertions (<code>restore</code> returns a status object).</p>\n<p>The caveat is that it doesn't use global variable names like <code>tf.train.Saver</code>, and requires that the objects you use come from <a href=\"https://www.tensorflow.org/api_docs/python/tf/contrib/eager/Checkpointable\" rel=\"nofollow\"><code>Checkpointable</code></a> classes. This is almost all of TensorFlow's objects at this point (<code>Layer</code>s, <code>Optimizer</code>s, <code>tf.keras.Model</code>, <code>make_template</code>, most RNN cells, etc.), but may require some refactoring to use. The <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/eager/python/examples\">eager examples</a> have been converted; those run with eager execution enabled, but everything will work fine with graph building if you add a <code>checkpoint.restore(...).run_restore_ops()</code> call to run the restore ops in a <code>Session</code>.</p>\n<p>So that's the direction I'd like checkpointing to be headed in. The APIs are not in core yet, but should get there in another release or two. Happy to take feature requests / bug reports.</p>", "body_text": "Interesting. It's not exactly a drop-in replacement for tf.train.Saver, but we've been developing an object-based save/restore API in part for compatibility with eager execution, tfe.Checkpoint.\nIt more or less accidentally has the lazy error checking you're interested in. When executing eagerly the restore request may come before some variables have been created, so it won't complain unless you manually run one of its assertions (restore returns a status object).\nThe caveat is that it doesn't use global variable names like tf.train.Saver, and requires that the objects you use come from Checkpointable classes. This is almost all of TensorFlow's objects at this point (Layers, Optimizers, tf.keras.Model, make_template, most RNN cells, etc.), but may require some refactoring to use. The eager examples have been converted; those run with eager execution enabled, but everything will work fine with graph building if you add a checkpoint.restore(...).run_restore_ops() call to run the restore ops in a Session.\nSo that's the direction I'd like checkpointing to be headed in. The APIs are not in core yet, but should get there in another release or two. Happy to take feature requests / bug reports.", "body": "Interesting. It's not exactly a drop-in replacement for `tf.train.Saver`, but we've been developing an object-based save/restore API in part for compatibility with eager execution, [tfe.Checkpoint](https://www.tensorflow.org/api_docs/python/tf/contrib/eager/Checkpoint).\r\n\r\nIt more or less accidentally has the lazy error checking you're interested in. When executing eagerly the `restore` request may come before some variables have been created, so it won't complain unless you manually run one of its assertions (`restore` returns a status object).\r\n\r\nThe caveat is that it doesn't use global variable names like `tf.train.Saver`, and requires that the objects you use come from [`Checkpointable`](https://www.tensorflow.org/api_docs/python/tf/contrib/eager/Checkpointable) classes. This is almost all of TensorFlow's objects at this point (`Layer`s, `Optimizer`s, `tf.keras.Model`, `make_template`, most RNN cells, etc.), but may require some refactoring to use. The [eager examples](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/eager/python/examples) have been converted; those run with eager execution enabled, but everything will work fine with graph building if you add a `checkpoint.restore(...).run_restore_ops()` call to run the restore ops in a `Session`.\r\n\r\nSo that's the direction I'd like checkpointing to be headed in. The APIs are not in core yet, but should get there in another release or two. Happy to take feature requests / bug reports. "}