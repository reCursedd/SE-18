{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338541056", "html_url": "https://github.com/tensorflow/tensorflow/issues/5949#issuecomment-338541056", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5949", "id": 338541056, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODU0MTA1Ng==", "user": {"login": "carlhuth", "id": 2522456, "node_id": "MDQ6VXNlcjI1MjI0NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2522456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlhuth", "html_url": "https://github.com/carlhuth", "followers_url": "https://api.github.com/users/carlhuth/followers", "following_url": "https://api.github.com/users/carlhuth/following{/other_user}", "gists_url": "https://api.github.com/users/carlhuth/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlhuth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlhuth/subscriptions", "organizations_url": "https://api.github.com/users/carlhuth/orgs", "repos_url": "https://api.github.com/users/carlhuth/repos", "events_url": "https://api.github.com/users/carlhuth/events{/privacy}", "received_events_url": "https://api.github.com/users/carlhuth/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-23T03:49:24Z", "updated_at": "2017-10-23T03:49:24Z", "author_association": "NONE", "body_html": "<p>I wanted to bring up an anomaly that occurred with pip that was causing the No module named '_pywrap_tensorflow_internal' error to occur.  The version of python I was running was Python 3.6.3, pip was version  9.0.1.  and it was running on Windows 10.</p>\n<p><code> **Using version 1.3.0 (newest of versions: 1.2.0, 1.2.1, 1.3.0) Looking up \"https://pypi.python.org/packages/bf/d4/80197f48f9fb90a17c47cdd834b2f13d5f714f26e8ed5c77069d57aa3ecb/tensorflow-1.3.0-cp36-cp36m-win_amd64.whl\" in the cache** Current age based on date: 67543 Freshness lifetime from max-age: 31557600 The response is \"fresh\", returning cached response 31557600 &gt; 67543 _Using cached tensorflow-1.3.0-cp36-cp36m-win_amd64.whl_ Downloading from URL https://pypi.python.org/packages/bf/d4/80197f48f9fb90a17c47cdd834b2f13d5f714f26e8ed5c77069d57aa3ecb/tensorflow-1.3.0-cp36-cp36m-win_amd64.whl#md5=3a7dbe9a17d806e43d2e71b3ddb0cd52 (from https://pypi.python.org/simple/tensorflow/)</code></p>\n<p>The installation command was <code>pip3 install --upgrade tensorflow</code>, which on first run appeared to be working perfectly fine, however that was not the truth.  I discovered 3 weird occurrences:</p>\n<ol>\n<li>\n<p>The site-package that was downloaded had a METADATA stating it was for Python 2.7.  (This obviously was not going to work if it was for the wrong version of Python.)  Also, the TensorFlow version was 1.3 instead of the most current 1.4.0rc0 that was expected (verified this by going directly to pypi.python.org site directly).</p>\n</li>\n<li>\n<p>Upon uninstalling the package, I noticed it had saved a cached instance of the package under my user profile as well, which it did not remove when uninstalling the package.  That was found in C:\\Users**{AccountName}**\\AppData\\Local\\Tmp\\Pip-<em>{unique generated id for cached application}</em> and also removed.</p>\n</li>\n<li>\n<p>After removing the cached modules, I again ran the command but with the verbose argument set: pip3 install --upgrade -v tensorflow<br>\nThis was assumed to be something that would download the correct version of tensorflow now, but instead it decided that it couldn't find a compatible version of TensorFlow for my Python version 3.6.3 (which I assume the minor rev number may have thrown off the basic logic for acceptable versions, ex. 3.5, 3.6).  I again looked at the package metadata for the server-side cached copy of the module and again saw that this was really limited to Python 2.7 again.  Which means the server was returning an invalid python package that python 3 could not run, all while saying it was it was the newest version available, which was definitely not true.</p>\n</li>\n</ol>\n<p>The solution was quite simple, I added a forced version number to match the most current version's name, which ran seamlessly and resolved the import error described above.</p>\n<p><code>pip3 install --upgrade -v tensorflow==1.4.0rc0</code></p>", "body_text": "I wanted to bring up an anomaly that occurred with pip that was causing the No module named '_pywrap_tensorflow_internal' error to occur.  The version of python I was running was Python 3.6.3, pip was version  9.0.1.  and it was running on Windows 10.\n **Using version 1.3.0 (newest of versions: 1.2.0, 1.2.1, 1.3.0) Looking up \"https://pypi.python.org/packages/bf/d4/80197f48f9fb90a17c47cdd834b2f13d5f714f26e8ed5c77069d57aa3ecb/tensorflow-1.3.0-cp36-cp36m-win_amd64.whl\" in the cache** Current age based on date: 67543 Freshness lifetime from max-age: 31557600 The response is \"fresh\", returning cached response 31557600 > 67543 _Using cached tensorflow-1.3.0-cp36-cp36m-win_amd64.whl_ Downloading from URL https://pypi.python.org/packages/bf/d4/80197f48f9fb90a17c47cdd834b2f13d5f714f26e8ed5c77069d57aa3ecb/tensorflow-1.3.0-cp36-cp36m-win_amd64.whl#md5=3a7dbe9a17d806e43d2e71b3ddb0cd52 (from https://pypi.python.org/simple/tensorflow/)\nThe installation command was pip3 install --upgrade tensorflow, which on first run appeared to be working perfectly fine, however that was not the truth.  I discovered 3 weird occurrences:\n\n\nThe site-package that was downloaded had a METADATA stating it was for Python 2.7.  (This obviously was not going to work if it was for the wrong version of Python.)  Also, the TensorFlow version was 1.3 instead of the most current 1.4.0rc0 that was expected (verified this by going directly to pypi.python.org site directly).\n\n\nUpon uninstalling the package, I noticed it had saved a cached instance of the package under my user profile as well, which it did not remove when uninstalling the package.  That was found in C:\\Users**{AccountName}**\\AppData\\Local\\Tmp\\Pip-{unique generated id for cached application} and also removed.\n\n\nAfter removing the cached modules, I again ran the command but with the verbose argument set: pip3 install --upgrade -v tensorflow\nThis was assumed to be something that would download the correct version of tensorflow now, but instead it decided that it couldn't find a compatible version of TensorFlow for my Python version 3.6.3 (which I assume the minor rev number may have thrown off the basic logic for acceptable versions, ex. 3.5, 3.6).  I again looked at the package metadata for the server-side cached copy of the module and again saw that this was really limited to Python 2.7 again.  Which means the server was returning an invalid python package that python 3 could not run, all while saying it was it was the newest version available, which was definitely not true.\n\n\nThe solution was quite simple, I added a forced version number to match the most current version's name, which ran seamlessly and resolved the import error described above.\npip3 install --upgrade -v tensorflow==1.4.0rc0", "body": "I wanted to bring up an anomaly that occurred with pip that was causing the No module named '_pywrap_tensorflow_internal' error to occur.  The version of python I was running was Python 3.6.3, pip was version  9.0.1.  and it was running on Windows 10.\r\n\r\n` **Using version 1.3.0 (newest of versions: 1.2.0, 1.2.1, 1.3.0)\r\n  Looking up \"https://pypi.python.org/packages/bf/d4/80197f48f9fb90a17c47cdd834b2f13d5f714f26e8ed5c77069d57aa3ecb/tensorflow-1.3.0-cp36-cp36m-win_amd64.whl\" in the cache**\r\n  Current age based on date: 67543\r\n  Freshness lifetime from max-age: 31557600\r\n  The response is \"fresh\", returning cached response\r\n  31557600 > 67543\r\n  _Using cached tensorflow-1.3.0-cp36-cp36m-win_amd64.whl_\r\n  Downloading from URL https://pypi.python.org/packages/bf/d4/80197f48f9fb90a17c47cdd834b2f13d5f714f26e8ed5c77069d57aa3ecb/tensorflow-1.3.0-cp36-cp36m-win_amd64.whl#md5=3a7dbe9a17d806e43d2e71b3ddb0cd52 (from https://pypi.python.org/simple/tensorflow/)`\r\n\r\nThe installation command was `pip3 install --upgrade tensorflow`, which on first run appeared to be working perfectly fine, however that was not the truth.  I discovered 3 weird occurrences:\r\n\r\n1. The site-package that was downloaded had a METADATA stating it was for Python 2.7.  (This obviously was not going to work if it was for the wrong version of Python.)  Also, the TensorFlow version was 1.3 instead of the most current 1.4.0rc0 that was expected (verified this by going directly to pypi.python.org site directly).\r\n\r\n2.  Upon uninstalling the package, I noticed it had saved a cached instance of the package under my user profile as well, which it did not remove when uninstalling the package.  That was found in C:\\Users\\**{AccountName}**\\AppData\\Local\\Tmp\\Pip-_{unique generated id for cached application}_ and also removed.\r\n\r\n3.  After removing the cached modules, I again ran the command but with the verbose argument set: pip3 install --upgrade -v tensorflow\r\nThis was assumed to be something that would download the correct version of tensorflow now, but instead it decided that it couldn't find a compatible version of TensorFlow for my Python version 3.6.3 (which I assume the minor rev number may have thrown off the basic logic for acceptable versions, ex. 3.5, 3.6).  I again looked at the package metadata for the server-side cached copy of the module and again saw that this was really limited to Python 2.7 again.  Which means the server was returning an invalid python package that python 3 could not run, all while saying it was it was the newest version available, which was definitely not true.\r\n\r\nThe solution was quite simple, I added a forced version number to match the most current version's name, which ran seamlessly and resolved the import error described above.  \r\n\r\n`pip3 install --upgrade -v tensorflow==1.4.0rc0`\r\n\r\n"}