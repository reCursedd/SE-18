{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11868", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11868/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11868/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11868/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11868", "id": 246517411, "node_id": "MDU6SXNzdWUyNDY1MTc0MTE=", "number": 11868, "title": "keras resnet50 example yields different predictions than in stand-alone keras", "user": {"login": "jjallaire", "id": 104391, "node_id": "MDQ6VXNlcjEwNDM5MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/104391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjallaire", "html_url": "https://github.com/jjallaire", "followers_url": "https://api.github.com/users/jjallaire/followers", "following_url": "https://api.github.com/users/jjallaire/following{/other_user}", "gists_url": "https://api.github.com/users/jjallaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjallaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjallaire/subscriptions", "organizations_url": "https://api.github.com/users/jjallaire/orgs", "repos_url": "https://api.github.com/users/jjallaire/repos", "events_url": "https://api.github.com/users/jjallaire/events{/privacy}", "received_events_url": "https://api.github.com/users/jjallaire/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-07-29T11:54:27Z", "updated_at": "2017-10-23T07:58:52Z", "closed_at": "2017-08-29T20:26:17Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No (using example from Keras documentation here: <a href=\"https://keras.io/applications/#classify-imagenet-classes-with-resnet50\" rel=\"nofollow\">https://keras.io/applications/#classify-imagenet-classes-with-resnet50</a></li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OS X 10.12.6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary (CPU Version)</li>\n<li><strong>TensorFlow version (use command below)</strong>: <code>('v1.2.0-5-g435cdfc', '1.2.1')</code></li>\n<li><strong>Python version</strong>: 2.7 (OS X system version)</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tensorflow.contrib.keras.python.keras.applications.resnet50 <span class=\"pl-k\">import</span> ResNet50\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.python.keras.preprocessing <span class=\"pl-k\">import</span> image\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.python.keras.applications.resnet50 <span class=\"pl-k\">import</span> preprocess_input, decode_predictions\n\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nmodel <span class=\"pl-k\">=</span> ResNet50(<span class=\"pl-v\">weights</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>imagenet<span class=\"pl-pds\">'</span></span>)\n\nimg_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>elephant.jpg<span class=\"pl-pds\">'</span></span>\nimg <span class=\"pl-k\">=</span> image.load_img(img_path, <span class=\"pl-v\">target_size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">224</span>, <span class=\"pl-c1\">224</span>))\nx <span class=\"pl-k\">=</span> image.img_to_array(img)\nx <span class=\"pl-k\">=</span> np.expand_dims(x, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\nx <span class=\"pl-k\">=</span> preprocess_input(x)\n\npreds <span class=\"pl-k\">=</span> model.predict(x)\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Predicted:<span class=\"pl-pds\">'</span></span>, decode_predictions(preds, <span class=\"pl-v\">top</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)[<span class=\"pl-c1\">0</span>])</pre></div>\n<h3>Describe the problem</h3>\n<p>The above code yields the following output:</p>\n<div class=\"highlight highlight-source-python\"><pre>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Predicted:<span class=\"pl-pds\">'</span></span>, [(<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>n02098286<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>West_Highland_white_terrier<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1.0</span>), \n                (<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>n15075141<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>toilet_tissue<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">0.0</span>), \n                (<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>n02319095<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>sea_urchin<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">0.0</span>)])</pre></div>\n<p>However, the same code run using Stand-alone Keras yields this:</p>\n<div class=\"highlight highlight-source-python\"><pre>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Predicted:<span class=\"pl-pds\">'</span></span>, [(<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>n02504013<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>Indian_elephant<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">0.91937912</span>), \n                (<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>n01871265<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>tusker<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">0.070962951</span>), \n                (<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>n02504458<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>African_elephant<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">0.0095201703</span>)])</pre></div>\n<p>Note: to reproduce under stand-alone Keras substitute this code for the imports at the top:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> keras.applications.resnet50 <span class=\"pl-k\">import</span> ResNet50\n<span class=\"pl-k\">from</span> keras.preprocessing <span class=\"pl-k\">import</span> image\n<span class=\"pl-k\">from</span> keras.applications.resnet50 <span class=\"pl-k\">import</span> preprocess_input, decode_predictions</pre></div>\n<p>Also note that you need the 'elephant.jpg' file in the working directory to reproduce. You can find that file here: <a href=\"https://github.com/rstudio/keras/blob/master/docs/articles/elephant.jpg\">https://github.com/rstudio/keras/blob/master/docs/articles/elephant.jpg</a></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No (using example from Keras documentation here: https://keras.io/applications/#classify-imagenet-classes-with-resnet50\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.12.6\nTensorFlow installed from (source or binary): Binary (CPU Version)\nTensorFlow version (use command below): ('v1.2.0-5-g435cdfc', '1.2.1')\nPython version: 2.7 (OS X system version)\nBazel version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce:\n\nfrom tensorflow.contrib.keras.python.keras.applications.resnet50 import ResNet50\nfrom tensorflow.contrib.keras.python.keras.preprocessing import image\nfrom tensorflow.contrib.keras.python.keras.applications.resnet50 import preprocess_input, decode_predictions\n\nimport numpy as np\n\nmodel = ResNet50(weights='imagenet')\n\nimg_path = 'elephant.jpg'\nimg = image.load_img(img_path, target_size=(224, 224))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nx = preprocess_input(x)\n\npreds = model.predict(x)\n\nprint('Predicted:', decode_predictions(preds, top=3)[0])\nDescribe the problem\nThe above code yields the following output:\n('Predicted:', [(u'n02098286', u'West_Highland_white_terrier', 1.0), \n                (u'n15075141', u'toilet_tissue', 0.0), \n                (u'n02319095', u'sea_urchin', 0.0)])\nHowever, the same code run using Stand-alone Keras yields this:\n('Predicted:', [(u'n02504013', u'Indian_elephant', 0.91937912), \n                (u'n01871265', u'tusker', 0.070962951), \n                (u'n02504458', u'African_elephant', 0.0095201703)])\nNote: to reproduce under stand-alone Keras substitute this code for the imports at the top:\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing import image\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\nAlso note that you need the 'elephant.jpg' file in the working directory to reproduce. You can find that file here: https://github.com/rstudio/keras/blob/master/docs/articles/elephant.jpg", "body": "### System information\r\n\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No (using example from Keras documentation here: https://keras.io/applications/#classify-imagenet-classes-with-resnet50\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OS X 10.12.6\r\n- **TensorFlow installed from (source or binary)**: Binary (CPU Version)\r\n- **TensorFlow version (use command below)**: `('v1.2.0-5-g435cdfc', '1.2.1')`\r\n- **Python version**: 2.7 (OS X system version)\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**:\r\n\r\n```python\r\nfrom tensorflow.contrib.keras.python.keras.applications.resnet50 import ResNet50\r\nfrom tensorflow.contrib.keras.python.keras.preprocessing import image\r\nfrom tensorflow.contrib.keras.python.keras.applications.resnet50 import preprocess_input, decode_predictions\r\n\r\nimport numpy as np\r\n\r\nmodel = ResNet50(weights='imagenet')\r\n\r\nimg_path = 'elephant.jpg'\r\nimg = image.load_img(img_path, target_size=(224, 224))\r\nx = image.img_to_array(img)\r\nx = np.expand_dims(x, axis=0)\r\nx = preprocess_input(x)\r\n\r\npreds = model.predict(x)\r\n\r\nprint('Predicted:', decode_predictions(preds, top=3)[0])\r\n```\r\n\r\n### Describe the problem\r\n\r\nThe above code yields the following output:\r\n\r\n```python\r\n('Predicted:', [(u'n02098286', u'West_Highland_white_terrier', 1.0), \r\n                (u'n15075141', u'toilet_tissue', 0.0), \r\n                (u'n02319095', u'sea_urchin', 0.0)])\r\n```\r\n\r\nHowever, the same code run using Stand-alone Keras yields this:\r\n\r\n```python\r\n('Predicted:', [(u'n02504013', u'Indian_elephant', 0.91937912), \r\n                (u'n01871265', u'tusker', 0.070962951), \r\n                (u'n02504458', u'African_elephant', 0.0095201703)])\r\n```\r\n\r\nNote: to reproduce under stand-alone Keras substitute this code for the imports at the top:\r\n\r\n```python\r\nfrom keras.applications.resnet50 import ResNet50\r\nfrom keras.preprocessing import image\r\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\r\n```\r\n\r\nAlso note that you need the 'elephant.jpg' file in the working directory to reproduce. You can find that file here: https://github.com/rstudio/keras/blob/master/docs/articles/elephant.jpg\r\n\r\n"}