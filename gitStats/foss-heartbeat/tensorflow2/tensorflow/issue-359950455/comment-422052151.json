{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/422052151", "html_url": "https://github.com/tensorflow/tensorflow/pull/22256#issuecomment-422052151", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22256", "id": 422052151, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjA1MjE1MQ==", "user": {"login": "thorjohnsen", "id": 41591019, "node_id": "MDQ6VXNlcjQxNTkxMDE5", "avatar_url": "https://avatars2.githubusercontent.com/u/41591019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thorjohnsen", "html_url": "https://github.com/thorjohnsen", "followers_url": "https://api.github.com/users/thorjohnsen/followers", "following_url": "https://api.github.com/users/thorjohnsen/following{/other_user}", "gists_url": "https://api.github.com/users/thorjohnsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/thorjohnsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thorjohnsen/subscriptions", "organizations_url": "https://api.github.com/users/thorjohnsen/orgs", "repos_url": "https://api.github.com/users/thorjohnsen/repos", "events_url": "https://api.github.com/users/thorjohnsen/events{/privacy}", "received_events_url": "https://api.github.com/users/thorjohnsen/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-17T15:02:12Z", "updated_at": "2018-09-17T15:02:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=19540527\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/AzizCode92\">@AzizCode92</a> I used it in the attention layer of the MLPerf Transformer benchmark. It made the benchmark run about 25% faster. I don't know how familiar you are with MLPerf, it is a google initiative, the public repository is in <a href=\"https://github.com/mlperf/training/\">https://github.com/mlperf/training/</a>. The Transformer reference code has its own implementation of layer normalization (lines 247-265 in file translation/tensorflow/transformer/model/transformer.py), I changed that to use tf.contrib.layers.layer_norm, which simplified the code, but did not make it any faster. I added the option to use tf.nn.fused_batch_norm and got a 25% jump in throughput on GPUs when running our mixed precision version of Transformer. I have not tested what kind of impact this has on the reference code, which uses purely fp32 arithmetic.</p>", "body_text": "@AzizCode92 I used it in the attention layer of the MLPerf Transformer benchmark. It made the benchmark run about 25% faster. I don't know how familiar you are with MLPerf, it is a google initiative, the public repository is in https://github.com/mlperf/training/. The Transformer reference code has its own implementation of layer normalization (lines 247-265 in file translation/tensorflow/transformer/model/transformer.py), I changed that to use tf.contrib.layers.layer_norm, which simplified the code, but did not make it any faster. I added the option to use tf.nn.fused_batch_norm and got a 25% jump in throughput on GPUs when running our mixed precision version of Transformer. I have not tested what kind of impact this has on the reference code, which uses purely fp32 arithmetic.", "body": "@AzizCode92 I used it in the attention layer of the MLPerf Transformer benchmark. It made the benchmark run about 25% faster. I don't know how familiar you are with MLPerf, it is a google initiative, the public repository is in https://github.com/mlperf/training/. The Transformer reference code has its own implementation of layer normalization (lines 247-265 in file translation/tensorflow/transformer/model/transformer.py), I changed that to use tf.contrib.layers.layer_norm, which simplified the code, but did not make it any faster. I added the option to use tf.nn.fused_batch_norm and got a 25% jump in throughput on GPUs when running our mixed precision version of Transformer. I have not tested what kind of impact this has on the reference code, which uses purely fp32 arithmetic. "}