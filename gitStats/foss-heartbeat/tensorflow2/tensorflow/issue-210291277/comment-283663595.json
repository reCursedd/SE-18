{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/283663595", "html_url": "https://github.com/tensorflow/tensorflow/pull/7893#issuecomment-283663595", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7893", "id": 283663595, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzY2MzU5NQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-02T14:13:33Z", "updated_at": "2017-03-02T14:13:33Z", "author_association": "MEMBER", "body_html": "<p>Thanks for understanding, I'll close this pull request for now.</p>\n<p>To answer your question: As of today, the Go API is well suited for importing and executing a trained model. It is also suited, but a little less so, for importing models constructed in Python and training them from within Go (e.g. the word2vec example I alluded to above) as it lacks the more convenient higher level APIs (like <a href=\"https://www.youtube.com/watch?v=t64ortpgS-E&amp;index=6&amp;list=PLOU2XLYxmsIKGc_NBoIhTn2Qhraji53cv\" rel=\"nofollow\">Estimator</a>) that are implemented in Python. A little work is needed to duplicate that convenience. For model construction, it is possible in Go since it implements the lowest level of graph construction, but this is where you're likely to miss the higher level constructs like <a href=\"https://www.tensorflow.org/api_docs/python/tf/layers\" rel=\"nofollow\"><code>tf.layers</code></a> and a little more work is needed to develop those.</p>\n<p>If there are folks in the community who want to develop their own APIs on top of the primitives of this <code>tensorflow</code> package in Go, we encourage that.</p>", "body_text": "Thanks for understanding, I'll close this pull request for now.\nTo answer your question: As of today, the Go API is well suited for importing and executing a trained model. It is also suited, but a little less so, for importing models constructed in Python and training them from within Go (e.g. the word2vec example I alluded to above) as it lacks the more convenient higher level APIs (like Estimator) that are implemented in Python. A little work is needed to duplicate that convenience. For model construction, it is possible in Go since it implements the lowest level of graph construction, but this is where you're likely to miss the higher level constructs like tf.layers and a little more work is needed to develop those.\nIf there are folks in the community who want to develop their own APIs on top of the primitives of this tensorflow package in Go, we encourage that.", "body": "Thanks for understanding, I'll close this pull request for now.\r\n\r\nTo answer your question: As of today, the Go API is well suited for importing and executing a trained model. It is also suited, but a little less so, for importing models constructed in Python and training them from within Go (e.g. the word2vec example I alluded to above) as it lacks the more convenient higher level APIs (like [Estimator](https://www.youtube.com/watch?v=t64ortpgS-E&index=6&list=PLOU2XLYxmsIKGc_NBoIhTn2Qhraji53cv)) that are implemented in Python. A little work is needed to duplicate that convenience. For model construction, it is possible in Go since it implements the lowest level of graph construction, but this is where you're likely to miss the higher level constructs like [`tf.layers`](https://www.tensorflow.org/api_docs/python/tf/layers) and a little more work is needed to develop those.\r\n\r\nIf there are folks in the community who want to develop their own APIs on top of the primitives of this `tensorflow` package in Go, we encourage that."}