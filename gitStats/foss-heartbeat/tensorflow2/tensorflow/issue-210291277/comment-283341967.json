{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/283341967", "html_url": "https://github.com/tensorflow/tensorflow/pull/7893#issuecomment-283341967", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7893", "id": 283341967, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzM0MTk2Nw==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-01T13:39:58Z", "updated_at": "2017-03-01T13:39:58Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1713047\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Lewuathe\">@Lewuathe</a> : This a wonderful, though I'd suggest that you keep this example in your repository rather than putting it in the TensorFlow repository for now.</p>\n<p>Regarding construction of the CNN: <code>wrappers.go</code> provides only the low level TensorFlow ops, while Python has richer APIs in <code>tf.layers</code> (other other frameworks like Keras) for constructing models. To reproduce that in Go, for now, the choices would be to, either:</p>\n<ul>\n<li>Construct the model in Python and then export/import into Go (which is what I did in this <a href=\"https://github.com/asimshankar/go-tensorflow/tree/master/word2vec\">word2vec example</a>, OR</li>\n<li>Follow the codepath for model construction in python to figure out the primitive TensorFlow ops being use and reconstruct with that (perhaps adding a \"layers\" like API for Go).</li>\n</ul>\n<p>Hope that helps.</p>", "body_text": "@Lewuathe : This a wonderful, though I'd suggest that you keep this example in your repository rather than putting it in the TensorFlow repository for now.\nRegarding construction of the CNN: wrappers.go provides only the low level TensorFlow ops, while Python has richer APIs in tf.layers (other other frameworks like Keras) for constructing models. To reproduce that in Go, for now, the choices would be to, either:\n\nConstruct the model in Python and then export/import into Go (which is what I did in this word2vec example, OR\nFollow the codepath for model construction in python to figure out the primitive TensorFlow ops being use and reconstruct with that (perhaps adding a \"layers\" like API for Go).\n\nHope that helps.", "body": "@Lewuathe : This a wonderful, though I'd suggest that you keep this example in your repository rather than putting it in the TensorFlow repository for now. \r\n\r\nRegarding construction of the CNN: `wrappers.go` provides only the low level TensorFlow ops, while Python has richer APIs in `tf.layers` (other other frameworks like Keras) for constructing models. To reproduce that in Go, for now, the choices would be to, either:\r\n\r\n- Construct the model in Python and then export/import into Go (which is what I did in this [word2vec example](https://github.com/asimshankar/go-tensorflow/tree/master/word2vec), OR\r\n- Follow the codepath for model construction in python to figure out the primitive TensorFlow ops being use and reconstruct with that (perhaps adding a \"layers\" like API for Go).\r\n\r\nHope that helps.\r\n"}