{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17187", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17187/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17187/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17187/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17187", "id": 299254145, "node_id": "MDU6SXNzdWUyOTkyNTQxNDU=", "number": 17187, "title": "TensorFlow - cuInit: CUDA_ERROR_NO_DEVICE", "user": {"login": "SarthakJShetty", "id": 16378754, "node_id": "MDQ6VXNlcjE2Mzc4NzU0", "avatar_url": "https://avatars2.githubusercontent.com/u/16378754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SarthakJShetty", "html_url": "https://github.com/SarthakJShetty", "followers_url": "https://api.github.com/users/SarthakJShetty/followers", "following_url": "https://api.github.com/users/SarthakJShetty/following{/other_user}", "gists_url": "https://api.github.com/users/SarthakJShetty/gists{/gist_id}", "starred_url": "https://api.github.com/users/SarthakJShetty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SarthakJShetty/subscriptions", "organizations_url": "https://api.github.com/users/SarthakJShetty/orgs", "repos_url": "https://api.github.com/users/SarthakJShetty/repos", "events_url": "https://api.github.com/users/SarthakJShetty/events{/privacy}", "received_events_url": "https://api.github.com/users/SarthakJShetty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-22T08:01:58Z", "updated_at": "2018-02-25T06:27:41Z", "closed_at": "2018-02-25T06:27:40Z", "author_association": "NONE", "body_html": "<p>Hi, I was using TensorFlow with GPU support these past few months and it worked without any issues. I have installed cuda v8.0 and also have the cudNN library.  Recently, I started using TensorFlow for a project and noticed that it isn't computing on the GPU, and is using the GPU instead. I'm running TensorFlow 1.2.1 on Windows 10, with CUDA v8.0.</p>\n<p>Here is the code that I ran on the Python Interpreter:<br>\n<code>import tensorflow as tf</code><br>\n<code>sess=tf.Session()</code></p>\n<p>Here's the message on the command prompt:</p>\n<p>`&gt;&gt;&gt; import tensorflow as tf</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>sess=tf.Session()<br>\n2018-02-22 13:24:51.069445: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.<br>\n2018-02-22 13:24:51.079084: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE2 instructions, but these are available on your machine and could speed up CPU computations.<br>\n2018-02-22 13:24:51.085961: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.<br>\n2018-02-22 13:24:51.092933: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.<br>\n2018-02-22 13:24:51.102940: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.<br>\n2018-02-22 13:24:51.110151: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.<br>\n2018-02-22 13:24:51.116103: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.<br>\n2018-02-22 13:24:51.123166: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.<br>\n2018-02-22 13:24:51.705468: <strong>E c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\stream_executor\\cuda\\cuda_driver.cc:406] failed call to cuInit: CUDA_ERROR_NO_DEVICE</strong><br>\n2018-02-22 13:24:51.717633: I c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\stream_executor\\cuda\\cuda_diagnostics.cc:158] retrieving CUDA diagnostic information for host: Cipher<br>\n2018-02-22 13:24:51.728408: I c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\stream_executor\\cuda\\cuda_diagnostics.cc:165] hostname: Cipher`</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>I already tried a bunch of solutions such as changing <code>CUDA_VISIBLE_DEVICES=0</code>, and even adding cudnn to my <code>PATH</code> variables</p>\n<p>I have not used TensorFlow in this example to write any custom code. I am running Windows 10, running TensorFlow 1.2 with GPU support, which I installed from the TensorFlow website. The GPU version is supported by CUDA v8.0. I have an NVIDIA 920M with a memory of 4GB.</p>", "body_text": "Hi, I was using TensorFlow with GPU support these past few months and it worked without any issues. I have installed cuda v8.0 and also have the cudNN library.  Recently, I started using TensorFlow for a project and noticed that it isn't computing on the GPU, and is using the GPU instead. I'm running TensorFlow 1.2.1 on Windows 10, with CUDA v8.0.\nHere is the code that I ran on the Python Interpreter:\nimport tensorflow as tf\nsess=tf.Session()\nHere's the message on the command prompt:\n`>>> import tensorflow as tf\n\n\n\nsess=tf.Session()\n2018-02-22 13:24:51.069445: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.\n2018-02-22 13:24:51.079084: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE2 instructions, but these are available on your machine and could speed up CPU computations.\n2018-02-22 13:24:51.085961: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\n2018-02-22 13:24:51.092933: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n2018-02-22 13:24:51.102940: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2018-02-22 13:24:51.110151: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n2018-02-22 13:24:51.116103: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\n2018-02-22 13:24:51.123166: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\n2018-02-22 13:24:51.705468: E c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\stream_executor\\cuda\\cuda_driver.cc:406] failed call to cuInit: CUDA_ERROR_NO_DEVICE\n2018-02-22 13:24:51.717633: I c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\stream_executor\\cuda\\cuda_diagnostics.cc:158] retrieving CUDA diagnostic information for host: Cipher\n2018-02-22 13:24:51.728408: I c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\stream_executor\\cuda\\cuda_diagnostics.cc:165] hostname: Cipher`\n\n\n\nI already tried a bunch of solutions such as changing CUDA_VISIBLE_DEVICES=0, and even adding cudnn to my PATH variables\nI have not used TensorFlow in this example to write any custom code. I am running Windows 10, running TensorFlow 1.2 with GPU support, which I installed from the TensorFlow website. The GPU version is supported by CUDA v8.0. I have an NVIDIA 920M with a memory of 4GB.", "body": "Hi, I was using TensorFlow with GPU support these past few months and it worked without any issues. I have installed cuda v8.0 and also have the cudNN library.  Recently, I started using TensorFlow for a project and noticed that it isn't computing on the GPU, and is using the GPU instead. I'm running TensorFlow 1.2.1 on Windows 10, with CUDA v8.0.\r\n\r\nHere is the code that I ran on the Python Interpreter:\r\n`import tensorflow as tf`\r\n`sess=tf.Session()`\r\n\r\nHere's the message on the command prompt:\r\n\r\n`>>> import tensorflow as tf\r\n>>> sess=tf.Session()\r\n2018-02-22 13:24:51.069445: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE instructions, but these are available on your machine and could speed up CPU computations.\r\n2018-02-22 13:24:51.079084: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE2 instructions, but these are available on your machine and could speed up CPU computations.\r\n2018-02-22 13:24:51.085961: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE3 instructions, but these are available on your machine and could speed up CPU computations.\r\n2018-02-22 13:24:51.092933: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\r\n2018-02-22 13:24:51.102940: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\r\n2018-02-22 13:24:51.110151: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\r\n2018-02-22 13:24:51.116103: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.\r\n2018-02-22 13:24:51.123166: W c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\core\\platform\\cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.\r\n2018-02-22 13:24:51.705468: **E c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\stream_executor\\cuda\\cuda_driver.cc:406] failed call to cuInit: CUDA_ERROR_NO_DEVICE**\r\n2018-02-22 13:24:51.717633: I c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\stream_executor\\cuda\\cuda_diagnostics.cc:158] retrieving CUDA diagnostic information for host: Cipher\r\n2018-02-22 13:24:51.728408: I c:\\tf_jenkins\\home\\workspace\\release-win\\m\\windows-gpu\\py\\35\\tensorflow\\stream_executor\\cuda\\cuda_diagnostics.cc:165] hostname: Cipher`\r\n\r\nI already tried a bunch of solutions such as changing `CUDA_VISIBLE_DEVICES=0`, and even adding cudnn to my `PATH` variables\r\n\r\n\r\nI have not used TensorFlow in this example to write any custom code. I am running Windows 10, running TensorFlow 1.2 with GPU support, which I installed from the TensorFlow website. The GPU version is supported by CUDA v8.0. I have an NVIDIA 920M with a memory of 4GB."}