{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/384538141", "html_url": "https://github.com/tensorflow/tensorflow/issues/18891#issuecomment-384538141", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18891", "id": 384538141, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDUzODE0MQ==", "user": {"login": "anonym24", "id": 8851301, "node_id": "MDQ6VXNlcjg4NTEzMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/8851301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anonym24", "html_url": "https://github.com/anonym24", "followers_url": "https://api.github.com/users/anonym24/followers", "following_url": "https://api.github.com/users/anonym24/following{/other_user}", "gists_url": "https://api.github.com/users/anonym24/gists{/gist_id}", "starred_url": "https://api.github.com/users/anonym24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anonym24/subscriptions", "organizations_url": "https://api.github.com/users/anonym24/orgs", "repos_url": "https://api.github.com/users/anonym24/repos", "events_url": "https://api.github.com/users/anonym24/events{/privacy}", "received_events_url": "https://api.github.com/users/anonym24/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-26T07:16:15Z", "updated_at": "2018-04-26T07:16:15Z", "author_association": "NONE", "body_html": "<p>so it run ok for next android studio run</p>\n<p>as temporary solution I added try...catch in case it will happen again</p>\n<pre><code> runInBackground(\n       new Runnable() {\n         @Override\n         public void run() {\n           try {\n             LOGGER.i(\"Running detection on image \" + currTimestamp);\n             final long startTime = SystemClock.uptimeMillis();\n             final List&lt;Classifier.Recognition&gt; results = detector.recognizeImage(croppedBitmap);\n             lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;\n\n             cropCopyBitmap = Bitmap.createBitmap(croppedBitmap);\n             final Canvas canvas = new Canvas(cropCopyBitmap);\n             final Paint paint = new Paint();\n             paint.setColor(Color.RED);\n             paint.setStyle(Style.STROKE);\n             paint.setStrokeWidth(2.0f);\n\n             float minimumConfidence = MINIMUM_CONFIDENCE_TF_OD_API;\n             switch (MODE) {\n               case TF_OD_API:\n                 minimumConfidence = MINIMUM_CONFIDENCE_TF_OD_API;\n                 break;\n               case MULTIBOX:\n                 minimumConfidence = MINIMUM_CONFIDENCE_MULTIBOX;\n                 break;\n               case YOLO:\n                 minimumConfidence = MINIMUM_CONFIDENCE_YOLO;\n                 break;\n             }\n\n             final List&lt;Classifier.Recognition&gt; mappedRecognitions =\n                     new LinkedList&lt;Classifier.Recognition&gt;();\n\n             for (final Classifier.Recognition result : results) {\n               final RectF location = result.getLocation();\n               if (location != null &amp;&amp; result.getConfidence() &gt;= minimumConfidence) {\n                 canvas.drawRect(location, paint);\n\n                 cropToFrameTransform.mapRect(location);\n                 result.setLocation(location);\n                 mappedRecognitions.add(result);\n               }\n             }\n\n             tracker.trackResults(mappedRecognitions, luminanceCopy, currTimestamp);\n             trackingOverlay.postInvalidate();\n\n             requestRender();\n             computingDetection = false;\n           } catch (NullPointerException e) {\n             e.printStackTrace();\n           }\n         }\n       });\n }\n</code></pre>", "body_text": "so it run ok for next android studio run\nas temporary solution I added try...catch in case it will happen again\n runInBackground(\n       new Runnable() {\n         @Override\n         public void run() {\n           try {\n             LOGGER.i(\"Running detection on image \" + currTimestamp);\n             final long startTime = SystemClock.uptimeMillis();\n             final List<Classifier.Recognition> results = detector.recognizeImage(croppedBitmap);\n             lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;\n\n             cropCopyBitmap = Bitmap.createBitmap(croppedBitmap);\n             final Canvas canvas = new Canvas(cropCopyBitmap);\n             final Paint paint = new Paint();\n             paint.setColor(Color.RED);\n             paint.setStyle(Style.STROKE);\n             paint.setStrokeWidth(2.0f);\n\n             float minimumConfidence = MINIMUM_CONFIDENCE_TF_OD_API;\n             switch (MODE) {\n               case TF_OD_API:\n                 minimumConfidence = MINIMUM_CONFIDENCE_TF_OD_API;\n                 break;\n               case MULTIBOX:\n                 minimumConfidence = MINIMUM_CONFIDENCE_MULTIBOX;\n                 break;\n               case YOLO:\n                 minimumConfidence = MINIMUM_CONFIDENCE_YOLO;\n                 break;\n             }\n\n             final List<Classifier.Recognition> mappedRecognitions =\n                     new LinkedList<Classifier.Recognition>();\n\n             for (final Classifier.Recognition result : results) {\n               final RectF location = result.getLocation();\n               if (location != null && result.getConfidence() >= minimumConfidence) {\n                 canvas.drawRect(location, paint);\n\n                 cropToFrameTransform.mapRect(location);\n                 result.setLocation(location);\n                 mappedRecognitions.add(result);\n               }\n             }\n\n             tracker.trackResults(mappedRecognitions, luminanceCopy, currTimestamp);\n             trackingOverlay.postInvalidate();\n\n             requestRender();\n             computingDetection = false;\n           } catch (NullPointerException e) {\n             e.printStackTrace();\n           }\n         }\n       });\n }", "body": "so it run ok for next android studio run\r\n\r\nas temporary solution I added try...catch in case it will happen again\r\n\r\n ```\r\n  runInBackground(\r\n        new Runnable() {\r\n          @Override\r\n          public void run() {\r\n            try {\r\n              LOGGER.i(\"Running detection on image \" + currTimestamp);\r\n              final long startTime = SystemClock.uptimeMillis();\r\n              final List<Classifier.Recognition> results = detector.recognizeImage(croppedBitmap);\r\n              lastProcessingTimeMs = SystemClock.uptimeMillis() - startTime;\r\n\r\n              cropCopyBitmap = Bitmap.createBitmap(croppedBitmap);\r\n              final Canvas canvas = new Canvas(cropCopyBitmap);\r\n              final Paint paint = new Paint();\r\n              paint.setColor(Color.RED);\r\n              paint.setStyle(Style.STROKE);\r\n              paint.setStrokeWidth(2.0f);\r\n\r\n              float minimumConfidence = MINIMUM_CONFIDENCE_TF_OD_API;\r\n              switch (MODE) {\r\n                case TF_OD_API:\r\n                  minimumConfidence = MINIMUM_CONFIDENCE_TF_OD_API;\r\n                  break;\r\n                case MULTIBOX:\r\n                  minimumConfidence = MINIMUM_CONFIDENCE_MULTIBOX;\r\n                  break;\r\n                case YOLO:\r\n                  minimumConfidence = MINIMUM_CONFIDENCE_YOLO;\r\n                  break;\r\n              }\r\n\r\n              final List<Classifier.Recognition> mappedRecognitions =\r\n                      new LinkedList<Classifier.Recognition>();\r\n\r\n              for (final Classifier.Recognition result : results) {\r\n                final RectF location = result.getLocation();\r\n                if (location != null && result.getConfidence() >= minimumConfidence) {\r\n                  canvas.drawRect(location, paint);\r\n\r\n                  cropToFrameTransform.mapRect(location);\r\n                  result.setLocation(location);\r\n                  mappedRecognitions.add(result);\r\n                }\r\n              }\r\n\r\n              tracker.trackResults(mappedRecognitions, luminanceCopy, currTimestamp);\r\n              trackingOverlay.postInvalidate();\r\n\r\n              requestRender();\r\n              computingDetection = false;\r\n            } catch (NullPointerException e) {\r\n              e.printStackTrace();\r\n            }\r\n          }\r\n        });\r\n  }\r\n```"}