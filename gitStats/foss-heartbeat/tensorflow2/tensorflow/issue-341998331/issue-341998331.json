{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20885", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20885/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20885/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20885/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20885", "id": 341998331, "node_id": "MDU6SXNzdWUzNDE5OTgzMzE=", "number": 20885, "title": "AttributeError: module 'tensorflow.python.framework.ops' has no attribute '_TensorLike'", "user": {"login": "husnejahan", "id": 23203130, "node_id": "MDQ6VXNlcjIzMjAzMTMw", "avatar_url": "https://avatars2.githubusercontent.com/u/23203130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/husnejahan", "html_url": "https://github.com/husnejahan", "followers_url": "https://api.github.com/users/husnejahan/followers", "following_url": "https://api.github.com/users/husnejahan/following{/other_user}", "gists_url": "https://api.github.com/users/husnejahan/gists{/gist_id}", "starred_url": "https://api.github.com/users/husnejahan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/husnejahan/subscriptions", "organizations_url": "https://api.github.com/users/husnejahan/orgs", "repos_url": "https://api.github.com/users/husnejahan/repos", "events_url": "https://api.github.com/users/husnejahan/events{/privacy}", "received_events_url": "https://api.github.com/users/husnejahan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-07-17T16:42:01Z", "updated_at": "2018-07-18T20:17:09Z", "closed_at": "2018-07-18T20:17:09Z", "author_association": "NONE", "body_html": "<p>I am using keras where tensorflow as backend.Getting the following error:</p>\n<hr>\n<p>AttributeError                            Traceback (most recent call last)<br>\n in ()<br>\n10 KEYS = [str(key) for key in range(len(database))]<br>\n11<br>\n---&gt; 12 encoder    = load_model(ENCODER_PATH, custom_objects={'VisualBinaryRegulizer': VisualBinaryRegulizer})<br>\n13<br>\n14 input_size  = encoder.layers[0].input.shape.as_list()[1:3]</p>\n<p>~/.local/lib/python3.5/site-packages/keras/engine/saving.py in load_model(filepath, custom_objects, compile)<br>\n259             raise ValueError('No model found in config file.')<br>\n260         model_config = json.loads(model_config.decode('utf-8'))<br>\n--&gt; 261         model = model_from_config(model_config, custom_objects=custom_objects)<br>\n262<br>\n263         # set weights</p>\n<p>~/.local/lib/python3.5/site-packages/keras/engine/saving.py in model_from_config(config, custom_objects)<br>\n333                         '<code>Sequential.from_config(config)</code>?')<br>\n334     from ..layers import deserialize<br>\n--&gt; 335     return deserialize(config, custom_objects=custom_objects)<br>\n336<br>\n337</p>\n<p>~/.local/lib/python3.5/site-packages/keras/layers/<strong>init</strong>.py in deserialize(config, custom_objects)<br>\n53                                     module_objects=globs,<br>\n54                                     custom_objects=custom_objects,<br>\n---&gt; 55                                     printable_module_name='layer')</p>\n<p>~/.local/lib/python3.5/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)<br>\n143                     config['config'],<br>\n144                     custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +<br>\n--&gt; 145                                         list(custom_objects.items())))<br>\n146             with CustomObjectScope(custom_objects):<br>\n147                 return cls.from_config(config['config'])</p>\n<p>~/.local/lib/python3.5/site-packages/keras/engine/network.py in from_config(cls, config, custom_objects)<br>\n1034         # First, we create all layers and enqueue nodes to be processed<br>\n1035         for layer_data in config['layers']:<br>\n-&gt; 1036             process_layer(layer_data)<br>\n1037         # Then we process nodes in order of layer depth.<br>\n1038         # Nodes that cannot yet be processed (if the inbound node</p>\n<p>~/.local/lib/python3.5/site-packages/keras/engine/network.py in process_layer(layer_data)<br>\n1020<br>\n1021             layer = deserialize_layer(layer_data,<br>\n-&gt; 1022                                       custom_objects=custom_objects)<br>\n1023             created_layers[layer_name] = layer<br>\n1024</p>\n<p>~/.local/lib/python3.5/site-packages/keras/layers/<strong>init</strong>.py in deserialize(config, custom_objects)<br>\n53                                     module_objects=globs,<br>\n54                                     custom_objects=custom_objects,<br>\n---&gt; 55                                     printable_module_name='layer')</p>\n<p>~/.local/lib/python3.5/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)<br>\n143                     config['config'],<br>\n144                     custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +<br>\n--&gt; 145                                         list(custom_objects.items())))<br>\n146             with CustomObjectScope(custom_objects):<br>\n147                 return cls.from_config(config['config'])</p>\n<p>~/.local/lib/python3.5/site-packages/keras/engine/network.py in from_config(cls, config, custom_objects)<br>\n1044                 if layer in unprocessed_nodes:<br>\n1045                     for node_data in unprocessed_nodes.pop(layer):<br>\n-&gt; 1046                         process_node(layer, node_data)<br>\n1047<br>\n1048         name = config.get('name')</p>\n<p>~/.local/lib/python3.5/site-packages/keras/engine/network.py in process_node(layer, node_data)<br>\n1001             if input_tensors:<br>\n1002                 if len(input_tensors) == 1:<br>\n-&gt; 1003                     layer(input_tensors[0], **kwargs)<br>\n1004                 else:<br>\n1005                     layer(input_tensors, **kwargs)</p>\n<p>~/.local/lib/python3.5/site-packages/keras/engine/base_layer.py in <strong>call</strong>(self, inputs, **kwargs)<br>\n412                 # Raise exceptions in case the input is not compatible<br>\n413                 # with the input_spec specified in the layer constructor.<br>\n--&gt; 414                 self.assert_input_compatibility(inputs)<br>\n415<br>\n416                 # Collect input shapes to build layer.</p>\n<p>~/.local/lib/python3.5/site-packages/keras/engine/base_layer.py in assert_input_compatibility(self, inputs)<br>\n277         for x in inputs:<br>\n278             try:<br>\n--&gt; 279                 K.is_keras_tensor(x)<br>\n280             except ValueError:<br>\n281                 raise ValueError('Layer ' + self.name + ' was called with '</p>\n<p>~/.local/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py in is_keras_tensor(x)<br>\n467     ```<br>\n468     \"\"\"<br>\n--&gt; 469     if not is_tensor(x):<br>\n470         raise ValueError('Unexpectedly found an instance of type <code>' + 471                          str(type(x)) + '</code>. '</p>\n<p>~/.local/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py in is_tensor(x)<br>\n475<br>\n476 def is_tensor(x):<br>\n--&gt; 477     return isinstance(x, tf_ops._TensorLike) or tf_ops.is_dense_tensor_like(x)<br>\n478<br>\n479</p>\n<p>AttributeError: module 'tensorflow.python.framework.ops' has no attribute '_TensorLike'</p>", "body_text": "I am using keras where tensorflow as backend.Getting the following error:\n\nAttributeError                            Traceback (most recent call last)\n in ()\n10 KEYS = [str(key) for key in range(len(database))]\n11\n---> 12 encoder    = load_model(ENCODER_PATH, custom_objects={'VisualBinaryRegulizer': VisualBinaryRegulizer})\n13\n14 input_size  = encoder.layers[0].input.shape.as_list()[1:3]\n~/.local/lib/python3.5/site-packages/keras/engine/saving.py in load_model(filepath, custom_objects, compile)\n259             raise ValueError('No model found in config file.')\n260         model_config = json.loads(model_config.decode('utf-8'))\n--> 261         model = model_from_config(model_config, custom_objects=custom_objects)\n262\n263         # set weights\n~/.local/lib/python3.5/site-packages/keras/engine/saving.py in model_from_config(config, custom_objects)\n333                         'Sequential.from_config(config)?')\n334     from ..layers import deserialize\n--> 335     return deserialize(config, custom_objects=custom_objects)\n336\n337\n~/.local/lib/python3.5/site-packages/keras/layers/init.py in deserialize(config, custom_objects)\n53                                     module_objects=globs,\n54                                     custom_objects=custom_objects,\n---> 55                                     printable_module_name='layer')\n~/.local/lib/python3.5/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)\n143                     config['config'],\n144                     custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +\n--> 145                                         list(custom_objects.items())))\n146             with CustomObjectScope(custom_objects):\n147                 return cls.from_config(config['config'])\n~/.local/lib/python3.5/site-packages/keras/engine/network.py in from_config(cls, config, custom_objects)\n1034         # First, we create all layers and enqueue nodes to be processed\n1035         for layer_data in config['layers']:\n-> 1036             process_layer(layer_data)\n1037         # Then we process nodes in order of layer depth.\n1038         # Nodes that cannot yet be processed (if the inbound node\n~/.local/lib/python3.5/site-packages/keras/engine/network.py in process_layer(layer_data)\n1020\n1021             layer = deserialize_layer(layer_data,\n-> 1022                                       custom_objects=custom_objects)\n1023             created_layers[layer_name] = layer\n1024\n~/.local/lib/python3.5/site-packages/keras/layers/init.py in deserialize(config, custom_objects)\n53                                     module_objects=globs,\n54                                     custom_objects=custom_objects,\n---> 55                                     printable_module_name='layer')\n~/.local/lib/python3.5/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)\n143                     config['config'],\n144                     custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +\n--> 145                                         list(custom_objects.items())))\n146             with CustomObjectScope(custom_objects):\n147                 return cls.from_config(config['config'])\n~/.local/lib/python3.5/site-packages/keras/engine/network.py in from_config(cls, config, custom_objects)\n1044                 if layer in unprocessed_nodes:\n1045                     for node_data in unprocessed_nodes.pop(layer):\n-> 1046                         process_node(layer, node_data)\n1047\n1048         name = config.get('name')\n~/.local/lib/python3.5/site-packages/keras/engine/network.py in process_node(layer, node_data)\n1001             if input_tensors:\n1002                 if len(input_tensors) == 1:\n-> 1003                     layer(input_tensors[0], **kwargs)\n1004                 else:\n1005                     layer(input_tensors, **kwargs)\n~/.local/lib/python3.5/site-packages/keras/engine/base_layer.py in call(self, inputs, **kwargs)\n412                 # Raise exceptions in case the input is not compatible\n413                 # with the input_spec specified in the layer constructor.\n--> 414                 self.assert_input_compatibility(inputs)\n415\n416                 # Collect input shapes to build layer.\n~/.local/lib/python3.5/site-packages/keras/engine/base_layer.py in assert_input_compatibility(self, inputs)\n277         for x in inputs:\n278             try:\n--> 279                 K.is_keras_tensor(x)\n280             except ValueError:\n281                 raise ValueError('Layer ' + self.name + ' was called with '\n~/.local/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py in is_keras_tensor(x)\n467     ```\n468     \"\"\"\n--> 469     if not is_tensor(x):\n470         raise ValueError('Unexpectedly found an instance of type ' + 471                          str(type(x)) + '. '\n~/.local/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py in is_tensor(x)\n475\n476 def is_tensor(x):\n--> 477     return isinstance(x, tf_ops._TensorLike) or tf_ops.is_dense_tensor_like(x)\n478\n479\nAttributeError: module 'tensorflow.python.framework.ops' has no attribute '_TensorLike'", "body": "I am using keras where tensorflow as backend.Getting the following error:\r\n\r\n\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-8-509bb069f0c0> in <module>()\r\n     10 KEYS = [str(key) for key in range(len(database))]\r\n     11 \r\n---> 12 encoder    = load_model(ENCODER_PATH, custom_objects={'VisualBinaryRegulizer': VisualBinaryRegulizer})\r\n     13 \r\n     14 input_size  = encoder.layers[0].input.shape.as_list()[1:3]\r\n\r\n~/.local/lib/python3.5/site-packages/keras/engine/saving.py in load_model(filepath, custom_objects, compile)\r\n    259             raise ValueError('No model found in config file.')\r\n    260         model_config = json.loads(model_config.decode('utf-8'))\r\n--> 261         model = model_from_config(model_config, custom_objects=custom_objects)\r\n    262 \r\n    263         # set weights\r\n\r\n~/.local/lib/python3.5/site-packages/keras/engine/saving.py in model_from_config(config, custom_objects)\r\n    333                         '`Sequential.from_config(config)`?')\r\n    334     from ..layers import deserialize\r\n--> 335     return deserialize(config, custom_objects=custom_objects)\r\n    336 \r\n    337 \r\n\r\n~/.local/lib/python3.5/site-packages/keras/layers/__init__.py in deserialize(config, custom_objects)\r\n     53                                     module_objects=globs,\r\n     54                                     custom_objects=custom_objects,\r\n---> 55                                     printable_module_name='layer')\r\n\r\n~/.local/lib/python3.5/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)\r\n    143                     config['config'],\r\n    144                     custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +\r\n--> 145                                         list(custom_objects.items())))\r\n    146             with CustomObjectScope(custom_objects):\r\n    147                 return cls.from_config(config['config'])\r\n\r\n~/.local/lib/python3.5/site-packages/keras/engine/network.py in from_config(cls, config, custom_objects)\r\n   1034         # First, we create all layers and enqueue nodes to be processed\r\n   1035         for layer_data in config['layers']:\r\n-> 1036             process_layer(layer_data)\r\n   1037         # Then we process nodes in order of layer depth.\r\n   1038         # Nodes that cannot yet be processed (if the inbound node\r\n\r\n~/.local/lib/python3.5/site-packages/keras/engine/network.py in process_layer(layer_data)\r\n   1020 \r\n   1021             layer = deserialize_layer(layer_data,\r\n-> 1022                                       custom_objects=custom_objects)\r\n   1023             created_layers[layer_name] = layer\r\n   1024 \r\n\r\n~/.local/lib/python3.5/site-packages/keras/layers/__init__.py in deserialize(config, custom_objects)\r\n     53                                     module_objects=globs,\r\n     54                                     custom_objects=custom_objects,\r\n---> 55                                     printable_module_name='layer')\r\n\r\n~/.local/lib/python3.5/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)\r\n    143                     config['config'],\r\n    144                     custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +\r\n--> 145                                         list(custom_objects.items())))\r\n    146             with CustomObjectScope(custom_objects):\r\n    147                 return cls.from_config(config['config'])\r\n\r\n~/.local/lib/python3.5/site-packages/keras/engine/network.py in from_config(cls, config, custom_objects)\r\n   1044                 if layer in unprocessed_nodes:\r\n   1045                     for node_data in unprocessed_nodes.pop(layer):\r\n-> 1046                         process_node(layer, node_data)\r\n   1047 \r\n   1048         name = config.get('name')\r\n\r\n~/.local/lib/python3.5/site-packages/keras/engine/network.py in process_node(layer, node_data)\r\n   1001             if input_tensors:\r\n   1002                 if len(input_tensors) == 1:\r\n-> 1003                     layer(input_tensors[0], **kwargs)\r\n   1004                 else:\r\n   1005                     layer(input_tensors, **kwargs)\r\n\r\n~/.local/lib/python3.5/site-packages/keras/engine/base_layer.py in __call__(self, inputs, **kwargs)\r\n    412                 # Raise exceptions in case the input is not compatible\r\n    413                 # with the input_spec specified in the layer constructor.\r\n--> 414                 self.assert_input_compatibility(inputs)\r\n    415 \r\n    416                 # Collect input shapes to build layer.\r\n\r\n~/.local/lib/python3.5/site-packages/keras/engine/base_layer.py in assert_input_compatibility(self, inputs)\r\n    277         for x in inputs:\r\n    278             try:\r\n--> 279                 K.is_keras_tensor(x)\r\n    280             except ValueError:\r\n    281                 raise ValueError('Layer ' + self.name + ' was called with '\r\n\r\n~/.local/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py in is_keras_tensor(x)\r\n    467     ```\r\n    468     \"\"\"\r\n--> 469     if not is_tensor(x):\r\n    470         raise ValueError('Unexpectedly found an instance of type `' +\r\n    471                          str(type(x)) + '`. '\r\n\r\n~/.local/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py in is_tensor(x)\r\n    475 \r\n    476 def is_tensor(x):\r\n--> 477     return isinstance(x, tf_ops._TensorLike) or tf_ops.is_dense_tensor_like(x)\r\n    478 \r\n    479 \r\n\r\nAttributeError: module 'tensorflow.python.framework.ops' has no attribute '_TensorLike'\r\n\r\n\r\n\r\n"}