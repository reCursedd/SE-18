{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185866215", "pull_request_review_id": 117342503, "id": 185866215, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTg2NjIxNQ==", "diff_hunk": "@@ -0,0 +1,218 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+#include \"tensorflow/core/framework/dataset.h\"\n+#include \"tensorflow/core/framework/partial_tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+\n+namespace tensorflow {\n+\n+namespace {\n+\n+// See documentation in ../ops/dataset_ops.cc for a high-level\n+// description of the following op.\n+\n+// This is based on zip_dataset_op.cc\n+class UnorderedMergeDatasetOp : public DatasetOpKernel {\n+ public:\n+  explicit UnorderedMergeDatasetOp(OpKernelConstruction* ctx)\n+      : DatasetOpKernel(ctx) {}\n+\n+  void MakeDataset(OpKernelContext* ctx, DatasetBase** output) override {\n+    std::vector<DatasetBase*> inputs;\n+    DatasetBase* input0;\n+    OP_REQUIRES_OK(ctx, GetDatasetFromVariantTensor(ctx->input(0), &input0));\n+    inputs.push_back(input0);\n+    for (size_t i = 1; i < ctx->num_inputs(); ++i) {\n+      DatasetBase* input;\n+      OP_REQUIRES_OK(ctx, GetDatasetFromVariantTensor(ctx->input(i), &input));\n+      // from VerifyTypesMatch()\n+      OP_REQUIRES(\n+          ctx, input0->output_dtypes().size() == input->output_dtypes().size(),\n+          errors::InvalidArgument(\n+              \"Number of components does not match: expected \",\n+              input0->output_dtypes().size(), \" types but got \",\n+              input->output_dtypes().size(), \".\"));\n+      for (size_t i = 0; i < input0->output_dtypes().size(); ++i) {\n+        OP_REQUIRES(ctx,\n+                    input0->output_dtypes()[i] == input->output_dtypes()[i],\n+                    errors::InvalidArgument(\n+                        \"Data type mismatch at component \", i, \": expected \",\n+                        DataTypeString(input0->output_dtypes()[i]), \" but got \",\n+                        DataTypeString(input->output_dtypes()[i]), \".\"));\n+      }\n+      // from VerifyShapesCompatible()\n+      OP_REQUIRES(\n+          ctx, input0->output_shapes().size() == input->output_shapes().size(),\n+          errors::InvalidArgument(\n+              \"Number of components does not match: expected \",\n+              input0->output_shapes().size(), \" types but got \",\n+              input->output_shapes().size(), \".\"));\n+      for (size_t i = 0; i < input0->output_shapes().size(); ++i) {\n+        OP_REQUIRES(ctx, input0->output_shapes()[i].IsCompatibleWith(\n+                             input->output_shapes()[i]),\n+                    errors::InvalidArgument(\n+                        \"Incompatible shapes at component \", i, \": expected \",\n+                        input0->output_shapes()[i].DebugString(), \" but got \",\n+                        input->output_shapes()[i].DebugString(), \".\"));\n+      }\n+      inputs.push_back(input);\n+    }\n+    *output = new Dataset(ctx, inputs);\n+  }\n+\n+ private:\n+  class Dataset : public GraphDatasetBase {\n+   public:\n+    explicit Dataset(OpKernelContext* ctx,\n+                     const std::vector<DatasetBase*>& inputs)\n+        : GraphDatasetBase(ctx), inputs_(inputs) {\n+      const auto& input = inputs_[0];\n+      for (DataType dt : input->output_dtypes()) {\n+        output_dtypes_.push_back(dt);\n+      }\n+      output_shapes_.insert(output_shapes_.end(),", "path": "tensorflow/contrib/data/kernels/unordered_merge_dataset_op.cc", "position": 85, "original_position": 85, "commit_id": "b905186aa9015d240abde9690383b40525a2f02c", "original_commit_id": "482f6c7c20c58f345793ec681033ae4da4beed7e", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "The shape for each component here should be the \"most specific compatible shape\" of all the inputs. See the logic in `concatenate_dataset_op.cc` for an example:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/4984a60e7147edef532ca1b15050471e81e45841/tensorflow/core/kernels/data/concatenate_dataset_op.cc#L167", "created_at": "2018-05-03T16:45:09Z", "updated_at": "2018-05-07T01:17:29Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/17760#discussion_r185866215", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17760", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185866215"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/17760#discussion_r185866215"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17760"}}, "body_html": "<p>The shape for each component here should be the \"most specific compatible shape\" of all the inputs. See the logic in <code>concatenate_dataset_op.cc</code> for an example:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/4984a60e7147edef532ca1b15050471e81e45841/tensorflow/core/kernels/data/concatenate_dataset_op.cc#L167\">tensorflow/tensorflow/core/kernels/data/concatenate_dataset_op.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 167\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/4984a60e7147edef532ca1b15050471e81e45841\">4984a60</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L167\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"167\"></td>\n          <td id=\"LC167\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">static</span> PartialTensorShape <span class=\"pl-en\">MostSpecificCompatibleShape</span>( </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "The shape for each component here should be the \"most specific compatible shape\" of all the inputs. See the logic in concatenate_dataset_op.cc for an example:\n\n  \n    \n      tensorflow/tensorflow/core/kernels/data/concatenate_dataset_op.cc\n    \n    \n         Line 167\n      in\n      4984a60\n    \n    \n    \n    \n\n        \n          \n           static PartialTensorShape MostSpecificCompatibleShape("}