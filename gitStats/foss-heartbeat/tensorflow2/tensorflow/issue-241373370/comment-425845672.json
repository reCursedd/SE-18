{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/425845672", "html_url": "https://github.com/tensorflow/tensorflow/issues/11363#issuecomment-425845672", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11363", "id": 425845672, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTg0NTY3Mg==", "user": {"login": "kazemSafari", "id": 32110820, "node_id": "MDQ6VXNlcjMyMTEwODIw", "avatar_url": "https://avatars0.githubusercontent.com/u/32110820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kazemSafari", "html_url": "https://github.com/kazemSafari", "followers_url": "https://api.github.com/users/kazemSafari/followers", "following_url": "https://api.github.com/users/kazemSafari/following{/other_user}", "gists_url": "https://api.github.com/users/kazemSafari/gists{/gist_id}", "starred_url": "https://api.github.com/users/kazemSafari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kazemSafari/subscriptions", "organizations_url": "https://api.github.com/users/kazemSafari/orgs", "repos_url": "https://api.github.com/users/kazemSafari/repos", "events_url": "https://api.github.com/users/kazemSafari/events{/privacy}", "received_events_url": "https://api.github.com/users/kazemSafari/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-01T09:34:01Z", "updated_at": "2018-10-01T09:35:18Z", "author_association": "NONE", "body_html": "<p>I am trying to convert a random numpy array to tf.records. but it seems to be not doing it correctly. The label conversion is fine but the image conversion does not give back the original image.</p>\n<p>At the end, it prints False, True, whereas it should be True, True. I was wondering why is that? Is this a tensorflow or am I missing something.</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\n\ndef wrap_bytes(value):\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef wrap_int64(value):\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\n\ndef convert(images, labels, out_path):\n\n    num_images = len(labels)\n    with tf.python_io.TFRecordWriter(out_path) as writer:\n        for i in range(num_images):\n\n            label_ = labels[i]\n            # the same problem persists whether or not we flatten\n            image = images[i].flatten()\n            image_bytes = image.tostring()\n            features = \\\n                {\n                    'image': wrap_bytes(tf.compat.as_bytes(image_bytes)),\n                    'label': wrap_int64(label_)\n                }\n\n            feature = tf.train.Features(feature=features)\n            example = tf.train.Example(features=feature)\n            serialized = example.SerializeToString()\n            writer.write(serialized)\n\n\ndef parse(serialized):\n    features = \\\n        {\n            'image': tf.FixedLenFeature([], tf.string),\n            'label': tf.FixedLenFeature([], tf.int64),\n        }\n\n    parsed_example = \\\n        tf.parse_single_example(\n            serialized=serialized,\n            features=features)\n\n    image_raw = parsed_example['image']\n    label_raw = parsed_example['label']\n    image_ = tf.decode_raw(image_raw, tf.int32)\n    image_reshaped = tf.reshape(image_, (5, 5))\n\n    return image_reshaped, label_raw\n\n\ndef input_fn(filenames, batch_size):\n\n    dataset = tf.data.TFRecordDataset(filenames=filenames)\n    dataset = dataset.map(parse)\n    # dataset = dataset.repeat(1)\n    dataset = dataset.batch(batch_size)\n    iterator = dataset.make_one_shot_iterator()\n    batch_images_tf, batch_labels_tf = iterator.get_next()\n\n    return batch_images_tf, batch_labels_tf\n\n\nn = 10\nnum_classes = 15\nbatch_size = 2\nout_path = 'bug.tfrecords'\nlabels = np.random.randint(0, num_classes, n)\n\nimage_shape = (5, 5)\nimages_ = np.int32(np.random.randint(0, 255, 5*5*n).reshape(n, 5, 5))\n\nconvert(images_, labels, out_path)\n\nbatch_images_tf, batch_labels_tf = input_fn(out_path, batch_size)\n\nsess = tf.Session()\nbatch_labels_np = sess.run(batch_labels_tf)\nbatch_images_np = sess.run(batch_images_tf)\n\n# checking whether the converted data is the same as the original\nprint(np.array_equal(batch_images_np, images_[0:batch_size]))\nprint(np.array_equal(batch_labels_np, labels[0:batch_size]))\n</code></pre>", "body_text": "I am trying to convert a random numpy array to tf.records. but it seems to be not doing it correctly. The label conversion is fine but the image conversion does not give back the original image.\nAt the end, it prints False, True, whereas it should be True, True. I was wondering why is that? Is this a tensorflow or am I missing something.\nimport tensorflow as tf\nimport numpy as np\n\n\ndef wrap_bytes(value):\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef wrap_int64(value):\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\n\ndef convert(images, labels, out_path):\n\n    num_images = len(labels)\n    with tf.python_io.TFRecordWriter(out_path) as writer:\n        for i in range(num_images):\n\n            label_ = labels[i]\n            # the same problem persists whether or not we flatten\n            image = images[i].flatten()\n            image_bytes = image.tostring()\n            features = \\\n                {\n                    'image': wrap_bytes(tf.compat.as_bytes(image_bytes)),\n                    'label': wrap_int64(label_)\n                }\n\n            feature = tf.train.Features(feature=features)\n            example = tf.train.Example(features=feature)\n            serialized = example.SerializeToString()\n            writer.write(serialized)\n\n\ndef parse(serialized):\n    features = \\\n        {\n            'image': tf.FixedLenFeature([], tf.string),\n            'label': tf.FixedLenFeature([], tf.int64),\n        }\n\n    parsed_example = \\\n        tf.parse_single_example(\n            serialized=serialized,\n            features=features)\n\n    image_raw = parsed_example['image']\n    label_raw = parsed_example['label']\n    image_ = tf.decode_raw(image_raw, tf.int32)\n    image_reshaped = tf.reshape(image_, (5, 5))\n\n    return image_reshaped, label_raw\n\n\ndef input_fn(filenames, batch_size):\n\n    dataset = tf.data.TFRecordDataset(filenames=filenames)\n    dataset = dataset.map(parse)\n    # dataset = dataset.repeat(1)\n    dataset = dataset.batch(batch_size)\n    iterator = dataset.make_one_shot_iterator()\n    batch_images_tf, batch_labels_tf = iterator.get_next()\n\n    return batch_images_tf, batch_labels_tf\n\n\nn = 10\nnum_classes = 15\nbatch_size = 2\nout_path = 'bug.tfrecords'\nlabels = np.random.randint(0, num_classes, n)\n\nimage_shape = (5, 5)\nimages_ = np.int32(np.random.randint(0, 255, 5*5*n).reshape(n, 5, 5))\n\nconvert(images_, labels, out_path)\n\nbatch_images_tf, batch_labels_tf = input_fn(out_path, batch_size)\n\nsess = tf.Session()\nbatch_labels_np = sess.run(batch_labels_tf)\nbatch_images_np = sess.run(batch_images_tf)\n\n# checking whether the converted data is the same as the original\nprint(np.array_equal(batch_images_np, images_[0:batch_size]))\nprint(np.array_equal(batch_labels_np, labels[0:batch_size]))", "body": " I am trying to convert a random numpy array to tf.records. but it seems to be not doing it correctly. The label conversion is fine but the image conversion does not give back the original image. \r\n\r\nAt the end, it prints False, True, whereas it should be True, True. I was wondering why is that? Is this a tensorflow or am I missing something.\r\n\r\n    import tensorflow as tf\r\n    import numpy as np\r\n    \r\n    \r\n    def wrap_bytes(value):\r\n        return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\r\n    \r\n    \r\n    def wrap_int64(value):\r\n        return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\r\n    \r\n    \r\n    def convert(images, labels, out_path):\r\n    \r\n        num_images = len(labels)\r\n        with tf.python_io.TFRecordWriter(out_path) as writer:\r\n            for i in range(num_images):\r\n    \r\n                label_ = labels[i]\r\n                # the same problem persists whether or not we flatten\r\n                image = images[i].flatten()\r\n                image_bytes = image.tostring()\r\n                features = \\\r\n                    {\r\n                        'image': wrap_bytes(tf.compat.as_bytes(image_bytes)),\r\n                        'label': wrap_int64(label_)\r\n                    }\r\n    \r\n                feature = tf.train.Features(feature=features)\r\n                example = tf.train.Example(features=feature)\r\n                serialized = example.SerializeToString()\r\n                writer.write(serialized)\r\n    \r\n    \r\n    def parse(serialized):\r\n        features = \\\r\n            {\r\n                'image': tf.FixedLenFeature([], tf.string),\r\n                'label': tf.FixedLenFeature([], tf.int64),\r\n            }\r\n    \r\n        parsed_example = \\\r\n            tf.parse_single_example(\r\n                serialized=serialized,\r\n                features=features)\r\n    \r\n        image_raw = parsed_example['image']\r\n        label_raw = parsed_example['label']\r\n        image_ = tf.decode_raw(image_raw, tf.int32)\r\n        image_reshaped = tf.reshape(image_, (5, 5))\r\n    \r\n        return image_reshaped, label_raw\r\n    \r\n    \r\n    def input_fn(filenames, batch_size):\r\n    \r\n        dataset = tf.data.TFRecordDataset(filenames=filenames)\r\n        dataset = dataset.map(parse)\r\n        # dataset = dataset.repeat(1)\r\n        dataset = dataset.batch(batch_size)\r\n        iterator = dataset.make_one_shot_iterator()\r\n        batch_images_tf, batch_labels_tf = iterator.get_next()\r\n    \r\n        return batch_images_tf, batch_labels_tf\r\n\r\n    \r\n    n = 10\r\n    num_classes = 15\r\n    batch_size = 2\r\n    out_path = 'bug.tfrecords'\r\n    labels = np.random.randint(0, num_classes, n)\r\n\r\n    image_shape = (5, 5)\r\n    images_ = np.int32(np.random.randint(0, 255, 5*5*n).reshape(n, 5, 5))\r\n    \r\n    convert(images_, labels, out_path)\r\n    \r\n    batch_images_tf, batch_labels_tf = input_fn(out_path, batch_size)\r\n    \r\n    sess = tf.Session()\r\n    batch_labels_np = sess.run(batch_labels_tf)\r\n    batch_images_np = sess.run(batch_images_tf)\r\n    \r\n    # checking whether the converted data is the same as the original\r\n    print(np.array_equal(batch_images_np, images_[0:batch_size]))\r\n    print(np.array_equal(batch_labels_np, labels[0:batch_size]))"}