{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22931", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22931/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22931/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22931/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22931", "id": 369437259, "node_id": "MDU6SXNzdWUzNjk0MzcyNTk=", "number": 22931, "title": "Reindex broken in tf docker image (v1.11.0) -> Broken numpy dependency!", "user": {"login": "boldt", "id": 750793, "node_id": "MDQ6VXNlcjc1MDc5Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/750793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boldt", "html_url": "https://github.com/boldt", "followers_url": "https://api.github.com/users/boldt/followers", "following_url": "https://api.github.com/users/boldt/following{/other_user}", "gists_url": "https://api.github.com/users/boldt/gists{/gist_id}", "starred_url": "https://api.github.com/users/boldt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boldt/subscriptions", "organizations_url": "https://api.github.com/users/boldt/orgs", "repos_url": "https://api.github.com/users/boldt/repos", "events_url": "https://api.github.com/users/boldt/events{/privacy}", "received_events_url": "https://api.github.com/users/boldt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097547147, "node_id": "MDU6TGFiZWwxMDk3NTQ3MTQ3", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:ops", "name": "comp:ops", "color": "0052cc", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-10-12T07:47:46Z", "updated_at": "2018-11-22T06:16:14Z", "closed_at": "2018-11-22T06:16:14Z", "author_association": "NONE", "body_html": "<h1>TLDR</h1>\n<p>The pandas, which is distributed with the tf docker image is broken!</p>\n<h1>Description</h1>\n<p>I'm new to tf and I'm walking thru the <a href=\"https://developers.google.com/machine-learning/crash-course/ml-intro\" rel=\"nofollow\">Machine Learning Crash Course</a> at the moment. <a href=\"https://developers.google.com/machine-learning/crash-course/first-steps-with-tensorflow/programming-exercises\" rel=\"nofollow\">First Steps with TF</a> point me to the <a href=\"https://colab.research.google.com/notebooks/mlcc/intro_to_pandas.ipynb?utm_source=mlcc&amp;utm_campaign=colab-external&amp;utm_medium=referral&amp;utm_content=pandas-colab&amp;hl=de\" rel=\"nofollow\">Quick Introduction to pandas</a> notebook.</p>\n<h2>Run example on colab</h2>\n<p>Based on this. I created the following MWE on colab (actually, it is only pandas code):</p>\n<p><a href=\"https://colab.research.google.com/drive/19uDE_H4AtpLaEL6INrRrDMXkdANsNr69\" rel=\"nofollow\">https://colab.research.google.com/drive/19uDE_H4AtpLaEL6INrRrDMXkdANsNr69</a></p>\n<p>It basically just does the following:</p>\n<ol>\n<li>Import the california housing data set</li>\n<li>reorder the data set</li>\n<li>prints the merged dataset</li>\n</ol>\n<p>If you run my notebook, you can see that step 3 prints up to 20 different values for the data set (makred with <code>left only</code> and <code>right only</code>):</p>\n<pre><code>`   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n0      -114.3      34.2                15.0       5612.0          1283.0   \n1      -114.5      34.4                19.0       7650.0          1901.0   \n2      -114.6      33.7                17.0        720.0           174.0   \n3      -114.6      33.6                14.0       1501.0           337.0   \n4      -114.6      33.6                20.0       1454.0           326.0   \n..        ...       ...                 ...          ...             ...   \n15     -117.3      33.2                13.0       3619.0           791.0   \n16     -118.3      33.8                25.0       4177.0           832.0   \n17     -117.7      34.0                25.0       1859.0           463.0   \n18     -118.1      34.0                50.0       1146.0           238.0   \n19     -118.5      34.0                41.0       1240.0           320.0   \n\n    population  households  median_income  median_house_value      _merge  \n0       1015.0       472.0            1.5             66900.0   left_only  \n1       1129.0       463.0            1.8             80100.0   left_only  \n2        333.0       117.0            1.7             85700.0   left_only  \n3        515.0       226.0            3.2             73400.0   left_only  \n4        624.0       262.0            1.9             65500.0   left_only  \n..         ...         ...            ...                 ...         ...  \n15      1759.0       806.0            2.8             98500.0  right_only  \n16      2123.0       789.0            5.1            446800.0  right_only  \n17      1070.0       374.0            2.5            187500.0  right_only  \n18       579.0       213.0            3.0            172600.0  right_only  \n19       711.0       304.0            3.3            318100.0  right_only  \n</code></pre>\n<h2>Run example on local python</h2>\n<p>In have Python 3.6.6 and I install tf with <code>pip install  tensorflow</code>.</p>\n<p>Now I run the same code in a python script as follows (on Windows 10):</p>\n<pre><code>python Reorder.py\n</code></pre>\n<p>The reordered data is exactly the same as the imported data (all are marked with <code>both</code>):</p>\n<pre><code>longitude  latitude  housing_median_age  total_rooms  total_bedrooms  population  households  median_income  median_house_value _merge\n0     -114.3      34.2                15.0       5612.0          1283.0      1015.0       472.0            1.5             66900.0   both\n1     -114.5      34.4                19.0       7650.0          1901.0      1129.0       463.0            1.8             80100.0   both\n2     -114.6      33.7                17.0        720.0           174.0       333.0       117.0            1.7             85700.0   both\n3     -114.6      33.6                14.0       1501.0           337.0       515.0       226.0            3.2             73400.0   both\n4     -114.6      33.6                20.0       1454.0           326.0       624.0       262.0            1.9             65500.0   both\n5     -114.6      33.6                29.0       1387.0           236.0       671.0       239.0            3.3             74000.0   both\n6     -114.6      33.6                25.0       2907.0           680.0      1841.0       633.0            2.7             82400.0   both\n7     -114.6      34.8                41.0        812.0           168.0       375.0       158.0            1.7             48500.0   both\n8     -114.6      33.6                34.0       4789.0          1175.0      3134.0      1056.0            2.2             58400.0   both\n9     -114.6      34.8                46.0       1497.0           309.0       787.0       271.0            2.2             48100.0   both\n</code></pre>\n<h2>Run example in tf docker container</h2>\n<p>Now I run the same python script in the <a href=\"https://hub.docker.com/r/tensorflow/tensorflow/\" rel=\"nofollow\">tf docker container</a> (v1.11.0) as follows (on Windows 10):</p>\n<div class=\"highlight highlight-source-shell\"><pre>docker run --rm -it -v C:<span class=\"pl-cce\">\\U</span>sers<span class=\"pl-cce\">\\b</span>oldt<span class=\"pl-cce\">\\d</span>ocker<span class=\"pl-cce\">\\t</span>f<span class=\"pl-cce\">\\s</span>cripts<span class=\"pl-cce\">\\:</span>/scripts tensorflow/tensorflow:1.11.0-py3 python /scripts/Reorder.py</pre></div>\n<p>The result is the same. The reordered data is exactly the same as the imported data (all are marked with <code>both</code>):</p>\n<h1>Conclusion</h1>\n<p>Because of this, I am unable to randomize the data set and split it in a training and a test set using the tf docker container. Currently, my more complex example always results the same training and test sets.</p>", "body_text": "TLDR\nThe pandas, which is distributed with the tf docker image is broken!\nDescription\nI'm new to tf and I'm walking thru the Machine Learning Crash Course at the moment. First Steps with TF point me to the Quick Introduction to pandas notebook.\nRun example on colab\nBased on this. I created the following MWE on colab (actually, it is only pandas code):\nhttps://colab.research.google.com/drive/19uDE_H4AtpLaEL6INrRrDMXkdANsNr69\nIt basically just does the following:\n\nImport the california housing data set\nreorder the data set\nprints the merged dataset\n\nIf you run my notebook, you can see that step 3 prints up to 20 different values for the data set (makred with left only and right only):\n`   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n0      -114.3      34.2                15.0       5612.0          1283.0   \n1      -114.5      34.4                19.0       7650.0          1901.0   \n2      -114.6      33.7                17.0        720.0           174.0   \n3      -114.6      33.6                14.0       1501.0           337.0   \n4      -114.6      33.6                20.0       1454.0           326.0   \n..        ...       ...                 ...          ...             ...   \n15     -117.3      33.2                13.0       3619.0           791.0   \n16     -118.3      33.8                25.0       4177.0           832.0   \n17     -117.7      34.0                25.0       1859.0           463.0   \n18     -118.1      34.0                50.0       1146.0           238.0   \n19     -118.5      34.0                41.0       1240.0           320.0   \n\n    population  households  median_income  median_house_value      _merge  \n0       1015.0       472.0            1.5             66900.0   left_only  \n1       1129.0       463.0            1.8             80100.0   left_only  \n2        333.0       117.0            1.7             85700.0   left_only  \n3        515.0       226.0            3.2             73400.0   left_only  \n4        624.0       262.0            1.9             65500.0   left_only  \n..         ...         ...            ...                 ...         ...  \n15      1759.0       806.0            2.8             98500.0  right_only  \n16      2123.0       789.0            5.1            446800.0  right_only  \n17      1070.0       374.0            2.5            187500.0  right_only  \n18       579.0       213.0            3.0            172600.0  right_only  \n19       711.0       304.0            3.3            318100.0  right_only  \n\nRun example on local python\nIn have Python 3.6.6 and I install tf with pip install  tensorflow.\nNow I run the same code in a python script as follows (on Windows 10):\npython Reorder.py\n\nThe reordered data is exactly the same as the imported data (all are marked with both):\nlongitude  latitude  housing_median_age  total_rooms  total_bedrooms  population  households  median_income  median_house_value _merge\n0     -114.3      34.2                15.0       5612.0          1283.0      1015.0       472.0            1.5             66900.0   both\n1     -114.5      34.4                19.0       7650.0          1901.0      1129.0       463.0            1.8             80100.0   both\n2     -114.6      33.7                17.0        720.0           174.0       333.0       117.0            1.7             85700.0   both\n3     -114.6      33.6                14.0       1501.0           337.0       515.0       226.0            3.2             73400.0   both\n4     -114.6      33.6                20.0       1454.0           326.0       624.0       262.0            1.9             65500.0   both\n5     -114.6      33.6                29.0       1387.0           236.0       671.0       239.0            3.3             74000.0   both\n6     -114.6      33.6                25.0       2907.0           680.0      1841.0       633.0            2.7             82400.0   both\n7     -114.6      34.8                41.0        812.0           168.0       375.0       158.0            1.7             48500.0   both\n8     -114.6      33.6                34.0       4789.0          1175.0      3134.0      1056.0            2.2             58400.0   both\n9     -114.6      34.8                46.0       1497.0           309.0       787.0       271.0            2.2             48100.0   both\n\nRun example in tf docker container\nNow I run the same python script in the tf docker container (v1.11.0) as follows (on Windows 10):\ndocker run --rm -it -v C:\\Users\\boldt\\docker\\tf\\scripts\\:/scripts tensorflow/tensorflow:1.11.0-py3 python /scripts/Reorder.py\nThe result is the same. The reordered data is exactly the same as the imported data (all are marked with both):\nConclusion\nBecause of this, I am unable to randomize the data set and split it in a training and a test set using the tf docker container. Currently, my more complex example always results the same training and test sets.", "body": "# TLDR\r\n\r\nThe pandas, which is distributed with the tf docker image is broken!\r\n\r\n# Description\r\n\r\nI'm new to tf and I'm walking thru the [Machine Learning Crash Course](https://developers.google.com/machine-learning/crash-course/ml-intro) at the moment. [First Steps with TF](https://developers.google.com/machine-learning/crash-course/first-steps-with-tensorflow/programming-exercises) point me to the [Quick Introduction to pandas](https://colab.research.google.com/notebooks/mlcc/intro_to_pandas.ipynb?utm_source=mlcc&utm_campaign=colab-external&utm_medium=referral&utm_content=pandas-colab&hl=de) notebook. \r\n\r\n## Run example on colab\r\n\r\n Based on this. I created the following MWE on colab (actually, it is only pandas code):\r\n\r\nhttps://colab.research.google.com/drive/19uDE_H4AtpLaEL6INrRrDMXkdANsNr69\r\n\r\nIt basically just does the following: \r\n\r\n1) Import the california housing data set\r\n2) reorder the data set\r\n3) prints the merged dataset\r\n\r\nIf you run my notebook, you can see that step 3 prints up to 20 different values for the data set (makred with `left only` and `right only`):\r\n\r\n```\r\n`   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\r\n0      -114.3      34.2                15.0       5612.0          1283.0   \r\n1      -114.5      34.4                19.0       7650.0          1901.0   \r\n2      -114.6      33.7                17.0        720.0           174.0   \r\n3      -114.6      33.6                14.0       1501.0           337.0   \r\n4      -114.6      33.6                20.0       1454.0           326.0   \r\n..        ...       ...                 ...          ...             ...   \r\n15     -117.3      33.2                13.0       3619.0           791.0   \r\n16     -118.3      33.8                25.0       4177.0           832.0   \r\n17     -117.7      34.0                25.0       1859.0           463.0   \r\n18     -118.1      34.0                50.0       1146.0           238.0   \r\n19     -118.5      34.0                41.0       1240.0           320.0   \r\n\r\n    population  households  median_income  median_house_value      _merge  \r\n0       1015.0       472.0            1.5             66900.0   left_only  \r\n1       1129.0       463.0            1.8             80100.0   left_only  \r\n2        333.0       117.0            1.7             85700.0   left_only  \r\n3        515.0       226.0            3.2             73400.0   left_only  \r\n4        624.0       262.0            1.9             65500.0   left_only  \r\n..         ...         ...            ...                 ...         ...  \r\n15      1759.0       806.0            2.8             98500.0  right_only  \r\n16      2123.0       789.0            5.1            446800.0  right_only  \r\n17      1070.0       374.0            2.5            187500.0  right_only  \r\n18       579.0       213.0            3.0            172600.0  right_only  \r\n19       711.0       304.0            3.3            318100.0  right_only  \r\n```\r\n\r\n## Run example on local python\r\n\r\nIn have Python 3.6.6 and I install tf with `pip install  tensorflow`. \r\n\r\nNow I run the same code in a python script as follows (on Windows 10):\r\n\r\n```\r\npython Reorder.py\r\n```\r\n\r\nThe reordered data is exactly the same as the imported data (all are marked with `both`):\r\n\r\n```\r\nlongitude  latitude  housing_median_age  total_rooms  total_bedrooms  population  households  median_income  median_house_value _merge\r\n0     -114.3      34.2                15.0       5612.0          1283.0      1015.0       472.0            1.5             66900.0   both\r\n1     -114.5      34.4                19.0       7650.0          1901.0      1129.0       463.0            1.8             80100.0   both\r\n2     -114.6      33.7                17.0        720.0           174.0       333.0       117.0            1.7             85700.0   both\r\n3     -114.6      33.6                14.0       1501.0           337.0       515.0       226.0            3.2             73400.0   both\r\n4     -114.6      33.6                20.0       1454.0           326.0       624.0       262.0            1.9             65500.0   both\r\n5     -114.6      33.6                29.0       1387.0           236.0       671.0       239.0            3.3             74000.0   both\r\n6     -114.6      33.6                25.0       2907.0           680.0      1841.0       633.0            2.7             82400.0   both\r\n7     -114.6      34.8                41.0        812.0           168.0       375.0       158.0            1.7             48500.0   both\r\n8     -114.6      33.6                34.0       4789.0          1175.0      3134.0      1056.0            2.2             58400.0   both\r\n9     -114.6      34.8                46.0       1497.0           309.0       787.0       271.0            2.2             48100.0   both\r\n```\r\n\r\n## Run example in tf docker container\r\n\r\nNow I run the same python script in the [tf docker container](https://hub.docker.com/r/tensorflow/tensorflow/) (v1.11.0) as follows (on Windows 10):\r\n\r\n```bash\r\ndocker run --rm -it -v C:\\Users\\boldt\\docker\\tf\\scripts\\:/scripts tensorflow/tensorflow:1.11.0-py3 python /scripts/Reorder.py\r\n```\r\n\r\nThe result is the same. The reordered data is exactly the same as the imported data (all are marked with `both`):\r\n\r\n# Conclusion\r\n\r\nBecause of this, I am unable to randomize the data set and split it in a training and a test set using the tf docker container. Currently, my more complex example always results the same training and test sets."}