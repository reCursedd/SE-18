{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/376358711", "html_url": "https://github.com/tensorflow/tensorflow/issues/18007#issuecomment-376358711", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18007", "id": 376358711, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjM1ODcxMQ==", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-27T00:48:42Z", "updated_at": "2018-03-27T00:48:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The documentation of <code>tf.cond</code> has said:</p>\n<blockquote>\n<p>Note that the conditional execution applies only to the operations defined in true_fn and false_fn. Consider the following simple program:<br>\nz = tf.multiply(a, b)<br>\nresult = tf.cond(x &lt; y, lambda: tf.add(x, z), lambda: tf.square(y))<br>\nIf x &lt; y, the tf.add operation will be executed and tf.square operation will not be executed. Since z is needed for at least one branch of the cond, the tf.multiply operation is always executed, unconditionally. Although this behavior is consistent with the dataflow model of TensorFlow, it has occasionally surprised some users who expected a lazier semantics.</p>\n</blockquote>\n<p>I'm not sure, but the story is probably the same for gradients: as long as something is needed by at least one branch, it will be executed.</p>", "body_text": "The documentation of tf.cond has said:\n\nNote that the conditional execution applies only to the operations defined in true_fn and false_fn. Consider the following simple program:\nz = tf.multiply(a, b)\nresult = tf.cond(x < y, lambda: tf.add(x, z), lambda: tf.square(y))\nIf x < y, the tf.add operation will be executed and tf.square operation will not be executed. Since z is needed for at least one branch of the cond, the tf.multiply operation is always executed, unconditionally. Although this behavior is consistent with the dataflow model of TensorFlow, it has occasionally surprised some users who expected a lazier semantics.\n\nI'm not sure, but the story is probably the same for gradients: as long as something is needed by at least one branch, it will be executed.", "body": "The documentation of `tf.cond` has said:\r\n> Note that the conditional execution applies only to the operations defined in true_fn and false_fn. Consider the following simple program:\r\nz = tf.multiply(a, b)\r\nresult = tf.cond(x < y, lambda: tf.add(x, z), lambda: tf.square(y))\r\nIf x < y, the tf.add operation will be executed and tf.square operation will not be executed. Since z is needed for at least one branch of the cond, the tf.multiply operation is always executed, unconditionally. Although this behavior is consistent with the dataflow model of TensorFlow, it has occasionally surprised some users who expected a lazier semantics.\r\n\r\nI'm not sure, but the story is probably the same for gradients: as long as something is needed by at least one branch, it will be executed."}