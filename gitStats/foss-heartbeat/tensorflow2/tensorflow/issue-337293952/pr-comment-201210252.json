{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/201210252", "pull_request_review_id": 135665834, "id": 201210252, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIxMDI1Mg==", "diff_hunk": "@@ -3117,7 +3117,7 @@ def maxout(inputs, num_units, axis=-1, scope=None):\n       raise ValueError('number of features({}) is not '\n                        'a multiple of num_units({})'.format(\n                            num_channels, num_units))\n-    shape[axis] = -1\n+    shape[axis] = num_units", "path": "tensorflow/contrib/layers/python/layers/layers.py", "position": 5, "original_position": 5, "commit_id": "eb6c0cbe460e6deafbe4252abed7e57bf9c4d133", "original_commit_id": "eb6c0cbe460e6deafbe4252abed7e57bf9c4d133", "user": {"login": "lygztq", "id": 23189027, "node_id": "MDQ6VXNlcjIzMTg5MDI3", "avatar_url": "https://avatars0.githubusercontent.com/u/23189027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lygztq", "html_url": "https://github.com/lygztq", "followers_url": "https://api.github.com/users/lygztq/followers", "following_url": "https://api.github.com/users/lygztq/following{/other_user}", "gists_url": "https://api.github.com/users/lygztq/gists{/gist_id}", "starred_url": "https://api.github.com/users/lygztq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lygztq/subscriptions", "organizations_url": "https://api.github.com/users/lygztq/orgs", "repos_url": "https://api.github.com/users/lygztq/repos", "events_url": "https://api.github.com/users/lygztq/events{/privacy}", "received_events_url": "https://api.github.com/users/lygztq/received_events", "type": "User", "site_admin": false}, "body": "```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n# Suppose this function belongs to some test class\r\ndef testMaxoutShape(self):\r\n    data = np.random.randn(64, 32, 32, 3).astype(np.float32)\r\n    input_tensor = tf.placeholder(tf.float32, [None, 32, 32, 3], name=\"input_data\")\r\n    conv_out = tf.layers.conv2d(input_tensor, 10, (5,5), padding='same', name=\"conv\")\r\n    maxout_out = tf.contrib.layers.maxout(conv_out, 5, axis=3)\r\n\r\n    with tf.Session() as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n        value = sess.run(maxout_out, feed_dict={input_tensor: data})\r\n    self.assertEqual(value.shape[3], 5, \"shape in maxout function failed\")\r\n```", "created_at": "2018-07-10T03:46:15Z", "updated_at": "2018-07-10T03:47:12Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20455#discussion_r201210252", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20455", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/201210252"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20455#discussion_r201210252"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20455"}}, "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Suppose this function belongs to some test class</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">testMaxoutShape</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    data <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">64</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>).astype(np.float32)\n    input_tensor <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input_data<span class=\"pl-pds\">\"</span></span>)\n    conv_out <span class=\"pl-k\">=</span> tf.layers.conv2d(input_tensor, <span class=\"pl-c1\">10</span>, (<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>), <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>same<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>conv<span class=\"pl-pds\">\"</span></span>)\n    maxout_out <span class=\"pl-k\">=</span> tf.contrib.layers.maxout(conv_out, <span class=\"pl-c1\">5</span>, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n        sess.run(tf.global_variables_initializer())\n        value <span class=\"pl-k\">=</span> sess.run(maxout_out, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{input_tensor: data})\n    <span class=\"pl-c1\">self</span>.assertEqual(value.shape[<span class=\"pl-c1\">3</span>], <span class=\"pl-c1\">5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape in maxout function failed<span class=\"pl-pds\">\"</span></span>)</pre></div>", "body_text": "import numpy as np\nimport tensorflow as tf\n\n# Suppose this function belongs to some test class\ndef testMaxoutShape(self):\n    data = np.random.randn(64, 32, 32, 3).astype(np.float32)\n    input_tensor = tf.placeholder(tf.float32, [None, 32, 32, 3], name=\"input_data\")\n    conv_out = tf.layers.conv2d(input_tensor, 10, (5,5), padding='same', name=\"conv\")\n    maxout_out = tf.contrib.layers.maxout(conv_out, 5, axis=3)\n\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        value = sess.run(maxout_out, feed_dict={input_tensor: data})\n    self.assertEqual(value.shape[3], 5, \"shape in maxout function failed\")", "in_reply_to_id": 201075409}