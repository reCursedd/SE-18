{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/227900152", "html_url": "https://github.com/tensorflow/tensorflow/issues/2990#issuecomment-227900152", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2990", "id": 227900152, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzkwMDE1Mg==", "user": {"login": "ibab", "id": 890531, "node_id": "MDQ6VXNlcjg5MDUzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/890531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibab", "html_url": "https://github.com/ibab", "followers_url": "https://api.github.com/users/ibab/followers", "following_url": "https://api.github.com/users/ibab/following{/other_user}", "gists_url": "https://api.github.com/users/ibab/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibab/subscriptions", "organizations_url": "https://api.github.com/users/ibab/orgs", "repos_url": "https://api.github.com/users/ibab/repos", "events_url": "https://api.github.com/users/ibab/events{/privacy}", "received_events_url": "https://api.github.com/users/ibab/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-22T22:46:01Z", "updated_at": "2016-06-22T22:46:01Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>Is there any way to have a variable initialized with a callable call it each time the variable's initializer is run?</p>\n</blockquote>\n<p>You can define the initializer as a <code>PyFunc</code> op.<br>\nNote that you need to manually specify the output shape of your op with <code>tensor.set_shape</code> before you can use it to initialize a variable.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> scipy\n\nsession <span class=\"pl-k\">=</span> tf.InteractiveSession()\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">get_random</span>():\n    <span class=\"pl-k\">return</span> scipy.random.random(<span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>]).astype(np.float32)\n\ninit <span class=\"pl-k\">=</span> tf.py_func(get_random, [], [tf.float32])[<span class=\"pl-c1\">0</span>]\ninit.set_shape((<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>))\nvar <span class=\"pl-k\">=</span> tf.Variable(init)\nsession.run(var.initializer)\n<span class=\"pl-c1\">print</span>(var.eval())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>[[ 0.97525001  0.68293589]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> [ 0.59959763  0.14780547]]</span>\nsession.run(var.initializer)\n<span class=\"pl-c1\">print</span>(var.eval())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>[[ 0.7729072   0.84212685]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> [ 0.74777764  0.97365493]]</span></pre></div>", "body_text": "Is there any way to have a variable initialized with a callable call it each time the variable's initializer is run?\n\nYou can define the initializer as a PyFunc op.\nNote that you need to manually specify the output shape of your op with tensor.set_shape before you can use it to initialize a variable.\nimport tensorflow as tf\nimport numpy as np\nimport scipy\n\nsession = tf.InteractiveSession()\n\ndef get_random():\n    return scipy.random.random(size=[2,2]).astype(np.float32)\n\ninit = tf.py_func(get_random, [], [tf.float32])[0]\ninit.set_shape((2, 2))\nvar = tf.Variable(init)\nsession.run(var.initializer)\nprint(var.eval())\n#[[ 0.97525001  0.68293589]\n# [ 0.59959763  0.14780547]]\nsession.run(var.initializer)\nprint(var.eval())\n#[[ 0.7729072   0.84212685]\n# [ 0.74777764  0.97365493]]", "body": "> Is there any way to have a variable initialized with a callable call it each time the variable's initializer is run?\n\nYou can define the initializer as a `PyFunc` op.\nNote that you need to manually specify the output shape of your op with `tensor.set_shape` before you can use it to initialize a variable.\n\n``` python\nimport tensorflow as tf\nimport numpy as np\nimport scipy\n\nsession = tf.InteractiveSession()\n\ndef get_random():\n    return scipy.random.random(size=[2,2]).astype(np.float32)\n\ninit = tf.py_func(get_random, [], [tf.float32])[0]\ninit.set_shape((2, 2))\nvar = tf.Variable(init)\nsession.run(var.initializer)\nprint(var.eval())\n#[[ 0.97525001  0.68293589]\n# [ 0.59959763  0.14780547]]\nsession.run(var.initializer)\nprint(var.eval())\n#[[ 0.7729072   0.84212685]\n# [ 0.74777764  0.97365493]]\n```\n"}