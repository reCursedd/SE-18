{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2990", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2990/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2990/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2990/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2990", "id": 161600094, "node_id": "MDU6SXNzdWUxNjE2MDAwOTQ=", "number": 2990, "title": "inconsistent variable initialization behavior for callables / ops", "user": {"login": "dannygoldstein", "id": 2769632, "node_id": "MDQ6VXNlcjI3Njk2MzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2769632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dannygoldstein", "html_url": "https://github.com/dannygoldstein", "followers_url": "https://api.github.com/users/dannygoldstein/followers", "following_url": "https://api.github.com/users/dannygoldstein/following{/other_user}", "gists_url": "https://api.github.com/users/dannygoldstein/gists{/gist_id}", "starred_url": "https://api.github.com/users/dannygoldstein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dannygoldstein/subscriptions", "organizations_url": "https://api.github.com/users/dannygoldstein/orgs", "repos_url": "https://api.github.com/users/dannygoldstein/repos", "events_url": "https://api.github.com/users/dannygoldstein/events{/privacy}", "received_events_url": "https://api.github.com/users/dannygoldstein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-22T05:58:25Z", "updated_at": "2016-06-22T22:50:17Z", "closed_at": "2016-06-22T22:50:17Z", "author_association": "NONE", "body_html": "<p>When a variable is initialized with a callable, running the initializer of the variable has no effect after it is run once:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> scipy\n\nsession <span class=\"pl-k\">=</span> tf.InteractiveSession()\nretrand <span class=\"pl-k\">=</span> <span class=\"pl-k\">lambda</span>: scipy.random.random(<span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>])\nvar <span class=\"pl-k\">=</span> tf.Variable(retrand, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nsession.run(var.initializer)\nvar.eval()\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> prints array([[ 0.73060566,  0.26469722],</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>               [ 0.63376802,  0.64898247]], dtype=float32)</span>\nsession.run(var.initializer)\nvar.eval()\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> prints array([[ 0.73060566,  0.26469722],</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>              [ 0.63376802,  0.64898247]], dtype=float32)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> (same as first call)</span></pre></div>\n<p>If a variable is initialized with a tensorflow init op, then rerunning the initializer changes the variable state:</p>\n<div class=\"highlight highlight-source-python\"><pre>var <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>]))\nsession.run(var.initializer)\nvar.eval()\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>prints </span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>array([[ 0.61732173,  0.14423341],</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>       [ 0.3965871 , -0.98214936]], dtype=float32)</span>\nsession.run(var.initializer)\nvar.eval()\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> prints </span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> array([[ 0.48240849,  0.26547143],</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>      [ 1.18776596, -0.12901327]], dtype=float32)</span></pre></div>\n<p>Why do variables initialized with a callable only call the callable once, even if they are initialized repeatedly, when variables initialized with an init op rerun the op on each run of the initializer? Is there any way to have a variable initialized with a callable call it each time the variable's initializer is run?</p>\n<h3>Environment info</h3>\n<p>Operating System:  Mac OSX<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>): None<br>\nIf installed from binary pip package, provide:</p>\n<ol>\n<li>Which pip package you installed.<br>\n<a href=\"https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py2-none-any.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py2-none-any.whl</a></li>\n<li>The output from <code>python -c \"import tensorflow; print(tensorflow.__version__)\"</code>.<br>\n0.9.0rc0</li>\n</ol>", "body_text": "When a variable is initialized with a callable, running the initializer of the variable has no effect after it is run once:\nimport tensorflow as tf\nimport scipy\n\nsession = tf.InteractiveSession()\nretrand = lambda: scipy.random.random(size=[2,2])\nvar = tf.Variable(retrand, dtype=tf.float32)\nsession.run(var.initializer)\nvar.eval()\n# prints array([[ 0.73060566,  0.26469722],\n#               [ 0.63376802,  0.64898247]], dtype=float32)\nsession.run(var.initializer)\nvar.eval()\n# prints array([[ 0.73060566,  0.26469722],\n#              [ 0.63376802,  0.64898247]], dtype=float32)\n# (same as first call)\nIf a variable is initialized with a tensorflow init op, then rerunning the initializer changes the variable state:\nvar = tf.Variable(tf.random_normal([2,2]))\nsession.run(var.initializer)\nvar.eval()\n#prints \n#array([[ 0.61732173,  0.14423341],\n#       [ 0.3965871 , -0.98214936]], dtype=float32)\nsession.run(var.initializer)\nvar.eval()\n# prints \n# array([[ 0.48240849,  0.26547143],\n#      [ 1.18776596, -0.12901327]], dtype=float32)\nWhy do variables initialized with a callable only call the callable once, even if they are initialized repeatedly, when variables initialized with an init op rerun the op on each run of the initializer? Is there any way to have a variable initialized with a callable call it each time the variable's initializer is run?\nEnvironment info\nOperating System:  Mac OSX\n(please attach the output of ls -l /path/to/cuda/lib/libcud*): None\nIf installed from binary pip package, provide:\n\nWhich pip package you installed.\nhttps://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py2-none-any.whl\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\".\n0.9.0rc0", "body": "When a variable is initialized with a callable, running the initializer of the variable has no effect after it is run once:\n\n``` python\nimport tensorflow as tf\nimport scipy\n\nsession = tf.InteractiveSession()\nretrand = lambda: scipy.random.random(size=[2,2])\nvar = tf.Variable(retrand, dtype=tf.float32)\nsession.run(var.initializer)\nvar.eval()\n# prints array([[ 0.73060566,  0.26469722],\n#               [ 0.63376802,  0.64898247]], dtype=float32)\nsession.run(var.initializer)\nvar.eval()\n# prints array([[ 0.73060566,  0.26469722],\n#              [ 0.63376802,  0.64898247]], dtype=float32)\n# (same as first call)\n```\n\nIf a variable is initialized with a tensorflow init op, then rerunning the initializer changes the variable state:\n\n``` python\nvar = tf.Variable(tf.random_normal([2,2]))\nsession.run(var.initializer)\nvar.eval()\n#prints \n#array([[ 0.61732173,  0.14423341],\n#       [ 0.3965871 , -0.98214936]], dtype=float32)\nsession.run(var.initializer)\nvar.eval()\n# prints \n# array([[ 0.48240849,  0.26547143],\n#      [ 1.18776596, -0.12901327]], dtype=float32)\n```\n\nWhy do variables initialized with a callable only call the callable once, even if they are initialized repeatedly, when variables initialized with an init op rerun the op on each run of the initializer? Is there any way to have a variable initialized with a callable call it each time the variable's initializer is run?\n### Environment info\n\nOperating System:  Mac OSX\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`): None\nIf installed from binary pip package, provide: \n1. Which pip package you installed.\nhttps://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py2-none-any.whl\n2. The output from `python -c \"import tensorflow; print(tensorflow.__version__)\"`.\n0.9.0rc0\n"}