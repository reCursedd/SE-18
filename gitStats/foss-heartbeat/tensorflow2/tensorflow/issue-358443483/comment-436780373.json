{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/436780373", "html_url": "https://github.com/tensorflow/tensorflow/issues/22178#issuecomment-436780373", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22178", "id": 436780373, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjc4MDM3Mw==", "user": {"login": "ringw", "id": 1391644, "node_id": "MDQ6VXNlcjEzOTE2NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1391644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ringw", "html_url": "https://github.com/ringw", "followers_url": "https://api.github.com/users/ringw/followers", "following_url": "https://api.github.com/users/ringw/following{/other_user}", "gists_url": "https://api.github.com/users/ringw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ringw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ringw/subscriptions", "organizations_url": "https://api.github.com/users/ringw/orgs", "repos_url": "https://api.github.com/users/ringw/repos", "events_url": "https://api.github.com/users/ringw/events{/privacy}", "received_events_url": "https://api.github.com/users/ringw/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-07T21:17:05Z", "updated_at": "2018-11-07T21:17:05Z", "author_association": "MEMBER", "body_html": "<p>We don't want to invert the transformation in the normal code path, since it adds extra complexity (the matrix could not be invertible). Internally, we need to loop over each output pixel and determine the transformed input pixel, so we do need the reverse transformation.</p>\n<p>Normally, I think rotate() is used more often, which is negated compared to the usual transformation matrix to avoid needing to use the linalg ops. We also expose the rotation matrix through another function for the user to compose other transformations, and that matrix should be consistent with the one used internally (it should be a reverse transform).</p>\n<p>We could add an option to transform(), maybe \"forward\" that defaults to False, but will invert the matrix if True.</p>", "body_text": "We don't want to invert the transformation in the normal code path, since it adds extra complexity (the matrix could not be invertible). Internally, we need to loop over each output pixel and determine the transformed input pixel, so we do need the reverse transformation.\nNormally, I think rotate() is used more often, which is negated compared to the usual transformation matrix to avoid needing to use the linalg ops. We also expose the rotation matrix through another function for the user to compose other transformations, and that matrix should be consistent with the one used internally (it should be a reverse transform).\nWe could add an option to transform(), maybe \"forward\" that defaults to False, but will invert the matrix if True.", "body": "We don't want to invert the transformation in the normal code path, since it adds extra complexity (the matrix could not be invertible). Internally, we need to loop over each output pixel and determine the transformed input pixel, so we do need the reverse transformation.\r\n\r\nNormally, I think rotate() is used more often, which is negated compared to the usual transformation matrix to avoid needing to use the linalg ops. We also expose the rotation matrix through another function for the user to compose other transformations, and that matrix should be consistent with the one used internally (it should be a reverse transform).\r\n\r\nWe could add an option to transform(), maybe \"forward\" that defaults to False, but will invert the matrix if True."}