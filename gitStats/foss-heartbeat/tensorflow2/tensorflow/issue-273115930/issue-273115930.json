{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14476", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14476/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14476/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14476/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14476", "id": 273115930, "node_id": "MDU6SXNzdWUyNzMxMTU5MzA=", "number": 14476, "title": "IOS camera example load map_data  from in_pix is incorrect!", "user": {"login": "Kangbababa", "id": 25144924, "node_id": "MDQ6VXNlcjI1MTQ0OTI0", "avatar_url": "https://avatars1.githubusercontent.com/u/25144924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kangbababa", "html_url": "https://github.com/Kangbababa", "followers_url": "https://api.github.com/users/Kangbababa/followers", "following_url": "https://api.github.com/users/Kangbababa/following{/other_user}", "gists_url": "https://api.github.com/users/Kangbababa/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kangbababa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kangbababa/subscriptions", "organizations_url": "https://api.github.com/users/Kangbababa/orgs", "repos_url": "https://api.github.com/users/Kangbababa/repos", "events_url": "https://api.github.com/users/Kangbababa/events{/privacy}", "received_events_url": "https://api.github.com/users/Kangbababa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-11T03:42:14Z", "updated_at": "2018-01-05T04:01:13Z", "closed_at": "2018-01-05T04:01:13Z", "author_association": "NONE", "body_html": "<p>//    for (int y = 0; y &lt; wanted_input_height; ++y) {<br>\n//        float *out_row = out + (y * wanted_input_width * wanted_input_channels); //0+height<br>\n//        for (int x = 0; x &lt; wanted_input_width; ++x) {<br>\n//            const int in_x = (y * image_width) / wanted_input_width;<br>\n//            const int in_y = (x * image_height) / wanted_input_height;<br>\n//            tensorflow::uint8 *in_pixel =<br>\n//            in + (in_y * image_width * image_channels) + (in_x * image_channels);<br>\n//            float *out_pixel = out_row + (x * wanted_input_channels);<br>\n//            for (int c = 0; c &lt; wanted_input_channels; ++c) {<br>\n//                out_pixel[c] = (in_pixel[c] - input_mean) / input_std;<br>\n//            }<br>\n//        }<br>\n//    }</p>\n<p>fixed code \uff1arotoate 90 and resized</p>\n<p>for (int y = 0; y &lt; wanted_input_width; ++y) {<br>\nfloat *out_row = out + (y * wanted_input_width * wanted_input_channels);<br>\nfor (int x = 0; x &lt; wanted_input_height; ++x) {<br>\nconst int in_x = (y * image_width) / wanted_input_width;<br>\nconst int in_y =image_height - (x * image_height) / wanted_input_height;<br>\ntensorflow::uint8 *in_pixel =<br>\nin + (in_y * image_width * image_channels) + (in_x * image_channels);<br>\nfloat *out_pixel = out_row + (x * wanted_input_channels);<br>\nfor (int c = 0; c &lt; wanted_input_channels; ++c) {<br>\nout_pixel[c] = (in_pixel[c] - input_mean) / input_std;<br>\n}<br>\n}<br>\n}</p>", "body_text": "//    for (int y = 0; y < wanted_input_height; ++y) {\n//        float *out_row = out + (y * wanted_input_width * wanted_input_channels); //0+height\n//        for (int x = 0; x < wanted_input_width; ++x) {\n//            const int in_x = (y * image_width) / wanted_input_width;\n//            const int in_y = (x * image_height) / wanted_input_height;\n//            tensorflow::uint8 *in_pixel =\n//            in + (in_y * image_width * image_channels) + (in_x * image_channels);\n//            float *out_pixel = out_row + (x * wanted_input_channels);\n//            for (int c = 0; c < wanted_input_channels; ++c) {\n//                out_pixel[c] = (in_pixel[c] - input_mean) / input_std;\n//            }\n//        }\n//    }\nfixed code \uff1arotoate 90 and resized\nfor (int y = 0; y < wanted_input_width; ++y) {\nfloat *out_row = out + (y * wanted_input_width * wanted_input_channels);\nfor (int x = 0; x < wanted_input_height; ++x) {\nconst int in_x = (y * image_width) / wanted_input_width;\nconst int in_y =image_height - (x * image_height) / wanted_input_height;\ntensorflow::uint8 *in_pixel =\nin + (in_y * image_width * image_channels) + (in_x * image_channels);\nfloat *out_pixel = out_row + (x * wanted_input_channels);\nfor (int c = 0; c < wanted_input_channels; ++c) {\nout_pixel[c] = (in_pixel[c] - input_mean) / input_std;\n}\n}\n}", "body": "    \r\n//    for (int y = 0; y < wanted_input_height; ++y) {\r\n//        float *out_row = out + (y * wanted_input_width * wanted_input_channels); //0+height\r\n//        for (int x = 0; x < wanted_input_width; ++x) {\r\n//            const int in_x = (y * image_width) / wanted_input_width;\r\n//            const int in_y = (x * image_height) / wanted_input_height;\r\n//            tensorflow::uint8 *in_pixel =\r\n//            in + (in_y * image_width * image_channels) + (in_x * image_channels);\r\n//            float *out_pixel = out_row + (x * wanted_input_channels);\r\n//            for (int c = 0; c < wanted_input_channels; ++c) {\r\n//                out_pixel[c] = (in_pixel[c] - input_mean) / input_std;\r\n//            }\r\n//        }\r\n//    }\r\n\r\nfixed code \uff1arotoate 90 and resized\r\n\r\n   for (int y = 0; y < wanted_input_width; ++y) {\r\n        float *out_row = out + (y * wanted_input_width * wanted_input_channels); \r\n        for (int x = 0; x < wanted_input_height; ++x) {\r\n            const int in_x = (y * image_width) / wanted_input_width;\r\n            const int in_y =image_height - (x * image_height) / wanted_input_height;\r\n            tensorflow::uint8 *in_pixel =\r\n            in + (in_y * image_width * image_channels) + (in_x * image_channels);\r\n            float *out_pixel = out_row + (x * wanted_input_channels);\r\n            for (int c = 0; c < wanted_input_channels; ++c) {\r\n                out_pixel[c] = (in_pixel[c] - input_mean) / input_std;\r\n            }\r\n        }\r\n    }"}