{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/75199968", "pull_request_review_id": null, "id": 75199968, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1MTk5OTY4", "diff_hunk": "@@ -1491,6 +1491,88 @@ def testNoneUpdatesCollectionIsTrainingVariable(self):\n       self.assertTrue(np.allclose(output_true, output_false))\n \n \n+class LayerNormTest(tf.test.TestCase):\n+\n+  def testUnknownShape(self):\n+    with tf.Graph().as_default() as g, self.test_session(g):\n+      inputs = tf.placeholder(dtype=tf.float32)\n+      with self.assertRaisesRegexp(ValueError, 'undefined rank'):\n+        tf.contrib.layers.layer_norm(inputs)\n+\n+  def testUnknownLastDim(self):\n+    with tf.Graph().as_default() as g, self.test_session(g):\n+      inputs = tf.placeholder(dtype=tf.float32)\n+      inputs.set_shape(tf.TensorShape((5, 3, 3, None)))\n+      with self.assertRaisesRegexp(ValueError, 'undefined last dimension'):\n+        tf.contrib.layers.layer_norm(inputs)\n+\n+  def testCreateOp(self):\n+    height, width = 3, 3\n+    with self.test_session():\n+      images = np.random.uniform(size=(5, height, width, 3))\n+      output = tf.contrib.layers.layer_norm(images)\n+      self.assertTrue(output.op.name.startswith('LayerNorm/batchnorm'))\n+      self.assertListEqual(output.get_shape().as_list(), [5, height, width, 3])\n+\n+  def testCreateVariables(self):\n+    height, width = 3, 3\n+    with self.test_session():\n+      images = tf.random_uniform((5, height, width, 3), seed=1)\n+      tf.contrib.layers.layer_norm(images, scale=True)\n+      beta = tf.contrib.framework.get_variables_by_name('beta')[0]\n+      gamma = tf.contrib.framework.get_variables_by_name('gamma')[0]\n+      self.assertEquals(beta.op.name, 'LayerNorm/beta')\n+      self.assertEquals(gamma.op.name, 'LayerNorm/gamma')\n+\n+  def testReuseVariables(self):\n+    height, width = 3, 3\n+    with self.test_session():\n+      images = tf.random_uniform((5, height, width, 3), seed=1)\n+      tf.contrib.layers.layer_norm(images, scale=True, scope='ln')\n+      tf.contrib.layers.layer_norm(images, scale=True, scope='ln', reuse=True)\n+      beta = tf.contrib.framework.get_variables_by_name('beta')\n+      gamma = tf.contrib.framework.get_variables_by_name('gamma')\n+      self.assertEquals(len(beta), 1)\n+      self.assertEquals(len(gamma), 1)\n+\n+  def testReuseVars(self):\n+    height, width = 3, 3\n+    with self.test_session() as sess:\n+      image_shape = (10, height, width, 3)\n+      image_values = np.random.rand(*image_shape)\n+      images = tf.constant(image_values, shape=image_shape, dtype=tf.float32)\n+      output_train = tf.contrib.layers.layer_norm(images,\n+                                                  scope='LN')\n+      output_eval = tf.contrib.layers.layer_norm(images,\n+                                                 scope='LN',\n+                                                 reuse=True)\n+      # Initialize all variables\n+      sess.run(tf.initialize_all_variables())\n+      # output_train and output_eval should be the same.\n+      self.assertAllClose(sess.run([output_train]), sess.run([output_eval]))\n+\n+  def testOutput(self):", "path": "tensorflow/contrib/layers/python/layers/layers_test.py", "position": null, "original_position": 64, "commit_id": "1424ad7cacea96c4a4213f2a185ba061ac202079", "original_commit_id": "ce0435554ff78d0fb989b963506f930a0f8d513f", "user": {"login": "sguada", "id": 1766524, "node_id": "MDQ6VXNlcjE3NjY1MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1766524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sguada", "html_url": "https://github.com/sguada", "followers_url": "https://api.github.com/users/sguada/followers", "following_url": "https://api.github.com/users/sguada/following{/other_user}", "gists_url": "https://api.github.com/users/sguada/gists{/gist_id}", "starred_url": "https://api.github.com/users/sguada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sguada/subscriptions", "organizations_url": "https://api.github.com/users/sguada/orgs", "repos_url": "https://api.github.com/users/sguada/repos", "events_url": "https://api.github.com/users/sguada/events{/privacy}", "received_events_url": "https://api.github.com/users/sguada/received_events", "type": "User", "site_admin": false}, "body": "Can you add another test of outputs when the input is a 4-D Tensor.\n", "created_at": "2016-08-17T20:26:16Z", "updated_at": "2016-08-24T17:57:53Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/3671#discussion_r75199968", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/3671", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/75199968"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/3671#discussion_r75199968"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/3671"}}, "body_html": "<p>Can you add another test of outputs when the input is a 4-D Tensor.</p>", "body_text": "Can you add another test of outputs when the input is a 4-D Tensor."}