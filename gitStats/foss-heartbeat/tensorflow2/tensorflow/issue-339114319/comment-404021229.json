{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/404021229", "html_url": "https://github.com/tensorflow/tensorflow/pull/20609#issuecomment-404021229", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20609", "id": 404021229, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDAyMTIyOQ==", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-11T02:05:05Z", "updated_at": "2018-07-11T03:29:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi Asim,</p>\n<p>Just to make sure that I understood correctly, you are suggesting that we should enforce prefix uniqueness in a graph? But aren't the suffixes '_#' only applied on the op names?</p>\n<p>I not too aware of the internal details for handling names clashing, I thought that prefixes worked a bit like folders. For example, calling twice <code>TF_AddGradients</code> could create a node named <code>gradients/OnesLike</code> in the first call and <code>gradients/OnesLike_1</code> in the second. Or are you saying that it will end up to be more something like <code>gradients/OnesLike</code> and <code>gradients_1/OnesLike</code>?</p>\n<p>I agree the second case would be confusing, or even problematic. Specially if you call <code>ops.gradients(...)</code> twice, you expect all gradients to be created under the same scope, like any other operator:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-smi\">Ops</span> sub <span class=\"pl-k\">=</span> ops<span class=\"pl-k\">.</span>withSubScope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sub<span class=\"pl-pds\">\"</span></span>);\nsub<span class=\"pl-k\">.</span>matMul(<span class=\"pl-c1\">...</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sub/MatMul</span>\nsub<span class=\"pl-k\">.</span>matMul(<span class=\"pl-c1\">...</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sub/MatMul_1</span>\nsub<span class=\"pl-k\">.</span>gradients(<span class=\"pl-c1\">...</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sub/OnesLike, etc. ??</span>\nsub<span class=\"pl-k\">.</span>gradients(<span class=\"pl-c1\">...</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sub/OnesLike_1 or sub_1/OnesLike, etc. ??</span></pre></div>\n<p>...yeah, maybe we need to have a talk to clarify all this :)</p>", "body_text": "Hi Asim,\nJust to make sure that I understood correctly, you are suggesting that we should enforce prefix uniqueness in a graph? But aren't the suffixes '_#' only applied on the op names?\nI not too aware of the internal details for handling names clashing, I thought that prefixes worked a bit like folders. For example, calling twice TF_AddGradients could create a node named gradients/OnesLike in the first call and gradients/OnesLike_1 in the second. Or are you saying that it will end up to be more something like gradients/OnesLike and gradients_1/OnesLike?\nI agree the second case would be confusing, or even problematic. Specially if you call ops.gradients(...) twice, you expect all gradients to be created under the same scope, like any other operator:\nOps sub = ops.withSubScope(\"sub\");\nsub.matMul(...); // => sub/MatMul\nsub.matMul(...); // => sub/MatMul_1\nsub.gradients(...); // => sub/OnesLike, etc. ??\nsub.gradients(...); // => sub/OnesLike_1 or sub_1/OnesLike, etc. ??\n...yeah, maybe we need to have a talk to clarify all this :)", "body": "Hi Asim, \r\n\r\nJust to make sure that I understood correctly, you are suggesting that we should enforce prefix uniqueness in a graph? But aren't the suffixes '_#' only applied on the op names? \r\n\r\nI not too aware of the internal details for handling names clashing, I thought that prefixes worked a bit like folders. For example, calling twice `TF_AddGradients` could create a node named `gradients/OnesLike` in the first call and `gradients/OnesLike_1` in the second. Or are you saying that it will end up to be more something like `gradients/OnesLike` and `gradients_1/OnesLike`?\r\n\r\nI agree the second case would be confusing, or even problematic. Specially if you call `ops.gradients(...)` twice, you expect all gradients to be created under the same scope, like any other operator:\r\n```java\r\nOps sub = ops.withSubScope(\"sub\");\r\nsub.matMul(...); // => sub/MatMul\r\nsub.matMul(...); // => sub/MatMul_1\r\nsub.gradients(...); // => sub/OnesLike, etc. ??\r\nsub.gradients(...); // => sub/OnesLike_1 or sub_1/OnesLike, etc. ??\r\n```\r\n...yeah, maybe we need to have a talk to clarify all this :)\r\n"}