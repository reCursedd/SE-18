{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9440", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9440/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9440/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9440/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9440", "id": 224174478, "node_id": "MDU6SXNzdWUyMjQxNzQ0Nzg=", "number": 9440, "title": "Loading sklearn model in Java. Model created with DNNClassifier in python", "user": {"login": "rjpg", "id": 22857941, "node_id": "MDQ6VXNlcjIyODU3OTQx", "avatar_url": "https://avatars1.githubusercontent.com/u/22857941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rjpg", "html_url": "https://github.com/rjpg", "followers_url": "https://api.github.com/users/rjpg/followers", "following_url": "https://api.github.com/users/rjpg/following{/other_user}", "gists_url": "https://api.github.com/users/rjpg/gists{/gist_id}", "starred_url": "https://api.github.com/users/rjpg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rjpg/subscriptions", "organizations_url": "https://api.github.com/users/rjpg/orgs", "repos_url": "https://api.github.com/users/rjpg/repos", "events_url": "https://api.github.com/users/rjpg/events{/privacy}", "received_events_url": "https://api.github.com/users/rjpg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-25T15:16:42Z", "updated_at": "2017-04-25T16:01:32Z", "closed_at": "2017-04-25T15:39:34Z", "author_association": "NONE", "body_html": "<p>The goal is to open in Java a model created/trained in phyton with tensorflow.contrib.learn.learn.DNNClassifier.</p>\n<p>At the moment the main issue is to know the correct name of the \"Operation\" to give in java on the session runner method.</p>\n<p>I have this test code in python :</p>\n<p>`from <strong>future</strong> import division, print_function, absolute_import<br>\nimport tensorflow as tf<br>\nimport pandas as pd<br>\nimport tensorflow.contrib.learn as learn<br>\nimport numpy as np<br>\nfrom sklearn import metrics<br>\nfrom sklearn.cross_validation import train_test_split<br>\nfrom tensorflow.contrib import layers<br>\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils<br>\nfrom tensorflow.python.ops import array_ops<br>\nfrom tensorflow.python.framework import dtypes<br>\nfrom tensorflow.python.util.compat import as_text</p>\n<p>print(tf.VERSION)</p>\n<p>df = pd.read_csv('../NNNormalizeData-out.csv')</p>\n<p>inputs = []<br>\ntarget = []</p>\n<p>y=0;<br>\nfor x in df.columns:<br>\nif y != 35 :<br>\n#print(\"added %d\" %y)<br>\ninputs.append(x)<br>\nelse :<br>\ntarget.append(x)<br>\ny+=1</p>\n<p>total_inputs,total_output = df.as_matrix(inputs).astype(np.float32),df.as_matrix([target]).astype(np.int32)</p>\n<p>train_inputs, test_inputs, train_output, test_output = train_test_split(total_inputs, total_output, test_size=0.2, random_state=42)</p>\n<h1>Define inputs format</h1>\n<p>feature_columns = [tf.contrib.layers.real_valued_column(\"\",dimension=train_inputs.shape[1],dtype=tf.float32)]<br>\n#target_column = [tf.contrib.layers.real_valued_column(\"output\", dimension=train_output.shape[1])]</p>\n<p>classifier = learn.DNNClassifier(hidden_units=[10, 20, 5], n_classes=5<br>\n,feature_columns=feature_columns)</p>\n<p>classifier.fit(train_inputs, train_output, steps=100)</p>\n<h1>Save Model into saved_model.pbtxt file (possible to Load in Java)</h1>\n<p>tfrecord_serving_input_fn = tf.contrib.learn.build_parsing_serving_input_fn(layers.create_feature_spec_for_parsing(feature_columns))<br>\nclassifier.export_savedmodel(export_dir_base=\"test\", serving_input_fn = tfrecord_serving_input_fn,as_text=True)</p>\n<h1>Measure accuracy</h1>\n<p>pred = list(classifier.predict(test_inputs, as_iterable=True))<br>\nscore = metrics.accuracy_score(test_output, pred)<br>\nprint(\"Final score: {}\".format(score))</p>\n<h1>test individual samples</h1>\n<p>sample_1 = np.array( [[0.37671986791414125,0.28395908337619136,-0.0966095873607713,-1.0,0.06891621389763203,-0.09716678086712205,0.726029084013637,4.984689881073479E-4,-0.30296253267499107,-0.16192917054985334,0.04820256230479658,0.4951319883569152,0.5269983894210499,-0.2560313828048315,-0.3710980821053321,-0.4845867212612598,-0.8647234314469595,-0.6491591208322198,-1.0,-0.5004549422844073,-0.9880910165770813,0.5540293108747256,0.5625990251930839,0.7420121698556554,0.5445551415657979,0.4644276850235627,0.7316976292340245,0.636690006814346,0.16486621649984112,-0.0466018967678159,0.5261100063227044,0.6256168612312738,-0.544295484930702,0.379125782517193,0.6959368575211544]], dtype=float)<br>\nsample_2 = np.array( [[1.0,0.7982741870963959,1.0,-0.46270838239235024,0.040320274521029376,0.443451913224413,-1.0,1.0,1.0,-1.0,0.36689718911339564,-0.13577379160035796,-0.5162916256414466,-0.03373651520104648,1.0,1.0,1.0,1.0,0.786999801054777,-0.43856035121103853,-0.8199093927945158,1.0,-1.0,-1.0,-0.1134921695894473,-1.0,0.6420892436196663,0.7871737734493178,1.0,0.6501788845358409,1.0,1.0,1.0,-0.17586627413625022,0.8817194210401085]], dtype=float)</p>\n<p>pred = list(classifier.predict(sample_2, as_iterable=True))<br>\nprint(\"Prediction for sample_1 is:{} \".format(pred))</p>\n<p>pred = list(classifier.predict_proba(sample_2, as_iterable=True))<br>\nprint(\"Prediction for sample_2 is:{} \".format(pred))`</p>\n<hr>\n<p>A model_saved.pbtxt file is created.</p>\n<p>I try to load this model in Java with the following code :</p>\n<p>` public class HelloTF {<br>\npublic static void main(String[] args) throws Exception {<br>\nSavedModelBundle bundle=SavedModelBundle.load(\"/java/workspace/APIJavaSampleCode/tfModels/dnn/ModelSave\",\"serve\");<br>\nSession s = bundle.session();</p>\n<pre><code>    double[] inputDouble = {1.0,0.7982741870963959,1.0,-0.46270838239235024,0.040320274521029376,0.443451913224413,-1.0,1.0,1.0,-1.0,0.36689718911339564,-0.13577379160035796,-0.5162916256414466,-0.03373651520104648,1.0,1.0,1.0,1.0,0.786999801054777,-0.43856035121103853,-0.8199093927945158,1.0,-1.0,-1.0,-0.1134921695894473,-1.0,0.6420892436196663,0.7871737734493178,1.0,0.6501788845358409,1.0,1.0,1.0,-0.17586627413625022,0.8817194210401085};\n    float [] inputfloat=new float[inputDouble.length];\n    for(int i=0;i&lt;inputfloat.length;i++)\n    {\n        inputfloat[i]=(float)inputDouble[i];\n    }\n    Tensor inputTensor = Tensor.create(new long[] {35}, FloatBuffer.wrap(inputfloat) );\n\n    Tensor result = s.runner()\n            .feed(\"input_example_tensor\", inputTensor)\n            .fetch(\"dnn/multi_class_head/predictions/probabilities\")\n            .run().get(0);\n\n\n     float[] m = new float[5];\n     float[] vector = result.copyTo(m);\n     float maxVal = 0;\n     int inc = 0;\n     int predict = -1;\n     for(float val : vector) \n     {\n         System.out.println(val+\"  \");\n         if(val &gt; maxVal) {\n             predict = inc;\n             maxVal = val;\n         }\n         inc++;\n     }\n     System.out.println(predict);\n\n\n\n}`\n</code></pre>\n<p>I get the error on the .run().get(0); line :</p>\n<p><code>Exception in thread \"main\" org.tensorflow.TensorFlowException: Output 0 of type float does not match declared output type string for node _recv_input_example_tensor_0 = _Recv[_output_shapes=[[-1]], client_terminated=true, recv_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device_incarnation=3663984897684684554, tensor_name=\"input_example_tensor:0\", tensor_type=DT_STRING, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]() at org.tensorflow.Session.run(Native Method) at org.tensorflow.Session.access$100(Session.java:48) at org.tensorflow.Session$Runner.runHelper(Session.java:285) at org.tensorflow.Session$Runner.run(Session.java:235) at tensorflow.HelloTF.main(HelloTF.java:35)</code></p>\n<p>It seams like the \"runner\" is expecting strings instead of floats array ... (?)</p>\n<p>I suspect the \"operation\" names (that were extracted looking into the saved_model.pbtxt)are not correct in the lines :</p>\n<p><code>  .feed(\"input_example_tensor\", inputTensor) .fetch(\"dnn/multi_class_head/predictions/probabilities\")</code></p>\n<p>Some help would be appreciated since it is really important to execute in \"real-time\" the models in Java.</p>", "body_text": "The goal is to open in Java a model created/trained in phyton with tensorflow.contrib.learn.learn.DNNClassifier.\nAt the moment the main issue is to know the correct name of the \"Operation\" to give in java on the session runner method.\nI have this test code in python :\n`from future import division, print_function, absolute_import\nimport tensorflow as tf\nimport pandas as pd\nimport tensorflow.contrib.learn as learn\nimport numpy as np\nfrom sklearn import metrics\nfrom sklearn.cross_validation import train_test_split\nfrom tensorflow.contrib import layers\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.util.compat import as_text\nprint(tf.VERSION)\ndf = pd.read_csv('../NNNormalizeData-out.csv')\ninputs = []\ntarget = []\ny=0;\nfor x in df.columns:\nif y != 35 :\n#print(\"added %d\" %y)\ninputs.append(x)\nelse :\ntarget.append(x)\ny+=1\ntotal_inputs,total_output = df.as_matrix(inputs).astype(np.float32),df.as_matrix([target]).astype(np.int32)\ntrain_inputs, test_inputs, train_output, test_output = train_test_split(total_inputs, total_output, test_size=0.2, random_state=42)\nDefine inputs format\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\",dimension=train_inputs.shape[1],dtype=tf.float32)]\n#target_column = [tf.contrib.layers.real_valued_column(\"output\", dimension=train_output.shape[1])]\nclassifier = learn.DNNClassifier(hidden_units=[10, 20, 5], n_classes=5\n,feature_columns=feature_columns)\nclassifier.fit(train_inputs, train_output, steps=100)\nSave Model into saved_model.pbtxt file (possible to Load in Java)\ntfrecord_serving_input_fn = tf.contrib.learn.build_parsing_serving_input_fn(layers.create_feature_spec_for_parsing(feature_columns))\nclassifier.export_savedmodel(export_dir_base=\"test\", serving_input_fn = tfrecord_serving_input_fn,as_text=True)\nMeasure accuracy\npred = list(classifier.predict(test_inputs, as_iterable=True))\nscore = metrics.accuracy_score(test_output, pred)\nprint(\"Final score: {}\".format(score))\ntest individual samples\nsample_1 = np.array( [[0.37671986791414125,0.28395908337619136,-0.0966095873607713,-1.0,0.06891621389763203,-0.09716678086712205,0.726029084013637,4.984689881073479E-4,-0.30296253267499107,-0.16192917054985334,0.04820256230479658,0.4951319883569152,0.5269983894210499,-0.2560313828048315,-0.3710980821053321,-0.4845867212612598,-0.8647234314469595,-0.6491591208322198,-1.0,-0.5004549422844073,-0.9880910165770813,0.5540293108747256,0.5625990251930839,0.7420121698556554,0.5445551415657979,0.4644276850235627,0.7316976292340245,0.636690006814346,0.16486621649984112,-0.0466018967678159,0.5261100063227044,0.6256168612312738,-0.544295484930702,0.379125782517193,0.6959368575211544]], dtype=float)\nsample_2 = np.array( [[1.0,0.7982741870963959,1.0,-0.46270838239235024,0.040320274521029376,0.443451913224413,-1.0,1.0,1.0,-1.0,0.36689718911339564,-0.13577379160035796,-0.5162916256414466,-0.03373651520104648,1.0,1.0,1.0,1.0,0.786999801054777,-0.43856035121103853,-0.8199093927945158,1.0,-1.0,-1.0,-0.1134921695894473,-1.0,0.6420892436196663,0.7871737734493178,1.0,0.6501788845358409,1.0,1.0,1.0,-0.17586627413625022,0.8817194210401085]], dtype=float)\npred = list(classifier.predict(sample_2, as_iterable=True))\nprint(\"Prediction for sample_1 is:{} \".format(pred))\npred = list(classifier.predict_proba(sample_2, as_iterable=True))\nprint(\"Prediction for sample_2 is:{} \".format(pred))`\n\nA model_saved.pbtxt file is created.\nI try to load this model in Java with the following code :\n` public class HelloTF {\npublic static void main(String[] args) throws Exception {\nSavedModelBundle bundle=SavedModelBundle.load(\"/java/workspace/APIJavaSampleCode/tfModels/dnn/ModelSave\",\"serve\");\nSession s = bundle.session();\n    double[] inputDouble = {1.0,0.7982741870963959,1.0,-0.46270838239235024,0.040320274521029376,0.443451913224413,-1.0,1.0,1.0,-1.0,0.36689718911339564,-0.13577379160035796,-0.5162916256414466,-0.03373651520104648,1.0,1.0,1.0,1.0,0.786999801054777,-0.43856035121103853,-0.8199093927945158,1.0,-1.0,-1.0,-0.1134921695894473,-1.0,0.6420892436196663,0.7871737734493178,1.0,0.6501788845358409,1.0,1.0,1.0,-0.17586627413625022,0.8817194210401085};\n    float [] inputfloat=new float[inputDouble.length];\n    for(int i=0;i<inputfloat.length;i++)\n    {\n        inputfloat[i]=(float)inputDouble[i];\n    }\n    Tensor inputTensor = Tensor.create(new long[] {35}, FloatBuffer.wrap(inputfloat) );\n\n    Tensor result = s.runner()\n            .feed(\"input_example_tensor\", inputTensor)\n            .fetch(\"dnn/multi_class_head/predictions/probabilities\")\n            .run().get(0);\n\n\n     float[] m = new float[5];\n     float[] vector = result.copyTo(m);\n     float maxVal = 0;\n     int inc = 0;\n     int predict = -1;\n     for(float val : vector) \n     {\n         System.out.println(val+\"  \");\n         if(val > maxVal) {\n             predict = inc;\n             maxVal = val;\n         }\n         inc++;\n     }\n     System.out.println(predict);\n\n\n\n}`\n\nI get the error on the .run().get(0); line :\nException in thread \"main\" org.tensorflow.TensorFlowException: Output 0 of type float does not match declared output type string for node _recv_input_example_tensor_0 = _Recv[_output_shapes=[[-1]], client_terminated=true, recv_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device_incarnation=3663984897684684554, tensor_name=\"input_example_tensor:0\", tensor_type=DT_STRING, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]() at org.tensorflow.Session.run(Native Method) at org.tensorflow.Session.access$100(Session.java:48) at org.tensorflow.Session$Runner.runHelper(Session.java:285) at org.tensorflow.Session$Runner.run(Session.java:235) at tensorflow.HelloTF.main(HelloTF.java:35)\nIt seams like the \"runner\" is expecting strings instead of floats array ... (?)\nI suspect the \"operation\" names (that were extracted looking into the saved_model.pbtxt)are not correct in the lines :\n  .feed(\"input_example_tensor\", inputTensor) .fetch(\"dnn/multi_class_head/predictions/probabilities\")\nSome help would be appreciated since it is really important to execute in \"real-time\" the models in Java.", "body": "The goal is to open in Java a model created/trained in phyton with tensorflow.contrib.learn.learn.DNNClassifier.\r\n\r\nAt the moment the main issue is to know the correct name of the \"Operation\" to give in java on the session runner method.\r\n\r\nI have this test code in python :\r\n\r\n`from __future__ import division, print_function, absolute_import\r\nimport tensorflow as tf\r\nimport pandas as pd\r\nimport tensorflow.contrib.learn as learn\r\nimport numpy as np\r\nfrom sklearn import metrics\r\nfrom sklearn.cross_validation import train_test_split\r\nfrom tensorflow.contrib import layers\r\nfrom tensorflow.contrib.learn.python.learn.utils import input_fn_utils\r\nfrom tensorflow.python.ops import array_ops\r\nfrom tensorflow.python.framework import dtypes\r\nfrom tensorflow.python.util.compat import as_text\r\n\r\nprint(tf.VERSION)\r\n\r\ndf = pd.read_csv('../NNNormalizeData-out.csv')\r\n\r\ninputs = []\r\ntarget = []\r\n\r\ny=0;    \r\nfor x in df.columns:\r\n    if y != 35 :\r\n        #print(\"added %d\" %y)\r\n        inputs.append(x)\r\n    else :\r\n        target.append(x)\r\n    y+=1\r\n\r\ntotal_inputs,total_output = df.as_matrix(inputs).astype(np.float32),df.as_matrix([target]).astype(np.int32)\r\n\r\ntrain_inputs, test_inputs, train_output, test_output = train_test_split(total_inputs, total_output, test_size=0.2, random_state=42)\r\n\r\n# Define inputs format\r\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\",dimension=train_inputs.shape[1],dtype=tf.float32)]\r\n#target_column = [tf.contrib.layers.real_valued_column(\"output\", dimension=train_output.shape[1])]\r\n\r\nclassifier = learn.DNNClassifier(hidden_units=[10, 20, 5], n_classes=5\r\n                                 ,feature_columns=feature_columns)\r\n\r\nclassifier.fit(train_inputs, train_output, steps=100)\r\n\r\n# Save Model into saved_model.pbtxt file (possible to Load in Java)\r\ntfrecord_serving_input_fn = tf.contrib.learn.build_parsing_serving_input_fn(layers.create_feature_spec_for_parsing(feature_columns))  \r\nclassifier.export_savedmodel(export_dir_base=\"test\", serving_input_fn = tfrecord_serving_input_fn,as_text=True)\r\n\r\n\r\n# Measure accuracy\r\npred = list(classifier.predict(test_inputs, as_iterable=True))\r\nscore = metrics.accuracy_score(test_output, pred)\r\nprint(\"Final score: {}\".format(score))\r\n\r\n# test individual samples \r\nsample_1 = np.array( [[0.37671986791414125,0.28395908337619136,-0.0966095873607713,-1.0,0.06891621389763203,-0.09716678086712205,0.726029084013637,4.984689881073479E-4,-0.30296253267499107,-0.16192917054985334,0.04820256230479658,0.4951319883569152,0.5269983894210499,-0.2560313828048315,-0.3710980821053321,-0.4845867212612598,-0.8647234314469595,-0.6491591208322198,-1.0,-0.5004549422844073,-0.9880910165770813,0.5540293108747256,0.5625990251930839,0.7420121698556554,0.5445551415657979,0.4644276850235627,0.7316976292340245,0.636690006814346,0.16486621649984112,-0.0466018967678159,0.5261100063227044,0.6256168612312738,-0.544295484930702,0.379125782517193,0.6959368575211544]], dtype=float)\r\nsample_2 = np.array( [[1.0,0.7982741870963959,1.0,-0.46270838239235024,0.040320274521029376,0.443451913224413,-1.0,1.0,1.0,-1.0,0.36689718911339564,-0.13577379160035796,-0.5162916256414466,-0.03373651520104648,1.0,1.0,1.0,1.0,0.786999801054777,-0.43856035121103853,-0.8199093927945158,1.0,-1.0,-1.0,-0.1134921695894473,-1.0,0.6420892436196663,0.7871737734493178,1.0,0.6501788845358409,1.0,1.0,1.0,-0.17586627413625022,0.8817194210401085]], dtype=float)\r\n\r\npred = list(classifier.predict(sample_2, as_iterable=True))\r\nprint(\"Prediction for sample_1 is:{} \".format(pred))\r\n\r\npred = list(classifier.predict_proba(sample_2, as_iterable=True))\r\nprint(\"Prediction for sample_2 is:{} \".format(pred))`\r\n____________________________________________________________________________________________________________\r\nA model_saved.pbtxt file is created.\r\n\r\nI try to load this model in Java with the following code :\r\n\r\n` public class HelloTF {\r\n    public static void main(String[] args) throws Exception {\r\n        SavedModelBundle bundle=SavedModelBundle.load(\"/java/workspace/APIJavaSampleCode/tfModels/dnn/ModelSave\",\"serve\");\r\n        Session s = bundle.session();\r\n\r\n        double[] inputDouble = {1.0,0.7982741870963959,1.0,-0.46270838239235024,0.040320274521029376,0.443451913224413,-1.0,1.0,1.0,-1.0,0.36689718911339564,-0.13577379160035796,-0.5162916256414466,-0.03373651520104648,1.0,1.0,1.0,1.0,0.786999801054777,-0.43856035121103853,-0.8199093927945158,1.0,-1.0,-1.0,-0.1134921695894473,-1.0,0.6420892436196663,0.7871737734493178,1.0,0.6501788845358409,1.0,1.0,1.0,-0.17586627413625022,0.8817194210401085};\r\n        float [] inputfloat=new float[inputDouble.length];\r\n        for(int i=0;i<inputfloat.length;i++)\r\n        {\r\n            inputfloat[i]=(float)inputDouble[i];\r\n        }\r\n        Tensor inputTensor = Tensor.create(new long[] {35}, FloatBuffer.wrap(inputfloat) );\r\n\r\n        Tensor result = s.runner()\r\n                .feed(\"input_example_tensor\", inputTensor)\r\n                .fetch(\"dnn/multi_class_head/predictions/probabilities\")\r\n                .run().get(0);\r\n\r\n\r\n         float[] m = new float[5];\r\n         float[] vector = result.copyTo(m);\r\n         float maxVal = 0;\r\n         int inc = 0;\r\n         int predict = -1;\r\n         for(float val : vector) \r\n         {\r\n             System.out.println(val+\"  \");\r\n             if(val > maxVal) {\r\n                 predict = inc;\r\n                 maxVal = val;\r\n             }\r\n             inc++;\r\n         }\r\n         System.out.println(predict);\r\n\r\n\r\n\r\n    }`\r\n\r\n\r\nI get the error on the .run().get(0); line :\r\n\r\n`Exception in thread \"main\" org.tensorflow.TensorFlowException: Output 0 of type float does not match declared output type string for node _recv_input_example_tensor_0 = _Recv[_output_shapes=[[-1]], client_terminated=true, recv_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device_incarnation=3663984897684684554, tensor_name=\"input_example_tensor:0\", tensor_type=DT_STRING, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()\r\n    at org.tensorflow.Session.run(Native Method)\r\n    at org.tensorflow.Session.access$100(Session.java:48)\r\n    at org.tensorflow.Session$Runner.runHelper(Session.java:285)\r\n    at org.tensorflow.Session$Runner.run(Session.java:235)\r\n    at tensorflow.HelloTF.main(HelloTF.java:35)`\r\n\r\nIt seams like the \"runner\" is expecting strings instead of floats array ... (?)\r\n\r\nI suspect the \"operation\" names (that were extracted looking into the saved_model.pbtxt)are not correct in the lines :\r\n\r\n`  .feed(\"input_example_tensor\", inputTensor)\r\n                .fetch(\"dnn/multi_class_head/predictions/probabilities\")`\r\n\r\nSome help would be appreciated since it is really important to execute in \"real-time\" the models in Java. \r\n\r\n "}