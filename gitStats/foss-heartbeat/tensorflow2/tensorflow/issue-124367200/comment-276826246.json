{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/276826246", "html_url": "https://github.com/tensorflow/tensorflow/issues/654#issuecomment-276826246", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/654", "id": 276826246, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjgyNjI0Ng==", "user": {"login": "amirj", "id": 1645137, "node_id": "MDQ6VXNlcjE2NDUxMzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1645137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amirj", "html_url": "https://github.com/amirj", "followers_url": "https://api.github.com/users/amirj/followers", "following_url": "https://api.github.com/users/amirj/following{/other_user}", "gists_url": "https://api.github.com/users/amirj/gists{/gist_id}", "starred_url": "https://api.github.com/users/amirj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amirj/subscriptions", "organizations_url": "https://api.github.com/users/amirj/orgs", "repos_url": "https://api.github.com/users/amirj/repos", "events_url": "https://api.github.com/users/amirj/events{/privacy}", "received_events_url": "https://api.github.com/users/amirj/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-02T00:15:32Z", "updated_at": "2017-02-02T00:15:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In the original <a href=\"https://arxiv.org/abs/1606.04870\" rel=\"nofollow\">Google's SmartReply paper</a>:</p>\n<blockquote>\n<p>Our search is conducted as follows. First, the elements of R (the set of all possible responses) are organized into a trie. Then, we conduct a left-to-right beam search, but only retain hypotheses that appear in the trie. This search process has complexity O(bl) for beam size b and maximum response length l. Both b and l are typically in the range of 10-30, so this method dramatically reduces the time to find the top responses and is a critical element of making this system deployable.</p>\n</blockquote>\n<p>I want to implement something similar. Some questions:</p>\n<ol>\n<li>How to represent the set of all possible responses (R) in a trie data structure in TF?</li>\n<li>Does the current implementation of beam search support retaining only hypotheses that appear in the trie?</li>\n</ol>", "body_text": "In the original Google's SmartReply paper:\n\nOur search is conducted as follows. First, the elements of R (the set of all possible responses) are organized into a trie. Then, we conduct a left-to-right beam search, but only retain hypotheses that appear in the trie. This search process has complexity O(bl) for beam size b and maximum response length l. Both b and l are typically in the range of 10-30, so this method dramatically reduces the time to find the top responses and is a critical element of making this system deployable.\n\nI want to implement something similar. Some questions:\n\nHow to represent the set of all possible responses (R) in a trie data structure in TF?\nDoes the current implementation of beam search support retaining only hypotheses that appear in the trie?", "body": "In the original [Google's SmartReply paper](https://arxiv.org/abs/1606.04870):\r\n> Our search is conducted as follows. First, the elements of R (the set of all possible responses) are organized into a trie. Then, we conduct a left-to-right beam search, but only retain hypotheses that appear in the trie. This search process has complexity O(bl) for beam size b and maximum response length l. Both b and l are typically in the range of 10-30, so this method dramatically reduces the time to find the top responses and is a critical element of making this system deployable.\r\n\r\nI want to implement something similar. Some questions:\r\n\r\n 1. How to represent the set of all possible responses (R) in a trie data structure in TF?\r\n 2. Does the current implementation of beam search support retaining only hypotheses that appear in the trie?"}