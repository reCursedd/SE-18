{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/227503757", "html_url": "https://github.com/tensorflow/tensorflow/issues/654#issuecomment-227503757", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/654", "id": 227503757, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzUwMzc1Nw==", "user": {"login": "nikitakit", "id": 252225, "node_id": "MDQ6VXNlcjI1MjIyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/252225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikitakit", "html_url": "https://github.com/nikitakit", "followers_url": "https://api.github.com/users/nikitakit/followers", "following_url": "https://api.github.com/users/nikitakit/following{/other_user}", "gists_url": "https://api.github.com/users/nikitakit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikitakit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikitakit/subscriptions", "organizations_url": "https://api.github.com/users/nikitakit/orgs", "repos_url": "https://api.github.com/users/nikitakit/repos", "events_url": "https://api.github.com/users/nikitakit/events{/privacy}", "received_events_url": "https://api.github.com/users/nikitakit/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-21T16:59:14Z", "updated_at": "2016-06-30T00:53:56Z", "author_association": "NONE", "body_html": "<p>I'd like to share my in-graph beam search implementation that <del>uses the loop_function approach</del></p>\n<p><a href=\"https://gist.github.com/nikitakit/6ab61a73b86c50ad88d409bac3c3d09f\">https://gist.github.com/nikitakit/6ab61a73b86c50ad88d409bac3c3d09f</a></p>\n<p>I believe it correctly implements length-bucketed beam search. So far I've only tested that the outputs look reasonable (as opposed to comparing with a known-good beam search implementation).</p>\n<p><del>The loop_function API is really nice, but I'm not sure if bending over backwards to avoid writing a custom op was the best decision here.</del></p>\n<p>EDIT 2: After further thought, I've discovered a serious flaw in the original beam search implementation I posted. The gist is now updated with a fix. In the process, I had to abandon the loop_function API, since it was not sufficient to correctly implement beam search.</p>", "body_text": "I'd like to share my in-graph beam search implementation that uses the loop_function approach\nhttps://gist.github.com/nikitakit/6ab61a73b86c50ad88d409bac3c3d09f\nI believe it correctly implements length-bucketed beam search. So far I've only tested that the outputs look reasonable (as opposed to comparing with a known-good beam search implementation).\nThe loop_function API is really nice, but I'm not sure if bending over backwards to avoid writing a custom op was the best decision here.\nEDIT 2: After further thought, I've discovered a serious flaw in the original beam search implementation I posted. The gist is now updated with a fix. In the process, I had to abandon the loop_function API, since it was not sufficient to correctly implement beam search.", "body": "I'd like to share my in-graph beam search implementation that ~~uses the loop_function approach~~\n\nhttps://gist.github.com/nikitakit/6ab61a73b86c50ad88d409bac3c3d09f\n\nI believe it correctly implements length-bucketed beam search. So far I've only tested that the outputs look reasonable (as opposed to comparing with a known-good beam search implementation).\n\n~~The loop_function API is really nice, but I'm not sure if bending over backwards to avoid writing a custom op was the best decision here.~~\n\nEDIT 2: After further thought, I've discovered a serious flaw in the original beam search implementation I posted. The gist is now updated with a fix. In the process, I had to abandon the loop_function API, since it was not sufficient to correctly implement beam search.\n"}