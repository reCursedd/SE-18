{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13668", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13668/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13668/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13668/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13668", "id": 265016510, "node_id": "MDU6SXNzdWUyNjUwMTY1MTA=", "number": 13668, "title": "ValueError: Cannot feed value of shape (128,) for Tensor 'Placeholder_142:0', which has shape '(?, 3433)", "user": {"login": "Fulvioo", "id": 30832709, "node_id": "MDQ6VXNlcjMwODMyNzA5", "avatar_url": "https://avatars3.githubusercontent.com/u/30832709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fulvioo", "html_url": "https://github.com/Fulvioo", "followers_url": "https://api.github.com/users/Fulvioo/followers", "following_url": "https://api.github.com/users/Fulvioo/following{/other_user}", "gists_url": "https://api.github.com/users/Fulvioo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fulvioo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fulvioo/subscriptions", "organizations_url": "https://api.github.com/users/Fulvioo/orgs", "repos_url": "https://api.github.com/users/Fulvioo/repos", "events_url": "https://api.github.com/users/Fulvioo/events{/privacy}", "received_events_url": "https://api.github.com/users/Fulvioo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-12T17:03:19Z", "updated_at": "2017-10-13T04:43:42Z", "closed_at": "2017-10-13T04:43:42Z", "author_association": "NONE", "body_html": "<p>Hello... after several unsuccesfull tries, I would like to ask your help in solving this error.<br>\nI am trying to train a deep autoencoder network, by using a local csv file that is then transformed (by the csv and the numpy libraries) into a numpy array. But this data is never feeding into my placeholder's tensor.</p>\n<p>Here's an abstract of the deep autoencoder:</p>\n<p>`<br>\nclass Deep_Autoencoder:</p>\n<pre><code>def __init__(self, input_dim, n_nodes_hl = (32, 16, 1), \n             epochs = 400, batch_size = 128, learning_rate = 0.02, n_examples = 10):\n    \n    # Hyperparameters\n    self.input_dim = input_dim\n    self.epochs = epochs\n    self.batch_size = batch_size\n    self.learning_rate = learning_rate\n    self.n_examples = n_examples\n    \n    # Input and target placeholders\n    X = tf.placeholder('float', [None, self.input_dim])\n    Y = tf.placeholder('float', [None, self.input_dim])\n\t...\n\t\n\tself.X = X\n    print(\"self.X : \", self.X)\n    self.Y = Y\n    print(\"self.Y : \", self.Y)\n\t...\n        \ndef train_neural_network(self, data, targets):\n    \n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        for epoch in range(self.epochs):\n            epoch_loss = 0\n            i = 0\n\n            # Let's train it in batch-mode\n            while i &lt; len(data):\n                start = i\n                end = i + self.batch_size\n                \n                batch_x = np.array(data[start:end])\n                print(\"type batch_x :\", type(batch_x))\n                print(\"len batch_x :\", len(batch_x))\n                batch_y = np.array(targets[start:end])\n                print(\"type batch_y :\", type(batch_y))\n                print(\"len batch_y :\", len(batch_y))\n                \n                hidden, _, c = sess.run([self.encoded, self.optimizer, self.cost], \n                                        feed_dict={self.X: batch_x, self.Y: batch_y})\n                epoch_loss +=c\n                i += self.batch_size\n\n        self.saver.save(sess, 'selfautoencoder.ckpt')\n        print('Accuracy', self.accuracy.eval({self.X: data, self.Y: targets}))`\n</code></pre>\n<p>Here I create the input data and below you can see that I'll printout their main features for your info (note that I am actually interested on column 3 only):</p>\n<p>`\tfeatures_DeepAE = create_feature_sets(filename)</p>\n<pre><code>Train_x = np.array(features_DeepAE[0])\nTrain_y = np.array(features_DeepAE[1])\n\nprint(\"type Train_x : \", type(Train_x))\nprint(\"type Train_x.T[3] : \", type(Train_x.T[3]))\nprint(\"len Train_x : \", len(Train_x))\nprint(\"len Train_x.T[3] : \", len(Train_x.T[3]))\nprint(\"shape Train_x : \", Train_x.shape)\nprint(\"type Train_y : \", type(Train_y))\nprint(\"type Train_y.T[3] : \", type(Train_y.T[3]))\nprint(\"len Train_y : \", len(Train_y))\nprint(\"len Train_y.T[3] : \", len(Train_y.T[3]))\nprint(\"shape Train_y : \", Train_y.shape)`\n</code></pre>\n<p>And here I run the code:</p>\n<p><code>\tDAE = Deep_Autoencoder(input_dim = len(Train_x)) DAE.train_neural_network(Train_x.T[3], Train_y.T[3]) </code></p>\n<hr>\n<p>These are the printouts, fyi:</p>\n<pre><code>type Train_x :  &lt;class 'numpy.ndarray'&gt;\ntype Train_x.T[3] :  &lt;class 'numpy.ndarray'&gt;\nlen Train_x :  3433\nlen Train_x.T[3] :  3433\nshape Train_x :  (3433, 5)\ntype Train_y :  &lt;class 'numpy.ndarray'&gt;\ntype Train_y.T[3] :  &lt;class 'numpy.ndarray'&gt;\nlen Train_y :  3433\nlen Train_y.T[3] :  3433\nshape Train_y :  (3433, 5)\nself.X :  Tensor(\"Placeholder_142:0\", shape=(?, 3433), dtype=float32)\nself.Y :  Tensor(\"Placeholder_143:0\", shape=(?, 3433), dtype=float32)\ntype batch_x : &lt;class 'numpy.ndarray'&gt;\nlen batch_x : 128\ntype batch_y : &lt;class 'numpy.ndarray'&gt;\nlen batch_y : 128\n</code></pre>\n<hr>\n<p>And finally the error:<br>\n<strong>ValueError: Cannot feed value of shape (128,) for Tensor 'Placeholder_142:0', which has shape '(?, 3433)'</strong></p>\n<p>and yes... I'm at placeholder # 143... that meas a lot of failures (reshaping the batch and/or the tensor, transposing one and/or the other, looking for workarounds on internet..) !<br>\nDo not hesitate to ask for more info if needed.</p>", "body_text": "Hello... after several unsuccesfull tries, I would like to ask your help in solving this error.\nI am trying to train a deep autoencoder network, by using a local csv file that is then transformed (by the csv and the numpy libraries) into a numpy array. But this data is never feeding into my placeholder's tensor.\nHere's an abstract of the deep autoencoder:\n`\nclass Deep_Autoencoder:\ndef __init__(self, input_dim, n_nodes_hl = (32, 16, 1), \n             epochs = 400, batch_size = 128, learning_rate = 0.02, n_examples = 10):\n    \n    # Hyperparameters\n    self.input_dim = input_dim\n    self.epochs = epochs\n    self.batch_size = batch_size\n    self.learning_rate = learning_rate\n    self.n_examples = n_examples\n    \n    # Input and target placeholders\n    X = tf.placeholder('float', [None, self.input_dim])\n    Y = tf.placeholder('float', [None, self.input_dim])\n\t...\n\t\n\tself.X = X\n    print(\"self.X : \", self.X)\n    self.Y = Y\n    print(\"self.Y : \", self.Y)\n\t...\n        \ndef train_neural_network(self, data, targets):\n    \n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        for epoch in range(self.epochs):\n            epoch_loss = 0\n            i = 0\n\n            # Let's train it in batch-mode\n            while i < len(data):\n                start = i\n                end = i + self.batch_size\n                \n                batch_x = np.array(data[start:end])\n                print(\"type batch_x :\", type(batch_x))\n                print(\"len batch_x :\", len(batch_x))\n                batch_y = np.array(targets[start:end])\n                print(\"type batch_y :\", type(batch_y))\n                print(\"len batch_y :\", len(batch_y))\n                \n                hidden, _, c = sess.run([self.encoded, self.optimizer, self.cost], \n                                        feed_dict={self.X: batch_x, self.Y: batch_y})\n                epoch_loss +=c\n                i += self.batch_size\n\n        self.saver.save(sess, 'selfautoencoder.ckpt')\n        print('Accuracy', self.accuracy.eval({self.X: data, self.Y: targets}))`\n\nHere I create the input data and below you can see that I'll printout their main features for your info (note that I am actually interested on column 3 only):\n`\tfeatures_DeepAE = create_feature_sets(filename)\nTrain_x = np.array(features_DeepAE[0])\nTrain_y = np.array(features_DeepAE[1])\n\nprint(\"type Train_x : \", type(Train_x))\nprint(\"type Train_x.T[3] : \", type(Train_x.T[3]))\nprint(\"len Train_x : \", len(Train_x))\nprint(\"len Train_x.T[3] : \", len(Train_x.T[3]))\nprint(\"shape Train_x : \", Train_x.shape)\nprint(\"type Train_y : \", type(Train_y))\nprint(\"type Train_y.T[3] : \", type(Train_y.T[3]))\nprint(\"len Train_y : \", len(Train_y))\nprint(\"len Train_y.T[3] : \", len(Train_y.T[3]))\nprint(\"shape Train_y : \", Train_y.shape)`\n\nAnd here I run the code:\n\tDAE = Deep_Autoencoder(input_dim = len(Train_x)) DAE.train_neural_network(Train_x.T[3], Train_y.T[3]) \n\nThese are the printouts, fyi:\ntype Train_x :  <class 'numpy.ndarray'>\ntype Train_x.T[3] :  <class 'numpy.ndarray'>\nlen Train_x :  3433\nlen Train_x.T[3] :  3433\nshape Train_x :  (3433, 5)\ntype Train_y :  <class 'numpy.ndarray'>\ntype Train_y.T[3] :  <class 'numpy.ndarray'>\nlen Train_y :  3433\nlen Train_y.T[3] :  3433\nshape Train_y :  (3433, 5)\nself.X :  Tensor(\"Placeholder_142:0\", shape=(?, 3433), dtype=float32)\nself.Y :  Tensor(\"Placeholder_143:0\", shape=(?, 3433), dtype=float32)\ntype batch_x : <class 'numpy.ndarray'>\nlen batch_x : 128\ntype batch_y : <class 'numpy.ndarray'>\nlen batch_y : 128\n\n\nAnd finally the error:\nValueError: Cannot feed value of shape (128,) for Tensor 'Placeholder_142:0', which has shape '(?, 3433)'\nand yes... I'm at placeholder # 143... that meas a lot of failures (reshaping the batch and/or the tensor, transposing one and/or the other, looking for workarounds on internet..) !\nDo not hesitate to ask for more info if needed.", "body": "Hello... after several unsuccesfull tries, I would like to ask your help in solving this error.\r\nI am trying to train a deep autoencoder network, by using a local csv file that is then transformed (by the csv and the numpy libraries) into a numpy array. But this data is never feeding into my placeholder's tensor.\r\n\r\nHere's an abstract of the deep autoencoder:\r\n\r\n`\r\nclass Deep_Autoencoder:\r\n    \r\n    def __init__(self, input_dim, n_nodes_hl = (32, 16, 1), \r\n                 epochs = 400, batch_size = 128, learning_rate = 0.02, n_examples = 10):\r\n        \r\n        # Hyperparameters\r\n        self.input_dim = input_dim\r\n        self.epochs = epochs\r\n        self.batch_size = batch_size\r\n        self.learning_rate = learning_rate\r\n        self.n_examples = n_examples\r\n        \r\n        # Input and target placeholders\r\n        X = tf.placeholder('float', [None, self.input_dim])\r\n        Y = tf.placeholder('float', [None, self.input_dim])\r\n\t\t...\r\n\t\t\r\n\t\tself.X = X\r\n        print(\"self.X : \", self.X)\r\n        self.Y = Y\r\n        print(\"self.Y : \", self.Y)\r\n\t\t...\r\n\t        \r\n    def train_neural_network(self, data, targets):\r\n        \r\n        with tf.Session() as sess:\r\n            sess.run(tf.global_variables_initializer())\r\n            for epoch in range(self.epochs):\r\n                epoch_loss = 0\r\n                i = 0\r\n\r\n                # Let's train it in batch-mode\r\n                while i < len(data):\r\n                    start = i\r\n                    end = i + self.batch_size\r\n                    \r\n                    batch_x = np.array(data[start:end])\r\n                    print(\"type batch_x :\", type(batch_x))\r\n                    print(\"len batch_x :\", len(batch_x))\r\n                    batch_y = np.array(targets[start:end])\r\n                    print(\"type batch_y :\", type(batch_y))\r\n                    print(\"len batch_y :\", len(batch_y))\r\n                    \r\n                    hidden, _, c = sess.run([self.encoded, self.optimizer, self.cost], \r\n                                            feed_dict={self.X: batch_x, self.Y: batch_y})\r\n                    epoch_loss +=c\r\n                    i += self.batch_size\r\n\r\n            self.saver.save(sess, 'selfautoencoder.ckpt')\r\n            print('Accuracy', self.accuracy.eval({self.X: data, self.Y: targets}))`\r\n\r\nHere I create the input data and below you can see that I'll printout their main features for your info (note that I am actually interested on column 3 only):\r\n\r\n`\tfeatures_DeepAE = create_feature_sets(filename)\r\n\r\n\tTrain_x = np.array(features_DeepAE[0])\r\n\tTrain_y = np.array(features_DeepAE[1])\r\n\r\n\tprint(\"type Train_x : \", type(Train_x))\r\n\tprint(\"type Train_x.T[3] : \", type(Train_x.T[3]))\r\n\tprint(\"len Train_x : \", len(Train_x))\r\n\tprint(\"len Train_x.T[3] : \", len(Train_x.T[3]))\r\n\tprint(\"shape Train_x : \", Train_x.shape)\r\n\tprint(\"type Train_y : \", type(Train_y))\r\n\tprint(\"type Train_y.T[3] : \", type(Train_y.T[3]))\r\n\tprint(\"len Train_y : \", len(Train_y))\r\n\tprint(\"len Train_y.T[3] : \", len(Train_y.T[3]))\r\n\tprint(\"shape Train_y : \", Train_y.shape)`\r\n\r\nAnd here I run the code:\r\n\r\n`\tDAE = Deep_Autoencoder(input_dim = len(Train_x))\r\n\tDAE.train_neural_network(Train_x.T[3], Train_y.T[3])\r\n`\r\n\r\n------\r\n\r\nThese are the printouts, fyi:\r\n\r\n\ttype Train_x :  <class 'numpy.ndarray'>\r\n\ttype Train_x.T[3] :  <class 'numpy.ndarray'>\r\n\tlen Train_x :  3433\r\n\tlen Train_x.T[3] :  3433\r\n\tshape Train_x :  (3433, 5)\r\n\ttype Train_y :  <class 'numpy.ndarray'>\r\n\ttype Train_y.T[3] :  <class 'numpy.ndarray'>\r\n\tlen Train_y :  3433\r\n\tlen Train_y.T[3] :  3433\r\n\tshape Train_y :  (3433, 5)\r\n\tself.X :  Tensor(\"Placeholder_142:0\", shape=(?, 3433), dtype=float32)\r\n\tself.Y :  Tensor(\"Placeholder_143:0\", shape=(?, 3433), dtype=float32)\r\n\ttype batch_x : <class 'numpy.ndarray'>\r\n\tlen batch_x : 128\r\n\ttype batch_y : <class 'numpy.ndarray'>\r\n\tlen batch_y : 128\r\n\r\n\r\n\r\n\r\n------\r\nAnd finally the error:\r\n**ValueError: Cannot feed value of shape (128,) for Tensor 'Placeholder_142:0', which has shape '(?, 3433)'**\r\n\r\nand yes... I'm at placeholder # 143... that meas a lot of failures (reshaping the batch and/or the tensor, transposing one and/or the other, looking for workarounds on internet..) ! \r\nDo not hesitate to ask for more info if needed."}