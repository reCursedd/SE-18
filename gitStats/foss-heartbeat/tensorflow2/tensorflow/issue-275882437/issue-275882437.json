{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14772", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14772/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14772/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14772/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14772", "id": 275882437, "node_id": "MDU6SXNzdWUyNzU4ODI0Mzc=", "number": 14772, "title": "TFRecordReader keeps files locked after session closes", "user": {"login": "Utumno", "id": 1365079, "node_id": "MDQ6VXNlcjEzNjUwNzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1365079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Utumno", "html_url": "https://github.com/Utumno", "followers_url": "https://api.github.com/users/Utumno/followers", "following_url": "https://api.github.com/users/Utumno/following{/other_user}", "gists_url": "https://api.github.com/users/Utumno/gists{/gist_id}", "starred_url": "https://api.github.com/users/Utumno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Utumno/subscriptions", "organizations_url": "https://api.github.com/users/Utumno/orgs", "repos_url": "https://api.github.com/users/Utumno/repos", "events_url": "https://api.github.com/users/Utumno/events{/privacy}", "received_events_url": "https://api.github.com/users/Utumno/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "josh11b", "id": 15258583, "node_id": "MDQ6VXNlcjE1MjU4NTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/15258583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh11b", "html_url": "https://github.com/josh11b", "followers_url": "https://api.github.com/users/josh11b/followers", "following_url": "https://api.github.com/users/josh11b/following{/other_user}", "gists_url": "https://api.github.com/users/josh11b/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh11b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh11b/subscriptions", "organizations_url": "https://api.github.com/users/josh11b/orgs", "repos_url": "https://api.github.com/users/josh11b/repos", "events_url": "https://api.github.com/users/josh11b/events{/privacy}", "received_events_url": "https://api.github.com/users/josh11b/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "josh11b", "id": 15258583, "node_id": "MDQ6VXNlcjE1MjU4NTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/15258583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh11b", "html_url": "https://github.com/josh11b", "followers_url": "https://api.github.com/users/josh11b/followers", "following_url": "https://api.github.com/users/josh11b/following{/other_user}", "gists_url": "https://api.github.com/users/josh11b/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh11b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh11b/subscriptions", "organizations_url": "https://api.github.com/users/josh11b/orgs", "repos_url": "https://api.github.com/users/josh11b/repos", "events_url": "https://api.github.com/users/josh11b/events{/privacy}", "received_events_url": "https://api.github.com/users/josh11b/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2017-11-21T22:32:08Z", "updated_at": "2018-08-24T21:43:11Z", "closed_at": "2018-08-24T21:36:44Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:windows 7 64bit</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip install</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.0</li>\n<li><strong>Python version</strong>: 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>:-</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:-</li>\n<li><strong>CUDA/cuDNN version</strong>:-</li>\n<li><strong>GPU model and memory</strong>:-</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>Running this script (you need some tfrecords from <a href=\"https://www.dropbox.com/sh/wrx8pv546rq4iev/AACER-9HbMxE6T3w9hJdieLCa?dl=0\" rel=\"nofollow\">here</a>):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> os\n<span class=\"pl-k\">import</span> shutil\n<span class=\"pl-k\">import</span> sys\n<span class=\"pl-k\">import</span> tempfile\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ndata_dir <span class=\"pl-k\">=</span> <span class=\"pl-sr\"><span class=\"pl-k\">r</span><span class=\"pl-pds\">'</span>/path/to/tfrecords<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_generate_tfrecords_from_csv</span>():\n    <span class=\"pl-k\">with</span> tempfile.TemporaryDirectory() <span class=\"pl-k\">as</span> tmpdirname:\n        filenames <span class=\"pl-k\">=</span> os.listdir(data_dir)\n        <span class=\"pl-k\">for</span> f <span class=\"pl-k\">in</span> filenames:\n            shutil.copy(os.path.join(data_dir, f), os.path.join(tmpdirname, f))\n        filenames <span class=\"pl-k\">=</span> <span class=\"pl-c1\">sorted</span>([os.path.join(tmpdirname, f) <span class=\"pl-k\">for</span> f <span class=\"pl-k\">in</span> filenames])\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Create a queue that produces the filenames to read.</span>\n        queue <span class=\"pl-k\">=</span> tf.train.string_input_producer(filenames, <span class=\"pl-v\">num_epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>,\n                                               <span class=\"pl-v\">shuffle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n        <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n            sess.run(tf.local_variables_initializer()) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Local !</span>\n            tf.train.start_queue_runners(<span class=\"pl-v\">sess</span><span class=\"pl-k\">=</span>sess)\n            reader <span class=\"pl-k\">=</span> tf.TFRecordReader()\n            <span class=\"pl-k\">for</span> j <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">len</span>(filenames)):\n                key, value <span class=\"pl-k\">=</span> reader.read(queue)\n                features_dict <span class=\"pl-k\">=</span> tf.parse_single_example(value, <span class=\"pl-v\">features</span><span class=\"pl-k\">=</span>{\n                    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>label<span class=\"pl-pds\">'</span></span>: tf.FixedLenFeature([], tf.string),})\n                <span class=\"pl-c\"><span class=\"pl-c\">#</span> the decode call below is needed, if you replace it with</span>\n                <span class=\"pl-c\"><span class=\"pl-c\">#</span> label = tf.constant(0) no files are locked</span>\n                label <span class=\"pl-k\">=</span> tf.decode_raw(features_dict[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>label<span class=\"pl-pds\">'</span></span>], tf.float32)\n                _ <span class=\"pl-k\">=</span> sess.run([label]) <span class=\"pl-c\"><span class=\"pl-c\">#</span> files are locked here</span>\n        listdir <span class=\"pl-k\">=</span> os.listdir(tmpdirname)\n        <span class=\"pl-c1\">print</span>(tmpdirname, listdir)\n        <span class=\"pl-k\">for</span> f <span class=\"pl-k\">in</span> <span class=\"pl-c1\">sorted</span>(listdir):\n            os.remove(os.path.join(tmpdirname, f))\n\n<span class=\"pl-c1\">print</span>(tf.<span class=\"pl-c1\">__version__</span>)\n<span class=\"pl-c1\">print</span>(sys.version)\ntest_generate_tfrecords_from_csv()</pre></div>\n<p>Produces:</p>\n<pre><code>C:\\_\\Python35&gt;python.exe C:\\Users\\MrD\\.PyCharm2017.2\\config\\scratches\\so_46259067.py\n1.4.0\n3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)]\nC:\\Users\\MrD\\AppData\\Local\\Temp\\tmp3hqhkgy0 ['img_2013-01-01-00-00.tfrecords', 'img_2013-01-01-00-01.tfrecords', 'img_2013-01-01-00-02.tfrecords']\nTraceback (most recent call last):\n  File \"C:\\Users\\MrD\\.PyCharm2017.2\\config\\scratches\\so_46259067.py\", line 38, in &lt;module&gt;\n    test_generate_tfrecords_from_csv()\n  File \"C:\\Users\\MrD\\.PyCharm2017.2\\config\\scratches\\so_46259067.py\", line 34, in test_generate_tfrecords_from_csv\n    os.remove(os.path.join(tmpdirname, f))\n  File \"C:\\_\\Python35\\lib\\tempfile.py\", line 808, in __exit__\n    self.cleanup()\n  File \"C:\\_\\Python35\\lib\\tempfile.py\", line 812, in cleanup\n    _shutil.rmtree(self.name)\n  File \"C:\\_\\Python35\\lib\\shutil.py\", line 488, in rmtree\n    return _rmtree_unsafe(path, onerror)\n  File \"C:\\_\\Python35\\lib\\shutil.py\", line 383, in _rmtree_unsafe\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"C:\\_\\Python35\\lib\\shutil.py\", line 381, in _rmtree_unsafe\n    os.unlink(fullname)\nPermissionError: [WinError 5] Access is denied: 'C:\\\\Users\\\\MrD\\\\AppData\\\\Local\\\\Temp\\\\tmp3hqhkgy0\\\\img_2013-01-01-00-02.tfrecords'\n</code></pre>\n<p>(I had also asked at stack overflow <a href=\"https://stackoverflow.com/questions/46259067/tfrecordreader-keeps-files-locked-after-session-closes\" rel=\"nofollow\">here</a>. Unless I am doing something stupid shouldn't the tfrecord file be free for deleting after the session closes ? Do I have to explicitly close it (is it even possible) ?</p>\n<p>The equivalent dataset code has the same issue:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">test_generate_tfrecords_from_csv_dataset</span>():\n    <span class=\"pl-k\">with</span> tempfile.TemporaryDirectory() <span class=\"pl-k\">as</span> tmpdirname:\n        filenames <span class=\"pl-k\">=</span> os.listdir(data_dir)\n        <span class=\"pl-k\">for</span> f <span class=\"pl-k\">in</span> filenames:\n            shutil.copy(os.path.join(data_dir, f), os.path.join(tmpdirname, f))\n        filenames <span class=\"pl-k\">=</span> <span class=\"pl-c1\">sorted</span>([os.path.join(tmpdirname, f) <span class=\"pl-k\">for</span> f <span class=\"pl-k\">in</span> filenames])\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">_parse_rec</span>(<span class=\"pl-smi\">value</span>):\n            features_dict <span class=\"pl-k\">=</span> tf.parse_single_example(value, <span class=\"pl-v\">features</span><span class=\"pl-k\">=</span>{\n                    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>label<span class=\"pl-pds\">'</span></span>: tf.FixedLenFeature([], tf.string),})\n            <span class=\"pl-c\"><span class=\"pl-c\">#</span> return tf.constant(0, tf.float32)  # files are locked all the same</span>\n            <span class=\"pl-k\">return</span> tf.decode_raw(features_dict[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>label<span class=\"pl-pds\">'</span></span>], tf.float32)\n        dataset <span class=\"pl-k\">=</span> tf.data.TFRecordDataset(filenames).map(_parse_rec)\n        get_next <span class=\"pl-k\">=</span> dataset.make_one_shot_iterator().get_next\n        <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n            <span class=\"pl-k\">for</span> j <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">len</span>(filenames)):\n                label <span class=\"pl-k\">=</span> get_next()\n                _ <span class=\"pl-k\">=</span> sess.run([label]) <span class=\"pl-c\"><span class=\"pl-c\">#</span> files are locked here</span>\n        listdir <span class=\"pl-k\">=</span> os.listdir(tmpdirname)\n        <span class=\"pl-c1\">print</span>(tmpdirname, listdir)\n        <span class=\"pl-k\">for</span> f <span class=\"pl-k\">in</span> <span class=\"pl-c1\">sorted</span>(listdir):\n            os.remove(os.path.join(tmpdirname, f))</pre></div>\n<p>It seems in both cases it locks the last file - the others are removed ok.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):windows 7 64bit\nTensorFlow installed from (source or binary): pip install\nTensorFlow version (use command below): 1.4.0\nPython version: 3.5.2\nBazel version (if compiling from source):-\nGCC/Compiler version (if compiling from source):-\nCUDA/cuDNN version:-\nGPU model and memory:-\nExact command to reproduce:\n\nRunning this script (you need some tfrecords from here):\nimport os\nimport shutil\nimport sys\nimport tempfile\n\nimport tensorflow as tf\n\ndata_dir = r'/path/to/tfrecords'\n\ndef test_generate_tfrecords_from_csv():\n    with tempfile.TemporaryDirectory() as tmpdirname:\n        filenames = os.listdir(data_dir)\n        for f in filenames:\n            shutil.copy(os.path.join(data_dir, f), os.path.join(tmpdirname, f))\n        filenames = sorted([os.path.join(tmpdirname, f) for f in filenames])\n        # Create a queue that produces the filenames to read.\n        queue = tf.train.string_input_producer(filenames, num_epochs=1,\n                                               shuffle=False)\n        with tf.Session() as sess:\n            sess.run(tf.local_variables_initializer()) # Local !\n            tf.train.start_queue_runners(sess=sess)\n            reader = tf.TFRecordReader()\n            for j in range(len(filenames)):\n                key, value = reader.read(queue)\n                features_dict = tf.parse_single_example(value, features={\n                    'label': tf.FixedLenFeature([], tf.string),})\n                # the decode call below is needed, if you replace it with\n                # label = tf.constant(0) no files are locked\n                label = tf.decode_raw(features_dict['label'], tf.float32)\n                _ = sess.run([label]) # files are locked here\n        listdir = os.listdir(tmpdirname)\n        print(tmpdirname, listdir)\n        for f in sorted(listdir):\n            os.remove(os.path.join(tmpdirname, f))\n\nprint(tf.__version__)\nprint(sys.version)\ntest_generate_tfrecords_from_csv()\nProduces:\nC:\\_\\Python35>python.exe C:\\Users\\MrD\\.PyCharm2017.2\\config\\scratches\\so_46259067.py\n1.4.0\n3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)]\nC:\\Users\\MrD\\AppData\\Local\\Temp\\tmp3hqhkgy0 ['img_2013-01-01-00-00.tfrecords', 'img_2013-01-01-00-01.tfrecords', 'img_2013-01-01-00-02.tfrecords']\nTraceback (most recent call last):\n  File \"C:\\Users\\MrD\\.PyCharm2017.2\\config\\scratches\\so_46259067.py\", line 38, in <module>\n    test_generate_tfrecords_from_csv()\n  File \"C:\\Users\\MrD\\.PyCharm2017.2\\config\\scratches\\so_46259067.py\", line 34, in test_generate_tfrecords_from_csv\n    os.remove(os.path.join(tmpdirname, f))\n  File \"C:\\_\\Python35\\lib\\tempfile.py\", line 808, in __exit__\n    self.cleanup()\n  File \"C:\\_\\Python35\\lib\\tempfile.py\", line 812, in cleanup\n    _shutil.rmtree(self.name)\n  File \"C:\\_\\Python35\\lib\\shutil.py\", line 488, in rmtree\n    return _rmtree_unsafe(path, onerror)\n  File \"C:\\_\\Python35\\lib\\shutil.py\", line 383, in _rmtree_unsafe\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"C:\\_\\Python35\\lib\\shutil.py\", line 381, in _rmtree_unsafe\n    os.unlink(fullname)\nPermissionError: [WinError 5] Access is denied: 'C:\\\\Users\\\\MrD\\\\AppData\\\\Local\\\\Temp\\\\tmp3hqhkgy0\\\\img_2013-01-01-00-02.tfrecords'\n\n(I had also asked at stack overflow here. Unless I am doing something stupid shouldn't the tfrecord file be free for deleting after the session closes ? Do I have to explicitly close it (is it even possible) ?\nThe equivalent dataset code has the same issue:\ndef test_generate_tfrecords_from_csv_dataset():\n    with tempfile.TemporaryDirectory() as tmpdirname:\n        filenames = os.listdir(data_dir)\n        for f in filenames:\n            shutil.copy(os.path.join(data_dir, f), os.path.join(tmpdirname, f))\n        filenames = sorted([os.path.join(tmpdirname, f) for f in filenames])\n        def _parse_rec(value):\n            features_dict = tf.parse_single_example(value, features={\n                    'label': tf.FixedLenFeature([], tf.string),})\n            # return tf.constant(0, tf.float32)  # files are locked all the same\n            return tf.decode_raw(features_dict['label'], tf.float32)\n        dataset = tf.data.TFRecordDataset(filenames).map(_parse_rec)\n        get_next = dataset.make_one_shot_iterator().get_next\n        with tf.Session() as sess:\n            for j in range(len(filenames)):\n                label = get_next()\n                _ = sess.run([label]) # files are locked here\n        listdir = os.listdir(tmpdirname)\n        print(tmpdirname, listdir)\n        for f in sorted(listdir):\n            os.remove(os.path.join(tmpdirname, f))\nIt seems in both cases it locks the last file - the others are removed ok.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:windows 7 64bit\r\n- **TensorFlow installed from (source or binary)**: pip install\r\n- **TensorFlow version (use command below)**: 1.4.0\r\n- **Python version**: 3.5.2\r\n- **Bazel version (if compiling from source)**:-\r\n- **GCC/Compiler version (if compiling from source)**:-\r\n- **CUDA/cuDNN version**:-\r\n- **GPU model and memory**:-\r\n- **Exact command to reproduce**:\r\n\r\nRunning this script (you need some tfrecords from [here][1]):\r\n\r\n```python\r\nimport os\r\nimport shutil\r\nimport sys\r\nimport tempfile\r\n\r\nimport tensorflow as tf\r\n\r\ndata_dir = r'/path/to/tfrecords'\r\n\r\ndef test_generate_tfrecords_from_csv():\r\n    with tempfile.TemporaryDirectory() as tmpdirname:\r\n        filenames = os.listdir(data_dir)\r\n        for f in filenames:\r\n            shutil.copy(os.path.join(data_dir, f), os.path.join(tmpdirname, f))\r\n        filenames = sorted([os.path.join(tmpdirname, f) for f in filenames])\r\n        # Create a queue that produces the filenames to read.\r\n        queue = tf.train.string_input_producer(filenames, num_epochs=1,\r\n                                               shuffle=False)\r\n        with tf.Session() as sess:\r\n            sess.run(tf.local_variables_initializer()) # Local !\r\n            tf.train.start_queue_runners(sess=sess)\r\n            reader = tf.TFRecordReader()\r\n            for j in range(len(filenames)):\r\n                key, value = reader.read(queue)\r\n                features_dict = tf.parse_single_example(value, features={\r\n                    'label': tf.FixedLenFeature([], tf.string),})\r\n                # the decode call below is needed, if you replace it with\r\n                # label = tf.constant(0) no files are locked\r\n                label = tf.decode_raw(features_dict['label'], tf.float32)\r\n                _ = sess.run([label]) # files are locked here\r\n        listdir = os.listdir(tmpdirname)\r\n        print(tmpdirname, listdir)\r\n        for f in sorted(listdir):\r\n            os.remove(os.path.join(tmpdirname, f))\r\n\r\nprint(tf.__version__)\r\nprint(sys.version)\r\ntest_generate_tfrecords_from_csv()\r\n```\r\n\r\n\r\nProduces:\r\n\r\n\r\n```\r\nC:\\_\\Python35>python.exe C:\\Users\\MrD\\.PyCharm2017.2\\config\\scratches\\so_46259067.py\r\n1.4.0\r\n3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)]\r\nC:\\Users\\MrD\\AppData\\Local\\Temp\\tmp3hqhkgy0 ['img_2013-01-01-00-00.tfrecords', 'img_2013-01-01-00-01.tfrecords', 'img_2013-01-01-00-02.tfrecords']\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\MrD\\.PyCharm2017.2\\config\\scratches\\so_46259067.py\", line 38, in <module>\r\n    test_generate_tfrecords_from_csv()\r\n  File \"C:\\Users\\MrD\\.PyCharm2017.2\\config\\scratches\\so_46259067.py\", line 34, in test_generate_tfrecords_from_csv\r\n    os.remove(os.path.join(tmpdirname, f))\r\n  File \"C:\\_\\Python35\\lib\\tempfile.py\", line 808, in __exit__\r\n    self.cleanup()\r\n  File \"C:\\_\\Python35\\lib\\tempfile.py\", line 812, in cleanup\r\n    _shutil.rmtree(self.name)\r\n  File \"C:\\_\\Python35\\lib\\shutil.py\", line 488, in rmtree\r\n    return _rmtree_unsafe(path, onerror)\r\n  File \"C:\\_\\Python35\\lib\\shutil.py\", line 383, in _rmtree_unsafe\r\n    onerror(os.unlink, fullname, sys.exc_info())\r\n  File \"C:\\_\\Python35\\lib\\shutil.py\", line 381, in _rmtree_unsafe\r\n    os.unlink(fullname)\r\nPermissionError: [WinError 5] Access is denied: 'C:\\\\Users\\\\MrD\\\\AppData\\\\Local\\\\Temp\\\\tmp3hqhkgy0\\\\img_2013-01-01-00-02.tfrecords'\r\n```\r\n\r\n(I had also asked at stack overflow [here](https://stackoverflow.com/questions/46259067/tfrecordreader-keeps-files-locked-after-session-closes). Unless I am doing something stupid shouldn't the tfrecord file be free for deleting after the session closes ? Do I have to explicitly close it (is it even possible) ?\r\n\r\nThe equivalent dataset code has the same issue:\r\n\r\n```python\r\ndef test_generate_tfrecords_from_csv_dataset():\r\n    with tempfile.TemporaryDirectory() as tmpdirname:\r\n        filenames = os.listdir(data_dir)\r\n        for f in filenames:\r\n            shutil.copy(os.path.join(data_dir, f), os.path.join(tmpdirname, f))\r\n        filenames = sorted([os.path.join(tmpdirname, f) for f in filenames])\r\n        def _parse_rec(value):\r\n            features_dict = tf.parse_single_example(value, features={\r\n                    'label': tf.FixedLenFeature([], tf.string),})\r\n            # return tf.constant(0, tf.float32)  # files are locked all the same\r\n            return tf.decode_raw(features_dict['label'], tf.float32)\r\n        dataset = tf.data.TFRecordDataset(filenames).map(_parse_rec)\r\n        get_next = dataset.make_one_shot_iterator().get_next\r\n        with tf.Session() as sess:\r\n            for j in range(len(filenames)):\r\n                label = get_next()\r\n                _ = sess.run([label]) # files are locked here\r\n        listdir = os.listdir(tmpdirname)\r\n        print(tmpdirname, listdir)\r\n        for f in sorted(listdir):\r\n            os.remove(os.path.join(tmpdirname, f))\r\n```\r\n\r\nIt seems in both cases it locks the last file - the others are removed ok.\r\n\r\n  [1]: https://www.dropbox.com/sh/wrx8pv546rq4iev/AACER-9HbMxE6T3w9hJdieLCa?dl=0"}