{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21601", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21601/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21601/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21601/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21601", "id": 350364381, "node_id": "MDU6SXNzdWUzNTAzNjQzODE=", "number": 21601, "title": "Enqueuing tensors by value with tf.add no longer works on 1.10", "user": {"login": "leandro-gracia-gil", "id": 8785797, "node_id": "MDQ6VXNlcjg3ODU3OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8785797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leandro-gracia-gil", "html_url": "https://github.com/leandro-gracia-gil", "followers_url": "https://api.github.com/users/leandro-gracia-gil/followers", "following_url": "https://api.github.com/users/leandro-gracia-gil/following{/other_user}", "gists_url": "https://api.github.com/users/leandro-gracia-gil/gists{/gist_id}", "starred_url": "https://api.github.com/users/leandro-gracia-gil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leandro-gracia-gil/subscriptions", "organizations_url": "https://api.github.com/users/leandro-gracia-gil/orgs", "repos_url": "https://api.github.com/users/leandro-gracia-gil/repos", "events_url": "https://api.github.com/users/leandro-gracia-gil/events{/privacy}", "received_events_url": "https://api.github.com/users/leandro-gracia-gil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-08-14T10:13:14Z", "updated_at": "2018-11-14T19:25:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes (see snippet below)</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.10.0-0-g656e7a2 1.10.0</li>\n<li><strong>Python version</strong>: 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.16.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.2</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>: See below.</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>There seems to be a possible regression affecting the use of tf.add to enqueue tensors by value instead of by reference within a same device. Check the following snippet.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>v<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)\n  sess.run(v.assign(<span class=\"pl-c1\">123</span>))\n  q <span class=\"pl-k\">=</span> tf.FIFOQueue(<span class=\"pl-c1\">10</span>, tf.int32)\n  sess.run(q.enqueue(tf.add(v, <span class=\"pl-c1\">0</span>)))\n  sess.run(v.assign(<span class=\"pl-c1\">456</span>))\n  <span class=\"pl-c1\">print</span>(sess.run(q.dequeue()))</pre></div>\n<p>In previous versions of TensorFlow (last checked was probably 1.8) the above snippet returned 123 since the value of the variable was copied when enqueued thanks to the use of tf.add. However, on TensorFlow 1.10 the snippet returns 456 if using a tf.Session block and 123 if using a tf.InteractiveSession. Enabling or disabling GPU with CUDA_VISIBLE_DEVICES does not seem to affect.</p>\n<p>Is this an intentional change of behavior? If so, is there any new or better way to enqueue tensors by value instead of by reference?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes (see snippet below)\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): v1.10.0-0-g656e7a2 1.10.0\nPython version: 3.5.2\nBazel version (if compiling from source): 0.16.0\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: 9.2\nGPU model and memory:\nExact command to reproduce: See below.\n\nDescribe the problem\nThere seems to be a possible regression affecting the use of tf.add to enqueue tensors by value instead of by reference within a same device. Check the following snippet.\nimport tensorflow as tf\n\nwith tf.Session() as sess:\n  v = tf.get_variable('v', shape=(), dtype=tf.int32)\n  sess.run(v.assign(123))\n  q = tf.FIFOQueue(10, tf.int32)\n  sess.run(q.enqueue(tf.add(v, 0)))\n  sess.run(v.assign(456))\n  print(sess.run(q.dequeue()))\nIn previous versions of TensorFlow (last checked was probably 1.8) the above snippet returned 123 since the value of the variable was copied when enqueued thanks to the use of tf.add. However, on TensorFlow 1.10 the snippet returns 456 if using a tf.Session block and 123 if using a tf.InteractiveSession. Enabling or disabling GPU with CUDA_VISIBLE_DEVICES does not seem to affect.\nIs this an intentional change of behavior? If so, is there any new or better way to enqueue tensors by value instead of by reference?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes (see snippet below)\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: v1.10.0-0-g656e7a2 1.10.0\r\n- **Python version**: 3.5.2\r\n- **Bazel version (if compiling from source)**: 0.16.0\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: 9.2\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**: See below.\r\n\r\n\r\n### Describe the problem\r\nThere seems to be a possible regression affecting the use of tf.add to enqueue tensors by value instead of by reference within a same device. Check the following snippet.\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.Session() as sess:\r\n  v = tf.get_variable('v', shape=(), dtype=tf.int32)\r\n  sess.run(v.assign(123))\r\n  q = tf.FIFOQueue(10, tf.int32)\r\n  sess.run(q.enqueue(tf.add(v, 0)))\r\n  sess.run(v.assign(456))\r\n  print(sess.run(q.dequeue()))\r\n```\r\n\r\nIn previous versions of TensorFlow (last checked was probably 1.8) the above snippet returned 123 since the value of the variable was copied when enqueued thanks to the use of tf.add. However, on TensorFlow 1.10 the snippet returns 456 if using a tf.Session block and 123 if using a tf.InteractiveSession. Enabling or disabling GPU with CUDA_VISIBLE_DEVICES does not seem to affect.\r\n\r\nIs this an intentional change of behavior? If so, is there any new or better way to enqueue tensors by value instead of by reference?"}