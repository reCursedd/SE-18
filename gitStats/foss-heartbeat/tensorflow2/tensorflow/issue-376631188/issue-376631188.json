{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23445", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23445/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23445/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23445/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/23445", "id": 376631188, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3ODA1MTU4", "number": 23445, "title": "Make tf.case work in eager mode with dict inputs", "user": {"login": "frreiss", "id": 12436991, "node_id": "MDQ6VXNlcjEyNDM2OTkx", "avatar_url": "https://avatars1.githubusercontent.com/u/12436991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frreiss", "html_url": "https://github.com/frreiss", "followers_url": "https://api.github.com/users/frreiss/followers", "following_url": "https://api.github.com/users/frreiss/following{/other_user}", "gists_url": "https://api.github.com/users/frreiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/frreiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frreiss/subscriptions", "organizations_url": "https://api.github.com/users/frreiss/orgs", "repos_url": "https://api.github.com/users/frreiss/repos", "events_url": "https://api.github.com/users/frreiss/events{/privacy}", "received_events_url": "https://api.github.com/users/frreiss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}, {"id": 987666414, "node_id": "MDU6TGFiZWw5ODc2NjY0MTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/ready%20to%20pull", "name": "ready to pull", "color": "2cd643", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "akshaym", "id": 122911, "node_id": "MDQ6VXNlcjEyMjkxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/122911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akshaym", "html_url": "https://github.com/akshaym", "followers_url": "https://api.github.com/users/akshaym/followers", "following_url": "https://api.github.com/users/akshaym/following{/other_user}", "gists_url": "https://api.github.com/users/akshaym/gists{/gist_id}", "starred_url": "https://api.github.com/users/akshaym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akshaym/subscriptions", "organizations_url": "https://api.github.com/users/akshaym/orgs", "repos_url": "https://api.github.com/users/akshaym/repos", "events_url": "https://api.github.com/users/akshaym/events{/privacy}", "received_events_url": "https://api.github.com/users/akshaym/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "akshaym", "id": 122911, "node_id": "MDQ6VXNlcjEyMjkxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/122911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akshaym", "html_url": "https://github.com/akshaym", "followers_url": "https://api.github.com/users/akshaym/followers", "following_url": "https://api.github.com/users/akshaym/following{/other_user}", "gists_url": "https://api.github.com/users/akshaym/gists{/gist_id}", "starred_url": "https://api.github.com/users/akshaym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akshaym/subscriptions", "organizations_url": "https://api.github.com/users/akshaym/orgs", "repos_url": "https://api.github.com/users/akshaym/repos", "events_url": "https://api.github.com/users/akshaym/events{/privacy}", "received_events_url": "https://api.github.com/users/akshaym/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-11-02T01:15:03Z", "updated_at": "2018-11-08T22:09:22Z", "closed_at": "2018-11-08T22:09:22Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23445", "html_url": "https://github.com/tensorflow/tensorflow/pull/23445", "diff_url": "https://github.com/tensorflow/tensorflow/pull/23445.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/23445.patch"}, "body_html": "<p><code>tf.case</code> does not work in eager mode if the caller passes an unordered dictionary of predicate function pairs. In particular, the example code in the API documentation for <code>tf.case</code> doesn't run in eager mode:</p>\n<pre><code>In [1]: import tensorflow as tf \n   ...: tf.enable_eager_execution() \n   ...: (x,y,z) = (1,2,3) \n   ...: def f1(): return tf.constant(17) \n   ...: def f2(): return tf.constant(23) \n   ...: def f3(): return tf.constant(-1) \n   ...: tf.case({tf.less(x, y): f1, tf.greater(x, z): f2}, \n   ...:         default=f3, exclusive=True)                                     \n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n[stack trace]\n~/temp/testenv/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in name(self)\n    950   def name(self):\n    951     raise AttributeError(\n--&gt; 952         \"Tensor.name is meaningless when eager execution is enabled.\")\n    953 \n    954   @property\n\nAttributeError: Tensor.name is meaningless when eager execution is enabled.\n</code></pre>\n<p>The reason for this problem is that <code>tf.case</code> uses the names of the predicate ops to define the sort order of the predicates. This sort order is needed to make the op have deterministic behavior when <code>exclusive=False</code>.</p>\n<p>This PR modifies <code>tf.case</code> so that, if the user passes an unordered dictionary for the <code>pred_fn_pairs</code>, and eager mode is enabled, and the <code>exclusive</code> argument is set to <code>True</code>; then <code>tf.case</code> will evaluate all the predicates in dictionary traversal order.</p>\n<p>If <code>pred_fn_pairs</code> is an unordered dictionary, and eager mode is enabled, and the <code>exclusive</code> argument is <code>False</code>; the new code throws an exception. The traversal order of unordered dictionaries is not deterministic on versions of Python before 3.6.</p>\n<p>I also updated the API docs and fixed a few typos in the docs.</p>", "body_text": "tf.case does not work in eager mode if the caller passes an unordered dictionary of predicate function pairs. In particular, the example code in the API documentation for tf.case doesn't run in eager mode:\nIn [1]: import tensorflow as tf \n   ...: tf.enable_eager_execution() \n   ...: (x,y,z) = (1,2,3) \n   ...: def f1(): return tf.constant(17) \n   ...: def f2(): return tf.constant(23) \n   ...: def f3(): return tf.constant(-1) \n   ...: tf.case({tf.less(x, y): f1, tf.greater(x, z): f2}, \n   ...:         default=f3, exclusive=True)                                     \n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n[stack trace]\n~/temp/testenv/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in name(self)\n    950   def name(self):\n    951     raise AttributeError(\n--> 952         \"Tensor.name is meaningless when eager execution is enabled.\")\n    953 \n    954   @property\n\nAttributeError: Tensor.name is meaningless when eager execution is enabled.\n\nThe reason for this problem is that tf.case uses the names of the predicate ops to define the sort order of the predicates. This sort order is needed to make the op have deterministic behavior when exclusive=False.\nThis PR modifies tf.case so that, if the user passes an unordered dictionary for the pred_fn_pairs, and eager mode is enabled, and the exclusive argument is set to True; then tf.case will evaluate all the predicates in dictionary traversal order.\nIf pred_fn_pairs is an unordered dictionary, and eager mode is enabled, and the exclusive argument is False; the new code throws an exception. The traversal order of unordered dictionaries is not deterministic on versions of Python before 3.6.\nI also updated the API docs and fixed a few typos in the docs.", "body": "`tf.case` does not work in eager mode if the caller passes an unordered dictionary of predicate function pairs. In particular, the example code in the API documentation for `tf.case` doesn't run in eager mode:\r\n\r\n```\r\nIn [1]: import tensorflow as tf \r\n   ...: tf.enable_eager_execution() \r\n   ...: (x,y,z) = (1,2,3) \r\n   ...: def f1(): return tf.constant(17) \r\n   ...: def f2(): return tf.constant(23) \r\n   ...: def f3(): return tf.constant(-1) \r\n   ...: tf.case({tf.less(x, y): f1, tf.greater(x, z): f2}, \r\n   ...:         default=f3, exclusive=True)                                     \r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n[stack trace]\r\n~/temp/testenv/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in name(self)\r\n    950   def name(self):\r\n    951     raise AttributeError(\r\n--> 952         \"Tensor.name is meaningless when eager execution is enabled.\")\r\n    953 \r\n    954   @property\r\n\r\nAttributeError: Tensor.name is meaningless when eager execution is enabled.\r\n```\r\n\r\nThe reason for this problem is that `tf.case` uses the names of the predicate ops to define the sort order of the predicates. This sort order is needed to make the op have deterministic behavior when `exclusive=False`.\r\n\r\nThis PR modifies `tf.case` so that, if the user passes an unordered dictionary for the `pred_fn_pairs`, and eager mode is enabled, and the `exclusive` argument is set to `True`; then `tf.case` will evaluate all the predicates in dictionary traversal order.\r\n\r\nIf `pred_fn_pairs` is an unordered dictionary, and eager mode is enabled, and the `exclusive` argument is `False`; the new code throws an exception. The traversal order of unordered dictionaries is not deterministic on versions of Python before 3.6.\r\n\r\nI also updated the API docs and fixed a few typos in the docs."}