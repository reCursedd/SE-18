{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/377276561", "html_url": "https://github.com/tensorflow/tensorflow/issues/15919#issuecomment-377276561", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15919", "id": 377276561, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzI3NjU2MQ==", "user": {"login": "foges", "id": 1754288, "node_id": "MDQ6VXNlcjE3NTQyODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1754288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foges", "html_url": "https://github.com/foges", "followers_url": "https://api.github.com/users/foges/followers", "following_url": "https://api.github.com/users/foges/following{/other_user}", "gists_url": "https://api.github.com/users/foges/gists{/gist_id}", "starred_url": "https://api.github.com/users/foges/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foges/subscriptions", "organizations_url": "https://api.github.com/users/foges/orgs", "repos_url": "https://api.github.com/users/foges/repos", "events_url": "https://api.github.com/users/foges/events{/privacy}", "received_events_url": "https://api.github.com/users/foges/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-29T15:38:17Z", "updated_at": "2018-03-29T15:38:17Z", "author_association": "NONE", "body_html": "<p>I've run into this issue. Using a python bool for the <code>training</code> argument works, but as soon as I replace it with a tf.placeholder I get a <code>nan</code> loss.</p>\n<p>Have I written custom code: Yes<br>\nOS Platform and Distribution: Ubuntu<br>\nTensorFlow installed from: <a href=\"https://www.tensorflow.org/install/install_linux\" rel=\"nofollow\">https://www.tensorflow.org/install/install_linux</a><br>\nTensorFlow version: 1.6<br>\nBazel version: N/A<br>\nCUDA/cuDNN version: N/A<br>\nGPU model and memory: N/A<br>\nExact command to reproduce:</p>\n<pre><code>  training = tf.placeholder(tf.bool, [])\n  ...\n  node = tf.layers.batch_normalization(node, training=training)\n  ...\n  update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS, scope='mynet')\n  with tf.control_dependencies(update_ops):\n      loss, train_step = loss_fn(label, prediction)\n  ...\n  # train\n  train_loss, _ = sess.run([loss, train_step], feed_dict={training: True, ...})\n  print('Train loss: {}'.format(train_loss))  # &lt;- 'Train loss: 0.9273328\n\n  # evaluate\n  test_loss = sess.run([loss], feed_dict={training: False, ...})\n  print('Test loss: {}'.format(test_loss))  # &lt;-  'Test loss: nan'\n</code></pre>", "body_text": "I've run into this issue. Using a python bool for the training argument works, but as soon as I replace it with a tf.placeholder I get a nan loss.\nHave I written custom code: Yes\nOS Platform and Distribution: Ubuntu\nTensorFlow installed from: https://www.tensorflow.org/install/install_linux\nTensorFlow version: 1.6\nBazel version: N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce:\n  training = tf.placeholder(tf.bool, [])\n  ...\n  node = tf.layers.batch_normalization(node, training=training)\n  ...\n  update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS, scope='mynet')\n  with tf.control_dependencies(update_ops):\n      loss, train_step = loss_fn(label, prediction)\n  ...\n  # train\n  train_loss, _ = sess.run([loss, train_step], feed_dict={training: True, ...})\n  print('Train loss: {}'.format(train_loss))  # <- 'Train loss: 0.9273328\n\n  # evaluate\n  test_loss = sess.run([loss], feed_dict={training: False, ...})\n  print('Test loss: {}'.format(test_loss))  # <-  'Test loss: nan'", "body": "I've run into this issue. Using a python bool for the `training` argument works, but as soon as I replace it with a tf.placeholder I get a `nan` loss. \r\n\r\nHave I written custom code: Yes\r\nOS Platform and Distribution: Ubuntu\r\nTensorFlow installed from: https://www.tensorflow.org/install/install_linux\r\nTensorFlow version: 1.6\r\nBazel version: N/A\r\nCUDA/cuDNN version: N/A\r\nGPU model and memory: N/A\r\nExact command to reproduce:\r\n```\r\n  training = tf.placeholder(tf.bool, [])\r\n  ...\r\n  node = tf.layers.batch_normalization(node, training=training)\r\n  ...\r\n  update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS, scope='mynet')\r\n  with tf.control_dependencies(update_ops):\r\n      loss, train_step = loss_fn(label, prediction)\r\n  ...\r\n  # train\r\n  train_loss, _ = sess.run([loss, train_step], feed_dict={training: True, ...})\r\n  print('Train loss: {}'.format(train_loss))  # <- 'Train loss: 0.9273328\r\n\r\n  # evaluate\r\n  test_loss = sess.run([loss], feed_dict={training: False, ...})\r\n  print('Test loss: {}'.format(test_loss))  # <-  'Test loss: nan'\r\n```"}