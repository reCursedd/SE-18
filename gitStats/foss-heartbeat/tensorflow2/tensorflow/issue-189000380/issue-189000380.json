{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5588", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5588/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5588/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5588/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5588", "id": 189000380, "node_id": "MDU6SXNzdWUxODkwMDAzODA=", "number": 5588, "title": "bidirectional_dynamic_rnn: make sequence length optional", "user": {"login": "cbockman", "id": 4667922, "node_id": "MDQ6VXNlcjQ2Njc5MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4667922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbockman", "html_url": "https://github.com/cbockman", "followers_url": "https://api.github.com/users/cbockman/followers", "following_url": "https://api.github.com/users/cbockman/following{/other_user}", "gists_url": "https://api.github.com/users/cbockman/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbockman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbockman/subscriptions", "organizations_url": "https://api.github.com/users/cbockman/orgs", "repos_url": "https://api.github.com/users/cbockman/repos", "events_url": "https://api.github.com/users/cbockman/events{/privacy}", "received_events_url": "https://api.github.com/users/cbockman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-11-13T22:35:39Z", "updated_at": "2018-03-17T05:55:42Z", "closed_at": "2017-03-05T00:58:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Qualifier: very new to TF, so I may be missing something very obvious.  If so, apologies.</p>\n<p>DOCUMENTATION:</p>\n<p>Is a little conflicting:</p>\n<p>\"sequence_length: An int32/int64 vector, size [batch_size], containing the actual lengths for each of the sequences.\" &lt;-- implies sequence_length is required</p>\n<p>However...</p>\n<p>\"The initial state for both directions is zero by default (but can be set optionally) and no intermediate states are ever returned -- the network is fully unrolled for the given (passed in) length(s) of the sequence(s) or completely unrolled if length(s) is not given.\" &lt;-- implies sequence_length is not required.</p>\n<p>FUNCTIONALITY\"</p>\n<p>Base on the function itself (\"<em>dynamic</em>\"), I would assume that allowing sequence_length=None is intended (although, in either case, the documentation should be straightened out).</p>\n<p>Assuming we do want to allow seq_length=None, the offending portion within bidirectional_dynamic_rnn would appear to be:</p>\n<p>inputs_reverse = array_ops.reverse_sequence(...seq_lengths=sequence_length...)</p>\n<p>reverse_sequence appears to require seq_lengths != None</p>\n<p>Oddly enough, bidirectional_rnn may(?) be robust to this problem, as it uses _reverse_seq, which handles lengths=None.</p>\n<p>That said, I haven't tested this extensively, as I'm of course not 100% sure I've interpreted the above correctly and as to what the intended functionality is.</p>\n<p>Given guidance, I could take a stab at a pull request to address the above.  Or maybe this is a quick fix/known issue (or non-issue...).</p>", "body_text": "Qualifier: very new to TF, so I may be missing something very obvious.  If so, apologies.\nDOCUMENTATION:\nIs a little conflicting:\n\"sequence_length: An int32/int64 vector, size [batch_size], containing the actual lengths for each of the sequences.\" <-- implies sequence_length is required\nHowever...\n\"The initial state for both directions is zero by default (but can be set optionally) and no intermediate states are ever returned -- the network is fully unrolled for the given (passed in) length(s) of the sequence(s) or completely unrolled if length(s) is not given.\" <-- implies sequence_length is not required.\nFUNCTIONALITY\"\nBase on the function itself (\"dynamic\"), I would assume that allowing sequence_length=None is intended (although, in either case, the documentation should be straightened out).\nAssuming we do want to allow seq_length=None, the offending portion within bidirectional_dynamic_rnn would appear to be:\ninputs_reverse = array_ops.reverse_sequence(...seq_lengths=sequence_length...)\nreverse_sequence appears to require seq_lengths != None\nOddly enough, bidirectional_rnn may(?) be robust to this problem, as it uses _reverse_seq, which handles lengths=None.\nThat said, I haven't tested this extensively, as I'm of course not 100% sure I've interpreted the above correctly and as to what the intended functionality is.\nGiven guidance, I could take a stab at a pull request to address the above.  Or maybe this is a quick fix/known issue (or non-issue...).", "body": "Qualifier: very new to TF, so I may be missing something very obvious.  If so, apologies.\r\n\r\nDOCUMENTATION: \r\n\r\nIs a little conflicting:\r\n\r\n\"sequence_length: An int32/int64 vector, size [batch_size], containing the actual lengths for each of the sequences.\" <-- implies sequence_length is required\r\n\r\nHowever...\r\n\r\n\"The initial state for both directions is zero by default (but can be set optionally) and no intermediate states are ever returned -- the network is fully unrolled for the given (passed in) length(s) of the sequence(s) or completely unrolled if length(s) is not given.\" <-- implies sequence_length is not required.\r\n\r\nFUNCTIONALITY\"\r\n\r\nBase on the function itself (\"_dynamic_\"), I would assume that allowing sequence_length=None is intended (although, in either case, the documentation should be straightened out).\r\n\r\nAssuming we do want to allow seq_length=None, the offending portion within bidirectional_dynamic_rnn would appear to be:\r\n\r\ninputs_reverse = array_ops.reverse_sequence(...seq_lengths=sequence_length...)\r\n\r\nreverse_sequence appears to require seq_lengths != None\r\n\r\nOddly enough, bidirectional_rnn may(?) be robust to this problem, as it uses _reverse_seq, which handles lengths=None.  \r\n\r\nThat said, I haven't tested this extensively, as I'm of course not 100% sure I've interpreted the above correctly and as to what the intended functionality is.\r\n\r\nGiven guidance, I could take a stab at a pull request to address the above.  Or maybe this is a quick fix/known issue (or non-issue...).\r\n\r\n"}