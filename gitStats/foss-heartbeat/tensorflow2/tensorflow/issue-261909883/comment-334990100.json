{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/334990100", "html_url": "https://github.com/tensorflow/tensorflow/issues/13429#issuecomment-334990100", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13429", "id": 334990100, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDk5MDEwMA==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-08T07:59:57Z", "updated_at": "2017-10-08T08:48:22Z", "author_association": "MEMBER", "body_html": "<p>Hi, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=684901\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lukaszkaiser\">@lukaszkaiser</a> , let's discuss here. (cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=710255\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fchollet\">@fchollet</a> , <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> who I believe might be interested in the issue.)</p>\n<p>I found that the bug roots from an unexpected behavior from <code>variable_scope</code>, which always creates a new <code>name_scope</code> when it is opened (or re-entered). <a href=\"https://github.com/tensorflow/tensorflow/blob/97bcc65e4c218ec9e1af1c9353cb8aa0d84b7014/tensorflow/python/ops/variable_scope.py#L1785\">see code here</a>. This is a simple example from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"194303257\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/6189\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/6189/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/6189\">#6189</a>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> scope:\n    v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>v<span class=\"pl-pds\">'</span></span>, [], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.constant_initializer(<span class=\"pl-c1\">42</span>., tf.float32))\n<span class=\"pl-k\">with</span> tf.variable_scope(scope):\n    w <span class=\"pl-k\">=</span> v <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\n<span class=\"pl-c1\">print</span>(w.name)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> expected: a/mul:0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>result:  'a_1/mul:0'</span></pre></div>\n<p>At the first glance, I believe it is a bug (that's what PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"263342208\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13518\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/13518/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/13518\">#13518</a> is opened to fix) until those test cases are found:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/a1ab2a3b5263c535bfece377f1bdd77c7ade3240/tensorflow/python/kernel_tests/variable_scope_test.py#L364-L371\">tensorflow/tensorflow/python/kernel_tests/variable_scope_test.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 364 to 371\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/a1ab2a3b5263c535bfece377f1bdd77c7ade3240\">a1ab2a3</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L364\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"364\"></td>\n          <td id=\"LC364\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">with</span> variable_scope.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tower<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> tower: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L365\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"365\"></td>\n          <td id=\"LC365\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">with</span> ops.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scope2<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> sc2: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L366\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"366\"></td>\n          <td id=\"LC366\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>.assertEqual(sc2, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testVarScopeNameScope1/tower/scope2/<span class=\"pl-pds\">\"</span></span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L367\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"367\"></td>\n          <td id=\"LC367\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> context.in_graph_mode(): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L368\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"368\"></td>\n          <td id=\"LC368\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">with</span> variable_scope.variable_scope( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L369\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"369\"></td>\n          <td id=\"LC369\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       tower):  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Re-entering acts like another \"tower\".</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L370\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"370\"></td>\n          <td id=\"LC370\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">with</span> ops.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scope2<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> sc2: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L371\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"371\"></td>\n          <td id=\"LC371\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c1\">self</span>.assertEqual(sc2, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testVarScopeNameScope1/tower_1/scope2/<span class=\"pl-pds\">\"</span></span>) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>The confusing behavior seems designed on purpose for tensorflow, and introduced from <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/79d872ef79a9a9f57dfcd82e3068b1d8bd9fe392/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/79d872ef79a9a9f57dfcd82e3068b1d8bd9fe392\"><tt>79d872e</tt></a> (if I\u2019m not mistaken with <code>git blame</code>).  Could <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=684901\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lukaszkaiser\">@lukaszkaiser</a>, if you know, give more details? Might we correct the unexpected behavior? Thanks.</p>", "body_text": "Hi, @lukaszkaiser , let's discuss here. (cc @fchollet , @ebrevdo who I believe might be interested in the issue.)\nI found that the bug roots from an unexpected behavior from variable_scope, which always creates a new name_scope when it is opened (or re-entered). see code here. This is a simple example from #6189:\nwith tf.variable_scope('a') as scope:\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\nwith tf.variable_scope(scope):\n    w = v * 2\nprint(w.name)    # expected: a/mul:0\n#result:  'a_1/mul:0'\nAt the first glance, I believe it is a bug (that's what PR #13518 is opened to fix) until those test cases are found:\n\n  \n    \n      tensorflow/tensorflow/python/kernel_tests/variable_scope_test.py\n    \n    \n        Lines 364 to 371\n      in\n      a1ab2a3\n    \n    \n    \n    \n\n        \n          \n           with variable_scope.variable_scope(\"tower\") as tower: \n        \n\n        \n          \n             with ops.name_scope(\"scope2\") as sc2: \n        \n\n        \n          \n               self.assertEqual(sc2, \"testVarScopeNameScope1/tower/scope2/\") \n        \n\n        \n          \n           if context.in_graph_mode(): \n        \n\n        \n          \n             with variable_scope.variable_scope( \n        \n\n        \n          \n                 tower):  # Re-entering acts like another \"tower\". \n        \n\n        \n          \n               with ops.name_scope(\"scope2\") as sc2: \n        \n\n        \n          \n                 self.assertEqual(sc2, \"testVarScopeNameScope1/tower_1/scope2/\") \n        \n    \n  \n\n\nThe confusing behavior seems designed on purpose for tensorflow, and introduced from 79d872e (if I\u2019m not mistaken with git blame).  Could @lukaszkaiser, if you know, give more details? Might we correct the unexpected behavior? Thanks.", "body": "Hi, @lukaszkaiser , let's discuss here. (cc @fchollet , @ebrevdo who I believe might be interested in the issue.) \r\n\r\nI found that the bug roots from an unexpected behavior from `variable_scope`, which always creates a new `name_scope` when it is opened (or re-entered). [see code here](https://github.com/tensorflow/tensorflow/blob/97bcc65e4c218ec9e1af1c9353cb8aa0d84b7014/tensorflow/python/ops/variable_scope.py#L1785). This is a simple example from #6189:\r\n\r\n```python\r\nwith tf.variable_scope('a') as scope:\r\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\r\nwith tf.variable_scope(scope):\r\n    w = v * 2\r\nprint(w.name)    # expected: a/mul:0\r\n#result:  'a_1/mul:0'\r\n```\r\n\r\nAt the first glance, I believe it is a bug (that's what PR #13518 is opened to fix) until those test cases are found:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/a1ab2a3b5263c535bfece377f1bdd77c7ade3240/tensorflow/python/kernel_tests/variable_scope_test.py#L364-L371\r\n\r\nThe confusing behavior seems designed on purpose for tensorflow, and introduced from 79d872ef79a9a9f57dfcd82e3068b1d8bd9fe392 (if I\u2019m not mistaken with `git blame`).  Could @lukaszkaiser, if you know, give more details? Might we correct the unexpected behavior? Thanks."}