{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/336597851", "html_url": "https://github.com/tensorflow/tensorflow/issues/13429#issuecomment-336597851", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13429", "id": 336597851, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjU5Nzg1MQ==", "user": {"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-14T00:53:56Z", "updated_at": "2017-10-14T00:53:56Z", "author_association": "MEMBER", "body_html": "<p>Ah, this is a different problem, I see. Here is the summary: the first time you create a scope with default_name everything works fine, right? The second time, it creates a new variable_scope name <code>a_1</code> (it's done here: <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/variable_scope.py#L1827\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/variable_scope.py#L1827</a>).</p>\n<p>The problem after that is that <code>name_scope</code> cannot re-open the scope <code>a_1</code> any more because it was already used in the previous call. So it increments it again, creating <code>a_2</code>, the new name scope. Which is preserved by <code>original_name_scope</code>.</p>\n<p>So the problem would be that by entering a variable scope we create a name scope that's grabbing a name, even if it's empty and there's another re-opened name_scope just after that. One solution could be to try to prevent that somehow by checking things in the name_scope handler. Or adding functionality to clean up the reserved names if name_scope is empty. In all cases, it seems like it could be handled by changes to name_scope without touching variable_scope -- which is good, since this doesn't risk breaking compatibility.</p>", "body_text": "Ah, this is a different problem, I see. Here is the summary: the first time you create a scope with default_name everything works fine, right? The second time, it creates a new variable_scope name a_1 (it's done here: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/variable_scope.py#L1827).\nThe problem after that is that name_scope cannot re-open the scope a_1 any more because it was already used in the previous call. So it increments it again, creating a_2, the new name scope. Which is preserved by original_name_scope.\nSo the problem would be that by entering a variable scope we create a name scope that's grabbing a name, even if it's empty and there's another re-opened name_scope just after that. One solution could be to try to prevent that somehow by checking things in the name_scope handler. Or adding functionality to clean up the reserved names if name_scope is empty. In all cases, it seems like it could be handled by changes to name_scope without touching variable_scope -- which is good, since this doesn't risk breaking compatibility.", "body": "Ah, this is a different problem, I see. Here is the summary: the first time you create a scope with default_name everything works fine, right? The second time, it creates a new variable_scope name `a_1` (it's done here: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/variable_scope.py#L1827).\r\n\r\nThe problem after that is that `name_scope` cannot re-open the scope `a_1` any more because it was already used in the previous call. So it increments it again, creating `a_2`, the new name scope. Which is preserved by `original_name_scope`.\r\n\r\nSo the problem would be that by entering a variable scope we create a name scope that's grabbing a name, even if it's empty and there's another re-opened name_scope just after that. One solution could be to try to prevent that somehow by checking things in the name_scope handler. Or adding functionality to clean up the reserved names if name_scope is empty. In all cases, it seems like it could be handled by changes to name_scope without touching variable_scope -- which is good, since this doesn't risk breaking compatibility."}