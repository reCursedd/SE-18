{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5527", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5527/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5527/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5527/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5527", "id": 188604190, "node_id": "MDU6SXNzdWUxODg2MDQxOTA=", "number": 5527, "title": "Inaccuracies in tf.reduce_sum", "user": {"login": "zergylord", "id": 2257125, "node_id": "MDQ6VXNlcjIyNTcxMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2257125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zergylord", "html_url": "https://github.com/zergylord", "followers_url": "https://api.github.com/users/zergylord/followers", "following_url": "https://api.github.com/users/zergylord/following{/other_user}", "gists_url": "https://api.github.com/users/zergylord/gists{/gist_id}", "starred_url": "https://api.github.com/users/zergylord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zergylord/subscriptions", "organizations_url": "https://api.github.com/users/zergylord/orgs", "repos_url": "https://api.github.com/users/zergylord/repos", "events_url": "https://api.github.com/users/zergylord/events{/privacy}", "received_events_url": "https://api.github.com/users/zergylord/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "benoitsteiner", "id": 6969686, "node_id": "MDQ6VXNlcjY5Njk2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6969686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benoitsteiner", "html_url": "https://github.com/benoitsteiner", "followers_url": "https://api.github.com/users/benoitsteiner/followers", "following_url": "https://api.github.com/users/benoitsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/benoitsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benoitsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benoitsteiner/subscriptions", "organizations_url": "https://api.github.com/users/benoitsteiner/orgs", "repos_url": "https://api.github.com/users/benoitsteiner/repos", "events_url": "https://api.github.com/users/benoitsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/benoitsteiner/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "benoitsteiner", "id": 6969686, "node_id": "MDQ6VXNlcjY5Njk2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6969686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benoitsteiner", "html_url": "https://github.com/benoitsteiner", "followers_url": "https://api.github.com/users/benoitsteiner/followers", "following_url": "https://api.github.com/users/benoitsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/benoitsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benoitsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benoitsteiner/subscriptions", "organizations_url": "https://api.github.com/users/benoitsteiner/orgs", "repos_url": "https://api.github.com/users/benoitsteiner/repos", "events_url": "https://api.github.com/users/benoitsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/benoitsteiner/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2016-11-10T20:00:51Z", "updated_at": "2017-06-16T18:11:34Z", "closed_at": "2017-06-16T18:11:34Z", "author_association": "NONE", "body_html": "<p>I've been trying to normalize some vectors by dividing by their sum, but have noticed that this doesn't always result in vectors that sum to one.</p>\n<p>For example:</p>\n<pre><code>foo = np.random.rand(100)*100 #random floats between 0-100\nprint(sess.run(tf.reduce_sum(foo/tf.reduce_sum(foo)))) #should return 1\nprint((foo/foo.sum()).sum()) #does return 1\n</code></pre>\n<p>While I realize that this is possible with finite precision floating point operations, I find it odd how readily it occurs, especially when the same operation in numpy doesn't encounter this issue. Is this a known issue? I've also noticed that tf.nn.softmax doesn't appear to suffer from this problem, is there a different op I need to use to ensure proper normalization?</p>", "body_text": "I've been trying to normalize some vectors by dividing by their sum, but have noticed that this doesn't always result in vectors that sum to one.\nFor example:\nfoo = np.random.rand(100)*100 #random floats between 0-100\nprint(sess.run(tf.reduce_sum(foo/tf.reduce_sum(foo)))) #should return 1\nprint((foo/foo.sum()).sum()) #does return 1\n\nWhile I realize that this is possible with finite precision floating point operations, I find it odd how readily it occurs, especially when the same operation in numpy doesn't encounter this issue. Is this a known issue? I've also noticed that tf.nn.softmax doesn't appear to suffer from this problem, is there a different op I need to use to ensure proper normalization?", "body": "I've been trying to normalize some vectors by dividing by their sum, but have noticed that this doesn't always result in vectors that sum to one. \r\n\r\nFor example:\r\n\r\n```\r\nfoo = np.random.rand(100)*100 #random floats between 0-100\r\nprint(sess.run(tf.reduce_sum(foo/tf.reduce_sum(foo)))) #should return 1\r\nprint((foo/foo.sum()).sum()) #does return 1\r\n```\r\n\r\nWhile I realize that this is possible with finite precision floating point operations, I find it odd how readily it occurs, especially when the same operation in numpy doesn't encounter this issue. Is this a known issue? I've also noticed that tf.nn.softmax doesn't appear to suffer from this problem, is there a different op I need to use to ensure proper normalization?"}