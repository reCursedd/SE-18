{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/304210166", "html_url": "https://github.com/tensorflow/tensorflow/issues/367#issuecomment-304210166", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/367", "id": 304210166, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDIxMDE2Ng==", "user": {"login": "harpone", "id": 5112840, "node_id": "MDQ6VXNlcjUxMTI4NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5112840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harpone", "html_url": "https://github.com/harpone", "followers_url": "https://api.github.com/users/harpone/followers", "following_url": "https://api.github.com/users/harpone/following{/other_user}", "gists_url": "https://api.github.com/users/harpone/gists{/gist_id}", "starred_url": "https://api.github.com/users/harpone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harpone/subscriptions", "organizations_url": "https://api.github.com/users/harpone/orgs", "repos_url": "https://api.github.com/users/harpone/repos", "events_url": "https://api.github.com/users/harpone/events{/privacy}", "received_events_url": "https://api.github.com/users/harpone/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-26T07:12:57Z", "updated_at": "2017-05-26T07:12:57Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4394330\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/EverettYou\">@EverettYou</a> as for the numerical value, you could now use <code>s, u, v = tf.svd(M)</code>, where s is an array of the singular values (which are eigenvalues of M since M is square). Then log det(M) = log det(P S P^{-1}) = log det(S) = log(prod_i(s[i])) = sum_i log(s[i]), i.e. just take log of s and sum. Note that since M is not necessarily pos def, you'd actually need log <em>abs</em> det so just take the abs of s first. The gradient is the same, since log(-1) is a constant (imaginary number but a constant nevertheless).</p>\n<p>I don't know about the status of the gradient... haven't thought about this in a while. You <em>could</em> define the gradient by RegisterGradient as <code>grad(logdet(M)) = transpose(inv(M))</code>, but as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7140902\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/RuiShu\">@RuiShu</a> mentioned, it would be nice to avoid taking the inverse, at least if the matrix is big...</p>", "body_text": "@EverettYou as for the numerical value, you could now use s, u, v = tf.svd(M), where s is an array of the singular values (which are eigenvalues of M since M is square). Then log det(M) = log det(P S P^{-1}) = log det(S) = log(prod_i(s[i])) = sum_i log(s[i]), i.e. just take log of s and sum. Note that since M is not necessarily pos def, you'd actually need log abs det so just take the abs of s first. The gradient is the same, since log(-1) is a constant (imaginary number but a constant nevertheless).\nI don't know about the status of the gradient... haven't thought about this in a while. You could define the gradient by RegisterGradient as grad(logdet(M)) = transpose(inv(M)), but as @RuiShu mentioned, it would be nice to avoid taking the inverse, at least if the matrix is big...", "body": "@EverettYou as for the numerical value, you could now use `s, u, v = tf.svd(M)`, where s is an array of the singular values (which are eigenvalues of M since M is square). Then log det(M) = log det(P S P^{-1}) = log det(S) = log(prod_i(s[i])) = sum_i log(s[i]), i.e. just take log of s and sum. Note that since M is not necessarily pos def, you'd actually need log *abs* det so just take the abs of s first. The gradient is the same, since log(-1) is a constant (imaginary number but a constant nevertheless).\r\n\r\nI don't know about the status of the gradient... haven't thought about this in a while. You _could_ define the gradient by RegisterGradient as `grad(logdet(M)) = transpose(inv(M))`, but as @RuiShu mentioned, it would be nice to avoid taking the inverse, at least if the matrix is big..."}