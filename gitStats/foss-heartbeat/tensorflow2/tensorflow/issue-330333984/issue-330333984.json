{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19837", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19837/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19837/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19837/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19837", "id": 330333984, "node_id": "MDU6SXNzdWUzMzAzMzM5ODQ=", "number": 19837, "title": "freeze_graph for inference memory leak: frozen graph size 1.3GB, takes 15GB memory when inference", "user": {"login": "Camuslu", "id": 8095464, "node_id": "MDQ6VXNlcjgwOTU0NjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/8095464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Camuslu", "html_url": "https://github.com/Camuslu", "followers_url": "https://api.github.com/users/Camuslu/followers", "following_url": "https://api.github.com/users/Camuslu/following{/other_user}", "gists_url": "https://api.github.com/users/Camuslu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Camuslu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Camuslu/subscriptions", "organizations_url": "https://api.github.com/users/Camuslu/orgs", "repos_url": "https://api.github.com/users/Camuslu/repos", "events_url": "https://api.github.com/users/Camuslu/events{/privacy}", "received_events_url": "https://api.github.com/users/Camuslu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-06-07T15:51:43Z", "updated_at": "2018-11-20T07:53:40Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes (details below)</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS High Sierra 10.13.3</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:binary (via <code>pip install</code>)</li>\n<li><strong>TensorFlow version (use command below)</strong>:1.8.0</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I want to train a graph, save it, then load it later for inference-only purpose.<br>\nThe way I'm doing it now:<br>\nDuring training, I save the model with <code>tf.graph_util.convert_variables_to_constants</code> method and <code>tf.train.write_graph</code> which produces a <code>.pb</code> file. Its size is around 1.3 GB.<br>\nThen I load the frozen graph and do some inference with some toy data. This causes memory issue by <strong>a factor of 10</strong>. (In activity monitor, Python takes ~15GB on the first inference)</p>\n<p>I've also tried the \"saving-loading-inference\" procedure with<br>\n-<code>saver.save()</code><br>\n-<code>saver.restore()</code><br>\nand it doesn't cause the memory issue.  However, for production purpose on my end, loading a frozen graph would be strongly preferred to the</p>\n<h3>Source code / logs</h3>\n<h4>Saving graph  (for debugging purpose, I SKIPPED training and save the graph once variables are initialized)</h4>\n<pre><code>## build the graph\nx = tf.placeholder(..)\n...\nsome tf operations to build graph\n...\npred = tf.nn.xw_plus_b(last_layer, W,b, \"predictions\")\n\n##save graph\nsess = tf.Session()\nsess.run(tf.global_variables_initializer()))\ngraph_as_constants = tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(),\n                                      output_node_names=[\"predictions\"])\ntf.train.write_graph(graph_as_constants, model_path, as_text=False, name=\"model_graph\")\nsess.close()\n</code></pre>\n<h4>Load graph</h4>\n<pre><code>with gfile.FastGFile(model_path, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    tf.import_graph_def(graph_def, name='')\ngraph = tf.get_default_graph()\n</code></pre>\n<h4>Try inference on some toy data:</h4>\n<pre><code>x = graph.get_tensor_by_name(\"x:0\")\npred = graph.get_tensor_by_name(\"predictions:0\")\nwith tf.Session() as sess:\n    for _ in range(10):\n        x_test = some np array for testing\n        test_result = sess.run(pred, feed_dict={x:x_test})\n        time.sleep(30)\n</code></pre>\n<p>Here in inference, it goes through a loop with 10 iterations. In the first iteration, the sess.run(..) causes the memory leak issue (15 GB). In following iterations, memory falls back to what I would expect with the size of the model loaded.</p>\n<h3>Some details</h3>\n<ul>\n<li>The issue persists whether I save the frozen graph on CPU machine (macOS High Sierra 10.13.3 ) or a remote GPU machine (Ubuntu 16.04.3 LTS).</li>\n<li>Again the graph is frozen once it's initialized. I skipped all training/testing logic for debugging purpose.</li>\n<li>For freeze graph,  I also tried <code>freeze_graph</code> in <code>bazel-bin</code> in terminal. It still causes memory issue when loading and doing inference.</li>\n<li>I've tried <code>optimize_for_inference(graph_def,...)</code> in the graph loading section. It doesn't solve the issue.</li>\n</ul>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes (details below)\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS High Sierra 10.13.3\nTensorFlow installed from (source or binary):binary (via pip install)\nTensorFlow version (use command below):1.8.0\nPython version: 3.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce:\n\nDescribe the problem\nI want to train a graph, save it, then load it later for inference-only purpose.\nThe way I'm doing it now:\nDuring training, I save the model with tf.graph_util.convert_variables_to_constants method and tf.train.write_graph which produces a .pb file. Its size is around 1.3 GB.\nThen I load the frozen graph and do some inference with some toy data. This causes memory issue by a factor of 10. (In activity monitor, Python takes ~15GB on the first inference)\nI've also tried the \"saving-loading-inference\" procedure with\n-saver.save()\n-saver.restore()\nand it doesn't cause the memory issue.  However, for production purpose on my end, loading a frozen graph would be strongly preferred to the\nSource code / logs\nSaving graph  (for debugging purpose, I SKIPPED training and save the graph once variables are initialized)\n## build the graph\nx = tf.placeholder(..)\n...\nsome tf operations to build graph\n...\npred = tf.nn.xw_plus_b(last_layer, W,b, \"predictions\")\n\n##save graph\nsess = tf.Session()\nsess.run(tf.global_variables_initializer()))\ngraph_as_constants = tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(),\n                                      output_node_names=[\"predictions\"])\ntf.train.write_graph(graph_as_constants, model_path, as_text=False, name=\"model_graph\")\nsess.close()\n\nLoad graph\nwith gfile.FastGFile(model_path, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    tf.import_graph_def(graph_def, name='')\ngraph = tf.get_default_graph()\n\nTry inference on some toy data:\nx = graph.get_tensor_by_name(\"x:0\")\npred = graph.get_tensor_by_name(\"predictions:0\")\nwith tf.Session() as sess:\n    for _ in range(10):\n        x_test = some np array for testing\n        test_result = sess.run(pred, feed_dict={x:x_test})\n        time.sleep(30)\n\nHere in inference, it goes through a loop with 10 iterations. In the first iteration, the sess.run(..) causes the memory leak issue (15 GB). In following iterations, memory falls back to what I would expect with the size of the model loaded.\nSome details\n\nThe issue persists whether I save the frozen graph on CPU machine (macOS High Sierra 10.13.3 ) or a remote GPU machine (Ubuntu 16.04.3 LTS).\nAgain the graph is frozen once it's initialized. I skipped all training/testing logic for debugging purpose.\nFor freeze graph,  I also tried freeze_graph in bazel-bin in terminal. It still causes memory issue when loading and doing inference.\nI've tried optimize_for_inference(graph_def,...) in the graph loading section. It doesn't solve the issue.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes (details below)\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS High Sierra 10.13.3 \r\n- **TensorFlow installed from (source or binary)**:binary (via `pip install`)\r\n- **TensorFlow version (use command below)**:1.8.0\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**:\r\n\r\n\r\n### Describe the problem\r\nI want to train a graph, save it, then load it later for inference-only purpose.\r\nThe way I'm doing it now:\r\nDuring training, I save the model with `tf.graph_util.convert_variables_to_constants` method and `tf.train.write_graph` which produces a `.pb` file. Its size is around 1.3 GB. \r\nThen I load the frozen graph and do some inference with some toy data. This causes memory issue by **a factor of 10**. (In activity monitor, Python takes ~15GB on the first inference)\r\n\r\nI've also tried the \"saving-loading-inference\" procedure with \r\n -`saver.save()` \r\n -`saver.restore()` \r\nand it doesn't cause the memory issue.  However, for production purpose on my end, loading a frozen graph would be strongly preferred to the \r\n\r\n### Source code / logs\r\n\r\n#### Saving graph  (for debugging purpose, I SKIPPED training and save the graph once variables are initialized)\r\n```\r\n## build the graph\r\nx = tf.placeholder(..)\r\n...\r\nsome tf operations to build graph\r\n...\r\npred = tf.nn.xw_plus_b(last_layer, W,b, \"predictions\")\r\n\r\n##save graph\r\nsess = tf.Session()\r\nsess.run(tf.global_variables_initializer()))\r\ngraph_as_constants = tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(),\r\n                                      output_node_names=[\"predictions\"])\r\ntf.train.write_graph(graph_as_constants, model_path, as_text=False, name=\"model_graph\")\r\nsess.close()\r\n```\r\n\r\n#### Load graph\r\n```\r\nwith gfile.FastGFile(model_path, 'rb') as f:\r\n    graph_def = tf.GraphDef()\r\n    graph_def.ParseFromString(f.read())\r\n    tf.import_graph_def(graph_def, name='')\r\ngraph = tf.get_default_graph()\r\n```\r\n\r\n#### Try inference on some toy data:\r\n```\r\nx = graph.get_tensor_by_name(\"x:0\")\r\npred = graph.get_tensor_by_name(\"predictions:0\")\r\nwith tf.Session() as sess:\r\n    for _ in range(10):\r\n        x_test = some np array for testing\r\n        test_result = sess.run(pred, feed_dict={x:x_test})\r\n        time.sleep(30)\r\n```\r\n\r\nHere in inference, it goes through a loop with 10 iterations. In the first iteration, the sess.run(..) causes the memory leak issue (15 GB). In following iterations, memory falls back to what I would expect with the size of the model loaded.\r\n\r\n### Some details\r\n\r\n- The issue persists whether I save the frozen graph on CPU machine (macOS High Sierra 10.13.3 ) or a remote GPU machine (Ubuntu 16.04.3 LTS). \r\n- Again the graph is frozen once it's initialized. I skipped all training/testing logic for debugging purpose.\r\n- For freeze graph,  I also tried `freeze_graph` in `bazel-bin` in terminal. It still causes memory issue when loading and doing inference.\r\n- I've tried `optimize_for_inference(graph_def,...)` in the graph loading section. It doesn't solve the issue.\r\n"}