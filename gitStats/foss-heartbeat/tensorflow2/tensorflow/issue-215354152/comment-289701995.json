{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/289701995", "html_url": "https://github.com/tensorflow/tensorflow/issues/8550#issuecomment-289701995", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8550", "id": 289701995, "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTcwMTk5NQ==", "user": {"login": "BrianOn99", "id": 8319689, "node_id": "MDQ6VXNlcjgzMTk2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8319689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrianOn99", "html_url": "https://github.com/BrianOn99", "followers_url": "https://api.github.com/users/BrianOn99/followers", "following_url": "https://api.github.com/users/BrianOn99/following{/other_user}", "gists_url": "https://api.github.com/users/BrianOn99/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrianOn99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrianOn99/subscriptions", "organizations_url": "https://api.github.com/users/BrianOn99/orgs", "repos_url": "https://api.github.com/users/BrianOn99/repos", "events_url": "https://api.github.com/users/BrianOn99/events{/privacy}", "received_events_url": "https://api.github.com/users/BrianOn99/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-28T08:38:04Z", "updated_at": "2017-03-28T11:16:31Z", "author_association": "NONE", "body_html": "<p>I have another unrelated question about \"TF Stylize\", but I cannot find another place to ask for.  The problem is about generation of the model.  Trying to reproduce the <code>stylize_quantized.pb</code> file, I modified the <a href=\"https://github.com/tensorflow/magenta\">magenta project</a>, to get the graphDef:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-md\">--- magenta/magenta/models/image_stylization/image_stylization_transform.py     2017-03-24 19:09:20.000000000 +0800</span>\n<span class=\"pl-mi1\">+++ mag/lib/python2.7/site-packages/magenta/models/image_stylization/image_stylization_transform.py     2017-03-28 16:14:03.000000000 +0800</span>\n<span class=\"pl-mdr\">@@ -103,18 +103,20 @@</span>\n def _multiple_styles(input_image, which_styles, output_dir):\n   \"\"\"Stylizes image into a linear combination of styles and writes to disk.\"\"\"\n   with tf.Graph().as_default(), tf.Session() as sess:\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    mixture = _style_mixture(which_styles, FLAGS.num_styles)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    input_placeholder = tf.placeholder(tf.float32, shape=[None, None, None, 3], name=\"input\")</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    mixture = tf.placeholder(tf.float32, shape=[32], name=\"style_num\")</span>\n     stylized_images = model.transform(\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>        input_image,</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>        input_placeholder,</span>\n         normalizer_fn=ops.weighted_instance_norm,\n         normalizer_params={\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>            'weights': tf.constant(mixture),</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>            'weights': mixture,</span>\n             'num_categories': FLAGS.num_styles,\n             'center': True,\n             'scale': True})\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    tf.train.write_graph(sess.graph_def, \"/tmp\", \"magenta_mul_style.pb\", True)</span>\n     _load_checkpoint(sess, FLAGS.checkpoint)\n\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    stylized_image = stylized_images.eval()</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    stylized_image = stylized_images.eval(feed_dict={input_placeholder: input_image, mixture: _style_mixture(which_styles, FLAGS.num_styles)})</span>\n     image_utils.save_np_image(</pre></div>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-md\">--- magenta/magenta/models/image_stylization/model.py   2017-03-24 19:09:20.000000000 +0800</span>\n<span class=\"pl-mi1\">+++ mag/lib/python2.7/site-packages/magenta/models/image_stylization/model.py   2017-03-24 19:10:56.000000000 +0800</span>\n<span class=\"pl-mdr\">@@ -128,7 +128,10 @@</span>\n   if kernel_size % 2 == 0:\n     raise ValueError('kernel_size is expected to be odd.')\n   with tf.variable_scope(scope):\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    _, height, width, _ = [s.value for s in input_.get_shape()]</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    shape = tf.shape(input_)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    height = shape[1]</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    width = shape[2]</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    #_, height, width, _ = [s.value for s in input_.get_shape()]</span>\n     upsampled_input = tf.image.resize_nearest_neighbor(</pre></div>\n<p>where <code>shape=[32]</code> is the number of styles in the officially provided model <code>multistyle-pastiche-generator-varied.ckpt</code>.  The input/output node name are the same as those of android sample.  Then I freeze the graph by</p>\n<div class=\"highlight highlight-source-shell\"><pre>bazel-bin/tensorflow/python/tools/freeze_graph --input_graph=/tmp/magenta_mul_style.pb --input_checkpoint=<span class=\"pl-smi\">$HOME</span>/repos/magenta/multistyle-pastiche-generator-varied.ckpt --output_graph=/tmp/frozen_graph.pb --output_node_names=transformer/expand/conv3/conv/Sigmoid</pre></div>\n<p>Running the freezed graph is fine on python interface.  However, plugging it into TF Stylize app , and expanding the <code>STYLE_NODE</code> from 26 to 32:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-mdr\">@@ -636,7 +637,9 @@</span> public class StylizeActivity extends CameraActivity implements OnImageAvailableL\n     // Copy the input data into TensorFlow.\n     inferenceInterface.feed(\n         INPUT_NODE, floatValues, 1, bitmap.getWidth(), bitmap.getHeight(), 3);\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>    inferenceInterface.feed(STYLE_NODE, styleVals, NUM_STYLES);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    final float[] styleVals32 = new float[32];</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    System.arraycopy(styleVals, 0, styleVals32, 0, NUM_STYLES);</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>    inferenceInterface.feed(STYLE_NODE, styleVals32, 32);</span></pre></div>\n<p>The output from inference is all <code>NaN</code>.  May I know if any of the steps is wrong?  Or if some additional steps is required, such as quantization?  I think documenting these step could be beneficial to other users.  Thanks in advance!</p>", "body_text": "I have another unrelated question about \"TF Stylize\", but I cannot find another place to ask for.  The problem is about generation of the model.  Trying to reproduce the stylize_quantized.pb file, I modified the magenta project, to get the graphDef:\n--- magenta/magenta/models/image_stylization/image_stylization_transform.py     2017-03-24 19:09:20.000000000 +0800\n+++ mag/lib/python2.7/site-packages/magenta/models/image_stylization/image_stylization_transform.py     2017-03-28 16:14:03.000000000 +0800\n@@ -103,18 +103,20 @@\n def _multiple_styles(input_image, which_styles, output_dir):\n   \"\"\"Stylizes image into a linear combination of styles and writes to disk.\"\"\"\n   with tf.Graph().as_default(), tf.Session() as sess:\n-    mixture = _style_mixture(which_styles, FLAGS.num_styles)\n+    input_placeholder = tf.placeholder(tf.float32, shape=[None, None, None, 3], name=\"input\")\n+    mixture = tf.placeholder(tf.float32, shape=[32], name=\"style_num\")\n     stylized_images = model.transform(\n-        input_image,\n+        input_placeholder,\n         normalizer_fn=ops.weighted_instance_norm,\n         normalizer_params={\n-            'weights': tf.constant(mixture),\n+            'weights': mixture,\n             'num_categories': FLAGS.num_styles,\n             'center': True,\n             'scale': True})\n+    tf.train.write_graph(sess.graph_def, \"/tmp\", \"magenta_mul_style.pb\", True)\n     _load_checkpoint(sess, FLAGS.checkpoint)\n\n-    stylized_image = stylized_images.eval()\n+    stylized_image = stylized_images.eval(feed_dict={input_placeholder: input_image, mixture: _style_mixture(which_styles, FLAGS.num_styles)})\n     image_utils.save_np_image(\n--- magenta/magenta/models/image_stylization/model.py   2017-03-24 19:09:20.000000000 +0800\n+++ mag/lib/python2.7/site-packages/magenta/models/image_stylization/model.py   2017-03-24 19:10:56.000000000 +0800\n@@ -128,7 +128,10 @@\n   if kernel_size % 2 == 0:\n     raise ValueError('kernel_size is expected to be odd.')\n   with tf.variable_scope(scope):\n-    _, height, width, _ = [s.value for s in input_.get_shape()]\n+    shape = tf.shape(input_)\n+    height = shape[1]\n+    width = shape[2]\n+    #_, height, width, _ = [s.value for s in input_.get_shape()]\n     upsampled_input = tf.image.resize_nearest_neighbor(\nwhere shape=[32] is the number of styles in the officially provided model multistyle-pastiche-generator-varied.ckpt.  The input/output node name are the same as those of android sample.  Then I freeze the graph by\nbazel-bin/tensorflow/python/tools/freeze_graph --input_graph=/tmp/magenta_mul_style.pb --input_checkpoint=$HOME/repos/magenta/multistyle-pastiche-generator-varied.ckpt --output_graph=/tmp/frozen_graph.pb --output_node_names=transformer/expand/conv3/conv/Sigmoid\nRunning the freezed graph is fine on python interface.  However, plugging it into TF Stylize app , and expanding the STYLE_NODE from 26 to 32:\n@@ -636,7 +637,9 @@ public class StylizeActivity extends CameraActivity implements OnImageAvailableL\n     // Copy the input data into TensorFlow.\n     inferenceInterface.feed(\n         INPUT_NODE, floatValues, 1, bitmap.getWidth(), bitmap.getHeight(), 3);\n-    inferenceInterface.feed(STYLE_NODE, styleVals, NUM_STYLES);\n+    final float[] styleVals32 = new float[32];\n+    System.arraycopy(styleVals, 0, styleVals32, 0, NUM_STYLES);\n+    inferenceInterface.feed(STYLE_NODE, styleVals32, 32);\nThe output from inference is all NaN.  May I know if any of the steps is wrong?  Or if some additional steps is required, such as quantization?  I think documenting these step could be beneficial to other users.  Thanks in advance!", "body": "I have another unrelated question about \"TF Stylize\", but I cannot find another place to ask for.  The problem is about generation of the model.  Trying to reproduce the `stylize_quantized.pb` file, I modified the [magenta project](https://github.com/tensorflow/magenta), to get the graphDef:\r\n``` diff\r\n--- magenta/magenta/models/image_stylization/image_stylization_transform.py     2017-03-24 19:09:20.000000000 +0800\r\n+++ mag/lib/python2.7/site-packages/magenta/models/image_stylization/image_stylization_transform.py     2017-03-28 16:14:03.000000000 +0800\r\n@@ -103,18 +103,20 @@\r\n def _multiple_styles(input_image, which_styles, output_dir):\r\n   \"\"\"Stylizes image into a linear combination of styles and writes to disk.\"\"\"\r\n   with tf.Graph().as_default(), tf.Session() as sess:\r\n-    mixture = _style_mixture(which_styles, FLAGS.num_styles)\r\n+    input_placeholder = tf.placeholder(tf.float32, shape=[None, None, None, 3], name=\"input\")\r\n+    mixture = tf.placeholder(tf.float32, shape=[32], name=\"style_num\")\r\n     stylized_images = model.transform(\r\n-        input_image,\r\n+        input_placeholder,\r\n         normalizer_fn=ops.weighted_instance_norm,\r\n         normalizer_params={\r\n-            'weights': tf.constant(mixture),\r\n+            'weights': mixture,\r\n             'num_categories': FLAGS.num_styles,\r\n             'center': True,\r\n             'scale': True})\r\n+    tf.train.write_graph(sess.graph_def, \"/tmp\", \"magenta_mul_style.pb\", True)\r\n     _load_checkpoint(sess, FLAGS.checkpoint)\r\n\r\n-    stylized_image = stylized_images.eval()\r\n+    stylized_image = stylized_images.eval(feed_dict={input_placeholder: input_image, mixture: _style_mixture(which_styles, FLAGS.num_styles)})\r\n     image_utils.save_np_image(\r\n```\r\n``` diff\r\n--- magenta/magenta/models/image_stylization/model.py   2017-03-24 19:09:20.000000000 +0800\r\n+++ mag/lib/python2.7/site-packages/magenta/models/image_stylization/model.py   2017-03-24 19:10:56.000000000 +0800\r\n@@ -128,7 +128,10 @@\r\n   if kernel_size % 2 == 0:\r\n     raise ValueError('kernel_size is expected to be odd.')\r\n   with tf.variable_scope(scope):\r\n-    _, height, width, _ = [s.value for s in input_.get_shape()]\r\n+    shape = tf.shape(input_)\r\n+    height = shape[1]\r\n+    width = shape[2]\r\n+    #_, height, width, _ = [s.value for s in input_.get_shape()]\r\n     upsampled_input = tf.image.resize_nearest_neighbor(\r\n```\r\n\r\nwhere `shape=[32]` is the number of styles in the officially provided model `multistyle-pastiche-generator-varied.ckpt`.  The input/output node name are the same as those of android sample.  Then I freeze the graph by\r\n\r\n``` sh\r\nbazel-bin/tensorflow/python/tools/freeze_graph --input_graph=/tmp/magenta_mul_style.pb --input_checkpoint=$HOME/repos/magenta/multistyle-pastiche-generator-varied.ckpt --output_graph=/tmp/frozen_graph.pb --output_node_names=transformer/expand/conv3/conv/Sigmoid\r\n```\r\n\r\nRunning the freezed graph is fine on python interface.  However, plugging it into TF Stylize app , and expanding the `STYLE_NODE` from 26 to 32:\r\n``` diff\r\n@@ -636,7 +637,9 @@ public class StylizeActivity extends CameraActivity implements OnImageAvailableL\r\n     // Copy the input data into TensorFlow.\r\n     inferenceInterface.feed(\r\n         INPUT_NODE, floatValues, 1, bitmap.getWidth(), bitmap.getHeight(), 3);\r\n-    inferenceInterface.feed(STYLE_NODE, styleVals, NUM_STYLES);\r\n+    final float[] styleVals32 = new float[32];\r\n+    System.arraycopy(styleVals, 0, styleVals32, 0, NUM_STYLES);\r\n+    inferenceInterface.feed(STYLE_NODE, styleVals32, 32);\r\n```\r\n\r\nThe output from inference is all `NaN`.  May I know if any of the steps is wrong?  Or if some additional steps is required, such as quantization?  I think documenting these step could be beneficial to other users.  Thanks in advance!"}