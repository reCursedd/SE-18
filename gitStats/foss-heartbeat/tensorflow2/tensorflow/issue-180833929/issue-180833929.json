{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4749", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4749/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4749/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4749/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4749", "id": 180833929, "node_id": "MDU6SXNzdWUxODA4MzM5Mjk=", "number": 4749, "title": "Minor instruction issue in functional_ops.py/scan", "user": {"login": "yhg0112", "id": 5001738, "node_id": "MDQ6VXNlcjUwMDE3Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5001738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yhg0112", "html_url": "https://github.com/yhg0112", "followers_url": "https://api.github.com/users/yhg0112/followers", "following_url": "https://api.github.com/users/yhg0112/following{/other_user}", "gists_url": "https://api.github.com/users/yhg0112/gists{/gist_id}", "starred_url": "https://api.github.com/users/yhg0112/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yhg0112/subscriptions", "organizations_url": "https://api.github.com/users/yhg0112/orgs", "repos_url": "https://api.github.com/users/yhg0112/repos", "events_url": "https://api.github.com/users/yhg0112/events{/privacy}", "received_events_url": "https://api.github.com/users/yhg0112/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 284443156, "node_id": "MDU6TGFiZWwyODQ0NDMxNTY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:docs", "name": "type:docs", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-10-04T08:33:33Z", "updated_at": "2017-04-17T23:12:14Z", "closed_at": "2017-04-17T23:12:14Z", "author_association": "NONE", "body_html": "<p>I had been using functional_ops.py/scan for implementing RNNs.</p>\n<p>I've just checked the instruction, and think this is little bit wrong.</p>\n<p>In master branch, from line 419 in functional_ops.py, it says</p>\n<pre><code>  Args:\n    fn: The callable to be performed.  It accepts two arguments.  The first\n      will have the same (possibly nested) structure as `elems`.  The second\n      will have the same structure as `initializer` if one is provided,\n      otherwise it will have the same structure as `elems`.  Its output\n      must have the same structure as `initializer` if one is provided,\n      otherwise it must have the same structure as `elems`.\n</code></pre>\n<p>.</p>\n<p>But actually the first argument of <em>fn</em> should have the same structure as <em>initializer</em>,</p>\n<p>and the second should have the same structure as <em>elems</em>.</p>\n<p>As we can see this in few examples just below, from line 448,</p>\n<pre><code>  Examples:\n    ```python\n    elems = np.array([1, 2, 3, 4, 5, 6])\n    sum = scan(lambda a, x: a + x, elems)\n    # sum == [1, 3, 6, 10, 15, 21]\n    ```\n    ```python\n    elems = np.array([1, 2, 3, 4, 5, 6])\n    initializer = np.array(0)\n    sum_one = scan(\n        lambda a, x: x[0] - x[1] + a, (elems + 1, elems), initializer)\n    # sum_one == [1, 2, 3, 4, 5, 6]\n    ```\n    ```python\n    elems = np.array([1, 0, 0, 0, 0, 0])\n    initializer = (np.array(0), np.array(1))\n    fibonaccis = scan(lambda a, _: (a[1], a[0] + a[1]), elems, initializer)\n    # fibonaccis == ([1, 1, 2, 3, 5, 8], [1, 2, 3, 5, 8, 13])\n    ```\n</code></pre>\n<p>, the instruction is slightly wrong.</p>", "body_text": "I had been using functional_ops.py/scan for implementing RNNs.\nI've just checked the instruction, and think this is little bit wrong.\nIn master branch, from line 419 in functional_ops.py, it says\n  Args:\n    fn: The callable to be performed.  It accepts two arguments.  The first\n      will have the same (possibly nested) structure as `elems`.  The second\n      will have the same structure as `initializer` if one is provided,\n      otherwise it will have the same structure as `elems`.  Its output\n      must have the same structure as `initializer` if one is provided,\n      otherwise it must have the same structure as `elems`.\n\n.\nBut actually the first argument of fn should have the same structure as initializer,\nand the second should have the same structure as elems.\nAs we can see this in few examples just below, from line 448,\n  Examples:\n    ```python\n    elems = np.array([1, 2, 3, 4, 5, 6])\n    sum = scan(lambda a, x: a + x, elems)\n    # sum == [1, 3, 6, 10, 15, 21]\n    ```\n    ```python\n    elems = np.array([1, 2, 3, 4, 5, 6])\n    initializer = np.array(0)\n    sum_one = scan(\n        lambda a, x: x[0] - x[1] + a, (elems + 1, elems), initializer)\n    # sum_one == [1, 2, 3, 4, 5, 6]\n    ```\n    ```python\n    elems = np.array([1, 0, 0, 0, 0, 0])\n    initializer = (np.array(0), np.array(1))\n    fibonaccis = scan(lambda a, _: (a[1], a[0] + a[1]), elems, initializer)\n    # fibonaccis == ([1, 1, 2, 3, 5, 8], [1, 2, 3, 5, 8, 13])\n    ```\n\n, the instruction is slightly wrong.", "body": "I had been using functional_ops.py/scan for implementing RNNs.\n\nI've just checked the instruction, and think this is little bit wrong. \n\nIn master branch, from line 419 in functional_ops.py, it says\n\n```\n  Args:\n    fn: The callable to be performed.  It accepts two arguments.  The first\n      will have the same (possibly nested) structure as `elems`.  The second\n      will have the same structure as `initializer` if one is provided,\n      otherwise it will have the same structure as `elems`.  Its output\n      must have the same structure as `initializer` if one is provided,\n      otherwise it must have the same structure as `elems`.\n```\n\n.\n\nBut actually the first argument of _fn_ should have the same structure as _initializer_, \n\nand the second should have the same structure as _elems_.\n\nAs we can see this in few examples just below, from line 448,\n\n``````\n  Examples:\n    ```python\n    elems = np.array([1, 2, 3, 4, 5, 6])\n    sum = scan(lambda a, x: a + x, elems)\n    # sum == [1, 3, 6, 10, 15, 21]\n    ```\n    ```python\n    elems = np.array([1, 2, 3, 4, 5, 6])\n    initializer = np.array(0)\n    sum_one = scan(\n        lambda a, x: x[0] - x[1] + a, (elems + 1, elems), initializer)\n    # sum_one == [1, 2, 3, 4, 5, 6]\n    ```\n    ```python\n    elems = np.array([1, 0, 0, 0, 0, 0])\n    initializer = (np.array(0), np.array(1))\n    fibonaccis = scan(lambda a, _: (a[1], a[0] + a[1]), elems, initializer)\n    # fibonaccis == ([1, 1, 2, 3, 5, 8], [1, 2, 3, 5, 8, 13])\n    ```\n``````\n\n, the instruction is slightly wrong.\n"}