{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3902", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3902/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3902/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3902/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3902", "id": 171895779, "node_id": "MDU6SXNzdWUxNzE4OTU3Nzk=", "number": 3902, "title": "Issues running TensorFlow module in a Python sub-interpreter", "user": {"login": "peterkfm", "id": 21103431, "node_id": "MDQ6VXNlcjIxMTAzNDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/21103431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterkfm", "html_url": "https://github.com/peterkfm", "followers_url": "https://api.github.com/users/peterkfm/followers", "following_url": "https://api.github.com/users/peterkfm/following{/other_user}", "gists_url": "https://api.github.com/users/peterkfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterkfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterkfm/subscriptions", "organizations_url": "https://api.github.com/users/peterkfm/orgs", "repos_url": "https://api.github.com/users/peterkfm/repos", "events_url": "https://api.github.com/users/peterkfm/events{/privacy}", "received_events_url": "https://api.github.com/users/peterkfm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2016-08-18T13:03:57Z", "updated_at": "2017-01-24T22:13:49Z", "closed_at": "2017-01-24T22:13:49Z", "author_association": "NONE", "body_html": "<p>I'm using the tensorflow Python module in a custom C++ application, by instantiating the Python interpreter and then running Python code that imports tensorflow.</p>\n<p>The Python code is run in a sub-interpreter (created using Py_NewInterpreter). This works fine the first time around, but when I end the sub-interpreter and create a second one, the call to 'import tensorflow' fails with the exception shown below. Looks like the TensorFlow module is either not being cleaned up properly when it de-initializes, and/or it has some global state that is shared between multiple interpreters? In particular it looks it tries to load a shared object that has already been loaded.</p>\n<p>Is there a way to fix this and to make TensorFlow compatible with Python sub-interpreters, or is this just the tip of the iceberg and more issues would pop up once this particular one is resolved?</p>\n<p>Thanks!<br>\nPeter</p>\n<p>--- C++ code to reproduce the problem:</p>\n<pre><code>#include &lt;cassert&gt;\n#include &lt;python/Python.h&gt;\n\n// set this to the folder containing a virtual env with TensorFlow:\nstatic char g_pythonHome[] = \"/Users/peter/tf101\";\n\nvoid create_sub_interpreter_import_tensorflow()\n{\n    // acquire global interpreter lock and create new sub-interpreter:\n    PyEval_AcquireLock();\n    PyThreadState* pThreadState = Py_NewInterpreter();\n    assert(pThreadState);\n\n    // set sys.argv because TensorFlow needs it:\n    int ret = PyRun_SimpleString(\"import sys\\n\"\n                                 \"sys.argv = ['']\\n\");\n    assert(ret == 0);\n\n    // import TensorFlow, say hello.\n    // !!! this fails when it is called the second time:\n    ret = PyRun_SimpleString(\"import tensorflow\\n\"\n                             \"print 'hello world'\\n\");\n    assert(ret == 0);\n\n    // end sub-interpreter and release global interpreter lock:\n    Py_EndInterpreter(pThreadState);\n    PyEval_ReleaseLock();\n}\n\nint main(int argc, const char * argv[]) {\n    // set Python home to a virtual env containing TensorFlow:\n    Py_SetPythonHome(g_pythonHome);\n\n    // initialise Python and threads:\n    Py_Initialize();\n    PyEval_InitThreads();\n\n    // store current thread state, release global interpreter lock:\n    PyThreadState* pMainThreadState = PyEval_SaveThread();\n    assert(pMainThreadState);\n\n    create_sub_interpreter_import_tensorflow();\n    create_sub_interpreter_import_tensorflow();\n\n    // acquire global interpreter lock, restore main thread state, finalize Python:\n    PyEval_RestoreThread(pMainThreadState);\n    Py_Finalize();\n\n    return 0;\n}\n</code></pre>\n<p>--- Python error message:</p>\n<pre><code>Traceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/__init__.py\", line 23, in &lt;module&gt;\n    from tensorflow.python import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/python/__init__.py\", line 65, in &lt;module&gt;\n    import tensorflow.contrib as contrib\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/__init__.py\", line 26, in &lt;module&gt;\n    from tensorflow.contrib import grid_rnn\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/grid_rnn/__init__.py\", line 27, in &lt;module&gt;\n    from tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/grid_rnn/python/ops/grid_rnn_cell.py\", line 28, in &lt;module&gt;\n    from tensorflow.contrib import layers\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/__init__.py\", line 77, in &lt;module&gt;\n    from tensorflow.contrib.layers.python.layers import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/layers/__init__.py\", line 22, in &lt;module&gt;\n    from tensorflow.contrib.layers.python.layers.feature_column import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/layers/feature_column.py\", line 79, in &lt;module&gt;\n    from tensorflow.contrib.layers.python.ops import bucketization_op\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/ops/bucketization_op.py\", line 25, in &lt;module&gt;\n    resource_loader.get_path_to_datafile(\"_bucketization_op.so\"))\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/python/framework/load_library.py\", line 71, in load_op_library\n    raise errors._make_specific_exception(None, None, error_msg, error_code)\ntensorflow.python.framework.errors.AlreadyExistsError: /Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/ops/_bucketization_op.so has already been loaded\n</code></pre>\n<p>--- Environment:<br>\nOS: OSX El Capitan (10.11.5)<br>\ntensorflow version: 0.9.0<br>\ninstalled using: pip install --upgrade <a href=\"https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0-py2-none-any.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0-py2-none-any.whl</a></p>", "body_text": "I'm using the tensorflow Python module in a custom C++ application, by instantiating the Python interpreter and then running Python code that imports tensorflow.\nThe Python code is run in a sub-interpreter (created using Py_NewInterpreter). This works fine the first time around, but when I end the sub-interpreter and create a second one, the call to 'import tensorflow' fails with the exception shown below. Looks like the TensorFlow module is either not being cleaned up properly when it de-initializes, and/or it has some global state that is shared between multiple interpreters? In particular it looks it tries to load a shared object that has already been loaded.\nIs there a way to fix this and to make TensorFlow compatible with Python sub-interpreters, or is this just the tip of the iceberg and more issues would pop up once this particular one is resolved?\nThanks!\nPeter\n--- C++ code to reproduce the problem:\n#include <cassert>\n#include <python/Python.h>\n\n// set this to the folder containing a virtual env with TensorFlow:\nstatic char g_pythonHome[] = \"/Users/peter/tf101\";\n\nvoid create_sub_interpreter_import_tensorflow()\n{\n    // acquire global interpreter lock and create new sub-interpreter:\n    PyEval_AcquireLock();\n    PyThreadState* pThreadState = Py_NewInterpreter();\n    assert(pThreadState);\n\n    // set sys.argv because TensorFlow needs it:\n    int ret = PyRun_SimpleString(\"import sys\\n\"\n                                 \"sys.argv = ['']\\n\");\n    assert(ret == 0);\n\n    // import TensorFlow, say hello.\n    // !!! this fails when it is called the second time:\n    ret = PyRun_SimpleString(\"import tensorflow\\n\"\n                             \"print 'hello world'\\n\");\n    assert(ret == 0);\n\n    // end sub-interpreter and release global interpreter lock:\n    Py_EndInterpreter(pThreadState);\n    PyEval_ReleaseLock();\n}\n\nint main(int argc, const char * argv[]) {\n    // set Python home to a virtual env containing TensorFlow:\n    Py_SetPythonHome(g_pythonHome);\n\n    // initialise Python and threads:\n    Py_Initialize();\n    PyEval_InitThreads();\n\n    // store current thread state, release global interpreter lock:\n    PyThreadState* pMainThreadState = PyEval_SaveThread();\n    assert(pMainThreadState);\n\n    create_sub_interpreter_import_tensorflow();\n    create_sub_interpreter_import_tensorflow();\n\n    // acquire global interpreter lock, restore main thread state, finalize Python:\n    PyEval_RestoreThread(pMainThreadState);\n    Py_Finalize();\n\n    return 0;\n}\n\n--- Python error message:\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/__init__.py\", line 23, in <module>\n    from tensorflow.python import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/python/__init__.py\", line 65, in <module>\n    import tensorflow.contrib as contrib\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/__init__.py\", line 26, in <module>\n    from tensorflow.contrib import grid_rnn\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/grid_rnn/__init__.py\", line 27, in <module>\n    from tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/grid_rnn/python/ops/grid_rnn_cell.py\", line 28, in <module>\n    from tensorflow.contrib import layers\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/__init__.py\", line 77, in <module>\n    from tensorflow.contrib.layers.python.layers import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/layers/__init__.py\", line 22, in <module>\n    from tensorflow.contrib.layers.python.layers.feature_column import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/layers/feature_column.py\", line 79, in <module>\n    from tensorflow.contrib.layers.python.ops import bucketization_op\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/ops/bucketization_op.py\", line 25, in <module>\n    resource_loader.get_path_to_datafile(\"_bucketization_op.so\"))\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/python/framework/load_library.py\", line 71, in load_op_library\n    raise errors._make_specific_exception(None, None, error_msg, error_code)\ntensorflow.python.framework.errors.AlreadyExistsError: /Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/ops/_bucketization_op.so has already been loaded\n\n--- Environment:\nOS: OSX El Capitan (10.11.5)\ntensorflow version: 0.9.0\ninstalled using: pip install --upgrade https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0-py2-none-any.whl", "body": "I'm using the tensorflow Python module in a custom C++ application, by instantiating the Python interpreter and then running Python code that imports tensorflow.\n\nThe Python code is run in a sub-interpreter (created using Py_NewInterpreter). This works fine the first time around, but when I end the sub-interpreter and create a second one, the call to 'import tensorflow' fails with the exception shown below. Looks like the TensorFlow module is either not being cleaned up properly when it de-initializes, and/or it has some global state that is shared between multiple interpreters? In particular it looks it tries to load a shared object that has already been loaded.\n\nIs there a way to fix this and to make TensorFlow compatible with Python sub-interpreters, or is this just the tip of the iceberg and more issues would pop up once this particular one is resolved?\n\nThanks!\nPeter\n\n--- C++ code to reproduce the problem:\n\n```\n#include <cassert>\n#include <python/Python.h>\n\n// set this to the folder containing a virtual env with TensorFlow:\nstatic char g_pythonHome[] = \"/Users/peter/tf101\";\n\nvoid create_sub_interpreter_import_tensorflow()\n{\n    // acquire global interpreter lock and create new sub-interpreter:\n    PyEval_AcquireLock();\n    PyThreadState* pThreadState = Py_NewInterpreter();\n    assert(pThreadState);\n\n    // set sys.argv because TensorFlow needs it:\n    int ret = PyRun_SimpleString(\"import sys\\n\"\n                                 \"sys.argv = ['']\\n\");\n    assert(ret == 0);\n\n    // import TensorFlow, say hello.\n    // !!! this fails when it is called the second time:\n    ret = PyRun_SimpleString(\"import tensorflow\\n\"\n                             \"print 'hello world'\\n\");\n    assert(ret == 0);\n\n    // end sub-interpreter and release global interpreter lock:\n    Py_EndInterpreter(pThreadState);\n    PyEval_ReleaseLock();\n}\n\nint main(int argc, const char * argv[]) {\n    // set Python home to a virtual env containing TensorFlow:\n    Py_SetPythonHome(g_pythonHome);\n\n    // initialise Python and threads:\n    Py_Initialize();\n    PyEval_InitThreads();\n\n    // store current thread state, release global interpreter lock:\n    PyThreadState* pMainThreadState = PyEval_SaveThread();\n    assert(pMainThreadState);\n\n    create_sub_interpreter_import_tensorflow();\n    create_sub_interpreter_import_tensorflow();\n\n    // acquire global interpreter lock, restore main thread state, finalize Python:\n    PyEval_RestoreThread(pMainThreadState);\n    Py_Finalize();\n\n    return 0;\n}\n```\n\n--- Python error message:\n\n```\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/__init__.py\", line 23, in <module>\n    from tensorflow.python import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/python/__init__.py\", line 65, in <module>\n    import tensorflow.contrib as contrib\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/__init__.py\", line 26, in <module>\n    from tensorflow.contrib import grid_rnn\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/grid_rnn/__init__.py\", line 27, in <module>\n    from tensorflow.contrib.grid_rnn.python.ops.grid_rnn_cell import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/grid_rnn/python/ops/grid_rnn_cell.py\", line 28, in <module>\n    from tensorflow.contrib import layers\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/__init__.py\", line 77, in <module>\n    from tensorflow.contrib.layers.python.layers import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/layers/__init__.py\", line 22, in <module>\n    from tensorflow.contrib.layers.python.layers.feature_column import *\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/layers/feature_column.py\", line 79, in <module>\n    from tensorflow.contrib.layers.python.ops import bucketization_op\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/ops/bucketization_op.py\", line 25, in <module>\n    resource_loader.get_path_to_datafile(\"_bucketization_op.so\"))\n  File \"/Users/peter/tf101/lib/python2.7/site-packages/tensorflow/python/framework/load_library.py\", line 71, in load_op_library\n    raise errors._make_specific_exception(None, None, error_msg, error_code)\ntensorflow.python.framework.errors.AlreadyExistsError: /Users/peter/tf101/lib/python2.7/site-packages/tensorflow/contrib/layers/python/ops/_bucketization_op.so has already been loaded\n```\n\n--- Environment:\nOS: OSX El Capitan (10.11.5)\ntensorflow version: 0.9.0\ninstalled using: pip install --upgrade https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0-py2-none-any.whl\n"}