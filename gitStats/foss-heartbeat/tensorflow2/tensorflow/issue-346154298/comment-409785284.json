{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/409785284", "html_url": "https://github.com/tensorflow/tensorflow/issues/21272#issuecomment-409785284", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21272", "id": 409785284, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTc4NTI4NA==", "user": {"login": "chengdianxuezi", "id": 10277403, "node_id": "MDQ6VXNlcjEwMjc3NDAz", "avatar_url": "https://avatars1.githubusercontent.com/u/10277403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chengdianxuezi", "html_url": "https://github.com/chengdianxuezi", "followers_url": "https://api.github.com/users/chengdianxuezi/followers", "following_url": "https://api.github.com/users/chengdianxuezi/following{/other_user}", "gists_url": "https://api.github.com/users/chengdianxuezi/gists{/gist_id}", "starred_url": "https://api.github.com/users/chengdianxuezi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chengdianxuezi/subscriptions", "organizations_url": "https://api.github.com/users/chengdianxuezi/orgs", "repos_url": "https://api.github.com/users/chengdianxuezi/repos", "events_url": "https://api.github.com/users/chengdianxuezi/events{/privacy}", "received_events_url": "https://api.github.com/users/chengdianxuezi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-02T02:27:44Z", "updated_at": "2018-08-02T02:27:44Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7946809\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gunan\">@gunan</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=170179\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jhseu\">@jhseu</a> I test tcmalloc\u3001jemalloc\u3001ptmalloc performance with 60 threads,found that when alloc small memory,tcmalloc is a lillter beter than jemalloc, ptmalloc  has the worst performance.but when alloc<br>\nlarge memory, ptmalloc is the best.  the reason may be that when alloc small memory,jemalloc and tcmalloc<br>\nuse thread cache memory. Can we use tcmalloc when applying for small memory, and use a self define memory pool when applying for large memory?</p>\n<p>the performance result as follow:</p>\n<pre><code>when alloc memmory &lt;= 32 KB  :  tcmalloc &gt; jemalloc &gt; ptmalloc\nwhen alloc 32KB &lt; memmory &lt;= 256 KB  :  tcmalloc &gt; ptmalloc &gt; jemalloc\nwhen alloc &gt; 256 KB :  ptmalloc &gt; jemalloc &gt; tcmalloc\n</code></pre>\n<p>the code as follow:</p>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n#include &lt;cstdlib&gt;\n#include &lt;thread&gt;\n\nvoid malloc_test(int time, int size) {\n    char *p = NULL;\n    for (int i = 0; i &lt; time; i++) {\n        p = (char*)malloc(size);\n        free(p);\n    }\n}\n\nint main(int argc, char *argv[]) {\n    int num_thread = atoi(argv[1]);\n    int time = atoi(argv[2]);\n    int size = atoi(argv[3]);\n    std::cout &lt;&lt; \"num_thread is \" &lt;&lt; num_thread &lt;&lt; \" ,malloc time is \" &lt;&lt; time &lt;&lt; \" ,malloc size is \" &lt;&lt; size &lt;&lt; std::endl;\n    clock_t start_time = clock();\n    std::thread threads[num_thread];\n    for (int i = 0; i &lt; num_thread; i++) {\n        threads[i] = std::thread(malloc_test, time, size);\n    }\n\n    for(auto&amp; t: threads) {\n        t.join();\n    }\n\n    clock_t finish_time = clock();\n\n    std::cout &lt;&lt; \"total time (s) is  \" &lt;&lt; (finish_time - start_time) / CLOCKS_PER_SEC &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>", "body_text": "@gunan @jhseu I test tcmalloc\u3001jemalloc\u3001ptmalloc performance with 60 threads,found that when alloc small memory,tcmalloc is a lillter beter than jemalloc, ptmalloc  has the worst performance.but when alloc\nlarge memory, ptmalloc is the best.  the reason may be that when alloc small memory,jemalloc and tcmalloc\nuse thread cache memory. Can we use tcmalloc when applying for small memory, and use a self define memory pool when applying for large memory?\nthe performance result as follow:\nwhen alloc memmory <= 32 KB  :  tcmalloc > jemalloc > ptmalloc\nwhen alloc 32KB < memmory <= 256 KB  :  tcmalloc > ptmalloc > jemalloc\nwhen alloc > 256 KB :  ptmalloc > jemalloc > tcmalloc\n\nthe code as follow:\n#include <iostream>\n#include <ctime>\n#include <cstdlib>\n#include <thread>\n\nvoid malloc_test(int time, int size) {\n    char *p = NULL;\n    for (int i = 0; i < time; i++) {\n        p = (char*)malloc(size);\n        free(p);\n    }\n}\n\nint main(int argc, char *argv[]) {\n    int num_thread = atoi(argv[1]);\n    int time = atoi(argv[2]);\n    int size = atoi(argv[3]);\n    std::cout << \"num_thread is \" << num_thread << \" ,malloc time is \" << time << \" ,malloc size is \" << size << std::endl;\n    clock_t start_time = clock();\n    std::thread threads[num_thread];\n    for (int i = 0; i < num_thread; i++) {\n        threads[i] = std::thread(malloc_test, time, size);\n    }\n\n    for(auto& t: threads) {\n        t.join();\n    }\n\n    clock_t finish_time = clock();\n\n    std::cout << \"total time (s) is  \" << (finish_time - start_time) / CLOCKS_PER_SEC << std::endl;\n    return 0;\n}", "body": "@gunan @jhseu I test tcmalloc\u3001jemalloc\u3001ptmalloc performance with 60 threads,found that when alloc small memory,tcmalloc is a lillter beter than jemalloc, ptmalloc  has the worst performance.but when alloc \r\nlarge memory, ptmalloc is the best.  the reason may be that when alloc small memory,jemalloc and tcmalloc \r\nuse thread cache memory. Can we use tcmalloc when applying for small memory, and use a self define memory pool when applying for large memory?\r\n\r\nthe performance result as follow:\r\n```\r\nwhen alloc memmory <= 32 KB  :  tcmalloc > jemalloc > ptmalloc\r\nwhen alloc 32KB < memmory <= 256 KB  :  tcmalloc > ptmalloc > jemalloc\r\nwhen alloc > 256 KB :  ptmalloc > jemalloc > tcmalloc\r\n```\r\n\r\nthe code as follow:\r\n```\r\n#include <iostream>\r\n#include <ctime>\r\n#include <cstdlib>\r\n#include <thread>\r\n\r\nvoid malloc_test(int time, int size) {\r\n    char *p = NULL;\r\n    for (int i = 0; i < time; i++) {\r\n        p = (char*)malloc(size);\r\n        free(p);\r\n    }\r\n}\r\n\r\nint main(int argc, char *argv[]) {\r\n    int num_thread = atoi(argv[1]);\r\n    int time = atoi(argv[2]);\r\n    int size = atoi(argv[3]);\r\n    std::cout << \"num_thread is \" << num_thread << \" ,malloc time is \" << time << \" ,malloc size is \" << size << std::endl;\r\n    clock_t start_time = clock();\r\n    std::thread threads[num_thread];\r\n    for (int i = 0; i < num_thread; i++) {\r\n        threads[i] = std::thread(malloc_test, time, size);\r\n    }\r\n\r\n    for(auto& t: threads) {\r\n        t.join();\r\n    }\r\n\r\n    clock_t finish_time = clock();\r\n\r\n    std::cout << \"total time (s) is  \" << (finish_time - start_time) / CLOCKS_PER_SEC << std::endl;\r\n    return 0;\r\n}\r\n```"}