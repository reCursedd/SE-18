{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350835022", "html_url": "https://github.com/tensorflow/tensorflow/issues/15273#issuecomment-350835022", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15273", "id": 350835022, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDgzNTAyMg==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-11T19:41:51Z", "updated_at": "2017-12-11T19:41:51Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>Is there a technical reason that prevents Iterator from being an iterator?</p>\n</blockquote>\n<p>Yes. In TensorFlow (except Eager mode), we use the <code>tf.data.Iterator</code> to get symbolic <code>tf.Tensor</code> objects that can be chained together with other operations to build a dataflow graph. We typically build the graph once, and use it many times. Wrapping the graph construction in a <code>for</code> loop (by using the <code>tf.data.Iterator</code> as a Python iterator) would not be efficient. Furthermore, <code>tf.data.Iterator</code> is implemented using TensorFlow operations, so you would need to provide a <code>tf.Session</code> to run these operations, and the Python iterator protocol doesn't provide a way to do that.</p>\n<p>In eager mode, you can wrap a <code>tf.data.Dataset</code> in a <a href=\"https://www.tensorflow.org/versions/master/api_docs/python/tf/contrib/eager/Iterator\" rel=\"nofollow\"><code>tf.contrib.eager.Iterator</code></a>, which <em>is</em> usable as a Python iterator. This definitely seems to be a more natural use of the <code>tf.data</code> API, and we'd encourage you to try it out!</p>", "body_text": "Is there a technical reason that prevents Iterator from being an iterator?\n\nYes. In TensorFlow (except Eager mode), we use the tf.data.Iterator to get symbolic tf.Tensor objects that can be chained together with other operations to build a dataflow graph. We typically build the graph once, and use it many times. Wrapping the graph construction in a for loop (by using the tf.data.Iterator as a Python iterator) would not be efficient. Furthermore, tf.data.Iterator is implemented using TensorFlow operations, so you would need to provide a tf.Session to run these operations, and the Python iterator protocol doesn't provide a way to do that.\nIn eager mode, you can wrap a tf.data.Dataset in a tf.contrib.eager.Iterator, which is usable as a Python iterator. This definitely seems to be a more natural use of the tf.data API, and we'd encourage you to try it out!", "body": "> Is there a technical reason that prevents Iterator from being an iterator?\r\n\r\nYes. In TensorFlow (except Eager mode), we use the `tf.data.Iterator` to get symbolic `tf.Tensor` objects that can be chained together with other operations to build a dataflow graph. We typically build the graph once, and use it many times. Wrapping the graph construction in a `for` loop (by using the `tf.data.Iterator` as a Python iterator) would not be efficient. Furthermore, `tf.data.Iterator` is implemented using TensorFlow operations, so you would need to provide a `tf.Session` to run these operations, and the Python iterator protocol doesn't provide a way to do that.\r\n\r\nIn eager mode, you can wrap a `tf.data.Dataset` in a [`tf.contrib.eager.Iterator`](https://www.tensorflow.org/versions/master/api_docs/python/tf/contrib/eager/Iterator), which *is* usable as a Python iterator. This definitely seems to be a more natural use of the `tf.data` API, and we'd encourage you to try it out!"}