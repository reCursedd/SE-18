{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/226873658", "html_url": "https://github.com/tensorflow/tensorflow/issues/2919#issuecomment-226873658", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2919", "id": 226873658, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNjg3MzY1OA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-17T20:29:08Z", "updated_at": "2016-06-17T20:29:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2473609\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nanddalal\">@nanddalal</a> extra copy in <code>np.array</code> seems like a bug, good catch.</p>\n<p>As far as feasibility of removing the extra copy, I believe the memcpy is happening in <a href=\"https://github.com/tensorflow/tensorflow/blob/d42facc3cc9611f0c9722c81551a7404a0bd3f6b/tensorflow/python/client/tf_session_helper.cc#L445\">TF_wrapper_helper</a>. There's a note from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> that memcpy is there to prevent having to acquire GIL on deallocation.</p>\n<p>Since numpy array object is owned by Python runtime, when it's destroyed Python will try to de-allocate the data. If there's a way to tell numpy to release the ownership of the data buffer, that could be a work-around.</p>\n<p>Perhaps an intermediate step would be to replace memcpy with multi-threaded memcpy. There's a six-year old <a href=\"http://stackoverflow.com/questions/4260602/how-to-increase-performance-of-memcpy\" rel=\"nofollow\">post on SO</a> suggesting 6x improvement</p>", "body_text": "@nanddalal extra copy in np.array seems like a bug, good catch.\nAs far as feasibility of removing the extra copy, I believe the memcpy is happening in TF_wrapper_helper. There's a note from @mrry that memcpy is there to prevent having to acquire GIL on deallocation.\nSince numpy array object is owned by Python runtime, when it's destroyed Python will try to de-allocate the data. If there's a way to tell numpy to release the ownership of the data buffer, that could be a work-around.\nPerhaps an intermediate step would be to replace memcpy with multi-threaded memcpy. There's a six-year old post on SO suggesting 6x improvement", "body": "@nanddalal extra copy in `np.array` seems like a bug, good catch. \n\nAs far as feasibility of removing the extra copy, I believe the memcpy is happening in [TF_wrapper_helper](https://github.com/tensorflow/tensorflow/blob/d42facc3cc9611f0c9722c81551a7404a0bd3f6b/tensorflow/python/client/tf_session_helper.cc#L445). There's a note from @mrry that memcpy is there to prevent having to acquire GIL on deallocation.\n\nSince numpy array object is owned by Python runtime, when it's destroyed Python will try to de-allocate the data. If there's a way to tell numpy to release the ownership of the data buffer, that could be a work-around.\n\nPerhaps an intermediate step would be to replace memcpy with multi-threaded memcpy. There's a six-year old [post on SO](http://stackoverflow.com/questions/4260602/how-to-increase-performance-of-memcpy) suggesting 6x improvement\n"}