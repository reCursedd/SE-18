{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/181841083", "pull_request_review_id": 112535919, "id": 181841083, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTg0MTA4Mw==", "diff_hunk": "@@ -42,26 +43,287 @@ limitations under the License.\n #include \"tensorflow/core/util/mkl_util.h\"\n \n #ifndef INTEL_MKL_ML\n-\n #include \"mkldnn.hpp\"\n \n using mkldnn::prop_kind;\n using mkldnn::stream;\n-\n-using mkldnn::convolution_direct;\n using mkldnn::convolution_forward;\n+using mkldnn::convolution_direct;\n+\n #else\n #include \"mkl_dnn.h\"\n #include \"mkl_dnn_types.h\"\n #endif\n \n namespace tensorflow {\n \n+#ifndef INTEL_MKL_ML\n+\n+template <typename T>\n+class Conv2DFwd : public DnnOp {\n+ public:\n+  Conv2DFwd(memory::dims src_dims,\n+            memory::dims filter_dims,\n+            memory::dims bias_dims,\n+            memory::dims dst_dims,\n+            memory::dims strides,\n+            memory::dims dilations,\n+            memory::dims padding_l,\n+            memory::dims padding_r) {\n+    fwd_stream_.reset(new stream(stream::kind::eager));\n+    // create conv primitive\n+    if (conv_fwd_ == nullptr) {\n+      Setup(src_dims, filter_dims, bias_dims, dst_dims,\n+          strides, dilations, padding_l, padding_r);\n+    }\n+  }\n+\n+  ~Conv2DFwd() {}\n+\n+ private:\n+  void Setup(memory::dims src_dims,\n+             memory::dims filter_dims,\n+             memory::dims bias_dims,\n+             memory::dims dst_dims,\n+             memory::dims strides,\n+             memory::dims dilations,\n+             memory::dims padding_l,\n+             memory::dims padding_r) {\n+    strides_ = strides;\n+    padding_l_ = padding_l;\n+    padding_r_ = padding_r;\n+\n+    // create memory descriptors for convolution data w/ no specified format\n+    src_md_.reset(new memory::desc({src_dims}, MklDnnType<T>(),\n+                                   memory::format::any));\n+\n+    filter_md_.reset(new memory::desc({filter_dims},\n+                  MklDnnType<T>(), memory::format::any));\n+\n+    dst_md_.reset(new memory::desc({dst_dims}, MklDnnType<T>(),\n+                                   memory::format::any));\n+    if (!bias_dims.empty())\n+        bias_md_.reset(new memory::desc({bias_dims}, MklDnnType<T>(),\n+                                   memory::format::any));\n+    // create a convolution\n+    if (!bias_dims.empty()) {\n+      fwd_desc_.reset(new convolution_forward::desc(prop_kind::forward,\n+                      convolution_direct, *src_md_, *filter_md_,\n+                      *bias_md_, *dst_md_, strides_, dilations,\n+                      padding_l_, padding_r_, padding_kind::zero));\n+    } else {\n+      fwd_desc_.reset(new convolution_forward::desc(prop_kind::forward,\n+                      convolution_direct, *src_md_, *filter_md_,\n+                      *dst_md_, strides_, dilations,\n+                      padding_l_, padding_r_, padding_kind::zero));\n+    }\n+\n+    fwd_pd_.reset(new convolution_forward::primitive_desc(\n+                  *fwd_desc_, cpu_engine_));\n+\n+    // store the expected memory format\n+    src_fmt_ = static_cast<mkldnn::memory::format>(\n+                 fwd_pd_.get()->src_primitive_desc().desc().data.format);\n+\n+    filter_fmt_ = static_cast<mkldnn::memory::format>(\n+                 fwd_pd_.get()->weights_primitive_desc().desc().data.format);\n+    dst_fmt_ = static_cast<mkldnn::memory::format>(\n+                 fwd_pd_.get()->dst_primitive_desc().desc().data.format);\n+\n+    // create memory primitive based on dummy data\n+    src_mem_.reset(new memory(fwd_pd_.get()->src_primitive_desc(), DummyData));\n+    filter_mem_.reset(new memory(fwd_pd_.get()->weights_primitive_desc(),\n+                      DummyData));\n+    dst_mem_.reset(new memory(fwd_pd_.get()->dst_primitive_desc(), DummyData));\n+\n+    // create convolution primitive and add it to net\n+    if (!bias_dims.empty()) {\n+        bias_mem_.reset(new memory({{{bias_dims}, MklDnnType<T>(),\n+                             memory::format::x}, cpu_engine_}, DummyData));\n+        conv_fwd_.reset(new convolution_forward(*fwd_pd_, *src_mem_,\n+                        *filter_mem_, *bias_mem_, *dst_mem_));\n+    } else {\n+        conv_fwd_.reset(new convolution_forward(*fwd_pd_, *src_mem_,\n+                        *filter_mem_, *dst_mem_));\n+    }\n+\n+    fwd_primitives_.push_back(*conv_fwd_);\n+    return;\n+  }\n+\n+ public:\n+  // Convolution forward execute with bias\n+  void Execute(void* src, void* w, void* b, void* dst) {\n+    src_mem_->set_data_handle(src);\n+    filter_mem_->set_data_handle(w);\n+    bias_mem_->set_data_handle(b);\n+    dst_mem_->set_data_handle(dst);\n+    fwd_stream_->submit(fwd_primitives_);\n+\n+    // after exec, set data handle back\n+    src_mem_->set_data_handle(DummyData);\n+    filter_mem_->set_data_handle(DummyData);\n+    bias_mem_->set_data_handle(DummyData);\n+    dst_mem_->set_data_handle(DummyData);\n+\n+    return;\n+  }\n+\n+  // Convolution forward execute without bias\n+  void Execute(void* src, void* w, void* dst) {\n+    src_mem_->set_data_handle(src);\n+    filter_mem_->set_data_handle(w);\n+    dst_mem_->set_data_handle(dst);\n+    fwd_stream_->submit(fwd_primitives_);\n+\n+    // after exec, set data handle back\n+    src_mem_->set_data_handle(DummyData);\n+    filter_mem_->set_data_handle(DummyData);\n+    dst_mem_->set_data_handle(DummyData);\n+\n+    return;\n+  }\n+\n+  // expected memory format for this primitive instance\n+  memory::format src_fmt_;\n+  memory::format filter_fmt_;\n+  memory::format dst_fmt_;\n+\n+  // convolution primitive\n+  std::shared_ptr<mkldnn::convolution_forward::primitive_desc> fwd_pd_;\n+  std::shared_ptr<mkldnn::primitive> conv_fwd_;\n+\n+ private:\n+  // MKLDNN memory\n+  std::shared_ptr<mkldnn::memory> src_mem_;", "path": "tensorflow/core/kernels/mkl_conv_ops.cc", "position": null, "original_position": 167, "commit_id": "147a783408be86865ebcec3f3684a2df21d094c2", "original_commit_id": "6d5d7321885b11010a2e7fa3c4668ba6d7b66c86", "user": {"login": "gztf", "id": 29990365, "node_id": "MDQ6VXNlcjI5OTkwMzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/29990365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gztf", "html_url": "https://github.com/gztf", "followers_url": "https://api.github.com/users/gztf/followers", "following_url": "https://api.github.com/users/gztf/following{/other_user}", "gists_url": "https://api.github.com/users/gztf/gists{/gist_id}", "starred_url": "https://api.github.com/users/gztf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gztf/subscriptions", "organizations_url": "https://api.github.com/users/gztf/orgs", "repos_url": "https://api.github.com/users/gztf/repos", "events_url": "https://api.github.com/users/gztf/events{/privacy}", "received_events_url": "https://api.github.com/users/gztf/received_events", "type": "User", "site_admin": false}, "body": "shared_ptr has been commonly used by the open source MKL-DNN. So we follow up with the same style. If required, we can replaced it with unique_ptr. \r\nUsing shared_ptr seems necessary as we saw weird behavior not using it in the beginning of this project. I will double-check. ", "created_at": "2018-04-16T18:29:17Z", "updated_at": "2018-04-18T17:12:04Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/17943#discussion_r181841083", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17943", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/181841083"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/17943#discussion_r181841083"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17943"}}, "body_html": "<p>shared_ptr has been commonly used by the open source MKL-DNN. So we follow up with the same style. If required, we can replaced it with unique_ptr.<br>\nUsing shared_ptr seems necessary as we saw weird behavior not using it in the beginning of this project. I will double-check.</p>", "body_text": "shared_ptr has been commonly used by the open source MKL-DNN. So we follow up with the same style. If required, we can replaced it with unique_ptr.\nUsing shared_ptr seems necessary as we saw weird behavior not using it in the beginning of this project. I will double-check.", "in_reply_to_id": 181260052}