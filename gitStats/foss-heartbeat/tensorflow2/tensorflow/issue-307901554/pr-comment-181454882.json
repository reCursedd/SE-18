{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/181454882", "pull_request_review_id": 112092006, "id": 181454882, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTQ1NDg4Mg==", "diff_hunk": "@@ -1755,7 +1757,76 @@ class MklDnnData {\n   }\n };\n \n-#endif  // INTEL_MKL_ML\n+/// Base class for operations with reuse of DNN primitives\n+///\n+class DnnOp {\n+ public:\n+  virtual ~DnnOp() {}\n+  virtual void Setup() {return;}\n+  virtual void Execute() {return;}\n+\n+  // dummy data\n+  unsigned char DummyData[256];\n+};\n+\n+const mkldnn::memory::dims NONE_DIMS = {};\n+// This constant is used to declare dummy buffer (size), for MKL primitives\n+template <typename T>\n+class DnnOpFactory {\n+ public:\n+  DnnOpFactory() {}\n+  ~DnnOpFactory() {}\n+\n+  DnnOp* GetOp(std::string key) {\n+    auto stream_iter = DnnOpFactory<T>::GetHashMap().find(key);\n+    if (stream_iter == DnnOpFactory<T>::GetHashMap().end()) {\n+      return nullptr;\n+    } else {\n+      return stream_iter->second;\n+    }\n+  }\n+\n+  void SetOp(std::string key, DnnOp* op) {\n+    auto stream_iter = DnnOpFactory<T>::GetHashMap().find(key);\n+\n+    CHECK(stream_iter == DnnOpFactory<T>::GetHashMap().end());\n+\n+    DnnOpFactory<T>::GetHashMap()[key] = op;\n+  }\n+\n+ private:\n+  static inline std::unordered_map<std::string, DnnOp*> &GetHashMap() {\n+    static thread_local std::unordered_map<std::string, DnnOp*> map_;\n+    return map_;\n+  }\n+};\n+\n+// utility functions which convert int, double, bool or dims to string", "path": "tensorflow/core/util/mkl_util.h", "position": null, "original_position": 58, "commit_id": "147a783408be86865ebcec3f3684a2df21d094c2", "original_commit_id": "e073a853162cd5ad058ae9095044754c663b7077", "user": {"login": "gztf", "id": 29990365, "node_id": "MDQ6VXNlcjI5OTkwMzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/29990365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gztf", "html_url": "https://github.com/gztf", "followers_url": "https://api.github.com/users/gztf/followers", "following_url": "https://api.github.com/users/gztf/following{/other_user}", "gists_url": "https://api.github.com/users/gztf/gists{/gist_id}", "starred_url": "https://api.github.com/users/gztf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gztf/subscriptions", "organizations_url": "https://api.github.com/users/gztf/orgs", "repos_url": "https://api.github.com/users/gztf/repos", "events_url": "https://api.github.com/users/gztf/events{/privacy}", "received_events_url": "https://api.github.com/users/gztf/received_events", "type": "User", "site_admin": false}, "body": "Agree, some of functions are reserved for new future PR and should be removed.\r\nActually after creating this PR two weeks, we found an more efficient way to \r\ncreate \"key\". Let me replace ALL these method with the \"efficient\" way (from performance perspective).  Thanks!", "created_at": "2018-04-13T17:18:02Z", "updated_at": "2018-04-18T17:12:04Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/17943#discussion_r181454882", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17943", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/181454882"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/17943#discussion_r181454882"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17943"}}, "body_html": "<p>Agree, some of functions are reserved for new future PR and should be removed.<br>\nActually after creating this PR two weeks, we found an more efficient way to<br>\ncreate \"key\". Let me replace ALL these method with the \"efficient\" way (from performance perspective).  Thanks!</p>", "body_text": "Agree, some of functions are reserved for new future PR and should be removed.\nActually after creating this PR two weeks, we found an more efficient way to\ncreate \"key\". Let me replace ALL these method with the \"efficient\" way (from performance perspective).  Thanks!", "in_reply_to_id": 180938620}