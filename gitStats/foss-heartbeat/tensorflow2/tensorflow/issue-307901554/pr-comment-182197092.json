{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/182197092", "pull_request_review_id": 112953663, "id": 182197092, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjE5NzA5Mg==", "diff_hunk": "@@ -1755,7 +1757,101 @@ class MklDnnData {\n   }\n };\n \n-#endif  // INTEL_MKL_ML\n+/// Base class for operations with reuse of DNN primitives\n+///\n+class DnnOp {\n+ public:\n+  virtual ~DnnOp() {}\n+  virtual void Execute() = 0;\n+\n+  // Dummy data. Its size, hard-coded as 256 here, does\n+  // not matter since MKL should never operate on this buffer.\n+  unsigned char DummyData[256];\n+};\n+\n+const mkldnn::memory::dims NONE_DIMS = {};\n+// This constant is used to declare dummy buffer (size), for MKL primitives\n+template <typename T>\n+class DnnOpFactory {\n+ public:\n+  DnnOpFactory() {}\n+  ~DnnOpFactory() {}\n+\n+  DnnOp* GetOp(const std::string& key) {\n+    auto stream_iter = DnnOpFactory<T>::GetHashMap().find(key);\n+    if (stream_iter == DnnOpFactory<T>::GetHashMap().end()) {\n+      return nullptr;\n+    } else {\n+      return stream_iter->second;\n+    }\n+  }\n+\n+  void SetOp(const std::string& key, DnnOp* op) {\n+    auto stream_iter = DnnOpFactory<T>::GetHashMap().find(key);\n+\n+    CHECK(stream_iter == DnnOpFactory<T>::GetHashMap().end());\n+\n+    DnnOpFactory<T>::GetHashMap()[key] = op;\n+  }\n+\n+ private:\n+  static inline std::unordered_map<std::string, DnnOp*> &GetHashMap() {\n+    static thread_local std::unordered_map<std::string, DnnOp*> map_;\n+    return map_;\n+  }\n+};\n+\n+// utility class for creating keys of MKL primitive pool.\n+class FactoryKeyCreator {\n+ public:\n+  FactoryKeyCreator() {\n+    key_.reserve(kMaxKeyLength);\n+  }\n+\n+  ~FactoryKeyCreator() {}\n+\n+  void AddAsKey(const string &str) {\n+    auto buffer = reinterpret_cast<const char *>(str.c_str());\n+    Append(buffer, str.length());\n+  }\n+\n+  void AddAsKey(const mkldnn::memory::dims &dims) {\n+    for (unsigned int i = 0; i < dims.size(); i++) {\n+      AddAsKey(dims[i]);\n+    }\n+  }\n+\n+  void AddAsKey(const float data) {\n+    auto buffer = reinterpret_cast<const char *>(&data);\n+    Append(buffer, sizeof(float));\n+  }\n+\n+  void AddAsKey(const int data) {\n+    auto buffer = reinterpret_cast<const char*>(&data);\n+    auto len = sizeof(data) - (__builtin_clz(data)/8);", "path": "tensorflow/core/util/mkl_util.h", "position": null, "original_position": 85, "commit_id": "147a783408be86865ebcec3f3684a2df21d094c2", "original_commit_id": "6fd11be51059f5e83a5b845be7a3426851a0f26f", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "body": "This seems needlessly complicated. The key is still unique with the leading zeros. Without this,  I think you could consolidate the methods for scalars as\r\n```\r\ntemplate <typename T>\r\nvoid AddAsKey(T data) {\r\n  auto buffer = reinterpret_cast<const char*>(&data);\r\n  Append(buffer, len);\r\n}\r\n```", "created_at": "2018-04-17T19:21:30Z", "updated_at": "2018-04-18T17:12:04Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/17943#discussion_r182197092", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17943", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/182197092"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/17943#discussion_r182197092"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17943"}}, "body_html": "<p>This seems needlessly complicated. The key is still unique with the leading zeros. Without this,  I think you could consolidate the methods for scalars as</p>\n<pre><code>template &lt;typename T&gt;\nvoid AddAsKey(T data) {\n  auto buffer = reinterpret_cast&lt;const char*&gt;(&amp;data);\n  Append(buffer, len);\n}\n</code></pre>", "body_text": "This seems needlessly complicated. The key is still unique with the leading zeros. Without this,  I think you could consolidate the methods for scalars as\ntemplate <typename T>\nvoid AddAsKey(T data) {\n  auto buffer = reinterpret_cast<const char*>(&data);\n  Append(buffer, len);\n}"}