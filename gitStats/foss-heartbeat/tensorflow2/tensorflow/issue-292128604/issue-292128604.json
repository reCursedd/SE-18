{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16496", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16496/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16496/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16496/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16496", "id": 292128604, "node_id": "MDU6SXNzdWUyOTIxMjg2MDQ=", "number": 16496, "title": "Feature Suggestion: \"Float-bit-strings\"", "user": {"login": "Hvass-Labs", "id": 13588114, "node_id": "MDQ6VXNlcjEzNTg4MTE0", "avatar_url": "https://avatars2.githubusercontent.com/u/13588114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hvass-Labs", "html_url": "https://github.com/Hvass-Labs", "followers_url": "https://api.github.com/users/Hvass-Labs/followers", "following_url": "https://api.github.com/users/Hvass-Labs/following{/other_user}", "gists_url": "https://api.github.com/users/Hvass-Labs/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hvass-Labs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hvass-Labs/subscriptions", "organizations_url": "https://api.github.com/users/Hvass-Labs/orgs", "repos_url": "https://api.github.com/users/Hvass-Labs/repos", "events_url": "https://api.github.com/users/Hvass-Labs/events{/privacy}", "received_events_url": "https://api.github.com/users/Hvass-Labs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-27T15:23:29Z", "updated_at": "2018-02-17T20:19:21Z", "closed_at": "2018-01-30T03:22:21Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information (Not really relevant ...)</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: 8 (?)</li>\n<li><strong>GPU model and memory</strong>: GTX 1070</li>\n<li><strong>Exact command to reproduce</strong>: NA</li>\n</ul>\n<h3>Summary</h3>\n<p>This proposes the use of what I call \"float-bit-strings\" or \"float-bits\" instead of one-hot-encoded arrays so as to greatly reduce the memory and computational usage e.g. in language models.</p>\n<p>I don't think this preliminary discussion belongs on StackOverflow so I hope it is OK to post it here. It is a new feature that could be added to TensorFlow. There's quite likely somebody on the TensorFlow dev-team or in the community who has already thought of this. But I have searched the internet and cannot find any mentioning of a similar idea.</p>\n<h3>Background</h3>\n<p>I have started looking at language-models using e.g. LSTM and encoder-decoder architectures. There are some aspects that seem to be incredibly wasteful and limiting. Let me briefly describe this and please forgive me if I am ignorant, I have only spent a week or two on studying LSTM and language models so far :-)</p>\n<p>For example in Machine Translation we typically have the text-data for the source- and target-languages as lists of integer-tokens, where each integer maps to a word in the vocabulary. There may be e.g. 100k different words so these integer-tokens can take on values between zero and 100k. This data cannot be input directly to a Neural Network so we use an embedding layer to convert these integers to n-dimensional vectors with values between zero and one, according to a mapping-function that may either be loaded from disk or trained along with the rest of the Neural Network; if I understand correctly.</p>\n<p>For the decoder in a language model, we have a similar problem where we must somehow convert integer-tokens to data that the neural network can work on. A typical way of doing this seems to be a one-hot encoding; if I understand correctly. (This could also be done for the encoder-part, but it doesn't seem to be necessary).</p>\n<p>I can't figure out what the max-size of one-hot encodings are in TensorFlow and whether it can even handle 100k one-hot encoded tensors. But it is obviously an extremely wasteful data-mapping. For example, for a vocab of 100k words we only need 17-bits (log2(100k)) to represent each integer-token - but for a one-hot encoding using 32-bit floats we need 32 x 100k bits!</p>\n<p>I can't figure out what people normally do, but it seems like the common practice is to limit the vocab to a smaller number of words, e.g. 1k or 10k. It appears that Google Translate runs on multiple GPU's and maybe that's why they can handle extremely large vocabs with one-hot encoded tensors?</p>\n<h3>Float-bit-strings</h3>\n<p>I thought it might be possible to use a bit-string-like representation inside a TensorFlow model. I have searched the internet and cannot find anyone who has proposed a similar idea.</p>\n<p>The idea is to convert each integer-token to what I call a \"float-bit-string\" or \"float-bits\". For example, the number 123 has the bit-string 01111011. We can then make a corresponding tensor with floats [0., 1., 1., 1., 1., 0., 1., 1.] and input this to the TensorFlow model.</p>\n<p>In a language model we would then have to input and output these \"float-bits\" instead of one-hot encoded arrays. This would dramatically reduce the memory and computational requirements of the models.</p>\n<h3>Test</h3>\n<p>I have hacked together a little test using numpy and Keras / TensorFlow. The idea is to see if we can learn to map integers x with values between 0 and 10k to y = 123 * x using these \"float-bit\" encodings. And it works as you can see by running the code further below! That is perhaps not a surprise as neural networks are general function approximators, but it's not always that they work according to theory :-)</p>\n<p>However, the network cannot learn the arithmetic mapping of e.g. y = 123 * x when x and y are \"float-bits\". This means it cannot generalize to data it hasn't seen during training in the arithmetic manner we might expect. But I don't think that is necessary for use in e.g. language models where we merely want to be able to map some tensor from e.g. an LSTM to an integer-token from the vocabulary.</p>\n<h3>Loss Functions</h3>\n<p>I have tested this with both MSE and binary cross-entropy in Keras, which unfortunately isn't documented so I'm not completely sure what it does. But in both cases it works and the model trains to get the bit-wise mapping correct.</p>\n<p>There might be cases where you are more concerned about the MSE between the actual integer-values instead of their \"float-bit-string\" representations, in which case we would need a TensorFlow method to convert \"float-bits\" to integers and then take the MSE of the resulting integer and the true integer from the data-set. This is not relevant for language models, because the proximity of integer-keys do not correspond to words that are necessarily similar in meaning. But it could be useful in other applications.</p>\n<h3>TensorFlow Implementation</h3>\n<p>In order to make this work in TensorFlow it seems that we just need a couple of TensorFlow-methods for converting between integers and \"float-bit-strings\". I have hacked this together using numpy but I'm sure somebody on the dev-team can make a super-fast native TensorFlow implementation. Then we just need a wrapper in Keras and that might be enough to do e.g. language models with gigantic vocabs.</p>\n<h3>Test-Code</h3>\n<pre><code>import numpy as np\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import InputLayer\nfrom tensorflow.python.keras.layers import Dense\nfrom tensorflow.python.keras.optimizers import RMSprop\n\n\n# Number of bits to use in our \"float-bit-strings\".\nnum_bits = 32\n\ndef int_to_floatbits(value):\n    \"\"\"\n    Convert a single integer value to an array of 0.0 and 1.0 floats\n    corresponding to the bit-string.\n\n    Example: value==123 gives [0.  ... 0.  1.  1.  1.  1.  0.  1.  1.]\n    \"\"\"\n\n    # Convert the integer value to a bit-string.\n    # NOTE: This has been fixed to 32-bit length.\n    bitstr = \"{0:032b}\".format(value)\n\n    # Convert the bit-string to an array of equivalent float-values.\n    floatbits = np.array([1.0 if bit == '1' else 0.0 for bit in bitstr])\n\n    return floatbits\n\n\ndef floatbits_to_strbits(floatbits):\n    \"\"\"\n    Convert an array of floats to a bit-string.\n    A float value greater than 0.5 results in 1.0\n    and a float value less or equal to 0.5 results in 0.0\n\n    Example: [0.1, 0.49, 0.51, 0.9, 1.1, -2.3] gives \"001110\"\n    \"\"\"\n\n    # Convert the float-array to a list of bit-characters '0' or '1'.\n    charbits = ['1' if floatbit &gt; 0.5 else '0' for floatbit in floatbits]\n\n    # Convert the bit-characters to a string.\n    strbits = \"\".join(charbits)\n\n    return strbits\n\ndef floatbits_to_int(floatbits):\n    \"\"\"\n    Convert a float-array to an integer, assuming each element\n    of the float-array corresponds to a bit.\n    \n    Example: [0.1, 0.49, 0.51, 0.9, 1.1, -2.3] corresponds to\n    the bit-string \"001110\" which is the integer 14.\n    \"\"\"\n\n    # Convert the float-array to a bit-string.\n    strbits = floatbits_to_strbits(floatbits=floatbits)\n\n    # Convert the bit-string to an integer value.\n    value = int(strbits, base=2)\n\n    return value\n\n\n# Various tests of the above functions.\nif True:\n    foo = int_to_floatbits(123)\n    print(foo)\n    print(floatbits_to_strbits(foo))\n    print(floatbits_to_int(foo))\n\n    bar = [0.3,  0.9,  0.8,  0.51,  0.501,  0.4999,  0.999,  1.1]\n    print(floatbits_to_strbits(bar))\n    print(floatbits_to_int(bar))\n\n    baz = [0.1, 0.49, 0.51, 0.9, 1.1, -2.3]\n    print(floatbits_to_strbits(baz))\n    print(floatbits_to_int(baz))\n\n# quit()\n\n# We will now train a TensorFlow / Keras model\n# that maps integers between 0 and 10000 to\n# the same numbers multiplied by 123.\n# If we were to use one-hot encoding then we would\n# need 10000 inputs to the Neural Network and\n# 1230000 outputs if using the full output range.\n# Using \"bit-strings\" encoded as floats, we only need\n# 14 bits for the input and 21 bits for the output.\n# We round it up to 32-bits.\n\n# The dataset as integers,\n# we want the Neural Network to map from x to y.\nx_int = np.arange(10000, dtype=int)\ny_int = 123 * x_int\n\n# Convert the dataset to \"float-bit-strings\" (aka. float-bits).\nx = np.array(list(map(int_to_floatbits, x_int)))\ny_true = np.array(list(map(int_to_floatbits, y_int)))\n\n# Check the mapping is correct. E.g. if the number of required bits\n# exceeds num_bits then these may not create numpy matrices correctly.\nif False:\n    print(x.shape)\n    print(y_true.shape)\n    print(x[0:10])\n    print(y_true[0:10])\n\n# Start construction of the Keras Sequential model.\nmodel = Sequential()\n\n# Add an input layer to the model.\nmodel.add(InputLayer(input_shape=(num_bits,)))\n\n# Fully-connected / dense layers with ReLU-activation.\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(512, activation='relu'))\n\n# Last fully-connected / dense layer with sigmoid-activation\n# so the output is between 0.0 and 1.0\nmodel.add(Dense(num_bits, activation='sigmoid'))\n\noptimizer = RMSprop(lr=1e-3)\n\nif True:\n    # Loss is MSE.\n    model.compile(optimizer=optimizer,\n                  loss='mean_squared_error')\nelse:\n    # Loss is Binary Crossentropy, but also report MSE.\n    model.compile(optimizer=optimizer,\n                  loss='binary_crossentropy',\n                  metrics=['mse'])\n\nepochs = 50\n\nif True:\n    # Fit the model using the entire data-set.\n    model.fit(x, y_true, epochs=epochs)\nelse:\n    # Fit the model using the data-set split into training and validation.\n    # You will see that the validation-error is high so the model\n    # has not learned the arithmetic function of the data-set.\n    model.fit(x, y_true, epochs=epochs, validation_split=0.2)\n\n# Use the model to predict the output for a part of the data-set.\ny_pred = model.predict(x[0:10])\n\n# The true output for this part of the data-set.\ny_true_subset = y_true[0:10]\n\n# Map the \"float-bit-strings\" to integers.\ny_pred_int = list(map(floatbits_to_int, y_pred))\ny_true_int = list(map(floatbits_to_int, y_true_subset))\n\n# Print the predicted and true integers.\nprint(*zip(y_pred_int, y_true_int))\n\n# Round the float-bit-strings to 2 decimals for pretty printing.\ndef rounded(numbers):\n    return np.array([[\"{:.2f}\".format(x) for x in row] for row in numbers])\ny_pred_rounded = rounded(y_pred)\ny_true_rounded = rounded(y_true_subset)\n\n# Print the predicted and true float-bit-strings.\n# (I know it is bad to reuse the same variable-names here ...)\nfor y_pred_int, y_true_int, y_pred_rounded, y_true_rounded \\\n    in zip(y_pred_int, y_true_int, y_pred_rounded, y_true_rounded):\n\n    print(y_true_int, \"\\t\", y_true_rounded)\n    print(y_pred_int, \"\\t\", y_pred_rounded)\n    print()\n</code></pre>\n<h3>Output</h3>\n<p>True integer and true \"float-bit-string\" (note that the numbers are all exactly 0.00 or 1.00):</p>\n<pre><code>738 \t ['0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '1.00' '0.00' '1.00' '1.00' '1.00' '0.00' '0.00' '0.00' '1.00' '0.00']\n</code></pre>\n<p>Predicted integer and predicted \"float-bit-string\" (note that the numbers a <strong>not</strong> all exactly 0.00 or 1.00):</p>\n<pre><code>738 \t ['0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.03' '0.00' '0.00' '0.00' '0.01' '0.00' '0.00' '0.00' '0.00' '0.99' '0.00' '1.00' '1.00' '1.00' '0.00' '0.00' '0.00' '1.00' '0.00']\n</code></pre>", "body_text": "System information (Not really relevant ...)\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.4\nPython version: 3.6\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: 8 (?)\nGPU model and memory: GTX 1070\nExact command to reproduce: NA\n\nSummary\nThis proposes the use of what I call \"float-bit-strings\" or \"float-bits\" instead of one-hot-encoded arrays so as to greatly reduce the memory and computational usage e.g. in language models.\nI don't think this preliminary discussion belongs on StackOverflow so I hope it is OK to post it here. It is a new feature that could be added to TensorFlow. There's quite likely somebody on the TensorFlow dev-team or in the community who has already thought of this. But I have searched the internet and cannot find any mentioning of a similar idea.\nBackground\nI have started looking at language-models using e.g. LSTM and encoder-decoder architectures. There are some aspects that seem to be incredibly wasteful and limiting. Let me briefly describe this and please forgive me if I am ignorant, I have only spent a week or two on studying LSTM and language models so far :-)\nFor example in Machine Translation we typically have the text-data for the source- and target-languages as lists of integer-tokens, where each integer maps to a word in the vocabulary. There may be e.g. 100k different words so these integer-tokens can take on values between zero and 100k. This data cannot be input directly to a Neural Network so we use an embedding layer to convert these integers to n-dimensional vectors with values between zero and one, according to a mapping-function that may either be loaded from disk or trained along with the rest of the Neural Network; if I understand correctly.\nFor the decoder in a language model, we have a similar problem where we must somehow convert integer-tokens to data that the neural network can work on. A typical way of doing this seems to be a one-hot encoding; if I understand correctly. (This could also be done for the encoder-part, but it doesn't seem to be necessary).\nI can't figure out what the max-size of one-hot encodings are in TensorFlow and whether it can even handle 100k one-hot encoded tensors. But it is obviously an extremely wasteful data-mapping. For example, for a vocab of 100k words we only need 17-bits (log2(100k)) to represent each integer-token - but for a one-hot encoding using 32-bit floats we need 32 x 100k bits!\nI can't figure out what people normally do, but it seems like the common practice is to limit the vocab to a smaller number of words, e.g. 1k or 10k. It appears that Google Translate runs on multiple GPU's and maybe that's why they can handle extremely large vocabs with one-hot encoded tensors?\nFloat-bit-strings\nI thought it might be possible to use a bit-string-like representation inside a TensorFlow model. I have searched the internet and cannot find anyone who has proposed a similar idea.\nThe idea is to convert each integer-token to what I call a \"float-bit-string\" or \"float-bits\". For example, the number 123 has the bit-string 01111011. We can then make a corresponding tensor with floats [0., 1., 1., 1., 1., 0., 1., 1.] and input this to the TensorFlow model.\nIn a language model we would then have to input and output these \"float-bits\" instead of one-hot encoded arrays. This would dramatically reduce the memory and computational requirements of the models.\nTest\nI have hacked together a little test using numpy and Keras / TensorFlow. The idea is to see if we can learn to map integers x with values between 0 and 10k to y = 123 * x using these \"float-bit\" encodings. And it works as you can see by running the code further below! That is perhaps not a surprise as neural networks are general function approximators, but it's not always that they work according to theory :-)\nHowever, the network cannot learn the arithmetic mapping of e.g. y = 123 * x when x and y are \"float-bits\". This means it cannot generalize to data it hasn't seen during training in the arithmetic manner we might expect. But I don't think that is necessary for use in e.g. language models where we merely want to be able to map some tensor from e.g. an LSTM to an integer-token from the vocabulary.\nLoss Functions\nI have tested this with both MSE and binary cross-entropy in Keras, which unfortunately isn't documented so I'm not completely sure what it does. But in both cases it works and the model trains to get the bit-wise mapping correct.\nThere might be cases where you are more concerned about the MSE between the actual integer-values instead of their \"float-bit-string\" representations, in which case we would need a TensorFlow method to convert \"float-bits\" to integers and then take the MSE of the resulting integer and the true integer from the data-set. This is not relevant for language models, because the proximity of integer-keys do not correspond to words that are necessarily similar in meaning. But it could be useful in other applications.\nTensorFlow Implementation\nIn order to make this work in TensorFlow it seems that we just need a couple of TensorFlow-methods for converting between integers and \"float-bit-strings\". I have hacked this together using numpy but I'm sure somebody on the dev-team can make a super-fast native TensorFlow implementation. Then we just need a wrapper in Keras and that might be enough to do e.g. language models with gigantic vocabs.\nTest-Code\nimport numpy as np\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import InputLayer\nfrom tensorflow.python.keras.layers import Dense\nfrom tensorflow.python.keras.optimizers import RMSprop\n\n\n# Number of bits to use in our \"float-bit-strings\".\nnum_bits = 32\n\ndef int_to_floatbits(value):\n    \"\"\"\n    Convert a single integer value to an array of 0.0 and 1.0 floats\n    corresponding to the bit-string.\n\n    Example: value==123 gives [0.  ... 0.  1.  1.  1.  1.  0.  1.  1.]\n    \"\"\"\n\n    # Convert the integer value to a bit-string.\n    # NOTE: This has been fixed to 32-bit length.\n    bitstr = \"{0:032b}\".format(value)\n\n    # Convert the bit-string to an array of equivalent float-values.\n    floatbits = np.array([1.0 if bit == '1' else 0.0 for bit in bitstr])\n\n    return floatbits\n\n\ndef floatbits_to_strbits(floatbits):\n    \"\"\"\n    Convert an array of floats to a bit-string.\n    A float value greater than 0.5 results in 1.0\n    and a float value less or equal to 0.5 results in 0.0\n\n    Example: [0.1, 0.49, 0.51, 0.9, 1.1, -2.3] gives \"001110\"\n    \"\"\"\n\n    # Convert the float-array to a list of bit-characters '0' or '1'.\n    charbits = ['1' if floatbit > 0.5 else '0' for floatbit in floatbits]\n\n    # Convert the bit-characters to a string.\n    strbits = \"\".join(charbits)\n\n    return strbits\n\ndef floatbits_to_int(floatbits):\n    \"\"\"\n    Convert a float-array to an integer, assuming each element\n    of the float-array corresponds to a bit.\n    \n    Example: [0.1, 0.49, 0.51, 0.9, 1.1, -2.3] corresponds to\n    the bit-string \"001110\" which is the integer 14.\n    \"\"\"\n\n    # Convert the float-array to a bit-string.\n    strbits = floatbits_to_strbits(floatbits=floatbits)\n\n    # Convert the bit-string to an integer value.\n    value = int(strbits, base=2)\n\n    return value\n\n\n# Various tests of the above functions.\nif True:\n    foo = int_to_floatbits(123)\n    print(foo)\n    print(floatbits_to_strbits(foo))\n    print(floatbits_to_int(foo))\n\n    bar = [0.3,  0.9,  0.8,  0.51,  0.501,  0.4999,  0.999,  1.1]\n    print(floatbits_to_strbits(bar))\n    print(floatbits_to_int(bar))\n\n    baz = [0.1, 0.49, 0.51, 0.9, 1.1, -2.3]\n    print(floatbits_to_strbits(baz))\n    print(floatbits_to_int(baz))\n\n# quit()\n\n# We will now train a TensorFlow / Keras model\n# that maps integers between 0 and 10000 to\n# the same numbers multiplied by 123.\n# If we were to use one-hot encoding then we would\n# need 10000 inputs to the Neural Network and\n# 1230000 outputs if using the full output range.\n# Using \"bit-strings\" encoded as floats, we only need\n# 14 bits for the input and 21 bits for the output.\n# We round it up to 32-bits.\n\n# The dataset as integers,\n# we want the Neural Network to map from x to y.\nx_int = np.arange(10000, dtype=int)\ny_int = 123 * x_int\n\n# Convert the dataset to \"float-bit-strings\" (aka. float-bits).\nx = np.array(list(map(int_to_floatbits, x_int)))\ny_true = np.array(list(map(int_to_floatbits, y_int)))\n\n# Check the mapping is correct. E.g. if the number of required bits\n# exceeds num_bits then these may not create numpy matrices correctly.\nif False:\n    print(x.shape)\n    print(y_true.shape)\n    print(x[0:10])\n    print(y_true[0:10])\n\n# Start construction of the Keras Sequential model.\nmodel = Sequential()\n\n# Add an input layer to the model.\nmodel.add(InputLayer(input_shape=(num_bits,)))\n\n# Fully-connected / dense layers with ReLU-activation.\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(512, activation='relu'))\n\n# Last fully-connected / dense layer with sigmoid-activation\n# so the output is between 0.0 and 1.0\nmodel.add(Dense(num_bits, activation='sigmoid'))\n\noptimizer = RMSprop(lr=1e-3)\n\nif True:\n    # Loss is MSE.\n    model.compile(optimizer=optimizer,\n                  loss='mean_squared_error')\nelse:\n    # Loss is Binary Crossentropy, but also report MSE.\n    model.compile(optimizer=optimizer,\n                  loss='binary_crossentropy',\n                  metrics=['mse'])\n\nepochs = 50\n\nif True:\n    # Fit the model using the entire data-set.\n    model.fit(x, y_true, epochs=epochs)\nelse:\n    # Fit the model using the data-set split into training and validation.\n    # You will see that the validation-error is high so the model\n    # has not learned the arithmetic function of the data-set.\n    model.fit(x, y_true, epochs=epochs, validation_split=0.2)\n\n# Use the model to predict the output for a part of the data-set.\ny_pred = model.predict(x[0:10])\n\n# The true output for this part of the data-set.\ny_true_subset = y_true[0:10]\n\n# Map the \"float-bit-strings\" to integers.\ny_pred_int = list(map(floatbits_to_int, y_pred))\ny_true_int = list(map(floatbits_to_int, y_true_subset))\n\n# Print the predicted and true integers.\nprint(*zip(y_pred_int, y_true_int))\n\n# Round the float-bit-strings to 2 decimals for pretty printing.\ndef rounded(numbers):\n    return np.array([[\"{:.2f}\".format(x) for x in row] for row in numbers])\ny_pred_rounded = rounded(y_pred)\ny_true_rounded = rounded(y_true_subset)\n\n# Print the predicted and true float-bit-strings.\n# (I know it is bad to reuse the same variable-names here ...)\nfor y_pred_int, y_true_int, y_pred_rounded, y_true_rounded \\\n    in zip(y_pred_int, y_true_int, y_pred_rounded, y_true_rounded):\n\n    print(y_true_int, \"\\t\", y_true_rounded)\n    print(y_pred_int, \"\\t\", y_pred_rounded)\n    print()\n\nOutput\nTrue integer and true \"float-bit-string\" (note that the numbers are all exactly 0.00 or 1.00):\n738 \t ['0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '1.00' '0.00' '1.00' '1.00' '1.00' '0.00' '0.00' '0.00' '1.00' '0.00']\n\nPredicted integer and predicted \"float-bit-string\" (note that the numbers a not all exactly 0.00 or 1.00):\n738 \t ['0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.03' '0.00' '0.00' '0.00' '0.01' '0.00' '0.00' '0.00' '0.00' '0.99' '0.00' '1.00' '1.00' '1.00' '0.00' '0.00' '0.00' '1.00' '0.00']", "body": "### System information (Not really relevant ...)\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.4\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: 8 (?)\r\n- **GPU model and memory**: GTX 1070\r\n- **Exact command to reproduce**: NA\r\n\r\n### Summary\r\n\r\nThis proposes the use of what I call \"float-bit-strings\" or \"float-bits\" instead of one-hot-encoded arrays so as to greatly reduce the memory and computational usage e.g. in language models.\r\n\r\nI don't think this preliminary discussion belongs on StackOverflow so I hope it is OK to post it here. It is a new feature that could be added to TensorFlow. There's quite likely somebody on the TensorFlow dev-team or in the community who has already thought of this. But I have searched the internet and cannot find any mentioning of a similar idea.\r\n\r\n\r\n### Background\r\n\r\nI have started looking at language-models using e.g. LSTM and encoder-decoder architectures. There are some aspects that seem to be incredibly wasteful and limiting. Let me briefly describe this and please forgive me if I am ignorant, I have only spent a week or two on studying LSTM and language models so far :-)\r\n\r\nFor example in Machine Translation we typically have the text-data for the source- and target-languages as lists of integer-tokens, where each integer maps to a word in the vocabulary. There may be e.g. 100k different words so these integer-tokens can take on values between zero and 100k. This data cannot be input directly to a Neural Network so we use an embedding layer to convert these integers to n-dimensional vectors with values between zero and one, according to a mapping-function that may either be loaded from disk or trained along with the rest of the Neural Network; if I understand correctly.\r\n\r\nFor the decoder in a language model, we have a similar problem where we must somehow convert integer-tokens to data that the neural network can work on. A typical way of doing this seems to be a one-hot encoding; if I understand correctly. (This could also be done for the encoder-part, but it doesn't seem to be necessary).\r\n\r\nI can't figure out what the max-size of one-hot encodings are in TensorFlow and whether it can even handle 100k one-hot encoded tensors. But it is obviously an extremely wasteful data-mapping. For example, for a vocab of 100k words we only need 17-bits (log2(100k)) to represent each integer-token - but for a one-hot encoding using 32-bit floats we need 32 x 100k bits!\r\n\r\nI can't figure out what people normally do, but it seems like the common practice is to limit the vocab to a smaller number of words, e.g. 1k or 10k. It appears that Google Translate runs on multiple GPU's and maybe that's why they can handle extremely large vocabs with one-hot encoded tensors?\r\n\r\n\r\n### Float-bit-strings\r\n\r\nI thought it might be possible to use a bit-string-like representation inside a TensorFlow model. I have searched the internet and cannot find anyone who has proposed a similar idea.\r\n\r\nThe idea is to convert each integer-token to what I call a \"float-bit-string\" or \"float-bits\". For example, the number 123 has the bit-string 01111011. We can then make a corresponding tensor with floats [0., 1., 1., 1., 1., 0., 1., 1.] and input this to the TensorFlow model.\r\n\r\nIn a language model we would then have to input and output these \"float-bits\" instead of one-hot encoded arrays. This would dramatically reduce the memory and computational requirements of the models.\r\n\r\n\r\n### Test\r\n\r\nI have hacked together a little test using numpy and Keras / TensorFlow. The idea is to see if we can learn to map integers x with values between 0 and 10k to y = 123 * x using these \"float-bit\" encodings. And it works as you can see by running the code further below! That is perhaps not a surprise as neural networks are general function approximators, but it's not always that they work according to theory :-)\r\n\r\nHowever, the network cannot learn the arithmetic mapping of e.g. y = 123 * x when x and y are \"float-bits\". This means it cannot generalize to data it hasn't seen during training in the arithmetic manner we might expect. But I don't think that is necessary for use in e.g. language models where we merely want to be able to map some tensor from e.g. an LSTM to an integer-token from the vocabulary.\r\n\r\n\r\n### Loss Functions\r\n\r\nI have tested this with both MSE and binary cross-entropy in Keras, which unfortunately isn't documented so I'm not completely sure what it does. But in both cases it works and the model trains to get the bit-wise mapping correct.\r\n\r\nThere might be cases where you are more concerned about the MSE between the actual integer-values instead of their \"float-bit-string\" representations, in which case we would need a TensorFlow method to convert \"float-bits\" to integers and then take the MSE of the resulting integer and the true integer from the data-set. This is not relevant for language models, because the proximity of integer-keys do not correspond to words that are necessarily similar in meaning. But it could be useful in other applications.\r\n\r\n\r\n### TensorFlow Implementation\r\n\r\nIn order to make this work in TensorFlow it seems that we just need a couple of TensorFlow-methods for converting between integers and \"float-bit-strings\". I have hacked this together using numpy but I'm sure somebody on the dev-team can make a super-fast native TensorFlow implementation. Then we just need a wrapper in Keras and that might be enough to do e.g. language models with gigantic vocabs.\r\n\r\n\r\n### Test-Code\r\n\r\n    import numpy as np\r\n    from tensorflow.python.keras.models import Sequential\r\n    from tensorflow.python.keras.layers import InputLayer\r\n    from tensorflow.python.keras.layers import Dense\r\n    from tensorflow.python.keras.optimizers import RMSprop\r\n    \r\n    \r\n    # Number of bits to use in our \"float-bit-strings\".\r\n    num_bits = 32\r\n    \r\n    def int_to_floatbits(value):\r\n        \"\"\"\r\n        Convert a single integer value to an array of 0.0 and 1.0 floats\r\n        corresponding to the bit-string.\r\n    \r\n        Example: value==123 gives [0.  ... 0.  1.  1.  1.  1.  0.  1.  1.]\r\n        \"\"\"\r\n    \r\n        # Convert the integer value to a bit-string.\r\n        # NOTE: This has been fixed to 32-bit length.\r\n        bitstr = \"{0:032b}\".format(value)\r\n    \r\n        # Convert the bit-string to an array of equivalent float-values.\r\n        floatbits = np.array([1.0 if bit == '1' else 0.0 for bit in bitstr])\r\n    \r\n        return floatbits\r\n    \r\n    \r\n    def floatbits_to_strbits(floatbits):\r\n        \"\"\"\r\n        Convert an array of floats to a bit-string.\r\n        A float value greater than 0.5 results in 1.0\r\n        and a float value less or equal to 0.5 results in 0.0\r\n    \r\n        Example: [0.1, 0.49, 0.51, 0.9, 1.1, -2.3] gives \"001110\"\r\n        \"\"\"\r\n    \r\n        # Convert the float-array to a list of bit-characters '0' or '1'.\r\n        charbits = ['1' if floatbit > 0.5 else '0' for floatbit in floatbits]\r\n    \r\n        # Convert the bit-characters to a string.\r\n        strbits = \"\".join(charbits)\r\n    \r\n        return strbits\r\n    \r\n    def floatbits_to_int(floatbits):\r\n        \"\"\"\r\n        Convert a float-array to an integer, assuming each element\r\n        of the float-array corresponds to a bit.\r\n        \r\n        Example: [0.1, 0.49, 0.51, 0.9, 1.1, -2.3] corresponds to\r\n        the bit-string \"001110\" which is the integer 14.\r\n        \"\"\"\r\n    \r\n        # Convert the float-array to a bit-string.\r\n        strbits = floatbits_to_strbits(floatbits=floatbits)\r\n    \r\n        # Convert the bit-string to an integer value.\r\n        value = int(strbits, base=2)\r\n    \r\n        return value\r\n    \r\n    \r\n    # Various tests of the above functions.\r\n    if True:\r\n        foo = int_to_floatbits(123)\r\n        print(foo)\r\n        print(floatbits_to_strbits(foo))\r\n        print(floatbits_to_int(foo))\r\n    \r\n        bar = [0.3,  0.9,  0.8,  0.51,  0.501,  0.4999,  0.999,  1.1]\r\n        print(floatbits_to_strbits(bar))\r\n        print(floatbits_to_int(bar))\r\n    \r\n        baz = [0.1, 0.49, 0.51, 0.9, 1.1, -2.3]\r\n        print(floatbits_to_strbits(baz))\r\n        print(floatbits_to_int(baz))\r\n    \r\n    # quit()\r\n    \r\n    # We will now train a TensorFlow / Keras model\r\n    # that maps integers between 0 and 10000 to\r\n    # the same numbers multiplied by 123.\r\n    # If we were to use one-hot encoding then we would\r\n    # need 10000 inputs to the Neural Network and\r\n    # 1230000 outputs if using the full output range.\r\n    # Using \"bit-strings\" encoded as floats, we only need\r\n    # 14 bits for the input and 21 bits for the output.\r\n    # We round it up to 32-bits.\r\n    \r\n    # The dataset as integers,\r\n    # we want the Neural Network to map from x to y.\r\n    x_int = np.arange(10000, dtype=int)\r\n    y_int = 123 * x_int\r\n    \r\n    # Convert the dataset to \"float-bit-strings\" (aka. float-bits).\r\n    x = np.array(list(map(int_to_floatbits, x_int)))\r\n    y_true = np.array(list(map(int_to_floatbits, y_int)))\r\n    \r\n    # Check the mapping is correct. E.g. if the number of required bits\r\n    # exceeds num_bits then these may not create numpy matrices correctly.\r\n    if False:\r\n        print(x.shape)\r\n        print(y_true.shape)\r\n        print(x[0:10])\r\n        print(y_true[0:10])\r\n    \r\n    # Start construction of the Keras Sequential model.\r\n    model = Sequential()\r\n    \r\n    # Add an input layer to the model.\r\n    model.add(InputLayer(input_shape=(num_bits,)))\r\n    \r\n    # Fully-connected / dense layers with ReLU-activation.\r\n    model.add(Dense(512, activation='relu'))\r\n    model.add(Dense(512, activation='relu'))\r\n    \r\n    # Last fully-connected / dense layer with sigmoid-activation\r\n    # so the output is between 0.0 and 1.0\r\n    model.add(Dense(num_bits, activation='sigmoid'))\r\n    \r\n    optimizer = RMSprop(lr=1e-3)\r\n    \r\n    if True:\r\n        # Loss is MSE.\r\n        model.compile(optimizer=optimizer,\r\n                      loss='mean_squared_error')\r\n    else:\r\n        # Loss is Binary Crossentropy, but also report MSE.\r\n        model.compile(optimizer=optimizer,\r\n                      loss='binary_crossentropy',\r\n                      metrics=['mse'])\r\n    \r\n    epochs = 50\r\n    \r\n    if True:\r\n        # Fit the model using the entire data-set.\r\n        model.fit(x, y_true, epochs=epochs)\r\n    else:\r\n        # Fit the model using the data-set split into training and validation.\r\n        # You will see that the validation-error is high so the model\r\n        # has not learned the arithmetic function of the data-set.\r\n        model.fit(x, y_true, epochs=epochs, validation_split=0.2)\r\n    \r\n    # Use the model to predict the output for a part of the data-set.\r\n    y_pred = model.predict(x[0:10])\r\n    \r\n    # The true output for this part of the data-set.\r\n    y_true_subset = y_true[0:10]\r\n    \r\n    # Map the \"float-bit-strings\" to integers.\r\n    y_pred_int = list(map(floatbits_to_int, y_pred))\r\n    y_true_int = list(map(floatbits_to_int, y_true_subset))\r\n    \r\n    # Print the predicted and true integers.\r\n    print(*zip(y_pred_int, y_true_int))\r\n    \r\n    # Round the float-bit-strings to 2 decimals for pretty printing.\r\n    def rounded(numbers):\r\n        return np.array([[\"{:.2f}\".format(x) for x in row] for row in numbers])\r\n    y_pred_rounded = rounded(y_pred)\r\n    y_true_rounded = rounded(y_true_subset)\r\n    \r\n    # Print the predicted and true float-bit-strings.\r\n    # (I know it is bad to reuse the same variable-names here ...)\r\n    for y_pred_int, y_true_int, y_pred_rounded, y_true_rounded \\\r\n        in zip(y_pred_int, y_true_int, y_pred_rounded, y_true_rounded):\r\n    \r\n        print(y_true_int, \"\\t\", y_true_rounded)\r\n        print(y_pred_int, \"\\t\", y_pred_rounded)\r\n        print()\r\n\r\n\r\n### Output\r\n\r\nTrue integer and true \"float-bit-string\" (note that the numbers are all exactly 0.00 or 1.00):\r\n\r\n\t738 \t ['0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '1.00' '0.00' '1.00' '1.00' '1.00' '0.00' '0.00' '0.00' '1.00' '0.00']\r\n\r\nPredicted integer and predicted \"float-bit-string\" (note that the numbers a **not** all exactly 0.00 or 1.00):\r\n\r\n\t738 \t ['0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.00' '0.03' '0.00' '0.00' '0.00' '0.01' '0.00' '0.00' '0.00' '0.00' '0.99' '0.00' '1.00' '1.00' '1.00' '0.00' '0.00' '0.00' '1.00' '0.00']\r\n"}