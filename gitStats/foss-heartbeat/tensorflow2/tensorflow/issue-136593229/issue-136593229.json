{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1294", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1294/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1294/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1294/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/1294", "id": 136593229, "node_id": "MDExOlB1bGxSZXF1ZXN0NjA3OTA4NzE=", "number": 1294, "title": "Automated Docker image build and test", "user": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-02-26T04:21:50Z", "updated_at": "2016-03-04T03:35:38Z", "closed_at": "2016-03-04T03:35:38Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1294", "html_url": "https://github.com/tensorflow/tensorflow/pull/1294", "diff_url": "https://github.com/tensorflow/tensorflow/pull/1294.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/1294.patch"}, "body_html": "<ol>\n<li>Breaking up the pip.sh into the install and test-on-install</li>\n</ol>\n<p>This is aimed at automating testing of docker images.<br>\nAlso, a step is added in pip.sh to uninstall existing versions of<br>\nprotobuf and tensorflow if they exist. This addresses pip install-test<br>\nissues on non-Docker environments (e.g., Mac)</p>\n<ol start=\"2\">\n<li>Using virtualenv to perform pip test-on-install</li>\n</ol>\n<p>The built pip-package is installed in a virtualenv, then the pip install test and the tutorial<br>\ntest are carried out inside the virutal env. This is done inside the same docker container as the one used for bazel build, if docker is available.</p>\n<ol start=\"3\">\n<li>Automating Docker image build and test</li>\n</ol>\n<p>ci_parameterized_build now has a new env-var parameter:<br>\nTF_BUILD_DOCKER_TEST, that can be used to trigger Docker image build<br>\nand test following the PIP build (i.e., TF_BUILD_IS_PIP=PIP or BOTH).</p>\n<p>The image is automatically tagged as ${USER}/tensorflow:${VERSION},<br>\nwherein the version is extracted from version.h.</p>\n<p>The main script for Docker build and test is the newly added:<br>\ndocker_test.sh</p>\n<p>It uses Dockerfiles in tools/ci_build/docker and installs the whl files<br>\ninside the Docker image. After the pip installation step, the Python<br>\nunit tests and tutorial tests are inside the Docker container.</p>", "body_text": "Breaking up the pip.sh into the install and test-on-install\n\nThis is aimed at automating testing of docker images.\nAlso, a step is added in pip.sh to uninstall existing versions of\nprotobuf and tensorflow if they exist. This addresses pip install-test\nissues on non-Docker environments (e.g., Mac)\n\nUsing virtualenv to perform pip test-on-install\n\nThe built pip-package is installed in a virtualenv, then the pip install test and the tutorial\ntest are carried out inside the virutal env. This is done inside the same docker container as the one used for bazel build, if docker is available.\n\nAutomating Docker image build and test\n\nci_parameterized_build now has a new env-var parameter:\nTF_BUILD_DOCKER_TEST, that can be used to trigger Docker image build\nand test following the PIP build (i.e., TF_BUILD_IS_PIP=PIP or BOTH).\nThe image is automatically tagged as ${USER}/tensorflow:${VERSION},\nwherein the version is extracted from version.h.\nThe main script for Docker build and test is the newly added:\ndocker_test.sh\nIt uses Dockerfiles in tools/ci_build/docker and installs the whl files\ninside the Docker image. After the pip installation step, the Python\nunit tests and tutorial tests are inside the Docker container.", "body": "1) Breaking up the pip.sh into the install and test-on-install\n\nThis is aimed at automating testing of docker images.\nAlso, a step is added in pip.sh to uninstall existing versions of\nprotobuf and tensorflow if they exist. This addresses pip install-test\nissues on non-Docker environments (e.g., Mac)\n\n2) Using virtualenv to perform pip test-on-install\n\nThe built pip-package is installed in a virtualenv, then the pip install test and the tutorial\ntest are carried out inside the virutal env. This is done inside the same docker container as the one used for bazel build, if docker is available. \n\n3) Automating Docker image build and test\n\nci_parameterized_build now has a new env-var parameter:\nTF_BUILD_DOCKER_TEST, that can be used to trigger Docker image build\nand test following the PIP build (i.e., TF_BUILD_IS_PIP=PIP or BOTH).\n\nThe image is automatically tagged as ${USER}/tensorflow:${VERSION},\nwherein the version is extracted from version.h.\n\nThe main script for Docker build and test is the newly added:\ndocker_test.sh\n\nIt uses Dockerfiles in tools/ci_build/docker and installs the whl files\ninside the Docker image. After the pip installation step, the Python\nunit tests and tutorial tests are inside the Docker container.\n"}