{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/342205672", "html_url": "https://github.com/tensorflow/tensorflow/issues/14294#issuecomment-342205672", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14294", "id": 342205672, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjIwNTY3Mg==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-06T16:34:41Z", "updated_at": "2017-11-06T16:34:41Z", "author_association": "MEMBER", "body_html": "<p>I agree it could be better. You can try filing a bug with the <a href=\"https://github.com/bazelbuild/bazel\">Bazel project</a>, but this would be a tough nut to crack and I'm not sure how much help they would be able to provide.</p>\n<p>The reason why that number grows over time is because Bazel starts building as it's traversing the build graph. It sort of discovers as it keeps going how much other stuff it needs to build. Each individual item could build quickly, like a .c file, or take a long time, like a complicated genrule. Whether or not they add time to build depends on whether or not they're in a critical path. So it would probably be very hard to predict the time it'll take.</p>\n<p>However we know from experience that TensorFlow takes a long time to build. The main reason why that's the case is because we pass a lot of <code>-msystem</code> flags to the compiler which adds a <code>stat()</code> call for each <code>#include</code>, and C/C++ includes are quadratic. Those stat calls are at least half the compiler wall time IIRC. I've done some work in the past to remove <code>cc_library.includes</code> attributes wherever possible. In order to go further, I would probably need to do either:</p>\n<ol>\n<li>Enhance Bazel's downloader to be able to regex transform C++ sources so includes can be relative to the repository root.</li>\n<li>Break apart the <code>tensorflow/core/BUILD</code> targets, e.g. <code>lib_internal</code> into more fine-grained targets that depend on fewer third party libraries.</li>\n</ol>\n<p>Both of which would require a big time investment.</p>\n<p>Ideally, the C++ compiler would allow us to pass a file mapping includes to a specific location on disk, so we wouldn't need all these stat() calls. But compiler authors have never made this functionality available and I'm not sure why. Maybe it's because everyone is waiting for modules in C++20.</p>\n<p>Either way, we appreciate the feedback and wish we could do more.</p>", "body_text": "I agree it could be better. You can try filing a bug with the Bazel project, but this would be a tough nut to crack and I'm not sure how much help they would be able to provide.\nThe reason why that number grows over time is because Bazel starts building as it's traversing the build graph. It sort of discovers as it keeps going how much other stuff it needs to build. Each individual item could build quickly, like a .c file, or take a long time, like a complicated genrule. Whether or not they add time to build depends on whether or not they're in a critical path. So it would probably be very hard to predict the time it'll take.\nHowever we know from experience that TensorFlow takes a long time to build. The main reason why that's the case is because we pass a lot of -msystem flags to the compiler which adds a stat() call for each #include, and C/C++ includes are quadratic. Those stat calls are at least half the compiler wall time IIRC. I've done some work in the past to remove cc_library.includes attributes wherever possible. In order to go further, I would probably need to do either:\n\nEnhance Bazel's downloader to be able to regex transform C++ sources so includes can be relative to the repository root.\nBreak apart the tensorflow/core/BUILD targets, e.g. lib_internal into more fine-grained targets that depend on fewer third party libraries.\n\nBoth of which would require a big time investment.\nIdeally, the C++ compiler would allow us to pass a file mapping includes to a specific location on disk, so we wouldn't need all these stat() calls. But compiler authors have never made this functionality available and I'm not sure why. Maybe it's because everyone is waiting for modules in C++20.\nEither way, we appreciate the feedback and wish we could do more.", "body": "I agree it could be better. You can try filing a bug with the [Bazel project](https://github.com/bazelbuild/bazel), but this would be a tough nut to crack and I'm not sure how much help they would be able to provide.\r\n\r\nThe reason why that number grows over time is because Bazel starts building as it's traversing the build graph. It sort of discovers as it keeps going how much other stuff it needs to build. Each individual item could build quickly, like a .c file, or take a long time, like a complicated genrule. Whether or not they add time to build depends on whether or not they're in a critical path. So it would probably be very hard to predict the time it'll take.\r\n\r\nHowever we know from experience that TensorFlow takes a long time to build. The main reason why that's the case is because we pass a lot of `-msystem` flags to the compiler which adds a `stat()` call for each `#include`, and C/C++ includes are quadratic. Those stat calls are at least half the compiler wall time IIRC. I've done some work in the past to remove `cc_library.includes` attributes wherever possible. In order to go further, I would probably need to do either:\r\n\r\n1. Enhance Bazel's downloader to be able to regex transform C++ sources so includes can be relative to the repository root.\r\n2. Break apart the `tensorflow/core/BUILD` targets, e.g. `lib_internal` into more fine-grained targets that depend on fewer third party libraries.\r\n\r\nBoth of which would require a big time investment.\r\n\r\nIdeally, the C++ compiler would allow us to pass a file mapping includes to a specific location on disk, so we wouldn't need all these stat() calls. But compiler authors have never made this functionality available and I'm not sure why. Maybe it's because everyone is waiting for modules in C++20.\r\n\r\nEither way, we appreciate the feedback and wish we could do more."}