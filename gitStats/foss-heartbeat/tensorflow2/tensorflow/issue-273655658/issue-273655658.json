{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14526", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14526/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14526/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14526/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14526", "id": 273655658, "node_id": "MDU6SXNzdWUyNzM2NTU2NTg=", "number": 14526, "title": "Doubt in the implementation of gan's training critera", "user": {"login": "npuichigo", "id": 11533479, "node_id": "MDQ6VXNlcjExNTMzNDc5", "avatar_url": "https://avatars3.githubusercontent.com/u/11533479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npuichigo", "html_url": "https://github.com/npuichigo", "followers_url": "https://api.github.com/users/npuichigo/followers", "following_url": "https://api.github.com/users/npuichigo/following{/other_user}", "gists_url": "https://api.github.com/users/npuichigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/npuichigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npuichigo/subscriptions", "organizations_url": "https://api.github.com/users/npuichigo/orgs", "repos_url": "https://api.github.com/users/npuichigo/repos", "events_url": "https://api.github.com/users/npuichigo/events{/privacy}", "received_events_url": "https://api.github.com/users/npuichigo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-14T03:27:20Z", "updated_at": "2018-01-04T01:56:52Z", "closed_at": "2018-01-04T01:56:52Z", "author_association": "NONE", "body_html": "<p>I read the code of gan implementation in tf.contrib.gan, but I'm not quite sure whether the generator_train_op and discriminator_train_op use the same batch of data.</p>\n<p>Here is the code in <a href=\"url\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/gan/python/train.py</a></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">RunTrainOpsHook</span>(<span class=\"pl-e\">session_run_hook</span>.<span class=\"pl-e\">SessionRunHook</span>):\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>A hook to run train ops a fixed number of times.<span class=\"pl-pds\">\"\"\"</span></span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">train_ops</span>, <span class=\"pl-smi\">train_steps</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Run train ops a certain number of times.</span>\n<span class=\"pl-s\">    Args:</span>\n<span class=\"pl-s\">      train_ops: A train op or iterable of train ops to run.</span>\n<span class=\"pl-s\">      train_steps: The number of times to run the op(s).</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">isinstance</span>(train_ops, (<span class=\"pl-c1\">list</span>, <span class=\"pl-c1\">tuple</span>)):\n      train_ops <span class=\"pl-k\">=</span> [train_ops]\n    <span class=\"pl-c1\">self</span>._train_ops <span class=\"pl-k\">=</span> train_ops\n    <span class=\"pl-c1\">self</span>._train_steps <span class=\"pl-k\">=</span> train_steps\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">before_run</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">run_context</span>):\n    <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">self</span>._train_steps):\n      run_context.session.run(<span class=\"pl-c1\">self</span>._train_ops)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">get_sequential_train_hooks</span>(<span class=\"pl-smi\">train_steps</span><span class=\"pl-k\">=</span>namedtuples.GANTrainSteps(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)):\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Returns a hooks function for sequential GAN training.</span>\n<span class=\"pl-s\">  Args:</span>\n<span class=\"pl-s\">    train_steps: A `GANTrainSteps` tuple that determines how many generator</span>\n<span class=\"pl-s\">      and discriminator training steps to take.</span>\n<span class=\"pl-s\">  Returns:</span>\n<span class=\"pl-s\">    A function that takes a GANTrainOps tuple and returns a list of hooks.</span>\n<span class=\"pl-s\">  <span class=\"pl-pds\">\"\"\"</span></span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">get_hooks</span>(<span class=\"pl-smi\">train_ops</span>):\n    generator_hook <span class=\"pl-k\">=</span> RunTrainOpsHook(train_ops.generator_train_op,\n                                     train_steps.generator_train_steps)\n    discriminator_hook <span class=\"pl-k\">=</span> RunTrainOpsHook(train_ops.discriminator_train_op,\n                                         train_steps.discriminator_train_steps)\n    <span class=\"pl-k\">return</span> [generator_hook, discriminator_hook]\n  <span class=\"pl-k\">return</span> get_hooks</pre></div>\n<p>Can we guarantee that both hooks run the optimizer on the same batch, along with that each hook run the respective optimizer several times on the same batch? I think that's needed for gan training, and consistent with relative papers.</p>", "body_text": "I read the code of gan implementation in tf.contrib.gan, but I'm not quite sure whether the generator_train_op and discriminator_train_op use the same batch of data.\nHere is the code in https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/gan/python/train.py\nclass RunTrainOpsHook(session_run_hook.SessionRunHook):\n  \"\"\"A hook to run train ops a fixed number of times.\"\"\"\n\n  def __init__(self, train_ops, train_steps):\n    \"\"\"Run train ops a certain number of times.\n    Args:\n      train_ops: A train op or iterable of train ops to run.\n      train_steps: The number of times to run the op(s).\n    \"\"\"\n    if not isinstance(train_ops, (list, tuple)):\n      train_ops = [train_ops]\n    self._train_ops = train_ops\n    self._train_steps = train_steps\n\n  def before_run(self, run_context):\n    for _ in range(self._train_steps):\n      run_context.session.run(self._train_ops)\n\ndef get_sequential_train_hooks(train_steps=namedtuples.GANTrainSteps(1, 1)):\n  \"\"\"Returns a hooks function for sequential GAN training.\n  Args:\n    train_steps: A `GANTrainSteps` tuple that determines how many generator\n      and discriminator training steps to take.\n  Returns:\n    A function that takes a GANTrainOps tuple and returns a list of hooks.\n  \"\"\"\n  def get_hooks(train_ops):\n    generator_hook = RunTrainOpsHook(train_ops.generator_train_op,\n                                     train_steps.generator_train_steps)\n    discriminator_hook = RunTrainOpsHook(train_ops.discriminator_train_op,\n                                         train_steps.discriminator_train_steps)\n    return [generator_hook, discriminator_hook]\n  return get_hooks\nCan we guarantee that both hooks run the optimizer on the same batch, along with that each hook run the respective optimizer several times on the same batch? I think that's needed for gan training, and consistent with relative papers.", "body": "I read the code of gan implementation in tf.contrib.gan, but I'm not quite sure whether the generator_train_op and discriminator_train_op use the same batch of data. \r\n\r\nHere is the code in [https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/gan/python/train.py](url)\r\n```python\r\nclass RunTrainOpsHook(session_run_hook.SessionRunHook):\r\n  \"\"\"A hook to run train ops a fixed number of times.\"\"\"\r\n\r\n  def __init__(self, train_ops, train_steps):\r\n    \"\"\"Run train ops a certain number of times.\r\n    Args:\r\n      train_ops: A train op or iterable of train ops to run.\r\n      train_steps: The number of times to run the op(s).\r\n    \"\"\"\r\n    if not isinstance(train_ops, (list, tuple)):\r\n      train_ops = [train_ops]\r\n    self._train_ops = train_ops\r\n    self._train_steps = train_steps\r\n\r\n  def before_run(self, run_context):\r\n    for _ in range(self._train_steps):\r\n      run_context.session.run(self._train_ops)\r\n\r\ndef get_sequential_train_hooks(train_steps=namedtuples.GANTrainSteps(1, 1)):\r\n  \"\"\"Returns a hooks function for sequential GAN training.\r\n  Args:\r\n    train_steps: A `GANTrainSteps` tuple that determines how many generator\r\n      and discriminator training steps to take.\r\n  Returns:\r\n    A function that takes a GANTrainOps tuple and returns a list of hooks.\r\n  \"\"\"\r\n  def get_hooks(train_ops):\r\n    generator_hook = RunTrainOpsHook(train_ops.generator_train_op,\r\n                                     train_steps.generator_train_steps)\r\n    discriminator_hook = RunTrainOpsHook(train_ops.discriminator_train_op,\r\n                                         train_steps.discriminator_train_steps)\r\n    return [generator_hook, discriminator_hook]\r\n  return get_hooks\r\n```\r\n\r\nCan we guarantee that both hooks run the optimizer on the same batch, along with that each hook run the respective optimizer several times on the same batch? I think that's needed for gan training, and consistent with relative papers.\r\n\r\n\r\n\r\n"}