{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281955809", "html_url": "https://github.com/tensorflow/tensorflow/issues/7449#issuecomment-281955809", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7449", "id": 281955809, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTk1NTgwOQ==", "user": {"login": "devfubar", "id": 7021489, "node_id": "MDQ6VXNlcjcwMjE0ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7021489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devfubar", "html_url": "https://github.com/devfubar", "followers_url": "https://api.github.com/users/devfubar/followers", "following_url": "https://api.github.com/users/devfubar/following{/other_user}", "gists_url": "https://api.github.com/users/devfubar/gists{/gist_id}", "starred_url": "https://api.github.com/users/devfubar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devfubar/subscriptions", "organizations_url": "https://api.github.com/users/devfubar/orgs", "repos_url": "https://api.github.com/users/devfubar/repos", "events_url": "https://api.github.com/users/devfubar/events{/privacy}", "received_events_url": "https://api.github.com/users/devfubar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-23T10:32:35Z", "updated_at": "2017-02-23T10:32:35Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=577277\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinwicke\">@martinwicke</a> yes that is the command I used to stop the warning messages.</p>\n<pre><code>./configure\n</code></pre>\n<pre><code>Please specify the location of python. [Default is /usr/bin/python]: /usr/bin/python3\nPlease specify optimization flags to use during compilation [Default is -march=native]: \nDo you wish to use jemalloc as the malloc implementation? (Linux only) [Y/n] \njemalloc enabled on Linux\nDo you wish to build TensorFlow with Google Cloud Platform support? [y/N] \nNo Google Cloud Platform support will be enabled for TensorFlow\nDo you wish to build TensorFlow with Hadoop File System support? [y/N] \nNo Hadoop File System support will be enabled for TensorFlow\nDo you wish to build TensorFlow with the XLA just-in-time compiler (experimental)? [y/N] \nNo XLA support will be enabled for TensorFlow\nFound possible Python library paths:\n  /usr/local/lib/python3.5/dist-packages\n  /usr/lib/python3/dist-packages\nPlease input the desired Python library path to use.  Default is [/usr/local/lib/python3.5/dist-packages]\n\nUsing python library path: /usr/local/lib/python3.5/dist-packages\nDo you wish to build TensorFlow with OpenCL support? [y/N] \nNo OpenCL support will be enabled for TensorFlow\nDo you wish to build TensorFlow with CUDA support? [y/N] \nNo CUDA support will be enabled for TensorFlow\nConfiguration finished\n.........\nINFO: Starting clean (this may take a while). Consider using --expunge_async if the clean takes more than several minutes.\n.........\nINFO: All external dependencies fetched successfully.\n</code></pre>\n<pre><code>cat tools/bazel.rc\n</code></pre>\n<pre><code># Autogenerated by configure: DO NOT EDIT\nbuild:cuda --crosstool_top=@local_config_cuda//crosstool:toolchain\nbuild:cuda --define=using_cuda=true --define=using_cuda_nvcc=true\nbuild:win-cuda --define=using_cuda=true --define=using_cuda_nvcc=true\n\nbuild:sycl --crosstool_top=@local_config_sycl//crosstool:toolchain\nbuild:sycl --define=using_sycl=true\n\nbuild:sycl_asan --crosstool_top=@local_config_sycl//crosstool:toolchain\nbuild:sycl_asan --define=using_sycl=true --copt -fno-omit-frame-pointer --copt -fsanitize-coverage=3 --copt -fsanitize=address --copt -DGPR_NO_DIRECT_SYSCALLS --linkopt -fPIC --linkopt -lasan\n\nbuild --force_python=py3\nbuild --host_force_python=py3\nbuild --python3_path=\"/usr/bin/python3\"\nbuild --define=use_fast_cpp_protos=true\nbuild --define=allow_oversize_protos=true\n\nbuild --define PYTHON_BIN_PATH=\"/usr/bin/python3\"\ntest --define PYTHON_BIN_PATH=\"/usr/bin/python3\"\ntest --force_python=py3\ntest --host_force_python=py3\nrun --define PYTHON_BIN_PATH=\"/usr/bin/python3\"\n\nbuild --spawn_strategy=standalone\ntest --spawn_strategy=standalone\nrun --spawn_strategy=standalone\n\nbuild --genrule_strategy=standalone\ntest --genrule_strategy=standalone\nrun --genrule_strategy=standalone\n\nbuild -c opt\ntest -c opt\nrun -c opt\n\nbuild:opt --cxxopt=-march=native --copt=-march=native\n</code></pre>", "body_text": "@martinwicke yes that is the command I used to stop the warning messages.\n./configure\n\nPlease specify the location of python. [Default is /usr/bin/python]: /usr/bin/python3\nPlease specify optimization flags to use during compilation [Default is -march=native]: \nDo you wish to use jemalloc as the malloc implementation? (Linux only) [Y/n] \njemalloc enabled on Linux\nDo you wish to build TensorFlow with Google Cloud Platform support? [y/N] \nNo Google Cloud Platform support will be enabled for TensorFlow\nDo you wish to build TensorFlow with Hadoop File System support? [y/N] \nNo Hadoop File System support will be enabled for TensorFlow\nDo you wish to build TensorFlow with the XLA just-in-time compiler (experimental)? [y/N] \nNo XLA support will be enabled for TensorFlow\nFound possible Python library paths:\n  /usr/local/lib/python3.5/dist-packages\n  /usr/lib/python3/dist-packages\nPlease input the desired Python library path to use.  Default is [/usr/local/lib/python3.5/dist-packages]\n\nUsing python library path: /usr/local/lib/python3.5/dist-packages\nDo you wish to build TensorFlow with OpenCL support? [y/N] \nNo OpenCL support will be enabled for TensorFlow\nDo you wish to build TensorFlow with CUDA support? [y/N] \nNo CUDA support will be enabled for TensorFlow\nConfiguration finished\n.........\nINFO: Starting clean (this may take a while). Consider using --expunge_async if the clean takes more than several minutes.\n.........\nINFO: All external dependencies fetched successfully.\n\ncat tools/bazel.rc\n\n# Autogenerated by configure: DO NOT EDIT\nbuild:cuda --crosstool_top=@local_config_cuda//crosstool:toolchain\nbuild:cuda --define=using_cuda=true --define=using_cuda_nvcc=true\nbuild:win-cuda --define=using_cuda=true --define=using_cuda_nvcc=true\n\nbuild:sycl --crosstool_top=@local_config_sycl//crosstool:toolchain\nbuild:sycl --define=using_sycl=true\n\nbuild:sycl_asan --crosstool_top=@local_config_sycl//crosstool:toolchain\nbuild:sycl_asan --define=using_sycl=true --copt -fno-omit-frame-pointer --copt -fsanitize-coverage=3 --copt -fsanitize=address --copt -DGPR_NO_DIRECT_SYSCALLS --linkopt -fPIC --linkopt -lasan\n\nbuild --force_python=py3\nbuild --host_force_python=py3\nbuild --python3_path=\"/usr/bin/python3\"\nbuild --define=use_fast_cpp_protos=true\nbuild --define=allow_oversize_protos=true\n\nbuild --define PYTHON_BIN_PATH=\"/usr/bin/python3\"\ntest --define PYTHON_BIN_PATH=\"/usr/bin/python3\"\ntest --force_python=py3\ntest --host_force_python=py3\nrun --define PYTHON_BIN_PATH=\"/usr/bin/python3\"\n\nbuild --spawn_strategy=standalone\ntest --spawn_strategy=standalone\nrun --spawn_strategy=standalone\n\nbuild --genrule_strategy=standalone\ntest --genrule_strategy=standalone\nrun --genrule_strategy=standalone\n\nbuild -c opt\ntest -c opt\nrun -c opt\n\nbuild:opt --cxxopt=-march=native --copt=-march=native", "body": "@martinwicke yes that is the command I used to stop the warning messages.\r\n```\r\n./configure\r\n```\r\n```\r\nPlease specify the location of python. [Default is /usr/bin/python]: /usr/bin/python3\r\nPlease specify optimization flags to use during compilation [Default is -march=native]: \r\nDo you wish to use jemalloc as the malloc implementation? (Linux only) [Y/n] \r\njemalloc enabled on Linux\r\nDo you wish to build TensorFlow with Google Cloud Platform support? [y/N] \r\nNo Google Cloud Platform support will be enabled for TensorFlow\r\nDo you wish to build TensorFlow with Hadoop File System support? [y/N] \r\nNo Hadoop File System support will be enabled for TensorFlow\r\nDo you wish to build TensorFlow with the XLA just-in-time compiler (experimental)? [y/N] \r\nNo XLA support will be enabled for TensorFlow\r\nFound possible Python library paths:\r\n  /usr/local/lib/python3.5/dist-packages\r\n  /usr/lib/python3/dist-packages\r\nPlease input the desired Python library path to use.  Default is [/usr/local/lib/python3.5/dist-packages]\r\n\r\nUsing python library path: /usr/local/lib/python3.5/dist-packages\r\nDo you wish to build TensorFlow with OpenCL support? [y/N] \r\nNo OpenCL support will be enabled for TensorFlow\r\nDo you wish to build TensorFlow with CUDA support? [y/N] \r\nNo CUDA support will be enabled for TensorFlow\r\nConfiguration finished\r\n.........\r\nINFO: Starting clean (this may take a while). Consider using --expunge_async if the clean takes more than several minutes.\r\n.........\r\nINFO: All external dependencies fetched successfully.\r\n```\r\n```\r\ncat tools/bazel.rc\r\n```\r\n```\r\n# Autogenerated by configure: DO NOT EDIT\r\nbuild:cuda --crosstool_top=@local_config_cuda//crosstool:toolchain\r\nbuild:cuda --define=using_cuda=true --define=using_cuda_nvcc=true\r\nbuild:win-cuda --define=using_cuda=true --define=using_cuda_nvcc=true\r\n\r\nbuild:sycl --crosstool_top=@local_config_sycl//crosstool:toolchain\r\nbuild:sycl --define=using_sycl=true\r\n\r\nbuild:sycl_asan --crosstool_top=@local_config_sycl//crosstool:toolchain\r\nbuild:sycl_asan --define=using_sycl=true --copt -fno-omit-frame-pointer --copt -fsanitize-coverage=3 --copt -fsanitize=address --copt -DGPR_NO_DIRECT_SYSCALLS --linkopt -fPIC --linkopt -lasan\r\n\r\nbuild --force_python=py3\r\nbuild --host_force_python=py3\r\nbuild --python3_path=\"/usr/bin/python3\"\r\nbuild --define=use_fast_cpp_protos=true\r\nbuild --define=allow_oversize_protos=true\r\n\r\nbuild --define PYTHON_BIN_PATH=\"/usr/bin/python3\"\r\ntest --define PYTHON_BIN_PATH=\"/usr/bin/python3\"\r\ntest --force_python=py3\r\ntest --host_force_python=py3\r\nrun --define PYTHON_BIN_PATH=\"/usr/bin/python3\"\r\n\r\nbuild --spawn_strategy=standalone\r\ntest --spawn_strategy=standalone\r\nrun --spawn_strategy=standalone\r\n\r\nbuild --genrule_strategy=standalone\r\ntest --genrule_strategy=standalone\r\nrun --genrule_strategy=standalone\r\n\r\nbuild -c opt\r\ntest -c opt\r\nrun -c opt\r\n\r\nbuild:opt --cxxopt=-march=native --copt=-march=native\r\n```"}