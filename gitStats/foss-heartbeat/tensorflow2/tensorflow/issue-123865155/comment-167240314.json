{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/167240314", "html_url": "https://github.com/tensorflow/tensorflow/issues/616#issuecomment-167240314", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/616", "id": 167240314, "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzI0MDMxNA==", "user": {"login": "pannous", "id": 516118, "node_id": "MDQ6VXNlcjUxNjExOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/516118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pannous", "html_url": "https://github.com/pannous", "followers_url": "https://api.github.com/users/pannous/followers", "following_url": "https://api.github.com/users/pannous/following{/other_user}", "gists_url": "https://api.github.com/users/pannous/gists{/gist_id}", "starred_url": "https://api.github.com/users/pannous/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pannous/subscriptions", "organizations_url": "https://api.github.com/users/pannous/orgs", "repos_url": "https://api.github.com/users/pannous/repos", "events_url": "https://api.github.com/users/pannous/events{/privacy}", "received_events_url": "https://api.github.com/users/pannous/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-25T14:19:03Z", "updated_at": "2015-12-25T14:19:03Z", "author_association": "NONE", "body_html": "<p>see <a href=\"https://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python\" rel=\"nofollow\">https://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python</a></p>\n<p>Here is a complete example for your convenience:</p>\n<pre><code>import tensorflow as tf\nimport os\nimport numpy as np\nfrom tensorflow.python.platform import gfile\n\ndata = np.arange(10,dtype=np.int32)\nwith tf.Session() as sess:\n  print(\"# build graph and run\")\n  input1= tf.placeholder(tf.int32, [10], name=\"input\")\n  output1= tf.add(input1, tf.constant(100,dtype=tf.int32), name=\"output\") #  data depends on the input data\n  saved_result= tf.Variable(data, name=\"saved_result\")\n  do_save=tf.assign(saved_result,output1)\n  tf.initialize_all_variables()\n  os.system(\"rm -rf /tmp/load\")\n  tf.train.write_graph(sess.graph_def, \"/tmp/load\", \"test.pb\", False) #proto\n  # now set the data:\n  result,_=sess.run([output1,do_save], {input1: data}) # calculate output1 and assign to 'saved_result'\n  saver = tf.train.Saver(tf.all_variables())\n  saver.save(sess,\"checkpoint.data\")\n\nwith tf.Session() as persisted_sess:\n  print(\"load graph\")\n  with gfile.FastGFile(\"/tmp/load/test.pb\",'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    persisted_sess.graph.as_default()\n    tf.import_graph_def(graph_def, name='')\n  print(\"map variables\")\n  persisted_result = persisted_sess.graph.get_tensor_by_name(\"saved_result:0\")\n  tf.add_to_collection(tf.GraphKeys.VARIABLES,persisted_result)\n  try:\n    saver = tf.train.Saver(tf.all_variables()) # 'Saver' misnomer! Better: Persister!\n  except:pass\n  print(\"load data\")\n  saver.restore(persisted_sess, \"checkpoint.data\")  # now OK\n  print(persisted_result.eval())\n  print(\"DONE\")\n</code></pre>", "body_text": "see https://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python\nHere is a complete example for your convenience:\nimport tensorflow as tf\nimport os\nimport numpy as np\nfrom tensorflow.python.platform import gfile\n\ndata = np.arange(10,dtype=np.int32)\nwith tf.Session() as sess:\n  print(\"# build graph and run\")\n  input1= tf.placeholder(tf.int32, [10], name=\"input\")\n  output1= tf.add(input1, tf.constant(100,dtype=tf.int32), name=\"output\") #  data depends on the input data\n  saved_result= tf.Variable(data, name=\"saved_result\")\n  do_save=tf.assign(saved_result,output1)\n  tf.initialize_all_variables()\n  os.system(\"rm -rf /tmp/load\")\n  tf.train.write_graph(sess.graph_def, \"/tmp/load\", \"test.pb\", False) #proto\n  # now set the data:\n  result,_=sess.run([output1,do_save], {input1: data}) # calculate output1 and assign to 'saved_result'\n  saver = tf.train.Saver(tf.all_variables())\n  saver.save(sess,\"checkpoint.data\")\n\nwith tf.Session() as persisted_sess:\n  print(\"load graph\")\n  with gfile.FastGFile(\"/tmp/load/test.pb\",'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    persisted_sess.graph.as_default()\n    tf.import_graph_def(graph_def, name='')\n  print(\"map variables\")\n  persisted_result = persisted_sess.graph.get_tensor_by_name(\"saved_result:0\")\n  tf.add_to_collection(tf.GraphKeys.VARIABLES,persisted_result)\n  try:\n    saver = tf.train.Saver(tf.all_variables()) # 'Saver' misnomer! Better: Persister!\n  except:pass\n  print(\"load data\")\n  saver.restore(persisted_sess, \"checkpoint.data\")  # now OK\n  print(persisted_result.eval())\n  print(\"DONE\")", "body": "see https://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python\n\nHere is a complete example for your convenience:\n\n```\nimport tensorflow as tf\nimport os\nimport numpy as np\nfrom tensorflow.python.platform import gfile\n\ndata = np.arange(10,dtype=np.int32)\nwith tf.Session() as sess:\n  print(\"# build graph and run\")\n  input1= tf.placeholder(tf.int32, [10], name=\"input\")\n  output1= tf.add(input1, tf.constant(100,dtype=tf.int32), name=\"output\") #  data depends on the input data\n  saved_result= tf.Variable(data, name=\"saved_result\")\n  do_save=tf.assign(saved_result,output1)\n  tf.initialize_all_variables()\n  os.system(\"rm -rf /tmp/load\")\n  tf.train.write_graph(sess.graph_def, \"/tmp/load\", \"test.pb\", False) #proto\n  # now set the data:\n  result,_=sess.run([output1,do_save], {input1: data}) # calculate output1 and assign to 'saved_result'\n  saver = tf.train.Saver(tf.all_variables())\n  saver.save(sess,\"checkpoint.data\")\n\nwith tf.Session() as persisted_sess:\n  print(\"load graph\")\n  with gfile.FastGFile(\"/tmp/load/test.pb\",'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    persisted_sess.graph.as_default()\n    tf.import_graph_def(graph_def, name='')\n  print(\"map variables\")\n  persisted_result = persisted_sess.graph.get_tensor_by_name(\"saved_result:0\")\n  tf.add_to_collection(tf.GraphKeys.VARIABLES,persisted_result)\n  try:\n    saver = tf.train.Saver(tf.all_variables()) # 'Saver' misnomer! Better: Persister!\n  except:pass\n  print(\"load data\")\n  saver.restore(persisted_sess, \"checkpoint.data\")  # now OK\n  print(persisted_result.eval())\n  print(\"DONE\")\n```\n"}