{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/205620223", "html_url": "https://github.com/tensorflow/tensorflow/issues/616#issuecomment-205620223", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/616", "id": 205620223, "node_id": "MDEyOklzc3VlQ29tbWVudDIwNTYyMDIyMw==", "user": {"login": "meereeum", "id": 7970350, "node_id": "MDQ6VXNlcjc5NzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7970350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meereeum", "html_url": "https://github.com/meereeum", "followers_url": "https://api.github.com/users/meereeum/followers", "following_url": "https://api.github.com/users/meereeum/following{/other_user}", "gists_url": "https://api.github.com/users/meereeum/gists{/gist_id}", "starred_url": "https://api.github.com/users/meereeum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meereeum/subscriptions", "organizations_url": "https://api.github.com/users/meereeum/orgs", "repos_url": "https://api.github.com/users/meereeum/repos", "events_url": "https://api.github.com/users/meereeum/events{/privacy}", "received_events_url": "https://api.github.com/users/meereeum/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-05T03:03:37Z", "updated_at": "2016-04-05T03:11:10Z", "author_association": "NONE", "body_html": "<p>my workaround, in case helpful:</p>\n<p>(1) Train<br>\n(2) Create nodes to freeze trained weights/biases</p>\n<pre><code>def _freeze(self):\n    regex = re.compile('^[^:]*')\n    with tf.name_scope('assign_ops'):\n       for tvar in tf.trainable_variables():\n           tf.assign(tvar, tvar.eval(),\n                     name = re.match(regex, tvar.name).group(0))\n</code></pre>\n<p>(3) Save graph</p>\n<pre><code>with open(outfile, 'wb') as f:\n    f.write(sesh.graph_def.SerializeToString())\n</code></pre>\n<p>(4) (Later) restore graph and get handles for desired nodes</p>\n<pre><code>with open(graph_def, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n\nself.x, self.dropout, self.predictions = tf.import_graph_def(\n    graph_def, return_elements = ['x:0', 'dropout:0', 'predictions:0'],\n    name = '')\n</code></pre>\n<p>(5) Re-assign stored values</p>\n<pre><code>with tf.Session(config = config) as sesh:\n    assign_ops = [op for op in tf.Graph.get_operations(sesh.graph)\n                          if 'assign_ops' in op.name]\n    sesh.run(assign_ops)\n</code></pre>\n<p>Now you can get predictions, etc by feeding test data to <code>x</code> placeholder with sesh.run, as per the usj</p>", "body_text": "my workaround, in case helpful:\n(1) Train\n(2) Create nodes to freeze trained weights/biases\ndef _freeze(self):\n    regex = re.compile('^[^:]*')\n    with tf.name_scope('assign_ops'):\n       for tvar in tf.trainable_variables():\n           tf.assign(tvar, tvar.eval(),\n                     name = re.match(regex, tvar.name).group(0))\n\n(3) Save graph\nwith open(outfile, 'wb') as f:\n    f.write(sesh.graph_def.SerializeToString())\n\n(4) (Later) restore graph and get handles for desired nodes\nwith open(graph_def, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n\nself.x, self.dropout, self.predictions = tf.import_graph_def(\n    graph_def, return_elements = ['x:0', 'dropout:0', 'predictions:0'],\n    name = '')\n\n(5) Re-assign stored values\nwith tf.Session(config = config) as sesh:\n    assign_ops = [op for op in tf.Graph.get_operations(sesh.graph)\n                          if 'assign_ops' in op.name]\n    sesh.run(assign_ops)\n\nNow you can get predictions, etc by feeding test data to x placeholder with sesh.run, as per the usj", "body": "my workaround, in case helpful:\n\n(1) Train\n(2) Create nodes to freeze trained weights/biases\n\n```\ndef _freeze(self):\n    regex = re.compile('^[^:]*')\n    with tf.name_scope('assign_ops'):\n       for tvar in tf.trainable_variables():\n           tf.assign(tvar, tvar.eval(),\n                     name = re.match(regex, tvar.name).group(0))\n```\n\n(3) Save graph\n\n```\nwith open(outfile, 'wb') as f:\n    f.write(sesh.graph_def.SerializeToString())\n```\n\n(4) (Later) restore graph and get handles for desired nodes\n\n```\nwith open(graph_def, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n\nself.x, self.dropout, self.predictions = tf.import_graph_def(\n    graph_def, return_elements = ['x:0', 'dropout:0', 'predictions:0'],\n    name = '')\n```\n\n(5) Re-assign stored values\n\n```\nwith tf.Session(config = config) as sesh:\n    assign_ops = [op for op in tf.Graph.get_operations(sesh.graph)\n                          if 'assign_ops' in op.name]\n    sesh.run(assign_ops)\n```\n\nNow you can get predictions, etc by feeding test data to `x` placeholder with sesh.run, as per the usj\n"}