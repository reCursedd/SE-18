{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/378341192", "html_url": "https://github.com/tensorflow/tensorflow/issues/17930#issuecomment-378341192", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17930", "id": 378341192, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODM0MTE5Mg==", "user": {"login": "chrisrsipes", "id": 5429005, "node_id": "MDQ6VXNlcjU0MjkwMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5429005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisrsipes", "html_url": "https://github.com/chrisrsipes", "followers_url": "https://api.github.com/users/chrisrsipes/followers", "following_url": "https://api.github.com/users/chrisrsipes/following{/other_user}", "gists_url": "https://api.github.com/users/chrisrsipes/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisrsipes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisrsipes/subscriptions", "organizations_url": "https://api.github.com/users/chrisrsipes/orgs", "repos_url": "https://api.github.com/users/chrisrsipes/repos", "events_url": "https://api.github.com/users/chrisrsipes/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisrsipes/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-03T17:59:24Z", "updated_at": "2018-04-03T21:51:27Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> That's partially correct.  With the screenshots I posted, the overall RAM consumption (measured by the MEM visualization that appears in the bottom left of the top section) does indeed illuminate the issue, however the processes that are in view are was not the sample application that was causing the memory leak.</p>\n<p>To clarify this, I've gathered new screenshots, with the process running the sample application in view.  The RES/MEM% columns show the steadily increasing RAM allocated to the process that is never freed.  For your questions:</p>\n<ul>\n<li>I'm measuring the RAM usage by both the overall MEM consumption shown towards the bottom left of the top section (that is near the CPU usage of each core), as well as the RES/MEM% columns that are per process.  The new screenshots will show RES/MEM% increasing with each inference.</li>\n<li>I did indeed still experience the issue with using the example mentioned in your comment.</li>\n<li>To provide a minimal example, I've taken the example and simplified it further to just load the model architecture and execute a run, and have that code available in this repo: <a href=\"https://github.com/chrisrsipes/tf-leak\">https://github.com/chrisrsipes/tf-leak</a>. It does not require any labels or a file.  I've also provided the saved model protocol buffer file of the frozen model architecture I'm using, with a link to download it in the README.  I've tested and verified that I do not need to provide labels, nor feed/fetch any values to observe the memory leak.</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266588-1059fa24-3747-11e8-916f-5e245b9b8b0f.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266588-1059fa24-3747-11e8-916f-5e245b9b8b0f.png\" alt=\"screen shot 2018-04-03 at 11 30 44 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266589-1065d506-3747-11e8-88e4-1a1cffd42593.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266589-1065d506-3747-11e8-88e4-1a1cffd42593.png\" alt=\"screen shot 2018-04-03 at 11 30 54 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266590-10737378-3747-11e8-8fb4-b167e74576a8.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266590-10737378-3747-11e8-8fb4-b167e74576a8.png\" alt=\"screen shot 2018-04-03 at 11 31 03 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266591-1085fd68-3747-11e8-908f-b9cdad5dcba3.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266591-1085fd68-3747-11e8-908f-b9cdad5dcba3.png\" alt=\"screen shot 2018-04-03 at 11 31 12 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266592-10955cb8-3747-11e8-8eaa-2ee57b1e657c.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266592-10955cb8-3747-11e8-8eaa-2ee57b1e657c.png\" alt=\"screen shot 2018-04-03 at 11 31 22 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266593-10a3de50-3747-11e8-8c86-5f266ec51ffd.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266593-10a3de50-3747-11e8-8c86-5f266ec51ffd.png\" alt=\"screen shot 2018-04-03 at 11 31 45 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266595-10ce618e-3747-11e8-8a5d-25048e232769.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266595-10ce618e-3747-11e8-8a5d-25048e232769.png\" alt=\"screen shot 2018-04-03 at 11 31 57 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266596-111da6e0-3747-11e8-8e28-628cde889953.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266596-111da6e0-3747-11e8-8e28-628cde889953.png\" alt=\"screen shot 2018-04-03 at 11 32 04 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266597-112cfbb8-3747-11e8-95b0-9bc0f09a2340.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266597-112cfbb8-3747-11e8-95b0-9bc0f09a2340.png\" alt=\"screen shot 2018-04-03 at 11 32 12 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266598-11396880-3747-11e8-979d-8ad2062c2fd7.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266598-11396880-3747-11e8-979d-8ad2062c2fd7.png\" alt=\"screen shot 2018-04-03 at 11 32 20 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266599-114aa55a-3747-11e8-94c9-0ebba9acfe08.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266599-114aa55a-3747-11e8-94c9-0ebba9acfe08.png\" alt=\"screen shot 2018-04-03 at 11 32 28 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266600-1156fb7a-3747-11e8-930c-28332244aec5.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266600-1156fb7a-3747-11e8-930c-28332244aec5.png\" alt=\"screen shot 2018-04-03 at 11 32 35 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266601-11692980-3747-11e8-8981-3f62e46ae57b.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266601-11692980-3747-11e8-8981-3f62e46ae57b.png\" alt=\"screen shot 2018-04-03 at 11 32 40 am\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5429005/38266603-1177c94a-3747-11e8-9a33-b9b9f5895c6a.png\"><img src=\"https://user-images.githubusercontent.com/5429005/38266603-1177c94a-3747-11e8-9a33-b9b9f5895c6a.png\" alt=\"screen shot 2018-04-03 at 11 32 52 am\" style=\"max-width:100%;\"></a></p>", "body_text": "@asimshankar That's partially correct.  With the screenshots I posted, the overall RAM consumption (measured by the MEM visualization that appears in the bottom left of the top section) does indeed illuminate the issue, however the processes that are in view are was not the sample application that was causing the memory leak.\nTo clarify this, I've gathered new screenshots, with the process running the sample application in view.  The RES/MEM% columns show the steadily increasing RAM allocated to the process that is never freed.  For your questions:\n\nI'm measuring the RAM usage by both the overall MEM consumption shown towards the bottom left of the top section (that is near the CPU usage of each core), as well as the RES/MEM% columns that are per process.  The new screenshots will show RES/MEM% increasing with each inference.\nI did indeed still experience the issue with using the example mentioned in your comment.\nTo provide a minimal example, I've taken the example and simplified it further to just load the model architecture and execute a run, and have that code available in this repo: https://github.com/chrisrsipes/tf-leak. It does not require any labels or a file.  I've also provided the saved model protocol buffer file of the frozen model architecture I'm using, with a link to download it in the README.  I've tested and verified that I do not need to provide labels, nor feed/fetch any values to observe the memory leak.", "body": "@asimshankar That's partially correct.  With the screenshots I posted, the overall RAM consumption (measured by the MEM visualization that appears in the bottom left of the top section) does indeed illuminate the issue, however the processes that are in view are was not the sample application that was causing the memory leak.  \r\n\r\nTo clarify this, I've gathered new screenshots, with the process running the sample application in view.  The RES/MEM% columns show the steadily increasing RAM allocated to the process that is never freed.  For your questions:\r\n\r\n* I'm measuring the RAM usage by both the overall MEM consumption shown towards the bottom left of the top section (that is near the CPU usage of each core), as well as the RES/MEM% columns that are per process.  The new screenshots will show RES/MEM% increasing with each inference.\r\n* I did indeed still experience the issue with using the example mentioned in your comment.  \r\n* To provide a minimal example, I've taken the example and simplified it further to just load the model architecture and execute a run, and have that code available in this repo: [https://github.com/chrisrsipes/tf-leak](https://github.com/chrisrsipes/tf-leak). It does not require any labels or a file.  I've also provided the saved model protocol buffer file of the frozen model architecture I'm using, with a link to download it in the README.  I've tested and verified that I do not need to provide labels, nor feed/fetch any values to observe the memory leak.\r\n\r\n![screen shot 2018-04-03 at 11 30 44 am](https://user-images.githubusercontent.com/5429005/38266588-1059fa24-3747-11e8-916f-5e245b9b8b0f.png)\r\n![screen shot 2018-04-03 at 11 30 54 am](https://user-images.githubusercontent.com/5429005/38266589-1065d506-3747-11e8-88e4-1a1cffd42593.png)\r\n![screen shot 2018-04-03 at 11 31 03 am](https://user-images.githubusercontent.com/5429005/38266590-10737378-3747-11e8-8fb4-b167e74576a8.png)\r\n![screen shot 2018-04-03 at 11 31 12 am](https://user-images.githubusercontent.com/5429005/38266591-1085fd68-3747-11e8-908f-b9cdad5dcba3.png)\r\n![screen shot 2018-04-03 at 11 31 22 am](https://user-images.githubusercontent.com/5429005/38266592-10955cb8-3747-11e8-8eaa-2ee57b1e657c.png)\r\n![screen shot 2018-04-03 at 11 31 45 am](https://user-images.githubusercontent.com/5429005/38266593-10a3de50-3747-11e8-8c86-5f266ec51ffd.png)\r\n![screen shot 2018-04-03 at 11 31 57 am](https://user-images.githubusercontent.com/5429005/38266595-10ce618e-3747-11e8-8a5d-25048e232769.png)\r\n![screen shot 2018-04-03 at 11 32 04 am](https://user-images.githubusercontent.com/5429005/38266596-111da6e0-3747-11e8-8e28-628cde889953.png)\r\n![screen shot 2018-04-03 at 11 32 12 am](https://user-images.githubusercontent.com/5429005/38266597-112cfbb8-3747-11e8-95b0-9bc0f09a2340.png)\r\n![screen shot 2018-04-03 at 11 32 20 am](https://user-images.githubusercontent.com/5429005/38266598-11396880-3747-11e8-979d-8ad2062c2fd7.png)\r\n![screen shot 2018-04-03 at 11 32 28 am](https://user-images.githubusercontent.com/5429005/38266599-114aa55a-3747-11e8-94c9-0ebba9acfe08.png)\r\n![screen shot 2018-04-03 at 11 32 35 am](https://user-images.githubusercontent.com/5429005/38266600-1156fb7a-3747-11e8-930c-28332244aec5.png)\r\n![screen shot 2018-04-03 at 11 32 40 am](https://user-images.githubusercontent.com/5429005/38266601-11692980-3747-11e8-8981-3f62e46ae57b.png)\r\n![screen shot 2018-04-03 at 11 32 52 am](https://user-images.githubusercontent.com/5429005/38266603-1177c94a-3747-11e8-9a33-b9b9f5895c6a.png)\r\n"}