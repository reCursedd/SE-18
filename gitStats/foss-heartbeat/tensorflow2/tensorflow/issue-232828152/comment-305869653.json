{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/305869653", "html_url": "https://github.com/tensorflow/tensorflow/issues/10369#issuecomment-305869653", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10369", "id": 305869653, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTg2OTY1Mw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-02T18:11:05Z", "updated_at": "2017-06-02T18:11:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This is definitely a real bug, which I suspect arises because you have 8 or fewer cores on the machine where you're running the test. The issue is that the current implementation of the <code>IteratorGetNext</code> op is a synchronous <code>OpKernel</code> but it can block an inter-op threadpool thread, and the unblocking action may require the use of another inter-op threadpool thread. The default threadpool size is the number of cores in your machine.</p>\n<p>I'm working on a fix, but there are two short-term workarounds:</p>\n<ul>\n<li>Increase the size of the inter-op threadpool when you create the session using <code>tf.ConfigProto</code>. Setting it to (maximum number of concurrent <code>get_next()</code> ops) + 1 (i.e. 9 in this case) should address the deadlock.</li>\n<li>Reduce the number of concurrent <code>get_next()</code> calls to (number of cores) - 1.</li>\n</ul>\n<p>The true fix will involve rewriting <code>IteratorGetNext</code> as an <code>AsyncOpKernel</code>, which I'm working on now....</p>", "body_text": "This is definitely a real bug, which I suspect arises because you have 8 or fewer cores on the machine where you're running the test. The issue is that the current implementation of the IteratorGetNext op is a synchronous OpKernel but it can block an inter-op threadpool thread, and the unblocking action may require the use of another inter-op threadpool thread. The default threadpool size is the number of cores in your machine.\nI'm working on a fix, but there are two short-term workarounds:\n\nIncrease the size of the inter-op threadpool when you create the session using tf.ConfigProto. Setting it to (maximum number of concurrent get_next() ops) + 1 (i.e. 9 in this case) should address the deadlock.\nReduce the number of concurrent get_next() calls to (number of cores) - 1.\n\nThe true fix will involve rewriting IteratorGetNext as an AsyncOpKernel, which I'm working on now....", "body": "This is definitely a real bug, which I suspect arises because you have 8 or fewer cores on the machine where you're running the test. The issue is that the current implementation of the `IteratorGetNext` op is a synchronous `OpKernel` but it can block an inter-op threadpool thread, and the unblocking action may require the use of another inter-op threadpool thread. The default threadpool size is the number of cores in your machine.\r\n\r\nI'm working on a fix, but there are two short-term workarounds:\r\n* Increase the size of the inter-op threadpool when you create the session using `tf.ConfigProto`. Setting it to (maximum number of concurrent `get_next()` ops) + 1 (i.e. 9 in this case) should address the deadlock. \r\n* Reduce the number of concurrent `get_next()` calls to (number of cores) - 1.\r\n\r\nThe true fix will involve rewriting `IteratorGetNext` as an `AsyncOpKernel`, which I'm working on now...."}