{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/100452293", "pull_request_review_id": 21160520, "id": 100452293, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQ1MjI5Mw==", "diff_hunk": "@@ -226,7 +226,11 @@ def __init__(self,\n           expected_shape=expected_shape)\n \n   def __str__(self):\n-    return str(self._snapshot)\n+    return self.__repr_()", "path": "tensorflow/python/ops/variables.py", "position": null, "original_position": 5, "commit_id": "c017d68e31c0b49b514550967329680035821c32", "original_commit_id": "26375220b2fd6211817ce386ae59b2202ed5ae38", "user": {"login": "iRapha", "id": 7386247, "node_id": "MDQ6VXNlcjczODYyNDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7386247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iRapha", "html_url": "https://github.com/iRapha", "followers_url": "https://api.github.com/users/iRapha/followers", "following_url": "https://api.github.com/users/iRapha/following{/other_user}", "gists_url": "https://api.github.com/users/iRapha/gists{/gist_id}", "starred_url": "https://api.github.com/users/iRapha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iRapha/subscriptions", "organizations_url": "https://api.github.com/users/iRapha/orgs", "repos_url": "https://api.github.com/users/iRapha/repos", "events_url": "https://api.github.com/users/iRapha/events{/privacy}", "received_events_url": "https://api.github.com/users/iRapha/received_events", "type": "User", "site_admin": false}, "body": "Done!\r\n\r\nAs a note, I've read elsewhere that the difference between them is that `__repr__` is supposed to be more descriptive, and often times copy-pastable as python code, whereas `__str__` is meant to be more readable. In this case, it means that we could do:\r\n\r\n```python\r\n>>> str(variable)\r\n<tf.Variable 'name' shape=(10, 2) dtype=float32>\r\n>>> repr(variable)\r\ntf.Variable()\r\n```\r\n\r\nThe reason I didn't try doing this in the original version of the PR is because\r\na) I assume this would be a much bigger change than what the issue was asking for and\r\nb) I found that this wasn't consistent within tf:\r\n\r\n```python\r\n>>> str(tf.float32)\r\n<dtype: 'float32'>\r\n>>> repr(tf.float32)\r\ntf.float32\r\n\r\n>>> str(tf.constant(0.1))\r\nTensor(\"Const:0\", shape=(), dtype=float32)\r\n>>> repr(tf.constant(0.1))\r\n<tf.Tensor 'Const:0' shape=() dtype=float32>\r\n```", "created_at": "2017-02-10T01:06:23Z", "updated_at": "2017-02-10T01:07:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/7400#discussion_r100452293", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7400", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/100452293"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/7400#discussion_r100452293"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7400"}}, "body_html": "<p>Done!</p>\n<p>As a note, I've read elsewhere that the difference between them is that <code>__repr__</code> is supposed to be more descriptive, and often times copy-pastable as python code, whereas <code>__str__</code> is meant to be more readable. In this case, it means that we could do:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">str</span>(variable)\n<span class=\"pl-k\">&lt;</span>tf.Variable <span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">2</span>) dtype<span class=\"pl-k\">=</span>float32<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">repr</span>(variable)\ntf.Variable()</pre></div>\n<p>The reason I didn't try doing this in the original version of the PR is because<br>\na) I assume this would be a much bigger change than what the issue was asking for and<br>\nb) I found that this wasn't consistent within tf:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">str</span>(tf.float32)\n<span class=\"pl-k\">&lt;</span>dtype: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">repr</span>(tf.float32)\ntf.float32\n\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">str</span>(tf.constant(<span class=\"pl-c1\">0.1</span>))\nTensor(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const:0<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>float32)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">repr</span>(tf.constant(<span class=\"pl-c1\">0.1</span>))\n<span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Const:0<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>() dtype<span class=\"pl-k\">=</span>float32<span class=\"pl-k\">&gt;</span></pre></div>", "body_text": "Done!\nAs a note, I've read elsewhere that the difference between them is that __repr__ is supposed to be more descriptive, and often times copy-pastable as python code, whereas __str__ is meant to be more readable. In this case, it means that we could do:\n>>> str(variable)\n<tf.Variable 'name' shape=(10, 2) dtype=float32>\n>>> repr(variable)\ntf.Variable()\nThe reason I didn't try doing this in the original version of the PR is because\na) I assume this would be a much bigger change than what the issue was asking for and\nb) I found that this wasn't consistent within tf:\n>>> str(tf.float32)\n<dtype: 'float32'>\n>>> repr(tf.float32)\ntf.float32\n\n>>> str(tf.constant(0.1))\nTensor(\"Const:0\", shape=(), dtype=float32)\n>>> repr(tf.constant(0.1))\n<tf.Tensor 'Const:0' shape=() dtype=float32>", "in_reply_to_id": 100438032}