{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11103", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11103/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11103/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11103/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11103", "id": 239093505, "node_id": "MDU6SXNzdWUyMzkwOTM1MDU=", "number": 11103, "title": "Batch normalization layer has new name for each call to `__init__`", "user": {"login": "zaccharieramzi", "id": 6387497, "node_id": "MDQ6VXNlcjYzODc0OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6387497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zaccharieramzi", "html_url": "https://github.com/zaccharieramzi", "followers_url": "https://api.github.com/users/zaccharieramzi/followers", "following_url": "https://api.github.com/users/zaccharieramzi/following{/other_user}", "gists_url": "https://api.github.com/users/zaccharieramzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/zaccharieramzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zaccharieramzi/subscriptions", "organizations_url": "https://api.github.com/users/zaccharieramzi/orgs", "repos_url": "https://api.github.com/users/zaccharieramzi/repos", "events_url": "https://api.github.com/users/zaccharieramzi/events{/privacy}", "received_events_url": "https://api.github.com/users/zaccharieramzi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-28T08:45:32Z", "updated_at": "2017-07-04T09:26:56Z", "closed_at": "2017-06-29T20:06:10Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OSX 10.12.5</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: <code>pip install</code></li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.1.0</li>\n<li><strong>CUDA/cuDNN version</strong>: no GPU</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">28</span>])\nx_test <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">28</span>])\nnormalized_x <span class=\"pl-k\">=</span> tf.layers.batch_normalization(x, <span class=\"pl-v\">training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>)\nnormalized_x_test <span class=\"pl-k\">=</span> tf.layers.batch_normalization(x_test, <span class=\"pl-v\">training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)</pre></div>\n<h3>Describe the problem</h3>\n<p>This is the error I get:</p>\n<pre><code>ValueError: Variable batch_normalization_1/beta does not exist, or was not created with tf.get_variable(). Did you mean to set reuse=None in VarScope?\n</code></pre>\n<p>However, I can fix it by setting the name of the batch normalization layer. I think the default behavior should not set a new name each time I create a new batch normalization layer (even if it's an easy thing to debug).</p>\n<h3>Source code / logs</h3>\n<p>Working piece of code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">28</span>])\nx_test <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">28</span>])\nnormalized_x <span class=\"pl-k\">=</span> tf.layers.batch_normalization(x, <span class=\"pl-v\">training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>batch_normalization<span class=\"pl-pds\">\"</span></span>)\nnormalized_x_test <span class=\"pl-k\">=</span> tf.layers.batch_normalization(x_test, <span class=\"pl-v\">training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>batch_normalization<span class=\"pl-pds\">\"</span></span>)</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OSX 10.12.5\nTensorFlow installed from (source or binary): pip install\nTensorFlow version (use command below): 1.1.0\nCUDA/cuDNN version: no GPU\nExact command to reproduce:\n\nimport tensorflow as tf\nx = tf.placeholder(tf.float32, [None, 28])\nx_test = tf.placeholder(tf.float32, [None, 28])\nnormalized_x = tf.layers.batch_normalization(x, training=True, reuse=None)\nnormalized_x_test = tf.layers.batch_normalization(x_test, training=False, reuse=True)\nDescribe the problem\nThis is the error I get:\nValueError: Variable batch_normalization_1/beta does not exist, or was not created with tf.get_variable(). Did you mean to set reuse=None in VarScope?\n\nHowever, I can fix it by setting the name of the batch normalization layer. I think the default behavior should not set a new name each time I create a new batch normalization layer (even if it's an easy thing to debug).\nSource code / logs\nWorking piece of code:\nimport tensorflow as tf\nx = tf.placeholder(tf.float32, [None, 28])\nx_test = tf.placeholder(tf.float32, [None, 28])\nnormalized_x = tf.layers.batch_normalization(x, training=True, reuse=None, name=\"batch_normalization\")\nnormalized_x_test = tf.layers.batch_normalization(x_test, training=False, reuse=True, name=\"batch_normalization\")", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OSX 10.12.5\r\n- **TensorFlow installed from (source or binary)**: `pip install`\r\n- **TensorFlow version (use command below)**: 1.1.0\r\n- **CUDA/cuDNN version**: no GPU\r\n- **Exact command to reproduce**:\r\n```python\r\nimport tensorflow as tf\r\nx = tf.placeholder(tf.float32, [None, 28])\r\nx_test = tf.placeholder(tf.float32, [None, 28])\r\nnormalized_x = tf.layers.batch_normalization(x, training=True, reuse=None)\r\nnormalized_x_test = tf.layers.batch_normalization(x_test, training=False, reuse=True)\r\n```\r\n\r\n### Describe the problem\r\nThis is the error I get:\r\n```\r\nValueError: Variable batch_normalization_1/beta does not exist, or was not created with tf.get_variable(). Did you mean to set reuse=None in VarScope?\r\n```\r\nHowever, I can fix it by setting the name of the batch normalization layer. I think the default behavior should not set a new name each time I create a new batch normalization layer (even if it's an easy thing to debug).\r\n\r\n### Source code / logs\r\nWorking piece of code:\r\n```python\r\nimport tensorflow as tf\r\nx = tf.placeholder(tf.float32, [None, 28])\r\nx_test = tf.placeholder(tf.float32, [None, 28])\r\nnormalized_x = tf.layers.batch_normalization(x, training=True, reuse=None, name=\"batch_normalization\")\r\nnormalized_x_test = tf.layers.batch_normalization(x_test, training=False, reuse=True, name=\"batch_normalization\")\r\n```\r\n"}