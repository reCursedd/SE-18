{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/354089147", "html_url": "https://github.com/tensorflow/tensorflow/issues/15611#issuecomment-354089147", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15611", "id": 354089147, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDA4OTE0Nw==", "user": {"login": "huaxz1986", "id": 3395177, "node_id": "MDQ6VXNlcjMzOTUxNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3395177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huaxz1986", "html_url": "https://github.com/huaxz1986", "followers_url": "https://api.github.com/users/huaxz1986/followers", "following_url": "https://api.github.com/users/huaxz1986/following{/other_user}", "gists_url": "https://api.github.com/users/huaxz1986/gists{/gist_id}", "starred_url": "https://api.github.com/users/huaxz1986/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huaxz1986/subscriptions", "organizations_url": "https://api.github.com/users/huaxz1986/orgs", "repos_url": "https://api.github.com/users/huaxz1986/repos", "events_url": "https://api.github.com/users/huaxz1986/events{/privacy}", "received_events_url": "https://api.github.com/users/huaxz1986/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-27T10:05:19Z", "updated_at": "2017-12-27T10:05:19Z", "author_association": "NONE", "body_html": "<p>This is a simple  example to show the usage of <code>saved_model_cli</code>\uff1a</p>\n<pre><code>export_dir = 'out'\nbuilder = tf.saved_model.builder.SavedModelBuilder(export_dir)\ngraph = tf.get_default_graph()\nwith graph.as_default():\n  v1 = tf.get_variable('v1',shape=[3],\n                  initializer=tf.zeros_initializer)\n  v2 = tf.square(v1,name='v2')\n  with tf.Session(graph=graph) as sess:\n    sess.run(v1.initializer)\n    builder.add_meta_graph_and_variables(sess,['xxx'])\n    predict_signature_def = tf.saved_model.\\\n    \tsignature_def_utils.build_signature_def(\\\n             inputs={\n        \t\t 'input_x': \\\n                  tf.saved_model.utils.build_tensor_info(v1),\n             }, outputs={'pred_y':\\\n\t\t\t\t  tf.saved_model.utils.build_tensor_info(v2)},\\\n             method_name=tf.saved_model.\\\n \t\t\t signature_constants.PREDICT_OUTPUTS)\n    builder.add_meta_graph([tf.saved_model.\\\n             tag_constants.TRAINING,\n             tf.saved_model.tag_constants.SERVING],\\\n             signature_def_map={'predict_graph': predict_signature_def})\n    builder.save(as_text=True)\n</code></pre>\n<p>Then run <code>saved_model_cli</code> in <code>shell</code>\uff1a</p>\n<pre><code>saved_model_cli show --dir out/ --tag_set serve,train --signature_def predict_graph\n</code></pre>\n<p>The result is :</p>\n<pre><code>The given SavedModel SignatureDef contains the following input(s):\ninputs['input_x'] tensor_info:\ntensor type: 101\n    dtype: DT_FLOAT_REF\n    shape: (3)\n    name: v1:0\nThe given SavedModel SignatureDef contains the following output(s):\noutputs['pred_y'] tensor_info:\ntensor type: 1\n    dtype: DT_FLOAT\n    shape: (3)\n    name: v2:0\nMethod name is: outputs\n</code></pre>\n<p>I change <code>tensorflow/python/tools/saved_model_cli._print_tensor_info()</code> like this:</p>\n<pre><code>def _print_tensor_info(tensor_info):\n  \"\"\"Prints details of the given tensor_info.\n\n  Args:\n    tensor_info: TensorInfo object to be printed.\n  \"\"\"\n#####  this is what I do ####\n  print('tensor type:',tensor_info.dtype)\n  print('    dtype: ' + {value:key for (key,value) in types_pb2.DataType.items()}[tensor_info.dtype])\n##########\n  # Display shape as tuple.\n  if tensor_info.tensor_shape.unknown_rank:\n    shape = 'unknown_rank'\n  else:\n    dims = [str(dim.size) for dim in tensor_info.tensor_shape.dim]\n    shape = ', '.join(dims)\n    shape = '(' + shape + ')'\n  print('    shape: ' + shape)\n  print('    name: ' + tensor_info.name)\n</code></pre>\n<p>By the way, I use <code>python3.6+ubuntu 16.04+ tensorflow 1.4</code></p>", "body_text": "This is a simple  example to show the usage of saved_model_cli\uff1a\nexport_dir = 'out'\nbuilder = tf.saved_model.builder.SavedModelBuilder(export_dir)\ngraph = tf.get_default_graph()\nwith graph.as_default():\n  v1 = tf.get_variable('v1',shape=[3],\n                  initializer=tf.zeros_initializer)\n  v2 = tf.square(v1,name='v2')\n  with tf.Session(graph=graph) as sess:\n    sess.run(v1.initializer)\n    builder.add_meta_graph_and_variables(sess,['xxx'])\n    predict_signature_def = tf.saved_model.\\\n    \tsignature_def_utils.build_signature_def(\\\n             inputs={\n        \t\t 'input_x': \\\n                  tf.saved_model.utils.build_tensor_info(v1),\n             }, outputs={'pred_y':\\\n\t\t\t\t  tf.saved_model.utils.build_tensor_info(v2)},\\\n             method_name=tf.saved_model.\\\n \t\t\t signature_constants.PREDICT_OUTPUTS)\n    builder.add_meta_graph([tf.saved_model.\\\n             tag_constants.TRAINING,\n             tf.saved_model.tag_constants.SERVING],\\\n             signature_def_map={'predict_graph': predict_signature_def})\n    builder.save(as_text=True)\n\nThen run saved_model_cli in shell\uff1a\nsaved_model_cli show --dir out/ --tag_set serve,train --signature_def predict_graph\n\nThe result is :\nThe given SavedModel SignatureDef contains the following input(s):\ninputs['input_x'] tensor_info:\ntensor type: 101\n    dtype: DT_FLOAT_REF\n    shape: (3)\n    name: v1:0\nThe given SavedModel SignatureDef contains the following output(s):\noutputs['pred_y'] tensor_info:\ntensor type: 1\n    dtype: DT_FLOAT\n    shape: (3)\n    name: v2:0\nMethod name is: outputs\n\nI change tensorflow/python/tools/saved_model_cli._print_tensor_info() like this:\ndef _print_tensor_info(tensor_info):\n  \"\"\"Prints details of the given tensor_info.\n\n  Args:\n    tensor_info: TensorInfo object to be printed.\n  \"\"\"\n#####  this is what I do ####\n  print('tensor type:',tensor_info.dtype)\n  print('    dtype: ' + {value:key for (key,value) in types_pb2.DataType.items()}[tensor_info.dtype])\n##########\n  # Display shape as tuple.\n  if tensor_info.tensor_shape.unknown_rank:\n    shape = 'unknown_rank'\n  else:\n    dims = [str(dim.size) for dim in tensor_info.tensor_shape.dim]\n    shape = ', '.join(dims)\n    shape = '(' + shape + ')'\n  print('    shape: ' + shape)\n  print('    name: ' + tensor_info.name)\n\nBy the way, I use python3.6+ubuntu 16.04+ tensorflow 1.4", "body": "This is a simple  example to show the usage of `saved_model_cli`\uff1a\r\n\r\n```\r\nexport_dir = 'out'\r\nbuilder = tf.saved_model.builder.SavedModelBuilder(export_dir)\r\ngraph = tf.get_default_graph()\r\nwith graph.as_default():\r\n  v1 = tf.get_variable('v1',shape=[3],\r\n                  initializer=tf.zeros_initializer)\r\n  v2 = tf.square(v1,name='v2')\r\n  with tf.Session(graph=graph) as sess:\r\n    sess.run(v1.initializer)\r\n    builder.add_meta_graph_and_variables(sess,['xxx'])\r\n    predict_signature_def = tf.saved_model.\\\r\n    \tsignature_def_utils.build_signature_def(\\\r\n             inputs={\r\n        \t\t 'input_x': \\\r\n                  tf.saved_model.utils.build_tensor_info(v1),\r\n             }, outputs={'pred_y':\\\r\n\t\t\t\t  tf.saved_model.utils.build_tensor_info(v2)},\\\r\n             method_name=tf.saved_model.\\\r\n \t\t\t signature_constants.PREDICT_OUTPUTS)\r\n    builder.add_meta_graph([tf.saved_model.\\\r\n             tag_constants.TRAINING,\r\n             tf.saved_model.tag_constants.SERVING],\\\r\n             signature_def_map={'predict_graph': predict_signature_def})\r\n    builder.save(as_text=True)\r\n```\r\n\r\nThen run `saved_model_cli` in `shell`\uff1a\r\n\r\n```\r\nsaved_model_cli show --dir out/ --tag_set serve,train --signature_def predict_graph\r\n```\r\n\r\nThe result is : \r\n\r\n```\r\nThe given SavedModel SignatureDef contains the following input(s):\r\ninputs['input_x'] tensor_info:\r\ntensor type: 101\r\n    dtype: DT_FLOAT_REF\r\n    shape: (3)\r\n    name: v1:0\r\nThe given SavedModel SignatureDef contains the following output(s):\r\noutputs['pred_y'] tensor_info:\r\ntensor type: 1\r\n    dtype: DT_FLOAT\r\n    shape: (3)\r\n    name: v2:0\r\nMethod name is: outputs\r\n```\r\n\r\nI change `tensorflow/python/tools/saved_model_cli._print_tensor_info()` like this:\r\n\r\n```\r\ndef _print_tensor_info(tensor_info):\r\n  \"\"\"Prints details of the given tensor_info.\r\n\r\n  Args:\r\n    tensor_info: TensorInfo object to be printed.\r\n  \"\"\"\r\n#####  this is what I do ####\r\n  print('tensor type:',tensor_info.dtype)\r\n  print('    dtype: ' + {value:key for (key,value) in types_pb2.DataType.items()}[tensor_info.dtype])\r\n##########\r\n  # Display shape as tuple.\r\n  if tensor_info.tensor_shape.unknown_rank:\r\n    shape = 'unknown_rank'\r\n  else:\r\n    dims = [str(dim.size) for dim in tensor_info.tensor_shape.dim]\r\n    shape = ', '.join(dims)\r\n    shape = '(' + shape + ')'\r\n  print('    shape: ' + shape)\r\n  print('    name: ' + tensor_info.name)\r\n```\r\n\r\nBy the way, I use `python3.6+ubuntu 16.04+ tensorflow 1.4`\r\n\r\n"}