{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20723", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20723/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20723/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20723/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20723", "id": 340474497, "node_id": "MDU6SXNzdWUzNDA0NzQ0OTc=", "number": 20723, "title": "Mismatched Gradient Update with `tf.gather` Operation", "user": {"login": "zhujingyang520", "id": 22570044, "node_id": "MDQ6VXNlcjIyNTcwMDQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/22570044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhujingyang520", "html_url": "https://github.com/zhujingyang520", "followers_url": "https://api.github.com/users/zhujingyang520/followers", "following_url": "https://api.github.com/users/zhujingyang520/following{/other_user}", "gists_url": "https://api.github.com/users/zhujingyang520/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhujingyang520/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhujingyang520/subscriptions", "organizations_url": "https://api.github.com/users/zhujingyang520/orgs", "repos_url": "https://api.github.com/users/zhujingyang520/repos", "events_url": "https://api.github.com/users/zhujingyang520/events{/privacy}", "received_events_url": "https://api.github.com/users/zhujingyang520/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-07-12T03:14:18Z", "updated_at": "2018-08-10T21:13:14Z", "closed_at": "2018-08-10T20:16:54Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.7</li>\n<li><strong>Python version</strong>: 2.7.14 (Anaconda)</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 9.0 / cuDNN 7.0</li>\n<li><strong>GPU model and memory</strong>: NVIDIA GTX 1080Ti</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I met the problem when I use tf.gather to slice into a 1D <code>codebook</code>  with the specified index, and generate an output Tensor. The loss function is determined based on the generated output Tensor (In the following code, I simply adopt the reduced sum of output Tensor). Then an optimization phase will be applied to fine tune the <code>codebook</code> to minimize the loss. The issue happens there is a mismatched updated codebook results when I use built-in <code>GradientDescentOptimizer</code> and manually defined one step update results.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Generate the synthetic codebook and index for testing</span>\nN <span class=\"pl-k\">=</span> <span class=\"pl-c1\">16</span>\nshape <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">4000</span>, <span class=\"pl-c1\">4000</span>)\nnp.random.seed(<span class=\"pl-c1\">121</span>)\ncodebook_np <span class=\"pl-k\">=</span> np.random.randn(N)\nindex_np <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-v\">low</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">high</span><span class=\"pl-k\">=</span>N, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>shape)\nlr <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.001</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Simple computation graph</span>\ncodebook <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>codebook<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[N], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, \n                                              <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.constant_initializer(codebook_np))\nindex <span class=\"pl-k\">=</span> tf.constant(index_np, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>index<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64)\noutput <span class=\"pl-k\">=</span> tf.gather(codebook, index, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>output<span class=\"pl-pds\">'</span></span>)\nloss <span class=\"pl-k\">=</span> tf.reduce_sum(output, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>loss<span class=\"pl-pds\">'</span></span>)\n[grad_codebook] <span class=\"pl-k\">=</span> tf.gradients(loss, codebook)\ngrad_codebook_dense <span class=\"pl-k\">=</span> tf.convert_to_tensor(grad_codebook, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>grad_codebook_dense<span class=\"pl-pds\">'</span></span>)\ncodebook_update <span class=\"pl-k\">=</span> codebook <span class=\"pl-k\">-</span> lr <span class=\"pl-k\">*</span> grad_codebook_dense\nopt <span class=\"pl-k\">=</span> tf.train.GradientDescentOptimizer(lr)\ntrain_op <span class=\"pl-k\">=</span> opt.minimize(loss)\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(tf.global_variables_initializer())\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>codebook [update]<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">print</span>(sess.run(codebook_update))\n_ <span class=\"pl-k\">=</span> sess.run(train_op)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>codebook [train_opt]:<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">print</span>(sess.run(codebook))</pre></div>\n<p>I expect to see these 2 updated codebook be same. However, the logs are shown belowed:</p>\n<pre><code>codebook [update]\n[-1000.6481   -999.8909  -1001.59094 -1002.16235  -999.7602   -998.70636\n  -998.9787   -999.86896  -999.7241   -998.3734   -997.3994  -1000.765\n  -999.6122  -1000.2615   -997.9392  -1002.35077]\ncodebook [train_opt]:\n[-991.77435 -991.03503 -992.6951  -993.2531  -990.9072  -989.8781\n -990.1441  -991.01355 -990.8721  -989.553   -988.60187 -991.8886\n -990.7627  -991.3968  -989.12897 -993.43713]\n</code></pre>\n<p>Roughly 1% difference between the updated codebook. The updated code obtained from <code>train_opt</code> is always larger than the manually calculated value.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.7\nPython version: 2.7.14 (Anaconda)\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: CUDA 9.0 / cuDNN 7.0\nGPU model and memory: NVIDIA GTX 1080Ti\nExact command to reproduce: See below\n\nDescribe the problem\nI met the problem when I use tf.gather to slice into a 1D codebook  with the specified index, and generate an output Tensor. The loss function is determined based on the generated output Tensor (In the following code, I simply adopt the reduced sum of output Tensor). Then an optimization phase will be applied to fine tune the codebook to minimize the loss. The issue happens there is a mismatched updated codebook results when I use built-in GradientDescentOptimizer and manually defined one step update results.\nSource code / logs\nimport numpy as np\nimport tensorflow as tf\n\n# Generate the synthetic codebook and index for testing\nN = 16\nshape = (4000, 4000)\nnp.random.seed(121)\ncodebook_np = np.random.randn(N)\nindex_np = np.random.randint(low=0, high=N, size=shape)\nlr = 0.001\n\n# Simple computation graph\ncodebook = tf.get_variable('codebook', shape=[N], dtype=tf.float32, \n                                              initializer=tf.constant_initializer(codebook_np))\nindex = tf.constant(index_np, name='index', dtype=tf.int64)\noutput = tf.gather(codebook, index, name='output')\nloss = tf.reduce_sum(output, name='loss')\n[grad_codebook] = tf.gradients(loss, codebook)\ngrad_codebook_dense = tf.convert_to_tensor(grad_codebook, name='grad_codebook_dense')\ncodebook_update = codebook - lr * grad_codebook_dense\nopt = tf.train.GradientDescentOptimizer(lr)\ntrain_op = opt.minimize(loss)\n\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n\nprint('codebook [update]')\nprint(sess.run(codebook_update))\n_ = sess.run(train_op)\nprint('codebook [train_opt]:')\nprint(sess.run(codebook))\nI expect to see these 2 updated codebook be same. However, the logs are shown belowed:\ncodebook [update]\n[-1000.6481   -999.8909  -1001.59094 -1002.16235  -999.7602   -998.70636\n  -998.9787   -999.86896  -999.7241   -998.3734   -997.3994  -1000.765\n  -999.6122  -1000.2615   -997.9392  -1002.35077]\ncodebook [train_opt]:\n[-991.77435 -991.03503 -992.6951  -993.2531  -990.9072  -989.8781\n -990.1441  -991.01355 -990.8721  -989.553   -988.60187 -991.8886\n -990.7627  -991.3968  -989.12897 -993.43713]\n\nRoughly 1% difference between the updated codebook. The updated code obtained from train_opt is always larger than the manually calculated value.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.7\r\n- **Python version**: 2.7.14 (Anaconda)\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: CUDA 9.0 / cuDNN 7.0\r\n- **GPU model and memory**: NVIDIA GTX 1080Ti\r\n- **Exact command to reproduce**: See below\r\n\r\n### Describe the problem\r\nI met the problem when I use tf.gather to slice into a 1D `codebook`  with the specified index, and generate an output Tensor. The loss function is determined based on the generated output Tensor (In the following code, I simply adopt the reduced sum of output Tensor). Then an optimization phase will be applied to fine tune the `codebook` to minimize the loss. The issue happens there is a mismatched updated codebook results when I use built-in `GradientDescentOptimizer` and manually defined one step update results.\r\n\r\n### Source code / logs\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n# Generate the synthetic codebook and index for testing\r\nN = 16\r\nshape = (4000, 4000)\r\nnp.random.seed(121)\r\ncodebook_np = np.random.randn(N)\r\nindex_np = np.random.randint(low=0, high=N, size=shape)\r\nlr = 0.001\r\n\r\n# Simple computation graph\r\ncodebook = tf.get_variable('codebook', shape=[N], dtype=tf.float32, \r\n                                              initializer=tf.constant_initializer(codebook_np))\r\nindex = tf.constant(index_np, name='index', dtype=tf.int64)\r\noutput = tf.gather(codebook, index, name='output')\r\nloss = tf.reduce_sum(output, name='loss')\r\n[grad_codebook] = tf.gradients(loss, codebook)\r\ngrad_codebook_dense = tf.convert_to_tensor(grad_codebook, name='grad_codebook_dense')\r\ncodebook_update = codebook - lr * grad_codebook_dense\r\nopt = tf.train.GradientDescentOptimizer(lr)\r\ntrain_op = opt.minimize(loss)\r\n\r\nsess = tf.Session()\r\nsess.run(tf.global_variables_initializer())\r\n\r\nprint('codebook [update]')\r\nprint(sess.run(codebook_update))\r\n_ = sess.run(train_op)\r\nprint('codebook [train_opt]:')\r\nprint(sess.run(codebook))\r\n```\r\nI expect to see these 2 updated codebook be same. However, the logs are shown belowed:\r\n```\r\ncodebook [update]\r\n[-1000.6481   -999.8909  -1001.59094 -1002.16235  -999.7602   -998.70636\r\n  -998.9787   -999.86896  -999.7241   -998.3734   -997.3994  -1000.765\r\n  -999.6122  -1000.2615   -997.9392  -1002.35077]\r\ncodebook [train_opt]:\r\n[-991.77435 -991.03503 -992.6951  -993.2531  -990.9072  -989.8781\r\n -990.1441  -991.01355 -990.8721  -989.553   -988.60187 -991.8886\r\n -990.7627  -991.3968  -989.12897 -993.43713]\r\n```\r\nRoughly 1% difference between the updated codebook. The updated code obtained from `train_opt` is always larger than the manually calculated value. \r\n"}