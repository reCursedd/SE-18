{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/403797551", "html_url": "https://github.com/tensorflow/tensorflow/pull/20284#issuecomment-403797551", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20284", "id": 403797551, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzc5NzU1MQ==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-10T12:01:06Z", "updated_at": "2018-07-10T12:01:06Z", "author_association": "MEMBER", "body_html": "<p>Would you be able to put something like this in your ebuild file instead?</p>\n<div class=\"highlight highlight-source-shell\"><pre>sed -i <span class=\"pl-s\"><span class=\"pl-pds\">'</span></span>\n<span class=\"pl-s\">    /tf_http_archive(/!b</span>\n<span class=\"pl-s\">    :a</span>\n<span class=\"pl-s\">    N</span>\n<span class=\"pl-s\">    /)$/!ba</span>\n<span class=\"pl-s\">    /name = \"curl\"/bb</span>\n<span class=\"pl-s\">    /name = \"gif_archive\"/bb</span>\n<span class=\"pl-s\">    /name = \"jpeg\"/bb</span>\n<span class=\"pl-s\">    /name = \"nasm\"/bb</span>\n<span class=\"pl-s\">    /name = \"png_archive\"/bb</span>\n<span class=\"pl-s\">    /name = \"snappy\"/bb</span>\n<span class=\"pl-s\">    /name = \"zlib_archive\"/bb</span>\n<span class=\"pl-s\">    b</span>\n<span class=\"pl-s\">    :b</span>\n<span class=\"pl-s\">    s/\\( *\\).*\\(name = \"[^\"]*\"\\).*/\\1native.local_repository(\\2, path=\".system\")/</span>\n<span class=\"pl-s\">  <span class=\"pl-pds\">'</span></span> tensorflow/workspace.bzl\n\nmkdir -p .system\ntouch .system/WORKSPACE\nln -sf <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>command -v curl<span class=\"pl-pds\">)</span></span> .system/curl_bin\nln -sf <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>command -v nasm<span class=\"pl-pds\">)</span></span> .system/nasm\n<span class=\"pl-k\">for</span> <span class=\"pl-smi\">f</span> <span class=\"pl-k\">in</span> LICENSE LICENSE.txt LICENSE.md COPYING COPYING.txt<span class=\"pl-k\">;</span> <span class=\"pl-k\">do</span>\n  <span class=\"pl-c1\">echo</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dynamically linked via system<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">&gt;</span>.system/<span class=\"pl-smi\">$f</span>\n<span class=\"pl-k\">done</span>\n\ncat <span class=\"pl-k\">&gt;</span>.system/BUILD <span class=\"pl-s\"><span class=\"pl-k\">&lt;&lt;</span><span class=\"pl-k\">EOF</span></span>\n<span class=\"pl-s\">package(default_visibility=[\"//visibility:public\"])</span>\n<span class=\"pl-s\">exports_files(glob([\"*\"]))</span>\n<span class=\"pl-s\">cc_library(name=\"curl\", linkopts=[\"-lcurl\"])</span>\n<span class=\"pl-s\">cc_library(name=\"gif\", linkopts=[\"-lgif\"])</span>\n<span class=\"pl-s\">cc_library(name=\"jpeg\", linkopts=[\"-ljpeg\"])</span>\n<span class=\"pl-s\">cc_library(name=\"png\", linkopts=[\"-lpng\"])</span>\n<span class=\"pl-s\">cc_library(name=\"zlib\", linkopts=[\"-lz\"])</span>\n<span class=\"pl-s\">cc_library(name=\"snappy\", linkopts=[\"-lsnappy\"])</span>\n<span class=\"pl-s\"><span class=\"pl-k\">EOF</span></span></pre></div>\n<div class=\"highlight highlight-source-shell\"><pre>$ <span class=\"pl-c1\">cd</span> tensorflow\n$ run-script-above.sh\n$ bazel build //tensorflow:libtensorflow_framework.so\n$ ldd bazel-bin/tensorflow/libtensorflow_framework.so <span class=\"pl-k\">|</span> awk <span class=\"pl-s\"><span class=\"pl-pds\">'</span>{print $1}<span class=\"pl-pds\">'</span></span>\nlinux-vdso.so.1\nlibdl.so.2\nlibm.so.6\nlibsnappy.so.1\nlibz.so.1\nlibpthread.so.0\nlibgif.so.7\nlibjpeg.so.62\nlibpng16.so.16\nlibstdc++.so.6\nlibgcc_s.so.1\nlibc.so.6\n/lib64/ld-linux-x86-64.so.2</pre></div>\n<p>Bazel seems to allow this hackishness, even with the sandboxing features enabled.</p>", "body_text": "Would you be able to put something like this in your ebuild file instead?\nsed -i '\n    /tf_http_archive(/!b\n    :a\n    N\n    /)$/!ba\n    /name = \"curl\"/bb\n    /name = \"gif_archive\"/bb\n    /name = \"jpeg\"/bb\n    /name = \"nasm\"/bb\n    /name = \"png_archive\"/bb\n    /name = \"snappy\"/bb\n    /name = \"zlib_archive\"/bb\n    b\n    :b\n    s/\\( *\\).*\\(name = \"[^\"]*\"\\).*/\\1native.local_repository(\\2, path=\".system\")/\n  ' tensorflow/workspace.bzl\n\nmkdir -p .system\ntouch .system/WORKSPACE\nln -sf $(command -v curl) .system/curl_bin\nln -sf $(command -v nasm) .system/nasm\nfor f in LICENSE LICENSE.txt LICENSE.md COPYING COPYING.txt; do\n  echo 'dynamically linked via system' >.system/$f\ndone\n\ncat >.system/BUILD <<EOF\npackage(default_visibility=[\"//visibility:public\"])\nexports_files(glob([\"*\"]))\ncc_library(name=\"curl\", linkopts=[\"-lcurl\"])\ncc_library(name=\"gif\", linkopts=[\"-lgif\"])\ncc_library(name=\"jpeg\", linkopts=[\"-ljpeg\"])\ncc_library(name=\"png\", linkopts=[\"-lpng\"])\ncc_library(name=\"zlib\", linkopts=[\"-lz\"])\ncc_library(name=\"snappy\", linkopts=[\"-lsnappy\"])\nEOF\n$ cd tensorflow\n$ run-script-above.sh\n$ bazel build //tensorflow:libtensorflow_framework.so\n$ ldd bazel-bin/tensorflow/libtensorflow_framework.so | awk '{print $1}'\nlinux-vdso.so.1\nlibdl.so.2\nlibm.so.6\nlibsnappy.so.1\nlibz.so.1\nlibpthread.so.0\nlibgif.so.7\nlibjpeg.so.62\nlibpng16.so.16\nlibstdc++.so.6\nlibgcc_s.so.1\nlibc.so.6\n/lib64/ld-linux-x86-64.so.2\nBazel seems to allow this hackishness, even with the sandboxing features enabled.", "body": "Would you be able to put something like this in your ebuild file instead?\r\n\r\n```sh\r\nsed -i '\r\n    /tf_http_archive(/!b\r\n    :a\r\n    N\r\n    /)$/!ba\r\n    /name = \"curl\"/bb\r\n    /name = \"gif_archive\"/bb\r\n    /name = \"jpeg\"/bb\r\n    /name = \"nasm\"/bb\r\n    /name = \"png_archive\"/bb\r\n    /name = \"snappy\"/bb\r\n    /name = \"zlib_archive\"/bb\r\n    b\r\n    :b\r\n    s/\\( *\\).*\\(name = \"[^\"]*\"\\).*/\\1native.local_repository(\\2, path=\".system\")/\r\n  ' tensorflow/workspace.bzl\r\n\r\nmkdir -p .system\r\ntouch .system/WORKSPACE\r\nln -sf $(command -v curl) .system/curl_bin\r\nln -sf $(command -v nasm) .system/nasm\r\nfor f in LICENSE LICENSE.txt LICENSE.md COPYING COPYING.txt; do\r\n  echo 'dynamically linked via system' >.system/$f\r\ndone\r\n\r\ncat >.system/BUILD <<EOF\r\npackage(default_visibility=[\"//visibility:public\"])\r\nexports_files(glob([\"*\"]))\r\ncc_library(name=\"curl\", linkopts=[\"-lcurl\"])\r\ncc_library(name=\"gif\", linkopts=[\"-lgif\"])\r\ncc_library(name=\"jpeg\", linkopts=[\"-ljpeg\"])\r\ncc_library(name=\"png\", linkopts=[\"-lpng\"])\r\ncc_library(name=\"zlib\", linkopts=[\"-lz\"])\r\ncc_library(name=\"snappy\", linkopts=[\"-lsnappy\"])\r\nEOF\r\n```\r\n\r\n```sh\r\n$ cd tensorflow\r\n$ run-script-above.sh\r\n$ bazel build //tensorflow:libtensorflow_framework.so\r\n$ ldd bazel-bin/tensorflow/libtensorflow_framework.so | awk '{print $1}'\r\nlinux-vdso.so.1\r\nlibdl.so.2\r\nlibm.so.6\r\nlibsnappy.so.1\r\nlibz.so.1\r\nlibpthread.so.0\r\nlibgif.so.7\r\nlibjpeg.so.62\r\nlibpng16.so.16\r\nlibstdc++.so.6\r\nlibgcc_s.so.1\r\nlibc.so.6\r\n/lib64/ld-linux-x86-64.so.2\r\n```\r\n\r\nBazel seems to allow this hackishness, even with the sandboxing features enabled."}