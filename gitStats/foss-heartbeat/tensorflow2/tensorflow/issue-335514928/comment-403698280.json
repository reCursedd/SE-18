{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/403698280", "html_url": "https://github.com/tensorflow/tensorflow/pull/20284#issuecomment-403698280", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20284", "id": 403698280, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzY5ODI4MA==", "user": {"login": "perfinion", "id": 363227, "node_id": "MDQ6VXNlcjM2MzIyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/363227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/perfinion", "html_url": "https://github.com/perfinion", "followers_url": "https://api.github.com/users/perfinion/followers", "following_url": "https://api.github.com/users/perfinion/following{/other_user}", "gists_url": "https://api.github.com/users/perfinion/gists{/gist_id}", "starred_url": "https://api.github.com/users/perfinion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/perfinion/subscriptions", "organizations_url": "https://api.github.com/users/perfinion/orgs", "repos_url": "https://api.github.com/users/perfinion/repos", "events_url": "https://api.github.com/users/perfinion/events{/privacy}", "received_events_url": "https://api.github.com/users/perfinion/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-10T04:41:38Z", "updated_at": "2018-07-10T04:41:38Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=32465472\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/angersson\">@angersson</a> I'm not 100% sure on the package names on ubuntu but give this a shot.</p>\n<p>To build tensorflow using the system libs for jpeg and zlib do:</p>\n<pre><code>$ apt-get install libjpeg-turbo8 libjpeg-tubo8-dev zlib1g zlib1g-dev\n$ bazel clean --expunge\n$ ./configure # answer everything normally\n$ echo 'build --action_env TF_SYSTEM_LIBS=\"jpeg,zlib\"' &gt;&gt; .tf_configure.bazelrc\n$ bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package \\\n//tensorflow:libtensorflow_framework.so \\\n//tensorflow:libtensorflow.so \\\n//tensorflow:libtensorflow_cc.so\n</code></pre>\n<hr>\n<p>To decide which libs can be unbundled,</p>\n<ul>\n<li>Look in the <code>tensorflow/workspace.bzl</code> file.</li>\n<li>The entries that have a <code>system_build_file</code> should work.</li>\n<li>Add the <code>name</code> to the <code>TF_SYSTEM_LIBS</code> line.</li>\n<li>Make sure the library and header files for that package are installed in the system. The package names will differ per-distro (eg some might need to install the -dev package as well)</li>\n<li>If ubuntu has new enough versions of all the libs, unbundling all of them so far should work in theory but I have only tested on Gentoo so far.</li>\n<li>PREFIX installs are not easily possible yet. I wanted the basic way working first. I also need to find a good way to default the variable if not set. I will probably add stuff to ./configure to streamline the whole process but for now the beginning steps are still manual.</li>\n</ul>\n<hr>\n<p>To unbundle a new library:</p>\n<ul>\n<li>Look in the bundled BUILD file to see which targets must be exported so tensorflow can use</li>\n<li>Write a new foo.BUILD file with the same targets as cc_library but linking to the system lib.</li>\n<li>Add the foo.BUILD file in third_party/systemlibs/foo.BUILD</li>\n<li>Add the <code>system_build_file=</code> key to <code>tensorflow/workspace.bzl</code> pointing to foo.BUILD</li>\n<li>Add the new entry in <code>VALID_LIBS</code> in <code>third_party/systemlibs/syslibs_configure.bzl</code></li>\n<li>Do the above building steps to test, adjust foo.BUILD, repeat.</li>\n</ul>\n<p>Using the basic cc_library rules is a bit cumbersome but it does work. I'd love for bazel to have some special rules that make system stuff easier. I realize it goes against bazels hermetic philosophy but I think its one hurdle that stops bazel from being useful in a lot of other places. The system rules could be gated behind a flag perhaps. And I can still see mostly-hermetic builds with bazel as being positive because it has all the extra header validation and dep checking that other systems don't have.</p>\n<p>I should probably write more detail about this on my blog too.</p>", "body_text": "@angersson I'm not 100% sure on the package names on ubuntu but give this a shot.\nTo build tensorflow using the system libs for jpeg and zlib do:\n$ apt-get install libjpeg-turbo8 libjpeg-tubo8-dev zlib1g zlib1g-dev\n$ bazel clean --expunge\n$ ./configure # answer everything normally\n$ echo 'build --action_env TF_SYSTEM_LIBS=\"jpeg,zlib\"' >> .tf_configure.bazelrc\n$ bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package \\\n//tensorflow:libtensorflow_framework.so \\\n//tensorflow:libtensorflow.so \\\n//tensorflow:libtensorflow_cc.so\n\n\nTo decide which libs can be unbundled,\n\nLook in the tensorflow/workspace.bzl file.\nThe entries that have a system_build_file should work.\nAdd the name to the TF_SYSTEM_LIBS line.\nMake sure the library and header files for that package are installed in the system. The package names will differ per-distro (eg some might need to install the -dev package as well)\nIf ubuntu has new enough versions of all the libs, unbundling all of them so far should work in theory but I have only tested on Gentoo so far.\nPREFIX installs are not easily possible yet. I wanted the basic way working first. I also need to find a good way to default the variable if not set. I will probably add stuff to ./configure to streamline the whole process but for now the beginning steps are still manual.\n\n\nTo unbundle a new library:\n\nLook in the bundled BUILD file to see which targets must be exported so tensorflow can use\nWrite a new foo.BUILD file with the same targets as cc_library but linking to the system lib.\nAdd the foo.BUILD file in third_party/systemlibs/foo.BUILD\nAdd the system_build_file= key to tensorflow/workspace.bzl pointing to foo.BUILD\nAdd the new entry in VALID_LIBS in third_party/systemlibs/syslibs_configure.bzl\nDo the above building steps to test, adjust foo.BUILD, repeat.\n\nUsing the basic cc_library rules is a bit cumbersome but it does work. I'd love for bazel to have some special rules that make system stuff easier. I realize it goes against bazels hermetic philosophy but I think its one hurdle that stops bazel from being useful in a lot of other places. The system rules could be gated behind a flag perhaps. And I can still see mostly-hermetic builds with bazel as being positive because it has all the extra header validation and dep checking that other systems don't have.\nI should probably write more detail about this on my blog too.", "body": "@angersson I'm not 100% sure on the package names on ubuntu but give this a shot.\r\n\r\nTo build tensorflow using the system libs for jpeg and zlib do:\r\n```\r\n$ apt-get install libjpeg-turbo8 libjpeg-tubo8-dev zlib1g zlib1g-dev\r\n$ bazel clean --expunge\r\n$ ./configure # answer everything normally\r\n$ echo 'build --action_env TF_SYSTEM_LIBS=\"jpeg,zlib\"' >> .tf_configure.bazelrc\r\n$ bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package \\\r\n//tensorflow:libtensorflow_framework.so \\\r\n//tensorflow:libtensorflow.so \\\r\n//tensorflow:libtensorflow_cc.so\r\n```\r\n\r\n----\r\n\r\nTo decide which libs can be unbundled, \r\n- Look in the `tensorflow/workspace.bzl` file.\r\n- The entries that have a `system_build_file` should work.\r\n- Add the `name` to the `TF_SYSTEM_LIBS` line.\r\n- Make sure the library and header files for that package are installed in the system. The package names will differ per-distro (eg some might need to install the -dev package as well)\r\n- If ubuntu has new enough versions of all the libs, unbundling all of them so far should work in theory but I have only tested on Gentoo so far.\r\n- PREFIX installs are not easily possible yet. I wanted the basic way working first. I also need to find a good way to default the variable if not set. I will probably add stuff to ./configure to streamline the whole process but for now the beginning steps are still manual.\r\n\r\n----\r\n\r\nTo unbundle a new library:\r\n- Look in the bundled BUILD file to see which targets must be exported so tensorflow can use\r\n- Write a new foo.BUILD file with the same targets as cc_library but linking to the system lib.\r\n- Add the foo.BUILD file in third_party/systemlibs/foo.BUILD\r\n- Add the `system_build_file=` key to `tensorflow/workspace.bzl` pointing to foo.BUILD\r\n- Add the new entry in `VALID_LIBS` in `third_party/systemlibs/syslibs_configure.bzl`\r\n- Do the above building steps to test, adjust foo.BUILD, repeat.\r\n\r\nUsing the basic cc_library rules is a bit cumbersome but it does work. I'd love for bazel to have some special rules that make system stuff easier. I realize it goes against bazels hermetic philosophy but I think its one hurdle that stops bazel from being useful in a lot of other places. The system rules could be gated behind a flag perhaps. And I can still see mostly-hermetic builds with bazel as being positive because it has all the extra header validation and dep checking that other systems don't have.\r\n\r\nI should probably write more detail about this on my blog too.\r\n"}