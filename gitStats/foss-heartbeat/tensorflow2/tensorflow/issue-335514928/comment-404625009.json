{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/404625009", "html_url": "https://github.com/tensorflow/tensorflow/pull/20284#issuecomment-404625009", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20284", "id": 404625009, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDYyNTAwOQ==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-12T19:30:46Z", "updated_at": "2018-07-12T19:30:46Z", "author_association": "MEMBER", "body_html": "<p>One alternative you could consider is creating a WORKSPACE file in a subdirectory and not calling <code>tf_workspace()</code>. In that case, Bazel's default behavior is to unbundle and let you define dependencies yourself. It's the only way to be certain the the unbundling is complete.</p>\n<p>If you partially unbundle, you'll likely want to run TF's tests after building. For example, not unbundling protobuf might get you into trouble. Yesterday I encountered an issue where <code>import tensorflow</code> fails if protoc / libproto / pyproto versions mismatch: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"328741841\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/protocolbuffers/protobuf/issues/4716\" data-hovercard-type=\"issue\" data-hovercard-url=\"/protocolbuffers/protobuf/issues/4716/hovercard\" href=\"https://github.com/protocolbuffers/protobuf/issues/4716\">protocolbuffers/protobuf#4716</a>. Another example is our libpng config assumes a specific version of zlib. More such subtleties likely await those who partially interchange components.</p>", "body_text": "One alternative you could consider is creating a WORKSPACE file in a subdirectory and not calling tf_workspace(). In that case, Bazel's default behavior is to unbundle and let you define dependencies yourself. It's the only way to be certain the the unbundling is complete.\nIf you partially unbundle, you'll likely want to run TF's tests after building. For example, not unbundling protobuf might get you into trouble. Yesterday I encountered an issue where import tensorflow fails if protoc / libproto / pyproto versions mismatch: protocolbuffers/protobuf#4716. Another example is our libpng config assumes a specific version of zlib. More such subtleties likely await those who partially interchange components.", "body": "One alternative you could consider is creating a WORKSPACE file in a subdirectory and not calling `tf_workspace()`. In that case, Bazel's default behavior is to unbundle and let you define dependencies yourself. It's the only way to be certain the the unbundling is complete.\r\n\r\nIf you partially unbundle, you'll likely want to run TF's tests after building. For example, not unbundling protobuf might get you into trouble. Yesterday I encountered an issue where `import tensorflow` fails if protoc / libproto / pyproto versions mismatch: https://github.com/google/protobuf/issues/4716. Another example is our libpng config assumes a specific version of zlib. More such subtleties likely await those who partially interchange components."}