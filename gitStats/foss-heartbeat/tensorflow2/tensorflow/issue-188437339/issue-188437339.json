{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5513", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5513/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5513/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5513/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5513", "id": 188437339, "node_id": "MDU6SXNzdWUxODg0MzczMzk=", "number": 5513, "title": "Simplify Android integration", "user": {"login": "errcw", "id": 2165, "node_id": "MDQ6VXNlcjIxNjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/errcw", "html_url": "https://github.com/errcw", "followers_url": "https://api.github.com/users/errcw/followers", "following_url": "https://api.github.com/users/errcw/following{/other_user}", "gists_url": "https://api.github.com/users/errcw/gists{/gist_id}", "starred_url": "https://api.github.com/users/errcw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/errcw/subscriptions", "organizations_url": "https://api.github.com/users/errcw/orgs", "repos_url": "https://api.github.com/users/errcw/repos", "events_url": "https://api.github.com/users/errcw/events{/privacy}", "received_events_url": "https://api.github.com/users/errcw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-11-10T07:19:52Z", "updated_at": "2016-11-14T21:39:58Z", "closed_at": "2016-11-14T21:39:58Z", "author_association": "NONE", "body_html": "<p>The current process of building an Android app that uses TensorFlow is unwieldy at best. The only available documentation is baked into the sole example app, which itself is embedded in the TensorFlow build system. Having prebuilt, drop-in Android libraries (or even the ability to build these libraries from source) would, I believe, significantly simplify the process.</p>\n<p>I added my own BUILD definitions to build libraries I can easily drop into an Android Studio project (having experience with blaze made this much more tractable):</p>\n<pre><code># Inside //tensorflow/contrib/android/BUILD\n\n# Build the JAR.\n# Ends up in //my-app/libs/libandroid_tensorflow_inference_java.jar\nandroid_library(\n    name = \"android_tensorflow_inference_java\",\n    srcs = [\":android_tensorflow_inference_java_srcs\"],\n)\n\n# Build the SO.\n# bazel build //tensorflow/contrib/android:libtensorflow.so \\\n#   --crosstool_top=//external:android/crosstool \\\n#   --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \\\n#   --cpu=armeabi-v7a\n# Ends up in //my-app/src/main/jniLibs/armeabi-v7a/libtensorflow.so\nLINKER_SCRIPT = \"//tensorflow/contrib/android:jni/version_script.lds\"\n\ncc_binary(\n    name = \"libtensorflow.so\",\n    srcs = [],\n    copts = tf_copts(),\n    linkopts = [\n        \"-landroid\",\n        \"-ljnigraphics\",\n        \"-llog\",\n        \"-lm\",\n        \"-z defs\",\n        \"-s\",\n        \"-Wl,--version-script\",  # This line must be directly followed by LINKER_SCRIPT.\n        LINKER_SCRIPT,\n    ],\n    linkshared = 1,\n    linkstatic = 1,\n    deps = [\n        \":android_tensorflow_inference_jni\",\n        \"//tensorflow/core:android_tensorflow_lib\",\n        LINKER_SCRIPT,\n    ],\n)\n</code></pre>\n<p>Moreover, if the Android example could rely on these libraries and therefore exist as a \"standalone\" project buildable by Android Studio I think the barrier to entry for TensorFlow on Android would be materially lower.</p>", "body_text": "The current process of building an Android app that uses TensorFlow is unwieldy at best. The only available documentation is baked into the sole example app, which itself is embedded in the TensorFlow build system. Having prebuilt, drop-in Android libraries (or even the ability to build these libraries from source) would, I believe, significantly simplify the process.\nI added my own BUILD definitions to build libraries I can easily drop into an Android Studio project (having experience with blaze made this much more tractable):\n# Inside //tensorflow/contrib/android/BUILD\n\n# Build the JAR.\n# Ends up in //my-app/libs/libandroid_tensorflow_inference_java.jar\nandroid_library(\n    name = \"android_tensorflow_inference_java\",\n    srcs = [\":android_tensorflow_inference_java_srcs\"],\n)\n\n# Build the SO.\n# bazel build //tensorflow/contrib/android:libtensorflow.so \\\n#   --crosstool_top=//external:android/crosstool \\\n#   --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \\\n#   --cpu=armeabi-v7a\n# Ends up in //my-app/src/main/jniLibs/armeabi-v7a/libtensorflow.so\nLINKER_SCRIPT = \"//tensorflow/contrib/android:jni/version_script.lds\"\n\ncc_binary(\n    name = \"libtensorflow.so\",\n    srcs = [],\n    copts = tf_copts(),\n    linkopts = [\n        \"-landroid\",\n        \"-ljnigraphics\",\n        \"-llog\",\n        \"-lm\",\n        \"-z defs\",\n        \"-s\",\n        \"-Wl,--version-script\",  # This line must be directly followed by LINKER_SCRIPT.\n        LINKER_SCRIPT,\n    ],\n    linkshared = 1,\n    linkstatic = 1,\n    deps = [\n        \":android_tensorflow_inference_jni\",\n        \"//tensorflow/core:android_tensorflow_lib\",\n        LINKER_SCRIPT,\n    ],\n)\n\nMoreover, if the Android example could rely on these libraries and therefore exist as a \"standalone\" project buildable by Android Studio I think the barrier to entry for TensorFlow on Android would be materially lower.", "body": "The current process of building an Android app that uses TensorFlow is unwieldy at best. The only available documentation is baked into the sole example app, which itself is embedded in the TensorFlow build system. Having prebuilt, drop-in Android libraries (or even the ability to build these libraries from source) would, I believe, significantly simplify the process.\r\n\r\nI added my own BUILD definitions to build libraries I can easily drop into an Android Studio project (having experience with blaze made this much more tractable):\r\n```\r\n# Inside //tensorflow/contrib/android/BUILD\r\n\r\n# Build the JAR.\r\n# Ends up in //my-app/libs/libandroid_tensorflow_inference_java.jar\r\nandroid_library(\r\n    name = \"android_tensorflow_inference_java\",\r\n    srcs = [\":android_tensorflow_inference_java_srcs\"],\r\n)\r\n\r\n# Build the SO.\r\n# bazel build //tensorflow/contrib/android:libtensorflow.so \\\r\n#   --crosstool_top=//external:android/crosstool \\\r\n#   --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \\\r\n#   --cpu=armeabi-v7a\r\n# Ends up in //my-app/src/main/jniLibs/armeabi-v7a/libtensorflow.so\r\nLINKER_SCRIPT = \"//tensorflow/contrib/android:jni/version_script.lds\"\r\n\r\ncc_binary(\r\n    name = \"libtensorflow.so\",\r\n    srcs = [],\r\n    copts = tf_copts(),\r\n    linkopts = [\r\n        \"-landroid\",\r\n        \"-ljnigraphics\",\r\n        \"-llog\",\r\n        \"-lm\",\r\n        \"-z defs\",\r\n        \"-s\",\r\n        \"-Wl,--version-script\",  # This line must be directly followed by LINKER_SCRIPT.\r\n        LINKER_SCRIPT,\r\n    ],\r\n    linkshared = 1,\r\n    linkstatic = 1,\r\n    deps = [\r\n        \":android_tensorflow_inference_jni\",\r\n        \"//tensorflow/core:android_tensorflow_lib\",\r\n        LINKER_SCRIPT,\r\n    ],\r\n)\r\n```\r\n\r\nMoreover, if the Android example could rely on these libraries and therefore exist as a \"standalone\" project buildable by Android Studio I think the barrier to entry for TensorFlow on Android would be materially lower."}