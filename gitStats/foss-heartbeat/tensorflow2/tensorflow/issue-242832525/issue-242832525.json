{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11489", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11489/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11489/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11489/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11489", "id": 242832525, "node_id": "MDU6SXNzdWUyNDI4MzI1MjU=", "number": 11489, "title": "import_graph_def input_map not updating all attributes", "user": {"login": "StanislawAntol", "id": 1846231, "node_id": "MDQ6VXNlcjE4NDYyMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1846231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StanislawAntol", "html_url": "https://github.com/StanislawAntol", "followers_url": "https://api.github.com/users/StanislawAntol/followers", "following_url": "https://api.github.com/users/StanislawAntol/following{/other_user}", "gists_url": "https://api.github.com/users/StanislawAntol/gists{/gist_id}", "starred_url": "https://api.github.com/users/StanislawAntol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StanislawAntol/subscriptions", "organizations_url": "https://api.github.com/users/StanislawAntol/orgs", "repos_url": "https://api.github.com/users/StanislawAntol/repos", "events_url": "https://api.github.com/users/StanislawAntol/events{/privacy}", "received_events_url": "https://api.github.com/users/StanislawAntol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-07-13T21:13:34Z", "updated_at": "2018-03-16T01:35:15Z", "closed_at": "2018-01-29T23:56:11Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Reproducible script below</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary/pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.2.1</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.framework <span class=\"pl-k\">import</span> graph_util\n<span class=\"pl-k\">from</span> tensorflow.core.framework <span class=\"pl-k\">import</span> graph_pb2\n\norig_model <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input_map_orig.pb<span class=\"pl-pds\">\"</span></span>\nmapped_model <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input_map_modified.pb<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create a graph with uint8 placeholder that gets</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> cast to float32 before going through image whitening</span>\ntf.reset_default_graph()\nimg <span class=\"pl-k\">=</span> tf.placeholder(tf.uint8, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">3</span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input_tensor<span class=\"pl-pds\">\"</span></span>)\nfloat_img <span class=\"pl-k\">=</span> tf.cast(img, tf.float32, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ToFloat<span class=\"pl-pds\">\"</span></span>)\nwhiten_fn <span class=\"pl-k\">=</span> <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">img</span>: tf.image.per_image_standardization(img)\nwhitened <span class=\"pl-k\">=</span> tf.map_fn(whiten_fn, float_img, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>image_whitening<span class=\"pl-pds\">'</span></span>)\nidentity <span class=\"pl-k\">=</span> tf.identity(whitened, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Write graph</span>\noutput_names <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>]\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  input_graph_def <span class=\"pl-k\">=</span> sess.graph_def\n  output_graph_def <span class=\"pl-k\">=</span> graph_util.convert_variables_to_constants(sess,\n                                                               input_graph_def,\n                                                               output_names)\n  tf.train.write_graph(output_graph_def, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./<span class=\"pl-pds\">\"</span></span>, orig_model, <span class=\"pl-c1\">False</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Load the graph again</span>\ntf.reset_default_graph()\ngraph_def <span class=\"pl-k\">=</span> graph_pb2.GraphDef()\n<span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(orig_model, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rb<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> f:\n  graph_def.ParseFromString(f.read())\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Rewire the graph with a float32 placeholder directly</span>\nimg <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">3</span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input<span class=\"pl-pds\">\"</span></span>)\ninput_map <span class=\"pl-k\">=</span> {\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ToFloat<span class=\"pl-pds\">\"</span></span>: img,\n  }\ntf.import_graph_def(graph_def, <span class=\"pl-v\">input_map</span><span class=\"pl-k\">=</span>input_map, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Write the modified graph</span>\ngraph <span class=\"pl-k\">=</span> tf.get_default_graph()\noutput_names <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>]\n<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>graph) <span class=\"pl-k\">as</span> sess:\n  graph <span class=\"pl-k\">=</span> tf.get_default_graph()\n  input_graph_def <span class=\"pl-k\">=</span> graph.as_graph_def()\n  output_graph_def <span class=\"pl-k\">=</span> graph_util.convert_variables_to_constants(sess,\n                                                               input_graph_def,\n                                                               output_names)\n  tf.train.write_graph(output_graph_def, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./<span class=\"pl-pds\">\"</span></span>, mapped_model, <span class=\"pl-c1\">False</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Try to load the modified graph</span>\ntf.reset_default_graph()\ngraph_def <span class=\"pl-k\">=</span> graph_pb2.GraphDef()\n<span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(mapped_model, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rb<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> f:\n  graph_def.ParseFromString(f.read())\n\ng <span class=\"pl-k\">=</span> tf.import_graph_def(graph_def)</pre></div>\n<h3>Describe the problem</h3>\n<p>I noticed this issue trying to modify (via input_map) an object detection model (from <a href=\"https://github.com/tensorflow/models/tree/master/object_detection\">tf/models/object_detection</a>) to directly accept float32 instead of uint8. I have managed to reproduce the using the above minimal example. It seems like one of the attributes of one of the operations doesn't get fully updated. Possibly related to  <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"228892895\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9925\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/9925/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/9925\">#9925</a> .</p>\n<h3>Source code / logs</h3>\n<p>Traceback:</p>\n<pre><code>Traceback (most recent call last):\n  File \"input_map_bug.py\", line 71, in &lt;module&gt;\n    g = tf.import_graph_def(graph_def)\n  File \"/home/s.antol/cv/py3virtualenvs/tf1.2/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 331, in import_graph_def\n    op_to_bind_to, node.name))\nValueError: Specified colocation to an op that does not exist during import: ToFloat in image_whitening/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3\n</code></pre>\n<p>Looking through the protobuf text version, the node below has <code>s: \"loc:@ToFloat\"</code> instead of (what I think should be) <code>s:\"loc:@input\"</code>:</p>\n<pre><code>node {\n  name: \"image_whitening/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3\"\n  op: \"TensorArrayScatterV3\"\n  input: \"image_whitening/TensorArray\"\n  input: \"image_whitening/TensorArrayUnstack/range\"\n  input: \"input\"\n  input: \"image_whitening/TensorArray:1\"\n  attr {\n    key: \"T\"\n    value {\n      type: DT_FLOAT\n    }\n  }\n  attr {\n    key: \"_class\"\n    value {\n      list {\n        s: \"loc:@ToFloat\"\n      }\n    }\n  }\n}\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Reproducible script below\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): binary/pip\nTensorFlow version (use command below): 1.2.1\nPython version: 3.5\nBazel version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce:\n\nimport tensorflow as tf\nfrom tensorflow.python.framework import graph_util\nfrom tensorflow.core.framework import graph_pb2\n\norig_model = \"input_map_orig.pb\"\nmapped_model = \"input_map_modified.pb\"\n\n# Create a graph with uint8 placeholder that gets\n# cast to float32 before going through image whitening\ntf.reset_default_graph()\nimg = tf.placeholder(tf.uint8, shape=(1, None, None, 3), name=\"input_tensor\")\nfloat_img = tf.cast(img, tf.float32, \"ToFloat\")\nwhiten_fn = lambda img: tf.image.per_image_standardization(img)\nwhitened = tf.map_fn(whiten_fn, float_img, name='image_whitening')\nidentity = tf.identity(whitened, name=\"id\")\n\n# Write graph\noutput_names = [\"id\"]\nwith tf.Session() as sess:\n  input_graph_def = sess.graph_def\n  output_graph_def = graph_util.convert_variables_to_constants(sess,\n                                                               input_graph_def,\n                                                               output_names)\n  tf.train.write_graph(output_graph_def, \"./\", orig_model, False)\n\n# Load the graph again\ntf.reset_default_graph()\ngraph_def = graph_pb2.GraphDef()\nwith open(orig_model, \"rb\") as f:\n  graph_def.ParseFromString(f.read())\n\n# Rewire the graph with a float32 placeholder directly\nimg = tf.placeholder(tf.float32, shape=(1, None, None, 3), name=\"input\")\ninput_map = {\n  \"ToFloat\": img,\n  }\ntf.import_graph_def(graph_def, input_map=input_map, name=\"\")\n\n# Write the modified graph\ngraph = tf.get_default_graph()\noutput_names = [\"id\"]\nwith tf.Session(graph=graph) as sess:\n  graph = tf.get_default_graph()\n  input_graph_def = graph.as_graph_def()\n  output_graph_def = graph_util.convert_variables_to_constants(sess,\n                                                               input_graph_def,\n                                                               output_names)\n  tf.train.write_graph(output_graph_def, \"./\", mapped_model, False)\n\n# Try to load the modified graph\ntf.reset_default_graph()\ngraph_def = graph_pb2.GraphDef()\nwith open(mapped_model, \"rb\") as f:\n  graph_def.ParseFromString(f.read())\n\ng = tf.import_graph_def(graph_def)\nDescribe the problem\nI noticed this issue trying to modify (via input_map) an object detection model (from tf/models/object_detection) to directly accept float32 instead of uint8. I have managed to reproduce the using the above minimal example. It seems like one of the attributes of one of the operations doesn't get fully updated. Possibly related to  #9925 .\nSource code / logs\nTraceback:\nTraceback (most recent call last):\n  File \"input_map_bug.py\", line 71, in <module>\n    g = tf.import_graph_def(graph_def)\n  File \"/home/s.antol/cv/py3virtualenvs/tf1.2/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 331, in import_graph_def\n    op_to_bind_to, node.name))\nValueError: Specified colocation to an op that does not exist during import: ToFloat in image_whitening/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3\n\nLooking through the protobuf text version, the node below has s: \"loc:@ToFloat\" instead of (what I think should be) s:\"loc:@input\":\nnode {\n  name: \"image_whitening/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3\"\n  op: \"TensorArrayScatterV3\"\n  input: \"image_whitening/TensorArray\"\n  input: \"image_whitening/TensorArrayUnstack/range\"\n  input: \"input\"\n  input: \"image_whitening/TensorArray:1\"\n  attr {\n    key: \"T\"\n    value {\n      type: DT_FLOAT\n    }\n  }\n  attr {\n    key: \"_class\"\n    value {\n      list {\n        s: \"loc:@ToFloat\"\n      }\n    }\n  }\n}", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Reproducible script below\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary/pip\r\n- **TensorFlow version (use command below)**: 1.2.1\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**:\r\n\r\n```py\r\nimport tensorflow as tf\r\nfrom tensorflow.python.framework import graph_util\r\nfrom tensorflow.core.framework import graph_pb2\r\n\r\norig_model = \"input_map_orig.pb\"\r\nmapped_model = \"input_map_modified.pb\"\r\n\r\n# Create a graph with uint8 placeholder that gets\r\n# cast to float32 before going through image whitening\r\ntf.reset_default_graph()\r\nimg = tf.placeholder(tf.uint8, shape=(1, None, None, 3), name=\"input_tensor\")\r\nfloat_img = tf.cast(img, tf.float32, \"ToFloat\")\r\nwhiten_fn = lambda img: tf.image.per_image_standardization(img)\r\nwhitened = tf.map_fn(whiten_fn, float_img, name='image_whitening')\r\nidentity = tf.identity(whitened, name=\"id\")\r\n\r\n# Write graph\r\noutput_names = [\"id\"]\r\nwith tf.Session() as sess:\r\n  input_graph_def = sess.graph_def\r\n  output_graph_def = graph_util.convert_variables_to_constants(sess,\r\n                                                               input_graph_def,\r\n                                                               output_names)\r\n  tf.train.write_graph(output_graph_def, \"./\", orig_model, False)\r\n\r\n# Load the graph again\r\ntf.reset_default_graph()\r\ngraph_def = graph_pb2.GraphDef()\r\nwith open(orig_model, \"rb\") as f:\r\n  graph_def.ParseFromString(f.read())\r\n\r\n# Rewire the graph with a float32 placeholder directly\r\nimg = tf.placeholder(tf.float32, shape=(1, None, None, 3), name=\"input\")\r\ninput_map = {\r\n  \"ToFloat\": img,\r\n  }\r\ntf.import_graph_def(graph_def, input_map=input_map, name=\"\")\r\n\r\n# Write the modified graph\r\ngraph = tf.get_default_graph()\r\noutput_names = [\"id\"]\r\nwith tf.Session(graph=graph) as sess:\r\n  graph = tf.get_default_graph()\r\n  input_graph_def = graph.as_graph_def()\r\n  output_graph_def = graph_util.convert_variables_to_constants(sess,\r\n                                                               input_graph_def,\r\n                                                               output_names)\r\n  tf.train.write_graph(output_graph_def, \"./\", mapped_model, False)\r\n\r\n# Try to load the modified graph\r\ntf.reset_default_graph()\r\ngraph_def = graph_pb2.GraphDef()\r\nwith open(mapped_model, \"rb\") as f:\r\n  graph_def.ParseFromString(f.read())\r\n\r\ng = tf.import_graph_def(graph_def)\r\n```\r\n\r\n### Describe the problem\r\nI noticed this issue trying to modify (via input_map) an object detection model (from [tf/models/object_detection](https://github.com/tensorflow/models/tree/master/object_detection)) to directly accept float32 instead of uint8. I have managed to reproduce the using the above minimal example. It seems like one of the attributes of one of the operations doesn't get fully updated. Possibly related to  https://github.com/tensorflow/tensorflow/issues/9925 .\r\n\r\n### Source code / logs\r\nTraceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"input_map_bug.py\", line 71, in <module>\r\n    g = tf.import_graph_def(graph_def)\r\n  File \"/home/s.antol/cv/py3virtualenvs/tf1.2/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 331, in import_graph_def\r\n    op_to_bind_to, node.name))\r\nValueError: Specified colocation to an op that does not exist during import: ToFloat in image_whitening/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3\r\n```\r\n\r\nLooking through the protobuf text version, the node below has `s: \"loc:@ToFloat\"` instead of (what I think should be) `s:\"loc:@input\"`:\r\n```\r\nnode {\r\n  name: \"image_whitening/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3\"\r\n  op: \"TensorArrayScatterV3\"\r\n  input: \"image_whitening/TensorArray\"\r\n  input: \"image_whitening/TensorArrayUnstack/range\"\r\n  input: \"input\"\r\n  input: \"image_whitening/TensorArray:1\"\r\n  attr {\r\n    key: \"T\"\r\n    value {\r\n      type: DT_FLOAT\r\n    }\r\n  }\r\n  attr {\r\n    key: \"_class\"\r\n    value {\r\n      list {\r\n        s: \"loc:@ToFloat\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n"}