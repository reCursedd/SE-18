{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/317958876", "html_url": "https://github.com/tensorflow/tensorflow/issues/11770#issuecomment-317958876", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11770", "id": 317958876, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzk1ODg3Ng==", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-26T06:17:22Z", "updated_at": "2017-07-26T06:17:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>My guess is that this is more cleanly accomplished using the filter() method on Dataset, where the predicate is one that checks that tf.shape(value)[batch_dim] == batch_size.  So something like</p>\n<p>dataset = .. your dataset<br>\ndataset = dataset.filter(lambda t: tf.equal(tf.shape(t)[0], batch_size))</p>\n<p>and then your iterator will only yield values where the Tensor matches the expected batch size.</p>\n<p>(If this satisfies your use case, feel free to close this issue).</p>", "body_text": "My guess is that this is more cleanly accomplished using the filter() method on Dataset, where the predicate is one that checks that tf.shape(value)[batch_dim] == batch_size.  So something like\ndataset = .. your dataset\ndataset = dataset.filter(lambda t: tf.equal(tf.shape(t)[0], batch_size))\nand then your iterator will only yield values where the Tensor matches the expected batch size.\n(If this satisfies your use case, feel free to close this issue).", "body": "My guess is that this is more cleanly accomplished using the filter() method on Dataset, where the predicate is one that checks that tf.shape(value)[batch_dim] == batch_size.  So something like\r\n\r\ndataset = .. your dataset\r\ndataset = dataset.filter(lambda t: tf.equal(tf.shape(t)[0], batch_size))\r\n\r\nand then your iterator will only yield values where the Tensor matches the expected batch size.\r\n\r\n(If this satisfies your use case, feel free to close this issue)."}