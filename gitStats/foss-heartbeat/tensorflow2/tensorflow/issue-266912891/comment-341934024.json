{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/341934024", "html_url": "https://github.com/tensorflow/tensorflow/pull/13834#issuecomment-341934024", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13834", "id": 341934024, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTkzNDAyNA==", "user": {"login": "Ouwen", "id": 5455421, "node_id": "MDQ6VXNlcjU0NTU0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5455421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ouwen", "html_url": "https://github.com/Ouwen", "followers_url": "https://api.github.com/users/Ouwen/followers", "following_url": "https://api.github.com/users/Ouwen/following{/other_user}", "gists_url": "https://api.github.com/users/Ouwen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ouwen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ouwen/subscriptions", "organizations_url": "https://api.github.com/users/Ouwen/orgs", "repos_url": "https://api.github.com/users/Ouwen/repos", "events_url": "https://api.github.com/users/Ouwen/events{/privacy}", "received_events_url": "https://api.github.com/users/Ouwen/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-04T22:22:53Z", "updated_at": "2017-11-04T22:22:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15258583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/josh11b\">@josh11b</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1414837\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/MarkDaoust\">@MarkDaoust</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a>, any updates? Just want to make sure this is the plan moving forward.</p>\n<p>An alternative would be to potentially default to numpy semantics for all tensors that are made.</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/408fd454d7d2a16269576ea12bcd516e25a6b0c5/tensorflow/python/framework/tensor_util.py#L375-L377\">tensorflow/tensorflow/python/framework/tensor_util.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 375 to 377\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/408fd454d7d2a16269576ea12bcd516e25a6b0c5\">408fd45</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L375\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"375\"></td>\n          <td id=\"LC375\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">else</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L376\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"376\"></td>\n          <td id=\"LC376\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   _AssertCompatible(values, dtype) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L377\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"377\"></td>\n          <td id=\"LC377\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   nparray <span class=\"pl-k\">=</span> np.array(values, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np_dt) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>So the following lines would be flipped to attempt a numpy conversion, and if that fails we can fall back to the compatibility error.</p>\n<p>This would mean <code>None</code> would be converted to <code>nan</code> for floats, and that <code>None</code> would be converted to <code>'None'</code> for strings.</p>", "body_text": "@alextp @josh11b @mrry @MarkDaoust @vrv, any updates? Just want to make sure this is the plan moving forward.\nAn alternative would be to potentially default to numpy semantics for all tensors that are made.\n\n  \n    \n      tensorflow/tensorflow/python/framework/tensor_util.py\n    \n    \n        Lines 375 to 377\n      in\n      408fd45\n    \n    \n    \n    \n\n        \n          \n           else: \n        \n\n        \n          \n             _AssertCompatible(values, dtype) \n        \n\n        \n          \n             nparray = np.array(values, dtype=np_dt) \n        \n    \n  \n\n\nSo the following lines would be flipped to attempt a numpy conversion, and if that fails we can fall back to the compatibility error.\nThis would mean None would be converted to nan for floats, and that None would be converted to 'None' for strings.", "body": "@alextp @josh11b @mrry @MarkDaoust @vrv, any updates? Just want to make sure this is the plan moving forward.\r\n\r\nAn alternative would be to potentially default to numpy semantics for all tensors that are made.\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/408fd454d7d2a16269576ea12bcd516e25a6b0c5/tensorflow/python/framework/tensor_util.py#L375-L377\r\n\r\nSo the following lines would be flipped to attempt a numpy conversion, and if that fails we can fall back to the compatibility error.\r\n\r\nThis would mean `None` would be converted to `nan` for floats, and that `None` would be converted to `'None'` for strings.\r\n\r\n"}