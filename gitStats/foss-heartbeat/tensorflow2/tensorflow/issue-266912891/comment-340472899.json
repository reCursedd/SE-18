{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/340472899", "html_url": "https://github.com/tensorflow/tensorflow/pull/13834#issuecomment-340472899", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13834", "id": 340472899, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQ3Mjg5OQ==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-30T15:05:47Z", "updated_at": "2017-10-30T15:05:47Z", "author_association": "MEMBER", "body_html": "<div class=\"email-fragment\">I think we should do option (1). There are already a few places in which\nconvert_to_tensor disagrees with numpy (about what dtype to use and about\nwhat to do with strings containing nul bytes, for example).</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Sun, Oct 29, 2017 at 9:58 PM, Ouwen Huang ***@***.***&gt; wrote:\n *<a class=\"user-mention\" href=\"https://github.com/Ouwen\">@Ouwen</a>* commented on this pull request.\n ------------------------------\n\n In tensorflow/python/framework/tensor_util.py\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"266912891\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13834\" href=\"https://github.com/tensorflow/tensorflow/pull/13834#discussion_r147617934\">#13834 (comment)</a>&gt;\n :\n\n &gt; @@ -252,7 +252,7 @@ def _FilterInt(v):\n  def _FilterFloat(v):\n    if isinstance(v, (list, tuple)):\n      return _FirstNotNone([_FilterFloat(x) for x in v])\n -  return None if isinstance(v, compat.real_types) else _NotNone(v)\n +  return None if isinstance(v, compat.real_types) or v is None else _NotNone(v)\n\n <a class=\"user-mention\" href=\"https://github.com/alextp\">@alextp</a> &lt;<a href=\"https://github.com/alextp\">https://github.com/alextp</a>&gt;, thanks for giving this a look over!\n\n Currently there exists inconsistent behavior since numpy.array will\n convert None into nan for float types but, convert_to_tensor does not.\n This seems to break the promised convert_to_tensor abstraction referenced\n from issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"266711857\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13827\" href=\"https://github.com/tensorflow/tensorflow/issues/13827\">#13827</a> &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"266711857\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13827\" href=\"https://github.com/tensorflow/tensorflow/issues/13827\">#13827</a>&gt;.\n\n Since the convert_to_tensor abstraction states the following are\n equivalent\n &lt;<a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578\">https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578</a>&gt;\n\n value_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\n value_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\n value_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\n\n I believe that the below should be equivalent as well\n\n value_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\n value_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\n\n From this inconsistency in convert_to_tensor, I believe there are a\n couple options.\n\n    1. We document that the abstraction does not hold for floats.\n    2. We remove the convert_to_tensor abstraction\n    3. We update NumPy to not convert None to nan for float types\n    4. We silently convert None to nan specifically for float types\n\n Options 1 and 4 seem reasonable to me, but in my opinion option 4 is a\n good choice given that convert_to_tensor already silently converts and\n that it follows the semantics NumPy has set forth.\n\n Please let me know what you think. Happy to make any needed changes!\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"266912891\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13834\" href=\"https://github.com/tensorflow/tensorflow/pull/13834#discussion_r147617934\">#13834 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAATxav419Oc9w5QbrSLn20p9YCtNi07ks5sxVdmgaJpZM4P_iGB\">https://github.com/notifications/unsubscribe-auth/AAATxav419Oc9w5QbrSLn20p9YCtNi07ks5sxVdmgaJpZM4P_iGB</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n<div class=\"email-signature-reply\">-- \n - Alex</div>\n</div>", "body_text": "I think we should do option (1). There are already a few places in which\nconvert_to_tensor disagrees with numpy (about what dtype to use and about\nwhat to do with strings containing nul bytes, for example).\n\u2026\nOn Sun, Oct 29, 2017 at 9:58 PM, Ouwen Huang ***@***.***> wrote:\n *@Ouwen* commented on this pull request.\n ------------------------------\n\n In tensorflow/python/framework/tensor_util.py\n <#13834 (comment)>\n :\n\n > @@ -252,7 +252,7 @@ def _FilterInt(v):\n  def _FilterFloat(v):\n    if isinstance(v, (list, tuple)):\n      return _FirstNotNone([_FilterFloat(x) for x in v])\n -  return None if isinstance(v, compat.real_types) else _NotNone(v)\n +  return None if isinstance(v, compat.real_types) or v is None else _NotNone(v)\n\n @alextp <https://github.com/alextp>, thanks for giving this a look over!\n\n Currently there exists inconsistent behavior since numpy.array will\n convert None into nan for float types but, convert_to_tensor does not.\n This seems to break the promised convert_to_tensor abstraction referenced\n from issue #13827 <#13827>.\n\n Since the convert_to_tensor abstraction states the following are\n equivalent\n <https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578>\n\n value_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\n value_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\n value_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\n\n I believe that the below should be equivalent as well\n\n value_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\n value_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\n\n From this inconsistency in convert_to_tensor, I believe there are a\n couple options.\n\n    1. We document that the abstraction does not hold for floats.\n    2. We remove the convert_to_tensor abstraction\n    3. We update NumPy to not convert None to nan for float types\n    4. We silently convert None to nan specifically for float types\n\n Options 1 and 4 seem reasonable to me, but in my opinion option 4 is a\n good choice given that convert_to_tensor already silently converts and\n that it follows the semantics NumPy has set forth.\n\n Please let me know what you think. Happy to make any needed changes!\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#13834 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AAATxav419Oc9w5QbrSLn20p9YCtNi07ks5sxVdmgaJpZM4P_iGB>\n .\n\n\n-- \n - Alex", "body": "I think we should do option (1). There are already a few places in which\nconvert_to_tensor disagrees with numpy (about what dtype to use and about\nwhat to do with strings containing nul bytes, for example).\n\nOn Sun, Oct 29, 2017 at 9:58 PM, Ouwen Huang <notifications@github.com>\nwrote:\n\n> *@Ouwen* commented on this pull request.\n> ------------------------------\n>\n> In tensorflow/python/framework/tensor_util.py\n> <https://github.com/tensorflow/tensorflow/pull/13834#discussion_r147617934>\n> :\n>\n> > @@ -252,7 +252,7 @@ def _FilterInt(v):\n>  def _FilterFloat(v):\n>    if isinstance(v, (list, tuple)):\n>      return _FirstNotNone([_FilterFloat(x) for x in v])\n> -  return None if isinstance(v, compat.real_types) else _NotNone(v)\n> +  return None if isinstance(v, compat.real_types) or v is None else _NotNone(v)\n>\n> @alextp <https://github.com/alextp>, thanks for giving this a look over!\n>\n> Currently there exists inconsistent behavior since numpy.array will\n> convert None into nan for float types but, convert_to_tensor does not.\n> This seems to break the promised convert_to_tensor abstraction referenced\n> from issue #13827 <https://github.com/tensorflow/tensorflow/issues/13827>.\n>\n> Since the convert_to_tensor abstraction states the following are\n> equivalent\n> <https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578>\n>\n> value_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\n> value_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\n> value_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\n>\n> I believe that the below should be equivalent as well\n>\n> value_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\n> value_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\n>\n> From this inconsistency in convert_to_tensor, I believe there are a\n> couple options.\n>\n>    1. We document that the abstraction does not hold for floats.\n>    2. We remove the convert_to_tensor abstraction\n>    3. We update NumPy to not convert None to nan for float types\n>    4. We silently convert None to nan specifically for float types\n>\n> Options 1 and 4 seem reasonable to me, but in my opinion option 4 is a\n> good choice given that convert_to_tensor already silently converts and\n> that it follows the semantics NumPy has set forth.\n>\n> Please let me know what you think. Happy to make any needed changes!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/pull/13834#discussion_r147617934>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAATxav419Oc9w5QbrSLn20p9YCtNi07ks5sxVdmgaJpZM4P_iGB>\n> .\n>\n\n\n\n-- \n - Alex\n"}