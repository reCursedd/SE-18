{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/146018216", "pull_request_review_id": 70907550, "id": 146018216, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjAxODIxNg==", "diff_hunk": "@@ -252,7 +252,7 @@ def _FilterInt(v):\n def _FilterFloat(v):\n   if isinstance(v, (list, tuple)):\n     return _FirstNotNone([_FilterFloat(x) for x in v])\n-  return None if isinstance(v, compat.real_types) else _NotNone(v)\n+  return None if isinstance(v, compat.real_types) or v is None else _NotNone(v)", "path": "tensorflow/python/framework/tensor_util.py", "position": null, "original_position": 5, "commit_id": "d0d7576bb8f6a259771eb838a2f4b616562b687e", "original_commit_id": "46fa50e1d8ec80a3dd6ae207c2b8714b776097a3", "user": {"login": "MarkDaoust", "id": 1414837, "node_id": "MDQ6VXNlcjE0MTQ4Mzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1414837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkDaoust", "html_url": "https://github.com/MarkDaoust", "followers_url": "https://api.github.com/users/MarkDaoust/followers", "following_url": "https://api.github.com/users/MarkDaoust/following{/other_user}", "gists_url": "https://api.github.com/users/MarkDaoust/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkDaoust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkDaoust/subscriptions", "organizations_url": "https://api.github.com/users/MarkDaoust/orgs", "repos_url": "https://api.github.com/users/MarkDaoust/repos", "events_url": "https://api.github.com/users/MarkDaoust/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkDaoust/received_events", "type": "User", "site_admin": false}, "body": "> Can you clarify why you want to do this?\r\n\r\nThe goal is better compatibility with numpy (this is described in the linked bug).\r\n\r\nYou can create a numpy float array from a list containing `None` and the `None` gets replaced by a `NaN`.\r\n\r\nSo the goal here is to accept `None` in the input data. \r\n\r\nMaybe this makes the call to `_NotNone()` redundant since, `_FilterFloat` returns `None` for success and the failing value on failure. So the purpose of `_NotNone` is to wrap `None` values so that failure can be reported for a `None` value.\r\n\r\nI am no expert in this code either, this is just what I've understood from being involved in the bug.\r\n", "created_at": "2017-10-20T17:09:38Z", "updated_at": "2017-11-05T02:13:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13834#discussion_r146018216", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13834", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/146018216"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13834#discussion_r146018216"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13834"}}, "body_html": "<blockquote>\n<p>Can you clarify why you want to do this?</p>\n</blockquote>\n<p>The goal is better compatibility with numpy (this is described in the linked bug).</p>\n<p>You can create a numpy float array from a list containing <code>None</code> and the <code>None</code> gets replaced by a <code>NaN</code>.</p>\n<p>So the goal here is to accept <code>None</code> in the input data.</p>\n<p>Maybe this makes the call to <code>_NotNone()</code> redundant since, <code>_FilterFloat</code> returns <code>None</code> for success and the failing value on failure. So the purpose of <code>_NotNone</code> is to wrap <code>None</code> values so that failure can be reported for a <code>None</code> value.</p>\n<p>I am no expert in this code either, this is just what I've understood from being involved in the bug.</p>", "body_text": "Can you clarify why you want to do this?\n\nThe goal is better compatibility with numpy (this is described in the linked bug).\nYou can create a numpy float array from a list containing None and the None gets replaced by a NaN.\nSo the goal here is to accept None in the input data.\nMaybe this makes the call to _NotNone() redundant since, _FilterFloat returns None for success and the failing value on failure. So the purpose of _NotNone is to wrap None values so that failure can be reported for a None value.\nI am no expert in this code either, this is just what I've understood from being involved in the bug.", "in_reply_to_id": 145866804}