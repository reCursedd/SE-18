{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/340611009", "html_url": "https://github.com/tensorflow/tensorflow/pull/13834#issuecomment-340611009", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13834", "id": 340611009, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYxMTAwOQ==", "user": {"login": "Ouwen", "id": 5455421, "node_id": "MDQ6VXNlcjU0NTU0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5455421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ouwen", "html_url": "https://github.com/Ouwen", "followers_url": "https://api.github.com/users/Ouwen/followers", "following_url": "https://api.github.com/users/Ouwen/following{/other_user}", "gists_url": "https://api.github.com/users/Ouwen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ouwen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ouwen/subscriptions", "organizations_url": "https://api.github.com/users/Ouwen/orgs", "repos_url": "https://api.github.com/users/Ouwen/repos", "events_url": "https://api.github.com/users/Ouwen/events{/privacy}", "received_events_url": "https://api.github.com/users/Ouwen/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-30T23:04:37Z", "updated_at": "2017-10-30T23:04:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a>, you have a good point with NumPy  having different behavior when handling <code>null</code> types for strings. If <code>convert_to_tensor</code> does not fall back on NumPy semantics, perhaps it is better to allow users to explicitly decide the method of conversion.</p>\n<p>With that, I can update the PR so that we add <code>tf.float16</code> into the <code>_TF_TO_IS_OK</code> dictionary for consistent assertion. Additionally, I will make a note that tensors with <code>None</code> values can have differing behavior from NumPy in the documentation.</p>\n<p>If this sounds good to you guys <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a>  <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1414837\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/MarkDaoust\">@MarkDaoust</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a>, I can go ahead and make that change.</p>", "body_text": "@alextp, you have a good point with NumPy  having different behavior when handling null types for strings. If convert_to_tensor does not fall back on NumPy semantics, perhaps it is better to allow users to explicitly decide the method of conversion.\nWith that, I can update the PR so that we add tf.float16 into the _TF_TO_IS_OK dictionary for consistent assertion. Additionally, I will make a note that tensors with None values can have differing behavior from NumPy in the documentation.\nIf this sounds good to you guys @alextp  @mrry @MarkDaoust @vrv, I can go ahead and make that change.", "body": "@alextp, you have a good point with NumPy  having different behavior when handling `null` types for strings. If `convert_to_tensor` does not fall back on NumPy semantics, perhaps it is better to allow users to explicitly decide the method of conversion.\r\n\r\nWith that, I can update the PR so that we add `tf.float16` into the `_TF_TO_IS_OK` dictionary for consistent assertion. Additionally, I will make a note that tensors with `None` values can have differing behavior from NumPy in the documentation.\r\n\r\nIf this sounds good to you guys @alextp  @mrry @MarkDaoust @vrv, I can go ahead and make that change."}