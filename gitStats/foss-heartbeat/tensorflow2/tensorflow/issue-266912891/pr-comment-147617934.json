{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/147617934", "pull_request_review_id": 72735911, "id": 147617934, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzYxNzkzNA==", "diff_hunk": "@@ -252,7 +252,7 @@ def _FilterInt(v):\n def _FilterFloat(v):\n   if isinstance(v, (list, tuple)):\n     return _FirstNotNone([_FilterFloat(x) for x in v])\n-  return None if isinstance(v, compat.real_types) else _NotNone(v)\n+  return None if isinstance(v, compat.real_types) or v is None else _NotNone(v)", "path": "tensorflow/python/framework/tensor_util.py", "position": null, "original_position": 5, "commit_id": "d0d7576bb8f6a259771eb838a2f4b616562b687e", "original_commit_id": "46fa50e1d8ec80a3dd6ae207c2b8714b776097a3", "user": {"login": "Ouwen", "id": 5455421, "node_id": "MDQ6VXNlcjU0NTU0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5455421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ouwen", "html_url": "https://github.com/Ouwen", "followers_url": "https://api.github.com/users/Ouwen/followers", "following_url": "https://api.github.com/users/Ouwen/following{/other_user}", "gists_url": "https://api.github.com/users/Ouwen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ouwen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ouwen/subscriptions", "organizations_url": "https://api.github.com/users/Ouwen/orgs", "repos_url": "https://api.github.com/users/Ouwen/repos", "events_url": "https://api.github.com/users/Ouwen/events{/privacy}", "received_events_url": "https://api.github.com/users/Ouwen/received_events", "type": "User", "site_admin": false}, "body": "@alextp, thanks for giving this a look over!\r\n\r\nCurrently there exists inconsistent behavior since `numpy.array` will convert `None` into `nan` for float types but, `convert_to_tensor` does not. This seems to break the promised `convert_to_tensor` abstraction referenced from issue #13827.\r\n\r\n>Since the `convert_to_tensor` abstraction states the [following are equivalent](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578)\r\n> ```\r\n> value_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\r\n> value_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\r\n> value_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\r\n> ```\r\n>I believe that the below should be equivalent as well\r\n> ```\r\n> value_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\r\n> value_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\r\n> ```\r\n\r\nFrom this inconsistency in `convert_to_tensor`, I believe there are a couple options.\r\n1. We document that the abstraction does not hold for floats.\r\n2. We remove the `convert_to_tensor` abstraction\r\n3. We update `NumPy` to not convert `None` to `nan` for float types\r\n4. We silently convert `None` to `nan` specifically for float types\r\n\r\nOptions 1 and 4 seem reasonable to me, but in my opinion option 4 is a good choice given that `convert_to_tensor` already silently converts and that it follows the semantics `NumPy` has set forth.\r\n\r\nPlease let me know what you think. Happy to make any needed changes!", "created_at": "2017-10-30T04:53:26Z", "updated_at": "2017-11-05T02:13:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13834#discussion_r147617934", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13834", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/147617934"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13834#discussion_r147617934"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13834"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a>, thanks for giving this a look over!</p>\n<p>Currently there exists inconsistent behavior since <code>numpy.array</code> will convert <code>None</code> into <code>nan</code> for float types but, <code>convert_to_tensor</code> does not. This seems to break the promised <code>convert_to_tensor</code> abstraction referenced from issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"266711857\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13827\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/13827/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/13827\">#13827</a>.</p>\n<blockquote>\n<p>Since the <code>convert_to_tensor</code> abstraction states the <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578\">following are equivalent</a></p>\n<pre><code>value_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\nvalue_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\nvalue_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\n</code></pre>\n<p>I believe that the below should be equivalent as well</p>\n<pre><code>value_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\nvalue_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\n</code></pre>\n</blockquote>\n<p>From this inconsistency in <code>convert_to_tensor</code>, I believe there are a couple options.</p>\n<ol>\n<li>We document that the abstraction does not hold for floats.</li>\n<li>We remove the <code>convert_to_tensor</code> abstraction</li>\n<li>We update <code>NumPy</code> to not convert <code>None</code> to <code>nan</code> for float types</li>\n<li>We silently convert <code>None</code> to <code>nan</code> specifically for float types</li>\n</ol>\n<p>Options 1 and 4 seem reasonable to me, but in my opinion option 4 is a good choice given that <code>convert_to_tensor</code> already silently converts and that it follows the semantics <code>NumPy</code> has set forth.</p>\n<p>Please let me know what you think. Happy to make any needed changes!</p>", "body_text": "@alextp, thanks for giving this a look over!\nCurrently there exists inconsistent behavior since numpy.array will convert None into nan for float types but, convert_to_tensor does not. This seems to break the promised convert_to_tensor abstraction referenced from issue #13827.\n\nSince the convert_to_tensor abstraction states the following are equivalent\nvalue_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\nvalue_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\nvalue_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\n\nI believe that the below should be equivalent as well\nvalue_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\nvalue_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\n\n\nFrom this inconsistency in convert_to_tensor, I believe there are a couple options.\n\nWe document that the abstraction does not hold for floats.\nWe remove the convert_to_tensor abstraction\nWe update NumPy to not convert None to nan for float types\nWe silently convert None to nan specifically for float types\n\nOptions 1 and 4 seem reasonable to me, but in my opinion option 4 is a good choice given that convert_to_tensor already silently converts and that it follows the semantics NumPy has set forth.\nPlease let me know what you think. Happy to make any needed changes!", "in_reply_to_id": 145866804}