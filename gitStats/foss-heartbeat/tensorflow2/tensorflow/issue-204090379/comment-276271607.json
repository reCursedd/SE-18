{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/276271607", "html_url": "https://github.com/tensorflow/tensorflow/issues/7149#issuecomment-276271607", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7149", "id": 276271607, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjI3MTYwNw==", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-31T04:21:12Z", "updated_at": "2017-01-31T04:21:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I agree that exposing operations in their own particular object would create a richer API than declaring everything into a single builder class, I'll also get my mind into it.</p>\n<p>Now, without insisting, I'll clarify how my suggestion would have handled point a), maybe some of those ideas can morph into something else:</p>\n<ol>\n<li>\n<p>The generated builder class implements each operations by returning a specialized builder that inherits this same class (e.g. GraphBuilder.matMul() returns a MatMulGraphBuilder that inherits GraphBuilder).</p>\n</li>\n<li>\n<p>The specialized builder exposes all other operations directly from its superclass (for going on with graph building) + methods for setting optional attributes of the current operation, prefixed by \"with\" (e.g. withTransposeA() and withTransposeB()).</p>\n</li>\n<li>\n<p>The specialized builder is responsible of building the current operation, using internally an OperationBuilder.</p>\n</li>\n<li>\n<p>Invoking another operation on a specialized builder will therefore end the construction of the current operation and return another specialized builder for building the new operation.</p>\n</li>\n</ol>", "body_text": "I agree that exposing operations in their own particular object would create a richer API than declaring everything into a single builder class, I'll also get my mind into it.\nNow, without insisting, I'll clarify how my suggestion would have handled point a), maybe some of those ideas can morph into something else:\n\n\nThe generated builder class implements each operations by returning a specialized builder that inherits this same class (e.g. GraphBuilder.matMul() returns a MatMulGraphBuilder that inherits GraphBuilder).\n\n\nThe specialized builder exposes all other operations directly from its superclass (for going on with graph building) + methods for setting optional attributes of the current operation, prefixed by \"with\" (e.g. withTransposeA() and withTransposeB()).\n\n\nThe specialized builder is responsible of building the current operation, using internally an OperationBuilder.\n\n\nInvoking another operation on a specialized builder will therefore end the construction of the current operation and return another specialized builder for building the new operation.", "body": "I agree that exposing operations in their own particular object would create a richer API than declaring everything into a single builder class, I'll also get my mind into it.\r\n\r\nNow, without insisting, I'll clarify how my suggestion would have handled point a), maybe some of those ideas can morph into something else:\r\n\r\n1. The generated builder class implements each operations by returning a specialized builder that inherits this same class (e.g. GraphBuilder.matMul() returns a MatMulGraphBuilder that inherits GraphBuilder).\r\n\r\n2. The specialized builder exposes all other operations directly from its superclass (for going on with graph building) + methods for setting optional attributes of the current operation, prefixed by \"with\" (e.g. withTransposeA() and withTransposeB()).\r\n\r\n3. The specialized builder is responsible of building the current operation, using internally an OperationBuilder.\r\n\r\n4. Invoking another operation on a specialized builder will therefore end the construction of the current operation and return another specialized builder for building the new operation."}