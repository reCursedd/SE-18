{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23413", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23413/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23413/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23413/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23413", "id": 376165509, "node_id": "MDU6SXNzdWUzNzYxNjU1MDk=", "number": 23413, "title": "Models cannot be loaded", "user": {"login": "Svdvoort", "id": 23049683, "node_id": "MDQ6VXNlcjIzMDQ5Njgz", "avatar_url": "https://avatars2.githubusercontent.com/u/23049683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Svdvoort", "html_url": "https://github.com/Svdvoort", "followers_url": "https://api.github.com/users/Svdvoort/followers", "following_url": "https://api.github.com/users/Svdvoort/following{/other_user}", "gists_url": "https://api.github.com/users/Svdvoort/gists{/gist_id}", "starred_url": "https://api.github.com/users/Svdvoort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Svdvoort/subscriptions", "organizations_url": "https://api.github.com/users/Svdvoort/orgs", "repos_url": "https://api.github.com/users/Svdvoort/repos", "events_url": "https://api.github.com/users/Svdvoort/events{/privacy}", "received_events_url": "https://api.github.com/users/Svdvoort/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "petermattson", "id": 34691613, "node_id": "MDQ6VXNlcjM0NjkxNjEz", "avatar_url": "https://avatars3.githubusercontent.com/u/34691613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petermattson", "html_url": "https://github.com/petermattson", "followers_url": "https://api.github.com/users/petermattson/followers", "following_url": "https://api.github.com/users/petermattson/following{/other_user}", "gists_url": "https://api.github.com/users/petermattson/gists{/gist_id}", "starred_url": "https://api.github.com/users/petermattson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petermattson/subscriptions", "organizations_url": "https://api.github.com/users/petermattson/orgs", "repos_url": "https://api.github.com/users/petermattson/repos", "events_url": "https://api.github.com/users/petermattson/events{/privacy}", "received_events_url": "https://api.github.com/users/petermattson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petermattson", "id": 34691613, "node_id": "MDQ6VXNlcjM0NjkxNjEz", "avatar_url": "https://avatars3.githubusercontent.com/u/34691613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petermattson", "html_url": "https://github.com/petermattson", "followers_url": "https://api.github.com/users/petermattson/followers", "following_url": "https://api.github.com/users/petermattson/following{/other_user}", "gists_url": "https://api.github.com/users/petermattson/gists{/gist_id}", "starred_url": "https://api.github.com/users/petermattson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petermattson/subscriptions", "organizations_url": "https://api.github.com/users/petermattson/orgs", "repos_url": "https://api.github.com/users/petermattson/repos", "events_url": "https://api.github.com/users/petermattson/events{/privacy}", "received_events_url": "https://api.github.com/users/petermattson/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-31T21:22:22Z", "updated_at": "2018-11-09T18:06:50Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>What is the top-level directory of the model you are using</strong>:  ~/</li>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes, written a simple MWE script</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 18.04.1</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Compiled from source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.11.0</li>\n<li><strong>Python version</strong>: 3.6.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.16.1</li>\n<li><strong>GCC/Compiler version</strong>: 7.3.0</li>\n<li><strong>CUDA/cuDNN version</strong>: Cuda: 9.2.148, cuDNN: 9.2-v7.3.1.20</li>\n<li><strong>GPU model and memory</strong>: GeForce GTX1080Ti, 11GB</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>Minimal working example code</p>\n<pre><code>from tensorflow.keras.layers import Conv2D, MaxPooling2D, ReLU, Flatten, Dense, Input\nfrom tensorflow.keras.models import Model\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.models import load_model\n\n\ndef cnn_model(rows, cols, channels):\n    model = Model()\n    inputs = Input(shape=(rows, cols, channels), dtype='float32')\n\n    conv1 = Conv2D(64, (3, 3),activation='linear',kernel_initializer='he_uniform')(inputs)\n    relu1 = ReLU()(conv1)\n    pooling1 = MaxPooling2D(pool_size=(5, 5))(relu1)\n\n    flatten = Flatten()(pooling1)\n\n    dense1 = Dense(512)(flatten)\n\n    relu2 = ReLU()(dense1)\n    predictions = Dense(4, activation='softmax')(relu2)\n\n    model = Model(inputs=inputs, outputs=predictions)\n\n    return model\n\n\nbatch_size = 16\nrows = 128\ncols = 128\nchannels = 1\nmodel_input = np.random.randint(0, 255, (batch_size, rows, cols, channels))\nmodel_labels = np.random.randint(0, 1, (batch_size, 4))\n\nmodel = cnn_model(rows, cols,channels)\n\nadam = tf.train.AdamOptimizer(learning_rate=0.01, beta1=0.9, beta2=0.999, epsilon=1e-8)\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=adam,\n              metrics=['categorical_accuracy'])\nmodel.fit(x=model_input,\n          y=model_labels,\n          epochs=2)\n\nmodel.save(\"/home/svdvoort/test_model.hdf5\")\nload_model(\"/home/svdvoort/test_model.hdf5\")\n</code></pre>\n<h3>Describe the problem</h3>\n<p>Returns the following output (error included):</p>\n<pre><code>Epoch 1/2\n2018-10-31 19:09:12.162738: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1411] Found device 0 with properties: \nname: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683\npciBusID: 0000:01:00.0\ntotalMemory: 10.91GiB freeMemory: 10.76GiB\n2018-10-31 19:09:12.290346: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1411] Found device 1 with properties: \nname: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683\npciBusID: 0000:02:00.0\ntotalMemory: 10.92GiB freeMemory: 10.76GiB\n2018-10-31 19:09:12.291317: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0, 1\n2018-10-31 19:09:12.750668: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:\n2018-10-31 19:09:12.750702: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0 1 \n2018-10-31 19:09:12.750707: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N Y \n2018-10-31 19:09:12.750710: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 1:   Y N \n2018-10-31 19:09:12.751100: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10404 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:01:00.0, compute capability: 6.1)\n2018-10-31 19:09:12.855072: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:1 with 10407 MB memory) -&gt; physical GPU (device: 1, name: GeForce GTX 1080 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)\n16/16 [==============================] - 3s 201ms/step - loss: 0.0000e+00 - categorical_accuracy: 0.0000e+00\nEpoch 2/2\n16/16 [==============================] - 0s 1ms/step - loss: 0.0000e+00 - categorical_accuracy: 0.0000e+00\nWARNING:tensorflow:TensorFlow optimizers do not make it possible to access optimizer attributes or optimizer state after instantiation. As a result, we cannot save the optimizer as part of the model save file.You will have to compile your model again after loading it. Prefer using a Keras optimizer instead (see keras.io/optimizers).\nTraceback (most recent call last):\n  File \"Loading_error_example.py\", line 47, in &lt;module&gt;\n    load_model(\"/home/svdvoort/test_model.hdf5\")\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/saving.py\", line 230, in load_model\n    model = model_from_config(model_config, custom_objects=custom_objects)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/saving.py\", line 310, in model_from_config\n    return deserialize(config, custom_objects=custom_objects)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\n    printable_module_name='layer')\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/utils/generic_utils.py\", line 173, in deserialize_keras_object\n    list(custom_objects.items())))\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/network.py\", line 1292, in from_config\n    process_layer(layer_data)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/network.py\", line 1278, in process_layer\n    layer = deserialize_layer(layer_data, custom_objects=custom_objects)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\n    printable_module_name='layer')\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/utils/generic_utils.py\", line 175, in deserialize_keras_object\n    return cls.from_config(config['config'])\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/base_layer.py\", line 1617, in from_config\n    return cls(**config)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/layers/advanced_activations.py\", line 310, in __init__\n    if max_value is not None and max_value &lt; 0.:\nTypeError: '&lt;' not supported between instances of 'dict' and 'float'\n</code></pre>\n<p>Same is true for all other models that are being trained</p>\n<h3>Source code / logs</h3>\n<p>Output of tf_env attached<br>\n<a href=\"https://github.com/tensorflow/models/files/2535750/tf_env.txt\">tf_env.txt</a></p>", "body_text": "System information\n\nWhat is the top-level directory of the model you are using:  ~/\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, written a simple MWE script\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04.1\nTensorFlow installed from (source or binary): Compiled from source\nTensorFlow version (use command below): 1.11.0\nPython version: 3.6.6\nBazel version (if compiling from source): 0.16.1\nGCC/Compiler version: 7.3.0\nCUDA/cuDNN version: Cuda: 9.2.148, cuDNN: 9.2-v7.3.1.20\nGPU model and memory: GeForce GTX1080Ti, 11GB\nExact command to reproduce:\n\nMinimal working example code\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, ReLU, Flatten, Dense, Input\nfrom tensorflow.keras.models import Model\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.models import load_model\n\n\ndef cnn_model(rows, cols, channels):\n    model = Model()\n    inputs = Input(shape=(rows, cols, channels), dtype='float32')\n\n    conv1 = Conv2D(64, (3, 3),activation='linear',kernel_initializer='he_uniform')(inputs)\n    relu1 = ReLU()(conv1)\n    pooling1 = MaxPooling2D(pool_size=(5, 5))(relu1)\n\n    flatten = Flatten()(pooling1)\n\n    dense1 = Dense(512)(flatten)\n\n    relu2 = ReLU()(dense1)\n    predictions = Dense(4, activation='softmax')(relu2)\n\n    model = Model(inputs=inputs, outputs=predictions)\n\n    return model\n\n\nbatch_size = 16\nrows = 128\ncols = 128\nchannels = 1\nmodel_input = np.random.randint(0, 255, (batch_size, rows, cols, channels))\nmodel_labels = np.random.randint(0, 1, (batch_size, 4))\n\nmodel = cnn_model(rows, cols,channels)\n\nadam = tf.train.AdamOptimizer(learning_rate=0.01, beta1=0.9, beta2=0.999, epsilon=1e-8)\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=adam,\n              metrics=['categorical_accuracy'])\nmodel.fit(x=model_input,\n          y=model_labels,\n          epochs=2)\n\nmodel.save(\"/home/svdvoort/test_model.hdf5\")\nload_model(\"/home/svdvoort/test_model.hdf5\")\n\nDescribe the problem\nReturns the following output (error included):\nEpoch 1/2\n2018-10-31 19:09:12.162738: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1411] Found device 0 with properties: \nname: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683\npciBusID: 0000:01:00.0\ntotalMemory: 10.91GiB freeMemory: 10.76GiB\n2018-10-31 19:09:12.290346: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1411] Found device 1 with properties: \nname: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683\npciBusID: 0000:02:00.0\ntotalMemory: 10.92GiB freeMemory: 10.76GiB\n2018-10-31 19:09:12.291317: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0, 1\n2018-10-31 19:09:12.750668: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:\n2018-10-31 19:09:12.750702: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0 1 \n2018-10-31 19:09:12.750707: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N Y \n2018-10-31 19:09:12.750710: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 1:   Y N \n2018-10-31 19:09:12.751100: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10404 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:01:00.0, compute capability: 6.1)\n2018-10-31 19:09:12.855072: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:1 with 10407 MB memory) -> physical GPU (device: 1, name: GeForce GTX 1080 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)\n16/16 [==============================] - 3s 201ms/step - loss: 0.0000e+00 - categorical_accuracy: 0.0000e+00\nEpoch 2/2\n16/16 [==============================] - 0s 1ms/step - loss: 0.0000e+00 - categorical_accuracy: 0.0000e+00\nWARNING:tensorflow:TensorFlow optimizers do not make it possible to access optimizer attributes or optimizer state after instantiation. As a result, we cannot save the optimizer as part of the model save file.You will have to compile your model again after loading it. Prefer using a Keras optimizer instead (see keras.io/optimizers).\nTraceback (most recent call last):\n  File \"Loading_error_example.py\", line 47, in <module>\n    load_model(\"/home/svdvoort/test_model.hdf5\")\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/saving.py\", line 230, in load_model\n    model = model_from_config(model_config, custom_objects=custom_objects)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/saving.py\", line 310, in model_from_config\n    return deserialize(config, custom_objects=custom_objects)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\n    printable_module_name='layer')\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/utils/generic_utils.py\", line 173, in deserialize_keras_object\n    list(custom_objects.items())))\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/network.py\", line 1292, in from_config\n    process_layer(layer_data)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/network.py\", line 1278, in process_layer\n    layer = deserialize_layer(layer_data, custom_objects=custom_objects)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\n    printable_module_name='layer')\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/utils/generic_utils.py\", line 175, in deserialize_keras_object\n    return cls.from_config(config['config'])\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/base_layer.py\", line 1617, in from_config\n    return cls(**config)\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/layers/advanced_activations.py\", line 310, in __init__\n    if max_value is not None and max_value < 0.:\nTypeError: '<' not supported between instances of 'dict' and 'float'\n\nSame is true for all other models that are being trained\nSource code / logs\nOutput of tf_env attached\ntf_env.txt", "body": "### System information\r\n- **What is the top-level directory of the model you are using**:  ~/\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes, written a simple MWE script\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 18.04.1\r\n- **TensorFlow installed from (source or binary)**: Compiled from source\r\n- **TensorFlow version (use command below)**: 1.11.0\r\n- **Python version**: 3.6.6\r\n- **Bazel version (if compiling from source)**: 0.16.1\r\n- **GCC/Compiler version**: 7.3.0\r\n- **CUDA/cuDNN version**: Cuda: 9.2.148, cuDNN: 9.2-v7.3.1.20 \r\n- **GPU model and memory**: GeForce GTX1080Ti, 11GB\r\n- **Exact command to reproduce**:\r\n\r\nMinimal working example code\r\n\r\n```\r\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, ReLU, Flatten, Dense, Input\r\nfrom tensorflow.keras.models import Model\r\nimport numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow.keras.models import load_model\r\n\r\n\r\ndef cnn_model(rows, cols, channels):\r\n    model = Model()\r\n    inputs = Input(shape=(rows, cols, channels), dtype='float32')\r\n\r\n    conv1 = Conv2D(64, (3, 3),activation='linear',kernel_initializer='he_uniform')(inputs)\r\n    relu1 = ReLU()(conv1)\r\n    pooling1 = MaxPooling2D(pool_size=(5, 5))(relu1)\r\n\r\n    flatten = Flatten()(pooling1)\r\n\r\n    dense1 = Dense(512)(flatten)\r\n\r\n    relu2 = ReLU()(dense1)\r\n    predictions = Dense(4, activation='softmax')(relu2)\r\n\r\n    model = Model(inputs=inputs, outputs=predictions)\r\n\r\n    return model\r\n\r\n\r\nbatch_size = 16\r\nrows = 128\r\ncols = 128\r\nchannels = 1\r\nmodel_input = np.random.randint(0, 255, (batch_size, rows, cols, channels))\r\nmodel_labels = np.random.randint(0, 1, (batch_size, 4))\r\n\r\nmodel = cnn_model(rows, cols,channels)\r\n\r\nadam = tf.train.AdamOptimizer(learning_rate=0.01, beta1=0.9, beta2=0.999, epsilon=1e-8)\r\n\r\nmodel.compile(loss='categorical_crossentropy',\r\n              optimizer=adam,\r\n              metrics=['categorical_accuracy'])\r\nmodel.fit(x=model_input,\r\n          y=model_labels,\r\n          epochs=2)\r\n\r\nmodel.save(\"/home/svdvoort/test_model.hdf5\")\r\nload_model(\"/home/svdvoort/test_model.hdf5\")\r\n```\r\n\r\n### Describe the problem\r\n\r\nReturns the following output (error included):\r\n\r\n```\r\nEpoch 1/2\r\n2018-10-31 19:09:12.162738: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1411] Found device 0 with properties: \r\nname: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683\r\npciBusID: 0000:01:00.0\r\ntotalMemory: 10.91GiB freeMemory: 10.76GiB\r\n2018-10-31 19:09:12.290346: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1411] Found device 1 with properties: \r\nname: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.683\r\npciBusID: 0000:02:00.0\r\ntotalMemory: 10.92GiB freeMemory: 10.76GiB\r\n2018-10-31 19:09:12.291317: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0, 1\r\n2018-10-31 19:09:12.750668: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:\r\n2018-10-31 19:09:12.750702: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0 1 \r\n2018-10-31 19:09:12.750707: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N Y \r\n2018-10-31 19:09:12.750710: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 1:   Y N \r\n2018-10-31 19:09:12.751100: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10404 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:01:00.0, compute capability: 6.1)\r\n2018-10-31 19:09:12.855072: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:1 with 10407 MB memory) -> physical GPU (device: 1, name: GeForce GTX 1080 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)\r\n16/16 [==============================] - 3s 201ms/step - loss: 0.0000e+00 - categorical_accuracy: 0.0000e+00\r\nEpoch 2/2\r\n16/16 [==============================] - 0s 1ms/step - loss: 0.0000e+00 - categorical_accuracy: 0.0000e+00\r\nWARNING:tensorflow:TensorFlow optimizers do not make it possible to access optimizer attributes or optimizer state after instantiation. As a result, we cannot save the optimizer as part of the model save file.You will have to compile your model again after loading it. Prefer using a Keras optimizer instead (see keras.io/optimizers).\r\nTraceback (most recent call last):\r\n  File \"Loading_error_example.py\", line 47, in <module>\r\n    load_model(\"/home/svdvoort/test_model.hdf5\")\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/saving.py\", line 230, in load_model\r\n    model = model_from_config(model_config, custom_objects=custom_objects)\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/saving.py\", line 310, in model_from_config\r\n    return deserialize(config, custom_objects=custom_objects)\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\r\n    printable_module_name='layer')\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/utils/generic_utils.py\", line 173, in deserialize_keras_object\r\n    list(custom_objects.items())))\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/network.py\", line 1292, in from_config\r\n    process_layer(layer_data)\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/network.py\", line 1278, in process_layer\r\n    layer = deserialize_layer(layer_data, custom_objects=custom_objects)\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/layers/serialization.py\", line 64, in deserialize\r\n    printable_module_name='layer')\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/utils/generic_utils.py\", line 175, in deserialize_keras_object\r\n    return cls.from_config(config['config'])\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/engine/base_layer.py\", line 1617, in from_config\r\n    return cls(**config)\r\n  File \"/packages/tensorflow/1.11.0/Python-3.6.6/tensorflow/python/keras/layers/advanced_activations.py\", line 310, in __init__\r\n    if max_value is not None and max_value < 0.:\r\nTypeError: '<' not supported between instances of 'dict' and 'float'\r\n```\r\nSame is true for all other models that are being trained\r\n\r\n\r\n\r\n### Source code / logs\r\nOutput of tf_env attached\r\n[tf_env.txt](https://github.com/tensorflow/models/files/2535750/tf_env.txt)\r\n\r\n"}