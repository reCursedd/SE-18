{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7731", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7731/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7731/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7731/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7731", "id": 209090482, "node_id": "MDU6SXNzdWUyMDkwOTA0ODI=", "number": 7731, "title": "Provide a way to clear variable and name scope", "user": {"login": "eamartin", "id": 287200, "node_id": "MDQ6VXNlcjI4NzIwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/287200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eamartin", "html_url": "https://github.com/eamartin", "followers_url": "https://api.github.com/users/eamartin/followers", "following_url": "https://api.github.com/users/eamartin/following{/other_user}", "gists_url": "https://api.github.com/users/eamartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/eamartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eamartin/subscriptions", "organizations_url": "https://api.github.com/users/eamartin/orgs", "repos_url": "https://api.github.com/users/eamartin/repos", "events_url": "https://api.github.com/users/eamartin/events{/privacy}", "received_events_url": "https://api.github.com/users/eamartin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-02-21T09:43:20Z", "updated_at": "2018-02-05T16:46:03Z", "closed_at": "2017-09-15T06:35:20Z", "author_association": "NONE", "body_html": "<p>This is a follow-up of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"194303257\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/6189\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/6189/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/6189\">#6189</a></p>\n<p>It would be nice to be able to create a variable or name scope that does not obey all currently open scopes.</p>\n<p>As an example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>):\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>bar<span class=\"pl-pds\">'</span></span>):\n        x <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>)     <span class=\"pl-c\"><span class=\"pl-c\">#</span> foo/bar/x</span>\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>):\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>bar<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">fresh</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>):\n        x <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> bar/x</span></pre></div>\n<p>This would be useful for using scopes with object oriented TensorFlow graphs.</p>\n<p>Consider a slightly modified version of the example from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"194303257\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/6189\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/6189/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/6189\">#6189</a> . Assume each method pushes a scope for the instance (with the class name) and for the method.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-c1\">object</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">self</span>.x <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>, [], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.constant(<span class=\"pl-c1\">0.0</span>))\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">meth</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">foo</span>):\n        z <span class=\"pl-k\">=</span> tf.multiply(foo, <span class=\"pl-c1\">3.14</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>z<span class=\"pl-pds\">'</span></span>)\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.x.assign(z)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">boom</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">foo</span>):\n        <span class=\"pl-k\">return</span> tf.multiple(<span class=\"pl-c1\">2.0</span>, <span class=\"pl-c1\">self</span>.meth(foo), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>baz<span class=\"pl-pds\">'</span></span>)\n\nf0 <span class=\"pl-k\">=</span> Foo()      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Foo/__init__/x</span>\nf1 <span class=\"pl-k\">=</span> Foo()      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Foo_1/__init__/x</span>\nf0.meth(<span class=\"pl-c1\">1.0</span>)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Foo/meth/*</span>\nf0.boom(<span class=\"pl-c1\">2.0</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Foo/boom/baz, Foo/boom/Foo/meth/z</span></pre></div>\n<p>I'd like the variables in <code>boom</code>'s call to <code>meth</code> to be prefixed with only <code>Foo/meth</code> rather than <code>Foo/boom/Foo/meth</code>. This requires either releasing the variable scope within boom before calling out (hard) or providing a way for <code>meth</code> to clear the existing variable scope.</p>", "body_text": "This is a follow-up of #6189\nIt would be nice to be able to create a variable or name scope that does not obey all currently open scopes.\nAs an example:\nwith tf.variable_scope('foo'):\n    with tf.variable_scope('bar'):\n        x = tf.constant(1.0, name='x')     # foo/bar/x\n\nwith tf.variable_scope('foo'):\n    with tf.variable_scope('bar', fresh=True):\n        x = tf.constant(1.0, name='x')    # bar/x\nThis would be useful for using scopes with object oriented TensorFlow graphs.\nConsider a slightly modified version of the example from #6189 . Assume each method pushes a scope for the instance (with the class name) and for the method.\nclass Foo(object):\n    def __init__(self):\n        self.x = tf.get_variable('x', [], initializer=tf.constant(0.0))\n\n    def meth(self, foo):\n        z = tf.multiply(foo, 3.14, name='z')\n        return self.x.assign(z)\n\n    def boom(self, foo):\n        return tf.multiple(2.0, self.meth(foo), name='baz')\n\nf0 = Foo()      # Foo/__init__/x\nf1 = Foo()      # Foo_1/__init__/x\nf0.meth(1.0)    # Foo/meth/*\nf0.boom(2.0)  # Foo/boom/baz, Foo/boom/Foo/meth/z\nI'd like the variables in boom's call to meth to be prefixed with only Foo/meth rather than Foo/boom/Foo/meth. This requires either releasing the variable scope within boom before calling out (hard) or providing a way for meth to clear the existing variable scope.", "body": "This is a follow-up of https://github.com/tensorflow/tensorflow/issues/6189\r\n\r\nIt would be nice to be able to create a variable or name scope that does not obey all currently open scopes.\r\n\r\nAs an example:\r\n```python\r\nwith tf.variable_scope('foo'):\r\n    with tf.variable_scope('bar'):\r\n        x = tf.constant(1.0, name='x')     # foo/bar/x\r\n\r\nwith tf.variable_scope('foo'):\r\n    with tf.variable_scope('bar', fresh=True):\r\n        x = tf.constant(1.0, name='x')    # bar/x\r\n```\r\n\r\nThis would be useful for using scopes with object oriented TensorFlow graphs.\r\n\r\nConsider a slightly modified version of the example from #6189 . Assume each method pushes a scope for the instance (with the class name) and for the method.\r\n```python\r\nclass Foo(object):\r\n    def __init__(self):\r\n        self.x = tf.get_variable('x', [], initializer=tf.constant(0.0))\r\n\r\n    def meth(self, foo):\r\n        z = tf.multiply(foo, 3.14, name='z')\r\n        return self.x.assign(z)\r\n\r\n    def boom(self, foo):\r\n        return tf.multiple(2.0, self.meth(foo), name='baz')\r\n\r\nf0 = Foo()      # Foo/__init__/x\r\nf1 = Foo()      # Foo_1/__init__/x\r\nf0.meth(1.0)    # Foo/meth/*\r\nf0.boom(2.0)  # Foo/boom/baz, Foo/boom/Foo/meth/z\r\n```\r\n\r\nI'd like the variables in ``boom``'s call to ``meth`` to be prefixed with only ``Foo/meth`` rather than ``Foo/boom/Foo/meth``. This requires either releasing the variable scope within boom before calling out (hard) or providing a way for ``meth`` to clear the existing variable scope. "}