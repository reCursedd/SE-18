{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/392185433", "html_url": "https://github.com/tensorflow/tensorflow/issues/17790#issuecomment-392185433", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17790", "id": 392185433, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjE4NTQzMw==", "user": {"login": "mbahaa", "id": 7549651, "node_id": "MDQ6VXNlcjc1NDk2NTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7549651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbahaa", "html_url": "https://github.com/mbahaa", "followers_url": "https://api.github.com/users/mbahaa/followers", "following_url": "https://api.github.com/users/mbahaa/following{/other_user}", "gists_url": "https://api.github.com/users/mbahaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbahaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbahaa/subscriptions", "organizations_url": "https://api.github.com/users/mbahaa/orgs", "repos_url": "https://api.github.com/users/mbahaa/repos", "events_url": "https://api.github.com/users/mbahaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mbahaa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-25T20:57:53Z", "updated_at": "2018-05-26T09:13:09Z", "author_association": "NONE", "body_html": "<p>Hello, I've been fiddling around this for a while, there's actually a clean method without commenting code lines or any ad-hoc solutions, for native building on ARM (I used Orange Pi PC Plus, ARMBIAN 5.38 stable Ubuntu 16.04.4 LTS 4.14.18-sunxi), build bazel version 0.11.1, then I checked out to the <a href=\"http://ci.tensorflow.org/view/Nightly/job/nightly-pi/238/\" rel=\"nofollow\">revision with latest successful nightly build</a>, luckily it's version 1.7.0, then you should pass one of the following macros while building (<strong>ARM_NON_MOBILE</strong> or <strong>RASPBERRY_PI</strong>), the building command becomes as follows:<br>\n<code>git checkout -f d82b2f71b60d5fff48884c20c7b85e517330e91f</code><br>\n<code>bazel build -c opt --copt=-DRASPBERRY_PI --copt=-mfpu=neon-vfpv4 --copt=-std=gnu11 --copt=-DS_IREAD=S_IRUSR --copt=-DS_IWRITE=S_IWUSR --copt=-O3 --config=monolithic --copt=-funsafe-math-optimizations --copt=-ftree-vectorize --copt=-fomit-frame-pointer --local_resources 400,2.0,1.0 --verbose_failures tensorflow/tools/pip_package:build_pip_package 2&gt;&amp;1 | tee ~/tf_nativebuild.log</code><br>\nI found the hint about the macros in this file <code>tensorflow/core/platform/platform.h</code></p>\n<blockquote>\n<p>// Require an outside macro to tell us if we're building for Raspberry Pi or<br>\n// another ARM device that's not a mobile platform.</p>\n</blockquote>\n<p>Another very convenient alternative is to use the cross-building script that tensorflow maintainers use for nightly ci builds, it's easier and also much faster, it creates a docker container, installs all required dependencies inside it, then cross-builds tensorflow for arm, you also need to checkout to the stable revision<br>\n<code>git checkout -f d82b2f71b60d5fff48884c20c7b85e517330e91f</code><br>\n<code>tensorflow/tools/ci_build/ci_build.sh PI tensorflow/tools/ci_build/pi/build_raspberry_pi.sh 2&gt;&amp;1 | tee ~/tf_crossbuild.log</code></p>", "body_text": "Hello, I've been fiddling around this for a while, there's actually a clean method without commenting code lines or any ad-hoc solutions, for native building on ARM (I used Orange Pi PC Plus, ARMBIAN 5.38 stable Ubuntu 16.04.4 LTS 4.14.18-sunxi), build bazel version 0.11.1, then I checked out to the revision with latest successful nightly build, luckily it's version 1.7.0, then you should pass one of the following macros while building (ARM_NON_MOBILE or RASPBERRY_PI), the building command becomes as follows:\ngit checkout -f d82b2f71b60d5fff48884c20c7b85e517330e91f\nbazel build -c opt --copt=-DRASPBERRY_PI --copt=-mfpu=neon-vfpv4 --copt=-std=gnu11 --copt=-DS_IREAD=S_IRUSR --copt=-DS_IWRITE=S_IWUSR --copt=-O3 --config=monolithic --copt=-funsafe-math-optimizations --copt=-ftree-vectorize --copt=-fomit-frame-pointer --local_resources 400,2.0,1.0 --verbose_failures tensorflow/tools/pip_package:build_pip_package 2>&1 | tee ~/tf_nativebuild.log\nI found the hint about the macros in this file tensorflow/core/platform/platform.h\n\n// Require an outside macro to tell us if we're building for Raspberry Pi or\n// another ARM device that's not a mobile platform.\n\nAnother very convenient alternative is to use the cross-building script that tensorflow maintainers use for nightly ci builds, it's easier and also much faster, it creates a docker container, installs all required dependencies inside it, then cross-builds tensorflow for arm, you also need to checkout to the stable revision\ngit checkout -f d82b2f71b60d5fff48884c20c7b85e517330e91f\ntensorflow/tools/ci_build/ci_build.sh PI tensorflow/tools/ci_build/pi/build_raspberry_pi.sh 2>&1 | tee ~/tf_crossbuild.log", "body": "Hello, I've been fiddling around this for a while, there's actually a clean method without commenting code lines or any ad-hoc solutions, for native building on ARM (I used Orange Pi PC Plus, ARMBIAN 5.38 stable Ubuntu 16.04.4 LTS 4.14.18-sunxi), build bazel version 0.11.1, then I checked out to the [revision with latest successful nightly build](http://ci.tensorflow.org/view/Nightly/job/nightly-pi/238/), luckily it's version 1.7.0, then you should pass one of the following macros while building (**ARM_NON_MOBILE** or **RASPBERRY_PI**), the building command becomes as follows:\r\n`git checkout -f d82b2f71b60d5fff48884c20c7b85e517330e91f`\r\n`bazel build -c opt --copt=-DRASPBERRY_PI --copt=-mfpu=neon-vfpv4 --copt=-std=gnu11 --copt=-DS_IREAD=S_IRUSR --copt=-DS_IWRITE=S_IWUSR --copt=-O3 --config=monolithic --copt=-funsafe-math-optimizations --copt=-ftree-vectorize --copt=-fomit-frame-pointer --local_resources 400,2.0,1.0 --verbose_failures tensorflow/tools/pip_package:build_pip_package 2>&1 | tee ~/tf_nativebuild.log`\r\nI found the hint about the macros in this file `tensorflow/core/platform/platform.h`\r\n> // Require an outside macro to tell us if we're building for Raspberry Pi or\r\n// another ARM device that's not a mobile platform.\r\n\r\nAnother very convenient alternative is to use the cross-building script that tensorflow maintainers use for nightly ci builds, it's easier and also much faster, it creates a docker container, installs all required dependencies inside it, then cross-builds tensorflow for arm, you also need to checkout to the stable revision\r\n`git checkout -f d82b2f71b60d5fff48884c20c7b85e517330e91f`\r\n`tensorflow/tools/ci_build/ci_build.sh PI tensorflow/tools/ci_build/pi/build_raspberry_pi.sh 2>&1 | tee ~/tf_crossbuild.log`"}