{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154007948", "pull_request_review_id": 80102987, "id": 154007948, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDAwNzk0OA==", "diff_hunk": "@@ -35,6 +35,28 @@ func hasOperations(g *Graph, ops ...string) error {\n \treturn fmt.Errorf(\"Graph does not have the operations %v\", missing)\n }\n \n+func hasOperationsList(g *Graph, ops ...string) error {", "path": "tensorflow/go/graph_test.go", "position": null, "original_position": 4, "commit_id": "5d52b95279be57076a794c2f334c150a26566360", "original_commit_id": "c4717d3ac7b29662fca34d9b7d0c0fb69ed2974d", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Might I suggest folding this into `hasOperations`?\r\n\r\nSo `hasOperations` would do what it's doing before this change, and then in the end will do:\r\n\r\n```go\r\nif len(missing) != 0 {\r\n  return fmt.Errorf(\"Graph does not have the operations %v\", missing)\r\n}\r\n\r\nvar map[string]bool inList;\r\nfor _, op := range g.Operations() {\r\n  inList[op.Name()] = true;\r\n}\r\n\r\nfor _, op := range ops {\r\n  if !inList[op] {\r\n    missing = append(missing, op)\r\n  }\r\n}\r\n\r\nif len(missing) != 0 {\r\n  return fmt.Errorf(\"Operations %v are missing from graph.Operations()\", missing)\r\n}\r\n\r\nreturn nil\r\n```\r\n\r\nI feel a few benefits of this are:\r\n(a) The ordering doesn't matter: In the PR right now, the list of ops provided to `hasOperationsList` has to match the order returned by `TF_GraphNextOperation`. There is no ordering guarantee there.\r\n\r\n(b) `hasOperations` then more comprehensively tests that the graph has the operations provided.", "created_at": "2017-11-30T08:15:44Z", "updated_at": "2017-11-30T17:19:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14991#discussion_r154007948", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14991", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154007948"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14991#discussion_r154007948"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14991"}}, "body_html": "<p>Might I suggest folding this into <code>hasOperations</code>?</p>\n<p>So <code>hasOperations</code> would do what it's doing before this change, and then in the end will do:</p>\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(missing) != <span class=\"pl-c1\">0</span> {\n  <span class=\"pl-k\">return</span> fmt.<span class=\"pl-c1\">Errorf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Graph does not have the operations <span class=\"pl-c1\">%v</span><span class=\"pl-pds\">\"</span></span>, missing)\n}\n\n<span class=\"pl-k\">var</span> <span class=\"pl-smi\">map</span>[<span class=\"pl-k\">string</span>]<span class=\"pl-k\">bool</span> inList;\n<span class=\"pl-k\">for</span> <span class=\"pl-smi\">_</span>, <span class=\"pl-smi\">op</span> <span class=\"pl-k\">:=</span> <span class=\"pl-k\">range</span> g.<span class=\"pl-c1\">Operations</span>() {\n  inList[op.<span class=\"pl-c1\">Name</span>()] = <span class=\"pl-c1\">true</span>;\n}\n\n<span class=\"pl-k\">for</span> <span class=\"pl-smi\">_</span>, <span class=\"pl-smi\">op</span> <span class=\"pl-k\">:=</span> <span class=\"pl-k\">range</span> ops {\n  <span class=\"pl-k\">if</span> !inList[op] {\n    missing = <span class=\"pl-c1\">append</span>(missing, op)\n  }\n}\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(missing) != <span class=\"pl-c1\">0</span> {\n  <span class=\"pl-k\">return</span> fmt.<span class=\"pl-c1\">Errorf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Operations <span class=\"pl-c1\">%v</span> are missing from graph.Operations()<span class=\"pl-pds\">\"</span></span>, missing)\n}\n\n<span class=\"pl-k\">return</span> <span class=\"pl-c1\">nil</span></pre></div>\n<p>I feel a few benefits of this are:<br>\n(a) The ordering doesn't matter: In the PR right now, the list of ops provided to <code>hasOperationsList</code> has to match the order returned by <code>TF_GraphNextOperation</code>. There is no ordering guarantee there.</p>\n<p>(b) <code>hasOperations</code> then more comprehensively tests that the graph has the operations provided.</p>", "body_text": "Might I suggest folding this into hasOperations?\nSo hasOperations would do what it's doing before this change, and then in the end will do:\nif len(missing) != 0 {\n  return fmt.Errorf(\"Graph does not have the operations %v\", missing)\n}\n\nvar map[string]bool inList;\nfor _, op := range g.Operations() {\n  inList[op.Name()] = true;\n}\n\nfor _, op := range ops {\n  if !inList[op] {\n    missing = append(missing, op)\n  }\n}\n\nif len(missing) != 0 {\n  return fmt.Errorf(\"Operations %v are missing from graph.Operations()\", missing)\n}\n\nreturn nil\nI feel a few benefits of this are:\n(a) The ordering doesn't matter: In the PR right now, the list of ops provided to hasOperationsList has to match the order returned by TF_GraphNextOperation. There is no ordering guarantee there.\n(b) hasOperations then more comprehensively tests that the graph has the operations provided."}