{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/372173512", "html_url": "https://github.com/tensorflow/tensorflow/issues/17501#issuecomment-372173512", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17501", "id": 372173512, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjE3MzUxMg==", "user": {"login": "ChiFang", "id": 16358320, "node_id": "MDQ6VXNlcjE2MzU4MzIw", "avatar_url": "https://avatars3.githubusercontent.com/u/16358320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChiFang", "html_url": "https://github.com/ChiFang", "followers_url": "https://api.github.com/users/ChiFang/followers", "following_url": "https://api.github.com/users/ChiFang/following{/other_user}", "gists_url": "https://api.github.com/users/ChiFang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChiFang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChiFang/subscriptions", "organizations_url": "https://api.github.com/users/ChiFang/orgs", "repos_url": "https://api.github.com/users/ChiFang/repos", "events_url": "https://api.github.com/users/ChiFang/events{/privacy}", "received_events_url": "https://api.github.com/users/ChiFang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-12T02:02:02Z", "updated_at": "2018-03-12T02:02:02Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=326106\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aselle\">@aselle</a><br>\nI write a sub function to convert as following:</p>\n<pre><code>def Save_lite(sess, input_tensors, net, pbName=\"TFLite_converted_model\", clear_devices = True):\n    print(\"----\")\n    print(net.name)\n    print(\"----\")\n    \n    output_node_names = net.name\n    output_node_names = output_node_names.split(\":\")\n    output_node_names = output_node_names[0]\n    input_graph_def = net.graph.as_graph_def()\n    \n    # Remove all the explicit device specifications for this node. This helps to\n    # make the graph more portable.\n    if clear_devices:\n        for node in input_graph_def.node:\n            node.device = \"\"\n    \n    \n    frozen_graphdef = graph_util.convert_variables_to_constants( \n        sess,\n        input_graph_def,\n        output_node_names.split(\",\")\n    )\n\n    output_graph_def = graph_util.remove_training_nodes(frozen_graphdef)\n    out_tensors = [net]\n    tflite_model = tf.contrib.lite.toco_convert(output_graph_def, [input_tensors], out_tensors)\n    open(pbName+\".tflite\", \"wb\").write(tflite_model)\n</code></pre>", "body_text": "Hi @aselle\nI write a sub function to convert as following:\ndef Save_lite(sess, input_tensors, net, pbName=\"TFLite_converted_model\", clear_devices = True):\n    print(\"----\")\n    print(net.name)\n    print(\"----\")\n    \n    output_node_names = net.name\n    output_node_names = output_node_names.split(\":\")\n    output_node_names = output_node_names[0]\n    input_graph_def = net.graph.as_graph_def()\n    \n    # Remove all the explicit device specifications for this node. This helps to\n    # make the graph more portable.\n    if clear_devices:\n        for node in input_graph_def.node:\n            node.device = \"\"\n    \n    \n    frozen_graphdef = graph_util.convert_variables_to_constants( \n        sess,\n        input_graph_def,\n        output_node_names.split(\",\")\n    )\n\n    output_graph_def = graph_util.remove_training_nodes(frozen_graphdef)\n    out_tensors = [net]\n    tflite_model = tf.contrib.lite.toco_convert(output_graph_def, [input_tensors], out_tensors)\n    open(pbName+\".tflite\", \"wb\").write(tflite_model)", "body": "Hi @aselle \r\nI write a sub function to convert as following:\r\n```\r\ndef Save_lite(sess, input_tensors, net, pbName=\"TFLite_converted_model\", clear_devices = True):\r\n    print(\"----\")\r\n    print(net.name)\r\n    print(\"----\")\r\n    \r\n    output_node_names = net.name\r\n    output_node_names = output_node_names.split(\":\")\r\n    output_node_names = output_node_names[0]\r\n    input_graph_def = net.graph.as_graph_def()\r\n    \r\n    # Remove all the explicit device specifications for this node. This helps to\r\n    # make the graph more portable.\r\n    if clear_devices:\r\n        for node in input_graph_def.node:\r\n            node.device = \"\"\r\n    \r\n    \r\n    frozen_graphdef = graph_util.convert_variables_to_constants( \r\n        sess,\r\n        input_graph_def,\r\n        output_node_names.split(\",\")\r\n    )\r\n\r\n    output_graph_def = graph_util.remove_training_nodes(frozen_graphdef)\r\n    out_tensors = [net]\r\n    tflite_model = tf.contrib.lite.toco_convert(output_graph_def, [input_tensors], out_tensors)\r\n    open(pbName+\".tflite\", \"wb\").write(tflite_model)\r\n```"}