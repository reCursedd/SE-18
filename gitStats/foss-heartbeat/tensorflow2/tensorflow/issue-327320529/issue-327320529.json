{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19621", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19621/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19621/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19621/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19621", "id": 327320529, "node_id": "MDU6SXNzdWUzMjczMjA1Mjk=", "number": 19621, "title": "[Bug] AdamOptimizer: No Exception on invalid input", "user": {"login": "mBHyuC", "id": 32447738, "node_id": "MDQ6VXNlcjMyNDQ3NzM4", "avatar_url": "https://avatars3.githubusercontent.com/u/32447738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mBHyuC", "html_url": "https://github.com/mBHyuC", "followers_url": "https://api.github.com/users/mBHyuC/followers", "following_url": "https://api.github.com/users/mBHyuC/following{/other_user}", "gists_url": "https://api.github.com/users/mBHyuC/gists{/gist_id}", "starred_url": "https://api.github.com/users/mBHyuC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mBHyuC/subscriptions", "organizations_url": "https://api.github.com/users/mBHyuC/orgs", "repos_url": "https://api.github.com/users/mBHyuC/repos", "events_url": "https://api.github.com/users/mBHyuC/events{/privacy}", "received_events_url": "https://api.github.com/users/mBHyuC/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-29T13:27:23Z", "updated_at": "2018-07-14T11:41:30Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.8.0-0-g93bc2e2072</li>\n<li><strong>Python version</strong>: 3.6.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0/7.0</li>\n<li><strong>GPU model and memory</strong>: 4G/Quadro M1000M</li>\n<li><strong>Exact command to reproduce</strong>: -</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The graph can be executed with AdamOptimizer, thus the graph input is invalid. In the example an out-of-bound embedding  index is passed. Other tested optimizer (RMSP,Ada) yield: InvalidArgumentError: indices[0,0] = 10 is not in [0, 10)</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">embed_helper</span>(<span class=\"pl-smi\">inputs</span>, <span class=\"pl-smi\">size</span>, <span class=\"pl-smi\">dim</span>, <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n    std <span class=\"pl-k\">=</span> np.square(<span class=\"pl-c1\">2</span>. <span class=\"pl-k\">/</span> dim)\n    test_emb <span class=\"pl-k\">=</span> tf.Variable(tf.random_uniform([size, dim], <span class=\"pl-k\">-</span>std, std), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name)\n    <span class=\"pl-k\">return</span> tf.nn.embedding_lookup(test_emb, inputs)\n\nnum_factors <span class=\"pl-k\">=</span> <span class=\"pl-c1\">16</span>\nnum_embed <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n\ngraph <span class=\"pl-k\">=</span> tf.Graph()\n<span class=\"pl-k\">with</span> graph.as_default():\n    x <span class=\"pl-k\">=</span> tf.placeholder(tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>))\n    x_emb <span class=\"pl-k\">=</span> embed_helper(x, num_embed, num_factors, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>)\n    very_complicated_net <span class=\"pl-k\">=</span> tf.square(tf.subtract(x_emb, tf.constant(<span class=\"pl-c1\">3</span>.)))\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> RMSP and the other tested optimizer yield InvalidArgumentError - AdamOptimizer does not</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> -&gt; InvalidArgumentError (see above for traceback): indices[0,0] = 10 is not in [0, 10)</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>opt = tf.train.RMSPropOptimizer(learning_rate=0.01)</span>\n    opt <span class=\"pl-k\">=</span> tf.train.AdamOptimizer(<span class=\"pl-v\">learning_rate</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.01</span>)\n\n    graph_step <span class=\"pl-k\">=</span> opt.minimize(very_complicated_net)\n    init <span class=\"pl-k\">=</span> tf.global_variables_initializer()\n\nsession <span class=\"pl-k\">=</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>graph)\nsession.run(init)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 10 is not in [0,1,..,9]</span>\nindex_batch_out_of_bound <span class=\"pl-k\">=</span> np.array([<span class=\"pl-c1\">10</span>]).reshape(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)\n\nx_feed_dict <span class=\"pl-k\">=</span> {\n    x: index_batch_out_of_bound\n}\n\nsession.run(graph_step, x_feed_dict)</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.8.0-0-g93bc2e2072\nPython version: 3.6.3\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: 9.0/7.0\nGPU model and memory: 4G/Quadro M1000M\nExact command to reproduce: -\n\nDescribe the problem\nThe graph can be executed with AdamOptimizer, thus the graph input is invalid. In the example an out-of-bound embedding  index is passed. Other tested optimizer (RMSP,Ada) yield: InvalidArgumentError: indices[0,0] = 10 is not in [0, 10)\nSource code / logs\nimport tensorflow as tf\nimport numpy as np\n\ndef embed_helper(inputs, size, dim, name=None):\n    std = np.square(2. / dim)\n    test_emb = tf.Variable(tf.random_uniform([size, dim], -std, std), name=name)\n    return tf.nn.embedding_lookup(test_emb, inputs)\n\nnum_factors = 16\nnum_embed = 10\n\ngraph = tf.Graph()\nwith graph.as_default():\n    x = tf.placeholder(tf.int32, shape=(None, 1))\n    x_emb = embed_helper(x, num_embed, num_factors, name=None)\n    very_complicated_net = tf.square(tf.subtract(x_emb, tf.constant(3.)))\n\n    # RMSP and the other tested optimizer yield InvalidArgumentError - AdamOptimizer does not\n    # -> InvalidArgumentError (see above for traceback): indices[0,0] = 10 is not in [0, 10)\n    #opt = tf.train.RMSPropOptimizer(learning_rate=0.01)\n    opt = tf.train.AdamOptimizer(learning_rate=0.01)\n\n    graph_step = opt.minimize(very_complicated_net)\n    init = tf.global_variables_initializer()\n\nsession = tf.Session(config=None, graph=graph)\nsession.run(init)\n\n# 10 is not in [0,1,..,9]\nindex_batch_out_of_bound = np.array([10]).reshape(-1, 1)\n\nx_feed_dict = {\n    x: index_batch_out_of_bound\n}\n\nsession.run(graph_step, x_feed_dict)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.8.0-0-g93bc2e2072\r\n- **Python version**: 3.6.3\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: 9.0/7.0\r\n- **GPU model and memory**: 4G/Quadro M1000M\r\n- **Exact command to reproduce**: -\r\n\r\n\r\n### Describe the problem\r\nThe graph can be executed with AdamOptimizer, thus the graph input is invalid. In the example an out-of-bound embedding  index is passed. Other tested optimizer (RMSP,Ada) yield: InvalidArgumentError: indices[0,0] = 10 is not in [0, 10)\r\n\r\n### Source code / logs\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndef embed_helper(inputs, size, dim, name=None):\r\n    std = np.square(2. / dim)\r\n    test_emb = tf.Variable(tf.random_uniform([size, dim], -std, std), name=name)\r\n    return tf.nn.embedding_lookup(test_emb, inputs)\r\n\r\nnum_factors = 16\r\nnum_embed = 10\r\n\r\ngraph = tf.Graph()\r\nwith graph.as_default():\r\n    x = tf.placeholder(tf.int32, shape=(None, 1))\r\n    x_emb = embed_helper(x, num_embed, num_factors, name=None)\r\n    very_complicated_net = tf.square(tf.subtract(x_emb, tf.constant(3.)))\r\n\r\n    # RMSP and the other tested optimizer yield InvalidArgumentError - AdamOptimizer does not\r\n    # -> InvalidArgumentError (see above for traceback): indices[0,0] = 10 is not in [0, 10)\r\n    #opt = tf.train.RMSPropOptimizer(learning_rate=0.01)\r\n    opt = tf.train.AdamOptimizer(learning_rate=0.01)\r\n\r\n    graph_step = opt.minimize(very_complicated_net)\r\n    init = tf.global_variables_initializer()\r\n\r\nsession = tf.Session(config=None, graph=graph)\r\nsession.run(init)\r\n\r\n# 10 is not in [0,1,..,9]\r\nindex_batch_out_of_bound = np.array([10]).reshape(-1, 1)\r\n\r\nx_feed_dict = {\r\n    x: index_batch_out_of_bound\r\n}\r\n\r\nsession.run(graph_step, x_feed_dict)\r\n```\r\n"}