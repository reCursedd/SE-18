{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/396829561", "html_url": "https://github.com/tensorflow/tensorflow/issues/19621#issuecomment-396829561", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19621", "id": 396829561, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjgyOTU2MQ==", "user": {"login": "HannH", "id": 18132006, "node_id": "MDQ6VXNlcjE4MTMyMDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/18132006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HannH", "html_url": "https://github.com/HannH", "followers_url": "https://api.github.com/users/HannH/followers", "following_url": "https://api.github.com/users/HannH/following{/other_user}", "gists_url": "https://api.github.com/users/HannH/gists{/gist_id}", "starred_url": "https://api.github.com/users/HannH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HannH/subscriptions", "organizations_url": "https://api.github.com/users/HannH/orgs", "repos_url": "https://api.github.com/users/HannH/repos", "events_url": "https://api.github.com/users/HannH/events{/privacy}", "received_events_url": "https://api.github.com/users/HannH/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-13T06:35:10Z", "updated_at": "2018-06-13T06:37:06Z", "author_association": "NONE", "body_html": "<p>I am working on this bug, found it happend after adding RMS optimizer: \"RMSProp/update_Variable/SparseApplyRMSProp/xx\"<br>\nin the graph, the embedding operator then was bound to CPU though it has been bound to GPU.<br>\nbefore add rms:<br>\nembedding_lookup: (Gather): /job:localhost/replica:0/task:0/device:GPU:0<br>\nafter add rms:<br>\nembedding_lookup: (Gather): /job:localhost/replica:0/task:0/device:CPU:0<br>\nAccording to the official <a href=\"https://www.tensorflow.org/api_docs/python/tf/nn/embedding_lookup\" rel=\"nofollow\">document</a>, it will <strong>definitely</strong> raise out of boundary error when you run it on CPU rather than GPU.<br>\nIt is a weird problem, but compulsive bind the operation into GPU may solve the problem. Any idea how to do this? <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a><br>\nCode place :python/framework/ops.py line 3210:\"self._add_op(op)\"</p>", "body_text": "I am working on this bug, found it happend after adding RMS optimizer: \"RMSProp/update_Variable/SparseApplyRMSProp/xx\"\nin the graph, the embedding operator then was bound to CPU though it has been bound to GPU.\nbefore add rms:\nembedding_lookup: (Gather): /job:localhost/replica:0/task:0/device:GPU:0\nafter add rms:\nembedding_lookup: (Gather): /job:localhost/replica:0/task:0/device:CPU:0\nAccording to the official document, it will definitely raise out of boundary error when you run it on CPU rather than GPU.\nIt is a weird problem, but compulsive bind the operation into GPU may solve the problem. Any idea how to do this? @drpngx\nCode place :python/framework/ops.py line 3210:\"self._add_op(op)\"", "body": "I am working on this bug, found it happend after adding RMS optimizer: \"RMSProp/update_Variable/SparseApplyRMSProp/xx\"\r\nin the graph, the embedding operator then was bound to CPU though it has been bound to GPU.\r\nbefore add rms:\r\nembedding_lookup: (Gather): /job:localhost/replica:0/task:0/device:GPU:0\r\nafter add rms:\r\nembedding_lookup: (Gather): /job:localhost/replica:0/task:0/device:CPU:0\r\nAccording to the official [document](https://www.tensorflow.org/api_docs/python/tf/nn/embedding_lookup), it will **definitely** raise out of boundary error when you run it on CPU rather than GPU.\r\nIt is a weird problem, but compulsive bind the operation into GPU may solve the problem. Any idea how to do this? @drpngx \r\nCode place :python/framework/ops.py line 3210:\"self._add_op(op)\"\r\n\r\n"}