{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/351759257", "html_url": "https://github.com/tensorflow/tensorflow/issues/15290#issuecomment-351759257", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15290", "id": 351759257, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTc1OTI1Nw==", "user": {"login": "unitive-jim", "id": 16088032, "node_id": "MDQ6VXNlcjE2MDg4MDMy", "avatar_url": "https://avatars3.githubusercontent.com/u/16088032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unitive-jim", "html_url": "https://github.com/unitive-jim", "followers_url": "https://api.github.com/users/unitive-jim/followers", "following_url": "https://api.github.com/users/unitive-jim/following{/other_user}", "gists_url": "https://api.github.com/users/unitive-jim/gists{/gist_id}", "starred_url": "https://api.github.com/users/unitive-jim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unitive-jim/subscriptions", "organizations_url": "https://api.github.com/users/unitive-jim/orgs", "repos_url": "https://api.github.com/users/unitive-jim/repos", "events_url": "https://api.github.com/users/unitive-jim/events{/privacy}", "received_events_url": "https://api.github.com/users/unitive-jim/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-14T16:19:47Z", "updated_at": "2017-12-14T16:19:47Z", "author_association": "NONE", "body_html": "<p>Yes, I have gone through all of the steps to build and install the python components into <code>site-packages</code> from source. I've also used <code>bazel</code> to build <code>libtensorflow_cc.so</code>. But there are still several other manual steps required to arrange for all of the necessary C++ headers to be installed in such a way that C++ applications can compile independently of the tensorflow repository.</p>\n<p>In my search for the best way to do this, the best resource I have found is on stackoverflow:<br>\n<a href=\"https://stackoverflow.com/questions/33620794/how-to-build-and-use-google-tensorflow-c-api\" rel=\"nofollow\">https://stackoverflow.com/questions/33620794/how-to-build-and-use-google-tensorflow-c-api</a></p>\n<p>That question is two years old(!!) and none of the answers are (IMHO) satisfactory. The answer that comes closest is <a href=\"https://stackoverflow.com/a/43920376/376518\" rel=\"nofollow\">this one</a>. But the steps as shown there did not work for me, possibly due to changes to tensorflow between the time the answer was written and the current r1.4 release. I have been able modify the steps to make something that does work, but it is really unacceptable for the Tensorflow team to expect every developer to discover on their own how to do this. There really should be something like the standard unix recipe: <code>.configure; make cc-installer; sudo install-cc.sh;</code>. With <code>bazel</code>, the steps might look like this:</p>\n<ol>\n<li><code>./configure</code>      # a new question is added: \"Do you want to build for C++ development?\"</li>\n<li><code>bazel build --config=opt --config=cuda //tensorflow/tools/cc_package:build_cc_package</code></li>\n<li><code>sudo install-cc-package.sh</code></li>\n</ol>\n<p>The result from the above steps would be the installation of a directory at the default path <code>/usr/local/include/tf</code>, but the actual path should be an option provided during the <code>./configure</code> step. The <code>tf</code> directory should contain all of the headers necessary for C++ development. It would a superset of all of the headers currently installed into <code>../site-packages/tensforflow/include</code>, but following the same directory organization. The installer script would also install <code>libtensorflow_cc.so</code> and <code>libtensorflow_framework.so</code> into <code>/usr/local/lib</code> or some other location chosen during the <code>./configure</code> step.</p>\n<p>Let me be clear: I personally am not blocked, as I now have a working configuration on both my Mac and Linux development machines. But other developers (and me sometime in the future) will need to do this, and it seems bizarre that the Tensorflow team does not have a documented and easy to follow process that all developers who need C++ development can follow, and will continue to work with each new tensorflow release. I could document what I do, possibly on the above stackoverflow thread, but the Tensorflow community is not served well by that hack.</p>", "body_text": "Yes, I have gone through all of the steps to build and install the python components into site-packages from source. I've also used bazel to build libtensorflow_cc.so. But there are still several other manual steps required to arrange for all of the necessary C++ headers to be installed in such a way that C++ applications can compile independently of the tensorflow repository.\nIn my search for the best way to do this, the best resource I have found is on stackoverflow:\nhttps://stackoverflow.com/questions/33620794/how-to-build-and-use-google-tensorflow-c-api\nThat question is two years old(!!) and none of the answers are (IMHO) satisfactory. The answer that comes closest is this one. But the steps as shown there did not work for me, possibly due to changes to tensorflow between the time the answer was written and the current r1.4 release. I have been able modify the steps to make something that does work, but it is really unacceptable for the Tensorflow team to expect every developer to discover on their own how to do this. There really should be something like the standard unix recipe: .configure; make cc-installer; sudo install-cc.sh;. With bazel, the steps might look like this:\n\n./configure      # a new question is added: \"Do you want to build for C++ development?\"\nbazel build --config=opt --config=cuda //tensorflow/tools/cc_package:build_cc_package\nsudo install-cc-package.sh\n\nThe result from the above steps would be the installation of a directory at the default path /usr/local/include/tf, but the actual path should be an option provided during the ./configure step. The tf directory should contain all of the headers necessary for C++ development. It would a superset of all of the headers currently installed into ../site-packages/tensforflow/include, but following the same directory organization. The installer script would also install libtensorflow_cc.so and libtensorflow_framework.so into /usr/local/lib or some other location chosen during the ./configure step.\nLet me be clear: I personally am not blocked, as I now have a working configuration on both my Mac and Linux development machines. But other developers (and me sometime in the future) will need to do this, and it seems bizarre that the Tensorflow team does not have a documented and easy to follow process that all developers who need C++ development can follow, and will continue to work with each new tensorflow release. I could document what I do, possibly on the above stackoverflow thread, but the Tensorflow community is not served well by that hack.", "body": "Yes, I have gone through all of the steps to build and install the python components into `site-packages` from source. I've also used `bazel` to build `libtensorflow_cc.so`. But there are still several other manual steps required to arrange for all of the necessary C++ headers to be installed in such a way that C++ applications can compile independently of the tensorflow repository.\r\n\r\nIn my search for the best way to do this, the best resource I have found is on stackoverflow: \r\nhttps://stackoverflow.com/questions/33620794/how-to-build-and-use-google-tensorflow-c-api\r\n\r\nThat question is two years old(!!) and none of the answers are (IMHO) satisfactory. The answer that comes closest is [this one](https://stackoverflow.com/a/43920376/376518). But the steps as shown there did not work for me, possibly due to changes to tensorflow between the time the answer was written and the current r1.4 release. I have been able modify the steps to make something that does work, but it is really unacceptable for the Tensorflow team to expect every developer to discover on their own how to do this. There really should be something like the standard unix recipe: `.configure; make cc-installer; sudo install-cc.sh;`. With `bazel`, the steps might look like this:\r\n\r\n1. `./configure`      # a new question is added: \"Do you want to build for C++ development?\"\r\n2. `bazel build --config=opt --config=cuda //tensorflow/tools/cc_package:build_cc_package`\r\n3. `sudo install-cc-package.sh`\r\n\r\nThe result from the above steps would be the installation of a directory at the default path `/usr/local/include/tf`, but the actual path should be an option provided during the `./configure` step. The `tf` directory should contain all of the headers necessary for C++ development. It would a superset of all of the headers currently installed into `../site-packages/tensforflow/include`, but following the same directory organization. The installer script would also install `libtensorflow_cc.so` and `libtensorflow_framework.so` into `/usr/local/lib` or some other location chosen during the `./configure` step.\r\n\r\nLet me be clear: I personally am not blocked, as I now have a working configuration on both my Mac and Linux development machines. But other developers (and me sometime in the future) will need to do this, and it seems bizarre that the Tensorflow team does not have a documented and easy to follow process that all developers who need C++ development can follow, and will continue to work with each new tensorflow release. I could document what I do, possibly on the above stackoverflow thread, but the Tensorflow community is not served well by that hack. "}