{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95071078", "pull_request_review_id": 15597658, "id": 95071078, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDcxMDc4", "diff_hunk": "@@ -317,7 +433,15 @@ private void throwExceptionIfTypeIsIncompatible(Object o) {\n     }\n   }\n \n-  private static native long allocate(int dtype, long[] shape);\n+  private static ByteBuffer getBuffer(long nativeHandle) {\n+    return buffer(nativeHandle).order(ByteOrder.nativeOrder());\n+  }\n+\n+  private static native ByteBuffer buffer(long handle);\n+\n+  private static native long allocate(int dtype, long[] shape, long sizeInBytes);", "path": "tensorflow/java/src/main/java/org/tensorflow/Tensor.java", "position": null, "original_position": 150, "commit_id": "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894", "original_commit_id": "1a2994b397a9697cefb31da4939e16415694a529", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I'm a bit confused about `allocate` and `allocateNDArray`. IIUC, for all but non-scalar `TF_STRING` tensors, `sizeInBytes` has to be consistent with `dtype` and `shape`, right?  For example, the following should be problematic because the buffer has only 1 float, but the shape is for a 2x3 matrix:\r\n\r\n```java\r\n\r\nFloatBuffer buf = new FloatBuffer();\r\nbuf.put(1.0f);\r\n\r\nTensor t = Tensor.create(DataType.Float, new long[]{2, 3}, buf);\r\n```\r\n\r\nIf so, perhaps it's clearer to have:\r\n```java\r\n// Allocate a tensor for all but the TF_STRING types\r\nprivate static native long allocate(int dtype, long[] shape);\r\n\r\n// Allocate method for TF_STRING tensors\r\nprivate static native allocateForStrings(long[] shape, long sizeInBytes);\r\n```\r\n", "created_at": "2017-01-08T03:48:33Z", "updated_at": "2017-01-29T23:34:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r95071078", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95071078"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r95071078"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577"}}, "body_html": "<p>I'm a bit confused about <code>allocate</code> and <code>allocateNDArray</code>. IIUC, for all but non-scalar <code>TF_STRING</code> tensors, <code>sizeInBytes</code> has to be consistent with <code>dtype</code> and <code>shape</code>, right?  For example, the following should be problematic because the buffer has only 1 float, but the shape is for a 2x3 matrix:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-smi\">FloatBuffer</span> buf <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FloatBuffer</span>();\nbuf<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">1.0f</span>);\n\n<span class=\"pl-smi\">Tensor</span> t <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Tensor</span><span class=\"pl-k\">.</span>create(<span class=\"pl-smi\">DataType</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">Float</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">long</span>[]{<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>}, buf);</pre></div>\n<p>If so, perhaps it's clearer to have:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Allocate a tensor for all but the TF_STRING types</span>\n<span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">native</span> <span class=\"pl-k\">long</span> allocate(<span class=\"pl-k\">int</span> dtype, <span class=\"pl-k\">long</span>[] shape);\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Allocate method for TF_STRING tensors</span>\n<span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">native</span> allocateForStrings(<span class=\"pl-k\">long</span>[] shape, <span class=\"pl-k\">long</span> sizeInBytes);</pre></div>", "body_text": "I'm a bit confused about allocate and allocateNDArray. IIUC, for all but non-scalar TF_STRING tensors, sizeInBytes has to be consistent with dtype and shape, right?  For example, the following should be problematic because the buffer has only 1 float, but the shape is for a 2x3 matrix:\nFloatBuffer buf = new FloatBuffer();\nbuf.put(1.0f);\n\nTensor t = Tensor.create(DataType.Float, new long[]{2, 3}, buf);\nIf so, perhaps it's clearer to have:\n// Allocate a tensor for all but the TF_STRING types\nprivate static native long allocate(int dtype, long[] shape);\n\n// Allocate method for TF_STRING tensors\nprivate static native allocateForStrings(long[] shape, long sizeInBytes);"}