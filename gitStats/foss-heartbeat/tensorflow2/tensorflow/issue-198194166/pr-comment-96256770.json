{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/96256770", "pull_request_review_id": 16722212, "id": 96256770, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MjU2Nzcw", "diff_hunk": "@@ -24,23 +24,278 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n+import java.nio.*;\n+\n /** Unit tests for {@link org.tensorflow.Tensor}. */\n @RunWith(JUnit4.class)\n public class TensorTest {\n+  private static final double EPSILON = 1e-7;\n+  private static final float EPSILON_F = 1e-7f;\n+\n+  @Test\n+  @SuppressWarnings(\"unused\")\n+  public void createWithBuffer() {\n+    int[] ints = {1, 2, 3, 4};\n+    float[] floats = {1f, 2f, 3f, 4f};\n+    double[] doubles = {1d, 2d, 3d, 4d};\n+    long[] longs = {1L, 2L, 3L, 4L};\n+    boolean[] bools = {true, false, true, false};\n+    long[] shape = {4};\n+\n+    // validate creating a tensor using a direct byte buffer (in host order)\n+    {\n+      ByteBuffer buf = ByteBuffer.allocateDirect(Double.SIZE / Byte.SIZE * doubles.length).order(ByteOrder.nativeOrder());\n+      buf.asDoubleBuffer().put(doubles);\n+      try(Tensor t = Tensor.create(DataType.DOUBLE, shape, buf)) {\n+        double[] actual = new double[doubles.length];\n+        assertArrayEquals(doubles, t.copyTo(actual), EPSILON);\n+      }\n+    }\n+\n+    // validate byte order conversion\n+    {\n+      DoubleBuffer buf = ByteBuffer.allocate(Double.SIZE / Byte.SIZE * doubles.length)\n+          .order(ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN)\n+          .asDoubleBuffer()\n+          .put(doubles);\n+      buf.flip();\n+      try(Tensor t = Tensor.create(DataType.DOUBLE, shape, buf)) {\n+        double[] actual = new double[doubles.length];\n+        assertArrayEquals(doubles, t.copyTo(actual), EPSILON);\n+      }\n+    }\n+\n+    // validate creating a tensor using a typed buffer\n+    {\n+      try(Tensor t = Tensor.create(DataType.DOUBLE, shape, DoubleBuffer.wrap(doubles))) {\n+        double[] actual = new double[doubles.length];\n+        assertArrayEquals(doubles, t.copyTo(actual), EPSILON);\n+      }\n+      try(Tensor t = Tensor.create(DataType.FLOAT, shape, FloatBuffer.wrap(floats))) {\n+        float[] actual = new float[floats.length];\n+        assertArrayEquals(floats, t.copyTo(actual), EPSILON_F);\n+      }\n+      try(Tensor t = Tensor.create(DataType.INT32, shape, IntBuffer.wrap(ints))) {\n+        int[] actual = new int[ints.length];\n+        assertArrayEquals(ints, t.copyTo(actual));\n+      }\n+      try(Tensor t = Tensor.create(DataType.INT64, shape, LongBuffer.wrap(longs))) {\n+        long[] actual = new long[longs.length];\n+        assertArrayEquals(longs, t.copyTo(actual));\n+      }\n+      byte[] bools_ = TestUtil.bool2byte(bools);\n+      try(Tensor t = Tensor.create(DataType.BOOL, shape, ByteBuffer.wrap(bools_))) {\n+        boolean[] actual = new boolean[bools_.length];\n+        assertEquals(bools[0], t.copyTo(actual)[0]);\n+      }\n+    }\n+\n+    // validate shape-checking\n+    {\n+      long[] badshape = {100};\n+      try(Tensor t = Tensor.create(DataType.DOUBLE, badshape, DoubleBuffer.wrap(doubles))) {\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+        // expected\n+      }\n+      try(Tensor t = Tensor.create(DataType.FLOAT, badshape, FloatBuffer.wrap(floats))) {\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+        // expected\n+      }\n+      try(Tensor t = Tensor.create(DataType.INT32, badshape, IntBuffer.wrap(ints))) {\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+        // expected\n+      }\n+      try(Tensor t = Tensor.create(DataType.INT64, badshape, LongBuffer.wrap(longs))) {\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+        // expected\n+      }\n+      byte[] bools_ = TestUtil.bool2byte(bools);\n+      try(Tensor t = Tensor.create(DataType.BOOL, badshape, ByteBuffer.wrap(bools_))) {\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+        // expected\n+      }\n+    }\n+\n+    // validate datatype-checking\n+    {\n+      try(Tensor t = Tensor.create(DataType.BOOL, shape, DoubleBuffer.wrap(doubles))) {\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+        // expected\n+      }\n+      try(Tensor t = Tensor.create(DataType.BOOL, shape, FloatBuffer.wrap(floats))) {\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+        // expected\n+      }\n+      try(Tensor t = Tensor.create(DataType.BOOL, shape, IntBuffer.wrap(ints))) {\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+        // expected\n+      }\n+      try(Tensor t = Tensor.create(DataType.BOOL, shape, LongBuffer.wrap(longs))) {\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+        // expected\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void writeTo() {", "path": "tensorflow/java/src/test/java/org/tensorflow/TensorTest.java", "position": 131, "original_position": 136, "commit_id": "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894", "original_commit_id": "abd9ce79cbe970877cb0e254459d8ee3b76fdf74", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "If possible, I'd suggest breaking this test too into one per type.", "created_at": "2017-01-16T15:50:41Z", "updated_at": "2017-01-29T23:34:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r96256770", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/96256770"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r96256770"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577"}}, "body_html": "<p>If possible, I'd suggest breaking this test too into one per type.</p>", "body_text": "If possible, I'd suggest breaking this test too into one per type."}