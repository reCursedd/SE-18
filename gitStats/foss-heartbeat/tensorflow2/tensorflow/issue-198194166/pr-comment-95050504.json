{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95050504", "pull_request_review_id": 15597658, "id": 95050504, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDUwNTA0", "diff_hunk": "@@ -34,6 +41,115 @@\n  * }</pre>\n  */\n public final class Tensor implements AutoCloseable {\n+\n+  /**\n+   * Create a Tensor with data from the given buffer.\n+   *\n+   * <p>Provide a {@link ByteBuffer} to create a Tensor of any datatype.  Note that primitive\n+   * data must be in native byte order. Provide a {@link FloatBuffer}, {@link IntBuffer}, {@link DoubleBuffer},\n+   * or {@link LongBuffer} to create a Tensor with a datatype of {@code FLOAT}, {@code INT32}, {@code DOUBLE},\n+   * or {@code INT64} respectively.\n+   *\n+   * <p> This method copies\n+   * <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> elements from the given\n+   * buffer into the tensor, starting at the buffer's current position.\n+   * The position of the buffer is then incremented by <i>n</i>.\n+   *\n+   * @param dataType the tensor datatype.\n+   * @param shape the tensor shape.\n+   * @param data a buffer containing the tensor data.\n+   */\n+  public static Tensor create(DataType dataType, long[] shape, Buffer data) {", "path": "tensorflow/java/src/main/java/org/tensorflow/Tensor.java", "position": null, "original_position": 36, "commit_id": "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894", "original_commit_id": "1a2994b397a9697cefb31da4939e16415694a529", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I'm a bit weary of all these `instanceof` checks and the multitude of ways inconsistent arguments can be provided (and the consequent need for `throwIncompatibleBuffer()`).\r\n\r\nInstead I think we should do one of the following, either:\r\n\r\n- Only support `ByteBuffer`: `create(DataType dataType, long[] shape, ByteBuffer data)`. Callers can use `asFloatBuffer()` etc. for convenience when filling the buffer in, OR\r\n- Provide overloads that do away with the `DataType` argument, so we end up with:\r\n```java\r\npublic static Tensor create(long[] shape, FloatBuffer buf);\r\npublic static Tensor create(long[] shape, IntBuffer buf);\r\n// others, though ByteBuffer still needs DataType\r\npublic static Tensor create(DataType dataType, long[] shape, ByteBuffer data);\r\n```\r\n\r\nBy doing away with the possibility of runtime exceptions from inconsistent arguments, I think the API ends up cleaner. Of the two options above, I'm leaning towards the former (a single `create(DataType, long[], ByteBuffer)`) for now. If it turns out to be inconvenient (which I'm skeptical of), we can always add the other overloads later.", "created_at": "2017-01-07T02:52:46Z", "updated_at": "2017-01-29T23:34:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r95050504", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95050504"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r95050504"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577"}}, "body_html": "<p>I'm a bit weary of all these <code>instanceof</code> checks and the multitude of ways inconsistent arguments can be provided (and the consequent need for <code>throwIncompatibleBuffer()</code>).</p>\n<p>Instead I think we should do one of the following, either:</p>\n<ul>\n<li>Only support <code>ByteBuffer</code>: <code>create(DataType dataType, long[] shape, ByteBuffer data)</code>. Callers can use <code>asFloatBuffer()</code> etc. for convenience when filling the buffer in, OR</li>\n<li>Provide overloads that do away with the <code>DataType</code> argument, so we end up with:</li>\n</ul>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Tensor</span> create(<span class=\"pl-k\">long</span>[] shape, <span class=\"pl-smi\">FloatBuffer</span> buf);\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Tensor</span> create(<span class=\"pl-k\">long</span>[] shape, <span class=\"pl-smi\">IntBuffer</span> buf);\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> others, though ByteBuffer still needs DataType</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Tensor</span> create(<span class=\"pl-smi\">DataType</span> dataType, <span class=\"pl-k\">long</span>[] shape, <span class=\"pl-smi\">ByteBuffer</span> data);</pre></div>\n<p>By doing away with the possibility of runtime exceptions from inconsistent arguments, I think the API ends up cleaner. Of the two options above, I'm leaning towards the former (a single <code>create(DataType, long[], ByteBuffer)</code>) for now. If it turns out to be inconvenient (which I'm skeptical of), we can always add the other overloads later.</p>", "body_text": "I'm a bit weary of all these instanceof checks and the multitude of ways inconsistent arguments can be provided (and the consequent need for throwIncompatibleBuffer()).\nInstead I think we should do one of the following, either:\n\nOnly support ByteBuffer: create(DataType dataType, long[] shape, ByteBuffer data). Callers can use asFloatBuffer() etc. for convenience when filling the buffer in, OR\nProvide overloads that do away with the DataType argument, so we end up with:\n\npublic static Tensor create(long[] shape, FloatBuffer buf);\npublic static Tensor create(long[] shape, IntBuffer buf);\n// others, though ByteBuffer still needs DataType\npublic static Tensor create(DataType dataType, long[] shape, ByteBuffer data);\nBy doing away with the possibility of runtime exceptions from inconsistent arguments, I think the API ends up cleaner. Of the two options above, I'm leaning towards the former (a single create(DataType, long[], ByteBuffer)) for now. If it turns out to be inconvenient (which I'm skeptical of), we can always add the other overloads later."}