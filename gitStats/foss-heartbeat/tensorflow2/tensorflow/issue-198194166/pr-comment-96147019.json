{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/96147019", "pull_request_review_id": 16722212, "id": 96147019, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTQ3MDE5", "diff_hunk": "@@ -34,6 +41,352 @@\n  * }</pre>\n  */\n public final class Tensor implements AutoCloseable {\n+\n+  /**\n+   * Create a Tensor with data from the given buffer.\n+   *\n+   * <p>Supports the following datatypes: {@link DataType#INT32}\n+   *\n+   * <p>This method copies\n+   * <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> elements from the given\n+   * buffer into the tensor, starting at the buffer's current position.\n+   * The position of the buffer is then incremented by <i>n</i>.\n+   *\n+   * @param dataType the tensor datatype.\n+   * @param shape the tensor shape.\n+   * @param data a buffer containing the tensor data.\n+   *\n+   * @throws  IllegalArgumentException\n+   *          If the tensor datatype or shape is not compatible with the buffer\n+   */\n+  public static Tensor create(DataType dataType, long[] shape, IntBuffer data) {\n+    if(dataType != DataType.INT32) {\n+      throw incompatibleBuffer(dataType);\n+    }\n+    if(data.remaining() != numElements(shape)) {\n+      throw incompatibleBuffer(shape);\n+    }\n+    int elemSize = Integer.SIZE / Byte.SIZE;\n+    Tensor t = create(dataType, shape, elemSize * data.remaining());\n+    try {\n+      ByteBuffer dst = t.buffer();\n+      dst.asIntBuffer().put(data);\n+      return t;\n+    }\n+    catch(RuntimeException e) {\n+      delete(t.nativeHandle);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Create a Tensor with data from the given buffer.\n+   *\n+   * <p>Supports the following datatypes: {@link DataType#FLOAT}\n+   *\n+   * <p>This method copies\n+   * <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> elements from the given\n+   * buffer into the tensor, starting at the buffer's current position.\n+   * The position of the buffer is then incremented by <i>n</i>.\n+   *\n+   * @param dataType the tensor datatype.\n+   * @param shape the tensor shape.\n+   * @param data a buffer containing the tensor data.\n+   *\n+   * @throws  IllegalArgumentException\n+   *          If the tensor datatype or shape is not compatible with the buffer\n+   */\n+  public static Tensor create(DataType dataType, long[] shape, FloatBuffer data) {\n+    if(dataType != DataType.FLOAT) {\n+      throw incompatibleBuffer(dataType);\n+    }\n+    if(data.remaining() != numElements(shape)) {\n+      throw incompatibleBuffer(shape);\n+    }\n+    int elemSize = Float.SIZE / Byte.SIZE;\n+    Tensor t = create(dataType, shape, elemSize * data.remaining());\n+    try {\n+      ByteBuffer dst = t.buffer();\n+      dst.asFloatBuffer().put(data);\n+      return t;\n+    }\n+    catch(RuntimeException e) {\n+      delete(t.nativeHandle);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Create a Tensor with data from the given buffer.\n+   *\n+   * <p>Supports the following datatypes: {@link DataType#DOUBLE}\n+   *\n+   * <p>This method copies\n+   * <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> elements from the given\n+   * buffer into the tensor, starting at the buffer's current position.\n+   * The position of the buffer is then incremented by <i>n</i>.\n+   *\n+   * @param dataType the tensor datatype.\n+   * @param shape the tensor shape.\n+   * @param data a buffer containing the tensor data.\n+   *\n+   * @throws  IllegalArgumentException\n+   *          If the tensor datatype or shape is not compatible with the buffer\n+   */\n+  public static Tensor create(DataType dataType, long[] shape, DoubleBuffer data) {\n+    if(dataType != DataType.DOUBLE) {\n+      throw incompatibleBuffer(dataType);\n+    }\n+    if(data.remaining() != numElements(shape)) {\n+      throw incompatibleBuffer(shape);\n+    }\n+    int elemSize = Double.SIZE / Byte.SIZE;\n+    Tensor t = create(dataType, shape, elemSize * data.remaining());\n+    try {\n+      ByteBuffer dst = t.buffer();\n+      dst.asDoubleBuffer().put(data);\n+      return t;\n+    }\n+    catch(RuntimeException e) {\n+      delete(t.nativeHandle);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Create a Tensor with data from the given buffer.\n+   *\n+   * <p>Supports the following datatypes: {@link DataType#INT64}\n+   *\n+   * <p>This method copies\n+   * <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> elements from the given\n+   * buffer into the tensor, starting at the buffer's current position.\n+   * The position of the buffer is then incremented by <i>n</i>.\n+   *\n+   * @param dataType the tensor datatype.\n+   * @param shape the tensor shape.\n+   * @param data a buffer containing the tensor data.\n+   *\n+   * @throws  IllegalArgumentException\n+   *          If the tensor datatype or shape is not compatible with the buffer\n+   */\n+  public static Tensor create(DataType dataType, long[] shape, LongBuffer data) {\n+    if(dataType != DataType.INT64) {\n+      throw incompatibleBuffer(dataType);\n+    }\n+    if(data.remaining() != numElements(shape)) {\n+      throw incompatibleBuffer(shape);\n+    }\n+    int elemSize = Long.SIZE / Byte.SIZE;\n+    Tensor t = create(dataType, shape, elemSize * data.remaining());\n+    try {\n+      ByteBuffer dst = t.buffer();\n+      dst.asLongBuffer().put(data);\n+      return t;\n+    }\n+    catch(RuntimeException e) {\n+      delete(t.nativeHandle);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Create a Tensor with data from the given buffer.\n+   *\n+   * <p>Supports all datatypes.  Note that primitive data must be in native byte order.\n+   *\n+   * <p>This method copies\n+   * <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> elements from the given\n+   * buffer into the tensor, starting at the buffer's current position.\n+   * The position of the buffer is then incremented by <i>n</i>.\n+   *\n+   * @param dataType the tensor datatype.\n+   * @param shape the tensor shape.\n+   * @param data a buffer containing the tensor data.\n+   *\n+   * @throws  IllegalArgumentException\n+   *          If the tensor datatype or shape is not compatible with the buffer\n+   */\n+  public static Tensor create(DataType dataType, long[] shape, ByteBuffer data) {\n+    switch(dataType) {\n+      case FLOAT:\n+      case DOUBLE:\n+      case INT32:\n+      case INT64:\n+      case BOOL:\n+        int elemSize = elemByteSize(dataType);\n+        if(data.remaining() / elemSize != numElements(shape)) {", "path": "tensorflow/java/src/main/java/org/tensorflow/Tensor.java", "position": null, "original_position": 192, "commit_id": "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894", "original_commit_id": "abd9ce79cbe970877cb0e254459d8ee3b76fdf74", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Two things:\r\n\r\n(1) Should we also be checking for `data.remaining() % elemSize == 0`, otherwise, for example, an `ByteBuffer` with 25 bytes will be usable to create an `INT32` tensor with a shape of 2x3?\r\n\r\n(2) As mentioned above, let's move this consistency check into the private helper method, which can be something like:\r\n\r\n```java\r\nprivate static Tensor createHelper(DataType dataType, long[] shape, int numElements) {\r\n   if (dataType != DataType.STRING) {\r\n      // Check consistency between shape and numElements\r\n   }\r\n   Tensor t  = new Tensor();\r\n   ...\r\n   return t;\r\n}\r\n```", "created_at": "2017-01-15T20:30:52Z", "updated_at": "2017-01-29T23:34:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r96147019", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/96147019"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r96147019"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577"}}, "body_html": "<p>Two things:</p>\n<p>(1) Should we also be checking for <code>data.remaining() % elemSize == 0</code>, otherwise, for example, an <code>ByteBuffer</code> with 25 bytes will be usable to create an <code>INT32</code> tensor with a shape of 2x3?</p>\n<p>(2) As mentioned above, let's move this consistency check into the private helper method, which can be something like:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Tensor</span> createHelper(<span class=\"pl-smi\">DataType</span> dataType, <span class=\"pl-k\">long</span>[] shape, <span class=\"pl-k\">int</span> numElements) {\n   <span class=\"pl-k\">if</span> (dataType <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">DataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>STRING</span>) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Check consistency between shape and numElements</span>\n   }\n   <span class=\"pl-smi\">Tensor</span> t  <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Tensor</span>();\n   <span class=\"pl-c1\">...</span>\n   <span class=\"pl-k\">return</span> t;\n}</pre></div>", "body_text": "Two things:\n(1) Should we also be checking for data.remaining() % elemSize == 0, otherwise, for example, an ByteBuffer with 25 bytes will be usable to create an INT32 tensor with a shape of 2x3?\n(2) As mentioned above, let's move this consistency check into the private helper method, which can be something like:\nprivate static Tensor createHelper(DataType dataType, long[] shape, int numElements) {\n   if (dataType != DataType.STRING) {\n      // Check consistency between shape and numElements\n   }\n   Tensor t  = new Tensor();\n   ...\n   return t;\n}"}