{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95071565", "pull_request_review_id": 15597658, "id": 95071565, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDcxNTY1", "diff_hunk": "@@ -24,9 +24,262 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n+import java.lang.reflect.Array;\n+import java.nio.*;\n+import java.util.Arrays;\n+\n /** Unit tests for {@link org.tensorflow.Tensor}. */\n @RunWith(JUnit4.class)\n public class TensorTest {\n+  private static final double EPSILON = 1e-7;\n+  private static final float EPSILON_F = 1e-7f;\n+\n+  // reusable sample data, varying by type and dimension\n+  static final int scalar = 42;\n+  static final long[] scalar_shape = {};\n+  static final double[] vector = {1.414, 2.718, 3.1415};\n+  static final float[] vector_f = {1.414f, 2.718f, 3.1415f};\n+  static final long[] vector_shape = {3};\n+  static final int[][] matrix = {{1, 2, 3}, {4, 5, 6}};\n+  static final long[] matrix_shape = {2, 3};\n+  static final long[][][] threeD = {\n+    {{1}, {3}, {5}, {7}, {9}}, {{2}, {4}, {6}, {8}, {0}},\n+  };\n+  static final long[] threeD_shape = {2, 5, 1};\n+  static final boolean[][][][] fourD = {\n+    {{{false, false, false, true}, {false, false, true, false}}},\n+    {{{false, false, true, true}, {false, true, false, false}}},\n+    {{{false, true, false, true}, {false, true, true, false}}},\n+  };\n+  static final long[] fourD_shape = {3, 1, 2, 4};\n+\n+  @Test\n+  public void createWithBuffer() {\n+    // validate creating a tensor using a direct byte buffer (in host order)\n+    {\n+      ByteBuffer buf = ByteBuffer.allocateDirect(Double.SIZE / Byte.SIZE * vector.length).order(ByteOrder.nativeOrder());\n+      buf.asDoubleBuffer().put(vector);\n+      try(Tensor t = Tensor.create(DataType.DOUBLE, vector_shape, buf)) {\n+        double[] actual = new double[3];\n+        assertArrayEquals(vector, t.copyTo(actual), EPSILON);\n+      }\n+    }\n+\n+    // validate byte order conversion\n+    {\n+      DoubleBuffer buf = ByteBuffer.allocate(Double.SIZE / Byte.SIZE * vector.length)\n+          .order(ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN)\n+          .asDoubleBuffer()\n+          .put(vector);\n+      buf.flip();\n+      try(Tensor t = Tensor.create(DataType.DOUBLE, vector_shape, buf)) {\n+        double[] actual = new double[3];\n+        assertArrayEquals(vector, t.copyTo(actual), EPSILON);\n+      }\n+    }\n+\n+    // validate creating a tensor using a typed buffer\n+    {\n+      try(Tensor t = Tensor.create(DataType.INT32, scalar_shape, IntBuffer.wrap(new int[] { scalar }))) {\n+        assertEquals(scalar, t.intValue());\n+      }\n+      try(Tensor t = Tensor.create(DataType.DOUBLE, vector_shape, DoubleBuffer.wrap(vector))) {\n+        double[] actual = new double[3];\n+        assertArrayEquals(vector, t.copyTo(actual), EPSILON);\n+      }\n+      try(Tensor t = Tensor.create(DataType.FLOAT, vector_shape, FloatBuffer.wrap(vector_f))) {\n+        float[] actual = new float[3];\n+        assertArrayEquals(vector_f, t.copyTo(actual), EPSILON_F);\n+      }\n+      int[] matrix_ = (int[]) TestUtil.flatten(matrix, Integer.TYPE);\n+      try(Tensor t = Tensor.create(DataType.INT32, matrix_shape, IntBuffer.wrap(matrix_))) {\n+        int[][] actual = new int[2][3];\n+        assertArrayEquals(matrix, t.copyTo(actual));\n+      }\n+      long[] threeD_ = (long[]) TestUtil.flatten(threeD, Long.TYPE);\n+      try(Tensor t = Tensor.create(DataType.INT64, threeD_shape, LongBuffer.wrap(threeD_))) {\n+        long[][][] actual = new long[2][5][1];\n+        assertArrayEquals(threeD, t.copyTo(actual));\n+      }\n+      byte[] fourD_ = TestUtil.bool2byte((boolean[]) TestUtil.flatten(fourD, Boolean.TYPE));\n+      try(Tensor t = Tensor.create(DataType.BOOL, fourD_shape, ByteBuffer.wrap(fourD_))) {\n+        boolean[][][][] actual = new boolean[3][1][2][4];\n+        assertArrayEquals(fourD, t.copyTo(actual));\n+      }\n+    }\n+\n+    // validate that incompatible buffers are rejected\n+    {\n+      try {\n+        Tensor.create(DataType.FLOAT, vector_shape, DoubleBuffer.wrap(vector));\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+      }\n+      try {\n+        Tensor.create(DataType.DOUBLE, vector_shape, FloatBuffer.wrap(vector_f));\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+      }\n+      int[] matrix_ = (int[]) TestUtil.flatten(matrix, Integer.TYPE);\n+      try {\n+        Tensor.create(DataType.FLOAT, matrix_shape, IntBuffer.wrap(matrix_));\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+      }\n+      long[] threeD_ = (long[]) TestUtil.flatten(threeD, Long.TYPE);\n+      try {\n+        Tensor.create(DataType.FLOAT, threeD_shape, LongBuffer.wrap(threeD_));\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+      }\n+      try {\n+        Tensor.create(DataType.FLOAT, new long[] { 1 }, ShortBuffer.wrap(new short[] { 1 }));\n+        fail(\"should have failed on incompatible buffer\");\n+      }\n+      catch(IllegalArgumentException e) {\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void readData() {\n+\n+    Tensor tscalar = Tensor.create(scalar);", "path": "tensorflow/java/src/test/java/org/tensorflow/TensorTest.java", "position": null, "original_position": 128, "commit_id": "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894", "original_commit_id": "1a2994b397a9697cefb31da4939e16415694a529", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Let's use the [`try-with-resources`](https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html) statement here (which can handle multiple resources within the `try`):\r\n\r\n```java\r\ntry (Tensor tscalar = Tensor.create(scalar);\r\n       Tensor tvector = Tensor.create(vector);\r\n       ....) {\r\n   // Body of the test\r\n}\r\n```\r\n\r\nThat way you don't need the `finally` clause, don't have to worry about the `finally` clause covering all the tensors and it also takes care of any errors within the `create` calls.", "created_at": "2017-01-08T04:33:51Z", "updated_at": "2017-01-29T23:34:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r95071565", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95071565"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r95071565"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577"}}, "body_html": "<p>Let's use the <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\" rel=\"nofollow\"><code>try-with-resources</code></a> statement here (which can handle multiple resources within the <code>try</code>):</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Tensor</span> tscalar <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Tensor</span><span class=\"pl-k\">.</span>create(scalar);\n       <span class=\"pl-smi\">Tensor</span> tvector <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Tensor</span><span class=\"pl-k\">.</span>create(vector);\n       <span class=\"pl-c1\">....</span>) {\n   <span class=\"pl-c\"><span class=\"pl-c\">//</span> Body of the test</span>\n}</pre></div>\n<p>That way you don't need the <code>finally</code> clause, don't have to worry about the <code>finally</code> clause covering all the tensors and it also takes care of any errors within the <code>create</code> calls.</p>", "body_text": "Let's use the try-with-resources statement here (which can handle multiple resources within the try):\ntry (Tensor tscalar = Tensor.create(scalar);\n       Tensor tvector = Tensor.create(vector);\n       ....) {\n   // Body of the test\n}\nThat way you don't need the finally clause, don't have to worry about the finally clause covering all the tensors and it also takes care of any errors within the create calls."}