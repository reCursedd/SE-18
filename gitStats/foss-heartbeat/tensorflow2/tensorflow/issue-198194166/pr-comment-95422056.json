{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95422056", "pull_request_review_id": 15975970, "id": 95422056, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDIyMDU2", "diff_hunk": "@@ -34,6 +41,115 @@\n  * }</pre>\n  */\n public final class Tensor implements AutoCloseable {\n+\n+  /**\n+   * Create a Tensor with data from the given buffer.\n+   *\n+   * <p>Provide a {@link ByteBuffer} to create a Tensor of any datatype.  Note that primitive\n+   * data must be in native byte order. Provide a {@link FloatBuffer}, {@link IntBuffer}, {@link DoubleBuffer},\n+   * or {@link LongBuffer} to create a Tensor with a datatype of {@code FLOAT}, {@code INT32}, {@code DOUBLE},\n+   * or {@code INT64} respectively.\n+   *\n+   * <p> This method copies\n+   * <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> elements from the given\n+   * buffer into the tensor, starting at the buffer's current position.\n+   * The position of the buffer is then incremented by <i>n</i>.\n+   *\n+   * @param dataType the tensor datatype.\n+   * @param shape the tensor shape.\n+   * @param data a buffer containing the tensor data.\n+   */\n+  public static Tensor create(DataType dataType, long[] shape, Buffer data) {", "path": "tensorflow/java/src/main/java/org/tensorflow/Tensor.java", "position": null, "original_position": 36, "commit_id": "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894", "original_commit_id": "1a2994b397a9697cefb31da4939e16415694a529", "user": {"login": "EronWright", "id": 1775518, "node_id": "MDQ6VXNlcjE3NzU1MTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1775518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EronWright", "html_url": "https://github.com/EronWright", "followers_url": "https://api.github.com/users/EronWright/followers", "following_url": "https://api.github.com/users/EronWright/following{/other_user}", "gists_url": "https://api.github.com/users/EronWright/gists{/gist_id}", "starred_url": "https://api.github.com/users/EronWright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EronWright/subscriptions", "organizations_url": "https://api.github.com/users/EronWright/orgs", "repos_url": "https://api.github.com/users/EronWright/repos", "events_url": "https://api.github.com/users/EronWright/events{/privacy}", "received_events_url": "https://api.github.com/users/EronWright/received_events", "type": "User", "site_admin": false}, "body": "Believe it or not, my first draft was entirely `ByteBuffer` based.   I found it necessary to support other `Buffer` types to optimize the transfer of wrapped primitive arrays. \r\n\r\nConsider a `FloatBuffer` as produced by `FloatBuffer.wrap(new float[] { ... })`.  It is not convertible to a `ByteBuffer`.   To write it directly to the tensor's native `ByteBuffer`, we call `put` on a view of the latter.   At all times we avoid exposing the native buffer to user code.\r\n\r\nI'm fine with moving to a set of overloaded methods to retain the benefits of other buffer types while reducing the possibility of runtime exceptions.", "created_at": "2017-01-10T18:05:23Z", "updated_at": "2017-01-29T23:34:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r95422056", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/95422056"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r95422056"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577"}}, "body_html": "<p>Believe it or not, my first draft was entirely <code>ByteBuffer</code> based.   I found it necessary to support other <code>Buffer</code> types to optimize the transfer of wrapped primitive arrays.</p>\n<p>Consider a <code>FloatBuffer</code> as produced by <code>FloatBuffer.wrap(new float[] { ... })</code>.  It is not convertible to a <code>ByteBuffer</code>.   To write it directly to the tensor's native <code>ByteBuffer</code>, we call <code>put</code> on a view of the latter.   At all times we avoid exposing the native buffer to user code.</p>\n<p>I'm fine with moving to a set of overloaded methods to retain the benefits of other buffer types while reducing the possibility of runtime exceptions.</p>", "body_text": "Believe it or not, my first draft was entirely ByteBuffer based.   I found it necessary to support other Buffer types to optimize the transfer of wrapped primitive arrays.\nConsider a FloatBuffer as produced by FloatBuffer.wrap(new float[] { ... }).  It is not convertible to a ByteBuffer.   To write it directly to the tensor's native ByteBuffer, we call put on a view of the latter.   At all times we avoid exposing the native buffer to user code.\nI'm fine with moving to a set of overloaded methods to retain the benefits of other buffer types while reducing the possibility of runtime exceptions.", "in_reply_to_id": 95050504}