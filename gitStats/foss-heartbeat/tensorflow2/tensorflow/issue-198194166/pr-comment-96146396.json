{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/96146396", "pull_request_review_id": 16722212, "id": 96146396, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTQ2Mzk2", "diff_hunk": "@@ -34,6 +41,352 @@\n  * }</pre>\n  */\n public final class Tensor implements AutoCloseable {\n+\n+  /**\n+   * Create a Tensor with data from the given buffer.\n+   *\n+   * <p>Supports the following datatypes: {@link DataType#INT32}", "path": "tensorflow/java/src/main/java/org/tensorflow/Tensor.java", "position": null, "original_position": 22, "commit_id": "5efc0f25336d5f3b5b5c82ab8d13e5929c3ba894", "original_commit_id": "abd9ce79cbe970877cb0e254459d8ee3b76fdf74", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I'd still recommend doing away with this parameter. As far as possible, we want the API to make it hard to make mistakes and this seems like an easy one to fix. \r\n\r\nYou mentioned doing this to support unsigned types in the future. When those come around, I would rather have either an overload like:\r\n\r\n```java\r\npublic static void create(IntBuffer buf, boolean /* or maybe an enum */ signed);\r\n```\r\n\r\nor a factory function with a different name:\r\n\r\n```java\r\npublic static void createUnsigned(IntBuffer buf);\r\n```\r\n\r\nIMHO, those will be clearer since they do not allow invalid arguments.\r\n(But for now, we don't need these overloads)", "created_at": "2017-01-15T20:05:02Z", "updated_at": "2017-01-29T23:34:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r96146396", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/96146396"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6577#discussion_r96146396"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6577"}}, "body_html": "<p>I'd still recommend doing away with this parameter. As far as possible, we want the API to make it hard to make mistakes and this seems like an easy one to fix.</p>\n<p>You mentioned doing this to support unsigned types in the future. When those come around, I would rather have either an overload like:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> create(<span class=\"pl-smi\">IntBuffer</span> buf, <span class=\"pl-k\">boolean</span> <span class=\"pl-c\"><span class=\"pl-c\">/*</span> or maybe an enum <span class=\"pl-c\">*/</span></span> signed);</pre></div>\n<p>or a factory function with a different name:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> createUnsigned(<span class=\"pl-smi\">IntBuffer</span> buf);</pre></div>\n<p>IMHO, those will be clearer since they do not allow invalid arguments.<br>\n(But for now, we don't need these overloads)</p>", "body_text": "I'd still recommend doing away with this parameter. As far as possible, we want the API to make it hard to make mistakes and this seems like an easy one to fix.\nYou mentioned doing this to support unsigned types in the future. When those come around, I would rather have either an overload like:\npublic static void create(IntBuffer buf, boolean /* or maybe an enum */ signed);\nor a factory function with a different name:\npublic static void createUnsigned(IntBuffer buf);\nIMHO, those will be clearer since they do not allow invalid arguments.\n(But for now, we don't need these overloads)"}