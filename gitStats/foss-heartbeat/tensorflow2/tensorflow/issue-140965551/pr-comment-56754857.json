{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/56754857", "pull_request_review_id": null, "id": 56754857, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU0ODU3", "diff_hunk": "@@ -72,6 +73,36 @@ def testVariables(self):\n       expected = .1 * 0.96**(100 // 3)\n       self.assertAllClose(decayed_lr.eval(), expected, 1e-6)\n \n+class ExponentialTimeDecayTest(test_util.TensorFlowTestCase):\n+\n+  def testDecay(self):\n+    initial_lr = 0.1\n+    k = 0.5\n+    with self.test_session():\n+      for step in range(1, 11):\n+        lr = learning_rate_decay.exponential_time_decay(initial_lr, step, k)\n+        self.assertAllClose(initial_lr*exp(-k*step), lr.eval())\n+      \n+class InverseDecayTest(test_util.TensorFlowTestCase):\n+\n+  def testDecay(self):\n+    initial_lr = 0.1\n+    k = 0.5\n+    with self.test_session():\n+      for step in range(1, 11):\n+        lr = learning_rate_decay.inverse_time_decay(initial_lr, step, k)\n+        self.assertAllClose(initial_lr/(1+k*step), lr.eval())\n+      \n+class StepDecayTest(test_util.TensorFlowTestCase):\n+  \n+  def testDecay(self):\n+    lr = 0.1\n+    k = 0.5\n+    num_steps = 5\n+    with self.test_session():\n+      for step in range(1, 11):\n+        lr = learning_rate_decay.step_time_decay(lr, step, num_steps, k)", "path": "tensorflow/python/training/learning_rate_decay_test.py", "position": null, "original_position": 40, "commit_id": "d3baec908a620e6a1b1af20e63af329815d4e260", "original_commit_id": "6d04864e44a892fb109da29654a226fe8900a7fa", "user": {"login": "chemelnucfin", "id": 3982092, "node_id": "MDQ6VXNlcjM5ODIwOTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3982092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chemelnucfin", "html_url": "https://github.com/chemelnucfin", "followers_url": "https://api.github.com/users/chemelnucfin/followers", "following_url": "https://api.github.com/users/chemelnucfin/following{/other_user}", "gists_url": "https://api.github.com/users/chemelnucfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/chemelnucfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chemelnucfin/subscriptions", "organizations_url": "https://api.github.com/users/chemelnucfin/orgs", "repos_url": "https://api.github.com/users/chemelnucfin/repos", "events_url": "https://api.github.com/users/chemelnucfin/events{/privacy}", "received_events_url": "https://api.github.com/users/chemelnucfin/received_events", "type": "User", "site_admin": false}, "body": "Oh I see, let me see if I can make it better. I'll get back to you.\n\nOn Sat, Mar 19, 2016, 9:54 AM Vijay Vasudevan notifications@github.com\nwrote:\n\n> In tensorflow/python/training/learning_rate_decay_test.py\n> https://github.com/tensorflow/tensorflow/pull/1512#discussion_r56751529:\n> \n> > -    initial_lr = 0.1\n> > -    k = 0.5\n> > -    with self.test_session():\n> > -      for step in range(1, 11):\n> > -        lr = learning_rate_decay.inverse_time_decay(initial_lr, step, k)\n> > -        self.assertAllClose(initial_lr/(1+k*step), lr.eval())\n> >   +\n> >   +class StepDecayTest(test_util.TensorFlowTestCase):\n> >   +\n> > -  def testDecay(self):\n> > -    lr = 0.1\n> > -    k = 0.5\n> > -    num_steps = 5\n> > -    with self.test_session():\n> > -      for step in range(1, 11):\n> > -        lr = learning_rate_decay.step_time_decay(lr, step, num_steps, k)\n> \n> The reason I was concerned about this function is that you are assuming\n> the 'lr' passed into the function is updated like this test is doing on\n> every call -- the other functions are always passing an initial learning\n> rate and computing the final learning rate based on the step and steps per\n> epoch, so the result doesn't have to be passed back into a later call of\n> the function. I think keeping the same type of behavior for this function\n> would be ideal.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/tensorflow/tensorflow/pull/1512/files/6d04864e44a892fb109da29654a226fe8900a7fa#r56751529\n", "created_at": "2016-03-19T20:44:01Z", "updated_at": "2016-03-28T19:57:51Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1512#discussion_r56754857", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1512", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/56754857"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1512#discussion_r56754857"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1512"}}, "body_html": "<p>Oh I see, let me see if I can make it better. I'll get back to you.</p>\n<p>On Sat, Mar 19, 2016, 9:54 AM Vijay Vasudevan <a href=\"mailto:notifications@github.com\">notifications@github.com</a><br>\nwrote:</p>\n<blockquote>\n<p>In tensorflow/python/training/learning_rate_decay_test.py<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"140965551\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1512\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/1512/hovercard?comment_id=56751529&amp;comment_type=review_comment\" href=\"https://github.com/tensorflow/tensorflow/pull/1512#discussion_r56751529\">#1512 (comment)</a>:</p>\n<blockquote>\n<ul>\n<li>initial_lr = 0.1</li>\n<li>k = 0.5</li>\n<li>with self.test_session():</li>\n<li>\n<pre><code> for step in range(1, 11):\n</code></pre>\n</li>\n<li>\n<pre><code>   lr = learning_rate_decay.inverse_time_decay(initial_lr, step, k)\n</code></pre>\n</li>\n<li>\n<pre><code>   self.assertAllClose(initial_lr/(1+k*step), lr.eval())\n</code></pre>\n<ul>\n<li></li>\n</ul>\n+class StepDecayTest(test_util.TensorFlowTestCase):<br>\n+</li>\n<li>def testDecay(self):</li>\n<li>lr = 0.1</li>\n<li>k = 0.5</li>\n<li>num_steps = 5</li>\n<li>with self.test_session():</li>\n<li>\n<pre><code> for step in range(1, 11):\n</code></pre>\n</li>\n<li>\n<pre><code>   lr = learning_rate_decay.step_time_decay(lr, step, num_steps, k)\n</code></pre>\n</li>\n</ul>\n</blockquote>\n<p>The reason I was concerned about this function is that you are assuming<br>\nthe 'lr' passed into the function is updated like this test is doing on<br>\nevery call -- the other functions are always passing an initial learning<br>\nrate and computing the final learning rate based on the step and steps per<br>\nepoch, so the result doesn't have to be passed back into a later call of<br>\nthe function. I think keeping the same type of behavior for this function<br>\nwould be ideal.</p>\n<p>\u2014<br>\nYou are receiving this because you authored the thread.<br>\nReply to this email directly or view it on GitHub<br>\n<a href=\"https://github.com/tensorflow/tensorflow/pull/1512/files/6d04864e44a892fb109da29654a226fe8900a7fa#r56751529\">https://github.com/tensorflow/tensorflow/pull/1512/files/6d04864e44a892fb109da29654a226fe8900a7fa#r56751529</a></p>\n</blockquote>", "body_text": "Oh I see, let me see if I can make it better. I'll get back to you.\nOn Sat, Mar 19, 2016, 9:54 AM Vijay Vasudevan notifications@github.com\nwrote:\n\nIn tensorflow/python/training/learning_rate_decay_test.py\n#1512 (comment):\n\n\ninitial_lr = 0.1\nk = 0.5\nwith self.test_session():\n\n for step in range(1, 11):\n\n\n\n   lr = learning_rate_decay.inverse_time_decay(initial_lr, step, k)\n\n\n\n   self.assertAllClose(initial_lr/(1+k*step), lr.eval())\n\n\n\n\n+class StepDecayTest(test_util.TensorFlowTestCase):\n+\ndef testDecay(self):\nlr = 0.1\nk = 0.5\nnum_steps = 5\nwith self.test_session():\n\n for step in range(1, 11):\n\n\n\n   lr = learning_rate_decay.step_time_decay(lr, step, num_steps, k)\n\n\n\n\nThe reason I was concerned about this function is that you are assuming\nthe 'lr' passed into the function is updated like this test is doing on\nevery call -- the other functions are always passing an initial learning\nrate and computing the final learning rate based on the step and steps per\nepoch, so the result doesn't have to be passed back into a later call of\nthe function. I think keeping the same type of behavior for this function\nwould be ideal.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/tensorflow/tensorflow/pull/1512/files/6d04864e44a892fb109da29654a226fe8900a7fa#r56751529"}