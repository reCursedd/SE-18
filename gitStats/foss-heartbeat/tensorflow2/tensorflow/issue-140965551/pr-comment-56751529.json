{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/56751529", "pull_request_review_id": null, "id": 56751529, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzUxNTI5", "diff_hunk": "@@ -72,6 +73,36 @@ def testVariables(self):\n       expected = .1 * 0.96**(100 // 3)\n       self.assertAllClose(decayed_lr.eval(), expected, 1e-6)\n \n+class ExponentialTimeDecayTest(test_util.TensorFlowTestCase):\n+\n+  def testDecay(self):\n+    initial_lr = 0.1\n+    k = 0.5\n+    with self.test_session():\n+      for step in range(1, 11):\n+        lr = learning_rate_decay.exponential_time_decay(initial_lr, step, k)\n+        self.assertAllClose(initial_lr*exp(-k*step), lr.eval())\n+      \n+class InverseDecayTest(test_util.TensorFlowTestCase):\n+\n+  def testDecay(self):\n+    initial_lr = 0.1\n+    k = 0.5\n+    with self.test_session():\n+      for step in range(1, 11):\n+        lr = learning_rate_decay.inverse_time_decay(initial_lr, step, k)\n+        self.assertAllClose(initial_lr/(1+k*step), lr.eval())\n+      \n+class StepDecayTest(test_util.TensorFlowTestCase):\n+  \n+  def testDecay(self):\n+    lr = 0.1\n+    k = 0.5\n+    num_steps = 5\n+    with self.test_session():\n+      for step in range(1, 11):\n+        lr = learning_rate_decay.step_time_decay(lr, step, num_steps, k)", "path": "tensorflow/python/training/learning_rate_decay_test.py", "position": null, "original_position": 40, "commit_id": "d3baec908a620e6a1b1af20e63af329815d4e260", "original_commit_id": "6d04864e44a892fb109da29654a226fe8900a7fa", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "The reason I was concerned about this function is that you are assuming the 'lr' passed into the function is updated like this test is doing on every call -- the other functions are always passing an initial learning rate and computing the final learning rate based on the step and steps per epoch, so the result doesn't have to be passed back into a later call of the function.  I think keeping the same type of behavior for this function would be ideal.\n", "created_at": "2016-03-19T16:52:53Z", "updated_at": "2016-03-28T19:57:51Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1512#discussion_r56751529", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1512", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/56751529"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1512#discussion_r56751529"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1512"}}, "body_html": "<p>The reason I was concerned about this function is that you are assuming the 'lr' passed into the function is updated like this test is doing on every call -- the other functions are always passing an initial learning rate and computing the final learning rate based on the step and steps per epoch, so the result doesn't have to be passed back into a later call of the function.  I think keeping the same type of behavior for this function would be ideal.</p>", "body_text": "The reason I was concerned about this function is that you are assuming the 'lr' passed into the function is updated like this test is doing on every call -- the other functions are always passing an initial learning rate and computing the final learning rate based on the step and steps per epoch, so the result doesn't have to be passed back into a later call of the function.  I think keeping the same type of behavior for this function would be ideal."}