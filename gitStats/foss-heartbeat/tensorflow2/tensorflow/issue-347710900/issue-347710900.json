{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21391", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21391/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21391/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21391/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21391", "id": 347710900, "node_id": "MDU6SXNzdWUzNDc3MTA5MDA=", "number": 21391, "title": "tf.linspace doesn't except integers for start/stop and floats for num", "user": {"login": "RanFeldesh", "id": 8627404, "node_id": "MDQ6VXNlcjg2Mjc0MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/8627404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RanFeldesh", "html_url": "https://github.com/RanFeldesh", "followers_url": "https://api.github.com/users/RanFeldesh/followers", "following_url": "https://api.github.com/users/RanFeldesh/following{/other_user}", "gists_url": "https://api.github.com/users/RanFeldesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/RanFeldesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RanFeldesh/subscriptions", "organizations_url": "https://api.github.com/users/RanFeldesh/orgs", "repos_url": "https://api.github.com/users/RanFeldesh/repos", "events_url": "https://api.github.com/users/RanFeldesh/events{/privacy}", "received_events_url": "https://api.github.com/users/RanFeldesh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, {"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-08-05T16:14:34Z", "updated_at": "2018-11-21T19:01:05Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>tf.linspace(start=1.0, stop=3.0, num=3) - works fine.<br>\ntf.linspace(start=1, stop=3, num=3) yields an error (because start and stop are integers)<br>\ntf.linspace(start=1.0, stop=3.0, num=3.0) yields an error (because num is float)<br>\nIn both cases the error is: \"Could not find valid device for node name: \"LinSpace\" \"</p>\n<p>I would expect the following behavior:</p>\n<ul>\n<li>start and stop can be integers (the op can convert it to float if fractions are produced; but see below)</li>\n<li>num can be float, if its modulo with 1 is zero (the op can convert it to int; but see below)</li>\n<li>the error message should reflect the problem precisely</li>\n<li>the comments and reference page should reflect the expected dtype more clearly (at the top, not just in args)</li>\n</ul>\n<p>This behavior is how numpy linspace function works (including stating all optional dtype in the autocomplete while typing).</p>\n<p>dtype conversion within a TF op might not follow TF design rules as it might create dtype changes without the user awareness. Yet, I would still be happy to have an error message that explicitly states the problem with the dtypes.</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows10</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: NA</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.9</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>: NA</li>\n<li><strong>Exact command to reproduce</strong>: See above</li>\n</ul>", "body_text": "tf.linspace(start=1.0, stop=3.0, num=3) - works fine.\ntf.linspace(start=1, stop=3, num=3) yields an error (because start and stop are integers)\ntf.linspace(start=1.0, stop=3.0, num=3.0) yields an error (because num is float)\nIn both cases the error is: \"Could not find valid device for node name: \"LinSpace\" \"\nI would expect the following behavior:\n\nstart and stop can be integers (the op can convert it to float if fractions are produced; but see below)\nnum can be float, if its modulo with 1 is zero (the op can convert it to int; but see below)\nthe error message should reflect the problem precisely\nthe comments and reference page should reflect the expected dtype more clearly (at the top, not just in args)\n\nThis behavior is how numpy linspace function works (including stating all optional dtype in the autocomplete while typing).\ndtype conversion within a TF op might not follow TF design rules as it might create dtype changes without the user awareness. Yet, I would still be happy to have an error message that explicitly states the problem with the dtypes.\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows10\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.9\nPython version: 3.6\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: NA\nGPU model and memory: NA\nExact command to reproduce: See above", "body": "tf.linspace(start=1.0, stop=3.0, num=3) - works fine.\r\ntf.linspace(start=1, stop=3, num=3) yields an error (because start and stop are integers)\r\ntf.linspace(start=1.0, stop=3.0, num=3.0) yields an error (because num is float)\r\nIn both cases the error is: \"Could not find valid device for node name: \"LinSpace\" \"\r\n\r\nI would expect the following behavior:\r\n* start and stop can be integers (the op can convert it to float if fractions are produced; but see below)\r\n* num can be float, if its modulo with 1 is zero (the op can convert it to int; but see below)\r\n* the error message should reflect the problem precisely\r\n* the comments and reference page should reflect the expected dtype more clearly (at the top, not just in args)\r\n\r\nThis behavior is how numpy linspace function works (including stating all optional dtype in the autocomplete while typing).\r\n\r\ndtype conversion within a TF op might not follow TF design rules as it might create dtype changes without the user awareness. Yet, I would still be happy to have an error message that explicitly states the problem with the dtypes.\r\n\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows10\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: NA\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.9\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**: NA\r\n- **Exact command to reproduce**: See above"}