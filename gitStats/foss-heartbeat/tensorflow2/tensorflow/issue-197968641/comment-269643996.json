{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269643996", "html_url": "https://github.com/tensorflow/tensorflow/issues/6558#issuecomment-269643996", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6558", "id": 269643996, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTY0Mzk5Ng==", "user": {"login": "fnl", "id": 109501, "node_id": "MDQ6VXNlcjEwOTUwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/109501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnl", "html_url": "https://github.com/fnl", "followers_url": "https://api.github.com/users/fnl/followers", "following_url": "https://api.github.com/users/fnl/following{/other_user}", "gists_url": "https://api.github.com/users/fnl/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnl/subscriptions", "organizations_url": "https://api.github.com/users/fnl/orgs", "repos_url": "https://api.github.com/users/fnl/repos", "events_url": "https://api.github.com/users/fnl/events{/privacy}", "received_events_url": "https://api.github.com/users/fnl/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-29T15:15:26Z", "updated_at": "2016-12-29T15:16:36Z", "author_association": "NONE", "body_html": "<p>If it helps, I've \"resolved\" the issue for me by tinkering around a bit and adding the missing header:</p>\n<ol>\n<li>Add <a href=\"https://bitbucket.org/eigen/eigen/raw/9ba936354ee8b73fb1966dcb2d3506387bb357f1/unsupported/Eigen/CXX11/src/Tensor/TensorContractionThreadPool.h\" rel=\"nofollow\"><code>TensorContractionThreadPool.h</code></a> from <a href=\"https://bitbucket.org/eigen/eigen\" rel=\"nofollow\">Eigen</a> \"itself\" to TF's <code>third_party/eigen3/unsupported/Eigen/CXX11/src/Tensor</code> directory (note that the leaf directory <code>Tensor</code> has to be created first).</li>\n<li>Update the <code>hdrs</code> parameter of the cc_library function in the Bazel <code>third_party/eigen3/BUILD</code> file to include the newly added file by inserting the following line in the list of files there: <code>\"unsupported/Eigen/CXX11/src/Tensor/TensorContractionThreadPool.h\",</code></li>\n</ol>\n<p>After that, my TF builds with AVX2 optimizations pass and I can nicely use a fully optimized, CUDA-enabled TF (so far, at least...).</p>\n<p>But I have exactly zero idea if that's indeed the right fix... YMMV ;-)</p>", "body_text": "If it helps, I've \"resolved\" the issue for me by tinkering around a bit and adding the missing header:\n\nAdd TensorContractionThreadPool.h from Eigen \"itself\" to TF's third_party/eigen3/unsupported/Eigen/CXX11/src/Tensor directory (note that the leaf directory Tensor has to be created first).\nUpdate the hdrs parameter of the cc_library function in the Bazel third_party/eigen3/BUILD file to include the newly added file by inserting the following line in the list of files there: \"unsupported/Eigen/CXX11/src/Tensor/TensorContractionThreadPool.h\",\n\nAfter that, my TF builds with AVX2 optimizations pass and I can nicely use a fully optimized, CUDA-enabled TF (so far, at least...).\nBut I have exactly zero idea if that's indeed the right fix... YMMV ;-)", "body": "If it helps, I've \"resolved\" the issue for me by tinkering around a bit and adding the missing header:\r\n\r\n1. Add [`TensorContractionThreadPool.h`](https://bitbucket.org/eigen/eigen/raw/9ba936354ee8b73fb1966dcb2d3506387bb357f1/unsupported/Eigen/CXX11/src/Tensor/TensorContractionThreadPool.h) from [Eigen](https://bitbucket.org/eigen/eigen) \"itself\" to TF's `third_party/eigen3/unsupported/Eigen/CXX11/src/Tensor` directory (note that the leaf directory `Tensor` has to be created first).\r\n1. Update the `hdrs` parameter of the cc_library function in the Bazel `third_party/eigen3/BUILD` file to include the newly added file by inserting the following line in the list of files there: `\"unsupported/Eigen/CXX11/src/Tensor/TensorContractionThreadPool.h\",`\r\n\r\nAfter that, my TF builds with AVX2 optimizations pass and I can nicely use a fully optimized, CUDA-enabled TF (so far, at least...).\r\n\r\nBut I have exactly zero idea if that's indeed the right fix... YMMV ;-)"}