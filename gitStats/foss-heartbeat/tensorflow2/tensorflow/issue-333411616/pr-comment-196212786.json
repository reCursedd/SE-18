{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/196212786", "pull_request_review_id": 129724022, "id": 196212786, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjIxMjc4Ng==", "diff_hunk": "@@ -198,18 +202,47 @@ func scalarAttribute(op *Operation, cname *C.char, meta C.TF_AttrMetadata) (inte\n \n \tcase C.TF_ATTR_SHAPE:\n \t\tnumDims := meta.total_size\n+\t\tmaxElems := numDims\n+\t\tif maxElems < 0 {\n+\t\t\tmaxElems = 0\n+\t\t}\n+\t\tdims := make([]C.int64_t, maxElems+1)\n+\t\tC.TF_OperationGetAttrShape(op.c, cname, (*C.int64_t)(unsafe.Pointer(&dims[0])), C.int(maxElems), status.c)\n+\t\tif err := status.Err(); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\t// We do these checks after calling the C code to preserve the property of\n+\t\t// throwing an error on a non-existent attribute.\n \t\t// If number of dims is unknown return empty shape to indicate that.\n \t\tif numDims < 0 {\n \t\t\treturn Shape{}, nil\n \t\t}\n-\t\tdims := make([]C.int64_t, numDims)\n-\t\tC.TF_OperationGetAttrShape(op.c, cname, (*C.int64_t)(unsafe.Pointer(&dims[0])), C.int(numDims), status.c)\n-\t\tif err := status.Err(); err != nil {\n-\t\t\treturn nil, err\n+\t\tif numDims == 0 {\n+\t\t\treturn ScalarShape(), nil\n \t\t}\n-\t\treturn makeCShape(dims), nil\n+\t\treturn makeCShape(dims[:meta.total_size]), nil\n \n \tdefault:\n \t\treturn nil, fmt.Errorf(\"type %v not supported\", meta._type)\n \t}\n }\n+\n+// testListAttribute is required since CGO can't be used from tests.\n+func testListAttribute(op *Operation, name string, attrType int) (interface{}, error) {", "path": "tensorflow/go/attrs.go", "position": null, "original_position": 168, "commit_id": "577b256460dfca4e7c429437dded48e76715fee7", "original_commit_id": "b11bf6552b739b50cd7de33310ef9efd7c476216", "user": {"login": "d4l3k", "id": 909104, "node_id": "MDQ6VXNlcjkwOTEwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/909104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d4l3k", "html_url": "https://github.com/d4l3k", "followers_url": "https://api.github.com/users/d4l3k/followers", "following_url": "https://api.github.com/users/d4l3k/following{/other_user}", "gists_url": "https://api.github.com/users/d4l3k/gists{/gist_id}", "starred_url": "https://api.github.com/users/d4l3k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d4l3k/subscriptions", "organizations_url": "https://api.github.com/users/d4l3k/orgs", "repos_url": "https://api.github.com/users/d4l3k/repos", "events_url": "https://api.github.com/users/d4l3k/events{/privacy}", "received_events_url": "https://api.github.com/users/d4l3k/received_events", "type": "User", "site_admin": false}, "body": "I can't think of a clean way to test every list/scalar and type pair other than this. (Which is what let this error slip in in the first place)", "created_at": "2018-06-18T20:25:14Z", "updated_at": "2018-06-19T21:50:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20103#discussion_r196212786", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20103", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/196212786"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20103#discussion_r196212786"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20103"}}, "body_html": "<p>I can't think of a clean way to test every list/scalar and type pair other than this. (Which is what let this error slip in in the first place)</p>", "body_text": "I can't think of a clean way to test every list/scalar and type pair other than this. (Which is what let this error slip in in the first place)", "in_reply_to_id": 196210647}