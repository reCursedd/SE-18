{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/400640593", "html_url": "https://github.com/tensorflow/tensorflow/issues/19880#issuecomment-400640593", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19880", "id": 400640593, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDY0MDU5Mw==", "user": {"login": "Luonic", "id": 13236173, "node_id": "MDQ6VXNlcjEzMjM2MTcz", "avatar_url": "https://avatars1.githubusercontent.com/u/13236173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Luonic", "html_url": "https://github.com/Luonic", "followers_url": "https://api.github.com/users/Luonic/followers", "following_url": "https://api.github.com/users/Luonic/following{/other_user}", "gists_url": "https://api.github.com/users/Luonic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Luonic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Luonic/subscriptions", "organizations_url": "https://api.github.com/users/Luonic/orgs", "repos_url": "https://api.github.com/users/Luonic/repos", "events_url": "https://api.github.com/users/Luonic/events{/privacy}", "received_events_url": "https://api.github.com/users/Luonic/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-27T11:33:06Z", "updated_at": "2018-06-27T11:33:06Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=667809\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/karmel\">@karmel</a> when we resizing image that have no negative values we expect result resized image to not have them too because linear interpolation just interpolates values beetween two non-negative values in source tensor. In my example we see that after resize we have negative values in result tensor but in source tensor all values were positive.<br>\nSo here is minimal example:</p>\n<pre><code>import tensorflow as tf\n\nimage = tf.random_uniform((1, 512, 512, 1), minval=0, maxval=255, dtype=tf.float32)\nimage = tf.Print(image, [tf.reduce_min(image)], 'min of source image')\nimage = tf.image.resize_bicubic(image, [256, 256], align_corners=True)\nimage = tf.Print(image, [tf.reduce_min(image)], 'min of result image')\n\nsess = tf.Session()\nimage.eval(session=sess)\n</code></pre>\n<p>And output is:</p>\n<pre><code>min of source image[9.11951065e-05]\nmin of result image[-47.5840836]\n</code></pre>\n<p>Why do we have -47.5840836 in our resized image?</p>", "body_text": "@karmel when we resizing image that have no negative values we expect result resized image to not have them too because linear interpolation just interpolates values beetween two non-negative values in source tensor. In my example we see that after resize we have negative values in result tensor but in source tensor all values were positive.\nSo here is minimal example:\nimport tensorflow as tf\n\nimage = tf.random_uniform((1, 512, 512, 1), minval=0, maxval=255, dtype=tf.float32)\nimage = tf.Print(image, [tf.reduce_min(image)], 'min of source image')\nimage = tf.image.resize_bicubic(image, [256, 256], align_corners=True)\nimage = tf.Print(image, [tf.reduce_min(image)], 'min of result image')\n\nsess = tf.Session()\nimage.eval(session=sess)\n\nAnd output is:\nmin of source image[9.11951065e-05]\nmin of result image[-47.5840836]\n\nWhy do we have -47.5840836 in our resized image?", "body": "@karmel when we resizing image that have no negative values we expect result resized image to not have them too because linear interpolation just interpolates values beetween two non-negative values in source tensor. In my example we see that after resize we have negative values in result tensor but in source tensor all values were positive.\r\nSo here is minimal example:\r\n```\r\nimport tensorflow as tf\r\n\r\nimage = tf.random_uniform((1, 512, 512, 1), minval=0, maxval=255, dtype=tf.float32)\r\nimage = tf.Print(image, [tf.reduce_min(image)], 'min of source image')\r\nimage = tf.image.resize_bicubic(image, [256, 256], align_corners=True)\r\nimage = tf.Print(image, [tf.reduce_min(image)], 'min of result image')\r\n\r\nsess = tf.Session()\r\nimage.eval(session=sess)\r\n```\r\n\r\nAnd output is:\r\n```\r\nmin of source image[9.11951065e-05]\r\nmin of result image[-47.5840836]\r\n```\r\nWhy do we have -47.5840836 in our resized image?\r\n"}