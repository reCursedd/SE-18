{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/433235950", "html_url": "https://github.com/tensorflow/tensorflow/issues/23170#issuecomment-433235950", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23170", "id": 433235950, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzIzNTk1MA==", "user": {"login": "IMBurbank", "id": 21133719, "node_id": "MDQ6VXNlcjIxMTMzNzE5", "avatar_url": "https://avatars1.githubusercontent.com/u/21133719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IMBurbank", "html_url": "https://github.com/IMBurbank", "followers_url": "https://api.github.com/users/IMBurbank/followers", "following_url": "https://api.github.com/users/IMBurbank/following{/other_user}", "gists_url": "https://api.github.com/users/IMBurbank/gists{/gist_id}", "starred_url": "https://api.github.com/users/IMBurbank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IMBurbank/subscriptions", "organizations_url": "https://api.github.com/users/IMBurbank/orgs", "repos_url": "https://api.github.com/users/IMBurbank/repos", "events_url": "https://api.github.com/users/IMBurbank/events{/privacy}", "received_events_url": "https://api.github.com/users/IMBurbank/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-25T23:14:11Z", "updated_at": "2018-10-26T02:49:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Alright, thank you very much for the reply. I hope you don't mind if I propose intermediate solutions in light of your concerns about the fragile build workflow.</p>\n<p>It seems there may be an intermediate way to maintain the current function of all Dockerfiles and older hosted images while also making the current Dockerfile images available.</p>\n<p>One alternative to achieve this would be as follows:</p>\n<p>Copy <code>tensorflow/tools/dockerfiles/bashrc</code> to <code>tensorflow/tools/dockerfiles/dockerfiles/bashrc</code></p>\n<p>Since the <code>bashrc</code> file is very small and remains largely unchanging, a copy of the file could be placed in the <code>dockerfiles</code> child directory with the rest of the Dockerfiles. Nothing would change in any Dockerfiles, images could be built from the <code>tensorflow/tools/dockerfiles/</code> or <code>tensorflow/tools/dockerfiles/dockerfiles/</code> context with the exact same access to <code>bashrc</code> and the current images could immediately be hosted on Docker Hub. The only change would be to <code>assembler.py</code> to copy <code>bashrc</code> when creating the directory.</p>\n<p>The Dockerfile images could be hosted with the proposed tags <code>latest</code> and <code>latest-gpu</code> changed to avoid a naming collision with the two older images already hosted on Docker Hub.</p>\n<table>\n<thead>\n<tr>\n<th>Dockerfile Location</th>\n<th>Docker Tag Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>tools/dockerfiles/dockerfiles/cpu.Dockerfile</code></td>\n<td>latest-current</td>\n</tr>\n<tr>\n<td><code>tools/dockerfiles/dockerfiles/cpu-devel.Dockerfile</code></td>\n<td>latest-devel</td>\n</tr>\n<tr>\n<td><code>tools/dockerfiles/dockerfiles/cpu-jupyter.Dockerfile</code></td>\n<td>latest-jupyter</td>\n</tr>\n<tr>\n<td><code>tools/dockerfiles/dockerfiles/cpu-devel-jupyter.Dockerfile</code></td>\n<td>latest-devel-jupyter</td>\n</tr>\n<tr>\n<td><code>tools/dockerfiles/dockerfiles/nvidia.Dockerfile</code></td>\n<td>latest-current-gpu</td>\n</tr>\n<tr>\n<td><code>tools/dockerfiles/dockerfiles/nvidia-devel.Dockerfile</code></td>\n<td>latest-gpu-devel</td>\n</tr>\n<tr>\n<td><code>tools/dockerfiles/dockerfiles/nvidia-jupyter.Dockerfile</code></td>\n<td>latest-gpu-jupyter</td>\n</tr>\n<tr>\n<td><code>tools/dockerfiles/dockerfiles/nvidia-devel-jupyter.Dockerfile</code></td>\n<td>latest-gpu-devel-jupyter</td>\n</tr>\n</tbody>\n</table>\n<p>This option could be a simple stop-gap to make all images available without risking any breaking changes - or creating significant rework.</p>", "body_text": "Alright, thank you very much for the reply. I hope you don't mind if I propose intermediate solutions in light of your concerns about the fragile build workflow.\nIt seems there may be an intermediate way to maintain the current function of all Dockerfiles and older hosted images while also making the current Dockerfile images available.\nOne alternative to achieve this would be as follows:\nCopy tensorflow/tools/dockerfiles/bashrc to tensorflow/tools/dockerfiles/dockerfiles/bashrc\nSince the bashrc file is very small and remains largely unchanging, a copy of the file could be placed in the dockerfiles child directory with the rest of the Dockerfiles. Nothing would change in any Dockerfiles, images could be built from the tensorflow/tools/dockerfiles/ or tensorflow/tools/dockerfiles/dockerfiles/ context with the exact same access to bashrc and the current images could immediately be hosted on Docker Hub. The only change would be to assembler.py to copy bashrc when creating the directory.\nThe Dockerfile images could be hosted with the proposed tags latest and latest-gpu changed to avoid a naming collision with the two older images already hosted on Docker Hub.\n\n\n\nDockerfile Location\nDocker Tag Name\n\n\n\n\ntools/dockerfiles/dockerfiles/cpu.Dockerfile\nlatest-current\n\n\ntools/dockerfiles/dockerfiles/cpu-devel.Dockerfile\nlatest-devel\n\n\ntools/dockerfiles/dockerfiles/cpu-jupyter.Dockerfile\nlatest-jupyter\n\n\ntools/dockerfiles/dockerfiles/cpu-devel-jupyter.Dockerfile\nlatest-devel-jupyter\n\n\ntools/dockerfiles/dockerfiles/nvidia.Dockerfile\nlatest-current-gpu\n\n\ntools/dockerfiles/dockerfiles/nvidia-devel.Dockerfile\nlatest-gpu-devel\n\n\ntools/dockerfiles/dockerfiles/nvidia-jupyter.Dockerfile\nlatest-gpu-jupyter\n\n\ntools/dockerfiles/dockerfiles/nvidia-devel-jupyter.Dockerfile\nlatest-gpu-devel-jupyter\n\n\n\nThis option could be a simple stop-gap to make all images available without risking any breaking changes - or creating significant rework.", "body": "Alright, thank you very much for the reply. I hope you don't mind if I propose intermediate solutions in light of your concerns about the fragile build workflow.\r\n\r\nIt seems there may be an intermediate way to maintain the current function of all Dockerfiles and older hosted images while also making the current Dockerfile images available. \r\n\r\nOne alternative to achieve this would be as follows:\r\n\r\nCopy `tensorflow/tools/dockerfiles/bashrc` to `tensorflow/tools/dockerfiles/dockerfiles/bashrc`\r\n\r\nSince the `bashrc` file is very small and remains largely unchanging, a copy of the file could be placed in the `dockerfiles` child directory with the rest of the Dockerfiles. Nothing would change in any Dockerfiles, images could be built from the `tensorflow/tools/dockerfiles/` or `tensorflow/tools/dockerfiles/dockerfiles/` context with the exact same access to `bashrc` and the current images could immediately be hosted on Docker Hub. The only change would be to `assembler.py` to copy `bashrc` when creating the directory.\r\n\r\nThe Dockerfile images could be hosted with the proposed tags `latest` and `latest-gpu` changed to avoid a naming collision with the two older images already hosted on Docker Hub.\r\n\r\n| Dockerfile Location                                                                          |  Docker Tag Name          |\r\n|----------------------------------------------------------------------------------------|----------------------------------|\r\n| `tools/dockerfiles/dockerfiles/cpu.Dockerfile`                                  | latest-current                    |\r\n| `tools/dockerfiles/dockerfiles/cpu-devel.Dockerfile`                        | latest-devel                      |\r\n| `tools/dockerfiles/dockerfiles/cpu-jupyter.Dockerfile`                      | latest-jupyter                    |\r\n| `tools/dockerfiles/dockerfiles/cpu-devel-jupyter.Dockerfile`            | latest-devel-jupyter          |\r\n| `tools/dockerfiles/dockerfiles/nvidia.Dockerfile`                              | latest-current-gpu             |\r\n| `tools/dockerfiles/dockerfiles/nvidia-devel.Dockerfile`                    | latest-gpu-devel               |\r\n| `tools/dockerfiles/dockerfiles/nvidia-jupyter.Dockerfile`                  | latest-gpu-jupyter             |\r\n| `tools/dockerfiles/dockerfiles/nvidia-devel-jupyter.Dockerfile`        | latest-gpu-devel-jupyter   |\r\n\r\nThis option could be a simple stop-gap to make all images available without risking any breaking changes - or creating significant rework."}