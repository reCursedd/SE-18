{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2850", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2850/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2850/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2850/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2850", "id": 160172672, "node_id": "MDU6SXNzdWUxNjAxNzI2NzI=", "number": 2850, "title": "Saver() not saving as .ckpt file", "user": {"login": "KendallWeihe", "id": 3602993, "node_id": "MDQ6VXNlcjM2MDI5OTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3602993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KendallWeihe", "html_url": "https://github.com/KendallWeihe", "followers_url": "https://api.github.com/users/KendallWeihe/followers", "following_url": "https://api.github.com/users/KendallWeihe/following{/other_user}", "gists_url": "https://api.github.com/users/KendallWeihe/gists{/gist_id}", "starred_url": "https://api.github.com/users/KendallWeihe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KendallWeihe/subscriptions", "organizations_url": "https://api.github.com/users/KendallWeihe/orgs", "repos_url": "https://api.github.com/users/KendallWeihe/repos", "events_url": "https://api.github.com/users/KendallWeihe/events{/privacy}", "received_events_url": "https://api.github.com/users/KendallWeihe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-14T12:47:27Z", "updated_at": "2016-09-12T06:26:30Z", "closed_at": "2016-06-14T12:56:46Z", "author_association": "NONE", "body_html": "<p>I'm trying to save and restore a model. From all the support I have found <a href=\"https://www.tensorflow.org/versions/r0.9/how_tos/variables/index.html\" rel=\"nofollow\">here</a> &amp; <a href=\"http://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python\" rel=\"nofollow\">here</a> <code>Saver.save()</code> is supposed to save a model file of type <code>.ckpt</code> &amp; then <code>Saver.restore()</code> is supposed to used that file name coupled with the directory it is in. However, my code does not save the files as .ckpt files, it just saves them as binary files. I could be wrong on that. My reasoning is that when I call <code>Saver.restore()</code> it returns None.</p>\n<p>The files are being saved as <code>model.ckpt-10</code> and then <code>model.ckpt-20</code> and so on. I have the checkpoint text file. I've tried using that as well, but no luck.</p>\n<pre><code>saver = tf.train.Saver()\nTRAIN_FLAG = 1\n\n# Launch the graph\nwith tf.Session() as sess:\n    sess.run(init)\n    # writer = tf.train.SummaryWriter(\"/tmp/logs\", sess.graph_def)\n    if TRAIN_FLAG:\n        from tensorflow.contrib.learn.python.learn.datasets.scroll import scroll_data\n        data = scroll_data.read_data('/home/kendall/Desktop/')\n        step = 1\n        flag = 0\n        while flag == 0:\n            batch_y, batch_x = data.train.next_batch(batch_size)\n            batch_x = batch_x.reshape((batch_size, n_input))\n            batch_y = batch_y.reshape((batch_size, n_classes))\n            # Run optimization op (backprop)\n            sess.run(optimizer, feed_dict={x: batch_x, y: batch_y})\n            if step % display_step == 0:\n                flag = 1\n                save_path = \"model.ckpt\"\n                saver.save(sess, save_path, global_step=step)\n                # Calculate batch accuracy\n                acc = sess.run(accuracy, feed_dict={x: batch_x, y: batch_y})\n                # Calculate batch loss\n                loss = sess.run(cost, feed_dict={x: batch_x, y: batch_y})\n                print \"Iter \" + str(step*batch_size) + \", Minibatch Loss= \" + \\\n                      \"{:.6f}\".format(loss) + \", Training Accuracy= \" + \\\n                      \"{:.5f}\".format(acc)\n            step += 1\n        print \"Optimization Finished!\"\nelse:\n    pdb.set_trace()\n    ckpt = tf.train.get_checkpoint_state(\"/home/kendall/Academic/Summer\\ 2016/Programs/\", \"my-model-7001\")\n    saver.restore(sess, ckpt.model_checkpoint_path)\n    im = Image.open('/home/kendall/Desktop/HA900_frames/frame0635.tif')\n    batch_x = np.array(im)\n    prediction = sess.run(optimizer, feed_dict={x: batch_x})\n    print prediction\n</code></pre>", "body_text": "I'm trying to save and restore a model. From all the support I have found here & here Saver.save() is supposed to save a model file of type .ckpt & then Saver.restore() is supposed to used that file name coupled with the directory it is in. However, my code does not save the files as .ckpt files, it just saves them as binary files. I could be wrong on that. My reasoning is that when I call Saver.restore() it returns None.\nThe files are being saved as model.ckpt-10 and then model.ckpt-20 and so on. I have the checkpoint text file. I've tried using that as well, but no luck.\nsaver = tf.train.Saver()\nTRAIN_FLAG = 1\n\n# Launch the graph\nwith tf.Session() as sess:\n    sess.run(init)\n    # writer = tf.train.SummaryWriter(\"/tmp/logs\", sess.graph_def)\n    if TRAIN_FLAG:\n        from tensorflow.contrib.learn.python.learn.datasets.scroll import scroll_data\n        data = scroll_data.read_data('/home/kendall/Desktop/')\n        step = 1\n        flag = 0\n        while flag == 0:\n            batch_y, batch_x = data.train.next_batch(batch_size)\n            batch_x = batch_x.reshape((batch_size, n_input))\n            batch_y = batch_y.reshape((batch_size, n_classes))\n            # Run optimization op (backprop)\n            sess.run(optimizer, feed_dict={x: batch_x, y: batch_y})\n            if step % display_step == 0:\n                flag = 1\n                save_path = \"model.ckpt\"\n                saver.save(sess, save_path, global_step=step)\n                # Calculate batch accuracy\n                acc = sess.run(accuracy, feed_dict={x: batch_x, y: batch_y})\n                # Calculate batch loss\n                loss = sess.run(cost, feed_dict={x: batch_x, y: batch_y})\n                print \"Iter \" + str(step*batch_size) + \", Minibatch Loss= \" + \\\n                      \"{:.6f}\".format(loss) + \", Training Accuracy= \" + \\\n                      \"{:.5f}\".format(acc)\n            step += 1\n        print \"Optimization Finished!\"\nelse:\n    pdb.set_trace()\n    ckpt = tf.train.get_checkpoint_state(\"/home/kendall/Academic/Summer\\ 2016/Programs/\", \"my-model-7001\")\n    saver.restore(sess, ckpt.model_checkpoint_path)\n    im = Image.open('/home/kendall/Desktop/HA900_frames/frame0635.tif')\n    batch_x = np.array(im)\n    prediction = sess.run(optimizer, feed_dict={x: batch_x})\n    print prediction", "body": "I'm trying to save and restore a model. From all the support I have found [here](https://www.tensorflow.org/versions/r0.9/how_tos/variables/index.html) & [here](http://stackoverflow.com/questions/33759623/tensorflow-how-to-restore-a-previously-saved-model-python) `Saver.save()` is supposed to save a model file of type `.ckpt` & then `Saver.restore()` is supposed to used that file name coupled with the directory it is in. However, my code does not save the files as .ckpt files, it just saves them as binary files. I could be wrong on that. My reasoning is that when I call `Saver.restore()` it returns None.\n\nThe files are being saved as `model.ckpt-10` and then `model.ckpt-20` and so on. I have the checkpoint text file. I've tried using that as well, but no luck.\n\n```\nsaver = tf.train.Saver()\nTRAIN_FLAG = 1\n\n# Launch the graph\nwith tf.Session() as sess:\n    sess.run(init)\n    # writer = tf.train.SummaryWriter(\"/tmp/logs\", sess.graph_def)\n    if TRAIN_FLAG:\n        from tensorflow.contrib.learn.python.learn.datasets.scroll import scroll_data\n        data = scroll_data.read_data('/home/kendall/Desktop/')\n        step = 1\n        flag = 0\n        while flag == 0:\n            batch_y, batch_x = data.train.next_batch(batch_size)\n            batch_x = batch_x.reshape((batch_size, n_input))\n            batch_y = batch_y.reshape((batch_size, n_classes))\n            # Run optimization op (backprop)\n            sess.run(optimizer, feed_dict={x: batch_x, y: batch_y})\n            if step % display_step == 0:\n                flag = 1\n                save_path = \"model.ckpt\"\n                saver.save(sess, save_path, global_step=step)\n                # Calculate batch accuracy\n                acc = sess.run(accuracy, feed_dict={x: batch_x, y: batch_y})\n                # Calculate batch loss\n                loss = sess.run(cost, feed_dict={x: batch_x, y: batch_y})\n                print \"Iter \" + str(step*batch_size) + \", Minibatch Loss= \" + \\\n                      \"{:.6f}\".format(loss) + \", Training Accuracy= \" + \\\n                      \"{:.5f}\".format(acc)\n            step += 1\n        print \"Optimization Finished!\"\nelse:\n    pdb.set_trace()\n    ckpt = tf.train.get_checkpoint_state(\"/home/kendall/Academic/Summer\\ 2016/Programs/\", \"my-model-7001\")\n    saver.restore(sess, ckpt.model_checkpoint_path)\n    im = Image.open('/home/kendall/Desktop/HA900_frames/frame0635.tif')\n    batch_x = np.array(im)\n    prediction = sess.run(optimizer, feed_dict={x: batch_x})\n    print prediction\n```\n"}