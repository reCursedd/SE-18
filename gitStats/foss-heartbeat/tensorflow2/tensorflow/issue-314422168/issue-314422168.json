{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18534", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18534/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18534/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18534/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18534", "id": 314422168, "node_id": "MDU6SXNzdWUzMTQ0MjIxNjg=", "number": 18534, "title": "ValueError: An initializer for variable conv2d/kernel of <dtype: 'string'> is required", "user": {"login": "bruce2k", "id": 34390621, "node_id": "MDQ6VXNlcjM0MzkwNjIx", "avatar_url": "https://avatars3.githubusercontent.com/u/34390621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruce2k", "html_url": "https://github.com/bruce2k", "followers_url": "https://api.github.com/users/bruce2k/followers", "following_url": "https://api.github.com/users/bruce2k/following{/other_user}", "gists_url": "https://api.github.com/users/bruce2k/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruce2k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruce2k/subscriptions", "organizations_url": "https://api.github.com/users/bruce2k/orgs", "repos_url": "https://api.github.com/users/bruce2k/repos", "events_url": "https://api.github.com/users/bruce2k/events{/privacy}", "received_events_url": "https://api.github.com/users/bruce2k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-04-15T14:51:20Z", "updated_at": "2018-04-16T13:39:14Z", "closed_at": "2018-04-16T13:39:14Z", "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nno</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 17.10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.7 cpu only</li>\n<li><strong>Python version</strong>:<br>\n3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nno</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>I want to train a CNN model classify images use keras model. Train data import from CSV files via pandas.  the dataset i frist want to change to float32 and split by ','but system return error, i change back to string  split by ' ', got error as below.</p>\n<p>When I call the train method, an error is thrown.</p>\n<p>How can I fix this?</p>\n<p>image size 48*48</p>\n<h3>Source code / logs</h3>\n<p>model:<br>\nimport numpy as np<br>\nimport pandas as pd<br>\nimport matplotlib.pyplot as plt<br>\nfrom PIL import Image<br>\n#import csv<br>\nfrom numpy import imag, float32</p>\n<p>import tensorflow as tf<br>\nfrom math import floor<br>\nimport sys</p>\n<p>TRAIN_CSV_COLUMN_NAMES=['label','feature']<br>\nTEST_CSV_COLUMN_NAMES=['id','feature']<br>\ntrainEpochs = 40<br>\nbatchSize = 100<br>\nLEARNING_RATE = 1e-4</p>\n<p>class Model(tf.keras.Model):<br>\ndef <strong>init</strong>(self):<br>\nsuper(Model, self).<strong>init</strong>()<br>\nself._input_shape = [-1,48,48,1]<br>\nself.conv1 = tf.layers.Conv2D(32,5,padding = 'same',data_format = 'channels_last',activation=tf.nn.relu)<br>\nself.conv2 = tf.layers.Conv2D(32,5,padding = 'same',data_format = 'channels_last',activation = tf.nn.relu)<br>\nself.conv3 = tf.layers.Conv2D(64,5,padding = 'same',data_format = 'channels_last',activation = tf.nn.relu)<br>\nself.max_pool2d = tf.layers.MaxPooling2D((2,2),(2,2),padding = 'same', data_format = 'channels_last')<br>\nself.fc1 = tf.layers.Dense(1600,activation=tf.nn.relu)<br>\nself.fc2 = tf.layers.Dense(7)<br>\nself.dropout = tf.layers.Dropout(0.4)<br>\ndef <strong>call</strong>(self,input,training):<br>\ny=tf.reshape(input,self._input_shape)<br>\ny=self.conv1(y)#error appear here<br>\ny=self.max_pool2d(y)<br>\ny=self.conv2(y)<br>\ny=self.max_pool2d(y)<br>\ny=self.conv3(y)</p>\n<pre><code>    y=tf.layers.flatten(y)\n    y=self.fc1(y,activation = tf.nn.relu)\n    y=self.dropout(y,training=training)\n    return self.fc2(y)\n</code></pre>\n<p>#load data from csv<br>\ndef dataLoad():<br>\noragTrainData = pd.read_csv('train.csv',names = TRAIN_CSV_COLUMN_NAMES ,header = 0)<br>\noragTestData = pd.read_csv('test.csv', names = TEST_CSV_COLUMN_NAMES, header = 0)<br>\ntrainData,valiData =  splitValid(oragTrainData,0.2)<br>\ntrainData,labels = trainData,trainData.pop('label')<br>\nvaliData,vaLabels = valiData, valiData.pop('label')<br>\ntestData,tId = oragTestData,oragTestData.pop('id')<br>\nreturn trainData,testData,valiData,labels,vaLabels,tId<br>\n#input function<br>\ndef trainDataInputFn():<br>\nfeatures = tf.data.Dataset.from_tensor_slices(trainData)<br>\nlabels = tf.data.Dataset.from_tensor_slices(trainLabels)<br>\nds = tf.data.Dataset.zip((features,labels))<br>\nds=ds.cache().shuffle(5000).batch(batchSize)<br>\nds = ds.make_one_shot_iterator().get_next()<br>\nreturn ds<br>\n#model_fn function<br>\ndef model_fn(features,labels,mode,params):<br>\nmodel = Model()<br>\nimages = features<br>\nif isinstance(images,dict):<br>\nimages = images['feature']</p>\n<pre><code>if mode == tf.estimator.ModeKeys.TRAIN:\n    optimizer = tf.train.AdamOptimizer(learning_rate=LEARNING_RATE)\n    logists = model(images, training=True)\n    loss = tf.losses.sparse_softmax_cross_entropy(labels = labels, logits=logists)\n    accuracy = tf.metrics.accuracy(labels=labels, predictions = logists)\n    \n    tf.identity(LEARNING_RATE, 'learning_rate')\n    tf.identity(loss,'loss')\n    tf.identity(accuracy,'accuracy')\n    \n    tf.summary.scalar(accuracy[1],name='training accuracy')\n    print('9999999999999999999999999999999999999999999999999999')\n    return tf.estimator.EstimatorSpec(mode = tf.estimator.ModeKeys.TRAIN,\n                                      loss = loss,\n                                      train_op = optimizer.minimize(loss, tf.train.get_or_create_global_step()))\n</code></pre>\n<p>pass to model data format:<br>\n[[b'35 7 7 7 5 10 16 8 30 66 111.....48 54 56 53 67']<br>\n...<br>\n[b'249 249 249 249 247 254 ......143 148 97 98 59 57']]</p>\n<p>error information<br>\nTraceback (most recent call last):<br>\nFile \"emontionClassfy.py\", line 218, in <br>\nmain(argv=sys.argv)<br>\nFile \"emontionClassfy.py\", line 206, in main<br>\nemontionClassify.train(input_fn=trainDataInputFn)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py\", line 355, in train<br>\nloss = self._train_model(input_fn, hooks, saving_listeners)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py\", line 824, in _train_model<br>\nfeatures, labels, model_fn_lib.ModeKeys.TRAIN, self.config)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py\", line 805, in _call_model_fn<br>\nmodel_fn_results = self._model_fn(features=features, **kwargs)<br>\nFile \"emontionClassfy.py\", line 134, in model_fn<br>\nlogists = model(images, training=True)<br>\nFile \"emontionClassfy.py\", line 45, in <strong>call</strong><br>\ny=self.conv1(y)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/layers/base.py\", line 696, in <strong>call</strong><br>\nself.build(input_shapes)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/layers/convolutional.py\", line 144, in build<br>\ndtype=self.dtype)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/layers/base.py\", line 546, in add_variable<br>\npartitioner=partitioner)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/training/checkpointable.py\", line 415, in _add_variable_with_custom_getter<br>\n**kwargs_for_getter)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 1297, in get_variable<br>\nconstraint=constraint)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 1093, in get_variable<br>\nconstraint=constraint)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 439, in get_variable<br>\nconstraint=constraint)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 408, in _true_getter<br>\nuse_resource=use_resource, constraint=constraint)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 773, in _get_single_variable<br>\nname=name, shape=shape, dtype=dtype)<br>\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 853, in _get_default_initializer<br>\n% (name, dtype.base_dtype))<br>\nValueError: An initializer for variable conv2d/kernel of &lt;dtype: 'string'&gt; is required</p>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nno\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 17.10\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\n1.7 cpu only\nPython version:\n3.6.5\nBazel version (if compiling from source):\nno\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nI want to train a CNN model classify images use keras model. Train data import from CSV files via pandas.  the dataset i frist want to change to float32 and split by ','but system return error, i change back to string  split by ' ', got error as below.\nWhen I call the train method, an error is thrown.\nHow can I fix this?\nimage size 48*48\nSource code / logs\nmodel:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n#import csv\nfrom numpy import imag, float32\nimport tensorflow as tf\nfrom math import floor\nimport sys\nTRAIN_CSV_COLUMN_NAMES=['label','feature']\nTEST_CSV_COLUMN_NAMES=['id','feature']\ntrainEpochs = 40\nbatchSize = 100\nLEARNING_RATE = 1e-4\nclass Model(tf.keras.Model):\ndef init(self):\nsuper(Model, self).init()\nself._input_shape = [-1,48,48,1]\nself.conv1 = tf.layers.Conv2D(32,5,padding = 'same',data_format = 'channels_last',activation=tf.nn.relu)\nself.conv2 = tf.layers.Conv2D(32,5,padding = 'same',data_format = 'channels_last',activation = tf.nn.relu)\nself.conv3 = tf.layers.Conv2D(64,5,padding = 'same',data_format = 'channels_last',activation = tf.nn.relu)\nself.max_pool2d = tf.layers.MaxPooling2D((2,2),(2,2),padding = 'same', data_format = 'channels_last')\nself.fc1 = tf.layers.Dense(1600,activation=tf.nn.relu)\nself.fc2 = tf.layers.Dense(7)\nself.dropout = tf.layers.Dropout(0.4)\ndef call(self,input,training):\ny=tf.reshape(input,self._input_shape)\ny=self.conv1(y)#error appear here\ny=self.max_pool2d(y)\ny=self.conv2(y)\ny=self.max_pool2d(y)\ny=self.conv3(y)\n    y=tf.layers.flatten(y)\n    y=self.fc1(y,activation = tf.nn.relu)\n    y=self.dropout(y,training=training)\n    return self.fc2(y)\n\n#load data from csv\ndef dataLoad():\noragTrainData = pd.read_csv('train.csv',names = TRAIN_CSV_COLUMN_NAMES ,header = 0)\noragTestData = pd.read_csv('test.csv', names = TEST_CSV_COLUMN_NAMES, header = 0)\ntrainData,valiData =  splitValid(oragTrainData,0.2)\ntrainData,labels = trainData,trainData.pop('label')\nvaliData,vaLabels = valiData, valiData.pop('label')\ntestData,tId = oragTestData,oragTestData.pop('id')\nreturn trainData,testData,valiData,labels,vaLabels,tId\n#input function\ndef trainDataInputFn():\nfeatures = tf.data.Dataset.from_tensor_slices(trainData)\nlabels = tf.data.Dataset.from_tensor_slices(trainLabels)\nds = tf.data.Dataset.zip((features,labels))\nds=ds.cache().shuffle(5000).batch(batchSize)\nds = ds.make_one_shot_iterator().get_next()\nreturn ds\n#model_fn function\ndef model_fn(features,labels,mode,params):\nmodel = Model()\nimages = features\nif isinstance(images,dict):\nimages = images['feature']\nif mode == tf.estimator.ModeKeys.TRAIN:\n    optimizer = tf.train.AdamOptimizer(learning_rate=LEARNING_RATE)\n    logists = model(images, training=True)\n    loss = tf.losses.sparse_softmax_cross_entropy(labels = labels, logits=logists)\n    accuracy = tf.metrics.accuracy(labels=labels, predictions = logists)\n    \n    tf.identity(LEARNING_RATE, 'learning_rate')\n    tf.identity(loss,'loss')\n    tf.identity(accuracy,'accuracy')\n    \n    tf.summary.scalar(accuracy[1],name='training accuracy')\n    print('9999999999999999999999999999999999999999999999999999')\n    return tf.estimator.EstimatorSpec(mode = tf.estimator.ModeKeys.TRAIN,\n                                      loss = loss,\n                                      train_op = optimizer.minimize(loss, tf.train.get_or_create_global_step()))\n\npass to model data format:\n[[b'35 7 7 7 5 10 16 8 30 66 111.....48 54 56 53 67']\n...\n[b'249 249 249 249 247 254 ......143 148 97 98 59 57']]\nerror information\nTraceback (most recent call last):\nFile \"emontionClassfy.py\", line 218, in \nmain(argv=sys.argv)\nFile \"emontionClassfy.py\", line 206, in main\nemontionClassify.train(input_fn=trainDataInputFn)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py\", line 355, in train\nloss = self._train_model(input_fn, hooks, saving_listeners)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py\", line 824, in _train_model\nfeatures, labels, model_fn_lib.ModeKeys.TRAIN, self.config)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py\", line 805, in _call_model_fn\nmodel_fn_results = self._model_fn(features=features, **kwargs)\nFile \"emontionClassfy.py\", line 134, in model_fn\nlogists = model(images, training=True)\nFile \"emontionClassfy.py\", line 45, in call\ny=self.conv1(y)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/layers/base.py\", line 696, in call\nself.build(input_shapes)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/layers/convolutional.py\", line 144, in build\ndtype=self.dtype)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/layers/base.py\", line 546, in add_variable\npartitioner=partitioner)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/training/checkpointable.py\", line 415, in _add_variable_with_custom_getter\n**kwargs_for_getter)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 1297, in get_variable\nconstraint=constraint)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 1093, in get_variable\nconstraint=constraint)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 439, in get_variable\nconstraint=constraint)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 408, in _true_getter\nuse_resource=use_resource, constraint=constraint)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 773, in _get_single_variable\nname=name, shape=shape, dtype=dtype)\nFile \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 853, in _get_default_initializer\n% (name, dtype.base_dtype))\nValueError: An initializer for variable conv2d/kernel of <dtype: 'string'> is required", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nno\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 17.10\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\n1.7 cpu only\r\n- **Python version**: \r\n3.6.5\r\n- **Bazel version (if compiling from source)**:\r\nno\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nI want to train a CNN model classify images use keras model. Train data import from CSV files via pandas.  the dataset i frist want to change to float32 and split by ','but system return error, i change back to string  split by ' ', got error as below.\r\n\r\nWhen I call the train method, an error is thrown.\r\n\r\nHow can I fix this?\r\n\r\nimage size 48*48\r\n\r\n### Source code / logs\r\nmodel:\r\nimport numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nfrom PIL import Image\r\n#import csv\r\nfrom numpy import imag, float32\r\n\r\nimport tensorflow as tf\r\nfrom math import floor\r\nimport sys\r\n\r\n\r\nTRAIN_CSV_COLUMN_NAMES=['label','feature']\r\nTEST_CSV_COLUMN_NAMES=['id','feature']\r\ntrainEpochs = 40\r\nbatchSize = 100\r\nLEARNING_RATE = 1e-4\r\n\r\nclass Model(tf.keras.Model):\r\n    def __init__(self):\r\n        super(Model, self).__init__()\r\n        self._input_shape = [-1,48,48,1]\r\n        self.conv1 = tf.layers.Conv2D(32,5,padding = 'same',data_format = 'channels_last',activation=tf.nn.relu)\r\n        self.conv2 = tf.layers.Conv2D(32,5,padding = 'same',data_format = 'channels_last',activation = tf.nn.relu)\r\n        self.conv3 = tf.layers.Conv2D(64,5,padding = 'same',data_format = 'channels_last',activation = tf.nn.relu)\r\n        self.max_pool2d = tf.layers.MaxPooling2D((2,2),(2,2),padding = 'same', data_format = 'channels_last')\r\n        self.fc1 = tf.layers.Dense(1600,activation=tf.nn.relu)\r\n        self.fc2 = tf.layers.Dense(7)\r\n        self.dropout = tf.layers.Dropout(0.4)\r\n    def __call__(self,input,training):\r\n        y=tf.reshape(input,self._input_shape)\r\n        y=self.conv1(y)#error appear here\r\n        y=self.max_pool2d(y)\r\n        y=self.conv2(y)\r\n        y=self.max_pool2d(y)\r\n        y=self.conv3(y)\r\n        \r\n        y=tf.layers.flatten(y)\r\n        y=self.fc1(y,activation = tf.nn.relu)\r\n        y=self.dropout(y,training=training)\r\n        return self.fc2(y)\r\n\r\n\r\n#load data from csv    \r\ndef dataLoad():\r\n    oragTrainData = pd.read_csv('train.csv',names = TRAIN_CSV_COLUMN_NAMES ,header = 0)\r\n    oragTestData = pd.read_csv('test.csv', names = TEST_CSV_COLUMN_NAMES, header = 0)\r\n    trainData,valiData =  splitValid(oragTrainData,0.2)\r\n    trainData,labels = trainData,trainData.pop('label')\r\n    valiData,vaLabels = valiData, valiData.pop('label')\r\n    testData,tId = oragTestData,oragTestData.pop('id')\r\n    return trainData,testData,valiData,labels,vaLabels,tId\r\n#input function\r\n def trainDataInputFn(): \r\n        features = tf.data.Dataset.from_tensor_slices(trainData)\r\n        labels = tf.data.Dataset.from_tensor_slices(trainLabels)\r\n        ds = tf.data.Dataset.zip((features,labels))\r\n        ds=ds.cache().shuffle(5000).batch(batchSize)\r\n        ds = ds.make_one_shot_iterator().get_next()\r\n        return ds\r\n#model_fn function\r\ndef model_fn(features,labels,mode,params):\r\n    model = Model()\r\n    images = features\r\n    if isinstance(images,dict):\r\n        images = images['feature']\r\n    \r\n    if mode == tf.estimator.ModeKeys.TRAIN:\r\n        optimizer = tf.train.AdamOptimizer(learning_rate=LEARNING_RATE)\r\n        logists = model(images, training=True)\r\n        loss = tf.losses.sparse_softmax_cross_entropy(labels = labels, logits=logists)\r\n        accuracy = tf.metrics.accuracy(labels=labels, predictions = logists)\r\n        \r\n        tf.identity(LEARNING_RATE, 'learning_rate')\r\n        tf.identity(loss,'loss')\r\n        tf.identity(accuracy,'accuracy')\r\n        \r\n        tf.summary.scalar(accuracy[1],name='training accuracy')\r\n        print('9999999999999999999999999999999999999999999999999999')\r\n        return tf.estimator.EstimatorSpec(mode = tf.estimator.ModeKeys.TRAIN,\r\n                                          loss = loss,\r\n                                          train_op = optimizer.minimize(loss, tf.train.get_or_create_global_step()))\r\npass to model data format:\r\n[[b'35 7 7 7 5 10 16 8 30 66 111.....48 54 56 53 67']\r\n...\r\n[b'249 249 249 249 247 254 ......143 148 97 98 59 57']]\r\n\r\nerror information\r\nTraceback (most recent call last):\r\n  File \"emontionClassfy.py\", line 218, in <module>\r\n    main(argv=sys.argv)  \r\n  File \"emontionClassfy.py\", line 206, in main\r\n    emontionClassify.train(input_fn=trainDataInputFn)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py\", line 355, in train\r\n    loss = self._train_model(input_fn, hooks, saving_listeners)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py\", line 824, in _train_model\r\n    features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/estimator/estimator.py\", line 805, in _call_model_fn\r\n    model_fn_results = self._model_fn(features=features, **kwargs)\r\n  File \"emontionClassfy.py\", line 134, in model_fn\r\n    logists = model(images, training=True)\r\n  File \"emontionClassfy.py\", line 45, in __call__\r\n    y=self.conv1(y)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/layers/base.py\", line 696, in __call__\r\n    self.build(input_shapes)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/layers/convolutional.py\", line 144, in build\r\n    dtype=self.dtype)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/layers/base.py\", line 546, in add_variable\r\n    partitioner=partitioner)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/training/checkpointable.py\", line 415, in _add_variable_with_custom_getter\r\n    **kwargs_for_getter)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 1297, in get_variable\r\n    constraint=constraint)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 1093, in get_variable\r\n    constraint=constraint)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 439, in get_variable\r\n    constraint=constraint)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 408, in _true_getter\r\n    use_resource=use_resource, constraint=constraint)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 773, in _get_single_variable\r\n    name=name, shape=shape, dtype=dtype)\r\n  File \"/home/bruce/tensorflow/lib/python3.6/site-packages/tensorflow/python/ops/variable_scope.py\", line 853, in _get_default_initializer\r\n    % (name, dtype.base_dtype))\r\nValueError: An initializer for variable conv2d/kernel of <dtype: 'string'> is required\r\n"}