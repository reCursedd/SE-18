{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10227", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10227/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10227/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10227/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10227", "id": 231691383, "node_id": "MDU6SXNzdWUyMzE2OTEzODM=", "number": 10227, "title": "Add an option to enable CORS in TensorBoard", "user": {"login": "darthdeus", "id": 123374, "node_id": "MDQ6VXNlcjEyMzM3NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/123374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darthdeus", "html_url": "https://github.com/darthdeus", "followers_url": "https://api.github.com/users/darthdeus/followers", "following_url": "https://api.github.com/users/darthdeus/following{/other_user}", "gists_url": "https://api.github.com/users/darthdeus/gists{/gist_id}", "starred_url": "https://api.github.com/users/darthdeus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darthdeus/subscriptions", "organizations_url": "https://api.github.com/users/darthdeus/orgs", "repos_url": "https://api.github.com/users/darthdeus/repos", "events_url": "https://api.github.com/users/darthdeus/events{/privacy}", "received_events_url": "https://api.github.com/users/darthdeus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 284285184, "node_id": "MDU6TGFiZWwyODQyODUxODQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:tensorboard", "name": "comp:tensorboard", "color": "0052cc", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-05-26T17:41:33Z", "updated_at": "2017-06-16T22:14:46Z", "closed_at": "2017-06-16T22:14:10Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:  b'unknown' 1.1.0</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 8, cuDNN 5.1</li>\n<li><strong>GPU model and memory</strong>: 1080ti 11GB</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/deepdream/deepdream.ipynb\">DeepDream notebook example</a> in TensorFlow provides a snippet that uses <a href=\"https://tensorboard.appspot.com\" rel=\"nofollow\">https://tensorboard.appspot.com</a> to embed <code>&lt;iframe&gt;</code>s inside a Jupyter notebook. Changing this snippet to point to a local instance of TensorBoard fails with a CORS error</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/645789450a6f00dacf5fdf338a7a3b5bf73a902c/687474703a2f2f692e696d6775722e636f6d2f576f6757504f522e706e67\"><img src=\"https://camo.githubusercontent.com/645789450a6f00dacf5fdf338a7a3b5bf73a902c/687474703a2f2f692e696d6775722e636f6d2f576f6757504f522e706e67\" alt=\"\" data-canonical-src=\"http://i.imgur.com/WogWPOR.png\" style=\"max-width:100%;\"></a></p>\n<p>Having the option to enable CORS when starting TensorBoard, or enabling it by default, would make it really easy to use the snippet to visualize directly in Jupyter using a local instance of TensorBoard.</p>\n<h3>Source code / logs</h3>\n<p>Here's the snippet in its whole, with modified URL to point to <code>http://localhost:6006</code> instead of <code>https://tensorboard.appspot.com</code></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> TensorFlow Graph visualizer code</span>\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">from</span> IPython.display <span class=\"pl-k\">import</span> clear_output, Image, display, <span class=\"pl-c1\">HTML</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">strip_consts</span>(<span class=\"pl-smi\">graph_def</span>, <span class=\"pl-smi\">max_const_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Strip large constant values from graph_def.<span class=\"pl-pds\">\"\"\"</span></span>\n    strip_def <span class=\"pl-k\">=</span> tf.GraphDef()\n    <span class=\"pl-k\">for</span> n0 <span class=\"pl-k\">in</span> graph_def.node:\n        n <span class=\"pl-k\">=</span> strip_def.node.add() \n        n.MergeFrom(n0)\n        <span class=\"pl-k\">if</span> n.op <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Const<span class=\"pl-pds\">'</span></span>:\n            tensor <span class=\"pl-k\">=</span> n.attr[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>value<span class=\"pl-pds\">'</span></span>].tensor\n            size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">len</span>(tensor.tensor_content)\n            <span class=\"pl-k\">if</span> size <span class=\"pl-k\">&gt;</span> max_const_size:\n                tensor.tensor_content <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stripped <span class=\"pl-c1\">%d</span> bytes&gt;<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">%</span>size\n    <span class=\"pl-k\">return</span> strip_def\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">show_graph</span>(<span class=\"pl-smi\">graph_def</span>, <span class=\"pl-smi\">max_const_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Visualize TensorFlow graph.<span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">hasattr</span>(graph_def, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>as_graph_def<span class=\"pl-pds\">'</span></span>):\n        graph_def <span class=\"pl-k\">=</span> graph_def.as_graph_def()\n    strip_def <span class=\"pl-k\">=</span> strip_consts(graph_def, <span class=\"pl-v\">max_const_size</span><span class=\"pl-k\">=</span>max_const_size)\n    code <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">        &lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/polymer/0.3.3/platform.js\"&gt;&lt;/script&gt;</span>\n<span class=\"pl-s\">        &lt;script&gt;</span>\n<span class=\"pl-s\">          function load() <span class=\"pl-c1\">{{</span></span>\n<span class=\"pl-s\">            document.getElementById(\"<span class=\"pl-c1\">{id}</span>\").pbtxt = <span class=\"pl-c1\">{data}</span>;</span>\n<span class=\"pl-s\">          <span class=\"pl-c1\">}}</span></span>\n<span class=\"pl-s\">        &lt;/script&gt;</span>\n<span class=\"pl-s\">        &lt;link rel=\"import\" href=\"http://localhost:6006/tf-graph-basic.build.html\" onload=load()&gt;</span>\n<span class=\"pl-s\">        &lt;div style=\"height:600px\"&gt;</span>\n<span class=\"pl-s\">          &lt;tf-graph-basic id=\"<span class=\"pl-c1\">{id}</span>\"&gt;&lt;/tf-graph-basic&gt;</span>\n<span class=\"pl-s\">        &lt;/div&gt;</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>.format(<span class=\"pl-v\">data</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">repr</span>(<span class=\"pl-c1\">str</span>(strip_def)), <span class=\"pl-v\">id</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>graph<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">+</span><span class=\"pl-c1\">str</span>(np.random.rand()))\n\n    iframe <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">        &lt;iframe seamless style=\"width:1200px;height:620px;border:0\" srcdoc=\"<span class=\"pl-c1\">{}</span>\"&gt;&lt;/iframe&gt;</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>.format(code.replace(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>\"<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>&amp;quot;<span class=\"pl-pds\">'</span></span>))\n    display(HTML(iframe))</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below):  b'unknown' 1.1.0\nBazel version (if compiling from source): N/A\nCUDA/cuDNN version: CUDA 8, cuDNN 5.1\nGPU model and memory: 1080ti 11GB\nExact command to reproduce: N/A\n\nDescribe the problem\nThe DeepDream notebook example in TensorFlow provides a snippet that uses https://tensorboard.appspot.com to embed <iframe>s inside a Jupyter notebook. Changing this snippet to point to a local instance of TensorBoard fails with a CORS error\n\nHaving the option to enable CORS when starting TensorBoard, or enabling it by default, would make it really easy to use the snippet to visualize directly in Jupyter using a local instance of TensorBoard.\nSource code / logs\nHere's the snippet in its whole, with modified URL to point to http://localhost:6006 instead of https://tensorboard.appspot.com\n# TensorFlow Graph visualizer code\nimport numpy as np\nfrom IPython.display import clear_output, Image, display, HTML\n\ndef strip_consts(graph_def, max_const_size=32):\n    \"\"\"Strip large constant values from graph_def.\"\"\"\n    strip_def = tf.GraphDef()\n    for n0 in graph_def.node:\n        n = strip_def.node.add() \n        n.MergeFrom(n0)\n        if n.op == 'Const':\n            tensor = n.attr['value'].tensor\n            size = len(tensor.tensor_content)\n            if size > max_const_size:\n                tensor.tensor_content = \"<stripped %d bytes>\"%size\n    return strip_def\n\ndef show_graph(graph_def, max_const_size=32):\n    \"\"\"Visualize TensorFlow graph.\"\"\"\n    if hasattr(graph_def, 'as_graph_def'):\n        graph_def = graph_def.as_graph_def()\n    strip_def = strip_consts(graph_def, max_const_size=max_const_size)\n    code = \"\"\"\n        <script src=\"//cdnjs.cloudflare.com/ajax/libs/polymer/0.3.3/platform.js\"></script>\n        <script>\n          function load() {{\n            document.getElementById(\"{id}\").pbtxt = {data};\n          }}\n        </script>\n        <link rel=\"import\" href=\"http://localhost:6006/tf-graph-basic.build.html\" onload=load()>\n        <div style=\"height:600px\">\n          <tf-graph-basic id=\"{id}\"></tf-graph-basic>\n        </div>\n    \"\"\".format(data=repr(str(strip_def)), id='graph'+str(np.random.rand()))\n\n    iframe = \"\"\"\n        <iframe seamless style=\"width:1200px;height:620px;border:0\" srcdoc=\"{}\"></iframe>\n    \"\"\".format(code.replace('\"', '&quot;'))\n    display(HTML(iframe))", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**:  b'unknown' 1.1.0\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: CUDA 8, cuDNN 5.1\r\n- **GPU model and memory**: 1080ti 11GB\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\n\r\nThe [DeepDream notebook example](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/deepdream/deepdream.ipynb) in TensorFlow provides a snippet that uses https://tensorboard.appspot.com to embed `<iframe>`s inside a Jupyter notebook. Changing this snippet to point to a local instance of TensorBoard fails with a CORS error\r\n\r\n![](http://i.imgur.com/WogWPOR.png)\r\n\r\nHaving the option to enable CORS when starting TensorBoard, or enabling it by default, would make it really easy to use the snippet to visualize directly in Jupyter using a local instance of TensorBoard.\r\n\r\n### Source code / logs\r\n\r\nHere's the snippet in its whole, with modified URL to point to `http://localhost:6006` instead of `https://tensorboard.appspot.com`\r\n\r\n```python\r\n# TensorFlow Graph visualizer code\r\nimport numpy as np\r\nfrom IPython.display import clear_output, Image, display, HTML\r\n\r\ndef strip_consts(graph_def, max_const_size=32):\r\n    \"\"\"Strip large constant values from graph_def.\"\"\"\r\n    strip_def = tf.GraphDef()\r\n    for n0 in graph_def.node:\r\n        n = strip_def.node.add() \r\n        n.MergeFrom(n0)\r\n        if n.op == 'Const':\r\n            tensor = n.attr['value'].tensor\r\n            size = len(tensor.tensor_content)\r\n            if size > max_const_size:\r\n                tensor.tensor_content = \"<stripped %d bytes>\"%size\r\n    return strip_def\r\n\r\ndef show_graph(graph_def, max_const_size=32):\r\n    \"\"\"Visualize TensorFlow graph.\"\"\"\r\n    if hasattr(graph_def, 'as_graph_def'):\r\n        graph_def = graph_def.as_graph_def()\r\n    strip_def = strip_consts(graph_def, max_const_size=max_const_size)\r\n    code = \"\"\"\r\n        <script src=\"//cdnjs.cloudflare.com/ajax/libs/polymer/0.3.3/platform.js\"></script>\r\n        <script>\r\n          function load() {{\r\n            document.getElementById(\"{id}\").pbtxt = {data};\r\n          }}\r\n        </script>\r\n        <link rel=\"import\" href=\"http://localhost:6006/tf-graph-basic.build.html\" onload=load()>\r\n        <div style=\"height:600px\">\r\n          <tf-graph-basic id=\"{id}\"></tf-graph-basic>\r\n        </div>\r\n    \"\"\".format(data=repr(str(strip_def)), id='graph'+str(np.random.rand()))\r\n\r\n    iframe = \"\"\"\r\n        <iframe seamless style=\"width:1200px;height:620px;border:0\" srcdoc=\"{}\"></iframe>\r\n    \"\"\".format(code.replace('\"', '&quot;'))\r\n    display(HTML(iframe))\r\n```"}