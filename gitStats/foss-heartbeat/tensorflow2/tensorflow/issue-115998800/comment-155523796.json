{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/155523796", "html_url": "https://github.com/tensorflow/tensorflow/issues/53#issuecomment-155523796", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/53", "id": 155523796, "node_id": "MDEyOklzc3VlQ29tbWVudDE1NTUyMzc5Ng==", "user": {"login": "jendap", "id": 567848, "node_id": "MDQ6VXNlcjU2Nzg0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/567848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jendap", "html_url": "https://github.com/jendap", "followers_url": "https://api.github.com/users/jendap/followers", "following_url": "https://api.github.com/users/jendap/following{/other_user}", "gists_url": "https://api.github.com/users/jendap/gists{/gist_id}", "starred_url": "https://api.github.com/users/jendap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jendap/subscriptions", "organizations_url": "https://api.github.com/users/jendap/orgs", "repos_url": "https://api.github.com/users/jendap/repos", "events_url": "https://api.github.com/users/jendap/events{/privacy}", "received_events_url": "https://api.github.com/users/jendap/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-10T18:31:05Z", "updated_at": "2015-11-10T18:31:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Upgrading ubuntu is definitely the best way to go. But if not...</p>\n<p>I would not upgrade the system libc.so on the shared cluster. It should be backward compatible but there are regression here and there. You can still make it work if you want to. If you grep libc from newer package [http://packages.ubuntu.com/trusty/libc6](click on amd64). You can extract that deb. Then you can use LD_PRELOAD the files from content directory. See something like [https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/] or [http://stackoverflow.com/questions/5223971/question-about-overriding-c-standard-library-functions-and-how-to-link-everythin].</p>\n<p>Libc has pretty much no dependencies but kernel. I believe tensorflow does not need anything fancy new there. Newer libc in custom directory and LD_PRELOAD trick should allow you to run the bazel binaries from download as well as the tensorflow pip (you may not need to recompile anymore). Good for shared cluster with old system.</p>\n<p>BTW: Google / bazel philosophy is to rebuild everything from sources (that's why bazel download so many git repos). That also means there are very little external dependencies. But yes, it depends on libc.</p>", "body_text": "Upgrading ubuntu is definitely the best way to go. But if not...\nI would not upgrade the system libc.so on the shared cluster. It should be backward compatible but there are regression here and there. You can still make it work if you want to. If you grep libc from newer package [http://packages.ubuntu.com/trusty/libc6](click on amd64). You can extract that deb. Then you can use LD_PRELOAD the files from content directory. See something like [https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/] or [http://stackoverflow.com/questions/5223971/question-about-overriding-c-standard-library-functions-and-how-to-link-everythin].\nLibc has pretty much no dependencies but kernel. I believe tensorflow does not need anything fancy new there. Newer libc in custom directory and LD_PRELOAD trick should allow you to run the bazel binaries from download as well as the tensorflow pip (you may not need to recompile anymore). Good for shared cluster with old system.\nBTW: Google / bazel philosophy is to rebuild everything from sources (that's why bazel download so many git repos). That also means there are very little external dependencies. But yes, it depends on libc.", "body": "Upgrading ubuntu is definitely the best way to go. But if not...\n\nI would not upgrade the system libc.so on the shared cluster. It should be backward compatible but there are regression here and there. You can still make it work if you want to. If you grep libc from newer package [http://packages.ubuntu.com/trusty/libc6](click on amd64). You can extract that deb. Then you can use LD_PRELOAD the files from content directory. See something like [https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/] or [http://stackoverflow.com/questions/5223971/question-about-overriding-c-standard-library-functions-and-how-to-link-everythin].\n\nLibc has pretty much no dependencies but kernel. I believe tensorflow does not need anything fancy new there. Newer libc in custom directory and LD_PRELOAD trick should allow you to run the bazel binaries from download as well as the tensorflow pip (you may not need to recompile anymore). Good for shared cluster with old system.\n\nBTW: Google / bazel philosophy is to rebuild everything from sources (that's why bazel download so many git repos). That also means there are very little external dependencies. But yes, it depends on libc.\n"}