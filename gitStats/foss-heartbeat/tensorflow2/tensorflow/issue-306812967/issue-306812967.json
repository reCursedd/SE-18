{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17856", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17856/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17856/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17856/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17856", "id": 306812967, "node_id": "MDU6SXNzdWUzMDY4MTI5Njc=", "number": 17856, "title": "second order differential of fused_batch_norm makes a large number of nodes.", "user": {"login": "laket", "id": 1290076, "node_id": "MDQ6VXNlcjEyOTAwNzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1290076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laket", "html_url": "https://github.com/laket", "followers_url": "https://api.github.com/users/laket/followers", "following_url": "https://api.github.com/users/laket/following{/other_user}", "gists_url": "https://api.github.com/users/laket/gists{/gist_id}", "starred_url": "https://api.github.com/users/laket/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laket/subscriptions", "organizations_url": "https://api.github.com/users/laket/orgs", "repos_url": "https://api.github.com/users/laket/repos", "events_url": "https://api.github.com/users/laket/events{/privacy}", "received_events_url": "https://api.github.com/users/laket/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-03-20T10:46:47Z", "updated_at": "2018-04-09T06:23:45Z", "closed_at": "2018-03-30T01:53:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I found that the second order differential of tf.nn.fused_batch_norm has much larger number of nodes than that of tf.nn.batch_normalization.</p>\n<p>I wrote a sample program which has 7 batch normalization layers. Using tf.nn.fused_batch_norm, it has about 22,000 nodes. On the other hand, using tf.nn.batch_normalization, it has only 1700 nodes (I counted with tensorboard). Is this a reasonable behavior?</p>\n<h3>Source Code</h3>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\nuse_fused_batch_norm = False\n\nwith tf.name_scope(\"network\"):\n    featmap = tf.constant(np.random.rand(3,3,32,32), dtype=tf.float32)\n\n    for i in range(7):\n        with tf.name_scope(\"layer{}\".format(i)):\n            if use_fused_batch_norm:\n                beta = tf.Variable(np.zeros(3), name=\"beta\", dtype=np.float32)\n                gamma = tf.Variable(np.ones(3), name=\"gamma\", dtype=np.float32)\n                featmap, _, _ = tf.nn.fused_batch_norm(featmap, gamma, beta, data_format=\"NCHW\")\n\n            else:\n                beta = tf.Variable(np.zeros([1,3,1,1]), name=\"beta\", dtype=np.float32)\n                gamma = tf.Variable(np.ones([1,3,1,1]), name=\"gamma\", dtype=np.float32)\n                mu, sigma = tf.nn.moments(featmap, axes=[0,2,3], keep_dims=True)\n\n                featmap = tf.nn.batch_normalization(featmap, mu, sigma, beta, gamma, variance_epsilon=1e-07)\n\n    y = tf.reduce_mean(featmap, axis=[1,2,3])\n\nW = tf.trainable_variables()\n\nwith tf.name_scope(\"rop\"):\n    temporary = tf.ones_like(y)\n    grad      = tf.gradients(y, W, grad_ys=temporary)\n    r         = [tf.ones_like(t) for t in W]\n    ggrad     = tf.gradients(grad, temporary, grad_ys=r)[0]\n\n\nwith tf.Session() as sess:\n    summary_writer = tf.summary.FileWriter(\"log\",\n                                           sess.graph)\n\n</code></pre>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n('v1.5.0-0-g37aa430d84', '1.5.0')</li>\n<li><strong>Python version</strong>:<br>\n2.7.12</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\ncuda9 / cudnn 7.0.5</li>\n<li><strong>GPU model and memory</strong>:<br>\nGTX 1080, 8GB</li>\n<li><strong>Exact command to reproduce</strong>:<br>\npython main.py</li>\n<li><strong>Bazel version</strong><br>\nN/A</li>\n</ul>", "body_text": "I found that the second order differential of tf.nn.fused_batch_norm has much larger number of nodes than that of tf.nn.batch_normalization.\nI wrote a sample program which has 7 batch normalization layers. Using tf.nn.fused_batch_norm, it has about 22,000 nodes. On the other hand, using tf.nn.batch_normalization, it has only 1700 nodes (I counted with tensorboard). Is this a reasonable behavior?\nSource Code\nimport numpy as np\nimport tensorflow as tf\n\nuse_fused_batch_norm = False\n\nwith tf.name_scope(\"network\"):\n    featmap = tf.constant(np.random.rand(3,3,32,32), dtype=tf.float32)\n\n    for i in range(7):\n        with tf.name_scope(\"layer{}\".format(i)):\n            if use_fused_batch_norm:\n                beta = tf.Variable(np.zeros(3), name=\"beta\", dtype=np.float32)\n                gamma = tf.Variable(np.ones(3), name=\"gamma\", dtype=np.float32)\n                featmap, _, _ = tf.nn.fused_batch_norm(featmap, gamma, beta, data_format=\"NCHW\")\n\n            else:\n                beta = tf.Variable(np.zeros([1,3,1,1]), name=\"beta\", dtype=np.float32)\n                gamma = tf.Variable(np.ones([1,3,1,1]), name=\"gamma\", dtype=np.float32)\n                mu, sigma = tf.nn.moments(featmap, axes=[0,2,3], keep_dims=True)\n\n                featmap = tf.nn.batch_normalization(featmap, mu, sigma, beta, gamma, variance_epsilon=1e-07)\n\n    y = tf.reduce_mean(featmap, axis=[1,2,3])\n\nW = tf.trainable_variables()\n\nwith tf.name_scope(\"rop\"):\n    temporary = tf.ones_like(y)\n    grad      = tf.gradients(y, W, grad_ys=temporary)\n    r         = [tf.ones_like(t) for t in W]\n    ggrad     = tf.gradients(grad, temporary, grad_ys=r)[0]\n\n\nwith tf.Session() as sess:\n    summary_writer = tf.summary.FileWriter(\"log\",\n                                           sess.graph)\n\n\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 16.04\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\n('v1.5.0-0-g37aa430d84', '1.5.0')\nPython version:\n2.7.12\nCUDA/cuDNN version:\ncuda9 / cudnn 7.0.5\nGPU model and memory:\nGTX 1080, 8GB\nExact command to reproduce:\npython main.py\nBazel version\nN/A", "body": "I found that the second order differential of tf.nn.fused_batch_norm has much larger number of nodes than that of tf.nn.batch_normalization. \r\n\r\nI wrote a sample program which has 7 batch normalization layers. Using tf.nn.fused_batch_norm, it has about 22,000 nodes. On the other hand, using tf.nn.batch_normalization, it has only 1700 nodes (I counted with tensorboard). Is this a reasonable behavior?\r\n\r\n### Source Code\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nuse_fused_batch_norm = False\r\n\r\nwith tf.name_scope(\"network\"):\r\n    featmap = tf.constant(np.random.rand(3,3,32,32), dtype=tf.float32)\r\n\r\n    for i in range(7):\r\n        with tf.name_scope(\"layer{}\".format(i)):\r\n            if use_fused_batch_norm:\r\n                beta = tf.Variable(np.zeros(3), name=\"beta\", dtype=np.float32)\r\n                gamma = tf.Variable(np.ones(3), name=\"gamma\", dtype=np.float32)\r\n                featmap, _, _ = tf.nn.fused_batch_norm(featmap, gamma, beta, data_format=\"NCHW\")\r\n\r\n            else:\r\n                beta = tf.Variable(np.zeros([1,3,1,1]), name=\"beta\", dtype=np.float32)\r\n                gamma = tf.Variable(np.ones([1,3,1,1]), name=\"gamma\", dtype=np.float32)\r\n                mu, sigma = tf.nn.moments(featmap, axes=[0,2,3], keep_dims=True)\r\n\r\n                featmap = tf.nn.batch_normalization(featmap, mu, sigma, beta, gamma, variance_epsilon=1e-07)\r\n\r\n    y = tf.reduce_mean(featmap, axis=[1,2,3])\r\n\r\nW = tf.trainable_variables()\r\n\r\nwith tf.name_scope(\"rop\"):\r\n    temporary = tf.ones_like(y)\r\n    grad      = tf.gradients(y, W, grad_ys=temporary)\r\n    r         = [tf.ones_like(t) for t in W]\r\n    ggrad     = tf.gradients(grad, temporary, grad_ys=r)[0]\r\n\r\n\r\nwith tf.Session() as sess:\r\n    summary_writer = tf.summary.FileWriter(\"log\",\r\n                                           sess.graph)\r\n\r\n```\r\n\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 16.04\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\n('v1.5.0-0-g37aa430d84', '1.5.0')\r\n- **Python version**: \r\n2.7.12\r\n- **CUDA/cuDNN version**:\r\ncuda9 / cudnn 7.0.5\r\n- **GPU model and memory**:\r\nGTX 1080, 8GB\r\n- **Exact command to reproduce**:\r\npython main.py\r\n- **Bazel version** \r\nN/A"}