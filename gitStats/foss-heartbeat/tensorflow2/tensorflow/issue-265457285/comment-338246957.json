{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338246957", "html_url": "https://github.com/tensorflow/tensorflow/issues/13705#issuecomment-338246957", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13705", "id": 338246957, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODI0Njk1Nw==", "user": {"login": "Timmmm", "id": 376842, "node_id": "MDQ6VXNlcjM3Njg0Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/376842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Timmmm", "html_url": "https://github.com/Timmmm", "followers_url": "https://api.github.com/users/Timmmm/followers", "following_url": "https://api.github.com/users/Timmmm/following{/other_user}", "gists_url": "https://api.github.com/users/Timmmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Timmmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Timmmm/subscriptions", "organizations_url": "https://api.github.com/users/Timmmm/orgs", "repos_url": "https://api.github.com/users/Timmmm/repos", "events_url": "https://api.github.com/users/Timmmm/events{/privacy}", "received_events_url": "https://api.github.com/users/Timmmm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-20T15:53:44Z", "updated_at": "2017-10-20T15:53:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Actually... I have no idea how it supposed to work, but I think this is a result of me trying to build a program as if Tensorflow was a normal library that can be used from any build tool just by linking with it and adding its include paths. It turns out that is not the case. You <em>have</em> to use Bazel and your code must be kept within the Tensorflow repository. Quite mad. More details <a href=\"https://stackoverflow.com/questions/33620794/how-to-build-and-use-google-tensorflow-c-api\" rel=\"nofollow\">here</a>.</p>\n<p>Unfortunately I tried following <a href=\"https://www.tensorflow.org/api_guides/cc/guide\" rel=\"nofollow\">the tutorial</a> on OSX and it builds, but somehow the resulting executable doesn't even know that it needs to link with <code>libtensorflow_framework.so</code> so you get unresolved symbols when you try to run it:</p>\n<pre><code>$ otool -L example\nexample:\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.0.0)\n\t/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1443.13.0)\n\t/System/Library/Frameworks/Security.framework/Versions/A/Security (compatibility version 1.0.0, current version 58286.1.32)\n\n$ ./example\ndyld: Symbol not found: __ZN10tensorflow10DEVICE_CPUE\n  Referenced from: /Users/me/workspace/tests/./example\n  Expected in: flat namespace\n in /Users/me/workspace/tests/./example\nAbort trap: 6\n</code></pre>\n<p>Normally I'd use <code>install_name_tool</code> to fix things like this but it doesn't even have an option for when you screw up so badly you need to <em>add</em> a library.</p>", "body_text": "Actually... I have no idea how it supposed to work, but I think this is a result of me trying to build a program as if Tensorflow was a normal library that can be used from any build tool just by linking with it and adding its include paths. It turns out that is not the case. You have to use Bazel and your code must be kept within the Tensorflow repository. Quite mad. More details here.\nUnfortunately I tried following the tutorial on OSX and it builds, but somehow the resulting executable doesn't even know that it needs to link with libtensorflow_framework.so so you get unresolved symbols when you try to run it:\n$ otool -L example\nexample:\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.0.0)\n\t/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1443.13.0)\n\t/System/Library/Frameworks/Security.framework/Versions/A/Security (compatibility version 1.0.0, current version 58286.1.32)\n\n$ ./example\ndyld: Symbol not found: __ZN10tensorflow10DEVICE_CPUE\n  Referenced from: /Users/me/workspace/tests/./example\n  Expected in: flat namespace\n in /Users/me/workspace/tests/./example\nAbort trap: 6\n\nNormally I'd use install_name_tool to fix things like this but it doesn't even have an option for when you screw up so badly you need to add a library.", "body": "Actually... I have no idea how it supposed to work, but I think this is a result of me trying to build a program as if Tensorflow was a normal library that can be used from any build tool just by linking with it and adding its include paths. It turns out that is not the case. You *have* to use Bazel and your code must be kept within the Tensorflow repository. Quite mad. More details [here](https://stackoverflow.com/questions/33620794/how-to-build-and-use-google-tensorflow-c-api).\r\n\r\nUnfortunately I tried following [the tutorial](https://www.tensorflow.org/api_guides/cc/guide) on OSX and it builds, but somehow the resulting executable doesn't even know that it needs to link with `libtensorflow_framework.so` so you get unresolved symbols when you try to run it:\r\n\r\n```\r\n$ otool -L example\r\nexample:\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.0.0)\r\n\t/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1443.13.0)\r\n\t/System/Library/Frameworks/Security.framework/Versions/A/Security (compatibility version 1.0.0, current version 58286.1.32)\r\n\r\n$ ./example\r\ndyld: Symbol not found: __ZN10tensorflow10DEVICE_CPUE\r\n  Referenced from: /Users/me/workspace/tests/./example\r\n  Expected in: flat namespace\r\n in /Users/me/workspace/tests/./example\r\nAbort trap: 6\r\n```\r\n\r\nNormally I'd use `install_name_tool` to fix things like this but it doesn't even have an option for when you screw up so badly you need to *add* a library.\r\n\r\n"}