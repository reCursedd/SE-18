{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19385", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19385/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19385/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19385/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19385", "id": 324423287, "node_id": "MDU6SXNzdWUzMjQ0MjMyODc=", "number": 19385, "title": "Memory leak in Eager execution", "user": {"login": "hmorimitsu", "id": 24420973, "node_id": "MDQ6VXNlcjI0NDIwOTcz", "avatar_url": "https://avatars2.githubusercontent.com/u/24420973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmorimitsu", "html_url": "https://github.com/hmorimitsu", "followers_url": "https://api.github.com/users/hmorimitsu/followers", "following_url": "https://api.github.com/users/hmorimitsu/following{/other_user}", "gists_url": "https://api.github.com/users/hmorimitsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmorimitsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmorimitsu/subscriptions", "organizations_url": "https://api.github.com/users/hmorimitsu/orgs", "repos_url": "https://api.github.com/users/hmorimitsu/repos", "events_url": "https://api.github.com/users/hmorimitsu/events{/privacy}", "received_events_url": "https://api.github.com/users/hmorimitsu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "akshaym", "id": 122911, "node_id": "MDQ6VXNlcjEyMjkxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/122911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akshaym", "html_url": "https://github.com/akshaym", "followers_url": "https://api.github.com/users/akshaym/followers", "following_url": "https://api.github.com/users/akshaym/following{/other_user}", "gists_url": "https://api.github.com/users/akshaym/gists{/gist_id}", "starred_url": "https://api.github.com/users/akshaym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akshaym/subscriptions", "organizations_url": "https://api.github.com/users/akshaym/orgs", "repos_url": "https://api.github.com/users/akshaym/repos", "events_url": "https://api.github.com/users/akshaym/events{/privacy}", "received_events_url": "https://api.github.com/users/akshaym/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "akshaym", "id": 122911, "node_id": "MDQ6VXNlcjEyMjkxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/122911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akshaym", "html_url": "https://github.com/akshaym", "followers_url": "https://api.github.com/users/akshaym/followers", "following_url": "https://api.github.com/users/akshaym/following{/other_user}", "gists_url": "https://api.github.com/users/akshaym/gists{/gist_id}", "starred_url": "https://api.github.com/users/akshaym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akshaym/subscriptions", "organizations_url": "https://api.github.com/users/akshaym/orgs", "repos_url": "https://api.github.com/users/akshaym/repos", "events_url": "https://api.github.com/users/akshaym/events{/privacy}", "received_events_url": "https://api.github.com/users/akshaym/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-05-18T14:01:41Z", "updated_at": "2018-06-12T21:43:34Z", "closed_at": "2018-06-12T21:43:34Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Xubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 'v1.8.0-1451-g6ba9573' 1.8.0</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.11.1</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 5.4.0 20160609</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.1 / 7.1</li>\n<li><strong>GPU model and memory</strong>: GeForce GTX 960M - 2GB</li>\n<li><strong>Exact command to reproduce</strong>: Just run the following code:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ntf.enable_eager_execution()\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Net</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">keras</span>.<span class=\"pl-e\">Model</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(Net, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.conv1 <span class=\"pl-k\">=</span> tf.keras.layers.Conv2D(<span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">call</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.conv1(x)\n        <span class=\"pl-k\">return</span> y\n\ninputs <span class=\"pl-k\">=</span> tf.zeros([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">3</span>], tf.float32)\nnet <span class=\"pl-k\">=</span> Net()\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1000000</span>):\n    net(inputs)</pre></div>\n<h3>Describe the problem</h3>\n<p>I am observing a memory leak when I run the code above at my machine. The RAM usage increase indefinitely over time (but GPU memory remains constant). Profiling the code with memory_profiler produces the following plot:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/24420973/40237678-828c29ec-5a87-11e8-9a96-a15d7b1b3ca6.png\"><img src=\"https://user-images.githubusercontent.com/24420973/40237678-828c29ec-5a87-11e8-9a96-a15d7b1b3ca6.png\" alt=\"memory_plot_conv2d\" style=\"max-width:100%;\"></a></p>\n<h3>Source code / logs</h3>\n<p>This problem might be related to the usage of tensors of rank higher than two. For example, if I use a rank 2 tensor as input to a dense layer, then there is no leak:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ntf.enable_eager_execution()\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Net</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">keras</span>.<span class=\"pl-e\">Model</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(Net, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.fc1 <span class=\"pl-k\">=</span> tf.keras.layers.Dense(<span class=\"pl-c1\">32</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">call</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.fc1(x)\n        <span class=\"pl-k\">return</span> y\n\ninputs <span class=\"pl-k\">=</span> tf.zeros([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">100</span>], tf.float32)\nnet <span class=\"pl-k\">=</span> Net()\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1000000</span>):\n    net(inputs)</pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/24420973/40238436-951a3570-5a89-11e8-8d80-b75a423e2f3f.png\"><img src=\"https://user-images.githubusercontent.com/24420973/40238436-951a3570-5a89-11e8-8d80-b75a423e2f3f.png\" alt=\"memory_plot_fc\" style=\"max-width:100%;\"></a></p>\n<p>However, if I input a rank 3 tensor to the same net, there is a leak again:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ntf.enable_eager_execution()\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Net</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">keras</span>.<span class=\"pl-e\">Model</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(Net, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.fc1 <span class=\"pl-k\">=</span> tf.keras.layers.Dense(<span class=\"pl-c1\">32</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">call</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.fc1(x)\n        <span class=\"pl-k\">return</span> y\n\ninputs <span class=\"pl-k\">=</span> tf.zeros([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>], tf.float32)\nnet <span class=\"pl-k\">=</span> Net()\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1000000</span>):\n    net(inputs)</pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/24420973/40238473-a8f22ea4-5a89-11e8-9ab7-0b9fc6eab18b.png\"><img src=\"https://user-images.githubusercontent.com/24420973/40238473-a8f22ea4-5a89-11e8-9ab7-0b9fc6eab18b.png\" alt=\"memory_plot_fc_rank3\" style=\"max-width:100%;\"></a></p>\n<p>Please let me know if there is anything else I can do to help.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Xubuntu 16.04\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 'v1.8.0-1451-g6ba9573' 1.8.0\nPython version: 3.6.5\nBazel version (if compiling from source): 0.11.1\nGCC/Compiler version (if compiling from source): 5.4.0 20160609\nCUDA/cuDNN version: 9.1 / 7.1\nGPU model and memory: GeForce GTX 960M - 2GB\nExact command to reproduce: Just run the following code:\n\nimport tensorflow as tf\n\ntf.enable_eager_execution()\n\nclass Net(tf.keras.Model):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = tf.keras.layers.Conv2D(32, 3)\n\n    def call(self, x):\n        y = self.conv1(x)\n        return y\n\ninputs = tf.zeros([1, 10, 10, 3], tf.float32)\nnet = Net()\nfor _ in range(1000000):\n    net(inputs)\nDescribe the problem\nI am observing a memory leak when I run the code above at my machine. The RAM usage increase indefinitely over time (but GPU memory remains constant). Profiling the code with memory_profiler produces the following plot:\n\nSource code / logs\nThis problem might be related to the usage of tensors of rank higher than two. For example, if I use a rank 2 tensor as input to a dense layer, then there is no leak:\nimport tensorflow as tf\n\ntf.enable_eager_execution()\n\nclass Net(tf.keras.Model):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.fc1 = tf.keras.layers.Dense(32)\n\n    def call(self, x):\n        y = self.fc1(x)\n        return y\n\ninputs = tf.zeros([1, 100], tf.float32)\nnet = Net()\nfor _ in range(1000000):\n    net(inputs)\n\nHowever, if I input a rank 3 tensor to the same net, there is a leak again:\nimport tensorflow as tf\n\ntf.enable_eager_execution()\n\nclass Net(tf.keras.Model):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.fc1 = tf.keras.layers.Dense(32)\n\n    def call(self, x):\n        y = self.fc1(x)\n        return y\n\ninputs = tf.zeros([1, 10, 10], tf.float32)\nnet = Net()\nfor _ in range(1000000):\n    net(inputs)\n\nPlease let me know if there is anything else I can do to help.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Xubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 'v1.8.0-1451-g6ba9573' 1.8.0\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: 0.11.1\r\n- **GCC/Compiler version (if compiling from source)**: 5.4.0 20160609\r\n- **CUDA/cuDNN version**: 9.1 / 7.1\r\n- **GPU model and memory**: GeForce GTX 960M - 2GB\r\n- **Exact command to reproduce**: Just run the following code:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\ntf.enable_eager_execution()\r\n\r\nclass Net(tf.keras.Model):\r\n    def __init__(self):\r\n        super(Net, self).__init__()\r\n        self.conv1 = tf.keras.layers.Conv2D(32, 3)\r\n\r\n    def call(self, x):\r\n        y = self.conv1(x)\r\n        return y\r\n\r\ninputs = tf.zeros([1, 10, 10, 3], tf.float32)\r\nnet = Net()\r\nfor _ in range(1000000):\r\n    net(inputs)\r\n```\r\n\r\n### Describe the problem\r\nI am observing a memory leak when I run the code above at my machine. The RAM usage increase indefinitely over time (but GPU memory remains constant). Profiling the code with memory_profiler produces the following plot:\r\n![memory_plot_conv2d](https://user-images.githubusercontent.com/24420973/40237678-828c29ec-5a87-11e8-9a96-a15d7b1b3ca6.png)\r\n\r\n### Source code / logs\r\n\r\nThis problem might be related to the usage of tensors of rank higher than two. For example, if I use a rank 2 tensor as input to a dense layer, then there is no leak:\r\n```python\r\nimport tensorflow as tf\r\n\r\ntf.enable_eager_execution()\r\n\r\nclass Net(tf.keras.Model):\r\n    def __init__(self):\r\n        super(Net, self).__init__()\r\n        self.fc1 = tf.keras.layers.Dense(32)\r\n\r\n    def call(self, x):\r\n        y = self.fc1(x)\r\n        return y\r\n\r\ninputs = tf.zeros([1, 100], tf.float32)\r\nnet = Net()\r\nfor _ in range(1000000):\r\n    net(inputs)\r\n```\r\n![memory_plot_fc](https://user-images.githubusercontent.com/24420973/40238436-951a3570-5a89-11e8-8d80-b75a423e2f3f.png)\r\n\r\nHowever, if I input a rank 3 tensor to the same net, there is a leak again:\r\n```python\r\nimport tensorflow as tf\r\n\r\ntf.enable_eager_execution()\r\n\r\nclass Net(tf.keras.Model):\r\n    def __init__(self):\r\n        super(Net, self).__init__()\r\n        self.fc1 = tf.keras.layers.Dense(32)\r\n\r\n    def call(self, x):\r\n        y = self.fc1(x)\r\n        return y\r\n\r\ninputs = tf.zeros([1, 10, 10], tf.float32)\r\nnet = Net()\r\nfor _ in range(1000000):\r\n    net(inputs)\r\n```\r\n![memory_plot_fc_rank3](https://user-images.githubusercontent.com/24420973/40238473-a8f22ea4-5a89-11e8-9ab7-0b9fc6eab18b.png)\r\n\r\nPlease let me know if there is anything else I can do to help."}