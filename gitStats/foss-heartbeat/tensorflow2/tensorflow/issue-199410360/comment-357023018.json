{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/357023018", "html_url": "https://github.com/tensorflow/tensorflow/issues/6724#issuecomment-357023018", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6724", "id": 357023018, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzAyMzAxOA==", "user": {"login": "ryanpeach", "id": 14838729, "node_id": "MDQ6VXNlcjE0ODM4NzI5", "avatar_url": "https://avatars1.githubusercontent.com/u/14838729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryanpeach", "html_url": "https://github.com/ryanpeach", "followers_url": "https://api.github.com/users/ryanpeach/followers", "following_url": "https://api.github.com/users/ryanpeach/following{/other_user}", "gists_url": "https://api.github.com/users/ryanpeach/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryanpeach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryanpeach/subscriptions", "organizations_url": "https://api.github.com/users/ryanpeach/orgs", "repos_url": "https://api.github.com/users/ryanpeach/repos", "events_url": "https://api.github.com/users/ryanpeach/events{/privacy}", "received_events_url": "https://api.github.com/users/ryanpeach/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-11T18:45:43Z", "updated_at": "2018-01-11T20:14:43Z", "author_association": "NONE", "body_html": "<p>Something like this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> keras.engine.topology <span class=\"pl-k\">import</span> Layer\n<span class=\"pl-k\">import</span> keras.backend <span class=\"pl-k\">as</span> K\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Conv1DTranspose</span>(<span class=\"pl-e\">Layer</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">filters</span>, <span class=\"pl-smi\">kernel_size</span>, <span class=\"pl-smi\">strides</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n        <span class=\"pl-c1\">self</span>._filters <span class=\"pl-k\">=</span> filters\n        <span class=\"pl-c1\">self</span>._kernel_size <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">1</span>, kernel_size)\n        <span class=\"pl-c1\">self</span>._strides <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">1</span>, strides)\n        <span class=\"pl-c1\">self</span>._args, <span class=\"pl-c1\">self</span>._kwargs <span class=\"pl-k\">=</span> args, kwargs\n        <span class=\"pl-c1\">super</span>(Conv1DTranspose, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">build</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input_shape</span>):\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>build<span class=\"pl-pds\">\"</span></span>, input_shape)\n        <span class=\"pl-c1\">self</span>._model <span class=\"pl-k\">=</span> Sequential()\n        <span class=\"pl-c1\">self</span>._model.add(Lambda(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: K.expand_dims(x,<span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>), <span class=\"pl-v\">batch_input_shape</span><span class=\"pl-k\">=</span>input_shape))\n        <span class=\"pl-c1\">self</span>._model.add(Conv2DTranspose(<span class=\"pl-c1\">self</span>._filters,\n                                        <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>._kernel_size,\n                                        <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>._strides,\n                                        <span class=\"pl-k\">*</span><span class=\"pl-c1\">self</span>._args, <span class=\"pl-k\">**</span><span class=\"pl-c1\">self</span>._kwargs))\n        <span class=\"pl-c1\">self</span>._model.add(Lambda(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: x[:,<span class=\"pl-c1\">0</span>]))\n        <span class=\"pl-c1\">self</span>._model.summary()\n        <span class=\"pl-c1\">super</span>(Conv1DTranspose, <span class=\"pl-c1\">self</span>).build(input_shape)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">call</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._model(x)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">compute_output_shape</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">input_shape</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._model.compute_output_shape(input_shape)</pre></div>", "body_text": "Something like this:\nfrom keras.engine.topology import Layer\nimport keras.backend as K\nclass Conv1DTranspose(Layer):\n    def __init__(self, filters, kernel_size, strides=1, *args, **kwargs):\n        self._filters = filters\n        self._kernel_size = (1, kernel_size)\n        self._strides = (1, strides)\n        self._args, self._kwargs = args, kwargs\n        super(Conv1DTranspose, self).__init__()\n\n    def build(self, input_shape):\n        print(\"build\", input_shape)\n        self._model = Sequential()\n        self._model.add(Lambda(lambda x: K.expand_dims(x,axis=1), batch_input_shape=input_shape))\n        self._model.add(Conv2DTranspose(self._filters,\n                                        kernel_size=self._kernel_size,\n                                        strides=self._strides,\n                                        *self._args, **self._kwargs))\n        self._model.add(Lambda(lambda x: x[:,0]))\n        self._model.summary()\n        super(Conv1DTranspose, self).build(input_shape)\n\n    def call(self, x):\n        return self._model(x)\n\n    def compute_output_shape(self, input_shape):\n        return self._model.compute_output_shape(input_shape)", "body": "Something like this:\r\n\r\n``` python\r\nfrom keras.engine.topology import Layer\r\nimport keras.backend as K\r\nclass Conv1DTranspose(Layer):\r\n    def __init__(self, filters, kernel_size, strides=1, *args, **kwargs):\r\n        self._filters = filters\r\n        self._kernel_size = (1, kernel_size)\r\n        self._strides = (1, strides)\r\n        self._args, self._kwargs = args, kwargs\r\n        super(Conv1DTranspose, self).__init__()\r\n\r\n    def build(self, input_shape):\r\n        print(\"build\", input_shape)\r\n        self._model = Sequential()\r\n        self._model.add(Lambda(lambda x: K.expand_dims(x,axis=1), batch_input_shape=input_shape))\r\n        self._model.add(Conv2DTranspose(self._filters,\r\n                                        kernel_size=self._kernel_size,\r\n                                        strides=self._strides,\r\n                                        *self._args, **self._kwargs))\r\n        self._model.add(Lambda(lambda x: x[:,0]))\r\n        self._model.summary()\r\n        super(Conv1DTranspose, self).build(input_shape)\r\n\r\n    def call(self, x):\r\n        return self._model(x)\r\n\r\n    def compute_output_shape(self, input_shape):\r\n        return self._model.compute_output_shape(input_shape)\r\n```"}