{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1410", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1410/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1410/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1410/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1410", "id": 138873210, "node_id": "MDU6SXNzdWUxMzg4NzMyMTA=", "number": 1410, "title": "tensorflor cond(pred, fn1, fn2) evaluate fn1 and fn2 together regardless of pred", "user": {"login": "24hours", "id": 650407, "node_id": "MDQ6VXNlcjY1MDQwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/650407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/24hours", "html_url": "https://github.com/24hours", "followers_url": "https://api.github.com/users/24hours/followers", "following_url": "https://api.github.com/users/24hours/following{/other_user}", "gists_url": "https://api.github.com/users/24hours/gists{/gist_id}", "starred_url": "https://api.github.com/users/24hours/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/24hours/subscriptions", "organizations_url": "https://api.github.com/users/24hours/orgs", "repos_url": "https://api.github.com/users/24hours/repos", "events_url": "https://api.github.com/users/24hours/events{/privacy}", "received_events_url": "https://api.github.com/users/24hours/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-07T03:02:13Z", "updated_at": "2016-03-07T17:23:51Z", "closed_at": "2016-03-07T17:23:51Z", "author_association": "NONE", "body_html": "<pre><code>import tensorflow as tf\nimport numpy as np\n\nisTrain = tf.placeholder(tf.bool)\nuser_input = tf.placeholder(tf.float32)\n\nwith tf.device('/cpu:0'):\n    alpha = tf.Variable(tf.zeros([1]))\n    beta = tf.Variable(tf.zeros([1]))\n\n    c = tf.Variable(tf.zeros([1]))\n\n    alpha_incre = alpha.assign(alpha + 1)\n    beta_incre = beta.assign(beta + 1)\n\n    def train():\n        with tf.control_dependencies([ alpha_incre ]):\n            return c.assign(user_input + user_input)\n\n    def test():\n        with tf.control_dependencies([ beta_incre ]):\n            return c.assign(user_input)\n\n    result = tf.cond(isTrain,\n        train,\n        test\n    )\n\ninit = tf.initialize_all_variables()\nsess = tf.Session()\nsess.run(init)\n\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: True })\nprint(\"Train\", aa)\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: False })\nprint(\"Test\", aa)\n</code></pre>\n<h3>Environment info</h3>\n<p>ubuntu 14.04</p>\n<p>If installed from binary pip package, provide:<br>\ntensorflow 0.7.1</p>\n<h3>Steps to reproduce</h3>\n<ol>\n<li>run the code example, expecting to see</li>\n</ol>\n<p>output</p>\n<ul>\n<li>iteratio 1: to see alpha = 1, beta = 1</li>\n<li>iteratio 2: to see alpha = 2, beta = 2</li>\n</ul>\n<p>expected</p>\n<ul>\n<li>iteratio 1: to see alpha = 1, beta = 0</li>\n<li>iteratio 2: to see alpha = 1, beta = 1</li>\n</ul>\n<h3>What have you tried?</h3>\n<ol>\n<li>Changing the code structure slightly will provide the expected output</li>\n</ol>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\nisTrain = tf.placeholder(tf.bool)\nuser_input = tf.placeholder(tf.float32)\n\nwith tf.device('/cpu:0'):\n    alpha = tf.Variable(tf.zeros([1]))\n    beta = tf.Variable(tf.zeros([1]))\n\n    c = tf.Variable(tf.zeros([1]))\n\n    alpha_incre = alpha.assign(alpha + 1)\n    beta_incre = beta.assign(beta + 1)\n\n    def train():\n        with tf.control_dependencies([ alpha.assign(alpha + 1) ]):\n            return c.assign(user_input + user_input)\n\n    def test():\n        with tf.control_dependencies([ beta.assign(beta + 1) ]):\n            return c.assign(user_input)\n\n    result = tf.cond(isTrain,\n        train,\n        test\n    )\n\ninit = tf.initialize_all_variables()\nsess = tf.Session()\nsess.run(init)\n\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: True })\nprint(\"Train\", aa)\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: False })\nprint(\"Test\", aa)\n</code></pre>", "body_text": "import tensorflow as tf\nimport numpy as np\n\nisTrain = tf.placeholder(tf.bool)\nuser_input = tf.placeholder(tf.float32)\n\nwith tf.device('/cpu:0'):\n    alpha = tf.Variable(tf.zeros([1]))\n    beta = tf.Variable(tf.zeros([1]))\n\n    c = tf.Variable(tf.zeros([1]))\n\n    alpha_incre = alpha.assign(alpha + 1)\n    beta_incre = beta.assign(beta + 1)\n\n    def train():\n        with tf.control_dependencies([ alpha_incre ]):\n            return c.assign(user_input + user_input)\n\n    def test():\n        with tf.control_dependencies([ beta_incre ]):\n            return c.assign(user_input)\n\n    result = tf.cond(isTrain,\n        train,\n        test\n    )\n\ninit = tf.initialize_all_variables()\nsess = tf.Session()\nsess.run(init)\n\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: True })\nprint(\"Train\", aa)\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: False })\nprint(\"Test\", aa)\n\nEnvironment info\nubuntu 14.04\nIf installed from binary pip package, provide:\ntensorflow 0.7.1\nSteps to reproduce\n\nrun the code example, expecting to see\n\noutput\n\niteratio 1: to see alpha = 1, beta = 1\niteratio 2: to see alpha = 2, beta = 2\n\nexpected\n\niteratio 1: to see alpha = 1, beta = 0\niteratio 2: to see alpha = 1, beta = 1\n\nWhat have you tried?\n\nChanging the code structure slightly will provide the expected output\n\nimport tensorflow as tf\nimport numpy as np\n\nisTrain = tf.placeholder(tf.bool)\nuser_input = tf.placeholder(tf.float32)\n\nwith tf.device('/cpu:0'):\n    alpha = tf.Variable(tf.zeros([1]))\n    beta = tf.Variable(tf.zeros([1]))\n\n    c = tf.Variable(tf.zeros([1]))\n\n    alpha_incre = alpha.assign(alpha + 1)\n    beta_incre = beta.assign(beta + 1)\n\n    def train():\n        with tf.control_dependencies([ alpha.assign(alpha + 1) ]):\n            return c.assign(user_input + user_input)\n\n    def test():\n        with tf.control_dependencies([ beta.assign(beta + 1) ]):\n            return c.assign(user_input)\n\n    result = tf.cond(isTrain,\n        train,\n        test\n    )\n\ninit = tf.initialize_all_variables()\nsess = tf.Session()\nsess.run(init)\n\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: True })\nprint(\"Train\", aa)\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: False })\nprint(\"Test\", aa)", "body": "```\nimport tensorflow as tf\nimport numpy as np\n\nisTrain = tf.placeholder(tf.bool)\nuser_input = tf.placeholder(tf.float32)\n\nwith tf.device('/cpu:0'):\n    alpha = tf.Variable(tf.zeros([1]))\n    beta = tf.Variable(tf.zeros([1]))\n\n    c = tf.Variable(tf.zeros([1]))\n\n    alpha_incre = alpha.assign(alpha + 1)\n    beta_incre = beta.assign(beta + 1)\n\n    def train():\n        with tf.control_dependencies([ alpha_incre ]):\n            return c.assign(user_input + user_input)\n\n    def test():\n        with tf.control_dependencies([ beta_incre ]):\n            return c.assign(user_input)\n\n    result = tf.cond(isTrain,\n        train,\n        test\n    )\n\ninit = tf.initialize_all_variables()\nsess = tf.Session()\nsess.run(init)\n\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: True })\nprint(\"Train\", aa)\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: False })\nprint(\"Test\", aa)\n```\n### Environment info\n\nubuntu 14.04\n\nIf installed from binary pip package, provide:\ntensorflow 0.7.1\n### Steps to reproduce\n1. run the code example, expecting to see  \n\noutput \n- iteratio 1: to see alpha = 1, beta = 1 \n- iteratio 2: to see alpha = 2, beta = 2 \n\nexpected\n- iteratio 1: to see alpha = 1, beta = 0 \n- iteratio 2: to see alpha = 1, beta = 1 \n### What have you tried?\n1. Changing the code structure slightly will provide the expected output\n\n```\nimport tensorflow as tf\nimport numpy as np\n\nisTrain = tf.placeholder(tf.bool)\nuser_input = tf.placeholder(tf.float32)\n\nwith tf.device('/cpu:0'):\n    alpha = tf.Variable(tf.zeros([1]))\n    beta = tf.Variable(tf.zeros([1]))\n\n    c = tf.Variable(tf.zeros([1]))\n\n    alpha_incre = alpha.assign(alpha + 1)\n    beta_incre = beta.assign(beta + 1)\n\n    def train():\n        with tf.control_dependencies([ alpha.assign(alpha + 1) ]):\n            return c.assign(user_input + user_input)\n\n    def test():\n        with tf.control_dependencies([ beta.assign(beta + 1) ]):\n            return c.assign(user_input)\n\n    result = tf.cond(isTrain,\n        train,\n        test\n    )\n\ninit = tf.initialize_all_variables()\nsess = tf.Session()\nsess.run(init)\n\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: True })\nprint(\"Train\", aa)\naa = sess.run([result, alpha, beta], feed_dict={user_input:[2], isTrain: False })\nprint(\"Test\", aa)\n```\n"}