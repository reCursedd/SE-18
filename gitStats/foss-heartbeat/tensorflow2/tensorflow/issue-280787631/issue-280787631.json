{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15244", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15244/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15244/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15244/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/15244", "id": 280787631, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU3NDE5MzQx", "number": 15244, "title": "Switched optimization mode for Pi builds to avoid internal compiler error", "user": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-10T06:40:23Z", "updated_at": "2017-12-11T20:55:16Z", "closed_at": "2017-12-11T20:55:16Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15244", "html_url": "https://github.com/tensorflow/tensorflow/pull/15244", "diff_url": "https://github.com/tensorflow/tensorflow/pull/15244.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/15244.patch"}, "body_html": "<p>The nightly Pi3 builds have been failing with:</p>\n<pre><code>In file included from external/eigen_archive/unsupported/Eigen/MatrixFunctions:57:0,\n                 from ./third_party/eigen3/unsupported/Eigen/MatrixFunctions:1,\n                 from tensorflow/core/kernels/matrix_exponential_op.cc:19:\nexternal/eigen_archive/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h: In member function 'MatrixType Eigen::internal::MatrixFunctionAtomic&lt;MatrixType&gt;::compute(const MatrixType&amp;) [with MatrixType = Eigen::Matrix&lt;std::complex&lt;float&gt;, -1, -1&gt;]':\nexternal/eigen_archive/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h:101:1: internal compiler error: in decompose_normal_address, at rtlanal.c:5799\n }\n ^\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee &lt;http://gcc.gnu.org/bugs.html&gt; for instructions.\n</code></pre>\n<p>It appears to be the same problem that Chrome hit with gcc here:</p>\n<p><a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=675648\" rel=\"nofollow\">https://bugs.chromium.org/p/chromium/issues/detail?id=675648</a></p>\n<p>Their solution was to change the optimization flags to avoid this, so I've followed their lead and switched to -O3. I hope this won'tl make a big latency or size difference, but it does solve the compiler crash at least.</p>", "body_text": "The nightly Pi3 builds have been failing with:\nIn file included from external/eigen_archive/unsupported/Eigen/MatrixFunctions:57:0,\n                 from ./third_party/eigen3/unsupported/Eigen/MatrixFunctions:1,\n                 from tensorflow/core/kernels/matrix_exponential_op.cc:19:\nexternal/eigen_archive/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h: In member function 'MatrixType Eigen::internal::MatrixFunctionAtomic<MatrixType>::compute(const MatrixType&) [with MatrixType = Eigen::Matrix<std::complex<float>, -1, -1>]':\nexternal/eigen_archive/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h:101:1: internal compiler error: in decompose_normal_address, at rtlanal.c:5799\n }\n ^\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee <http://gcc.gnu.org/bugs.html> for instructions.\n\nIt appears to be the same problem that Chrome hit with gcc here:\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=675648\nTheir solution was to change the optimization flags to avoid this, so I've followed their lead and switched to -O3. I hope this won'tl make a big latency or size difference, but it does solve the compiler crash at least.", "body": "The nightly Pi3 builds have been failing with:\r\n\r\n```\r\nIn file included from external/eigen_archive/unsupported/Eigen/MatrixFunctions:57:0,\r\n                 from ./third_party/eigen3/unsupported/Eigen/MatrixFunctions:1,\r\n                 from tensorflow/core/kernels/matrix_exponential_op.cc:19:\r\nexternal/eigen_archive/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h: In member function 'MatrixType Eigen::internal::MatrixFunctionAtomic<MatrixType>::compute(const MatrixType&) [with MatrixType = Eigen::Matrix<std::complex<float>, -1, -1>]':\r\nexternal/eigen_archive/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h:101:1: internal compiler error: in decompose_normal_address, at rtlanal.c:5799\r\n }\r\n ^\r\nPlease submit a full bug report,\r\nwith preprocessed source if appropriate.\r\nSee <http://gcc.gnu.org/bugs.html> for instructions.\r\n```\r\n\r\nIt appears to be the same problem that Chrome hit with gcc here:\r\n\r\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=675648\r\n\r\nTheir solution was to change the optimization flags to avoid this, so I've followed their lead and switched to -O3. I hope this won'tl make a big latency or size difference, but it does solve the compiler crash at least."}