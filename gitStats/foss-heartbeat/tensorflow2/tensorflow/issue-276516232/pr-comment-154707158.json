{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154707158", "pull_request_review_id": 80909314, "id": 154707158, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDcwNzE1OA==", "diff_hunk": "@@ -195,171 +225,232 @@ def fix_image_flip_shape(image, result):\n \n   image_shape = image.get_shape()\n   if image_shape == tensor_shape.unknown_shape():\n-    result.set_shape([None, None, None])\n+    result.set_shape([None] * rank)\n   else:\n     result.set_shape(image_shape)\n   return result\n \n \n def random_flip_up_down(image, seed=None):\n-  \"\"\"Randomly flips an image vertically (upside down).\n+  \"\"\"Randomly flips image(s) vertically (upside down).\n \n-  With a 1 in 2 chance, outputs the contents of `image` flipped along the first\n-  dimension, which is `height`.  Otherwise output the image as-is.\n+  With a 1 in 2 chance, outputs the contents of `image` flipped along the height\n+  dimension. Otherwise output the image as-is.\n \n   Args:\n-    image: A 3-D tensor of shape `[height, width, channels].`\n+    image: 4-D Tensor of shape `[batch, height, width, channels]` or\n+           3-D Tensor of shape `[height, width, channels]`.\n     seed: A Python integer. Used to create a random seed. See\n       @{tf.set_random_seed}\n       for behavior.\n \n   Returns:\n-    A 3-D tensor of the same type and shape as `image`.\n+    A tensor of the same type and shape as `image`.\n \n   Raises:\n     ValueError: if the shape of `image` not supported.\n   \"\"\"\n   image = ops.convert_to_tensor(image, name='image')\n+  original_image = image\n+  image, is_batch = _EnsureTensorIs4D(image)\n   image = control_flow_ops.with_dependencies(\n-      _Check3DImage(image, require_static=False), image)\n-  uniform_random = random_ops.random_uniform([], 0, 1.0, seed=seed)\n+      _CheckAtLeast3DImage(image, require_static=False), image)\n+\n+  batch, _, _, _ = _ImageDimensions(image, rank=4)\n+\n+  uniform_random = random_ops.random_uniform([batch], 0, 1.0, seed=seed)\n   mirror_cond = math_ops.less(uniform_random, .5)\n-  result = control_flow_ops.cond(mirror_cond,\n-                                 lambda: array_ops.reverse(image, [0]),\n-                                 lambda: image)\n-  return fix_image_flip_shape(image, result)\n+  result = array_ops.where(mirror_cond, x=image,\n+                           y=array_ops.reverse(image, [1]))\n+\n+  if is_batch:\n+    return fix_image_flip_shape(original_image, result, rank=4)\n+\n+  result = array_ops.squeeze(result, squeeze_dims=[0])\n+  return fix_image_flip_shape(original_image, result, rank=3)\n \n \n def random_flip_left_right(image, seed=None):\n-  \"\"\"Randomly flip an image horizontally (left to right).\n+  \"\"\"Randomly flip image(s) horizontally (left to right).\n \n   With a 1 in 2 chance, outputs the contents of `image` flipped along the\n-  second dimension, which is `width`.  Otherwise output the image as-is.\n+  width dimension. Otherwise output the image as-is.\n \n   Args:\n-    image: A 3-D tensor of shape `[height, width, channels].`\n+    image: 4-D Tensor of shape `[batch, height, width, channels]` or\n+           3-D Tensor of shape `[height, width, channels]`.\n     seed: A Python integer. Used to create a random seed. See\n       @{tf.set_random_seed}\n       for behavior.\n \n   Returns:\n-    A 3-D tensor of the same type and shape as `image`.\n+    A tensor of the same type and shape as `image`.\n \n   Raises:\n     ValueError: if the shape of `image` not supported.\n   \"\"\"\n   image = ops.convert_to_tensor(image, name='image')\n+  original_image = image\n+  image, is_batch = _EnsureTensorIs4D(image)\n   image = control_flow_ops.with_dependencies(\n-      _Check3DImage(image, require_static=False), image)\n-  uniform_random = random_ops.random_uniform([], 0, 1.0, seed=seed)\n+      _CheckAtLeast3DImage(image, require_static=False), image)\n+\n+  batch, _, _, _ = _ImageDimensions(image, rank=4)\n+\n+  uniform_random = random_ops.random_uniform([batch], 0, 1.0, seed=seed)\n   mirror_cond = math_ops.less(uniform_random, .5)\n-  result = control_flow_ops.cond(mirror_cond,\n-                                 lambda: array_ops.reverse(image, [1]),\n-                                 lambda: image)\n-  return fix_image_flip_shape(image, result)\n+\n+  result = array_ops.where(mirror_cond, x=image,\n+                           y=array_ops.reverse(image, [2]))", "path": "tensorflow/python/ops/image_ops_impl.py", "position": null, "original_position": 143, "commit_id": "f18ba89bc15fe5ad2a9dca3ec034ac10225dd1da", "original_commit_id": "abcb89bce4ce4b68cf714e1cccbc13d4eb1309b7", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "body": "You could even make if \r\n\r\n_flip_image(image, axis, random=False) \r\n\r\nand get rid of all the code in the non-random versions as well. That would be nice for maintainability. ", "created_at": "2017-12-04T16:53:24Z", "updated_at": "2017-12-06T01:57:38Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14854#discussion_r154707158", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14854", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154707158"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14854#discussion_r154707158"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14854"}}, "body_html": "<p>You could even make if</p>\n<p>_flip_image(image, axis, random=False)</p>\n<p>and get rid of all the code in the non-random versions as well. That would be nice for maintainability.</p>", "body_text": "You could even make if\n_flip_image(image, axis, random=False)\nand get rid of all the code in the non-random versions as well. That would be nice for maintainability.", "in_reply_to_id": 154706384}