{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16631", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16631/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16631/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16631/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16631", "id": 293334242, "node_id": "MDU6SXNzdWUyOTMzMzQyNDI=", "number": 16631, "title": "Allow variable_overwrites on scope level", "user": {"login": "botev", "id": 1889878, "node_id": "MDQ6VXNlcjE4ODk4Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1889878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botev", "html_url": "https://github.com/botev", "followers_url": "https://api.github.com/users/botev/followers", "following_url": "https://api.github.com/users/botev/following{/other_user}", "gists_url": "https://api.github.com/users/botev/gists{/gist_id}", "starred_url": "https://api.github.com/users/botev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botev/subscriptions", "organizations_url": "https://api.github.com/users/botev/orgs", "repos_url": "https://api.github.com/users/botev/repos", "events_url": "https://api.github.com/users/botev/events{/privacy}", "received_events_url": "https://api.github.com/users/botev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-31T22:24:53Z", "updated_at": "2018-02-01T05:19:57Z", "closed_at": "2018-02-01T00:27:35Z", "author_association": "NONE", "body_html": "<p>This is a request for allowing to pass a dict of <code>variable_overwrites</code> to variable scopes which to be returned when <code>tf.get_variable</code> is called instead of the usual procedure, if they are provided, otherwise do the usual procedure. A simple example of this beahviour is:</p>\n<pre><code>    import numpy as np\n    with tf.variable_scope(\"one\"):\n        a = tf.ones((5, 5), tf.float32)\n        with tf.variable_scope(\"two\"):\n            x1 = tf.get_variable(\"x\", initializer=np.random.randn(5, 5).astype(\"float32\"))\n            c1 = tf.sqrt(tf.abs(x1 + a))\n\n    variables_overwrites = {x1._shared_name: c1}\n    with tf.variable_scope(\"one\", reuse=tf.AUTO_REUSE, variables_overwrites=variables_overwrites):\n        a = tf.ones((5, 5), tf.float32)\n        with tf.variable_scope(\"two\"):\n           // x2 here is in fact the value of c1\n            x2 = tf.get_variable(\"x\", initializer=np.random.randn(5, 5).astype(\"float32\"))\n            c2 = tf.sqrt(tf.abs(x2 + a))\n</code></pre>\n<p>This is particularly usefull for being able easily to bootstrap neural network parameters coming from inside the layers trough a standard function interface. My specific usage is for HMC for NN parameters. This is a question on whether you guys are interested in this so that I spend more time on doing this properly.</p>", "body_text": "This is a request for allowing to pass a dict of variable_overwrites to variable scopes which to be returned when tf.get_variable is called instead of the usual procedure, if they are provided, otherwise do the usual procedure. A simple example of this beahviour is:\n    import numpy as np\n    with tf.variable_scope(\"one\"):\n        a = tf.ones((5, 5), tf.float32)\n        with tf.variable_scope(\"two\"):\n            x1 = tf.get_variable(\"x\", initializer=np.random.randn(5, 5).astype(\"float32\"))\n            c1 = tf.sqrt(tf.abs(x1 + a))\n\n    variables_overwrites = {x1._shared_name: c1}\n    with tf.variable_scope(\"one\", reuse=tf.AUTO_REUSE, variables_overwrites=variables_overwrites):\n        a = tf.ones((5, 5), tf.float32)\n        with tf.variable_scope(\"two\"):\n           // x2 here is in fact the value of c1\n            x2 = tf.get_variable(\"x\", initializer=np.random.randn(5, 5).astype(\"float32\"))\n            c2 = tf.sqrt(tf.abs(x2 + a))\n\nThis is particularly usefull for being able easily to bootstrap neural network parameters coming from inside the layers trough a standard function interface. My specific usage is for HMC for NN parameters. This is a question on whether you guys are interested in this so that I spend more time on doing this properly.", "body": "This is a request for allowing to pass a dict of `variable_overwrites` to variable scopes which to be returned when `tf.get_variable` is called instead of the usual procedure, if they are provided, otherwise do the usual procedure. A simple example of this beahviour is:\r\n```\r\n    import numpy as np\r\n    with tf.variable_scope(\"one\"):\r\n        a = tf.ones((5, 5), tf.float32)\r\n        with tf.variable_scope(\"two\"):\r\n            x1 = tf.get_variable(\"x\", initializer=np.random.randn(5, 5).astype(\"float32\"))\r\n            c1 = tf.sqrt(tf.abs(x1 + a))\r\n\r\n    variables_overwrites = {x1._shared_name: c1}\r\n    with tf.variable_scope(\"one\", reuse=tf.AUTO_REUSE, variables_overwrites=variables_overwrites):\r\n        a = tf.ones((5, 5), tf.float32)\r\n        with tf.variable_scope(\"two\"):\r\n           // x2 here is in fact the value of c1\r\n            x2 = tf.get_variable(\"x\", initializer=np.random.randn(5, 5).astype(\"float32\"))\r\n            c2 = tf.sqrt(tf.abs(x2 + a))\r\n```\r\nThis is particularly usefull for being able easily to bootstrap neural network parameters coming from inside the layers trough a standard function interface. My specific usage is for HMC for NN parameters. This is a question on whether you guys are interested in this so that I spend more time on doing this properly."}