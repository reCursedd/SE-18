{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/440909377", "html_url": "https://github.com/pytorch/pytorch/issues/14175#issuecomment-440909377", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/14175", "id": 440909377, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDkwOTM3Nw==", "user": {"login": "jjbouza", "id": 13842088, "node_id": "MDQ6VXNlcjEzODQyMDg4", "avatar_url": "https://avatars3.githubusercontent.com/u/13842088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjbouza", "html_url": "https://github.com/jjbouza", "followers_url": "https://api.github.com/users/jjbouza/followers", "following_url": "https://api.github.com/users/jjbouza/following{/other_user}", "gists_url": "https://api.github.com/users/jjbouza/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjbouza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjbouza/subscriptions", "organizations_url": "https://api.github.com/users/jjbouza/orgs", "repos_url": "https://api.github.com/users/jjbouza/repos", "events_url": "https://api.github.com/users/jjbouza/events{/privacy}", "received_events_url": "https://api.github.com/users/jjbouza/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-22T04:27:39Z", "updated_at": "2018-11-22T04:27:39Z", "author_association": "NONE", "body_html": "<p>Hey <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23639302\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vishwakftw\">@vishwakftw</a>, like you said, it doesn't appear that the code base has any support for cuSolver. To add this I'm going to need to generate the cuSolver CUDA handles and pass them around to the cuSolver calls.</p>\n<p>I've been looking through the cuBLAS code to get an idea for how to do this, so I just want to make sure I've got it straight. Heres the idea:</p>\n<p>Add a <code>THCState_getCurrentcuSolverHandle</code> function to <code>aten/src/THC/THCGeneral</code> to generate or access the cuSolver handle for a THCState (this would be an analog to the <code>THCState_getCurrentBlasHandle</code> function)</p>\n<p>Add a <code>getCurrentCUDASolverHandle</code> function to <code>aten/src/ATen/cuda/CUDAContext</code> that calls the above <code>THCState_getCurrentcuSolverHandle</code> (this would be an analog to the <code>at::cuda::getCurrentCUDABlasHandle</code> function)</p>\n<p>Does this look like the right pattern for cuSolver integration? Thanks</p>", "body_text": "Hey @vishwakftw, like you said, it doesn't appear that the code base has any support for cuSolver. To add this I'm going to need to generate the cuSolver CUDA handles and pass them around to the cuSolver calls.\nI've been looking through the cuBLAS code to get an idea for how to do this, so I just want to make sure I've got it straight. Heres the idea:\nAdd a THCState_getCurrentcuSolverHandle function to aten/src/THC/THCGeneral to generate or access the cuSolver handle for a THCState (this would be an analog to the THCState_getCurrentBlasHandle function)\nAdd a getCurrentCUDASolverHandle function to aten/src/ATen/cuda/CUDAContext that calls the above THCState_getCurrentcuSolverHandle (this would be an analog to the at::cuda::getCurrentCUDABlasHandle function)\nDoes this look like the right pattern for cuSolver integration? Thanks", "body": "Hey @vishwakftw, like you said, it doesn't appear that the code base has any support for cuSolver. To add this I'm going to need to generate the cuSolver CUDA handles and pass them around to the cuSolver calls. \r\n\r\nI've been looking through the cuBLAS code to get an idea for how to do this, so I just want to make sure I've got it straight. Heres the idea:\r\n\r\nAdd a `THCState_getCurrentcuSolverHandle` function to `aten/src/THC/THCGeneral` to generate or access the cuSolver handle for a THCState (this would be an analog to the `THCState_getCurrentBlasHandle` function)\r\n\r\nAdd a `getCurrentCUDASolverHandle` function to `aten/src/ATen/cuda/CUDAContext` that calls the above `THCState_getCurrentcuSolverHandle` (this would be an analog to the `at::cuda::getCurrentCUDABlasHandle` function)\r\n\r\nDoes this look like the right pattern for cuSolver integration? Thanks"}