{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/440115947", "html_url": "https://github.com/pytorch/pytorch/issues/14175#issuecomment-440115947", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/14175", "id": 440115947, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDExNTk0Nw==", "user": {"login": "jjbouza", "id": 13842088, "node_id": "MDQ6VXNlcjEzODQyMDg4", "avatar_url": "https://avatars3.githubusercontent.com/u/13842088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjbouza", "html_url": "https://github.com/jjbouza", "followers_url": "https://api.github.com/users/jjbouza/followers", "following_url": "https://api.github.com/users/jjbouza/following{/other_user}", "gists_url": "https://api.github.com/users/jjbouza/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjbouza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjbouza/subscriptions", "organizations_url": "https://api.github.com/users/jjbouza/orgs", "repos_url": "https://api.github.com/users/jjbouza/repos", "events_url": "https://api.github.com/users/jjbouza/events{/privacy}", "received_events_url": "https://api.github.com/users/jjbouza/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-20T02:36:07Z", "updated_at": "2018-11-20T02:36:07Z", "author_association": "NONE", "body_html": "<p>Hello <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23639302\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vishwakftw\">@vishwakftw</a>, thanks for the help.</p>\n<p>The easy solution is to fall back to CPU for matrices larger than 32x32.</p>\n<p>There might be some other options though. For example, using CUDA streams I think we can parallelize the regular (non-batch) SVD operation provided by cuSolver. AFAIK this is what was done before cuSolver provided the batch mode SVD natively. For an example of this see e.g. see the first answer <a href=\"https://stackoverflow.com/questions/17401765/parallel-implementation-for-multiple-svds-using-cuda\" rel=\"nofollow\">here</a>.</p>\n<p>I would need to test and benchmark this approach though.</p>", "body_text": "Hello @vishwakftw, thanks for the help.\nThe easy solution is to fall back to CPU for matrices larger than 32x32.\nThere might be some other options though. For example, using CUDA streams I think we can parallelize the regular (non-batch) SVD operation provided by cuSolver. AFAIK this is what was done before cuSolver provided the batch mode SVD natively. For an example of this see e.g. see the first answer here.\nI would need to test and benchmark this approach though.", "body": "Hello @vishwakftw, thanks for the help. \r\n\r\nThe easy solution is to fall back to CPU for matrices larger than 32x32. \r\n\r\nThere might be some other options though. For example, using CUDA streams I think we can parallelize the regular (non-batch) SVD operation provided by cuSolver. AFAIK this is what was done before cuSolver provided the batch mode SVD natively. For an example of this see e.g. see the first answer [here](https://stackoverflow.com/questions/17401765/parallel-implementation-for-multiple-svds-using-cuda). \r\n\r\nI would need to test and benchmark this approach though.  "}