{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159996980", "pull_request_review_id": 87043831, "id": 159996980, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTk5Njk4MA==", "diff_hunk": "@@ -66,21 +66,30 @@ __global__ void indexCopySmallIndex(TensorInfo<T, IndexType> dst,\n // the number of indices chosen is small, then the\n // indexCopySmallIndex kernel is a better choice to reduce memory\n // accesses.\n-template <typename T, typename IndexType, int DstDim, int SrcDim, int IdxDim>\n+template <typename T, typename IndexType, int DstDim, int SrcDim, int IdxDim,\n+          bool IndexIsMajor>\n __global__ void indexCopyLargeIndex(TensorInfo<T, IndexType> dst,\n                                     TensorInfo<T, IndexType> src,\n                                     TensorInfo<int64_t, IndexType> indices,\n                                     int dstCopyDim,\n                                     int srcCopyDim,\n+                                    IndexType totalSize,\n                                     IndexType innerSize,\n                                     int64_t dstCopyDimSize) {\n   // We stride over the output including the indexed dimension\n   // (totalSize), and calculate the destination index point based on that\n   for (IndexType linearIndex = blockIdx.x * blockDim.x + threadIdx.x;\n-       linearIndex < innerSize * indices.sizes[0];\n+       linearIndex < totalSize;\n        linearIndex += gridDim.x * blockDim.x) {\n-    IndexType srcIndex = linearIndex / innerSize;\n-    IndexType elementInSlice = linearIndex % innerSize;\n+    IndexType srcIndex, elementInSlice;\n+    if (IndexIsMajor) {\n+      srcIndex = linearIndex / innerSize;\n+      elementInSlice = linearIndex % innerSize;\n+    }\n+    else {\n+      elementInSlice = linearIndex / innerSize;\n+      srcIndex = linearIndex % innerSize;", "path": "aten/src/THC/THCTensorIndex.cu", "position": 30, "original_position": 30, "commit_id": "4cc9ebb982e6d1b9764f6c9e7e5202819e0133f3", "original_commit_id": "4cc9ebb982e6d1b9764f6c9e7e5202819e0133f3", "user": {"login": "yongjik", "id": 31876421, "node_id": "MDQ6VXNlcjMxODc2NDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/31876421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongjik", "html_url": "https://github.com/yongjik", "followers_url": "https://api.github.com/users/yongjik/followers", "following_url": "https://api.github.com/users/yongjik/following{/other_user}", "gists_url": "https://api.github.com/users/yongjik/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongjik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongjik/subscriptions", "organizations_url": "https://api.github.com/users/yongjik/orgs", "repos_url": "https://api.github.com/users/yongjik/repos", "events_url": "https://api.github.com/users/yongjik/events{/privacy}", "received_events_url": "https://api.github.com/users/yongjik/received_events", "type": "User", "site_admin": false}, "body": "Hmm... that's interesting, could you point me to your change and tell me what hardware you used?\r\n\r\nI recently toyed with reducing the number of the integer divisions in IndexToOffset for pointwise operations, but could barely see any speedup.  It looked like pointwise operations are dominated by memory latency, at least for my GTX 1080.", "created_at": "2018-01-05T22:44:27Z", "updated_at": "2018-11-23T15:37:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/4493#discussion_r159996980", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4493", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159996980"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4493#discussion_r159996980"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4493"}}, "body_html": "<p>Hmm... that's interesting, could you point me to your change and tell me what hardware you used?</p>\n<p>I recently toyed with reducing the number of the integer divisions in IndexToOffset for pointwise operations, but could barely see any speedup.  It looked like pointwise operations are dominated by memory latency, at least for my GTX 1080.</p>", "body_text": "Hmm... that's interesting, could you point me to your change and tell me what hardware you used?\nI recently toyed with reducing the number of the integer divisions in IndexToOffset for pointwise operations, but could barely see any speedup.  It looked like pointwise operations are dominated by memory latency, at least for my GTX 1080.", "in_reply_to_id": 159908408}