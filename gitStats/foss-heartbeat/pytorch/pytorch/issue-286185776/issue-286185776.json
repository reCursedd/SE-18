{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4493", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4493/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4493/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4493/events", "html_url": "https://github.com/pytorch/pytorch/pull/4493", "id": 286185776, "node_id": "MDExOlB1bGxSZXF1ZXN0MTYxMjY4MjIz", "number": 4493, "title": "Improve memory access patterns for index operations.", "user": {"login": "yongjik", "id": 31876421, "node_id": "MDQ6VXNlcjMxODc2NDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/31876421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongjik", "html_url": "https://github.com/yongjik", "followers_url": "https://api.github.com/users/yongjik/followers", "following_url": "https://api.github.com/users/yongjik/following{/other_user}", "gists_url": "https://api.github.com/users/yongjik/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongjik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongjik/subscriptions", "organizations_url": "https://api.github.com/users/yongjik/orgs", "repos_url": "https://api.github.com/users/yongjik/repos", "events_url": "https://api.github.com/users/yongjik/events{/privacy}", "received_events_url": "https://api.github.com/users/yongjik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 825466279, "node_id": "MDU6TGFiZWw4MjU0NjYyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/0.3.1", "name": "0.3.1", "color": "aefcae", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-01-05T04:08:32Z", "updated_at": "2018-11-23T15:38:02Z", "closed_at": "2018-01-23T01:47:18Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4493", "html_url": "https://github.com/pytorch/pytorch/pull/4493", "diff_url": "https://github.com/pytorch/pytorch/pull/4493.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4493.patch"}, "body_html": "<p>Currently, index operation kernels work in \"source/destination index-major<br>\norder\".  (E.g., if thread count equals slice size, each thread will process<br>\nslice #0 in lockstep, and then slice <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"171281708\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1\">#1</a>, and so on.)</p>\n<p>However, when elements inside each \"slice\" is separated by large strides (e.g.,<br>\nselecting columns of a matrix), it is better to switch to \"elementInSlice-major<br>\norder\".  For example, each thread can process element #0 of every slice, and<br>\nthen element <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"171281708\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/1/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/1\">#1</a> of every slice, and so on.</p>", "body_text": "Currently, index operation kernels work in \"source/destination index-major\norder\".  (E.g., if thread count equals slice size, each thread will process\nslice #0 in lockstep, and then slice #1, and so on.)\nHowever, when elements inside each \"slice\" is separated by large strides (e.g.,\nselecting columns of a matrix), it is better to switch to \"elementInSlice-major\norder\".  For example, each thread can process element #0 of every slice, and\nthen element #1 of every slice, and so on.", "body": "Currently, index operation kernels work in \"source/destination index-major\r\norder\".  (E.g., if thread count equals slice size, each thread will process\r\nslice #0 in lockstep, and then slice #1, and so on.)\r\n\r\nHowever, when elements inside each \"slice\" is separated by large strides (e.g.,\r\nselecting columns of a matrix), it is better to switch to \"elementInSlice-major\r\norder\".  For example, each thread can process element #0 of every slice, and\r\nthen element #1 of every slice, and so on."}