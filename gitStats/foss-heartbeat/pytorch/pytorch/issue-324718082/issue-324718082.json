{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7716", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7716/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7716/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7716/events", "html_url": "https://github.com/pytorch/pytorch/issues/7716", "id": 324718082, "node_id": "MDU6SXNzdWUzMjQ3MTgwODI=", "number": 7716, "title": "Batchnorm1d cannot work with batch size == 1", "user": {"login": "jeasinema", "id": 10633528, "node_id": "MDQ6VXNlcjEwNjMzNTI4", "avatar_url": "https://avatars3.githubusercontent.com/u/10633528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeasinema", "html_url": "https://github.com/jeasinema", "followers_url": "https://api.github.com/users/jeasinema/followers", "following_url": "https://api.github.com/users/jeasinema/following{/other_user}", "gists_url": "https://api.github.com/users/jeasinema/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeasinema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeasinema/subscriptions", "organizations_url": "https://api.github.com/users/jeasinema/orgs", "repos_url": "https://api.github.com/users/jeasinema/repos", "events_url": "https://api.github.com/users/jeasinema/events{/privacy}", "received_events_url": "https://api.github.com/users/jeasinema/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-05-20T15:36:42Z", "updated_at": "2018-05-23T15:20:36Z", "closed_at": "2018-05-23T11:22:31Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>As it illustrates in the <a href=\"https://pytorch.org/docs/stable/nn.html#torch.nn.BatchNorm1d\" rel=\"nofollow\">doc</a>, <code>torch.nn.Batchnorm1d</code> supports both input of size <code>(N, C, L)</code> and <code>(N, C)</code> . Howevere, when the input size is <code>(1, C)</code>(batch size is 1), <code>pytorch</code> will produce an error. It seems that if <code>N &gt; 1</code>, there will be no error at all.</p>\n<p>Another interesting fact is, when I try to seperate a minibatch into multi cards(by using <code>torch.nn.DataParallel</code>), since the batch size for each gpu is not decided by me, this error may also happens with <code>N &gt; 1</code>(for a specific gpu, its batch size may be <code>1</code> under some circumstances). I know currently <code>PyTorch</code> does not support distributed batchnorm, but it still worth a report, I think.</p>\n<h2>Code example</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-e\">torch</span>.<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(Foo, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.bn <span class=\"pl-k\">=</span> torch.nn.BatchNorm1d(<span class=\"pl-c1\">3</span>)\n    \n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.bn(x)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    x1 <span class=\"pl-k\">=</span> torch.ones(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">3</span>)\n    x2 <span class=\"pl-k\">=</span> torch.ones(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>)\n    model <span class=\"pl-k\">=</span> Foo()\n    y <span class=\"pl-k\">=</span> model(x1) <span class=\"pl-c\"><span class=\"pl-c\">#</span> this line will fail to run </span>\n    y <span class=\"pl-k\">=</span> model(x2) <span class=\"pl-c\"><span class=\"pl-c\">#</span> this line can run without error</span>\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    main()\t\n</pre></div>\n<h2>System Info</h2>\n<p>PyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.1.85</p>\n<p>OS: Debian GNU/Linux unstable (sid)<br>\nGCC version: (Debian 6.4.0-17) 6.4.0 20180424<br>\nCMake version: version 3.11.1</p>\n<p>Python version: 3.6<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 9.1.85<br>\nGPU models and configuration: GPU 0: GeForce GTX 1070<br>\nNvidia driver version: 390.48<br>\ncuDNN version: Probably one of the following:<br>\n/usr/lib/cuda/lib64/libcudnn.so.7.1.3<br>\n/usr/lib/cuda/lib64/libcudnn_static.a</p>\n<p>Versions of relevant libraries:<br>\n[pip3] numpy (1.14.2)<br>\n[pip3] torch (0.4.0)<br>\n[pip3] torchvision (0.2.0)<br>\n[conda] Could not collect</p>", "body_text": "Issue description\nAs it illustrates in the doc, torch.nn.Batchnorm1d supports both input of size (N, C, L) and (N, C) . Howevere, when the input size is (1, C)(batch size is 1), pytorch will produce an error. It seems that if N > 1, there will be no error at all.\nAnother interesting fact is, when I try to seperate a minibatch into multi cards(by using torch.nn.DataParallel), since the batch size for each gpu is not decided by me, this error may also happens with N > 1(for a specific gpu, its batch size may be 1 under some circumstances). I know currently PyTorch does not support distributed batchnorm, but it still worth a report, I think.\nCode example\nimport torch\n\nclass Foo(torch.nn.Module):\n    def __init__(self):\n        super(Foo, self).__init__()\n        self.bn = torch.nn.BatchNorm1d(3)\n    \n    def forward(self, x):\n        return self.bn(x)\n\ndef main():\n    x1 = torch.ones(1,3)\n    x2 = torch.ones(2,3)\n    model = Foo()\n    y = model(x1) # this line will fail to run \n    y = model(x2) # this line can run without error\n\nif __name__ == '__main__':\n    main()\t\n\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.1.85\nOS: Debian GNU/Linux unstable (sid)\nGCC version: (Debian 6.4.0-17) 6.4.0 20180424\nCMake version: version 3.11.1\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: 9.1.85\nGPU models and configuration: GPU 0: GeForce GTX 1070\nNvidia driver version: 390.48\ncuDNN version: Probably one of the following:\n/usr/lib/cuda/lib64/libcudnn.so.7.1.3\n/usr/lib/cuda/lib64/libcudnn_static.a\nVersions of relevant libraries:\n[pip3] numpy (1.14.2)\n[pip3] torch (0.4.0)\n[pip3] torchvision (0.2.0)\n[conda] Could not collect", "body": "## Issue description\r\n\r\nAs it illustrates in the [doc](https://pytorch.org/docs/stable/nn.html#torch.nn.BatchNorm1d), `torch.nn.Batchnorm1d` supports both input of size `(N, C, L)` and `(N, C)` . Howevere, when the input size is `(1, C)`(batch size is 1), `pytorch` will produce an error. It seems that if `N > 1`, there will be no error at all.\r\n\r\nAnother interesting fact is, when I try to seperate a minibatch into multi cards(by using `torch.nn.DataParallel`), since the batch size for each gpu is not decided by me, this error may also happens with `N > 1`(for a specific gpu, its batch size may be `1` under some circumstances). I know currently `PyTorch` does not support distributed batchnorm, but it still worth a report, I think.\r\n## Code example\r\n\r\n```python\r\nimport torch\r\n\r\nclass Foo(torch.nn.Module):\r\n    def __init__(self):\r\n        super(Foo, self).__init__()\r\n        self.bn = torch.nn.BatchNorm1d(3)\r\n    \r\n    def forward(self, x):\r\n        return self.bn(x)\r\n\r\ndef main():\r\n    x1 = torch.ones(1,3)\r\n    x2 = torch.ones(2,3)\r\n    model = Foo()\r\n    y = model(x1) # this line will fail to run \r\n    y = model(x2) # this line can run without error\r\n\r\nif __name__ == '__main__':\r\n    main()\t\r\n\r\n```\r\n\r\n## System Info\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.1.85\r\n\r\nOS: Debian GNU/Linux unstable (sid)\r\nGCC version: (Debian 6.4.0-17) 6.4.0 20180424\r\nCMake version: version 3.11.1\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.1.85\r\nGPU models and configuration: GPU 0: GeForce GTX 1070\r\nNvidia driver version: 390.48\r\ncuDNN version: Probably one of the following:\r\n/usr/lib/cuda/lib64/libcudnn.so.7.1.3\r\n/usr/lib/cuda/lib64/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip3] numpy (1.14.2)\r\n[pip3] torch (0.4.0)\r\n[pip3] torchvision (0.2.0)\r\n[conda] Could not collect\r\n"}