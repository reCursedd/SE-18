{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199858263", "pull_request_review_id": 134060150, "id": 199858263, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTg1ODI2Mw==", "diff_hunk": "@@ -0,0 +1,946 @@\n+#!/usr/bin/python\n+\"\"\" The Python Hipify script.\n+##\n+# Copyright (c) 2015-2016 Advanced Micro Devices, Inc. All rights reserved.\n+#\n+# Permission is hereby granted, free of charge, to any person obtaining a copy\n+# of this software and associated documentation files (the \"Software\"), to deal\n+# in the Software without restriction, including without limitation the rights\n+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+# copies of the Software, and to permit persons to whom the Software is\n+# furnished to do so, subject to the following conditions:\n+#\n+# The above copyright notice and this permission notice shall be included in\n+# all copies or substantial portions of the Software.\n+#\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+# THE SOFTWARE.\n+\"\"\"\n+\n+import argparse\n+import constants\n+import re\n+import shutil\n+import sys\n+import os\n+import yaml\n+\n+from functools import reduce\n+from cuda_to_hip_mappings import CUDA_TO_HIP_MAPPINGS\n+\n+def openf(filename, mode):\n+   if sys.version_info[0] == 3:\n+      return open(filename, mode, errors='ignore')\n+   else:\n+      return open(filename, mode)\n+\n+# Color coding for printing\n+class bcolors:\n+    HEADER = '\\033[95m'\n+    OKBLUE = '\\033[94m'\n+    OKGREEN = '\\033[92m'\n+    WARNING = '\\033[93m'\n+    FAIL = '\\033[91m'\n+    ENDC = '\\033[0m'\n+    BOLD = '\\033[1m'\n+    UNDERLINE = '\\033[4m'\n+\n+\n+def update_progress_bar(total, progress):\n+    \"\"\"\n+    Displays and updates a console progress bar.\n+    \"\"\"\n+    barLength, status = 20, \"\"\n+    progress = float(progress) / float(total)\n+    if progress >= 1.:\n+        progress, status = 1, \"\\r\\n\"\n+\n+    # Number of blocks to display. Used to visualize progress.\n+    block = int(round(barLength * progress))\n+    text = \"\\r[{}] {:.0f}% {}\".format(\n+        \"#\" * block + \"-\" * (barLength - block), round(progress * 100, 0),\n+        status)\n+\n+    # Send the progress to stdout.\n+    sys.stdout.write(text)\n+\n+    # Send the buffered text to stdout!\n+    sys.stdout.flush()\n+\n+\n+def filename_ends_with_extension(filename, extensions):\n+    \"\"\"Helper method to see if filename ends with certain extension\"\"\"\n+    return reduce(lambda result, ext: filename.endswith(\".\" + ext) or result, extensions, False)\n+\n+\n+def inside_included_directories(dirpath, rootpath, include_dirs):\n+    \"\"\"Helper method to see if filename within included directories\"\"\"\n+    return reduce(lambda result, included_directory: re.match(r'(%s)\\b' % os.path.join(rootpath, included_directory), dirpath) or result, include_dirs, None)\n+\n+\n+def walk_over_directory(rootpath, extensions, show_detailed=False, include_dirs=None):\n+    \"\"\"\n+    Recursively walk over directory and call preprocessor on selected files.\n+\n+    Arguments)\n+        extensions - A plist of file extensions ['cu', 'cuh', ..]\n+\n+        include_dirs - Directories under the rootpath that should be included in the walk.\n+\n+        show_detailed - Show a detailed summary of the transpilation process.\n+    \"\"\"\n+\n+\n+    # Default argument for excluded directories.\n+    if include_dirs is None:\n+        include_dirs = []\n+\n+    # Compute the total number of files to be traversed.\n+    total_files = 0\n+    for (dirpath, _dirnames, filenames) in os.walk(rootpath):\n+        if inside_included_directories(dirpath, rootpath, include_dirs):\n+            for filename in filenames:\n+                total_files += filename_ends_with_extension(filename, extensions)\n+\n+    current_file = 0\n+\n+    # Preprocessing statistics.\n+    stats = {\"unsupported_calls\": [], \"kernel_launches\": []}\n+\n+    # Begin traversing the files.\n+    for (dirpath, _dirnames, filenames) in os.walk(rootpath, topdown=True):\n+        # Check if file ends with a valid extensions\n+        if not inside_included_directories(dirpath, rootpath, include_dirs):\n+            continue\n+\n+        for filename in filenames:\n+            if filename_ends_with_extension(filename, extensions):\n+                # Construct the file's full path\n+                filepath = os.sep.join([dirpath, filename])\n+\n+                # Execute the preprocessor on the specified file.\n+                preprocessor(filepath, stats)\n+\n+                # Update the progress\n+                print(os.path.join(dirpath, filename))\n+                update_progress_bar(total_files, current_file)\n+\n+                current_file += 1\n+\n+    print(bcolors.OKGREEN + \"Successfully preprocessed all matching files.\" + bcolors.ENDC)\n+\n+    # Show detailed summary\n+    if show_detailed:\n+        compute_stats(stats, show_detailed)\n+\n+\n+def compute_stats(stats):\n+    unsupported_calls = set(cuda_call for (cuda_call, _filepath) in stats[\"unsupported_calls\"])\n+\n+    # Print the number of unsupported calls\n+    print(\"Total number of unsupported CUDA function calls: %d\" % (len(unsupported_calls)))\n+\n+    # Print the list of unsupported calls\n+    print(\", \".join(unsupported_calls))\n+\n+    # Print the number of kernel launches\n+    print(\"\\nTotal number of replaced kernel launches: %d\" % (len(stats[\"kernel_launches\"])))\n+\n+def processKernelLaunches(string, stats):\n+    \"\"\" Replace the CUDA style Kernel launches with the HIP style kernel launches.\"\"\"\n+    # Concat the namespace with the kernel names. (Find cleaner way of doing this later).\n+    string = re.sub(r'([ ]+)(detail+)::[ ]+\\\\\\n[ ]+', lambda inp: \"%s%s::\" % (inp.group(1), inp.group(2)), string)", "path": "tools/amd_build/pyHIPIFY/hipify-python.py", "position": null, "original_position": 157, "commit_id": "ca3b5edbbe1b9beadd9bbabbad14e953e1e7ff6f", "original_commit_id": "e1c85009af5f7e919b1ea665ef7fb5f29b13b32e", "user": {"login": "iotamudelta", "id": 12565466, "node_id": "MDQ6VXNlcjEyNTY1NDY2", "avatar_url": "https://avatars2.githubusercontent.com/u/12565466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iotamudelta", "html_url": "https://github.com/iotamudelta", "followers_url": "https://api.github.com/users/iotamudelta/followers", "following_url": "https://api.github.com/users/iotamudelta/following{/other_user}", "gists_url": "https://api.github.com/users/iotamudelta/gists{/gist_id}", "starred_url": "https://api.github.com/users/iotamudelta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iotamudelta/subscriptions", "organizations_url": "https://api.github.com/users/iotamudelta/orgs", "repos_url": "https://api.github.com/users/iotamudelta/repos", "events_url": "https://api.github.com/users/iotamudelta/events{/privacy}", "received_events_url": "https://api.github.com/users/iotamudelta/received_events", "type": "User", "site_admin": false}, "body": "done", "created_at": "2018-07-03T15:48:29Z", "updated_at": "2018-11-23T15:46:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/8812#discussion_r199858263", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8812", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/199858263"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8812#discussion_r199858263"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8812"}}, "body_html": "<p>done</p>", "body_text": "done", "in_reply_to_id": 197653623}