{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200777332", "pull_request_review_id": 135165101, "id": 200777332, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc3NzMzMg==", "diff_hunk": "@@ -0,0 +1,967 @@\n+#!/usr/bin/python\n+\"\"\" The Python Hipify script.\n+##\n+# Copyright (c) 2015-2016 Advanced Micro Devices, Inc. All rights reserved.\n+#               2017-2018 Advanced Micro Devices, Inc. and\n+#                         Facebook Inc. All rights reserved.\n+#\n+# Permission is hereby granted, free of charge, to any person obtaining a copy\n+# of this software and associated documentation files (the \"Software\"), to deal\n+# in the Software without restriction, including without limitation the rights\n+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+# copies of the Software, and to permit persons to whom the Software is\n+# furnished to do so, subject to the following conditions:\n+#\n+# The above copyright notice and this permission notice shall be included in\n+# all copies or substantial portions of the Software.\n+#\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+# THE SOFTWARE.\n+\"\"\"\n+\n+import argparse\n+import constants\n+import re\n+import shutil\n+import sys\n+import os\n+import yaml\n+\n+from functools import reduce\n+from enum import Enum\n+from cuda_to_hip_mappings import CUDA_TO_HIP_MAPPINGS\n+\n+\n+def openf(filename, mode):\n+    if sys.version_info[0] == 3:\n+        return open(filename, mode, errors='ignore')\n+    else:\n+        return open(filename, mode)\n+\n+# Color coding for printing\n+\n+\n+class bcolors:\n+    HEADER = '\\033[95m'\n+    OKBLUE = '\\033[94m'\n+    OKGREEN = '\\033[92m'\n+    WARNING = '\\033[93m'\n+    FAIL = '\\033[91m'\n+    ENDC = '\\033[0m'\n+    BOLD = '\\033[1m'\n+    UNDERLINE = '\\033[4m'\n+\n+\n+class disablefuncmode(Enum):\n+    \"\"\" How to disable functions\n+    0 - Remove the function entirely (includes the signature).\n+    1 - Stub the function and return an empty object based off the type.\n+    2 - Add !defined(__HIP_PLATFORM_HCC__) preprocessors around the function.\n+        This macro is defined by HIP if the compiler used is hcc.\n+    3 - Add !defined(__HIP_DEVICE_COMPILE__) preprocessors around the function.\n+        This macro is defined by HIP if either hcc or nvcc are used in the device path.\n+    4 - Stub the function and throw an exception at runtime.\n+    5 - Stub the function and throw an assert(0).\n+    6 - Stub the function and keep an empty body.\n+    \"\"\"\n+    REMOVE = 0\n+    STUB = 1\n+    HCC_MACRO = 2\n+    DEVICE_MACRO = 3\n+    EXCEPTION = 4\n+    ASSERT = 5\n+    EMPTYBODY = 6\n+\n+\n+def update_progress_bar(total, progress):\n+    \"\"\"\n+    Displays and updates a console progress bar.\n+    \"\"\"\n+    barLength, status = 20, \"\"\n+    progress = float(progress) / float(total)\n+    if progress >= 1.:\n+        progress, status = 1, \"\\r\\n\"\n+\n+    # Number of blocks to display. Used to visualize progress.\n+    block = int(round(barLength * progress))\n+    text = \"\\r[{}] {:.0f}% {}\".format(\n+        \"#\" * block + \"-\" * (barLength - block), round(progress * 100, 0),\n+        status)\n+\n+    # Send the progress to stdout.\n+    sys.stderr.write(text)\n+\n+    # Send the buffered text to stdout!\n+    sys.stderr.flush()\n+\n+\n+def filename_ends_with_extension(filename, extensions):\n+    \"\"\"Helper method to see if filename ends with certain extension\"\"\"\n+    return reduce(lambda result, ext: filename.endswith(\".\" + ext) or result, extensions, False)\n+\n+\n+def inside_included_directories(dirpath, rootpath, include_dirs):\n+    \"\"\"Helper method to see if filename within included directories\"\"\"\n+    return reduce(lambda result, included_directory: re.match(r'(%s)\\b' % os.path.join(rootpath, included_directory), dirpath) or result, include_dirs, None)\n+\n+\n+def walk_over_directory(rootpath, extensions, show_detailed=False, include_dirs=None):\n+    \"\"\"\n+    Recursively walk over directory and call preprocessor on selected files.\n+\n+    Arguments)\n+        extensions - A plist of file extensions ['cu', 'cuh', ..]\n+\n+        include_dirs - Directories under the rootpath that should be included in the walk.\n+\n+        show_detailed - Show a detailed summary of the transpilation process.\n+    \"\"\"\n+\n+    # Default argument for excluded directories.\n+    if include_dirs is None:\n+        include_dirs = []\n+\n+    # Compute the total number of files to be traversed.\n+    total_files = 0\n+    for (dirpath, _dirnames, filenames) in os.walk(rootpath):\n+        if inside_included_directories(dirpath, rootpath, include_dirs):\n+            for filename in filenames:\n+                total_files += filename_ends_with_extension(filename, extensions)\n+\n+    current_file = 0\n+\n+    # Preprocessing statistics.\n+    stats = {\"unsupported_calls\": [], \"kernel_launches\": []}\n+\n+    # Begin traversing the files.\n+    for (dirpath, _dirnames, filenames) in os.walk(rootpath, topdown=True):\n+        # Check if file ends with a valid extensions\n+        if not inside_included_directories(dirpath, rootpath, include_dirs):\n+            continue\n+\n+        for filename in filenames:\n+            if filename_ends_with_extension(filename, extensions):\n+                # Construct the file's full path\n+                filepath = os.sep.join([dirpath, filename])\n+\n+                # Execute the preprocessor on the specified file.\n+                preprocessor(filepath, stats)\n+\n+                # Update the progress\n+                print(os.path.join(dirpath, filename))\n+                update_progress_bar(total_files, current_file)\n+\n+                current_file += 1\n+\n+    print(bcolors.OKGREEN + \"Successfully preprocessed all matching files.\" + bcolors.ENDC)\n+\n+    # Show detailed summary\n+    if show_detailed:\n+        compute_stats(stats, show_detailed)\n+\n+\n+def compute_stats(stats):\n+    unsupported_calls = set(cuda_call for (cuda_call, _filepath) in stats[\"unsupported_calls\"])\n+\n+    # Print the number of unsupported calls\n+    print(\"Total number of unsupported CUDA function calls: %d\" % (len(unsupported_calls)))\n+\n+    # Print the list of unsupported calls\n+    print(\", \".join(unsupported_calls))\n+\n+    # Print the number of kernel launches\n+    print(\"\\nTotal number of replaced kernel launches: %d\" % (len(stats[\"kernel_launches\"])))\n+\n+\n+def processKernelLaunches(string, stats):\n+    \"\"\" Replace the CUDA style Kernel launches with the HIP style kernel launches.\"\"\"\n+    # Concat the namespace with the kernel names. (Find cleaner way of doing this later).\n+    string = re.sub(r'([ ]+)(detail?)::[ ]+\\\\\\n[ ]+', lambda inp: \"%s%s::\" % (inp.group(1), inp.group(2)), string)\n+\n+    def grab_method_and_template(in_kernel):\n+        # The positions for relevant kernel components.\n+        pos = {\n+            \"kernel_launch\": {\"start\": in_kernel[\"start\"], \"end\": in_kernel[\"end\"]},\n+            \"kernel_name\": {\"start\": -1, \"end\": -1},\n+            \"template\": {\"start\": -1, \"end\": -1}\n+        }\n+\n+        # Count for balancing template\n+        count = {\"<>\": 0}\n+\n+        # Status for whether we are parsing a certain item.\n+        START = 0\n+        AT_TEMPLATE = 1\n+        AFTER_TEMPLATE = 2\n+        AT_KERNEL_NAME = 3\n+\n+        status = START\n+\n+        # Parse the string character by character\n+        for i in range(pos[\"kernel_launch\"][\"start\"] - 1, -1, -1):\n+            char = string[i]\n+\n+            # Handle Templating Arguments\n+            if status == START or status == AT_TEMPLATE:\n+                if char == \">\":\n+                    if status == START:\n+                        status = AT_TEMPLATE\n+                        pos[\"template\"][\"end\"] = i\n+                    count[\"<>\"] += 1\n+\n+                if char == \"<\":\n+                    count[\"<>\"] -= 1\n+                    if count[\"<>\"] == 0 and (status == AT_TEMPLATE):\n+                        pos[\"template\"][\"start\"] = i\n+                        status = AFTER_TEMPLATE\n+\n+            # Handle Kernel Name\n+            if status != AT_TEMPLATE:\n+                if string[i] == \"(\" or string[i] == \")\" or string[i] == \"_\" or string[i].isalnum() or string[i] == \":\":\n+                    if status != AT_KERNEL_NAME:\n+                        status = AT_KERNEL_NAME\n+                        pos[\"kernel_name\"][\"end\"] = i\n+\n+                    # Case: Kernel name starts the string.\n+                    if i == 0:\n+                        pos[\"kernel_name\"][\"start\"] = 0\n+\n+                        # Finished\n+                        return [(pos[\"kernel_name\"]), (pos[\"template\"]), (pos[\"kernel_launch\"])]\n+\n+                else:\n+                    # Potential ending point if we're already traversing a kernel's name.\n+                    if status == AT_KERNEL_NAME:\n+                        pos[\"kernel_name\"][\"start\"] = i\n+\n+                        # Finished\n+                        return [(pos[\"kernel_name\"]), (pos[\"template\"]), (pos[\"kernel_launch\"])]\n+\n+    def find_kernel_bounds(string):\n+        \"\"\"Finds the starting and ending points for all kernel launches in the string.\"\"\"\n+        kernel_end = 0\n+        kernel_positions = []\n+\n+        # Continue until we cannot find any more kernels anymore.\n+        while string.find(\"<<<\", kernel_end) != -1:\n+            # Get kernel starting position (starting from the previous ending point)\n+            kernel_start = string.find(\"<<<\", kernel_end)\n+\n+            # Get kernel ending position (adjust end point past the >>>)\n+            kernel_end = string.find(\">>>\", kernel_start) + 3\n+            if kernel_end <= 0:\n+                raise InputError(\"no kernel end found\")\n+\n+            # Add to list of traversed kernels\n+            kernel_positions.append({\"start\": kernel_start, \"end\": kernel_end,\n+                                     \"group\": string[kernel_start: kernel_end]})\n+\n+        return kernel_positions\n+\n+    # Grab positional ranges of all kernel launchces\n+    get_kernel_positions = [k for k in find_kernel_bounds(string)]\n+    output_string = string\n+\n+    # Replace each CUDA kernel with a HIP kernel.\n+    for kernel in get_kernel_positions:\n+        # Get kernel components\n+        params = grab_method_and_template(kernel)\n+\n+        # Find parenthesis after kernel launch\n+        parenthesis = string.find(\"(\", kernel[\"end\"])\n+\n+        # Extract cuda kernel\n+        cuda_kernel = string[params[0][\"start\"]:parenthesis + 1]\n+\n+        # Keep number of kernel launch params consistent (grid dims, group dims, stream, dynamic shared size)\n+        num_klp = len(extract_arguments(0, kernel[\"group\"].replace(\"<<<\", \"(\").replace(\">>>\", \")\")))\n+\n+        # Transform cuda kernel to hip kernel\n+        hip_kernel = \"hipLaunchKernelGGL(\" + cuda_kernel[0:-1].replace(\">>>\",\n+                                                                       \", 0\" * (4 - num_klp) + \">>>\").replace(\"<<<\", \", \").replace(\">>>\", \", \")\n+\n+        # Replace cuda kernel with hip kernel\n+        output_string = output_string.replace(cuda_kernel, hip_kernel)\n+\n+        # Update the statistics\n+        stats[\"kernel_launches\"].append(hip_kernel)\n+\n+    return output_string\n+\n+\n+def find_parenthesis_end(input_string, start):\n+    inside_parenthesis = False\n+    parens = 0\n+    pos = start\n+    p_start, p_end = -1, -1\n+\n+    while pos < len(input_string):\n+        if input_string[pos] == \"(\":\n+            if inside_parenthesis is False:\n+                inside_parenthesis = True\n+                parens = 1\n+                p_start = pos\n+            else:\n+                parens += 1\n+        elif input_string[pos] == \")\" and inside_parenthesis:\n+            parens -= 1\n+\n+            if parens == 0:\n+                p_end = pos\n+                return p_start, p_end\n+\n+        pos += 1\n+    return None, None\n+\n+\n+def disable_asserts(input_string):\n+    \"\"\" Disables regular assert statements\n+    e.g. \"assert(....)\" -> \"/*assert(....)*/\"\n+    \"\"\"\n+    output_string = input_string\n+    asserts = list(re.finditer(r\"\\bassert[ ]*\\(\", input_string))\n+    for assert_item in asserts:\n+        p_start, p_end = find_parenthesis_end(input_string, assert_item.end() - 1)\n+        start = assert_item.start()\n+        output_string = output_string.replace(input_string[start:p_end + 1], \"\")\n+    return output_string\n+\n+\n+def disable_function(input_string, function, replace_style):\n+    \"\"\" Finds and disables a function in a particular file.\n+\n+    If type(function) == List\n+        function - The signature of the function to disable.\n+            e.g. [\"bool\", \"overlappingIndices\", \"(const Tensor& t)\"]\n+            disables function -> \"bool overlappingIndices(const Tensor& t)\"\n+\n+    If type(function) == String\n+        function - Disables the function by name only.\n+            e.g. \"overlappingIndices\"\n+\n+    replace_style - The style to use when stubbing functions.\n+    \"\"\"\n+# void (*)(hcrngStateMtgp32 *, int, float *, double, double)\n+    info = {\n+        \"function_start\": -1,\n+        \"function_end\": -1,\n+        \"bracket_count\": 0\n+    }\n+\n+    STARTED = 0\n+    INSIDE_FUNCTION = 1\n+    BRACKET_COMPLETE = 2\n+\n+    STATE = STARTED\n+\n+    if type(function) == list:\n+        # Extract components from function signature.\n+        func_info = {\n+            \"return_type\": function[0].strip(),\n+            \"function_name\": function[1].strip(),\n+            \"function_args\": function[2].strip()\n+        }\n+\n+        # Create function string to search for\n+        function_string = \"%s%s%s\" % (\n+            func_info[\"return_type\"],\n+            func_info[\"function_name\"],\n+            func_info[\"function_args\"]\n+        )\n+\n+        # Find the starting position for the function\n+        info[\"function_start\"] = input_string.find(function_string)\n+    else:\n+        # Automatically detect signature.\n+        the_match = re.search(r\"(((.*) (\\*)?)(%s)(\\([^{)]*\\)))\\s*{\" %\n+                              (function.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")), input_string)\n+        if the_match is None:\n+            return input_string\n+\n+        func_info = {\n+            \"return_type\": the_match.group(2).strip(),\n+            \"function_name\": the_match.group(5).strip(),\n+            \"function_args\": the_match.group(6).strip(),\n+        }\n+\n+        # Find the starting position for the function\n+        info[\"function_start\"] = the_match.start()\n+        function_string = the_match.group(1)\n+\n+    # The function can't be found anymore.\n+    if info[\"function_start\"] == -1:\n+        return input_string\n+\n+    # Find function block start.\n+    pos = info[\"function_start\"] + len(function_string) - 1\n+    while pos < len(input_string) and STATE != BRACKET_COMPLETE:\n+        if input_string[pos] == \"{\":\n+            if STATE != INSIDE_FUNCTION:\n+                STATE = INSIDE_FUNCTION\n+                info[\"bracket_count\"] = 1\n+            else:\n+                info[\"bracket_count\"] += 1\n+        elif input_string[pos] == \"}\":\n+            info[\"bracket_count\"] -= 1\n+\n+            if info[\"bracket_count\"] == 0 and STATE == INSIDE_FUNCTION:\n+                STATE = BRACKET_COMPLETE\n+                info[\"function_end\"] = pos\n+\n+        pos += 1\n+\n+    # Never found the function end. Corrupted file!\n+    if STATE != BRACKET_COMPLETE:\n+        return input_string\n+\n+    # Preprocess the source by removing the function.\n+    function_body = input_string[info[\"function_start\"]:info[\"function_end\"] + 1]\n+\n+    # Remove the entire function body\n+    if replace_style == disablefuncmode.REMOVE:\n+        output_string = input_string.replace(function_body, \"\")\n+\n+    # Stub the function based off its return type.\n+    elif replace_style == disablefuncmode.STUB:\n+        # void return type\n+        if func_info[\"return_type\"] == \"void\" or func_info[\"return_type\"] == \"static void\":\n+            stub = \"%s{\\n}\" % (function_string)\n+        # pointer return type\n+        elif \"*\" in func_info[\"return_type\"]:\n+            stub = \"%s{\\nreturn %s;\\n}\" % (function_string, \"NULL\")  # nullptr\n+        else:\n+            stub = \"%s{\\n%s stub_var;\\nreturn stub_var;\\n}\" % (function_string, func_info[\"return_type\"])\n+\n+        output_string = input_string.replace(function_body, stub)\n+\n+    # Add HIP Preprocessors.\n+    elif replace_style == disablefuncmode.HCC_MACRO:\n+        output_string = input_string.replace(\n+            function_body,\n+            \"#if !defined(__HIP_PLATFORM_HCC__)\\n%s\\n#endif\" % function_body)\n+\n+    # Add HIP Preprocessors.\n+    elif replace_style == disablefuncmode.DEVICE_MACRO:\n+        output_string = input_string.replace(\n+            function_body,\n+            \"#if !defined(__HIP_DEVICE_COMPILE__)\\n%s\\n#endif\" % function_body)\n+\n+    # Throw an exception at runtime.\n+    elif replace_style == disablefuncmode.EXCEPTION:\n+        stub = \"%s{\\n%s;\\n}\" % (\n+            function_string,\n+            'throw std::runtime_error(\"The function %s is not implemented.\")' %\n+            function_string.replace(\"\\n\", \" \"))\n+        output_string = input_string.replace(function_body, stub)\n+\n+    elif replace_style == disablefuncmode.ASSERT:\n+        stub = \"%s{\\n%s;\\n}\" % (\n+            function_string,\n+            'assert(0)')\n+        output_string = input_string.replace(function_body, stub)\n+\n+    elif replace_style == disablefuncmode.EMPTY:\n+        stub = \"%s{\\n;\\n}\" % (function_string)\n+        output_string = input_string.replace(function_body, stub)\n+    return output_string\n+\n+\n+def preprocessor(filepath, stats):\n+    \"\"\" Executes the CUDA -> HIP conversion on the specified file. \"\"\"\n+    with openf(filepath, \"r+\") as fileobj:\n+        output_source = fileobj.read()\n+\n+        # Perform type, method, constant replacements\n+        for mapping in CUDA_TO_HIP_MAPPINGS:\n+            for cuda_type, value in mapping.items():\n+                # Extract relevant information\n+                hip_type = value[0]\n+                meta_data = value[1:]\n+\n+                if output_source.find(cuda_type) > -1:\n+                    # Check if supported\n+                    if constants.HIP_UNSUPPORTED in meta_data:\n+                        stats[\"unsupported_calls\"].append((cuda_type, filepath))\n+\n+                if cuda_type in output_source:\n+                    output_source = re.sub(r'\\b(%s)\\b' % cuda_type, lambda x: hip_type, output_source)\n+\n+        # Perform Kernel Launch Replacements\n+        output_source = processKernelLaunches(output_source, stats)\n+\n+        # Disable asserts\n+        if not filepath.endswith(\"THCGeneral.h.in\"):\n+            output_source = disable_asserts(output_source)\n+\n+        # Overwrite file contents\n+        fileobj.seek(0)\n+        fileobj.write(output_source)\n+        fileobj.truncate()\n+        fileobj.flush()\n+\n+        # Flush to disk\n+        os.fsync(fileobj)\n+\n+\n+def file_specific_replacement(filepath, search_string, replace_string, strict=False):\n+    with openf(filepath, \"r+\") as f:\n+        contents = f.read()\n+        if strict:\n+            contents = re.sub(r'\\b(%s)\\b' % search_string, lambda x: replace_string, contents)\n+        else:\n+            contents = contents.replace(search_string, replace_string)\n+        f.seek(0)\n+        f.write(contents)\n+        f.truncate()\n+\n+\n+def file_add_header(filepath, header):\n+    with openf(filepath, \"r+\") as f:\n+        contents = f.read()\n+        if header[0] != \"<\" and header[-1] != \">\":\n+            header = '\"%s\"' % header\n+        contents = ('#include %s \\n' % header) + contents\n+        f.seek(0)\n+        f.write(contents)\n+        f.truncate()\n+\n+\n+def fix_static_global_kernels(in_txt):\n+    \"\"\"Static global kernels in HIP results in a compilation error.\"\"\"\n+    in_txt = in_txt.replace(\" __global__ static\", \"__global__\")\n+    return in_txt\n+\n+\n+def get_kernel_template_params(the_file, KernelDictionary):\n+    \"\"\"Scan for __global__ kernel definitions then extract its argument types, and static cast as necessary\"\"\"\n+    # Read the kernel file.\n+    with openf(the_file, \"r\") as f:\n+        # Extract all kernels with their templates inside of the file\n+        string = f.read()\n+\n+        get_kernel_definitions = [k for k in re.finditer(\n+            r\"(template[ ]*<(.*)>\\n.*\\n?)?__global__ void[\\n| ](\\w+(\\(.*\\))?)\\(\", string)]\n+\n+        # Create new launch syntax\n+        for kernel in get_kernel_definitions:\n+            template_arguments = kernel.group(2).split(\",\") if kernel.group(2) else \"\"\n+            template_arguments = [x.replace(\"template\", \"\").replace(\"typename\", \"\").strip() for x in template_arguments]\n+            kernel_name = kernel.group(3)\n+\n+            # Kernel starting / ending positions\n+            arguments_start = kernel.end()\n+            argument_start_pos = arguments_start\n+            current_position = arguments_start + 1\n+\n+            # Search for final parenthesis\n+            arguments = []\n+            closures = {\"(\": 1, \"<\": 0}\n+            while current_position < len(string):\n+                if string[current_position] == \"(\":\n+                    closures[\"(\"] += 1\n+                elif string[current_position] == \")\":\n+                    closures[\"(\"] -= 1\n+                elif string[current_position] == \"<\":\n+                    closures[\"<\"] += 1\n+                elif string[current_position] == \">\":\n+                    closures[\"<\"] -= 1\n+\n+                # Finished all arguments\n+                if closures[\"(\"] == 0 and closures[\"<\"] == 0:\n+                    # Add final argument\n+                    arguments.append({\"start\": argument_start_pos, \"end\": current_position})\n+                    break\n+\n+                # Finished current argument\n+                if closures[\"(\"] == 1 and closures[\"<\"] == 0 and string[current_position] == \",\":\n+                    arguments.append({\"start\": argument_start_pos, \"end\": current_position})\n+                    argument_start_pos = current_position + 1\n+\n+                current_position += 1\n+\n+            # Grab range of arguments\n+            arguments_string = [string[arg[\"start\"]: arg[\"end\"]] for arg in arguments]\n+\n+            argument_types = [None] * len(arguments_string)\n+            for arg_idx, arg in enumerate(arguments_string):\n+                for i in range(len(arg) - 1, -1, -1):\n+                    if arg[i] == \"*\" or arg[i] == \" \":\n+                        argument_types[arg_idx] = re.sub(' +', ' ', arg[0:i + 1].replace(\"\\n\", \"\").strip())\n+                        break\n+            if len(template_arguments) == 1 and template_arguments[0].strip() in [\"Dtype\", \"T\"]:\n+                # Updates kernel\n+                kernel_with_template = \"%s<real>\" % (kernel_name)\n+            else:\n+                kernel_with_template = kernel_name\n+            formatted_args = {}\n+            for idx, arg_type in enumerate(argument_types):\n+                formatted_args[idx] = arg_type\n+\n+            KernelDictionary[kernel_name] = {\"kernel_with_template\": kernel_with_template, \"arg_types\": formatted_args}\n+\n+        # Extract generated kernels\n+        get_generated_kernels = [k for k in re.finditer(r\"GENERATE_KERNEL([1-9])\\((.*)\\)\", string)]\n+        # curandStateMtgp32 *state, int size, T *result, ARG1\n+        for kernel in get_generated_kernels:\n+            kernel_gen_type = int(kernel.group(1))\n+            kernel_name = kernel.group(2).split(\",\")[0]\n+            kernel_params = kernel.group(2).split(\",\")[1:]\n+\n+            if kernel_gen_type == 1:\n+                kernel_args = {1: \"int\", 2: \"%s *\" % kernel_params[0], 3: kernel_params[1]}\n+\n+            if kernel_gen_type == 2:\n+                kernel_args = {1: \"int\", 2: \"%s *\" % kernel_params[0], 3: kernel_params[1], 4: kernel_params[2]}\n+\n+            # Argument at position 1 should be int\n+            KernelDictionary[kernel_name] = {\"kernel_with_template\": kernel_name, \"arg_types\": kernel_args}\n+\n+\n+def disable_unsupported_function_call(function, input_string, replacement):\n+    \"\"\"Disables calls to an unsupported HIP function\"\"\"\n+    # Prepare output string\n+    output_string = input_string\n+\n+    # Find all calls to the function\n+    calls = re.finditer(r\"\\b%s\\b\" % function, input_string)\n+\n+    # Do replacements\n+    for call in calls:\n+        start = call.start()\n+        end = call.end()\n+\n+        pos = end\n+        started_arguments = False\n+        bracket_count = 0\n+        while pos < len(input_string):\n+            if input_string[pos] == \"(\":\n+                if started_arguments is False:\n+                    started_arguments = True\n+                    bracket_count = 1\n+                else:\n+                    bracket_count += 1\n+            elif input_string[pos] == \")\" and started_arguments:\n+                bracket_count -= 1\n+\n+            if bracket_count == 0 and started_arguments:\n+                # Finished!\n+                break\n+            pos += 1\n+\n+        function_call = input_string[start:pos + 1]\n+        output_string = output_string.replace(function_call, replacement)\n+\n+    return output_string\n+\n+\n+def disable_module(input_file):\n+    \"\"\"Disable a module entirely except for header includes.\"\"\"\n+    with openf(input_file, \"r+\") as f:\n+        txt = f.read()\n+        last = list(re.finditer(r\"#include .*\\n\", txt))[-1]\n+        end = last.end()\n+\n+        disabled = \"%s#if !defined(__HIP_PLATFORM_HCC__)\\n%s\\n#endif\" % (txt[0:end], txt[end:])\n+\n+        f.seek(0)\n+        f.write(disabled)\n+        f.truncate()\n+\n+\n+def extract_arguments(start, string):\n+    \"\"\" Return the list of arguments in the upcoming function parameter closure\"\"\"\n+    arguments = []\n+    closures = {\n+        \"<\": 0,\n+        \"(\": 0\n+    }\n+    current_position = start\n+    argument_start_pos = current_position + 1\n+\n+    # Search for final parenthesis\n+    while current_position < len(string):\n+        if string[current_position] == \"(\":\n+            closures[\"(\"] += 1\n+        elif string[current_position] == \")\":\n+            closures[\"(\"] -= 1\n+        elif string[current_position] == \"<\":\n+            closures[\"<\"] += 1\n+        elif string[current_position] == \">\" and string[current_position - 1] != \"-\":\n+            closures[\"<\"] -= 1\n+\n+        # Finished all arguments\n+        if closures[\"(\"] == 0 and closures[\"<\"] == 0:\n+            # Add final argument\n+            arguments.append({\"start\": argument_start_pos, \"end\": current_position})\n+            break\n+\n+        # Finished current argument\n+        if closures[\"(\"] == 1 and closures[\"<\"] == 0 and string[current_position] == \",\":\n+            arguments.append({\"start\": argument_start_pos, \"end\": current_position})\n+            argument_start_pos = current_position + 1\n+\n+        current_position += 1\n+\n+    return arguments\n+\n+\n+def add_static_casts(directory, extensions, KernelTemplateParams):\n+    \"\"\"Added necessary static casts to kernel launches due to issue in HIP\"\"\"\n+    # Add static_casts<> to all kernel launches.\n+    for (dirpath, _dirnames, filenames) in os.walk(directory):\n+        for filename in filenames:\n+            if filename_ends_with_extension(filename, extensions):\n+                filepath = os.sep.join([dirpath, filename])\n+                with openf(filepath, \"r+\") as fileobj:\n+                    input_source = fileobj.read()\n+                    new_output_source = input_source\n+                    get_kernel_definitions = [k for k in re.finditer(\"hipLaunchKernelGGL\\(\", input_source)]\n+                    for kernel in get_kernel_definitions:\n+                        arguments = extract_arguments(kernel.end() - 1, input_source)\n+\n+                        # Check if we have templating + static_cast information\n+                        argument_strings = [input_source[arg[\"start\"]:arg[\"end\"]] for arg in arguments]\n+                        kernel_name = argument_strings[0].strip()\n+                        ignore = [\"upscale\"]\n+                        if kernel_name in KernelTemplateParams and kernel_name not in ignore:\n+                            # Add template to the kernel\n+                            # Add static_casts to relevant arguments\n+                            kernel_name_with_template = KernelTemplateParams[kernel_name][\"kernel_with_template\"]\n+                            argument_types = KernelTemplateParams[kernel_name][\"arg_types\"]\n+\n+                            old_kernel_launch = input_source[arguments[0][\"start\"]:arguments[-1][\"end\"]]\n+                            new_kernel_launch = old_kernel_launch\n+\n+                            kernel_params = argument_strings[5:]\n+                            for arg_idx, arg in enumerate(kernel_params):\n+                                if arg_idx in argument_types:\n+                                    arg = kernel_params[arg_idx].strip()\n+                                    the_type = argument_types[arg_idx]\n+                                    the_arg = arg.replace(\"\\n\", \"\").strip()\n+                                    if the_type in [\"int\", \"const int\", \"int64_t\", \"THCIndex_t *\", \"const int *\", \"ptrdiff_t\", \"long\", \"const int64_t*\", \"int64_t *\", \"double\"]:\n+                                        static_argument = \"static_cast<%s>(%s)\" % (the_type, the_arg)\n+                                        static_argument = arg.replace(the_arg, static_argument)\n+\n+                                        # Update to static_cast\n+                                        new_kernel_launch = re.sub(r'\\b(%s)\\b' %\n+                                                                   arg, lambda x: static_argument, new_kernel_launch)\n+\n+                            # Add template type\n+                            if \"THCUNN\" in filepath.split(\"/\") and \"generic\" not in filepath.split(\"/\"):\n+                                kernel_name_with_template = kernel_name_with_template.replace(\"<real>\", \"<Dtype>\")\n+                            new_kernel_launch = re.sub(r'\\b(%s)\\b' % kernel_name,\n+                                                       lambda x: kernel_name_with_template, new_kernel_launch)\n+\n+                            # Replace Launch\n+                            new_output_source = new_output_source.replace(old_kernel_launch, new_kernel_launch)\n+\n+                    # Overwrite file contents\n+                    fileobj.seek(0)\n+                    fileobj.write(new_output_source)\n+                    fileobj.truncate()\n+                    fileobj.flush()\n+\n+                    # Flush to disk\n+                    os.fsync(fileobj)\n+\n+\n+def main():\n+    \"\"\"Example invocation\n+\n+    python hipify.py --project-directory /home/myproject/ --extensions cu cuh h cpp --output-directory /home/gains/\n+    \"\"\"\n+\n+    parser = argparse.ArgumentParser(\n+        description=\"The Python Hipify Script.\")\n+\n+    parser.add_argument(\n+        '--project-directory',\n+        type=str,\n+        default=os.getcwd(),\n+        help=\"The root of the project.\",\n+        required=True)\n+\n+    parser.add_argument(\n+        '--show-detailed',\n+        type=bool,\n+        default=False,\n+        help=\"Show detailed summary of the hipification process.\",\n+        required=False)\n+\n+    parser.add_argument(\n+        '--extensions',\n+        nargs='+',\n+        default=[\"cu\", \"cuh\", \"c\", \"cpp\", \"h\", \"in\", \"hpp\"],\n+        help=\"The extensions for files to run the Hipify script over.\",\n+        required=False)\n+\n+    parser.add_argument(\n+        '--output-directory',\n+        type=str,\n+        default=\"\",\n+        help=\"The directory to store the hipified project.\",\n+        required=False)\n+\n+    parser.add_argument(\n+        '--include-dirs',\n+        nargs='+',\n+        default=[],\n+        help=\"The directories under the root that should be included.\",\n+        required=False)\n+\n+    parser.add_argument(\n+        '--yaml-settings',\n+        type=str,\n+        default=\"\",\n+        help=\"The yaml file storing information for disabled functions and modules.\",\n+        required=False)\n+\n+    parser.add_argument(\n+        '--add-static-casts',\n+        type=bool,\n+        default=False,\n+        help=\"Whether to automatically add static_casts to kernel arguments.\",\n+        required=False)\n+\n+    args = parser.parse_args()\n+\n+    # Verify the project directory exists.\n+    if not os.path.exists(args.project_directory):\n+        print(\"The project folder specified does not exist.\")\n+        return\n+\n+    # Make sure output directory exists.\n+    if not os.path.exists(args.output_directory):\n+        print(\"The output folder already exists.\")\n+        return\n+\n+    # If no output directory, provide a default one.\n+    if args.output_directory is \"\":\n+        args.project_directory = args.project_directory[0:-", "path": "tools/amd_build/pyHIPIFY/hipify-python.py", "position": null, "original_position": 845, "commit_id": "ca3b5edbbe1b9beadd9bbabbad14e953e1e7ff6f", "original_commit_id": "f7373809451a77de277f02eae19f317d71bec413", "user": {"login": "iotamudelta", "id": 12565466, "node_id": "MDQ6VXNlcjEyNTY1NDY2", "avatar_url": "https://avatars2.githubusercontent.com/u/12565466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iotamudelta", "html_url": "https://github.com/iotamudelta", "followers_url": "https://api.github.com/users/iotamudelta/followers", "following_url": "https://api.github.com/users/iotamudelta/following{/other_user}", "gists_url": "https://api.github.com/users/iotamudelta/gists{/gist_id}", "starred_url": "https://api.github.com/users/iotamudelta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iotamudelta/subscriptions", "organizations_url": "https://api.github.com/users/iotamudelta/orgs", "repos_url": "https://api.github.com/users/iotamudelta/repos", "events_url": "https://api.github.com/users/iotamudelta/events{/privacy}", "received_events_url": "https://api.github.com/users/iotamudelta/received_events", "type": "User", "site_admin": false}, "body": "done", "created_at": "2018-07-06T21:44:37Z", "updated_at": "2018-11-23T15:46:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/8812#discussion_r200777332", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8812", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200777332"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8812#discussion_r200777332"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8812"}}, "body_html": "<p>done</p>", "body_text": "done", "in_reply_to_id": 200751347}