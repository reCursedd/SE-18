{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201140872", "pull_request_review_id": 135585040, "id": 201140872, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTE0MDg3Mg==", "diff_hunk": "@@ -0,0 +1,967 @@\n+#!/usr/bin/python\n+\"\"\" The Python Hipify script.\n+##\n+# Copyright (c) 2015-2016 Advanced Micro Devices, Inc. All rights reserved.\n+#               2017-2018 Advanced Micro Devices, Inc. and\n+#                         Facebook Inc. All rights reserved.\n+#\n+# Permission is hereby granted, free of charge, to any person obtaining a copy\n+# of this software and associated documentation files (the \"Software\"), to deal\n+# in the Software without restriction, including without limitation the rights\n+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+# copies of the Software, and to permit persons to whom the Software is\n+# furnished to do so, subject to the following conditions:\n+#\n+# The above copyright notice and this permission notice shall be included in\n+# all copies or substantial portions of the Software.\n+#\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+# THE SOFTWARE.\n+\"\"\"\n+\n+import argparse\n+import constants\n+import re\n+import shutil\n+import sys\n+import os\n+import yaml\n+\n+from functools import reduce\n+from enum import Enum\n+from cuda_to_hip_mappings import CUDA_TO_HIP_MAPPINGS\n+\n+\n+def openf(filename, mode):\n+    if sys.version_info[0] == 3:\n+        return open(filename, mode, errors='ignore')", "path": "tools/amd_build/pyHIPIFY/hipify-python.py", "position": 42, "original_position": 42, "commit_id": "ca3b5edbbe1b9beadd9bbabbad14e953e1e7ff6f", "original_commit_id": "f7373809451a77de277f02eae19f317d71bec413", "user": {"login": "jithunnair-amd", "id": 37884920, "node_id": "MDQ6VXNlcjM3ODg0OTIw", "avatar_url": "https://avatars1.githubusercontent.com/u/37884920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jithunnair-amd", "html_url": "https://github.com/jithunnair-amd", "followers_url": "https://api.github.com/users/jithunnair-amd/followers", "following_url": "https://api.github.com/users/jithunnair-amd/following{/other_user}", "gists_url": "https://api.github.com/users/jithunnair-amd/gists{/gist_id}", "starred_url": "https://api.github.com/users/jithunnair-amd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jithunnair-amd/subscriptions", "organizations_url": "https://api.github.com/users/jithunnair-amd/orgs", "repos_url": "https://api.github.com/users/jithunnair-amd/repos", "events_url": "https://api.github.com/users/jithunnair-amd/events{/privacy}", "received_events_url": "https://api.github.com/users/jithunnair-amd/received_events", "type": "User", "site_admin": false}, "body": "```\r\nrocm-user@480e3f4175c2:~/pytorch__ROCM__master$ git diff --cached torch/csrc/jit/passes/shape_analysis.cpp\r\ndiff --git a/torch/csrc/jit/passes/shape_analysis.cpp b/torch/csrc/jit/passes/shape_analysis.cpp\r\nindex be18bf1..4c24c5c 100644\r\n--- a/torch/csrc/jit/passes/shape_analysis.cpp\r\n+++ b/torch/csrc/jit/passes/shape_analysis.cpp\r\n@@ -325,7 +325,7 @@ void PropagateShapeOnNode(Node * node, bool insert_expands) {\r\n    case prim::ReplaceIfUndef: {\r\n      // If types[0] has a type, then it is not defined, and the type will\r\n      // get set to types[0] because that will be the value propagated.\r\n-      // If its type is<C2><A0>not<C2><A0>defined, then unification is an undefined type.\r\n+      // If its type is not defined, then unification is an undefined type.\r\n      SHAPE_ASSERT(types.size() == 1);\r\n      node->output()->setType(types.at(0)->shared_from_this());\r\n      handled = true;\r\n```", "created_at": "2018-07-09T20:44:14Z", "updated_at": "2018-11-23T15:47:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/8812#discussion_r201140872", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8812", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/201140872"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8812#discussion_r201140872"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8812"}}, "body_html": "<pre><code>rocm-user@480e3f4175c2:~/pytorch__ROCM__master$ git diff --cached torch/csrc/jit/passes/shape_analysis.cpp\ndiff --git a/torch/csrc/jit/passes/shape_analysis.cpp b/torch/csrc/jit/passes/shape_analysis.cpp\nindex be18bf1..4c24c5c 100644\n--- a/torch/csrc/jit/passes/shape_analysis.cpp\n+++ b/torch/csrc/jit/passes/shape_analysis.cpp\n@@ -325,7 +325,7 @@ void PropagateShapeOnNode(Node * node, bool insert_expands) {\n    case prim::ReplaceIfUndef: {\n      // If types[0] has a type, then it is not defined, and the type will\n      // get set to types[0] because that will be the value propagated.\n-      // If its type is&lt;C2&gt;&lt;A0&gt;not&lt;C2&gt;&lt;A0&gt;defined, then unification is an undefined type.\n+      // If its type is not defined, then unification is an undefined type.\n      SHAPE_ASSERT(types.size() == 1);\n      node-&gt;output()-&gt;setType(types.at(0)-&gt;shared_from_this());\n      handled = true;\n</code></pre>", "body_text": "rocm-user@480e3f4175c2:~/pytorch__ROCM__master$ git diff --cached torch/csrc/jit/passes/shape_analysis.cpp\ndiff --git a/torch/csrc/jit/passes/shape_analysis.cpp b/torch/csrc/jit/passes/shape_analysis.cpp\nindex be18bf1..4c24c5c 100644\n--- a/torch/csrc/jit/passes/shape_analysis.cpp\n+++ b/torch/csrc/jit/passes/shape_analysis.cpp\n@@ -325,7 +325,7 @@ void PropagateShapeOnNode(Node * node, bool insert_expands) {\n    case prim::ReplaceIfUndef: {\n      // If types[0] has a type, then it is not defined, and the type will\n      // get set to types[0] because that will be the value propagated.\n-      // If its type is<C2><A0>not<C2><A0>defined, then unification is an undefined type.\n+      // If its type is not defined, then unification is an undefined type.\n      SHAPE_ASSERT(types.size() == 1);\n      node->output()->setType(types.at(0)->shared_from_this());\n      handled = true;", "in_reply_to_id": 200747326}