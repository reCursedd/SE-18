{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3188", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3188/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3188/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3188/events", "html_url": "https://github.com/pytorch/pytorch/pull/3188", "id": 266993111, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ3NjY4NzY1", "number": 3188, "title": "Speed up norm_backward", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-19T21:20:03Z", "updated_at": "2018-11-23T15:35:34Z", "closed_at": "2017-10-20T14:21:29Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3188", "html_url": "https://github.com/pytorch/pytorch/pull/3188", "diff_url": "https://github.com/pytorch/pytorch/pull/3188.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3188.patch"}, "body_html": "<p>Also avoids a CUDA synchronization in norm_backward.</p>\n<p>Here's a benchmarking script. <strong>You must comment out norm in variable.py to see any difference.</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch; <span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable; v = Variable(torch.randn(<span class=\"pl-c1\">1024</span>,<span class=\"pl-c1\">1024</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>); vc = Variable(v.data.cuda(), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>); g = torch.randn(<span class=\"pl-c1\">1024</span>); gc = torch.randn(<span class=\"pl-c1\">1024</span>).cuda()\n\n<span class=\"pl-k\">%</span>timeit v.norm().backward()\n<span class=\"pl-k\">%</span>timeit v.norm().backward()\n<span class=\"pl-k\">%</span>timeit v.norm(<span class=\"pl-c1\">0</span>).backward(g)\n<span class=\"pl-k\">%</span>timeit v.norm(<span class=\"pl-c1\">0</span>).backward(g)\n\n<span class=\"pl-k\">%</span>timeit vc.norm().backward()\n<span class=\"pl-k\">%</span>timeit vc.norm().backward()\n<span class=\"pl-k\">%</span>timeit vc.norm(<span class=\"pl-c1\">0</span>).backward(gc)\n<span class=\"pl-k\">%</span>timeit vc.norm(<span class=\"pl-c1\">0</span>).backward(gc)</pre></div>\n<p>Before:</p>\n<pre><code>100 loops, best of 3: 3.96 ms per loop\n100 loops, best of 3: 4.04 ms per loop\n100 loops, best of 3: 8 ms per loop\n100 loops, best of 3: 7.94 ms per loop\n1000 loops, best of 3: 544 \u00b5s per loop\n1000 loops, best of 3: 532 \u00b5s per loop\n1000 loops, best of 3: 619 \u00b5s per loop\n1000 loops, best of 3: 620 \u00b5s per loop\n</code></pre>\n<p>After:</p>\n<pre><code>100 loops, best of 3: 2.99 ms per loop\n100 loops, best of 3: 2.97 ms per loop\n100 loops, best of 3: 6.02 ms per loop\n100 loops, best of 3: 5.66 ms per loop\n1000 loops, best of 3: 369 \u00b5s per loop\n1000 loops, best of 3: 342 \u00b5s per loop\n1000 loops, best of 3: 417 \u00b5s per loop\n1000 loops, best of 3: 421 \u00b5s per loop\n</code></pre>", "body_text": "Also avoids a CUDA synchronization in norm_backward.\nHere's a benchmarking script. You must comment out norm in variable.py to see any difference.\nimport torch; from torch.autograd import Variable; v = Variable(torch.randn(1024,1024), requires_grad=True); vc = Variable(v.data.cuda(), requires_grad=True); g = torch.randn(1024); gc = torch.randn(1024).cuda()\n\n%timeit v.norm().backward()\n%timeit v.norm().backward()\n%timeit v.norm(0).backward(g)\n%timeit v.norm(0).backward(g)\n\n%timeit vc.norm().backward()\n%timeit vc.norm().backward()\n%timeit vc.norm(0).backward(gc)\n%timeit vc.norm(0).backward(gc)\nBefore:\n100 loops, best of 3: 3.96 ms per loop\n100 loops, best of 3: 4.04 ms per loop\n100 loops, best of 3: 8 ms per loop\n100 loops, best of 3: 7.94 ms per loop\n1000 loops, best of 3: 544 \u00b5s per loop\n1000 loops, best of 3: 532 \u00b5s per loop\n1000 loops, best of 3: 619 \u00b5s per loop\n1000 loops, best of 3: 620 \u00b5s per loop\n\nAfter:\n100 loops, best of 3: 2.99 ms per loop\n100 loops, best of 3: 2.97 ms per loop\n100 loops, best of 3: 6.02 ms per loop\n100 loops, best of 3: 5.66 ms per loop\n1000 loops, best of 3: 369 \u00b5s per loop\n1000 loops, best of 3: 342 \u00b5s per loop\n1000 loops, best of 3: 417 \u00b5s per loop\n1000 loops, best of 3: 421 \u00b5s per loop", "body": "Also avoids a CUDA synchronization in norm_backward.\r\n\r\nHere's a benchmarking script. **You must comment out norm in variable.py to see any difference.**\r\n\r\n```python\r\nimport torch; from torch.autograd import Variable; v = Variable(torch.randn(1024,1024), requires_grad=True); vc = Variable(v.data.cuda(), requires_grad=True); g = torch.randn(1024); gc = torch.randn(1024).cuda()\r\n\r\n%timeit v.norm().backward()\r\n%timeit v.norm().backward()\r\n%timeit v.norm(0).backward(g)\r\n%timeit v.norm(0).backward(g)\r\n\r\n%timeit vc.norm().backward()\r\n%timeit vc.norm().backward()\r\n%timeit vc.norm(0).backward(gc)\r\n%timeit vc.norm(0).backward(gc)\r\n```\r\n\r\nBefore:\r\n```\r\n100 loops, best of 3: 3.96 ms per loop\r\n100 loops, best of 3: 4.04 ms per loop\r\n100 loops, best of 3: 8 ms per loop\r\n100 loops, best of 3: 7.94 ms per loop\r\n1000 loops, best of 3: 544 \u00b5s per loop\r\n1000 loops, best of 3: 532 \u00b5s per loop\r\n1000 loops, best of 3: 619 \u00b5s per loop\r\n1000 loops, best of 3: 620 \u00b5s per loop\r\n```\r\n\r\nAfter:\r\n```\r\n100 loops, best of 3: 2.99 ms per loop\r\n100 loops, best of 3: 2.97 ms per loop\r\n100 loops, best of 3: 6.02 ms per loop\r\n100 loops, best of 3: 5.66 ms per loop\r\n1000 loops, best of 3: 369 \u00b5s per loop\r\n1000 loops, best of 3: 342 \u00b5s per loop\r\n1000 loops, best of 3: 417 \u00b5s per loop\r\n1000 loops, best of 3: 421 \u00b5s per loop\r\n```"}