{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11832", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11832/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11832/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11832/events", "html_url": "https://github.com/pytorch/pytorch/pull/11832", "id": 361497617, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE2NDU0NzI5", "number": 11832, "title": "add autodiff expressions for common operations", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-18T21:49:44Z", "updated_at": "2018-11-23T15:51:54Z", "closed_at": "2018-09-26T15:11:33Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11832", "html_url": "https://github.com/pytorch/pytorch/pull/11832", "diff_url": "https://github.com/pytorch/pytorch/pull/11832.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11832.patch"}, "body_html": "<p>This PR does a few things:</p>\n<h2>Enable testing autodiff in test_jit.py</h2>\n<p>Previously test_jit.py only tested autograd on backward graphs.<br>\nThis is because we borrow from test_autograd and construct graphs with a small<br>\nnumber of nodes. Because the number of nodes is small (typically 1-2), those graph<br>\ndo not end up containing autodiff subgraphs, so autodiff never gets tested.</p>\n<p>This PR enables autodiff testing by doing the following:</p>\n<ul>\n<li>added disableDebugAutodiffSubgraphInlining fn to graph_executor to disable<br>\nautodiff subgraph inlining.</li>\n<li>(implementation) added autodiffSubgraphNodeThreshold and autodiffSubgraphInlineThreshold.<br>\nThese are set to their default values (2, 5) but disableDebugAutodiffSubgraphInlining()<br>\nsets both to 1, disabling subgraph inlining and allowing 1-node autodiff subgraphs.</li>\n<li>The relevant backward jit tests disable autodiff subgraph inlining so they<br>\nwill test the autodiff versions of the operators instead of autograd whenever<br>\nan autodiff variant exists.</li>\n<li>We don't run the tests that do inline autodiff subgraphs anymore.<br>\nThis has no impact on testing correctness because the assumption is<br>\nthat autograd functions are correct and are tested in test_autograd.py</li>\n</ul>\n<h2>Add autodiff for a lot of ops</h2>\n<p>This allows the graph fuser to work better because a lot of these ops were previously not autodiff-compatible but fusible. On a more concrete example, lstm backward contains a lot of tensor-scalar operations; these autodiff formulas help its double backward pass.</p>\n<p>Included:</p>\n<ul>\n<li>arithmetic overloads</li>\n<li>abs, acos, asin, atan, ceil, cos, cosh, exp, expm1, floor, fmod, frac, log, log10, log1p, log2 reciprocal, remainder, round, sin, sinh, tan, trunc, rsqrt</li>\n</ul>\n<h2>Test Plan</h2>\n<p>TestJitGenerated tests autodiff for all of the added operations.</p>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "This PR does a few things:\nEnable testing autodiff in test_jit.py\nPreviously test_jit.py only tested autograd on backward graphs.\nThis is because we borrow from test_autograd and construct graphs with a small\nnumber of nodes. Because the number of nodes is small (typically 1-2), those graph\ndo not end up containing autodiff subgraphs, so autodiff never gets tested.\nThis PR enables autodiff testing by doing the following:\n\nadded disableDebugAutodiffSubgraphInlining fn to graph_executor to disable\nautodiff subgraph inlining.\n(implementation) added autodiffSubgraphNodeThreshold and autodiffSubgraphInlineThreshold.\nThese are set to their default values (2, 5) but disableDebugAutodiffSubgraphInlining()\nsets both to 1, disabling subgraph inlining and allowing 1-node autodiff subgraphs.\nThe relevant backward jit tests disable autodiff subgraph inlining so they\nwill test the autodiff versions of the operators instead of autograd whenever\nan autodiff variant exists.\nWe don't run the tests that do inline autodiff subgraphs anymore.\nThis has no impact on testing correctness because the assumption is\nthat autograd functions are correct and are tested in test_autograd.py\n\nAdd autodiff for a lot of ops\nThis allows the graph fuser to work better because a lot of these ops were previously not autodiff-compatible but fusible. On a more concrete example, lstm backward contains a lot of tensor-scalar operations; these autodiff formulas help its double backward pass.\nIncluded:\n\narithmetic overloads\nabs, acos, asin, atan, ceil, cos, cosh, exp, expm1, floor, fmod, frac, log, log10, log1p, log2 reciprocal, remainder, round, sin, sinh, tan, trunc, rsqrt\n\nTest Plan\nTestJitGenerated tests autodiff for all of the added operations.\ncc @apaszke @zdevito", "body": "This PR does a few things:\r\n\r\n## Enable testing autodiff in test_jit.py\r\n\r\nPreviously test_jit.py only tested autograd on backward graphs.\r\nThis is because we borrow from test_autograd and construct graphs with a small\r\nnumber of nodes. Because the number of nodes is small (typically 1-2), those graph\r\ndo not end up containing autodiff subgraphs, so autodiff never gets tested.\r\n\r\nThis PR enables autodiff testing by doing the following:\r\n- added disableDebugAutodiffSubgraphInlining fn to graph_executor to disable\r\n  autodiff subgraph inlining.\r\n- (implementation) added autodiffSubgraphNodeThreshold and autodiffSubgraphInlineThreshold.\r\n  These are set to their default values (2, 5) but disableDebugAutodiffSubgraphInlining()\r\n  sets both to 1, disabling subgraph inlining and allowing 1-node autodiff subgraphs.\r\n- The relevant backward jit tests disable autodiff subgraph inlining so they\r\n  will test the autodiff versions of the operators instead of autograd whenever\r\n  an autodiff variant exists.\r\n- We don't run the tests that do inline autodiff subgraphs anymore.\r\n  This has no impact on testing correctness because the assumption is\r\n  that autograd functions are correct and are tested in test_autograd.py\r\n\r\n## Add autodiff for a lot of ops\r\n\r\nThis allows the graph fuser to work better because a lot of these ops were previously not autodiff-compatible but fusible. On a more concrete example, lstm backward contains a lot of tensor-scalar operations; these autodiff formulas help its double backward pass.\r\n\r\nIncluded:\r\n- arithmetic overloads\r\n- abs, acos, asin, atan, ceil, cos, cosh, exp, expm1, floor, fmod, frac, log, log10, log1p, log2 reciprocal, remainder, round, sin, sinh, tan, trunc, rsqrt\r\n\r\n## Test Plan\r\nTestJitGenerated tests autodiff for all of the added operations. \r\n\r\ncc @apaszke @zdevito \r\n"}