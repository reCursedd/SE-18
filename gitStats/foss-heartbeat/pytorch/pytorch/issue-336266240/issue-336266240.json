{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8940", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8940/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8940/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8940/events", "html_url": "https://github.com/pytorch/pytorch/issues/8940", "id": 336266240, "node_id": "MDU6SXNzdWUzMzYyNjYyNDA=", "number": 8940, "title": "Issue in a particular case in backpropagation", "user": {"login": "Hv0nnus", "id": 17024622, "node_id": "MDQ6VXNlcjE3MDI0NjIy", "avatar_url": "https://avatars1.githubusercontent.com/u/17024622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hv0nnus", "html_url": "https://github.com/Hv0nnus", "followers_url": "https://api.github.com/users/Hv0nnus/followers", "following_url": "https://api.github.com/users/Hv0nnus/following{/other_user}", "gists_url": "https://api.github.com/users/Hv0nnus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hv0nnus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hv0nnus/subscriptions", "organizations_url": "https://api.github.com/users/Hv0nnus/orgs", "repos_url": "https://api.github.com/users/Hv0nnus/repos", "events_url": "https://api.github.com/users/Hv0nnus/events{/privacy}", "received_events_url": "https://api.github.com/users/Hv0nnus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-27T14:56:41Z", "updated_at": "2018-06-29T13:54:46Z", "closed_at": "2018-06-29T13:54:46Z", "author_association": "NONE", "body_html": "<p>The back propagation isn't working properly in the case 0**0. For example in the code below we have an \"nan\" which should mathematically not be here.</p>\n<p>x = torch.tensor([0., 1.], requires_grad=True)<br>\nloss = sum((x)**0)<br>\nloss.backward()<br>\nprint(loss)<br>\nprint(x.grad)</p>\n<p>tensor(2.)<br>\ntensor([nan.,   0.])</p>\n<p>It is probably because the derivative of loss is 0*(x^-1) which is 0/0 is the case x=0. The gradient should be 0. In fact the formula (x^n)' = n*x^(n-1) which is probably used, is false for n=0.</p>\n<p>This is a special case but can happen.</p>\n<p>Hope it can help</p>\n<p>Hv0nnus</p>", "body_text": "The back propagation isn't working properly in the case 0**0. For example in the code below we have an \"nan\" which should mathematically not be here.\nx = torch.tensor([0., 1.], requires_grad=True)\nloss = sum((x)**0)\nloss.backward()\nprint(loss)\nprint(x.grad)\ntensor(2.)\ntensor([nan.,   0.])\nIt is probably because the derivative of loss is 0*(x^-1) which is 0/0 is the case x=0. The gradient should be 0. In fact the formula (x^n)' = n*x^(n-1) which is probably used, is false for n=0.\nThis is a special case but can happen.\nHope it can help\nHv0nnus", "body": "The back propagation isn't working properly in the case 0**0. For example in the code below we have an \"nan\" which should mathematically not be here.\r\n\r\nx = torch.tensor([0., 1.], requires_grad=True)\r\nloss = sum((x)**0)\r\nloss.backward()\r\nprint(loss)\r\nprint(x.grad)\r\n\r\ntensor(2.)\r\ntensor([nan.,   0.])\r\n\r\nIt is probably because the derivative of loss is 0*(x^-1) which is 0/0 is the case x=0. The gradient should be 0. In fact the formula (x^n)' = n*x^(n-1) which is probably used, is false for n=0.\r\n\r\nThis is a special case but can happen.\r\n\r\nHope it can help\r\n\r\nHv0nnus"}