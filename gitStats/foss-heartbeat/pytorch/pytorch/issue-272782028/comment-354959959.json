{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/354959959", "html_url": "https://github.com/pytorch/pytorch/issues/3615#issuecomment-354959959", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3615", "id": 354959959, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDk1OTk1OQ==", "user": {"login": "gmyofustc", "id": 7859276, "node_id": "MDQ6VXNlcjc4NTkyNzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7859276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmyofustc", "html_url": "https://github.com/gmyofustc", "followers_url": "https://api.github.com/users/gmyofustc/followers", "following_url": "https://api.github.com/users/gmyofustc/following{/other_user}", "gists_url": "https://api.github.com/users/gmyofustc/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmyofustc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmyofustc/subscriptions", "organizations_url": "https://api.github.com/users/gmyofustc/orgs", "repos_url": "https://api.github.com/users/gmyofustc/repos", "events_url": "https://api.github.com/users/gmyofustc/events{/privacy}", "received_events_url": "https://api.github.com/users/gmyofustc/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-03T08:39:13Z", "updated_at": "2018-01-03T08:39:13Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>  I am using gloo backend.<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16640218\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alsrgv\">@alsrgv</a> Recently, I found when I change the init_process_group from tcp to shared file system, the distributed training will be much stable</p>\n<div class=\"highlight highlight-source-python\"><pre>dist.init_process_group(<span class=\"pl-v\">init_method</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>file:///mnt/nfs/sharedfile<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">world_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>,\n                        <span class=\"pl-v\">group_name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mygroup<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p>But when using the shared file system, the distributed engine does not always launch sucessfully. I have to submit the job lots of times.</p>\n<p>And for distributed training, you can try <a href=\"https://docs.microsoft.com/en-us/cognitive-toolkit/multiple-gpus-and-machines#6-block-momentum-sgd\" rel=\"nofollow\">bmuf algorithm</a>. I tried this, and found 16 gpus coverages as well as 1gpu's result.</p>", "body_text": "@apaszke  I am using gloo backend.\n@alsrgv Recently, I found when I change the init_process_group from tcp to shared file system, the distributed training will be much stable\ndist.init_process_group(init_method='file:///mnt/nfs/sharedfile', world_size=4,\n                        group_name='mygroup')\nBut when using the shared file system, the distributed engine does not always launch sucessfully. I have to submit the job lots of times.\nAnd for distributed training, you can try bmuf algorithm. I tried this, and found 16 gpus coverages as well as 1gpu's result.", "body": "@apaszke  I am using gloo backend. \r\n@alsrgv Recently, I found when I change the init_process_group from tcp to shared file system, the distributed training will be much stable\r\n```python \r\ndist.init_process_group(init_method='file:///mnt/nfs/sharedfile', world_size=4,\r\n                        group_name='mygroup')\r\n```\r\nBut when using the shared file system, the distributed engine does not always launch sucessfully. I have to submit the job lots of times.\r\n\r\nAnd for distributed training, you can try [bmuf algorithm](https://docs.microsoft.com/en-us/cognitive-toolkit/multiple-gpus-and-machines#6-block-momentum-sgd). I tried this, and found 16 gpus coverages as well as 1gpu's result."}