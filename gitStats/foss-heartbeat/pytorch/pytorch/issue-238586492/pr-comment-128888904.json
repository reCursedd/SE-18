{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128888904", "pull_request_review_id": 51614998, "id": 128888904, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg4ODkwNA==", "diff_hunk": "@@ -22,7 +22,7 @@ PyObject* CppFunction_pynew(PyTypeObject *type, PyObject *args, PyObject *kwds)\n   if (!obj) return NULL;\n   THPCppFunction* f = (THPCppFunction*)obj.get();\n   HANDLE_TH_ERRORS\n-  new (&f->cdata) std::shared_ptr<Function>(Ctor()(args));\n+  f->cdata.reset(Ctor()(args));", "path": "torch/csrc/autograd/python_cpp_function.h", "position": null, "original_position": 5, "commit_id": "4ce8a2771fb073efd6232f6696c98158ffef8c9b", "original_commit_id": "b4a2d7d6b59a9240f7840813cb5ffb82d0c812ff", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "The previous code called the C++ `shared_ptr<Function>` constructor, which initializes the object (but doesn't allocate memory because of the `(&f->cdata)` syntax).\r\n\r\nThe new code never calls the constructor. It probably doesn't have an effect here, since:\r\na) the constructor most likely just zero-initializes some fields\r\nb) `tp_alloc` already zeros out the entire containing struct\r\n\r\nBut it's probably not good to assume (a). ", "created_at": "2017-07-22T04:19:57Z", "updated_at": "2018-11-23T15:34:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/1912#discussion_r128888904", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1912", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128888904"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1912#discussion_r128888904"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1912"}}, "body_html": "<p>The previous code called the C++ <code>shared_ptr&lt;Function&gt;</code> constructor, which initializes the object (but doesn't allocate memory because of the <code>(&amp;f-&gt;cdata)</code> syntax).</p>\n<p>The new code never calls the constructor. It probably doesn't have an effect here, since:<br>\na) the constructor most likely just zero-initializes some fields<br>\nb) <code>tp_alloc</code> already zeros out the entire containing struct</p>\n<p>But it's probably not good to assume (a).</p>", "body_text": "The previous code called the C++ shared_ptr<Function> constructor, which initializes the object (but doesn't allocate memory because of the (&f->cdata) syntax).\nThe new code never calls the constructor. It probably doesn't have an effect here, since:\na) the constructor most likely just zero-initializes some fields\nb) tp_alloc already zeros out the entire containing struct\nBut it's probably not good to assume (a).", "in_reply_to_id": 128887453}