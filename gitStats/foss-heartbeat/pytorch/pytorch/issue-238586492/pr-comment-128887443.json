{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128887443", "pull_request_review_id": 51613478, "id": 128887443, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODg4NzQ0Mw==", "diff_hunk": "@@ -173,22 +173,27 @@ PyObject* functionToPyObject(std::shared_ptr<Function> cdata)\n     return obj;\n   }\n \n-  auto& fn = *cdata;\n-  auto it = cpp_function_types.find(std::type_index(typeid(fn)));\n-  if (it == cpp_function_types.end()) {\n-    return PyErr_Format(PyExc_TypeError,\n-        \"Don't know how to create Python object for %s\", typeid(fn).name());\n-  }\n+  if (cdata->pyobj) {\n+    Py_INCREF(cdata->pyobj);\n+  } else {\n+    auto& fn = *cdata;\n+    auto it = cpp_function_types.find(std::type_index(typeid(fn)));\n+    if (it == cpp_function_types.end()) {\n+      return PyErr_Format(PyExc_TypeError,\n+          \"Don't know how to create Python object for %s\", typeid(fn).name());\n+    }\n \n-  PyTypeObject* type = (PyTypeObject*)it->second.get();\n-  THPObjectPtr obj(type->tp_alloc(type, 0));\n-  if (!obj) return NULL;\n-  THPCppFunction* f = (THPCppFunction*)obj.get();\n-  new (&f->cdata) std::shared_ptr<Function>(cdata);\n-  if (!f->cdata) {\n-    return NULL;\n+    PyTypeObject* type = (PyTypeObject*)it->second.get();\n+    THPObjectPtr obj(type->tp_alloc(type, 0));\n+    if (!obj) return NULL;\n+    THPCppFunction* f = (THPCppFunction*)obj.get();\n+    f->cdata = cdata;\n+\n+    cdata->pyobj = obj.release();\n+    Py_INCREF(cdata->pyobj);", "path": "torch/csrc/autograd/python_cpp_function.cpp", "position": null, "original_position": 50, "commit_id": "4ce8a2771fb073efd6232f6696c98158ffef8c9b", "original_commit_id": "b4a2d7d6b59a9240f7840813cb5ffb82d0c812ff", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I think the pyobj ends up with an extra INCREF here. I think it should only have refcnt 1, but it has two (one from `tp_alloc` and one from `Py_INCREF`)\r\n\r\nThe previous code using the placement new syntax (`new (&f->cdata) std::shared_ptr<Function>(cdata);`) is better. `tp_alloc` doesn't construct the shared_ptr. It's probably fine because `tp_alloc` zeros all the memory, but I think it's better to explicitly construct it here.", "created_at": "2017-07-22T02:50:03Z", "updated_at": "2018-11-23T15:34:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/1912#discussion_r128887443", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1912", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128887443"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1912#discussion_r128887443"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1912"}}, "body_html": "<p>I think the pyobj ends up with an extra INCREF here. I think it should only have refcnt 1, but it has two (one from <code>tp_alloc</code> and one from <code>Py_INCREF</code>)</p>\n<p>The previous code using the placement new syntax (<code>new (&amp;f-&gt;cdata) std::shared_ptr&lt;Function&gt;(cdata);</code>) is better. <code>tp_alloc</code> doesn't construct the shared_ptr. It's probably fine because <code>tp_alloc</code> zeros all the memory, but I think it's better to explicitly construct it here.</p>", "body_text": "I think the pyobj ends up with an extra INCREF here. I think it should only have refcnt 1, but it has two (one from tp_alloc and one from Py_INCREF)\nThe previous code using the placement new syntax (new (&f->cdata) std::shared_ptr<Function>(cdata);) is better. tp_alloc doesn't construct the shared_ptr. It's probably fine because tp_alloc zeros all the memory, but I think it's better to explicitly construct it here."}