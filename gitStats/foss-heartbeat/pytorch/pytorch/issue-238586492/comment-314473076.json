{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/314473076", "html_url": "https://github.com/pytorch/pytorch/pull/1912#issuecomment-314473076", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1912", "id": 314473076, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDQ3MzA3Ng==", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-11T15:01:57Z", "updated_at": "2017-07-11T15:01:57Z", "author_association": "COLLABORATOR", "body_html": "<p>This difference between the two wrapper is exactly what I was looking for. (Actually possibly changing the variable wrapper to have the same property may be interesting in the future).<br>\nThe problem with the current implementation (and possibly the variable one as well) is that a single C++ variable may have different python wrapper. Which breaks things like <a href=\"https://github.com/szagoruyko/functional-zoo/blob/master/visualize.py\">this</a> visualization script.</p>\n<p>Which one of the following two pattern you think we should use (and I agree that we should change both variable and function for simplicity):</p>\n<ul>\n<li>uniqueness of the wrapper for the whole lifetime of the C++ object (new function behavior with this PR)?</li>\n<li>uniqueness of the wrapper as long as it is still referenced from python (current variable implementation) but a new wrapper will be created as soon as the previous one goes out of scope in python (this can lead to subtle issue like in the visualization tool above where <code>id()</code> is used to check wrapper uniqueness even though the PyObject* actually goes out of scope, or impossibility to store data in the python object because you may get another one next time)?</li>\n</ul>", "body_text": "This difference between the two wrapper is exactly what I was looking for. (Actually possibly changing the variable wrapper to have the same property may be interesting in the future).\nThe problem with the current implementation (and possibly the variable one as well) is that a single C++ variable may have different python wrapper. Which breaks things like this visualization script.\nWhich one of the following two pattern you think we should use (and I agree that we should change both variable and function for simplicity):\n\nuniqueness of the wrapper for the whole lifetime of the C++ object (new function behavior with this PR)?\nuniqueness of the wrapper as long as it is still referenced from python (current variable implementation) but a new wrapper will be created as soon as the previous one goes out of scope in python (this can lead to subtle issue like in the visualization tool above where id() is used to check wrapper uniqueness even though the PyObject* actually goes out of scope, or impossibility to store data in the python object because you may get another one next time)?", "body": "This difference between the two wrapper is exactly what I was looking for. (Actually possibly changing the variable wrapper to have the same property may be interesting in the future).\r\nThe problem with the current implementation (and possibly the variable one as well) is that a single C++ variable may have different python wrapper. Which breaks things like [this](https://github.com/szagoruyko/functional-zoo/blob/master/visualize.py) visualization script.\r\n\r\nWhich one of the following two pattern you think we should use (and I agree that we should change both variable and function for simplicity):\r\n* uniqueness of the wrapper for the whole lifetime of the C++ object (new function behavior with this PR)?\r\n* uniqueness of the wrapper as long as it is still referenced from python (current variable implementation) but a new wrapper will be created as soon as the previous one goes out of scope in python (this can lead to subtle issue like in the visualization tool above where `id()` is used to check wrapper uniqueness even though the PyObject* actually goes out of scope, or impossibility to store data in the python object because you may get another one next time)?"}