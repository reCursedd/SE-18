{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128907232", "pull_request_review_id": 51632749, "id": 128907232, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkwNzIzMg==", "diff_hunk": "@@ -173,22 +173,27 @@ PyObject* functionToPyObject(std::shared_ptr<Function> cdata)\n     return obj;\n   }\n \n-  auto& fn = *cdata;\n-  auto it = cpp_function_types.find(std::type_index(typeid(fn)));\n-  if (it == cpp_function_types.end()) {\n-    return PyErr_Format(PyExc_TypeError,\n-        \"Don't know how to create Python object for %s\", typeid(fn).name());\n-  }\n+  if (cdata->pyobj) {\n+    Py_INCREF(cdata->pyobj);\n+  } else {\n+    auto& fn = *cdata;\n+    auto it = cpp_function_types.find(std::type_index(typeid(fn)));\n+    if (it == cpp_function_types.end()) {\n+      return PyErr_Format(PyExc_TypeError,\n+          \"Don't know how to create Python object for %s\", typeid(fn).name());\n+    }\n \n-  PyTypeObject* type = (PyTypeObject*)it->second.get();\n-  THPObjectPtr obj(type->tp_alloc(type, 0));\n-  if (!obj) return NULL;\n-  THPCppFunction* f = (THPCppFunction*)obj.get();\n-  new (&f->cdata) std::shared_ptr<Function>(cdata);\n-  if (!f->cdata) {\n-    return NULL;\n+    PyTypeObject* type = (PyTypeObject*)it->second.get();\n+    THPObjectPtr obj(type->tp_alloc(type, 0));\n+    if (!obj) return NULL;\n+    THPCppFunction* f = (THPCppFunction*)obj.get();\n+    f->cdata = cdata;\n+\n+    cdata->pyobj = obj.release();\n+    Py_INCREF(cdata->pyobj);", "path": "torch/csrc/autograd/python_cpp_function.cpp", "position": null, "original_position": 50, "commit_id": "4ce8a2771fb073efd6232f6696c98158ffef8c9b", "original_commit_id": "b4a2d7d6b59a9240f7840813cb5ffb82d0c812ff", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "No it should have a refcount of 2, one for the ref held in the `cdata` and one for the object we return.\r\n\r\nEven though the `cdata` that we get as argument to the function is already a `shared_ptr`, we need to use the placement new syntax to initialize properly the field `f->cdata` before setting it to the `shared_ptr` that we got as argument?", "created_at": "2017-07-22T23:43:58Z", "updated_at": "2018-11-23T15:34:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/1912#discussion_r128907232", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1912", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128907232"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1912#discussion_r128907232"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1912"}}, "body_html": "<p>No it should have a refcount of 2, one for the ref held in the <code>cdata</code> and one for the object we return.</p>\n<p>Even though the <code>cdata</code> that we get as argument to the function is already a <code>shared_ptr</code>, we need to use the placement new syntax to initialize properly the field <code>f-&gt;cdata</code> before setting it to the <code>shared_ptr</code> that we got as argument?</p>", "body_text": "No it should have a refcount of 2, one for the ref held in the cdata and one for the object we return.\nEven though the cdata that we get as argument to the function is already a shared_ptr, we need to use the placement new syntax to initialize properly the field f->cdata before setting it to the shared_ptr that we got as argument?", "in_reply_to_id": 128887443}