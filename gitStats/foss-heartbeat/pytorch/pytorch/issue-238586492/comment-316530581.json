{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/316530581", "html_url": "https://github.com/pytorch/pytorch/pull/1912#issuecomment-316530581", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1912", "id": 316530581, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjUzMDU4MQ==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-19T21:58:13Z", "updated_at": "2017-07-19T21:58:13Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6359743\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/albanD\">@albanD</a>, can you change this to use the variable pattern? I'm not sure that preserving wrapper objects even after they're no longer referenced from Python is necessary. In the mentioned script, for example, objects are stored in the <code>seen</code> set so <code>id()</code>'s are consistent.</p>\n<p>The downside of this is that the C++ object and its wrapper are tightly coupled. This will make it harder to have a useful C++ autograd library. (In the Variable pattern, the C++ object only needs space for an extra pointer, otherwise it doesn't need to know anything about the wrapper).</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> wants to cut a new release very soon. Do you have time to update the PR? If not, I can do it.</p>", "body_text": "@albanD, can you change this to use the variable pattern? I'm not sure that preserving wrapper objects even after they're no longer referenced from Python is necessary. In the mentioned script, for example, objects are stored in the seen set so id()'s are consistent.\nThe downside of this is that the C++ object and its wrapper are tightly coupled. This will make it harder to have a useful C++ autograd library. (In the Variable pattern, the C++ object only needs space for an extra pointer, otherwise it doesn't need to know anything about the wrapper).\n@soumith wants to cut a new release very soon. Do you have time to update the PR? If not, I can do it.", "body": "@albanD, can you change this to use the variable pattern? I'm not sure that preserving wrapper objects even after they're no longer referenced from Python is necessary. In the mentioned script, for example, objects are stored in the `seen` set so `id()`'s are consistent.\r\n\r\nThe downside of this is that the C++ object and its wrapper are tightly coupled. This will make it harder to have a useful C++ autograd library. (In the Variable pattern, the C++ object only needs space for an extra pointer, otherwise it doesn't need to know anything about the wrapper).\r\n\r\n@soumith wants to cut a new release very soon. Do you have time to update the PR? If not, I can do it."}