{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128907397", "pull_request_review_id": 51632889, "id": 128907397, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODkwNzM5Nw==", "diff_hunk": "@@ -173,22 +173,27 @@ PyObject* functionToPyObject(std::shared_ptr<Function> cdata)\n     return obj;\n   }\n \n-  auto& fn = *cdata;\n-  auto it = cpp_function_types.find(std::type_index(typeid(fn)));\n-  if (it == cpp_function_types.end()) {\n-    return PyErr_Format(PyExc_TypeError,\n-        \"Don't know how to create Python object for %s\", typeid(fn).name());\n-  }\n+  if (cdata->pyobj) {\n+    Py_INCREF(cdata->pyobj);\n+  } else {\n+    auto& fn = *cdata;\n+    auto it = cpp_function_types.find(std::type_index(typeid(fn)));\n+    if (it == cpp_function_types.end()) {\n+      return PyErr_Format(PyExc_TypeError,\n+          \"Don't know how to create Python object for %s\", typeid(fn).name());\n+    }\n \n-  PyTypeObject* type = (PyTypeObject*)it->second.get();\n-  THPObjectPtr obj(type->tp_alloc(type, 0));\n-  if (!obj) return NULL;\n-  THPCppFunction* f = (THPCppFunction*)obj.get();\n-  new (&f->cdata) std::shared_ptr<Function>(cdata);\n-  if (!f->cdata) {\n-    return NULL;\n+    PyTypeObject* type = (PyTypeObject*)it->second.get();\n+    THPObjectPtr obj(type->tp_alloc(type, 0));\n+    if (!obj) return NULL;\n+    THPCppFunction* f = (THPCppFunction*)obj.get();\n+    f->cdata = cdata;\n+\n+    cdata->pyobj = obj.release();\n+    Py_INCREF(cdata->pyobj);", "path": "torch/csrc/autograd/python_cpp_function.cpp", "position": null, "original_position": 50, "commit_id": "4ce8a2771fb073efd6232f6696c98158ffef8c9b", "original_commit_id": "b4a2d7d6b59a9240f7840813cb5ffb82d0c812ff", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "Ho my bad, the refcount should be 1 indeed because we have a weak reference.\r\nBut the thing is that I have just reused the logic used for variables [here](https://github.com/pytorch/pytorch/blob/3c275fe7a08411e23557107d00b358c304148e75/torch/csrc/autograd/python_variable.cpp#L40-L41).\r\nBut this code does not handle properly when `pyobj` is deleted no?\r\nShouldn't `PyWeakref_NewRef` and `PyWeakref_GetObject` be used here?\r\ncc @colesbury ", "created_at": "2017-07-22T23:59:07Z", "updated_at": "2018-11-23T15:34:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/1912#discussion_r128907397", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1912", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/128907397"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1912#discussion_r128907397"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1912"}}, "body_html": "<p>Ho my bad, the refcount should be 1 indeed because we have a weak reference.<br>\nBut the thing is that I have just reused the logic used for variables <a href=\"https://github.com/pytorch/pytorch/blob/3c275fe7a08411e23557107d00b358c304148e75/torch/csrc/autograd/python_variable.cpp#L40-L41\">here</a>.<br>\nBut this code does not handle properly when <code>pyobj</code> is deleted no?<br>\nShouldn't <code>PyWeakref_NewRef</code> and <code>PyWeakref_GetObject</code> be used here?<br>\ncc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a></p>", "body_text": "Ho my bad, the refcount should be 1 indeed because we have a weak reference.\nBut the thing is that I have just reused the logic used for variables here.\nBut this code does not handle properly when pyobj is deleted no?\nShouldn't PyWeakref_NewRef and PyWeakref_GetObject be used here?\ncc @colesbury", "in_reply_to_id": 128887443}