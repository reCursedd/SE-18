{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9726", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9726/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9726/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9726/events", "html_url": "https://github.com/pytorch/pytorch/pull/9726", "id": 343790017, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAzMzM5MjYy", "number": 9726, "title": "Creates ATen CUDAEvent", "user": {"login": "mruberry", "id": 38511765, "node_id": "MDQ6VXNlcjM4NTExNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/38511765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mruberry", "html_url": "https://github.com/mruberry", "followers_url": "https://api.github.com/users/mruberry/followers", "following_url": "https://api.github.com/users/mruberry/following{/other_user}", "gists_url": "https://api.github.com/users/mruberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mruberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mruberry/subscriptions", "organizations_url": "https://api.github.com/users/mruberry/orgs", "repos_url": "https://api.github.com/users/mruberry/repos", "events_url": "https://api.github.com/users/mruberry/events{/privacy}", "received_events_url": "https://api.github.com/users/mruberry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 559719279, "node_id": "MDU6TGFiZWw1NTk3MTkyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/ready%20for%20review", "name": "ready for review", "color": "b60205", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-23T20:48:40Z", "updated_at": "2018-09-25T16:39:28Z", "closed_at": "2018-09-05T20:24:55Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9726", "html_url": "https://github.com/pytorch/pytorch/pull/9726", "diff_url": "https://github.com/pytorch/pytorch/pull/9726.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9726.patch"}, "body_html": "<p>This PR:</p>\n<ul>\n<li>Creates an ATen version of CUDAEvent</li>\n<li>Adds set_device() to ATen's CUDAContext</li>\n<li>Extends ATen's cpp tests to exercise the new CUDAEvent</li>\n</ul>\n<p>The design of CUDAEvent is based on the CUDAEvent class first proposed for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"331398278\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8354\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/8354/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/8354\">#8354</a> (incorporating <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>'s suggestions), with additional requirements taken from the c10d CUDAEvent (incorporating <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"340898214\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9415\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/9415/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/9415\">#9415</a>, for example, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9845\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pietern\">@pietern</a>'s request). The key differences are:</p>\n<ul>\n<li>Recording and blocking are done with the CUDAEvent itself, and the behavior is validated.</li>\n<li>recordOnce() is added to support scenarios like <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"331398278\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/8354\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/8354/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/8354\">#8354</a> requires.</li>\n<li>Creation is deferred until the event is recorded, and the event's device matches the stream's. This eliminates the bookkeeping complexity of pre-declaring events to be suitable to be associated with a<br>\nparticular stream later.</li>\n<li>The actual events are created with the cudaEventDisableTiming flag, which improves performance.</li>\n</ul>\n<p>This PR does not:</p>\n<ul>\n<li>Replace the c10d CUDAEvent with this CUDAEvent.</li>\n</ul>\n<p>A separate PR will have to resolve the c10d vs ATen divergence of CUDAEvent, CUDAStream, and DeviceGuard.</p>", "body_text": "This PR:\n\nCreates an ATen version of CUDAEvent\nAdds set_device() to ATen's CUDAContext\nExtends ATen's cpp tests to exercise the new CUDAEvent\n\nThe design of CUDAEvent is based on the CUDAEvent class first proposed for #8354 (incorporating @apaszke's suggestions), with additional requirements taken from the c10d CUDAEvent (incorporating #9415, for example, @pietern's request). The key differences are:\n\nRecording and blocking are done with the CUDAEvent itself, and the behavior is validated.\nrecordOnce() is added to support scenarios like #8354 requires.\nCreation is deferred until the event is recorded, and the event's device matches the stream's. This eliminates the bookkeeping complexity of pre-declaring events to be suitable to be associated with a\nparticular stream later.\nThe actual events are created with the cudaEventDisableTiming flag, which improves performance.\n\nThis PR does not:\n\nReplace the c10d CUDAEvent with this CUDAEvent.\n\nA separate PR will have to resolve the c10d vs ATen divergence of CUDAEvent, CUDAStream, and DeviceGuard.", "body": "This PR:\r\n\r\n- Creates an ATen version of CUDAEvent\r\n- Adds set_device() to ATen's CUDAContext\r\n- Extends ATen's cpp tests to exercise the new CUDAEvent\r\n\r\nThe design of CUDAEvent is based on the CUDAEvent class first proposed for #8354 (incorporating @apaszke's suggestions), with additional requirements taken from the c10d CUDAEvent (incorporating #9415, for example, @pietern's request). The key differences are:\r\n\r\n- Recording and blocking are done with the CUDAEvent itself, and the behavior is validated.\r\n- recordOnce() is added to support scenarios like #8354 requires.\r\n- Creation is deferred until the event is recorded, and the event's device matches the stream's. This eliminates the bookkeeping complexity of pre-declaring events to be suitable to be associated with a \r\nparticular stream later.\r\n- The actual events are created with the cudaEventDisableTiming flag, which improves performance.\r\n\r\nThis PR does not:\r\n\r\n- Replace the c10d CUDAEvent with this CUDAEvent.\r\n\r\nA separate PR will have to resolve the c10d vs ATen divergence of CUDAEvent, CUDAStream, and DeviceGuard. "}