{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4148", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4148/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4148/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4148/events", "html_url": "https://github.com/pytorch/pytorch/issues/4148", "id": 281772867, "node_id": "MDU6SXNzdWUyODE3NzI4Njc=", "number": 4148, "title": "ATen explicitly differentiated native function resolution hazard (call is ambiguous)", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-13T14:41:33Z", "updated_at": "2017-12-13T16:24:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Functions in ATen either can have derivatives defined for them, or they can defer to the implementations of derivatives of the methods they invoke.</p>\n<p>Suppose you write this (assume f and g are functions):</p>\n<pre><code>#include &lt;ATen/ATen.h&gt;\n\nnamespace at { namespace native {\n\nTensor f(at::Tensor x) {\n  // some primitive implementation (f will need an explicit derivative)\n}\n\nTensor g(at::Tensor x) {\n  return f(x);\n}\n\n}}\n</code></pre>\n<p>If you have ever written this, you may notice that compilation fails, with the compiler complaining that 'f is ambiguous'. Puzzled, you might slap on the prefix <code>at::native::</code> to shut up the compiler. At time of writing, I see <code>narrow</code> dispatches to <code>at::native::slice</code>.</p>\n<p>The hazard is this: <em>if</em> g was intended to be a non-primitive function whose derivative was to be deferred to f's derivative implementation, resolving the ambiguity to <code>at::native::</code> will simply not work, because you will fail to actually go through the variable unpacking/wrapping code that is done by the <code>at::</code> version of the function. (In the particular case of <code>narrow</code>, <code>slice</code> happens to be a non-primitive native function, solving the problem.)</p>\n<p>This issue will become more pressing as we add more \"primitive\" native functions to ATen, e.g., functions which must have their derivatives expressed directly.</p>\n<p>EDIT: there is also a case where this hazard will silently introduce a performance problem to your code:</p>\n<ol>\n<li>You use <code>at::native</code> to call a non-primitive ATen native function, BUT</li>\n<li>The non-primitive ATen function has a more efficient derivative defined for it.</li>\n</ol>\n<p>If you call the <code>at::native</code> version, you will fall back to the less efficient derivative.</p>", "body_text": "Functions in ATen either can have derivatives defined for them, or they can defer to the implementations of derivatives of the methods they invoke.\nSuppose you write this (assume f and g are functions):\n#include <ATen/ATen.h>\n\nnamespace at { namespace native {\n\nTensor f(at::Tensor x) {\n  // some primitive implementation (f will need an explicit derivative)\n}\n\nTensor g(at::Tensor x) {\n  return f(x);\n}\n\n}}\n\nIf you have ever written this, you may notice that compilation fails, with the compiler complaining that 'f is ambiguous'. Puzzled, you might slap on the prefix at::native:: to shut up the compiler. At time of writing, I see narrow dispatches to at::native::slice.\nThe hazard is this: if g was intended to be a non-primitive function whose derivative was to be deferred to f's derivative implementation, resolving the ambiguity to at::native:: will simply not work, because you will fail to actually go through the variable unpacking/wrapping code that is done by the at:: version of the function. (In the particular case of narrow, slice happens to be a non-primitive native function, solving the problem.)\nThis issue will become more pressing as we add more \"primitive\" native functions to ATen, e.g., functions which must have their derivatives expressed directly.\nEDIT: there is also a case where this hazard will silently introduce a performance problem to your code:\n\nYou use at::native to call a non-primitive ATen native function, BUT\nThe non-primitive ATen function has a more efficient derivative defined for it.\n\nIf you call the at::native version, you will fall back to the less efficient derivative.", "body": "Functions in ATen either can have derivatives defined for them, or they can defer to the implementations of derivatives of the methods they invoke.\r\n\r\nSuppose you write this (assume f and g are functions):\r\n\r\n```\r\n#include <ATen/ATen.h>\r\n\r\nnamespace at { namespace native {\r\n\r\nTensor f(at::Tensor x) {\r\n  // some primitive implementation (f will need an explicit derivative)\r\n}\r\n\r\nTensor g(at::Tensor x) {\r\n  return f(x);\r\n}\r\n\r\n}}\r\n```\r\n\r\nIf you have ever written this, you may notice that compilation fails, with the compiler complaining that 'f is ambiguous'. Puzzled, you might slap on the prefix `at::native::` to shut up the compiler. At time of writing, I see `narrow` dispatches to `at::native::slice`.\r\n\r\nThe hazard is this: *if* g was intended to be a non-primitive function whose derivative was to be deferred to f's derivative implementation, resolving the ambiguity to `at::native::` will simply not work, because you will fail to actually go through the variable unpacking/wrapping code that is done by the `at::` version of the function. (In the particular case of `narrow`, `slice` happens to be a non-primitive native function, solving the problem.)\r\n\r\nThis issue will become more pressing as we add more \"primitive\" native functions to ATen, e.g., functions which must have their derivatives expressed directly.\r\n\r\nEDIT: there is also a case where this hazard will silently introduce a performance problem to your code:\r\n\r\n1. You use `at::native` to call a non-primitive ATen native function, BUT\r\n2. The non-primitive ATen function has a more efficient derivative defined for it.\r\n\r\nIf you call the `at::native` version, you will fall back to the less efficient derivative."}