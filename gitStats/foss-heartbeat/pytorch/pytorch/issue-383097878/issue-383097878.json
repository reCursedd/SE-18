{"url": "https://api.github.com/repos/pytorch/pytorch/issues/14273", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/14273/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/14273/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/14273/events", "html_url": "https://github.com/pytorch/pytorch/issues/14273", "id": 383097878, "node_id": "MDU6SXNzdWUzODMwOTc4Nzg=", "number": 14273, "title": "Not able to reproduce the same results with the C++ API. I get different output result.", "user": {"login": "Con-Mi", "id": 10553341, "node_id": "MDQ6VXNlcjEwNTUzMzQx", "avatar_url": "https://avatars0.githubusercontent.com/u/10553341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Con-Mi", "html_url": "https://github.com/Con-Mi", "followers_url": "https://api.github.com/users/Con-Mi/followers", "following_url": "https://api.github.com/users/Con-Mi/following{/other_user}", "gists_url": "https://api.github.com/users/Con-Mi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Con-Mi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Con-Mi/subscriptions", "organizations_url": "https://api.github.com/users/Con-Mi/orgs", "repos_url": "https://api.github.com/users/Con-Mi/repos", "events_url": "https://api.github.com/users/Con-Mi/events{/privacy}", "received_events_url": "https://api.github.com/users/Con-Mi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-21T12:34:04Z", "updated_at": "2018-11-23T11:58:12Z", "closed_at": null, "author_association": "NONE", "body_html": "<h2>Cpp Label</h2>\n<p>I have trained a segmentation model in Python with 4 Gpus. When I try the model in the Python environment I get the results I expect.<br>\nI export then the Python model and make it readable in C++ and use the libtorch header files to read it into the C++ model, but when I run the forward function, it does not seem to produce the same results.</p>\n<p>Steps to reproduce the behavior:</p>\n<ol>\n<li>\n<p>Check this gist where I have all the files:<br>\n<a href=\"https://gist.github.com/Con-Mi/4d92af62adb784a5353ff7cf19d6d099\">https://gist.github.com/Con-Mi/4d92af62adb784a5353ff7cf19d6d099</a></p>\n</li>\n<li>\n<p>Download the image 0010_.png and the binary var_dense_linknet_384_sgd_bce_20epchs.pt<br>\nfrom the link below<br>\n<a href=\"https://www.dropbox.com/sh/jni3lpsk68iu0fd/AACudbOBnzufHy0ttHpeTLDsa?dl=0\" rel=\"nofollow\">https://www.dropbox.com/sh/jni3lpsk68iu0fd/AACudbOBnzufHy0ttHpeTLDsa?dl=0</a></p>\n</li>\n<li>\n<p>Run python convert_bin.py<br>\n(I am using PyTorch 1.0(Python 3.6) to do this you need this version.)<br>\nIt will save the jit model that you need to load into C++ application.</p>\n</li>\n<li>\n<p>Build the project with CMake, just by running cmake ..  , in the build folder.</p>\n</li>\n<li>\n<p>Run the program with: ./testing<br>\nAfter that they will be windows of the original image and the output.</p>\n</li>\n<li>\n<p>Run the python program python_prediction.py in order to compare the results</p>\n</li>\n</ol>\n<p>Dependencies:</p>\n<ul>\n<li>OpenCV 3.4.3-dev in C++. Higher version will work as well. Not a particular preference. (Just change it in the CmakeLists.txt)</li>\n<li>libtorch</li>\n<li>Python Libraries:<br>\n- Matplotlib<br>\n- Seaborn (You can skip this if you want. Just remove the lines in the code.)<br>\n- PyTorch 1.0 and torchvision<br>\n- Numpy<br>\n- Opencv 3.4</li>\n</ul>", "body_text": "Cpp Label\nI have trained a segmentation model in Python with 4 Gpus. When I try the model in the Python environment I get the results I expect.\nI export then the Python model and make it readable in C++ and use the libtorch header files to read it into the C++ model, but when I run the forward function, it does not seem to produce the same results.\nSteps to reproduce the behavior:\n\n\nCheck this gist where I have all the files:\nhttps://gist.github.com/Con-Mi/4d92af62adb784a5353ff7cf19d6d099\n\n\nDownload the image 0010_.png and the binary var_dense_linknet_384_sgd_bce_20epchs.pt\nfrom the link below\nhttps://www.dropbox.com/sh/jni3lpsk68iu0fd/AACudbOBnzufHy0ttHpeTLDsa?dl=0\n\n\nRun python convert_bin.py\n(I am using PyTorch 1.0(Python 3.6) to do this you need this version.)\nIt will save the jit model that you need to load into C++ application.\n\n\nBuild the project with CMake, just by running cmake ..  , in the build folder.\n\n\nRun the program with: ./testing\nAfter that they will be windows of the original image and the output.\n\n\nRun the python program python_prediction.py in order to compare the results\n\n\nDependencies:\n\nOpenCV 3.4.3-dev in C++. Higher version will work as well. Not a particular preference. (Just change it in the CmakeLists.txt)\nlibtorch\nPython Libraries:\n- Matplotlib\n- Seaborn (You can skip this if you want. Just remove the lines in the code.)\n- PyTorch 1.0 and torchvision\n- Numpy\n- Opencv 3.4", "body": "## Cpp Label\r\n\r\nI have trained a segmentation model in Python with 4 Gpus. When I try the model in the Python environment I get the results I expect.\r\nI export then the Python model and make it readable in C++ and use the libtorch header files to read it into the C++ model, but when I run the forward function, it does not seem to produce the same results.\r\n\r\n\r\nSteps to reproduce the behavior:\r\n\r\n1. Check this gist where I have all the files:\r\nhttps://gist.github.com/Con-Mi/4d92af62adb784a5353ff7cf19d6d099\r\n\r\n2. Download the image 0010_.png and the binary var_dense_linknet_384_sgd_bce_20epchs.pt\r\nfrom the link below\r\nhttps://www.dropbox.com/sh/jni3lpsk68iu0fd/AACudbOBnzufHy0ttHpeTLDsa?dl=0\r\n\r\n3. Run python convert_bin.py\r\n(I am using PyTorch 1.0(Python 3.6) to do this you need this version.)\r\nIt will save the jit model that you need to load into C++ application.\r\n\r\n4. Build the project with CMake, just by running cmake ..  , in the build folder.\r\n\r\n5. Run the program with: ./testing \r\nAfter that they will be windows of the original image and the output.\r\n\r\n6. Run the python program python_prediction.py in order to compare the results\r\n\r\nDependencies: \r\n   - OpenCV 3.4.3-dev in C++. Higher version will work as well. Not a particular preference. (Just change it in the CmakeLists.txt)\r\n   - libtorch\r\n  - Python Libraries:\r\n          - Matplotlib\r\n          - Seaborn (You can skip this if you want. Just remove the lines in the code.)\r\n          - PyTorch 1.0 and torchvision\r\n          - Numpy \r\n          - Opencv 3.4\r\n\r\n\r\n"}