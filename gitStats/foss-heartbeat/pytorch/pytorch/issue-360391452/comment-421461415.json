{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/421461415", "html_url": "https://github.com/pytorch/pytorch/issues/11709#issuecomment-421461415", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11709", "id": 421461415, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTQ2MTQxNQ==", "user": {"login": "pietern", "id": 9845, "node_id": "MDQ6VXNlcjk4NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietern", "html_url": "https://github.com/pietern", "followers_url": "https://api.github.com/users/pietern/followers", "following_url": "https://api.github.com/users/pietern/following{/other_user}", "gists_url": "https://api.github.com/users/pietern/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietern/subscriptions", "organizations_url": "https://api.github.com/users/pietern/orgs", "repos_url": "https://api.github.com/users/pietern/repos", "events_url": "https://api.github.com/users/pietern/events{/privacy}", "received_events_url": "https://api.github.com/users/pietern/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-14T19:30:24Z", "updated_at": "2018-09-14T19:30:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Unlike the previous version of torch.distributed there may be multiple backends in use at the same time (e.g. cpu side send/recv as well as NCCL), but you will need to work with the groups API to be exposed to that. There is the <code>get_default_group</code> function you can use to get the global/default group.</p>\n<p>In the light of backwards compatibility I'm re-adding the _backend property, with the caveat that its value will only reflect the type of the process group that is created first through <code>init_process_group</code>.</p>\n<p>When you're ready to take a hard dependency on the new version of PyTorch, once it is released, then you would change this to use a new <code>get_backend</code> function I'm adding now, so that you can take the process group as argument to apex (or default it to equal <code>get_default_group</code>).</p>", "body_text": "Unlike the previous version of torch.distributed there may be multiple backends in use at the same time (e.g. cpu side send/recv as well as NCCL), but you will need to work with the groups API to be exposed to that. There is the get_default_group function you can use to get the global/default group.\nIn the light of backwards compatibility I'm re-adding the _backend property, with the caveat that its value will only reflect the type of the process group that is created first through init_process_group.\nWhen you're ready to take a hard dependency on the new version of PyTorch, once it is released, then you would change this to use a new get_backend function I'm adding now, so that you can take the process group as argument to apex (or default it to equal get_default_group).", "body": "Unlike the previous version of torch.distributed there may be multiple backends in use at the same time (e.g. cpu side send/recv as well as NCCL), but you will need to work with the groups API to be exposed to that. There is the `get_default_group` function you can use to get the global/default group.\r\n\r\nIn the light of backwards compatibility I'm re-adding the _backend property, with the caveat that its value will only reflect the type of the process group that is created first through `init_process_group`.\r\n\r\nWhen you're ready to take a hard dependency on the new version of PyTorch, once it is released, then you would change this to use a new `get_backend` function I'm adding now, so that you can take the process group as argument to apex (or default it to equal `get_default_group`)."}