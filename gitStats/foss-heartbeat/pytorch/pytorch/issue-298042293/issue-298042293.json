{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5288", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5288/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5288/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5288/events", "html_url": "https://github.com/pytorch/pytorch/pull/5288", "id": 298042293, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY5ODA0OTU5", "number": 5288, "title": "[RFC] E2E test for script python frontend compilation + hacky fix for bug in compiler", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-17T22:36:41Z", "updated_at": "2018-11-23T15:39:44Z", "closed_at": "2018-03-23T22:49:05Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/5288", "html_url": "https://github.com/pytorch/pytorch/pull/5288", "diff_url": "https://github.com/pytorch/pytorch/pull/5288.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/5288.patch"}, "body_html": "<ul>\n<li>Expose CompilationUnit::defineFunction so we can directly pass in the Def from AST parsing</li>\n<li>Add a new test for e2e compilation (not using old one since i still need to put out the PR for ternary ops, will merge later)</li>\n<li>[RFC] There's a bug where an assignment to an LCD (e.g. <code>q = x</code>) causes a segfault when the rhs was deleted because it had no mutations. Right now I loop over the value table and change <em>all</em> symbols that refer to that value to the value in the enclosing scope. Request for ideas on a better overall design to avoid this</li>\n</ul>\n<p>TODO arising from this: we should do the dataflow analysis to allow assignment to a value not in scope a la python scoping. I hack around this in the test</p>", "body_text": "Expose CompilationUnit::defineFunction so we can directly pass in the Def from AST parsing\nAdd a new test for e2e compilation (not using old one since i still need to put out the PR for ternary ops, will merge later)\n[RFC] There's a bug where an assignment to an LCD (e.g. q = x) causes a segfault when the rhs was deleted because it had no mutations. Right now I loop over the value table and change all symbols that refer to that value to the value in the enclosing scope. Request for ideas on a better overall design to avoid this\n\nTODO arising from this: we should do the dataflow analysis to allow assignment to a value not in scope a la python scoping. I hack around this in the test", "body": "- Expose CompilationUnit::defineFunction so we can directly pass in the Def from AST parsing\r\n- Add a new test for e2e compilation (not using old one since i still need to put out the PR for ternary ops, will merge later)\r\n- [RFC] There's a bug where an assignment to an LCD (e.g. `q = x`) causes a segfault when the rhs was deleted because it had no mutations. Right now I loop over the value table and change *all* symbols that refer to that value to the value in the enclosing scope. Request for ideas on a better overall design to avoid this\r\n\r\nTODO arising from this: we should do the dataflow analysis to allow assignment to a value not in scope a la python scoping. I hack around this in the test"}