{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5398", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5398/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5398/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5398/events", "html_url": "https://github.com/pytorch/pytorch/issues/5398", "id": 299944983, "node_id": "MDU6SXNzdWUyOTk5NDQ5ODM=", "number": 5398, "title": "DataLoader returning non-CUDA tensors", "user": {"login": "abhaikollara", "id": 21106717, "node_id": "MDQ6VXNlcjIxMTA2NzE3", "avatar_url": "https://avatars1.githubusercontent.com/u/21106717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhaikollara", "html_url": "https://github.com/abhaikollara", "followers_url": "https://api.github.com/users/abhaikollara/followers", "following_url": "https://api.github.com/users/abhaikollara/following{/other_user}", "gists_url": "https://api.github.com/users/abhaikollara/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhaikollara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhaikollara/subscriptions", "organizations_url": "https://api.github.com/users/abhaikollara/orgs", "repos_url": "https://api.github.com/users/abhaikollara/repos", "events_url": "https://api.github.com/users/abhaikollara/events{/privacy}", "received_events_url": "https://api.github.com/users/abhaikollara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-02-24T14:31:04Z", "updated_at": "2018-02-25T14:31:42Z", "closed_at": "2018-02-25T14:31:42Z", "author_association": "NONE", "body_html": "<p>I created a simple dataset that has two CUDA tensors, one of shape <code>(1000, 5)</code> and the other <code>(1000,)</code> but when I load them using a <code>DataLoader</code> only the first one is returned as CUDA tensor. I think this may have something to do with the default <code>collate_fn</code> of the DataLoader. A simple hack is to reshape the 1D tensor into <code>(1000, 1)</code> while feeding to DataLoader. But loss functions like <code>CrossEntropyLoss</code> and <code>NLLLoss</code> require 1D inputs which means they have to reshaped back into <code>(1000, )</code>. Are there any proper fixes to this ?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.utils.data <span class=\"pl-k\">import</span> Dataset, DataLoader\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nx <span class=\"pl-k\">=</span> torch.cuda.FloatTensor(np.random.randn(<span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">5</span>))\ny <span class=\"pl-k\">=</span> torch.cuda.LongTensor(np.random.randint(<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1000</span>, )))\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">data</span>(<span class=\"pl-e\">Dataset</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">inputs</span>, <span class=\"pl-smi\">targets</span>):\n        <span class=\"pl-c1\">self</span>.x <span class=\"pl-k\">=</span> inputs\n        <span class=\"pl-c1\">self</span>.y <span class=\"pl-k\">=</span> targets\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__len__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.x.size()[<span class=\"pl-c1\">0</span>]\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__getitem__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">idx</span>):\n         <span class=\"pl-k\">return</span> (<span class=\"pl-c1\">self</span>.x[idx], <span class=\"pl-c1\">self</span>.y[idx])\n\nd <span class=\"pl-k\">=</span> data(x, y)\ndl <span class=\"pl-k\">=</span> DataLoader(d, <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>)\n\n<span class=\"pl-k\">for</span> item <span class=\"pl-k\">in</span> dl:\n    <span class=\"pl-c1\">print</span>(item)\n    <span class=\"pl-k\">break</span></pre></div>\n<p>Output</p>\n<pre><code>[\n 0.9943 -0.6458 -0.7077 -0.9228 -1.1230\n-0.1050 -0.1452  0.0680 -0.5407 -0.5932\n 2.7039  0.0426  0.0692  1.3255  0.0133\n-0.3883  0.5905  1.4192 -0.7205 -1.5623\n 1.8158  0.5436  0.8788  2.3459  0.9836\n[torch.cuda.FloatTensor of size 5x5 (GPU 0)]\n,\n 6\n 7\n 2\n 2\n 7\n[torch.LongTensor of size 5]\n]\n</code></pre>\n<ul>\n<li>OS: Ubuntu 17.10</li>\n<li>PyTorch version: 0.3.0.post4</li>\n<li>How you installed PyTorch (conda, pip, source): pip</li>\n<li>Python version: Python 3.6.3</li>\n<li>CUDA/cuDNN version: 8.0.61</li>\n</ul>", "body_text": "I created a simple dataset that has two CUDA tensors, one of shape (1000, 5) and the other (1000,) but when I load them using a DataLoader only the first one is returned as CUDA tensor. I think this may have something to do with the default collate_fn of the DataLoader. A simple hack is to reshape the 1D tensor into (1000, 1) while feeding to DataLoader. But loss functions like CrossEntropyLoss and NLLLoss require 1D inputs which means they have to reshaped back into (1000, ). Are there any proper fixes to this ?\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nimport numpy as np\n\nx = torch.cuda.FloatTensor(np.random.randn(1000, 5))\ny = torch.cuda.LongTensor(np.random.randint(0,10, size=(1000, )))\n\nclass data(Dataset):\n    def __init__(self, inputs, targets):\n        self.x = inputs\n        self.y = targets\n\n    def __len__(self):\n        return self.x.size()[0]\n\n    def __getitem__(self, idx):\n         return (self.x[idx], self.y[idx])\n\nd = data(x, y)\ndl = DataLoader(d, batch_size=5)\n\nfor item in dl:\n    print(item)\n    break\nOutput\n[\n 0.9943 -0.6458 -0.7077 -0.9228 -1.1230\n-0.1050 -0.1452  0.0680 -0.5407 -0.5932\n 2.7039  0.0426  0.0692  1.3255  0.0133\n-0.3883  0.5905  1.4192 -0.7205 -1.5623\n 1.8158  0.5436  0.8788  2.3459  0.9836\n[torch.cuda.FloatTensor of size 5x5 (GPU 0)]\n,\n 6\n 7\n 2\n 2\n 7\n[torch.LongTensor of size 5]\n]\n\n\nOS: Ubuntu 17.10\nPyTorch version: 0.3.0.post4\nHow you installed PyTorch (conda, pip, source): pip\nPython version: Python 3.6.3\nCUDA/cuDNN version: 8.0.61", "body": "I created a simple dataset that has two CUDA tensors, one of shape `(1000, 5)` and the other `(1000,)` but when I load them using a `DataLoader` only the first one is returned as CUDA tensor. I think this may have something to do with the default `collate_fn` of the DataLoader. A simple hack is to reshape the 1D tensor into `(1000, 1)` while feeding to DataLoader. But loss functions like `CrossEntropyLoss` and `NLLLoss` require 1D inputs which means they have to reshaped back into `(1000, )`. Are there any proper fixes to this ?\r\n\r\n```python\r\nimport torch\r\nfrom torch.utils.data import Dataset, DataLoader\r\nimport numpy as np\r\n\r\nx = torch.cuda.FloatTensor(np.random.randn(1000, 5))\r\ny = torch.cuda.LongTensor(np.random.randint(0,10, size=(1000, )))\r\n\r\nclass data(Dataset):\r\n    def __init__(self, inputs, targets):\r\n        self.x = inputs\r\n        self.y = targets\r\n\r\n    def __len__(self):\r\n        return self.x.size()[0]\r\n\r\n    def __getitem__(self, idx):\r\n         return (self.x[idx], self.y[idx])\r\n\r\nd = data(x, y)\r\ndl = DataLoader(d, batch_size=5)\r\n\r\nfor item in dl:\r\n    print(item)\r\n    break\r\n```\r\nOutput\r\n```\r\n[\r\n 0.9943 -0.6458 -0.7077 -0.9228 -1.1230\r\n-0.1050 -0.1452  0.0680 -0.5407 -0.5932\r\n 2.7039  0.0426  0.0692  1.3255  0.0133\r\n-0.3883  0.5905  1.4192 -0.7205 -1.5623\r\n 1.8158  0.5436  0.8788  2.3459  0.9836\r\n[torch.cuda.FloatTensor of size 5x5 (GPU 0)]\r\n,\r\n 6\r\n 7\r\n 2\r\n 2\r\n 7\r\n[torch.LongTensor of size 5]\r\n]\r\n```\r\n\r\n- OS: Ubuntu 17.10\r\n- PyTorch version: 0.3.0.post4\r\n- How you installed PyTorch (conda, pip, source): pip\r\n- Python version: Python 3.6.3\r\n- CUDA/cuDNN version: 8.0.61"}