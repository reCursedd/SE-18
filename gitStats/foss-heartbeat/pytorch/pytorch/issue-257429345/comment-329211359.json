{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/329211359", "html_url": "https://github.com/pytorch/pytorch/pull/2722#issuecomment-329211359", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2722", "id": 329211359, "node_id": "MDEyOklzc3VlQ29tbWVudDMyOTIxMTM1OQ==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-13T15:49:08Z", "updated_at": "2017-09-13T15:49:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Before change:</p>\n<pre><code>&gt;&gt;&gt; m=torch.nn.AdaptiveMaxPool2d(3, return_indices=True)\n&gt;&gt;&gt; m(torch.arange(1,26).view(1,5,5))[1]\nVariable containing:\n(0 ,0 ,.,.) =\n  1  1  1\n  2  2  2\n  1  1  1\n\n(1 ,0 ,.,.) =\n  1  2  1\n  1  2  1\n  1  2  1\n[torch.LongTensor of size 2x1x3x3]\n</code></pre>\n<p>After change:</p>\n<pre><code>&gt;&gt;&gt; m=torch.nn.AdaptiveMaxPool2d(3, return_indices=True)\n&gt;&gt;&gt; m(torch.arange(1,26).view(1,5,5))[1]\nVariable containing:\n(0 ,.,.) =\n   6   8   9\n  16  18  19\n  21  23  24\n[torch.LongTensor of size 1x3x3]\n</code></pre>", "body_text": "Before change:\n>>> m=torch.nn.AdaptiveMaxPool2d(3, return_indices=True)\n>>> m(torch.arange(1,26).view(1,5,5))[1]\nVariable containing:\n(0 ,0 ,.,.) =\n  1  1  1\n  2  2  2\n  1  1  1\n\n(1 ,0 ,.,.) =\n  1  2  1\n  1  2  1\n  1  2  1\n[torch.LongTensor of size 2x1x3x3]\n\nAfter change:\n>>> m=torch.nn.AdaptiveMaxPool2d(3, return_indices=True)\n>>> m(torch.arange(1,26).view(1,5,5))[1]\nVariable containing:\n(0 ,.,.) =\n   6   8   9\n  16  18  19\n  21  23  24\n[torch.LongTensor of size 1x3x3]", "body": "Before change:\r\n```\r\n>>> m=torch.nn.AdaptiveMaxPool2d(3, return_indices=True)\r\n>>> m(torch.arange(1,26).view(1,5,5))[1]\r\nVariable containing:\r\n(0 ,0 ,.,.) =\r\n  1  1  1\r\n  2  2  2\r\n  1  1  1\r\n\r\n(1 ,0 ,.,.) =\r\n  1  2  1\r\n  1  2  1\r\n  1  2  1\r\n[torch.LongTensor of size 2x1x3x3]\r\n```\r\nAfter change:\r\n```\r\n>>> m=torch.nn.AdaptiveMaxPool2d(3, return_indices=True)\r\n>>> m(torch.arange(1,26).view(1,5,5))[1]\r\nVariable containing:\r\n(0 ,.,.) =\r\n   6   8   9\r\n  16  18  19\r\n  21  23  24\r\n[torch.LongTensor of size 1x3x3]\r\n```"}