{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193614635", "pull_request_review_id": 126620346, "id": 193614635, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzYxNDYzNQ==", "diff_hunk": "@@ -0,0 +1,23 @@\n+#pragma once\n+\n+#include \"torch/csrc/utils/python_stub.h\"", "path": "torch/csrc/autograd/anomaly_mode.h", "position": null, "original_position": 3, "commit_id": "ff608fec1da7f98b52ff290917865e6fd6fa8ec0", "original_commit_id": "47db851690b67dbf5f9c202cf412e9bb478b1d37", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "That's closer.\r\n\r\nThe hidden constraint I'm surfacing here is that we have designs on splitting _C.so into two libraries: libtorch.so (no Python dependency) and libtorch_python.so (Python dependency). So having NO_PYTHON in the cpp file goes against this.\r\n\r\nOne usual way to go about doing this is to have anomaly_mode and anomaly_mode_python, where anomaly_mode_python depends on anomaly_mode, and adds on the Python specific functionality. Doable? You probably have to stop storing the actual python objects as traces, but surely there is a more agnostic representation they can be saved as?", "created_at": "2018-06-07T03:03:20Z", "updated_at": "2018-11-23T15:45:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/7677#discussion_r193614635", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7677", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193614635"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7677#discussion_r193614635"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7677"}}, "body_html": "<p>That's closer.</p>\n<p>The hidden constraint I'm surfacing here is that we have designs on splitting _C.so into two libraries: libtorch.so (no Python dependency) and libtorch_python.so (Python dependency). So having NO_PYTHON in the cpp file goes against this.</p>\n<p>One usual way to go about doing this is to have anomaly_mode and anomaly_mode_python, where anomaly_mode_python depends on anomaly_mode, and adds on the Python specific functionality. Doable? You probably have to stop storing the actual python objects as traces, but surely there is a more agnostic representation they can be saved as?</p>", "body_text": "That's closer.\nThe hidden constraint I'm surfacing here is that we have designs on splitting _C.so into two libraries: libtorch.so (no Python dependency) and libtorch_python.so (Python dependency). So having NO_PYTHON in the cpp file goes against this.\nOne usual way to go about doing this is to have anomaly_mode and anomaly_mode_python, where anomaly_mode_python depends on anomaly_mode, and adds on the Python specific functionality. Doable? You probably have to stop storing the actual python objects as traces, but surely there is a more agnostic representation they can be saved as?", "in_reply_to_id": 193277201}