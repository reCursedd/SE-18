{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194108075", "pull_request_review_id": 127224885, "id": 194108075, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDEwODA3NQ==", "diff_hunk": "@@ -0,0 +1,23 @@\n+#pragma once\n+\n+#include \"torch/csrc/utils/python_stub.h\"", "path": "torch/csrc/autograd/anomaly_mode.h", "position": null, "original_position": 3, "commit_id": "ff608fec1da7f98b52ff290917865e6fd6fa8ec0", "original_commit_id": "47db851690b67dbf5f9c202cf412e9bb478b1d37", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Change the metadata to be a class instead of a Python object. You also need to move some functionality from AnomalyMode to the new class.\r\n\r\nRough design:\r\n\r\nMake AnomalyMode not use any Python. It just contains is_enabled/set_enabled.\r\n\r\n```\r\n// pure virtual interface\r\nstruct AnomalyMetadata {\r\n  virtual void store_stack() = 0;\r\n  virtual void print_stack() = 0;\r\n};\r\n\r\n// Python implementation\r\nstruct PyAnomalyMetadata : public AnomalyMetadata {\r\n  PyAnomalyMetadata() { /* make dict */ }\r\n  virtual ~PyAnomalyMetadata() { /* acquire GIL and release */ }\r\n  virtual void store_stack();\r\n  virtual void print_stack();\r\n\r\n  PyObject* dict();\r\n  \r\n  PyObject* dict_;  // never null\r\n};\r\n\r\nstruct Function {\r\n  ...\r\n  std::unique_ptr<AnomalyMetadata> metadata_;\r\n};\r\n```\r\n\r\nThen you just need a factory to the correct concrete AnomalyMetadata instance. I would add it to Engine/PythonEngine.\r\n\r\n```\r\nstruct Engine {\r\n  virtual std::unique_ptr<AnomalyMetadata> make_anomaly_metadata();\r\n}\r\nstruct PythonEngine {\r\n  virtual std::unique_ptr<AnomalyMetadata> make_anomaly_metadata() override;\r\n}\r\n```", "created_at": "2018-06-08T16:11:33Z", "updated_at": "2018-11-23T15:45:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/7677#discussion_r194108075", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7677", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194108075"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7677#discussion_r194108075"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7677"}}, "body_html": "<p>Change the metadata to be a class instead of a Python object. You also need to move some functionality from AnomalyMode to the new class.</p>\n<p>Rough design:</p>\n<p>Make AnomalyMode not use any Python. It just contains is_enabled/set_enabled.</p>\n<pre><code>// pure virtual interface\nstruct AnomalyMetadata {\n  virtual void store_stack() = 0;\n  virtual void print_stack() = 0;\n};\n\n// Python implementation\nstruct PyAnomalyMetadata : public AnomalyMetadata {\n  PyAnomalyMetadata() { /* make dict */ }\n  virtual ~PyAnomalyMetadata() { /* acquire GIL and release */ }\n  virtual void store_stack();\n  virtual void print_stack();\n\n  PyObject* dict();\n  \n  PyObject* dict_;  // never null\n};\n\nstruct Function {\n  ...\n  std::unique_ptr&lt;AnomalyMetadata&gt; metadata_;\n};\n</code></pre>\n<p>Then you just need a factory to the correct concrete AnomalyMetadata instance. I would add it to Engine/PythonEngine.</p>\n<pre><code>struct Engine {\n  virtual std::unique_ptr&lt;AnomalyMetadata&gt; make_anomaly_metadata();\n}\nstruct PythonEngine {\n  virtual std::unique_ptr&lt;AnomalyMetadata&gt; make_anomaly_metadata() override;\n}\n</code></pre>", "body_text": "Change the metadata to be a class instead of a Python object. You also need to move some functionality from AnomalyMode to the new class.\nRough design:\nMake AnomalyMode not use any Python. It just contains is_enabled/set_enabled.\n// pure virtual interface\nstruct AnomalyMetadata {\n  virtual void store_stack() = 0;\n  virtual void print_stack() = 0;\n};\n\n// Python implementation\nstruct PyAnomalyMetadata : public AnomalyMetadata {\n  PyAnomalyMetadata() { /* make dict */ }\n  virtual ~PyAnomalyMetadata() { /* acquire GIL and release */ }\n  virtual void store_stack();\n  virtual void print_stack();\n\n  PyObject* dict();\n  \n  PyObject* dict_;  // never null\n};\n\nstruct Function {\n  ...\n  std::unique_ptr<AnomalyMetadata> metadata_;\n};\n\nThen you just need a factory to the correct concrete AnomalyMetadata instance. I would add it to Engine/PythonEngine.\nstruct Engine {\n  virtual std::unique_ptr<AnomalyMetadata> make_anomaly_metadata();\n}\nstruct PythonEngine {\n  virtual std::unique_ptr<AnomalyMetadata> make_anomaly_metadata() override;\n}", "in_reply_to_id": 193277201}