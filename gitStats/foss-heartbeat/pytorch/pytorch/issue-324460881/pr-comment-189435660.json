{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189435660", "pull_request_review_id": 121620337, "id": 189435660, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQzNTY2MA==", "diff_hunk": "@@ -0,0 +1,50 @@\n+#include \"torch/csrc/autograd/anomaly_mode.h\"\n+#include \"torch/csrc/utils/auto_gil.h\"\n+#include \"torch/csrc/utils/python_strings.h\"\n+\n+#include \"stdexcept\"\n+#include \"iostream\"\n+\n+namespace torch { namespace autograd {\n+\n+bool AnomalyMode::_enabled = 0;\n+PyObject* AnomalyMode::stacktrace_key = THPUtils_packString(\"stacktrace_\");\n+\n+void AnomalyMode::store_stack(PyObject* metadata) {\n+  AutoGIL gil;\n+  auto mod = PyImport_ImportModule(\"traceback\");\n+  if (!mod) {\n+    return;\n+  }\n+\n+  auto list = PyObject_CallMethod(mod, \"format_stack\", \"\");\n+\n+  PyDict_SetItem(metadata, AnomalyMode::stacktrace_key, list);\n+\n+  Py_DECREF(mod);\n+  Py_DECREF(list);\n+}\n+\n+void AnomalyMode::print_stack(PyObject* metadata) {\n+  AutoGIL gil;\n+  if (!PyDict_Check(metadata)) {\n+    throw std::runtime_error(\"Function metadata is not a python dictionary.\");\n+  }\n+\n+  if (!PyDict_Contains(metadata, AnomalyMode::stacktrace_key)) {\n+    std::cout << \"No forward pass information available.\" << std::endl;", "path": "torch/csrc/autograd/anomaly_mode.cpp", "position": null, "original_position": 35, "commit_id": "ff608fec1da7f98b52ff290917865e6fd6fa8ec0", "original_commit_id": "312e4ab87895811bdef0eb71cc9dfdaa9df71e9c", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "Given that this is only saving python stacktraces, this makes no sense for the C++-only build.\r\n\r\nAt the moment I print it in the exact same way I print the traceback so that if you're looking for the traceback, you'll find that instead. I guess a python warning could be used. If you think it's better then I'm not sure how this should be implemented: from the documentation I am not sure how `PyErr_WarnEx` behaves depending on how the warnings should be handled. Is that a function that will just print and return if in default warning mode and that will never return if warning should fail?\r\n", "created_at": "2018-05-19T14:23:14Z", "updated_at": "2018-11-23T15:44:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/7677#discussion_r189435660", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7677", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189435660"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7677#discussion_r189435660"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7677"}}, "body_html": "<p>Given that this is only saving python stacktraces, this makes no sense for the C++-only build.</p>\n<p>At the moment I print it in the exact same way I print the traceback so that if you're looking for the traceback, you'll find that instead. I guess a python warning could be used. If you think it's better then I'm not sure how this should be implemented: from the documentation I am not sure how <code>PyErr_WarnEx</code> behaves depending on how the warnings should be handled. Is that a function that will just print and return if in default warning mode and that will never return if warning should fail?</p>", "body_text": "Given that this is only saving python stacktraces, this makes no sense for the C++-only build.\nAt the moment I print it in the exact same way I print the traceback so that if you're looking for the traceback, you'll find that instead. I guess a python warning could be used. If you think it's better then I'm not sure how this should be implemented: from the documentation I am not sure how PyErr_WarnEx behaves depending on how the warnings should be handled. Is that a function that will just print and return if in default warning mode and that will never return if warning should fail?", "in_reply_to_id": 189370944}