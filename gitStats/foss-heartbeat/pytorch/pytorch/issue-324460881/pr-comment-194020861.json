{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194020861", "pull_request_review_id": 127115362, "id": 194020861, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDAyMDg2MQ==", "diff_hunk": "@@ -0,0 +1,23 @@\n+#pragma once\n+\n+#include \"torch/csrc/utils/python_stub.h\"", "path": "torch/csrc/autograd/anomaly_mode.h", "position": null, "original_position": 3, "commit_id": "ff608fec1da7f98b52ff290917865e6fd6fa8ec0", "original_commit_id": "47db851690b67dbf5f9c202cf412e9bb478b1d37", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "The reason why I save the traces as a python object is because the metadata is a python object anyway and I want to do minimal job at every Function creation and do the full formatting only if an actual error occurs.\r\nThe thing is that the metadata object associated with the Function itself is a python dictionnary (I think we want this to stay because from a user perspective, we want to be able to save any python object into a Function metadata field). So the same change will be needed for the function.h file to extend its abilities.\r\n\r\nI am not that fluent in cpp, how would you implement that exactly? How can you make anomaly_mode_python modify the original behavior if anomaly_mode? It cannot redefine the same function with different implementations right, can it change a flag? ", "created_at": "2018-06-08T10:48:41Z", "updated_at": "2018-11-23T15:45:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/7677#discussion_r194020861", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7677", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194020861"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7677#discussion_r194020861"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7677"}}, "body_html": "<p>The reason why I save the traces as a python object is because the metadata is a python object anyway and I want to do minimal job at every Function creation and do the full formatting only if an actual error occurs.<br>\nThe thing is that the metadata object associated with the Function itself is a python dictionnary (I think we want this to stay because from a user perspective, we want to be able to save any python object into a Function metadata field). So the same change will be needed for the function.h file to extend its abilities.</p>\n<p>I am not that fluent in cpp, how would you implement that exactly? How can you make anomaly_mode_python modify the original behavior if anomaly_mode? It cannot redefine the same function with different implementations right, can it change a flag?</p>", "body_text": "The reason why I save the traces as a python object is because the metadata is a python object anyway and I want to do minimal job at every Function creation and do the full formatting only if an actual error occurs.\nThe thing is that the metadata object associated with the Function itself is a python dictionnary (I think we want this to stay because from a user perspective, we want to be able to save any python object into a Function metadata field). So the same change will be needed for the function.h file to extend its abilities.\nI am not that fluent in cpp, how would you implement that exactly? How can you make anomaly_mode_python modify the original behavior if anomaly_mode? It cannot redefine the same function with different implementations right, can it change a flag?", "in_reply_to_id": 193277201}