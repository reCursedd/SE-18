{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189437604", "pull_request_review_id": 121622272, "id": 189437604, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQzNzYwNA==", "diff_hunk": "@@ -96,7 +98,11 @@ struct Function : std::enable_shared_from_this<Function> {\n       edge_list&& next_edges = edge_list())\n       : sequence_nr_(sequence_nr),\n       num_inputs_(num_inputs),\n-      next_edges_(std::move(next_edges)) {}\n+      next_edges_(std::move(next_edges)) {\n+    if (AnomalyMode::is_enabled()) {\n+      AnomalyMode::store_stack(metadata());", "path": "torch/csrc/autograd/function.h", "position": null, "original_position": 23, "commit_id": "ff608fec1da7f98b52ff290917865e6fd6fa8ec0", "original_commit_id": "312e4ab87895811bdef0eb71cc9dfdaa9df71e9c", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "In a multithreaded environment, this saves the python traceback for the current thread.\r\n\r\nFrom my understanding of how python works this is what I expect:\r\nFor python backed Functions, this will always be `.apply()` call for it.\r\nFor cpp backed Functions called from python, this will be the line containing the python operation that uses the C Function.\r\nFor cpp backed Functions called from C, it will be the python call that called into C if we're still on the same thread (for example backward of backward implemented in C will point to the first python backward call). If we changed thread (autograd on a different GPU), then you will get an empty traceback.", "created_at": "2018-05-19T15:46:37Z", "updated_at": "2018-11-23T15:44:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/7677#discussion_r189437604", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7677", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189437604"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7677#discussion_r189437604"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7677"}}, "body_html": "<p>In a multithreaded environment, this saves the python traceback for the current thread.</p>\n<p>From my understanding of how python works this is what I expect:<br>\nFor python backed Functions, this will always be <code>.apply()</code> call for it.<br>\nFor cpp backed Functions called from python, this will be the line containing the python operation that uses the C Function.<br>\nFor cpp backed Functions called from C, it will be the python call that called into C if we're still on the same thread (for example backward of backward implemented in C will point to the first python backward call). If we changed thread (autograd on a different GPU), then you will get an empty traceback.</p>", "body_text": "In a multithreaded environment, this saves the python traceback for the current thread.\nFrom my understanding of how python works this is what I expect:\nFor python backed Functions, this will always be .apply() call for it.\nFor cpp backed Functions called from python, this will be the line containing the python operation that uses the C Function.\nFor cpp backed Functions called from C, it will be the python call that called into C if we're still on the same thread (for example backward of backward implemented in C will point to the first python backward call). If we changed thread (autograd on a different GPU), then you will get an empty traceback.", "in_reply_to_id": 189370465}