{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/406874629", "html_url": "https://github.com/pytorch/pytorch/issues/825#issuecomment-406874629", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/825", "id": 406874629, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjg3NDYyOQ==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-22T15:25:25Z", "updated_at": "2018-07-22T15:25:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Would having something that wraps a kernel in a temporary extension to achieve something similar to CuPy's compile_with_cache be acceptable?<br>\nI'd love to have some ad hoc mechanism that can incorporate the things we are used from ATen extensions (e.g. using int64_t &amp; co as types, std::max, ...), so one could develop a kernel with that and then copypaste it into an aten module.</p>", "body_text": "Would having something that wraps a kernel in a temporary extension to achieve something similar to CuPy's compile_with_cache be acceptable?\nI'd love to have some ad hoc mechanism that can incorporate the things we are used from ATen extensions (e.g. using int64_t & co as types, std::max, ...), so one could develop a kernel with that and then copypaste it into an aten module.", "body": "Would having something that wraps a kernel in a temporary extension to achieve something similar to CuPy's compile_with_cache be acceptable?\r\nI'd love to have some ad hoc mechanism that can incorporate the things we are used from ATen extensions (e.g. using int64_t & co as types, std::max, ...), so one could develop a kernel with that and then copypaste it into an aten module."}