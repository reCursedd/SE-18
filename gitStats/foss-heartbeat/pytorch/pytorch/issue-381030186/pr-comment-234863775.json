{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234863775", "pull_request_review_id": 176597034, "id": 234863775, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDg2Mzc3NQ==", "diff_hunk": "@@ -0,0 +1,428 @@\n+#include \"alias_analysis.h\"\n+\n+#include \"torch/csrc/jit/script/error_report.h\"\n+\n+namespace torch {\n+namespace jit {\n+bool AliasDb::hasWildcard(const Node* n) const {\n+  for (const auto input : n->inputs()) {\n+    if (valueToAlias_.count(input) != 0 &&\n+        valueToAlias_.at(input).isWildcard()) {\n+      return true;\n+    }\n+  }\n+\n+  for (const auto output : n->outputs()) {\n+    if (valueToAlias_.count(output) != 0 &&\n+        valueToAlias_.at(output).isWildcard()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+bool AliasDb::hasWrites(const Node* n) const {\n+  for (const auto input : n->inputs()) {\n+    if (valueToAlias_.count(input) != 0 && valueToAlias_.at(input).isWrite()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+std::unordered_set<Node*> AliasDb::getWritersForNode(const Node* n) const {\n+  // Get all alias sets of this node\n+  // ... check the inputs\n+  std::unordered_set<Symbol> aliasSets;\n+  for (const auto& input : n->inputs()) {\n+    if (valueToAlias_.count(input) != 0) {\n+      for (const auto& aliasSet : valueToAlias_.at(input).sets()) {\n+        aliasSets.insert(aliasSet);\n+      }\n+    }\n+  }\n+\n+  // ... and the outputs\n+  for (const auto& output : n->outputs()) {\n+    if (valueToAlias_.count(output) != 0) {\n+      for (const auto& aliasSet : valueToAlias_.at(output).sets()) {\n+        aliasSets.insert(aliasSet);\n+      }\n+    }\n+  }\n+\n+  // Then get the union of all writers to all those alias sets\n+  std::unordered_set<Node*> writers;\n+  for (const auto& alias : aliasSets) {\n+    if (aliasToWrites_.count(alias) != 0) {\n+      for (const auto writer : aliasToWrites_.at(alias)) {\n+        writers.insert(writer);\n+      }\n+    }\n+  }\n+  return writers;\n+}\n+\n+void AliasDb::dump() const {\n+  std::cout << \"\\n===1. GRAPH===\\n\";\n+  graph_->dump();\n+  std::cout << \"===2. ALIAS SETS===\\n\";\n+  for (const auto& pr : valueToAlias_) {\n+    std::cout << \"%\" << pr.first->uniqueName() << \" : \"\n+              << \"(\";\n+\n+    bool first = true;\n+    for (const auto& alias : pr.second.sets()) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        std::cout << \", \";\n+      }\n+      std::cout << alias.toUnqualString();\n+    }\n+    std::cout << \")\\n\";\n+  }\n+\n+  std::cout << \"\\n===3. WRITES===\\n\";\n+  for (const auto& pr : aliasToWrites_) {\n+    std::cout << \"Alias set \" << pr.first.toUnqualString() << \":\\n\";\n+    for (const auto node : pr.second) {\n+      std::cout << \"  \" << *node;\n+    }\n+    std::cout << \"\\n\";\n+  }\n+}\n+\n+void AliasDb::analyze(std::shared_ptr<Graph> graph) {\n+  // Assign aliases to the graph's inputs, assuming that all inputs of a given\n+  // type may alias to each other.\n+  const auto tensorAlias = getFreshAlias();\n+  // Create a separate alias set for each list type\n+  std::map<TypeKind, Symbol> listTypeAliases;", "path": "torch/csrc/jit/passes/alias_analysis.cpp", "position": 117, "original_position": 101, "commit_id": "b50116902b2ead84375f23e4a9bb629268004c9d", "original_commit_id": "1735b16a8643217ab19832147a7ffaad65b24f3e", "user": {"login": "resistor", "id": 9796, "node_id": "MDQ6VXNlcjk3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/resistor", "html_url": "https://github.com/resistor", "followers_url": "https://api.github.com/users/resistor/followers", "following_url": "https://api.github.com/users/resistor/following{/other_user}", "gists_url": "https://api.github.com/users/resistor/gists{/gist_id}", "starred_url": "https://api.github.com/users/resistor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/resistor/subscriptions", "organizations_url": "https://api.github.com/users/resistor/orgs", "repos_url": "https://api.github.com/users/resistor/repos", "events_url": "https://api.github.com/users/resistor/events{/privacy}", "received_events_url": "https://api.github.com/users/resistor/received_events", "type": "User", "site_admin": false}, "body": "Why are these std::map?", "created_at": "2018-11-20T04:10:36Z", "updated_at": "2018-11-23T15:55:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/14018#discussion_r234863775", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/14018", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234863775"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/14018#discussion_r234863775"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/14018"}}, "body_html": "<p>Why are these std::map?</p>", "body_text": "Why are these std::map?"}