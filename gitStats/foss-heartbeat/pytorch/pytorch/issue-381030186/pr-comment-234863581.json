{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234863581", "pull_request_review_id": 176596816, "id": 234863581, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDg2MzU4MQ==", "diff_hunk": "@@ -0,0 +1,80 @@\n+#pragma once\n+\n+#include <torch/csrc/jit/ir.h>\n+#include <torch/csrc/jit/alias_info.h>\n+\n+namespace torch {\n+namespace jit {\n+\n+/**\n+ * Alias analysis pass.\n+ *\n+ * This pass produces an AliasDb that contains aliasing and mutation\n+ * information about the graph. Callers (right now moveAfterTopologicallyValid)\n+ * can use this information to determine whether mutations to the graph are\n+ * safe, in that they don't reorder/change nodes in a way that affects output.\n+ *\n+ * Every value with a mutable type (Tensors, Lists, Tuples, etc.) will be\n+ * associated with one or more \"alias sets\". If two values share an alias set,\n+ * that means they may alias, implying that a mutation to one value cannot be\n+ * reordered past a use of the other. Only reordering two reads of an alias set\n+ * is considered safe.\n+ *\n+ * There is a special alias set called the \"wildcard set\", which indicates that\n+ * we're not sure what this value may alias. To be conservative, we consider\n+ * the wildcard alias set as potentially aliasing any value.\n+ */\n+class AliasDb {\n+ public:\n+  AliasDb(std::shared_ptr<Graph> graph) : graph_(graph) {\n+    analyze(graph_);\n+  }\n+\n+  // Does `n` contain any wildcard aliases?\n+  bool hasWildcard(const Node* n) const;\n+\n+  // Does `n` write to any alias sets?\n+  bool hasWrites(const Node* n) const;\n+\n+  // Get all nodes that write to any alias set inputed/outputed by `n`\n+  std::unordered_set<Node*> getWritersForNode(const Node* n) const;\n+\n+  // Do any nodes  write to an alias set inputed/outputed by `n`?\n+  bool hasWriters(const Node* n) const {\n+    return getWritersForNode(n).size() != 0;\n+  }\n+\n+  // For debugging: print alias db state to stdout\n+  void dump() const;\n+\n+ private:\n+  bool shouldAnnotate(const Value* v) const;\n+\n+  void analyze(std::shared_ptr<Graph> graph);\n+  void analyze(Block* block);\n+  void analyze(Node* node);\n+\n+  void analyzeIf(Node* node);\n+  void analyzeLoop(Node* node);\n+  void analyzeSubgraph(Node* node);\n+  void analyzeCreator(Node* node);\n+  void analyzeExtractor(Node* node);\n+  void analyzeChunk(Node* node);\n+\n+  Symbol getFreshAlias() const;\n+  void addAlias(const Value* value, AliasInfo alias);\n+  void addAlias(const Value* value, Symbol alias);\n+  void addAlias(const Value* value, const Value* from);\n+  void giveFreshAlias(const Value* value);\n+\n+  std::shared_ptr<Graph> graph_;\n+  mutable Symbol latestSymbol_ = Symbol::fromQualString(\"alias::0\");\n+  std::unordered_map<const Value*, AliasInfo> valueToAlias_;\n+  std::unordered_map<Symbol, std::unordered_set<Node*>> aliasToWrites_;", "path": "torch/csrc/jit/passes/alias_analysis.h", "position": 72, "original_position": 73, "commit_id": "b50116902b2ead84375f23e4a9bb629268004c9d", "original_commit_id": "1735b16a8643217ab19832147a7ffaad65b24f3e", "user": {"login": "resistor", "id": 9796, "node_id": "MDQ6VXNlcjk3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/resistor", "html_url": "https://github.com/resistor", "followers_url": "https://api.github.com/users/resistor/followers", "following_url": "https://api.github.com/users/resistor/following{/other_user}", "gists_url": "https://api.github.com/users/resistor/gists{/gist_id}", "starred_url": "https://api.github.com/users/resistor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/resistor/subscriptions", "organizations_url": "https://api.github.com/users/resistor/orgs", "repos_url": "https://api.github.com/users/resistor/repos", "events_url": "https://api.github.com/users/resistor/events{/privacy}", "received_events_url": "https://api.github.com/users/resistor/received_events", "type": "User", "site_admin": false}, "body": "This seems like an insidiously expensive data structure.", "created_at": "2018-11-20T04:08:48Z", "updated_at": "2018-11-23T15:55:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/14018#discussion_r234863581", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/14018", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234863581"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/14018#discussion_r234863581"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/14018"}}, "body_html": "<p>This seems like an insidiously expensive data structure.</p>", "body_text": "This seems like an insidiously expensive data structure."}