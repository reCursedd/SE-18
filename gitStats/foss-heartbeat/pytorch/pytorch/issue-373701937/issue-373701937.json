{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13084", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13084/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13084/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13084/events", "html_url": "https://github.com/pytorch/pytorch/pull/13084", "id": 373701937, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI1NTcwMTA5", "number": 13084, "title": "Reduce scenarios that plan executor issues SIGABRT", "user": {"login": "heslami", "id": 12736217, "node_id": "MDQ6VXNlcjEyNzM2MjE3", "avatar_url": "https://avatars1.githubusercontent.com/u/12736217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heslami", "html_url": "https://github.com/heslami", "followers_url": "https://api.github.com/users/heslami/followers", "following_url": "https://api.github.com/users/heslami/following{/other_user}", "gists_url": "https://api.github.com/users/heslami/gists{/gist_id}", "starred_url": "https://api.github.com/users/heslami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heslami/subscriptions", "organizations_url": "https://api.github.com/users/heslami/orgs", "repos_url": "https://api.github.com/users/heslami/repos", "events_url": "https://api.github.com/users/heslami/events{/privacy}", "received_events_url": "https://api.github.com/users/heslami/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-24T22:27:11Z", "updated_at": "2018-10-25T05:32:07Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13084", "html_url": "https://github.com/pytorch/pytorch/pull/13084", "diff_url": "https://github.com/pytorch/pytorch/pull/13084.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13084.patch"}, "body_html": "<p>Summary:<br>\nToday, in certain scenarios, <code>plan_executor</code> issues <code>SIGABRT</code> which kills the host executing the plan, not allowing us to handle all exceptions properly.</p>\n<p>An instance of this scenario is when we have parallel substeps as part of an execution step and one of the substeps throws an exception. In this scenario, we intentionally throw the exception out so that it cause a <code>SIGABRT</code>. This was done to avoid any potential substep execution getting stuck.</p>\n<p>While <code>SIGABRT</code> is the safest thing to do to avoid any job stuckness, it is not the best approach when it comes to exception handling. To reduce the cases where <code>SIGABRT</code> is issued, this diff stores the <code>exception_ptr</code> of any exception in a <code>std::thread</code> and does best effort to re-throw the stored exception from the main thread. As part of the \"best-effort\" process, if we can't terminate the threads upon an exception (i.e., there is a potential stuck substep), we issue <code>SIGABRT</code> ourselves.</p>\n<p>Differential Revision: D10843769</p>", "body_text": "Summary:\nToday, in certain scenarios, plan_executor issues SIGABRT which kills the host executing the plan, not allowing us to handle all exceptions properly.\nAn instance of this scenario is when we have parallel substeps as part of an execution step and one of the substeps throws an exception. In this scenario, we intentionally throw the exception out so that it cause a SIGABRT. This was done to avoid any potential substep execution getting stuck.\nWhile SIGABRT is the safest thing to do to avoid any job stuckness, it is not the best approach when it comes to exception handling. To reduce the cases where SIGABRT is issued, this diff stores the exception_ptr of any exception in a std::thread and does best effort to re-throw the stored exception from the main thread. As part of the \"best-effort\" process, if we can't terminate the threads upon an exception (i.e., there is a potential stuck substep), we issue SIGABRT ourselves.\nDifferential Revision: D10843769", "body": "Summary:\nToday, in certain scenarios, `plan_executor` issues `SIGABRT` which kills the host executing the plan, not allowing us to handle all exceptions properly.\n\nAn instance of this scenario is when we have parallel substeps as part of an execution step and one of the substeps throws an exception. In this scenario, we intentionally throw the exception out so that it cause a `SIGABRT`. This was done to avoid any potential substep execution getting stuck.\n\nWhile `SIGABRT` is the safest thing to do to avoid any job stuckness, it is not the best approach when it comes to exception handling. To reduce the cases where `SIGABRT` is issued, this diff stores the `exception_ptr` of any exception in a `std::thread` and does best effort to re-throw the stored exception from the main thread. As part of the \"best-effort\" process, if we can't terminate the threads upon an exception (i.e., there is a potential stuck substep), we issue `SIGABRT` ourselves.\n\nDifferential Revision: D10843769\n"}