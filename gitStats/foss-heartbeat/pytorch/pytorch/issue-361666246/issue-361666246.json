{"url": "https://api.github.com/repos/pytorch/pytorch/issues/11859", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/11859/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/11859/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/11859/events", "html_url": "https://github.com/pytorch/pytorch/pull/11859", "id": 361666246, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE2NTc3ODcw", "number": 11859, "title": "Export and import IR graphs", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-19T09:48:51Z", "updated_at": "2018-09-19T19:55:39Z", "closed_at": "2018-09-19T19:55:39Z", "author_association": "COLLABORATOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/11859", "html_url": "https://github.com/pytorch/pytorch/pull/11859", "diff_url": "https://github.com/pytorch/pytorch/pull/11859.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/11859.patch"}, "body_html": "<p>This PR adds the possibility to export and import PyTorch IR graphs, in a very similar way as done by ModuleEncoder, but using the ONNX protobuf without additional components.</p>\n<p>[Addition]<br>\nThe current situation in master is that it is possible to export an ONNX proto with JIT ops (without type information), but it is not possible to import it back into a graph. The only way to do the roundtrip is through ScriptModule serialization. This PR adds the possibility to export and import the JIT IR (with type information, just like in Module serialization), but independently from modules.<br>\nIn the process of exposing the functionality for importing graphs, I encountered an error trying to do the roundtrip with <code>resnet18</code>: <a href=\"https://gist.github.com/lantiga/0a7578dffbc044ca8fd62ce03808887b\">https://gist.github.com/lantiga/0a7578dffbc044ca8fd62ce03808887b</a><br>\nI then chose to make sure the graph was exported and imported back using the exact same methods used in ScriptModule serialization.</p>\n<p>This opens up the possibility to:</p>\n<ul>\n<li>export the IR (the same IR that would be saved in a module, without converting to ONNX) and inspect it using an ONNX file visualizer like Netron</li>\n<li>export the IR, manipulate it using a standard ONNX library and load it back up for execution in the JIT</li>\n<li>(eventually, down the road) take a proper ONNX model, transform it using an ONNX library to a into JIT IR opset and load it in the JIT</li>\n</ul>\n<p>Example of usage:</p>\n<pre><code>import torch\nimport torch.onnx as onnx\nfrom torchvision import models\n\nresnet18 = models.resnet18()\n\nx = torch.zeros(1, 3, 224, 224)\n\nproto = onnx.export_ir_graph(resnet18, (x, ))\n\nwith open('bar.onnx', 'wb') as f:\n    f.write(proto)\n    # 'bar.onnx' can be opened in e.g. Netron\n\ngraph, initializers = onnx.import_ir_graph(proto_str)\n\nm = torch.jit.ScriptModule()\nm._create_method_from_graph(\"forward\", graph)\nm.forward(*([x]+ initializers))\n\n# this also works\nimport onnx\nonnx_model = onnx.load_from_string(proto)\n</code></pre>\n<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a></p>", "body_text": "This PR adds the possibility to export and import PyTorch IR graphs, in a very similar way as done by ModuleEncoder, but using the ONNX protobuf without additional components.\n[Addition]\nThe current situation in master is that it is possible to export an ONNX proto with JIT ops (without type information), but it is not possible to import it back into a graph. The only way to do the roundtrip is through ScriptModule serialization. This PR adds the possibility to export and import the JIT IR (with type information, just like in Module serialization), but independently from modules.\nIn the process of exposing the functionality for importing graphs, I encountered an error trying to do the roundtrip with resnet18: https://gist.github.com/lantiga/0a7578dffbc044ca8fd62ce03808887b\nI then chose to make sure the graph was exported and imported back using the exact same methods used in ScriptModule serialization.\nThis opens up the possibility to:\n\nexport the IR (the same IR that would be saved in a module, without converting to ONNX) and inspect it using an ONNX file visualizer like Netron\nexport the IR, manipulate it using a standard ONNX library and load it back up for execution in the JIT\n(eventually, down the road) take a proper ONNX model, transform it using an ONNX library to a into JIT IR opset and load it in the JIT\n\nExample of usage:\nimport torch\nimport torch.onnx as onnx\nfrom torchvision import models\n\nresnet18 = models.resnet18()\n\nx = torch.zeros(1, 3, 224, 224)\n\nproto = onnx.export_ir_graph(resnet18, (x, ))\n\nwith open('bar.onnx', 'wb') as f:\n    f.write(proto)\n    # 'bar.onnx' can be opened in e.g. Netron\n\ngraph, initializers = onnx.import_ir_graph(proto_str)\n\nm = torch.jit.ScriptModule()\nm._create_method_from_graph(\"forward\", graph)\nm.forward(*([x]+ initializers))\n\n# this also works\nimport onnx\nonnx_model = onnx.load_from_string(proto)\n\n/cc @apaszke", "body": "This PR adds the possibility to export and import PyTorch IR graphs, in a very similar way as done by ModuleEncoder, but using the ONNX protobuf without additional components.\r\n\r\n[Addition]\r\nThe current situation in master is that it is possible to export an ONNX proto with JIT ops (without type information), but it is not possible to import it back into a graph. The only way to do the roundtrip is through ScriptModule serialization. This PR adds the possibility to export and import the JIT IR (with type information, just like in Module serialization), but independently from modules.\r\nIn the process of exposing the functionality for importing graphs, I encountered an error trying to do the roundtrip with `resnet18`: https://gist.github.com/lantiga/0a7578dffbc044ca8fd62ce03808887b\r\nI then chose to make sure the graph was exported and imported back using the exact same methods used in ScriptModule serialization.\r\n\r\nThis opens up the possibility to:\r\n- export the IR (the same IR that would be saved in a module, without converting to ONNX) and inspect it using an ONNX file visualizer like Netron\r\n- export the IR, manipulate it using a standard ONNX library and load it back up for execution in the JIT\r\n- (eventually, down the road) take a proper ONNX model, transform it using an ONNX library to a into JIT IR opset and load it in the JIT\r\n\r\nExample of usage:\r\n\r\n```\r\nimport torch\r\nimport torch.onnx as onnx\r\nfrom torchvision import models\r\n\r\nresnet18 = models.resnet18()\r\n\r\nx = torch.zeros(1, 3, 224, 224)\r\n\r\nproto = onnx.export_ir_graph(resnet18, (x, ))\r\n\r\nwith open('bar.onnx', 'wb') as f:\r\n    f.write(proto)\r\n    # 'bar.onnx' can be opened in e.g. Netron\r\n\r\ngraph, initializers = onnx.import_ir_graph(proto_str)\r\n\r\nm = torch.jit.ScriptModule()\r\nm._create_method_from_graph(\"forward\", graph)\r\nm.forward(*([x]+ initializers))\r\n\r\n# this also works\r\nimport onnx\r\nonnx_model = onnx.load_from_string(proto)\r\n```\r\n\r\n/cc @apaszke "}