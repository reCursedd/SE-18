{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3855", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3855/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3855/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3855/events", "html_url": "https://github.com/pytorch/pytorch/pull/3855", "id": 276463595, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU0NDQwNTI3", "number": 3855, "title": "Remove as much of Python from JIT hot path as possible", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-23T19:58:27Z", "updated_at": "2018-11-23T15:36:51Z", "closed_at": "2017-11-27T10:42:48Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3855", "html_url": "https://github.com/pytorch/pytorch/pull/3855", "diff_url": "https://github.com/pytorch/pytorch/pull/3855.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3855.patch"}, "body_html": "<p>This patch reduces the amount of Python code we have to hit when actually calling JIT-compiled modules or functions to 0, bringing some nice speedups.</p>\n<p>Time for single application of a JIT-fused LSTM cell in a loop for 512 steps (forward only - with autograd enabled):</p>\n<ul>\n<li>before - 35us</li>\n<li>after - 26us</li>\n<li>cuDNN (nn.LSTM) - 28us?? The possible reasons for this might be that the JIT cell was specialized to never run backward, so it can save a bunch of memory bandwidth, or I did sth wrong in my benchmarking script). However, cuDNN is the only one of these which is not CPU-bound (only 15us on CPU).</li>\n</ul>", "body_text": "This patch reduces the amount of Python code we have to hit when actually calling JIT-compiled modules or functions to 0, bringing some nice speedups.\nTime for single application of a JIT-fused LSTM cell in a loop for 512 steps (forward only - with autograd enabled):\n\nbefore - 35us\nafter - 26us\ncuDNN (nn.LSTM) - 28us?? The possible reasons for this might be that the JIT cell was specialized to never run backward, so it can save a bunch of memory bandwidth, or I did sth wrong in my benchmarking script). However, cuDNN is the only one of these which is not CPU-bound (only 15us on CPU).", "body": "This patch reduces the amount of Python code we have to hit when actually calling JIT-compiled modules or functions to 0, bringing some nice speedups.\r\n\r\nTime for single application of a JIT-fused LSTM cell in a loop for 512 steps (forward only - with autograd enabled):\r\n- before - 35us\r\n- after - 26us\r\n- cuDNN (nn.LSTM) - 28us?? The possible reasons for this might be that the JIT cell was specialized to never run backward, so it can save a bunch of memory bandwidth, or I did sth wrong in my benchmarking script). However, cuDNN is the only one of these which is not CPU-bound (only 15us on CPU)."}