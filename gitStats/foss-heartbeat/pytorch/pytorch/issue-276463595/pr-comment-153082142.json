{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153082142", "pull_request_review_id": 79037915, "id": 153082142, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MzA4MjE0Mg==", "diff_hunk": "@@ -155,9 +130,43 @@ def __call__(cls, *args, **kwargs):\n             # user passed in), this problem goes away, because the class\n             # __init__ is a part of is indeed Foo.\n \n+            old_init = arg.__init__\n+            # Python 2 has a concept of unbound methods, which doesn't play well\n+            # with what we want to do here. Therefore, unpack the method into a\n+            # regular function. Python 3 already returns a plain function, so\n+            # nothing has to be done.\n+            if sys.version_info[0] == 2:\n+                old_init = old_init.im_func\n+\n+            def __init__(self, *args, **kwargs):\n+                torch._C.CompiledFunction.__init__(self,\n+                                                   nderivs, optimize, enabled,\n+                                                   self.forward,\n+                                                   lambda: list(self.parameters()),\n+                                                   arg.__name__)\n+                try:\n+                    old_init(self, *args, **kwargs)\n+                except TypeError as e:\n+                    # If this fails here, the user probably didn't use this as a class decorator\n+                    if \"super\" in str(e):\n+                        raise_from(TypeError(\"torch.jit.compile must be used as a class decorator; \"\n+                                             \"using it on an already defined class is not valid.\"\n+                                             \"\\n\\nOriginal error: {}\".format(str(e))), e)\n+                    else:\n+                        raise\n+                # NOTE: This can't be done in CompiledFunction constructor,\n+                # because self.parameters() isn't well defined by then\n+                # (Module constructor hasn't run yet).\n+                self.update_captured_vars()", "path": "torch/jit/__init__.py", "position": null, "original_position": 74, "commit_id": "77e4a4b39eda7f9e35007fce7744919037ee0c13", "original_commit_id": "93031a18593c0fdbef69b812f31c38bbb6f48b62", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Is it possible to make this just `set_captured_vars()`? The lambda callback plus this updater makes it tricky to understand what is happening. `self.set_captured_vars(list(self.parameters())` seems simpler.", "created_at": "2017-11-26T21:19:36Z", "updated_at": "2018-11-23T15:36:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/3855#discussion_r153082142", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3855", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/153082142"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3855#discussion_r153082142"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3855"}}, "body_html": "<p>Is it possible to make this just <code>set_captured_vars()</code>? The lambda callback plus this updater makes it tricky to understand what is happening. <code>self.set_captured_vars(list(self.parameters())</code> seems simpler.</p>", "body_text": "Is it possible to make this just set_captured_vars()? The lambda callback plus this updater makes it tricky to understand what is happening. self.set_captured_vars(list(self.parameters()) seems simpler."}