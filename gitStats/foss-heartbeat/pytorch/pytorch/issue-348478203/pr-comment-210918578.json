{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210918578", "pull_request_review_id": 147009480, "id": 210918578, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDkxODU3OA==", "diff_hunk": "@@ -258,11 +305,58 @@ struct GraphFuser {\n     at::optional<int> consumer_device = getDevice(consumer);\n     Node *real_consumer = consumer->kind() == aten::cat ? consumer->namedInput(attr::tensors)->node() : consumer;\n     return isFusable(producer->node()) &&\n+      haveSameMapSize(consumer, producer->node()) &&\n       allUsersAreThisConsumerOrOccurAfterIt(real_consumer, producer) &&\n       consumer_device && consumer_device == getDevice(producer->node()) &&\n       (*consumer_device != kCPUDevice || sharedFusionCompiler().canCompileOnCPU());\n   }\n \n+  value_list tensorInputs(Node * node) {\n+    std::vector<Value*> result;\n+    result.reserve(node->inputs().size());\n+    for (auto * v : node->inputs()) {\n+      if (v->type()->isSubtypeOf(DynamicType::get())) {\n+        result.push_back(v);\n+      }\n+    }\n+    return result;\n+  }\n+\n+  void maybeInsertExplicitExpands(Node * node) {\n+    if (!isSimpleMap(node)) {\n+      return;\n+    }\n+    WithInsertPoint guard(node);\n+\n+    auto map_size = mapSize(node).value();\n+    auto * graph = node->owningGraph();\n+\n+    auto tensor_inputs = tensorInputs(node);\n+    for (auto * producer: tensor_inputs) {\n+      auto type = producer->type()->cast<TensorType>();\n+      JIT_ASSERT(type);\n+      if (std::equal(map_size.begin(), map_size.end(), type->sizes().begin())) {\n+        continue;\n+      }\n+      // Insert explicit expand node when input doesn't have correct size.\n+      //\n+      // XXX: This hardcodes the \"map size\" for this FusionGroup.\n+      // If we want to make the graph fuser more general in the future,\n+      // we could use aten::broadcast_tensors or add a primitive op that broadcasts.\n+      auto * expand = graph->insert(\n+          aten::expand,\n+          {producer, graph->insertConstant(IValue(map_size)), graph->insertConstant(0)})->node();", "path": "torch/csrc/jit/passes/graph_fuser.cpp", "position": 135, "original_position": 141, "commit_id": "61cc7d664a317f213d27876f6243596d70582869", "original_commit_id": "943fcf2cfbdaef2edacbe1a441a05c90e72a0c48", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "This should probably use `SymbolicVariable`.", "created_at": "2018-08-17T14:00:40Z", "updated_at": "2018-11-23T15:49:35Z", "html_url": "https://github.com/pytorch/pytorch/pull/10325#discussion_r210918578", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10325", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210918578"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10325#discussion_r210918578"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10325"}}, "body_html": "<p>This should probably use <code>SymbolicVariable</code>.</p>", "body_text": "This should probably use SymbolicVariable."}