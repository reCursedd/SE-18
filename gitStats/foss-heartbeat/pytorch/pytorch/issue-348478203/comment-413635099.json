{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/413635099", "html_url": "https://github.com/pytorch/pytorch/pull/10325#issuecomment-413635099", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10325", "id": 413635099, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzYzNTA5OQ==", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-16T18:07:34Z", "updated_at": "2018-08-16T18:07:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I've made the following changes based on <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a>'s comments:</p>\n<ul>\n<li>isFusable(Node) doesn't check input sizes anymore. A simple mappable<br>\noperation with correct input/output types is fusible.</li>\n<li>shouldFuse(consumer, producer) checks consumer and producer for<br>\nmatching map_size. If the sizes match among other checks,, then fuse(consumer, producer) is called.</li>\n<li>fuse(consumer, producer) emits expand nodes as necessary to fuse producer and consumer.</li>\n<li>tryMoveChunk(consumer, chunk) also emits expand nodes as necessary because<br>\nisFusable(Node) doesn't check input sizes anymore. A chunk should only<br>\nbe moved if the move results in a node that can be fused with<br>\nconsumer; this is why tryMoveChunk needs to emit expand nodes.</li>\n</ul>\n<p>This should be more robust than the previous approach, but I'm not sure if the expand-generation logic is still too intrusive or not.</p>\n<p>In addition, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>'s upcoming refactor of the graph fuser probably will fix this exact problem, so I am also fine with punting on this PR until the refactor and seeing how the state of things are then.</p>", "body_text": "I've made the following changes based on @zdevito's comments:\n\nisFusable(Node) doesn't check input sizes anymore. A simple mappable\noperation with correct input/output types is fusible.\nshouldFuse(consumer, producer) checks consumer and producer for\nmatching map_size. If the sizes match among other checks,, then fuse(consumer, producer) is called.\nfuse(consumer, producer) emits expand nodes as necessary to fuse producer and consumer.\ntryMoveChunk(consumer, chunk) also emits expand nodes as necessary because\nisFusable(Node) doesn't check input sizes anymore. A chunk should only\nbe moved if the move results in a node that can be fused with\nconsumer; this is why tryMoveChunk needs to emit expand nodes.\n\nThis should be more robust than the previous approach, but I'm not sure if the expand-generation logic is still too intrusive or not.\nIn addition, @apaszke's upcoming refactor of the graph fuser probably will fix this exact problem, so I am also fine with punting on this PR until the refactor and seeing how the state of things are then.", "body": "I've made the following changes based on @zdevito's comments:\r\n\r\n- isFusable(Node) doesn't check input sizes anymore. A simple mappable\r\n  operation with correct input/output types is fusible.\r\n- shouldFuse(consumer, producer) checks consumer and producer for\r\n  matching map_size. If the sizes match among other checks,, then fuse(consumer, producer) is called.\r\n- fuse(consumer, producer) emits expand nodes as necessary to fuse producer and consumer.\r\n- tryMoveChunk(consumer, chunk) also emits expand nodes as necessary because\r\n  isFusable(Node) doesn't check input sizes anymore. A chunk should only\r\n  be moved if the move results in a node that can be fused with\r\n  consumer; this is why tryMoveChunk needs to emit expand nodes.\r\n\r\nThis should be more robust than the previous approach, but I'm not sure if the expand-generation logic is still too intrusive or not.\r\n\r\nIn addition, @apaszke's upcoming refactor of the graph fuser probably will fix this exact problem, so I am also fine with punting on this PR until the refactor and seeing how the state of things are then."}