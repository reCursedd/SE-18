{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/332651642", "html_url": "https://github.com/pytorch/pytorch/issues/2740#issuecomment-332651642", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2740", "id": 332651642, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY1MTY0Mg==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-27T20:52:29Z", "updated_at": "2017-09-27T20:52:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For the cpu side, there are 2^32 (approx 4.3e9) numbers that can be produced with equal probability by a call to rand() (well, TH calls its own generator, but still it is supposed to produce numbers between 0 and 2^32-1), only a single one of them (0) maps to 0. You are producing 1e8 numbers, so it is possible that there's not a single 0 in your sample. cuda side never produces 0-s (it is not supposed to).<br>\nUsing your fix for cuda will introduce subtle distortions, but whatever, the definition of what it means to generate uniformly distributed floating point number is not precisely set anyway (for a fun read, see <a href=\"https://lemire.me/blog/2017/02/28/how-many-floating-point-numbers-are-in-the-interval-01/\" rel=\"nofollow\">https://lemire.me/blog/2017/02/28/how-many-floating-point-numbers-are-in-the-interval-01/</a>). There still won't be any 0-s for cuda-generated doubles because of curand bug.</p>", "body_text": "For the cpu side, there are 2^32 (approx 4.3e9) numbers that can be produced with equal probability by a call to rand() (well, TH calls its own generator, but still it is supposed to produce numbers between 0 and 2^32-1), only a single one of them (0) maps to 0. You are producing 1e8 numbers, so it is possible that there's not a single 0 in your sample. cuda side never produces 0-s (it is not supposed to).\nUsing your fix for cuda will introduce subtle distortions, but whatever, the definition of what it means to generate uniformly distributed floating point number is not precisely set anyway (for a fun read, see https://lemire.me/blog/2017/02/28/how-many-floating-point-numbers-are-in-the-interval-01/). There still won't be any 0-s for cuda-generated doubles because of curand bug.", "body": "For the cpu side, there are 2^32 (approx 4.3e9) numbers that can be produced with equal probability by a call to rand() (well, TH calls its own generator, but still it is supposed to produce numbers between 0 and 2^32-1), only a single one of them (0) maps to 0. You are producing 1e8 numbers, so it is possible that there's not a single 0 in your sample. cuda side never produces 0-s (it is not supposed to).\r\nUsing your fix for cuda will introduce subtle distortions, but whatever, the definition of what it means to generate uniformly distributed floating point number is not precisely set anyway (for a fun read, see https://lemire.me/blog/2017/02/28/how-many-floating-point-numbers-are-in-the-interval-01/). There still won't be any 0-s for cuda-generated doubles because of curand bug.  "}