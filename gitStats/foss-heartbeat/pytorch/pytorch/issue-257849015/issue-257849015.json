{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2740", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2740/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2740/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2740/events", "html_url": "https://github.com/pytorch/pytorch/issues/2740", "id": 257849015, "node_id": "MDU6SXNzdWUyNTc4NDkwMTU=", "number": 2740, "title": "tensor.rand() and uniform_() returns numbers from [0,1] (right-hand inclusive)", "user": {"login": "janchorowski", "id": 1454551, "node_id": "MDQ6VXNlcjE0NTQ1NTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1454551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janchorowski", "html_url": "https://github.com/janchorowski", "followers_url": "https://api.github.com/users/janchorowski/followers", "following_url": "https://api.github.com/users/janchorowski/following{/other_user}", "gists_url": "https://api.github.com/users/janchorowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/janchorowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janchorowski/subscriptions", "organizations_url": "https://api.github.com/users/janchorowski/orgs", "repos_url": "https://api.github.com/users/janchorowski/repos", "events_url": "https://api.github.com/users/janchorowski/events{/privacy}", "received_events_url": "https://api.github.com/users/janchorowski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 742585577, "node_id": "MDU6TGFiZWw3NDI1ODU1Nzc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/0.3", "name": "0.3", "color": "d1c41b", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pytorch/pytorch/milestones/3", "html_url": "https://github.com/pytorch/pytorch/milestone/3", "labels_url": "https://api.github.com/repos/pytorch/pytorch/milestones/3/labels", "id": 3085371, "node_id": "MDk6TWlsZXN0b25lMzA4NTM3MQ==", "number": 3, "title": "0.3", "description": "", "creator": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "open_issues": 2, "closed_issues": 17, "state": "closed", "created_at": "2018-02-03T02:53:12Z", "updated_at": "2018-08-06T21:16:05Z", "due_on": "2017-12-01T08:00:00Z", "closed_at": "2018-08-06T21:16:05Z"}, "comments": 11, "created_at": "2017-09-14T20:37:53Z", "updated_at": "2018-08-24T17:20:00Z", "closed_at": "2017-11-12T00:05:25Z", "author_association": "NONE", "body_html": "<p>It is customary that the uniform random generator returns numbers from a range that includes the lower bound, but excludes the upper bound. This is the behavior of e.g. numpy (<a href=\"https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.random.rand.html#numpy-random-rand\" rel=\"nofollow\">https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.random.rand.html#numpy-random-rand</a>). This is also stated in the torch.rand documentation (<a href=\"http://pytorch.org/docs/master/torch.html#torch.rand\" rel=\"nofollow\">http://pytorch.org/docs/master/torch.html#torch.rand</a>). However, using either the <code>torch.rand()</code> generator or the in-place <code>uniform_()</code> generator ones are sampled quite often:</p>\n<pre><code>&gt;&gt;&gt; torch.__version__\n'0.2.0_4'\n&gt;&gt;&gt; torch.rand(100000000).max()\n1.0\n&gt;&gt;&gt; torch.FloatTensor(100000000).uniform_().max()\n1.0\n&gt;&gt;&gt; torch.cuda.FloatTensor(100000000).uniform_().max()\n1.0\n</code></pre>\n<p>This is useful e..g for generation of numbers that exclude the upper bound is useful e.g. to generate uniformly distributed random integers. With the current generator one has to be careful to handle the incorrect upper bound being sampled.</p>", "body_text": "It is customary that the uniform random generator returns numbers from a range that includes the lower bound, but excludes the upper bound. This is the behavior of e.g. numpy (https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.random.rand.html#numpy-random-rand). This is also stated in the torch.rand documentation (http://pytorch.org/docs/master/torch.html#torch.rand). However, using either the torch.rand() generator or the in-place uniform_() generator ones are sampled quite often:\n>>> torch.__version__\n'0.2.0_4'\n>>> torch.rand(100000000).max()\n1.0\n>>> torch.FloatTensor(100000000).uniform_().max()\n1.0\n>>> torch.cuda.FloatTensor(100000000).uniform_().max()\n1.0\n\nThis is useful e..g for generation of numbers that exclude the upper bound is useful e.g. to generate uniformly distributed random integers. With the current generator one has to be careful to handle the incorrect upper bound being sampled.", "body": "It is customary that the uniform random generator returns numbers from a range that includes the lower bound, but excludes the upper bound. This is the behavior of e.g. numpy (https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.random.rand.html#numpy-random-rand). This is also stated in the torch.rand documentation (http://pytorch.org/docs/master/torch.html#torch.rand). However, using either the `torch.rand()` generator or the in-place `uniform_()` generator ones are sampled quite often:\r\n```\r\n>>> torch.__version__\r\n'0.2.0_4'\r\n>>> torch.rand(100000000).max()\r\n1.0\r\n>>> torch.FloatTensor(100000000).uniform_().max()\r\n1.0\r\n>>> torch.cuda.FloatTensor(100000000).uniform_().max()\r\n1.0\r\n```\r\n\r\nThis is useful e..g for generation of numbers that exclude the upper bound is useful e.g. to generate uniformly distributed random integers. With the current generator one has to be careful to handle the incorrect upper bound being sampled."}