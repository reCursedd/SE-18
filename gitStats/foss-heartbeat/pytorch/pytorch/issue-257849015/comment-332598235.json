{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/332598235", "html_url": "https://github.com/pytorch/pytorch/issues/2740#issuecomment-332598235", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2740", "id": 332598235, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjU5ODIzNQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-27T17:35:54Z", "updated_at": "2017-09-27T17:35:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I thought the bug is in backend functions, but it doesn't seem to be. After some quick investigation, I found something interesting: when tested in the above fashion</p>\n<ol>\n<li>CPU <code>THTensor_(randn)</code> never returns 1 on C side.</li>\n<li>CUDA double version of uniform never returns either 0 or 1.</li>\n<li>CUDA float version of uniform isn't fixed by simply changing <code>x</code> to <code>(1-x)</code> in <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/lib/THC/THCTensorRandom.cu#L133-L134\">https://github.com/pytorch/pytorch/blob/master/torch/lib/THC/THCTensorRandom.cu#L133-L134</a> .</li>\n</ol>\n<p>So where did things go wrong? Is it when transitioning values back from C/CUDA to Python?</p>", "body_text": "I thought the bug is in backend functions, but it doesn't seem to be. After some quick investigation, I found something interesting: when tested in the above fashion\n\nCPU THTensor_(randn) never returns 1 on C side.\nCUDA double version of uniform never returns either 0 or 1.\nCUDA float version of uniform isn't fixed by simply changing x to (1-x) in https://github.com/pytorch/pytorch/blob/master/torch/lib/THC/THCTensorRandom.cu#L133-L134 .\n\nSo where did things go wrong? Is it when transitioning values back from C/CUDA to Python?", "body": "I thought the bug is in backend functions, but it doesn't seem to be. After some quick investigation, I found something interesting: when tested in the above fashion\r\n1. CPU `THTensor_(randn)` never returns 1 on C side.\r\n2. CUDA double version of uniform never returns either 0 or 1.\r\n3. CUDA float version of uniform isn't fixed by simply changing `x` to `(1-x)` in https://github.com/pytorch/pytorch/blob/master/torch/lib/THC/THCTensorRandom.cu#L133-L134 .\r\n\r\nSo where did things go wrong? Is it when transitioning values back from C/CUDA to Python?"}