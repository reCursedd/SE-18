{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3264", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3264/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3264/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3264/events", "html_url": "https://github.com/pytorch/pytorch/issues/3264", "id": 268098437, "node_id": "MDU6SXNzdWUyNjgwOTg0Mzc=", "number": 3264, "title": "F.normalize NaN gradient", "user": {"login": "elbaro", "id": 1851290, "node_id": "MDQ6VXNlcjE4NTEyOTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1851290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elbaro", "html_url": "https://github.com/elbaro", "followers_url": "https://api.github.com/users/elbaro/followers", "following_url": "https://api.github.com/users/elbaro/following{/other_user}", "gists_url": "https://api.github.com/users/elbaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/elbaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elbaro/subscriptions", "organizations_url": "https://api.github.com/users/elbaro/orgs", "repos_url": "https://api.github.com/users/elbaro/repos", "events_url": "https://api.github.com/users/elbaro/events{/privacy}", "received_events_url": "https://api.github.com/users/elbaro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-24T16:23:21Z", "updated_at": "2017-11-06T22:11:44Z", "closed_at": "2017-11-06T22:11:44Z", "author_association": "NONE", "body_html": "<p>0.2.0+dc6510f</p>\n<p><code>F.normalize(p=1)</code> gives NaN gradients.<br>\nManually dividing by the sum works.</p>\n<h3>Code</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd.variable <span class=\"pl-k\">import</span> Variable\n<span class=\"pl-k\">import</span> torch.nn.functional <span class=\"pl-k\">as</span> F\n\na <span class=\"pl-k\">=</span> Variable(torch.FloatTensor([[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0.1996</span>]]),<span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> b = F.normalize(a, p=1, dim=1)  # nan nan nan nan 0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> b = a / a.sum().clamp(min=1e-12)  # 0 0 0 0 0</span>\nb.sum().backward()\n\n<span class=\"pl-c1\">print</span>(a.grad.data)</pre></div>\n<h3>Output</h3>\n<pre><code>nan nan nan nan 0\n</code></pre>\n<p>or</p>\n<pre><code>0 0 0 0 0\n</code></pre>", "body_text": "0.2.0+dc6510f\nF.normalize(p=1) gives NaN gradients.\nManually dividing by the sum works.\nCode\nimport torch\nfrom torch.autograd.variable import Variable\nimport torch.nn.functional as F\n\na = Variable(torch.FloatTensor([[0,0,0,0,0.1996]]),requires_grad=True)\n# b = F.normalize(a, p=1, dim=1)  # nan nan nan nan 0\n# b = a / a.sum().clamp(min=1e-12)  # 0 0 0 0 0\nb.sum().backward()\n\nprint(a.grad.data)\nOutput\nnan nan nan nan 0\n\nor\n0 0 0 0 0", "body": "0.2.0+dc6510f\r\n\r\n`F.normalize(p=1)` gives NaN gradients.\r\nManually dividing by the sum works.\r\n\r\n### Code\r\n\r\n```py\r\nimport torch\r\nfrom torch.autograd.variable import Variable\r\nimport torch.nn.functional as F\r\n\r\na = Variable(torch.FloatTensor([[0,0,0,0,0.1996]]),requires_grad=True)\r\n# b = F.normalize(a, p=1, dim=1)  # nan nan nan nan 0\r\n# b = a / a.sum().clamp(min=1e-12)  # 0 0 0 0 0\r\nb.sum().backward()\r\n\r\nprint(a.grad.data)\r\n```\r\n### Output\r\n```\r\nnan nan nan nan 0\r\n```\r\nor\r\n```\r\n0 0 0 0 0\r\n```"}