{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13960", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13960/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13960/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13960/events", "html_url": "https://github.com/pytorch/pytorch/pull/13960", "id": 380572603, "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwNzM4MjIw", "number": 13960, "title": "consistent rounding", "user": {"login": "jspark1105", "id": 5545022, "node_id": "MDQ6VXNlcjU1NDUwMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5545022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jspark1105", "html_url": "https://github.com/jspark1105", "followers_url": "https://api.github.com/users/jspark1105/followers", "following_url": "https://api.github.com/users/jspark1105/following{/other_user}", "gists_url": "https://api.github.com/users/jspark1105/gists{/gist_id}", "starred_url": "https://api.github.com/users/jspark1105/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jspark1105/subscriptions", "organizations_url": "https://api.github.com/users/jspark1105/orgs", "repos_url": "https://api.github.com/users/jspark1105/repos", "events_url": "https://api.github.com/users/jspark1105/events{/privacy}", "received_events_url": "https://api.github.com/users/jspark1105/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-14T07:41:53Z", "updated_at": "2018-11-14T18:23:28Z", "closed_at": "2018-11-14T18:23:28Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13960", "html_url": "https://github.com/pytorch/pytorch/pull/13960", "diff_url": "https://github.com/pytorch/pytorch/pull/13960.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13960.patch"}, "body_html": "<p>Summary:<br>\nThe vectorized code was rounding to even in halfway cases with _mm256_round_ps + (_MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC) (see more details in <a href=\"https://software.intel.com/en-us/node/523819\" rel=\"nofollow\">https://software.intel.com/en-us/node/523819</a>), but we were still using std::round in a couple of places which does rounding away from zero in halfway cases.<br>\nWith this diff, we use std::nearbyint in all scalar code (except a few cases where we don't care exact rounding mode and uses rint which is the fastest in general) to be more consistent. nearbyint is the same as what the vectorized code does only when the current rounding mode is FE_TONEAREST but in practice this is OK because we almost always use the default rounding mode FE_TONEAREST.</p>\n<p>This is inspired by Marat's diff for mobile quantization.</p>\n<p>Reviewed By: dskhudia</p>\n<p>Differential Revision: D13017719</p>", "body_text": "Summary:\nThe vectorized code was rounding to even in halfway cases with _mm256_round_ps + (_MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC) (see more details in https://software.intel.com/en-us/node/523819), but we were still using std::round in a couple of places which does rounding away from zero in halfway cases.\nWith this diff, we use std::nearbyint in all scalar code (except a few cases where we don't care exact rounding mode and uses rint which is the fastest in general) to be more consistent. nearbyint is the same as what the vectorized code does only when the current rounding mode is FE_TONEAREST but in practice this is OK because we almost always use the default rounding mode FE_TONEAREST.\nThis is inspired by Marat's diff for mobile quantization.\nReviewed By: dskhudia\nDifferential Revision: D13017719", "body": "Summary:\nThe vectorized code was rounding to even in halfway cases with _mm256_round_ps + (_MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC) (see more details in https://software.intel.com/en-us/node/523819), but we were still using std::round in a couple of places which does rounding away from zero in halfway cases.\nWith this diff, we use std::nearbyint in all scalar code (except a few cases where we don't care exact rounding mode and uses rint which is the fastest in general) to be more consistent. nearbyint is the same as what the vectorized code does only when the current rounding mode is FE_TONEAREST but in practice this is OK because we almost always use the default rounding mode FE_TONEAREST.\n\nThis is inspired by Marat's diff for mobile quantization.\n\nReviewed By: dskhudia\n\nDifferential Revision: D13017719\n"}