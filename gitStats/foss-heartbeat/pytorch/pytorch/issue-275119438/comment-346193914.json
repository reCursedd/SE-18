{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/346193914", "html_url": "https://github.com/pytorch/pytorch/issues/3778#issuecomment-346193914", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3778", "id": 346193914, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjE5MzkxNA==", "user": {"login": "diefimov", "id": 4885361, "node_id": "MDQ6VXNlcjQ4ODUzNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4885361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diefimov", "html_url": "https://github.com/diefimov", "followers_url": "https://api.github.com/users/diefimov/followers", "following_url": "https://api.github.com/users/diefimov/following{/other_user}", "gists_url": "https://api.github.com/users/diefimov/gists{/gist_id}", "starred_url": "https://api.github.com/users/diefimov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diefimov/subscriptions", "organizations_url": "https://api.github.com/users/diefimov/orgs", "repos_url": "https://api.github.com/users/diefimov/repos", "events_url": "https://api.github.com/users/diefimov/events{/privacy}", "received_events_url": "https://api.github.com/users/diefimov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-21T23:23:27Z", "updated_at": "2017-11-21T23:28:37Z", "author_association": "NONE", "body_html": "<p>Modification of this code <a href=\"https://github.com/caffe2/caffe2/blob/master/caffe2/python/net_drawer.py\">net_drawer.py</a> works pretty well for me:</p>\n<pre><code>class Net(nn.Module):\n    def __init__(self, input_shape):\n        super(Net, self).__init__()\n        self.linear1 = nn.Linear(input_shape, 100)\n        self.dropout1 = nn.Dropout(p=0.1)\n        self.relu1 = nn.ReLU()\n        self.linear2 = nn.Linear(100, 200)\n        self.dropout2 = nn.Dropout(p=0.1)\n        self.relu2 = nn.ReLU()\n        # add input_shape because we add additional connection to the input layer\n        self.linear3 = nn.Linear(200+input_shape, 1)\n        self.sigmoid = nn.Sigmoid()\n    \n    def forward(self, x):\n        output = self.linear1(x)\n        output = self.dropout1(output)\n        output = self.relu1(output)\n        output = self.linear2(output)\n        output = self.dropout2(output)\n        # create additional connection with the input layer\n        output = torch.cat((x, output), dim=1)\n        output = self.relu2(output)\n        output = self.linear3(output)\n        output = self.sigmoid(output)  \n        return output\n\nnet = Net(28)\nnet.cuda()\ninputs = Variable(torch.FloatTensor(128,28)).cuda()\noutputs = net(inputs)\ntorch.onnx.export(net, inputs, \"pytorch_model.proto\", verbose=True)\n\nmodel = ModelProto()\nwith open(\"pytorch_model.proto\", 'rb') as fid:\n    content = fid.read()\n    model.ParseFromString(content)\npydot_graph = GetPydotGraph(\n    model.graph,\n    name=model.graph.name,\n    rankdir=\"LR\",\n    node_producer=GetOpNodeProducer(\n        embed_docstring=False,\n        **OP_STYLE\n    ),\n)\npydot_graph.write_dot(\"pytorch_model.dot\")\n\n</code></pre>\n<p>The visualization is attached.<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/4885361/33102067-f09c3734-cf12-11e7-80a3-701665f99349.png\"><img src=\"https://user-images.githubusercontent.com/4885361/33102067-f09c3734-cf12-11e7-80a3-701665f99349.png\" alt=\"pytorch_model\" style=\"max-width:100%;\"></a></p>", "body_text": "Modification of this code net_drawer.py works pretty well for me:\nclass Net(nn.Module):\n    def __init__(self, input_shape):\n        super(Net, self).__init__()\n        self.linear1 = nn.Linear(input_shape, 100)\n        self.dropout1 = nn.Dropout(p=0.1)\n        self.relu1 = nn.ReLU()\n        self.linear2 = nn.Linear(100, 200)\n        self.dropout2 = nn.Dropout(p=0.1)\n        self.relu2 = nn.ReLU()\n        # add input_shape because we add additional connection to the input layer\n        self.linear3 = nn.Linear(200+input_shape, 1)\n        self.sigmoid = nn.Sigmoid()\n    \n    def forward(self, x):\n        output = self.linear1(x)\n        output = self.dropout1(output)\n        output = self.relu1(output)\n        output = self.linear2(output)\n        output = self.dropout2(output)\n        # create additional connection with the input layer\n        output = torch.cat((x, output), dim=1)\n        output = self.relu2(output)\n        output = self.linear3(output)\n        output = self.sigmoid(output)  \n        return output\n\nnet = Net(28)\nnet.cuda()\ninputs = Variable(torch.FloatTensor(128,28)).cuda()\noutputs = net(inputs)\ntorch.onnx.export(net, inputs, \"pytorch_model.proto\", verbose=True)\n\nmodel = ModelProto()\nwith open(\"pytorch_model.proto\", 'rb') as fid:\n    content = fid.read()\n    model.ParseFromString(content)\npydot_graph = GetPydotGraph(\n    model.graph,\n    name=model.graph.name,\n    rankdir=\"LR\",\n    node_producer=GetOpNodeProducer(\n        embed_docstring=False,\n        **OP_STYLE\n    ),\n)\npydot_graph.write_dot(\"pytorch_model.dot\")\n\n\nThe visualization is attached.", "body": "Modification of this code [net_drawer.py](https://github.com/caffe2/caffe2/blob/master/caffe2/python/net_drawer.py) works pretty well for me:\r\n\r\n```\r\nclass Net(nn.Module):\r\n    def __init__(self, input_shape):\r\n        super(Net, self).__init__()\r\n        self.linear1 = nn.Linear(input_shape, 100)\r\n        self.dropout1 = nn.Dropout(p=0.1)\r\n        self.relu1 = nn.ReLU()\r\n        self.linear2 = nn.Linear(100, 200)\r\n        self.dropout2 = nn.Dropout(p=0.1)\r\n        self.relu2 = nn.ReLU()\r\n        # add input_shape because we add additional connection to the input layer\r\n        self.linear3 = nn.Linear(200+input_shape, 1)\r\n        self.sigmoid = nn.Sigmoid()\r\n    \r\n    def forward(self, x):\r\n        output = self.linear1(x)\r\n        output = self.dropout1(output)\r\n        output = self.relu1(output)\r\n        output = self.linear2(output)\r\n        output = self.dropout2(output)\r\n        # create additional connection with the input layer\r\n        output = torch.cat((x, output), dim=1)\r\n        output = self.relu2(output)\r\n        output = self.linear3(output)\r\n        output = self.sigmoid(output)  \r\n        return output\r\n\r\nnet = Net(28)\r\nnet.cuda()\r\ninputs = Variable(torch.FloatTensor(128,28)).cuda()\r\noutputs = net(inputs)\r\ntorch.onnx.export(net, inputs, \"pytorch_model.proto\", verbose=True)\r\n\r\nmodel = ModelProto()\r\nwith open(\"pytorch_model.proto\", 'rb') as fid:\r\n    content = fid.read()\r\n    model.ParseFromString(content)\r\npydot_graph = GetPydotGraph(\r\n    model.graph,\r\n    name=model.graph.name,\r\n    rankdir=\"LR\",\r\n    node_producer=GetOpNodeProducer(\r\n        embed_docstring=False,\r\n        **OP_STYLE\r\n    ),\r\n)\r\npydot_graph.write_dot(\"pytorch_model.dot\")\r\n\r\n```\r\n\r\nThe visualization is attached.\r\n![pytorch_model](https://user-images.githubusercontent.com/4885361/33102067-f09c3734-cf12-11e7-80a3-701665f99349.png)\r\n\r\n"}