{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/311427691", "html_url": "https://github.com/pytorch/pytorch/issues/1318#issuecomment-311427691", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1318", "id": 311427691, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTQyNzY5MQ==", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-27T17:25:40Z", "updated_at": "2017-06-27T17:25:40Z", "author_association": "COLLABORATOR", "body_html": "<p>The exact same problem existed before actually my bad.<br>\nThey are linked in the sense that this is again a problem of finding how many elements are referencing a THPFunction. The commit mentioned above fixed the problem of THPVariable over-counting how many references they have. The problem here is that there is a mismatch between the refcounting and the <code>traverse</code> method. Indeed, THPVariables call <code>Py_VISIT</code> on the THPFunction even though they do not actually own the refcount (as the shared pointer may be hold by other elements in the cpp graph as well).</p>", "body_text": "The exact same problem existed before actually my bad.\nThey are linked in the sense that this is again a problem of finding how many elements are referencing a THPFunction. The commit mentioned above fixed the problem of THPVariable over-counting how many references they have. The problem here is that there is a mismatch between the refcounting and the traverse method. Indeed, THPVariables call Py_VISIT on the THPFunction even though they do not actually own the refcount (as the shared pointer may be hold by other elements in the cpp graph as well).", "body": "The exact same problem existed before actually my bad.\r\nThey are linked in the sense that this is again a problem of finding how many elements are referencing a THPFunction. The commit mentioned above fixed the problem of THPVariable over-counting how many references they have. The problem here is that there is a mismatch between the refcounting and the `traverse` method. Indeed, THPVariables call `Py_VISIT` on the THPFunction even though they do not actually own the refcount (as the shared pointer may be hold by other elements in the cpp graph as well)."}