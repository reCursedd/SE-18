{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/311439270", "html_url": "https://github.com/pytorch/pytorch/issues/1318#issuecomment-311439270", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1318", "id": 311439270, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTQzOTI3MA==", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-27T18:07:46Z", "updated_at": "2017-06-27T18:07:46Z", "author_association": "COLLABORATOR", "body_html": "<p>I can see two solutions here:</p>\n<ul>\n<li>Make the THPVariable and the graph hold two different refcount to the THPFunction. In that case, the Variable holds a reference to the THPFunction and the shared_ptr holds another one. In this case, the THPVariable traverse function should still visit the reference to it's own grad_fn but also visit the whole autograd graph going through every shared_ptr and making sure that the associated THPFunction is visited if all references of this shared_ptr have been visited (this can get quite tricky to implement I think).</li>\n<li>Still share the refcount and only visit the THPFunction if the THPVariable is the only one using the shared_ptr. That way python gc will consider that an external object still references the THPFunction and won't clear it. The THPFunction will be deleted as expected when the shared_ptr is destroyed (assuming no other reference) even if the THPVariable was destroyed before. See example implementation <a href=\"https://github.com/pytorch/pytorch/compare/master...albanD:fix_visit_bug\">here</a>.</li>\n</ul>\n<p>I would say the second solution is significantly clearer and simpler to implement. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> thoughts?</p>", "body_text": "I can see two solutions here:\n\nMake the THPVariable and the graph hold two different refcount to the THPFunction. In that case, the Variable holds a reference to the THPFunction and the shared_ptr holds another one. In this case, the THPVariable traverse function should still visit the reference to it's own grad_fn but also visit the whole autograd graph going through every shared_ptr and making sure that the associated THPFunction is visited if all references of this shared_ptr have been visited (this can get quite tricky to implement I think).\nStill share the refcount and only visit the THPFunction if the THPVariable is the only one using the shared_ptr. That way python gc will consider that an external object still references the THPFunction and won't clear it. The THPFunction will be deleted as expected when the shared_ptr is destroyed (assuming no other reference) even if the THPVariable was destroyed before. See example implementation here.\n\nI would say the second solution is significantly clearer and simpler to implement. @apaszke @colesbury thoughts?", "body": "I can see two solutions here:\r\n* Make the THPVariable and the graph hold two different refcount to the THPFunction. In that case, the Variable holds a reference to the THPFunction and the shared_ptr holds another one. In this case, the THPVariable traverse function should still visit the reference to it's own grad_fn but also visit the whole autograd graph going through every shared_ptr and making sure that the associated THPFunction is visited if all references of this shared_ptr have been visited (this can get quite tricky to implement I think).\r\n* Still share the refcount and only visit the THPFunction if the THPVariable is the only one using the shared_ptr. That way python gc will consider that an external object still references the THPFunction and won't clear it. The THPFunction will be deleted as expected when the shared_ptr is destroyed (assuming no other reference) even if the THPVariable was destroyed before. See example implementation [here](https://github.com/pytorch/pytorch/compare/master...albanD:fix_visit_bug).\r\n\r\nI would say the second solution is significantly clearer and simpler to implement. @apaszke @colesbury thoughts? "}