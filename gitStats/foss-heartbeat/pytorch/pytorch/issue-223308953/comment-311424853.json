{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/311424853", "html_url": "https://github.com/pytorch/pytorch/issues/1318#issuecomment-311424853", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1318", "id": 311424853, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTQyNDg1Mw==", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-27T17:15:36Z", "updated_at": "2017-06-27T17:21:37Z", "author_association": "COLLABORATOR", "body_html": "<p>Actually this bug is: (<del>comes from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"233282814\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/1705\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/1705/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/1705\">#1705</a></del>) cc: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> .<br>\nAfter this commit, the THPVariables do properly hold one reference to the THPFunction corresponding to their <code>grad_fn</code>. But this <code>grad_fn</code> is a shared pointer used in the autograd graph. So as expected, the reference to the THPFunction is kept as long as the Function is used in the cpp graph. But, if both the THPVariable and the THPFunction are in a reference cycle (create for example in python a list that contains the itself, the THPVariable and the THPFunction for example as: <code>a=[] a.append(var) a.append(var.grad_fn) a.append(a)</code> ) and the whole cycle went out of scope, even though in our case we want the THPFunction to stay alive (because the cpp side still needs it), python gc detects both elements to be unreachable from outside and will thus destroy them. Causing by side effect what we see here.</p>", "body_text": "Actually this bug is: (comes from #1705) cc: @colesbury .\nAfter this commit, the THPVariables do properly hold one reference to the THPFunction corresponding to their grad_fn. But this grad_fn is a shared pointer used in the autograd graph. So as expected, the reference to the THPFunction is kept as long as the Function is used in the cpp graph. But, if both the THPVariable and the THPFunction are in a reference cycle (create for example in python a list that contains the itself, the THPVariable and the THPFunction for example as: a=[] a.append(var) a.append(var.grad_fn) a.append(a) ) and the whole cycle went out of scope, even though in our case we want the THPFunction to stay alive (because the cpp side still needs it), python gc detects both elements to be unreachable from outside and will thus destroy them. Causing by side effect what we see here.", "body": "Actually this bug is: (~~comes from #1705~~) cc: @colesbury .\r\nAfter this commit, the THPVariables do properly hold one reference to the THPFunction corresponding to their `grad_fn`. But this `grad_fn` is a shared pointer used in the autograd graph. So as expected, the reference to the THPFunction is kept as long as the Function is used in the cpp graph. But, if both the THPVariable and the THPFunction are in a reference cycle (create for example in python a list that contains the itself, the THPVariable and the THPFunction for example as: `a=[] a.append(var) a.append(var.grad_fn) a.append(a)` ) and the whole cycle went out of scope, even though in our case we want the THPFunction to stay alive (because the cpp side still needs it), python gc detects both elements to be unreachable from outside and will thus destroy them. Causing by side effect what we see here."}