{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/382462901", "html_url": "https://github.com/pytorch/pytorch/pull/6699#issuecomment-382462901", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6699", "id": 382462901, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjQ2MjkwMQ==", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-18T17:18:40Z", "updated_at": "2018-04-18T17:18:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Just for my own education, as we already have MKLDNN based operators such as <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/a2a28c0ef1d9a433972fe72fa5b0b9b850ccfcaf/caffe2/mkl/operators/relu_op.cc#L79\">pytorch/caffe2/mkl/operators/relu_op.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 79\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/a2a28c0ef1d9a433972fe72fa5b0b9b850ccfcaf\">a2a28c0</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L79\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"79\"></td>\n          <td id=\"LC79\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-en\">REGISTER_MKL_OPERATOR</span>(Relu, mkl::MKLReluOp&lt;<span class=\"pl-k\">float</span>&gt;); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n, what does iDeep add?</p>", "body_text": "Just for my own education, as we already have MKLDNN based operators such as \n  \n    \n      pytorch/caffe2/mkl/operators/relu_op.cc\n    \n    \n         Line 79\n      in\n      a2a28c0\n    \n    \n    \n    \n\n        \n          \n           REGISTER_MKL_OPERATOR(Relu, mkl::MKLReluOp<float>); \n        \n    \n  \n\n, what does iDeep add?", "body": "Just for my own education, as we already have MKLDNN based operators such as https://github.com/pytorch/pytorch/blob/a2a28c0ef1d9a433972fe72fa5b0b9b850ccfcaf/caffe2/mkl/operators/relu_op.cc#L79, what does iDeep add? "}