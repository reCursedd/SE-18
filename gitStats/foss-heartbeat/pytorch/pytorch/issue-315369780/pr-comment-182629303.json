{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182629303", "pull_request_review_id": 113455610, "id": 182629303, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyOTMwMw==", "diff_hunk": "@@ -0,0 +1,209 @@\n+/**\n+ * Copyright (c) 2016-present, Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#pragma once\n+\n+#include <ideep.hpp>\n+#include <caffe2/core/operator.h>\n+#include <caffe2/proto/caffe2.pb.h>\n+#include <caffe2/operators/conv_pool_op_base.h>\n+\n+namespace caffe2 {\n+\n+CAFFE_DECLARE_REGISTRY(\n+    IDEEPOperatorRegistry,\n+    OperatorBase,\n+    const OperatorDef&,\n+    Workspace*);\n+\n+#define REGISTER_IDEEP_OPERATOR_CREATOR(key, ...) \\\n+  CAFFE_REGISTER_CREATOR(IDEEPOperatorRegistry, key, __VA_ARGS__)\n+#define REGISTER_IDEEP_OPERATOR(name, ...) \\\n+  CAFFE_REGISTER_CLASS(IDEEPOperatorRegistry, name, __VA_ARGS__)\n+#define REGISTER_IDEEP_OPERATOR_STR(str_name, ...) \\\n+  CAFFE_REGISTER_TYPED_CLASS(IDEEPOperatorRegistry, str_name, __VA_ARGS__)\n+\n+#define REGISTER_IDEEP_OPERATOR_WITH_ENGINE(name, engine, ...) \\\n+  CAFFE_REGISTER_CLASS(IDEEPOperatorRegistry, name##_ENGINE_##engine, __VA_ARGS__)\n+\n+// IDEEPOperator is the base scaffolding of the operators that uses IDEEP. It\n+// provides a few operators that are useful to IDEEP specific implementations.\n+class IDEEPOperator : public OperatorBase {\n+ public:\n+  explicit IDEEPOperator(const OperatorDef& operator_def, Workspace* ws)\n+      : OperatorBase(operator_def, ws),\n+        context_(operator_def.device_option()),\n+        order_(StringToStorageOrder(\n+            OperatorBase::GetSingleArgument<string>(\"order\", \"NCHW\"))) {\n+    OPERATOR_NEEDS_FEATURE(\n+        order_ == StorageOrder::NCHW, \"Unsupported storage order.\");\n+  }\n+  virtual ~IDEEPOperator() {}\n+\n+  inline const ideep::tensor& Input(int index) {\n+    return OperatorBase::template Input<ideep::tensor>(index);\n+  }\n+  inline ideep::tensor* Output(int index) {\n+    return OperatorBase::template Output<ideep::tensor>(index);\n+  }\n+\n+  // The run function of Operator switches to the device, and then carries out\n+  // the actual computation with RunOnDevice(). You should implement RunOnDevice\n+  // instead of Run().\n+  bool Run(int /* unused */ /*stream_id*/) final {\n+    // Since IDEEP does not need to do SwithToDevice and\n+    // FinishDeviceComputation,\n+    // it is always just a re-route to RunOnDevice().\n+    try {\n+      return RunOnDevice();\n+    } catch (EnforceNotMet& err) {\n+      err.AppendMessage(getErrorMsg());\n+      throw;\n+    } catch (ideep::error& e) {\n+      VLOG(1) << \"IDEEP error:\" << e.message; \n+      throw;\n+    }\n+  }\n+\n+  // Waits for a previous event. Note that to properly wait and run\n+  // asynchronously, WaitEvent, RunAsync and Record should all be executed\n+  // on the same CPU thread.\n+  void WaitEvent(const Event& ev, int /* unused */) final {\n+    context_.WaitEvent(ev);\n+  }\n+\n+  void WaitEvents(const std::vector<const Event*>& events, int /* unused */)\n+      final {\n+    for (const auto& ev : events) {\n+      context_.WaitEvent(*ev);\n+    }\n+  }\n+\n+  void RecordEvent(const char* err_msg = nullptr) final {\n+    if (event_) {\n+      context_.Record(event_.get(), err_msg);\n+    }\n+  }\n+\n+  virtual bool RunOnDevice() = 0;\n+\n+ protected:\n+  std::string getErrorMsg() {\n+    if (has_debug_def()) {\n+      return \"Error from operator: \" + ProtoDebugString(debug_def());\n+    } else {\n+      return \"Error from operator: no op def\";\n+    }\n+  }\n+\n+  IDEEPContext context_;\n+  StorageOrder order_;\n+};\n+\n+\n+class IDEEPConvPoolOpBase : public ConvPoolOpBase<IDEEPContext> {", "path": "caffe2/ideep/utils/ideep_operator.h", "position": null, "original_position": 117, "commit_id": "906941ee3d716176247e2092444da86251bb3304", "original_commit_id": "ba9a6828db4e4409ed34b0ab82f35687cdd956d1", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "This class should belong to convpool related file. ", "created_at": "2018-04-19T04:09:41Z", "updated_at": "2018-11-23T15:42:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182629303", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6699", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182629303"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182629303"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6699"}}, "body_html": "<p>This class should belong to convpool related file.</p>", "body_text": "This class should belong to convpool related file."}