{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182951359", "pull_request_review_id": 113855442, "id": 182951359, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjk1MTM1OQ==", "diff_hunk": "@@ -1,120 +1,205 @@\n-# Find the MKL libraries\r\n-#\r\n-# Options:\r\n-#\r\n-#   MKL_USE_SINGLE_DYNAMIC_LIBRARY  : use single dynamic library interface\r\n-#   MKL_USE_STATIC_LIBS             : use static libraries\r\n-#   MKL_MULTI_THREADED              : use multi-threading\r\n-#\r\n-# This module defines the following variables:\r\n-#\r\n-#   MKL_FOUND            : True mkl is found\r\n-#   MKL_INCLUDE_DIR      : unclude directory\r\n-#   MKL_LIBRARIES        : the libraries to link against.\r\n-\r\n-\r\n-# ---[ Options\r\n-include(CMakeDependentOption)\r\n-option(MKL_USE_SINGLE_DYNAMIC_LIBRARY \"Use single dynamic library interface\" ON)\r\n-cmake_dependent_option(\r\n-    MKL_USE_STATIC_LIBS \"Use static libraries\" OFF\r\n-        \"NOT MKL_USE_SINGLE_DYNAMIC_LIBRARY\" OFF)\r\n-cmake_dependent_option(\r\n-    MKL_MULTI_THREADED  \"Use multi-threading\" ON\r\n-    \"NOT MKL_USE_SINGLE_DYNAMIC_LIBRARY\" OFF)\r\n-\r\n-# ---[ Root folders\r\n-if(MSVC)\r\n-  set(INTEL_ROOT_DEFAULT \"C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows\")\r\n-else()\r\n-  set(INTEL_ROOT_DEFAULT \"/opt/intel\")\r\n-endif()\r\n-set(INTEL_ROOT ${INTEL_ROOT_DEFAULT} CACHE PATH \"Folder contains intel libs\")\r\n-find_path(MKL_ROOT include/mkl.h PATHS $ENV{MKLROOT} ${INTEL_ROOT}/mkl\r\n-                                   DOC \"Folder contains MKL\")\r\n-\r\n-# ---[ Find include dir\r\n-find_path(MKL_INCLUDE_DIR mkl.h PATHS ${MKL_ROOT} PATH_SUFFIXES include)\r\n-set(__looked_for MKL_INCLUDE_DIR)\r\n-\r\n-# ---[ Find libraries\r\n-if(CMAKE_SIZEOF_VOID_P EQUAL 4)\r\n-  set(__path_suffixes lib lib/ia32)\r\n-else()\r\n-  set(__path_suffixes lib lib/intel64)\r\n-endif()\r\n-\r\n-set(__mkl_libs \"\")\r\n-if(MKL_USE_SINGLE_DYNAMIC_LIBRARY)\r\n-  list(APPEND __mkl_libs rt)\r\n-else()\r\n-  if(CMAKE_SIZEOF_VOID_P EQUAL 4)\r\n-    if(WIN32)\r\n-      list(APPEND __mkl_libs intel_c)\r\n-    else()\r\n-      list(APPEND __mkl_libs intel)\r\n-    endif()\r\n-  else()\r\n-    list(APPEND __mkl_libs intel_lp64)\r\n-  endif()\r\n-\r\n-  if(MKL_MULTI_THREADED)\r\n-    list(APPEND __mkl_libs intel_thread)\r\n-  else()\r\n-     list(APPEND __mkl_libs sequential)\r\n-  endif()\r\n-\r\n-  list(APPEND __mkl_libs core cdft_core)\r\n-endif()\r\n-\r\n-\r\n-foreach (__lib ${__mkl_libs})\r\n-  set(__mkl_lib \"mkl_${__lib}\")\r\n-  string(TOUPPER ${__mkl_lib} __mkl_lib_upper)\r\n-\r\n-  if(MKL_USE_STATIC_LIBS)\r\n-    set(__mkl_lib \"lib${__mkl_lib}.a\")\r\n-  endif()\r\n-\r\n-  find_library(${__mkl_lib_upper}_LIBRARY\r\n-        NAMES ${__mkl_lib}\r\n-        PATHS ${MKL_ROOT} \"${MKL_INCLUDE_DIR}/..\"\r\n-        PATH_SUFFIXES ${__path_suffixes}\r\n-        DOC \"The path to Intel(R) MKL ${__mkl_lib} library\")\r\n-  mark_as_advanced(${__mkl_lib_upper}_LIBRARY)\r\n-\r\n-  list(APPEND __looked_for ${__mkl_lib_upper}_LIBRARY)\r\n-  list(APPEND MKL_LIBRARIES ${${__mkl_lib_upper}_LIBRARY})\r\n-endforeach()\r\n-\r\n-\r\n-if(NOT MKL_USE_SINGLE_DYNAMIC_LIBRARY)\r\n-  if (MKL_USE_STATIC_LIBS)\r\n-    set(__iomp5_libs iomp5 libiomp5mt.lib)\r\n-  else()\r\n-    set(__iomp5_libs iomp5 libiomp5md.lib)\r\n-  endif()\r\n-\r\n-  if(WIN32)\r\n-    find_path(INTEL_INCLUDE_DIR omp.h PATHS ${INTEL_ROOT} PATH_SUFFIXES include)\r\n-    list(APPEND __looked_for INTEL_INCLUDE_DIR)\r\n-  endif()\r\n-\r\n-  find_library(MKL_RTL_LIBRARY ${__iomp5_libs}\r\n-     PATHS ${INTEL_RTL_ROOT} ${INTEL_ROOT}/compiler ${MKL_ROOT}/.. ${MKL_ROOT}/../compiler\r\n-     PATH_SUFFIXES ${__path_suffixes}\r\n-     DOC \"Path to OpenMP runtime library\")\r\n-\r\n-  list(APPEND __looked_for MKL_RTL_LIBRARY)\r\n-  list(APPEND MKL_LIBRARIES ${MKL_RTL_LIBRARY})\r\n-endif()\r\n-\r\n-\r\n-include(FindPackageHandleStandardArgs)\r\n-find_package_handle_standard_args(MKL DEFAULT_MSG ${__looked_for})\r\n-\r\n-if(MKL_FOUND)\r\n-  message(STATUS \"Found MKL (include: ${MKL_INCLUDE_DIR}, lib: ${MKL_LIBRARIES}\")\r\n-endif()\r\n-\r\n-caffe_clear_vars(__looked_for __mkl_libs __path_suffixes __lib_suffix __iomp5_libs)\r\n+# Find the MKL libraries\n+#\n+# Options:\n+#\n+#   MKL_USE_SINGLE_DYNAMIC_LIBRARY  : use single dynamic library interface\n+#   MKL_USE_STATIC_LIBS             : use static libraries\n+#   MKL_MULTI_THREADED              : use multi-threading\n+#   MKL_USE_IDEEP                   : use IDEEP interface\n+#   MKL_USE_MKLML                   : use MKLML interface\n+#\n+# This module defines the following variables:\n+#\n+#   MKL_FOUND            : True mkl is found\n+#   MKL_INCLUDE_DIR      : unclude directory\n+#   MKL_LIBRARIES        : the libraries to link against.\n+\n+# ---[ Options\n+include(CMakeDependentOption)\n+option(MKL_USE_IDEEP \"Use IDEEP interface\" ON)", "path": "cmake/Modules/FindMKL.cmake", "position": null, "original_position": 139, "commit_id": "906941ee3d716176247e2092444da86251bb3304", "original_commit_id": "71a7eb9d42f9c0b4397ea4eb9cb893590ad946c4", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "I think just having `MKL_USE_IDEEP` and `MKL_USE_MKLML` is OK. ", "created_at": "2018-04-20T05:51:51Z", "updated_at": "2018-11-23T15:42:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182951359", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6699", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182951359"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182951359"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6699"}}, "body_html": "<p>I think just having <code>MKL_USE_IDEEP</code> and <code>MKL_USE_MKLML</code> is OK.</p>", "body_text": "I think just having MKL_USE_IDEEP and MKL_USE_MKLML is OK.", "in_reply_to_id": 182945970}