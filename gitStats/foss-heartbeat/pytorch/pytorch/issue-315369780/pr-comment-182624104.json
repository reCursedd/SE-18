{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182624104", "pull_request_review_id": 113455610, "id": 182624104, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyNDEwNA==", "diff_hunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Copyright (c) 2016-present, Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Note(jiayq): the import_array function is done inside\n+// caffe2_python.cc. Read\n+// http://docs.scipy.org/doc/numpy-1.10.1/reference/c-api.array.html#miscellaneous\n+// for more details.\n+#define NO_IMPORT_ARRAY\n+\n+#include \"pybind_state.h\"\n+\n+#include <pybind11/pybind11.h>\n+#include <pybind11/stl.h>\n+\n+#include <caffe2/ideep/ideep_utils.h>\n+\n+namespace caffe2 {\n+namespace python {\n+\n+USE_IDEEP_DEF_ALIASES();\n+\n+class IDeepFetcher;\n+class IDeepFeeder;\n+\n+REGISTER_BLOB_FETCHER((TypeMeta::Id<itensor>()),IDeepFetcher);\n+REGISTER_BLOB_FEEDER(IDEEP, IDeepFeeder);\n+\n+class IDeepFetcher : public BlobFetcherBase {\n+  TypeMeta type_transform(const itensor &atensor) {\n+    switch(atensor.get_data_type()) {\n+      case itensor::data_type::f32:\n+        return TypeMeta::Make<float>();\n+      case itensor::data_type::s16:\n+        return TypeMeta::Make<float16>();\n+      case itensor::data_type::s32:\n+        return TypeMeta::Make<int>();\n+      case itensor::data_type::s8:\n+        return TypeMeta::Make<int8_t>();\n+      case itensor::data_type::u8:\n+        return TypeMeta::Make<uint8_t>();\n+      default:\n+        // Should we throw exception?\n+        return TypeMeta();\n+    }\n+  }\n+\n+ public:\n+  pybind11::object Fetch(const Blob& blob) override {\n+    try {\n+      return FetchTensor(blob.Get<itensor>(), true).obj;\n+    } catch (ideep::error& e) {\n+      VLOG(1) << \"IDEEP error: \" << e.message;\n+      throw;\n+    }\n+  }\n+\n+  FetchedBlob FetchTensor(const itensor& atensor, bool force_copy) {\n+    FetchedBlob result;\n+    CAFFE_ENFORCE(atensor.materialized(),\n+        \"Trying to fetch unitilized tensor\");", "path": "caffe2/python/pybind_state_ideep.cc", "position": null, "original_position": 73, "commit_id": "906941ee3d716176247e2092444da86251bb3304", "original_commit_id": "ba9a6828db4e4409ed34b0ab82f35687cdd956d1", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "nit `uninitialized` ", "created_at": "2018-04-19T03:14:31Z", "updated_at": "2018-11-23T15:42:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182624104", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6699", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182624104"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182624104"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6699"}}, "body_html": "<p>nit <code>uninitialized</code></p>", "body_text": "nit uninitialized"}