{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182629196", "pull_request_review_id": 113455610, "id": 182629196, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYyOTE5Ng==", "diff_hunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2016-present, Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#pragma once\n+\n+#include <cstdlib>\n+#include <ctime>\n+#include <random>\n+\n+#include <caffe2/core/context.h>\n+\n+namespace caffe2 {\n+\n+class IDEEPContext final {\n+ public:\n+  typedef std::mt19937 rand_gen_type;\n+  IDEEPContext() : random_seed_(RandomNumberSeed()) {}\n+  explicit IDEEPContext(const DeviceOption& option)\n+      : random_seed_(\n+            option.has_random_seed() ? option.random_seed()\n+                                     : RandomNumberSeed()) {\n+    CAFFE_ENFORCE_EQ(option.device_type(), IDEEP);\n+  }\n+\n+  ~IDEEPContext() noexcept {}\n+\n+  inline void SwitchToDevice(int /*stream_id*/) {}\n+  inline void SwitchToDevice() {\n+    SwitchToDevice(0);\n+  }\n+\n+  inline void WaitEvent(const Event& ev) {\n+    ev.Wait(IDEEP, this);\n+  }\n+\n+  inline void Record(Event* ev, const char* err_msg = nullptr) const {\n+    CAFFE_ENFORCE(ev, \"Event must not be null.\");\n+    ev->Record(IDEEP, this, err_msg);\n+  }\n+\n+\n+  inline void FinishDeviceComputation() {}\n+\n+  inline rand_gen_type& RandGenerator() {\n+    if (!random_generator_.get()) {\n+      random_generator_.reset(new rand_gen_type(random_seed_));\n+    }\n+    return *random_generator_.get();\n+  }\n+\n+  inline static std::pair<void*, MemoryDeleter> New(size_t nbytes) {\n+    return GetCPUAllocator()->New(nbytes);\n+  }\n+\n+  // Two copy functions that deals with cross-device copies.\n+  template <class SrcContext, class DstContext>\n+  inline void CopyBytes(size_t nbytes, const void* src, void* dst);\n+\n+  template <typename T, class SrcContext, class DstContext>\n+  inline void Copy(size_t n, const T* src, T* dst) {\n+    if (std::is_fundamental<T>::value) {\n+      CopyBytes<SrcContext, DstContext>(\n+          n * sizeof(T),\n+          static_cast<const void*>(src),\n+          static_cast<void*>(dst));\n+    } else {\n+      for (int i = 0; i < n; ++i) {\n+        dst[i] = src[i];\n+      }\n+    }\n+  }\n+\n+  template <class SrcContext, class DstContext>\n+  inline void\n+  CopyItems(const TypeMeta& meta, size_t n, const void* src, void* dst) {\n+    if (meta.copy()) {\n+      meta.copy()(src, dst, n);\n+    } else {\n+      CopyBytes<SrcContext, DstContext>(n * meta.itemsize(), src, dst);\n+    }\n+  }\n+\n+  static bool HasAsyncPartDefault() {\n+    return false;\n+  }\n+\n+  static bool SupportsAsyncScheduling() {\n+    return false;\n+  }\n+\n+  static bool IsStreamFree(const DeviceOption& /* unused */, int /* unused */) {\n+    return true;\n+  }\n+\n+ protected:\n+  // TODO(jiayq): instead of hard-coding a generator, make it more flexible.\n+  int random_seed_{1701};\n+  std::unique_ptr<rand_gen_type> random_generator_;\n+};\n+\n+template <>\n+inline void IDEEPContext::CopyBytes<IDEEPContext, IDEEPContext>(\n+    size_t nbytes,\n+    const void* src,\n+    void* dst) {\n+  if (nbytes == 0) {\n+    return;\n+  }\n+  CAFFE_ENFORCE(src);\n+  CAFFE_ENFORCE(dst);\n+  memcpy(dst, src, nbytes);\n+}\n+\n+template <>\n+inline void IDEEPContext::CopyBytes<CPUContext, IDEEPContext>(\n+    size_t nbytes,\n+    const void* src,\n+    void* dst) {\n+  if (nbytes == 0) {\n+    return;\n+  }\n+  CAFFE_ENFORCE(src);\n+  CAFFE_ENFORCE(dst);\n+  memcpy(dst, src, nbytes);", "path": "caffe2/ideep/utils/ideep_context.h", "position": null, "original_position": 137, "commit_id": "906941ee3d716176247e2092444da86251bb3304", "original_commit_id": "ba9a6828db4e4409ed34b0ab82f35687cdd956d1", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "Looks like the memory layouts are the same. So why do we want to have `IDEEPContext` as a specialization? Just to emit the `IDEEP` event signal? ", "created_at": "2018-04-19T04:08:16Z", "updated_at": "2018-11-23T15:42:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182629196", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6699", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182629196"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182629196"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6699"}}, "body_html": "<p>Looks like the memory layouts are the same. So why do we want to have <code>IDEEPContext</code> as a specialization? Just to emit the <code>IDEEP</code> event signal?</p>", "body_text": "Looks like the memory layouts are the same. So why do we want to have IDEEPContext as a specialization? Just to emit the IDEEP event signal?"}