{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182947005", "pull_request_review_id": 113849296, "id": 182947005, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Mjk0NzAwNQ==", "diff_hunk": "@@ -1,120 +1,205 @@\n-# Find the MKL libraries\r\n-#\r\n-# Options:\r\n-#\r\n-#   MKL_USE_SINGLE_DYNAMIC_LIBRARY  : use single dynamic library interface\r\n-#   MKL_USE_STATIC_LIBS             : use static libraries\r\n-#   MKL_MULTI_THREADED              : use multi-threading\r\n-#\r\n-# This module defines the following variables:\r\n-#\r\n-#   MKL_FOUND            : True mkl is found\r\n-#   MKL_INCLUDE_DIR      : unclude directory\r\n-#   MKL_LIBRARIES        : the libraries to link against.\r\n-\r\n-\r\n-# ---[ Options\r\n-include(CMakeDependentOption)\r\n-option(MKL_USE_SINGLE_DYNAMIC_LIBRARY \"Use single dynamic library interface\" ON)\r\n-cmake_dependent_option(\r\n-    MKL_USE_STATIC_LIBS \"Use static libraries\" OFF\r\n-        \"NOT MKL_USE_SINGLE_DYNAMIC_LIBRARY\" OFF)\r\n-cmake_dependent_option(\r\n-    MKL_MULTI_THREADED  \"Use multi-threading\" ON\r\n-    \"NOT MKL_USE_SINGLE_DYNAMIC_LIBRARY\" OFF)\r\n-\r\n-# ---[ Root folders\r\n-if(MSVC)\r\n-  set(INTEL_ROOT_DEFAULT \"C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows\")\r\n-else()\r\n-  set(INTEL_ROOT_DEFAULT \"/opt/intel\")\r\n-endif()\r\n-set(INTEL_ROOT ${INTEL_ROOT_DEFAULT} CACHE PATH \"Folder contains intel libs\")\r\n-find_path(MKL_ROOT include/mkl.h PATHS $ENV{MKLROOT} ${INTEL_ROOT}/mkl\r\n-                                   DOC \"Folder contains MKL\")\r\n-\r\n-# ---[ Find include dir\r\n-find_path(MKL_INCLUDE_DIR mkl.h PATHS ${MKL_ROOT} PATH_SUFFIXES include)\r\n-set(__looked_for MKL_INCLUDE_DIR)\r\n-\r\n-# ---[ Find libraries\r\n-if(CMAKE_SIZEOF_VOID_P EQUAL 4)\r\n-  set(__path_suffixes lib lib/ia32)\r\n-else()\r\n-  set(__path_suffixes lib lib/intel64)\r\n-endif()\r\n-\r\n-set(__mkl_libs \"\")\r\n-if(MKL_USE_SINGLE_DYNAMIC_LIBRARY)\r\n-  list(APPEND __mkl_libs rt)\r\n-else()\r\n-  if(CMAKE_SIZEOF_VOID_P EQUAL 4)\r\n-    if(WIN32)\r\n-      list(APPEND __mkl_libs intel_c)\r\n-    else()\r\n-      list(APPEND __mkl_libs intel)\r\n-    endif()\r\n-  else()\r\n-    list(APPEND __mkl_libs intel_lp64)\r\n-  endif()\r\n-\r\n-  if(MKL_MULTI_THREADED)\r\n-    list(APPEND __mkl_libs intel_thread)\r\n-  else()\r\n-     list(APPEND __mkl_libs sequential)\r\n-  endif()\r\n-\r\n-  list(APPEND __mkl_libs core cdft_core)\r\n-endif()\r\n-\r\n-\r\n-foreach (__lib ${__mkl_libs})\r\n-  set(__mkl_lib \"mkl_${__lib}\")\r\n-  string(TOUPPER ${__mkl_lib} __mkl_lib_upper)\r\n-\r\n-  if(MKL_USE_STATIC_LIBS)\r\n-    set(__mkl_lib \"lib${__mkl_lib}.a\")\r\n-  endif()\r\n-\r\n-  find_library(${__mkl_lib_upper}_LIBRARY\r\n-        NAMES ${__mkl_lib}\r\n-        PATHS ${MKL_ROOT} \"${MKL_INCLUDE_DIR}/..\"\r\n-        PATH_SUFFIXES ${__path_suffixes}\r\n-        DOC \"The path to Intel(R) MKL ${__mkl_lib} library\")\r\n-  mark_as_advanced(${__mkl_lib_upper}_LIBRARY)\r\n-\r\n-  list(APPEND __looked_for ${__mkl_lib_upper}_LIBRARY)\r\n-  list(APPEND MKL_LIBRARIES ${${__mkl_lib_upper}_LIBRARY})\r\n-endforeach()\r\n-\r\n-\r\n-if(NOT MKL_USE_SINGLE_DYNAMIC_LIBRARY)\r\n-  if (MKL_USE_STATIC_LIBS)\r\n-    set(__iomp5_libs iomp5 libiomp5mt.lib)\r\n-  else()\r\n-    set(__iomp5_libs iomp5 libiomp5md.lib)\r\n-  endif()\r\n-\r\n-  if(WIN32)\r\n-    find_path(INTEL_INCLUDE_DIR omp.h PATHS ${INTEL_ROOT} PATH_SUFFIXES include)\r\n-    list(APPEND __looked_for INTEL_INCLUDE_DIR)\r\n-  endif()\r\n-\r\n-  find_library(MKL_RTL_LIBRARY ${__iomp5_libs}\r\n-     PATHS ${INTEL_RTL_ROOT} ${INTEL_ROOT}/compiler ${MKL_ROOT}/.. ${MKL_ROOT}/../compiler\r\n-     PATH_SUFFIXES ${__path_suffixes}\r\n-     DOC \"Path to OpenMP runtime library\")\r\n-\r\n-  list(APPEND __looked_for MKL_RTL_LIBRARY)\r\n-  list(APPEND MKL_LIBRARIES ${MKL_RTL_LIBRARY})\r\n-endif()\r\n-\r\n-\r\n-include(FindPackageHandleStandardArgs)\r\n-find_package_handle_standard_args(MKL DEFAULT_MSG ${__looked_for})\r\n-\r\n-if(MKL_FOUND)\r\n-  message(STATUS \"Found MKL (include: ${MKL_INCLUDE_DIR}, lib: ${MKL_LIBRARIES}\")\r\n-endif()\r\n-\r\n-caffe_clear_vars(__looked_for __mkl_libs __path_suffixes __lib_suffix __iomp5_libs)\r\n+# Find the MKL libraries\n+#\n+# Options:\n+#\n+#   MKL_USE_SINGLE_DYNAMIC_LIBRARY  : use single dynamic library interface\n+#   MKL_USE_STATIC_LIBS             : use static libraries\n+#   MKL_MULTI_THREADED              : use multi-threading\n+#   MKL_USE_IDEEP                   : use IDEEP interface\n+#   MKL_USE_MKLML                   : use MKLML interface\n+#\n+# This module defines the following variables:\n+#\n+#   MKL_FOUND            : True mkl is found\n+#   MKL_INCLUDE_DIR      : unclude directory\n+#   MKL_LIBRARIES        : the libraries to link against.\n+\n+# ---[ Options\n+include(CMakeDependentOption)\n+option(MKL_USE_IDEEP \"Use IDEEP interface\" ON)\n+option(MKL_USE_MKLML \"Use MKLML interface\" ON)\n+\n+if(MKL_USE_IDEEP)\n+  set(IDEEP_ROOT \"${PROJECT_SOURCE_DIR}/third_party/ideep\")\n+  set(MKLDNN_ROOT \"${IDEEP_ROOT}/mkl-dnn\")\n+  set(__ideep_looked_for IDEEP_ROOT)\n+\n+  find_path(IDEEP_INCLUDE_DIR ideep.hpp PATHS ${IDEEP_ROOT} PATH_SUFFIXES include)\n+  find_path(MKLDNN_INCLUDE_DIR mkldnn.hpp mkldnn.h PATHS ${MKLDNN_ROOT} PATH_SUFFIXES include)\n+  if (NOT MKLDNN_INCLUDE_DIR)\n+    execute_process(COMMAND git submodule update --init mkl-dnn WORKING_DIRECTORY ${IDEEP_ROOT})\n+    find_path(MKLDNN_INCLUDE_DIR mkldnn.hpp mkldnn.h PATHS ${MKLDNN_ROOT} PATH_SUFFIXES include)\n+  endif()\n+\n+  if (MKLDNN_INCLUDE_DIR)\n+    # to avoid adding conflicting submodels\n+    set(ORIG_WITH_TEST ${WITH_TEST})\n+    set(WITH_TEST OFF)\n+    add_subdirectory(${IDEEP_ROOT})\n+    set(WITH_TEST ${ORIG_WITH_TEST})\n+\n+    file(GLOB_RECURSE MKLML_INCLUDE_DIR ${MKLDNN_ROOT}/external/*/mkl_vsl.h)\n+    if(MKLML_INCLUDE_DIR)\n+      # if user has multiple version under external/ then guess last\n+      # one alphabetically is \"latest\" and warn\n+      list(LENGTH MKLML_INCLUDE_DIR MKLINCLEN)\n+      if(MKLINCLEN GREATER 1)\n+        list(SORT MKLML_INCLUDE_DIR)\n+        list(REVERSE MKLML_INCLUDE_DIR)\n+        list(GET MKLML_INCLUDE_DIR 0 MKLINCLST)\n+        set(MKLML_INCLUDE_DIR \"${MKLINCLST}\")\n+      endif()\n+      get_filename_component(MKLML_INCLUDE_DIR ${MKLML_INCLUDE_DIR} DIRECTORY)\n+      list(APPEND IDEEP_INCLUDE_DIR ${MKLDNN_INCLUDE_DIR} ${MKLML_INCLUDE_DIR})\n+      list(APPEND __ideep_looked_for IDEEP_INCLUDE_DIR)\n+\n+      set(__mklml_libs mklml_intel iomp5)\n+      set(IDEEP_LIBRARIES \"\")\n+      foreach (__mklml_lib ${__mklml_libs})\n+        string(TOUPPER ${__mklml_lib} __mklml_lib_upper)\n+        find_library(${__mklml_lib_upper}_LIBRARY\n+              NAMES ${__mklml_lib}\n+              PATHS  \"${MKLML_INCLUDE_DIR}/../lib\"\n+              DOC \"The path to Intel(R) MKLML ${__mklml_lib} library\")\n+        mark_as_advanced(${__mklml_lib_upper}_LIBRARY)\n+        list(APPEND IDEEP_LIBRARIES ${${__mklml_lib_upper}_LIBRARY})\n+        list(APPEND __ideep_looked_for ${__mklml_lib_upper}_LIBRARY)\n+      endforeach()\n+\n+      include(FindPackageHandleStandardArgs)\n+      find_package_handle_standard_args(IDEEP DEFAULT_MSG ${__ideep_looked_for})\n+\n+      if(IDEEP_FOUND)\n+        list(APPEND IDEEP_LIBRARIES \"${PROJECT_BINARY_DIR}/lib/libmkldnn.so\")\n+        set(CAFFE2_USE_IDEEP 1)\n+        # Do NOT use MPI if IDEEP is enabled\n+        set(USE_MPI OFF)\n+        message(STATUS \"Found IDEEP (include: ${IDEEP_INCLUDE_DIR}, lib: ${IDEEP_LIBRARIES})\")\n+      endif()\n+\n+      caffe_clear_vars(__ideep_looked_for __mklml_libs)\n+    endif()\n+  endif()\n+\n+  if(NOT IDEEP_FOUND)\n+    message(FATAL_ERROR \"Did not find IDEEP files!\")\n+  endif()\n+endif()\n+\n+if(MKL_USE_MKLML)\n+\n+  # ---[ Options\n+  option(MKL_USE_SINGLE_DYNAMIC_LIBRARY \"Use single dynamic library interface\" ON)\n+  cmake_dependent_option(\n+      MKL_USE_STATIC_LIBS \"Use static libraries\" OFF\n+          \"NOT MKL_USE_SINGLE_DYNAMIC_LIBRARY\" OFF)\n+  cmake_dependent_option(\n+      MKL_MULTI_THREADED  \"Use multi-threading\" ON\n+      \"NOT MKL_USE_SINGLE_DYNAMIC_LIBRARY\" OFF)\n+\n+  # ---[ Root folders\n+  if(MSVC)\n+    set(INTEL_ROOT_DEFAULT \"C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows\")\n+  else()\n+    set(INTEL_ROOT_DEFAULT \"/opt/intel\")\n+  endif()\n+  set(INTEL_ROOT ${INTEL_ROOT_DEFAULT} CACHE PATH \"Folder contains intel libs\")\n+  find_path(MKL_ROOT include/mkl.h PATHS $ENV{MKLROOT} ${INTEL_ROOT}/mkl\n+                                     DOC \"Folder contains MKL\")\n+\n+  # ---[ Find include dir\n+  find_path(MKL_INCLUDE_DIR mkl.h PATHS ${MKL_ROOT} PATH_SUFFIXES include)\n+  set(__looked_for MKL_INCLUDE_DIR)\n+\n+  # ---[ Find libraries\n+  if(CMAKE_SIZEOF_VOID_P EQUAL 4)\n+    set(__path_suffixes lib lib/ia32)\n+  else()\n+    set(__path_suffixes lib lib/intel64)\n+  endif()\n+\n+  set(__mkl_libs \"\")\n+  if(MKL_USE_SINGLE_DYNAMIC_LIBRARY)\n+    list(APPEND __mkl_libs rt)\n+  else()\n+    if(CMAKE_SIZEOF_VOID_P EQUAL 4)\n+      if(WIN32)\n+        list(APPEND __mkl_libs intel_c)\n+      else()\n+        list(APPEND __mkl_libs intel gf)\n+      endif()\n+    else()\n+      list(APPEND __mkl_libs intel_lp64 gf_lp64)\n+    endif()\n+\n+    if(MKL_MULTI_THREADED)\n+      list(APPEND __mkl_libs intel_thread)\n+    else()\n+       list(APPEND __mkl_libs sequential)\n+    endif()\n+\n+    list(APPEND __mkl_libs core cdft_core)\n+  endif()\n+\n+  foreach (__lib ${__mkl_libs})\n+    set(__mkl_lib \"mkl_${__lib}\")\n+    string(TOUPPER ${__mkl_lib} __mkl_lib_upper)\n+\n+    if(MKL_USE_STATIC_LIBS)\n+      set(__mkl_lib \"lib${__mkl_lib}.a\")\n+    endif()\n+\n+    find_library(${__mkl_lib_upper}_LIBRARY\n+          NAMES ${__mkl_lib}\n+          PATHS ${MKL_ROOT} \"${MKL_INCLUDE_DIR}/..\"\n+          PATH_SUFFIXES ${__path_suffixes}\n+          DOC \"The path to Intel(R) MKL ${__mkl_lib} library\")\n+    mark_as_advanced(${__mkl_lib_upper}_LIBRARY)\n+\n+    list(APPEND __looked_for ${__mkl_lib_upper}_LIBRARY)\n+    list(APPEND MKL_LIBRARIES ${${__mkl_lib_upper}_LIBRARY})\n+  endforeach()\n+\n+  if(NOT MKL_USE_SINGLE_DYNAMIC_LIBRARY)\n+    if (MKL_USE_STATIC_LIBS)\n+      set(__iomp5_libs iomp5 libiomp5mt.lib)\n+    else()\n+      set(__iomp5_libs iomp5 libiomp5md.lib)\n+    endif()\n+\n+    if(WIN32)\n+      find_path(INTEL_INCLUDE_DIR omp.h PATHS ${INTEL_ROOT} PATH_SUFFIXES include)\n+      list(APPEND __looked_for INTEL_INCLUDE_DIR)\n+    endif()\n+\n+    find_library(MKL_RTL_LIBRARY ${__iomp5_libs}\n+       PATHS ${INTEL_RTL_ROOT} ${INTEL_ROOT}/compiler ${MKL_ROOT}/.. ${MKL_ROOT}/../compiler\n+       PATH_SUFFIXES ${__path_suffixes}\n+       DOC \"Path to OpenMP runtime library\")\n+\n+    list(APPEND __looked_for MKL_RTL_LIBRARY)\n+    list(APPEND MKL_LIBRARIES ${MKL_RTL_LIBRARY})\n+  endif()\n+\n+  include(FindPackageHandleStandardArgs)\n+  find_package_handle_standard_args(MKL DEFAULT_MSG ${__looked_for})\n+\n+  if(MKL_FOUND)\n+    set(CAFFE2_USE_MKL 1)\n+    message(STATUS \"Found MKL (include: ${MKL_INCLUDE_DIR}, lib: ${MKL_LIBRARIES})\")\n+  endif()\n+\n+  caffe_clear_vars(__looked_for __mkl_libs __path_suffixes __lib_suffix __iomp5_libs)\n+\n+endif()\n+\n+if(IDEEP_FOUND)\n+  set(MKL_FOUND True)\n+  list(APPEND MKL_INCLUDE_DIR ${IDEEP_INCLUDE_DIR})\n+  list(APPEND MKL_LIBRARIES ${IDEEP_LIBRARIES})\n+endif()\n+\n+set(USE_MKL OFF)", "path": "cmake/Modules/FindMKL.cmake", "position": null, "original_position": 322, "commit_id": "906941ee3d716176247e2092444da86251bb3304", "original_commit_id": "71a7eb9d42f9c0b4397ea4eb9cb893590ad946c4", "user": {"login": "yinghai", "id": 1100089, "node_id": "MDQ6VXNlcjExMDAwODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1100089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yinghai", "html_url": "https://github.com/yinghai", "followers_url": "https://api.github.com/users/yinghai/followers", "following_url": "https://api.github.com/users/yinghai/following{/other_user}", "gists_url": "https://api.github.com/users/yinghai/gists{/gist_id}", "starred_url": "https://api.github.com/users/yinghai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yinghai/subscriptions", "organizations_url": "https://api.github.com/users/yinghai/orgs", "repos_url": "https://api.github.com/users/yinghai/repos", "events_url": "https://api.github.com/users/yinghai/events{/privacy}", "received_events_url": "https://api.github.com/users/yinghai/received_events", "type": "User", "site_admin": false}, "body": "I feel this part of the logic is overly complicated. Either `IDEEP` or `MKLML` should qualify `USE_ML` as `ON`. (They don't conflict with each other, right?) Then, in the summary part, in addition to showing whether `USE_MKL` is ON or OFF, we should also show whether `CAFFE2_USE_IDEEP` and/or `CAFFE2_USE_MKLML` are on. \r\n\r\nSince we have close sourced `MKLML` disguised as `MKLDNN`, right now. I think showing explicit what we are using can help reducing the confusion. Of course, if things are going well, we can gradually deprecate `MKLML`. ", "created_at": "2018-04-20T05:09:27Z", "updated_at": "2018-11-23T15:42:54Z", "html_url": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182947005", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6699", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182947005"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182947005"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6699"}}, "body_html": "<p>I feel this part of the logic is overly complicated. Either <code>IDEEP</code> or <code>MKLML</code> should qualify <code>USE_ML</code> as <code>ON</code>. (They don't conflict with each other, right?) Then, in the summary part, in addition to showing whether <code>USE_MKL</code> is ON or OFF, we should also show whether <code>CAFFE2_USE_IDEEP</code> and/or <code>CAFFE2_USE_MKLML</code> are on.</p>\n<p>Since we have close sourced <code>MKLML</code> disguised as <code>MKLDNN</code>, right now. I think showing explicit what we are using can help reducing the confusion. Of course, if things are going well, we can gradually deprecate <code>MKLML</code>.</p>", "body_text": "I feel this part of the logic is overly complicated. Either IDEEP or MKLML should qualify USE_ML as ON. (They don't conflict with each other, right?) Then, in the summary part, in addition to showing whether USE_MKL is ON or OFF, we should also show whether CAFFE2_USE_IDEEP and/or CAFFE2_USE_MKLML are on.\nSince we have close sourced MKLML disguised as MKLDNN, right now. I think showing explicit what we are using can help reducing the confusion. Of course, if things are going well, we can gradually deprecate MKLML."}