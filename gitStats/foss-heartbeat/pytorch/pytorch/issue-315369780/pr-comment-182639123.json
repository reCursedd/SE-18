{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182639123", "pull_request_review_id": 113473391, "id": 182639123, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjYzOTEyMw==", "diff_hunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2016-present, Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include <caffe2/ideep/ideep_utils.h>\n+\n+namespace caffe2 {\n+\n+class IDEEPPoolOp final : public IDEEPConvPoolOpBase {\n+ public:\n+  USE_IDEEP_DEF_ALIASES();\n+  USE_IDEEP_CONV_POOL_BASE_FUNCTIONS();\n+\n+  IDEEPPoolOp(const OperatorDef& operator_def, Workspace* ws)\n+      : IDEEPConvPoolOpBase(operator_def, ws) {\n+    CAFFE_ENFORCE(\n+        (dilation_h() == 1) && (dilation_w() == 1),\n+        \"Pooling op does not support dilation right now.\");\n+    if (!global_pooling_) {\n+      CAFFE_ENFORCE(\n+          pad_t() < kernel_h() && pad_b() < kernel_h() &&\n+              pad_l() < kernel_w() && pad_r() < kernel_w(),\n+          \"Pad should be smaller than kernel.\");\n+    }\n+    // Figure out the pooling descriptor.\n+    if (operator_def.type().substr(0, 7) == \"MaxPool\") {\n+      algo_ = ialgo::pooling_max;\n+    } else if (operator_def.type().substr(0, 11) == \"AveragePool\") {\n+      algo_ = ialgo::pooling_avg;\n+    } else {\n+      LOG(FATAL) << \"Unsupported pooling method: \" << operator_def.type();", "path": "caffe2/ideep/operators/pool_op.cc", "position": null, "original_position": 43, "commit_id": "906941ee3d716176247e2092444da86251bb3304", "original_commit_id": "ba9a6828db4e4409ed34b0ab82f35687cdd956d1", "user": {"login": "gujinghui", "id": 31264804, "node_id": "MDQ6VXNlcjMxMjY0ODA0", "avatar_url": "https://avatars2.githubusercontent.com/u/31264804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gujinghui", "html_url": "https://github.com/gujinghui", "followers_url": "https://api.github.com/users/gujinghui/followers", "following_url": "https://api.github.com/users/gujinghui/following{/other_user}", "gists_url": "https://api.github.com/users/gujinghui/gists{/gist_id}", "starred_url": "https://api.github.com/users/gujinghui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gujinghui/subscriptions", "organizations_url": "https://api.github.com/users/gujinghui/orgs", "repos_url": "https://api.github.com/users/gujinghui/repos", "events_url": "https://api.github.com/users/gujinghui/events{/privacy}", "received_events_url": "https://api.github.com/users/gujinghui/received_events", "type": "User", "site_admin": false}, "body": "Kept align with existing pooling op...", "created_at": "2018-04-19T05:51:00Z", "updated_at": "2018-11-23T15:42:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182639123", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6699", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182639123"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6699#discussion_r182639123"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6699"}}, "body_html": "<p>Kept align with existing pooling op...</p>", "body_text": "Kept align with existing pooling op...", "in_reply_to_id": 182628380}