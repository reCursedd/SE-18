{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8623", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8623/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8623/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8623/events", "html_url": "https://github.com/pytorch/pytorch/issues/8623", "id": 333443793, "node_id": "MDU6SXNzdWUzMzM0NDM3OTM=", "number": 8623, "title": "clip_grad_norm_ to handle params from multiple gpus", "user": {"login": "jpilaul", "id": 614861, "node_id": "MDQ6VXNlcjYxNDg2MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/614861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpilaul", "html_url": "https://github.com/jpilaul", "followers_url": "https://api.github.com/users/jpilaul/followers", "following_url": "https://api.github.com/users/jpilaul/following{/other_user}", "gists_url": "https://api.github.com/users/jpilaul/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpilaul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpilaul/subscriptions", "organizations_url": "https://api.github.com/users/jpilaul/orgs", "repos_url": "https://api.github.com/users/jpilaul/repos", "events_url": "https://api.github.com/users/jpilaul/events{/privacy}", "received_events_url": "https://api.github.com/users/jpilaul/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-18T21:36:05Z", "updated_at": "2018-06-25T18:08:29Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>This PR is a request to support parameters that are on multiple gpus in <code>clip_grad_norm_</code>. I recently did something similar to:</p>\n<pre><code>class MyModel(nn.Module):\n    def __init__(self, split_gpus):\n        self.large_submodule1 = ...\n        self.large_submodule2 = ...\n        self.split_gpus = split_gpus\n    if split_gpus:\n        self.large_submodule1.cuda(0)\n        self.large_submodule1.cuda(1)\n\n    def forward(self, x):\n        x = self.large_submodule1(x)\n        if split_gpus:\n            x = x.cuda(1) # P2P GPU transfer\n        return self.large_submodule2(x)\n</code></pre>\n<p>(ref: <a href=\"https://discuss.pytorch.org/t/model-parallelism-in-pytorch-for-large-r-than-1-gpu-models/778\" rel=\"nofollow\">https://discuss.pytorch.org/t/model-parallelism-in-pytorch-for-large-r-than-1-gpu-models/778</a>)</p>\n<p>and ran into issues when I tried <code>clip_grad_norm_(MyModel.paramaters(), clip)</code> --&gt; I was getting the following error message</p>\n<blockquote>\n<p>arguments are located on different GPUs</p>\n</blockquote>\n<p>As a fix:</p>\n<p>I have done the following in <code>clip_grad.py</code>:</p>\n<pre><code>device_p = p.get_device()\n        try:\n            if total_norm.is_cuda and total_norm.get_device() != device_p:\n                total_norm = total_norm.cuda(device_p)\n       except:\n           pass\n</code></pre>\n<p>and</p>\n<pre><code>    device_p = p.get_device()\n    if clip_coef.is_cuda and clip_coef.get_device() != device_p:\n        clip_coef = clip_coef.cuda(device_p)\n</code></pre>\n<p>Thanks!</p>", "body_text": "This PR is a request to support parameters that are on multiple gpus in clip_grad_norm_. I recently did something similar to:\nclass MyModel(nn.Module):\n    def __init__(self, split_gpus):\n        self.large_submodule1 = ...\n        self.large_submodule2 = ...\n        self.split_gpus = split_gpus\n    if split_gpus:\n        self.large_submodule1.cuda(0)\n        self.large_submodule1.cuda(1)\n\n    def forward(self, x):\n        x = self.large_submodule1(x)\n        if split_gpus:\n            x = x.cuda(1) # P2P GPU transfer\n        return self.large_submodule2(x)\n\n(ref: https://discuss.pytorch.org/t/model-parallelism-in-pytorch-for-large-r-than-1-gpu-models/778)\nand ran into issues when I tried clip_grad_norm_(MyModel.paramaters(), clip) --> I was getting the following error message\n\narguments are located on different GPUs\n\nAs a fix:\nI have done the following in clip_grad.py:\ndevice_p = p.get_device()\n        try:\n            if total_norm.is_cuda and total_norm.get_device() != device_p:\n                total_norm = total_norm.cuda(device_p)\n       except:\n           pass\n\nand\n    device_p = p.get_device()\n    if clip_coef.is_cuda and clip_coef.get_device() != device_p:\n        clip_coef = clip_coef.cuda(device_p)\n\nThanks!", "body": "This PR is a request to support parameters that are on multiple gpus in `clip_grad_norm_`. I recently did something similar to:\r\n\r\n    class MyModel(nn.Module):\r\n        def __init__(self, split_gpus):\r\n            self.large_submodule1 = ...\r\n            self.large_submodule2 = ...\r\n            self.split_gpus = split_gpus\r\n        if split_gpus:\r\n            self.large_submodule1.cuda(0)\r\n            self.large_submodule1.cuda(1)\r\n\r\n        def forward(self, x):\r\n            x = self.large_submodule1(x)\r\n            if split_gpus:\r\n                x = x.cuda(1) # P2P GPU transfer\r\n            return self.large_submodule2(x)\r\n(ref: https://discuss.pytorch.org/t/model-parallelism-in-pytorch-for-large-r-than-1-gpu-models/778)\r\n\r\nand ran into issues when I tried `clip_grad_norm_(MyModel.paramaters(), clip)` --> I was getting the following error message \r\n\r\n> arguments are located on different GPUs\r\n\r\nAs a fix:\r\n\r\nI have done the following in `clip_grad.py`:\r\n\r\n    device_p = p.get_device()\r\n            try:\r\n                if total_norm.is_cuda and total_norm.get_device() != device_p:\r\n                    total_norm = total_norm.cuda(device_p)\r\n           except:\r\n               pass\r\n\r\nand\r\n\r\n        device_p = p.get_device()\r\n        if clip_coef.is_cuda and clip_coef.get_device() != device_p:\r\n            clip_coef = clip_coef.cuda(device_p)\r\n\r\nThanks!"}