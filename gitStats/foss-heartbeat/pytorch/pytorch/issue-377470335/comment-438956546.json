{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/438956546", "html_url": "https://github.com/pytorch/pytorch/issues/13573#issuecomment-438956546", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13573", "id": 438956546, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODk1NjU0Ng==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-15T08:23:43Z", "updated_at": "2018-11-15T08:23:43Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>init_process_group is synchronous by default</p>\n</blockquote>\n<p>No. I literally just tried and the function call on rank 0 finishes before my rank 1 process even starts.</p>\n<blockquote>\n<p>we just don't have a barrier support for NCCL backend</p>\n</blockquote>\n<p>I know.. that's why I submitted this issue. It's supported in other ranks, why can't NCCL have it? It would be as simple as an all gather/reduce of a byte.</p>", "body_text": "init_process_group is synchronous by default\n\nNo. I literally just tried and the function call on rank 0 finishes before my rank 1 process even starts.\n\nwe just don't have a barrier support for NCCL backend\n\nI know.. that's why I submitted this issue. It's supported in other ranks, why can't NCCL have it? It would be as simple as an all gather/reduce of a byte.", "body": "> init_process_group is synchronous by default\r\n\r\nNo. I literally just tried and the function call on rank 0 finishes before my rank 1 process even starts.\r\n\r\n> we just don't have a barrier support for NCCL backend\r\n\r\nI know.. that's why I submitted this issue. It's supported in other ranks, why can't NCCL have it? It would be as simple as an all gather/reduce of a byte."}