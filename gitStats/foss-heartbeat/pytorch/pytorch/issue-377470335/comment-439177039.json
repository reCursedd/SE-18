{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/439177039", "html_url": "https://github.com/pytorch/pytorch/issues/13573#issuecomment-439177039", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13573", "id": 439177039, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTE3NzAzOQ==", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-15T20:21:17Z", "updated_at": "2018-11-15T21:53:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> To be clear, Being synchronous and barrier are two completely different things.</p>\n<p>Being synchronous means that the function's job is done (init_process_group function call) once the function exits, vs. returning a future or something</p>\n<p>Barrier means that each rank needs to hit this code point after the barrier call.</p>\n<p>I see here you are asking for a barrier call for init_process_group, is that right?  NCCL doesn't have barrier call within and all NCCL calls are async, so it's not super straightforward to get this implemented.</p>", "body_text": "@SsnL To be clear, Being synchronous and barrier are two completely different things.\nBeing synchronous means that the function's job is done (init_process_group function call) once the function exits, vs. returning a future or something\nBarrier means that each rank needs to hit this code point after the barrier call.\nI see here you are asking for a barrier call for init_process_group, is that right?  NCCL doesn't have barrier call within and all NCCL calls are async, so it's not super straightforward to get this implemented.", "body": "@SsnL To be clear, Being synchronous and barrier are two completely different things. \r\n\r\nBeing synchronous means that the function's job is done (init_process_group function call) once the function exits, vs. returning a future or something \r\n\r\nBarrier means that each rank needs to hit this code point after the barrier call.\r\n\r\nI see here you are asking for a barrier call for init_process_group, is that right?  NCCL doesn't have barrier call within and all NCCL calls are async, so it's not super straightforward to get this implemented. "}