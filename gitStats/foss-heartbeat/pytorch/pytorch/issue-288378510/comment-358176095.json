{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/358176095", "html_url": "https://github.com/pytorch/pytorch/issues/4661#issuecomment-358176095", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4661", "id": 358176095, "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODE3NjA5NQ==", "user": {"login": "benvcutilli", "id": 23709161, "node_id": "MDQ6VXNlcjIzNzA5MTYx", "avatar_url": "https://avatars1.githubusercontent.com/u/23709161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benvcutilli", "html_url": "https://github.com/benvcutilli", "followers_url": "https://api.github.com/users/benvcutilli/followers", "following_url": "https://api.github.com/users/benvcutilli/following{/other_user}", "gists_url": "https://api.github.com/users/benvcutilli/gists{/gist_id}", "starred_url": "https://api.github.com/users/benvcutilli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benvcutilli/subscriptions", "organizations_url": "https://api.github.com/users/benvcutilli/orgs", "repos_url": "https://api.github.com/users/benvcutilli/repos", "events_url": "https://api.github.com/users/benvcutilli/events{/privacy}", "received_events_url": "https://api.github.com/users/benvcutilli/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-17T02:35:36Z", "updated_at": "2018-01-17T02:35:36Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> FWIW using torch.autograd.grad() instead isn't leaking in my <strong>super top secret</strong> code, as you predicted. Is there any way <code>backward()</code> for <code>.grad</code>s could be used as a wrapper for <code>torch.autograd.grad()</code> to keep the object semantics the same no matter what <code>n</code>th derivative you're calculating? For instance, there could be a rare case, say, if you were taking the Taylor expansion where higher- and higher-order derivatives of the gradient or whatever (I know, this is very contrived; sort of inspired by Newton-Raphson but in a very very abstract way), and in order to do that you would write a loop that calls <code>.backward()</code>. Otherwise, you'd have a conditional for which order derivative you're calculating and you make the corresponding call.</p>\n<p>I mean, you could always just call with <code>torch.autograd.grad()</code> for all of them, but, I dunno, hopefully this illustrates the general point of consistency. The <code>.backward()</code> semantic is really nice, too. Don't know if this is a computationally tractable request at this point, though.</p>", "body_text": "@colesbury @apaszke FWIW using torch.autograd.grad() instead isn't leaking in my super top secret code, as you predicted. Is there any way backward() for .grads could be used as a wrapper for torch.autograd.grad() to keep the object semantics the same no matter what nth derivative you're calculating? For instance, there could be a rare case, say, if you were taking the Taylor expansion where higher- and higher-order derivatives of the gradient or whatever (I know, this is very contrived; sort of inspired by Newton-Raphson but in a very very abstract way), and in order to do that you would write a loop that calls .backward(). Otherwise, you'd have a conditional for which order derivative you're calculating and you make the corresponding call.\nI mean, you could always just call with torch.autograd.grad() for all of them, but, I dunno, hopefully this illustrates the general point of consistency. The .backward() semantic is really nice, too. Don't know if this is a computationally tractable request at this point, though.", "body": "@colesbury @apaszke FWIW using torch.autograd.grad() instead isn't leaking in my **super top secret** code, as you predicted. Is there any way `backward()` for `.grad`s could be used as a wrapper for `torch.autograd.grad()` to keep the object semantics the same no matter what `n`th derivative you're calculating? For instance, there could be a rare case, say, if you were taking the Taylor expansion where higher- and higher-order derivatives of the gradient or whatever (I know, this is very contrived; sort of inspired by Newton-Raphson but in a very very abstract way), and in order to do that you would write a loop that calls `.backward()`. Otherwise, you'd have a conditional for which order derivative you're calculating and you make the corresponding call.\r\n\r\nI mean, you could always just call with `torch.autograd.grad()` for all of them, but, I dunno, hopefully this illustrates the general point of consistency. The `.backward()` semantic is really nice, too. Don't know if this is a computationally tractable request at this point, though."}