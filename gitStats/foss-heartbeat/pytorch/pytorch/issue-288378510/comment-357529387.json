{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/357529387", "html_url": "https://github.com/pytorch/pytorch/issues/4661#issuecomment-357529387", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4661", "id": 357529387, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzUyOTM4Nw==", "user": {"login": "benvcutilli", "id": 23709161, "node_id": "MDQ6VXNlcjIzNzA5MTYx", "avatar_url": "https://avatars1.githubusercontent.com/u/23709161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benvcutilli", "html_url": "https://github.com/benvcutilli", "followers_url": "https://api.github.com/users/benvcutilli/followers", "following_url": "https://api.github.com/users/benvcutilli/following{/other_user}", "gists_url": "https://api.github.com/users/benvcutilli/gists{/gist_id}", "starred_url": "https://api.github.com/users/benvcutilli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benvcutilli/subscriptions", "organizations_url": "https://api.github.com/users/benvcutilli/orgs", "repos_url": "https://api.github.com/users/benvcutilli/repos", "events_url": "https://api.github.com/users/benvcutilli/events{/privacy}", "received_events_url": "https://api.github.com/users/benvcutilli/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-14T17:59:55Z", "updated_at": "2018-01-14T18:17:17Z", "author_association": "NONE", "body_html": "<p>Ok, just checked it, and I was wrong. Still leaks if you modify it the way I said to in the last comment (I used and modified Soumith's \"simplified\" snippet because of confusion over retain_grad, but was able to fix it, addressed next). Also, just checked it with the same modification for my snippet, and also still leaks:</p>\n<pre><code>net = torch.nn.Linear(30000,1).cuda()\ndata = torch.ones(100, 30000)\nfor rep in range(1000):\n  for batchIndices in range(0,100,100):\n    batch = torch.autograd.Variable(data[batchIndices:batchIndices+10], requires_grad=True).cuda()\n    batch.retain_grad()\n    net.forward(batch).norm(2).backward(create_graph=True)\n    batch.grad.norm(2).backward()\n</code></pre>", "body_text": "Ok, just checked it, and I was wrong. Still leaks if you modify it the way I said to in the last comment (I used and modified Soumith's \"simplified\" snippet because of confusion over retain_grad, but was able to fix it, addressed next). Also, just checked it with the same modification for my snippet, and also still leaks:\nnet = torch.nn.Linear(30000,1).cuda()\ndata = torch.ones(100, 30000)\nfor rep in range(1000):\n  for batchIndices in range(0,100,100):\n    batch = torch.autograd.Variable(data[batchIndices:batchIndices+10], requires_grad=True).cuda()\n    batch.retain_grad()\n    net.forward(batch).norm(2).backward(create_graph=True)\n    batch.grad.norm(2).backward()", "body": "Ok, just checked it, and I was wrong. Still leaks if you modify it the way I said to in the last comment (I used and modified Soumith's \"simplified\" snippet because of confusion over retain_grad, but was able to fix it, addressed next). Also, just checked it with the same modification for my snippet, and also still leaks:\r\n\r\n```\r\nnet = torch.nn.Linear(30000,1).cuda()\r\ndata = torch.ones(100, 30000)\r\nfor rep in range(1000):\r\n  for batchIndices in range(0,100,100):\r\n    batch = torch.autograd.Variable(data[batchIndices:batchIndices+10], requires_grad=True).cuda()\r\n    batch.retain_grad()\r\n    net.forward(batch).norm(2).backward(create_graph=True)\r\n    batch.grad.norm(2).backward()\r\n```"}