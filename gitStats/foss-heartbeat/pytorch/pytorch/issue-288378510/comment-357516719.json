{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/357516719", "html_url": "https://github.com/pytorch/pytorch/issues/4661#issuecomment-357516719", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4661", "id": 357516719, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NzUxNjcxOQ==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-14T14:47:57Z", "updated_at": "2018-01-14T14:50:40Z", "author_association": "MEMBER", "body_html": "<p>A more simplified test case:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\nnet <span class=\"pl-k\">=</span> torch.nn.Linear(<span class=\"pl-c1\">30000</span>,<span class=\"pl-c1\">1</span>).cuda()\ndata <span class=\"pl-k\">=</span> torch.ones(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">30000</span>).cuda()\n<span class=\"pl-k\">for</span> rep <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1000</span>):\n    batch <span class=\"pl-k\">=</span> torch.autograd.Variable(data, <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    net(batch).norm(<span class=\"pl-c1\">2</span>).backward(<span class=\"pl-v\">create_graph</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)</pre></div>", "body_text": "A more simplified test case:\nimport torch\nnet = torch.nn.Linear(30000,1).cuda()\ndata = torch.ones(10, 30000).cuda()\nfor rep in range(1000):\n    batch = torch.autograd.Variable(data, requires_grad=True)\n    net(batch).norm(2).backward(create_graph=True)", "body": "A more simplified test case:\r\n\r\n```python\r\nimport torch\r\nnet = torch.nn.Linear(30000,1).cuda()\r\ndata = torch.ones(10, 30000).cuda()\r\nfor rep in range(1000):\r\n    batch = torch.autograd.Variable(data, requires_grad=True)\r\n    net(batch).norm(2).backward(create_graph=True)\r\n```"}