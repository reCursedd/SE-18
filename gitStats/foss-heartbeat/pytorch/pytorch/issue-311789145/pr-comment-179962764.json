{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179962764", "pull_request_review_id": 110301503, "id": 179962764, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk2Mjc2NA==", "diff_hunk": "@@ -128,6 +128,26 @@ def test_cuda_mask(self):\n         unpacked, _ = rnn_utils.pad_packed_sequence(packed)\n         self.assertEqual(unpacked.type(), cuda_type_str)\n \n+    def test_total_length(self):\n+        padded, lengths = self._padded_sequence(torch.FloatTensor)\n+        max_length = max(lengths)\n+        packed = rnn_utils.pack_padded_sequence(padded, lengths)\n+        # test ValueError if total_length < max_length\n+        for total_length in (-1, 0, max_length - 1):\n+            for batch_first in (True, False):\n+                def err_fn():\n+                    rnn_utils.pad_packed_sequence(packed, batch_first=batch_first,\n+                                                  total_length=total_length)\n+            self.assertRaises(ValueError, err_fn)\n+        # test that pad_packed_sequence returns results of correct length\n+        for total_length_delta in (0, 1, 8):\n+            for batch_first in (True, False):\n+                total_length = max_length + total_length_delta\n+                unpacked, lengths_out = rnn_utils.pad_packed_sequence(packed, batch_first=batch_first,\n+                                                                      total_length=total_length)\n+                self.assertEqual(lengths, lengths_out)\n+                self.assertEqual(unpacked.size(1 if batch_first else 0), total_length)", "path": "test/test_nn.py", "position": 26, "original_position": 22, "commit_id": "7d2c810e79c01c9c6f2431b444d77a79f148e26b", "original_commit_id": "9a84c1af130cad4ca4f7bca59b5d935e2b4e69f4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you please also check that the extra padding is 0 and that the data is still laid out correctly (you can use `pad_packed_sequence` without `total_length`, `cat` and check for equality)?", "created_at": "2018-04-08T21:58:46Z", "updated_at": "2018-11-23T15:42:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/6327#discussion_r179962764", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6327", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179962764"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6327#discussion_r179962764"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6327"}}, "body_html": "<p>Can you please also check that the extra padding is 0 and that the data is still laid out correctly (you can use <code>pad_packed_sequence</code> without <code>total_length</code>, <code>cat</code> and check for equality)?</p>", "body_text": "Can you please also check that the extra padding is 0 and that the data is still laid out correctly (you can use pad_packed_sequence without total_length, cat and check for equality)?"}