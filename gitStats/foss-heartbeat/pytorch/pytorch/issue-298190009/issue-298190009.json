{"url": "https://api.github.com/repos/pytorch/pytorch/issues/5296", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/5296/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/5296/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/5296/events", "html_url": "https://github.com/pytorch/pytorch/issues/5296", "id": 298190009, "node_id": "MDU6SXNzdWUyOTgxOTAwMDk=", "number": 5296, "title": "reduce=False --> No error for invalid labels", "user": {"login": "MattKleinsmith", "id": 8968171, "node_id": "MDQ6VXNlcjg5NjgxNzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8968171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MattKleinsmith", "html_url": "https://github.com/MattKleinsmith", "followers_url": "https://api.github.com/users/MattKleinsmith/followers", "following_url": "https://api.github.com/users/MattKleinsmith/following{/other_user}", "gists_url": "https://api.github.com/users/MattKleinsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/MattKleinsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MattKleinsmith/subscriptions", "organizations_url": "https://api.github.com/users/MattKleinsmith/orgs", "repos_url": "https://api.github.com/users/MattKleinsmith/repos", "events_url": "https://api.github.com/users/MattKleinsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/MattKleinsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-19T08:12:43Z", "updated_at": "2018-02-19T16:18:53Z", "closed_at": "2018-02-19T16:18:53Z", "author_association": "NONE", "body_html": "<p><strong>Claim:</strong><br>\nWhen I use an invalid label with F.cross_entropy with reduce=False, I don't receive an error message. I do receive an error message when reduce=True.</p>\n<p><strong>Code:</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n<span class=\"pl-k\">import</span> torch.nn.functional <span class=\"pl-k\">as</span> F\n\npred <span class=\"pl-k\">=</span> [[<span class=\"pl-c1\">0.99</span>, <span class=\"pl-c1\">0.01</span>]]\ntarget <span class=\"pl-k\">=</span> [[<span class=\"pl-c1\">2</span>]]  <span class=\"pl-c\"><span class=\"pl-c\">#</span> An invalid label. Valid labels: [0, 1]</span>\n\npreds <span class=\"pl-k\">=</span> Variable(torch.FloatTensor([pred]))\ntargets <span class=\"pl-k\">=</span> Variable(torch.LongTensor([target]))\n\nnum_classes <span class=\"pl-k\">=</span> preds.size(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\npreds_flat <span class=\"pl-k\">=</span> preds.view(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, num_classes)\ntargets_flat <span class=\"pl-k\">=</span> targets.view(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">3</span>):\n    loss <span class=\"pl-k\">=</span> F.cross_entropy(preds_flat, targets_flat, <span class=\"pl-v\">reduce</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>loss:<span class=\"pl-pds\">\"</span></span>, loss.data[<span class=\"pl-c1\">0</span>])</pre></div>\n<p><strong>Result:</strong></p>\n<pre><code>loss: -2.103348379023373e-06\nloss: -2.802596928649634e-45\nloss: -2.0069783204235137e-06\n</code></pre>\n<p>No error message received.</p>\n<p><strong>Expected error message:</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">RuntimeError</span>: Assertion <span class=\"pl-bu\">`cur_target <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span> <span class=\"pl-ii\">&amp;&amp;</span> cur_target <span class=\"pl-k\">&lt;</span> n_classes<span class=\"pl-s\"><span class=\"pl-pds\">'</span> failed.  at /opt/conda/conda-bld/pytorch_1512387374934/work/torch/lib/THNN/generic/ClassNLLCriterion.c:87<span class=\"pl-ii\"></span></span></span></pre></div>\n<p><strong>Context:</strong></p>\n<p>I was using <a href=\"https://github.com/kuangliu/torchcv/blob/master/torchcv/loss/ssd_loss.py#L61\">a PyTorch implementation of SSD loss</a>, accidentally used an invalid label, and got extremely large losses and extremely small losses, and inconsistently so.</p>\n<p><strong>Environment:</strong></p>\n<ul>\n<li>OS: Ubuntu 16.04 on Docker and host</li>\n<li>PyTorch version: 0.3.0.post4</li>\n<li>How you installed PyTorch: conda</li>\n<li>Python version: 3.6.3</li>\n</ul>", "body_text": "Claim:\nWhen I use an invalid label with F.cross_entropy with reduce=False, I don't receive an error message. I do receive an error message when reduce=True.\nCode:\nimport torch\nfrom torch.autograd import Variable\nimport torch.nn.functional as F\n\npred = [[0.99, 0.01]]\ntarget = [[2]]  # An invalid label. Valid labels: [0, 1]\n\npreds = Variable(torch.FloatTensor([pred]))\ntargets = Variable(torch.LongTensor([target]))\n\nnum_classes = preds.size(-1)\npreds_flat = preds.view(-1, num_classes)\ntargets_flat = targets.view(-1)\n\nfor _ in range(3):\n    loss = F.cross_entropy(preds_flat, targets_flat, reduce=False)\n    print(\"loss:\", loss.data[0])\nResult:\nloss: -2.103348379023373e-06\nloss: -2.802596928649634e-45\nloss: -2.0069783204235137e-06\n\nNo error message received.\nExpected error message:\nRuntimeError: Assertion `cur_target >= 0 && cur_target < n_classes' failed.  at /opt/conda/conda-bld/pytorch_1512387374934/work/torch/lib/THNN/generic/ClassNLLCriterion.c:87\nContext:\nI was using a PyTorch implementation of SSD loss, accidentally used an invalid label, and got extremely large losses and extremely small losses, and inconsistently so.\nEnvironment:\n\nOS: Ubuntu 16.04 on Docker and host\nPyTorch version: 0.3.0.post4\nHow you installed PyTorch: conda\nPython version: 3.6.3", "body": "**Claim:**\r\nWhen I use an invalid label with F.cross_entropy with reduce=False, I don't receive an error message. I do receive an error message when reduce=True.\r\n\r\n**Code:**\r\n```python\r\nimport torch\r\nfrom torch.autograd import Variable\r\nimport torch.nn.functional as F\r\n\r\npred = [[0.99, 0.01]]\r\ntarget = [[2]]  # An invalid label. Valid labels: [0, 1]\r\n\r\npreds = Variable(torch.FloatTensor([pred]))\r\ntargets = Variable(torch.LongTensor([target]))\r\n\r\nnum_classes = preds.size(-1)\r\npreds_flat = preds.view(-1, num_classes)\r\ntargets_flat = targets.view(-1)\r\n\r\nfor _ in range(3):\r\n    loss = F.cross_entropy(preds_flat, targets_flat, reduce=False)\r\n    print(\"loss:\", loss.data[0])\r\n```\r\n\r\n**Result:**\r\n\r\n```\r\nloss: -2.103348379023373e-06\r\nloss: -2.802596928649634e-45\r\nloss: -2.0069783204235137e-06\r\n```\r\n\r\nNo error message received.\r\n\r\n**Expected error message:**\r\n\r\n```python\r\nRuntimeError: Assertion `cur_target >= 0 && cur_target < n_classes' failed.  at /opt/conda/conda-bld/pytorch_1512387374934/work/torch/lib/THNN/generic/ClassNLLCriterion.c:87\r\n```\r\n\r\n**Context:**\r\n\r\nI was using [a PyTorch implementation of SSD loss](https://github.com/kuangliu/torchcv/blob/master/torchcv/loss/ssd_loss.py#L61), accidentally used an invalid label, and got extremely large losses and extremely small losses, and inconsistently so.\r\n\r\n**Environment:**\r\n- OS: Ubuntu 16.04 on Docker and host\r\n- PyTorch version: 0.3.0.post4\r\n- How you installed PyTorch: conda\r\n- Python version: 3.6.3\r\n\r\n\r\n"}