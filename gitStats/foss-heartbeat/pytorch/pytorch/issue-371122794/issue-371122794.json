{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12765", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12765/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12765/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12765/events", "html_url": "https://github.com/pytorch/pytorch/issues/12765", "id": 371122794, "node_id": "MDU6SXNzdWUzNzExMjI3OTQ=", "number": 12765, "title": "RFC: Distinguish between const T* and T* in C++ API for pointer access", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-17T15:00:35Z", "updated_at": "2018-10-23T07:38:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>This is a request for comment. It does <strong>not</strong> indicate that we plan to do this; it's just to get the temperature of the community on this issue.</p>\n<h2><g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png\">\ud83d\ude80</g-emoji> Feature</h2>\n<p>Presently, in the C++ API, we have the following methods for accessing data pointers on tensors:</p>\n<pre><code>template &lt;typename T&gt; T* data();\nvoid* data_ptr();\n</code></pre>\n<p>These methods always return a non-const pointer. The proposal is to make it possible to get a const pointer from Tensor. There are two variants to this proposal:</p>\n<ol>\n<li>Add a <code>const_data()</code> method for the <code>const T*</code> variation.</li>\n<li>Make <code>data()</code> return a <code>const T*</code>, and add <code>mutable_data</code> which gives the non-const version</li>\n</ol>\n<h2>Discussion</h2>\n<p>Why am I bringing this up?</p>\n<ul>\n<li>I'm trying to line up the Caffe2 tensor API with the PyTorch API, and Caffe2's data() method historical returned a const pointer. So we have to make a decision, either to make Caffe2's non-const, or to make PyTorch's const.</li>\n<li>It is more const-correct, c.f. <a href=\"https://isocpp.org/wiki/faq/const-correctness\" rel=\"nofollow\">https://isocpp.org/wiki/faq/const-correctness</a></li>\n</ul>\n<p>Variation (2) is BC-breaking and probably will break any code that uses <code>data()</code> directly to mutate user data, both internal and external code.</p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6429851\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/goldsborough\">@goldsborough</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17890620\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dzhulgakov\">@dzhulgakov</a></p>", "body_text": "This is a request for comment. It does not indicate that we plan to do this; it's just to get the temperature of the community on this issue.\n\ud83d\ude80 Feature\nPresently, in the C++ API, we have the following methods for accessing data pointers on tensors:\ntemplate <typename T> T* data();\nvoid* data_ptr();\n\nThese methods always return a non-const pointer. The proposal is to make it possible to get a const pointer from Tensor. There are two variants to this proposal:\n\nAdd a const_data() method for the const T* variation.\nMake data() return a const T*, and add mutable_data which gives the non-const version\n\nDiscussion\nWhy am I bringing this up?\n\nI'm trying to line up the Caffe2 tensor API with the PyTorch API, and Caffe2's data() method historical returned a const pointer. So we have to make a decision, either to make Caffe2's non-const, or to make PyTorch's const.\nIt is more const-correct, c.f. https://isocpp.org/wiki/faq/const-correctness\n\nVariation (2) is BC-breaking and probably will break any code that uses data() directly to mutate user data, both internal and external code.\nCC @goldsborough @dzhulgakov", "body": "This is a request for comment. It does **not** indicate that we plan to do this; it's just to get the temperature of the community on this issue.\r\n\r\n## \ud83d\ude80 Feature\r\n\r\nPresently, in the C++ API, we have the following methods for accessing data pointers on tensors:\r\n\r\n```\r\ntemplate <typename T> T* data();\r\nvoid* data_ptr();\r\n```\r\n\r\nThese methods always return a non-const pointer. The proposal is to make it possible to get a const pointer from Tensor. There are two variants to this proposal:\r\n\r\n1. Add a `const_data()` method for the `const T*` variation.\r\n2. Make `data()` return a `const T*`, and add `mutable_data` which gives the non-const version\r\n\r\n## Discussion\r\n\r\nWhy am I bringing this up?\r\n\r\n- I'm trying to line up the Caffe2 tensor API with the PyTorch API, and Caffe2's data() method historical returned a const pointer. So we have to make a decision, either to make Caffe2's non-const, or to make PyTorch's const.\r\n- It is more const-correct, c.f. https://isocpp.org/wiki/faq/const-correctness\r\n\r\nVariation (2) is BC-breaking and probably will break any code that uses `data()` directly to mutate user data, both internal and external code.\r\n\r\nCC @goldsborough @dzhulgakov "}