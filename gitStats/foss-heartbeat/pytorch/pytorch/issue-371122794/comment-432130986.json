{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/432130986", "html_url": "https://github.com/pytorch/pytorch/issues/12765#issuecomment-432130986", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12765", "id": 432130986, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjEzMDk4Ng==", "user": {"login": "cbreak-black", "id": 227017, "node_id": "MDQ6VXNlcjIyNzAxNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/227017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbreak-black", "html_url": "https://github.com/cbreak-black", "followers_url": "https://api.github.com/users/cbreak-black/followers", "following_url": "https://api.github.com/users/cbreak-black/following{/other_user}", "gists_url": "https://api.github.com/users/cbreak-black/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbreak-black/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbreak-black/subscriptions", "organizations_url": "https://api.github.com/users/cbreak-black/orgs", "repos_url": "https://api.github.com/users/cbreak-black/repos", "events_url": "https://api.github.com/users/cbreak-black/events{/privacy}", "received_events_url": "https://api.github.com/users/cbreak-black/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-23T07:38:05Z", "updated_at": "2018-10-23T07:38:05Z", "author_association": "NONE", "body_html": "<p>Typically, C++ containers that represent a value (as opposed to representing a pointer to a value such as unique_ptr) have transitive const correctness. They provide a <code>T const * data() const</code> and a <code>T * data()</code> overload. The only reason to explicitly add a const_data() overload is to make it easier to force constness (but that doesn't add much, casting can easily be used to do that as well). The only reason to not add a non-const data() but instead a mutable_data would be to encourage explicitness about mutability.</p>\n<p><a href=\"https://en.cppreference.com/w/cpp/container/vector/data\" rel=\"nofollow\">https://en.cppreference.com/w/cpp/container/vector/data</a></p>", "body_text": "Typically, C++ containers that represent a value (as opposed to representing a pointer to a value such as unique_ptr) have transitive const correctness. They provide a T const * data() const and a T * data() overload. The only reason to explicitly add a const_data() overload is to make it easier to force constness (but that doesn't add much, casting can easily be used to do that as well). The only reason to not add a non-const data() but instead a mutable_data would be to encourage explicitness about mutability.\nhttps://en.cppreference.com/w/cpp/container/vector/data", "body": "Typically, C++ containers that represent a value (as opposed to representing a pointer to a value such as unique_ptr) have transitive const correctness. They provide a `T const * data() const` and a `T * data()` overload. The only reason to explicitly add a const_data() overload is to make it easier to force constness (but that doesn't add much, casting can easily be used to do that as well). The only reason to not add a non-const data() but instead a mutable_data would be to encourage explicitness about mutability.\r\n\r\nhttps://en.cppreference.com/w/cpp/container/vector/data"}