{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/385339461", "html_url": "https://github.com/pytorch/pytorch/pull/6392#issuecomment-385339461", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6392", "id": 385339461, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTMzOTQ2MQ==", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-30T08:33:21Z", "updated_at": "2018-04-30T08:53:55Z", "author_association": "COLLABORATOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> ahah, sorry about the dump.</p>\n<p>I actually didn't know we could make the output ONNX compliant by using the domain field. It's just a matter of munging the op strings, so why not? I can give it a shot.<br>\nThe value I see is that at least other libraries will be able to recognize that the ONNX file was created for a domain that they can't handle, and manage the situation gracefully.</p>\n<p>The <code>op_version</code> bit, however, is going to be hard to maintain at the current stage, given that PyTorch tends to evolve rapidly. Maybe we could leave versioning for the future?</p>\n<p>I propose that we add the <code>domain</code> part and merge, while <code>import_opset</code> and <code>op_version</code> remain as TODO.</p>", "body_text": "@ezyang ahah, sorry about the dump.\nI actually didn't know we could make the output ONNX compliant by using the domain field. It's just a matter of munging the op strings, so why not? I can give it a shot.\nThe value I see is that at least other libraries will be able to recognize that the ONNX file was created for a domain that they can't handle, and manage the situation gracefully.\nThe op_version bit, however, is going to be hard to maintain at the current stage, given that PyTorch tends to evolve rapidly. Maybe we could leave versioning for the future?\nI propose that we add the domain part and merge, while import_opset and op_version remain as TODO.", "body": "@ezyang ahah, sorry about the dump.\r\n\r\nI actually didn't know we could make the output ONNX compliant by using the domain field. It's just a matter of munging the op strings, so why not? I can give it a shot.\r\nThe value I see is that at least other libraries will be able to recognize that the ONNX file was created for a domain that they can't handle, and manage the situation gracefully.\r\n\r\nThe `op_version` bit, however, is going to be hard to maintain at the current stage, given that PyTorch tends to evolve rapidly. Maybe we could leave versioning for the future?\r\n\r\nI propose that we add the `domain` part and merge, while `import_opset` and `op_version` remain as TODO."}