{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/385306499", "html_url": "https://github.com/pytorch/pytorch/pull/6392#issuecomment-385306499", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6392", "id": 385306499, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTMwNjQ5OQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-30T03:18:19Z", "updated_at": "2018-04-30T03:18:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=191033\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lantiga\">@lantiga</a> That protobuf dump, would have been nice to see the actual field names XD</p>\n<p>Looking at this export format, it is not ONNX-compliant. \"Now wait Edward,\" you might say, \"Of course this isn't going to be ONNX-compliant, it's not exporting ONNX operators, it's exporting ATen operators.\" Yes this is true, but in fact ONNX has a specific provision for this, by specifying a <em>domain</em> on the operator (<a href=\"https://github.com/onnx/onnx/blob/master/docs/Versioning.md#operator-versioning\">https://github.com/onnx/onnx/blob/master/docs/Versioning.md#operator-versioning</a>). So instead of exporting \"aten::foo\" in the default namespace (ONNX), it is better for interoperability if you export it having <code>domain</code> equal to something like <code>org.pytorch.aten</code>, and the operator name simply <code>foo</code>. (You should also technically export an <code>opset_import</code>)</p>", "body_text": "@lantiga That protobuf dump, would have been nice to see the actual field names XD\nLooking at this export format, it is not ONNX-compliant. \"Now wait Edward,\" you might say, \"Of course this isn't going to be ONNX-compliant, it's not exporting ONNX operators, it's exporting ATen operators.\" Yes this is true, but in fact ONNX has a specific provision for this, by specifying a domain on the operator (https://github.com/onnx/onnx/blob/master/docs/Versioning.md#operator-versioning). So instead of exporting \"aten::foo\" in the default namespace (ONNX), it is better for interoperability if you export it having domain equal to something like org.pytorch.aten, and the operator name simply foo. (You should also technically export an opset_import)", "body": "@lantiga That protobuf dump, would have been nice to see the actual field names XD\r\n\r\nLooking at this export format, it is not ONNX-compliant. \"Now wait Edward,\" you might say, \"Of course this isn't going to be ONNX-compliant, it's not exporting ONNX operators, it's exporting ATen operators.\" Yes this is true, but in fact ONNX has a specific provision for this, by specifying a *domain* on the operator (https://github.com/onnx/onnx/blob/master/docs/Versioning.md#operator-versioning). So instead of exporting \"aten::foo\" in the default namespace (ONNX), it is better for interoperability if you export it having `domain` equal to something like `org.pytorch.aten`, and the operator name simply `foo`. (You should also technically export an `opset_import`)"}