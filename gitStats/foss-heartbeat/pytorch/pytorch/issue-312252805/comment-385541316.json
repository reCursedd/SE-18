{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/385541316", "html_url": "https://github.com/pytorch/pytorch/pull/6392#issuecomment-385541316", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6392", "id": 385541316, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTU0MTMxNg==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-30T21:58:08Z", "updated_at": "2018-04-30T21:58:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=191033\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lantiga\">@lantiga</a> Don't worry about it, it would have been nice if you had it easily available, but if it's difficult no worries. Not sure why protoc is not printing fields; probably the onnx library can also do this for you.</p>\n<blockquote>\n<p>I actually didn't know we could make the output ONNX compliant by using the domain field. It's just a matter of munging the op strings, so why not? I can give it a shot.<br>\nThe value I see is that at least other libraries will be able to recognize that the ONNX file was created for a domain that they can't handle, and manage the situation gracefully.</p>\n</blockquote>\n<p>Yeah, otherwise they will be like, \"This ONNX file fails validation, it uses ONNX operator aten::foo which I don't know about.\"</p>\n<blockquote>\n<p>The op_version bit, however, is going to be hard to maintain at the current stage, given that PyTorch tends to evolve rapidly. Maybe we could leave versioning for the future?</p>\n</blockquote>\n<p>Yeah, just set it to some number and leave it there for now.</p>", "body_text": "@lantiga Don't worry about it, it would have been nice if you had it easily available, but if it's difficult no worries. Not sure why protoc is not printing fields; probably the onnx library can also do this for you.\n\nI actually didn't know we could make the output ONNX compliant by using the domain field. It's just a matter of munging the op strings, so why not? I can give it a shot.\nThe value I see is that at least other libraries will be able to recognize that the ONNX file was created for a domain that they can't handle, and manage the situation gracefully.\n\nYeah, otherwise they will be like, \"This ONNX file fails validation, it uses ONNX operator aten::foo which I don't know about.\"\n\nThe op_version bit, however, is going to be hard to maintain at the current stage, given that PyTorch tends to evolve rapidly. Maybe we could leave versioning for the future?\n\nYeah, just set it to some number and leave it there for now.", "body": "@lantiga Don't worry about it, it would have been nice if you had it easily available, but if it's difficult no worries. Not sure why protoc is not printing fields; probably the onnx library can also do this for you.\r\n\r\n> I actually didn't know we could make the output ONNX compliant by using the domain field. It's just a matter of munging the op strings, so why not? I can give it a shot.\r\n> The value I see is that at least other libraries will be able to recognize that the ONNX file was created for a domain that they can't handle, and manage the situation gracefully.\r\n\r\nYeah, otherwise they will be like, \"This ONNX file fails validation, it uses ONNX operator aten::foo which I don't know about.\"\r\n\r\n> The op_version bit, however, is going to be hard to maintain at the current stage, given that PyTorch tends to evolve rapidly. Maybe we could leave versioning for the future?\r\n\r\nYeah, just set it to some number and leave it there for now."}