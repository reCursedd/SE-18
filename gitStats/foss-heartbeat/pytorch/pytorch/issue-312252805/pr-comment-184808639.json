{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184808639", "pull_request_review_id": 116085596, "id": 184808639, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDgwODYzOQ==", "diff_hunk": "@@ -131,11 +125,9 @@ template<>\n struct Reader<int64_t> : ReaderBase {\n   Reader(pb_callback_t& cb) : ReaderBase(cb) {}\n   virtual void decode(pb_istream_t *stream) override {\n-    uint64_t val;\n-    if (!pb_decode_varint(stream, &val)) {\n+    if (!pb_decode_varint(stream, reinterpret_cast<uint64_t*>(&value))) {", "path": "torch/csrc/jit/import.cpp", "position": null, "original_position": 41, "commit_id": "a907ce98f4875f10b0c45be77ec3556236be5ee3", "original_commit_id": "c3137d69cc30ff7a6027e6956d7be46c6bf13e77", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "Yeah, it looks fishy, but apparently this is the way it's intended to be used\r\n(https://github.com/nanopb/nanopb/blob/master/pb_decode.c#L1289 and https://github.com/nanopb/nanopb/blob/master/tests/decode_unittests/decode_unittests.c).\r\nEncoding is similar, see @ezyang's comment (https://github.com/pytorch/pytorch/blob/master/torch/csrc/onnx/onnx.cpp#L12).\r\n\r\nI'm obviously not an expert, but from what I read protobuf encodes all integers (signed and unsigned) as a `varint` internally (https://developers.google.com/protocol-buffers/docs/encoding?csw=1#varints). A `varint` is decoded by nanopb into 64 bits, meant to be interpreted as a signed or unsigned integer depending what was originally encoded in the `varint`. Thus negative `int64_t` will be returned as such after the `reinterpret_cast`.", "created_at": "2018-04-27T21:14:49Z", "updated_at": "2018-11-23T15:43:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/6392#discussion_r184808639", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6392", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184808639"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6392#discussion_r184808639"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6392"}}, "body_html": "<p>Yeah, it looks fishy, but apparently this is the way it's intended to be used<br>\n(<a href=\"https://github.com/nanopb/nanopb/blob/master/pb_decode.c#L1289\">https://github.com/nanopb/nanopb/blob/master/pb_decode.c#L1289</a> and <a href=\"https://github.com/nanopb/nanopb/blob/master/tests/decode_unittests/decode_unittests.c\">https://github.com/nanopb/nanopb/blob/master/tests/decode_unittests/decode_unittests.c</a>).<br>\nEncoding is similar, see <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a>'s comment (<a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/onnx/onnx.cpp#L12\">https://github.com/pytorch/pytorch/blob/master/torch/csrc/onnx/onnx.cpp#L12</a>).</p>\n<p>I'm obviously not an expert, but from what I read protobuf encodes all integers (signed and unsigned) as a <code>varint</code> internally (<a href=\"https://developers.google.com/protocol-buffers/docs/encoding?csw=1#varints\" rel=\"nofollow\">https://developers.google.com/protocol-buffers/docs/encoding?csw=1#varints</a>). A <code>varint</code> is decoded by nanopb into 64 bits, meant to be interpreted as a signed or unsigned integer depending what was originally encoded in the <code>varint</code>. Thus negative <code>int64_t</code> will be returned as such after the <code>reinterpret_cast</code>.</p>", "body_text": "Yeah, it looks fishy, but apparently this is the way it's intended to be used\n(https://github.com/nanopb/nanopb/blob/master/pb_decode.c#L1289 and https://github.com/nanopb/nanopb/blob/master/tests/decode_unittests/decode_unittests.c).\nEncoding is similar, see @ezyang's comment (https://github.com/pytorch/pytorch/blob/master/torch/csrc/onnx/onnx.cpp#L12).\nI'm obviously not an expert, but from what I read protobuf encodes all integers (signed and unsigned) as a varint internally (https://developers.google.com/protocol-buffers/docs/encoding?csw=1#varints). A varint is decoded by nanopb into 64 bits, meant to be interpreted as a signed or unsigned integer depending what was originally encoded in the varint. Thus negative int64_t will be returned as such after the reinterpret_cast.", "in_reply_to_id": 184626606}