{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206008822", "pull_request_review_id": 141383805, "id": 206008822, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAwODgyMg==", "diff_hunk": "@@ -523,11 +541,14 @@ struct GraphFuser {\n   std::pair<graph_node_list::iterator, bool> scanNode(Node * consumer) {\n     auto stage_guard = block->owningGraph()->setStageTemporary(consumer->stage());\n     if(isFusableAsExitNode(consumer)) {\n+      value_list inputs;\n+      auto consumer_inputs = consumer->kind() == aten::cat ?", "path": "torch/csrc/jit/passes/graph_fuser.cpp", "position": 101, "original_position": 101, "commit_id": "50f5582427e9b620e8bee6a2926cfb247bde8b00", "original_commit_id": "c4b8a291c2fcf54d7e4f5cc97b8be2c704cb1b1d", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This is a bit awkward. One way to simplify the logic would be to first apply a fuse-cat pass, and then do the graph fuser. But that would require either implementing FusedCat as an op or implementing a fission cat pass. I think this is fine for now. But if we add more special case (e.g. split/chunk handling) we might want to formalize the \"create special versions we care a bout\", do fusion, \"revert special versions\" path.", "created_at": "2018-07-30T03:41:05Z", "updated_at": "2018-11-23T15:48:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/9948#discussion_r206008822", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9948", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206008822"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9948#discussion_r206008822"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9948"}}, "body_html": "<p>This is a bit awkward. One way to simplify the logic would be to first apply a fuse-cat pass, and then do the graph fuser. But that would require either implementing FusedCat as an op or implementing a fission cat pass. I think this is fine for now. But if we add more special case (e.g. split/chunk handling) we might want to formalize the \"create special versions we care a bout\", do fusion, \"revert special versions\" path.</p>", "body_text": "This is a bit awkward. One way to simplify the logic would be to first apply a fuse-cat pass, and then do the graph fuser. But that would require either implementing FusedCat as an op or implementing a fission cat pass. I think this is fine for now. But if we add more special case (e.g. split/chunk handling) we might want to formalize the \"create special versions we care a bout\", do fusion, \"revert special versions\" path."}