{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233641048", "pull_request_review_id": 175104750, "id": 233641048, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY0MTA0OA==", "diff_hunk": "@@ -461,6 +461,8 @@ void THCTensor_(range)(THCState *state, THCTensor *r_, accreal xmin, accreal xma\n void THCTensor_(arange)(THCState* state, THCTensor *r_, accreal xmin, accreal xmax, accreal step) {\n   THCAssertSameGPU(THCTensor_(checkGPU)(state, 1, r_));\n   THArgCheck(step > 0 || step < 0, 3, \"step must be nonzero\");\n+  THArgCheck(std::isfinite(xmin) && std::isfinite(xmax)\n+              , 1, \"unsupported range: \", xmin, \" -> \", xmax);\n   THArgCheck(((step > 0) && (xmax >= xmin)) || ((step < 0) && (xmax <= xmin))\n               , 2, \"upper bound and larger bound inconsistent with step sign\");\n   ptrdiff_t size = (ptrdiff_t) ceil(ScalarConvert<accreal, double>::to(xmax - xmin) / step);", "path": "aten/src/THC/generic/THCTensorMath.cu", "position": null, "original_position": 8, "commit_id": "aaf6e3620782c271a6572650664a46d48a3d8b59", "original_commit_id": "c715fcc9bfe06f51c0fd8ca8f8a279c41d9af40d", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "body": "Can this still overflow `ptrdiff_t` if we pass something like torch.arange(1.175494351e-38, 3.402823466e+38)? Can `xmax-xmin` itself turn to `inf` if `xmin` is negative and `xmax - xmin` does not fit in double?\r\n\r\nIf there's a reliable way to raise an error if the resulting terror has negative size (it seems it happened with inf as a result of overflow of ptrdiff_t?), it would be great\r\n", "created_at": "2018-11-14T22:13:12Z", "updated_at": "2018-11-23T15:54:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/13915#discussion_r233641048", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13915", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/233641048"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13915#discussion_r233641048"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13915"}}, "body_html": "<p>Can this still overflow <code>ptrdiff_t</code> if we pass something like torch.arange(1.175494351e-38, 3.402823466e+38)? Can <code>xmax-xmin</code> itself turn to <code>inf</code> if <code>xmin</code> is negative and <code>xmax - xmin</code> does not fit in double?</p>\n<p>If there's a reliable way to raise an error if the resulting terror has negative size (it seems it happened with inf as a result of overflow of ptrdiff_t?), it would be great</p>", "body_text": "Can this still overflow ptrdiff_t if we pass something like torch.arange(1.175494351e-38, 3.402823466e+38)? Can xmax-xmin itself turn to inf if xmin is negative and xmax - xmin does not fit in double?\nIf there's a reliable way to raise an error if the resulting terror has negative size (it seems it happened with inf as a result of overflow of ptrdiff_t?), it would be great"}