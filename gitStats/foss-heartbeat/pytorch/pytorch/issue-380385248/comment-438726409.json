{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/438726409", "html_url": "https://github.com/pytorch/pytorch/pull/13915#issuecomment-438726409", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13915", "id": 438726409, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODcyNjQwOQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-14T16:30:32Z", "updated_at": "2018-11-14T16:30:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Appears so:</p>\n<pre><code>Tensor &amp; CPUFloatType::_th_arange_out(Tensor &amp; result, Scalar start, Scalar end, Scalar step) const {\n    // DeviceGuard omitted\n    auto result_ = checked_tensor_unwrap(result,\"result\",0, false, Backend::CPU, ScalarType::Float);\n    auto start_ = start.toDouble();\n    auto end_ = end.toDouble();\n    auto step_ = step.toDouble();\n    THFloatTensor_arange(result_, start_, end_, step_);\n    return result;\n}\n</code></pre>", "body_text": "Appears so:\nTensor & CPUFloatType::_th_arange_out(Tensor & result, Scalar start, Scalar end, Scalar step) const {\n    // DeviceGuard omitted\n    auto result_ = checked_tensor_unwrap(result,\"result\",0, false, Backend::CPU, ScalarType::Float);\n    auto start_ = start.toDouble();\n    auto end_ = end.toDouble();\n    auto step_ = step.toDouble();\n    THFloatTensor_arange(result_, start_, end_, step_);\n    return result;\n}", "body": "Appears so:\r\n\r\n```\r\nTensor & CPUFloatType::_th_arange_out(Tensor & result, Scalar start, Scalar end, Scalar step) const {\r\n    // DeviceGuard omitted\r\n    auto result_ = checked_tensor_unwrap(result,\"result\",0, false, Backend::CPU, ScalarType::Float);\r\n    auto start_ = start.toDouble();\r\n    auto end_ = end.toDouble();\r\n    auto step_ = step.toDouble();\r\n    THFloatTensor_arange(result_, start_, end_, step_);\r\n    return result;\r\n}\r\n```"}