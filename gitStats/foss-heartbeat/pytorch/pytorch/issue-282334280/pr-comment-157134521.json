{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157134521", "pull_request_review_id": 83727701, "id": 157134521, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzEzNDUyMQ==", "diff_hunk": "@@ -26,30 +27,25 @@ class Normal(Distribution):\n \n     def __init__(self, mean, std):\n         self.mean, self.std = broadcast_all(mean, std)\n+        if isinstance(mean, Number) and isinstance(std, Number):\n+            batch_shape = ()\n+        else:\n+            batch_shape = self.mean.size()\n+        super(Normal, self).__init__(batch_shape)\n \n     def sample(self, sample_shape=()):\n-        if len(sample_shape) == 0:\n-            return torch.normal(self.mean, self.std)\n-        elif len(sample_shape) == 1:\n-            return torch.normal(expand_n(self.mean, sample_shape[0]), expand_n(self.std, sample_shape[0]))\n-        else:\n-            raise NotImplementedError(\"sample is not implemented for len(sample_shape)>1\")\n+        shape = self._extended_shape(sample_shape)\n+        return torch.normal(self.mean.expand(shape), self.std.expand(shape))\n \n     def rsample(self, sample_shape=()):\n-        if len(sample_shape) == 0:\n-            eps = self.mean.new((self.mean + self.std).size())\n-            eps.normal_()\n-            return self.mean + self.std * eps\n-        elif len(sample_shape) == 1:\n-            expanded_mean = expand_n(self.mean, sample_shape[0])\n-            expanded_std = expand_n(self.std, sample_shape[0])\n-            eps = expanded_mean.new()\n-            eps.normal_()\n-            return expanded_mean + expanded_std * eps\n-        else:\n-            raise NotImplementedError(\"rsample is not implemented for len(sample_shape)>1\")\n+        shape = self._extended_shape(sample_shape)", "path": "torch/distributions/normal.py", "position": null, "original_position": 41, "commit_id": "ba914cea360f1bd18c1da2086370c7d7df5e0bf9", "original_commit_id": "6dad9c3b0c728e1260bedbe2ae7728d46b46d4dc", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "nit: This is already clear, but you could rely more on other ops to broadcast?\r\n```py\r\nshape = self._extended_shape(sample_shape)\r\neps = self.mean.new(shape).normal()\r\nreturn self.mean + eps * self.std\r\n```", "created_at": "2017-12-15T07:01:08Z", "updated_at": "2018-11-23T15:37:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/4193#discussion_r157134521", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4193", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157134521"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4193#discussion_r157134521"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4193"}}, "body_html": "<p>nit: This is already clear, but you could rely more on other ops to broadcast?</p>\n<div class=\"highlight highlight-source-python\"><pre>shape <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._extended_shape(sample_shape)\neps <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.mean.new(shape).normal()\n<span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.mean <span class=\"pl-k\">+</span> eps <span class=\"pl-k\">*</span> <span class=\"pl-c1\">self</span>.std</pre></div>", "body_text": "nit: This is already clear, but you could rely more on other ops to broadcast?\nshape = self._extended_shape(sample_shape)\neps = self.mean.new(shape).normal()\nreturn self.mean + eps * self.std"}