{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/351935469", "html_url": "https://github.com/pytorch/pytorch/pull/4193#issuecomment-351935469", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4193", "id": 351935469, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTkzNTQ2OQ==", "user": {"login": "neerajprad", "id": 1762463, "node_id": "MDQ6VXNlcjE3NjI0NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1762463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neerajprad", "html_url": "https://github.com/neerajprad", "followers_url": "https://api.github.com/users/neerajprad/followers", "following_url": "https://api.github.com/users/neerajprad/following{/other_user}", "gists_url": "https://api.github.com/users/neerajprad/gists{/gist_id}", "starred_url": "https://api.github.com/users/neerajprad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neerajprad/subscriptions", "organizations_url": "https://api.github.com/users/neerajprad/orgs", "repos_url": "https://api.github.com/users/neerajprad/repos", "events_url": "https://api.github.com/users/neerajprad/events{/privacy}", "received_events_url": "https://api.github.com/users/neerajprad/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-15T07:40:00Z", "updated_at": "2017-12-15T07:40:00Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>What is the purpose of the extreme value tests? Does this help avoid nan bugs?</p>\n</blockquote>\n<p>We don't currently have to deal with <code>nan</code> values for Categorical / Bernoulli since they take in integer arguments, and do a lookup on the prob scores. This was more to confine the probability mass and get exact samples to assert on in the absence of a statistical test to check for mean and std (which I suppose can be added now too). e.g. if we are doing something wrong while converting the tensor to a 2d matrix and back again in <code>categorical.log_prob</code>.</p>\n<blockquote>\n<p>What is our plan for upcoming scalar support? (what will change?)</p>\n</blockquote>\n<p>There will be some small modification to the methods in <code>utils.py</code>, and the constructor. For certain distributions (not any currently) where the event dimension is non empty, and we are upcasting, there may be a change needed depending on how we implement it. For the most part, the changes should be relatively minor and self-contained.</p>", "body_text": "What is the purpose of the extreme value tests? Does this help avoid nan bugs?\n\nWe don't currently have to deal with nan values for Categorical / Bernoulli since they take in integer arguments, and do a lookup on the prob scores. This was more to confine the probability mass and get exact samples to assert on in the absence of a statistical test to check for mean and std (which I suppose can be added now too). e.g. if we are doing something wrong while converting the tensor to a 2d matrix and back again in categorical.log_prob.\n\nWhat is our plan for upcoming scalar support? (what will change?)\n\nThere will be some small modification to the methods in utils.py, and the constructor. For certain distributions (not any currently) where the event dimension is non empty, and we are upcasting, there may be a change needed depending on how we implement it. For the most part, the changes should be relatively minor and self-contained.", "body": "> What is the purpose of the extreme value tests? Does this help avoid nan bugs?\r\n\r\nWe don't currently have to deal with `nan` values for Categorical / Bernoulli since they take in integer arguments, and do a lookup on the prob scores. This was more to confine the probability mass and get exact samples to assert on in the absence of a statistical test to check for mean and std (which I suppose can be added now too). e.g. if we are doing something wrong while converting the tensor to a 2d matrix and back again in `categorical.log_prob`.\r\n\r\n> What is our plan for upcoming scalar support? (what will change?)\r\n\r\nThere will be some small modification to the methods in `utils.py`, and the constructor. For certain distributions (not any currently) where the event dimension is non empty, and we are upcasting, there may be a change needed depending on how we implement it. For the most part, the changes should be relatively minor and self-contained."}