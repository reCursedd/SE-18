{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/91840866", "pull_request_review_id": 12353346, "id": 91840866, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxODQwODY2", "diff_hunk": "@@ -0,0 +1,21 @@\n+from .function import Function\n+\n+_NOT_PROVIDED = object()\n+\n+class StochasticFunction(Function):\n+\n+    def __init__(self):\n+        self.reward = _NOT_PROVIDED", "path": "torch/autograd/stochastic_function.py", "position": 8, "original_position": 8, "commit_id": "a13e7113196241133204ee553d157b455002402a", "original_commit_id": "c1aa1ca5ce6ef9513b1381443cd4874b9645f11f", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I think it might work with `None` for now, but it feels safer this way. Right now I use it to differentiate between the case of double backward without `retain_variables == True` and when the user doesn't specify it at all. Depending on whether the super-call to `_do_backward` first checks if `self.reward` is a valid thing (not `None`), or makes sure that it didn't free the buffers, we might get different error messages. This way I can be sure that if someone doesn't specify it, it will print a clear error.", "created_at": "2016-12-10T19:34:42Z", "updated_at": "2018-11-23T15:31:58Z", "html_url": "https://github.com/pytorch/pytorch/pull/294#discussion_r91840866", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/294", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/91840866"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/294#discussion_r91840866"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/294"}}, "body_html": "<p>I think it might work with <code>None</code> for now, but it feels safer this way. Right now I use it to differentiate between the case of double backward without <code>retain_variables == True</code> and when the user doesn't specify it at all. Depending on whether the super-call to <code>_do_backward</code> first checks if <code>self.reward</code> is a valid thing (not <code>None</code>), or makes sure that it didn't free the buffers, we might get different error messages. This way I can be sure that if someone doesn't specify it, it will print a clear error.</p>", "body_text": "I think it might work with None for now, but it feels safer this way. Right now I use it to differentiate between the case of double backward without retain_variables == True and when the user doesn't specify it at all. Depending on whether the super-call to _do_backward first checks if self.reward is a valid thing (not None), or makes sure that it didn't free the buffers, we might get different error messages. This way I can be sure that if someone doesn't specify it, it will print a clear error.", "in_reply_to_id": 91779034}