{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7539", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7539/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7539/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7539/events", "html_url": "https://github.com/pytorch/pytorch/issues/7539", "id": 322630687, "node_id": "MDU6SXNzdWUzMjI2MzA2ODc=", "number": 7539, "title": "[feature request] Add boolean reduce operations", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-13T21:58:45Z", "updated_at": "2018-05-13T22:31:03Z", "closed_at": "2018-05-13T22:16:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi, I just want to ask if it is contribute welcome for adding two boolean reduce operations <code>torch.all</code> and <code>torch.any</code>. The API is the the same as <code>torch.sum</code> and <code>torch.prod</code>. These two ops treat the input tensor as boolean tensor and compute the <code>and</code> and <code>or</code> along the the specified dimension.</p>\n<p><code>torch.all</code> can be implemented as <code>torch.prod</code>, but implementing <code>torch.any</code> as <code>torch.sum</code> is dangerous because it is possible that there happen to be 256 1s in the tensor, which would gives a 0 instead of some non-zero value and in my application, I'm using a workaround for <code>torch.any</code> that looks like</p>\n<div class=\"highlight highlight-source-python\"><pre>torch.sum(x.dtype(torch.float), dim) <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span></pre></div>", "body_text": "Hi, I just want to ask if it is contribute welcome for adding two boolean reduce operations torch.all and torch.any. The API is the the same as torch.sum and torch.prod. These two ops treat the input tensor as boolean tensor and compute the and and or along the the specified dimension.\ntorch.all can be implemented as torch.prod, but implementing torch.any as torch.sum is dangerous because it is possible that there happen to be 256 1s in the tensor, which would gives a 0 instead of some non-zero value and in my application, I'm using a workaround for torch.any that looks like\ntorch.sum(x.dtype(torch.float), dim) > 0", "body": "Hi, I just want to ask if it is contribute welcome for adding two boolean reduce operations `torch.all` and `torch.any`. The API is the the same as `torch.sum` and `torch.prod`. These two ops treat the input tensor as boolean tensor and compute the `and` and `or` along the the specified dimension.\r\n\r\n`torch.all` can be implemented as `torch.prod`, but implementing `torch.any` as `torch.sum` is dangerous because it is possible that there happen to be 256 1s in the tensor, which would gives a 0 instead of some non-zero value and in my application, I'm using a workaround for `torch.any` that looks like\r\n```python\r\ntorch.sum(x.dtype(torch.float), dim) > 0\r\n```\r\n"}