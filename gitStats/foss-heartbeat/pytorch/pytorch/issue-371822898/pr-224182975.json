{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/12865", "id": 224182975, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI0MTgyOTc1", "html_url": "https://github.com/pytorch/pytorch/pull/12865", "diff_url": "https://github.com/pytorch/pytorch/pull/12865.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/12865.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12865", "number": 12865, "state": "open", "locked": false, "title": "use mkldnn for 3d / dilated convolution", "user": {"login": "mingfeima", "id": 20233731, "node_id": "MDQ6VXNlcjIwMjMzNzMx", "avatar_url": "https://avatars0.githubusercontent.com/u/20233731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingfeima", "html_url": "https://github.com/mingfeima", "followers_url": "https://api.github.com/users/mingfeima/followers", "following_url": "https://api.github.com/users/mingfeima/following{/other_user}", "gists_url": "https://api.github.com/users/mingfeima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingfeima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingfeima/subscriptions", "organizations_url": "https://api.github.com/users/mingfeima/orgs", "repos_url": "https://api.github.com/users/mingfeima/repos", "events_url": "https://api.github.com/users/mingfeima/events{/privacy}", "received_events_url": "https://api.github.com/users/mingfeima/received_events", "type": "User", "site_admin": false}, "body": "this PR enables mkldnn conv3d path in ATen and bypass `THNN` counterpart, beneficial for models like 3D-UNet.\r\n\r\nthe benchmark script reduces from `140ms` to `42ms` on xeon skylake 8180 (2*28 cores @2.5GHz):\r\n```python\r\nfrom __future__ import print_function\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\nfrom torch.autograd  import Variable\r\nimport torch.optim as optim\r\nimport time\r\nimport random\r\nclass conv3d_net(nn.Module):\r\n    def __init__(self):\r\n        super(conv3d_net, self).__init__()\r\n        self.conv3d_1 = nn.Conv3d(1, 64, kernel_size=3)\r\n        self.conv3d_2 = nn.Conv3d(64, 64, kernel_size=3)\r\n        self.conv3d_3 = nn.Conv3d(64, 128, kernel_size=3)\r\n        self.conv3d_4 = nn.Conv3d(128, 128, kernel_size=3)\r\n        self.fc1 = nn.Linear(6400, 512)\r\n        self.fc2 = nn.Linear(512, 512)\r\n\r\n    def forward(self, x):\r\n        x = self.conv3d_2(self.conv3d_1(x))\r\n        x = F.max_pool3d(x, 2)\r\n        x = self.conv3d_4(self.conv3d_3(x))\r\n        x = F.max_pool3d(x, 2)\r\n        x = x.view(-1, 6400)\r\n        x = self.fc2(self.fc1(x))\r\n        return F.log_softmax(x, 0)\r\n\r\n\r\nmodel = conv3d_net()\r\noptimizer = optim.SGD(model.parameters(), lr = 0.1, momentum = 0.9)\r\n\r\nwarmup = 5\r\ncycle = 10\r\nstart_t = 0\r\nend_t = 0\r\ndef train():\r\n    #warmup\r\n    data = torch.randn(4, 1, 35, 35, 20)\r\n    target = torch.LongTensor(4).zero_()\r\n    for j in range(4):\r\n        hot_idx = random.randint(0, 511)\r\n        target[j]= hot_idx\r\n    data, target = Variable(data), Variable(target)\r\n    for i in range(warmup+cycle):\r\n        if (i == warmup):\r\n            start_t = time.time()\r\n        #optimizer.zero_grad()\r\n        output = model(data)\r\n        loss = F.nll_loss(output, target)\r\n        loss.backward()\r\n        #optimizer.step()\r\n    end_t = time.time()\r\n    duration = (end_t - start_t)*1000.0/cycle\r\n    print(\"avg time\", duration, \"millisecond\")\r\n\r\ntrain()\r\n```", "created_at": "2018-10-19T06:27:23Z", "updated_at": "2018-11-22T02:32:42Z", "closed_at": null, "merged_at": null, "merge_commit_sha": "861c41bda10d04000d7b9fbb2bc47d3c95751871", "assignee": null, "assignees": [], "requested_reviewers": [], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12865/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12865/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12865/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/02a736ee859922e4e334ae13949dde8e82a84347", "head": {"label": "mingfeima:mkldnn_conv", "ref": "mkldnn_conv", "sha": "02a736ee859922e4e334ae13949dde8e82a84347", "user": {"login": "mingfeima", "id": 20233731, "node_id": "MDQ6VXNlcjIwMjMzNzMx", "avatar_url": "https://avatars0.githubusercontent.com/u/20233731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingfeima", "html_url": "https://github.com/mingfeima", "followers_url": "https://api.github.com/users/mingfeima/followers", "following_url": "https://api.github.com/users/mingfeima/following{/other_user}", "gists_url": "https://api.github.com/users/mingfeima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingfeima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingfeima/subscriptions", "organizations_url": "https://api.github.com/users/mingfeima/orgs", "repos_url": "https://api.github.com/users/mingfeima/repos", "events_url": "https://api.github.com/users/mingfeima/events{/privacy}", "received_events_url": "https://api.github.com/users/mingfeima/received_events", "type": "User", "site_admin": false}, "repo": {"id": 138236721, "node_id": "MDEwOlJlcG9zaXRvcnkxMzgyMzY3MjE=", "name": "pytorch", "full_name": "mingfeima/pytorch", "private": false, "owner": {"login": "mingfeima", "id": 20233731, "node_id": "MDQ6VXNlcjIwMjMzNzMx", "avatar_url": "https://avatars0.githubusercontent.com/u/20233731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingfeima", "html_url": "https://github.com/mingfeima", "followers_url": "https://api.github.com/users/mingfeima/followers", "following_url": "https://api.github.com/users/mingfeima/following{/other_user}", "gists_url": "https://api.github.com/users/mingfeima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingfeima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingfeima/subscriptions", "organizations_url": "https://api.github.com/users/mingfeima/orgs", "repos_url": "https://api.github.com/users/mingfeima/repos", "events_url": "https://api.github.com/users/mingfeima/events{/privacy}", "received_events_url": "https://api.github.com/users/mingfeima/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/mingfeima/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/mingfeima/pytorch", "forks_url": "https://api.github.com/repos/mingfeima/pytorch/forks", "keys_url": "https://api.github.com/repos/mingfeima/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/mingfeima/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/mingfeima/pytorch/teams", "hooks_url": "https://api.github.com/repos/mingfeima/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/mingfeima/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/mingfeima/pytorch/events", "assignees_url": "https://api.github.com/repos/mingfeima/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/mingfeima/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/mingfeima/pytorch/tags", "blobs_url": "https://api.github.com/repos/mingfeima/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/mingfeima/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/mingfeima/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/mingfeima/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/mingfeima/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/mingfeima/pytorch/languages", "stargazers_url": "https://api.github.com/repos/mingfeima/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/mingfeima/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/mingfeima/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/mingfeima/pytorch/subscription", "commits_url": "https://api.github.com/repos/mingfeima/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/mingfeima/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/mingfeima/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/mingfeima/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/mingfeima/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/mingfeima/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/mingfeima/pytorch/merges", "archive_url": "https://api.github.com/repos/mingfeima/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/mingfeima/pytorch/downloads", "issues_url": "https://api.github.com/repos/mingfeima/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/mingfeima/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/mingfeima/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/mingfeima/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/mingfeima/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/mingfeima/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/mingfeima/pytorch/deployments", "created_at": "2018-06-22T00:49:24Z", "updated_at": "2018-10-18T02:50:58Z", "pushed_at": "2018-11-22T00:28:43Z", "git_url": "git://github.com/mingfeima/pytorch.git", "ssh_url": "git@github.com:mingfeima/pytorch.git", "clone_url": "https://github.com/mingfeima/pytorch.git", "svn_url": "https://github.com/mingfeima/pytorch", "homepage": "http://pytorch.org", "size": 86567, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": false, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 0, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 0, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "34db39d87a32ec4524359af86e9fcd38a750c5d2", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T14:27:35Z", "pushed_at": "2018-11-24T12:42:01Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89656, "stargazers_count": 21591, "watchers_count": 21591, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5154, "mirror_url": null, "archived": false, "open_issues_count": 2196, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5154, "open_issues": 2196, "watchers": 21591, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12865"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12865"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/12865"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/12865/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12865/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12865/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/02a736ee859922e4e334ae13949dde8e82a84347"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>this PR enables mkldnn conv3d path in ATen and bypass <code>THNN</code> counterpart, beneficial for models like 3D-UNet.</p>\n<p>the benchmark script reduces from <code>140ms</code> to <code>42ms</code> on xeon skylake 8180 (2*28 cores @2.5GHz):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n<span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn <span class=\"pl-k\">as</span> nn\n<span class=\"pl-k\">import</span> torch.nn.functional <span class=\"pl-k\">as</span> F\n<span class=\"pl-k\">from</span> torch.autograd  <span class=\"pl-k\">import</span> Variable\n<span class=\"pl-k\">import</span> torch.optim <span class=\"pl-k\">as</span> optim\n<span class=\"pl-k\">import</span> time\n<span class=\"pl-k\">import</span> random\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">conv3d_net</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">super</span>(conv3d_net, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.conv3d_1 <span class=\"pl-k\">=</span> nn.Conv3d(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">64</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n        <span class=\"pl-c1\">self</span>.conv3d_2 <span class=\"pl-k\">=</span> nn.Conv3d(<span class=\"pl-c1\">64</span>, <span class=\"pl-c1\">64</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n        <span class=\"pl-c1\">self</span>.conv3d_3 <span class=\"pl-k\">=</span> nn.Conv3d(<span class=\"pl-c1\">64</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n        <span class=\"pl-c1\">self</span>.conv3d_4 <span class=\"pl-k\">=</span> nn.Conv3d(<span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n        <span class=\"pl-c1\">self</span>.fc1 <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">6400</span>, <span class=\"pl-c1\">512</span>)\n        <span class=\"pl-c1\">self</span>.fc2 <span class=\"pl-k\">=</span> nn.Linear(<span class=\"pl-c1\">512</span>, <span class=\"pl-c1\">512</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.conv3d_2(<span class=\"pl-c1\">self</span>.conv3d_1(x))\n        x <span class=\"pl-k\">=</span> F.max_pool3d(x, <span class=\"pl-c1\">2</span>)\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.conv3d_4(<span class=\"pl-c1\">self</span>.conv3d_3(x))\n        x <span class=\"pl-k\">=</span> F.max_pool3d(x, <span class=\"pl-c1\">2</span>)\n        x <span class=\"pl-k\">=</span> x.view(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">6400</span>)\n        x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.fc2(<span class=\"pl-c1\">self</span>.fc1(x))\n        <span class=\"pl-k\">return</span> F.log_softmax(x, <span class=\"pl-c1\">0</span>)\n\n\nmodel <span class=\"pl-k\">=</span> conv3d_net()\noptimizer <span class=\"pl-k\">=</span> optim.SGD(model.parameters(), <span class=\"pl-v\">lr</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.1</span>, <span class=\"pl-v\">momentum</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.9</span>)\n\nwarmup <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>\ncycle <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\nstart_t <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\nend_t <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">train</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>warmup</span>\n    data <span class=\"pl-k\">=</span> torch.randn(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">35</span>, <span class=\"pl-c1\">35</span>, <span class=\"pl-c1\">20</span>)\n    target <span class=\"pl-k\">=</span> torch.LongTensor(<span class=\"pl-c1\">4</span>).zero_()\n    <span class=\"pl-k\">for</span> j <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">4</span>):\n        hot_idx <span class=\"pl-k\">=</span> random.randint(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">511</span>)\n        target[j]<span class=\"pl-k\">=</span> hot_idx\n    data, target <span class=\"pl-k\">=</span> Variable(data), Variable(target)\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(warmup<span class=\"pl-k\">+</span>cycle):\n        <span class=\"pl-k\">if</span> (i <span class=\"pl-k\">==</span> warmup):\n            start_t <span class=\"pl-k\">=</span> time.time()\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>optimizer.zero_grad()</span>\n        output <span class=\"pl-k\">=</span> model(data)\n        loss <span class=\"pl-k\">=</span> F.nll_loss(output, target)\n        loss.backward()\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>optimizer.step()</span>\n    end_t <span class=\"pl-k\">=</span> time.time()\n    duration <span class=\"pl-k\">=</span> (end_t <span class=\"pl-k\">-</span> start_t)<span class=\"pl-k\">*</span><span class=\"pl-c1\">1000.0</span><span class=\"pl-k\">/</span>cycle\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>avg time<span class=\"pl-pds\">\"</span></span>, duration, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>millisecond<span class=\"pl-pds\">\"</span></span>)\n\ntrain()</pre></div>", "body_text": "this PR enables mkldnn conv3d path in ATen and bypass THNN counterpart, beneficial for models like 3D-UNet.\nthe benchmark script reduces from 140ms to 42ms on xeon skylake 8180 (2*28 cores @2.5GHz):\nfrom __future__ import print_function\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.autograd  import Variable\nimport torch.optim as optim\nimport time\nimport random\nclass conv3d_net(nn.Module):\n    def __init__(self):\n        super(conv3d_net, self).__init__()\n        self.conv3d_1 = nn.Conv3d(1, 64, kernel_size=3)\n        self.conv3d_2 = nn.Conv3d(64, 64, kernel_size=3)\n        self.conv3d_3 = nn.Conv3d(64, 128, kernel_size=3)\n        self.conv3d_4 = nn.Conv3d(128, 128, kernel_size=3)\n        self.fc1 = nn.Linear(6400, 512)\n        self.fc2 = nn.Linear(512, 512)\n\n    def forward(self, x):\n        x = self.conv3d_2(self.conv3d_1(x))\n        x = F.max_pool3d(x, 2)\n        x = self.conv3d_4(self.conv3d_3(x))\n        x = F.max_pool3d(x, 2)\n        x = x.view(-1, 6400)\n        x = self.fc2(self.fc1(x))\n        return F.log_softmax(x, 0)\n\n\nmodel = conv3d_net()\noptimizer = optim.SGD(model.parameters(), lr = 0.1, momentum = 0.9)\n\nwarmup = 5\ncycle = 10\nstart_t = 0\nend_t = 0\ndef train():\n    #warmup\n    data = torch.randn(4, 1, 35, 35, 20)\n    target = torch.LongTensor(4).zero_()\n    for j in range(4):\n        hot_idx = random.randint(0, 511)\n        target[j]= hot_idx\n    data, target = Variable(data), Variable(target)\n    for i in range(warmup+cycle):\n        if (i == warmup):\n            start_t = time.time()\n        #optimizer.zero_grad()\n        output = model(data)\n        loss = F.nll_loss(output, target)\n        loss.backward()\n        #optimizer.step()\n    end_t = time.time()\n    duration = (end_t - start_t)*1000.0/cycle\n    print(\"avg time\", duration, \"millisecond\")\n\ntrain()", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 4, "review_comments": 0, "maintainer_can_modify": true, "commits": 3, "additions": 247, "deletions": 102, "changed_files": 2}