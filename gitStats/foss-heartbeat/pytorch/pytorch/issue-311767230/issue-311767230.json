{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6325", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6325/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6325/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6325/events", "html_url": "https://github.com/pytorch/pytorch/issues/6325", "id": 311767230, "node_id": "MDU6SXNzdWUzMTE3NjcyMzA=", "number": 6325, "title": "C10 Tracking Issue", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "ajtulloch", "id": 1121581, "node_id": "MDQ6VXNlcjExMjE1ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1121581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajtulloch", "html_url": "https://github.com/ajtulloch", "followers_url": "https://api.github.com/users/ajtulloch/followers", "following_url": "https://api.github.com/users/ajtulloch/following{/other_user}", "gists_url": "https://api.github.com/users/ajtulloch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajtulloch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajtulloch/subscriptions", "organizations_url": "https://api.github.com/users/ajtulloch/orgs", "repos_url": "https://api.github.com/users/ajtulloch/repos", "events_url": "https://api.github.com/users/ajtulloch/events{/privacy}", "received_events_url": "https://api.github.com/users/ajtulloch/received_events", "type": "User", "site_admin": false}, {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, {"login": "prigoyal", "id": 13488275, "node_id": "MDQ6VXNlcjEzNDg4Mjc1", "avatar_url": "https://avatars0.githubusercontent.com/u/13488275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prigoyal", "html_url": "https://github.com/prigoyal", "followers_url": "https://api.github.com/users/prigoyal/followers", "following_url": "https://api.github.com/users/prigoyal/following{/other_user}", "gists_url": "https://api.github.com/users/prigoyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/prigoyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prigoyal/subscriptions", "organizations_url": "https://api.github.com/users/prigoyal/orgs", "repos_url": "https://api.github.com/users/prigoyal/repos", "events_url": "https://api.github.com/users/prigoyal/events{/privacy}", "received_events_url": "https://api.github.com/users/prigoyal/received_events", "type": "User", "site_admin": false}, {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-04-05T20:59:45Z", "updated_at": "2018-07-27T16:54:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Coding:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Modularize ATen cmakes, so we can start pulling small parts (e.g., the CUDA allocator) into Caffe2 without grabbing all of ATen. <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"310501657\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6188\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6188/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6188\">#6188</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Create a shared header-only library for PyTorch and Caffe2, to put things like ArrayRef, optional (and SmallVector, when it exists)</li>\n</ul>\n<p>Prototyping:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Benchmark core overheads of vtable/hashtable/multi dispatch <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a>  <a href=\"https://github.com/zdevito/pytorch/pull/24/files\">https://github.com/zdevito/pytorch/pull/24/files</a> (conclusion: hash table overhead is negligible for our use case)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Class design for operator library <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2373925\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/smessmer\">@smessmer</a> <a href=\"https://fb.quip.com/cMmnAnDCVBGK\" rel=\"nofollow\">https://fb.quip.com/cMmnAnDCVBGK</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Design for the dispatcher <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2373925\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/smessmer\">@smessmer</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Benchmark caching allocator in Caffe2 to see what the overhead is <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1121581\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ajtulloch\">@ajtulloch</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Decouple Caffe2 from protobuf implementation <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17890620\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dzhulgakov\">@dzhulgakov</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Prototype the operator library class design <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> (going to Caffe2Backend) <a href=\"https://github.com/ezyang/pytorch/\">https://github.com/ezyang/pytorch/</a></li>\n</ul>\n<p>Specification:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Go through each design point on \"Library Interface\" and close high level design decisions on all of them. (These are: Naming granularity, Operator inputs/arguments, Language bindings, Broadcasting, Scalars v. 0-dim, Size zero tensors, Sparse, Mixed device operators, Autograd hooks, Gradient definitions)</li>\n</ul>\n<p><strong>Workstream: Caffe2 to templateless tensor representation.</strong> Given the design we are going for in C10, the delta from Caffe2's Tensor to C10 Tensor is much greater than ATen's Tensor to C10 Tensor (C10's outward facing API is basically the same as ATen's). So we need to do some refactoring to reimplement Caffe2's Tensor to be implemented on top of C10 tensor. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> has assigned himself to this but this might be an appropriate thing for someone on the Caffe2 side to look at.</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Create a C10 static library, include this from Caffe2 library</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Put in C10 tensor class design into this library.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Reimplement Caffe2's Tensor class in terms of the C10 tensor class. We have two choices: (1) codemode all of Caffe2 to do the new Tensor type or (2) have a backwards compatible wrapper that preserves the template wrapper. <strong>One key piece of leverage</strong> is that we will use <strong>virtual dispatch in the implementation classes</strong> to bootstrap various methods which would need to be done with the multiple dispatcher, but we don't have a multiple dispatcher yet.</li>\n</ul>", "body_text": "Coding:\n\n Modularize ATen cmakes, so we can start pulling small parts (e.g., the CUDA allocator) into Caffe2 without grabbing all of ATen. #6188 @ezyang\n Create a shared header-only library for PyTorch and Caffe2, to put things like ArrayRef, optional (and SmallVector, when it exists)\n\nPrototyping:\n\n Benchmark core overheads of vtable/hashtable/multi dispatch @zdevito  https://github.com/zdevito/pytorch/pull/24/files (conclusion: hash table overhead is negligible for our use case)\n Class design for operator library @smessmer https://fb.quip.com/cMmnAnDCVBGK\n Design for the dispatcher @smessmer\n Benchmark caching allocator in Caffe2 to see what the overhead is @ajtulloch\n Decouple Caffe2 from protobuf implementation @dzhulgakov\n Prototype the operator library class design @ezyang (going to Caffe2Backend) https://github.com/ezyang/pytorch/\n\nSpecification:\n\n Go through each design point on \"Library Interface\" and close high level design decisions on all of them. (These are: Naming granularity, Operator inputs/arguments, Language bindings, Broadcasting, Scalars v. 0-dim, Size zero tensors, Sparse, Mixed device operators, Autograd hooks, Gradient definitions)\n\nWorkstream: Caffe2 to templateless tensor representation. Given the design we are going for in C10, the delta from Caffe2's Tensor to C10 Tensor is much greater than ATen's Tensor to C10 Tensor (C10's outward facing API is basically the same as ATen's). So we need to do some refactoring to reimplement Caffe2's Tensor to be implemented on top of C10 tensor. @ezyang has assigned himself to this but this might be an appropriate thing for someone on the Caffe2 side to look at.\n\n Create a C10 static library, include this from Caffe2 library\n Put in C10 tensor class design into this library.\n Reimplement Caffe2's Tensor class in terms of the C10 tensor class. We have two choices: (1) codemode all of Caffe2 to do the new Tensor type or (2) have a backwards compatible wrapper that preserves the template wrapper. One key piece of leverage is that we will use virtual dispatch in the implementation classes to bootstrap various methods which would need to be done with the multiple dispatcher, but we don't have a multiple dispatcher yet.", "body": "Coding:\r\n- [ ] Modularize ATen cmakes, so we can start pulling small parts (e.g., the CUDA allocator) into Caffe2 without grabbing all of ATen. https://github.com/pytorch/pytorch/pull/6188 @ezyang\r\n- [ ] Create a shared header-only library for PyTorch and Caffe2, to put things like ArrayRef, optional (and SmallVector, when it exists)\r\n\r\nPrototyping:\r\n- [x] Benchmark core overheads of vtable/hashtable/multi dispatch @zdevito  https://github.com/zdevito/pytorch/pull/24/files (conclusion: hash table overhead is negligible for our use case)\r\n- [X] Class design for operator library @smessmer https://fb.quip.com/cMmnAnDCVBGK\r\n- [ ] Design for the dispatcher @smessmer\r\n- [ ] Benchmark caching allocator in Caffe2 to see what the overhead is @ajtulloch \r\n- [ ] Decouple Caffe2 from protobuf implementation @dzhulgakov \r\n- [X] Prototype the operator library class design @ezyang (going to Caffe2Backend) https://github.com/ezyang/pytorch/\r\n\r\nSpecification:\r\n- [ ] Go through each design point on \"Library Interface\" and close high level design decisions on all of them. (These are: Naming granularity, Operator inputs/arguments, Language bindings, Broadcasting, Scalars v. 0-dim, Size zero tensors, Sparse, Mixed device operators, Autograd hooks, Gradient definitions)\r\n\r\n**Workstream: Caffe2 to templateless tensor representation.** Given the design we are going for in C10, the delta from Caffe2's Tensor to C10 Tensor is much greater than ATen's Tensor to C10 Tensor (C10's outward facing API is basically the same as ATen's). So we need to do some refactoring to reimplement Caffe2's Tensor to be implemented on top of C10 tensor. @ezyang has assigned himself to this but this might be an appropriate thing for someone on the Caffe2 side to look at.\r\n- [ ] Create a C10 static library, include this from Caffe2 library\r\n- [ ] Put in C10 tensor class design into this library.\r\n- [ ] Reimplement Caffe2's Tensor class in terms of the C10 tensor class. We have two choices: (1) codemode all of Caffe2 to do the new Tensor type or (2) have a backwards compatible wrapper that preserves the template wrapper. **One key piece of leverage** is that we will use **virtual dispatch in the implementation classes** to bootstrap various methods which would need to be done with the multiple dispatcher, but we don't have a multiple dispatcher yet."}