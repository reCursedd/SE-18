{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1657", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1657/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1657/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1657/events", "html_url": "https://github.com/pytorch/pytorch/issues/1657", "id": 231633338, "node_id": "MDU6SXNzdWUyMzE2MzMzMzg=", "number": 1657, "title": "A suggestion: add an option to all built-in loss functions to avoid summation", "user": {"login": "xuancong84", "id": 10172392, "node_id": "MDQ6VXNlcjEwMTcyMzky", "avatar_url": "https://avatars0.githubusercontent.com/u/10172392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuancong84", "html_url": "https://github.com/xuancong84", "followers_url": "https://api.github.com/users/xuancong84/followers", "following_url": "https://api.github.com/users/xuancong84/following{/other_user}", "gists_url": "https://api.github.com/users/xuancong84/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuancong84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuancong84/subscriptions", "organizations_url": "https://api.github.com/users/xuancong84/orgs", "repos_url": "https://api.github.com/users/xuancong84/repos", "events_url": "https://api.github.com/users/xuancong84/events{/privacy}", "received_events_url": "https://api.github.com/users/xuancong84/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-26T13:54:11Z", "updated_at": "2017-05-26T14:18:22Z", "closed_at": "2017-05-26T14:08:02Z", "author_association": "NONE", "body_html": "<p>I would like to do instance re-weighting, so every instance in a minibatch has its own instance weight. However, current implementation of all loss functions return the single summed-up loss variable. Thus, it is not possible to do this without re-implementing the loss function myself, doing which will lose speed optimization from using built-in loss functions.</p>\n<p>My suggestion is that for every loss function, add an option (say <em>return_raw_values</em>=True/False), setting it to true will cause the loss function to return the loss tensor variable before the summation.</p>\n<p>This should be quite straight-forward to implement. Thanks!</p>", "body_text": "I would like to do instance re-weighting, so every instance in a minibatch has its own instance weight. However, current implementation of all loss functions return the single summed-up loss variable. Thus, it is not possible to do this without re-implementing the loss function myself, doing which will lose speed optimization from using built-in loss functions.\nMy suggestion is that for every loss function, add an option (say return_raw_values=True/False), setting it to true will cause the loss function to return the loss tensor variable before the summation.\nThis should be quite straight-forward to implement. Thanks!", "body": "I would like to do instance re-weighting, so every instance in a minibatch has its own instance weight. However, current implementation of all loss functions return the single summed-up loss variable. Thus, it is not possible to do this without re-implementing the loss function myself, doing which will lose speed optimization from using built-in loss functions.\r\n\r\nMy suggestion is that for every loss function, add an option (say _return_raw_values_=True/False), setting it to true will cause the loss function to return the loss tensor variable before the summation.\r\n\r\nThis should be quite straight-forward to implement. Thanks!"}