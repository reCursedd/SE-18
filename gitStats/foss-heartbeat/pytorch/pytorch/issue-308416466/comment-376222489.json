{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/376222489", "html_url": "https://github.com/pytorch/pytorch/pull/5997#issuecomment-376222489", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5997", "id": 376222489, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjIyMjQ4OQ==", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-26T16:13:11Z", "updated_at": "2018-03-26T16:13:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For 2. above, we now have tests that exercise cuda type inference.</p>\n<p>Also, I changed the promoteTypes logic to favor float32 over float64 with the combination (float32, int32) and (float32, int64); I believe <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> discussed this before.  The particular reason in this case is so that:</p>\n<p><code>torch.tensor(5., 0)</code> uses the default tensor type (to match (<code>torch.tensor(5.)</code>); otherwise, the addition of the long, causes the promote types to return double.</p>", "body_text": "For 2. above, we now have tests that exercise cuda type inference.\nAlso, I changed the promoteTypes logic to favor float32 over float64 with the combination (float32, int32) and (float32, int64); I believe @fmassa and @apaszke discussed this before.  The particular reason in this case is so that:\ntorch.tensor(5., 0) uses the default tensor type (to match (torch.tensor(5.)); otherwise, the addition of the long, causes the promote types to return double.", "body": "For 2. above, we now have tests that exercise cuda type inference.\r\n\r\nAlso, I changed the promoteTypes logic to favor float32 over float64 with the combination (float32, int32) and (float32, int64); I believe @fmassa and @apaszke discussed this before.  The particular reason in this case is so that:\r\n\r\n`torch.tensor(5., 0)` uses the default tensor type (to match (`torch.tensor(5.)`); otherwise, the addition of the long, causes the promote types to return double."}