{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177235326", "pull_request_review_id": 107071942, "id": 177235326, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzIzNTMyNg==", "diff_hunk": "@@ -100,6 +100,50 @@ static std::vector<int64_t> compute_sizes(PyObject* seq) {\n   return sizes;\n }\n \n+static ScalarType infer_scalar_type(PyObject *obj) {\n+  if (PyFloat_Check(obj)) {\n+    // this is always guaranteed to be a floating-point type, and makes it more\n+    // convenient to write e.g. torch.tensor(0.) than torch.tensor(0., dtype=torch.Tensor.dtype).\n+    return torch::tensor::get_default_tensor_type().scalarType();\n+  }\n+  if (THPUtils_checkLong(obj)) {\n+    return ScalarType::Long;\n+  }\n+  if (PyBool_Check(obj)) {\n+    // TODO: infer Bool when we have Bool ScalarType\n+    return ScalarType::Byte;\n+  }\n+  if (THPVariable_Check(obj)) {\n+    auto var = reinterpret_cast<THPVariable*>(obj)->cdata;\n+    return var.type().scalarType();\n+  }\n+#ifdef WITH_NUMPY\n+  if (PyArray_Check(obj)) {\n+    auto array = (PyArrayObject*)obj;\n+    return numpy_dtype_to_aten(PyArray_TYPE(array));\n+  }\n+#endif\n+  if (PySequence_Check(obj)) {\n+    ScalarType scalarType = ScalarType::NumOptions;\n+    auto length = PySequence_Length(obj);\n+    if (length < 0) throw python_error();\n+    // match NumPy semantics, except use default tensor type instead of double.\n+    if (length == 0) return torch::tensor::get_default_tensor_type().scalarType();\n+    for (int i = 0; i < length; ++i) {\n+      THPObjectPtr handle(PySequence_GetItem(obj, i));", "path": "torch/csrc/utils/tensor_new.cpp", "position": 42, "original_position": 34, "commit_id": "50fc3f60d7e640e9039c6a9cadca95fb626806a5", "original_commit_id": "8641e945b4f615ce7702aeb2e93aabd2c2411065", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Should probably check for error", "created_at": "2018-03-26T21:08:24Z", "updated_at": "2018-11-23T15:41:08Z", "html_url": "https://github.com/pytorch/pytorch/pull/5997#discussion_r177235326", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5997", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177235326"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5997#discussion_r177235326"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5997"}}, "body_html": "<p>Should probably check for error</p>", "body_text": "Should probably check for error"}