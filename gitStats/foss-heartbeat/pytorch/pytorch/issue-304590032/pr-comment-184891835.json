{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184891835", "pull_request_review_id": 116175328, "id": 184891835, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDg5MTgzNQ==", "diff_hunk": "@@ -141,78 +163,25 @@ __global__ void EmbeddingBag_accGradParametersKernel(\n     } while (idx < numel && input[idx] == input[idx - 1]);\n   }\n }\n-}\n-\n-std::tuple<Tensor, Tensor, Tensor>\n-embedding_bag_cuda(const Tensor &weight, const Tensor &indices,\n-                   const Tensor &offsets, const bool scale_grad_by_freq,\n-                   const int64_t mode, bool sparse) {\n-  auto indices_arg = TensorArg(indices, \"indices\", 1);\n-  checkScalarType(\"embedding_bag_cuda\", indices_arg, kLong);\n-  checkContiguous(\"embedding_bag_cuda\", indices_arg);\n-  auto offsets_arg = TensorArg(offsets, \"offsets\", 1);\n-  checkScalarType(\"embedding_bag_cuda\", offsets_arg, kLong);\n-  checkContiguous(\"embedding_bag_cuda\", offsets_arg);\n-  auto weight_arg = TensorArg(weight, \"weight\", 1);\n-  checkContiguous(\"embedding_bag_cuda\", weight_arg);\n-  checkSameGPU(\"embedding_bag_cuda\", weight_arg, indices_arg);\n-  checkSameGPU(\"embedding_bag_cuda\", weight_arg, offsets_arg);\n-\n-  int64_t numIndices = indices.sizes()[0];\n-  int64_t numBags = offsets.sizes()[0];\n-  int64_t stride = weight.sizes()[1];\n-\n-  auto bag_size = at::zeros(indices.type(), offsets.sizes());\n-  auto offset2bag =\n-      at::zeros(indices.type(), {indices.sizes()[0]}); // offset2bag = [0 0 0 0 0]\n-\n-  cudaStream_t stream = globalContext().getCurrentCUDAStream();\n-\n-  auto output = at::zeros(weight.type(), {offsets.sizes()[0], weight.sizes()[1]});\n-\n-  dim3 block = dim3(32, 8);\n-  int grid = 1024;\n-  AT_DISPATCH_FLOATING_TYPES_AND_HALF(weight.type(), \"embedding_bag_cuda\", [&] {\n-    using cuda_scalar_t = cuda::type<scalar_t>;\n-    EmbeddingBag_updateOutputKernel<cuda_scalar_t><<<grid, block, 0, stream>>>(\n-        indices.data<int64_t>(), offsets.data<int64_t>(),\n-        weight.data<cuda_scalar_t>(), output.data<cuda_scalar_t>(),\n-        offset2bag.data<int64_t>(), numIndices, numBags, stride, mode,\n-        bag_size.data<int64_t>());\n-  });\n \n-  THCudaCheck(cudaGetLastError());\n-  return std::tuple<Tensor, Tensor, Tensor>(output, offset2bag, bag_size);\n-}\n \n-Tensor embedding_bag_backward_cuda(const Tensor &grad_, const Tensor &indices,\n-                                   const Tensor &offsets,\n+Tensor embedding_bag_backward_cuda_avg_sum(", "path": "aten/src/ATen/native/cuda/EmbeddingBag.cu", "position": null, "original_position": 128, "commit_id": "64b3f40534d8b4fe1f99680940a98d410c1d045f", "original_commit_id": "9deb22c6b995b54164078e219e7ca1dce93f85a6", "user": {"login": "Lalaland", "id": 342233, "node_id": "MDQ6VXNlcjM0MjIzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/342233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lalaland", "html_url": "https://github.com/Lalaland", "followers_url": "https://api.github.com/users/Lalaland/followers", "following_url": "https://api.github.com/users/Lalaland/following{/other_user}", "gists_url": "https://api.github.com/users/Lalaland/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lalaland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lalaland/subscriptions", "organizations_url": "https://api.github.com/users/Lalaland/orgs", "repos_url": "https://api.github.com/users/Lalaland/repos", "events_url": "https://api.github.com/users/Lalaland/events{/privacy}", "received_events_url": "https://api.github.com/users/Lalaland/received_events", "type": "User", "site_admin": false}, "body": "Done.", "created_at": "2018-04-29T19:04:36Z", "updated_at": "2018-11-23T15:43:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/5725#discussion_r184891835", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5725", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184891835"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5725#discussion_r184891835"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5725"}}, "body_html": "<p>Done.</p>", "body_text": "Done.", "in_reply_to_id": 184890084}