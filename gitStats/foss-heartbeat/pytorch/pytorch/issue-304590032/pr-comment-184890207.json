{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184890207", "pull_request_review_id": 116112643, "id": 184890207, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDg5MDIwNw==", "diff_hunk": "@@ -281,5 +250,143 @@ Tensor embedding_bag_backward_cuda(const Tensor &grad_, const Tensor &indices,\n   THCudaCheck(cudaGetLastError());\n   return grad_weight;\n }\n+\n+template <typename scalar_t>\n+__global__ void EmbeddingBag_accGradParametersKernel_max(\n+    int64_t *max_indices, scalar_t *gradOutput,\n+    scalar_t *gradWeight, int64_t stride, int64_t numBags) {\n+\n+  using accscalar_t = cuda::acc_type<scalar_t>;\n+\n+  int64_t chunksPerBag = THCCeilDiv(stride, (int64_t)blockDim.x);\n+  int64_t numChunks = numBags * chunksPerBag;\n+  int64_t chunkOffset = blockIdx.x * blockDim.y + threadIdx.y;\n+  int64_t chunkStride = gridDim.x * blockDim.y;\n+\n+  for (int64_t chunk = chunkOffset; chunk < numChunks; chunk += chunkStride) {\n+    int64_t featureDim = (chunk % chunksPerBag) * blockDim.x + threadIdx.x;\n+    if (featureDim < stride) {\n+      int64_t bag = chunk / chunksPerBag;\n+\n+      int64_t word_idx = max_indices[bag * stride + featureDim];\n+      \n+      atomicAdd(&(gradWeight[word_idx * stride + featureDim]), gradOutput[bag * stride + featureDim]);", "path": "aten/src/ATen/native/cuda/EmbeddingBag.cu", "position": 200, "original_position": 200, "commit_id": "64b3f40534d8b4fe1f99680940a98d410c1d045f", "original_commit_id": "9deb22c6b995b54164078e219e7ca1dce93f85a6", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "body": "out of scope of this PR but it'd be good to rewrite the kernel to avoid atomicAdd so that it becomes deterministic", "created_at": "2018-04-29T17:55:50Z", "updated_at": "2018-11-23T15:43:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/5725#discussion_r184890207", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5725", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184890207"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5725#discussion_r184890207"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5725"}}, "body_html": "<p>out of scope of this PR but it'd be good to rewrite the kernel to avoid atomicAdd so that it becomes deterministic</p>", "body_text": "out of scope of this PR but it'd be good to rewrite the kernel to avoid atomicAdd so that it becomes deterministic"}