{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1684", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1684/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1684/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1684/events", "html_url": "https://github.com/pytorch/pytorch/issues/1684", "id": 232346267, "node_id": "MDU6SXNzdWUyMzIzNDYyNjc=", "number": 1684, "title": "PixelShuffle for downscaling. (Feature proposal)", "user": {"login": "allanzelener", "id": 5599868, "node_id": "MDQ6VXNlcjU1OTk4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5599868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allanzelener", "html_url": "https://github.com/allanzelener", "followers_url": "https://api.github.com/users/allanzelener/followers", "following_url": "https://api.github.com/users/allanzelener/following{/other_user}", "gists_url": "https://api.github.com/users/allanzelener/gists{/gist_id}", "starred_url": "https://api.github.com/users/allanzelener/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allanzelener/subscriptions", "organizations_url": "https://api.github.com/users/allanzelener/orgs", "repos_url": "https://api.github.com/users/allanzelener/repos", "events_url": "https://api.github.com/users/allanzelener/events{/privacy}", "received_events_url": "https://api.github.com/users/allanzelener/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-30T18:48:48Z", "updated_at": "2017-06-04T14:39:48Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Currently the PixelShuffle module only implements scaling by an upscaling factor &gt; 1. However an equivalent operation that performs downscaling would involve only a small tweak and is used in some models, e.g. YOLOv2. This would also bring feature parity with Tensorflow which has both <code>depth_to_space</code> and <code>space_to_depth</code> as equivalent operations.</p>\n<p>This would involve the following change to pixel_shuffle:</p>\n<pre><code>def pixel_shuffle(input, scale_factor):\n    batch_size, in_channels, in_height, in_width = input.size()\n\n    out_channels = channels // (scale_factor * scale_factor)\n    out_height = in_height * scale_factor\n    out_width = in_width * scale_factor\n\n    if scale_factor &gt;= 1:\n        input_view = input.contiguous().view(\n            batch_size, channels, upscale_factor, upscale_factor,\n            in_height, in_width)\n        shuffle_out = input_view.permute(0, 1, 4, 2, 5, 3).contiguous()\n    else:\n        block_size = 1 / scale_factor\n        input_view = input.contiguous().view(\n            batch_size, channels, out_height, block_size,\n            out_width, block_size)\n        shuffle_out = input_view.permute(0, 1, 3, 5, 2, 4).contiguous()\n\n    return shuffle_out.view(batch_size, out_channels, out_height, out_width)\n</code></pre>\n<p>Also it doesn't look like pixel_shuffle currently has any error checking to see if the scale factor is valid. <code>out_channels</code>, <code>out_height</code>, and <code>out_width</code> should all be integers.</p>", "body_text": "Currently the PixelShuffle module only implements scaling by an upscaling factor > 1. However an equivalent operation that performs downscaling would involve only a small tweak and is used in some models, e.g. YOLOv2. This would also bring feature parity with Tensorflow which has both depth_to_space and space_to_depth as equivalent operations.\nThis would involve the following change to pixel_shuffle:\ndef pixel_shuffle(input, scale_factor):\n    batch_size, in_channels, in_height, in_width = input.size()\n\n    out_channels = channels // (scale_factor * scale_factor)\n    out_height = in_height * scale_factor\n    out_width = in_width * scale_factor\n\n    if scale_factor >= 1:\n        input_view = input.contiguous().view(\n            batch_size, channels, upscale_factor, upscale_factor,\n            in_height, in_width)\n        shuffle_out = input_view.permute(0, 1, 4, 2, 5, 3).contiguous()\n    else:\n        block_size = 1 / scale_factor\n        input_view = input.contiguous().view(\n            batch_size, channels, out_height, block_size,\n            out_width, block_size)\n        shuffle_out = input_view.permute(0, 1, 3, 5, 2, 4).contiguous()\n\n    return shuffle_out.view(batch_size, out_channels, out_height, out_width)\n\nAlso it doesn't look like pixel_shuffle currently has any error checking to see if the scale factor is valid. out_channels, out_height, and out_width should all be integers.", "body": "Currently the PixelShuffle module only implements scaling by an upscaling factor > 1. However an equivalent operation that performs downscaling would involve only a small tweak and is used in some models, e.g. YOLOv2. This would also bring feature parity with Tensorflow which has both `depth_to_space` and `space_to_depth` as equivalent operations. \r\n\r\nThis would involve the following change to pixel_shuffle:\r\n\r\n```\r\ndef pixel_shuffle(input, scale_factor):\r\n    batch_size, in_channels, in_height, in_width = input.size()\r\n\r\n    out_channels = channels // (scale_factor * scale_factor)\r\n    out_height = in_height * scale_factor\r\n    out_width = in_width * scale_factor\r\n\r\n    if scale_factor >= 1:\r\n        input_view = input.contiguous().view(\r\n            batch_size, channels, upscale_factor, upscale_factor,\r\n            in_height, in_width)\r\n        shuffle_out = input_view.permute(0, 1, 4, 2, 5, 3).contiguous()\r\n    else:\r\n        block_size = 1 / scale_factor\r\n        input_view = input.contiguous().view(\r\n            batch_size, channels, out_height, block_size,\r\n            out_width, block_size)\r\n        shuffle_out = input_view.permute(0, 1, 3, 5, 2, 4).contiguous()\r\n\r\n    return shuffle_out.view(batch_size, out_channels, out_height, out_width)\r\n```\r\nAlso it doesn't look like pixel_shuffle currently has any error checking to see if the scale factor is valid. `out_channels`, `out_height`, and `out_width` should all be integers. "}