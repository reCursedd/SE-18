{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/126922252", "pull_request_review_id": 49444574, "id": 126922252, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjkyMjI1Mg==", "diff_hunk": "@@ -0,0 +1,201 @@\n+#ifndef TH_GENERIC_FILE\n+#define TH_GENERIC_FILE \"generic/SpatialGridSamplerBilinear.c\"\n+#else\n+\n+#undef MIN\n+#define MIN(a,b) ( ((a)<(b)) ? (a) : (b) )\n+\n+static inline void THNN_(SpatialGridSamplerBilinear_shapeCheck)\n+     (THTensor *input, THTensor *grid, THTensor *gradOutput) {\n+  THNN_ARGCHECK(input->nDimension == 4, 2, input,\n+\t\t\"4D input tensor expected but got: %s\");\n+  THNN_ARGCHECK(grid->nDimension == 4, 2, grid,\n+\t\t\"4D grid tensor expected but got: %s\");\n+\n+  int nbatch   = THTensor_(size)(input, 0);\n+  int channels = THTensor_(size)(input, 1);\n+  int height   = THTensor_(size)(input, 2);\n+  int width    = THTensor_(size)(input, 3);\n+\n+  THNN_CHECK_DIM_SIZE(grid, 4, 0, nbatch);\n+  THNN_CHECK_DIM_SIZE(grid, 4, 1, height);\n+  THNN_CHECK_DIM_SIZE(grid, 4, 2, width);\n+  THNN_CHECK_DIM_SIZE(grid, 4, 3, 2);\n+  \n+  if (gradOutput != NULL) {\n+    THNN_CHECK_SHAPE(input, gradOutput);\n+  }\n+}\n+\n+#define SAFE_GET(input, x, y, n, c, H, W) x >= 0 && x < W && y >=0 \\\n+    && y < H ? THTensor_fastGet4d(input, n, c, y, x) : 0\n+\n+TH_API void THNN_(SpatialGridSamplerBilinear_updateOutput)(\n+\t  THNNState *state,\n+\t  THTensor *input,\n+\t  THTensor *grid,\n+\t  THTensor *output) {\n+\n+  THNN_(SpatialGridSamplerBilinear_shapeCheck)(input, grid, NULL);\n+  int N = THTensor_(size)(input, 0);\n+  int C = THTensor_(size)(input, 1);\n+  int H = THTensor_(size)(input, 2);\n+  int W = THTensor_(size)(input, 3);\n+\t  \n+  // resize output to the same shape as input\n+  THTensor_(resize4d)(output, N, C, H, W);\n+\n+  // loop over each output pixel\n+  int n, h, w, c;\n+#pragma omp parallel for private(n, h, w, c)\n+  for (n = 0; n < N; ++n) {\n+    for (h = 0; h < H; ++h) {\n+      for (w = 0; w < W; ++w) {\n+\t// get the corresponding input x, y co-ordinates from grid\n+\treal ix = THTensor_fastGet4d(grid, n, h, w, 0);\n+\treal iy = THTensor_fastGet4d(grid, n, h, w, 1);\n+\n+\t// normalize ix, iy from [-1, 1] to [0, H-1] & [0, W-1]\n+\tix = ((ix + 1) / 2) * (W-1);\n+\tiy = ((iy + 1) / 2) * (H-1);\n+\n+\t// get NE, NW, SE, SW pixel values from (x, y)\n+\tint ix_nw = floor(ix);\n+\tint iy_nw = floor(iy);\n+\tint ix_ne = ix_nw + 1;\n+\tint iy_ne = iy_nw;\n+\tint ix_sw = ix_nw;\n+\tint iy_sw = iy_nw + 1;\n+\tint ix_se = ix_nw + 1;\n+\tint iy_se = iy_nw + 1;\n+\n+\t// get surfaces to each neighbor:\n+\treal nw = (ix_se - ix)    * (iy_se - iy);\n+\treal ne = (ix    - ix_sw) * (iy_sw - iy);\n+\treal sw = (ix_ne - ix)    * (iy    - iy_ne);\n+\treal se = (ix    - ix_nw) * (iy    - iy_nw);\n+\t  \n+\t// calculate bilinear weighted pixel value and set output pixel\n+\tfor (c = 0; c < C; ++c) {\n+\t  //   (c, iy_nw, ix_nw) * nw + (c, iy_ne, ix_ne) * ne\n+\t  // + (c, iy_sw, ix_sw) * sw + (c, iy_se, ix_se) * se\n+\t  real nw_val = SAFE_GET(input, ix_nw, iy_nw, n, c, H, W);\n+\t  real ne_val = SAFE_GET(input, ix_ne, iy_ne, n, c, H, W);\n+\t  real sw_val = SAFE_GET(input, ix_sw, iy_sw, n, c, H, W);\n+\t  real se_val = SAFE_GET(input, ix_se, iy_se, n, c, H, W);\n+\t  real out_val = nw_val * nw + ne_val * ne + sw_val * sw + se_val * se;\n+\t  THTensor_fastSet4d(output, n, c, h, w, out_val);\n+\t}\n+      }\n+    }\n+  }\n+}\n+\n+#define SAFE_SET(input, x, y, n, c, H, W, value)\t\t\\", "path": "torch/lib/THNN/generic/SpatialGridSamplerBilinear.c", "position": null, "original_position": 94, "commit_id": "f899eafe850e7e777e4f5de123ec39e20ca87f3c", "original_commit_id": "0f8dd283042cfe6a6b87b6d17aaed8d354f0eae0", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "shouldn't this be called `SAFE_ADD` ?", "created_at": "2017-07-12T10:47:02Z", "updated_at": "2018-11-23T15:34:05Z", "html_url": "https://github.com/pytorch/pytorch/pull/2007#discussion_r126922252", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2007", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/126922252"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2007#discussion_r126922252"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2007"}}, "body_html": "<p>shouldn't this be called <code>SAFE_ADD</code> ?</p>", "body_text": "shouldn't this be called SAFE_ADD ?"}