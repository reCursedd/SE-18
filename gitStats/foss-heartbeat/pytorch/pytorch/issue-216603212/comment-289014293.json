{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/289014293", "html_url": "https://github.com/pytorch/pytorch/issues/1080#issuecomment-289014293", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1080", "id": 289014293, "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTAxNDI5Mw==", "user": {"login": "zuoxingdong", "id": 18168681, "node_id": "MDQ6VXNlcjE4MTY4Njgx", "avatar_url": "https://avatars0.githubusercontent.com/u/18168681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zuoxingdong", "html_url": "https://github.com/zuoxingdong", "followers_url": "https://api.github.com/users/zuoxingdong/followers", "following_url": "https://api.github.com/users/zuoxingdong/following{/other_user}", "gists_url": "https://api.github.com/users/zuoxingdong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zuoxingdong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zuoxingdong/subscriptions", "organizations_url": "https://api.github.com/users/zuoxingdong/orgs", "repos_url": "https://api.github.com/users/zuoxingdong/repos", "events_url": "https://api.github.com/users/zuoxingdong/events{/privacy}", "received_events_url": "https://api.github.com/users/zuoxingdong/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-24T12:50:46Z", "updated_at": "2017-03-24T12:51:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a>  Great, looking forward to that! If I got it correctly, it shall be an API e.g. <code>a = gather_n()</code> to make it being able to backprop gradients with <code>a.data, a.grad</code> ? Or will it be 'Pythonic' e.g. directly with</p>\n<pre><code>a = torch.ones([5, 4, 3])\nslice = torch.LongTensor([0, 1, 1, 2, 0])\na_ = a[torch.range(5), :, slice]\na_.data\na_.grad\n</code></pre>\n<p>Not sure if it is possible to use this form by defining <code>__getitem__()</code></p>", "body_text": "@fmassa  Great, looking forward to that! If I got it correctly, it shall be an API e.g. a = gather_n() to make it being able to backprop gradients with a.data, a.grad ? Or will it be 'Pythonic' e.g. directly with\na = torch.ones([5, 4, 3])\nslice = torch.LongTensor([0, 1, 1, 2, 0])\na_ = a[torch.range(5), :, slice]\na_.data\na_.grad\n\nNot sure if it is possible to use this form by defining __getitem__()", "body": "@fmassa  Great, looking forward to that! If I got it correctly, it shall be an API e.g. `a = gather_n()` to make it being able to backprop gradients with `a.data, a.grad` ? Or will it be 'Pythonic' e.g. directly with \r\n```\r\na = torch.ones([5, 4, 3])\r\nslice = torch.LongTensor([0, 1, 1, 2, 0])\r\na_ = a[torch.range(5), :, slice]\r\na_.data\r\na_.grad\r\n```\r\nNot sure if it is possible to use this form by defining `__getitem__()`"}