{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/321772386", "html_url": "https://github.com/pytorch/pytorch/issues/1080#issuecomment-321772386", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1080", "id": 321772386, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTc3MjM4Ng==", "user": {"login": "xuancong84", "id": 10172392, "node_id": "MDQ6VXNlcjEwMTcyMzky", "avatar_url": "https://avatars0.githubusercontent.com/u/10172392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuancong84", "html_url": "https://github.com/xuancong84", "followers_url": "https://api.github.com/users/xuancong84/followers", "following_url": "https://api.github.com/users/xuancong84/following{/other_user}", "gists_url": "https://api.github.com/users/xuancong84/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuancong84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuancong84/subscriptions", "organizations_url": "https://api.github.com/users/xuancong84/orgs", "repos_url": "https://api.github.com/users/xuancong84/repos", "events_url": "https://api.github.com/users/xuancong84/events{/privacy}", "received_events_url": "https://api.github.com/users/xuancong84/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-11T09:53:12Z", "updated_at": "2017-08-11T09:54:57Z", "author_association": "NONE", "body_html": "<p>I think even Numpy's way of advanced indexing is not very logical.<br>\nFor the example,</p>\n<pre><code>x = np.random.random((10, 20, 30, 40, 50))\nidx1 = [1, 8, 5]\nidx2 = [4, 1, 6, 2]\n</code></pre>\n<p><strong>Logically speaking</strong>, x[:, idx1, idx2, :, :] should have a shape of (10, 3, 4, 40, 50), and x[:, idx1, :, idx2, :] should have a shape of (10, 3, 30, 4, 50). The behaviour should be consistent regardless whether idx1 and idx2 are adjacent or not. For single entry dimension, x[:, 3, :, 3, :] should have a shape of (10, 30, 50) while x[:, [3], :, [3], :] should have a shape of (10, 1, 30, 1, 50), containing essentially the same data array. The idea is that for each dimension, if the index is an integer, then extract that 1-layer slice and perform a squeeze; if the index is a list, then extract that slice without performing squeeze regardless of whether the extracted slice has a thickness of 1 or more.</p>\n<p>Then we consider the case when the number of indexed dimensions is fewer than the rank of the tensor. For example, x[:, idx1, :, ] should have a shape of (10, 3, 30, 40, 50) where you match dimension from the left; x[, :, idx2, :] should have a shape of (10, 20, 30, 4, 50) where you match dimension from the right. And x[:, idx1, :] should throw exception (or follow the match from left convention).</p>\n<p>I am not sure what those Numpy guys are thinking about when they design the current indexing method.</p>", "body_text": "I think even Numpy's way of advanced indexing is not very logical.\nFor the example,\nx = np.random.random((10, 20, 30, 40, 50))\nidx1 = [1, 8, 5]\nidx2 = [4, 1, 6, 2]\n\nLogically speaking, x[:, idx1, idx2, :, :] should have a shape of (10, 3, 4, 40, 50), and x[:, idx1, :, idx2, :] should have a shape of (10, 3, 30, 4, 50). The behaviour should be consistent regardless whether idx1 and idx2 are adjacent or not. For single entry dimension, x[:, 3, :, 3, :] should have a shape of (10, 30, 50) while x[:, [3], :, [3], :] should have a shape of (10, 1, 30, 1, 50), containing essentially the same data array. The idea is that for each dimension, if the index is an integer, then extract that 1-layer slice and perform a squeeze; if the index is a list, then extract that slice without performing squeeze regardless of whether the extracted slice has a thickness of 1 or more.\nThen we consider the case when the number of indexed dimensions is fewer than the rank of the tensor. For example, x[:, idx1, :, ] should have a shape of (10, 3, 30, 40, 50) where you match dimension from the left; x[, :, idx2, :] should have a shape of (10, 20, 30, 4, 50) where you match dimension from the right. And x[:, idx1, :] should throw exception (or follow the match from left convention).\nI am not sure what those Numpy guys are thinking about when they design the current indexing method.", "body": "I think even Numpy's way of advanced indexing is not very logical.\r\nFor the example,\r\n```\r\nx = np.random.random((10, 20, 30, 40, 50))\r\nidx1 = [1, 8, 5]\r\nidx2 = [4, 1, 6, 2]\r\n```\r\n**Logically speaking**, x[:, idx1, idx2, :, :] should have a shape of (10, 3, 4, 40, 50), and x[:, idx1, :, idx2, :] should have a shape of (10, 3, 30, 4, 50). The behaviour should be consistent regardless whether idx1 and idx2 are adjacent or not. For single entry dimension, x[:, 3, :, 3, :] should have a shape of (10, 30, 50) while x[:, [3], :, [3], :] should have a shape of (10, 1, 30, 1, 50), containing essentially the same data array. The idea is that for each dimension, if the index is an integer, then extract that 1-layer slice and perform a squeeze; if the index is a list, then extract that slice without performing squeeze regardless of whether the extracted slice has a thickness of 1 or more.\r\n\r\nThen we consider the case when the number of indexed dimensions is fewer than the rank of the tensor. For example, x[:, idx1, :, ] should have a shape of (10, 3, 30, 40, 50) where you match dimension from the left; x[, :, idx2, :] should have a shape of (10, 20, 30, 4, 50) where you match dimension from the right. And x[:, idx1, :] should throw exception (or follow the match from left convention).\r\n\r\nI am not sure what those Numpy guys are thinking about when they design the current indexing method."}