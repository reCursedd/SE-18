{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/376705629", "html_url": "https://github.com/pytorch/pytorch/pull/6039#issuecomment-376705629", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6039", "id": 376705629, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjcwNTYyOQ==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-27T23:12:49Z", "updated_at": "2018-03-27T23:13:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6040760\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ethanluoyc\">@ethanluoyc</a> We use batched <code>Normal</code>s for the embedding distributions in VAEs, so I would guess that <code>Normal</code> would work for you too. Note that</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">assert</span> Normal(torch.zeros(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>), torch.ones(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>)).rsample().shape <span class=\"pl-k\">==</span> (<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>)</pre></div>\n<p>That said, I'd be interested to hear if you have use for nonempty <code>event_shape</code>. In Pyro we have very strict shape requirements due to automated tensor dimension allocation and strict shape checking, so we've created a generic <a href=\"https://github.com/uber/pyro/blob/35ec350/pyro/distributions/torch_distribution.py#L165\">ReshapedDistribution</a> that sets a default <code>sample_shape</code> and adjusts <code>event_shape</code>. We haven't anticipated this being useful outside of a PPL (e.g. I would never use it by hand), but if you have specific use cases we could move it upstream to PyTorch.</p>", "body_text": "@ethanluoyc We use batched Normals for the embedding distributions in VAEs, so I would guess that Normal would work for you too. Note that\nassert Normal(torch.zeros(3,4,5), torch.ones(3,4,5)).rsample().shape == (3,4,5)\nThat said, I'd be interested to hear if you have use for nonempty event_shape. In Pyro we have very strict shape requirements due to automated tensor dimension allocation and strict shape checking, so we've created a generic ReshapedDistribution that sets a default sample_shape and adjusts event_shape. We haven't anticipated this being useful outside of a PPL (e.g. I would never use it by hand), but if you have specific use cases we could move it upstream to PyTorch.", "body": "@ethanluoyc We use batched `Normal`s for the embedding distributions in VAEs, so I would guess that `Normal` would work for you too. Note that\r\n```py\r\nassert Normal(torch.zeros(3,4,5), torch.ones(3,4,5)).rsample().shape == (3,4,5)\r\n```\r\nThat said, I'd be interested to hear if you have use for nonempty `event_shape`. In Pyro we have very strict shape requirements due to automated tensor dimension allocation and strict shape checking, so we've created a generic [ReshapedDistribution](https://github.com/uber/pyro/blob/35ec350/pyro/distributions/torch_distribution.py#L165) that sets a default `sample_shape` and adjusts `event_shape`. We haven't anticipated this being useful outside of a PPL (e.g. I would never use it by hand), but if you have specific use cases we could move it upstream to PyTorch."}