{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8741", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8741/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8741/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8741/events", "html_url": "https://github.com/pytorch/pytorch/issues/8741", "id": 334386893, "node_id": "MDU6SXNzdWUzMzQzODY4OTM=", "number": 8741, "title": "[Feature Request] Add to() method for optimizers/schedulers", "user": {"login": "0phoff", "id": 11853089, "node_id": "MDQ6VXNlcjExODUzMDg5", "avatar_url": "https://avatars3.githubusercontent.com/u/11853089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0phoff", "html_url": "https://github.com/0phoff", "followers_url": "https://api.github.com/users/0phoff/followers", "following_url": "https://api.github.com/users/0phoff/following{/other_user}", "gists_url": "https://api.github.com/users/0phoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/0phoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0phoff/subscriptions", "organizations_url": "https://api.github.com/users/0phoff/orgs", "repos_url": "https://api.github.com/users/0phoff/repos", "events_url": "https://api.github.com/users/0phoff/events{/privacy}", "received_events_url": "https://api.github.com/users/0phoff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443483881, "node_id": "MDU6TGFiZWw0NDM0ODM4ODE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/todo", "name": "todo", "color": "c2e0c6", "default": false}], "state": "open", "locked": false, "assignee": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-06-21T08:21:29Z", "updated_at": "2018-07-17T16:46:24Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>I think the optimizers and schedulers could use some extra work.<br>\nThe main thing I would love, is for optimizers and schedulers to have a <code>to()</code> method so we can send their parameters to a certain device. This would allow us to save the parameters and reload them at a later stage without any problems.</p>\n<p>Right now, the following script crashes with an error that the optimizer expects a <code>torch.FloatTensor</code> but got a <code>torch.cuda.FloatTensor</code>. I am not quite sure why, as I specifically load the data to CPU?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Note: This is not my actual script, but rather a representation of the steps and in what order I perform them</span>\nnetwork <span class=\"pl-k\">=</span> <span class=\"pl-c1\">...</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> Creating a network based of torch.nn.Module</span>\noptim <span class=\"pl-k\">=</span> torch.optim.SGD(network.parameters(), <span class=\"pl-c1\">...</span>)\n\nstate <span class=\"pl-k\">=</span> torch.load(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>file_path<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">storage</span>, <span class=\"pl-smi\">loc</span>: storage)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Send all tensors to CPU</span>\n\nnetwork.load_state_dict(state[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>network<span class=\"pl-pds\">'</span></span>])\noptim.load_state_dict(state[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>optim<span class=\"pl-pds\">'</span></span>])\n\nnetwork.to(torch.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cuda<span class=\"pl-pds\">'</span></span>))\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>optim.to(torch.device('cuda'))   # Would this solve my problems? </span></pre></div>\n<p>The same could be said about schedulers.</p>", "body_text": "I think the optimizers and schedulers could use some extra work.\nThe main thing I would love, is for optimizers and schedulers to have a to() method so we can send their parameters to a certain device. This would allow us to save the parameters and reload them at a later stage without any problems.\nRight now, the following script crashes with an error that the optimizer expects a torch.FloatTensor but got a torch.cuda.FloatTensor. I am not quite sure why, as I specifically load the data to CPU?\n# Note: This is not my actual script, but rather a representation of the steps and in what order I perform them\nnetwork = ... # Creating a network based of torch.nn.Module\noptim = torch.optim.SGD(network.parameters(), ...)\n\nstate = torch.load('file_path', lambda storage, loc: storage)  # Send all tensors to CPU\n\nnetwork.load_state_dict(state['network'])\noptim.load_state_dict(state['optim'])\n\nnetwork.to(torch.device('cuda'))\n#optim.to(torch.device('cuda'))   # Would this solve my problems? \nThe same could be said about schedulers.", "body": "I think the optimizers and schedulers could use some extra work.  \r\nThe main thing I would love, is for optimizers and schedulers to have a `to()` method so we can send their parameters to a certain device. This would allow us to save the parameters and reload them at a later stage without any problems.\r\n\r\nRight now, the following script crashes with an error that the optimizer expects a `torch.FloatTensor` but got a `torch.cuda.FloatTensor`. I am not quite sure why, as I specifically load the data to CPU?\r\n\r\n```python\r\n# Note: This is not my actual script, but rather a representation of the steps and in what order I perform them\r\nnetwork = ... # Creating a network based of torch.nn.Module\r\noptim = torch.optim.SGD(network.parameters(), ...)\r\n\r\nstate = torch.load('file_path', lambda storage, loc: storage)  # Send all tensors to CPU\r\n\r\nnetwork.load_state_dict(state['network'])\r\noptim.load_state_dict(state['optim'])\r\n\r\nnetwork.to(torch.device('cuda'))\r\n#optim.to(torch.device('cuda'))   # Would this solve my problems? \r\n```\r\n\r\nThe same could be said about schedulers."}