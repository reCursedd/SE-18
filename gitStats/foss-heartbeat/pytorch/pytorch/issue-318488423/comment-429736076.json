{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/429736076", "html_url": "https://github.com/pytorch/pytorch/issues/7042#issuecomment-429736076", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7042", "id": 429736076, "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTczNjA3Ng==", "user": {"login": "Ken-Con", "id": 14369757, "node_id": "MDQ6VXNlcjE0MzY5NzU3", "avatar_url": "https://avatars2.githubusercontent.com/u/14369757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ken-Con", "html_url": "https://github.com/Ken-Con", "followers_url": "https://api.github.com/users/Ken-Con/followers", "following_url": "https://api.github.com/users/Ken-Con/following{/other_user}", "gists_url": "https://api.github.com/users/Ken-Con/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ken-Con/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ken-Con/subscriptions", "organizations_url": "https://api.github.com/users/Ken-Con/orgs", "repos_url": "https://api.github.com/users/Ken-Con/repos", "events_url": "https://api.github.com/users/Ken-Con/events{/privacy}", "received_events_url": "https://api.github.com/users/Ken-Con/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-15T07:25:39Z", "updated_at": "2018-10-15T07:25:39Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>dropout_p = 0.5 dropout = torch.nn.Droupout(p=droupout_p) inputs = torch.LongTensor([[10,15,30,0,3,5,8], [10,30,0,0,0,0,0]]) if self.training: x_ = dropout(inputs.float()) print(x_) &gt;&gt;&gt; [[0.0, 22.5,60.0, 0.0, 4.5, 0.0, 12.0], [15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]] inputs = x_.mul(1-dropout_p).long() print(inputs) &gt;&gt;&gt; [[0, 15,30, 0, 3, 0, 8], [10, 0, 0, 0, 0, 0, 0]]</p>\n</blockquote>\n<p>input_text = torch.round(x_.mul(1-self.p)).long() can be used to prevent Floating-point operation error</p>", "body_text": "dropout_p = 0.5 dropout = torch.nn.Droupout(p=droupout_p) inputs = torch.LongTensor([[10,15,30,0,3,5,8], [10,30,0,0,0,0,0]]) if self.training: x_ = dropout(inputs.float()) print(x_) >>> [[0.0, 22.5,60.0, 0.0, 4.5, 0.0, 12.0], [15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]] inputs = x_.mul(1-dropout_p).long() print(inputs) >>> [[0, 15,30, 0, 3, 0, 8], [10, 0, 0, 0, 0, 0, 0]]\n\ninput_text = torch.round(x_.mul(1-self.p)).long() can be used to prevent Floating-point operation error", "body": "> dropout_p = 0.5 dropout = torch.nn.Droupout(p=droupout_p) inputs = torch.LongTensor([[10,15,30,0,3,5,8], [10,30,0,0,0,0,0]]) if self.training: x_ = dropout(inputs.float()) print(x_) >>> [[0.0, 22.5,60.0, 0.0, 4.5, 0.0, 12.0], [15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]] inputs = x_.mul(1-dropout_p).long() print(inputs) >>> [[0, 15,30, 0, 3, 0, 8], [10, 0, 0, 0, 0, 0, 0]]\r\n\r\ninput_text = torch.round(x_.mul(1-self.p)).long() can be used to prevent Floating-point operation error"}