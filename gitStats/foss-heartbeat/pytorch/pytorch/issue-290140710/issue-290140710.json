{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4753", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4753/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4753/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4753/events", "html_url": "https://github.com/pytorch/pytorch/pull/4753", "id": 290140710, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY0MDkzOTgz", "number": 4753, "title": "Implement a (data-only) Variable factory", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-19T23:48:25Z", "updated_at": "2018-11-23T15:38:24Z", "closed_at": "2018-01-22T23:14:23Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/4753", "html_url": "https://github.com/pytorch/pytorch/pull/4753", "diff_url": "https://github.com/pytorch/pytorch/pull/4753.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/4753.patch"}, "body_html": "<p>Implements a function, torch.autograd.variable that is modeled after np.array.  The main difference between it and new() and the tensor constructors is it inteprets a python number as data, i.e. as a 0-dimensional tensor (we currently don't expose that at the pytorchl level, so it will temporarily end up as a 1-dimensional tensor), rather than a size.</p>\n<p>The main difference currently between torch.autograd.variable and np.array is that np.autograd.variable is stricter, e.g. passing a PyFloat when an integral type is the default tensor type will result in an array; np.array basically lets anything through (floating-point / integral mismatch, overflow, etc).  This is to keep it consistent with Variable.new when called with a sequence, although we can loosen the checks later.</p>\n<p>This will be renamed to torch.tensor once we merge Variable and tensor.</p>", "body_text": "Implements a function, torch.autograd.variable that is modeled after np.array.  The main difference between it and new() and the tensor constructors is it inteprets a python number as data, i.e. as a 0-dimensional tensor (we currently don't expose that at the pytorchl level, so it will temporarily end up as a 1-dimensional tensor), rather than a size.\nThe main difference currently between torch.autograd.variable and np.array is that np.autograd.variable is stricter, e.g. passing a PyFloat when an integral type is the default tensor type will result in an array; np.array basically lets anything through (floating-point / integral mismatch, overflow, etc).  This is to keep it consistent with Variable.new when called with a sequence, although we can loosen the checks later.\nThis will be renamed to torch.tensor once we merge Variable and tensor.", "body": "Implements a function, torch.autograd.variable that is modeled after np.array.  The main difference between it and new() and the tensor constructors is it inteprets a python number as data, i.e. as a 0-dimensional tensor (we currently don't expose that at the pytorchl level, so it will temporarily end up as a 1-dimensional tensor), rather than a size.\r\n\r\nThe main difference currently between torch.autograd.variable and np.array is that np.autograd.variable is stricter, e.g. passing a PyFloat when an integral type is the default tensor type will result in an array; np.array basically lets anything through (floating-point / integral mismatch, overflow, etc).  This is to keep it consistent with Variable.new when called with a sequence, although we can loosen the checks later.\r\n\r\nThis will be renamed to torch.tensor once we merge Variable and tensor."}