{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214498909", "pull_request_review_id": 151577393, "id": 214498909, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ5ODkwOQ==", "diff_hunk": "@@ -0,0 +1,57 @@\n+#pragma once\n+#include <torch/csrc/jit/script/compiler.h>\n+#include <torch/csrc/jit/script/module.h>\n+#include <torch/csrc/jit/stack.h>\n+\n+#include <string>\n+\n+namespace torch {\n+namespace jit {\n+\n+/// Compiles Python JIT code into a graph that can be executed.\n+///\n+/// For example:\n+/// @code\n+///   auto module = torch::jit::compile(R\"JIT(\n+///     def relu_script(a, b):\n+///       return torch.relu(a + b)\n+///     def test_while(a, i):\n+///       while i < 10:\n+///         a += a\n+///         i += 1\n+///       return a\n+///   )JIT\");\n+///   auto output = torch::jit::run(module, \"relu_script\", a, b);\n+///   auto output = torch::jit::run(module, \"test_while\", a, b);\n+/// @endcode\n+///\n+/// @param source A string containing functions containing script code to\n+/// compile\n+/// @return A module containing the compiled functions\n+std::shared_ptr<script::Module> compile(const std::string& source);\n+\n+/// Run a method from a module and get a list of the returns.\n+///\n+/// For example:\n+/// @code\n+///   auto output = torch::jit::run(module, \"relu_script\", a, b);\n+///   std::cout << output[0].toTensor().toCLong() << std::endl;\n+/// @endcode\n+///\n+/// @param module A module containing the method `method_name` (see\n+/// torch::jit::compile)\n+/// @param method_name The name of the method to run\n+/// @param args Arguments to be passed to the method\n+/// @return An IValue containing the return value (or values if it is a tuple)\n+/// from the method\n+template <typename... Types>\n+IValue run(", "path": "torch/csrc/api/include/torch/jit.h", "position": null, "original_position": 48, "commit_id": "5f1ad65e123c742374bb76084767a57fe9209cd1", "original_commit_id": "87b5d96b36b1bfb04253ced44b2fc9febb651ae4", "user": {"login": "driazati", "id": 9407960, "node_id": "MDQ6VXNlcjk0MDc5NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9407960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/driazati", "html_url": "https://github.com/driazati", "followers_url": "https://api.github.com/users/driazati/followers", "following_url": "https://api.github.com/users/driazati/following{/other_user}", "gists_url": "https://api.github.com/users/driazati/gists{/gist_id}", "starred_url": "https://api.github.com/users/driazati/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/driazati/subscriptions", "organizations_url": "https://api.github.com/users/driazati/orgs", "repos_url": "https://api.github.com/users/driazati/repos", "events_url": "https://api.github.com/users/driazati/events{/privacy}", "received_events_url": "https://api.github.com/users/driazati/received_events", "type": "User", "site_admin": false}, "body": "Agreed, fixed in latest push. It's better on the user end but might get messy later on if we're mixing user-end APIs into the internal JIT code. Should we have a wrapper for `Module` for the C++ API instead?", "created_at": "2018-09-01T00:31:26Z", "updated_at": "2018-11-23T15:50:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/10847#discussion_r214498909", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10847", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/214498909"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10847#discussion_r214498909"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10847"}}, "body_html": "<p>Agreed, fixed in latest push. It's better on the user end but might get messy later on if we're mixing user-end APIs into the internal JIT code. Should we have a wrapper for <code>Module</code> for the C++ API instead?</p>", "body_text": "Agreed, fixed in latest push. It's better on the user end but might get messy later on if we're mixing user-end APIs into the internal JIT code. Should we have a wrapper for Module for the C++ API instead?", "in_reply_to_id": 214478859}