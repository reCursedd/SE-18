{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213457198", "pull_request_review_id": 150296034, "id": 213457198, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzQ1NzE5OA==", "diff_hunk": "@@ -134,6 +149,7 @@ TORCH_API void defineMethodsInModule(\n // same as above but parse the definitions from source\n TORCH_API void defineMethodsInModule(Module & m, const std::string& source, const Resolver& resolver, std::shared_ptr<SugaredValue> self);\n TORCH_API std::shared_ptr<Graph> compileFunction(Def def, const Resolver& resolver);\n+TORCH_API std::shared_ptr<Graph> compileFunction(const std::string& source);", "path": "torch/csrc/jit/script/compiler.h", "position": null, "original_position": 28, "commit_id": "5f1ad65e123c742374bb76084767a57fe9209cd1", "original_commit_id": "35c4f5eb7e1d45a5df04f3a687c030a90943a7e6", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "We want to expose this function to external C++ users, so we should be sure to document it very well. Imagine I'm a user of the C++ API who knows nothing about the JIT and want to use this function. Questions I would have:\r\n- What should the string that I pass it contain? What are the limitations? Only one function? Many functions?\r\n- What can I use inside the function I pass to the string? Everything under `torch`?\r\n- What is the syntax of the function I write in the string? We don't have a language reference yet, but maybe there is something else we can link to for this.\r\n- What is the thing that is returned by the function? How do I execute it? How do I pass inputs to it? How do I get outputs out of it?\r\n\r\n I think this function deserves a nice paragraph on top explaining these things. You can also put a small codeblock in the comment that compiles and runs a minimal function.\r\n\r\nAlso, if it's very difficult to execute the method (I see a lot of wrapper functions in the tests), we should so some more work. I would expect the whole thing to look something like\r\n\r\n```\r\nauto fn = torch::jit::script::compileFunction(\"...\");\r\nauto output = fn->run(inputs);\r\n```\r\n\r\nAlso, any reason we want to call it `compileFunction` instead of `compile`? `compile` is more concise IMO", "created_at": "2018-08-28T20:16:39Z", "updated_at": "2018-11-23T15:50:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/10847#discussion_r213457198", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10847", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213457198"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10847#discussion_r213457198"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10847"}}, "body_html": "<p>We want to expose this function to external C++ users, so we should be sure to document it very well. Imagine I'm a user of the C++ API who knows nothing about the JIT and want to use this function. Questions I would have:</p>\n<ul>\n<li>What should the string that I pass it contain? What are the limitations? Only one function? Many functions?</li>\n<li>What can I use inside the function I pass to the string? Everything under <code>torch</code>?</li>\n<li>What is the syntax of the function I write in the string? We don't have a language reference yet, but maybe there is something else we can link to for this.</li>\n<li>What is the thing that is returned by the function? How do I execute it? How do I pass inputs to it? How do I get outputs out of it?</li>\n</ul>\n<p>I think this function deserves a nice paragraph on top explaining these things. You can also put a small codeblock in the comment that compiles and runs a minimal function.</p>\n<p>Also, if it's very difficult to execute the method (I see a lot of wrapper functions in the tests), we should so some more work. I would expect the whole thing to look something like</p>\n<pre><code>auto fn = torch::jit::script::compileFunction(\"...\");\nauto output = fn-&gt;run(inputs);\n</code></pre>\n<p>Also, any reason we want to call it <code>compileFunction</code> instead of <code>compile</code>? <code>compile</code> is more concise IMO</p>", "body_text": "We want to expose this function to external C++ users, so we should be sure to document it very well. Imagine I'm a user of the C++ API who knows nothing about the JIT and want to use this function. Questions I would have:\n\nWhat should the string that I pass it contain? What are the limitations? Only one function? Many functions?\nWhat can I use inside the function I pass to the string? Everything under torch?\nWhat is the syntax of the function I write in the string? We don't have a language reference yet, but maybe there is something else we can link to for this.\nWhat is the thing that is returned by the function? How do I execute it? How do I pass inputs to it? How do I get outputs out of it?\n\nI think this function deserves a nice paragraph on top explaining these things. You can also put a small codeblock in the comment that compiles and runs a minimal function.\nAlso, if it's very difficult to execute the method (I see a lot of wrapper functions in the tests), we should so some more work. I would expect the whole thing to look something like\nauto fn = torch::jit::script::compileFunction(\"...\");\nauto output = fn->run(inputs);\n\nAlso, any reason we want to call it compileFunction instead of compile? compile is more concise IMO"}