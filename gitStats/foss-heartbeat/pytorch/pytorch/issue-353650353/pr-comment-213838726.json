{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213838726", "pull_request_review_id": 150760300, "id": 213838726, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgzODcyNg==", "diff_hunk": "@@ -0,0 +1,58 @@\n+#pragma once\n+\n+#include <string>\n+#include <torch/csrc/jit/script/module.h>\n+#include <torch/csrc/jit/script/compiler.h>\n+#include <torch/csrc/jit/stack.h>\n+\n+namespace torch {\n+namespace jit {\n+\n+/// Compiles Python JIT code into a graph that can be executed.\n+///\n+/// For example:\n+/// ```\n+/// auto module = torch::jit::compile(R\"JIT(\n+///   def relu_script(a, b):\n+///     return torch.relu(a + b)\n+///   def test_while(a, i):\n+///     while i < 10:\n+///       a += a\n+///       i += 1\n+///     return a\n+/// )JIT\");\n+/// auto output = torch::jit::run(module, \"relu_script\", a, b);\n+/// auto output = torch::jit::run(module, \"test_while\", a, b);\n+/// ```\n+///\n+/// @param source A JIT string containing functions that are valid under the\n+///               scope of the script compiler\n+/// @return A module containing the compiled functions\n+std::shared_ptr<script::Module> compile(const std::string& source);\n+\n+/// Run a method from a module and get a list of the returns.\n+///\n+/// For example:\n+/// ```\n+/// auto output = torch::jit::run(module, \"relu_script\", a, b);\n+/// std::cout << output[0].toTensor().toCLong() << std::endl;\n+/// ```\n+///\n+///\n+/// @param module A module containing the method `method_name` (see torch::jit::compile)\n+/// @param method_name The name of the method to run\n+/// @param args Arguments to be passed to the method\n+/// @return A vector of `IValue`s that contain the results of the method\n+template<typename... Types>\n+Stack run(std::shared_ptr<script::Module> module, const std::string& method_name, Types&... args) {\n+  // Marhsal arguments into stack of IValues\n+  Stack stack;\n+  std::initializer_list<int>{ (stack.push_back(IValue(args)), 0)... };\n+\n+  // Interpret graph and run computation\n+  module->get_method(method_name).run(stack);", "path": "torch/csrc/api/include/torch/jit.h", "position": null, "original_position": 53, "commit_id": "5f1ad65e123c742374bb76084767a57fe9209cd1", "original_commit_id": "e21285ad2800003e86adb6b5feb11b3f6c86014b", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "We recently added an overload for `operator()` which checks arguments against the schema: https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/module.h#L63\r\n\r\nAnd then you can also just construct the vector directly when calling the function. So this whole function should maybe be\r\n```\r\nmodule->get_method(method_name)({IValue(std::forward<Args>(args))...});\r\n```", "created_at": "2018-08-29T21:22:35Z", "updated_at": "2018-11-23T15:50:17Z", "html_url": "https://github.com/pytorch/pytorch/pull/10847#discussion_r213838726", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10847", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213838726"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10847#discussion_r213838726"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10847"}}, "body_html": "<p>We recently added an overload for <code>operator()</code> which checks arguments against the schema: <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/module.h#L63\">https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/module.h#L63</a></p>\n<p>And then you can also just construct the vector directly when calling the function. So this whole function should maybe be</p>\n<pre><code>module-&gt;get_method(method_name)({IValue(std::forward&lt;Args&gt;(args))...});\n</code></pre>", "body_text": "We recently added an overload for operator() which checks arguments against the schema: https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/module.h#L63\nAnd then you can also just construct the vector directly when calling the function. So this whole function should maybe be\nmodule->get_method(method_name)({IValue(std::forward<Args>(args))...});"}