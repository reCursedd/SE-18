{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212737410", "pull_request_review_id": 149437683, "id": 212737410, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjczNzQxMA==", "diff_hunk": "@@ -52,23 +51,38 @@ Tensor triplet_margin_loss(const Tensor& anchor, const Tensor& positive, const T\n     dist_neg = at::min(dist_neg, dist_swap);\n   }\n   auto output = at::clamp_min(margin + dist_pos - dist_neg, 0);\n-\n-  if (reduction == Reduction::ElementwiseMean) {\n-    return output.sum() / output.numel();\n-  } else if (reduction == Reduction::Sum) {\n-    return output.sum();\n-  }\n-  return output;\n+  return apply_loss_reduction(output, reduction);\n }\n \n Tensor margin_ranking_loss(const Tensor& input1, const Tensor& input2, const Tensor& target, double margin, int64_t reduction) {\n   auto output =  (-target * (input1 - input2) + margin).clamp_min_(0);\n+  return apply_loss_reduction(output, reduction);\n+}\n \n+Tensor kl_div(const Tensor& input, const Tensor& target, int64_t reduction) {\n+  auto zeros = at::zeros_like(target);\n+  auto output_pos = target * (at::log(target) - input);\n+  auto output = at::where(target > 0, output_pos, zeros);\n+  return apply_loss_reduction(output, reduction);\n+}\n+\n+Tensor kl_div_backward_cpu(const Tensor& grad, const Tensor& input, const Tensor& target, int64_t reduction) {\n+  auto grad_input = grad.type().zeros_like(input);\n+  auto grad_expand = grad.expand_as(input);\n+  AT_DISPATCH_FLOATING_TYPES(input.type(), \"kl_div_backward\", [&]() {\n+    at::CPU_tensor_apply3<scalar_t, scalar_t, scalar_t>(\n+        grad_input,\n+        target,\n+        grad_expand,\n+        [] (scalar_t& grad_input_val, const scalar_t& target_val, const scalar_t& grad_val) {\n+          if (target_val > 0) {\n+            grad_input_val = -target_val * grad_val;\n+          }\n+        });\n+  });\n   if (reduction == Reduction::ElementwiseMean) {\n-    return output.sum() / output.numel();\n-  } else if (reduction == Reduction::Sum) {\n-    return output.sum();\n+    return grad_input / input.numel();", "path": "aten/src/ATen/native/Loss.cpp", "position": 95, "original_position": 97, "commit_id": "ab13c709a385960678392dd94f2de15183a94cce", "original_commit_id": "02418d9f8ae3b55289d877e414d03991e7594e05", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "The case for `Reduction::Sum` seems removed. I didn't check the maths, but am wondering if the code works for both `Sum` and `None` cases.", "created_at": "2018-08-24T19:50:26Z", "updated_at": "2018-11-23T15:50:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/10336#discussion_r212737410", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10336", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212737410"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10336#discussion_r212737410"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10336"}}, "body_html": "<p>The case for <code>Reduction::Sum</code> seems removed. I didn't check the maths, but am wondering if the code works for both <code>Sum</code> and <code>None</code> cases.</p>", "body_text": "The case for Reduction::Sum seems removed. I didn't check the maths, but am wondering if the code works for both Sum and None cases."}