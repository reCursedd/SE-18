{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/274174019", "html_url": "https://github.com/pytorch/pytorch/issues/517#issuecomment-274174019", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/517", "id": 274174019, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDE3NDAxOQ==", "user": {"login": "ngimel", "id": 15841449, "node_id": "MDQ6VXNlcjE1ODQxNDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15841449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngimel", "html_url": "https://github.com/ngimel", "followers_url": "https://api.github.com/users/ngimel/followers", "following_url": "https://api.github.com/users/ngimel/following{/other_user}", "gists_url": "https://api.github.com/users/ngimel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngimel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngimel/subscriptions", "organizations_url": "https://api.github.com/users/ngimel/orgs", "repos_url": "https://api.github.com/users/ngimel/repos", "events_url": "https://api.github.com/users/ngimel/events{/privacy}", "received_events_url": "https://api.github.com/users/ngimel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-20T20:38:43Z", "updated_at": "2017-01-20T20:38:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Please refer to cudnn manual for information on how it is supported. Generally, cudnn expects an array of input descriptors as an input to forward/backward calls, and those input descriptors specify what batch size is present for this step in time sequence (e.g. you start with a batch size of 64 for step 0, then shorter sequences drop out, and at step, say, 30 you batch size is 42, at 31 batch size is 40 etc - as I've said, the input has to be sorted by sequence length). The input (and output) data is no longer a 3D tensor, it is expected to be stacked 2D tensors with the sizes [[N1, I], [N2,I], [N3,I] ... ] where N_i is number of samples in the batch at i-th step, I is input feature size. N_i is supposed to be sorted in decreasing order. Currently, for batch_first inputs and outputs are just transposed - it will no longer be possible. But the solution you outline should work.</p>", "body_text": "Please refer to cudnn manual for information on how it is supported. Generally, cudnn expects an array of input descriptors as an input to forward/backward calls, and those input descriptors specify what batch size is present for this step in time sequence (e.g. you start with a batch size of 64 for step 0, then shorter sequences drop out, and at step, say, 30 you batch size is 42, at 31 batch size is 40 etc - as I've said, the input has to be sorted by sequence length). The input (and output) data is no longer a 3D tensor, it is expected to be stacked 2D tensors with the sizes [[N1, I], [N2,I], [N3,I] ... ] where N_i is number of samples in the batch at i-th step, I is input feature size. N_i is supposed to be sorted in decreasing order. Currently, for batch_first inputs and outputs are just transposed - it will no longer be possible. But the solution you outline should work.", "body": "Please refer to cudnn manual for information on how it is supported. Generally, cudnn expects an array of input descriptors as an input to forward/backward calls, and those input descriptors specify what batch size is present for this step in time sequence (e.g. you start with a batch size of 64 for step 0, then shorter sequences drop out, and at step, say, 30 you batch size is 42, at 31 batch size is 40 etc - as I've said, the input has to be sorted by sequence length). The input (and output) data is no longer a 3D tensor, it is expected to be stacked 2D tensors with the sizes [[N1, I], [N2,I], [N3,I] ... ] where N_i is number of samples in the batch at i-th step, I is input feature size. N_i is supposed to be sorted in decreasing order. Currently, for batch_first inputs and outputs are just transposed - it will no longer be possible. But the solution you outline should work. "}