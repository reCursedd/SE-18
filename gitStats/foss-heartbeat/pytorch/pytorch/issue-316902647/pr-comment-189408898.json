{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189408898", "pull_request_review_id": 121591202, "id": 189408898, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQwODg5OA==", "diff_hunk": "@@ -0,0 +1,163 @@\n+#include \"ATen/NativeFunctions.h\"\n+#include \"ATen/ATen.h\"\n+#include <algorithm>\n+#include <sstream>\n+\n+#include \"ATen/cuda/AccumulateType.cuh\"\n+#include \"ATen/cuda/CUDATensorMethods.cuh\"\n+#include \"ATen/cuda/CUDATypeConversion.cuh\"\n+\n+\n+namespace at {\n+namespace native {\n+\n+// Map the index of an element in tensor from 1D to nD\n+__device__ __forceinline__\n+void linear_index_to_indices(int64_t linear_index, int64_t* each_dim_len, int64_t total_dims, int64_t* indices) {\n+  int64_t res = linear_index;\n+  for (int64_t i = 0; i < total_dims; i++) {\n+    int64_t indices_i = linear_index * total_dims + i;\n+    indices[indices_i] = res / each_dim_len[i];\n+    res = res % each_dim_len[i];\n+  }\n+}\n+\n+/*\n+Map the index of an element in tensor from nD to 1D. A tensor is originally in nD shape,\n+and 1D is the unfolded version of it (a vector).\n+\n+Example: given a 3D tensor\n+[\n+  [ [1,2], [3,4] ],\n+  [ [5,6], [7,8] ]\n+]\n+\n+Here element 3 has nD index = (0,1,0), and this corresponds to oneD index = 2\n+*/\n+__device__ __forceinline__\n+int64_t indices_to_linear_index(int64_t* indices, int64_t total_dims, int64_t* each_dim_len, int64_t src_linear_index) {\n+  int64_t dest_linear_index = 0;\n+  for (int64_t i = 0; i < total_dims; i++) {\n+    int64_t indices_i = src_linear_index * total_dims + i;\n+    dest_linear_index += indices[indices_i] * each_dim_len[i];\n+  }\n+  return dest_linear_index;\n+}\n+\n+template <typename scalar_t>\n+__global__\n+void flip_cuda_kernel(scalar_t* in_t, scalar_t* out_t, int64_t N, int64_t* dims, int64_t* indices,\n+  int64_t flip_dims_size, int64_t* each_dim_len, int64_t* shape, int64_t total_dims) {\n+\n+  int64_t linear_index = blockIdx.x * blockDim.x + threadIdx.x;\n+  if (linear_index >= N) {\n+    return;\n+  }\n+\n+  linear_index_to_indices(linear_index, each_dim_len, total_dims, indices);\n+\n+  // flip nD index along each desired dimension\n+  for (int64_t i = 0 ; i < flip_dims_size; i++) {\n+    int64_t dim = dims[i];\n+    int64_t indices_dim = linear_index * total_dims + dim;\n+    indices[indices_dim] = shape[dim] - 1 - indices[indices_dim];\n+  }\n+  int64_t dest_linear_index = indices_to_linear_index(indices, total_dims, each_dim_len, linear_index);\n+  out_t[linear_index] = in_t[dest_linear_index];\n+}\n+\n+Tensor flip_cuda(const Tensor& self, IntList dims) {\n+\n+  // TODO: allow non-contiguous tensors\n+  self.contiguous();\n+\n+  int64_t flip_dims_size = dims.size(), total_dims = self.dim(), N = self.numel();\n+\n+  // check if number of axis in dim is valid\n+  if (flip_dims_size == 0) {\n+    std::stringstream ss;\n+    ss << \"expected input tensor dims not empty, \"\n+       << \"but got tensor dims size=\" << flip_dims_size;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check duplicates in dims\n+  auto flip_dims_v = std::vector<int64_t>(dims);\n+  flip_dims_v.erase(std::unique(flip_dims_v.begin(), flip_dims_v.end()), flip_dims_v.end());\n+  if ((int64_t)flip_dims_v.size() < flip_dims_size) {\n+    std::stringstream ss;\n+    ss << \"dims has duplicates, \"\n+       << \"original flip dims size=\" << flip_dims_size << \", \"\n+       << \"but unique flip dims size= \" << flip_dims_v.size();\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check len of dims\n+  if (flip_dims_size > total_dims) {\n+    std::stringstream ss;\n+    ss << \"expected flip dims size <= tensor total dims, \"\n+       << \"but got flip dims size=\" << flip_dims_size << \" and \"\n+       << \"tensor total dim=\" << total_dims;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check if dims axis within range\n+  int64_t min_d = total_dims, max_d = 0;\n+  for (auto d : dims) {\n+    min_d = std::min(min_d, d);\n+    max_d = std::max(max_d, d);\n+  }\n+\n+  if (min_d < 0) {\n+    std::stringstream ss;\n+    ss << \"expected flip dims axis >= 0, \"\n+       << \"but got min flip dims=\" << min_d;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  if (max_d >= total_dims) {\n+    std::stringstream ss;\n+    ss << \"expected flip dims axis < tensor total dims, \"\n+       << \"but got max flip dims=\" << max_d << \" and \"\n+       << \"tensor total dim=\" << total_dims;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  Tensor flip_dims_t = at::zeros(CPU(kLong), {flip_dims_size});\n+  int64_t* flip_dims_t_d = flip_dims_t.data<int64_t>();\n+  for (int64_t i = 0; i < flip_dims_size; i++) {\n+    flip_dims_t_d[i] = dims[i];\n+  }\n+\n+  auto shape = self.sizes();\n+  Tensor shape_t = at::zeros(CPU(kLong), {total_dims});\n+  int64_t* shape_t_d = shape_t.data<int64_t>();\n+  for (int64_t i = 0; i < total_dims; i++) {\n+    shape_t_d[i] = shape[i];\n+  }\n+\n+  Tensor each_dim_len = at::zeros(CPU(kLong), {total_dims});\n+  int64_t* each_dim_len_d = each_dim_len.data<int64_t>();\n+  int64_t tmp = N;\n+  for (int64_t i = 0; i < total_dims; i++) {\n+    tmp = tmp / shape[i];\n+    each_dim_len_d[i] = tmp;\n+  }\n+\n+  Tensor indices = at::zeros(CUDA(kLong), {N, total_dims});\n+  Tensor out_t = self.clone();", "path": "aten/src/ATen/native/cuda/TensorTransformations.cu", "position": null, "original_position": 148, "commit_id": "f385f42db7dccc55ef84731a42624d797228e052", "original_commit_id": "a5537c2a3d86c9c3f638c5d3b8f4097116a39185", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Just to be clear, I meant creating an uninitialized tensor is fine. I was a bit confused myself when I saw this again :D", "created_at": "2018-05-18T22:45:08Z", "updated_at": "2018-11-23T15:44:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/6867#discussion_r189408898", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6867", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189408898"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6867#discussion_r189408898"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6867"}}, "body_html": "<p>Just to be clear, I meant creating an uninitialized tensor is fine. I was a bit confused myself when I saw this again :D</p>", "body_text": "Just to be clear, I meant creating an uninitialized tensor is fine. I was a bit confused myself when I saw this again :D", "in_reply_to_id": 185189576}