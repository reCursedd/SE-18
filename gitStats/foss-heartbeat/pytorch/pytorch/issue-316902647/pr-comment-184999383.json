{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184999383", "pull_request_review_id": 116302737, "id": 184999383, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDk5OTM4Mw==", "diff_hunk": "@@ -0,0 +1,78 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/ExpandUtils.h\"\n+#include \"ATen/NativeFunctions.h\"\n+#include <functional>\n+#include <numeric>\n+#include <vector>\n+\n+\n+namespace at {\n+namespace native {\n+\n+Tensor reverse_dim(const Tensor& t, int64_t dim) {\n+  Tensor index = at::arange(t.type().toScalarType(at::ScalarType::Long), t.size(dim) - 1, -1, -1);\n+  return t.index_select(dim, index);\n+}\n+\n+Tensor flip_cpu(const Tensor& self, IntList dims) {\n+\n+  int64_t total_dims = self.dim(), flip_dims_size = dims.size();\n+\n+  // check if number of axis in dim is valid\n+  if (flip_dims_size == 0) {\n+    std::stringstream ss;\n+    ss << \"expected input tensor dims not empty, \"\n+       << \"but got tensor dims size=\" << flip_dims_size;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check duplicates in dims\n+  auto flip_dims_v = std::vector<int64_t>(dims);\n+  flip_dims_v.erase(std::unique(flip_dims_v.begin(), flip_dims_v.end()), flip_dims_v.end());\n+  if ((int64_t)flip_dims_v.size() < flip_dims_size) {\n+    std::stringstream ss;\n+    ss << \"dims has duplicates, \"\n+       << \"original flip dims size=\" << flip_dims_size << \", \"\n+       << \"but unique flip dims size= \" << flip_dims_v.size();\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check len of dims\n+  if (flip_dims_size > total_dims) {\n+    std::stringstream ss;\n+    ss << \"expected flip dims size <= tensor total dims, \"\n+       << \"but got flip dims size=\" << flip_dims_size << \" and \"\n+       << \"tensor total dim=\" << total_dims;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check if dims axis within range\n+  int64_t min_d = total_dims, max_d = 0;\n+  for (auto d : dims) {\n+    min_d = std::min(min_d, d);\n+    max_d = std::max(max_d, d);\n+  }\n+\n+  if (min_d < 0) {\n+    std::stringstream ss;\n+    ss << \"expected flip dims axis >= 0, \"\n+       << \"but got min flip dims=\" << min_d;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  if (max_d >= total_dims) {\n+    std::stringstream ss;\n+    ss << \"expected flip dims axis < tensor total dims, \"\n+       << \"but got max flip dims=\" << max_d << \" and \"\n+       << \"tensor total dim=\" << total_dims;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  Tensor out_t = self.clone();\n+  for (auto d : dims) {\n+    out_t.copy_(reverse_dim(out_t, d));", "path": "aten/src/ATen/native/TensorTransformations.cpp", "position": null, "original_position": 73, "commit_id": "f385f42db7dccc55ef84731a42624d797228e052", "original_commit_id": "a5537c2a3d86c9c3f638c5d3b8f4097116a39185", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Okay even if you don't want to do the more efficient way. please do not do two copies in each iteration. Shouldn't `out_t = reverse_dim(out_t, d)` be enough?\r\n\r\nI still advocate just one single copy though.", "created_at": "2018-04-30T14:18:17Z", "updated_at": "2018-11-23T15:43:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/6867#discussion_r184999383", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6867", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184999383"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6867#discussion_r184999383"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6867"}}, "body_html": "<p>Okay even if you don't want to do the more efficient way. please do not do two copies in each iteration. Shouldn't <code>out_t = reverse_dim(out_t, d)</code> be enough?</p>\n<p>I still advocate just one single copy though.</p>", "body_text": "Okay even if you don't want to do the more efficient way. please do not do two copies in each iteration. Shouldn't out_t = reverse_dim(out_t, d) be enough?\nI still advocate just one single copy though."}