{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183505352", "pull_request_review_id": 114511815, "id": 183505352, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzUwNTM1Mg==", "diff_hunk": "@@ -26,4 +26,158 @@ Tensor& eye_out_cuda(Tensor& result, int64_t n, int64_t m) {\n   return result;\n }\n \n+__device__ void oneD_to_nD(int64_t oneD_index, int64_t* shape_size, int64_t shape_len, int64_t* nD_index) {\n+  int64_t res = oneD_index;\n+  for (int i = 0; i < shape_len; i++) {\n+    int64_t nD_i = oneD_index * shape_len + i;\n+    nD_index[nD_i] = res / shape_size[i];\n+    res = res % shape_size[i];\n+  }\n+}\n+\n+__device__ int64_t nD_to_oneD(int64_t* nD_index, int64_t shape_len, int64_t* shape_size, int64_t src_oneD_index) {\n+  int64_t dest_oneD_index = 0;\n+  for (int i = 0; i < shape_len; i++) {\n+    int64_t nD_i = src_oneD_index * shape_len + i;\n+    dest_oneD_index += nD_index[nD_i] * shape_size[i];\n+  }\n+  return dest_oneD_index;\n+}\n+\n+__global__ void flip_cuda_kernel(double* in_t, double* out_t, int64_t N, int64_t* dims, int64_t* nD_index,\n+  int64_t dims_len, int64_t* shape_size, int64_t* shape, int64_t shape_len) {\n+\n+  int64_t oneD_index = blockIdx.x * blockDim.x + threadIdx.x;\n+  if (oneD_index >= N) {\n+    return;\n+  }\n+\n+  oneD_to_nD(oneD_index, shape_size, shape_len, nD_index);\n+  for (int i = 0 ; i < dims_len; i++) {\n+    int64_t d = dims[i];\n+    int64_t nD_d = oneD_index * shape_len + d;\n+    nD_index[nD_d] = shape[d]-1-nD_index[nD_d];\n+  }\n+  int64_t dest_oneD_index = nD_to_oneD(nD_index, shape_len, shape_size, oneD_index);\n+  out_t[oneD_index] = in_t[dest_oneD_index];\n+}\n+\n+Tensor flip_cuda(const Tensor& self, IntList dims) {\n+  // check if number of axis in dim is valid\n+  if (dims.size() == 0) {\n+    std::stringstream ss;\n+    ss << \"CUDA: expected dims not empty, \"\n+       << \"but got dims size=\" << dims.size();\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // remove duplicates in dims", "path": "aten/src/ATen/native/cuda/TensorFactories.cu", "position": null, "original_position": 49, "commit_id": "f385f42db7dccc55ef84731a42624d797228e052", "original_commit_id": "86dff1b7cb414bd74cc80a334beebff5e2fd0e67", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Can we let this be an error? If duplicate dims are allowed, it makes somewhat sense to think that `.flip([1, 1])`is identity.", "created_at": "2018-04-23T19:07:25Z", "updated_at": "2018-11-23T15:43:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/6867#discussion_r183505352", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6867", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183505352"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6867#discussion_r183505352"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6867"}}, "body_html": "<p>Can we let this be an error? If duplicate dims are allowed, it makes somewhat sense to think that <code>.flip([1, 1])</code>is identity.</p>", "body_text": "Can we let this be an error? If duplicate dims are allowed, it makes somewhat sense to think that .flip([1, 1])is identity."}