{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183505744", "pull_request_review_id": 114511815, "id": 183505744, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzUwNTc0NA==", "diff_hunk": "@@ -321,5 +321,68 @@ Tensor zeros_like(const Tensor& self, const Type& dtype) {\n   return at::native::zeros(dtype, self.sizes());\n }\n \n+Tensor reverse_dim(const Tensor& t, int64_t dim) {\n+  Tensor index = at::arange(t.type().toScalarType(at::ScalarType::Long), t.size(dim) - 1, -1, -1);\n+  return t.index_select(dim, index);\n+}\n+\n+Tensor flip_cpu(const Tensor& self, IntList dims) {\n+  // check if number of axis in dim is valid\n+  if (dims.size() == 0) {\n+    std::stringstream ss;\n+    ss << \"expected dims not empty, \"\n+       << \"but got dims size=\" << dims.size();\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // remove duplicates in dims\n+  auto dims_v = std::vector<int64_t>(dims);\n+  dims_v.erase(std::unique(dims_v.begin(), dims_v.end()), dims_v.end());\n+  dims = IntList(dims_v);\n+\n+  int64_t shape_len = self.dim(), dims_len = dims.size();\n+\n+  if (dims_len > shape_len) {\n+    std::stringstream ss;\n+    ss << \"expected dims to have size <= total tensor dims, \"\n+       << \"but got dims size=\" << dims_len << \" and \"\n+       << \"tensor dim=\" << shape_len;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check if dims axis within range\n+  int64_t min_d = shape_len;\n+  int64_t max_d = 0;\n+  for (auto d : dims) {\n+    min_d = std::min(min_d, d);\n+    max_d = std::max(max_d, d);\n+  }\n+\n+  if (min_d < 0) {\n+    std::stringstream ss;\n+    ss << \"expected dims axis >= 0, \"\n+       << \"but got min dims=\" << min_d;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  if (max_d >= shape_len) {\n+    std::stringstream ss;\n+    ss << \"expected dims axis < total tensor dims, \"\n+       << \"but got max dims=\" << max_d << \" and \"\n+       << \"tensor dim=\" << shape_len;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  Tensor res = self.clone();\n+  for (auto d : dims) {\n+    res.copy_(reverse_dim(res, d));", "path": "aten/src/ATen/native/TensorFactories.cpp", "position": null, "original_position": 58, "commit_id": "f385f42db7dccc55ef84731a42624d797228e052", "original_commit_id": "86dff1b7cb414bd74cc80a334beebff5e2fd0e67", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "You should do this in **1** copy instead of **dim**  copies.", "created_at": "2018-04-23T19:08:47Z", "updated_at": "2018-11-23T15:43:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/6867#discussion_r183505744", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6867", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183505744"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6867#discussion_r183505744"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6867"}}, "body_html": "<p>You should do this in <strong>1</strong> copy instead of <strong>dim</strong>  copies.</p>", "body_text": "You should do this in 1 copy instead of dim  copies."}