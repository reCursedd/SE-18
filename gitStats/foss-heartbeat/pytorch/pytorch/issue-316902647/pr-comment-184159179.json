{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184159179", "pull_request_review_id": 115296960, "id": 184159179, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDE1OTE3OQ==", "diff_hunk": "@@ -0,0 +1,79 @@\n+#include \"ATen/ATen.h\"\n+#include \"ATen/ExpandUtils.h\"\n+#include \"ATen/NativeFunctions.h\"\n+#include <functional>\n+#include <numeric>\n+#include <vector>\n+\n+\n+namespace at {\n+namespace native {\n+\n+Tensor reverse_dim(const Tensor& t, int64_t dim) {\n+  Tensor index = at::arange(t.type().toScalarType(at::ScalarType::Long), t.size(dim) - 1, -1, -1);\n+  return t.index_select(dim, index);\n+}\n+\n+Tensor flip_cpu(const Tensor& self, IntList dims) {\n+\n+  int64_t shape_len = self.dim(), dims_len = dims.size();\n+\n+  // check if number of axis in dim is valid\n+  if (dims_len == 0) {\n+    std::stringstream ss;\n+    ss << \"expected dims not empty, \"\n+       << \"but got dims size=\" << dims_len;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check duplicates in dims\n+  auto dims_v = std::vector<int64_t>(dims);\n+  dims_v.erase(std::unique(dims_v.begin(), dims_v.end()), dims_v.end());\n+  dims = IntList(dims_v);\n+  if (dims.size() < dims_len) {\n+    std::stringstream ss;\n+    ss << \"dims has duplicates, \"\n+       << \"input dims size=\" << dims_len << \", \"\n+       << \"but unique dims size= \" << dims.size();\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  if (dims_len > shape_len) {\n+    std::stringstream ss;\n+    ss << \"expected dims to have size <= total tensor dims, \"\n+       << \"but got dims size=\" << dims_len << \" and \"\n+       << \"tensor dim=\" << shape_len;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  // check if dims axis within range\n+  int64_t min_d = shape_len;\n+  int64_t max_d = 0;\n+  for (auto d : dims) {\n+    min_d = std::min(min_d, d);\n+    max_d = std::max(max_d, d);\n+  }\n+\n+  if (min_d < 0) {\n+    std::stringstream ss;\n+    ss << \"expected dims axis >= 0, \"\n+       << \"but got min dims=\" << min_d;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  if (max_d >= shape_len) {\n+    std::stringstream ss;\n+    ss << \"expected dims axis < total tensor dims, \"\n+       << \"but got max dims=\" << max_d << \" and \"\n+       << \"tensor dim=\" << shape_len;\n+    throw std::runtime_error(ss.str());\n+  }\n+\n+  Tensor res = self.clone();\n+  for (auto d : dims) {", "path": "aten/src/ATen/native/TensorTransformations.cpp", "position": null, "original_position": 73, "commit_id": "f385f42db7dccc55ef84731a42624d797228e052", "original_commit_id": "0a44235b7ae598569ec20044251c7837f5a66e95", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "@SsnL should I still optimize a bit here? Is there any other existing APIs I should use, or should I implement something similar to the CUDA forward implementation which only keeps one copy of tensor?", "created_at": "2018-04-25T18:16:29Z", "updated_at": "2018-11-23T15:43:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/6867#discussion_r184159179", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6867", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/184159179"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6867#discussion_r184159179"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6867"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> should I still optimize a bit here? Is there any other existing APIs I should use, or should I implement something similar to the CUDA forward implementation which only keeps one copy of tensor?</p>", "body_text": "@SsnL should I still optimize a bit here? Is there any other existing APIs I should use, or should I implement something similar to the CUDA forward implementation which only keeps one copy of tensor?"}