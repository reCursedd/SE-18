{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188474129", "pull_request_review_id": 120459896, "id": 188474129, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODQ3NDEyOQ==", "diff_hunk": "@@ -23,28 +23,24 @@\n #include <assert.h>\n #include <stdio.h>\n \n-#define DEBUG_PRINT(...) ;\n+#define DEBUG_PRINT(...)\n \n namespace nom {\n \n-template <typename T, typename U = T>\n+template <typename T, typename U>\n class Graph;\n \n-template <typename T, typename U = T>\n+template <typename T, typename U>\n+class GraphBase;\n+\n+template <typename T, typename U>\n class Node;\n \n-template <typename T, typename U = T>\n-class Edge : public StorageType<U> {\n+template <typename T, typename U>\n+class EdgeBase {", "path": "caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h", "position": null, "original_position": 23, "commit_id": "253242fc95f33618ecc0b13e5a4d99882f8b3ab5", "original_commit_id": "2e6481d391c04b5f006566340c05e3f52e21ffac", "user": {"login": "yyetim", "id": 855234, "node_id": "MDQ6VXNlcjg1NTIzNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/855234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yyetim", "html_url": "https://github.com/yyetim", "followers_url": "https://api.github.com/users/yyetim/followers", "following_url": "https://api.github.com/users/yyetim/following{/other_user}", "gists_url": "https://api.github.com/users/yyetim/gists{/gist_id}", "starred_url": "https://api.github.com/users/yyetim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yyetim/subscriptions", "organizations_url": "https://api.github.com/users/yyetim/orgs", "repos_url": "https://api.github.com/users/yyetim/repos", "events_url": "https://api.github.com/users/yyetim/events{/privacy}", "received_events_url": "https://api.github.com/users/yyetim/received_events", "type": "User", "site_admin": false}, "body": "I am not sure (conceptually) how this would work, though. \r\n\r\nTo brain storm: \r\nSay, C++ figured out all the types, and we have actual template instances: We'd have an empty StorageType class:\r\nclass EmptyStorageType {};\r\nNow, at the higher layer, we'd have the Edge class. Let's say, for the void case, it inherits from this:\r\nclass EdgeEmpty : public EmptyStorageType, public EdgeBase {...}\r\n\r\nNow, for constructors for EdgeEmpty:\r\ncase 1) There is a three-arg constructor. In this case, the third argument is going to have the void type, and this is not allowed.\r\ncase 2) There is no three-arg constructor: In this case, the non-Empty Edge class needs to have a three-arg constructor. Therefore, I still need to have two classes. To avoid duplicating code, I'd still have an EdgeBase, and we come to the same EdgeBase + 2 Edge version, except now we have an extra empty StorageType class that doesn't contain anything.\r\n\r\nDo you see anything that I'm missing?", "created_at": "2018-05-16T00:26:16Z", "updated_at": "2018-11-23T15:44:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/7595#discussion_r188474129", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7595", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188474129"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7595#discussion_r188474129"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7595"}}, "body_html": "<p>I am not sure (conceptually) how this would work, though.</p>\n<p>To brain storm:<br>\nSay, C++ figured out all the types, and we have actual template instances: We'd have an empty StorageType class:<br>\nclass EmptyStorageType {};<br>\nNow, at the higher layer, we'd have the Edge class. Let's say, for the void case, it inherits from this:<br>\nclass EdgeEmpty : public EmptyStorageType, public EdgeBase {...}</p>\n<p>Now, for constructors for EdgeEmpty:<br>\ncase 1) There is a three-arg constructor. In this case, the third argument is going to have the void type, and this is not allowed.<br>\ncase 2) There is no three-arg constructor: In this case, the non-Empty Edge class needs to have a three-arg constructor. Therefore, I still need to have two classes. To avoid duplicating code, I'd still have an EdgeBase, and we come to the same EdgeBase + 2 Edge version, except now we have an extra empty StorageType class that doesn't contain anything.</p>\n<p>Do you see anything that I'm missing?</p>", "body_text": "I am not sure (conceptually) how this would work, though.\nTo brain storm:\nSay, C++ figured out all the types, and we have actual template instances: We'd have an empty StorageType class:\nclass EmptyStorageType {};\nNow, at the higher layer, we'd have the Edge class. Let's say, for the void case, it inherits from this:\nclass EdgeEmpty : public EmptyStorageType, public EdgeBase {...}\nNow, for constructors for EdgeEmpty:\ncase 1) There is a three-arg constructor. In this case, the third argument is going to have the void type, and this is not allowed.\ncase 2) There is no three-arg constructor: In this case, the non-Empty Edge class needs to have a three-arg constructor. Therefore, I still need to have two classes. To avoid duplicating code, I'd still have an EdgeBase, and we come to the same EdgeBase + 2 Edge version, except now we have an extra empty StorageType class that doesn't contain anything.\nDo you see anything that I'm missing?", "in_reply_to_id": 188459159}