{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188722371", "pull_request_review_id": 120758869, "id": 188722371, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODcyMjM3MQ==", "diff_hunk": "@@ -23,28 +23,24 @@\n #include <assert.h>\n #include <stdio.h>\n \n-#define DEBUG_PRINT(...) ;\n+#define DEBUG_PRINT(...)\n \n namespace nom {\n \n-template <typename T, typename U = T>\n+template <typename T, typename U>\n class Graph;\n \n-template <typename T, typename U = T>\n+template <typename T, typename U>\n+class GraphBase;\n+\n+template <typename T, typename U>\n class Node;\n \n-template <typename T, typename U = T>\n-class Edge : public StorageType<U> {\n+template <typename T, typename U>\n+class EdgeBase {", "path": "caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h", "position": null, "original_position": 23, "commit_id": "253242fc95f33618ecc0b13e5a4d99882f8b3ab5", "original_commit_id": "2e6481d391c04b5f006566340c05e3f52e21ffac", "user": {"login": "bwasti", "id": 4842908, "node_id": "MDQ6VXNlcjQ4NDI5MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4842908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwasti", "html_url": "https://github.com/bwasti", "followers_url": "https://api.github.com/users/bwasti/followers", "following_url": "https://api.github.com/users/bwasti/following{/other_user}", "gists_url": "https://api.github.com/users/bwasti/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwasti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwasti/subscriptions", "organizations_url": "https://api.github.com/users/bwasti/orgs", "repos_url": "https://api.github.com/users/bwasti/repos", "events_url": "https://api.github.com/users/bwasti/events{/privacy}", "received_events_url": "https://api.github.com/users/bwasti/received_events", "type": "User", "site_admin": false}, "body": "just had a thought that you can use a parameter pack to get it working.  I'm not entirely sure how the compiler chooses a constructor, to be quite honest...\r\n\r\n```\r\ndiff --git a/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h b/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h\r\nindex b9b338f37..f513887ca 100644\r\n--- a/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h\r\n+++ b/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h\r\n@@ -33,7 +33,7 @@ class Graph;\r\n template <typename T, typename U = T>\r\n class Node;\r\n\r\n-template <typename T, typename U = T>\r\n+template <typename T, typename U = void>\r\n class Edge : public StorageType<U> {\r\n  public:\r\n   using NodeRef = typename Graph<T, U>::NodeRef;\r\n@@ -43,8 +43,9 @@ class Edge : public StorageType<U> {\r\n     DEBUG_PRINT(\"Creating instance of Edge: %p\\n\", this);\r\n   }\r\n\r\n-  Edge(NodeRef tail, NodeRef head, U&& data)\r\n-      : StorageType<U>(std::move(data)), Tail(tail), Head(head) {\r\n+  template <typename... Args>\r\n+  Edge(NodeRef tail, NodeRef head, Args... args)\r\n+      : StorageType<U>(std::forward<Args>(args)...), Tail(tail), Head(head) {\r\n     DEBUG_PRINT(\"Creating instance of Edge: %p\\n\", this);\r\n   }\r\n\r\ndiff --git a/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h b/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h\r\nindex 0f0ba9545..095e30143 100644\r\n--- a/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h\r\n+++ b/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h\r\n@@ -35,6 +35,12 @@ class StorageType {\r\n   T Data;\r\n };\r\n\r\n+template <>\r\n+class StorageType<void> {\r\n+public:\r\n+  StorageType() {}\r\n+};\r\n+\r\n /// \\brief This class enables a listener pattern.\r\n /// It is to be used with a \"curious recursive pattern\"\r\n /// i.e. Derived : public Notifier<Derived> {}\r\n```", "created_at": "2018-05-16T18:12:46Z", "updated_at": "2018-11-23T15:44:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/7595#discussion_r188722371", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7595", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/188722371"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7595#discussion_r188722371"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7595"}}, "body_html": "<p>just had a thought that you can use a parameter pack to get it working.  I'm not entirely sure how the compiler chooses a constructor, to be quite honest...</p>\n<pre><code>diff --git a/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h b/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h\nindex b9b338f37..f513887ca 100644\n--- a/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h\n+++ b/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h\n@@ -33,7 +33,7 @@ class Graph;\n template &lt;typename T, typename U = T&gt;\n class Node;\n\n-template &lt;typename T, typename U = T&gt;\n+template &lt;typename T, typename U = void&gt;\n class Edge : public StorageType&lt;U&gt; {\n  public:\n   using NodeRef = typename Graph&lt;T, U&gt;::NodeRef;\n@@ -43,8 +43,9 @@ class Edge : public StorageType&lt;U&gt; {\n     DEBUG_PRINT(\"Creating instance of Edge: %p\\n\", this);\n   }\n\n-  Edge(NodeRef tail, NodeRef head, U&amp;&amp; data)\n-      : StorageType&lt;U&gt;(std::move(data)), Tail(tail), Head(head) {\n+  template &lt;typename... Args&gt;\n+  Edge(NodeRef tail, NodeRef head, Args... args)\n+      : StorageType&lt;U&gt;(std::forward&lt;Args&gt;(args)...), Tail(tail), Head(head) {\n     DEBUG_PRINT(\"Creating instance of Edge: %p\\n\", this);\n   }\n\ndiff --git a/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h b/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h\nindex 0f0ba9545..095e30143 100644\n--- a/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h\n+++ b/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h\n@@ -35,6 +35,12 @@ class StorageType {\n   T Data;\n };\n\n+template &lt;&gt;\n+class StorageType&lt;void&gt; {\n+public:\n+  StorageType() {}\n+};\n+\n /// \\brief This class enables a listener pattern.\n /// It is to be used with a \"curious recursive pattern\"\n /// i.e. Derived : public Notifier&lt;Derived&gt; {}\n</code></pre>", "body_text": "just had a thought that you can use a parameter pack to get it working.  I'm not entirely sure how the compiler chooses a constructor, to be quite honest...\ndiff --git a/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h b/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h\nindex b9b338f37..f513887ca 100644\n--- a/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h\n+++ b/caffe2/core/nomnigraph/include/nomnigraph/Graph/Graph.h\n@@ -33,7 +33,7 @@ class Graph;\n template <typename T, typename U = T>\n class Node;\n\n-template <typename T, typename U = T>\n+template <typename T, typename U = void>\n class Edge : public StorageType<U> {\n  public:\n   using NodeRef = typename Graph<T, U>::NodeRef;\n@@ -43,8 +43,9 @@ class Edge : public StorageType<U> {\n     DEBUG_PRINT(\"Creating instance of Edge: %p\\n\", this);\n   }\n\n-  Edge(NodeRef tail, NodeRef head, U&& data)\n-      : StorageType<U>(std::move(data)), Tail(tail), Head(head) {\n+  template <typename... Args>\n+  Edge(NodeRef tail, NodeRef head, Args... args)\n+      : StorageType<U>(std::forward<Args>(args)...), Tail(tail), Head(head) {\n     DEBUG_PRINT(\"Creating instance of Edge: %p\\n\", this);\n   }\n\ndiff --git a/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h b/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h\nindex 0f0ba9545..095e30143 100644\n--- a/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h\n+++ b/caffe2/core/nomnigraph/include/nomnigraph/Support/Common.h\n@@ -35,6 +35,12 @@ class StorageType {\n   T Data;\n };\n\n+template <>\n+class StorageType<void> {\n+public:\n+  StorageType() {}\n+};\n+\n /// \\brief This class enables a listener pattern.\n /// It is to be used with a \"curious recursive pattern\"\n /// i.e. Derived : public Notifier<Derived> {}", "in_reply_to_id": 188459159}