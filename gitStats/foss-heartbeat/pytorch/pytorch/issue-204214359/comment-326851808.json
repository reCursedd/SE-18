{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/326851808", "html_url": "https://github.com/pytorch/pytorch/issues/653#issuecomment-326851808", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/653", "id": 326851808, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjg1MTgwOA==", "user": {"login": "jiecaoyu", "id": 10011346, "node_id": "MDQ6VXNlcjEwMDExMzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/10011346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiecaoyu", "html_url": "https://github.com/jiecaoyu", "followers_url": "https://api.github.com/users/jiecaoyu/followers", "following_url": "https://api.github.com/users/jiecaoyu/following{/other_user}", "gists_url": "https://api.github.com/users/jiecaoyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiecaoyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiecaoyu/subscriptions", "organizations_url": "https://api.github.com/users/jiecaoyu/orgs", "repos_url": "https://api.github.com/users/jiecaoyu/repos", "events_url": "https://api.github.com/users/jiecaoyu/events{/privacy}", "received_events_url": "https://api.github.com/users/jiecaoyu/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-04T02:22:19Z", "updated_at": "2017-09-04T02:25:51Z", "author_association": "NONE", "body_html": "<p>A simple implementation of LRN:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">LRN</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">local_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-smi\">alpha</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1.0</span>, <span class=\"pl-smi\">beta</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.75</span>, <span class=\"pl-smi\">ACROSS_CHANNELS</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n        <span class=\"pl-c1\">super</span>(<span class=\"pl-c1\">LRN</span>, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">ACROSS_CHANNELS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">ACROSS_CHANNELS</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">ACROSS_CHANNELS</span>:\n            <span class=\"pl-c1\">self</span>.average<span class=\"pl-k\">=</span>nn.AvgPool3d(<span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span>(local_size, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>), \n                    <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>,\n                    <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">int</span>((local_size<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.0</span>)<span class=\"pl-k\">/</span><span class=\"pl-c1\">2</span>), <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>)) \n        <span class=\"pl-k\">else</span>:\n            <span class=\"pl-c1\">self</span>.average<span class=\"pl-k\">=</span>nn.AvgPool2d(<span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span>local_size,\n                    <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>,\n                    <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">int</span>((local_size<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.0</span>)<span class=\"pl-k\">/</span><span class=\"pl-c1\">2</span>))\n        <span class=\"pl-c1\">self</span>.alpha <span class=\"pl-k\">=</span> alpha\n        <span class=\"pl-c1\">self</span>.beta <span class=\"pl-k\">=</span> beta\n    \n    \n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">ACROSS_CHANNELS</span>:\n            div <span class=\"pl-k\">=</span> x.pow(<span class=\"pl-c1\">2</span>).unsqueeze(<span class=\"pl-c1\">1</span>)\n            div <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.average(div).squeeze(<span class=\"pl-c1\">1</span>)\n            div <span class=\"pl-k\">=</span> div.mul(<span class=\"pl-c1\">self</span>.alpha).add(<span class=\"pl-c1\">1.0</span>).pow(<span class=\"pl-c1\">self</span>.beta)\n        <span class=\"pl-k\">else</span>:\n            div <span class=\"pl-k\">=</span> x.pow(<span class=\"pl-c1\">2</span>)\n            div <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.average(div)\n            div <span class=\"pl-k\">=</span> div.mul(<span class=\"pl-c1\">self</span>.alpha).add(<span class=\"pl-c1\">1.0</span>).pow(<span class=\"pl-c1\">self</span>.beta)\n        x <span class=\"pl-k\">=</span> x.div(div)\n        <span class=\"pl-k\">return</span> x</pre></div>", "body_text": "A simple implementation of LRN:\nclass LRN(nn.Module):\n    def __init__(self, local_size=1, alpha=1.0, beta=0.75, ACROSS_CHANNELS=False):\n        super(LRN, self).__init__()\n        self.ACROSS_CHANNELS = ACROSS_CHANNELS\n        if self.ACROSS_CHANNELS:\n            self.average=nn.AvgPool3d(kernel_size=(local_size, 1, 1), \n                    stride=1,\n                    padding=(int((local_size-1.0)/2), 0, 0)) \n        else:\n            self.average=nn.AvgPool2d(kernel_size=local_size,\n                    stride=1,\n                    padding=int((local_size-1.0)/2))\n        self.alpha = alpha\n        self.beta = beta\n    \n    \n    def forward(self, x):\n        if self.ACROSS_CHANNELS:\n            div = x.pow(2).unsqueeze(1)\n            div = self.average(div).squeeze(1)\n            div = div.mul(self.alpha).add(1.0).pow(self.beta)\n        else:\n            div = x.pow(2)\n            div = self.average(div)\n            div = div.mul(self.alpha).add(1.0).pow(self.beta)\n        x = x.div(div)\n        return x", "body": "A simple implementation of LRN:\r\n\r\n```python\r\nclass LRN(nn.Module):\r\n    def __init__(self, local_size=1, alpha=1.0, beta=0.75, ACROSS_CHANNELS=False):\r\n        super(LRN, self).__init__()\r\n        self.ACROSS_CHANNELS = ACROSS_CHANNELS\r\n        if self.ACROSS_CHANNELS:\r\n            self.average=nn.AvgPool3d(kernel_size=(local_size, 1, 1), \r\n                    stride=1,\r\n                    padding=(int((local_size-1.0)/2), 0, 0)) \r\n        else:\r\n            self.average=nn.AvgPool2d(kernel_size=local_size,\r\n                    stride=1,\r\n                    padding=int((local_size-1.0)/2))\r\n        self.alpha = alpha\r\n        self.beta = beta\r\n    \r\n    \r\n    def forward(self, x):\r\n        if self.ACROSS_CHANNELS:\r\n            div = x.pow(2).unsqueeze(1)\r\n            div = self.average(div).squeeze(1)\r\n            div = div.mul(self.alpha).add(1.0).pow(self.beta)\r\n        else:\r\n            div = x.pow(2)\r\n            div = self.average(div)\r\n            div = div.mul(self.alpha).add(1.0).pow(self.beta)\r\n        x = x.div(div)\r\n        return x\r\n```"}