{"url": "https://api.github.com/repos/pytorch/pytorch/issues/653", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/653/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/653/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/653/events", "html_url": "https://github.com/pytorch/pytorch/issues/653", "id": 204214359, "node_id": "MDU6SXNzdWUyMDQyMTQzNTk=", "number": 653, "title": "Feature Request: Local response normalization (LRN)", "user": {"login": "keunhong", "id": 297680, "node_id": "MDQ6VXNlcjI5NzY4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/297680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keunhong", "html_url": "https://github.com/keunhong", "followers_url": "https://api.github.com/users/keunhong/followers", "following_url": "https://api.github.com/users/keunhong/following{/other_user}", "gists_url": "https://api.github.com/users/keunhong/gists{/gist_id}", "starred_url": "https://api.github.com/users/keunhong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keunhong/subscriptions", "organizations_url": "https://api.github.com/users/keunhong/orgs", "repos_url": "https://api.github.com/users/keunhong/repos", "events_url": "https://api.github.com/users/keunhong/events{/privacy}", "received_events_url": "https://api.github.com/users/keunhong/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 586698641, "node_id": "MDU6TGFiZWw1ODY2OTg2NDE=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/5hr", "name": "5hr", "color": "d4c5e9", "default": false}, {"id": 424131849, "node_id": "MDU6TGFiZWw0MjQxMzE4NDk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true}, {"id": 443484050, "node_id": "MDU6TGFiZWw0NDM0ODQwNTA=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/medium%20priority", "name": "medium priority", "color": "fbca04", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2017-01-31T06:24:40Z", "updated_at": "2018-01-16T03:24:39Z", "closed_at": "2018-01-16T03:24:20Z", "author_association": "NONE", "body_html": "<p>PyTorch doesn't seem to have a module for LRN yet. This is needed for running models pre-trained with LRN layers (mainly AlexNet based models). I have a workaround using the legacy API</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> torch <span class=\"pl-k\">import</span> nn\n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable\n<span class=\"pl-k\">from</span> torch.legacy.nn <span class=\"pl-k\">import</span> SpatialCrossMapLRN\n\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">LRN</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">size</span>, <span class=\"pl-smi\">alpha</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-4</span>, <span class=\"pl-smi\">beta</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.75</span>, <span class=\"pl-smi\">k</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>):\n        <span class=\"pl-c1\">super</span>().<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.lrn <span class=\"pl-k\">=</span> SpatialCrossMapLRN(size, alpha, beta, k)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n        <span class=\"pl-c1\">self</span>.lrn.clearState()\n        <span class=\"pl-k\">return</span> Variable(<span class=\"pl-c1\">self</span>.lrn.updateOutput(x.data))</pre></div>\n<p>but that doesn't seem to have a CUDA binding.</p>", "body_text": "PyTorch doesn't seem to have a module for LRN yet. This is needed for running models pre-trained with LRN layers (mainly AlexNet based models). I have a workaround using the legacy API\nfrom torch import nn\nfrom torch.autograd import Variable\nfrom torch.legacy.nn import SpatialCrossMapLRN\n\n\nclass LRN(nn.Module):\n    def __init__(self, size, alpha=1e-4, beta=0.75, k=1):\n        super().__init__()\n        self.lrn = SpatialCrossMapLRN(size, alpha, beta, k)\n\n    def forward(self, x):\n        self.lrn.clearState()\n        return Variable(self.lrn.updateOutput(x.data))\nbut that doesn't seem to have a CUDA binding.", "body": "PyTorch doesn't seem to have a module for LRN yet. This is needed for running models pre-trained with LRN layers (mainly AlexNet based models). I have a workaround using the legacy API\r\n\r\n```python\r\nfrom torch import nn\r\nfrom torch.autograd import Variable\r\nfrom torch.legacy.nn import SpatialCrossMapLRN\r\n\r\n\r\nclass LRN(nn.Module):\r\n    def __init__(self, size, alpha=1e-4, beta=0.75, k=1):\r\n        super().__init__()\r\n        self.lrn = SpatialCrossMapLRN(size, alpha, beta, k)\r\n\r\n    def forward(self, x):\r\n        self.lrn.clearState()\r\n        return Variable(self.lrn.updateOutput(x.data))\r\n```\r\n\r\nbut that doesn't seem to have a CUDA binding."}