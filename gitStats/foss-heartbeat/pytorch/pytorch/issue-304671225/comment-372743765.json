{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/372743765", "html_url": "https://github.com/pytorch/pytorch/pull/5734#issuecomment-372743765", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5734", "id": 372743765, "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mjc0Mzc2NQ==", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-13T17:10:17Z", "updated_at": "2018-03-13T17:10:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Here's an alternative to manually writing (boilerplate) ATen ops for operators which don't have ONNX translation: we can add a fallback mode to the logic in <code>torch/onnx/utils.py</code> which knows to do an ATen conversion if the ONNX converter doesn't exist. Right now we have an <code>aten</code> parameter, but this <em>unconditionally</em> turns on ATen conversion. But all the pieces are there.</p>", "body_text": "Here's an alternative to manually writing (boilerplate) ATen ops for operators which don't have ONNX translation: we can add a fallback mode to the logic in torch/onnx/utils.py which knows to do an ATen conversion if the ONNX converter doesn't exist. Right now we have an aten parameter, but this unconditionally turns on ATen conversion. But all the pieces are there.", "body": "Here's an alternative to manually writing (boilerplate) ATen ops for operators which don't have ONNX translation: we can add a fallback mode to the logic in `torch/onnx/utils.py` which knows to do an ATen conversion if the ONNX converter doesn't exist. Right now we have an `aten` parameter, but this *unconditionally* turns on ATen conversion. But all the pieces are there."}