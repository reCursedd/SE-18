{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12933", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12933/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12933/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12933/events", "html_url": "https://github.com/pytorch/pytorch/issues/12933", "id": 372546472, "node_id": "MDU6SXNzdWUzNzI1NDY0NzI=", "number": 12933, "title": "L1Loss performs sum reduction instead of element-wise mean", "user": {"login": "lucagrementieri", "id": 20520836, "node_id": "MDQ6VXNlcjIwNTIwODM2", "avatar_url": "https://avatars0.githubusercontent.com/u/20520836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucagrementieri", "html_url": "https://github.com/lucagrementieri", "followers_url": "https://api.github.com/users/lucagrementieri/followers", "following_url": "https://api.github.com/users/lucagrementieri/following{/other_user}", "gists_url": "https://api.github.com/users/lucagrementieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucagrementieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucagrementieri/subscriptions", "organizations_url": "https://api.github.com/users/lucagrementieri/orgs", "repos_url": "https://api.github.com/users/lucagrementieri/repos", "events_url": "https://api.github.com/users/lucagrementieri/events{/privacy}", "received_events_url": "https://api.github.com/users/lucagrementieri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-22T14:32:40Z", "updated_at": "2018-10-22T17:22:12Z", "closed_at": "2018-10-22T17:22:12Z", "author_association": "NONE", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji>L1Loss performs sum reduction instead of element-wise mean</h2>\n<p>Using <code>torch.nn.L1Loss</code> with the <code>input</code>, <code>target</code> tensor such that <code>target.requires_grad=True</code> with the <code>reduction='elementwise_mean'</code> (the default choice), the module computes the sum instead of the element-wise mean.</p>\n<h2>To Reproduce</h2>\n<p>Steps to reproduce the behavior:</p>\n<pre><code>import torch\n\na = torch.Tensor([[1,2,3],[4,5,6]])\nb = torch.randn(2, 3, requires_grad=True)\n\ncriterion = torch.nn.L1Loss(reduction='elementwise_mean')\n\ncorrect_loss = torch.mean(torch.abs(a-b))\nwrong_loss = criterion(a,b)\n</code></pre>\n<h2>Expected behavior</h2>\n<p><code>correct_loss</code> and <code>wrong_loss</code> should be equal.</p>\n<h2>Environment</h2>\n<ul>\n<li>PyTorch Version (e.g., 1.0): 0.4.1</li>\n<li>OS (e.g., Linux): MacOS, Ubuntu</li>\n<li>How you installed PyTorch (<code>conda</code>, <code>pip</code>, source): pip</li>\n<li>Python version: 3.6.5, 3.6.6</li>\n</ul>", "body_text": "\ud83d\udc1bL1Loss performs sum reduction instead of element-wise mean\nUsing torch.nn.L1Loss with the input, target tensor such that target.requires_grad=True with the reduction='elementwise_mean' (the default choice), the module computes the sum instead of the element-wise mean.\nTo Reproduce\nSteps to reproduce the behavior:\nimport torch\n\na = torch.Tensor([[1,2,3],[4,5,6]])\nb = torch.randn(2, 3, requires_grad=True)\n\ncriterion = torch.nn.L1Loss(reduction='elementwise_mean')\n\ncorrect_loss = torch.mean(torch.abs(a-b))\nwrong_loss = criterion(a,b)\n\nExpected behavior\ncorrect_loss and wrong_loss should be equal.\nEnvironment\n\nPyTorch Version (e.g., 1.0): 0.4.1\nOS (e.g., Linux): MacOS, Ubuntu\nHow you installed PyTorch (conda, pip, source): pip\nPython version: 3.6.5, 3.6.6", "body": "## \ud83d\udc1bL1Loss performs sum reduction instead of element-wise mean\r\n\r\nUsing `torch.nn.L1Loss` with the `input`, `target` tensor such that `target.requires_grad=True` with the `reduction='elementwise_mean'` (the default choice), the module computes the sum instead of the element-wise mean.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior:\r\n```\r\nimport torch\r\n\r\na = torch.Tensor([[1,2,3],[4,5,6]])\r\nb = torch.randn(2, 3, requires_grad=True)\r\n\r\ncriterion = torch.nn.L1Loss(reduction='elementwise_mean')\r\n\r\ncorrect_loss = torch.mean(torch.abs(a-b))\r\nwrong_loss = criterion(a,b)\r\n```\r\n\r\n## Expected behavior\r\n\r\n`correct_loss` and `wrong_loss` should be equal.\r\n\r\n## Environment\r\n\r\n - PyTorch Version (e.g., 1.0): 0.4.1\r\n - OS (e.g., Linux): MacOS, Ubuntu\r\n - How you installed PyTorch (`conda`, `pip`, source): pip\r\n - Python version: 3.6.5, 3.6.6\r\n"}