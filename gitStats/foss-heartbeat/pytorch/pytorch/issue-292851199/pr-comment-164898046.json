{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164898046", "pull_request_review_id": 92744250, "id": 164898046, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDg5ODA0Ng==", "diff_hunk": "@@ -60,8 +60,13 @@ class Transform(object):\n             the codomain. Transforms that are not bijective should at least\n             maintain the weaker pseudoinverse properties\n             ``t(t.inv(t(x)) == t(x)`` and ``t.inv(t(t.inv(y))) == t.inv(y)``.\n+        event_dim (int): Number of dimensions in the transform ``event_shape``.", "path": "torch/distributions/transforms.py", "position": null, "original_position": 4, "commit_id": "5b817bdfb731c1cf41117ebfe1479870d14162dd", "original_commit_id": "62d9245472c578f6c2cf15f4bb3ef3f80cb402e2", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "The `event_shape` is the shape of the smallest slice of a random variable that is jointly distributed. For univariate distributions, `event_shape == ()`. For multivariate distributions over vectors like `MultivariateNormal`, `event_shape == (n,)` for some n. For distributions over square matrices like `InverseWishart`, `event_shape == (n,n)`.\r\n\r\nEach distribution has a total shape = `batch_shape + event_shape`: the batch part is over independent random variables, and the event part is over jointly distributed random variables.\r\n\r\nThis matters because `.log_prob()` should return something of `batch_shape`: each chunk of `event_shape` defines a single number in `.log_prob()`. That is the crux of this PR :smile:", "created_at": "2018-01-30T22:23:44Z", "updated_at": "2018-11-23T15:38:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/4937#discussion_r164898046", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4937", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/164898046"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4937#discussion_r164898046"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4937"}}, "body_html": "<p>The <code>event_shape</code> is the shape of the smallest slice of a random variable that is jointly distributed. For univariate distributions, <code>event_shape == ()</code>. For multivariate distributions over vectors like <code>MultivariateNormal</code>, <code>event_shape == (n,)</code> for some n. For distributions over square matrices like <code>InverseWishart</code>, <code>event_shape == (n,n)</code>.</p>\n<p>Each distribution has a total shape = <code>batch_shape + event_shape</code>: the batch part is over independent random variables, and the event part is over jointly distributed random variables.</p>\n<p>This matters because <code>.log_prob()</code> should return something of <code>batch_shape</code>: each chunk of <code>event_shape</code> defines a single number in <code>.log_prob()</code>. That is the crux of this PR <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji></p>", "body_text": "The event_shape is the shape of the smallest slice of a random variable that is jointly distributed. For univariate distributions, event_shape == (). For multivariate distributions over vectors like MultivariateNormal, event_shape == (n,) for some n. For distributions over square matrices like InverseWishart, event_shape == (n,n).\nEach distribution has a total shape = batch_shape + event_shape: the batch part is over independent random variables, and the event part is over jointly distributed random variables.\nThis matters because .log_prob() should return something of batch_shape: each chunk of event_shape defines a single number in .log_prob(). That is the crux of this PR \ud83d\ude04", "in_reply_to_id": 164895928}