{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165101190", "pull_request_review_id": 92980355, "id": 165101190, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTEwMTE5MA==", "diff_hunk": "@@ -60,8 +60,13 @@ class Transform(object):\n             the codomain. Transforms that are not bijective should at least\n             maintain the weaker pseudoinverse properties\n             ``t(t.inv(t(x)) == t(x)`` and ``t.inv(t(t.inv(y))) == t.inv(y)``.\n+        event_dim (int): Number of dimensions in the transform ``event_shape``.", "path": "torch/distributions/transforms.py", "position": null, "original_position": 4, "commit_id": "5b817bdfb731c1cf41117ebfe1479870d14162dd", "original_commit_id": "62d9245472c578f6c2cf15f4bb3ef3f80cb402e2", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "`event_shape`s do not need to match, but `TransformedDistribution.log_prob()` does need to know the largest `event_dim` among its `.base_dist` and its `.transforms`. This largest `event_dim` determines the `TransformedDistribution.event_shape`. For example:\r\n- you can apply an `AffineTransform` with `event_dim == 0` to a `MultivariateNormal` with `len(event_shape) == 1`. The resulting `TransformedDistribution` has `len(event_shape) == 1` and needs to know to reduce the rightmost dim of `.transforms[0].log_det_abs_jacobian(...)` during `TransformedDistribution.log_prob()`\r\n- you can apply a `BoltzmanTransform` with `event_dim == 1` to a `Normal` with `len(event_shape) == 0`. The resulting `TransformedDistribution` also has `len(event_shape) == 1` and needs to reduce the rightmost dim of `base_dist.log_prob()` during `TransformedDistribution.log_prob()`.", "created_at": "2018-01-31T16:08:03Z", "updated_at": "2018-11-23T15:38:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/4937#discussion_r165101190", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4937", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165101190"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4937#discussion_r165101190"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4937"}}, "body_html": "<p><code>event_shape</code>s do not need to match, but <code>TransformedDistribution.log_prob()</code> does need to know the largest <code>event_dim</code> among its <code>.base_dist</code> and its <code>.transforms</code>. This largest <code>event_dim</code> determines the <code>TransformedDistribution.event_shape</code>. For example:</p>\n<ul>\n<li>you can apply an <code>AffineTransform</code> with <code>event_dim == 0</code> to a <code>MultivariateNormal</code> with <code>len(event_shape) == 1</code>. The resulting <code>TransformedDistribution</code> has <code>len(event_shape) == 1</code> and needs to know to reduce the rightmost dim of <code>.transforms[0].log_det_abs_jacobian(...)</code> during <code>TransformedDistribution.log_prob()</code></li>\n<li>you can apply a <code>BoltzmanTransform</code> with <code>event_dim == 1</code> to a <code>Normal</code> with <code>len(event_shape) == 0</code>. The resulting <code>TransformedDistribution</code> also has <code>len(event_shape) == 1</code> and needs to reduce the rightmost dim of <code>base_dist.log_prob()</code> during <code>TransformedDistribution.log_prob()</code>.</li>\n</ul>", "body_text": "event_shapes do not need to match, but TransformedDistribution.log_prob() does need to know the largest event_dim among its .base_dist and its .transforms. This largest event_dim determines the TransformedDistribution.event_shape. For example:\n\nyou can apply an AffineTransform with event_dim == 0 to a MultivariateNormal with len(event_shape) == 1. The resulting TransformedDistribution has len(event_shape) == 1 and needs to know to reduce the rightmost dim of .transforms[0].log_det_abs_jacobian(...) during TransformedDistribution.log_prob()\nyou can apply a BoltzmanTransform with event_dim == 1 to a Normal with len(event_shape) == 0. The resulting TransformedDistribution also has len(event_shape) == 1 and needs to reduce the rightmost dim of base_dist.log_prob() during TransformedDistribution.log_prob().", "in_reply_to_id": 164895928}