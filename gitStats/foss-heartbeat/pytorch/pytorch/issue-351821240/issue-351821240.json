{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10660", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10660/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10660/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10660/events", "html_url": "https://github.com/pytorch/pytorch/issues/10660", "id": 351821240, "node_id": "MDU6SXNzdWUzNTE4MjEyNDA=", "number": 10660, "title": "Inconsistent output of torch.mm when called in two mathematically equivalent way", "user": {"login": "geblue", "id": 19256534, "node_id": "MDQ6VXNlcjE5MjU2NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/19256534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geblue", "html_url": "https://github.com/geblue", "followers_url": "https://api.github.com/users/geblue/followers", "following_url": "https://api.github.com/users/geblue/following{/other_user}", "gists_url": "https://api.github.com/users/geblue/gists{/gist_id}", "starred_url": "https://api.github.com/users/geblue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geblue/subscriptions", "organizations_url": "https://api.github.com/users/geblue/orgs", "repos_url": "https://api.github.com/users/geblue/repos", "events_url": "https://api.github.com/users/geblue/events{/privacy}", "received_events_url": "https://api.github.com/users/geblue/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-18T13:40:32Z", "updated_at": "2018-08-18T13:53:20Z", "closed_at": "2018-08-18T13:53:20Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>I tired to use torch.mm to get matrix multiplication, but found it returned slightly different results when I called it in two equivalent way.</p>\n<p>Assume we have two matrix  matrix_a and matrix_b and want to get the matrix multiplication matrix_a@matrix_b</p>\n<ol>\n<li>First, I use matrix_a and matrix_b as input directly, torch.mm(matrix_a, matrix_b)</li>\n<li>On the other hand, I call torch.mm with each row of matrix_a together with matrix_b as inputs, and then concatenate the results.</li>\n</ol>\n<p>The two results are expected to be exactly the same, but they are still slightly diferent. So can somebody explain the reason?</p>\n<p>Thanks,</p>\n<p>Here is my test code.</p>\n<pre><code>torch.manual_seed(0)\n\nmatrix_a = torch.randn([5, 4])\nmatrix_b = torch.randn([4, 4])\nvalues = torch.randn([5, 4])\n\n# 1. call torch.mm directly on matrix_a and matrix_b.\ntorch.mm(matrix_a, matrix_b, out=values)\n\n# save the result in buffer.\nvalues_1 = values.clone()\n\n# 2. call torch.mm on each row of matrix_a and matrix_b.\nbatch_size = matrix_a.size(0)\nfor b in range(batch_size):\n    torch.mm(matrix_a[b:b+1], matrix_b, out=values[b:b+1])\n\n# value and value_1 are supposed to be equal. But they are not.\nlogger.info(\"difference between two values: %s\" % (torch.sum(torch.abs(values - values_1))))\nfor b in range(batch_size):\n    logger.info(\"batch id: %s\" % b)\n    logger.info(values_1[b].data.numpy())\n    logger.info(values[b].data.numpy())\n</code></pre>\n<p>Here is the output.</p>\n<blockquote>\n<p>2018-08-18 21:32:11,294 INFO 87997 [test.py:81] difference between two values: tensor(1.00000e-06 *<br>\n1.3113)<br>\n2018-08-18 21:32:11,295 INFO 87997 [test.py:83] batch id: 0<br>\n2018-08-18 21:32:11,295 INFO 87997 [test.py:84] [-0.89934576  0.11556479 -0.48109883 -0.3961889 ]<br>\n2018-08-18 21:32:11,295 INFO 87997 [test.py:85] [-0.89934576  0.11556476 -0.4810989  -0.39618894]<br>\n2018-08-18 21:32:11,296 INFO 87997 [test.py:83] batch id: 1<br>\n2018-08-18 21:32:11,296 INFO 87997 [test.py:84] [ 2.6500921   0.5928108  -2.213797    0.39320117]<br>\n2018-08-18 21:32:11,296 INFO 87997 [test.py:85] [ 2.6500921   0.59281075 -2.2137969   0.3932012 ]<br>\n2018-08-18 21:32:11,296 INFO 87997 [test.py:83] batch id: 2<br>\n2018-08-18 21:32:11,296 INFO 87997 [test.py:84] [ 1.3148142  3.5158207 -2.2286756 -2.1263554]<br>\n2018-08-18 21:32:11,297 INFO 87997 [test.py:85] [ 1.3148141  3.515821  -2.2286754 -2.1263554]<br>\n2018-08-18 21:32:11,297 INFO 87997 [test.py:83] batch id: 3<br>\n2018-08-18 21:32:11,297 INFO 87997 [test.py:84] [-0.25188264  1.0855039   1.4054772  -0.47265998]<br>\n2018-08-18 21:32:11,297 INFO 87997 [test.py:85] [-0.25188267  1.085504    1.4054773  -0.47265998]<br>\n2018-08-18 21:32:11,298 INFO 87997 [test.py:83] batch id: 4<br>\n2018-08-18 21:32:11,298 INFO 87997 [test.py:84] [ 1.250929   3.790292  -1.7040166 -2.443583 ]<br>\n2018-08-18 21:32:11,298 INFO 87997 [test.py:85] [ 1.250929   3.790292  -1.7040166 -2.443583 ]</p>\n</blockquote>", "body_text": "Hi,\nI tired to use torch.mm to get matrix multiplication, but found it returned slightly different results when I called it in two equivalent way.\nAssume we have two matrix  matrix_a and matrix_b and want to get the matrix multiplication matrix_a@matrix_b\n\nFirst, I use matrix_a and matrix_b as input directly, torch.mm(matrix_a, matrix_b)\nOn the other hand, I call torch.mm with each row of matrix_a together with matrix_b as inputs, and then concatenate the results.\n\nThe two results are expected to be exactly the same, but they are still slightly diferent. So can somebody explain the reason?\nThanks,\nHere is my test code.\ntorch.manual_seed(0)\n\nmatrix_a = torch.randn([5, 4])\nmatrix_b = torch.randn([4, 4])\nvalues = torch.randn([5, 4])\n\n# 1. call torch.mm directly on matrix_a and matrix_b.\ntorch.mm(matrix_a, matrix_b, out=values)\n\n# save the result in buffer.\nvalues_1 = values.clone()\n\n# 2. call torch.mm on each row of matrix_a and matrix_b.\nbatch_size = matrix_a.size(0)\nfor b in range(batch_size):\n    torch.mm(matrix_a[b:b+1], matrix_b, out=values[b:b+1])\n\n# value and value_1 are supposed to be equal. But they are not.\nlogger.info(\"difference between two values: %s\" % (torch.sum(torch.abs(values - values_1))))\nfor b in range(batch_size):\n    logger.info(\"batch id: %s\" % b)\n    logger.info(values_1[b].data.numpy())\n    logger.info(values[b].data.numpy())\n\nHere is the output.\n\n2018-08-18 21:32:11,294 INFO 87997 [test.py:81] difference between two values: tensor(1.00000e-06 *\n1.3113)\n2018-08-18 21:32:11,295 INFO 87997 [test.py:83] batch id: 0\n2018-08-18 21:32:11,295 INFO 87997 [test.py:84] [-0.89934576  0.11556479 -0.48109883 -0.3961889 ]\n2018-08-18 21:32:11,295 INFO 87997 [test.py:85] [-0.89934576  0.11556476 -0.4810989  -0.39618894]\n2018-08-18 21:32:11,296 INFO 87997 [test.py:83] batch id: 1\n2018-08-18 21:32:11,296 INFO 87997 [test.py:84] [ 2.6500921   0.5928108  -2.213797    0.39320117]\n2018-08-18 21:32:11,296 INFO 87997 [test.py:85] [ 2.6500921   0.59281075 -2.2137969   0.3932012 ]\n2018-08-18 21:32:11,296 INFO 87997 [test.py:83] batch id: 2\n2018-08-18 21:32:11,296 INFO 87997 [test.py:84] [ 1.3148142  3.5158207 -2.2286756 -2.1263554]\n2018-08-18 21:32:11,297 INFO 87997 [test.py:85] [ 1.3148141  3.515821  -2.2286754 -2.1263554]\n2018-08-18 21:32:11,297 INFO 87997 [test.py:83] batch id: 3\n2018-08-18 21:32:11,297 INFO 87997 [test.py:84] [-0.25188264  1.0855039   1.4054772  -0.47265998]\n2018-08-18 21:32:11,297 INFO 87997 [test.py:85] [-0.25188267  1.085504    1.4054773  -0.47265998]\n2018-08-18 21:32:11,298 INFO 87997 [test.py:83] batch id: 4\n2018-08-18 21:32:11,298 INFO 87997 [test.py:84] [ 1.250929   3.790292  -1.7040166 -2.443583 ]\n2018-08-18 21:32:11,298 INFO 87997 [test.py:85] [ 1.250929   3.790292  -1.7040166 -2.443583 ]", "body": "Hi,\r\n\r\n I tired to use torch.mm to get matrix multiplication, but found it returned slightly different results when I called it in two equivalent way.\r\n\r\nAssume we have two matrix  matrix_a and matrix_b and want to get the matrix multiplication matrix_a@matrix_b\r\n1. First, I use matrix_a and matrix_b as input directly, torch.mm(matrix_a, matrix_b)\r\n2. On the other hand, I call torch.mm with each row of matrix_a together with matrix_b as inputs, and then concatenate the results.\r\n\r\nThe two results are expected to be exactly the same, but they are still slightly diferent. So can somebody explain the reason?\r\n\r\nThanks,\r\n\r\n\r\nHere is my test code.\r\n\r\n```\r\ntorch.manual_seed(0)\r\n\r\nmatrix_a = torch.randn([5, 4])\r\nmatrix_b = torch.randn([4, 4])\r\nvalues = torch.randn([5, 4])\r\n\r\n# 1. call torch.mm directly on matrix_a and matrix_b.\r\ntorch.mm(matrix_a, matrix_b, out=values)\r\n\r\n# save the result in buffer.\r\nvalues_1 = values.clone()\r\n\r\n# 2. call torch.mm on each row of matrix_a and matrix_b.\r\nbatch_size = matrix_a.size(0)\r\nfor b in range(batch_size):\r\n    torch.mm(matrix_a[b:b+1], matrix_b, out=values[b:b+1])\r\n\r\n# value and value_1 are supposed to be equal. But they are not.\r\nlogger.info(\"difference between two values: %s\" % (torch.sum(torch.abs(values - values_1))))\r\nfor b in range(batch_size):\r\n    logger.info(\"batch id: %s\" % b)\r\n    logger.info(values_1[b].data.numpy())\r\n    logger.info(values[b].data.numpy())\r\n```\r\n\r\nHere is the output.\r\n\r\n>  2018-08-18 21:32:11,294 INFO 87997 [test.py:81] difference between two values: tensor(1.00000e-06 *\r\n>        1.3113)\r\n> 2018-08-18 21:32:11,295 INFO 87997 [test.py:83] batch id: 0\r\n> 2018-08-18 21:32:11,295 INFO 87997 [test.py:84] [-0.89934576  0.11556479 -0.48109883 -0.3961889 ]\r\n> 2018-08-18 21:32:11,295 INFO 87997 [test.py:85] [-0.89934576  0.11556476 -0.4810989  -0.39618894]\r\n> 2018-08-18 21:32:11,296 INFO 87997 [test.py:83] batch id: 1\r\n> 2018-08-18 21:32:11,296 INFO 87997 [test.py:84] [ 2.6500921   0.5928108  -2.213797    0.39320117]\r\n> 2018-08-18 21:32:11,296 INFO 87997 [test.py:85] [ 2.6500921   0.59281075 -2.2137969   0.3932012 ]\r\n> 2018-08-18 21:32:11,296 INFO 87997 [test.py:83] batch id: 2\r\n> 2018-08-18 21:32:11,296 INFO 87997 [test.py:84] [ 1.3148142  3.5158207 -2.2286756 -2.1263554]\r\n> 2018-08-18 21:32:11,297 INFO 87997 [test.py:85] [ 1.3148141  3.515821  -2.2286754 -2.1263554]\r\n> 2018-08-18 21:32:11,297 INFO 87997 [test.py:83] batch id: 3\r\n> 2018-08-18 21:32:11,297 INFO 87997 [test.py:84] [-0.25188264  1.0855039   1.4054772  -0.47265998]\r\n> 2018-08-18 21:32:11,297 INFO 87997 [test.py:85] [-0.25188267  1.085504    1.4054773  -0.47265998]\r\n> 2018-08-18 21:32:11,298 INFO 87997 [test.py:83] batch id: 4\r\n> 2018-08-18 21:32:11,298 INFO 87997 [test.py:84] [ 1.250929   3.790292  -1.7040166 -2.443583 ]\r\n> 2018-08-18 21:32:11,298 INFO 87997 [test.py:85] [ 1.250929   3.790292  -1.7040166 -2.443583 ]"}