{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220400814", "pull_request_review_id": 158800669, "id": 220400814, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDQwMDgxNA==", "diff_hunk": "@@ -34,7 +34,8 @@ def gen_variable_factories(out, declarations, template_path):\n     function_definitions = []\n     for decl in declarations:\n         has_tensor_options = any(a[\"simple_type\"] == \"TensorOptions\" for a in decl[\"arguments\"])\n-        if has_tensor_options or decl[\"name\"].endswith(\"_like\"):\n+        is_namespace_fn = 'namespace' in decl['method_of']", "path": "tools/autograd/gen_variable_factories.py", "position": 5, "original_position": 5, "commit_id": "cc5919dbf83205bf7b3b8031caf41aa3f16e5d9c", "original_commit_id": "4d95dc12ad5d7702da8563d7577ffe07e134c22a", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "This is saying we should only generate a variable factory corresponding to a tensor factory function if it is actually a namespace function, i.e. has variant: function.  The previous code would generate a variable factory if it had a TensorOptions parameter, but this had a bad effect when combined with the `variants: []` concept when I moved some of the Type-parameter functions to be TensorOptions-parameter functions (i.e. it would generate variable factories even though a corresponding factory function didn't exist).", "created_at": "2018-09-26T01:09:11Z", "updated_at": "2018-11-23T15:51:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/12071#discussion_r220400814", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12071", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/220400814"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12071#discussion_r220400814"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12071"}}, "body_html": "<p>This is saying we should only generate a variable factory corresponding to a tensor factory function if it is actually a namespace function, i.e. has variant: function.  The previous code would generate a variable factory if it had a TensorOptions parameter, but this had a bad effect when combined with the <code>variants: []</code> concept when I moved some of the Type-parameter functions to be TensorOptions-parameter functions (i.e. it would generate variable factories even though a corresponding factory function didn't exist).</p>", "body_text": "This is saying we should only generate a variable factory corresponding to a tensor factory function if it is actually a namespace function, i.e. has variant: function.  The previous code would generate a variable factory if it had a TensorOptions parameter, but this had a bad effect when combined with the variants: [] concept when I moved some of the Type-parameter functions to be TensorOptions-parameter functions (i.e. it would generate variable factories even though a corresponding factory function didn't exist).", "in_reply_to_id": 220388288}