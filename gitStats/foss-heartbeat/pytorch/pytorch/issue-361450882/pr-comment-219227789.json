{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219227789", "pull_request_review_id": 157353751, "id": 219227789, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTIyNzc4OQ==", "diff_hunk": "@@ -506,18 +499,25 @@ Tensor tensor_ctor(const Type& type, PyObject* args, PyObject* kwargs) {\n   ParsedArgs<4> parsed_args;\n   auto r = parser.parse(args, kwargs, parsed_args);\n   if (r.idx == 0) {\n+    PyObject* data = r.pyobject(0);\n+    if (THPVariable_Check(data)) {\n+      PyErr_WarnEx(PyExc_UserWarning,", "path": "torch/csrc/utils/tensor_new.cpp", "position": 50, "original_position": 39, "commit_id": "36d298cb704d694bee62dd72e88973fd72e343c2", "original_commit_id": "4b680f03d7fc04333f9bd670adb2b5a89f319a50", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "Thanks for reposting my message @weiyangfb !\r\nSo, to expand a bit more on the previous message, if we consider the case I mentioned (supporting both numbers and tensors / lists in torch functions), then we would want `torch.as_tensor` to not break the computation graph. Thus, `torch.as_tensor(tensor, dtype=dtype, device=device)` should work as `.to(dtype, device)`, for tensors.", "created_at": "2018-09-20T16:14:41Z", "updated_at": "2018-11-23T15:51:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/11815#discussion_r219227789", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11815", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219227789"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11815#discussion_r219227789"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11815"}}, "body_html": "<p>Thanks for reposting my message <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38509346\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyangfb\">@weiyangfb</a> !<br>\nSo, to expand a bit more on the previous message, if we consider the case I mentioned (supporting both numbers and tensors / lists in torch functions), then we would want <code>torch.as_tensor</code> to not break the computation graph. Thus, <code>torch.as_tensor(tensor, dtype=dtype, device=device)</code> should work as <code>.to(dtype, device)</code>, for tensors.</p>", "body_text": "Thanks for reposting my message @weiyangfb !\nSo, to expand a bit more on the previous message, if we consider the case I mentioned (supporting both numbers and tensors / lists in torch functions), then we would want torch.as_tensor to not break the computation graph. Thus, torch.as_tensor(tensor, dtype=dtype, device=device) should work as .to(dtype, device), for tensors.", "in_reply_to_id": 218608274}