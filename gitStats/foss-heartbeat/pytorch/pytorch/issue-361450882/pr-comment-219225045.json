{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219225045", "pull_request_review_id": 157350283, "id": 219225045, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTIyNTA0NQ==", "diff_hunk": "@@ -506,18 +499,25 @@ Tensor tensor_ctor(const Type& type, PyObject* args, PyObject* kwargs) {\n   ParsedArgs<4> parsed_args;\n   auto r = parser.parse(args, kwargs, parsed_args);\n   if (r.idx == 0) {\n+    PyObject* data = r.pyobject(0);\n+    if (THPVariable_Check(data)) {\n+      PyErr_WarnEx(PyExc_UserWarning,", "path": "torch/csrc/utils/tensor_new.cpp", "position": 50, "original_position": 39, "commit_id": "36d298cb704d694bee62dd72e88973fd72e343c2", "original_commit_id": "4b680f03d7fc04333f9bd670adb2b5a89f319a50", "user": {"login": "weiyangfb", "id": 38509346, "node_id": "MDQ6VXNlcjM4NTA5MzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/38509346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiyangfb", "html_url": "https://github.com/weiyangfb", "followers_url": "https://api.github.com/users/weiyangfb/followers", "following_url": "https://api.github.com/users/weiyangfb/following{/other_user}", "gists_url": "https://api.github.com/users/weiyangfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiyangfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiyangfb/subscriptions", "organizations_url": "https://api.github.com/users/weiyangfb/orgs", "repos_url": "https://api.github.com/users/weiyangfb/repos", "events_url": "https://api.github.com/users/weiyangfb/events{/privacy}", "received_events_url": "https://api.github.com/users/weiyangfb/received_events", "type": "User", "site_admin": false}, "body": "@fmassa Commented on the workchat, I am reposting it here to drive the discussion:\r\n\r\none way of writing code that works for both tensors and numbers / numpy arrays is to always put a as_tensor right in the beginning of the function. So I could see this as a very common pattern:\r\n```\r\ndef exp(x):\r\n    x = torch.as_tensor(x)\r\n    return x.exp()\r\n```\r\nI btw think that this is something that we should consider doing in our functions, so that `torch.exp(1.0)` works.\r\n\r\nThus, I would argue that `torch.as_tensor(x)` should not break the computation graph if x is a tensor that requires grad", "created_at": "2018-09-20T16:06:18Z", "updated_at": "2018-11-23T15:51:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/11815#discussion_r219225045", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11815", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219225045"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11815#discussion_r219225045"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11815"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> Commented on the workchat, I am reposting it here to drive the discussion:</p>\n<p>one way of writing code that works for both tensors and numbers / numpy arrays is to always put a as_tensor right in the beginning of the function. So I could see this as a very common pattern:</p>\n<pre><code>def exp(x):\n    x = torch.as_tensor(x)\n    return x.exp()\n</code></pre>\n<p>I btw think that this is something that we should consider doing in our functions, so that <code>torch.exp(1.0)</code> works.</p>\n<p>Thus, I would argue that <code>torch.as_tensor(x)</code> should not break the computation graph if x is a tensor that requires grad</p>", "body_text": "@fmassa Commented on the workchat, I am reposting it here to drive the discussion:\none way of writing code that works for both tensors and numbers / numpy arrays is to always put a as_tensor right in the beginning of the function. So I could see this as a very common pattern:\ndef exp(x):\n    x = torch.as_tensor(x)\n    return x.exp()\n\nI btw think that this is something that we should consider doing in our functions, so that torch.exp(1.0) works.\nThus, I would argue that torch.as_tensor(x) should not break the computation graph if x is a tensor that requires grad", "in_reply_to_id": 218608274}