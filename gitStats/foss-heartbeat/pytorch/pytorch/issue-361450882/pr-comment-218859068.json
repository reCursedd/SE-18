{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218859068", "pull_request_review_id": 156885533, "id": 218859068, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODg1OTA2OA==", "diff_hunk": "@@ -506,18 +499,25 @@ Tensor tensor_ctor(const Type& type, PyObject* args, PyObject* kwargs) {\n   ParsedArgs<4> parsed_args;\n   auto r = parser.parse(args, kwargs, parsed_args);\n   if (r.idx == 0) {\n+    PyObject* data = r.pyobject(0);\n+    if (THPVariable_Check(data)) {\n+      PyErr_WarnEx(PyExc_UserWarning,\n+        \"To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() \"\n+        \"or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\", 1);\n+    }\n+\n     bool type_inference = r.isNone(1);\n-    // args_requires_grad=True if requires_grad is set to True (requires_grad=True)\n     bool args_requires_grad = r.toBool(3);\n-    return internal_new_from_data(\n+    auto new_tensor = internal_new_from_data(\n                typeWithDefault(r, 1, 2, type),\n                r.deviceOptional(2),\n-               r.pyobject(0),\n+               data,\n                true,\n                true,\n-               type_inference,\n-               args_requires_grad)\n-        .set_requires_grad(r.toBool(3));\n+               type_inference);\n+    new_tensor.detach_(); // making new_tensor a leaf node", "path": "torch/csrc/utils/tensor_new.cpp", "position": null, "original_position": 59, "commit_id": "36d298cb704d694bee62dd72e88973fd72e343c2", "original_commit_id": "d2769423060c797280f006b501cd687ed369d271", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "prefer 'ensure' to 'making' -- new_tensor may already be a leaf node.", "created_at": "2018-09-19T15:47:04Z", "updated_at": "2018-11-23T15:51:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/11815#discussion_r218859068", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11815", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218859068"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11815#discussion_r218859068"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11815"}}, "body_html": "<p>prefer 'ensure' to 'making' -- new_tensor may already be a leaf node.</p>", "body_text": "prefer 'ensure' to 'making' -- new_tensor may already be a leaf node."}