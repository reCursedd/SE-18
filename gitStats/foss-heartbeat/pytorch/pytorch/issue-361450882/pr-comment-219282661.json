{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219282661", "pull_request_review_id": 157422665, "id": 219282661, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTI4MjY2MQ==", "diff_hunk": "@@ -506,18 +499,25 @@ Tensor tensor_ctor(const Type& type, PyObject* args, PyObject* kwargs) {\n   ParsedArgs<4> parsed_args;\n   auto r = parser.parse(args, kwargs, parsed_args);\n   if (r.idx == 0) {\n+    PyObject* data = r.pyobject(0);\n+    if (THPVariable_Check(data)) {\n+      PyErr_WarnEx(PyExc_UserWarning,", "path": "torch/csrc/utils/tensor_new.cpp", "position": 50, "original_position": 39, "commit_id": "36d298cb704d694bee62dd72e88973fd72e343c2", "original_commit_id": "4b680f03d7fc04333f9bd670adb2b5a89f319a50", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Yeah I think the primary use-case for `as_tensor` is writing out functions that can work both with tensors and with regular Python objects, and there's no reason to make them non-differentiable if the inputs already were tensors. I really think it should preserve the graph, and use `.to` to casting if necessary.", "created_at": "2018-09-20T19:05:04Z", "updated_at": "2018-11-23T15:51:46Z", "html_url": "https://github.com/pytorch/pytorch/pull/11815#discussion_r219282661", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11815", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/219282661"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11815#discussion_r219282661"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11815"}}, "body_html": "<p>Yeah I think the primary use-case for <code>as_tensor</code> is writing out functions that can work both with tensors and with regular Python objects, and there's no reason to make them non-differentiable if the inputs already were tensors. I really think it should preserve the graph, and use <code>.to</code> to casting if necessary.</p>", "body_text": "Yeah I think the primary use-case for as_tensor is writing out functions that can work both with tensors and with regular Python objects, and there's no reason to make them non-differentiable if the inputs already were tensors. I really think it should preserve the graph, and use .to to casting if necessary.", "in_reply_to_id": 218608274}