{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218858284", "pull_request_review_id": 156885533, "id": 218858284, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODg1ODI4NA==", "diff_hunk": "@@ -506,18 +499,25 @@ Tensor tensor_ctor(const Type& type, PyObject* args, PyObject* kwargs) {\n   ParsedArgs<4> parsed_args;\n   auto r = parser.parse(args, kwargs, parsed_args);\n   if (r.idx == 0) {\n+    PyObject* data = r.pyobject(0);\n+    if (THPVariable_Check(data)) {\n+      PyErr_WarnEx(PyExc_UserWarning,", "path": "torch/csrc/utils/tensor_new.cpp", "position": 50, "original_position": 39, "commit_id": "36d298cb704d694bee62dd72e88973fd72e343c2", "original_commit_id": "4b680f03d7fc04333f9bd670adb2b5a89f319a50", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "This is a good question.  My opinion is that we don't need to go through the whole warning song and dance with `as_tensor` because it doesn't have a `requires_grad` argument (precisely for the reason mentioned).  We just need to add to the `as_tensor` document that it either returns the tensor passed in or it returns a new Tensor with `requires_grad = False` (it follows that you don't need to call detach and detach isn't preferred from the fact that `requires_grad = False`).", "created_at": "2018-09-19T15:45:07Z", "updated_at": "2018-11-23T15:51:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/11815#discussion_r218858284", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11815", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218858284"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11815#discussion_r218858284"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11815"}}, "body_html": "<p>This is a good question.  My opinion is that we don't need to go through the whole warning song and dance with <code>as_tensor</code> because it doesn't have a <code>requires_grad</code> argument (precisely for the reason mentioned).  We just need to add to the <code>as_tensor</code> document that it either returns the tensor passed in or it returns a new Tensor with <code>requires_grad = False</code> (it follows that you don't need to call detach and detach isn't preferred from the fact that <code>requires_grad = False</code>).</p>", "body_text": "This is a good question.  My opinion is that we don't need to go through the whole warning song and dance with as_tensor because it doesn't have a requires_grad argument (precisely for the reason mentioned).  We just need to add to the as_tensor document that it either returns the tensor passed in or it returns a new Tensor with requires_grad = False (it follows that you don't need to call detach and detach isn't preferred from the fact that requires_grad = False).", "in_reply_to_id": 218608274}