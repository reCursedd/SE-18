{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3160", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3160/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3160/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3160/events", "html_url": "https://github.com/pytorch/pytorch/pull/3160", "id": 266534268, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ3MzMxNTUw", "number": 3160, "title": "[WIP] Tracing in ATen-style Variable class", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-18T15:21:19Z", "updated_at": "2018-11-23T15:35:32Z", "closed_at": "2017-10-19T21:42:25Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3160", "html_url": "https://github.com/pytorch/pytorch/pull/3160", "diff_url": "https://github.com/pytorch/pytorch/pull/3160.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3160.patch"}, "body_html": "<p>This is based off of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"265877102\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3136\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/3136/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/3136\">#3136</a>.</p>\n<pre><code>commit 2c8d829ca36179d8d2ab55d2c0fa5dafaf987946\nAuthor: Edward Z. Yang &lt;ezyang@fb.com&gt;\nDate:   Tue Oct 17 09:49:00 2017 -0700\n\n    Add tracing to the new ATen style API.\n    \n    The generated tracing code looks like this:\n    \n        if (jit::tracer::isTracing({ self })) {\n          jit::Node *n = jit::tracer::recordTrace( \"mean\", { self }, ret );\n          n-&gt;rawSet(jit::stringToSymbol(\"dim\"), dim);\n          n-&gt;rawSet(jit::stringToSymbol(\"keepdim\"), keepdim);\n        }\n    \n    A few design decisions I made:\n    \n      - Instead of making the assignment of 'n' conditional on whether or not\n        attributes are present, I just add (void)n if it would not be used\n        otherwise.  This modestly simplifies code generation.\n    \n      - Tracing of operations that involve Generator or Storage are not supported.\n        This is fine because such ops don't take any Variable arguments anyway,\n        so they couldn't trigger tracing.\n    \n      - I added a new rawSet overloaded method to attributes.h, because it was more\n        convenient than writing different method names for each attribute.\n    \n      - Unfortunately, at::ArrayRef is not covariant, so there is some faffing about\n        to support conversions from at::ArrayRef&lt;Tensor&gt; (aka TensorList) to\n        at::ArrayRef&lt;Variable&gt;.  In the case of 'recordTrace' (slow path), I just\n        allocated an intermediate std::vector to get the types correct; in the case\n        of isTracing (fast path) I copy pasted the definition three times.  I'm not\n        terribly happy with this so I'd appreciate ways to improve it.\n    \n      - Tracing is all in one place, rather than spattered between the beginning\n        and end of an ATen function, as Sam suggested.\n    \n      - This commit doesn't actually enable ATen definitions.\n    \n    Signed-off-by: Edward Z. Yang &lt;ezyang@fb.com&gt;\n</code></pre>\n<p>It's WIP because the ONNX path is not updated yet.</p>", "body_text": "This is based off of #3136.\ncommit 2c8d829ca36179d8d2ab55d2c0fa5dafaf987946\nAuthor: Edward Z. Yang <ezyang@fb.com>\nDate:   Tue Oct 17 09:49:00 2017 -0700\n\n    Add tracing to the new ATen style API.\n    \n    The generated tracing code looks like this:\n    \n        if (jit::tracer::isTracing({ self })) {\n          jit::Node *n = jit::tracer::recordTrace( \"mean\", { self }, ret );\n          n->rawSet(jit::stringToSymbol(\"dim\"), dim);\n          n->rawSet(jit::stringToSymbol(\"keepdim\"), keepdim);\n        }\n    \n    A few design decisions I made:\n    \n      - Instead of making the assignment of 'n' conditional on whether or not\n        attributes are present, I just add (void)n if it would not be used\n        otherwise.  This modestly simplifies code generation.\n    \n      - Tracing of operations that involve Generator or Storage are not supported.\n        This is fine because such ops don't take any Variable arguments anyway,\n        so they couldn't trigger tracing.\n    \n      - I added a new rawSet overloaded method to attributes.h, because it was more\n        convenient than writing different method names for each attribute.\n    \n      - Unfortunately, at::ArrayRef is not covariant, so there is some faffing about\n        to support conversions from at::ArrayRef<Tensor> (aka TensorList) to\n        at::ArrayRef<Variable>.  In the case of 'recordTrace' (slow path), I just\n        allocated an intermediate std::vector to get the types correct; in the case\n        of isTracing (fast path) I copy pasted the definition three times.  I'm not\n        terribly happy with this so I'd appreciate ways to improve it.\n    \n      - Tracing is all in one place, rather than spattered between the beginning\n        and end of an ATen function, as Sam suggested.\n    \n      - This commit doesn't actually enable ATen definitions.\n    \n    Signed-off-by: Edward Z. Yang <ezyang@fb.com>\n\nIt's WIP because the ONNX path is not updated yet.", "body": "This is based off of #3136.\r\n\r\n```\r\ncommit 2c8d829ca36179d8d2ab55d2c0fa5dafaf987946\r\nAuthor: Edward Z. Yang <ezyang@fb.com>\r\nDate:   Tue Oct 17 09:49:00 2017 -0700\r\n\r\n    Add tracing to the new ATen style API.\r\n    \r\n    The generated tracing code looks like this:\r\n    \r\n        if (jit::tracer::isTracing({ self })) {\r\n          jit::Node *n = jit::tracer::recordTrace( \"mean\", { self }, ret );\r\n          n->rawSet(jit::stringToSymbol(\"dim\"), dim);\r\n          n->rawSet(jit::stringToSymbol(\"keepdim\"), keepdim);\r\n        }\r\n    \r\n    A few design decisions I made:\r\n    \r\n      - Instead of making the assignment of 'n' conditional on whether or not\r\n        attributes are present, I just add (void)n if it would not be used\r\n        otherwise.  This modestly simplifies code generation.\r\n    \r\n      - Tracing of operations that involve Generator or Storage are not supported.\r\n        This is fine because such ops don't take any Variable arguments anyway,\r\n        so they couldn't trigger tracing.\r\n    \r\n      - I added a new rawSet overloaded method to attributes.h, because it was more\r\n        convenient than writing different method names for each attribute.\r\n    \r\n      - Unfortunately, at::ArrayRef is not covariant, so there is some faffing about\r\n        to support conversions from at::ArrayRef<Tensor> (aka TensorList) to\r\n        at::ArrayRef<Variable>.  In the case of 'recordTrace' (slow path), I just\r\n        allocated an intermediate std::vector to get the types correct; in the case\r\n        of isTracing (fast path) I copy pasted the definition three times.  I'm not\r\n        terribly happy with this so I'd appreciate ways to improve it.\r\n    \r\n      - Tracing is all in one place, rather than spattered between the beginning\r\n        and end of an ATen function, as Sam suggested.\r\n    \r\n      - This commit doesn't actually enable ATen definitions.\r\n    \r\n    Signed-off-by: Edward Z. Yang <ezyang@fb.com>\r\n```\r\n\r\nIt's WIP because the ONNX path is not updated yet."}