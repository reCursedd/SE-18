{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145715823", "pull_request_review_id": 70556233, "id": 145715823, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTcxNTgyMw==", "diff_hunk": "@@ -233,4 +253,24 @@ inline bool VariableFlags::verify(const Variable& var) {\n   return !was_null && requires_grad == var.requires_grad() && is_volatile == var.is_volatile();\n }\n \n+Node* recordTraceWorker(std::string op, at::ArrayRef<Variable> inputs, at::ArrayRef<Variable> outputs);\n+\n+inline Node* recordTrace(std::string op, std::initializer_list<Variable> inputs, const Variable& output) {\n+  return recordTraceWorker(op, inputs, {output});\n+}\n+inline Node* recordTrace(std::string op, std::initializer_list<Variable> inputs, const std::tuple<Variable, Variable>& outputs) {\n+  return recordTraceWorker(op, inputs, {std::get<0>(outputs), std::get<1>(outputs)});\n+}\n+inline Node* recordTrace(std::string op, std::initializer_list<Variable> inputs, const std::tuple<Variable, Variable, Variable>& outputs) {\n+  return recordTraceWorker(op, inputs, {std::get<0>(outputs), std::get<1>(outputs), std::get<2>(outputs)});\n+}\n+inline Node* recordTrace(std::string op, std::initializer_list<Variable> inputs, at::TensorList& outputs) {\n+  // TODO: Eliminate the intermediate vector allocation\n+  return recordTraceWorker(op, inputs, std::vector<Variable>(outputs.begin(), outputs.end()));\n+}\n+inline Node* recordTrace(std::string op, at::TensorList inputs, const Variable& output) {", "path": "torch/csrc/jit/tracer.h", "position": 55, "original_position": 55, "commit_id": "86c9ea260bff743162df1c07d673bb6039fb424d", "original_commit_id": "2c8d829ca36179d8d2ab55d2c0fa5dafaf987946", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "TensorList input arguments occur for `cat`. I am always wrapping in an initializer list, but ISTR that if I say `std::initializer_list<at::TensorList>` the overload is ambiguous. The overload this way is consistent with how the `_flags` method works.", "created_at": "2017-10-19T14:25:03Z", "updated_at": "2018-11-23T15:35:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/3160#discussion_r145715823", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3160", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145715823"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3160#discussion_r145715823"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3160"}}, "body_html": "<p>TensorList input arguments occur for <code>cat</code>. I am always wrapping in an initializer list, but ISTR that if I say <code>std::initializer_list&lt;at::TensorList&gt;</code> the overload is ambiguous. The overload this way is consistent with how the <code>_flags</code> method works.</p>", "body_text": "TensorList input arguments occur for cat. I am always wrapping in an initializer list, but ISTR that if I say std::initializer_list<at::TensorList> the overload is ambiguous. The overload this way is consistent with how the _flags method works.", "in_reply_to_id": 145647221}