{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194471018", "pull_request_review_id": 127649920, "id": 194471018, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDQ3MTAxOA==", "diff_hunk": "@@ -0,0 +1,196 @@\n+#pragma once\n+\n+#include <torch/csrc/autograd/variable.h>\n+\n+#include <cstddef>\n+#include <iterator>\n+#include <limits>\n+#include <string>\n+#include <type_traits>\n+\n+// Forward declarations.\n+namespace torch {\n+namespace detail {\n+template <typename T>\n+struct CursorCollector;\n+} // namespace detail\n+namespace nn {\n+class Module;\n+} // namespace nn\n+} // namespace torch\n+\n+namespace torch {\n+namespace detail {\n+/// A cursor provides hierarchical iteration support, with convenient iterator\n+/// functions like `map` or `find`.\n+///\n+/// Fundamentally, cursors are similar to `std::map`, with `[]`, `.at()`,\n+/// `.size()` etc. When iterating over a cursor, use `.key()` to get the\n+/// associated string, and dereference the returned item or use `.value()` to\n+/// get the associated value (e.g. the variable, the module or the buffer).\n+///\n+/// Note that cursors *eagerly* collect items. So if you want to perform many", "path": "torch/csrc/api/include/torch/nn/cursor.h", "position": 32, "original_position": 32, "commit_id": "53be433dacc5d386ed336a2009ed9751eed14ad1", "original_commit_id": "53be433dacc5d386ed336a2009ed9751eed14ad1", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "all items immediately, as opposed to lazily producing them like a geneartor", "created_at": "2018-06-11T16:46:12Z", "updated_at": "2018-11-23T15:45:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/8190#discussion_r194471018", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8190", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/194471018"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8190#discussion_r194471018"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8190"}}, "body_html": "<p>all items immediately, as opposed to lazily producing them like a geneartor</p>", "body_text": "all items immediately, as opposed to lazily producing them like a geneartor", "in_reply_to_id": 193946413}