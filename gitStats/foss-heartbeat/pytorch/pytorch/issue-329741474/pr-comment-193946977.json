{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193946977", "pull_request_review_id": 127025205, "id": 193946977, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk0Njk3Nw==", "diff_hunk": "@@ -0,0 +1,183 @@\n+#include <torch/nn/cursor.h>\n+#include <torch/nn/module.h>\n+\n+#include <torch/csrc/autograd/variable.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <queue>\n+#include <string>\n+#include <vector>\n+\n+namespace torch {\n+namespace detail {\n+\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CursorBase::Item ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+template <typename T>\n+CursorBase<T>::Item::Item(const std::string& key_, T& value_)\n+    : key(key_), value(value_) {}\n+\n+template <typename T>\n+T& CursorBase<T>::Item::operator*() {\n+  return value;\n+}\n+\n+template <typename T>\n+T* CursorBase<T>::Item::operator->() {\n+  return &value;\n+}\n+\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CursorBase ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+template <typename T>\n+CursorBase<T>::CursorBase(std::vector<Item>&& items)\n+    : items_(std::move(items)) {}\n+\n+template <typename T>\n+    typename CursorBase<T>::Iterator CursorBase<T>::begin() & noexcept {\n+  return items_.begin();\n+}\n+\n+template <typename T>\n+    typename CursorBase<T>::Iterator CursorBase<T>::end() & noexcept {\n+  return items_.end();\n+}\n+\n+template <typename T>\n+T* CursorBase<T>::find(const std::string& key) noexcept {\n+  for (auto item : *this) {\n+    if (item.key == key) {\n+      return &item.value;\n+    }\n+  }\n+  return nullptr;\n+}\n+\n+template <typename T>\n+T& CursorBase<T>::at(const std::string& key) {\n+  if (auto* value = find(key)) {\n+    return *value;\n+  }\n+  AT_ERROR(\"No such key: '\", key, \"'\");\n+}\n+\n+template <typename T>\n+T& CursorBase<T>::operator[](const std::string& key) {\n+  return at(key);\n+}\n+\n+template <typename T>\n+bool CursorBase<T>::contains(const std::string& key) noexcept {\n+  return find(key) != nullptr;\n+}\n+\n+template <typename T>\n+size_t CursorBase<T>::size() const noexcept {\n+  return items_.size();\n+}\n+\n+// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CursorCollector ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+namespace {\n+/// Joins names hierarchically: \"prefix.name\" if `prefix` is non-empty, else\n+/// just \"name\".\n+std::string join_name(const std::string& prefix, const std::string& name) {\n+  size_t total_size = name.size();\n+  if (!prefix.empty()) {\n+    total_size += prefix.size() + 1;\n+  }\n+  std::string full_name;\n+  full_name.reserve(total_size);\n+  if (!prefix.empty()) {\n+    full_name += prefix;\n+    full_name.push_back('.');\n+  }\n+  full_name += name;\n+  return full_name;\n+}\n+} // namespace\n+\n+template <typename T>\n+struct CursorBase<T>::Collector {\n+  Collector() = default;\n+\n+  template <typename ModuleType>\n+  std::vector<Item>&& collect_children(\n+      ModuleType& module,\n+      size_t maximum_depth,\n+      std::string name_prefix = std::string()) {\n+    for (auto& child : module.children_) {\n+      auto hierarchical_name = join_name(name_prefix, child.key);\n+      items.emplace_back(hierarchical_name, *child.value);\n+      if (maximum_depth > 1) {\n+        collect_children(\n+            *child.value, maximum_depth - 1, std::move(hierarchical_name));\n+      }\n+    }\n+    return std::move(items);\n+  }\n+\n+  template <typename ModuleType>\n+  std::vector<Item>&& collect_parameters(\n+      ModuleType& module,\n+      std::string name_prefix = std::string()) {\n+    for (auto& parameter : module.parameters_) {\n+      items.emplace_back(\n+          join_name(name_prefix, parameter.key), parameter.value);\n+    }\n+    for (auto& child : module.children_) {\n+      collect_parameters(*child.value, join_name(name_prefix, child.key));", "path": "torch/csrc/api/src/nn/cursor.cpp", "position": 130, "original_position": 130, "commit_id": "53be433dacc5d386ed336a2009ed9751eed14ad1", "original_commit_id": "53be433dacc5d386ed336a2009ed9751eed14ad1", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "But of course, because you drop the return value, items doesn't actually get moved out so you can keep pushing to it. Subtle.", "created_at": "2018-06-08T03:51:58Z", "updated_at": "2018-11-23T15:45:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/8190#discussion_r193946977", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8190", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193946977"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8190#discussion_r193946977"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8190"}}, "body_html": "<p>But of course, because you drop the return value, items doesn't actually get moved out so you can keep pushing to it. Subtle.</p>", "body_text": "But of course, because you drop the return value, items doesn't actually get moved out so you can keep pushing to it. Subtle."}