{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193591311", "pull_request_review_id": 126592939, "id": 193591311, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzU5MTMxMQ==", "diff_hunk": "@@ -0,0 +1,183 @@\n+#pragma once\n+\n+#include <torch/csrc/autograd/variable.h>\n+\n+#include <cstddef>\n+#include <iterator>\n+#include <limits>\n+#include <string>\n+#include <type_traits>\n+\n+// Forward declarations.\n+namespace torch {\n+namespace detail {\n+template <typename T>\n+struct CursorCollector;\n+} // namespace detail\n+namespace nn {\n+class Module;\n+} // namespace nn\n+} // namespace torch\n+\n+namespace torch {\n+namespace detail {\n+/// Provides hierarchical iteration support, with convenient iterator functions\n+/// like `map` or `find`. A cursor's lifetime is bound to the lifetime of the\n+/// module hierarchy into which it points.\n+template <typename T>\n+class CursorBase {\n+ public:\n+  // NOTE: This is a template class, but we explicitly instantiate it in the\n+  // .cpp file for every type necessary, so we can define it in the .cpp file.\n+  // Hooray!\n+\n+  /// A `(key, value)` pair exposed by cursor iterators.\n+  struct Item {\n+    Item(const std::string& key_, T& module_);\n+\n+    T& operator*();\n+    T* operator->();\n+\n+    const std::string key;\n+    T& value;\n+  };\n+\n+  // Iterators are valid for the lifetime of the cursor.\n+\n+  // Picks either `const_iterator` or `iterator` as the iterator type, depending\n+  // on whether `T` is const.\n+  using Iterator = typename std::conditional<\n+      std::is_const<T>::value,\n+      typename std::vector<Item>::const_iterator,\n+      typename std::vector<Item>::iterator>::type;\n+\n+  CursorBase() = default;\n+\n+  /// Constructs the `CursorBase` from a vector of items.\n+  explicit CursorBase(std::vector<Item>&& items);\n+\n+  // No need for a virtual destructor, as cursors are not intended to be used\n+  // polymorhpically (i.e. we are relying on non-virtual inheritance).\n+\n+  // Note that these functions may only be called on lvalues (that's the\n+  // ampersand next to the function)! This prevents code like `auto iterator =\n+  // module.modules().begin()`, since `iterator` would be pointing to a `vector`\n+  // that gets destructed at the end of the expression. This is not a problem\n+  // for range loops, as they capture the range expression (the thing to the\n+  // right of the colon in `for (auto x : ...)`) before iteration. This is\n+  // smart.\n+  Iterator begin() & noexcept;\n+  Iterator end() & noexcept;\n+\n+  /// Applies a function to every *value* available. The function should accept\n+  /// a single argument, that is a reference to the value type (e.g. `Module&`).\n+  template <typename Function>\n+  void apply(const Function& function) {\n+    for (auto module : *this) {\n+      function(*module);\n+    }\n+  }\n+\n+  /// Applies a function to every *item* available. The function should accept\n+  /// two arguments, one taking a reference to the key type (always `const\n+  /// std::string&`) and the other taking a reference to the value type (e.g.\n+  /// `Module&`).\n+  template <typename Function>\n+  void apply_items(const Function& function) {\n+    for (auto module : *this) {\n+      function(module.key, *module);\n+    }\n+  }\n+\n+  /// Applies a function to every *value* available, and stores the return value\n+  /// of the function into the iterator. The function should accept\n+  /// a single argument, that is a reference to the value type (e.g. `Module&`).\n+  template <typename Iterator, typename Function>\n+  void map(Iterator output_iterator, Function function) {\n+    for (auto module : *this) {\n+      *output_iterator = function(*module);\n+    }\n+  }\n+\n+  /// Applies a function to every *value* available, and stores the return value\n+  /// of the function into the iterator. The function should accept\n+  /// two arguments, one taking a reference to the key type (always `const\n+  /// std::string&`) and the other taking a referen\n+  template <typename Iterator, typename Function>\n+  void map_items(Iterator output_iterator, Function function) {\n+    for (auto module : *this) {\n+      *output_iterator = function(module.key, *module);\n+    }\n+  }\n+\n+  /// Attempts to find a value for the given `key`. If found, returns a pointer\n+  /// to the value. If not, returns a null pointer.\n+  T* find(const std::string& key) noexcept;\n+\n+  /// Attempts to find a value for the given `key`. If found, returns a\n+  /// reference to the value. If not, throws an exception.\n+  T& get(const std::string& key);", "path": "torch/csrc/api/include/torch/nn/cursor.h", "position": null, "original_position": 119, "commit_id": "53be433dacc5d386ed336a2009ed9751eed14ad1", "original_commit_id": "0395531eda3a433bde0f82685ddd57be828f5b88", "user": {"login": "ebetica", "id": 3605224, "node_id": "MDQ6VXNlcjM2MDUyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3605224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebetica", "html_url": "https://github.com/ebetica", "followers_url": "https://api.github.com/users/ebetica/followers", "following_url": "https://api.github.com/users/ebetica/following{/other_user}", "gists_url": "https://api.github.com/users/ebetica/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebetica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebetica/subscriptions", "organizations_url": "https://api.github.com/users/ebetica/orgs", "repos_url": "https://api.github.com/users/ebetica/repos", "events_url": "https://api.github.com/users/ebetica/events{/privacy}", "received_events_url": "https://api.github.com/users/ebetica/received_events", "type": "User", "site_admin": false}, "body": "nit: at instead of get to look like the STL", "created_at": "2018-06-06T23:41:37Z", "updated_at": "2018-11-23T15:45:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/8190#discussion_r193591311", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8190", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/193591311"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8190#discussion_r193591311"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8190"}}, "body_html": "<p>nit: at instead of get to look like the STL</p>", "body_text": "nit: at instead of get to look like the STL"}