{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165728062", "pull_request_review_id": 93719042, "id": 165728062, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTcyODA2Mg==", "diff_hunk": "@@ -133,6 +140,11 @@ __global__ void cunn_MultiLabelMarginCriterion_updateGradInput_kernel(Dtype *gra\n     }\n     __syncthreads();", "path": "aten/src/THCUNN/MultiLabelMarginCriterion.cu", "position": null, "original_position": 34, "commit_id": "11e85a0a4513d0b497815cb24917ff2558371be0", "original_commit_id": "25ff9538916f18366d1b7f8a69bea9074555a228", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "Yes, `sum` may be overwritten. But in `reduceBlock`, the values are first into shared memory (`sums` here) and a `__syncthreads()` is called (see https://github.com/pytorch/pytorch/blob/502aaf39cf4a878f9e4f849e5f409573aa598aa9/aten/src/THC/THCReduceApplyUtils.cuh#L39-L48). Since there is `__syncthreads()` before the reduction, the `sums` shared memory won't be overwritten if I'm understanding correctly.", "created_at": "2018-02-02T18:52:44Z", "updated_at": "2018-11-23T15:39:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/4924#discussion_r165728062", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4924", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/165728062"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4924#discussion_r165728062"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4924"}}, "body_html": "<p>Yes, <code>sum</code> may be overwritten. But in <code>reduceBlock</code>, the values are first into shared memory (<code>sums</code> here) and a <code>__syncthreads()</code> is called (see <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/502aaf39cf4a878f9e4f849e5f409573aa598aa9/aten/src/THC/THCReduceApplyUtils.cuh#L39-L48\">pytorch/aten/src/THC/THCReduceApplyUtils.cuh</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 39 to 48\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/502aaf39cf4a878f9e4f849e5f409573aa598aa9\">502aaf3</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L39\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"39\"></td>\n          <td id=\"LC39\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> We store each of the N values contiguously, so if N = 2, all values for</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L40\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"40\"></td>\n          <td id=\"LC40\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> the first threadVal for each thread in the block are stored followed by</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L41\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"41\"></td>\n          <td id=\"LC41\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">//</span> all of the values for the second threadVal for each thread in the block</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L42\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"42\"></td>\n          <td id=\"LC42\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">threadIdx</span>.<span class=\"pl-smi\">x</span> &lt; numVals) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L43\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"43\"></td>\n          <td id=\"LC43\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> #<span class=\"pl-k\">pragma</span> unroll </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L44\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"44\"></td>\n          <td id=\"LC44\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i = <span class=\"pl-c1\">0</span>; i &lt; N; ++i) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L45\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"45\"></td>\n          <td id=\"LC45\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       smem[i * numVals + <span class=\"pl-c1\">threadIdx</span>.<span class=\"pl-smi\">x</span>] = threadVals[i]; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L46\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"46\"></td>\n          <td id=\"LC46\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L47\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"47\"></td>\n          <td id=\"LC47\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L48\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"48\"></td>\n          <td id=\"LC48\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-c1\">__syncthreads</span>(); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n). Since there is <code>__syncthreads()</code> before the reduction, the <code>sums</code> shared memory won't be overwritten if I'm understanding correctly.</p>", "body_text": "Yes, sum may be overwritten. But in reduceBlock, the values are first into shared memory (sums here) and a __syncthreads() is called (see \n  \n    \n      pytorch/aten/src/THC/THCReduceApplyUtils.cuh\n    \n    \n        Lines 39 to 48\n      in\n      502aaf3\n    \n    \n    \n    \n\n        \n          \n             // We store each of the N values contiguously, so if N = 2, all values for \n        \n\n        \n          \n             // the first threadVal for each thread in the block are stored followed by \n        \n\n        \n          \n             // all of the values for the second threadVal for each thread in the block \n        \n\n        \n          \n             if (threadIdx.x < numVals) { \n        \n\n        \n          \n           #pragma unroll \n        \n\n        \n          \n               for (int i = 0; i < N; ++i) { \n        \n\n        \n          \n                 smem[i * numVals + threadIdx.x] = threadVals[i]; \n        \n\n        \n          \n               } \n        \n\n        \n          \n             } \n        \n\n        \n          \n             __syncthreads(); \n        \n    \n  \n\n). Since there is __syncthreads() before the reduction, the sums shared memory won't be overwritten if I'm understanding correctly.", "in_reply_to_id": 165461002}