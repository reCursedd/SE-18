{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116011978", "pull_request_review_id": 37600307, "id": 116011978, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjAxMTk3OA==", "diff_hunk": "@@ -331,93 +362,90 @@ class Remainder(_ConstantGrad):\n \n class Lerp(Function):\n \n-    def __init__(self, weight):\n-        super(Lerp, self).__init__()\n-        self.weight = float(weight)\n-\n-    def forward(self, a, b):\n-        return a.lerp(b, self.weight)\n+    @staticmethod\n+    def forward(ctx, a, b, weight):\n+        ctx._weight = float(weight)\n+        return a.lerp(b, ctx._weight)\n \n-    def backward(self, grad_output):\n-        return grad_output.mul(1 - self.weight), grad_output.mul(self.weight)\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        return grad_output.mul(1 - ctx._weight), grad_output.mul(ctx._weight), None\n \n \n class Rsqrt(InplaceFunction):\n \n-    def forward(self, input):\n-        if self.inplace:\n-            self.mark_dirty(input)\n-            result = input.rsqrt_()\n+    @staticmethod\n+    def forward(ctx, i, inplace=False):\n+        if inplace:\n+            ctx.mark_dirty(i)\n+            result = i.rsqrt_()\n         else:\n-            result = input.rsqrt()\n-        self.save_for_backward(result)\n+            result = i.rsqrt()\n+        ctx.save_for_backward(result)\n         return result\n \n-    def backward(self, grad_output):\n-        result, = self.saved_tensors\n-        return result.pow(3).div_(-2).mul_(grad_output)\n+    @staticmethod\n+    def backward(ctx, grad_output):\n+        result, = ctx.saved_variables\n+        return result.pow(3).div_(-2).mul(grad_output), None\n \n \n class Addcmul(InplaceFunction):\n \n-    def __init__(self, scale=1, inplace=False):\n-        super(Addcmul, self).__init__(inplace)\n-        self.scale = scale\n-\n-    def forward(self, add_tensor, mul_tensor1, mul_tensor2):\n-        self.save_for_backward(mul_tensor1, mul_tensor2)\n-        if self.inplace:\n-            self.mark_dirty(add_tensor)\n-            return add_tensor.addcmul_(self.scale, mul_tensor1, mul_tensor2)\n+    @staticmethod\n+    def forward(ctx, add_tensor, mul_tensor1, mul_tensor2, scale=1.0, inplace=False):\n+        ctx._scale = scale\n+        ctx.save_for_backward(mul_tensor1, mul_tensor2)\n+        if inplace:\n+            ctx.mark_dirty(add_tensor)\n+            return add_tensor.addcmul_(scale, mul_tensor1, mul_tensor2)\n         else:\n-            return add_tensor.addcmul(self.scale, mul_tensor1, mul_tensor2)\n+            return add_tensor.addcmul(scale, mul_tensor1, mul_tensor2)\n \n-    def backward(self, grad_output):\n+    @staticmethod\n+    def backward(ctx, grad_output):\n         grad_add = grad_mul1 = grad_mul2 = None\n-        mul_tensor1, mul_tensor2 = self.saved_tensors\n+        mul_tensor1, mul_tensor2 = ctx.saved_variables\n \n-        if self.needs_input_grad[0]:\n+        if ctx.needs_input_grad[0]:\n             grad_add = grad_output\n \n-        if self.needs_input_grad[1]:\n-            grad_mul1 = grad_output.mul(mul_tensor2).mul(self.scale)\n+        if ctx.needs_input_grad[1]:\n+            grad_mul1 = grad_output.mul(mul_tensor2).mul(ctx._scale)\n \n-        if self.needs_input_grad[2]:\n-            grad_mul2 = grad_output.mul(mul_tensor1).mul(self.scale)\n+        if ctx.needs_input_grad[2]:\n+            grad_mul2 = grad_output.mul(mul_tensor1).mul(ctx._scale)\n \n-        return grad_add, grad_mul1, grad_mul2\n+        return grad_add, grad_mul1, grad_mul2, None, None\n \n \n class Addcdiv(InplaceFunction):\n \n-    def __init__(self, scale=1, inplace=False):\n-        super(Addcdiv, self).__init__(inplace)\n-        self.scale = scale\n-\n-    def forward(self, add_tensor, div_tensor1, div_tensor2):\n-        self.save_for_backward(div_tensor1, div_tensor2)\n-        if self.inplace:\n-            self.mark_dirty(add_tensor)\n-            return add_tensor.addcdiv_(self.scale, div_tensor1, div_tensor2)\n+    @staticmethod\n+    def forward(ctx, add_tensor, div_tensor1, div_tensor2, scale=1.0, inplace=False):\n+        ctx._scale = scale\n+        ctx.save_for_backward(div_tensor1, div_tensor2)\n+        if inplace:\n+            ctx.mark_dirty(add_tensor)\n+            return add_tensor.addcdiv_(ctx._scale, div_tensor1, div_tensor2)\n         else:\n-            return add_tensor.addcdiv(self.scale, div_tensor1, div_tensor2)\n+            return add_tensor.addcdiv(ctx._scale, div_tensor1, div_tensor2)\n \n-    def backward(self, grad_output):\n+    @staticmethod\n+    def backward(ctx, grad_output):\n         grad_add = grad_div1 = grad_div2 = None\n-        div_tensor1, div_tensor2 = self.saved_tensors\n+        div_tensor1, div_tensor2 = ctx.saved_variables\n \n-        if self.needs_input_grad[0]:\n+        if ctx.needs_input_grad[0]:\n             grad_add = grad_output\n \n-        if self.needs_input_grad[1]:\n-            grad_div1 = grad_output.div(div_tensor2).mul(self.scale)\n+        if ctx.needs_input_grad[1]:\n+            grad_div1 = grad_output.div(div_tensor2).mul(ctx._scale)\n \n-        if self.needs_input_grad[2]:\n+        if ctx.needs_input_grad[2]:\n             div_tensor2_sq = div_tensor2.mul(div_tensor2)\n-            grad_div2 = grad_output.mul(div_tensor1).div_(div_tensor2_sq)\n-            grad_div2.neg_().mul_(self.scale)\n-\n-        return grad_add, grad_div1, grad_div2\n+            grad_div2 = grad_output.mul(div_tensor1).div(div_tensor2_sq).neg().mul(ctx._scale)", "path": "torch/autograd/_functions/pointwise.py", "position": null, "original_position": 534, "commit_id": "373f65ece18f7421dfff7b191fc9ed4139df5f27", "original_commit_id": "71916d0724ec58a8a718b1b1ea41df5798e0fa35", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "you can use `neg_()`", "created_at": "2017-05-11T14:53:26Z", "updated_at": "2018-11-23T15:33:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/1531#discussion_r116011978", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1531", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/116011978"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1531#discussion_r116011978"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1531"}}, "body_html": "<p>you can use <code>neg_()</code></p>", "body_text": "you can use neg_()"}