{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182259454", "pull_request_review_id": 113021818, "id": 182259454, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjI1OTQ1NA==", "diff_hunk": "@@ -10,54 +10,86 @@ a single data type.\n \n Torch defines eight CPU tensor types and eight GPU tensor types:\n \n-======================== ===========================   ================================\n-Data type                CPU tensor                    GPU tensor\n-======================== ===========================   ================================\n-32-bit floating point    :class:`torch.FloatTensor`    :class:`torch.cuda.FloatTensor`\n-64-bit floating point    :class:`torch.DoubleTensor`   :class:`torch.cuda.DoubleTensor`\n-16-bit floating point    :class:`torch.HalfTensor`     :class:`torch.cuda.HalfTensor`\n-8-bit integer (unsigned) :class:`torch.ByteTensor`     :class:`torch.cuda.ByteTensor`\n-8-bit integer (signed)   :class:`torch.CharTensor`     :class:`torch.cuda.CharTensor`\n-16-bit integer (signed)  :class:`torch.ShortTensor`    :class:`torch.cuda.ShortTensor`\n-32-bit integer (signed)  :class:`torch.IntTensor`      :class:`torch.cuda.IntTensor`\n-64-bit integer (signed)  :class:`torch.LongTensor`     :class:`torch.cuda.LongTensor`\n-======================== ===========================   ================================\n-\n-The :class:`torch.Tensor` constructor is an alias for the default tensor type\n-(:class:`torch.FloatTensor`).\n-\n-A tensor can be constructed from a Python :class:`list` or sequence:\n+========================   ===================   ===========================   ================================\n+Data type                  dtype                         CPU tensor                    GPU tensor\n+========================   ===================   ===========================   ================================\n+32-bit floating point      ``torch.float32``     :class:`torch.FloatTensor`    :class:`torch.cuda.FloatTensor`\n+64-bit floating point      ``torch.float64``     :class:`torch.DoubleTensor`   :class:`torch.cuda.DoubleTensor`\n+16-bit floating point      ``torch.float16``     :class:`torch.HalfTensor`     :class:`torch.cuda.HalfTensor`\n+8-bit integer (unsigned)   ``torch.uint8``       :class:`torch.ByteTensor`     :class:`torch.cuda.ByteTensor`\n+8-bit integer (signed)     ``torch.int8``        :class:`torch.CharTensor`     :class:`torch.cuda.CharTensor`\n+16-bit integer (signed)    ``torch.int16``       :class:`torch.ShortTensor`    :class:`torch.cuda.ShortTensor`\n+32-bit integer (signed)    ``torch.int32``       :class:`torch.IntTensor`      :class:`torch.cuda.IntTensor`\n+64-bit integer (signed)    ``torch.int64``       :class:`torch.LongTensor`     :class:`torch.cuda.LongTensor`\n+========================   ===================   ===========================   ================================\n+\n+:class:`torch.Tensor` is an alias for the default tensor type (:class:`torch.FloatTensor`).\n+\n+A tensor can be constructed from a Python :class:`list` or sequence using the\n+:func:`torch.tensor` constructor:\n \n ::\n \n-    >>> torch.FloatTensor([[1, 2, 3], [4, 5, 6]])\n-    1  2  3\n-    4  5  6\n-    [torch.FloatTensor of size 2x3]\n+    >>> torch.tensor([[1., -1.], [1., -1.]])\n+\n+     1 -1\n+     1 -1\n+    [torch.FloatTensor of size (2,2)]\n+\n+    >>> torch.tensor(np.array([[1, 2, 3], [4, 5, 6]]))\n \n-An empty tensor can be constructed by specifying its size:\n+     1 -1\n+     1 -1\n+    [torch.FloatTensor of size (2,2)]\n+\n+An tensor of specific data type can be constructed by passing a\n+:class:`torch.dtype` and/or a :class:`torch.device` to a\n+constructor or tensor creation op:\n \n ::\n \n-    >>> torch.IntTensor(2, 4).zero_()\n+    >>> torch.zeros([2, 4], dtype=torch.int32)\n+\n     0  0  0  0\n     0  0  0  0\n     [torch.IntTensor of size 2x4]\n \n+    >>> torch.ones([2, 4], dtype=torch.float64, device=torch.device('cuda:0'))", "path": "docs/source/tensors.rst", "position": 71, "original_position": 71, "commit_id": "6343b23473481eafaf0d3df0021ca05e203527ab", "original_commit_id": "6343b23473481eafaf0d3df0021ca05e203527ab", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "there's little point in using `device(...)` if you're going to use it only once. Maybe assign it to a variable before this?", "created_at": "2018-04-17T22:18:42Z", "updated_at": "2018-11-23T15:42:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/6670#discussion_r182259454", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6670", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182259454"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6670#discussion_r182259454"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6670"}}, "body_html": "<p>there's little point in using <code>device(...)</code> if you're going to use it only once. Maybe assign it to a variable before this?</p>", "body_text": "there's little point in using device(...) if you're going to use it only once. Maybe assign it to a variable before this?"}