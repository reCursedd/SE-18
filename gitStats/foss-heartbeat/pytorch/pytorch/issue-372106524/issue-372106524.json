{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12887", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12887/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12887/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12887/events", "html_url": "https://github.com/pytorch/pytorch/issues/12887", "id": 372106524, "node_id": "MDU6SXNzdWUzNzIxMDY1MjQ=", "number": 12887, "title": "Segmentation fault when summing uint8 tensor", "user": {"login": "glample", "id": 8885556, "node_id": "MDQ6VXNlcjg4ODU1NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8885556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glample", "html_url": "https://github.com/glample", "followers_url": "https://api.github.com/users/glample/followers", "following_url": "https://api.github.com/users/glample/following{/other_user}", "gists_url": "https://api.github.com/users/glample/gists{/gist_id}", "starred_url": "https://api.github.com/users/glample/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glample/subscriptions", "organizations_url": "https://api.github.com/users/glample/orgs", "repos_url": "https://api.github.com/users/glample/repos", "events_url": "https://api.github.com/users/glample/events{/privacy}", "received_events_url": "https://api.github.com/users/glample/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 553773019, "node_id": "MDU6TGFiZWw1NTM3NzMwMTk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs-reproduction", "name": "needs-reproduction", "color": "e99695", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-19T20:33:36Z", "updated_at": "2018-10-23T14:38:36Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Hi. I'm using PyTorch 0.5.0a0+09896d1</p>\n<p>This code:</p>\n<div class=\"highlight highlight-source-python\"><pre>size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span>\na <span class=\"pl-k\">=</span> torch.LongTensor(size).random_(<span class=\"pl-c1\">2</span>)\n(a <span class=\"pl-k\">==</span> a).sum()</pre></div>\n<p>is returning me a \"Segmentation fault\". If instead I do <code>(a.numpy() == a.numpy()).sum()</code>, it works. Also, the problem does not occur with <code>size = 1000*1000*1000</code>.</p>\n<p>EDIT: a more efficient way to reproduce the bug:</p>\n<div class=\"highlight highlight-source-python\"><pre>size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span>\na <span class=\"pl-k\">=</span> torch.ByteTensor(size).random_(<span class=\"pl-c1\">2</span>)\n(a <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>).sum()</pre></div>", "body_text": "Hi. I'm using PyTorch 0.5.0a0+09896d1\nThis code:\nsize = 3*1000*1000*1000\na = torch.LongTensor(size).random_(2)\n(a == a).sum()\nis returning me a \"Segmentation fault\". If instead I do (a.numpy() == a.numpy()).sum(), it works. Also, the problem does not occur with size = 1000*1000*1000.\nEDIT: a more efficient way to reproduce the bug:\nsize = 3*1000*1000*1000\na = torch.ByteTensor(size).random_(2)\n(a == 0).sum()", "body": "Hi. I'm using PyTorch 0.5.0a0+09896d1\r\n\r\nThis code:\r\n\r\n```python\r\nsize = 3*1000*1000*1000\r\na = torch.LongTensor(size).random_(2)\r\n(a == a).sum()\r\n```\r\nis returning me a \"Segmentation fault\". If instead I do `(a.numpy() == a.numpy()).sum()`, it works. Also, the problem does not occur with `size = 1000*1000*1000`.\r\n\r\nEDIT: a more efficient way to reproduce the bug:\r\n```python\r\nsize = 3*1000*1000*1000\r\na = torch.ByteTensor(size).random_(2)\r\n(a == 0).sum()\r\n```"}