{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209772661", "pull_request_review_id": 145851894, "id": 209772661, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc3MjY2MQ==", "diff_hunk": "@@ -78,6 +84,42 @@ static inline TensorTypeId backendToTensorTypeId(Backend b) {\n   }\n }\n \n+static inline DeviceType backendToDeviceType(Backend b) {\n+  switch (b) {\n+    case Backend::CPU:\n+      return DeviceType::CPU;\n+    case Backend::CUDA:\n+      return DeviceType::CUDA;\n+    case Backend::SparseCPU:\n+      AT_ERROR(\"SparseCPU backend is not a valid device type\");\n+    case Backend::SparseCUDA:\n+      AT_ERROR(\"SparseCUDA backend is not a valid device type\");\n+    case Backend::Undefined:\n+      AT_ERROR(\"Undefined backend is not a valid device type\");\n+    default:\n+      AT_ERROR(\"Unknown backend\");\n+  }\n+}\n+\n+// This class is for backwards compatibility purposes.  Historically, the\n+// kCPU/kCUDA constants were used interchangeably to both refer to a\n+// Backend (concept includes CPU and SparseCPU) and device type (for\n+// which only CPU is valid).  We've tightened up some APIs, but to\n+// help user code out, define a class which supports implicit conversions\n+// to both.\n+class BackendOrDeviceType {", "path": "aten/src/ATen/Backend.h", "position": null, "original_position": 57, "commit_id": "68e7f38827e976d85c4e8beeaf79955a3bf786d0", "original_commit_id": "ef8cf6cc07e21416d0af0d43c7cf80453481250f", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I don't think we use this style of defining `private` members anywhere else? More often I would see the opposite, where this would be a `struct` and a `private:` tag at the bottom separates the `backend_` member", "created_at": "2018-08-13T21:56:49Z", "updated_at": "2018-11-23T15:49:12Z", "html_url": "https://github.com/pytorch/pytorch/pull/10478#discussion_r209772661", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10478", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209772661"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10478#discussion_r209772661"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10478"}}, "body_html": "<p>I don't think we use this style of defining <code>private</code> members anywhere else? More often I would see the opposite, where this would be a <code>struct</code> and a <code>private:</code> tag at the bottom separates the <code>backend_</code> member</p>", "body_text": "I don't think we use this style of defining private members anywhere else? More often I would see the opposite, where this would be a struct and a private: tag at the bottom separates the backend_ member"}