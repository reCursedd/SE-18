{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10478", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10478/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10478/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10478/events", "html_url": "https://github.com/pytorch/pytorch/pull/10478", "id": 350151649, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4MDcxMzg3", "number": 10478, "title": "Refactor Device to not depend on Backend.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-13T18:59:08Z", "updated_at": "2018-11-23T15:49:35Z", "closed_at": "2018-08-19T00:35:55Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10478", "html_url": "https://github.com/pytorch/pytorch/pull/10478", "diff_url": "https://github.com/pytorch/pytorch/pull/10478.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10478.patch"}, "body_html": "<pre><code>- Removed Backend constructor from Device, and fixed all\n  use-sites to use DeviceType::CPU instead of kCPU, or\n  use a new function backendToDeviceType to perform\n  the conversion.\n- New method device_type() on Type; it gives you the\n  underlying device type, e.g., CPU for SparseCPU.\n- We add backward compatibility for kCPU/kCUDA uses,\n  by introducing a new special type which is implicitly\n  convertible to both DeviceType and Backend.  As long as\n  you don't define a function that's overloaded on both\n  DeviceType and Backend (but not on BackendOrDeviceType),\n  the implicit conversions will ensure that uses\n  of at::Device(at::kCPU) keep working. We fixed use-sites in\n  the library, but did NOT fix sites in the test code, so that\n  we can exercise this BC code.\n</code></pre>\n<p>Differential Revision: D9301861</p>", "body_text": "- Removed Backend constructor from Device, and fixed all\n  use-sites to use DeviceType::CPU instead of kCPU, or\n  use a new function backendToDeviceType to perform\n  the conversion.\n- New method device_type() on Type; it gives you the\n  underlying device type, e.g., CPU for SparseCPU.\n- We add backward compatibility for kCPU/kCUDA uses,\n  by introducing a new special type which is implicitly\n  convertible to both DeviceType and Backend.  As long as\n  you don't define a function that's overloaded on both\n  DeviceType and Backend (but not on BackendOrDeviceType),\n  the implicit conversions will ensure that uses\n  of at::Device(at::kCPU) keep working. We fixed use-sites in\n  the library, but did NOT fix sites in the test code, so that\n  we can exercise this BC code.\n\nDifferential Revision: D9301861", "body": "```\r\n- Removed Backend constructor from Device, and fixed all\r\n  use-sites to use DeviceType::CPU instead of kCPU, or\r\n  use a new function backendToDeviceType to perform\r\n  the conversion.\r\n- New method device_type() on Type; it gives you the\r\n  underlying device type, e.g., CPU for SparseCPU.\r\n- We add backward compatibility for kCPU/kCUDA uses,\r\n  by introducing a new special type which is implicitly\r\n  convertible to both DeviceType and Backend.  As long as\r\n  you don't define a function that's overloaded on both\r\n  DeviceType and Backend (but not on BackendOrDeviceType),\r\n  the implicit conversions will ensure that uses\r\n  of at::Device(at::kCPU) keep working. We fixed use-sites in\r\n  the library, but did NOT fix sites in the test code, so that\r\n  we can exercise this BC code.\r\n```\r\n\r\nDifferential Revision: D9301861\r\n"}