{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149755508", "pull_request_review_id": 75200385, "id": 149755508, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTc1NTUwOA==", "diff_hunk": "@@ -40,18 +89,35 @@ struct GraphFuser {\n   bool isCuda(Node * node) {\n     return node->type()->expect<TensorType>()->device() != -1;\n   }\n-  // TODO: the fusion compiler needs to know how to handle 'alpha'\n-  // and other attributes in code generation for us to be able to fuse them\n-  // then it is safe to remove the !hasSpecialAlpha check\n-  bool hasSpecialAlpha(Node * node) {\n-    if(!node->hasAttribute(kalpha))\n+  // TODO: the fusion compiler has a lot of float-specific codegen\n+  // so for now we only consider nodes that operate on floating point numbers\n+  bool hasFloatType(Node * node) {\n+    if(!node->hasType()) {\n+      return false;\n+    }\n+    if(auto tt = node->type()->cast<TensorType>()) {\n+      return tt->scalarType() != at::kFloat;\n+    } else {\n       return false;\n-    return at::Scalar(node->t(kalpha)).toDouble() != 1;\n+    }\n+  }\n+  bool hasFloatIO(Node * node) {\n+    for(auto & o : node->outputs()) {\n+      if(!hasFloatType(o)) {\n+        return false;\n+      }\n+    }\n+    for(auto & o : node->inputs()) {", "path": "torch/csrc/jit/passes/graph_fuser.cpp", "position": 97, "original_position": 97, "commit_id": "6c888bc4ce1d0bc4d47cc9fb154a881c00f0002e", "original_commit_id": "16f6853f2e8f61afe3d11d0697436878767cde0c", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "I am just writing the code in a future proof way.", "created_at": "2017-11-08T18:26:54Z", "updated_at": "2018-11-23T15:36:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/3559#discussion_r149755508", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3559", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/149755508"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3559#discussion_r149755508"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3559"}}, "body_html": "<p>I am just writing the code in a future proof way.</p>", "body_text": "I am just writing the code in a future proof way.", "in_reply_to_id": 149640572}