{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/306576643", "html_url": "https://github.com/pytorch/pytorch/pull/1691#issuecomment-306576643", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1691", "id": 306576643, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjU3NjY0Mw==", "user": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-06T18:31:10Z", "updated_at": "2017-06-06T18:31:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>A partial solution could be to create weights in the pattern cuDNN expects by default in the nn.RNN constructors, make use of those in-place if the user doesn't mess with them, and fall back to the copy behavior if the user does. We'd still have to think about how to fix the similar memory usage on backward though.</p>", "body_text": "A partial solution could be to create weights in the pattern cuDNN expects by default in the nn.RNN constructors, make use of those in-place if the user doesn't mess with them, and fall back to the copy behavior if the user does. We'd still have to think about how to fix the similar memory usage on backward though.", "body": "A partial solution could be to create weights in the pattern cuDNN expects by default in the nn.RNN constructors, make use of those in-place if the user doesn't mess with them, and fall back to the copy behavior if the user does. We'd still have to think about how to fix the similar memory usage on backward though."}