{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/305592007", "html_url": "https://github.com/pytorch/pytorch/pull/1691#issuecomment-305592007", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1691", "id": 305592007, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTU5MjAwNw==", "user": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-01T19:13:21Z", "updated_at": "2017-06-01T19:13:21Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Looks like it saves ~270 \u03bcs per call (from 23.63 ms/batch to 23.36 ms/batch for PTBLM example on K80). The default settings for that example have only 653,000 LSTM parameters, so it only saves 2.5 MiB of memory (594 MiB to 592 MiB).</p>\n<p>It also cuts 5-10% from total runtime and about 40% from steady-state memory usage including cache pool for the (extreme) tree2tree.py benchmark (3877MiB to 2154MiB).</p>", "body_text": "Looks like it saves ~270 \u03bcs per call (from 23.63 ms/batch to 23.36 ms/batch for PTBLM example on K80). The default settings for that example have only 653,000 LSTM parameters, so it only saves 2.5 MiB of memory (594 MiB to 592 MiB).\nIt also cuts 5-10% from total runtime and about 40% from steady-state memory usage including cache pool for the (extreme) tree2tree.py benchmark (3877MiB to 2154MiB).", "body": "Looks like it saves ~270 \u03bcs per call (from 23.63 ms/batch to 23.36 ms/batch for PTBLM example on K80). The default settings for that example have only 653,000 LSTM parameters, so it only saves 2.5 MiB of memory (594 MiB to 592 MiB).\r\n\r\nIt also cuts 5-10% from total runtime and about 40% from steady-state memory usage including cache pool for the (extreme) tree2tree.py benchmark (3877MiB to 2154MiB)."}