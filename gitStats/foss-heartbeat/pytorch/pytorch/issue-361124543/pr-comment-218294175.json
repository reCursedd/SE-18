{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218294175", "pull_request_review_id": 156198281, "id": 218294175, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODI5NDE3NQ==", "diff_hunk": "@@ -82,92 +82,92 @@ static void EmbeddingLookupGenericSlow(\n }\n \n // Proxy back to generic implementation\n-#define EMBEDDING_SPECIALIZATION(                                                          \\\n-    IndexType, InType, OutType, IS_WEIGHT_POSITIONAL)                                      \\\n-  void                                                                                     \\\n-      EmbeddingLookup_##IndexType##_##InType##_##OutType##_##IS_WEIGHT_POSITIONAL##__base( \\\n-          const TIndex block_size,                                                         \\\n-          const TIndex output_size,                                                        \\\n-          const TIndex index_size,                                                         \\\n-          const TIndex data_size,                                                          \\\n-          const InType* input,                                                             \\\n-          const IndexType* indices,                                                        \\\n-          const int* lengths,                                                              \\\n-          const float* weights,                                                            \\\n-          const float* scale_bias,                                                         \\\n-          bool normalize_by_lengths,                                                       \\\n-          OutType* out) {                                                                  \\\n-    EmbeddingLookupGenericSlow<                                                            \\\n-        IndexType,                                                                         \\\n-        InType,                                                                            \\\n-        OutType,                                                                           \\\n-        IS_WEIGHT_POSITIONAL>(                                                             \\\n-        block_size,                                                                        \\\n-        output_size,                                                                       \\\n-        index_size,                                                                        \\\n-        data_size,                                                                         \\\n-        input,                                                                             \\\n-        indices,                                                                           \\\n-        lengths,                                                                           \\\n-        weights,                                                                           \\\n-        scale_bias,                                                                        \\\n-        normalize_by_lengths,                                                              \\\n-        out);                                                                              \\\n-  }                                                                                        \\\n-  template <>                                                                              \\\n-  void EmbeddingLookup<IndexType, InType, OutType, IS_WEIGHT_POSITIONAL>(                  \\\n-      const TIndex block_size,                                                             \\\n-      const TIndex output_size,                                                            \\\n-      const TIndex index_size,                                                             \\\n-      const TIndex data_size,                                                              \\\n-      const InType* input,                                                                 \\\n-      const IndexType* indices,                                                            \\\n-      const int* lengths,                                                                  \\\n-      const float* weights,                                                                \\\n-      const float* scale_bias,                                                             \\\n-      bool normalize_by_lengths,                                                           \\\n-      OutType* out) {                                                                      \\\n-    AVX2_FMA_DO(                                                                           \\\n-        EmbeddingLookup_##IndexType##_##InType##_##OutType##_##IS_WEIGHT_POSITIONAL,       \\\n-        block_size,                                                                        \\\n-        output_size,                                                                       \\\n-        index_size,                                                                        \\\n-        data_size,                                                                         \\\n-        input,                                                                             \\\n-        indices,                                                                           \\\n-        lengths,                                                                           \\\n-        weights,                                                                           \\\n-        scale_bias,                                                                        \\\n-        normalize_by_lengths,                                                              \\\n-        out);                                                                              \\\n-    BASE_DO(                                                                               \\\n-        EmbeddingLookup_##IndexType##_##InType##_##OutType##_##IS_WEIGHT_POSITIONAL,       \\\n-        block_size,                                                                        \\\n-        output_size,                                                                       \\\n-        index_size,                                                                        \\\n-        data_size,                                                                         \\\n-        input,                                                                             \\\n-        indices,                                                                           \\\n-        lengths,                                                                           \\\n-        weights,                                                                           \\\n-        scale_bias,                                                                        \\\n-        normalize_by_lengths,                                                              \\\n-        out);                                                                              \\\n+#define EMBEDDING_SPECIALIZATION(                                                                      \\\n+    IndexTypeName, IndexType, InTypeName, InType, OutTypeName, OutType, IS_WEIGHT_POSITIONAL)          \\", "path": "caffe2/perfkernels/embedding_lookup.cc", "position": 76, "original_position": 76, "commit_id": "8e5dcccfd1175393fbe63e5575e0e0be6804156a", "original_commit_id": "cf6fcba531b54b0fdbd0a42ffd7af1f69a58c8db", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Hm?", "created_at": "2018-09-18T04:10:49Z", "updated_at": "2018-11-23T15:51:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/11785#discussion_r218294175", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11785", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218294175"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11785#discussion_r218294175"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11785"}}, "body_html": "<p>Hm?</p>", "body_text": "Hm?"}