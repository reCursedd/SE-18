{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12598", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12598/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12598/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12598/events", "html_url": "https://github.com/pytorch/pytorch/issues/12598", "id": 369388958, "node_id": "MDU6SXNzdWUzNjkzODg5NTg=", "number": 12598, "title": "Add `return_counts` to `torch.unique`", "user": {"login": "ptrblck", "id": 11662379, "node_id": "MDQ6VXNlcjExNjYyMzc5", "avatar_url": "https://avatars3.githubusercontent.com/u/11662379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrblck", "html_url": "https://github.com/ptrblck", "followers_url": "https://api.github.com/users/ptrblck/followers", "following_url": "https://api.github.com/users/ptrblck/following{/other_user}", "gists_url": "https://api.github.com/users/ptrblck/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrblck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrblck/subscriptions", "organizations_url": "https://api.github.com/users/ptrblck/orgs", "repos_url": "https://api.github.com/users/ptrblck/repos", "events_url": "https://api.github.com/users/ptrblck/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrblck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-12T03:49:42Z", "updated_at": "2018-11-03T22:57:35Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"rocket\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f680.png\">\ud83d\ude80</g-emoji> Feature</h2>\n<p>The current implementation of <code>torch.unique</code> does not have a <code>return_counts</code> argument, which returns the counts of all unique occurrences in the tensor.</p>\n<h2>Motivation</h2>\n<p>The feature request is related to some users missing this option, e.g. <a href=\"https://discuss.pytorch.org/t/how-to-efficiently-perform-averaging-across-predefined-groups-in-a-tensor/27091/2?u=ptrblck\" rel=\"nofollow\">this thread</a>. A current workaround is to use something like this:</p>\n<pre><code>x = torch.tensor([1, 2, 2, 2, 3])\nx_unique = x.unique(sorted=True)\nx_unique_count = torch.stack([(x==x_u).sum() for x_u in x_unique])\n</code></pre>\n<p>Also, numpy supports this option, which should be a nice to have for new users. <a href=\"https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.unique.html\" rel=\"nofollow\">np.unique</a><br>\nAs this might be added as the last argument, no breaking changes would occur.</p>\n<h2>Pitch</h2>\n<p>I could add this option to the current <code>torch.unique</code> implementation as I've recently added the <code>return_inverse</code> option and am still familiar with the code.</p>\n<h2>Alternatives</h2>\n<p>An alternative would be to use the hacky code from above.</p>\n<p>Let me know, if that sound good to you!<br>\nAlso a bit unrelated, but we could also add the <code>return_index</code> option together to match the numpy function as close as possible, but that's probably another feature request.</p>\n<p>Best,<br>\nptrblck</p>", "body_text": "\ud83d\ude80 Feature\nThe current implementation of torch.unique does not have a return_counts argument, which returns the counts of all unique occurrences in the tensor.\nMotivation\nThe feature request is related to some users missing this option, e.g. this thread. A current workaround is to use something like this:\nx = torch.tensor([1, 2, 2, 2, 3])\nx_unique = x.unique(sorted=True)\nx_unique_count = torch.stack([(x==x_u).sum() for x_u in x_unique])\n\nAlso, numpy supports this option, which should be a nice to have for new users. np.unique\nAs this might be added as the last argument, no breaking changes would occur.\nPitch\nI could add this option to the current torch.unique implementation as I've recently added the return_inverse option and am still familiar with the code.\nAlternatives\nAn alternative would be to use the hacky code from above.\nLet me know, if that sound good to you!\nAlso a bit unrelated, but we could also add the return_index option together to match the numpy function as close as possible, but that's probably another feature request.\nBest,\nptrblck", "body": "## \ud83d\ude80 Feature\r\nThe current implementation of `torch.unique` does not have a `return_counts` argument, which returns the counts of all unique occurrences in the tensor.\r\n\r\n## Motivation\r\n\r\nThe feature request is related to some users missing this option, e.g. [this thread](https://discuss.pytorch.org/t/how-to-efficiently-perform-averaging-across-predefined-groups-in-a-tensor/27091/2?u=ptrblck). A current workaround is to use something like this:\r\n```\r\nx = torch.tensor([1, 2, 2, 2, 3])\r\nx_unique = x.unique(sorted=True)\r\nx_unique_count = torch.stack([(x==x_u).sum() for x_u in x_unique])\r\n```\r\n\r\nAlso, numpy supports this option, which should be a nice to have for new users. [np.unique](https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.unique.html)\r\nAs this might be added as the last argument, no breaking changes would occur.\r\n\r\n## Pitch\r\n\r\nI could add this option to the current `torch.unique` implementation as I've recently added the `return_inverse` option and am still familiar with the code.\r\n\r\n## Alternatives\r\n\r\nAn alternative would be to use the hacky code from above.\r\n\r\nLet me know, if that sound good to you!\r\nAlso a bit unrelated, but we could also add the `return_index` option together to match the numpy function as close as possible, but that's probably another feature request.\r\n\r\nBest,\r\nptrblck\r\n"}