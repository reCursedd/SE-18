{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/429663025", "html_url": "https://github.com/pytorch/pytorch/issues/12598#issuecomment-429663025", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12598", "id": 429663025, "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTY2MzAyNQ==", "user": {"login": "ptrblck", "id": 11662379, "node_id": "MDQ6VXNlcjExNjYyMzc5", "avatar_url": "https://avatars3.githubusercontent.com/u/11662379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrblck", "html_url": "https://github.com/ptrblck", "followers_url": "https://api.github.com/users/ptrblck/followers", "following_url": "https://api.github.com/users/ptrblck/following{/other_user}", "gists_url": "https://api.github.com/users/ptrblck/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrblck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrblck/subscriptions", "organizations_url": "https://api.github.com/users/ptrblck/orgs", "repos_url": "https://api.github.com/users/ptrblck/repos", "events_url": "https://api.github.com/users/ptrblck/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrblck/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-14T21:12:19Z", "updated_at": "2018-10-14T21:12:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> I have a working CPU version running now.<br>\nBefore continuing to integrate the code I would like to discuss what's the best way of doing so.</p>\n<p>Currently I could easily implement the feature by adding some lines into <a href=\"https://github.com/pytorch/pytorch/blob/a91f3338a00440648af5487f8103f8023f4dee0a/aten/src/ATen/native/Unique.cpp#L52\">_unique_dim_cpu_impl</a> as we've implemented the unique function manually for the <code>dim</code> argument a while ago.<br>\nHowever, there is another implementation without the <code>dim</code> argument using an <code>std::unordered_set</code> to get the unique values. I could also add the <code>return_counts</code> functionality to it, but I have the feeling that the dim and non-dim versions are diverging quite a bit which could make this code hard to maintain.</p>\n<p>Do you think a refactoring is necessary, i.e. to combine the dim and non-dim version and add <code>return_counts</code> afterwards or are my concerns ungrounded?</p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a></p>", "body_text": "@ezyang I have a working CPU version running now.\nBefore continuing to integrate the code I would like to discuss what's the best way of doing so.\nCurrently I could easily implement the feature by adding some lines into _unique_dim_cpu_impl as we've implemented the unique function manually for the dim argument a while ago.\nHowever, there is another implementation without the dim argument using an std::unordered_set to get the unique values. I could also add the return_counts functionality to it, but I have the feeling that the dim and non-dim versions are diverging quite a bit which could make this code hard to maintain.\nDo you think a refactoring is necessary, i.e. to combine the dim and non-dim version and add return_counts afterwards or are my concerns ungrounded?\nCC @colesbury", "body": "@ezyang I have a working CPU version running now.\r\nBefore continuing to integrate the code I would like to discuss what's the best way of doing so.\r\n\r\nCurrently I could easily implement the feature by adding some lines into [_unique_dim_cpu_impl](https://github.com/pytorch/pytorch/blob/a91f3338a00440648af5487f8103f8023f4dee0a/aten/src/ATen/native/Unique.cpp#L52) as we've implemented the unique function manually for the `dim` argument a while ago.\r\nHowever, there is another implementation without the `dim` argument using an `std::unordered_set` to get the unique values. I could also add the `return_counts` functionality to it, but I have the feeling that the dim and non-dim versions are diverging quite a bit which could make this code hard to maintain.\r\n\r\nDo you think a refactoring is necessary, i.e. to combine the dim and non-dim version and add `return_counts` afterwards or are my concerns ungrounded? \r\n\r\nCC @colesbury "}