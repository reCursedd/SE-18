{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13867", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13867/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13867/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13867/events", "html_url": "https://github.com/pytorch/pytorch/issues/13867", "id": 379978037, "node_id": "MDU6SXNzdWUzNzk5NzgwMzc=", "number": 13867, "title": "torch.multinomial chooses elements with zero weight", "user": {"login": "jcjohnson", "id": 2718714, "node_id": "MDQ6VXNlcjI3MTg3MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2718714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcjohnson", "html_url": "https://github.com/jcjohnson", "followers_url": "https://api.github.com/users/jcjohnson/followers", "following_url": "https://api.github.com/users/jcjohnson/following{/other_user}", "gists_url": "https://api.github.com/users/jcjohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcjohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcjohnson/subscriptions", "organizations_url": "https://api.github.com/users/jcjohnson/orgs", "repos_url": "https://api.github.com/users/jcjohnson/repos", "events_url": "https://api.github.com/users/jcjohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/jcjohnson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 443484135, "node_id": "MDU6TGFiZWw0NDM0ODQxMzU=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/high%20priority", "name": "high priority", "color": "F22613", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-11-12T22:29:29Z", "updated_at": "2018-11-13T00:52:49Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h2><g-emoji class=\"g-emoji\" alias=\"bug\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f41b.png\">\ud83d\udc1b</g-emoji> Bug</h2>\n<p><code>torch.multinomial</code> occasionally samples elements with zero weight. This should never happen.</p>\n<h2>To Reproduce</h2>\n<p>I've been unable to reproduce this issue with randomly generated weights, so I've included a particular value of weights from my application that triggers this behavior:</p>\n<div class=\"highlight highlight-source-shell\"><pre> wget https://cs.stanford.edu/people/jcjohns/weights.pt</pre></div>\n<p>These weights are all nonnegative (but contain a lot of zeros), have a nonzero sum, and contain no NaNs or Infs.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n\ntorch.manual_seed(<span class=\"pl-c1\">1</span>)\nweights <span class=\"pl-k\">=</span> torch.load(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>weights.pt<span class=\"pl-pds\">'</span></span>)\nN, S <span class=\"pl-k\">=</span> weights.shape[<span class=\"pl-c1\">0</span>], <span class=\"pl-c1\">4096</span>\nnum_trials <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>\n<span class=\"pl-k\">for</span> trial <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1</span>, num_trials <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>):\n  <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Starting trial <span class=\"pl-c1\">%d</span> / <span class=\"pl-c1\">%d</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (trial, num_trials))\n  weights[weights <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.0</span>\n  samples <span class=\"pl-k\">=</span> weights.multinomial(S, <span class=\"pl-v\">replacement</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n  sampled_weights <span class=\"pl-k\">=</span> weights[samples]\n  <span class=\"pl-k\">assert</span> sampled_weights.min() <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span></pre></div>\n<p>I fail the assertion on trial 6.</p>\n<h2>Environment</h2>\n<p>PyTorch version: 1.0.0.dev20181112<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 9.0.176</p>\n<p>OS: Ubuntu 16.04.4 LTS<br>\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609<br>\nCMake version: version 3.5.1</p>\n<p>Python version: 3.7<br>\nIs CUDA available: Yes<br>\nCUDA runtime version: 9.0.176<br>\nGPU models and configuration:<br>\nGPU 0: Quadro GP100<br>\nGPU 1: Quadro GP100</p>\n<p>Nvidia driver version: 396.51<br>\ncuDNN version: Could not collect</p>\n<p>Versions of relevant libraries:<br>\n[pip] Could not collect<br>\n[conda] pytorch                   0.4.1           py37_py36_py35_py27__9.0.176_7.1.2_2    pytorch<br>\n[conda] pytorch-nightly           1.0.0.dev20181112 py3.7_cuda9.0.176_cudnn7.1.2_0    pytorch<br>\n[conda] torchvision               0.2.1                     <br>\n[conda] torchvision               0.2.1                    py37_1    pytorch</p>", "body_text": "\ud83d\udc1b Bug\ntorch.multinomial occasionally samples elements with zero weight. This should never happen.\nTo Reproduce\nI've been unable to reproduce this issue with randomly generated weights, so I've included a particular value of weights from my application that triggers this behavior:\n wget https://cs.stanford.edu/people/jcjohns/weights.pt\nThese weights are all nonnegative (but contain a lot of zeros), have a nonzero sum, and contain no NaNs or Infs.\nimport torch\n\ntorch.manual_seed(1)\nweights = torch.load('weights.pt')\nN, S = weights.shape[0], 4096\nnum_trials = 100\nfor trial in range(1, num_trials + 1):\n  print('Starting trial %d / %d' % (trial, num_trials))\n  weights[weights < 0] = 0.0\n  samples = weights.multinomial(S, replacement=True)\n  sampled_weights = weights[samples]\n  assert sampled_weights.min() > 0\nI fail the assertion on trial 6.\nEnvironment\nPyTorch version: 1.0.0.dev20181112\nIs debug build: No\nCUDA used to build PyTorch: 9.0.176\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCMake version: version 3.5.1\nPython version: 3.7\nIs CUDA available: Yes\nCUDA runtime version: 9.0.176\nGPU models and configuration:\nGPU 0: Quadro GP100\nGPU 1: Quadro GP100\nNvidia driver version: 396.51\ncuDNN version: Could not collect\nVersions of relevant libraries:\n[pip] Could not collect\n[conda] pytorch                   0.4.1           py37_py36_py35_py27__9.0.176_7.1.2_2    pytorch\n[conda] pytorch-nightly           1.0.0.dev20181112 py3.7_cuda9.0.176_cudnn7.1.2_0    pytorch\n[conda] torchvision               0.2.1                     \n[conda] torchvision               0.2.1                    py37_1    pytorch", "body": "## \ud83d\udc1b Bug\r\n\r\n`torch.multinomial` occasionally samples elements with zero weight. This should never happen.\r\n\r\n## To Reproduce\r\n\r\nI've been unable to reproduce this issue with randomly generated weights, so I've included a particular value of weights from my application that triggers this behavior:\r\n\r\n```bash\r\n wget https://cs.stanford.edu/people/jcjohns/weights.pt\r\n```\r\n\r\nThese weights are all nonnegative (but contain a lot of zeros), have a nonzero sum, and contain no NaNs or Infs.\r\n\r\n```python\r\nimport torch\r\n\r\ntorch.manual_seed(1)\r\nweights = torch.load('weights.pt')\r\nN, S = weights.shape[0], 4096\r\nnum_trials = 100\r\nfor trial in range(1, num_trials + 1):\r\n  print('Starting trial %d / %d' % (trial, num_trials))\r\n  weights[weights < 0] = 0.0\r\n  samples = weights.multinomial(S, replacement=True)\r\n  sampled_weights = weights[samples]\r\n  assert sampled_weights.min() > 0\r\n```\r\nI fail the assertion on trial 6.\r\n\r\n## Environment\r\n\r\nPyTorch version: 1.0.0.dev20181112\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.0.176\r\n\r\nOS: Ubuntu 16.04.4 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCMake version: version 3.5.1\r\n\r\nPython version: 3.7\r\nIs CUDA available: Yes\r\nCUDA runtime version: 9.0.176\r\nGPU models and configuration:\r\nGPU 0: Quadro GP100\r\nGPU 1: Quadro GP100\r\n\r\nNvidia driver version: 396.51\r\ncuDNN version: Could not collect\r\n\r\nVersions of relevant libraries:\r\n[pip] Could not collect\r\n[conda] pytorch                   0.4.1           py37_py36_py35_py27__9.0.176_7.1.2_2    pytorch\r\n[conda] pytorch-nightly           1.0.0.dev20181112 py3.7_cuda9.0.176_cudnn7.1.2_0    pytorch\r\n[conda] torchvision               0.2.1                     <pip>\r\n[conda] torchvision               0.2.1                    py37_1    pytorch\r\n"}