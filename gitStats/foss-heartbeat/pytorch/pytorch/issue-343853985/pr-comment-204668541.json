{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204668541", "pull_request_review_id": 139781933, "id": 204668541, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDY2ODU0MQ==", "diff_hunk": "@@ -16,222 +17,177 @@ namespace torch { namespace jit {\n \n namespace {\n \n-namespace onnx = ::torch::onnx;\n+namespace onnx_torch = ::torch::onnx;\n+namespace onnx = ::ONNX_NAMESPACE;\n \n-std::string value_name(Value* n) {\n-  return n->uniqueName();\n+std::string getNodeStackTraceString(const Node* n) {\n+  std::stringstream ss;\n+  if (n->getSourceLocation()) {\n+    n->getSourceLocation()->highlight(ss);\n+  } else {\n+    ss << \"<unknown location>\";\n+  }\n+  return ss.str();\n }\n \n-struct ExportContext {\n-  size_t num_blocks = 0;\n-  onnx::OperatorExportTypes operator_export_type;\n-};\n-\n-void encodeGraph(onnx::GraphProto * p_g, const std::shared_ptr<Graph> & g,\n-                 const std::vector<at::Tensor> & initializers,\n-                 ExportContext *ctx, RawDataExportMap* raw_data_export_map=nullptr);\n+void validateGraph(const std::shared_ptr<Graph>& graph, onnx_torch::OperatorExportTypes operator_export_type) {\n+  for (auto node : graph->nodes()) {\n+      // Macro'ed so we get a marginally better line number on failed export\n+#define FAIL_EXPORT(name) \\\n+      throw std::runtime_error(std::string(\"ONNX export failed: \") + name + \"\\n\\nGraph we tried to export:\\n\" + graph->toString());\n+    IR_IF(node, PythonOp)\n+      auto py_node = static_cast<torch::jit::PythonOp*>(value);\n+      FAIL_EXPORT(\n+          \"Couldn't export Python operator \" + py_node->name() +\n+          \"\\n\\nDefined at:\\n\" + getNodeStackTraceString(node))\n+    IR_ELSE()\n+      // Special error messages for certain types of operators\n+      if (node->kind() == aten::expand) {\n+        FAIL_EXPORT(\n+            \"Could not export a broadcasted operation; ONNX likely does not support this form of broadcasting.\\n\\nBroadcast occurred at:\\n\" +\n+            getNodeStackTraceString(node));\n+      }\n+      if (node->kind() == prim::PackPadded || node->kind() == prim::PadPacked) {\n+        FAIL_EXPORT(\n+            \"Cannot export individual pack_padded_sequence or pad_packed_sequence; these operations must occur in pairs.\\n\\nUsage of this operation occurred at:\\n\" +\n+            getNodeStackTraceString(node));\n+      }\n+      bool is_aten_fallback = operator_export_type == onnx_torch::OperatorExportTypes::ONNX_ATEN_FALLBACK;\n+      if (!node->kind().is_onnx() && !is_aten_fallback && node->kind() != prim::Undefined) {\n+        FAIL_EXPORT(\n+            \"Couldn't export operator \" + node->kind().toDisplayString() + \"\\n\\nDefined at:\\n\" +\n+            getNodeStackTraceString(node));\n+      }\n+    IR_END()\n+#undef FAIL_EXPORT\n+  }\n+}\n \n-void encodeBlock(onnx::GraphProto * p_g, Block *b,\n-                const std::vector<at::Tensor> & initializers,\n-                ExportContext *ctx, RawDataExportMap* raw_data_export_map);\n+class JitEncoder {", "path": "torch/csrc/jit/export.cpp", "position": null, "original_position": 73, "commit_id": "f622bcc6b1e23e942cca8615b87321ebc91e4273", "original_commit_id": "dfe899efbacf40f945fd85e4d49e3d0748317f4d", "user": {"login": "dzhulgakov", "id": 17890620, "node_id": "MDQ6VXNlcjE3ODkwNjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/17890620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhulgakov", "html_url": "https://github.com/dzhulgakov", "followers_url": "https://api.github.com/users/dzhulgakov/followers", "following_url": "https://api.github.com/users/dzhulgakov/following{/other_user}", "gists_url": "https://api.github.com/users/dzhulgakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhulgakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhulgakov/subscriptions", "organizations_url": "https://api.github.com/users/dzhulgakov/orgs", "repos_url": "https://api.github.com/users/dzhulgakov/repos", "events_url": "https://api.github.com/users/dzhulgakov/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhulgakov/received_events", "type": "User", "site_admin": false}, "body": "maybe call it EncoderBase? Jit is kinds of a confusing name (even though it's all over the place)", "created_at": "2018-07-24T08:35:27Z", "updated_at": "2018-11-23T15:47:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/9746#discussion_r204668541", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9746", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204668541"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9746#discussion_r204668541"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9746"}}, "body_html": "<p>maybe call it EncoderBase? Jit is kinds of a confusing name (even though it's all over the place)</p>", "body_text": "maybe call it EncoderBase? Jit is kinds of a confusing name (even though it's all over the place)"}