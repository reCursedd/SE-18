{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206356950", "pull_request_review_id": 141757685, "id": 206356950, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjM1Njk1MA==", "diff_hunk": "@@ -3031,6 +3031,41 @@ def foo3(a):\n         self.assertEqual(1, foo3(a))\n         self.assertEqual(2, foo3(b))\n \n+    def test_script_module_export(self):\n+        from torch.onnx import OperatorExportTypes, ExportTypes\n+        class M(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M, self).__init__(False)\n+                self.param = torch.nn.Parameter(torch.rand(2, 2, dtype=torch.float))\n+                self.param2 = torch.nn.Parameter(self.param.view(2, 2))\n+\n+            @torch.jit.script_method\n+            def foo(self):\n+                return torch.ones([2, 2])\n+\n+            @torch.jit.script_method\n+            def forward(self, input):\n+                return input + torch.ones([2, 2]) + self.param + self.param2\n+\n+        m_orig = M()\n+        m_import = torch.jit.ScriptModule()\n+        m_export, storage_map = m_orig.export()\n+        torch._C._jit_import_module(m_import, m_export, storage_map)\n+\n+        for m in [m_orig, m_import]:\n+            input = torch.ones([2, 2], dtype=torch.float)\n+            o = m(input)\n+            self.assertEqual(o, input + torch.ones([2, 2], dtype=torch.float) + m.param + m.param2)\n+\n+        # test file export\n+        import io\n+        f = io.BytesIO()\n+        torch.onnx._export_module(m_orig, f, OperatorExportTypes.RAW, ExportTypes.ZIP_ARCHIVE)\n+        f.seek(0)\n+        import zipfile\n+        with zipfile.ZipFile(f, 'r', compression=zipfile.ZIP_STORED) as z:\n+            self.assertExpected(str([file.filename for file in z.infolist()]))", "path": "test/test_jit.py", "position": null, "original_position": 37, "commit_id": "f622bcc6b1e23e942cca8615b87321ebc91e4273", "original_commit_id": "dfe899efbacf40f945fd85e4d49e3d0748317f4d", "user": {"login": "li-roy", "id": 8813817, "node_id": "MDQ6VXNlcjg4MTM4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/li-roy", "html_url": "https://github.com/li-roy", "followers_url": "https://api.github.com/users/li-roy/followers", "following_url": "https://api.github.com/users/li-roy/following{/other_user}", "gists_url": "https://api.github.com/users/li-roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/li-roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/li-roy/subscriptions", "organizations_url": "https://api.github.com/users/li-roy/orgs", "repos_url": "https://api.github.com/users/li-roy/repos", "events_url": "https://api.github.com/users/li-roy/events{/privacy}", "received_events_url": "https://api.github.com/users/li-roy/received_events", "type": "User", "site_admin": false}, "body": "It's not human readable, so I don't want to do an expects test on it.", "created_at": "2018-07-30T23:46:52Z", "updated_at": "2018-11-23T15:48:23Z", "html_url": "https://github.com/pytorch/pytorch/pull/9746#discussion_r206356950", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9746", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/206356950"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9746#discussion_r206356950"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9746"}}, "body_html": "<p>It's not human readable, so I don't want to do an expects test on it.</p>", "body_text": "It's not human readable, so I don't want to do an expects test on it.", "in_reply_to_id": 204665342}