{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204874568", "pull_request_review_id": 140034348, "id": 204874568, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDg3NDU2OA==", "diff_hunk": "@@ -3031,6 +3031,41 @@ def foo3(a):\n         self.assertEqual(1, foo3(a))\n         self.assertEqual(2, foo3(b))\n \n+    def test_script_module_export(self):\n+        from torch.onnx import OperatorExportTypes, ExportTypes\n+        class M(torch.jit.ScriptModule):\n+            def __init__(self):\n+                super(M, self).__init__(False)\n+                self.param = torch.nn.Parameter(torch.rand(2, 2, dtype=torch.float))\n+                self.param2 = torch.nn.Parameter(self.param.view(2, 2))\n+\n+            @torch.jit.script_method\n+            def foo(self):\n+                return torch.ones([2, 2])\n+\n+            @torch.jit.script_method\n+            def forward(self, input):\n+                return input + torch.ones([2, 2]) + self.param + self.param2\n+\n+        m_orig = M()\n+        m_import = torch.jit.ScriptModule()\n+        m_export, storage_map = m_orig.export()\n+        torch._C._jit_import_module(m_import, m_export, storage_map)\n+\n+        for m in [m_orig, m_import]:\n+            input = torch.ones([2, 2], dtype=torch.float)\n+            o = m(input)\n+            self.assertEqual(o, input + torch.ones([2, 2], dtype=torch.float) + m.param + m.param2)\n+\n+        # test file export\n+        import io\n+        f = io.BytesIO()\n+        torch.onnx._export_module(m_orig, f, OperatorExportTypes.RAW, ExportTypes.ZIP_ARCHIVE)\n+        f.seek(0)\n+        import zipfile\n+        with zipfile.ZipFile(f, 'r', compression=zipfile.ZIP_STORED) as z:\n+            self.assertExpected(str([file.filename for file in z.infolist()]))\n+", "path": "test/test_jit.py", "position": null, "original_position": 38, "commit_id": "f622bcc6b1e23e942cca8615b87321ebc91e4273", "original_commit_id": "dfe899efbacf40f945fd85e4d49e3d0748317f4d", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "We need a lot more tests here:\r\n\r\n1. Test export of all possible tensor scalar types, and what happens when you export a GPU tensor (it should come back as a CPU tensor). \r\n2. Test what happens when a sparse tensor is exported (we should get a user-understandable error that sparse tensors are not supported).\r\n3. Test sharing of tensor data preserves sharing. I see that two tensors are aliased here but the test does not check that they remain aliased on load.\r\n4. Test that not all tensors share a storage (here the only two tensors have the same storage).\r\n5. Test exporting a more complete model and checking correctness. You can use torch.jit.trace on existing model to generate one. See `test_alexnet` in `test_jit.cpp` for an example.\r\n6. Test the more methods besides forward get exported correctly.\r\n7. Test submodules: here this is only a single module. But we should support the case where this module has submodules. Submodule parameters/methods/modules should still be in the same place.\r\n", "created_at": "2018-07-24T19:00:05Z", "updated_at": "2018-11-23T15:47:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/9746#discussion_r204874568", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9746", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204874568"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9746#discussion_r204874568"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9746"}}, "body_html": "<p>We need a lot more tests here:</p>\n<ol>\n<li>Test export of all possible tensor scalar types, and what happens when you export a GPU tensor (it should come back as a CPU tensor).</li>\n<li>Test what happens when a sparse tensor is exported (we should get a user-understandable error that sparse tensors are not supported).</li>\n<li>Test sharing of tensor data preserves sharing. I see that two tensors are aliased here but the test does not check that they remain aliased on load.</li>\n<li>Test that not all tensors share a storage (here the only two tensors have the same storage).</li>\n<li>Test exporting a more complete model and checking correctness. You can use torch.jit.trace on existing model to generate one. See <code>test_alexnet</code> in <code>test_jit.cpp</code> for an example.</li>\n<li>Test the more methods besides forward get exported correctly.</li>\n<li>Test submodules: here this is only a single module. But we should support the case where this module has submodules. Submodule parameters/methods/modules should still be in the same place.</li>\n</ol>", "body_text": "We need a lot more tests here:\n\nTest export of all possible tensor scalar types, and what happens when you export a GPU tensor (it should come back as a CPU tensor).\nTest what happens when a sparse tensor is exported (we should get a user-understandable error that sparse tensors are not supported).\nTest sharing of tensor data preserves sharing. I see that two tensors are aliased here but the test does not check that they remain aliased on load.\nTest that not all tensors share a storage (here the only two tensors have the same storage).\nTest exporting a more complete model and checking correctness. You can use torch.jit.trace on existing model to generate one. See test_alexnet in test_jit.cpp for an example.\nTest the more methods besides forward get exported correctly.\nTest submodules: here this is only a single module. But we should support the case where this module has submodules. Submodule parameters/methods/modules should still be in the same place."}