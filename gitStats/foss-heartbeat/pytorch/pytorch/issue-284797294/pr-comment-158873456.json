{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158873456", "pull_request_review_id": 85740134, "id": 158873456, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODg3MzQ1Ng==", "diff_hunk": "@@ -21,44 +21,67 @@ Tensor& bernoulli_(Tensor& self, double p, Generator* generator) {\n // TODO Replace this with more accurate digamma().\n template <typename scalar>\n static inline scalar digamma_one(scalar x) {\n-  const scalar eps = x * 1e-2;\n+  const scalar eps = x * 1e-3;\n   return (std::lgamma(x + eps) - std::lgamma(x - eps)) / (eps + eps);\n }\n \n-/** Computes the reparameterized gradient -(d/dalpha cdf(x;alpha)) / pdf(x;alpha)\n-    for random number x drawn from a standard Gamma distribution Gamma(alpha).\n-*/\n+// Computes the reparameterized gradient -(d/dalpha cdf(x;alpha)) / pdf(x;alpha)\n+// for random number x drawn from a standard Gamma distribution Gamma(alpha).\n template <typename scalar>\n static inline scalar standard_gamma_grad_one(scalar alpha, scalar x) {\n-  // Use an asymptotic approximation for small x.\n-  if (x < 0.2f) {\n-    const auto a0 = 1 / alpha;\n-    const auto a1 = 1 / (alpha + 1);\n-    const auto a2 = 1 / (alpha + 2);\n+  // Use a Taylor series expansion for small x.\n+  if (x < 0.8f) {\n+    scalar numer = 1;\n+    scalar denom = alpha;\n+    auto series1 = numer / denom;\n+    auto series2 = numer / (denom * denom);\n+    for (int i = 1; i <= 5; ++i) {\n+      numer *= -x / i;\n+      denom += 1;\n+      series1 += numer / denom;\n+      series2 += numer / (denom * denom);\n+    }\n     const auto pow_x_alpha = std::pow(x, alpha);\n     const auto gamma_pdf = std::pow(x, alpha - 1) * std::exp(-x);\n-    const auto gamma_cdf = pow_x_alpha * (a0 - x*a1 + 0.5f*x*x*a2);\n+    const auto gamma_cdf = pow_x_alpha * series1;\n     const auto gamma_cdf_alpha = (std::log(x) - digamma_one(alpha)) * gamma_cdf\n-        - pow_x_alpha * (a0*a0 - x*a1*a1 + 0.5f*x*x*a2*a2);\n+        - pow_x_alpha * series2;\n     const auto result = -gamma_cdf_alpha / gamma_pdf;\n     return std::isnan(result) ? 0 : result;\n   }\n \n-  // Use an asymptotic approximation for large alpha.\n-  if (alpha > 50.0f) {\n-    return std::sqrt(x / alpha);\n+  // Use a Rice saddle point expansion for large alpha.\n+  if (alpha > 8.0f) {\n+    if (0.995f * alpha <= x && x <= 1.005f * alpha) {\n+      const auto numer_1 = 1 + 24 * alpha * (1 + 12 * alpha);\n+      const auto numer_2 = 1440 * (alpha * alpha) + 6 * x * (53 - 120 * x)\n+          - 65 * x * x / alpha + alpha * (107 + 3600 * x);\n+      const auto denom = 1244160 * (alpha * alpha) * (alpha * alpha);\n+      const auto result = numer_1 * numer_2 / denom;\n+      return std::isnan(result) ? 0 : result;\n+    }\n+    const auto denom = std::sqrt(8 * alpha);\n+    const auto term2 = denom / (alpha - x);\n+    const auto term3 = std::pow(x - alpha - alpha * std::log(x / alpha), -1.5);\n+    const auto term23 = (x < alpha) ? term2 - term3 : term2 + term3;\n+    const auto term1 = std::log(x / alpha) * term23\n+                     - std::sqrt(2 / alpha) * (alpha + x) / ((alpha - x) * (alpha - x));\n+    const auto stirling = 1 + 1 / (12 * alpha) * (1 + 1 / (24 * alpha));\n+    const auto numer = x * term1;\n+    const auto result = -stirling * numer / denom;\n+    return std::isnan(result) ? 0 : result;", "path": "aten/src/ATen/native/Distributions.cpp", "position": null, "original_position": 66, "commit_id": "3526dd64e7d8016d7a6671ab77a32fb2ebd8dd51", "original_commit_id": "f99cc78b77473b8bf700ff9791624f5373804958", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Hmm I guess I could omit it for large `alpha`. The small `x` check above is needed since the `Gamma` distribution puts lots of mass very close to 0 for small `alpha`, and I was just being paranoid here.", "created_at": "2017-12-27T22:04:12Z", "updated_at": "2018-11-23T15:37:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/4369#discussion_r158873456", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4369", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158873456"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4369#discussion_r158873456"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4369"}}, "body_html": "<p>Hmm I guess I could omit it for large <code>alpha</code>. The small <code>x</code> check above is needed since the <code>Gamma</code> distribution puts lots of mass very close to 0 for small <code>alpha</code>, and I was just being paranoid here.</p>", "body_text": "Hmm I guess I could omit it for large alpha. The small x check above is needed since the Gamma distribution puts lots of mass very close to 0 for small alpha, and I was just being paranoid here.", "in_reply_to_id": 158872429}