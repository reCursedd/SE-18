{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/391494491", "html_url": "https://github.com/pytorch/pytorch/issues/7795#issuecomment-391494491", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/7795", "id": 391494491, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTQ5NDQ5MQ==", "user": {"login": "Balandat", "id": 1605878, "node_id": "MDQ6VXNlcjE2MDU4Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1605878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Balandat", "html_url": "https://github.com/Balandat", "followers_url": "https://api.github.com/users/Balandat/followers", "following_url": "https://api.github.com/users/Balandat/following{/other_user}", "gists_url": "https://api.github.com/users/Balandat/gists{/gist_id}", "starred_url": "https://api.github.com/users/Balandat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Balandat/subscriptions", "organizations_url": "https://api.github.com/users/Balandat/orgs", "repos_url": "https://api.github.com/users/Balandat/repos", "events_url": "https://api.github.com/users/Balandat/events{/privacy}", "received_events_url": "https://api.github.com/users/Balandat/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-23T20:59:50Z", "updated_at": "2018-05-23T22:20:03Z", "author_association": "NONE", "body_html": "<p>Note that this would likely require some slight changes to how @lazy_property works (e.g. if we want to be lazy about updating the different representations of the covariance in MultivariateNormal)</p>\n<p><em>Edit</em>: Well, maybe not, if we just do something like</p>\n<pre><code>def cuda(self, device=None):\n    return self.__class__(\n        loc=self.loc.cuda(),\n        scale_tril=self.scale_tril.cuda(),\n    )\n</code></pre>", "body_text": "Note that this would likely require some slight changes to how @lazy_property works (e.g. if we want to be lazy about updating the different representations of the covariance in MultivariateNormal)\nEdit: Well, maybe not, if we just do something like\ndef cuda(self, device=None):\n    return self.__class__(\n        loc=self.loc.cuda(),\n        scale_tril=self.scale_tril.cuda(),\n    )", "body": "Note that this would likely require some slight changes to how @lazy_property works (e.g. if we want to be lazy about updating the different representations of the covariance in MultivariateNormal)\r\n\r\n*Edit*: Well, maybe not, if we just do something like\r\n\r\n    def cuda(self, device=None):\r\n        return self.__class__(\r\n            loc=self.loc.cuda(),\r\n            scale_tril=self.scale_tril.cuda(),\r\n        )\r\n"}