{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/404623046", "html_url": "https://github.com/pytorch/pytorch/issues/8518#issuecomment-404623046", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8518", "id": 404623046, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDYyMzA0Ng==", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-12T19:23:39Z", "updated_at": "2018-07-12T19:23:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Sure,</p>\n<ul>\n<li>Here's where we convert a python AST Typle node into a ListLiteral tree view: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/feaee219688c771a12a20cfa001495411ae735f8/torch/jit/frontend.py#L432\">pytorch/torch/jit/frontend.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 432\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/feaee219688c771a12a20cfa001495411ae735f8\">feaee21</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L432\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"432\"></td>\n          <td id=\"LC432\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">build_Tuple</span>(<span class=\"pl-smi\">ctx</span>, <span class=\"pl-smi\">expr</span>): </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n Afaict that's already correct</li>\n<li>In the string frontend parser, I believe we'll hit this case when parsing that tuple argument <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/feaee219688c771a12a20cfa001495411ae735f8/torch/csrc/jit/script/parser.h#L61\">pytorch/torch/csrc/jit/script/parser.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 61\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/feaee219688c771a12a20cfa001495411ae735f8\">feaee21</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L61\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"61\"></td>\n          <td id=\"LC61\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>(<span class=\"pl-pds\">'</span></span>: { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n which expects at least one expr, so it's failing once it it's the end paren. That should get fixed up so we can emit a similar ListLiteral instance as in the Python AST frontend</li>\n</ul>\n<p>Using the Python AST frontend here's an example:</p>\n<pre><code>import torch\n\n@torch.jit.script\ndef the_method(i0):\n    return i0.permute(())\n\nprint(the_method.graph)\n</code></pre>\n<p>Which errors out with:</p>\n<pre><code>RuntimeError: expected a non-empty list of Tensors (infer_type at /Users/jamesreed/onnx-fairseq/pytorch/torch/lib/tmp_install/include/ATen/Functions.h:1126)\nframe #0: torch::jit::script::createStack(torch::jit::Graph&amp;, torch::jit::script::SourceRange const&amp;, at::ArrayRef&lt;torch::jit::Value*&gt;) + 1132 (0x10356fefc in _C.cpython-36m-darwin.so)\nframe #1: torch::jit::script::tryMatchSchema(torch::jit::FunctionSchema const&amp;, torch::jit::script::SourceRange const&amp;, torch::jit::Graph&amp;, at::ArrayRef&lt;torch::jit::NamedValue&gt;, at::ArrayRef&lt;torch::jit::NamedValue&gt;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) + 3702 (0x1035724d6 in _C.cpython-36m-darwin.so)\n</code></pre>\n<p>So I believe this function (<a href=\"https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/compiler.cpp#L270\">https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/compiler.cpp#L270</a>) will have to be updated to accomodate empty tuples. Hope this helps you get started!</p>", "body_text": "Sure,\n\nHere's where we convert a python AST Typle node into a ListLiteral tree view: \n  \n    \n      pytorch/torch/jit/frontend.py\n    \n    \n         Line 432\n      in\n      feaee21\n    \n    \n    \n    \n\n        \n          \n           def build_Tuple(ctx, expr): \n        \n    \n  \n\n Afaict that's already correct\nIn the string frontend parser, I believe we'll hit this case when parsing that tuple argument \n  \n    \n      pytorch/torch/csrc/jit/script/parser.h\n    \n    \n         Line 61\n      in\n      feaee21\n    \n    \n    \n    \n\n        \n          \n           case '(': { \n        \n    \n  \n\n which expects at least one expr, so it's failing once it it's the end paren. That should get fixed up so we can emit a similar ListLiteral instance as in the Python AST frontend\n\nUsing the Python AST frontend here's an example:\nimport torch\n\n@torch.jit.script\ndef the_method(i0):\n    return i0.permute(())\n\nprint(the_method.graph)\n\nWhich errors out with:\nRuntimeError: expected a non-empty list of Tensors (infer_type at /Users/jamesreed/onnx-fairseq/pytorch/torch/lib/tmp_install/include/ATen/Functions.h:1126)\nframe #0: torch::jit::script::createStack(torch::jit::Graph&, torch::jit::script::SourceRange const&, at::ArrayRef<torch::jit::Value*>) + 1132 (0x10356fefc in _C.cpython-36m-darwin.so)\nframe #1: torch::jit::script::tryMatchSchema(torch::jit::FunctionSchema const&, torch::jit::script::SourceRange const&, torch::jit::Graph&, at::ArrayRef<torch::jit::NamedValue>, at::ArrayRef<torch::jit::NamedValue>, std::__1::basic_ostream<char, std::__1::char_traits<char> >&) + 3702 (0x1035724d6 in _C.cpython-36m-darwin.so)\n\nSo I believe this function (https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/compiler.cpp#L270) will have to be updated to accomodate empty tuples. Hope this helps you get started!", "body": "Sure,\r\n\r\n* Here's where we convert a python AST Typle node into a ListLiteral tree view: https://github.com/pytorch/pytorch/blob/feaee219688c771a12a20cfa001495411ae735f8/torch/jit/frontend.py#L432 Afaict that's already correct\r\n* In the string frontend parser, I believe we'll hit this case when parsing that tuple argument https://github.com/pytorch/pytorch/blob/feaee219688c771a12a20cfa001495411ae735f8/torch/csrc/jit/script/parser.h#L61 which expects at least one expr, so it's failing once it it's the end paren. That should get fixed up so we can emit a similar ListLiteral instance as in the Python AST frontend\r\n\r\n\r\nUsing the Python AST frontend here's an example:\r\n\r\n```\r\nimport torch\r\n\r\n@torch.jit.script\r\ndef the_method(i0):\r\n    return i0.permute(())\r\n\r\nprint(the_method.graph)\r\n```\r\n\r\nWhich errors out with:\r\n\r\n```\r\nRuntimeError: expected a non-empty list of Tensors (infer_type at /Users/jamesreed/onnx-fairseq/pytorch/torch/lib/tmp_install/include/ATen/Functions.h:1126)\r\nframe #0: torch::jit::script::createStack(torch::jit::Graph&, torch::jit::script::SourceRange const&, at::ArrayRef<torch::jit::Value*>) + 1132 (0x10356fefc in _C.cpython-36m-darwin.so)\r\nframe #1: torch::jit::script::tryMatchSchema(torch::jit::FunctionSchema const&, torch::jit::script::SourceRange const&, torch::jit::Graph&, at::ArrayRef<torch::jit::NamedValue>, at::ArrayRef<torch::jit::NamedValue>, std::__1::basic_ostream<char, std::__1::char_traits<char> >&) + 3702 (0x1035724d6 in _C.cpython-36m-darwin.so)\r\n```\r\n\r\nSo I believe this function (https://github.com/pytorch/pytorch/blob/master/torch/csrc/jit/script/compiler.cpp#L270) will have to be updated to accomodate empty tuples. Hope this helps you get started!"}