{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146112876", "pull_request_review_id": 71014468, "id": 146112876, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjExMjg3Ng==", "diff_hunk": "@@ -120,12 +125,19 @@ def reduce_add_coalesced(inputs, destination=None, buffer_size=10485760):\n         inputs, placed on the ``destination`` device.\n     \"\"\"\n     output = []\n-    itrs = [_take_tensors(tensors, buffer_size) for tensors in inputs]\n+    itrs = [_take_tensors(tensors, buffer_size, True) for tensors in inputs]", "path": "torch/cuda/comm.py", "position": null, "original_position": 66, "commit_id": "7074f73ca6964b9a144cc808fd923ee8bc80f5ff", "original_commit_id": "8399fafd2163024522c7ccd1624b4b09ea952c43", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It seems to me that weird things can start to happen if different devices produce different configurations of sparse/dense (i.e. buffers will have different sizes and orderings between devices). Also, this function is covered in `is_sparse` conditionals almost entirely. It would be better to scatter lists from different GPUs into sparse/dense buckets (and check that they match in denseness), and do reductions within them independently.", "created_at": "2017-10-21T18:58:17Z", "updated_at": "2018-11-23T15:35:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/3211#discussion_r146112876", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3211", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146112876"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3211#discussion_r146112876"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3211"}}, "body_html": "<p>It seems to me that weird things can start to happen if different devices produce different configurations of sparse/dense (i.e. buffers will have different sizes and orderings between devices). Also, this function is covered in <code>is_sparse</code> conditionals almost entirely. It would be better to scatter lists from different GPUs into sparse/dense buckets (and check that they match in denseness), and do reductions within them independently.</p>", "body_text": "It seems to me that weird things can start to happen if different devices produce different configurations of sparse/dense (i.e. buffers will have different sizes and orderings between devices). Also, this function is covered in is_sparse conditionals almost entirely. It would be better to scatter lists from different GPUs into sparse/dense buckets (and check that they match in denseness), and do reductions within them independently."}