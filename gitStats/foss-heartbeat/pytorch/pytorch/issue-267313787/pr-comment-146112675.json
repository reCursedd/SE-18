{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146112675", "pull_request_review_id": 71014468, "id": 146112675, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NjExMjY3NQ==", "diff_hunk": "@@ -102,44 +104,107 @@ def _accumulate(iterable, fn=lambda x, y: x + y):\n \n \n def _flatten_tensors(tensors):\n-    \"\"\"Flatten tensors into a single contiguous 1D buffer\"\"\"\n-    if len(tensors) == 1:\n-        return tensors[0].contiguous().view(-1)\n-    numels = [tensor.numel() for tensor in tensors]\n-    size = sum(numels)\n-    offset = 0\n-    flat = tensors[0].new(size)\n-    for tensor, numel in zip(tensors, numels):\n-        flat.narrow(0, offset, numel).copy_(tensor, broadcast=False)\n-        offset += numel\n-    return flat\n+    \"\"\"Flatten tensors into a sequence of contiguous 1D buffers. Assume tensors\n+    are of same type.\n+\n+    In case of dense tensors, the resulting tensor will be a concatenated 1D\n+    buffer. Element-wise operation on this buffer will be equivalent to\n+    operating separately.\n+\n+    In case of sparse tensors, the result will be a tuple of two flat tensors,\n+    one for indices and one for values.\n+    \"\"\"\n+    if tensors[0].is_sparse:\n+        flat_indices = _flatten_tensors([t._indices() for t in tensors])\n+        flat_values = _flatten_tensors([t._values() for t in tensors])\n+        return flat_indices, flat_values\n+    else:\n+        if len(tensors) == 1:\n+            return tensors[0].contiguous().view(-1)\n+        numels = [tensor.numel() for tensor in tensors]\n+        size = sum(numels)\n+        offset = 0\n+        flat = tensors[0].new(size)\n+        for tensor, numel in zip(tensors, numels):\n+            flat.narrow(0, offset, numel).copy_(tensor, broadcast=False)\n+            offset += numel\n+        return flat\n \n \n def _unflatten_tensors(flat, tensors):\n-    \"\"\"View a flat buffer using the sizes of tensors\"\"\"\n+    \"\"\"View a flat buffer using the sizes of tensors. Assume that tensors are of\n+    same type, and that flat is given by _flatten_tensors.\n+    \"\"\"\n+    if tensors[0].is_sparse:\n+        flat_indices, flat_values = flat\n+        indices = _unflatten_tensors(flat_indices, [t._indices() for t in tensors])\n+        values = _unflatten_tensors(flat_values, [t._values() for t in tensors])\n+        outputs = []\n+        for t, i, v in zip(tensors, indices, values):\n+            outputs.append(t.new(i, v, t.size()))\n+        return tuple(outputs)\n+    else:\n+        outputs = []\n+        offset = 0\n+        for tensor in tensors:\n+            numel = tensor.numel()\n+            outputs.append(flat.narrow(0, offset, numel).view_as(tensor))\n+            offset += numel\n+        return tuple(outputs)\n+\n+\n+def _reorder_tensors_as(tensors, ordered_tensors):\n+    \"\"\"Assume that tensors are of same order as ordered_tensors within sparse\n+    and dense classes. Reordered them to be of same order as ordered_tensors.\n+    \"\"\"\n+    sparse_tensors = iter(t for t in tensors if t.is_sparse)\n+    dense_tensors = iter(t for t in tensors if not t.is_sparse)\n     outputs = []\n-    offset = 0\n-    for tensor in tensors:\n-        numel = tensor.numel()\n-        outputs.append(flat.narrow(0, offset, numel).view_as(tensor))\n-        offset += numel\n+    for t in ordered_tensors:\n+        if t.is_sparse:\n+            outputs.append(next(sparse_tensors))\n+        else:\n+            outputs.append(next(dense_tensors))", "path": "torch/_utils.py", "position": null, "original_position": 97, "commit_id": "7074f73ca6964b9a144cc808fd923ee8bc80f5ff", "original_commit_id": "8399fafd2163024522c7ccd1624b4b09ea952c43", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "A shorter version:\r\n```python\r\noutputs = [next(sparse) if t.is_sparse else next(dense) for t in ordered_tensors]\r\n```", "created_at": "2017-10-21T18:51:41Z", "updated_at": "2018-11-23T15:35:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/3211#discussion_r146112675", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3211", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/146112675"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3211#discussion_r146112675"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3211"}}, "body_html": "<p>A shorter version:</p>\n<div class=\"highlight highlight-source-python\"><pre>outputs <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">next</span>(sparse) <span class=\"pl-k\">if</span> t.is_sparse <span class=\"pl-k\">else</span> <span class=\"pl-c1\">next</span>(dense) <span class=\"pl-k\">for</span> t <span class=\"pl-k\">in</span> ordered_tensors]</pre></div>", "body_text": "A shorter version:\noutputs = [next(sparse) if t.is_sparse else next(dense) for t in ordered_tensors]"}