{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/147578478", "pull_request_review_id": 72694932, "id": 147578478, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzU3ODQ3OA==", "diff_hunk": "@@ -119,13 +131,20 @@ def reduce_add_coalesced(inputs, destination=None, buffer_size=10485760):\n         A tuple of tensors containing an elementwise sum of each group of\n         inputs, placed on the ``destination`` device.\n     \"\"\"\n+    dense_tensors = []  # shape (num_tensors, num_gpus)\n     output = []\n-    itrs = [_take_tensors(tensors, buffer_size) for tensors in inputs]\n+    for tensor_at_gpus in zip(*inputs):\n+        if tensor_at_gpus[0].is_sparse:\n+            result = reduce_add(tensor_at_gpus, destination)\n+            output.append(result)\n+        else:\n+            dense_tensors.append(tensor_at_gpus)\n+    itrs = [_take_tensors(tensors, buffer_size) for tensors in zip(*dense_tensors)]\n     for chunks in zip(*itrs):\n-        flattened = [_flatten_tensors(chunk) for chunk in chunks]\n-        result = reduce_add(flattened, destination)\n-        output.extend(_unflatten_tensors(result, chunks[0]))\n-    return tuple(output)\n+        tensors = [_flatten_dense_tensors(chunk) for chunk in chunks]", "path": "torch/cuda/comm.py", "position": 87, "original_position": 87, "commit_id": "7074f73ca6964b9a144cc808fd923ee8bc80f5ff", "original_commit_id": "7074f73ca6964b9a144cc808fd923ee8bc80f5ff", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would also be nice to avoid transposing Python data structures 3 times (interpreter overhead), but this seems more complicated.", "created_at": "2017-10-29T11:44:46Z", "updated_at": "2018-11-23T15:35:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/3211#discussion_r147578478", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3211", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/147578478"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3211#discussion_r147578478"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3211"}}, "body_html": "<p>It would also be nice to avoid transposing Python data structures 3 times (interpreter overhead), but this seems more complicated.</p>", "body_text": "It would also be nice to avoid transposing Python data structures 3 times (interpreter overhead), but this seems more complicated."}