{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121265725", "pull_request_review_id": 43305409, "id": 121265725, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTI2NTcyNQ==", "diff_hunk": "@@ -565,12 +575,156 @@ def forward(self, input):\n         return torch.cumsum(input, dim=self.dim)\n \n     def backward(self, grad_output):\n-        grad_input = torch.cumsum(-grad_output, dim=self.dim)\n+        return sum_scan_exclusive(grad_output, dim=self.dim)\n+\n+\n+class Cumprod(Function):\n+\n+    def __init__(self, dim):\n+        super(Cumprod, self).__init__()\n+        self.dim = dim\n+\n+    def forward(self, input):\n+        self.save_for_backward(input)\n+        return torch.cumprod(input, dim=self.dim)\n+\n+    def backward(self, grad_output):\n+        '''\n+        There are two algorithms to do this. The first one\n+        is very efficient, but works only when there are no\n+        nonzero elements in the input.\n+\n+        The second one is much more complex, but it doesn't\n+        assume anything on the input. The main downside is\n+        that it takes time O(n^2), where n = input.size(self.dim)\n+        (i.e. the length of the cumulative product). This is in\n+        contrast to the forward pass and the efficient algorithm,\n+        which are both O(n).\n+\n+        The second algorithm is a simple application of the chain\n+        rule. If x is an n-dimensional vector, and y = cumprod(x),\n+        and F is the final cost, then\n+\n+        dF / dx_k = sum_j (dF / dy_j) * (dy_j / dx_k)   (1)\n+\n+        The term dF / dy_j is just grad_output[j] (assuming again\n+        everything is one-dimensional).\n+\n+        The term (dy_j / dx_k) is easilly seen to be\n+\n+        if j >= k\n+            dy_j / dx_k = prod_{1 <= i <= j, i != k} x_i\n+        else:\n+            dy_j / dx_k = 0\n+\n+        Note that the indicator (j>=k) can be taken out\n+        by replacing the sum in (1) with a sum from\n+        j = k to n.\n+\n+        Thus,\n+        df / dx_k = sum_{k <= j <= n} grad_output[j] * (dy_j / dx_k)\n+\n+        with\n+        dy_j / dx_k = prod_{1 <= i <= j, i != k} x_i     (2)\n+\n+        Note that this last term is just the cumulative product\n+        with k omitted. Thus, if x_k (the input) is nonzero, we can\n+        just express this as\n+\n+        dy_j / dx_k = (prod_{1 <= i <= j} x_i) / x_k\n+                    = y_j / x_k\n+\n+        So therefore,\n+\n+        df / dx_k = sum_{k <= j <= n} grad_output[j] * y_j / x_k\n+\n+        so\n+\n+        grad_output = sum_scan_exclusiv(grad_output * output) / input\n+\n+        If the input is nonzero, we need to calculate the dy_j / dx_k\n+        by using the formula (2), called in the code omitted_products.\n+\n+        The way the code calculates it is simply by noting that\n+\n+        prod_{1 <= i <= j, i != k} x_i\n+            = (prod_{1 <= i <= k} x_i) * (prod_{k + 1 <= i <= j} x_i)\n+\n+        the first term is calculated as prods_until_k, which since\n+        doesn't depend in j is easy to vectorize.\n+\n+        The second term (indexed by j) is the cumulative product of\n+        x_{k+1}, x_{k+2}, ..., x_n, and it's named in the code\n+        prods_from_k_pkus_1, and it's calculated as a cumprod.\n+\n+        In order to vectorize this properly, we need to add to\n+        omitted_products the dimensions where k > j, and therefore\n+        dy_j / dx_k = 0, which is done right after the assert.\n+        '''\n+\n+        input, = self.saved_tensors\n+        dim_size = input.size(self.dim)\n+        if dim_size == 1:\n+            return grad_output.clone()", "path": "torch/autograd/_functions/tensor.py", "position": null, "original_position": 112, "commit_id": "0764d73d6b2a2acf4e02984859a3f329fb908653", "original_commit_id": "d235103aafe5829d129ad928f17e43e832688b5c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "no need to clone it here", "created_at": "2017-06-10T20:28:41Z", "updated_at": "2018-11-23T15:33:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/1439#discussion_r121265725", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1439", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/121265725"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1439#discussion_r121265725"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1439"}}, "body_html": "<p>no need to clone it here</p>", "body_text": "no need to clone it here"}