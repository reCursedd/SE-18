{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114810315", "pull_request_review_id": 36301372, "id": 114810315, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDgxMDMxNQ==", "diff_hunk": "@@ -601,13 +609,93 @@ def forward(self, input):\n         return torch.cumsum(input, dim=self.dim)\n \n     def backward(self, grad_output):\n-        grad_input = torch.cumsum(-grad_output, dim=self.dim)\n+        return reverse_cumsum(grad_output, dim=self.dim)\n+        \n+class Cumprod(Function):\n+    \n+    def __init__(self, dim):\n+        super(Cumprod, self).__init__()\n+        self.dim = dim\n \n-        end_idx = grad_input.size(self.dim) - 1\n-        grad_sum = grad_input.narrow(self.dim, end_idx, 1)\n-        grad_input -= grad_sum.expand_as(grad_input)\n-        grad_input += grad_output\n-        return grad_input\n+    def forward(self, input):\n+        self.save_for_backward(input)\n+        return torch.cumprod(input, dim=self.dim)\n+\n+    def backward(self, grad_output):\n+        '''\n+        There are two algorithms to do this, the naive one\n+        which works with all types of inputs is slow, namely\n+        O(n^2) where n = input.size(self.dim).\n+\n+        The second one is much faster, namely O(n), but\n+        requires nonzero inputs. This implementation checks\n+        for 0s in the inputs and then decides which one to use.\n+        '''\n+        input, = self.saved_tensors\n+        dim_size = input.size(self.dim)\n+        \n+        if dim_size == 1:\n+            return grad_output.clone()\n+\n+        if input.is_cuda:\n+            LT = torch.cuda.LongTensor\n+        else:\n+            LT = torch.LongTensor\n+\n+        if (input == 0).any():\n+            ones = input.index_select(self.dim,\n+                    LT(range(1))).fill_(1).clone()\n+            zeros = ones.clone().fill_(0)\n+            grad_input = grad_output.new(input.size()).zero_() \n+            for k in range(dim_size):\n+                if 0 < k and k < dim_size - 1:\n+                    prods_until_k = torch.prod(input.index_select(self.dim,\n+                        LT(range(k))), dim=self.dim)\n+\n+                    prods_from_k_plus_1 = torch.cumprod(input.index_select(\n+                        self.dim, LT(range(k+1, dim_size))), dim=self.dim)", "path": "torch/autograd/_functions/tensor.py", "position": null, "original_position": 69, "commit_id": "0764d73d6b2a2acf4e02984859a3f329fb908653", "original_commit_id": "fd08916198f13cd011f1af34830c17ec949771a7", "user": {"login": "martinarjovsky", "id": 5272722, "node_id": "MDQ6VXNlcjUyNzI3MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5272722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinarjovsky", "html_url": "https://github.com/martinarjovsky", "followers_url": "https://api.github.com/users/martinarjovsky/followers", "following_url": "https://api.github.com/users/martinarjovsky/following{/other_user}", "gists_url": "https://api.github.com/users/martinarjovsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinarjovsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinarjovsky/subscriptions", "organizations_url": "https://api.github.com/users/martinarjovsky/orgs", "repos_url": "https://api.github.com/users/martinarjovsky/repos", "events_url": "https://api.github.com/users/martinarjovsky/events{/privacy}", "received_events_url": "https://api.github.com/users/martinarjovsky/received_events", "type": "User", "site_admin": false}, "body": "This makes a lot of sense, will do.", "created_at": "2017-05-04T15:22:54Z", "updated_at": "2018-11-23T15:33:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/1439#discussion_r114810315", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1439", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114810315"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1439#discussion_r114810315"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1439"}}, "body_html": "<p>This makes a lot of sense, will do.</p>", "body_text": "This makes a lot of sense, will do.", "in_reply_to_id": 114442555}