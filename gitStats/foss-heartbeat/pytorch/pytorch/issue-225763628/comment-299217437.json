{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/299217437", "html_url": "https://github.com/pytorch/pytorch/pull/1439#issuecomment-299217437", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1439", "id": 299217437, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTIxNzQzNw==", "user": {"login": "martinarjovsky", "id": 5272722, "node_id": "MDQ6VXNlcjUyNzI3MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5272722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinarjovsky", "html_url": "https://github.com/martinarjovsky", "followers_url": "https://api.github.com/users/martinarjovsky/followers", "following_url": "https://api.github.com/users/martinarjovsky/following{/other_user}", "gists_url": "https://api.github.com/users/martinarjovsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinarjovsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinarjovsky/subscriptions", "organizations_url": "https://api.github.com/users/martinarjovsky/orgs", "repos_url": "https://api.github.com/users/martinarjovsky/repos", "events_url": "https://api.github.com/users/martinarjovsky/events{/privacy}", "received_events_url": "https://api.github.com/users/martinarjovsky/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-04T15:18:00Z", "updated_at": "2017-05-04T15:20:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> This would have two problems.</p>\n<ul>\n<li>It wouldn't support negative inputs.</li>\n<li>It wouldn't support zero inputs.</li>\n</ul>\n<p>The case with nonzero inputs (including x &lt; 0) is handled in two lines already by doing</p>\n<div class=\"highlight highlight-source-python\"><pre>output <span class=\"pl-k\">=</span> torch.cumprod(<span class=\"pl-c1\">input</span>, <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.dim)\n<span class=\"pl-k\">return</span> reverse_cumsum(output <span class=\"pl-k\">*</span> grad_output, <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.dim) <span class=\"pl-k\">/</span> <span class=\"pl-c1\">input</span></pre></div>\n<p>It's the case with zeros that's hard :)</p>", "body_text": "@fmassa This would have two problems.\n\nIt wouldn't support negative inputs.\nIt wouldn't support zero inputs.\n\nThe case with nonzero inputs (including x < 0) is handled in two lines already by doing\noutput = torch.cumprod(input, dim=self.dim)\nreturn reverse_cumsum(output * grad_output, dim=self.dim) / input\nIt's the case with zeros that's hard :)", "body": "@fmassa This would have two problems.\r\n- It wouldn't support negative inputs.\r\n- It wouldn't support zero inputs.\r\n\r\nThe case with nonzero inputs (including x < 0) is handled in two lines already by doing\r\n```python\r\noutput = torch.cumprod(input, dim=self.dim)\r\nreturn reverse_cumsum(output * grad_output, dim=self.dim) / input\r\n```\r\n\r\nIt's the case with zeros that's hard :)"}