{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179083460", "pull_request_review_id": 109255918, "id": 179083460, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTA4MzQ2MA==", "diff_hunk": "@@ -804,3 +806,165 @@ def forward(self, *args, **kwargs):\n \n if not torch._C._jit_init():\n     raise RuntimeError(\"JIT initialization failed\")\n+\n+\n+def _scalar(x):\n+    \"\"\"Convert a scalar tensor into a Python value.\"\"\"\n+    assert x.numel() == 1\n+    return x[0]\n+\n+\n+def _is_onnx_list(value):\n+    if not isinstance(value, string_classes) and not torch.is_tensor(value) and isinstance(value, collections.Iterable):\n+        return True\n+    return False\n+\n+\n+attr_pattern = re.compile(\"^(.+)_([ifstgz])$\")\n+\n+\n+def _add_attribute(node, key, value, aten):\n+    r\"\"\" initializes the right attribute based on type of value \"\"\"\n+    m = attr_pattern.match(key)\n+    if m is None:\n+        raise IndexError((\n+            \"Invalid attribute specifier '{}' names \" +\n+            \" must be suffixed with type, e.g. 'dim_i' or 'dims_i'\").format(key))\n+    name, kind = m.group(1), m.group(2)\n+    if _is_onnx_list(value):\n+        kind += \"s\"\n+    if aten:\n+        if torch.is_tensor(value):\n+            # Caffe2 proto does not support tensor attribute.\n+            if value.numel() > 1:\n+                raise ValueError(\"Should not pass tensor attribute\")\n+            value = _scalar(value)\n+            if isinstance(value, float):\n+                kind = \"f\"\n+            else:\n+                kind = \"i\"", "path": "torch/jit/__init__.py", "position": null, "original_position": 60, "commit_id": "35cc8f5e1688a7e07f0186f59b83eefd30f3d779", "original_commit_id": "326159a476369a9b2e5d2e3589dbc8eced77ff46", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Having this auto-inference is also confusing when you take into account that we usually use the kwarg suffix to determine the type. I'd rather avoid having this in the JIT.", "created_at": "2018-04-04T09:49:11Z", "updated_at": "2018-11-23T15:41:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/6256#discussion_r179083460", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6256", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179083460"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6256#discussion_r179083460"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6256"}}, "body_html": "<p>Having this auto-inference is also confusing when you take into account that we usually use the kwarg suffix to determine the type. I'd rather avoid having this in the JIT.</p>", "body_text": "Having this auto-inference is also confusing when you take into account that we usually use the kwarg suffix to determine the type. I'd rather avoid having this in the JIT."}