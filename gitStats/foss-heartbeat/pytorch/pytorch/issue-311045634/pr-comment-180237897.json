{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180237897", "pull_request_review_id": 110625522, "id": 180237897, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MDIzNzg5Nw==", "diff_hunk": "@@ -199,6 +202,27 @@ def pad_packed_sequence(sequence, batch_first=False, padding_value=0):\n     return output, Variable(torch.LongTensor(lengths))\n \n \n+def _symbolic_pad_packed_sequence(g, input, batch_first=False, padding_value=0.0):", "path": "torch/nn/utils/rnn.py", "position": 60, "original_position": 57, "commit_id": "35cc8f5e1688a7e07f0186f59b83eefd30f3d779", "original_commit_id": "2df8066807b4bc720d37e5dd74e2e013504626f5", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "body": "So we need two wrappers:\r\n\r\n1) A Python function that is called when we execute the PythonOp. This is a nested `def` which wraps the original operation so we can capture the python args `batch_first` and `padding_value`. Here this function is `pad_packed_sequence_trace_wrapper`\r\n2) A symbolic function for the ONNX pass. This is yet another nested def here: `pad_packed_sequence_trace_wrapper`", "created_at": "2018-04-09T21:33:41Z", "updated_at": "2018-11-23T15:42:06Z", "html_url": "https://github.com/pytorch/pytorch/pull/6256#discussion_r180237897", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6256", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/180237897"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6256#discussion_r180237897"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6256"}}, "body_html": "<p>So we need two wrappers:</p>\n<ol>\n<li>A Python function that is called when we execute the PythonOp. This is a nested <code>def</code> which wraps the original operation so we can capture the python args <code>batch_first</code> and <code>padding_value</code>. Here this function is <code>pad_packed_sequence_trace_wrapper</code></li>\n<li>A symbolic function for the ONNX pass. This is yet another nested def here: <code>pad_packed_sequence_trace_wrapper</code></li>\n</ol>", "body_text": "So we need two wrappers:\n\nA Python function that is called when we execute the PythonOp. This is a nested def which wraps the original operation so we can capture the python args batch_first and padding_value. Here this function is pad_packed_sequence_trace_wrapper\nA symbolic function for the ONNX pass. This is yet another nested def here: pad_packed_sequence_trace_wrapper", "in_reply_to_id": 179333357}