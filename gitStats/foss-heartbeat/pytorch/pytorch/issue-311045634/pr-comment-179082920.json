{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179082920", "pull_request_review_id": 109255918, "id": 179082920, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTA4MjkyMA==", "diff_hunk": "@@ -804,3 +806,165 @@ def forward(self, *args, **kwargs):\n \n if not torch._C._jit_init():\n     raise RuntimeError(\"JIT initialization failed\")\n+\n+\n+def _scalar(x):\n+    \"\"\"Convert a scalar tensor into a Python value.\"\"\"\n+    assert x.numel() == 1\n+    return x[0]\n+\n+\n+def _is_onnx_list(value):\n+    if not isinstance(value, string_classes) and not torch.is_tensor(value) and isinstance(value, collections.Iterable):\n+        return True\n+    return False\n+\n+\n+attr_pattern = re.compile(\"^(.+)_([ifstgz])$\")\n+\n+\n+def _add_attribute(node, key, value, aten):\n+    r\"\"\" initializes the right attribute based on type of value \"\"\"\n+    m = attr_pattern.match(key)\n+    if m is None:\n+        raise IndexError((\n+            \"Invalid attribute specifier '{}' names \" +\n+            \" must be suffixed with type, e.g. 'dim_i' or 'dims_i'\").format(key))\n+    name, kind = m.group(1), m.group(2)\n+    if _is_onnx_list(value):\n+        kind += \"s\"\n+    if aten:\n+        if torch.is_tensor(value):\n+            # Caffe2 proto does not support tensor attribute.\n+            if value.numel() > 1:\n+                raise ValueError(\"Should not pass tensor attribute\")\n+            value = _scalar(value)\n+            if isinstance(value, float):\n+                kind = \"f\"\n+            else:\n+                kind = \"i\"\n+    return getattr(node, kind + \"_\")(name, value)\n+\n+\n+def _newNode(g, opname, outputs, *args, **kwargs):\n+    if \"::\" in opname:\n+        aten = False\n+        ns_opname = opname\n+    else:\n+        aten = kwargs.pop(\"aten\", False)\n+        ns = \"aten\" if aten else \"onnx\"\n+        ns_opname = ns + \"::\" + opname\n+    n = g.create(ns_opname, args, outputs)\n+    for k, v in sorted(kwargs.items()):\n+        # TODO: enable inplace in aten exporting mode.\n+        if k == \"inplace\":\n+            continue\n+        _add_attribute(n, k, v, aten=aten)\n+    return n\n+\n+\n+def _graph_op(g, opname, *raw_args, **kwargs):\n+    r\"\"\"\n+    Create an ONNX operator 'opname', taking 'args' as inputs and attributes\n+    'kwargs'; returning the node representing the single output of this operator\n+    (see the `outputs` keyword argument for multi-return nodes).\n+\n+    The set of operators and the inputs/attributes they take\n+    is documented at https://github.com/onnx/onnx/blob/master/docs/Operators.md\n+\n+    This function is monkey-patched onto Graph.\n+\n+    Arguments:\n+        opname (string): The ONNX operator name, e.g., `Abs` or `Add`.\n+        args (Node...): The inputs to the operator; usually provided\n+            as arguments to the `symbolic` definition.\n+        kwargs: The attributes of the ONNX operator, with keys named\n+            according to the following convention: `alpha_f` indicates\n+            the `alpha` attribute with type `f`.  The valid type specifiers are\n+            `f` (float), `i` (int), `s` (string) or `t` (Tensor).  An attribute\n+            specified with type float accepts either a single float, or a\n+            list of floats (e.g., you would say `dims_i` for a `dims` attribute\n+            that takes a list of integers).\n+        outputs (int, optional):  The number of outputs this operator returns;\n+            by default an operator is assumed to return a single output.\n+            If `outputs` is greater than one, this functions returns a tuple\n+            of output `Node`, representing each output of the ONNX operator\n+            in positional.\n+    \"\"\"\n+    outputs = kwargs.pop('outputs', 1)\n+\n+    # Filter out None attributes, this can be convenient client side because\n+    # now they can pass through None attributes, and have them not show up\n+    kwargs = dict((k, v) for k, v in kwargs.items() if v is not None)\n+\n+    def const_if_tensor(arg):\n+        if arg is None:\n+            return arg\n+        elif isinstance(arg, torch._C.Value):\n+            return arg\n+        else:\n+            return g.op(\"Constant\", value_z=arg)\n+\n+    args = list(const_if_tensor(arg) for arg in raw_args)\n+    n = g.appendNode(_newNode(g, opname, outputs, *args, **kwargs))\n+    if outputs == 1:\n+        return n.output()\n+    return tuple(o for o in n.outputs())\n+\n+\n+# Generate an ONNX ATen op node.\n+def _graph_at(g, opname, *args, **kwargs):\n+    return g.op(\"ATen\", *args, operator_s=opname, **kwargs)\n+\n+\n+# This helper function can create either constant tensor or constant scalar.\n+# If dims is None or 0 or [0], generate a 0-d tensor (scalar).\n+#\n+# TODO: We might not need this anymore, since most scalars now show up\n+# as tensors\n+def _graph_constant(g, value, dims, type, *args, **kwargs):\n+    assert isinstance(value, numbers.Number)\n+    assert type is not None\n+    isscalar = False\n+    if dims is None or dims == 0 or set(dims) == set([0]):\n+        dims = [1]\n+        isscalar = True\n+    type = type.lower()\n+    if type == \"char\":\n+        tensor = torch.CharTensor(*dims)\n+    elif type == \"short\":\n+        tensor = torch.ShortTensor(*dims)\n+    elif type == \"int\":\n+        tensor = torch.IntTensor(*dims)\n+    elif type == \"long\":\n+        tensor = torch.LongTensor(*dims)\n+    elif type == \"half\":\n+        tensor = torch.HalfTensor(*dims)\n+    elif type == \"float\":\n+        tensor = torch.FloatTensor(*dims)\n+    elif type == \"double\":\n+        tensor = torch.DoubleTensor(*dims)\n+    else:\n+        raise ValueError(\"Unknown type, type should be one of the following strings: \"\n+                         \"char, short, int, long, half, float, double\")\n+    tensor.fill_(value)\n+    if isscalar:\n+        return g.op(\"Constant\", *args, value_z=tensor, **kwargs)\n+    return g.op(\"Constant\", *args, value_t=tensor, **kwargs)\n+\n+\n+def _node_getitem(self, k):\n+    r\"\"\"\n+    Accessor for attributes of a node which is polymorphic over\n+    return type.\n+\n+    NB: This is monkey-patched onto Node.\n+    \"\"\"\n+    sel = self.kindOf(k)\n+    return getattr(self, sel)(k)\n+\n+\n+torch._C.Graph.op = _graph_op\n+torch._C.Graph.at = _graph_at\n+torch._C.Graph.constant = _graph_constant", "path": "torch/jit/__init__.py", "position": null, "original_position": 184, "commit_id": "35cc8f5e1688a7e07f0186f59b83eefd30f3d779", "original_commit_id": "326159a476369a9b2e5d2e3589dbc8eced77ff46", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Having `.constant` function that creates an ONNX node, inside the JIT directory (where we usually deal with ATen and builtin JIT ops, which also have a `Constant` node is very confusing and error prone.", "created_at": "2018-04-04T09:47:13Z", "updated_at": "2018-11-23T15:41:37Z", "html_url": "https://github.com/pytorch/pytorch/pull/6256#discussion_r179082920", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6256", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/179082920"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6256#discussion_r179082920"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6256"}}, "body_html": "<p>Having <code>.constant</code> function that creates an ONNX node, inside the JIT directory (where we usually deal with ATen and builtin JIT ops, which also have a <code>Constant</code> node is very confusing and error prone.</p>", "body_text": "Having .constant function that creates an ONNX node, inside the JIT directory (where we usually deal with ATen and builtin JIT ops, which also have a Constant node is very confusing and error prone."}