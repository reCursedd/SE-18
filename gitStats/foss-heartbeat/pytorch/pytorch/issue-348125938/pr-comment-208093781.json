{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208093781", "pull_request_review_id": 143834416, "id": 208093781, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA5Mzc4MQ==", "diff_hunk": "@@ -1424,25 +1421,34 @@ struct to_ir {\n \n   // Desugars slice syntactic sugar tensor[begin:end] -> tensor.slice(begin,\n   // end).\n-  Value* emitSlice(\n-      const SourceRange& loc,\n-      TreeList&& inputs) {\n-    const auto applyInputs =\n-        Compound::create(TK_LIST, loc, std::move(inputs));\n-    const auto input_values = getNamedValues(applyInputs->trees(),\n-                                             /*maybe_unpack*/false,\n-                                             identity);\n+  Value* emitSlice(const Slice& slice) {\n+    const auto& loc = slice.range();\n+    TreeList inputs = {slice.value(), slice.startOr(0)};\n+    const auto applyInputs = Compound::create(TK_LIST, loc, std::move(inputs));\n+    const auto input_values = getNamedValues(\n+        applyInputs->trees(),\n+        /*maybe_unpack*/ false,\n+        identity);\n+\n     NamedValue tensor = input_values[0];\n     NamedValue begin = input_values[1];\n-    NamedValue end = input_values[2];\n-    NamedValue dim = NamedValue(loc, \"dim\",\n-        graph->insertConstant(0, loc));\n-    NamedValue step = NamedValue(loc, \"step\",\n-        graph->insertConstant(1, loc));\n-\n-    return emitBuiltinCall(\n-               loc, method, \"slice\", {tensor, dim, begin, end, step}, {}, true)\n-        ->asValue(loc, method);\n+    NamedValue dim = NamedValue(loc, \"dim\", graph->insertConstant(0, loc));\n+    NamedValue step = NamedValue(loc, \"step\", graph->insertConstant(1, loc));\n+\n+    const auto has_end = slice.end().present();\n+    if (has_end) {\n+      // If the user specified an `end` index, pass it down", "path": "torch/csrc/jit/script/compiler.cpp", "position": null, "original_position": 49, "commit_id": "d2a595c4ef817fb04273003834c6fe5a0d7f23b8", "original_commit_id": "34dfbab5ec1cfcf07cdcdbd938b11630d5ff99af", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "this might be simpler to maintain:\r\n\r\n```\r\nstd::vector<NamedValue> args = {tensor, dim, begin};\r\nif(has_end)\r\n  args.push_back(end);\r\nreturn emitBuiltinCall(\r\n                 loc, method, \"slice\", {tensor, dim, begin}, {step}, true)\r\n          ->asValue(loc, method);\r\n```", "created_at": "2018-08-07T04:08:34Z", "updated_at": "2018-11-23T15:48:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/10286#discussion_r208093781", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10286", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208093781"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10286#discussion_r208093781"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10286"}}, "body_html": "<p>this might be simpler to maintain:</p>\n<pre><code>std::vector&lt;NamedValue&gt; args = {tensor, dim, begin};\nif(has_end)\n  args.push_back(end);\nreturn emitBuiltinCall(\n                 loc, method, \"slice\", {tensor, dim, begin}, {step}, true)\n          -&gt;asValue(loc, method);\n</code></pre>", "body_text": "this might be simpler to maintain:\nstd::vector<NamedValue> args = {tensor, dim, begin};\nif(has_end)\n  args.push_back(end);\nreturn emitBuiltinCall(\n                 loc, method, \"slice\", {tensor, dim, begin}, {step}, true)\n          ->asValue(loc, method);"}