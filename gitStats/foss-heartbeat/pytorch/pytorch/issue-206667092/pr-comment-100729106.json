{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/100729106", "pull_request_review_id": 21442191, "id": 100729106, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDcyOTEwNg==", "diff_hunk": "@@ -2519,6 +2526,57 @@ def test_serialization(self):\n             self.assertEqual(c[1], c[3], 0)\n             self.assertEqual(c[4], c[5][1:4], 0)\n \n+            # check that serializing the same storage view object unpickles\n+            # it as one object not two (and vice versa)\n+            views = c[7]\n+            self.assertEqual(views[0]._cdata, views[1]._cdata)\n+            self.assertEqual(views[0], views[2])\n+            self.assertNotEqual(views[0]._cdata, views[2]._cdata)", "path": "test/test_torch.py", "position": 47, "original_position": 46, "commit_id": "35301cb6db948aa78de659c45904ff87007009f3", "original_commit_id": "82576ba55a45a2d115364ab035cb4f1f169010ad", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "body": "No; I'm precisely trying to check that the cdata is the same, not that the python objects are the same. In fact, the python object should not be the same (every call to `t.storage()` produces a different python object). Python object deduplication is guaranteed by pickle; here I'm testing C object deduplication, which I have to do explicitly in the save/load code.", "created_at": "2017-02-13T06:10:30Z", "updated_at": "2018-11-23T15:32:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/713#discussion_r100729106", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/713", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/100729106"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/713#discussion_r100729106"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/713"}}, "body_html": "<p>No; I'm precisely trying to check that the cdata is the same, not that the python objects are the same. In fact, the python object should not be the same (every call to <code>t.storage()</code> produces a different python object). Python object deduplication is guaranteed by pickle; here I'm testing C object deduplication, which I have to do explicitly in the save/load code.</p>", "body_text": "No; I'm precisely trying to check that the cdata is the same, not that the python objects are the same. In fact, the python object should not be the same (every call to t.storage() produces a different python object). Python object deduplication is guaranteed by pickle; here I'm testing C object deduplication, which I have to do explicitly in the save/load code.", "in_reply_to_id": 100699698}