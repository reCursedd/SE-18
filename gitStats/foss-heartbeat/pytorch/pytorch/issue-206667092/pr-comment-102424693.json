{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/102424693", "pull_request_review_id": 23177048, "id": 102424693, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjQyNDY5Mw==", "diff_hunk": "@@ -29,30 +29,35 @@ THTensor * THPTensor_(newWithMetadataFileRaw)(int fd, THStorage *storage)\n void THPStorage_(writeFileRaw)(THStorage *self, int fd)\n {\n   real *data;\n+  int64_t size = self->size;\n #ifndef THC_GENERIC_FILE\n   data = self->data;\n #else\n-  std::unique_ptr<char[]> cpu_data(new char[self->size * sizeof(real)]);\n+  std::unique_ptr<char[]> cpu_data(new char[size * sizeof(real)]);\n   data = (real*)cpu_data.get();\n-  THCudaCheck(cudaMemcpy(data, self->data, self->size * sizeof(real), cudaMemcpyDeviceToHost));\n+  THCudaCheck(cudaMemcpy(data, self->data, size * sizeof(real), cudaMemcpyDeviceToHost));\n #endif\n-  SYSCHECK(write(fd, &self->size, sizeof(long)));\n+  ssize_t result = write(fd, &size, sizeof(int64_t));\n+  if (result != sizeof(int64_t))\n+    throw std::system_error(result, std::system_category());\n   // fast track for bytes and little endian\n   if (sizeof(real) == 1 || THP_nativeByteOrder() == THPByteOrder::THP_LITTLE_ENDIAN) {\n     char *bytes = (char *) data;\n-    uint64_t remaining = sizeof(real) * self->size;\n+    int64_t remaining = sizeof(real) * size;\n     while (remaining > 0) {\n       ssize_t result = write(fd, bytes, remaining);\n       if (result < 0)\n         throw std::system_error(result, std::system_category());\n       bytes += result;\n       remaining -= result;\n     }\n+    if (remaining != 0)", "path": "torch/csrc/generic/serialization.cpp", "position": 30, "original_position": 30, "commit_id": "35301cb6db948aa78de659c45904ff87007009f3", "original_commit_id": "a1c28192963d2146031fe65f7b4bc151e2f38802", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Is this ever going to be true? You have a loop with `remaining > 0` that can be broken only with an exception.", "created_at": "2017-02-22T10:09:06Z", "updated_at": "2018-11-23T15:32:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/713#discussion_r102424693", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/713", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/102424693"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/713#discussion_r102424693"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/713"}}, "body_html": "<p>Is this ever going to be true? You have a loop with <code>remaining &gt; 0</code> that can be broken only with an exception.</p>", "body_text": "Is this ever going to be true? You have a loop with remaining > 0 that can be broken only with an exception."}