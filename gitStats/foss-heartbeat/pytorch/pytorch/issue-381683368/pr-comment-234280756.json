{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234280756", "pull_request_review_id": 175895736, "id": 234280756, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDI4MDc1Ng==", "diff_hunk": "@@ -10,13 +10,14 @@\n \n PyObject * THPDtype_New(at::ScalarType scalar_type, const std::string& name)\n {\n+  auto cname = name.c_str();\n+  AT_ASSERT(std::strlen(cname) <= DTYPE_NAME_LEN);", "path": "torch/csrc/Dtype.cpp", "position": null, "original_position": 5, "commit_id": "a97714875bdd26be819b45fbc73d2713597741e0", "original_commit_id": "2c6739744581c72956539eb3156c1de2db5685c7", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "This looks a bit hokey. Why not just read the length out from the std::string, instead of searching for the NUL-terminator (which is what std::strlen does)\r\n\r\nAlso, I don't think the boundary condition here is correct. Suppose DTYPE_NAME_LEN == 3 If I pass in \"foo\" you will copy in a non-null terminated three characters to the buffer, and now anyone else who tries to use the buffer as a null-terminated string will buffer overflow.", "created_at": "2018-11-16T17:06:28Z", "updated_at": "2018-11-23T15:55:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/14103#discussion_r234280756", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/14103", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/234280756"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/14103#discussion_r234280756"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/14103"}}, "body_html": "<p>This looks a bit hokey. Why not just read the length out from the std::string, instead of searching for the NUL-terminator (which is what std::strlen does)</p>\n<p>Also, I don't think the boundary condition here is correct. Suppose DTYPE_NAME_LEN == 3 If I pass in \"foo\" you will copy in a non-null terminated three characters to the buffer, and now anyone else who tries to use the buffer as a null-terminated string will buffer overflow.</p>", "body_text": "This looks a bit hokey. Why not just read the length out from the std::string, instead of searching for the NUL-terminator (which is what std::strlen does)\nAlso, I don't think the boundary condition here is correct. Suppose DTYPE_NAME_LEN == 3 If I pass in \"foo\" you will copy in a non-null terminated three characters to the buffer, and now anyone else who tries to use the buffer as a null-terminated string will buffer overflow."}