{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9944", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9944/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9944/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9944/events", "html_url": "https://github.com/pytorch/pytorch/issues/9944", "id": 345325266, "node_id": "MDU6SXNzdWUzNDUzMjUyNjY=", "number": 9944, "title": "One entry is deleted in output when using nn.ModuleList and Conv1d", "user": {"login": "nadiiach", "id": 6620684, "node_id": "MDQ6VXNlcjY2MjA2ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6620684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nadiiach", "html_url": "https://github.com/nadiiach", "followers_url": "https://api.github.com/users/nadiiach/followers", "following_url": "https://api.github.com/users/nadiiach/following{/other_user}", "gists_url": "https://api.github.com/users/nadiiach/gists{/gist_id}", "starred_url": "https://api.github.com/users/nadiiach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nadiiach/subscriptions", "organizations_url": "https://api.github.com/users/nadiiach/orgs", "repos_url": "https://api.github.com/users/nadiiach/repos", "events_url": "https://api.github.com/users/nadiiach/events{/privacy}", "received_events_url": "https://api.github.com/users/nadiiach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-27T18:33:46Z", "updated_at": "2018-07-27T19:20:19Z", "closed_at": "2018-07-27T18:40:29Z", "author_association": "NONE", "body_html": "<p>The problem is described <a href=\"https://discuss.pytorch.org/t/conv1d-outputs-the-vector-of-size-one-less-than-the-input-why/21802\" rel=\"nofollow\">here</a></p>\n<p>Pls read comments</p>\n<pre><code>class Convolution(nn.Module):\n    def __init__(self, args):\n        super(Convolution, self).__init__()\n        self.windows = [1,2,3,4,5]\n        self.window_convolutions = \\\n            nn.ModuleList( [nn.Conv1d(args.cov_dim, args.mem_dim, i) for i in self.windows ])\n\n        self.conv1 = nn.Conv1d(args.cov_dim, args.mem_dim, 1)\n        self.conv2 = nn.Conv1d(args.cov_dim, args.mem_dim, 2)\n        self.conv3 = nn.Conv1d(args.cov_dim, args.mem_dim, 3)\n        self.conv4 = nn.Conv1d(args.cov_dim, args.mem_dim, 4)\n        self.conv5 = nn.Conv1d(args.cov_dim, args.mem_dim, 5)\n\n\n    def forward(self, input, sizes, args):\n        for window in self.windows:\n\n            input = input.view(1, input.size()[0], input.size()[1]).transpose(1, 2)\n\n            #conv_model = self.window_convolutions[window]   #DELETES ONE ENTRY e.g ([140, 150]) --&gt; ([139, 150]) at the end when print convolved shape \n\n            if window == 1:\n                conv_model = self.conv1\n            elif window == 2:\n                conv_model = self.conv2\n            elif window == 3:\n                conv_model = self.conv3\n            elif window == 4:\n                conv_model = self.conv4\n            else:\n                conv_model = self.conv5\n\n            convolved = conv_model(input)[0].transpose(0, 1) #WORKS, SIZED PRESERVED\n\n</code></pre>", "body_text": "The problem is described here\nPls read comments\nclass Convolution(nn.Module):\n    def __init__(self, args):\n        super(Convolution, self).__init__()\n        self.windows = [1,2,3,4,5]\n        self.window_convolutions = \\\n            nn.ModuleList( [nn.Conv1d(args.cov_dim, args.mem_dim, i) for i in self.windows ])\n\n        self.conv1 = nn.Conv1d(args.cov_dim, args.mem_dim, 1)\n        self.conv2 = nn.Conv1d(args.cov_dim, args.mem_dim, 2)\n        self.conv3 = nn.Conv1d(args.cov_dim, args.mem_dim, 3)\n        self.conv4 = nn.Conv1d(args.cov_dim, args.mem_dim, 4)\n        self.conv5 = nn.Conv1d(args.cov_dim, args.mem_dim, 5)\n\n\n    def forward(self, input, sizes, args):\n        for window in self.windows:\n\n            input = input.view(1, input.size()[0], input.size()[1]).transpose(1, 2)\n\n            #conv_model = self.window_convolutions[window]   #DELETES ONE ENTRY e.g ([140, 150]) --> ([139, 150]) at the end when print convolved shape \n\n            if window == 1:\n                conv_model = self.conv1\n            elif window == 2:\n                conv_model = self.conv2\n            elif window == 3:\n                conv_model = self.conv3\n            elif window == 4:\n                conv_model = self.conv4\n            else:\n                conv_model = self.conv5\n\n            convolved = conv_model(input)[0].transpose(0, 1) #WORKS, SIZED PRESERVED", "body": "The problem is described [here](https://discuss.pytorch.org/t/conv1d-outputs-the-vector-of-size-one-less-than-the-input-why/21802)\r\n\r\nPls read comments \r\n\r\n```\r\nclass Convolution(nn.Module):\r\n    def __init__(self, args):\r\n        super(Convolution, self).__init__()\r\n        self.windows = [1,2,3,4,5]\r\n        self.window_convolutions = \\\r\n            nn.ModuleList( [nn.Conv1d(args.cov_dim, args.mem_dim, i) for i in self.windows ])\r\n\r\n        self.conv1 = nn.Conv1d(args.cov_dim, args.mem_dim, 1)\r\n        self.conv2 = nn.Conv1d(args.cov_dim, args.mem_dim, 2)\r\n        self.conv3 = nn.Conv1d(args.cov_dim, args.mem_dim, 3)\r\n        self.conv4 = nn.Conv1d(args.cov_dim, args.mem_dim, 4)\r\n        self.conv5 = nn.Conv1d(args.cov_dim, args.mem_dim, 5)\r\n\r\n\r\n    def forward(self, input, sizes, args):\r\n        for window in self.windows:\r\n\r\n            input = input.view(1, input.size()[0], input.size()[1]).transpose(1, 2)\r\n\r\n            #conv_model = self.window_convolutions[window]   #DELETES ONE ENTRY e.g ([140, 150]) --> ([139, 150]) at the end when print convolved shape \r\n\r\n            if window == 1:\r\n                conv_model = self.conv1\r\n            elif window == 2:\r\n                conv_model = self.conv2\r\n            elif window == 3:\r\n                conv_model = self.conv3\r\n            elif window == 4:\r\n                conv_model = self.conv4\r\n            else:\r\n                conv_model = self.conv5\r\n\r\n            convolved = conv_model(input)[0].transpose(0, 1) #WORKS, SIZED PRESERVED\r\n\r\n```"}