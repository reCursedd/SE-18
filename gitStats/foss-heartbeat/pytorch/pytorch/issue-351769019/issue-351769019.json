{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10648", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10648/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10648/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10648/events", "html_url": "https://github.com/pytorch/pytorch/issues/10648", "id": 351769019, "node_id": "MDU6SXNzdWUzNTE3NjkwMTk=", "number": 10648, "title": "[feature request] Move binary_cross_entropy_with_logits into ATen", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ailzhang", "id": 5248122, "node_id": "MDQ6VXNlcjUyNDgxMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5248122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ailzhang", "html_url": "https://github.com/ailzhang", "followers_url": "https://api.github.com/users/ailzhang/followers", "following_url": "https://api.github.com/users/ailzhang/following{/other_user}", "gists_url": "https://api.github.com/users/ailzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ailzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ailzhang/subscriptions", "organizations_url": "https://api.github.com/users/ailzhang/orgs", "repos_url": "https://api.github.com/users/ailzhang/repos", "events_url": "https://api.github.com/users/ailzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/ailzhang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-08-17T23:44:22Z", "updated_at": "2018-10-12T18:14:46Z", "closed_at": "2018-10-12T18:14:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a> mentioned it would be nice to have <a href=\"https://pytorch.org/docs/stable/nn.html#torch.nn.functional.binary_cross_entropy_with_logits\" rel=\"nofollow\"><code>torch.binary_cross_entropy_with_logits</code></a> in C++. Seems like a reasonable thing to move into ATen. It's currently implemented in Python.</p>\n<p>The only tricky bit is that the the reduction is currently taken as a string <code>\"mean\" | \"sum\" | \"none\"</code>. To support all three, we could have the C++ function just return the unreduced tensor, then you can write <code>torch::binary_cross_entropy_with_logits(...).sum()</code> or <code>.mean()</code> yourself, which is fine. Same in Python, we can just call <code>.sum()</code> or <code>.mean()</code> on the result in the implementation of <code>binary_cross_entropy_with_logits</code> (i.e. no change to the public Python API).</p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5248122\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ailzhang\">@ailzhang</a></p>", "body_text": "@ebetica mentioned it would be nice to have torch.binary_cross_entropy_with_logits in C++. Seems like a reasonable thing to move into ATen. It's currently implemented in Python.\nThe only tricky bit is that the the reduction is currently taken as a string \"mean\" | \"sum\" | \"none\". To support all three, we could have the C++ function just return the unreduced tensor, then you can write torch::binary_cross_entropy_with_logits(...).sum() or .mean() yourself, which is fine. Same in Python, we can just call .sum() or .mean() on the result in the implementation of binary_cross_entropy_with_logits (i.e. no change to the public Python API).\nCC @ailzhang", "body": "@ebetica mentioned it would be nice to have [`torch.binary_cross_entropy_with_logits`](https://pytorch.org/docs/stable/nn.html#torch.nn.functional.binary_cross_entropy_with_logits) in C++. Seems like a reasonable thing to move into ATen. It's currently implemented in Python.\r\n\r\nThe only tricky bit is that the the reduction is currently taken as a string `\"mean\" | \"sum\" | \"none\"`. To support all three, we could have the C++ function just return the unreduced tensor, then you can write `torch::binary_cross_entropy_with_logits(...).sum()` or `.mean()` yourself, which is fine. Same in Python, we can just call `.sum()` or `.mean()` on the result in the implementation of `binary_cross_entropy_with_logits` (i.e. no change to the public Python API).\r\n\r\nCC @ailzhang "}