{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/315845523", "html_url": "https://github.com/pytorch/pytorch/pull/2113#issuecomment-315845523", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2113", "id": 315845523, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTg0NTUyMw==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-17T18:46:04Z", "updated_at": "2017-07-17T18:46:04Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>, do you mean <code>glibc</code>? The <code>manylinux1</code> strategy is to dynamically link against a sufficiently old version of <code>glibc</code> (specifically from CentOS 5.11). Newer versions of <code>glibc</code> are backwards compatible, so they're OK.</p>\n<p>See <a href=\"https://www.python.org/dev/peps/pep-0513/#versioning-of-core-shared-libraries\" rel=\"nofollow\">https://www.python.org/dev/peps/pep-0513/#versioning-of-core-shared-libraries</a> for why they chose not to statically link <code>glibc</code>.</p>", "body_text": "@apaszke, do you mean glibc? The manylinux1 strategy is to dynamically link against a sufficiently old version of glibc (specifically from CentOS 5.11). Newer versions of glibc are backwards compatible, so they're OK.\nSee https://www.python.org/dev/peps/pep-0513/#versioning-of-core-shared-libraries for why they chose not to statically link glibc.", "body": "@apaszke, do you mean `glibc`? The `manylinux1` strategy is to dynamically link against a sufficiently old version of `glibc` (specifically from CentOS 5.11). Newer versions of `glibc` are backwards compatible, so they're OK.\r\n\r\nSee https://www.python.org/dev/peps/pep-0513/#versioning-of-core-shared-libraries for why they chose not to statically link `glibc`."}