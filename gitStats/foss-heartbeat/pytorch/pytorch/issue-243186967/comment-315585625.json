{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/315585625", "html_url": "https://github.com/pytorch/pytorch/pull/2113#issuecomment-315585625", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2113", "id": 315585625, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTU4NTYyNQ==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-16T04:55:09Z", "updated_at": "2017-07-16T04:55:09Z", "author_association": "MEMBER", "body_html": "<p>shipping <code>libstdc++.so</code> is terrible terrible advice, I dont know why the author of that stackoverflow post even suggested it. Maybe the author was talking in the context of independent executables that dont interoperate with anything else (in this context it slightly makes sense).</p>\n<blockquote>\n<p>It sounds like this missing symbols might have to do with dlopen or other C++ libraries we link dynamically against.</p>\n</blockquote>\n<p>No, this was a multi-day investigation and I still haven't concluded the exact cause, but this is the commit that introduced the regression where <code>static-libstdc++</code> stopped working: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/pytorch/pytorch/commit/702a2e3bc5b2e5b85cef901ce939bc2b9220e568/hovercard\" href=\"https://github.com/pytorch/pytorch/commit/702a2e3bc5b2e5b85cef901ce939bc2b9220e568\"><tt>702a2e3</tt></a></p>\n<p>By stopped working, I mean: compiled with linker flag <code>-static-libstdc++</code>, but at runtime on another machine with an older / different libstdc++, the program was failing to load with unresolved symbols like <code>_ZTISt12bad_weak_ptr</code> (and <code>nm -u _C.so</code> confirms the same).</p>\n<p>The commit adds usage of <code>weak_ptr</code>, but somehow <code>static-libstdc++</code> is not linking destructor and other minor symbols of this class (and a similar story around other particular <code>std::</code> symbols).<br>\nHere's a debug output for example:</p>\n<pre><code>nm -u /opt/python/cp27-cp27m/lib/python2.7/site-packages/torch/_C.so | grep bad_weak\n                 U _ZNSt12bad_weak_ptrD1Ev\n                 U _ZTISt12bad_weak_ptr\n                 U _ZTVSt12bad_weak_ptr\n</code></pre>\n<p>From reading a bunch of stuff online, it seems like the only problematic issues with <code>missing symbols might have to do with dlopen</code> come when loading dynamic libraries that themselves might have c++ symbols not resolved (these dependent dylibs are not statically linked against libstdc++), this doesn't apply to us, as each of the dylibs we care about, we do link against libstdc++.</p>", "body_text": "shipping libstdc++.so is terrible terrible advice, I dont know why the author of that stackoverflow post even suggested it. Maybe the author was talking in the context of independent executables that dont interoperate with anything else (in this context it slightly makes sense).\n\nIt sounds like this missing symbols might have to do with dlopen or other C++ libraries we link dynamically against.\n\nNo, this was a multi-day investigation and I still haven't concluded the exact cause, but this is the commit that introduced the regression where static-libstdc++ stopped working: 702a2e3\nBy stopped working, I mean: compiled with linker flag -static-libstdc++, but at runtime on another machine with an older / different libstdc++, the program was failing to load with unresolved symbols like _ZTISt12bad_weak_ptr (and nm -u _C.so confirms the same).\nThe commit adds usage of weak_ptr, but somehow static-libstdc++ is not linking destructor and other minor symbols of this class (and a similar story around other particular std:: symbols).\nHere's a debug output for example:\nnm -u /opt/python/cp27-cp27m/lib/python2.7/site-packages/torch/_C.so | grep bad_weak\n                 U _ZNSt12bad_weak_ptrD1Ev\n                 U _ZTISt12bad_weak_ptr\n                 U _ZTVSt12bad_weak_ptr\n\nFrom reading a bunch of stuff online, it seems like the only problematic issues with missing symbols might have to do with dlopen come when loading dynamic libraries that themselves might have c++ symbols not resolved (these dependent dylibs are not statically linked against libstdc++), this doesn't apply to us, as each of the dylibs we care about, we do link against libstdc++.", "body": "shipping `libstdc++.so` is terrible terrible advice, I dont know why the author of that stackoverflow post even suggested it. Maybe the author was talking in the context of independent executables that dont interoperate with anything else (in this context it slightly makes sense).\r\n\r\n> It sounds like this missing symbols might have to do with dlopen or other C++ libraries we link dynamically against.\r\n\r\nNo, this was a multi-day investigation and I still haven't concluded the exact cause, but this is the commit that introduced the regression where `static-libstdc++` stopped working: https://github.com/pytorch/pytorch/commit/702a2e3bc5b2e5b85cef901ce939bc2b9220e568\r\n\r\nBy stopped working, I mean: compiled with linker flag `-static-libstdc++`, but at runtime on another machine with an older / different libstdc++, the program was failing to load with unresolved symbols like `_ZTISt12bad_weak_ptr` (and `nm -u _C.so` confirms the same).\r\n\r\nThe commit adds usage of `weak_ptr`, but somehow `static-libstdc++` is not linking destructor and other minor symbols of this class (and a similar story around other particular `std::` symbols).\r\nHere's a debug output for example:\r\n```\r\nnm -u /opt/python/cp27-cp27m/lib/python2.7/site-packages/torch/_C.so | grep bad_weak\r\n                 U _ZNSt12bad_weak_ptrD1Ev\r\n                 U _ZTISt12bad_weak_ptr\r\n                 U _ZTVSt12bad_weak_ptr\r\n```\r\n\r\nFrom reading a bunch of stuff online, it seems like the only problematic issues with `missing symbols might have to do with dlopen` come when loading dynamic libraries that themselves might have c++ symbols not resolved (these dependent dylibs are not statically linked against libstdc++), this doesn't apply to us, as each of the dylibs we care about, we do link against libstdc++."}