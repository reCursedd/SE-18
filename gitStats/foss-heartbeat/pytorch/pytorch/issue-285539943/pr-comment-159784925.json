{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159784925", "pull_request_review_id": 86793964, "id": 159784925, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTc4NDkyNQ==", "diff_hunk": "@@ -1055,5 +1068,107 @@ def test_laplace_shape_tensor_params(self):\n         self.assertRaises(ValueError, laplace.log_prob, self.tensor_sample_2)\n \n \n+class TestNumericalStability(TestCase):\n+    def _test_pdf_score(self,\n+                        dist_class,\n+                        x,\n+                        expected_value,\n+                        probs=None,\n+                        logits=None,\n+                        expected_gradient=None,\n+                        prec=1e-5):\n+        if probs is not None:\n+            p = Variable(probs, requires_grad=True)\n+            dist = dist_class(p)\n+        else:\n+            p = Variable(logits, requires_grad=True)\n+            dist = dist_class(logits=p)\n+        log_pdf = dist.log_prob(Variable(x))\n+        log_pdf.sum().backward()\n+        self.assertEqual(log_pdf.data,\n+                         expected_value,\n+                         prec=prec,\n+                         message='Failed for tensor type: {}. Expected = {}, Actual = {}'\n+                         .format(type(x), expected_value, log_pdf.data))\n+        if expected_gradient is not None:\n+            self.assertEqual(p.grad.data,\n+                             expected_gradient,\n+                             prec=prec,\n+                             message='Failed for tensor type: {}. Expected = {}, Actual = {}'\n+                             .format(type(x), expected_gradient, p.grad.data))\n+\n+    def test_bernoulli_gradient(self):\n+        for tensor_type in [torch.FloatTensor, torch.DoubleTensor]:\n+            self._test_pdf_score(dist_class=Bernoulli,\n+                                 probs=tensor_type([0]),\n+                                 x=tensor_type([0]),\n+                                 expected_value=tensor_type([0]),\n+                                 expected_gradient=tensor_type([0]))\n+\n+            self._test_pdf_score(dist_class=Bernoulli,\n+                                 probs=tensor_type([0]),\n+                                 x=tensor_type([1]),\n+                                 expected_value=tensor_type([_get_clamping_buffer(tensor_type([]))]).log(),\n+                                 expected_gradient=tensor_type([0]))\n+\n+            self._test_pdf_score(dist_class=Bernoulli,\n+                                 probs=tensor_type([1e-4]),\n+                                 x=tensor_type([1]),\n+                                 expected_value=tensor_type([math.log(1e-4)]),\n+                                 expected_gradient=tensor_type([10000]))\n+\n+            # Lower precision due to:\n+            # >>> 1 / (1 - torch.FloatTensor([0.9999]))\n+            # 9998.3408", "path": "test/test_distributions.py", "position": 91, "original_position": 91, "commit_id": "c0cca3bfb188f1588c6276e9235b56447b5cc530", "original_commit_id": "49c7a118ba82cdb5d09f169b6a29f98eb24c4892", "user": {"login": "neerajprad", "id": 1762463, "node_id": "MDQ6VXNlcjE3NjI0NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1762463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neerajprad", "html_url": "https://github.com/neerajprad", "followers_url": "https://api.github.com/users/neerajprad/followers", "following_url": "https://api.github.com/users/neerajprad/following{/other_user}", "gists_url": "https://api.github.com/users/neerajprad/gists{/gist_id}", "starred_url": "https://api.github.com/users/neerajprad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neerajprad/subscriptions", "organizations_url": "https://api.github.com/users/neerajprad/orgs", "repos_url": "https://api.github.com/users/neerajprad/repos", "events_url": "https://api.github.com/users/neerajprad/events{/privacy}", "received_events_url": "https://api.github.com/users/neerajprad/received_events", "type": "User", "site_admin": false}, "body": "Thanks. What I found interesting for `FloatTensor` (`DoubleTensor` returns expected result to first five decimal places at least) was that the result is less than `10,000` for `0.9999` and beyond. I am probably missing some floating point arithmetic details here! \r\n\r\ne.g.\r\n```\r\n>>> 1/(1-torch.FloatTensor([0.99]))\r\n 100.0001\r\n[torch.FloatTensor of size 1]\r\n\r\n>>> 1/(1-torch.FloatTensor([0.999]))\r\n 1000.0129\r\n[torch.FloatTensor of size 1]\r\n\r\n>>> 1/(1-torch.FloatTensor([0.9999]))\r\n 9998.3408\r\n[torch.FloatTensor of size 1]\r\n\r\n```\r\n\r\n\r\n", "created_at": "2018-01-04T23:56:30Z", "updated_at": "2018-11-23T15:37:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/4448#discussion_r159784925", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4448", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159784925"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4448#discussion_r159784925"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4448"}}, "body_html": "<p>Thanks. What I found interesting for <code>FloatTensor</code> (<code>DoubleTensor</code> returns expected result to first five decimal places at least) was that the result is less than <code>10,000</code> for <code>0.9999</code> and beyond. I am probably missing some floating point arithmetic details here!</p>\n<p>e.g.</p>\n<pre><code>&gt;&gt;&gt; 1/(1-torch.FloatTensor([0.99]))\n 100.0001\n[torch.FloatTensor of size 1]\n\n&gt;&gt;&gt; 1/(1-torch.FloatTensor([0.999]))\n 1000.0129\n[torch.FloatTensor of size 1]\n\n&gt;&gt;&gt; 1/(1-torch.FloatTensor([0.9999]))\n 9998.3408\n[torch.FloatTensor of size 1]\n\n</code></pre>", "body_text": "Thanks. What I found interesting for FloatTensor (DoubleTensor returns expected result to first five decimal places at least) was that the result is less than 10,000 for 0.9999 and beyond. I am probably missing some floating point arithmetic details here!\ne.g.\n>>> 1/(1-torch.FloatTensor([0.99]))\n 100.0001\n[torch.FloatTensor of size 1]\n\n>>> 1/(1-torch.FloatTensor([0.999]))\n 1000.0129\n[torch.FloatTensor of size 1]\n\n>>> 1/(1-torch.FloatTensor([0.9999]))\n 9998.3408\n[torch.FloatTensor of size 1]", "in_reply_to_id": 159776202}