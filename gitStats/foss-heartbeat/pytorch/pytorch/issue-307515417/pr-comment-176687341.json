{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176687341", "pull_request_review_id": 106435563, "id": 176687341, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjY4NzM0MQ==", "diff_hunk": "@@ -354,19 +355,34 @@ class AffineTransform(Transform):\n \n     def __init__(self, loc, scale, event_dim=0, cache_size=0):\n         super(AffineTransform, self).__init__(cache_size=cache_size)\n-        self.loc, self.scale = broadcast_all(loc, scale)\n+        self.loc = loc\n+        self.scale = scale", "path": "torch/distributions/transforms.py", "position": null, "original_position": 27, "commit_id": "5940a3017e6892f01328dc02c6afb73352e387ba", "original_commit_id": "3a25db73c8fa4cf5fe53705bb392c711dd95b980", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I don't think you need to know that exactly. If they are tensors, then keep them like it, and if they are scalars then we are actually in the process of adding support for implicit casting, so you can probably safely use the default tensor type (`torch.tensor(loc)`). See #5864.", "created_at": "2018-03-23T10:06:53Z", "updated_at": "2018-11-23T15:41:02Z", "html_url": "https://github.com/pytorch/pytorch/pull/5931#discussion_r176687341", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5931", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/176687341"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5931#discussion_r176687341"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5931"}}, "body_html": "<p>I don't think you need to know that exactly. If they are tensors, then keep them like it, and if they are scalars then we are actually in the process of adding support for implicit casting, so you can probably safely use the default tensor type (<code>torch.tensor(loc)</code>). See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"306291411\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/5864\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/5864/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/5864\">#5864</a>.</p>", "body_text": "I don't think you need to know that exactly. If they are tensors, then keep them like it, and if they are scalars then we are actually in the process of adding support for implicit casting, so you can probably safely use the default tensor type (torch.tensor(loc)). See #5864.", "in_reply_to_id": 176361909}