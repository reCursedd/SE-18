{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/8885", "id": 197279707, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk3Mjc5NzA3", "html_url": "https://github.com/pytorch/pytorch/pull/8885", "diff_url": "https://github.com/pytorch/pytorch/pull/8885.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/8885.patch", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8885", "number": 8885, "state": "closed", "locked": false, "title": "Unify aten_dispatch and aten_schema into a single operator abstraction with human-readable schema.", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This is a series of two commits that should probably be read separately. They are stacked on top of #9018 since the second commit requires it for correctness. \r\n\r\n\r\nCommit 1\r\n=======\r\n\r\nThis commit is the first in a series that will clean up how we handle declaring operators and intrinsics in the JIT to make it more modular and readable. This introduces readable declarations that can be used to register operators and switches gen_jit_dispatch to generate this schema. A follow up PR will remove the dispatch keys like \"add-3\" and resolve ops directly based on the registered schema, further simplifying the generation process.\r\n\r\n* Switches schema over to parsed declarations, in the future this will allow something like:\r\n\r\n```\r\n  registry.register_intrinsic(\"foo(Tensor a, Tensor b) -> Tensor\", [](Stack& stack) {\r\n    ...\r\n  })\r\n```\r\n\r\nThis will allow the scalable registration of intrinsics for lists, tuples, and other ops, as long as meta-data for these ops (e.g. derivatives and size propagation routines).\r\n\r\nThe declarations resemble those used by PythonArgParser but have been singificantly cleaned up to minimize the number of types that can appear in the declaration. We should strive to get the other parts of PyTorch switched over to this restricted declaration set when possible, but it is too much to do in a single PR. My hope is that eventually we will use a very similar language to describe declarations in C10, and this can serve as a guide for that.\r\n\r\nParsing is done using the script lexer, so it is very robust to whitespace and extensible for future types.\r\n\r\nThis removes the other way we encoded schema, and makes it easier to see what schema are registered.\r\n\r\nCurrent generated declarations: https://gist.github.com/zdevito/a96a17766fb3a098d69a91ee00abaaf6\r\n\r\n* Switches how we handle attempting to use an integer in the place of a fixed-sized int list, such as in conv (e.g. 'int[3] stride=1'). Now that we can statically distinguish between int and Tensor, we handle the expansion as an implicit conversion in the compiler. This allows us to simplify the interpreter since it no longer needs to handle the conversion itself.\r\n\r\n* Schema declarations have been changed so that they match the type system in the IR exactly. In particular, attribute_info which was used by liftConstantAttributes has been dropped and constant attributes are lifted purely based on the type of the input. Type conversions in compiler have been simplified due to this change.\r\n\r\n* Error highlighting in ErrorReport now only reports at most 20 lines of code, to make reading where an error occurred easier.\r\n\r\nCommit 2\r\n=======\r\n\r\nThis commit unifies aten_dispatch and aten_schema into a single Operator object that both contains schema and implementation information. In the future we can use this object to also contain functionality like shape prop and autodiff needed by all operators. Operators are registered globally, and dispatch logic uses the schema information to figure out which variant to use. Descriptor keys, a frequent source of inscrutable debug errors, have been removed.\r\n\r\n* Introduce Operator, to replace TensorOp. Unlike TensorOp, we use Operator for all op implementations, including primitives that may occur in the graphs. The only exceptions are ops that are only known to the interpreter like jumps, and GraphExecutors where we need to record additional debug info.\r\n\r\n* Adds a global registry for Operator implementations. aten_dispatch.cpp turns into register_aten_ops.cpp, which registers all the Operators for aten with the operator registry. register_prim_ops.cpp now contains the implementations for primitive operators that used to be in the interpreter. This means that it is now safe to use `getOperation(node)` to lookup the true interpreter function for the node, which will simplify const-propagation passes.\r\n\r\n* Remove addInterpreterOpHandler in favor of global operator registry.\r\n\r\n* Instead of descriptors, we match Node arguments directly against FunctionSchema describing expected inputs in `matchSchema`. `matchSchema` knows how parse both attributes and positional inputs from a node and match it to the appropriate registered operator. Debug error messages when we try to run an invalid operator are significantly improved: they now automatically display the schema for the op with the same name that are registered.\r\n\r\n* Merge aten_schema into regsiter_aten_ops. Each Operator takes a string schema which is parsed to determine when to dispatch to that op.\r\n\r\n* Cleans up gen_jit_dispatch.py now that we do not need to write out descriptors.  In particular, skip_scalar_overloads can be removed since Richard's code sorts declarations to put Tensor, Tensor declarations first.\r\n\r\n* remove matchSchemaAndLiftConstantAttributes and use emitBuiltinCall instead to remove code duplication\r\n\r\n* refactor stack manipulation functions into a separate header file.\r\n", "created_at": "2018-06-26T01:45:19Z", "updated_at": "2018-11-23T15:46:51Z", "closed_at": "2018-07-10T17:25:46Z", "merged_at": null, "merge_commit_sha": "d0cdd9ca1deb5e446e5d2c74079c3e7c4ab405f8", "assignee": null, "assignees": [], "requested_reviewers": [{"login": "orionr", "id": 79994, "node_id": "MDQ6VXNlcjc5OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/79994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orionr", "html_url": "https://github.com/orionr", "followers_url": "https://api.github.com/users/orionr/followers", "following_url": "https://api.github.com/users/orionr/following{/other_user}", "gists_url": "https://api.github.com/users/orionr/gists{/gist_id}", "starred_url": "https://api.github.com/users/orionr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orionr/subscriptions", "organizations_url": "https://api.github.com/users/orionr/orgs", "repos_url": "https://api.github.com/users/orionr/repos", "events_url": "https://api.github.com/users/orionr/events{/privacy}", "received_events_url": "https://api.github.com/users/orionr/received_events", "type": "User", "site_admin": false}, {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}], "requested_teams": [], "labels": [], "milestone": null, "commits_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8885/commits", "review_comments_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8885/comments", "review_comment_url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8885/comments", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/1efd5a0aff5427596ececb2c851b1ef6291a707b", "head": {"label": "zdevito:pr/schema_dispatch_merge", "ref": "pr/schema_dispatch_merge", "sha": "1efd5a0aff5427596ececb2c851b1ef6291a707b", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "repo": {"id": 93195556, "node_id": "MDEwOlJlcG9zaXRvcnk5MzE5NTU1Ng==", "name": "pytorch", "full_name": "zdevito/pytorch", "private": false, "owner": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "html_url": "https://github.com/zdevito/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": true, "url": "https://api.github.com/repos/zdevito/pytorch", "forks_url": "https://api.github.com/repos/zdevito/pytorch/forks", "keys_url": "https://api.github.com/repos/zdevito/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/zdevito/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/zdevito/pytorch/teams", "hooks_url": "https://api.github.com/repos/zdevito/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/zdevito/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/zdevito/pytorch/events", "assignees_url": "https://api.github.com/repos/zdevito/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/zdevito/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/zdevito/pytorch/tags", "blobs_url": "https://api.github.com/repos/zdevito/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/zdevito/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/zdevito/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/zdevito/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/zdevito/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/zdevito/pytorch/languages", "stargazers_url": "https://api.github.com/repos/zdevito/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/zdevito/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/zdevito/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/zdevito/pytorch/subscription", "commits_url": "https://api.github.com/repos/zdevito/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/zdevito/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/zdevito/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/zdevito/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/zdevito/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/zdevito/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/zdevito/pytorch/merges", "archive_url": "https://api.github.com/repos/zdevito/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/zdevito/pytorch/downloads", "issues_url": "https://api.github.com/repos/zdevito/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/zdevito/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/zdevito/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/zdevito/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/zdevito/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/zdevito/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/zdevito/pytorch/deployments", "created_at": "2017-06-02T19:00:07Z", "updated_at": "2018-11-13T19:07:38Z", "pushed_at": "2018-11-20T02:26:06Z", "git_url": "git://github.com/zdevito/pytorch.git", "ssh_url": "git@github.com:zdevito/pytorch.git", "clone_url": "https://github.com/zdevito/pytorch.git", "svn_url": "https://github.com/zdevito/pytorch", "homepage": "http://pytorch.org", "size": 87173, "stargazers_count": 0, "watchers_count": 0, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 0, "mirror_url": null, "archived": false, "open_issues_count": 7, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 0, "open_issues": 7, "watchers": 0, "default_branch": "master"}}, "base": {"label": "pytorch:master", "ref": "master", "sha": "f40ed548d85ee55c0fc0d0e06a313054599f0346", "user": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 65600975, "node_id": "MDEwOlJlcG9zaXRvcnk2NTYwMDk3NQ==", "name": "pytorch", "full_name": "pytorch/pytorch", "private": false, "owner": {"login": "pytorch", "id": 21003710, "node_id": "MDEyOk9yZ2FuaXphdGlvbjIxMDAzNzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/21003710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pytorch", "html_url": "https://github.com/pytorch", "followers_url": "https://api.github.com/users/pytorch/followers", "following_url": "https://api.github.com/users/pytorch/following{/other_user}", "gists_url": "https://api.github.com/users/pytorch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pytorch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pytorch/subscriptions", "organizations_url": "https://api.github.com/users/pytorch/orgs", "repos_url": "https://api.github.com/users/pytorch/repos", "events_url": "https://api.github.com/users/pytorch/events{/privacy}", "received_events_url": "https://api.github.com/users/pytorch/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/pytorch/pytorch", "description": "Tensors and Dynamic neural networks in Python  with strong GPU acceleration", "fork": false, "url": "https://api.github.com/repos/pytorch/pytorch", "forks_url": "https://api.github.com/repos/pytorch/pytorch/forks", "keys_url": "https://api.github.com/repos/pytorch/pytorch/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/pytorch/pytorch/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/pytorch/pytorch/teams", "hooks_url": "https://api.github.com/repos/pytorch/pytorch/hooks", "issue_events_url": "https://api.github.com/repos/pytorch/pytorch/issues/events{/number}", "events_url": "https://api.github.com/repos/pytorch/pytorch/events", "assignees_url": "https://api.github.com/repos/pytorch/pytorch/assignees{/user}", "branches_url": "https://api.github.com/repos/pytorch/pytorch/branches{/branch}", "tags_url": "https://api.github.com/repos/pytorch/pytorch/tags", "blobs_url": "https://api.github.com/repos/pytorch/pytorch/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/pytorch/pytorch/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/pytorch/pytorch/git/refs{/sha}", "trees_url": "https://api.github.com/repos/pytorch/pytorch/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/pytorch/pytorch/statuses/{sha}", "languages_url": "https://api.github.com/repos/pytorch/pytorch/languages", "stargazers_url": "https://api.github.com/repos/pytorch/pytorch/stargazers", "contributors_url": "https://api.github.com/repos/pytorch/pytorch/contributors", "subscribers_url": "https://api.github.com/repos/pytorch/pytorch/subscribers", "subscription_url": "https://api.github.com/repos/pytorch/pytorch/subscription", "commits_url": "https://api.github.com/repos/pytorch/pytorch/commits{/sha}", "git_commits_url": "https://api.github.com/repos/pytorch/pytorch/git/commits{/sha}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/comments{/number}", "issue_comment_url": "https://api.github.com/repos/pytorch/pytorch/issues/comments{/number}", "contents_url": "https://api.github.com/repos/pytorch/pytorch/contents/{+path}", "compare_url": "https://api.github.com/repos/pytorch/pytorch/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/pytorch/pytorch/merges", "archive_url": "https://api.github.com/repos/pytorch/pytorch/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/pytorch/pytorch/downloads", "issues_url": "https://api.github.com/repos/pytorch/pytorch/issues{/number}", "pulls_url": "https://api.github.com/repos/pytorch/pytorch/pulls{/number}", "milestones_url": "https://api.github.com/repos/pytorch/pytorch/milestones{/number}", "notifications_url": "https://api.github.com/repos/pytorch/pytorch/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/pytorch/pytorch/labels{/name}", "releases_url": "https://api.github.com/repos/pytorch/pytorch/releases{/id}", "deployments_url": "https://api.github.com/repos/pytorch/pytorch/deployments", "created_at": "2016-08-13T05:26:41Z", "updated_at": "2018-11-24T05:35:41Z", "pushed_at": "2018-11-24T05:34:07Z", "git_url": "git://github.com/pytorch/pytorch.git", "ssh_url": "git@github.com:pytorch/pytorch.git", "clone_url": "https://github.com/pytorch/pytorch.git", "svn_url": "https://github.com/pytorch/pytorch", "homepage": "http://pytorch.org", "size": 89651, "stargazers_count": 21577, "watchers_count": 21577, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": true, "has_pages": false, "forks_count": 5149, "mirror_url": null, "archived": false, "open_issues_count": 2193, "license": {"key": "other", "name": "Other", "spdx_id": "NOASSERTION", "url": null, "node_id": "MDc6TGljZW5zZTA="}, "forks": 5149, "open_issues": 2193, "watchers": 21577, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8885"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8885"}, "issue": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/8885"}, "comments": {"href": "https://api.github.com/repos/pytorch/pytorch/issues/8885/comments"}, "review_comments": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8885/comments"}, "review_comment": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8885/commits"}, "statuses": {"href": "https://api.github.com/repos/pytorch/pytorch/statuses/1efd5a0aff5427596ececb2c851b1ef6291a707b"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>This is a series of two commits that should probably be read separately. They are stacked on top of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"336860517\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/9018\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/9018/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/9018\">#9018</a> since the second commit requires it for correctness.</p>\n<h1>Commit 1</h1>\n<p>This commit is the first in a series that will clean up how we handle declaring operators and intrinsics in the JIT to make it more modular and readable. This introduces readable declarations that can be used to register operators and switches gen_jit_dispatch to generate this schema. A follow up PR will remove the dispatch keys like \"add-3\" and resolve ops directly based on the registered schema, further simplifying the generation process.</p>\n<ul>\n<li>Switches schema over to parsed declarations, in the future this will allow something like:</li>\n</ul>\n<pre><code>  registry.register_intrinsic(\"foo(Tensor a, Tensor b) -&gt; Tensor\", [](Stack&amp; stack) {\n    ...\n  })\n</code></pre>\n<p>This will allow the scalable registration of intrinsics for lists, tuples, and other ops, as long as meta-data for these ops (e.g. derivatives and size propagation routines).</p>\n<p>The declarations resemble those used by PythonArgParser but have been singificantly cleaned up to minimize the number of types that can appear in the declaration. We should strive to get the other parts of PyTorch switched over to this restricted declaration set when possible, but it is too much to do in a single PR. My hope is that eventually we will use a very similar language to describe declarations in C10, and this can serve as a guide for that.</p>\n<p>Parsing is done using the script lexer, so it is very robust to whitespace and extensible for future types.</p>\n<p>This removes the other way we encoded schema, and makes it easier to see what schema are registered.</p>\n<p>Current generated declarations: <a href=\"https://gist.github.com/zdevito/a96a17766fb3a098d69a91ee00abaaf6\">https://gist.github.com/zdevito/a96a17766fb3a098d69a91ee00abaaf6</a></p>\n<ul>\n<li>\n<p>Switches how we handle attempting to use an integer in the place of a fixed-sized int list, such as in conv (e.g. 'int[3] stride=1'). Now that we can statically distinguish between int and Tensor, we handle the expansion as an implicit conversion in the compiler. This allows us to simplify the interpreter since it no longer needs to handle the conversion itself.</p>\n</li>\n<li>\n<p>Schema declarations have been changed so that they match the type system in the IR exactly. In particular, attribute_info which was used by liftConstantAttributes has been dropped and constant attributes are lifted purely based on the type of the input. Type conversions in compiler have been simplified due to this change.</p>\n</li>\n<li>\n<p>Error highlighting in ErrorReport now only reports at most 20 lines of code, to make reading where an error occurred easier.</p>\n</li>\n</ul>\n<h1>Commit 2</h1>\n<p>This commit unifies aten_dispatch and aten_schema into a single Operator object that both contains schema and implementation information. In the future we can use this object to also contain functionality like shape prop and autodiff needed by all operators. Operators are registered globally, and dispatch logic uses the schema information to figure out which variant to use. Descriptor keys, a frequent source of inscrutable debug errors, have been removed.</p>\n<ul>\n<li>\n<p>Introduce Operator, to replace TensorOp. Unlike TensorOp, we use Operator for all op implementations, including primitives that may occur in the graphs. The only exceptions are ops that are only known to the interpreter like jumps, and GraphExecutors where we need to record additional debug info.</p>\n</li>\n<li>\n<p>Adds a global registry for Operator implementations. aten_dispatch.cpp turns into register_aten_ops.cpp, which registers all the Operators for aten with the operator registry. register_prim_ops.cpp now contains the implementations for primitive operators that used to be in the interpreter. This means that it is now safe to use <code>getOperation(node)</code> to lookup the true interpreter function for the node, which will simplify const-propagation passes.</p>\n</li>\n<li>\n<p>Remove addInterpreterOpHandler in favor of global operator registry.</p>\n</li>\n<li>\n<p>Instead of descriptors, we match Node arguments directly against FunctionSchema describing expected inputs in <code>matchSchema</code>. <code>matchSchema</code> knows how parse both attributes and positional inputs from a node and match it to the appropriate registered operator. Debug error messages when we try to run an invalid operator are significantly improved: they now automatically display the schema for the op with the same name that are registered.</p>\n</li>\n<li>\n<p>Merge aten_schema into regsiter_aten_ops. Each Operator takes a string schema which is parsed to determine when to dispatch to that op.</p>\n</li>\n<li>\n<p>Cleans up gen_jit_dispatch.py now that we do not need to write out descriptors.  In particular, skip_scalar_overloads can be removed since Richard's code sorts declarations to put Tensor, Tensor declarations first.</p>\n</li>\n<li>\n<p>remove matchSchemaAndLiftConstantAttributes and use emitBuiltinCall instead to remove code duplication</p>\n</li>\n<li>\n<p>refactor stack manipulation functions into a separate header file.</p>\n</li>\n</ul>", "body_text": "This is a series of two commits that should probably be read separately. They are stacked on top of #9018 since the second commit requires it for correctness.\nCommit 1\nThis commit is the first in a series that will clean up how we handle declaring operators and intrinsics in the JIT to make it more modular and readable. This introduces readable declarations that can be used to register operators and switches gen_jit_dispatch to generate this schema. A follow up PR will remove the dispatch keys like \"add-3\" and resolve ops directly based on the registered schema, further simplifying the generation process.\n\nSwitches schema over to parsed declarations, in the future this will allow something like:\n\n  registry.register_intrinsic(\"foo(Tensor a, Tensor b) -> Tensor\", [](Stack& stack) {\n    ...\n  })\n\nThis will allow the scalable registration of intrinsics for lists, tuples, and other ops, as long as meta-data for these ops (e.g. derivatives and size propagation routines).\nThe declarations resemble those used by PythonArgParser but have been singificantly cleaned up to minimize the number of types that can appear in the declaration. We should strive to get the other parts of PyTorch switched over to this restricted declaration set when possible, but it is too much to do in a single PR. My hope is that eventually we will use a very similar language to describe declarations in C10, and this can serve as a guide for that.\nParsing is done using the script lexer, so it is very robust to whitespace and extensible for future types.\nThis removes the other way we encoded schema, and makes it easier to see what schema are registered.\nCurrent generated declarations: https://gist.github.com/zdevito/a96a17766fb3a098d69a91ee00abaaf6\n\n\nSwitches how we handle attempting to use an integer in the place of a fixed-sized int list, such as in conv (e.g. 'int[3] stride=1'). Now that we can statically distinguish between int and Tensor, we handle the expansion as an implicit conversion in the compiler. This allows us to simplify the interpreter since it no longer needs to handle the conversion itself.\n\n\nSchema declarations have been changed so that they match the type system in the IR exactly. In particular, attribute_info which was used by liftConstantAttributes has been dropped and constant attributes are lifted purely based on the type of the input. Type conversions in compiler have been simplified due to this change.\n\n\nError highlighting in ErrorReport now only reports at most 20 lines of code, to make reading where an error occurred easier.\n\n\nCommit 2\nThis commit unifies aten_dispatch and aten_schema into a single Operator object that both contains schema and implementation information. In the future we can use this object to also contain functionality like shape prop and autodiff needed by all operators. Operators are registered globally, and dispatch logic uses the schema information to figure out which variant to use. Descriptor keys, a frequent source of inscrutable debug errors, have been removed.\n\n\nIntroduce Operator, to replace TensorOp. Unlike TensorOp, we use Operator for all op implementations, including primitives that may occur in the graphs. The only exceptions are ops that are only known to the interpreter like jumps, and GraphExecutors where we need to record additional debug info.\n\n\nAdds a global registry for Operator implementations. aten_dispatch.cpp turns into register_aten_ops.cpp, which registers all the Operators for aten with the operator registry. register_prim_ops.cpp now contains the implementations for primitive operators that used to be in the interpreter. This means that it is now safe to use getOperation(node) to lookup the true interpreter function for the node, which will simplify const-propagation passes.\n\n\nRemove addInterpreterOpHandler in favor of global operator registry.\n\n\nInstead of descriptors, we match Node arguments directly against FunctionSchema describing expected inputs in matchSchema. matchSchema knows how parse both attributes and positional inputs from a node and match it to the appropriate registered operator. Debug error messages when we try to run an invalid operator are significantly improved: they now automatically display the schema for the op with the same name that are registered.\n\n\nMerge aten_schema into regsiter_aten_ops. Each Operator takes a string schema which is parsed to determine when to dispatch to that op.\n\n\nCleans up gen_jit_dispatch.py now that we do not need to write out descriptors.  In particular, skip_scalar_overloads can be removed since Richard's code sorts declarations to put Tensor, Tensor declarations first.\n\n\nremove matchSchemaAndLiftConstantAttributes and use emitBuiltinCall instead to remove code duplication\n\n\nrefactor stack manipulation functions into a separate header file.", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 6, "review_comments": 39, "maintainer_can_modify": false, "commits": 3, "additions": 1291, "deletions": 991, "changed_files": 33}