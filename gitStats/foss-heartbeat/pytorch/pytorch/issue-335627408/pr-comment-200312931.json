{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200312931", "pull_request_review_id": 134601815, "id": 200312931, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDMxMjkzMQ==", "diff_hunk": "@@ -203,49 +207,179 @@ struct SchemaParser {\n   }\n   Lexer L;\n   bool kwarg_only;\n-  at::Tensor one = at::full({}, 1, at::kLong);\n-  at::Tensor zero = at::full({}, 0, at::kLong);\n+  static at::Tensor one() {\n+    static at::Tensor v = at::full({}, 1, at::kLong);\n+    return v;\n+  }\n+  static at::Tensor zero() {\n+    static at::Tensor v = at::full({}, 0, at::kLong);\n+    return v;\n+  }\n };\n }\n \n-using SchemaMap = std::unordered_map<std::string, std::vector<FunctionSchema>>;\n \n-// defined in aten_schema_declarations.cpp\n-extern const char * schema_declarations;\n+namespace {\n+\n+using OperatorMap = std::unordered_map<Symbol, std::vector<std::shared_ptr<Operator>>>;\n+struct OperatorRegistry  {\n+  OperatorMap operators;\n+  std::mutex lock;\n+  void registerOperator(Operator&& op){\n+    std::lock_guard<std::mutex> guard(lock);\n+    Symbol sym = Symbol::fromQualString(op.schema.name);\n+    auto it = operators.find(sym);\n+    if(it == operators.end()) {\n+      it = operators.insert({sym, {}}).first;\n+    }\n+    it->second.push_back(std::make_shared<Operator>(std::move(op)));\n+  }\n+  const std::vector<std::shared_ptr<Operator>>& getOperators(Symbol name) {", "path": "torch/csrc/jit/operator.cpp", "position": null, "original_position": 69, "commit_id": "1efd5a0aff5427596ececb2c851b1ef6291a707b", "original_commit_id": "1715f95129be14a369d9c5324f601abdcabc6a77", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Not a big deal, but I would kind of like to see this returning at::optional. That way it's clear it doesn't raise an lookup failures. This is important here, because the likely usage is\r\n```cpp\r\nfor (auto & operator : operators) {\r\n  ...\r\n}\r\n```\r\nand this might silently ignore the fact that there are no operators matched.", "created_at": "2018-07-05T11:01:23Z", "updated_at": "2018-11-23T15:46:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200312931", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8885", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200312931"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200312931"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8885"}}, "body_html": "<p>Not a big deal, but I would kind of like to see this returning at::optional. That way it's clear it doesn't raise an lookup failures. This is important here, because the likely usage is</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">for</span> (<span class=\"pl-k\">auto</span> &amp; <span class=\"pl-k\">operator</span> : operators) {\n  ...\n}</pre></div>\n<p>and this might silently ignore the fact that there are no operators matched.</p>", "body_text": "Not a big deal, but I would kind of like to see this returning at::optional. That way it's clear it doesn't raise an lookup failures. This is important here, because the likely usage is\nfor (auto & operator : operators) {\n  ...\n}\nand this might silently ignore the fact that there are no operators matched."}