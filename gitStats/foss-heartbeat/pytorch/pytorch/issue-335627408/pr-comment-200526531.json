{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200526531", "pull_request_review_id": 134860958, "id": 200526531, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDUyNjUzMQ==", "diff_hunk": "@@ -366,87 +372,102 @@ def declkey(decl):\n     write(out, 'aten_interned_strings.h', ATEN_INTERNED_STRINGS_H, strings_env)\n \n \n-def emit_schema(jit_decls, out, template_path):\n-    ATEN_SCHEMA_CPP = CodeTemplate.from_file(template_path + '/aten_schema.cpp')\n+# JIT has a type system of\n+# Scalar = int | float | bool # int is the largest int (int64_t),\n+# float is the largest float (double) we don't have the others because they are never held in tensors\n+# Type = Scalar # primitive numbers\n+#      | Tensor # any tensor, as defined by at::Tensor\n+#      | Type[] # a dynamically sizes list of a type\n+#      | Scalar[N] # a homogenous fixed size scalar list, single scalars can expand to this list\n+#      | (Type1, Type2, ...) # a heterogenous tuple\n+#      | Layout | ScalarType | Device | Generator # special singleton types for built-in concepts in tensor lib\n+\n+# clean up the variety of C++ types in the ATen declarations\n+# to be in the restricted set of types that the IR represents\n+# note: no default values for this map, to make it clear what types\n+# can be passedthrough\n+\n+TYPE_MAP = {\n+    'std::array<bool,2>': 'bool[2]',\n+    'std::array<bool,3>': 'bool[3]',\n+    'std::array<bool,4>': 'bool[4]',\n+    'Scalar': 'Scalar',\n+    'Tensor': 'Tensor',\n+    'TensorList': 'Tensor[]',\n+    # this appears in return values instead of TensorList\n+    # since TensorList is a ArrayRef in arguments but a vector\n+    # in returns\n+    'std::vector<Tensor>': 'Tensor[]',\n+    'IntList': 'int[]',\n+    'Layout': 'Layout',\n+    'Device': 'Device',\n+    'ScalarType': 'ScalarType',\n+    'int64_t': 'int',\n+    'double': 'float',\n+    'bool': 'bool',\n+    'Generator': 'Generator',\n+}\n \n-    # see [aten_schema encoding] for how this gets translated to C++ object\n+default_map = {'{}': 'None', 'nullptr': 'None'}", "path": "tools/jit/gen_jit_dispatch.py", "position": null, "original_position": 156, "commit_id": "1efd5a0aff5427596ececb2c851b1ef6291a707b", "original_commit_id": "717abe9074bdb912aef72a8e19122fa4a6c3d89d", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Yep, there are a bunch of weird strings that appear in the yaml directly which this code is cleaning up. ", "created_at": "2018-07-06T00:59:17Z", "updated_at": "2018-11-23T15:46:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200526531", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8885", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200526531"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200526531"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8885"}}, "body_html": "<p>Yep, there are a bunch of weird strings that appear in the yaml directly which this code is cleaning up.</p>", "body_text": "Yep, there are a bunch of weird strings that appear in the yaml directly which this code is cleaning up.", "in_reply_to_id": 200141989}