{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200529961", "pull_request_review_id": 134864802, "id": 200529961, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDUyOTk2MQ==", "diff_hunk": "@@ -0,0 +1,68 @@\n+// in memory description of all ATen Ops similar to Caffe2 schema\n+// once C10 exists this can be removed, or stubbed out, but we need\n+// it now to implement correct semantic checking for script\n+#pragma once\n+#include \"ATen/ATen.h\"\n+#include \"torch/csrc/jit/ir.h\"\n+#include \"torch/csrc/jit/function_schema.h\"\n+#include \"torch/csrc/jit/stack_functions.h\"\n+\n+namespace torch { namespace jit {\n+\n+FunctionSchema parseSchema(const std::string& decl);\n+\n+using OperationCreator = std::function<Operation(Node*)>;\n+\n+struct Operator {\n+  Operator(FunctionSchema schema, OperationCreator op, OperationCreator op_const_attributes = nullptr)\n+    : schema(std::move(schema))\n+    , op(op)\n+    , op_const_attributes(op_const_attributes) {}\n+\n+  Operator(const std::string& schema, OperationCreator op, OperationCreator op_const_attributes = nullptr)\n+    : Operator(parseSchema(schema), op, op_const_attributes) {}\n+\n+  // primitive registration, creates a vararg schema with no required\n+  // arguments", "path": "torch/csrc/jit/operator.h", "position": null, "original_position": 26, "commit_id": "1efd5a0aff5427596ececb2c851b1ef6291a707b", "original_commit_id": "1715f95129be14a369d9c5324f601abdcabc6a77", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Yeah, I will clarify the comment. Basically \"primitive\" is just suppose to mean: I want anything with this kind to match this implementation. It is used for things like `While`, `If`, and `Load` where the typesystem is not rich enough to capture the valid types, and where the node was only ever inserted by the compiler anyway so its schema is correct by construction.", "created_at": "2018-07-06T01:31:40Z", "updated_at": "2018-11-23T15:46:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200529961", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8885", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200529961"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200529961"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8885"}}, "body_html": "<p>Yeah, I will clarify the comment. Basically \"primitive\" is just suppose to mean: I want anything with this kind to match this implementation. It is used for things like <code>While</code>, <code>If</code>, and <code>Load</code> where the typesystem is not rich enough to capture the valid types, and where the node was only ever inserted by the compiler anyway so its schema is correct by construction.</p>", "body_text": "Yeah, I will clarify the comment. Basically \"primitive\" is just suppose to mean: I want anything with this kind to match this implementation. It is used for things like While, If, and Load where the typesystem is not rich enough to capture the valid types, and where the node was only ever inserted by the compiler anyway so its schema is correct by construction.", "in_reply_to_id": 200313104}