{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200312675", "pull_request_review_id": 134601815, "id": 200312675, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDMxMjY3NQ==", "diff_hunk": "@@ -222,46 +280,25 @@ def emit_decl_variant(decl, is_positional_arg, has_tensorlist):\n                 pos_assignments.append(assign)\n                 arguments.append(arg['name'])\n             else:\n+                attr_method = attr_of(jit_type_of(arg))\n                 simple_type = arg['simple_type']\n-\n-                assert simple_type in ATTR_METHOD_MAP, (decl['name'], simple_type)\n-                attr_method = ATTR_METHOD_MAP[simple_type]\n-                assign = KW_ASSIGNMENT.substitute(type_cast=TYPE_CASTS.get(simple_type, simple_type),\n+                assign = KW_ASSIGNMENT.substitute(type_cast=FROM_ATTRIBUTE.get(simple_type, simple_type),\n                                                   name=arg['name'],\n                                                   method=attr_method)\n                 kw_assignments.append(assign)\n-                attr_names.append('{}_{}'.format(arg['name'], attr_method))\n                 arguments.append(arg['name'])\n \n         call = get_invocation(decl, arguments, num_dynamic_inputs)\n \n-        # Descriptor is a unique identifier for a particular overload of an op.\n-        attr_names = sorted(attr_names)\n-        num_inputs = '*' if has_tensorlist else static_inputs\n-        descriptor = '-'.join([decl['name'], str(num_inputs)] + attr_names)\n-\n-        # If there are two overloads with the same descriptor, that differ only by a type of a\n-        # single argument, where one of them takes a tensor, while another one takes an\n-        # at::Scalar as a positional scalar arg, then prefer the tensor overload.\n-        # It should get broadcasted correctly.\n-        if descriptor in skip_scalar_overload:\n-            if any(decl['arguments'][idx]['simple_type'] in {'Scalar', 'double'}\n-                   for idx in skip_scalar_overload[descriptor]):\n-                return\n-\n         returns = decl['returns']\n         all_scalars = all(r['dynamic_type'] != 'TensorList' for r in returns)\n-        num_outputs = str(len(returns)) if all_scalars else 'UNKNOWN_OUTPUTS'\n \n-        constructor = CONSTRUCTOR.substitute(descriptor=descriptor, name=decl['name'],\n-                                             call=call,\n+        constructor = CONSTRUCTOR.substitute(name=decl['name'],\n+                                             call=[call],", "path": "tools/jit/gen_jit_dispatch.py", "position": null, "original_position": 233, "commit_id": "1efd5a0aff5427596ececb2c851b1ef6291a707b", "original_commit_id": "1715f95129be14a369d9c5324f601abdcabc6a77", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "why is this a singleton array?", "created_at": "2018-07-05T11:00:13Z", "updated_at": "2018-11-23T15:46:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200312675", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8885", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200312675"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200312675"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8885"}}, "body_html": "<p>why is this a singleton array?</p>", "body_text": "why is this a singleton array?"}