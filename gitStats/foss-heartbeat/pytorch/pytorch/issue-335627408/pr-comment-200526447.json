{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200526447", "pull_request_review_id": 134860868, "id": 200526447, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDUyNjQ0Nw==", "diff_hunk": "@@ -366,87 +372,102 @@ def declkey(decl):\n     write(out, 'aten_interned_strings.h', ATEN_INTERNED_STRINGS_H, strings_env)\n \n \n-def emit_schema(jit_decls, out, template_path):\n-    ATEN_SCHEMA_CPP = CodeTemplate.from_file(template_path + '/aten_schema.cpp')\n+# JIT has a type system of\n+# Scalar = int | float | bool # int is the largest int (int64_t),\n+# float is the largest float (double) we don't have the others because they are never held in tensors\n+# Type = Scalar # primitive numbers\n+#      | Tensor # any tensor, as defined by at::Tensor\n+#      | Type[] # a dynamically sizes list of a type", "path": "tools/jit/gen_jit_dispatch.py", "position": null, "original_position": 124, "commit_id": "1efd5a0aff5427596ececb2c851b1ef6291a707b", "original_commit_id": "717abe9074bdb912aef72a8e19122fa4a6c3d89d", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Not this PR, but making it possible in the future to have a file `register_list_ops.cpp` that can add all the interpreter implementations for list. ", "created_at": "2018-07-06T00:58:25Z", "updated_at": "2018-11-23T15:46:50Z", "html_url": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200526447", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8885", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/200526447"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8885#discussion_r200526447"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8885"}}, "body_html": "<p>Not this PR, but making it possible in the future to have a file <code>register_list_ops.cpp</code> that can add all the interpreter implementations for list.</p>", "body_text": "Not this PR, but making it possible in the future to have a file register_list_ops.cpp that can add all the interpreter implementations for list.", "in_reply_to_id": 200141704}