{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217937289", "pull_request_review_id": 155768037, "id": 217937289, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkzNzI4OQ==", "diff_hunk": "@@ -7320,22 +7320,51 @@ def test_norm_fastpaths(self):\n         expected = torch.pow(x.pow(3).abs().sum(1), 1.0 / 3.0)\n         self.assertEqual(result, expected)\n \n-    def test_bernoulli(self):\n-        t = torch.ByteTensor(10, 10)\n+    @staticmethod\n+    def _test_bernoulli(self, p_dtype, device):\n+        for trivial_p in ([0, 1], [1, 0, 1, 1, 0, 1]):\n+            x = torch.tensor(trivial_p, dtype=p_dtype, device=device)\n+            self.assertEqual(x.bernoulli().tolist(), trivial_p)\n \n         def isBinary(t):\n-            return torch.ne(t, 0).mul_(torch.ne(t, 1)).sum() == 0\n+            return torch.ne(t, 0).mul_(torch.ne(t, 1)).sum().item() == 0\n \n-        p = 0.5\n-        t.bernoulli_(p)\n+        p = torch.rand(5, 5, dtype=p_dtype, device=device)\n+        self.assertTrue(isBinary(p.bernoulli()))\n+\n+        p = torch.rand(5, dtype=p_dtype, device=device).expand(5, 5)\n+        self.assertTrue(isBinary(p.bernoulli()))\n+\n+        p = torch.rand(5, 5, dtype=p_dtype, device=device)\n+        torch.bernoulli(torch.rand_like(p), out=p)\n+        self.assertTrue(isBinary(p))\n+\n+        p = torch.rand(5, dtype=p_dtype, device=device).expand(5, 5)\n+        torch.bernoulli(torch.rand_like(p), out=p)\n+        self.assertTrue(isBinary(p))\n+\n+        # test that it works with integral tensors\n+        t = torch.empty(10, 10, dtype=torch.uint8, device=device)\n+\n+        t.fill_(2)\n+        t.bernoulli_(0.5)\n         self.assertTrue(isBinary(t))\n \n-        p = torch.rand(10, 10)\n+        p = torch.rand(10, dtype=p_dtype, device=device).expand(10, 10)\n+        t.fill_(2)\n         t.bernoulli_(p)\n         self.assertTrue(isBinary(t))\n \n-        q = torch.rand(5, 5)\n-        self.assertTrue(isBinary(q.bernoulli()))\n+        t.fill_(2)\n+        torch.bernoulli(torch.rand_like(t, dtype=p_dtype), out=t)\n+        self.assertTrue(isBinary(t))\n+\n+        t.fill_(2)\n+        t.bernoulli_(torch.rand_like(t, dtype=p_dtype))\n+        self.assertTrue(isBinary(t))\n+\n+    def test_bernoulli(self):\n+        self._test_bernoulli(self, torch.double, 'cpu')", "path": "test/test_torch.py", "position": 56, "original_position": 56, "commit_id": "e4013d853c2a9a837f6d396f156a4a60eeff8119", "original_commit_id": "9986cd4b590828c858f0575ce6bcbad9664b84a5", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "In test_cuda.py", "created_at": "2018-09-17T01:44:32Z", "updated_at": "2018-11-23T15:51:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/10273#discussion_r217937289", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10273", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217937289"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10273#discussion_r217937289"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10273"}}, "body_html": "<p>In test_cuda.py</p>", "body_text": "In test_cuda.py", "in_reply_to_id": 217936373}