{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210068053", "pull_request_review_id": 146207589, "id": 210068053, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA2ODA1Mw==", "diff_hunk": "@@ -104,53 +115,143 @@ int64_t sample_poisson(double lambda, THGenerator* generator) {\n   }\n }\n \n-} // namespace\n+#if AT_MKL_ENABLED()\n \n-namespace at {\n-namespace native {\n+#define BERNOULLI_OMP 800\n+\n+template<typename scalar_t>\n+inline void bernoulli_scalar_cpu_mkl_(at::Tensor &self, const double p, THGenerator* gen) {\n+  int64_t seed = THRandom_random(gen);\n+  int64_t n = self.numel();\n+  bool contig = self.is_contiguous();\n+  at::Tensor tmp_int_tensor = at::empty(self.sizes(), self.options().dtype(at::kInt));\n+  scalar_t *self_ptr = self.data<scalar_t>();\n+  int *sample_int_ptr = tmp_int_tensor.data<int>();\n \n-Tensor bernoulli(const Tensor& self, const Tensor& p, Generator* gen) {\n-  Tensor result = self.type().tensor();\n-  result.resize_(self.sizes());\n-  return native::bernoulli_(result, p, gen);\n+#ifdef _OPENMP\n+  size_t nthr = !omp_in_parallel() && n >= BERNOULLI_OMP ? omp_get_num_threads() : 1;\n+#pragma omp parallel num_threads(nthr) firstprivate(nthr)\n+  {\n+    size_t tid = omp_get_thread_num();\n+    int64_t seg_len_tmp = n / nthr;\n+    int64_t line_index_offset = tid * seg_len_tmp;\n+    int64_t line_seg_len = (tid == nthr - 1) ? (n - line_index_offset) : seg_len_tmp;\n+#else\n+  {\n+    int64_t line_index_offset = 0;\n+    int64_t line_seg_len = n;\n+#endif\n+\n+    if (line_seg_len > 0) {\n+      VSLStreamStatePtr stream;\n+      vslNewStream(&stream, VSL_BRNG_MCG31, seed);\n+      vslSkipAheadStream(stream, line_index_offset);\n+      viRngBernoulli(VSL_RNG_METHOD_BERNOULLI_ICDF, stream, line_seg_len,\n+        sample_int_ptr + line_index_offset, p);\n+      vslDeleteStream(&stream);\n+\n+      if (contig) {\n+        scalar_t *self_seg = self_ptr + line_index_offset;\n+        int* tmp_seg = sample_int_ptr + line_index_offset;\n+        at::vec256::convert<int, scalar_t>(tmp_seg, self_seg, line_seg_len);", "path": "aten/src/ATen/native/Distributions.cpp", "position": null, "original_position": 77, "commit_id": "e4013d853c2a9a837f6d396f156a4a60eeff8119", "original_commit_id": "70ae05c9c753f2db5c03b88576e425647d05b300", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "okay i know why this is slower. fix incoming", "created_at": "2018-08-14T19:02:56Z", "updated_at": "2018-11-23T15:49:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/10273#discussion_r210068053", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10273", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210068053"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10273#discussion_r210068053"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10273"}}, "body_html": "<p>okay i know why this is slower. fix incoming</p>", "body_text": "okay i know why this is slower. fix incoming"}