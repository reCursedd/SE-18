{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217936258", "pull_request_review_id": 155766806, "id": 217936258, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkzNjI1OA==", "diff_hunk": "@@ -92,6 +97,81 @@ void gamma_grad_cuda_kernel(\n       });\n }\n \n+template<typename scalar_t, typename prob_t>\n+void bernoulli_tensor_cuda_kernel(\n+    at::Tensor& ret, const at::Tensor& p,\n+    std::pair<uint64_t, uint64_t> seeds) {\n+  // The template argument `4` below indicates that we want to operate on four\n+  // element at each time. See NOTE [ CUDA_tensor_applyN helpers ] for details.\n+  at::cuda::CUDA_tensor_apply2<scalar_t, prob_t, 4>(\n+      ret, p,\n+      [seeds] __device__(\n+          int n, scalar_t& v1, scalar_t& v2, scalar_t& v3, scalar_t& v4,\n+          const prob_t& p1, const prob_t& p2, const prob_t& p3, const prob_t& p4) {\n+        curandStatePhilox4_32_10_t state;\n+        curand_init(\n+            seeds.first,\n+            blockIdx.x * blockDim.x + threadIdx.x,\n+            seeds.second,\n+            &state);\n+        float4 rand = curand_uniform4(&state);\n+        switch (n) {\n+          case 4: {\n+            assert(0 <= p4 && p4 <= 1);\n+            v4 = static_cast<scalar_t>(rand.w <= p4);\n+          }\n+          case 3: {\n+            assert(0 <= p3 && p3 <= 1);\n+            v3 = static_cast<scalar_t>(rand.z <= p3);\n+          }\n+          case 2: {\n+            assert(0 <= p2 && p2 <= 1);\n+            v2 = static_cast<scalar_t>(rand.y <= p2);\n+          }\n+          case 1: {\n+            assert(0 <= p1 && p1 <= 1);\n+            v1 = static_cast<scalar_t>(rand.x <= p1);\n+          }\n+        }\n+      }\n+    );\n+}\n+\n+template<typename scalar_t>\n+void bernoulli_scalar_cuda_kernel(\n+    at::Tensor& ret, double p_,\n+    std::pair<uint64_t, uint64_t> seeds) {\n+  float p = static_cast<float>(p_);\n+  // The template argument `4` below indicates that we want to operate on four\n+  // element at each time. See NOTE [ CUDA_tensor_applyN helpers ] for details.\n+  at::cuda::CUDA_tensor_apply1<scalar_t, 4>(\n+      ret, [seeds, p] __device__(\n+        int n, scalar_t& v1, scalar_t& v2, scalar_t& v3, scalar_t& v4) {\n+        curandStatePhilox4_32_10_t state;\n+        curand_init(\n+            seeds.first,\n+            blockIdx.x * blockDim.x + threadIdx.x,\n+            seeds.second,\n+            &state);\n+        float4 rand = curand_uniform4(&state);\n+        switch (n) {\n+          case 4: {\n+            v4 = static_cast<scalar_t>(rand.w <= p);\n+          }", "path": "aten/src/ATen/native/cuda/Distributions.cu", "position": null, "original_position": 89, "commit_id": "e4013d853c2a9a837f6d396f156a4a60eeff8119", "original_commit_id": "9986cd4b590828c858f0575ce6bcbad9664b84a5", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "`// fallthrough` here too", "created_at": "2018-09-17T01:24:51Z", "updated_at": "2018-11-23T15:51:27Z", "html_url": "https://github.com/pytorch/pytorch/pull/10273#discussion_r217936258", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10273", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/217936258"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10273#discussion_r217936258"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10273"}}, "body_html": "<p><code>// fallthrough</code> here too</p>", "body_text": "// fallthrough here too"}