{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114816396", "pull_request_review_id": 36308153, "id": 114816396, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDgxNjM5Ng==", "diff_hunk": "@@ -62,27 +63,89 @@ struct NoCtor {\n };\n \n template<typename C, typename T>\n-static void addClass(PyObject* module, PyTypeObject& type, const char* name)\n+static void addClass(PyObject* module, PyTypeObject& type, const char* name,\n+  PyGetSetDef* function_properties=NULL, PyMethodDef* function_methods=NULL)\n {\n-  createForwardFunctionPyTypeObject<T>(type, name);\n+  createForwardFunctionPyTypeObject<T>(type, name, function_properties, function_methods);\n   Py_INCREF(&type);\n   PyModule_AddObject(module, name, (PyObject*)&type);\n   registerCppFunction(typeid(C), &type);\n }\n \n+template<typename T, typename ValueT, typename ParamsT, ValueT ParamsT::*ptr,\n+         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)>\n+PyObject* getTupleAttr(PyObject* obj, void* _unused)\n+{\n+  HANDLE_TH_ERRORS\n+  THPCppFunction* self = (THPCppFunction*)obj;\n+  auto& arr = (T*)(self->cdata.get())->*ptr;\n+  auto num_elems = arr.size();\n+  THPObjectPtr py_tuple = PyTuple_New(num_elems);\n+  if (!py_tuple) return NULL;\n+  for (size_t i = 0; i < num_elems; ++i) {\n+    PyTuple_SET_ITEM(py_tuple.get(), i, Convert(arr[i]));\n+  }\n+  return py_tuple.release();\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+template<typename T, typename ValueT, typename ParamsT, ValueT ParamsT::*ptr,\n+         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)>\n+PyObject* getValueAttr(PyObject* obj, void* _unused)\n+{\n+  HANDLE_TH_ERRORS\n+  THPCppFunction* self = (THPCppFunction*)obj;\n+  auto& val = (T*)(self->cdata.get())->*ptr;\n+  return Convert(val);\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+static struct PyGetSetDef conv_forward_properties[] = {\n+  THP_FUNCTION_DEFAULT_PROPERTIES,\n+  {(char*)\"stride\", (getter)getTupleAttr<ConvForward, std::vector<int>, ConvParams, \n+                                         &ConvParams::stride, long, PyInt_FromLong>, NULL, NULL, NULL},\n+  {(char*)\"padding\", (getter)getTupleAttr<ConvForward, std::vector<int>, ConvParams, \n+                                         &ConvParams::padding, long, PyInt_FromLong>, NULL, NULL, NULL},\n+  {(char*)\"dilation\", (getter)getTupleAttr<ConvForward, std::vector<int>, ConvParams, \n+                                         &ConvParams::dilation, long, PyInt_FromLong>, NULL, NULL, NULL},\n+  {(char*)\"transposed\", (getter)getValueAttr<ConvForward, bool, ConvParams, \n+                                         &ConvParams::transposed, long, PyBool_FromLong>, NULL, NULL, NULL},\n+  {(char*)\"output_padding\", (getter)getTupleAttr<ConvForward, std::vector<int>, ConvParams, \n+                                         &ConvParams::output_padding, long, PyInt_FromLong>, NULL, NULL, NULL},", "path": "torch/csrc/autograd/functions/init.cpp", "position": 116, "original_position": 62, "commit_id": "f885c05a12df250b91102d96e933afd47a2c5003", "original_commit_id": "2d24ece21c8914f10e2c07570f645ee9a6877e73", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "I originally avoided the ParamsT template argument and just went with &ConvForward::output_padding (same for the other params), but the compiler was complaining that the member pointer template parameter was specified incorrectly (I can reconstruct the error if you'd like).\r\nMaybe it's a corner case (member pointer template parameter from a multiple inheritance parent), but the only way I could make it work was to explicitly reference the member in the context of the class it was defined in (ConvParams).", "created_at": "2017-05-04T15:45:11Z", "updated_at": "2018-11-23T15:33:20Z", "html_url": "https://github.com/pytorch/pytorch/pull/1430#discussion_r114816396", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1430", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/114816396"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1430#discussion_r114816396"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1430"}}, "body_html": "<p>I originally avoided the ParamsT template argument and just went with &amp;ConvForward::output_padding (same for the other params), but the compiler was complaining that the member pointer template parameter was specified incorrectly (I can reconstruct the error if you'd like).<br>\nMaybe it's a corner case (member pointer template parameter from a multiple inheritance parent), but the only way I could make it work was to explicitly reference the member in the context of the class it was defined in (ConvParams).</p>", "body_text": "I originally avoided the ParamsT template argument and just went with &ConvForward::output_padding (same for the other params), but the compiler was complaining that the member pointer template parameter was specified incorrectly (I can reconstruct the error if you'd like).\nMaybe it's a corner case (member pointer template parameter from a multiple inheritance parent), but the only way I could make it work was to explicitly reference the member in the context of the class it was defined in (ConvParams).", "in_reply_to_id": 114758673}