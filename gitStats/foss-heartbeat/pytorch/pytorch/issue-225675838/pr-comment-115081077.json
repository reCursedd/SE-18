{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115081077", "pull_request_review_id": 36601843, "id": 115081077, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTA4MTA3Nw==", "diff_hunk": "@@ -62,27 +63,89 @@ struct NoCtor {\n };\n \n template<typename C, typename T>\n-static void addClass(PyObject* module, PyTypeObject& type, const char* name)\n+static void addClass(PyObject* module, PyTypeObject& type, const char* name,\n+  PyGetSetDef* function_properties=NULL, PyMethodDef* function_methods=NULL)\n {\n-  createForwardFunctionPyTypeObject<T>(type, name);\n+  createForwardFunctionPyTypeObject<T>(type, name, function_properties, function_methods);\n   Py_INCREF(&type);\n   PyModule_AddObject(module, name, (PyObject*)&type);\n   registerCppFunction(typeid(C), &type);\n }\n \n+template<typename T, typename ValueT, typename ParamsT, ValueT ParamsT::*ptr,\n+         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)>\n+PyObject* getTupleAttr(PyObject* obj, void* _unused)\n+{\n+  HANDLE_TH_ERRORS\n+  THPCppFunction* self = (THPCppFunction*)obj;\n+  auto& arr = (T*)(self->cdata.get())->*ptr;\n+  auto num_elems = arr.size();\n+  THPObjectPtr py_tuple = PyTuple_New(num_elems);\n+  if (!py_tuple) return NULL;\n+  for (size_t i = 0; i < num_elems; ++i) {\n+    PyTuple_SET_ITEM(py_tuple.get(), i, Convert(arr[i]));\n+  }\n+  return py_tuple.release();\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+template<typename T, typename ValueT, typename ParamsT, ValueT ParamsT::*ptr,\n+         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)>\n+PyObject* getValueAttr(PyObject* obj, void* _unused)\n+{\n+  HANDLE_TH_ERRORS\n+  THPCppFunction* self = (THPCppFunction*)obj;\n+  auto& val = (T*)(self->cdata.get())->*ptr;\n+  return Convert(val);\n+  END_HANDLE_TH_ERRORS\n+}\n+\n+static struct PyGetSetDef conv_forward_properties[] = {\n+  THP_FUNCTION_DEFAULT_PROPERTIES,\n+  {(char*)\"stride\", (getter)getTupleAttr<ConvForward, std::vector<int>, ConvParams, \n+                                         &ConvParams::stride, long, PyInt_FromLong>, NULL, NULL, NULL},\n+  {(char*)\"padding\", (getter)getTupleAttr<ConvForward, std::vector<int>, ConvParams, \n+                                         &ConvParams::padding, long, PyInt_FromLong>, NULL, NULL, NULL},\n+  {(char*)\"dilation\", (getter)getTupleAttr<ConvForward, std::vector<int>, ConvParams, \n+                                         &ConvParams::dilation, long, PyInt_FromLong>, NULL, NULL, NULL},\n+  {(char*)\"transposed\", (getter)getValueAttr<ConvForward, bool, ConvParams, \n+                                         &ConvParams::transposed, long, PyBool_FromLong>, NULL, NULL, NULL},\n+  {(char*)\"output_padding\", (getter)getTupleAttr<ConvForward, std::vector<int>, ConvParams, \n+                                         &ConvParams::output_padding, long, PyInt_FromLong>, NULL, NULL, NULL},", "path": "torch/csrc/autograd/functions/init.cpp", "position": 116, "original_position": 62, "commit_id": "f885c05a12df250b91102d96e933afd47a2c5003", "original_commit_id": "2d24ece21c8914f10e2c07570f645ee9a6877e73", "user": {"login": "lantiga", "id": 191033, "node_id": "MDQ6VXNlcjE5MTAzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/191033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lantiga", "html_url": "https://github.com/lantiga", "followers_url": "https://api.github.com/users/lantiga/followers", "following_url": "https://api.github.com/users/lantiga/following{/other_user}", "gists_url": "https://api.github.com/users/lantiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/lantiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lantiga/subscriptions", "organizations_url": "https://api.github.com/users/lantiga/orgs", "repos_url": "https://api.github.com/users/lantiga/repos", "events_url": "https://api.github.com/users/lantiga/events{/privacy}", "received_events_url": "https://api.github.com/users/lantiga/received_events", "type": "User", "site_admin": false}, "body": "More details on the above: removing the `ParamsT` template parameter, since `T::*ptr` should suffice, namely\r\n```\r\ntemplate<typename T, typename ValueT, ValueT T::*ptr,\r\n         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)>\r\nPyObject* getTupleAttr(PyObject* obj, void* _unused)\r\n{\r\n  HANDLE_TH_ERRORS\r\n  THPCppFunction* self = (THPCppFunction*)obj;\r\n  auto& arr = ((T*)(self->cdata.get()))->*ptr;\r\n  auto num_elems = arr.size();\r\n  THPObjectPtr py_tuple = PyTuple_New(num_elems);\r\n  if (!py_tuple) return NULL;\r\n  for (size_t i = 0; i < num_elems; ++i) {\r\n    PyTuple_SET_ITEM(py_tuple.get(), i, Convert(arr[i]));\r\n  }\r\n  return py_tuple.release();\r\n  END_HANDLE_TH_ERRORS\r\n}\r\n\r\ntemplate<typename T, typename ValueT, ValueT T::*ptr,\r\n         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)>\r\nPyObject* getValueAttr(PyObject* obj, void* _unused)\r\n{\r\n  HANDLE_TH_ERRORS\r\n  THPCppFunction* self = (THPCppFunction*)obj;\r\n  auto& val = ((T*)(self->cdata.get()))->*ptr;\r\n  return Convert(val);\r\n  END_HANDLE_TH_ERRORS\r\n}\r\n```\r\nand using `&ConvForward::output_padding` (it should be valid since `ConvForward` inherits from `ConvParams` and from `Function`) \r\n```\r\n{(char*)\"output_padding\", (getter)getTupleAttr<ConvForward, std::vector<int>,\r\n                                         &ConvForward::output_padding, long, PyInt_FromLong>, NULL, NULL, NULL},\r\n```\r\nI get the following error (macOS, clang-802.0.42):\r\n```\r\ntorch/csrc/autograd/functions/init.cpp:113:37: error: address of overloaded function 'getTupleAttr' does not match required type\r\n      '_object *(_object *, void *)'\r\n  {(char*)\"output_padding\", (getter)getTupleAttr<ConvForward, std::vector<int>,\r\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntorch/csrc/autograd/functions/init.cpp:77:11: note: candidate template ignored: invalid explicitly-specified argument for template\r\n      parameter 'ptr'\r\nPyObject* getTupleAttr(PyObject* obj, void* _unused)\r\n          ^\r\n```\r\nThings go smoothly if I provide `output_padding` as a member of `ConvParams`.\r\n\r\nDefinitely not a roadblock, but making the above work would be a bit cleaner.", "created_at": "2017-05-05T20:26:16Z", "updated_at": "2018-11-23T15:33:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/1430#discussion_r115081077", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1430", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/115081077"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1430#discussion_r115081077"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1430"}}, "body_html": "<p>More details on the above: removing the <code>ParamsT</code> template parameter, since <code>T::*ptr</code> should suffice, namely</p>\n<pre><code>template&lt;typename T, typename ValueT, ValueT T::*ptr,\n         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)&gt;\nPyObject* getTupleAttr(PyObject* obj, void* _unused)\n{\n  HANDLE_TH_ERRORS\n  THPCppFunction* self = (THPCppFunction*)obj;\n  auto&amp; arr = ((T*)(self-&gt;cdata.get()))-&gt;*ptr;\n  auto num_elems = arr.size();\n  THPObjectPtr py_tuple = PyTuple_New(num_elems);\n  if (!py_tuple) return NULL;\n  for (size_t i = 0; i &lt; num_elems; ++i) {\n    PyTuple_SET_ITEM(py_tuple.get(), i, Convert(arr[i]));\n  }\n  return py_tuple.release();\n  END_HANDLE_TH_ERRORS\n}\n\ntemplate&lt;typename T, typename ValueT, ValueT T::*ptr,\n         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)&gt;\nPyObject* getValueAttr(PyObject* obj, void* _unused)\n{\n  HANDLE_TH_ERRORS\n  THPCppFunction* self = (THPCppFunction*)obj;\n  auto&amp; val = ((T*)(self-&gt;cdata.get()))-&gt;*ptr;\n  return Convert(val);\n  END_HANDLE_TH_ERRORS\n}\n</code></pre>\n<p>and using <code>&amp;ConvForward::output_padding</code> (it should be valid since <code>ConvForward</code> inherits from <code>ConvParams</code> and from <code>Function</code>)</p>\n<pre><code>{(char*)\"output_padding\", (getter)getTupleAttr&lt;ConvForward, std::vector&lt;int&gt;,\n                                         &amp;ConvForward::output_padding, long, PyInt_FromLong&gt;, NULL, NULL, NULL},\n</code></pre>\n<p>I get the following error (macOS, clang-802.0.42):</p>\n<pre><code>torch/csrc/autograd/functions/init.cpp:113:37: error: address of overloaded function 'getTupleAttr' does not match required type\n      '_object *(_object *, void *)'\n  {(char*)\"output_padding\", (getter)getTupleAttr&lt;ConvForward, std::vector&lt;int&gt;,\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntorch/csrc/autograd/functions/init.cpp:77:11: note: candidate template ignored: invalid explicitly-specified argument for template\n      parameter 'ptr'\nPyObject* getTupleAttr(PyObject* obj, void* _unused)\n          ^\n</code></pre>\n<p>Things go smoothly if I provide <code>output_padding</code> as a member of <code>ConvParams</code>.</p>\n<p>Definitely not a roadblock, but making the above work would be a bit cleaner.</p>", "body_text": "More details on the above: removing the ParamsT template parameter, since T::*ptr should suffice, namely\ntemplate<typename T, typename ValueT, ValueT T::*ptr,\n         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)>\nPyObject* getTupleAttr(PyObject* obj, void* _unused)\n{\n  HANDLE_TH_ERRORS\n  THPCppFunction* self = (THPCppFunction*)obj;\n  auto& arr = ((T*)(self->cdata.get()))->*ptr;\n  auto num_elems = arr.size();\n  THPObjectPtr py_tuple = PyTuple_New(num_elems);\n  if (!py_tuple) return NULL;\n  for (size_t i = 0; i < num_elems; ++i) {\n    PyTuple_SET_ITEM(py_tuple.get(), i, Convert(arr[i]));\n  }\n  return py_tuple.release();\n  END_HANDLE_TH_ERRORS\n}\n\ntemplate<typename T, typename ValueT, ValueT T::*ptr,\n         typename ConvertArgT, PyObject* (*Convert)(ConvertArgT)>\nPyObject* getValueAttr(PyObject* obj, void* _unused)\n{\n  HANDLE_TH_ERRORS\n  THPCppFunction* self = (THPCppFunction*)obj;\n  auto& val = ((T*)(self->cdata.get()))->*ptr;\n  return Convert(val);\n  END_HANDLE_TH_ERRORS\n}\n\nand using &ConvForward::output_padding (it should be valid since ConvForward inherits from ConvParams and from Function)\n{(char*)\"output_padding\", (getter)getTupleAttr<ConvForward, std::vector<int>,\n                                         &ConvForward::output_padding, long, PyInt_FromLong>, NULL, NULL, NULL},\n\nI get the following error (macOS, clang-802.0.42):\ntorch/csrc/autograd/functions/init.cpp:113:37: error: address of overloaded function 'getTupleAttr' does not match required type\n      '_object *(_object *, void *)'\n  {(char*)\"output_padding\", (getter)getTupleAttr<ConvForward, std::vector<int>,\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ntorch/csrc/autograd/functions/init.cpp:77:11: note: candidate template ignored: invalid explicitly-specified argument for template\n      parameter 'ptr'\nPyObject* getTupleAttr(PyObject* obj, void* _unused)\n          ^\n\nThings go smoothly if I provide output_padding as a member of ConvParams.\nDefinitely not a roadblock, but making the above work would be a bit cleaner.", "in_reply_to_id": 114758673}