{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/394189049", "html_url": "https://github.com/pytorch/pytorch/issues/8090#issuecomment-394189049", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8090", "id": 394189049, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDE4OTA0OQ==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-03T20:30:03Z", "updated_at": "2018-06-03T21:38:11Z", "author_association": "NONE", "body_html": "<p>I wish there was a <strong>contrib</strong> repo for Models with relaxed conditions on accepting PRs (e.g. with little or no tests) with self-contained Module classes, but instead that would allow for tracking usage (through an opt-in), that way the PyTorch team can have information on popular models and focus on bringing them in a better shape. If it's refactored and a new version is available, a warning message can be shown to users. I'm thinking of a very-very lightweight package manager within PyTorch that would let importing a model from the web dynamically like <code>from torch.contrib import roi_pooling</code>, and that would download a model and place it to a local folder.</p>\n<p>An advantage over using other people's repos is predictability/easeness of importing (we know that no obscure build steps or dependencies are needed), and some guarantee that the code will stay available for some time. Then some popular models can be turned into fully-blown examples that can be used for testing PyTorch performance.</p>\n<p>I understand, there are a lot of design/ecosystem/maintenance considerations here, but it would allow to catch up with <code>tensorflow.contrib</code>.</p>\n<p>If a model's smoke test doesn't pass, a deprecation warning can be shown; or even some modules can be automatically retired. A warning may also be shown at import time by default, so that users don't expect the modules to be very actively supported.</p>", "body_text": "I wish there was a contrib repo for Models with relaxed conditions on accepting PRs (e.g. with little or no tests) with self-contained Module classes, but instead that would allow for tracking usage (through an opt-in), that way the PyTorch team can have information on popular models and focus on bringing them in a better shape. If it's refactored and a new version is available, a warning message can be shown to users. I'm thinking of a very-very lightweight package manager within PyTorch that would let importing a model from the web dynamically like from torch.contrib import roi_pooling, and that would download a model and place it to a local folder.\nAn advantage over using other people's repos is predictability/easeness of importing (we know that no obscure build steps or dependencies are needed), and some guarantee that the code will stay available for some time. Then some popular models can be turned into fully-blown examples that can be used for testing PyTorch performance.\nI understand, there are a lot of design/ecosystem/maintenance considerations here, but it would allow to catch up with tensorflow.contrib.\nIf a model's smoke test doesn't pass, a deprecation warning can be shown; or even some modules can be automatically retired. A warning may also be shown at import time by default, so that users don't expect the modules to be very actively supported.", "body": "I wish there was a **contrib** repo for Models with relaxed conditions on accepting PRs (e.g. with little or no tests) with self-contained Module classes, but instead that would allow for tracking usage (through an opt-in), that way the PyTorch team can have information on popular models and focus on bringing them in a better shape. If it's refactored and a new version is available, a warning message can be shown to users. I'm thinking of a very-very lightweight package manager within PyTorch that would let importing a model from the web dynamically like `from torch.contrib import roi_pooling`, and that would download a model and place it to a local folder.\r\n\r\nAn advantage over using other people's repos is predictability/easeness of importing (we know that no obscure build steps or dependencies are needed), and some guarantee that the code will stay available for some time. Then some popular models can be turned into fully-blown examples that can be used for testing PyTorch performance.\r\n\r\nI understand, there are a lot of design/ecosystem/maintenance considerations here, but it would allow to catch up with `tensorflow.contrib`.\r\n\r\nIf a model's smoke test doesn't pass, a deprecation warning can be shown; or even some modules can be automatically retired. A warning may also be shown at import time by default, so that users don't expect the modules to be very actively supported.\r\n"}