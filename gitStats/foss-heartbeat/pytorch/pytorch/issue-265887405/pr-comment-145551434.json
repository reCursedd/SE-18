{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145551434", "pull_request_review_id": 70368407, "id": 145551434, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTU1MTQzNA==", "diff_hunk": "@@ -0,0 +1,93 @@\n+import math\n+import torch\n+from .optimizer import Optimizer\n+\n+\n+class LazyAdam(Optimizer):\n+    \"\"\"Implements lazy version of Adam algorithm suitable for sparse tensors.\n+\n+    In this variant, only moments that show up in the gradient get updated, and\n+    only those portions of the gradient get applied to the parameters.\n+\n+    Arguments:\n+        params (iterable): iterable of parameters to optimize or dicts defining\n+            parameter groups\n+        lr (float, optional): learning rate (default: 1e-3)\n+        betas (Tuple[float, float], optional): coefficients used for computing\n+            running averages of gradient and its square (default: (0.9, 0.999))\n+        eps (float, optional): term added to the denominator to improve\n+            numerical stability (default: 1e-8)\n+        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n+\n+    .. _Adam\\: A Method for Stochastic Optimization:\n+        https://arxiv.org/abs/1412.6980\n+    \"\"\"\n+\n+    def __init__(self, params, lr=1e-3, betas=(0.9, 0.999), eps=1e-8):\n+        defaults = dict(lr=lr, betas=betas, eps=eps)\n+        super(LazyAdam, self).__init__(params, defaults)\n+\n+    def step(self, closure=None):\n+        \"\"\"Performs a single optimization step.\n+\n+        Arguments:\n+            closure (callable, optional): A closure that reevaluates the model\n+                and returns the loss.\n+        \"\"\"\n+        loss = None\n+        if closure is not None:\n+            loss = closure()\n+\n+        for group in self.param_groups:\n+            for p in group['params']:\n+                if p.grad is None:\n+                    continue\n+                grad = p.grad.data\n+                if not grad.is_sparse:\n+                    raise RuntimeError('LazyAdam does not support dense gradients, please consider using Adam instead')\n+\n+                state = self.state[p]\n+\n+                # State initialization\n+                if len(state) == 0:\n+                    state['step'] = 0\n+                    # Exponential moving average of gradient values\n+                    state['exp_avg'] = p.data.new().resize_as_(p.data).zero_()\n+                    # Exponential moving average of squared gradient values\n+                    state['exp_avg_sq'] = p.data.new().resize_as_(p.data).zero_()\n+\n+                state['step'] += 1\n+\n+                grad = grad.coalesce()  # the update is non-linear so indices must be unique\n+                grad_indices = grad._indices()\n+                grad_values = grad._values()\n+                grad_values_sq = grad_values.pow(2)\n+                size = torch.Size([x for x in grad.size()])\n+\n+                def make_sparse(values):\n+                    constructor = type(p.grad.data)\n+                    if grad_indices.dim() == 0 or values.dim() == 0:\n+                        return constructor()\n+                    return constructor(grad_indices, values, size)", "path": "torch/optim/lazy_adam.py", "position": null, "original_position": 71, "commit_id": "d632bbac9509e12bfed5b806c9a7243cf7281c91", "original_commit_id": "a67fa8da8bef5e7af9720763a21cbb39610c3539", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "This is following the sparse adagrad in https://github.com/pytorch/pytorch/blob/master/torch/optim/adagrad.py#L73-L77. I will change both places.", "created_at": "2017-10-18T21:42:44Z", "updated_at": "2018-11-23T15:35:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/3137#discussion_r145551434", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3137", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145551434"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3137#discussion_r145551434"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3137"}}, "body_html": "<p>This is following the sparse adagrad in <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/optim/adagrad.py#L73-L77\">https://github.com/pytorch/pytorch/blob/master/torch/optim/adagrad.py#L73-L77</a>. I will change both places.</p>", "body_text": "This is following the sparse adagrad in https://github.com/pytorch/pytorch/blob/master/torch/optim/adagrad.py#L73-L77. I will change both places.", "in_reply_to_id": 145380063}