{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181498736", "pull_request_review_id": 112145403, "id": 181498736, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTQ5ODczNg==", "diff_hunk": "@@ -5719,14 +5719,23 @@\n \n add_docstr(torch.zeros,\n            r\"\"\"\n-zeros(*sizes, out=None) -> Tensor\n+zeros(size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n \n Returns a tensor filled with the scalar value `0`, with the shape defined\n-by the variable argument :attr:`sizes`.\n+by the tuple :attr:`size`.\n \n Args:\n-    sizes (int...): a set of integers defining the shape of the output tensor\n+    size (int...): a tuple of integers defining the shape of the output tensor.\n     out (Tensor, optional): the output tensor\n+    dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.\n+        Default: if None, uses a global default (see :func:`torch.set_default_tensor_type`)\n+    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.\n+        Default: :class:`torch.strided`.\n+    device (:class:`torch.device`, optional): the desired device of returned tensor.\n+        Default: if None, uses a global default (see :func:`torch.set_default_tensor_type`)", "path": "torch/_torch_docs.py", "position": null, "original_position": 20, "commit_id": "7047e96fd99f94f4ac112499a7c87c52560cb519", "original_commit_id": "cc73e64ac0f8f715709a6b29bc104a45082e70a2", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "there's no global default device.  For example, different values of `with.cuda.device_of` will yield a tensor on different gpus.  This should say something like uses the current device for the corresponding default tensor type (i.e. this will be CPU for CPU tensor types, the current cuda device for cuda tensor types).", "created_at": "2018-04-13T20:12:20Z", "updated_at": "2018-11-23T15:42:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/6594#discussion_r181498736", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6594", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181498736"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6594#discussion_r181498736"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6594"}}, "body_html": "<p>there's no global default device.  For example, different values of <code>with.cuda.device_of</code> will yield a tensor on different gpus.  This should say something like uses the current device for the corresponding default tensor type (i.e. this will be CPU for CPU tensor types, the current cuda device for cuda tensor types).</p>", "body_text": "there's no global default device.  For example, different values of with.cuda.device_of will yield a tensor on different gpus.  This should say something like uses the current device for the corresponding default tensor type (i.e. this will be CPU for CPU tensor types, the current cuda device for cuda tensor types)."}