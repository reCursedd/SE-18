{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/416000450", "html_url": "https://github.com/pytorch/pytorch/pull/10815#issuecomment-416000450", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10815", "id": 416000450, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjAwMDQ1MA==", "user": {"login": "timmeinhardt", "id": 7427306, "node_id": "MDQ6VXNlcjc0MjczMDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7427306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timmeinhardt", "html_url": "https://github.com/timmeinhardt", "followers_url": "https://api.github.com/users/timmeinhardt/followers", "following_url": "https://api.github.com/users/timmeinhardt/following{/other_user}", "gists_url": "https://api.github.com/users/timmeinhardt/gists{/gist_id}", "starred_url": "https://api.github.com/users/timmeinhardt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timmeinhardt/subscriptions", "organizations_url": "https://api.github.com/users/timmeinhardt/orgs", "repos_url": "https://api.github.com/users/timmeinhardt/repos", "events_url": "https://api.github.com/users/timmeinhardt/events{/privacy}", "received_events_url": "https://api.github.com/users/timmeinhardt/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-25T22:25:52Z", "updated_at": "2018-08-25T22:38:36Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I agree that the backwards compatibility introduces quite a bit of extra complexity that seems excessive for such a small feature and, indeed, my particular problem could be solved with a closure function. But I think for reasons of consistency (see <code>Module.register_forward_hook</code> and <code>Module.register_backward_hook</code>) the object that registers the hook (in this case the <code>Tensor</code> object) should be passed to the hook itself. And from my understanding, registering and checking the signatures is a one time event which doesn't introduce expensive overhead to the general longterm runtime.</p>\n<p>I am not sure if the last failing test is due to my changes and how I can resolve it.</p>", "body_text": "@apaszke I agree that the backwards compatibility introduces quite a bit of extra complexity that seems excessive for such a small feature and, indeed, my particular problem could be solved with a closure function. But I think for reasons of consistency (see Module.register_forward_hook and Module.register_backward_hook) the object that registers the hook (in this case the Tensor object) should be passed to the hook itself. And from my understanding, registering and checking the signatures is a one time event which doesn't introduce expensive overhead to the general longterm runtime.\nI am not sure if the last failing test is due to my changes and how I can resolve it.", "body": "@apaszke I agree that the backwards compatibility introduces quite a bit of extra complexity that seems excessive for such a small feature and, indeed, my particular problem could be solved with a closure function. But I think for reasons of consistency (see `Module.register_forward_hook` and `Module.register_backward_hook`) the object that registers the hook (in this case the `Tensor` object) should be passed to the hook itself. And from my understanding, registering and checking the signatures is a one time event which doesn't introduce expensive overhead to the general longterm runtime.\r\n\r\nI am not sure if the last failing test is due to my changes and how I can resolve it."}