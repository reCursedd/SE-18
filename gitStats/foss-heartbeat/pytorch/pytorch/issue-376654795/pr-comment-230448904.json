{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230448904", "pull_request_review_id": 171196203, "id": 230448904, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ0ODkwNA==", "diff_hunk": "@@ -37,14 +41,35 @@ struct TensorGroup {\n   }\n };\n \n-std::vector<TensorGroup> take_tensors(at::TensorList tensors, size_t size_limit);\n-void reorder_tensors_like(std::vector<at::Tensor>& tensors, at::TensorList order);\n+// Helper function that take a list of tensor by the size limit, if the\n+// list of tensors are of different tensor types, each type will be taken by\n+// the size limit. In other words, the input tensor list will firstlbe bucketed\n+// by tensor types, and then each bucket will be further bucketed by size_limit\n+std::vector<TensorGroup> take_tensors(\n+    at::TensorList tensors,\n+    size_t size_limit);\n+\n+// Helper function that take a list of tensor by the size limit in a\n+// fine-grained manner. This helper will loop through the input tensor list and\n+// accumulate enough tensors (even though the tensors can be of different type)\n+// until size_limit is hit. Then for each accumulation, it will further bucket\n+// the accumulation by different types. In other words, for each size_limit's\n+// accumulation, multiple buckets are generated.", "path": "torch/csrc/utils/tensor_flatten.h", "position": null, "original_position": 57, "commit_id": "9f1e4eeab105cd57c121631d00a050d80afc0709", "original_commit_id": "a0d341aa3fd1a3b3a424fcf9af8ee75edd187c71", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "So this basically swaps the order of bucketing compared to the function above? Why would anyone want that?", "created_at": "2018-11-02T17:23:05Z", "updated_at": "2018-11-23T15:54:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/13496#discussion_r230448904", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/13496", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/230448904"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/13496#discussion_r230448904"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/13496"}}, "body_html": "<p>So this basically swaps the order of bucketing compared to the function above? Why would anyone want that?</p>", "body_text": "So this basically swaps the order of bucketing compared to the function above? Why would anyone want that?", "in_reply_to_id": 230270990}