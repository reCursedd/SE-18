{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9853", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9853/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9853/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9853/events", "html_url": "https://github.com/pytorch/pytorch/issues/9853", "id": 344654049, "node_id": "MDU6SXNzdWUzNDQ2NTQwNDk=", "number": 9853, "title": "TestSequenceOps.test_gather_padding failing", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-26T00:39:07Z", "updated_at": "2018-07-30T17:59:04Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<pre><code>=================================== FAILURES ===================================\n_____________________ TestSequenceOps.test_gather_padding ______________________\n\nself = &lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;\n\n    @given(start_pad_width=st.integers(min_value=0, max_value=2),\n&gt;          end_pad_width=st.integers(min_value=0, max_value=2),\n           args=_gen_test_add_padding(with_pad_data=True),\n           **hu.gcs)\n    def test_gather_padding(self, start_pad_width, end_pad_width, args, gc, dc):\n\nlib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../lib/python2.7/dist-packages/hypothesis/core.py:604: in execute\n    result = self.test_runner(data, run)\n../lib/python2.7/dist-packages/hypothesis/executors.py:58: in default_new_style_executor\n    return function(data)\n../lib/python2.7/dist-packages/hypothesis/core.py:595: in run\n    return test(*args, **kwargs)\nlib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py:189: in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n../lib/python2.7/dist-packages/hypothesis/core.py:542: in test\n    result = self.test(*args, **kwargs)\nlib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py:207: in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = &lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;\ndevice_option = device_type: 1\n\nop = input: \"data\"\ninput: \"lengths\"\noutput: \"start_padding\"\noutput: \"end_padding\"\nn...\narg {\n  name: \"end_padding_width\"\n  i: 0\n}\ndevice_option {\n  device_type: 1\n}\n\ninputs = [array([], dtype=float64), array([], dtype=int32)]\nreference = &lt;functools.partial object at 0x7fba1f33bb50&gt;\ninput_device_options = None, threshold = 0.0001, output_to_grad = None\ngrad_reference = None, atol = 0.0001, outputs_to_check = [0, 1]\n\n    def assertReferenceChecks(\n        self,\n        device_option,\n        op,\n        inputs,\n        reference,\n        input_device_options=None,\n        threshold=1e-4,\n        output_to_grad=None,\n        grad_reference=None,\n        atol=None,\n        outputs_to_check=None,\n    ):\n        \"\"\"\n            This runs the reference Python function implementation\n            (effectively calling `reference(*inputs)`, and compares that\n            to the output of output, with an absolute/relative tolerance\n            given by the `threshold` parameter.\n    \n            Useful for checking the implementation matches the Python\n            (typically NumPy) implementation of the same functionality.\n    \n            Usage example:\n    \n                @given(X=hu.tensor(), inplace=st.booleans(), **hu.gcs)\n                def test_softsign(self, X, inplace, gc, dc):\n                    op = core.CreateOperator(\n                        \"Softsign\", [\"X\"], [\"X\" if inplace else \"Y\"])\n    \n                    def softsign(X):\n                        return (X / (1 + np.abs(X)),)\n    \n                    self.assertReferenceChecks(gc, op, [X], softsign)\n            \"\"\"\n        op = copy.deepcopy(op)\n        op.device_option.CopyFrom(device_option)\n    \n        with temp_workspace():\n            if (len(op.input) &gt; len(inputs)):\n                raise ValueError(\n                    'must supply an input for each input on the op: %s vs %s' %\n                    (op.input, inputs))\n            _input_device_options = input_device_options or \\\n                core.InferOpBlobDevicesAsDict(op)[0]\n            for (n, b) in zip(op.input, inputs):\n                workspace.FeedBlob(\n                    n,\n                    b,\n                    device_option=_input_device_options.get(n, device_option)\n                )\n            net = core.Net(\"opnet\")\n            net.Proto().op.extend([op])\n            test_shape_inference = False\n            try:\n                (shapes, types) = workspace.InferShapesAndTypes([net])\n                test_shape_inference = True\n            except RuntimeError as e:\n                # Temporarily catch runtime errors when inferring shape\n                # and type info\n                logging.warning(str(e))\n                if os.getenv('CAFFE2_ASSERT_SHAPEINFERENCE') == '1':\n                    raise e\n            workspace.RunNetOnce(net)\n            reference_outputs = reference(*inputs)\n            if not (isinstance(reference_outputs, tuple) or\n                    isinstance(reference_outputs, list)):\n                raise RuntimeError(\n                    \"You are providing a wrong reference implementation. A \"\n                    \"proper one should return a tuple/list of numpy arrays.\")\n            if not outputs_to_check:\n                self.assertEqual(len(reference_outputs), len(op.output))\n                outputs_to_check = list(range(len(op.output)))\n            outs = []\n            for (output_index, ref) in zip(outputs_to_check, reference_outputs):\n                output_blob_name = op.output[output_index]\n                output = workspace.FetchBlob(output_blob_name)\n                if output.dtype.kind in ('S', 'O'):\n                    np.testing.assert_array_equal(output, ref)\n                else:\n                    if atol is None:\n                        atol = threshold\n                    np.testing.assert_allclose(\n                        output, ref, atol=atol, rtol=threshold,\n                        err_msg=(\n                            'Output {0} is not matching the reference'.format(\n&gt;                               output_blob_name,\n                            )),\n                    )\nE                   AssertionError: \nE                   Not equal to tolerance rtol=0.0001, atol=0.0001\nE                   Output start_padding is not matching the reference\nE                   (mismatch 100.0%)\nE                    x: array(-4618794431967920128)\nE                    y: array(0.)\n\nlib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py:575: AssertionError\n----------------------------- Captured stderr call -----------------------------\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\n------------------------------ Captured log call -------------------------------\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\n---------------------------------- Hypothesis ----------------------------------\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=2, args=(array([ 8, 10,  9,  0], dtype=int32),\n array([ 0.3465074 , -0.5783911 ,  0.3465074 ,  0.8693086 ,  0.3465074 ,\n        -0.52675825,  0.3465074 ,  0.3465074 ,  0.3465074 ,  0.9321062 ,\n        -0.9681313 ,  0.3465074 ,  0.85339016, -0.995281  ,  0.3465074 ,\n         0.3465074 ,  0.3465074 , -0.6266759 ,  0.3465074 ,  0.25781822,\n         0.3465074 ,  0.38632435, -0.44261232,  0.3465074 ,  0.86272967,\n         0.3465074 ,  0.3465074 ], dtype=float32),\n -0.7661220172644854,\n 0.32672292989354795), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=2, args=(array([10,  9, 10,  1,  7], dtype=int32),\n array([ 0.62059796,  0.62059796,  0.62059796, -0.1115087 ,  0.62059796,\n         0.62059796,  0.62059796,  0.62059796,  0.62059796,  0.03708775,\n         0.62059796,  0.62059796, -0.6321088 ,  0.62059796,  0.62059796,\n         0.8428636 , -0.97314036, -0.664075  ,  0.62059796,  0.62059796,\n         0.62059796,  0.62059796,  0.62059796,  0.62059796,  0.62059796,\n         0.5944725 ,  0.62059796,  0.62059796,  0.62059796,  0.62059796,\n         0.62059796, -0.2803797 ,  0.62059796,  0.5317449 ,  0.62059796,\n         0.62059796,  0.62059796], dtype=float32),\n -0.7638539007421339,\n -0.7086946573830012), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=2, args=(array([0, 8, 7, 4, 0], dtype=int32), array([[[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]]], dtype=float32), array([[0.41727993],\n        [0.41727993],\n        [0.41727993]], dtype=float32), array([[-0.0011362 ],\n        [-0.29718485],\n        [-0.0011362 ]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [ 0.61785346, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput end_padding is not matching the reference\n(mismatch 100.0%)\n x: array(38654705669)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [ 0.61785346, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput end_padding is not matching the reference\n(mismatch 100.0%)\n x: array(38654705669)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[ 0.61785346,  0.61785346],\n         [-0.62575763,  0.61785346],\n         [ 0.61785346,  0.61785346]],\n \n        [[ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346]],\n \n        [[ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.71080756, -0.71080756],\n        [ 0.2294148 , -0.71080756]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([ 2, 10], dtype=int32),\n array([-0.4377519 ,  0.31514454, -0.3215343 , -0.6535671 ,  0.31514454,\n         0.06280098,  0.31514454,  0.31514454,  0.31514454,  0.31514454,\n         0.35126773,  0.31514454], dtype=float32),\n -0.8295155601085189,\n 0.43787003682785286), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([ 2, 10], dtype=int32),\n array([-0.4377519 ,  0.31514454, -0.3215343 , -0.6535671 ,  0.31514454,\n         0.06280098,  0.31514454,  0.31514454,  0.31514454,  0.31514454,\n         0.35126773,  0.31514454], dtype=float32),\n -0.8295155601085189,\n 0.43787003682785286), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([ 2, 10], dtype=int32),\n array([-0.4377519 ,  0.31514454, -0.3215343 , -0.6535671 ,  0.31514454,\n         0.06280098,  0.31514454,  0.31514454,  0.31514454,  0.31514454,\n         0.35126773,  0.31514454], dtype=float32),\n -0.8295155601085189,\n 0.43787003682785286), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=0, args=(array([2, 1], dtype=int32),\n array([-0.12546732, -0.12546732, -0.12546732], dtype=float32),\n -0.6535670833836938,\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([], dtype=int32),\n array([], shape=(0, 3, 2), dtype=float32),\n array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32),\n array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=2, args=(array([], dtype=int32),\n array([], dtype=float32),\n -0.12524509770606265,\n 0.11963186579509325), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([], dtype=int32),\n array([], shape=(0, 3, 2), dtype=float32),\n array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32),\n array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=2, args=(array([], dtype=int32),\n array([], dtype=float32),\n -0.12524509770606265,\n 0.11963186579509325), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([ 3,  2, 10], dtype=int32),\n array([-1.3770291e-04, -1.3770291e-04,  6.1789516e-02, -6.5356708e-01,\n        -1.3770291e-04, -1.3770291e-04, -7.5024533e-01, -1.3770291e-04,\n        -1.3770291e-04, -1.3770291e-04,  3.5126773e-01, -1.3770291e-04,\n        -1.3770291e-04,  8.8494122e-02, -1.8391909e-01], dtype=float32),\n 0.7273016037656251,\n 0.18778884372890753), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=0, args=(array([3, 2, 1], dtype=int32),\n array([-0.12546732, -0.12546732, -0.12546732, -0.12546732, -0.12546732,\n        -0.12546732], dtype=float32),\n -0.6535670833836938,\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([ 3,  2, 10], dtype=int32),\n array([-1.3770291e-04, -1.3770291e-04,  6.1789516e-02, -6.5356708e-01,\n        -1.3770291e-04, -1.3770291e-04, -7.5024533e-01, -1.3770291e-04,\n        -1.3770291e-04, -1.3770291e-04,  3.5126773e-01, -1.3770291e-04,\n        -1.3770291e-04,  8.8494122e-02, -1.8391909e-01], dtype=float32),\n 0.7273016037656251,\n 0.18778884372890753), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=0, args=(array([3, 2, 1], dtype=int32),\n array([-0.12546732, -0.12546732, -0.12546732, -0.12546732, -0.12546732,\n        -0.12546732], dtype=float32),\n -0.6535670833836938,\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=0, args=(array([3], dtype=int32),\n array([-0.12546732, -0.12546732, -0.12546732], dtype=float32),\n -0.6535670833836938,\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32),\n array([0.24296041, 0.6318636 , 0.24296041], dtype=float32),\n 0.6178534807058208,\n -0.25014082969376666), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.17237663],\n        [-0.9245386 ]], dtype=float32), array([[0.81811625],\n        [0.08328725]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.17237663],\n        [-0.9245386 ]], dtype=float32), array([[0.81811625],\n        [0.08328725]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.17237663],\n        [-0.9245386 ]], dtype=float32), array([[0.81811625],\n        [0.08328725]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.17049105,  0.2294148 , -0.62575763],\n        [ 0.2294148 ,  0.2294148 ,  0.2294148 ],\n        [ 0.2294148 ,  0.2294148 ,  0.2294148 ]], dtype=float32), array([-0.71080756, -0.71080756, -0.71080756], dtype=float32), array([-0.50764036, -0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\n        [-0.9245386 ],\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\n        [ 0.08328725],\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]]], dtype=float32), array([[-0.4270123 , -0.9667386 , -0.4270123 ],\n        [ 0.15222359,  0.2294148 ,  0.12841824],\n        [-0.4270123 , -0.4270123 , -0.7181849 ]], dtype=float32), array([[-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\n        [-0.9245386 ],\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\n        [ 0.08328725],\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]]], dtype=float32), array([[-0.4270123 , -0.9667386 , -0.4270123 ],\n        [ 0.15222359,  0.2294148 ,  0.12841824],\n        [-0.4270123 , -0.4270123 , -0.7181849 ]], dtype=float32), array([[-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\n        [-0.9245386 ],\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\n        [ 0.08328725],\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]]], dtype=float32), array([[-0.4270123 , -0.9667386 , -0.4270123 ],\n        [ 0.15222359,  0.2294148 ,  0.12841824],\n        [-0.4270123 , -0.4270123 , -0.7181849 ]], dtype=float32), array([[-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\n        [-0.9245386 ],\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\n        [ 0.08328725],\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.71080756,  0.6818886 ]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.71080756,  0.6818886 ]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.71080756,  0.6818886 ]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [ 0.61785346, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4618794431967920128)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [ 0.61785346, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4618794431967920128)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[ 0.61785346,  0.61785346],\n         [-0.62575763,  0.61785346],\n         [ 0.61785346,  0.61785346]],\n \n        [[ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346]],\n \n        [[ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.71080756, -0.71080756],\n        [ 0.2294148 , -0.71080756]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4618794431967920128)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[ 0.2294148 ,  0.2294148 ],\n         [-0.62575763,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ]],\n \n        [[ 0.2294148 ,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ]],\n \n        [[ 0.2294148 ,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.71080756, -0.71080756],\n        [-0.71080756, -0.71080756]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652, -0.9667386 ],\n         [-0.62575763,  0.27146652],\n         [ 0.27146652,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [-0.7181849 ,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [-0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [-0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.3127855 ,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.3127855 ,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.3127855 ,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.06448297, -0.06448297],\n         [-0.62575763, -0.06448297],\n         [ 0.2294148 , -0.06448297]],\n \n        [[-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297]],\n \n        [[-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297]]], dtype=float32), array([[0.06280098, 0.06280098],\n        [0.06280098, 0.06280098],\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.06448297, -0.06448297],\n         [-0.62575763, -0.06448297],\n         [ 0.2294148 , -0.06448297]],\n \n        [[-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297]],\n \n        [[-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297]]], dtype=float32), array([[0.06280098, 0.06280098],\n        [0.06280098, 0.06280098],\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.9667386 , -0.9667386 ],\n         [-0.62575763, -0.9667386 ],\n         [ 0.2294148 , -0.9667386 ]],\n \n        [[-0.9667386 , -0.9667386 ],\n         [-0.9667386 , -0.9667386 ],\n         [-0.9667386 , -0.9667386 ]],\n \n        [[-0.9667386 , -0.9667386 ],\n         [-0.9667386 , -0.9667386 ],\n         [-0.9667386 , -0.9667386 ]]], dtype=float32), array([[-0.7181849 ,  0.27146652],\n        [-0.6544955 , -0.8447196 ],\n        [ 0.27146652,  0.27146652]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.7181849 ,  0.27146652],\n        [-0.6544955 , -0.8447196 ],\n        [ 0.27146652,  0.27146652]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.7181849 ,  0.27146652],\n        [-0.6544955 , -0.8447196 ],\n        [ 0.27146652,  0.27146652]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[0.06280098, 0.06280098],\n        [0.06280098, 0.06280098],\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[0.06280098, 0.06280098],\n        [0.06280098, 0.06280098],\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[0.9559304, 0.9559304],\n        [0.9559304, 0.9559304],\n        [0.9559304, 0.9559304]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -1.2534568e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -1.2534568e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -1.2534568e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.81298965],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[0.31514454, 0.10083199],\n        [0.31514454, 0.31514454],\n        [0.31514454, 0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[0.31514454, 0.10083199],\n        [0.31514454, 0.31514454],\n        [0.31514454, 0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.6544955, -0.725019 ],\n        [-0.6544955, -0.6544955],\n        [-0.6544955, -0.6544955]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.6544955, -0.725019 ],\n        [-0.6544955, -0.6544955],\n        [-0.6544955, -0.6544955]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.4379044 , -0.725019  ],\n        [-0.4379044 , -0.4379044 ],\n        [-0.4379044 ,  0.03525195]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.4379044 , -0.725019  ],\n        [-0.4379044 , -0.4379044 ],\n        [-0.4379044 ,  0.03525195]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.4379044 , -0.725019  ],\n        [ 0.03525195, -0.4379044 ],\n        [-0.4379044 , -0.4379044 ]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [ 0.550836  ,  0.02449792],\n        [ 0.02449792,  0.02449792]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.5017104, -0.725019 ],\n        [-0.6544955, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.25073355, -0.725019  ],\n        [-0.6544955 , -0.25073355],\n        [-0.25073355, -0.25073355]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.3693131, -0.725019 ],\n        [-0.6544955, -0.3693131],\n        [-0.3693131, -0.3693131]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.37570858, -0.725019  ],\n        [-0.6544955 ,  0.9936301 ],\n        [-0.37570858, -0.37570858]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\n        [-0.6544955 , -0.31397155],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array(0.)\n\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=1, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32),\n array([], dtype=float32),\n -0.6964012176709845,\n -0.5087437279503267), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4618794431967920128)\n y: array(0.)\n\nFalsifying example: test_gather_padding(self=&lt;caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding&gt;, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=device_type: 1, dc=[, device_type: 1])\n\nYou can reproduce this example by temporarily adding @reproduce_failure('3.66.8', 'AXicY2DAAIwMAAAXAAI=') as a decorator on your test case\n generated xml file: /var/lib/jenkins/workspace/caffe2_tests/python/result.xml -\n</code></pre>\n<p>Sample: <a href=\"https://ci.pytorch.org/jenkins/job/caffe2-builds/job/py2-cuda9.0-cudnn7-aten-ubuntu16.04-test/4954/consoleText\" rel=\"nofollow\">https://ci.pytorch.org/jenkins/job/caffe2-builds/job/py2-cuda9.0-cudnn7-aten-ubuntu16.04-test/4954/consoleText</a></p>", "body_text": "=================================== FAILURES ===================================\n_____________________ TestSequenceOps.test_gather_padding ______________________\n\nself = <caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>\n\n    @given(start_pad_width=st.integers(min_value=0, max_value=2),\n>          end_pad_width=st.integers(min_value=0, max_value=2),\n           args=_gen_test_add_padding(with_pad_data=True),\n           **hu.gcs)\n    def test_gather_padding(self, start_pad_width, end_pad_width, args, gc, dc):\n\nlib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../lib/python2.7/dist-packages/hypothesis/core.py:604: in execute\n    result = self.test_runner(data, run)\n../lib/python2.7/dist-packages/hypothesis/executors.py:58: in default_new_style_executor\n    return function(data)\n../lib/python2.7/dist-packages/hypothesis/core.py:595: in run\n    return test(*args, **kwargs)\nlib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py:189: in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n../lib/python2.7/dist-packages/hypothesis/core.py:542: in test\n    result = self.test(*args, **kwargs)\nlib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py:207: in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>\ndevice_option = device_type: 1\n\nop = input: \"data\"\ninput: \"lengths\"\noutput: \"start_padding\"\noutput: \"end_padding\"\nn...\narg {\n  name: \"end_padding_width\"\n  i: 0\n}\ndevice_option {\n  device_type: 1\n}\n\ninputs = [array([], dtype=float64), array([], dtype=int32)]\nreference = <functools.partial object at 0x7fba1f33bb50>\ninput_device_options = None, threshold = 0.0001, output_to_grad = None\ngrad_reference = None, atol = 0.0001, outputs_to_check = [0, 1]\n\n    def assertReferenceChecks(\n        self,\n        device_option,\n        op,\n        inputs,\n        reference,\n        input_device_options=None,\n        threshold=1e-4,\n        output_to_grad=None,\n        grad_reference=None,\n        atol=None,\n        outputs_to_check=None,\n    ):\n        \"\"\"\n            This runs the reference Python function implementation\n            (effectively calling `reference(*inputs)`, and compares that\n            to the output of output, with an absolute/relative tolerance\n            given by the `threshold` parameter.\n    \n            Useful for checking the implementation matches the Python\n            (typically NumPy) implementation of the same functionality.\n    \n            Usage example:\n    \n                @given(X=hu.tensor(), inplace=st.booleans(), **hu.gcs)\n                def test_softsign(self, X, inplace, gc, dc):\n                    op = core.CreateOperator(\n                        \"Softsign\", [\"X\"], [\"X\" if inplace else \"Y\"])\n    \n                    def softsign(X):\n                        return (X / (1 + np.abs(X)),)\n    \n                    self.assertReferenceChecks(gc, op, [X], softsign)\n            \"\"\"\n        op = copy.deepcopy(op)\n        op.device_option.CopyFrom(device_option)\n    \n        with temp_workspace():\n            if (len(op.input) > len(inputs)):\n                raise ValueError(\n                    'must supply an input for each input on the op: %s vs %s' %\n                    (op.input, inputs))\n            _input_device_options = input_device_options or \\\n                core.InferOpBlobDevicesAsDict(op)[0]\n            for (n, b) in zip(op.input, inputs):\n                workspace.FeedBlob(\n                    n,\n                    b,\n                    device_option=_input_device_options.get(n, device_option)\n                )\n            net = core.Net(\"opnet\")\n            net.Proto().op.extend([op])\n            test_shape_inference = False\n            try:\n                (shapes, types) = workspace.InferShapesAndTypes([net])\n                test_shape_inference = True\n            except RuntimeError as e:\n                # Temporarily catch runtime errors when inferring shape\n                # and type info\n                logging.warning(str(e))\n                if os.getenv('CAFFE2_ASSERT_SHAPEINFERENCE') == '1':\n                    raise e\n            workspace.RunNetOnce(net)\n            reference_outputs = reference(*inputs)\n            if not (isinstance(reference_outputs, tuple) or\n                    isinstance(reference_outputs, list)):\n                raise RuntimeError(\n                    \"You are providing a wrong reference implementation. A \"\n                    \"proper one should return a tuple/list of numpy arrays.\")\n            if not outputs_to_check:\n                self.assertEqual(len(reference_outputs), len(op.output))\n                outputs_to_check = list(range(len(op.output)))\n            outs = []\n            for (output_index, ref) in zip(outputs_to_check, reference_outputs):\n                output_blob_name = op.output[output_index]\n                output = workspace.FetchBlob(output_blob_name)\n                if output.dtype.kind in ('S', 'O'):\n                    np.testing.assert_array_equal(output, ref)\n                else:\n                    if atol is None:\n                        atol = threshold\n                    np.testing.assert_allclose(\n                        output, ref, atol=atol, rtol=threshold,\n                        err_msg=(\n                            'Output {0} is not matching the reference'.format(\n>                               output_blob_name,\n                            )),\n                    )\nE                   AssertionError: \nE                   Not equal to tolerance rtol=0.0001, atol=0.0001\nE                   Output start_padding is not matching the reference\nE                   (mismatch 100.0%)\nE                    x: array(-4618794431967920128)\nE                    y: array(0.)\n\nlib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py:575: AssertionError\n----------------------------- Captured stderr call -----------------------------\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\n------------------------------ Captured log call -------------------------------\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\n---------------------------------- Hypothesis ----------------------------------\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=2, args=(array([ 8, 10,  9,  0], dtype=int32),\n array([ 0.3465074 , -0.5783911 ,  0.3465074 ,  0.8693086 ,  0.3465074 ,\n        -0.52675825,  0.3465074 ,  0.3465074 ,  0.3465074 ,  0.9321062 ,\n        -0.9681313 ,  0.3465074 ,  0.85339016, -0.995281  ,  0.3465074 ,\n         0.3465074 ,  0.3465074 , -0.6266759 ,  0.3465074 ,  0.25781822,\n         0.3465074 ,  0.38632435, -0.44261232,  0.3465074 ,  0.86272967,\n         0.3465074 ,  0.3465074 ], dtype=float32),\n -0.7661220172644854,\n 0.32672292989354795), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([10,  9, 10,  1,  7], dtype=int32),\n array([ 0.62059796,  0.62059796,  0.62059796, -0.1115087 ,  0.62059796,\n         0.62059796,  0.62059796,  0.62059796,  0.62059796,  0.03708775,\n         0.62059796,  0.62059796, -0.6321088 ,  0.62059796,  0.62059796,\n         0.8428636 , -0.97314036, -0.664075  ,  0.62059796,  0.62059796,\n         0.62059796,  0.62059796,  0.62059796,  0.62059796,  0.62059796,\n         0.5944725 ,  0.62059796,  0.62059796,  0.62059796,  0.62059796,\n         0.62059796, -0.2803797 ,  0.62059796,  0.5317449 ,  0.62059796,\n         0.62059796,  0.62059796], dtype=float32),\n -0.7638539007421339,\n -0.7086946573830012), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([0, 8, 7, 4, 0], dtype=int32), array([[[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]],\n \n        [[0.7863818],\n         [0.7863818],\n         [0.7863818]]], dtype=float32), array([[0.41727993],\n        [0.41727993],\n        [0.41727993]], dtype=float32), array([[-0.0011362 ],\n        [-0.29718485],\n        [-0.0011362 ]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [ 0.61785346, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput end_padding is not matching the reference\n(mismatch 100.0%)\n x: array(38654705669)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [ 0.61785346, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput end_padding is not matching the reference\n(mismatch 100.0%)\n x: array(38654705669)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[ 0.61785346,  0.61785346],\n         [-0.62575763,  0.61785346],\n         [ 0.61785346,  0.61785346]],\n \n        [[ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346]],\n \n        [[ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.71080756, -0.71080756],\n        [ 0.2294148 , -0.71080756]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([ 2, 10], dtype=int32),\n array([-0.4377519 ,  0.31514454, -0.3215343 , -0.6535671 ,  0.31514454,\n         0.06280098,  0.31514454,  0.31514454,  0.31514454,  0.31514454,\n         0.35126773,  0.31514454], dtype=float32),\n -0.8295155601085189,\n 0.43787003682785286), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([ 2, 10], dtype=int32),\n array([-0.4377519 ,  0.31514454, -0.3215343 , -0.6535671 ,  0.31514454,\n         0.06280098,  0.31514454,  0.31514454,  0.31514454,  0.31514454,\n         0.35126773,  0.31514454], dtype=float32),\n -0.8295155601085189,\n 0.43787003682785286), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([ 2, 10], dtype=int32),\n array([-0.4377519 ,  0.31514454, -0.3215343 , -0.6535671 ,  0.31514454,\n         0.06280098,  0.31514454,  0.31514454,  0.31514454,  0.31514454,\n         0.35126773,  0.31514454], dtype=float32),\n -0.8295155601085189,\n 0.43787003682785286), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([2, 1], dtype=int32),\n array([-0.12546732, -0.12546732, -0.12546732], dtype=float32),\n -0.6535670833836938,\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([], dtype=int32),\n array([], shape=(0, 3, 2), dtype=float32),\n array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32),\n array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([], dtype=int32),\n array([], dtype=float32),\n -0.12524509770606265,\n 0.11963186579509325), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([], dtype=int32),\n array([], shape=(0, 3, 2), dtype=float32),\n array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32),\n array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([], dtype=int32),\n array([], dtype=float32),\n -0.12524509770606265,\n 0.11963186579509325), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\n array([[-0.12546732,  0.61785346]], dtype=float32),\n array([ 0.2294148 , -0.71080756], dtype=float32),\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([ 3,  2, 10], dtype=int32),\n array([-1.3770291e-04, -1.3770291e-04,  6.1789516e-02, -6.5356708e-01,\n        -1.3770291e-04, -1.3770291e-04, -7.5024533e-01, -1.3770291e-04,\n        -1.3770291e-04, -1.3770291e-04,  3.5126773e-01, -1.3770291e-04,\n        -1.3770291e-04,  8.8494122e-02, -1.8391909e-01], dtype=float32),\n 0.7273016037656251,\n 0.18778884372890753), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([3, 2, 1], dtype=int32),\n array([-0.12546732, -0.12546732, -0.12546732, -0.12546732, -0.12546732,\n        -0.12546732], dtype=float32),\n -0.6535670833836938,\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([ 3,  2, 10], dtype=int32),\n array([-1.3770291e-04, -1.3770291e-04,  6.1789516e-02, -6.5356708e-01,\n        -1.3770291e-04, -1.3770291e-04, -7.5024533e-01, -1.3770291e-04,\n        -1.3770291e-04, -1.3770291e-04,  3.5126773e-01, -1.3770291e-04,\n        -1.3770291e-04,  8.8494122e-02, -1.8391909e-01], dtype=float32),\n 0.7273016037656251,\n 0.18778884372890753), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([3, 2, 1], dtype=int32),\n array([-0.12546732, -0.12546732, -0.12546732, -0.12546732, -0.12546732,\n        -0.12546732], dtype=float32),\n -0.6535670833836938,\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([3], dtype=int32),\n array([-0.12546732, -0.12546732, -0.12546732], dtype=float32),\n -0.6535670833836938,\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32),\n array([0.24296041, 0.6318636 , 0.24296041], dtype=float32),\n 0.6178534807058208,\n -0.25014082969376666), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.17237663],\n        [-0.9245386 ]], dtype=float32), array([[0.81811625],\n        [0.08328725]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.17237663],\n        [-0.9245386 ]], dtype=float32), array([[0.81811625],\n        [0.08328725]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.17237663],\n        [-0.9245386 ]], dtype=float32), array([[0.81811625],\n        [0.08328725]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.17049105,  0.2294148 , -0.62575763],\n        [ 0.2294148 ,  0.2294148 ,  0.2294148 ],\n        [ 0.2294148 ,  0.2294148 ,  0.2294148 ]], dtype=float32), array([-0.71080756, -0.71080756, -0.71080756], dtype=float32), array([-0.50764036, -0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\n        [-0.9245386 ],\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\n        [ 0.08328725],\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]]], dtype=float32), array([[-0.4270123 , -0.9667386 , -0.4270123 ],\n        [ 0.15222359,  0.2294148 ,  0.12841824],\n        [-0.4270123 , -0.4270123 , -0.7181849 ]], dtype=float32), array([[-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\n        [-0.9245386 ],\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\n        [ 0.08328725],\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]]], dtype=float32), array([[-0.4270123 , -0.9667386 , -0.4270123 ],\n        [ 0.15222359,  0.2294148 ,  0.12841824],\n        [-0.4270123 , -0.4270123 , -0.7181849 ]], dtype=float32), array([[-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\n        [-0.9245386 ],\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\n        [ 0.08328725],\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]],\n \n        [[0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186],\n         [0.11963186, 0.11963186, 0.11963186]]], dtype=float32), array([[-0.4270123 , -0.9667386 , -0.4270123 ],\n        [ 0.15222359,  0.2294148 ,  0.12841824],\n        [-0.4270123 , -0.4270123 , -0.7181849 ]], dtype=float32), array([[-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156],\n        [-0.8295156, -0.8295156, -0.8295156]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]],\n \n        [[-0.12546732],\n         [-0.12546732],\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\n        [-0.9245386 ],\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\n        [ 0.08328725],\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.71080756,  0.6818886 ]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.71080756,  0.6818886 ]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]],\n \n        [[-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732],\n         [-0.12546732, -0.12546732]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.17237663, -0.71080756],\n        [-0.71080756,  0.6818886 ]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [ 0.61785346, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4618794431967920128)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [ 0.61785346, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4618794431967920128)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[ 0.61785346,  0.61785346],\n         [-0.62575763,  0.61785346],\n         [ 0.61785346,  0.61785346]],\n \n        [[ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346]],\n \n        [[ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346],\n         [ 0.61785346,  0.61785346]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.71080756, -0.71080756],\n        [ 0.2294148 , -0.71080756]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4618794431967920128)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[ 0.2294148 ,  0.2294148 ],\n         [-0.62575763,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ]],\n \n        [[ 0.2294148 ,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ]],\n \n        [[ 0.2294148 ,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ],\n         [ 0.2294148 ,  0.2294148 ]]], dtype=float32), array([[-0.71080756, -0.71080756],\n        [-0.71080756, -0.71080756],\n        [-0.71080756, -0.71080756]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652, -0.9667386 ],\n         [-0.62575763,  0.27146652],\n         [ 0.27146652,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [-0.7181849 ,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [-0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [-0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.3127855 ,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.3127855 ,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.07308909,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\n         [-0.62575763,  0.27146652],\n         [ 0.3127855 ,  0.27146652]],\n \n        [[ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652],\n         [ 0.01402934,  0.27146652]],\n \n        [[ 0.27146652, -0.54356337],\n         [ 0.27146652,  0.27146652],\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.1372088],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.06448297, -0.06448297],\n         [-0.62575763, -0.06448297],\n         [ 0.2294148 , -0.06448297]],\n \n        [[-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297]],\n \n        [[-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297]]], dtype=float32), array([[0.06280098, 0.06280098],\n        [0.06280098, 0.06280098],\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.06448297, -0.06448297],\n         [-0.62575763, -0.06448297],\n         [ 0.2294148 , -0.06448297]],\n \n        [[-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297]],\n \n        [[-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297],\n         [-0.06448297, -0.06448297]]], dtype=float32), array([[0.06280098, 0.06280098],\n        [0.06280098, 0.06280098],\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.9667386 , -0.9667386 ],\n         [-0.62575763, -0.9667386 ],\n         [ 0.2294148 , -0.9667386 ]],\n \n        [[-0.9667386 , -0.9667386 ],\n         [-0.9667386 , -0.9667386 ],\n         [-0.9667386 , -0.9667386 ]],\n \n        [[-0.9667386 , -0.9667386 ],\n         [-0.9667386 , -0.9667386 ],\n         [-0.9667386 , -0.9667386 ]]], dtype=float32), array([[-0.7181849 ,  0.27146652],\n        [-0.6544955 , -0.8447196 ],\n        [ 0.27146652,  0.27146652]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\n         [-0.62575763, -0.4377519 ],\n         [ 0.2294148 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]],\n \n        [[-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ],\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\n        [-8.1298965e-01, -1.3770291e-04],\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\n        [-0.1372088, -0.4379044],\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.7181849 ,  0.27146652],\n        [-0.6544955 , -0.8447196 ],\n        [ 0.27146652,  0.27146652]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.7181849 ,  0.27146652],\n        [-0.6544955 , -0.8447196 ],\n        [ 0.27146652,  0.27146652]], dtype=float32), array([[-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[0.06280098, 0.06280098],\n        [0.06280098, 0.06280098],\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[0.06280098, 0.06280098],\n        [0.06280098, 0.06280098],\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[0.9559304, 0.9559304],\n        [0.9559304, 0.9559304],\n        [0.9559304, 0.9559304]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533],\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\n        [-0.12539388, -0.37570858],\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -1.2534568e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -1.2534568e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -1.2534568e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\n        [-0.81298965,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.81298965],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[0.31514454, 0.10083199],\n        [0.31514454, 0.31514454],\n        [0.31514454, 0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[0.31514454, 0.10083199],\n        [0.31514454, 0.31514454],\n        [0.31514454, 0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\n        [-1.3770291e-04, -1.3770291e-04],\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\n        [ 0.31514454,  0.31514454],\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\n        [ 0.7273016 ,  0.7273016 ],\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.6544955, -0.725019 ],\n        [-0.6544955, -0.6544955],\n        [-0.6544955, -0.6544955]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.6544955, -0.725019 ],\n        [-0.6544955, -0.6544955],\n        [-0.6544955, -0.6544955]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.4379044 , -0.725019  ],\n        [-0.4379044 , -0.4379044 ],\n        [-0.4379044 ,  0.03525195]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.4379044 , -0.725019  ],\n        [-0.4379044 , -0.4379044 ],\n        [-0.4379044 ,  0.03525195]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.4379044 , -0.725019  ],\n        [ 0.03525195, -0.4379044 ],\n        [-0.4379044 , -0.4379044 ]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\n        [ 0.550836  ,  0.02449792],\n        [ 0.02449792,  0.02449792]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\n        [-1.3770291e-04, -4.3790439e-01],\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\n        [-0.31250054,  0.7273016 ],\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.5017104, -0.725019 ],\n        [-0.6544955, -0.5017104],\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.25073355, -0.725019  ],\n        [-0.6544955 , -0.25073355],\n        [-0.25073355, -0.25073355]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\n        [-0.6544955 , -0.92966264],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.3693131, -0.725019 ],\n        [-0.6544955, -0.3693131],\n        [-0.3693131, -0.3693131]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.37570858, -0.725019  ],\n        [-0.6544955 ,  0.9936301 ],\n        [-0.37570858, -0.37570858]], dtype=float32)), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\n         [-0.62575763, -0.71080756],\n         [ 0.2294148 , -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]],\n \n        [[-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756],\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036],\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\n        [-0.6544955 , -0.31397155],\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array([[0., 0.],\n       [0., 0.],\n       [0., 0.]])\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4620624399421145088)\n y: array(0.)\n\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=, dc=[, device_type: 1])\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32),\n array([], dtype=float32),\n -0.6964012176709845,\n -0.5087437279503267), gc=device_type: 1, dc=[, device_type: 1])\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\n    result = self.execute(data, collect=True)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\n    result = self.test_runner(data, run)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\n    return function(data)\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\n    return test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\n    end_pad_width=st.integers(min_value=0, max_value=2),\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\n    result = self.test(*args, **kwargs)\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\n    output_blob_name,\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\n    verbose=verbose, header=header, equal_nan=equal_nan)\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=0.0001, atol=0.0001\nOutput start_padding is not matching the reference\n(mismatch 100.0%)\n x: array(-4618794431967920128)\n y: array(0.)\n\nFalsifying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=device_type: 1, dc=[, device_type: 1])\n\nYou can reproduce this example by temporarily adding @reproduce_failure('3.66.8', 'AXicY2DAAIwMAAAXAAI=') as a decorator on your test case\n generated xml file: /var/lib/jenkins/workspace/caffe2_tests/python/result.xml -\n\nSample: https://ci.pytorch.org/jenkins/job/caffe2-builds/job/py2-cuda9.0-cudnn7-aten-ubuntu16.04-test/4954/consoleText", "body": "```\r\n=================================== FAILURES ===================================\r\n_____________________ TestSequenceOps.test_gather_padding ______________________\r\n\r\nself = <caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>\r\n\r\n    @given(start_pad_width=st.integers(min_value=0, max_value=2),\r\n>          end_pad_width=st.integers(min_value=0, max_value=2),\r\n           args=_gen_test_add_padding(with_pad_data=True),\r\n           **hu.gcs)\r\n    def test_gather_padding(self, start_pad_width, end_pad_width, args, gc, dc):\r\n\r\nlib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py:189: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../lib/python2.7/dist-packages/hypothesis/core.py:604: in execute\r\n    result = self.test_runner(data, run)\r\n../lib/python2.7/dist-packages/hypothesis/executors.py:58: in default_new_style_executor\r\n    return function(data)\r\n../lib/python2.7/dist-packages/hypothesis/core.py:595: in run\r\n    return test(*args, **kwargs)\r\nlib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py:189: in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n../lib/python2.7/dist-packages/hypothesis/core.py:542: in test\r\n    result = self.test(*args, **kwargs)\r\nlib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py:207: in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>\r\ndevice_option = device_type: 1\r\n\r\nop = input: \"data\"\r\ninput: \"lengths\"\r\noutput: \"start_padding\"\r\noutput: \"end_padding\"\r\nn...\r\narg {\r\n  name: \"end_padding_width\"\r\n  i: 0\r\n}\r\ndevice_option {\r\n  device_type: 1\r\n}\r\n\r\ninputs = [array([], dtype=float64), array([], dtype=int32)]\r\nreference = <functools.partial object at 0x7fba1f33bb50>\r\ninput_device_options = None, threshold = 0.0001, output_to_grad = None\r\ngrad_reference = None, atol = 0.0001, outputs_to_check = [0, 1]\r\n\r\n    def assertReferenceChecks(\r\n        self,\r\n        device_option,\r\n        op,\r\n        inputs,\r\n        reference,\r\n        input_device_options=None,\r\n        threshold=1e-4,\r\n        output_to_grad=None,\r\n        grad_reference=None,\r\n        atol=None,\r\n        outputs_to_check=None,\r\n    ):\r\n        \"\"\"\r\n            This runs the reference Python function implementation\r\n            (effectively calling `reference(*inputs)`, and compares that\r\n            to the output of output, with an absolute/relative tolerance\r\n            given by the `threshold` parameter.\r\n    \r\n            Useful for checking the implementation matches the Python\r\n            (typically NumPy) implementation of the same functionality.\r\n    \r\n            Usage example:\r\n    \r\n                @given(X=hu.tensor(), inplace=st.booleans(), **hu.gcs)\r\n                def test_softsign(self, X, inplace, gc, dc):\r\n                    op = core.CreateOperator(\r\n                        \"Softsign\", [\"X\"], [\"X\" if inplace else \"Y\"])\r\n    \r\n                    def softsign(X):\r\n                        return (X / (1 + np.abs(X)),)\r\n    \r\n                    self.assertReferenceChecks(gc, op, [X], softsign)\r\n            \"\"\"\r\n        op = copy.deepcopy(op)\r\n        op.device_option.CopyFrom(device_option)\r\n    \r\n        with temp_workspace():\r\n            if (len(op.input) > len(inputs)):\r\n                raise ValueError(\r\n                    'must supply an input for each input on the op: %s vs %s' %\r\n                    (op.input, inputs))\r\n            _input_device_options = input_device_options or \\\r\n                core.InferOpBlobDevicesAsDict(op)[0]\r\n            for (n, b) in zip(op.input, inputs):\r\n                workspace.FeedBlob(\r\n                    n,\r\n                    b,\r\n                    device_option=_input_device_options.get(n, device_option)\r\n                )\r\n            net = core.Net(\"opnet\")\r\n            net.Proto().op.extend([op])\r\n            test_shape_inference = False\r\n            try:\r\n                (shapes, types) = workspace.InferShapesAndTypes([net])\r\n                test_shape_inference = True\r\n            except RuntimeError as e:\r\n                # Temporarily catch runtime errors when inferring shape\r\n                # and type info\r\n                logging.warning(str(e))\r\n                if os.getenv('CAFFE2_ASSERT_SHAPEINFERENCE') == '1':\r\n                    raise e\r\n            workspace.RunNetOnce(net)\r\n            reference_outputs = reference(*inputs)\r\n            if not (isinstance(reference_outputs, tuple) or\r\n                    isinstance(reference_outputs, list)):\r\n                raise RuntimeError(\r\n                    \"You are providing a wrong reference implementation. A \"\r\n                    \"proper one should return a tuple/list of numpy arrays.\")\r\n            if not outputs_to_check:\r\n                self.assertEqual(len(reference_outputs), len(op.output))\r\n                outputs_to_check = list(range(len(op.output)))\r\n            outs = []\r\n            for (output_index, ref) in zip(outputs_to_check, reference_outputs):\r\n                output_blob_name = op.output[output_index]\r\n                output = workspace.FetchBlob(output_blob_name)\r\n                if output.dtype.kind in ('S', 'O'):\r\n                    np.testing.assert_array_equal(output, ref)\r\n                else:\r\n                    if atol is None:\r\n                        atol = threshold\r\n                    np.testing.assert_allclose(\r\n                        output, ref, atol=atol, rtol=threshold,\r\n                        err_msg=(\r\n                            'Output {0} is not matching the reference'.format(\r\n>                               output_blob_name,\r\n                            )),\r\n                    )\r\nE                   AssertionError: \r\nE                   Not equal to tolerance rtol=0.0001, atol=0.0001\r\nE                   Output start_padding is not matching the reference\r\nE                   (mismatch 100.0%)\r\nE                    x: array(-4618794431967920128)\r\nE                    y: array(0.)\r\n\r\nlib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py:575: AssertionError\r\n----------------------------- Captured stderr call -----------------------------\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nWARNING:caffe2.python.workspace:CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\n------------------------------ Captured log call -------------------------------\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\nworkspace.py               331 WARNING  CUDA operators do not support 64-bit doubles, please use arr.astype(np.float32) or np.int32 for ints. Blob: data type: float64\r\n---------------------------------- Hypothesis ----------------------------------\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=2, args=(array([ 8, 10,  9,  0], dtype=int32),\r\n array([ 0.3465074 , -0.5783911 ,  0.3465074 ,  0.8693086 ,  0.3465074 ,\r\n        -0.52675825,  0.3465074 ,  0.3465074 ,  0.3465074 ,  0.9321062 ,\r\n        -0.9681313 ,  0.3465074 ,  0.85339016, -0.995281  ,  0.3465074 ,\r\n         0.3465074 ,  0.3465074 , -0.6266759 ,  0.3465074 ,  0.25781822,\r\n         0.3465074 ,  0.38632435, -0.44261232,  0.3465074 ,  0.86272967,\r\n         0.3465074 ,  0.3465074 ], dtype=float32),\r\n -0.7661220172644854,\r\n 0.32672292989354795), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([10,  9, 10,  1,  7], dtype=int32),\r\n array([ 0.62059796,  0.62059796,  0.62059796, -0.1115087 ,  0.62059796,\r\n         0.62059796,  0.62059796,  0.62059796,  0.62059796,  0.03708775,\r\n         0.62059796,  0.62059796, -0.6321088 ,  0.62059796,  0.62059796,\r\n         0.8428636 , -0.97314036, -0.664075  ,  0.62059796,  0.62059796,\r\n         0.62059796,  0.62059796,  0.62059796,  0.62059796,  0.62059796,\r\n         0.5944725 ,  0.62059796,  0.62059796,  0.62059796,  0.62059796,\r\n         0.62059796, -0.2803797 ,  0.62059796,  0.5317449 ,  0.62059796,\r\n         0.62059796,  0.62059796], dtype=float32),\r\n -0.7638539007421339,\r\n -0.7086946573830012), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([0, 8, 7, 4, 0], dtype=int32), array([[[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]],\r\n \r\n        [[0.7863818],\r\n         [0.7863818],\r\n         [0.7863818]]], dtype=float32), array([[0.41727993],\r\n        [0.41727993],\r\n        [0.41727993]], dtype=float32), array([[-0.0011362 ],\r\n        [-0.29718485],\r\n        [-0.0011362 ]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [ 0.61785346, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\r\n        [-0.6544955 , -0.92966264],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput end_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(38654705669)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [ 0.61785346, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\r\n        [-0.6544955 , -0.92966264],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput end_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(38654705669)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[ 0.61785346,  0.61785346],\r\n         [-0.62575763,  0.61785346],\r\n         [ 0.61785346,  0.61785346]],\r\n \r\n        [[ 0.61785346,  0.61785346],\r\n         [ 0.61785346,  0.61785346],\r\n         [ 0.61785346,  0.61785346]],\r\n \r\n        [[ 0.61785346,  0.61785346],\r\n         [ 0.61785346,  0.61785346],\r\n         [ 0.61785346,  0.61785346]]], dtype=float32), array([[-0.71080756, -0.71080756],\r\n        [-0.71080756, -0.71080756],\r\n        [ 0.2294148 , -0.71080756]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([ 2, 10], dtype=int32),\r\n array([-0.4377519 ,  0.31514454, -0.3215343 , -0.6535671 ,  0.31514454,\r\n         0.06280098,  0.31514454,  0.31514454,  0.31514454,  0.31514454,\r\n         0.35126773,  0.31514454], dtype=float32),\r\n -0.8295155601085189,\r\n 0.43787003682785286), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([ 2, 10], dtype=int32),\r\n array([-0.4377519 ,  0.31514454, -0.3215343 , -0.6535671 ,  0.31514454,\r\n         0.06280098,  0.31514454,  0.31514454,  0.31514454,  0.31514454,\r\n         0.35126773,  0.31514454], dtype=float32),\r\n -0.8295155601085189,\r\n 0.43787003682785286), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([ 2, 10], dtype=int32),\r\n array([-0.4377519 ,  0.31514454, -0.3215343 , -0.6535671 ,  0.31514454,\r\n         0.06280098,  0.31514454,  0.31514454,  0.31514454,  0.31514454,\r\n         0.35126773,  0.31514454], dtype=float32),\r\n -0.8295155601085189,\r\n 0.43787003682785286), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([2, 1], dtype=int32),\r\n array([-0.12546732, -0.12546732, -0.12546732], dtype=float32),\r\n -0.6535670833836938,\r\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([], dtype=int32),\r\n array([], shape=(0, 3, 2), dtype=float32),\r\n array([[-0.71080756, -0.71080756],\r\n        [-0.17237663, -0.71080756],\r\n        [-0.12546732,  0.6818886 ]], dtype=float32),\r\n array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([], dtype=int32),\r\n array([], dtype=float32),\r\n -0.12524509770606265,\r\n 0.11963186579509325), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([], dtype=int32),\r\n array([], shape=(0, 3, 2), dtype=float32),\r\n array([[-0.71080756, -0.71080756],\r\n        [-0.17237663, -0.71080756],\r\n        [-0.12546732,  0.6818886 ]], dtype=float32),\r\n array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([], dtype=int32),\r\n array([], dtype=float32),\r\n -0.12524509770606265,\r\n 0.11963186579509325), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\r\n array([[-0.12546732,  0.61785346]], dtype=float32),\r\n array([ 0.2294148 , -0.71080756], dtype=float32),\r\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\r\n array([[-0.12546732,  0.61785346]], dtype=float32),\r\n array([ 0.2294148 , -0.71080756], dtype=float32),\r\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\r\n array([[-0.12546732,  0.61785346]], dtype=float32),\r\n array([ 0.2294148 , -0.71080756], dtype=float32),\r\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\r\n array([[-0.12546732,  0.61785346]], dtype=float32),\r\n array([ 0.2294148 , -0.71080756], dtype=float32),\r\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\r\n array([[-0.12546732,  0.61785346]], dtype=float32),\r\n array([ 0.2294148 , -0.71080756], dtype=float32),\r\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([1], dtype=int32),\r\n array([[-0.12546732,  0.61785346]], dtype=float32),\r\n array([ 0.2294148 , -0.71080756], dtype=float32),\r\n array([-0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([ 3,  2, 10], dtype=int32),\r\n array([-1.3770291e-04, -1.3770291e-04,  6.1789516e-02, -6.5356708e-01,\r\n        -1.3770291e-04, -1.3770291e-04, -7.5024533e-01, -1.3770291e-04,\r\n        -1.3770291e-04, -1.3770291e-04,  3.5126773e-01, -1.3770291e-04,\r\n        -1.3770291e-04,  8.8494122e-02, -1.8391909e-01], dtype=float32),\r\n 0.7273016037656251,\r\n 0.18778884372890753), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([3, 2, 1], dtype=int32),\r\n array([-0.12546732, -0.12546732, -0.12546732, -0.12546732, -0.12546732,\r\n        -0.12546732], dtype=float32),\r\n -0.6535670833836938,\r\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([ 3,  2, 10], dtype=int32),\r\n array([-1.3770291e-04, -1.3770291e-04,  6.1789516e-02, -6.5356708e-01,\r\n        -1.3770291e-04, -1.3770291e-04, -7.5024533e-01, -1.3770291e-04,\r\n        -1.3770291e-04, -1.3770291e-04,  3.5126773e-01, -1.3770291e-04,\r\n        -1.3770291e-04,  8.8494122e-02, -1.8391909e-01], dtype=float32),\r\n 0.7273016037656251,\r\n 0.18778884372890753), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([3, 2, 1], dtype=int32),\r\n array([-0.12546732, -0.12546732, -0.12546732, -0.12546732, -0.12546732,\r\n        -0.12546732], dtype=float32),\r\n -0.6535670833836938,\r\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([3], dtype=int32),\r\n array([-0.12546732, -0.12546732, -0.12546732], dtype=float32),\r\n -0.6535670833836938,\r\n 0.6457115366779941), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\r\n        [-0.17237663, -0.71080756],\r\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32),\r\n array([0.24296041, 0.6318636 , 0.24296041], dtype=float32),\r\n 0.6178534807058208,\r\n -0.25014082969376666), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\r\n        [-0.17237663, -0.71080756],\r\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732]]], dtype=float32), array([[-0.17237663],\r\n        [-0.9245386 ]], dtype=float32), array([[0.81811625],\r\n        [0.08328725]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\r\n        [-0.17237663, -0.71080756],\r\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732]]], dtype=float32), array([[-0.17237663],\r\n        [-0.9245386 ]], dtype=float32), array([[0.81811625],\r\n        [0.08328725]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.71080756, -0.71080756],\r\n        [-0.17237663, -0.71080756],\r\n        [-0.12546732,  0.6818886 ]], dtype=float32), array([-0.50764036, -0.50764036], dtype=float32), array([-0.6544955, -0.725019 ], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732]]], dtype=float32), array([[-0.17237663],\r\n        [-0.9245386 ]], dtype=float32), array([[0.81811625],\r\n        [0.08328725]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[-0.17049105,  0.2294148 , -0.62575763],\r\n        [ 0.2294148 ,  0.2294148 ,  0.2294148 ],\r\n        [ 0.2294148 ,  0.2294148 ,  0.2294148 ]], dtype=float32), array([-0.71080756, -0.71080756, -0.71080756], dtype=float32), array([-0.50764036, -0.50764036, -0.50764036], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\r\n        [-0.9245386 ],\r\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\r\n        [ 0.08328725],\r\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186]],\r\n \r\n        [[0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186]],\r\n \r\n        [[0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186]]], dtype=float32), array([[-0.4270123 , -0.9667386 , -0.4270123 ],\r\n        [ 0.15222359,  0.2294148 ,  0.12841824],\r\n        [-0.4270123 , -0.4270123 , -0.7181849 ]], dtype=float32), array([[-0.8295156, -0.8295156, -0.8295156],\r\n        [-0.8295156, -0.8295156, -0.8295156],\r\n        [-0.8295156, -0.8295156, -0.8295156]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\r\n        [-0.9245386 ],\r\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\r\n        [ 0.08328725],\r\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186]],\r\n \r\n        [[0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186]],\r\n \r\n        [[0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186]]], dtype=float32), array([[-0.4270123 , -0.9667386 , -0.4270123 ],\r\n        [ 0.15222359,  0.2294148 ,  0.12841824],\r\n        [-0.4270123 , -0.4270123 , -0.7181849 ]], dtype=float32), array([[-0.8295156, -0.8295156, -0.8295156],\r\n        [-0.8295156, -0.8295156, -0.8295156],\r\n        [-0.8295156, -0.8295156, -0.8295156]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\r\n        [-0.9245386 ],\r\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\r\n        [ 0.08328725],\r\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186]],\r\n \r\n        [[0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186]],\r\n \r\n        [[0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186],\r\n         [0.11963186, 0.11963186, 0.11963186]]], dtype=float32), array([[-0.4270123 , -0.9667386 , -0.4270123 ],\r\n        [ 0.15222359,  0.2294148 ,  0.12841824],\r\n        [-0.4270123 , -0.4270123 , -0.7181849 ]], dtype=float32), array([[-0.8295156, -0.8295156, -0.8295156],\r\n        [-0.8295156, -0.8295156, -0.8295156],\r\n        [-0.8295156, -0.8295156, -0.8295156]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]],\r\n \r\n        [[-0.12546732],\r\n         [-0.12546732],\r\n         [-0.12546732]]], dtype=float32), array([[-0.9245386 ],\r\n        [-0.9245386 ],\r\n        [-0.17237663]], dtype=float32), array([[ 0.81811625],\r\n        [ 0.08328725],\r\n        [-0.75024533]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732]],\r\n \r\n        [[-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732]],\r\n \r\n        [[-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732]]], dtype=float32), array([[-0.71080756, -0.71080756],\r\n        [-0.17237663, -0.71080756],\r\n        [-0.71080756,  0.6818886 ]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732]],\r\n \r\n        [[-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732]],\r\n \r\n        [[-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732]]], dtype=float32), array([[-0.71080756, -0.71080756],\r\n        [-0.17237663, -0.71080756],\r\n        [-0.71080756,  0.6818886 ]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732]],\r\n \r\n        [[-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732]],\r\n \r\n        [[-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732],\r\n         [-0.12546732, -0.12546732]]], dtype=float32), array([[-0.71080756, -0.71080756],\r\n        [-0.17237663, -0.71080756],\r\n        [-0.71080756,  0.6818886 ]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [ 0.61785346, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\r\n        [-0.6544955 , -0.92966264],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4618794431967920128)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [ 0.61785346, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\r\n        [-0.6544955 , -0.92966264],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4618794431967920128)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[ 0.61785346,  0.61785346],\r\n         [-0.62575763,  0.61785346],\r\n         [ 0.61785346,  0.61785346]],\r\n \r\n        [[ 0.61785346,  0.61785346],\r\n         [ 0.61785346,  0.61785346],\r\n         [ 0.61785346,  0.61785346]],\r\n \r\n        [[ 0.61785346,  0.61785346],\r\n         [ 0.61785346,  0.61785346],\r\n         [ 0.61785346,  0.61785346]]], dtype=float32), array([[-0.71080756, -0.71080756],\r\n        [-0.71080756, -0.71080756],\r\n        [ 0.2294148 , -0.71080756]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\r\n        [-0.6544955 , -0.92966264],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4618794431967920128)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[ 0.2294148 ,  0.2294148 ],\r\n         [-0.62575763,  0.2294148 ],\r\n         [ 0.2294148 ,  0.2294148 ]],\r\n \r\n        [[ 0.2294148 ,  0.2294148 ],\r\n         [ 0.2294148 ,  0.2294148 ],\r\n         [ 0.2294148 ,  0.2294148 ]],\r\n \r\n        [[ 0.2294148 ,  0.2294148 ],\r\n         [ 0.2294148 ,  0.2294148 ],\r\n         [ 0.2294148 ,  0.2294148 ]]], dtype=float32), array([[-0.71080756, -0.71080756],\r\n        [-0.71080756, -0.71080756],\r\n        [-0.71080756, -0.71080756]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652, -0.9667386 ],\r\n         [-0.62575763,  0.27146652],\r\n         [ 0.27146652,  0.27146652]],\r\n \r\n        [[ 0.27146652,  0.27146652],\r\n         [-0.7181849 ,  0.27146652],\r\n         [ 0.01402934,  0.27146652]],\r\n \r\n        [[ 0.27146652, -0.54356337],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.1372088],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\r\n         [-0.62575763,  0.27146652],\r\n         [-0.07308909,  0.27146652]],\r\n \r\n        [[ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.01402934,  0.27146652]],\r\n \r\n        [[ 0.27146652, -0.54356337],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.1372088],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\r\n         [-0.62575763,  0.27146652],\r\n         [-0.07308909,  0.27146652]],\r\n \r\n        [[ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.01402934,  0.27146652]],\r\n \r\n        [[ 0.27146652, -0.54356337],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.1372088],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\r\n         [-0.62575763,  0.27146652],\r\n         [ 0.07308909,  0.27146652]],\r\n \r\n        [[ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.01402934,  0.27146652]],\r\n \r\n        [[ 0.27146652, -0.54356337],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.1372088],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\r\n         [-0.62575763,  0.27146652],\r\n         [ 0.3127855 ,  0.27146652]],\r\n \r\n        [[ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.01402934,  0.27146652]],\r\n \r\n        [[ 0.27146652, -0.54356337],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.1372088],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\r\n         [-0.62575763,  0.27146652],\r\n         [ 0.07308909,  0.27146652]],\r\n \r\n        [[ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.01402934,  0.27146652]],\r\n \r\n        [[ 0.27146652, -0.54356337],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.1372088],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\r\n         [-0.62575763,  0.27146652],\r\n         [ 0.3127855 ,  0.27146652]],\r\n \r\n        [[ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.01402934,  0.27146652]],\r\n \r\n        [[ 0.27146652, -0.54356337],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.1372088],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\r\n         [-0.62575763,  0.27146652],\r\n         [ 0.07308909,  0.27146652]],\r\n \r\n        [[ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.01402934,  0.27146652]],\r\n \r\n        [[ 0.27146652, -0.54356337],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.1372088],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[ 0.27146652,  0.9559304 ],\r\n         [-0.62575763,  0.27146652],\r\n         [ 0.3127855 ,  0.27146652]],\r\n \r\n        [[ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.01402934,  0.27146652]],\r\n \r\n        [[ 0.27146652, -0.54356337],\r\n         [ 0.27146652,  0.27146652],\r\n         [ 0.27146652,  0.27146652]]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.1372088],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.06448297, -0.06448297],\r\n         [-0.62575763, -0.06448297],\r\n         [ 0.2294148 , -0.06448297]],\r\n \r\n        [[-0.06448297, -0.06448297],\r\n         [-0.06448297, -0.06448297],\r\n         [-0.06448297, -0.06448297]],\r\n \r\n        [[-0.06448297, -0.06448297],\r\n         [-0.06448297, -0.06448297],\r\n         [-0.06448297, -0.06448297]]], dtype=float32), array([[0.06280098, 0.06280098],\r\n        [0.06280098, 0.06280098],\r\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\r\n        [-0.81298965,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.06448297, -0.06448297],\r\n         [-0.62575763, -0.06448297],\r\n         [ 0.2294148 , -0.06448297]],\r\n \r\n        [[-0.06448297, -0.06448297],\r\n         [-0.06448297, -0.06448297],\r\n         [-0.06448297, -0.06448297]],\r\n \r\n        [[-0.06448297, -0.06448297],\r\n         [-0.06448297, -0.06448297],\r\n         [-0.06448297, -0.06448297]]], dtype=float32), array([[0.06280098, 0.06280098],\r\n        [0.06280098, 0.06280098],\r\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\r\n        [-0.81298965,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.9667386 , -0.9667386 ],\r\n         [-0.62575763, -0.9667386 ],\r\n         [ 0.2294148 , -0.9667386 ]],\r\n \r\n        [[-0.9667386 , -0.9667386 ],\r\n         [-0.9667386 , -0.9667386 ],\r\n         [-0.9667386 , -0.9667386 ]],\r\n \r\n        [[-0.9667386 , -0.9667386 ],\r\n         [-0.9667386 , -0.9667386 ],\r\n         [-0.9667386 , -0.9667386 ]]], dtype=float32), array([[-0.7181849 ,  0.27146652],\r\n        [-0.6544955 , -0.8447196 ],\r\n        [ 0.27146652,  0.27146652]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\r\n         [-0.62575763, -0.4377519 ],\r\n         [ 0.2294148 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\r\n        [-8.1298965e-01, -1.3770291e-04],\r\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.4379044],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\r\n         [-0.62575763, -0.4377519 ],\r\n         [ 0.2294148 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\r\n        [-8.1298965e-01, -1.3770291e-04],\r\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.4379044],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\r\n         [-0.62575763, -0.4377519 ],\r\n         [ 0.2294148 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\r\n        [-8.1298965e-01, -1.3770291e-04],\r\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.4379044],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\r\n         [-0.62575763, -0.4377519 ],\r\n         [ 0.2294148 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\r\n        [-8.1298965e-01, -1.3770291e-04],\r\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.4379044],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.4377519 , -0.4377519 ],\r\n         [-0.62575763, -0.4377519 ],\r\n         [ 0.2294148 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]],\r\n \r\n        [[-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ],\r\n         [-0.4377519 , -0.4377519 ]]], dtype=float32), array([[-1.3770291e-04, -1.3770291e-04],\r\n        [-8.1298965e-01, -1.3770291e-04],\r\n        [-1.3770291e-04,  6.2800981e-02]], dtype=float32), array([[-0.1372088, -0.1372088],\r\n        [-0.1372088, -0.4379044],\r\n        [-0.1372088,  0.3028629]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.7181849 ,  0.27146652],\r\n        [-0.6544955 , -0.8447196 ],\r\n        [ 0.27146652,  0.27146652]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.7181849 ,  0.27146652],\r\n        [-0.6544955 , -0.8447196 ],\r\n        [ 0.27146652,  0.27146652]], dtype=float32), array([[-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[0.06280098, 0.06280098],\r\n        [0.06280098, 0.06280098],\r\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\r\n        [-0.81298965,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[0.06280098, 0.06280098],\r\n        [0.06280098, 0.06280098],\r\n        [0.06280098, 0.06280098]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\r\n        [-0.81298965,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[0.9559304, 0.9559304],\r\n        [0.9559304, 0.9559304],\r\n        [0.9559304, 0.9559304]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\r\n        [-1.3770291e-04, -1.3770291e-04],\r\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\r\n        [-0.12539388, -0.37570858],\r\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\r\n        [-0.12539388, -0.37570858],\r\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\r\n        [-0.12539388, -0.37570858],\r\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\r\n        [-0.12539388, -0.37570858],\r\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533],\r\n        [-0.75024533, -0.75024533]], dtype=float32), array([[-0.37570858,  0.31514454],\r\n        [-0.12539388, -0.37570858],\r\n        [-0.07394399, -0.13174728]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -1.2534568e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\r\n        [-1.3770291e-04, -1.3770291e-04],\r\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -1.2534568e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\r\n        [-1.3770291e-04, -1.3770291e-04],\r\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -1.2534568e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\r\n        [-0.81298965,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 ,  0.7273016 ],\r\n        [-0.81298965,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\r\n        [-1.3770291e-04, -1.3770291e-04],\r\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.81298965],\r\n        [ 0.7273016 ,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[0.31514454, 0.10083199],\r\n        [0.31514454, 0.31514454],\r\n        [0.31514454, 0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[0.31514454, 0.10083199],\r\n        [0.31514454, 0.31514454],\r\n        [0.31514454, 0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3770291e-04, -6.0486221e-01],\r\n        [-1.3770291e-04, -1.3770291e-04],\r\n        [-1.3770291e-04,  8.8494122e-02]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\r\n        [ 0.31514454,  0.31514454],\r\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\r\n        [ 0.7273016 ,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\r\n        [ 0.31514454,  0.31514454],\r\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\r\n        [ 0.7273016 ,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\r\n        [ 0.31514454,  0.31514454],\r\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\r\n        [ 0.7273016 ,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\r\n        [ 0.31514454,  0.31514454],\r\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\r\n        [ 0.7273016 ,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.31514454, -0.10083199],\r\n        [ 0.31514454,  0.31514454],\r\n        [ 0.31514454,  0.31514454]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.12539388],\r\n        [ 0.7273016 ,  0.7273016 ],\r\n        [ 0.7273016 ,  0.31250054]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\r\n        [-0.6544955 , -0.92966264],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4620624399421145088)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.6544955, -0.725019 ],\r\n        [-0.6544955, -0.6544955],\r\n        [-0.6544955, -0.6544955]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.6544955, -0.725019 ],\r\n        [-0.6544955, -0.6544955],\r\n        [-0.6544955, -0.6544955]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.4379044 , -0.725019  ],\r\n        [-0.4379044 , -0.4379044 ],\r\n        [-0.4379044 ,  0.03525195]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.4379044 , -0.725019  ],\r\n        [-0.4379044 , -0.4379044 ],\r\n        [-0.4379044 ,  0.03525195]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.4379044 , -0.725019  ],\r\n        [ 0.03525195, -0.4379044 ],\r\n        [-0.4379044 , -0.4379044 ]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.02449792, -0.725019  ],\r\n        [ 0.550836  ,  0.02449792],\r\n        [ 0.02449792,  0.02449792]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\r\n        [-0.31250054,  0.7273016 ],\r\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\r\n        [-0.31250054,  0.7273016 ],\r\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\r\n        [-0.31250054,  0.7273016 ],\r\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\r\n        [-0.31250054,  0.7273016 ],\r\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-1.3720880e-01, -7.2501898e-01],\r\n        [-1.3770291e-04, -4.3790439e-01],\r\n        [-1.3720880e-01,  3.0286291e-01]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[ 0.7273016 , -0.725019  ],\r\n        [-0.31250054,  0.7273016 ],\r\n        [ 0.7273016 ,  0.7273016 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\r\n        [-0.6544955 , -0.92966264],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4620624399421145088)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=1, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.5017104, -0.725019 ],\r\n        [-0.6544955, -0.5017104],\r\n        [-0.5017104, -0.5017104]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\r\n        [-0.6544955 , -0.92966264],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4620624399421145088)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.25073355, -0.725019  ],\r\n        [-0.6544955 , -0.25073355],\r\n        [-0.25073355, -0.25073355]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\r\n        [-0.6544955 , -0.92966264],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4620624399421145088)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=2, end_pad_width=2, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.3693131, -0.725019 ],\r\n        [-0.6544955, -0.3693131],\r\n        [-0.3693131, -0.3693131]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.37570858, -0.725019  ],\r\n        [-0.6544955 ,  0.9936301 ],\r\n        [-0.37570858, -0.37570858]], dtype=float32)), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([3], dtype=int32), array([[[-0.71080756, -0.71080756],\r\n         [-0.62575763, -0.71080756],\r\n         [ 0.2294148 , -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]],\r\n \r\n        [[-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756],\r\n         [-0.71080756, -0.71080756]]], dtype=float32), array([[-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036],\r\n        [-0.50764036, -0.50764036]], dtype=float32), array([[-0.8234622 , -0.725019  ],\r\n        [-0.6544955 , -0.31397155],\r\n        [-0.8234622 , -0.8234622 ]], dtype=float32)), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4620624399421145088)\r\n y: array([[0., 0.],\r\n       [0., 0.],\r\n       [0., 0.]])\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4620624399421145088)\r\n y: array(0.)\r\n\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=1, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=, dc=[, device_type: 1])\r\nTrying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32),\r\n array([], dtype=float32),\r\n -0.6964012176709845,\r\n -0.5087437279503267), gc=device_type: 1, dc=[, device_type: 1])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 689, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 604, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 600, in run\r\n    return test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 189, in test_gather_padding\r\n    end_pad_width=st.integers(min_value=0, max_value=2),\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 542, in test\r\n    result = self.test(*args, **kwargs)\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/operator_test/sequence_ops_test.py\", line 207, in test_gather_padding\r\n    reference=partial(_gather_padding_ref, start_pad_width, end_pad_width))\r\n  File \"/usr/local/caffe2/lib/python2.7/dist-packages/caffe2/python/hypothesis_test_util.py\", line 575, in assertReferenceChecks\r\n    output_blob_name,\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 1443, in assert_allclose\r\n    verbose=verbose, header=header, equal_nan=equal_nan)\r\n  File \"/usr/local/lib/python2.7/dist-packages/numpy/testing/_private/utils.py\", line 780, in assert_array_compare\r\n    raise AssertionError(msg)\r\nAssertionError: \r\nNot equal to tolerance rtol=0.0001, atol=0.0001\r\nOutput start_padding is not matching the reference\r\n(mismatch 100.0%)\r\n x: array(-4618794431967920128)\r\n y: array(0.)\r\n\r\nFalsifying example: test_gather_padding(self=<caffe2.python.operator_test.sequence_ops_test.TestSequenceOps testMethod=test_gather_padding>, start_pad_width=0, end_pad_width=0, args=(array([], dtype=int32), array([], dtype=float32), 0.0, 0.0), gc=device_type: 1, dc=[, device_type: 1])\r\n\r\nYou can reproduce this example by temporarily adding @reproduce_failure('3.66.8', 'AXicY2DAAIwMAAAXAAI=') as a decorator on your test case\r\n generated xml file: /var/lib/jenkins/workspace/caffe2_tests/python/result.xml -\r\n```\r\n\r\nSample: https://ci.pytorch.org/jenkins/job/caffe2-builds/job/py2-cuda9.0-cudnn7-aten-ubuntu16.04-test/4954/consoleText"}