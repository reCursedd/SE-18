{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157384817", "pull_request_review_id": 84016281, "id": 157384817, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM4NDgxNw==", "diff_hunk": "@@ -1,10 +1,67 @@\n+import weakref\n import torch\n+import torch.cuda.comm as comm\n+from collections import OrderedDict\n from ..modules import Module\n from .scatter_gather import scatter_kwargs, gather\n from .replicate import replicate\n from .parallel_apply import parallel_apply\n \n \n+# NOTE: these callbacks are one-off\n+# NOTE: they are dedupliacted based on identity\n+class _CallbackOrderedDict(OrderedDict):\n+    @classmethod\n+    def _init_class(cls):\n+        mutating_methods = [\n+            '__setitem__',\n+            '__delitem__',\n+            'pop',\n+            'popitem',\n+            'update',\n+            'setdefault'\n+        ]\n+\n+        def method_wrapper(name):\n+            def callback_method(self, *args, **kwargs):\n+                for callback in self.callbacks:\n+                    callback()\n+                del self.callbacks[:]\n+                return getattr(super(_CallbackOrderedDict, self), name)(*args, **kwargs)\n+            return callback_method\n+        for name in mutating_methods:\n+            setattr(cls, name, method_wrapper(name))\n+\n+    @classmethod\n+    def from_ordered(cls, od):\n+        return cls(od.items())\n+\n+    def __init__(self, *args, **kwargs):\n+        self.callbacks = []\n+        super(_CallbackOrderedDict, self).__init__(*args, **kwargs)\n+\n+    def register_modification_callback(self, cb):\n+        if all(c is not cb for c in self.callbacks):", "path": "torch/nn/parallel/data_parallel.py", "position": 47, "original_position": 44, "commit_id": "c5c1ea3f10708605a4db8f34fef481240a0c86e1", "original_commit_id": "b118a470ad6b58258f7a035fcfaea2b73402cab1", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Yes I really really really don't want it, because if one module changes, only its callback will get cleared, and I don't want to register them again in **all modules** the next time we initialize the cache (this would give us quadratic run time given that you modify all modules!).\r\n\r\nThe complexity of this line doesn't matter. Right now the number of callbacks will be equal to number of `DataParallel` modules a given submodule is nested in, and I don't know of any cases where people use more than 1. I can add a warning that you shouldn't add too many of them or you should fix this method if you'd prefer that.", "created_at": "2017-12-18T00:04:28Z", "updated_at": "2018-11-23T15:37:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/4216#discussion_r157384817", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4216", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157384817"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4216#discussion_r157384817"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4216"}}, "body_html": "<p>Yes I really really really don't want it, because if one module changes, only its callback will get cleared, and I don't want to register them again in <strong>all modules</strong> the next time we initialize the cache (this would give us quadratic run time given that you modify all modules!).</p>\n<p>The complexity of this line doesn't matter. Right now the number of callbacks will be equal to number of <code>DataParallel</code> modules a given submodule is nested in, and I don't know of any cases where people use more than 1. I can add a warning that you shouldn't add too many of them or you should fix this method if you'd prefer that.</p>", "body_text": "Yes I really really really don't want it, because if one module changes, only its callback will get cleared, and I don't want to register them again in all modules the next time we initialize the cache (this would give us quadratic run time given that you modify all modules!).\nThe complexity of this line doesn't matter. Right now the number of callbacks will be equal to number of DataParallel modules a given submodule is nested in, and I don't know of any cases where people use more than 1. I can add a warning that you shouldn't add too many of them or you should fix this method if you'd prefer that.", "in_reply_to_id": 157383795}