{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157397169", "pull_request_review_id": 84030590, "id": 157397169, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzM5NzE2OQ==", "diff_hunk": "@@ -1,10 +1,67 @@\n+import weakref\n import torch\n+import torch.cuda.comm as comm\n+from collections import OrderedDict\n from ..modules import Module\n from .scatter_gather import scatter_kwargs, gather\n from .replicate import replicate\n from .parallel_apply import parallel_apply\n \n \n+# NOTE: these callbacks are one-off\n+# NOTE: they are dedupliacted based on identity\n+class _CallbackOrderedDict(OrderedDict):\n+    @classmethod\n+    def _init_class(cls):\n+        mutating_methods = [\n+            '__setitem__',\n+            '__delitem__',\n+            'pop',\n+            'popitem',\n+            'update',\n+            'setdefault'\n+        ]\n+\n+        def method_wrapper(name):\n+            def callback_method(self, *args, **kwargs):\n+                for callback in self.callbacks:\n+                    callback()\n+                del self.callbacks[:]\n+                return getattr(super(_CallbackOrderedDict, self), name)(*args, **kwargs)\n+            return callback_method\n+        for name in mutating_methods:\n+            setattr(cls, name, method_wrapper(name))\n+\n+    @classmethod\n+    def from_ordered(cls, od):\n+        return cls(od.items())\n+\n+    def __init__(self, *args, **kwargs):\n+        self.callbacks = []\n+        super(_CallbackOrderedDict, self).__init__(*args, **kwargs)\n+\n+    def register_modification_callback(self, cb):\n+        if all(c is not cb for c in self.callbacks):", "path": "torch/nn/parallel/data_parallel.py", "position": 47, "original_position": 44, "commit_id": "c5c1ea3f10708605a4db8f34fef481240a0c86e1", "original_commit_id": "b118a470ad6b58258f7a035fcfaea2b73402cab1", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "> The complexity of this line doesn't matter. Right now the number of callbacks will be equal to number of DataParallel modules a given submodule is nested in, and I don't know of any cases where people use more than 1.\r\n\r\nIf that is the assumption being relied on, then it should be in the code ;)  It's especially poignant here because the class looks like it should be general purpose way to have OrderedDict with callbacks, but as written is only a good idea when you don't put too many callbacks on it. And leave it to end users to misuse code for things they weren't designed for ;)", "created_at": "2017-12-18T03:52:01Z", "updated_at": "2018-11-23T15:37:29Z", "html_url": "https://github.com/pytorch/pytorch/pull/4216#discussion_r157397169", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4216", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/157397169"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4216#discussion_r157397169"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4216"}}, "body_html": "<blockquote>\n<p>The complexity of this line doesn't matter. Right now the number of callbacks will be equal to number of DataParallel modules a given submodule is nested in, and I don't know of any cases where people use more than 1.</p>\n</blockquote>\n<p>If that is the assumption being relied on, then it should be in the code ;)  It's especially poignant here because the class looks like it should be general purpose way to have OrderedDict with callbacks, but as written is only a good idea when you don't put too many callbacks on it. And leave it to end users to misuse code for things they weren't designed for ;)</p>", "body_text": "The complexity of this line doesn't matter. Right now the number of callbacks will be equal to number of DataParallel modules a given submodule is nested in, and I don't know of any cases where people use more than 1.\n\nIf that is the assumption being relied on, then it should be in the code ;)  It's especially poignant here because the class looks like it should be general purpose way to have OrderedDict with callbacks, but as written is only a good idea when you don't put too many callbacks on it. And leave it to end users to misuse code for things they weren't designed for ;)", "in_reply_to_id": 157383795}