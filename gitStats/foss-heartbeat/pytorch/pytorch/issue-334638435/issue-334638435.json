{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8762", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8762/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8762/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8762/events", "html_url": "https://github.com/pytorch/pytorch/issues/8762", "id": 334638435, "node_id": "MDU6SXNzdWUzMzQ2Mzg0MzU=", "number": 8762, "title": "Size mismatch issues with log_sum_exp when keepdim=False", "user": {"login": "abaisero", "id": 1794938, "node_id": "MDQ6VXNlcjE3OTQ5Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1794938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abaisero", "html_url": "https://github.com/abaisero", "followers_url": "https://api.github.com/users/abaisero/followers", "following_url": "https://api.github.com/users/abaisero/following{/other_user}", "gists_url": "https://api.github.com/users/abaisero/gists{/gist_id}", "starred_url": "https://api.github.com/users/abaisero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abaisero/subscriptions", "organizations_url": "https://api.github.com/users/abaisero/orgs", "repos_url": "https://api.github.com/users/abaisero/repos", "events_url": "https://api.github.com/users/abaisero/events{/privacy}", "received_events_url": "https://api.github.com/users/abaisero/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-21T20:07:10Z", "updated_at": "2018-06-21T20:41:49Z", "closed_at": "2018-06-21T20:41:48Z", "author_association": "NONE", "body_html": "<h2>Issue description</h2>\n<p>I've encountered two issues with <code>torch.distributions.utils.log_sum_exp</code> when using <code>keepdim=False</code>.</p>\n<p>When the input tensor has 2 dimensions, <code>log_sum_exp</code> returns a tensor with the wrong shape (the correct output seems to be contained as the diagonal of the returned tensor;  I'm not sure what the off-diagonals represent, if anything).  In this case, a temporary workaround is to use <code>keepdim=True</code> and squeeze the returned tensor.</p>\n<p>The docs don't mention anything about input shape, but I would assume log_sum_exp should be able to work on tensors of any shape.  When the input tensor has &gt;2 dimensions, <code>log_sum_exp</code> raises a RuntimeError concerning size mismatch.  A temporary workaround is to reshape the input into 2 dimensions, apply the same workaround ad in the previous case, and then reshape the result back.</p>\n<h2>Code example</h2>\n<pre><code>import torch\nfrom torch.distributions.utils import log_sum_exp\n\na = torch.randn(2, 3)\n\nprint(log_sum_exp(a).shape)  # should be (2, 1) and is (2, 1)\nprint(log_sum_exp(a, keepdim=False).shape)  # should be (2,) but is (2, 2)\n\nb = torch.randn(2, 3, 4)\n\nprint(log_sum_exp(b).shape)  # should be (2, 3, 1) and is (2, 3, 1)\nprint(log_sum_exp(b, keepdim=False).shape)  # should be (2, 3) but raises \"RuntimeError: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 1\"\n</code></pre>\n<h2>System Info</h2>\n<p>Collecting environment information...<br>\nPyTorch version: 0.4.0<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: 8.0.61</p>\n<p>OS: Debian GNU/Linux 9.4 (stretch)<br>\nGCC version: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516<br>\nCMake version: version 3.7.2</p>\n<p>Python version: 3.6<br>\nIs CUDA available: No<br>\nCUDA runtime version: No CUDA<br>\nGPU models and configuration: No CUDA<br>\nNvidia driver version: No CUDA<br>\ncuDNN version: No CUDA</p>\n<p>Versions of relevant libraries:<br>\n[pip3] numpy (1.13.3)<br>\n[pip3] numpydoc (0.6.0)<br>\n[pip3] torch (0.4.0)<br>\n[pip3] torchvision (0.2.1)<br>\n[conda] torch                     0.4.0                     <br>\n[conda] torchvision               0.2.1                     </p>", "body_text": "Issue description\nI've encountered two issues with torch.distributions.utils.log_sum_exp when using keepdim=False.\nWhen the input tensor has 2 dimensions, log_sum_exp returns a tensor with the wrong shape (the correct output seems to be contained as the diagonal of the returned tensor;  I'm not sure what the off-diagonals represent, if anything).  In this case, a temporary workaround is to use keepdim=True and squeeze the returned tensor.\nThe docs don't mention anything about input shape, but I would assume log_sum_exp should be able to work on tensors of any shape.  When the input tensor has >2 dimensions, log_sum_exp raises a RuntimeError concerning size mismatch.  A temporary workaround is to reshape the input into 2 dimensions, apply the same workaround ad in the previous case, and then reshape the result back.\nCode example\nimport torch\nfrom torch.distributions.utils import log_sum_exp\n\na = torch.randn(2, 3)\n\nprint(log_sum_exp(a).shape)  # should be (2, 1) and is (2, 1)\nprint(log_sum_exp(a, keepdim=False).shape)  # should be (2,) but is (2, 2)\n\nb = torch.randn(2, 3, 4)\n\nprint(log_sum_exp(b).shape)  # should be (2, 3, 1) and is (2, 3, 1)\nprint(log_sum_exp(b, keepdim=False).shape)  # should be (2, 3) but raises \"RuntimeError: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 1\"\n\nSystem Info\nCollecting environment information...\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 8.0.61\nOS: Debian GNU/Linux 9.4 (stretch)\nGCC version: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\nCMake version: version 3.7.2\nPython version: 3.6\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nVersions of relevant libraries:\n[pip3] numpy (1.13.3)\n[pip3] numpydoc (0.6.0)\n[pip3] torch (0.4.0)\n[pip3] torchvision (0.2.1)\n[conda] torch                     0.4.0                     \n[conda] torchvision               0.2.1", "body": "## Issue description\r\n\r\nI've encountered two issues with `torch.distributions.utils.log_sum_exp` when using `keepdim=False`.\r\n\r\nWhen the input tensor has 2 dimensions, `log_sum_exp` returns a tensor with the wrong shape (the correct output seems to be contained as the diagonal of the returned tensor;  I'm not sure what the off-diagonals represent, if anything).  In this case, a temporary workaround is to use `keepdim=True` and squeeze the returned tensor.\r\n\r\nThe docs don't mention anything about input shape, but I would assume log_sum_exp should be able to work on tensors of any shape.  When the input tensor has >2 dimensions, `log_sum_exp` raises a RuntimeError concerning size mismatch.  A temporary workaround is to reshape the input into 2 dimensions, apply the same workaround ad in the previous case, and then reshape the result back.\r\n\r\n## Code example\r\n```\r\nimport torch\r\nfrom torch.distributions.utils import log_sum_exp\r\n\r\na = torch.randn(2, 3)\r\n\r\nprint(log_sum_exp(a).shape)  # should be (2, 1) and is (2, 1)\r\nprint(log_sum_exp(a, keepdim=False).shape)  # should be (2,) but is (2, 2)\r\n\r\nb = torch.randn(2, 3, 4)\r\n\r\nprint(log_sum_exp(b).shape)  # should be (2, 3, 1) and is (2, 3, 1)\r\nprint(log_sum_exp(b, keepdim=False).shape)  # should be (2, 3) but raises \"RuntimeError: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 1\"\r\n```\r\n\r\n## System Info\r\n\r\nCollecting environment information...\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 8.0.61\r\n\r\nOS: Debian GNU/Linux 9.4 (stretch)\r\nGCC version: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\r\nCMake version: version 3.7.2\r\n\r\nPython version: 3.6\r\nIs CUDA available: No\r\nCUDA runtime version: No CUDA\r\nGPU models and configuration: No CUDA\r\nNvidia driver version: No CUDA\r\ncuDNN version: No CUDA\r\n\r\nVersions of relevant libraries:\r\n[pip3] numpy (1.13.3)\r\n[pip3] numpydoc (0.6.0)\r\n[pip3] torch (0.4.0)\r\n[pip3] torchvision (0.2.1)\r\n[conda] torch                     0.4.0                     <pip>\r\n[conda] torchvision               0.2.1                     <pip>"}