{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/300812349", "html_url": "https://github.com/pytorch/pytorch/issues/1528#issuecomment-300812349", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1528", "id": 300812349, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDgxMjM0OQ==", "user": {"login": "zkolter", "id": 2465474, "node_id": "MDQ6VXNlcjI0NjU0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2465474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkolter", "html_url": "https://github.com/zkolter", "followers_url": "https://api.github.com/users/zkolter/followers", "following_url": "https://api.github.com/users/zkolter/following{/other_user}", "gists_url": "https://api.github.com/users/zkolter/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkolter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkolter/subscriptions", "organizations_url": "https://api.github.com/users/zkolter/orgs", "repos_url": "https://api.github.com/users/zkolter/repos", "events_url": "https://api.github.com/users/zkolter/events{/privacy}", "received_events_url": "https://api.github.com/users/zkolter/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-11T14:46:44Z", "updated_at": "2017-05-11T14:46:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Less critical than I had originally though (still worth fixing, but there's a viable alternative), as it looks like <code>torch.index_select</code> has the right behavior, even if it's a little odd that it requires a Variable third argument:</p>\n<div class=\"highlight highlight-source-python\"><pre>y <span class=\"pl-k\">=</span> Variable(torch.ones(<span class=\"pl-c1\">1</span>), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ny_dup <span class=\"pl-k\">=</span> torch.index_select(y, <span class=\"pl-c1\">0</span>, Variable(torch.LongTensor([<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>])))\ny_dup[<span class=\"pl-c1\">0</span>].backward() <span class=\"pl-c\"><span class=\"pl-c\">#</span> backprop on first </span>\n<span class=\"pl-c1\">print</span>(y.grad)\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">In [42]: Variable containing:</span>\n<span class=\"pl-s\"> 1</span>\n<span class=\"pl-s\">[torch.FloatTensor of size 1]<span class=\"pl-pds\">\"\"\"</span></span></pre></div>", "body_text": "Less critical than I had originally though (still worth fixing, but there's a viable alternative), as it looks like torch.index_select has the right behavior, even if it's a little odd that it requires a Variable third argument:\ny = Variable(torch.ones(1), requires_grad=True)\ny_dup = torch.index_select(y, 0, Variable(torch.LongTensor([0,0])))\ny_dup[0].backward() # backprop on first \nprint(y.grad)\n\"\"\"\nIn [42]: Variable containing:\n 1\n[torch.FloatTensor of size 1]\"\"\"", "body": "Less critical than I had originally though (still worth fixing, but there's a viable alternative), as it looks like `torch.index_select` has the right behavior, even if it's a little odd that it requires a Variable third argument:\r\n\r\n```python\r\ny = Variable(torch.ones(1), requires_grad=True)\r\ny_dup = torch.index_select(y, 0, Variable(torch.LongTensor([0,0])))\r\ny_dup[0].backward() # backprop on first \r\nprint(y.grad)\r\n\"\"\"\r\nIn [42]: Variable containing:\r\n 1\r\n[torch.FloatTensor of size 1]\"\"\"\r\n```"}