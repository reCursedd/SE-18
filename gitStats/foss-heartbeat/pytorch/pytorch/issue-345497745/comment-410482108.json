{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/410482108", "html_url": "https://github.com/pytorch/pytorch/issues/9983#issuecomment-410482108", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9983", "id": 410482108, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDQ4MjEwOA==", "user": {"login": "vishwakftw", "id": 23639302, "node_id": "MDQ6VXNlcjIzNjM5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/23639302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwakftw", "html_url": "https://github.com/vishwakftw", "followers_url": "https://api.github.com/users/vishwakftw/followers", "following_url": "https://api.github.com/users/vishwakftw/following{/other_user}", "gists_url": "https://api.github.com/users/vishwakftw/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwakftw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwakftw/subscriptions", "organizations_url": "https://api.github.com/users/vishwakftw/orgs", "repos_url": "https://api.github.com/users/vishwakftw/repos", "events_url": "https://api.github.com/users/vishwakftw/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwakftw/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-04T22:35:00Z", "updated_at": "2018-08-04T22:35:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a> I went through the SciPy implementation for <code>matrixexp</code> (named <code>expm</code> in SciPy), and have a few questions:</p>\n<ul>\n<li>the implementation is added for sparse arrays as well. Should I be considering that, or is that supposed to be left for later?</li>\n<li>the implementation seems to take advantage of upper triangular matrices, and there are some optimized calculations done for the same. Should I take the same approach with <code>ATen</code> or is a general implementation sufficient?<br>\nThank you.</li>\n</ul>", "body_text": "@zou3519 @fmassa I went through the SciPy implementation for matrixexp (named expm in SciPy), and have a few questions:\n\nthe implementation is added for sparse arrays as well. Should I be considering that, or is that supposed to be left for later?\nthe implementation seems to take advantage of upper triangular matrices, and there are some optimized calculations done for the same. Should I take the same approach with ATen or is a general implementation sufficient?\nThank you.", "body": "@zou3519 @fmassa I went through the SciPy implementation for `matrixexp` (named `expm` in SciPy), and have a few questions:\r\n- the implementation is added for sparse arrays as well. Should I be considering that, or is that supposed to be left for later?\r\n- the implementation seems to take advantage of upper triangular matrices, and there are some optimized calculations done for the same. Should I take the same approach with `ATen` or is a general implementation sufficient?\r\nThank you."}