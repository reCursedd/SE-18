{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110013219", "pull_request_review_id": 31154057, "id": 110013219, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDAxMzIxOQ==", "diff_hunk": "@@ -55,14 +97,69 @@ def constant(tensor, val):\n     if isinstance(tensor, Variable):\n         constant(tensor.data, val)\n         return tensor\n+\n     return tensor.fill_(val)\n \n \n+def eye(tensor):\n+    \"\"\"Fills the 2-dimensional input Tensor or Variable with the identity matrix. Preserves the identity of the inputs in\n+    Linear layers.\n+\n+    Args:\n+        tensor: a 2-dimensional torch.Tensor or autograd.Variable\n+\n+    Examples:\n+        >>> w = torch.Tensor(3, 5)\n+        >>> nn.init.eye(w)\n+    \"\"\"\n+    if tensor.ndimension() != 2:\n+        raise ValueError(\"Only tensors with 2 dimensions are supported\")\n+\n+    if isinstance(tensor, Variable):\n+        eye(tensor.data)\n+        return tensor\n+\n+    return tensor.copy_(torch.eye(tensor.size(0), tensor.size(1)))\n+\n+\n+def dirac(tensor, scaled=True):\n+    \"\"\"Fills the {3, 4, 5}-dimensional input Tensor or Variable with the Dirac delta function. Preserves the identity of\n+    the inputs in Convolutional layers.\n+\n+    Args:\n+        tensor: a {3, 4, 5}-dimensional torch.Tensor or autograd.Variable\n+        scaled: a boolean indicating that the output of the sum of the filters will be the identity\n+\n+    Examples:\n+        >>> w = torch.Tensor(3, 16, 5, 5)\n+        >>> nn.init.dirac(w)\n+    \"\"\"\n+    dimensions = tensor.ndimension()\n+    if dimensions not in [3, 4, 5]:\n+        raise ValueError(\"Only tensors with 3, 4, or 5 dimensions are supported\")\n+\n+    if isinstance(tensor, Variable):\n+        dirac(tensor.data, scaled=scaled)\n+        return tensor\n+\n+    tensor.zero_()\n+    val = 1.0 / tensor.size(1) if scaled else 1\n+\n+    if dimensions == 3:  # Temporal convolution\n+        tensor[:, :, tensor.size(2) // 2].fill_(val)\n+    elif dimensions == 4:  # Spatial convolution\n+        tensor[:, :, tensor.size(2) // 2, tensor.size(3) // 2].fill_(val)", "path": "torch/nn/init.py", "position": null, "original_position": 145, "commit_id": "b4bbe7cf4abe5201475c6e98a190b946493d4139", "original_commit_id": "7282aed0c95a7d41d076d54a6b5c01576a5434ef", "user": {"login": "fmassa", "id": 9110200, "node_id": "MDQ6VXNlcjkxMTAyMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9110200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmassa", "html_url": "https://github.com/fmassa", "followers_url": "https://api.github.com/users/fmassa/followers", "following_url": "https://api.github.com/users/fmassa/following{/other_user}", "gists_url": "https://api.github.com/users/fmassa/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmassa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmassa/subscriptions", "organizations_url": "https://api.github.com/users/fmassa/orgs", "repos_url": "https://api.github.com/users/fmassa/repos", "events_url": "https://api.github.com/users/fmassa/events{/privacy}", "received_events_url": "https://api.github.com/users/fmassa/received_events", "type": "User", "site_admin": false}, "body": "I'm a bit confused about the definition of `dirac` in here. This filter is actually performing the sum over the input channels, so it doesn't give you the identity, but a transformation which preserves the sum over the channels.\r\nThe way I see it, in order to preserve the identity you'd need to consider individual feature planes, and not sum over them (something similar to grouped convolutions with number of groups = number of input channels).", "created_at": "2017-04-05T19:58:30Z", "updated_at": "2018-11-23T15:33:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/1172#discussion_r110013219", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1172", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/110013219"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1172#discussion_r110013219"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1172"}}, "body_html": "<p>I'm a bit confused about the definition of <code>dirac</code> in here. This filter is actually performing the sum over the input channels, so it doesn't give you the identity, but a transformation which preserves the sum over the channels.<br>\nThe way I see it, in order to preserve the identity you'd need to consider individual feature planes, and not sum over them (something similar to grouped convolutions with number of groups = number of input channels).</p>", "body_text": "I'm a bit confused about the definition of dirac in here. This filter is actually performing the sum over the input channels, so it doesn't give you the identity, but a transformation which preserves the sum over the channels.\nThe way I see it, in order to preserve the identity you'd need to consider individual feature planes, and not sum over them (something similar to grouped convolutions with number of groups = number of input channels)."}