{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/430333089", "html_url": "https://github.com/pytorch/pytorch/pull/12671#issuecomment-430333089", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12671", "id": 430333089, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDMzMzA4OQ==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-16T17:50:02Z", "updated_at": "2018-10-16T18:02:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16191443\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/crcrpar\">@crcrpar</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a> Thanks for looking!</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a> The problem with recomputing eval mode is that we only store <code>weight_orig</code>, and <code>weight_u</code>. But we need <code>weight_v</code> to also recompute <code>weight</code> graph. Note that <code>weight_v</code> is not uniquely determined even though we also store <code>weight</code>. And because our power iteration updates <code>v</code> vector first and <code>u</code> vector second, it can't be computed from <code>u</code> either. Therefore, I want to also register <code>weight_v</code> as a buffer. Additionally, I want to not register <code>weight</code> as a buffer, but as a plain attribute. Registering as buffer makes the state dict redundant, and it is not really a buffer. To make all these changes, I need to figure out a way to add hook into <code>load_state_dict</code> when people register <code>spectral_norm</code>. I will add the test you mentioned when that patch happens, because weight_orig still doesn't have gradient in eval as of this patch.</p>", "body_text": "@crcrpar @t-vi Thanks for looking!\n@t-vi The problem with recomputing eval mode is that we only store weight_orig, and weight_u. But we need weight_v to also recompute weight graph. Note that weight_v is not uniquely determined even though we also store weight. And because our power iteration updates v vector first and u vector second, it can't be computed from u either. Therefore, I want to also register weight_v as a buffer. Additionally, I want to not register weight as a buffer, but as a plain attribute. Registering as buffer makes the state dict redundant, and it is not really a buffer. To make all these changes, I need to figure out a way to add hook into load_state_dict when people register spectral_norm. I will add the test you mentioned when that patch happens, because weight_orig still doesn't have gradient in eval as of this patch.", "body": "@crcrpar @t-vi Thanks for looking!\r\n\r\n@t-vi The problem with recomputing eval mode is that we only store `weight_orig`, and `weight_u`. But we need `weight_v` to also recompute `weight` graph. Note that `weight_v` is not uniquely determined even though we also store `weight`. And because our power iteration updates `v` vector first and `u` vector second, it can't be computed from `u` either. Therefore, I want to also register `weight_v` as a buffer. Additionally, I want to not register `weight` as a buffer, but as a plain attribute. Registering as buffer makes the state dict redundant, and it is not really a buffer. To make all these changes, I need to figure out a way to add hook into `load_state_dict` when people register `spectral_norm`. I will add the test you mentioned when that patch happens, because weight_orig still doesn't have gradient in eval as of this patch."}