{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197216577", "pull_request_review_id": 130913481, "id": 197216577, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzIxNjU3Nw==", "diff_hunk": "@@ -409,70 +412,117 @@ struct GraphExecutorImpl {\n     return false;\n   }\n \n-\n-  // remove ReplaceIfUndef(v, replacement) nodes that consume inputs with 'v' if\n-  // the input is defined, and 'replacement' if it is not.\n-  // Note: this is a very limited pass. It looks at undefined inputs,\n-  // and cleans up ReplaceIfUndef nodes inserted by autodiff.\n+  // propagate undefined information through a gradient graph\n+  // Note: this is a very limited pass. It only propagates undefines for\n+  // operations generated by the symbolic autodiff code and cleans up\n+  // AutogradAdds when possible. Outputs of other nodes are conservatively\n+  // marked MaybeDefined and not optimized.\n   void specializeUndef(Graph & g, const ArgumentSpec & spec) {\n+    enum class State { Defined, Undefined, MaybeDefined };\n+    std::unordered_map<Value*, State> state;\n     for(size_t i = 0; i < spec.size(); i++) {\n-      std::vector<Value*> to_replace;\n-      // do not edit in place, since it invalidates uses iterator\n-      for(auto u : g.inputs()[i]->uses()) {\n-        if(u.user->kind() == prim::ReplaceIfUndef) {\n-          to_replace.push_back(u.user->output());\n-        }\n-      }\n-      for(auto v : to_replace) {\n-        // if it is defined, then we replace with 'v' if not,\n-        // we replace with 'replacement' which is normally just a zero tensor\n-        int idx = spec.tensorInfo(i).defined() ? 0 : 1;\n-        v->replaceAllUsesWith(v->node()->inputs()[idx]);\n-        v->node()->destroy();\n-      }\n+      state[g.inputs()[i]] = spec.tensorInfo(i).defined() ? State::Defined : State::Undefined;\n     }\n-  }\n-  // a + 0 -> a\n-  // 0 + a -> a\n-  void propagateZeros(Graph & g) {\n     for(auto it = g.nodes().begin(); it != g.nodes().end(); ++it) {\n-      if(it->kind() == aten::add && it->inputs().size() == 2 && at::Scalar(it->t(attr::alpha)).toDouble() == 1.0) {\n-        if(isZero(it->inputs()[0])) {\n-          it->output()->replaceAllUsesWith(it->inputs()[1]);\n-          it.destroyCurrent();\n-        } else if(isZero(it->inputs()[1])) {\n-          it->output()->replaceAllUsesWith(it->inputs()[0]);\n-          it.destroyCurrent();\n-        }\n+      auto n = *it;\n+      switch(n->kind()) {\n+        case prim::LinearBlock: {\n+          auto all_undefined =\n+              std::all_of(n->inputs().begin(), n->inputs().end(), [&](Value* v) {\n+                return state[v] == State::Undefined;\n+              });\n+          // Property 1: if all the gradInputs to the LinearBlock are undefined\n+          // then the gradOutputs are also zero and will be represented as undefined nodes\n+          if(all_undefined) {\n+            auto undef = g.createUndefined()->insertAfter(n)->output();\n+            for(auto o : n->outputs()) {\n+              o->replaceAllUsesWith(undef);\n+            }\n+          } else {\n+          // Property 2: LinearBlocks are required to correctly handle combinations\n+          // of defined and undefined inputs. They are expected to produce defined\n+          // output tensors in this case.", "path": "torch/csrc/jit/graph_executor.cpp", "position": null, "original_position": 81, "commit_id": "e2b3828276930eaf208705eb3d91047bc109eca1", "original_commit_id": "3a4b65f33f2eccef207875e60b0f7e22646bbdb7", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Are we sure this is always the case? I'm not so sure. E.g. I think the convolution backward can emit an undefined tensor for the bias grad if it was undefined in the forward.", "created_at": "2018-06-21T17:30:34Z", "updated_at": "2018-11-23T15:46:01Z", "html_url": "https://github.com/pytorch/pytorch/pull/8641#discussion_r197216577", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8641", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197216577"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8641#discussion_r197216577"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8641"}}, "body_html": "<p>Are we sure this is always the case? I'm not so sure. E.g. I think the convolution backward can emit an undefined tensor for the bias grad if it was undefined in the forward.</p>", "body_text": "Are we sure this is always the case? I'm not so sure. E.g. I think the convolution backward can emit an undefined tensor for the bias grad if it was undefined in the forward."}