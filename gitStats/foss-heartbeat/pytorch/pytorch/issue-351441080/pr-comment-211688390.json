{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211688390", "pull_request_review_id": 148163484, "id": 211688390, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTY4ODM5MA==", "diff_hunk": "@@ -78,7 +72,9 @@\n       {\n         \"path\": \"aten/src/THC/THCTensorRandom.cu\",\n         \"s_constants\": {\n-          \"struct curandStateMtgp32*\": \"curandStateMtgp32*\"\n+          \"struct curandStateMtgp32*\": \"curandStateMtgp32*\",\n+          \"__host__ void THCRandom_getRNGState\": \"extern \\\"C\\\" __host__ void THCRandom_getRNGState\",", "path": "tools/amd_build/disabled_features.yaml", "position": 19, "original_position": 19, "commit_id": "0660aa300426f1fad4d62185c3da75f301c851c3", "original_commit_id": "94065103fee49bc6a9cc615e3c16106e0b85e6d0", "user": {"login": "Jorghi12", "id": 8586039, "node_id": "MDQ6VXNlcjg1ODYwMzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/8586039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jorghi12", "html_url": "https://github.com/Jorghi12", "followers_url": "https://api.github.com/users/Jorghi12/followers", "following_url": "https://api.github.com/users/Jorghi12/following{/other_user}", "gists_url": "https://api.github.com/users/Jorghi12/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jorghi12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jorghi12/subscriptions", "organizations_url": "https://api.github.com/users/Jorghi12/orgs", "repos_url": "https://api.github.com/users/Jorghi12/repos", "events_url": "https://api.github.com/users/Jorghi12/events{/privacy}", "received_events_url": "https://api.github.com/users/Jorghi12/received_events", "type": "User", "site_admin": false}, "body": "Could you comment with an explanation for why this extra modification is necessary? The declarations of these functions already have \"extern C\" (via THC_API macro) inside aten/src/THC/THCTensorRandom.h. Thus these functions will already have support for linkage to modules written in the C programming language. It seems redundant to me.\r\n\r\nThe C++ standard:\r\n_A function can be re-declared without a linkage specification after it was declared with a language specification, the second declaration will reuse the first language linkage._ \r\n\r\nhttps://en.cppreference.com/w/cpp/language/language_linkage", "created_at": "2018-08-21T17:18:05Z", "updated_at": "2018-11-23T15:49:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/10612#discussion_r211688390", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10612", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211688390"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10612#discussion_r211688390"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10612"}}, "body_html": "<p>Could you comment with an explanation for why this extra modification is necessary? The declarations of these functions already have \"extern C\" (via THC_API macro) inside aten/src/THC/THCTensorRandom.h. Thus these functions will already have support for linkage to modules written in the C programming language. It seems redundant to me.</p>\n<p>The C++ standard:<br>\n<em>A function can be re-declared without a linkage specification after it was declared with a language specification, the second declaration will reuse the first language linkage.</em></p>\n<p><a href=\"https://en.cppreference.com/w/cpp/language/language_linkage\" rel=\"nofollow\">https://en.cppreference.com/w/cpp/language/language_linkage</a></p>", "body_text": "Could you comment with an explanation for why this extra modification is necessary? The declarations of these functions already have \"extern C\" (via THC_API macro) inside aten/src/THC/THCTensorRandom.h. Thus these functions will already have support for linkage to modules written in the C programming language. It seems redundant to me.\nThe C++ standard:\nA function can be re-declared without a linkage specification after it was declared with a language specification, the second declaration will reuse the first language linkage.\nhttps://en.cppreference.com/w/cpp/language/language_linkage"}