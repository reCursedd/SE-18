{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/258839700", "html_url": "https://github.com/pytorch/pytorch/issues/175#issuecomment-258839700", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/175", "id": 258839700, "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODgzOTcwMA==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-07T13:48:42Z", "updated_at": "2016-11-07T13:48:42Z", "author_association": "MEMBER", "body_html": "<p>I understand the need to optimize different sets. If you want to use a single optimizer you can specify per-parameter arguments. If you want to use different optimizers, we could change the API to allow omitting the forward closure argument, and it would just use the grads that you manually accumulated. I think this way would be the simplest, as the code would be completely linear (remember that going back to the Lua optim breaks the linearity because of the complicated closure that needs to be defined before calling the optimizer).</p>", "body_text": "I understand the need to optimize different sets. If you want to use a single optimizer you can specify per-parameter arguments. If you want to use different optimizers, we could change the API to allow omitting the forward closure argument, and it would just use the grads that you manually accumulated. I think this way would be the simplest, as the code would be completely linear (remember that going back to the Lua optim breaks the linearity because of the complicated closure that needs to be defined before calling the optimizer).", "body": "I understand the need to optimize different sets. If you want to use a single optimizer you can specify per-parameter arguments. If you want to use different optimizers, we could change the API to allow omitting the forward closure argument, and it would just use the grads that you manually accumulated. I think this way would be the simplest, as the code would be completely linear (remember that going back to the Lua optim breaks the linearity because of the complicated closure that needs to be defined before calling the optimizer).\n"}