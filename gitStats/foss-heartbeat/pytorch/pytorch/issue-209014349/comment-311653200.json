{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/311653200", "html_url": "https://github.com/pytorch/pytorch/issues/805#issuecomment-311653200", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/805", "id": 311653200, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTY1MzIwMA==", "user": {"login": "erogol", "id": 1402048, "node_id": "MDQ6VXNlcjE0MDIwNDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1402048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erogol", "html_url": "https://github.com/erogol", "followers_url": "https://api.github.com/users/erogol/followers", "following_url": "https://api.github.com/users/erogol/following{/other_user}", "gists_url": "https://api.github.com/users/erogol/gists{/gist_id}", "starred_url": "https://api.github.com/users/erogol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erogol/subscriptions", "organizations_url": "https://api.github.com/users/erogol/orgs", "repos_url": "https://api.github.com/users/erogol/repos", "events_url": "https://api.github.com/users/erogol/events{/privacy}", "received_events_url": "https://api.github.com/users/erogol/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-28T13:02:51Z", "updated_at": "2017-06-28T13:03:46Z", "author_association": "NONE", "body_html": "<p>For ones who need Maxout, I changed the above code to make it work.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Maxout</span>(<span class=\"pl-e\">nn</span>.<span class=\"pl-e\">Module</span>):\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">d_in</span>, <span class=\"pl-smi\">d_out</span>, <span class=\"pl-smi\">pool_size</span>):\n        <span class=\"pl-c1\">super</span>().<span class=\"pl-c1\">__init__</span>()\n        <span class=\"pl-c1\">self</span>.d_in, <span class=\"pl-c1\">self</span>.d_out, <span class=\"pl-c1\">self</span>.pool_size <span class=\"pl-k\">=</span> d_in, d_out, pool_size\n        <span class=\"pl-c1\">self</span>.lin <span class=\"pl-k\">=</span> nn.Linear(d_in, d_out <span class=\"pl-k\">*</span> pool_size)\n\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">inputs</span>):\n        shape <span class=\"pl-k\">=</span> <span class=\"pl-c1\">list</span>(inputs.size())\n        shape[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.d_out\n        shape.append(<span class=\"pl-c1\">self</span>.pool_size)\n        max_dim <span class=\"pl-k\">=</span> <span class=\"pl-c1\">len</span>(shape) <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>\n        out <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.lin(inputs)\n        m, i <span class=\"pl-k\">=</span> out.view(<span class=\"pl-k\">*</span>shape).max(max_dim)\n        <span class=\"pl-k\">return</span> m</pre></div>", "body_text": "For ones who need Maxout, I changed the above code to make it work.\nclass Maxout(nn.Module):\n\n    def __init__(self, d_in, d_out, pool_size):\n        super().__init__()\n        self.d_in, self.d_out, self.pool_size = d_in, d_out, pool_size\n        self.lin = nn.Linear(d_in, d_out * pool_size)\n\n\n    def forward(self, inputs):\n        shape = list(inputs.size())\n        shape[-1] = self.d_out\n        shape.append(self.pool_size)\n        max_dim = len(shape) - 1\n        out = self.lin(inputs)\n        m, i = out.view(*shape).max(max_dim)\n        return m", "body": "For ones who need Maxout, I changed the above code to make it work. \r\n\r\n\r\n```python\r\nclass Maxout(nn.Module):\r\n\r\n    def __init__(self, d_in, d_out, pool_size):\r\n        super().__init__()\r\n        self.d_in, self.d_out, self.pool_size = d_in, d_out, pool_size\r\n        self.lin = nn.Linear(d_in, d_out * pool_size)\r\n\r\n\r\n    def forward(self, inputs):\r\n        shape = list(inputs.size())\r\n        shape[-1] = self.d_out\r\n        shape.append(self.pool_size)\r\n        max_dim = len(shape) - 1\r\n        out = self.lin(inputs)\r\n        m, i = out.view(*shape).max(max_dim)\r\n        return m\r\n```\r\n"}