{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10927", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10927/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10927/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10927/events", "html_url": "https://github.com/pytorch/pytorch/pull/10927", "id": 354530119, "node_id": "MDExOlB1bGxSZXF1ZXN0MjExMjcxNDgx", "number": 10927, "title": "Resolve builtins using a dict rather than by name", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-28T00:55:13Z", "updated_at": "2018-11-23T15:50:10Z", "closed_at": "2018-08-28T18:27:52Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10927", "html_url": "https://github.com/pytorch/pytorch/pull/10927", "diff_url": "https://github.com/pytorch/pytorch/pull/10927.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10927.patch"}, "body_html": "<p>Changes the approach for resolving builtin ops so that the following works</p>\n<pre><code>add = torch.add\n@script\ndef foo(x):\n  return add(x, x)\n</code></pre>\n<p>This handles cases when people alias torch and torch.nn.functional to<br>\nshorter names.</p>\n<p>This works by building a table of id -&gt; builtin name for the know builtin<br>\nops in torch, torch.nn.functional, and for any user-defined<br>\nop created by accessing in torch.ops.foo.bar</p>\n<p>This allows us to clean up many SugaredValue types in the compiler.</p>\n<p>Notes:</p>\n<ul>\n<li>we now consider any attributes on python modules to be constants<br>\n(e.g. math.pi, and torch.double).</li>\n<li>fixes a bug where we incorrectly allowed attribute lookup on arbitrary<br>\npyton objects. It is now restricted to modules only.</li>\n</ul>", "body_text": "Changes the approach for resolving builtin ops so that the following works\nadd = torch.add\n@script\ndef foo(x):\n  return add(x, x)\n\nThis handles cases when people alias torch and torch.nn.functional to\nshorter names.\nThis works by building a table of id -> builtin name for the know builtin\nops in torch, torch.nn.functional, and for any user-defined\nop created by accessing in torch.ops.foo.bar\nThis allows us to clean up many SugaredValue types in the compiler.\nNotes:\n\nwe now consider any attributes on python modules to be constants\n(e.g. math.pi, and torch.double).\nfixes a bug where we incorrectly allowed attribute lookup on arbitrary\npyton objects. It is now restricted to modules only.", "body": "Changes the approach for resolving builtin ops so that the following works\r\n\r\n```\r\nadd = torch.add\r\n@script\r\ndef foo(x):\r\n  return add(x, x)\r\n```\r\n\r\nThis handles cases when people alias torch and torch.nn.functional to\r\nshorter names.\r\n\r\nThis works by building a table of id -> builtin name for the know builtin\r\nops in torch, torch.nn.functional, and for any user-defined\r\nop created by accessing in torch.ops.foo.bar\r\n\r\nThis allows us to clean up many SugaredValue types in the compiler.\r\n\r\nNotes:\r\n* we now consider any attributes on python modules to be constants\r\n(e.g. math.pi, and torch.double).\r\n* fixes a bug where we incorrectly allowed attribute lookup on arbitrary\r\npyton objects. It is now restricted to modules only."}