{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160141877", "pull_request_review_id": 87205182, "id": 160141877, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDE0MTg3Nw==", "diff_hunk": "@@ -0,0 +1,114 @@\n+import warnings\n+from functools import total_ordering\n+\n+from torch.distributions.distribution import Distribution\n+\n+_KL_REGISTRY = {}  # Source of truth mapping a few general (type, type) pairs to functions.\n+_KL_DISPATCH_TABLE = {}  # Memoized version mapping many specific (type, type) pairs to functions.\n+\n+\n+def register_kl(type_p, type_q):\n+    \"\"\"\n+    Decorator to register a pairwise function with :meth:`kl_divergence`.\n+    Usage::\n+\n+        @register_kl(Normal, Normal)\n+        def kl_normal_normal(p, q):\n+            # insert implementation here\n+\n+    Lookup returns the most specific (type,type) match ordered by subclass. If\n+    the match is ambiguous, a `RuntimeWarning` is raised. For example to\n+    resolve the ambiguous situation::\n+\n+        @register_kl(BaseP, DerivedQ)\n+        def kl_version1(p, q): ...\n+        @register_kl(DerivedP, BaseQ)\n+        def kl_version2(p, q): ...\n+\n+    you should register a third most-specific implementation, e.g.\n+\n+        register_kl(DerivedP, DerivedQ)(kl_version1)  # Break the tie.\n+\n+    Args:\n+        type_p (type): A subclass of :class:`~torch.distributions.Distribution`.\n+        type_q (type): A subclass of :class:`~torch.distributions.Distribution`.\n+    \"\"\"\n+    if not isinstance(type_p, type) and issubclass(type_p, Distribution):\n+        raise TypeError('Expected type_p to be a Distribution subclass but got {}'.format(type_p))\n+    if not isinstance(type_q, type) and issubclass(type_q, Distribution):\n+        raise TypeError('Expected type_q to be a Distribution subclass but got {}'.format(type_q))\n+\n+    def decorator(fun):\n+        _KL_REGISTRY[type_p, type_q] = fun\n+        _KL_DISPATCH_TABLE.clear()  # reset since lookup order may have changed\n+        return fun\n+\n+    return decorator\n+\n+\n+@total_ordering\n+class _Match(object):\n+    __slots__ = ['types']\n+\n+    def __init__(self, *types):\n+        self.types = types\n+\n+    def __eq__(self, other):\n+        return self.types == other.types\n+\n+    def __le__(self, other):\n+        for x, y in zip(self.types, other.types):\n+            if not issubclass(x, y):\n+                return False\n+            if x is not y:\n+                break\n+        return True\n+\n+\n+def _dispatch_kl(type_p, type_q):\n+    \"\"\"\n+    Find the most specific approximate match, assuming single inheritance.\n+    \"\"\"\n+    matches = [(super_p, super_q) for super_p, super_q in _KL_REGISTRY\n+               if issubclass(type_p, super_p) and issubclass(type_q, super_q)]\n+    if not matches:\n+        return NotImplemented\n+    # Check that the left- and right- lexicographic orders agree.\n+    left_p, left_q = min(_Match(*m) for m in matches).types\n+    right_q, right_p = min(_Match(*reversed(m)) for m in matches).types", "path": "torch/distributions/kl.py", "position": 81, "original_position": 78, "commit_id": "261007779280ea86827eca288c62153a2efd5bec", "original_commit_id": "83fd37246199131b673e0b6f2e56fd76f4fc31c6", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Thanks for pushing for a better implementation :wink:", "created_at": "2018-01-08T13:23:17Z", "updated_at": "2018-11-23T15:37:56Z", "html_url": "https://github.com/pytorch/pytorch/pull/4525#discussion_r160141877", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4525", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160141877"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4525#discussion_r160141877"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4525"}}, "body_html": "<p>Thanks for pushing for a better implementation <g-emoji class=\"g-emoji\" alias=\"wink\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f609.png\">\ud83d\ude09</g-emoji></p>", "body_text": "Thanks for pushing for a better implementation \ud83d\ude09", "in_reply_to_id": 160094813}