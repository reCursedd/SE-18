{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160065162", "pull_request_review_id": 87115217, "id": 160065162, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MDA2NTE2Mg==", "diff_hunk": "@@ -0,0 +1,83 @@\n+from collections import OrderedDict\n+\n+from torch.distributions.distribution import Distribution\n+\n+_KL_REGISTRY = OrderedDict()\n+_KL_DISPATCH_TABLE = {}\n+\n+\n+def register_kl(type_p, type_q):\n+    \"\"\"\n+    Decorator to register a pairwise function with :meth:`kl_divergence`.\n+    Usage::\n+\n+        @register_kl(Normal, Normal)\n+        def kl_normal_normal(p, q):\n+            # insert implementation here\n+\n+    Lookup order is:\n+\n+    1.  First look for an exact match.\n+    2.  Otherwise find the first pair of registered superclasses, in order that\n+        functions were registered.\n+\n+    Args:\n+        type_p (type): A subclass of :class:`~torch.distributions.Distribution`.\n+        type_q (type): A subclass of :class:`~torch.distributions.Distribution`.\n+    \"\"\"\n+    if not isinstance(type_p, type) and issubclass(type_p, Distribution):\n+        raise TypeError('Expected type_p to be a Distribution subclass but got {}'.format(type_p))\n+    if not isinstance(type_q, type) and issubclass(type_q, Distribution):\n+        raise TypeError('Expected type_q to be a Distribution subclass but got {}'.format(type_q))\n+\n+    def decorator(fun):\n+        _KL_REGISTRY[type_p, type_q] = fun\n+        _KL_DISPATCH_TABLE.clear()  # reset since lookup order may have changed\n+        return fun\n+\n+    return decorator\n+\n+\n+def _dispatch_kl(type_p, type_q):\n+    # Look for an exact match.\n+    try:\n+        return _KL_REGISTRY[type_p, type_q]\n+    except KeyError:\n+        pass\n+    # Look for the first approximate match.\n+    for super_p, super_q in _KL_REGISTRY:", "path": "torch/distributions/kl.py", "position": null, "original_position": 48, "commit_id": "261007779280ea86827eca288c62153a2efd5bec", "original_commit_id": "1d09c5d28f502832a88562c8ba2ce6d2e01bcdc0", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "body": "Sure, let's see what happens when things get more complex. The current strategy works for our depth=3 hierarchy `Distribution` -> `Gamma` -> `Chi2`. It seems safe since in the worst case a user can explicitly register all desired pairs.\r\n  ", "created_at": "2018-01-08T00:20:07Z", "updated_at": "2018-11-23T15:37:55Z", "html_url": "https://github.com/pytorch/pytorch/pull/4525#discussion_r160065162", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4525", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/160065162"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4525#discussion_r160065162"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4525"}}, "body_html": "<p>Sure, let's see what happens when things get more complex. The current strategy works for our depth=3 hierarchy <code>Distribution</code> -&gt; <code>Gamma</code> -&gt; <code>Chi2</code>. It seems safe since in the worst case a user can explicitly register all desired pairs.</p>", "body_text": "Sure, let's see what happens when things get more complex. The current strategy works for our depth=3 hierarchy Distribution -> Gamma -> Chi2. It seems safe since in the worst case a user can explicitly register all desired pairs.", "in_reply_to_id": 160064574}