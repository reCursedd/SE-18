{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/420475506", "html_url": "https://github.com/pytorch/pytorch/issues/11555#issuecomment-420475506", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/11555", "id": 420475506, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDQ3NTUwNg==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-12T00:58:18Z", "updated_at": "2018-09-12T00:58:18Z", "author_association": "MEMBER", "body_html": "<p>The problem with <code>masked_fill_</code> is that it doesn't have an out-of-place version that we could dispatch to in the JIT, so we don't get any auto generated stubs for it.</p>\n<p>A simple workaround would be to do this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">remove_nans</span>(<span class=\"pl-smi\">tensor</span>):\n    <span class=\"pl-k\">if</span> torch._C._get_tracing_state() <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n        tensor.masked_fill_(<span class=\"pl-c1\">...</span>)\n    <span class=\"pl-k\">else</span>:\n        <span class=\"pl-c1\">...</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> some equivalent code that the JIT can understand</span></pre></div>\n<p>If you know you'll be able to control when the tracing happens you can even have this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">remove_nans_masked_fill</span>(<span class=\"pl-smi\">tensor</span>):\n    tensor.masked_fill_(<span class=\"pl-c1\">...</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">remove_nans_tracing</span>(<span class=\"pl-smi\">tensor</span>):\n    <span class=\"pl-c1\">...</span>\n\nremove_nans <span class=\"pl-k\">=</span> remove_nans_masked_fill</pre></div>\n<p>then simply use <code>remove_nans</code> in all of your code, and swap it for the non-optimized implementation only for the periods when you're tracing.</p>", "body_text": "The problem with masked_fill_ is that it doesn't have an out-of-place version that we could dispatch to in the JIT, so we don't get any auto generated stubs for it.\nA simple workaround would be to do this:\ndef remove_nans(tensor):\n    if torch._C._get_tracing_state() is None:\n        tensor.masked_fill_(...)\n    else:\n        ... # some equivalent code that the JIT can understand\nIf you know you'll be able to control when the tracing happens you can even have this:\ndef remove_nans_masked_fill(tensor):\n    tensor.masked_fill_(...)\n\ndef remove_nans_tracing(tensor):\n    ...\n\nremove_nans = remove_nans_masked_fill\nthen simply use remove_nans in all of your code, and swap it for the non-optimized implementation only for the periods when you're tracing.", "body": "The problem with `masked_fill_` is that it doesn't have an out-of-place version that we could dispatch to in the JIT, so we don't get any auto generated stubs for it.\r\n\r\nA simple workaround would be to do this:\r\n```python\r\ndef remove_nans(tensor):\r\n    if torch._C._get_tracing_state() is None:\r\n        tensor.masked_fill_(...)\r\n    else:\r\n        ... # some equivalent code that the JIT can understand\r\n```\r\nIf you know you'll be able to control when the tracing happens you can even have this:\r\n```python\r\ndef remove_nans_masked_fill(tensor):\r\n    tensor.masked_fill_(...)\r\n\r\ndef remove_nans_tracing(tensor):\r\n    ...\r\n\r\nremove_nans = remove_nans_masked_fill\r\n```\r\nthen simply use `remove_nans` in all of your code, and swap it for the non-optimized implementation only for the periods when you're tracing."}