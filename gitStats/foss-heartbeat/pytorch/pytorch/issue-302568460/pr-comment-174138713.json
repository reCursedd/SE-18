{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174138713", "pull_request_review_id": 103438851, "id": 174138713, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDEzODcxMw==", "diff_hunk": "@@ -3712,6 +3726,36 @@ TENSOR_IMPLEMENT_LOGICAL_SUM(logicalany, ||, 0)\n #define TH_MATH_NAME(fn) fn\n #endif\n \n+#ifdef _OPENMP\n+LAB_IMPLEMENT_BASIC_FUNCTION(log,TH_MATH_NAME(log),HYPER_TH_OMP_OVERHEAD_THRESHOLD)", "path": "aten/src/TH/generic/THTensorMath.c", "position": null, "original_position": 361, "commit_id": "7688ef494855f7aad4ae987fe33bf54d2471883f", "original_commit_id": "121cb52dd9b617ee814a62c03921e0b3a6e6eeaa", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "An idiom which we have used in `interned_strings.h` looks something like this:\r\n\r\n```\r\n  #define FORALL_JIT_SYMBOLS(_) \\\r\n  _(Assign) \\\r\n  _(Constant) \\\r\n  _(CppOp) \\\r\n  _(Drop) \\\r\n  _(Eval) \\\r\n  _(Expand) \\\r\n```\r\n\r\nand then\r\n\r\n```\r\n    enum BuiltinSymbol {\r\n      #define DEFINE_SYMBOL(s) \\\r\n        k##s,\r\n      FORALL_JIT_SYMBOLS(DEFINE_SYMBOL)\r\n      #undef DEFINE_SYMBOL\r\n      kLastSymbol, //where we start counting for new symbols\r\n    };\r\n```\r\n\r\nIt seems like you might to apply this principle here, where `LAB_IMPLEMENT_BASIC_FUNCTION` is the parameterized function, and it discards the threshold argument depending on the conditional.", "created_at": "2018-03-13T13:55:31Z", "updated_at": "2018-11-23T15:40:40Z", "html_url": "https://github.com/pytorch/pytorch/pull/5584#discussion_r174138713", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5584", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174138713"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5584#discussion_r174138713"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5584"}}, "body_html": "<p>An idiom which we have used in <code>interned_strings.h</code> looks something like this:</p>\n<pre><code>  #define FORALL_JIT_SYMBOLS(_) \\\n  _(Assign) \\\n  _(Constant) \\\n  _(CppOp) \\\n  _(Drop) \\\n  _(Eval) \\\n  _(Expand) \\\n</code></pre>\n<p>and then</p>\n<pre><code>    enum BuiltinSymbol {\n      #define DEFINE_SYMBOL(s) \\\n        k##s,\n      FORALL_JIT_SYMBOLS(DEFINE_SYMBOL)\n      #undef DEFINE_SYMBOL\n      kLastSymbol, //where we start counting for new symbols\n    };\n</code></pre>\n<p>It seems like you might to apply this principle here, where <code>LAB_IMPLEMENT_BASIC_FUNCTION</code> is the parameterized function, and it discards the threshold argument depending on the conditional.</p>", "body_text": "An idiom which we have used in interned_strings.h looks something like this:\n  #define FORALL_JIT_SYMBOLS(_) \\\n  _(Assign) \\\n  _(Constant) \\\n  _(CppOp) \\\n  _(Drop) \\\n  _(Eval) \\\n  _(Expand) \\\n\nand then\n    enum BuiltinSymbol {\n      #define DEFINE_SYMBOL(s) \\\n        k##s,\n      FORALL_JIT_SYMBOLS(DEFINE_SYMBOL)\n      #undef DEFINE_SYMBOL\n      kLastSymbol, //where we start counting for new symbols\n    };\n\nIt seems like you might to apply this principle here, where LAB_IMPLEMENT_BASIC_FUNCTION is the parameterized function, and it discards the threshold argument depending on the conditional.", "in_reply_to_id": 172877246}