{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/438106262", "html_url": "https://github.com/pytorch/pytorch/issues/13717#issuecomment-438106262", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13717", "id": 438106262, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODEwNjI2Mg==", "user": {"login": "tanaka-jp", "id": 29939758, "node_id": "MDQ6VXNlcjI5OTM5NzU4", "avatar_url": "https://avatars2.githubusercontent.com/u/29939758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanaka-jp", "html_url": "https://github.com/tanaka-jp", "followers_url": "https://api.github.com/users/tanaka-jp/followers", "following_url": "https://api.github.com/users/tanaka-jp/following{/other_user}", "gists_url": "https://api.github.com/users/tanaka-jp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanaka-jp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanaka-jp/subscriptions", "organizations_url": "https://api.github.com/users/tanaka-jp/orgs", "repos_url": "https://api.github.com/users/tanaka-jp/repos", "events_url": "https://api.github.com/users/tanaka-jp/events{/privacy}", "received_events_url": "https://api.github.com/users/tanaka-jp/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-13T02:26:56Z", "updated_at": "2018-11-13T04:40:38Z", "author_association": "NONE", "body_html": "<p>My examle is wrong. Sorry.<br>\nThis is the correct one.</p>\n<pre><code>import torch\nx = torch.rand(2, 5).to(torch.device('cuda:0'))\nx2 = torch.ones(3, 5).to(torch.device('cuda:0'))\nx3 = torch.tensor([[1], [2]]).to(torch.device('cuda:0'))\nx2.scatter_add_(1, x3, x)\n</code></pre>\n<pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nRuntimeError: invalid argument 3: Index tensor must have the same size as input tensor. at c:\\programdata\\miniconda3\\con\nda-bld\\pytorch_1533090623466\\work\\aten\\src\\thc\\generic/THCTensorScatterGather.cu:208\n</code></pre>\n<pre><code>x = torch.rand(2, 5).to(torch.device('cpu'))\nx2 = torch.ones(3, 5).to(torch.device('cpu'))\nx3 = torch.tensor([[1], [2]]).to(torch.device('cpu'))\nx2.scatter_add_(1, x3, x)\n</code></pre>\n<pre><code>tensor([[1.0000e+00, 1.2632e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00],\n        [1.0000e+00, 1.0000e+00, 1.9192e+00, 1.0000e+00, 1.0000e+00],\n        [1.1930e+30, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00]])\n</code></pre>", "body_text": "My examle is wrong. Sorry.\nThis is the correct one.\nimport torch\nx = torch.rand(2, 5).to(torch.device('cuda:0'))\nx2 = torch.ones(3, 5).to(torch.device('cuda:0'))\nx3 = torch.tensor([[1], [2]]).to(torch.device('cuda:0'))\nx2.scatter_add_(1, x3, x)\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nRuntimeError: invalid argument 3: Index tensor must have the same size as input tensor. at c:\\programdata\\miniconda3\\con\nda-bld\\pytorch_1533090623466\\work\\aten\\src\\thc\\generic/THCTensorScatterGather.cu:208\n\nx = torch.rand(2, 5).to(torch.device('cpu'))\nx2 = torch.ones(3, 5).to(torch.device('cpu'))\nx3 = torch.tensor([[1], [2]]).to(torch.device('cpu'))\nx2.scatter_add_(1, x3, x)\n\ntensor([[1.0000e+00, 1.2632e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00],\n        [1.0000e+00, 1.0000e+00, 1.9192e+00, 1.0000e+00, 1.0000e+00],\n        [1.1930e+30, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00]])", "body": "My examle is wrong. Sorry.\r\nThis is the correct one.\r\n\r\n```\r\nimport torch\r\nx = torch.rand(2, 5).to(torch.device('cuda:0'))\r\nx2 = torch.ones(3, 5).to(torch.device('cuda:0'))\r\nx3 = torch.tensor([[1], [2]]).to(torch.device('cuda:0'))\r\nx2.scatter_add_(1, x3, x)\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nRuntimeError: invalid argument 3: Index tensor must have the same size as input tensor. at c:\\programdata\\miniconda3\\con\r\nda-bld\\pytorch_1533090623466\\work\\aten\\src\\thc\\generic/THCTensorScatterGather.cu:208\r\n```\r\n\r\n```\r\nx = torch.rand(2, 5).to(torch.device('cpu'))\r\nx2 = torch.ones(3, 5).to(torch.device('cpu'))\r\nx3 = torch.tensor([[1], [2]]).to(torch.device('cpu'))\r\nx2.scatter_add_(1, x3, x)\r\n```\r\n\r\n```\r\ntensor([[1.0000e+00, 1.2632e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00],\r\n        [1.0000e+00, 1.0000e+00, 1.9192e+00, 1.0000e+00, 1.0000e+00],\r\n        [1.1930e+30, 1.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00]])\r\n```"}