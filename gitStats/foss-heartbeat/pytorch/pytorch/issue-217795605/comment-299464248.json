{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/299464248", "html_url": "https://github.com/pytorch/pytorch/issues/1137#issuecomment-299464248", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1137", "id": 299464248, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTQ2NDI0OA==", "user": {"login": "nicklhy", "id": 1146226, "node_id": "MDQ6VXNlcjExNDYyMjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1146226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicklhy", "html_url": "https://github.com/nicklhy", "followers_url": "https://api.github.com/users/nicklhy/followers", "following_url": "https://api.github.com/users/nicklhy/following{/other_user}", "gists_url": "https://api.github.com/users/nicklhy/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicklhy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicklhy/subscriptions", "organizations_url": "https://api.github.com/users/nicklhy/orgs", "repos_url": "https://api.github.com/users/nicklhy/repos", "events_url": "https://api.github.com/users/nicklhy/events{/privacy}", "received_events_url": "https://api.github.com/users/nicklhy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-05T13:27:23Z", "updated_at": "2017-05-05T13:29:15Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1822032\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Wakeupbuddy\">@Wakeupbuddy</a> , As I mentioned above, I use a flag variable, say skip_flag, to control if I want to skip the errors. If skip_flag is False, I would simply raise an exception. If skip_flag is True, then I would randomly return another sample(i.e. <strong>getitem</strong>(np.random.randint(0, n))).<br>\nThis method works well in train phase since it usually doesn't matter that you replace <strong>getitem</strong>(i) with <strong>getitem</strong>(j). But if you need to handle errors in test phase, it could be a little bit more complicate. You have to write you own dataloader class.</p>", "body_text": "@Wakeupbuddy , As I mentioned above, I use a flag variable, say skip_flag, to control if I want to skip the errors. If skip_flag is False, I would simply raise an exception. If skip_flag is True, then I would randomly return another sample(i.e. getitem(np.random.randint(0, n))).\nThis method works well in train phase since it usually doesn't matter that you replace getitem(i) with getitem(j). But if you need to handle errors in test phase, it could be a little bit more complicate. You have to write you own dataloader class.", "body": "@Wakeupbuddy , As I mentioned above, I use a flag variable, say skip_flag, to control if I want to skip the errors. If skip_flag is False, I would simply raise an exception. If skip_flag is True, then I would randomly return another sample(i.e. __getitem__(np.random.randint(0, n))).\r\nThis method works well in train phase since it usually doesn't matter that you replace __getitem__(i) with __getitem__(j). But if you need to handle errors in test phase, it could be a little bit more complicate. You have to write you own dataloader class."}