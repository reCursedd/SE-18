{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175111113", "pull_request_review_id": 104591846, "id": 175111113, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTExMTExMw==", "diff_hunk": "@@ -3,146 +3,252 @@\n #include <stdint.h>\n #include <string>\n #include <unordered_map>\n+#include <algorithm>\n \n #include \"torch/csrc/jit/generated/aten_interned_strings.h\"\n \n namespace torch { namespace jit {\n \n-// JIT symbols are synthetic operators that occur only in the JIT IR\n+// Every symbol is classified in a namespace, specifying what kind of symbol it\n+// is.  Unsigned char to ensure widening to unique_t (also an unsigned type)\n+enum class SymbolNamespace : unsigned char {\n+  onnx  = 'o',\n+  prim  = 'p',\n+  aten  = 't',\n+  // NB: ONNX and ATen attributes all live in a global namespace, as\n+  // their interpretation depends on the operator name (which is namespaced)\n+  attr  = 'a',\n+  // TODO: eliminate me\n+  scope = 's'\n+};\n+\n+namespace detail {\n+\n+  // TODO: programatically generate this\n+  inline std::string valid_namespaces_str() {\n+    return \"'onnx', 'prim', 'aten', 'attr', 'scope'\";\n+  }\n+\n+}\n+\n+// Primitive symbols are synthetic operators that occur only in the IR\n // and don't have corresponding implementations in ATen.\n //\n // TODO: We need documentation for all of these symbols.\n+//\n+// TODO: Consider moving the synthetic onnx operators to their own\n+// namespace.\n \n-#define FORALL_JIT_SYMBOLS(_) \\\n-_(Assign) \\\n-_(Constant) \\\n-_(CppOp) \\\n-_(Drop) \\\n-_(Eval) \\\n-_(Expand) \\\n-_(FusionGroup) \\\n-_(GraphExecutor) \\\n-_(If) \\\n-_(Jump) \\\n-_(JumpNZ) \\\n-_(JumpZ) \\\n-_(Load) \\\n-_(Loop) \\\n-_(Param) \\\n-_(Placeholder) \\\n-_(Print) \\\n-_(PythonOp) \\\n-_(ReplaceIfUndef) \\\n-_(Reverse) \\\n-_(Return) \\\n-_(Store) \\\n-_(Undefined) \\\n-_(__JIT_END)\n+#define FORALL_PRIM_SYMBOLS(_) \\\n+_(prim, Assign) \\\n+_(prim, Constant) \\\n+_(prim, CppOp) \\\n+_(prim, Drop) \\\n+_(prim, Eval) \\\n+_(prim, Expand) /* onnx */ \\\n+_(prim, FusionGroup) \\\n+_(prim, GraphExecutor) \\\n+_(prim, If) \\\n+_(prim, Jump) /* debug */ \\\n+_(prim, JumpNZ) /* debug */ \\\n+_(prim, JumpZ) /* debug */ \\\n+_(prim, Load) \\\n+_(prim, Loop) \\\n+_(prim, Param) \\\n+_(prim, PackPadded) /* onnx */ \\\n+_(prim, PadPacked) /* onnx */ \\\n+_(prim, Placeholder) /* debug */ \\\n+_(prim, Print) \\\n+_(prim, PythonOp) \\\n+_(prim, ReplaceIfUndef) \\\n+_(prim, Reverse) \\\n+_(prim, Return) \\\n+_(prim, Store) \\\n+_(prim, Undefined) \\\n+/* end */\n \n // Workaround for some not-yet-defined ATen symbols, see\n //  - __not__: https://github.com/pytorch/pytorch/issues/5495\n //  - ones, zeros: https://github.com/pytorch/pytorch/issues/5496\n \n #define FORALL_ATEN_EXTRA_SYMBOLS(_) \\\n-_(__not__) \\\n-_(ones) \\\n-_(zeros) \\\n-_(__ATEN_EXTRA_END)\n+_(aten, __not__) \\", "path": "torch/csrc/jit/interned_strings.h", "position": 95, "original_position": 103, "commit_id": "80b8fd35ed644bbd95c4aa4f380aea8263c6208c", "original_commit_id": "59eebb6b3fa9c515d7177c23b7064cceef535985", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "haha right", "created_at": "2018-03-16T14:42:02Z", "updated_at": "2018-11-23T15:40:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/5820#discussion_r175111113", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5820", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/175111113"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5820#discussion_r175111113"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5820"}}, "body_html": "<p>haha right</p>", "body_text": "haha right", "in_reply_to_id": 175058483}