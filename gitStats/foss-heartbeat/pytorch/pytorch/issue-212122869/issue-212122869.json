{"url": "https://api.github.com/repos/pytorch/pytorch/issues/938", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/938/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/938/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/938/events", "html_url": "https://github.com/pytorch/pytorch/pull/938", "id": 212122869, "node_id": "MDExOlB1bGxSZXF1ZXN0MTA5MjU4NjI3", "number": 938, "title": "torch.optim.lbfgs - added box constraint and line search methods(back\u2026", "user": {"login": "ChangYong-Oh", "id": 5415216, "node_id": "MDQ6VXNlcjU0MTUyMTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/5415216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChangYong-Oh", "html_url": "https://github.com/ChangYong-Oh", "followers_url": "https://api.github.com/users/ChangYong-Oh/followers", "following_url": "https://api.github.com/users/ChangYong-Oh/following{/other_user}", "gists_url": "https://api.github.com/users/ChangYong-Oh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChangYong-Oh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChangYong-Oh/subscriptions", "organizations_url": "https://api.github.com/users/ChangYong-Oh/orgs", "repos_url": "https://api.github.com/users/ChangYong-Oh/repos", "events_url": "https://api.github.com/users/ChangYong-Oh/events{/privacy}", "received_events_url": "https://api.github.com/users/ChangYong-Oh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 559719279, "node_id": "MDU6TGFiZWw1NTk3MTkyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/ready%20for%20review", "name": "ready for review", "color": "b60205", "default": false}], "state": "open", "locked": false, "assignee": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2017-03-06T13:31:49Z", "updated_at": "2018-11-23T15:32:48Z", "closed_at": null, "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/938", "html_url": "https://github.com/pytorch/pytorch/pull/938", "diff_url": "https://github.com/pytorch/pytorch/pull/938.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/938.patch"}, "body_html": "<p><code>torch.optim.lbfgs </code></p>\n<ul>\n<li>added box constraint</li>\n<li>added line search methods(backtracking, goldstein, weak_wolfe)</li>\n<li>Box constraint is imposed via line search(line search is conducted under constraints)</li>\n<li>Box constraint is specified by the similar way in scipy fmin_l_bfgs_b</li>\n<li>Line search method choice is given by string(originally, it seems to be going to be given by function)</li>\n</ul>\n<p><code>torch.autograd._function.reduce.Prod class</code></p>\n<ul>\n<li>if prod is taken over some tensor containing zero, this returns <code>inf</code>, because the original implementation is done by <code>[product of all elements]/[an element]</code>.  All these cases are taken care of separately. Still, <code>tensor.prod()</code> returns <code>inf</code> if there is only one element in a tensor.</li>\n</ul>\n<p>This should be fixed.</p>", "body_text": "torch.optim.lbfgs \n\nadded box constraint\nadded line search methods(backtracking, goldstein, weak_wolfe)\nBox constraint is imposed via line search(line search is conducted under constraints)\nBox constraint is specified by the similar way in scipy fmin_l_bfgs_b\nLine search method choice is given by string(originally, it seems to be going to be given by function)\n\ntorch.autograd._function.reduce.Prod class\n\nif prod is taken over some tensor containing zero, this returns inf, because the original implementation is done by [product of all elements]/[an element].  All these cases are taken care of separately. Still, tensor.prod() returns inf if there is only one element in a tensor.\n\nThis should be fixed.", "body": "`torch.optim.lbfgs `\r\n- added box constraint \r\n- added line search methods(backtracking, goldstein, weak_wolfe)\r\n- Box constraint is imposed via line search(line search is conducted under constraints)\r\n- Box constraint is specified by the similar way in scipy fmin_l_bfgs_b\r\n- Line search method choice is given by string(originally, it seems to be going to be given by function)\r\n  \r\n\r\n`torch.autograd._function.reduce.Prod class`\r\n- if prod is taken over some tensor containing zero, this returns `inf`, because the original implementation is done by `[product of all elements]/[an element]`.  All these cases are taken care of separately. Still, `tensor.prod()` returns `inf` if there is only one element in a tensor.\r\n\r\nThis should be fixed."}