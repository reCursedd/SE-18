{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/340842701", "html_url": "https://github.com/pytorch/pytorch/issues/1128#issuecomment-340842701", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/1128", "id": 340842701, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDg0MjcwMQ==", "user": {"login": "hhsecond", "id": 13761737, "node_id": "MDQ6VXNlcjEzNzYxNzM3", "avatar_url": "https://avatars3.githubusercontent.com/u/13761737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hhsecond", "html_url": "https://github.com/hhsecond", "followers_url": "https://api.github.com/users/hhsecond/followers", "following_url": "https://api.github.com/users/hhsecond/following{/other_user}", "gists_url": "https://api.github.com/users/hhsecond/gists{/gist_id}", "starred_url": "https://api.github.com/users/hhsecond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hhsecond/subscriptions", "organizations_url": "https://api.github.com/users/hhsecond/orgs", "repos_url": "https://api.github.com/users/hhsecond/repos", "events_url": "https://api.github.com/users/hhsecond/events{/privacy}", "received_events_url": "https://api.github.com/users/hhsecond/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-31T17:38:18Z", "updated_at": "2017-11-01T02:48:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I would love to work on this feature if this hasn't started yet. Do you have a preferred approach?<br>\nI was thinking if we have a function <code>fill_with_zeros</code> or something that takes list of different length lists, seq_length and dtype and returns a tensor of mentioned type with mentioned length made either by truncation or by padding with zero</p>\n<pre><code>inputs = [[1, 2], [1, 2, 3], [1, 2, 3, 4]]\npadded_tensor = fill_with_zeros(inputs, seq_len=3, dtype='float')\nprint(padded_tensor)\n# 3x3 tensor\n[\n    [1, 2, 0],\n    [1, 2, 3],\n    [1, 2, 3]\n]\n</code></pre>", "body_text": "@apaszke I would love to work on this feature if this hasn't started yet. Do you have a preferred approach?\nI was thinking if we have a function fill_with_zeros or something that takes list of different length lists, seq_length and dtype and returns a tensor of mentioned type with mentioned length made either by truncation or by padding with zero\ninputs = [[1, 2], [1, 2, 3], [1, 2, 3, 4]]\npadded_tensor = fill_with_zeros(inputs, seq_len=3, dtype='float')\nprint(padded_tensor)\n# 3x3 tensor\n[\n    [1, 2, 0],\n    [1, 2, 3],\n    [1, 2, 3]\n]", "body": "@apaszke I would love to work on this feature if this hasn't started yet. Do you have a preferred approach?\r\nI was thinking if we have a function `fill_with_zeros` or something that takes list of different length lists, seq_length and dtype and returns a tensor of mentioned type with mentioned length made either by truncation or by padding with zero\r\n\r\n```\r\ninputs = [[1, 2], [1, 2, 3], [1, 2, 3, 4]]\r\npadded_tensor = fill_with_zeros(inputs, seq_len=3, dtype='float')\r\nprint(padded_tensor)\r\n# 3x3 tensor\r\n[\r\n    [1, 2, 0],\r\n    [1, 2, 3],\r\n    [1, 2, 3]\r\n]\r\n```"}