{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2939", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2939/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2939/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2939/events", "html_url": "https://github.com/pytorch/pytorch/issues/2939", "id": 262249986, "node_id": "MDU6SXNzdWUyNjIyNDk5ODY=", "number": 2939, "title": "AdaptiveMaxPool3d tests need to generate non-equal values", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-02T22:35:24Z", "updated_at": "2017-10-03T15:57:01Z", "closed_at": "2017-10-03T15:57:01Z", "author_association": "MEMBER", "body_html": "<p>Intermittent test failures occurring on AdaptiveMaxPool3d.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3768583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gchanan\">@gchanan</a> and I have seen this in the past where Max pooling has exactly the same values in the same window, then it's differently resolved on CPU/GPU. For example [0 2.5 2.5 3] can give a max index of <code>1</code> or <code>2</code> on CUDA depending on the runtime.</p>\n<p>So generating input values that are within epsilon of each other is important (especially at half precision).</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a> fix that one.</p>\n<pre><code>======================================================================\nFAIL: test_AdaptiveMaxPool3d_tuple (__main__.TestNN)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test_nn.py\", line 3477, in &lt;lambda&gt;\n    setattr(TestNN, test_name, lambda self, test=test: test(self))\n  File \"&lt;https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common_nn.py\",&gt; line 631, in __call__\n    self._do_test(test_case, module, input)\n  File \"test_nn.py\", line 109, in _do_test\n    test_case.check_jacobian(module, input, self.jacobian_input)\n  File \"&lt;https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common_nn.py\",&gt; line 519, in check_jacobian\n    PRECISION\nAssertionError: 0.4831197783494723 not less than or equal to 1e-05\n\n======================================================================\nFAIL: test_AdaptiveMaxPool3d_tuple_cuda (__main__.TestNN)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test_nn.py\", line 3478, in &lt;lambda&gt;\n    setattr(TestNN, cuda_test_name, lambda self, test=test: test.test_cuda(self))\n  File \"&lt;https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common_nn.py\",&gt; line 711, in test_cuda\n    test_case.assertEqual(cpu_gradInput, gpu_gradInput, 2e-4)\n  File \"&lt;https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common.py\",&gt; line 215, in assertEqual\n    assertTensorsEqual(x, y)\n  File \"&lt;https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common.py\",&gt; line 207, in assertTensorsEqual\n    self.assertLessEqual(max_err, prec, message)\nAssertionError: 2.0 not less than or equal to 0.0002\n</code></pre>", "body_text": "Intermittent test failures occurring on AdaptiveMaxPool3d.\n@gchanan and I have seen this in the past where Max pooling has exactly the same values in the same window, then it's differently resolved on CPU/GPU. For example [0 2.5 2.5 3] can give a max index of 1 or 2 on CUDA depending on the runtime.\nSo generating input values that are within epsilon of each other is important (especially at half precision).\n@SsnL fix that one.\n======================================================================\nFAIL: test_AdaptiveMaxPool3d_tuple (__main__.TestNN)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test_nn.py\", line 3477, in <lambda>\n    setattr(TestNN, test_name, lambda self, test=test: test(self))\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common_nn.py\",> line 631, in __call__\n    self._do_test(test_case, module, input)\n  File \"test_nn.py\", line 109, in _do_test\n    test_case.check_jacobian(module, input, self.jacobian_input)\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common_nn.py\",> line 519, in check_jacobian\n    PRECISION\nAssertionError: 0.4831197783494723 not less than or equal to 1e-05\n\n======================================================================\nFAIL: test_AdaptiveMaxPool3d_tuple_cuda (__main__.TestNN)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test_nn.py\", line 3478, in <lambda>\n    setattr(TestNN, cuda_test_name, lambda self, test=test: test.test_cuda(self))\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common_nn.py\",> line 711, in test_cuda\n    test_case.assertEqual(cpu_gradInput, gpu_gradInput, 2e-4)\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common.py\",> line 215, in assertEqual\n    assertTensorsEqual(x, y)\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common.py\",> line 207, in assertTensorsEqual\n    self.assertLessEqual(max_err, prec, message)\nAssertionError: 2.0 not less than or equal to 0.0002", "body": "Intermittent test failures occurring on AdaptiveMaxPool3d.\r\n\r\n@gchanan and I have seen this in the past where Max pooling has exactly the same values in the same window, then it's differently resolved on CPU/GPU. For example [0 2.5 2.5 3] can give a max index of `1` or `2` on CUDA depending on the runtime.\r\n\r\nSo generating input values that are within epsilon of each other is important (especially at half precision).\r\n\r\n@SsnL fix that one.\r\n\r\n```\r\n======================================================================\r\nFAIL: test_AdaptiveMaxPool3d_tuple (__main__.TestNN)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test_nn.py\", line 3477, in <lambda>\r\n    setattr(TestNN, test_name, lambda self, test=test: test(self))\r\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common_nn.py\",> line 631, in __call__\r\n    self._do_test(test_case, module, input)\r\n  File \"test_nn.py\", line 109, in _do_test\r\n    test_case.check_jacobian(module, input, self.jacobian_input)\r\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common_nn.py\",> line 519, in check_jacobian\r\n    PRECISION\r\nAssertionError: 0.4831197783494723 not less than or equal to 1e-05\r\n\r\n======================================================================\r\nFAIL: test_AdaptiveMaxPool3d_tuple_cuda (__main__.TestNN)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test_nn.py\", line 3478, in <lambda>\r\n    setattr(TestNN, cuda_test_name, lambda self, test=test: test.test_cuda(self))\r\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common_nn.py\",> line 711, in test_cuda\r\n    test_case.assertEqual(cpu_gradInput, gpu_gradInput, 2e-4)\r\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common.py\",> line 215, in assertEqual\r\n    assertTensorsEqual(x, y)\r\n  File \"<https://build.pytorch.org/job/pytorch-master-py2-linux/ws/builder/pytorch/test/common.py\",> line 207, in assertTensorsEqual\r\n    self.assertLessEqual(max_err, prec, message)\r\nAssertionError: 2.0 not less than or equal to 0.0002\r\n```"}