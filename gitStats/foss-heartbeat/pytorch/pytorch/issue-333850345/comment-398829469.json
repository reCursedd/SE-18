{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/398829469", "html_url": "https://github.com/pytorch/pytorch/pull/8668#issuecomment-398829469", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/8668", "id": 398829469, "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODgyOTQ2OQ==", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-20T17:20:34Z", "updated_at": "2018-06-20T17:20:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> hmm interesting. For example one output of these failures could be something like:</p>\n<pre><code>======================================================================\nERROR: test_wrong_return_type (__main__.TestScript)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test/test_jit.py\", line 3373, in test_wrong_return_type\n    @torch.jit.script\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 371, in script\n    graph = _script_graph(fn, _frames_up=_frames_up + 1)\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 367, in _script_graph\n    return _jit_script_compile(ast, rcb)\nRuntimeError:\nPython functions can currently only return Tensors:\n@torch.jit.script\ndef wrong_return_type():\n    return somefunc()\n           ~~~~~~~~ &lt;--- HERE\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.111s\n\nFAILED (errors=1)\n</code></pre>\n<p>Maybe we can make a version of expect which can regex match? So maybe we could match this substring:</p>\n<pre><code>RuntimeError:\nPython functions can currently only return Tensors:\n@torch.jit.script\ndef wrong_return_type():\n    return somefunc()\n           ~~~~~~~~ &lt;--- HERE\n</code></pre>\n<p>Which is probably more stable wrt not having absolute paths or anything. How does that sound?</p>", "body_text": "@ezyang hmm interesting. For example one output of these failures could be something like:\n======================================================================\nERROR: test_wrong_return_type (__main__.TestScript)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test/test_jit.py\", line 3373, in test_wrong_return_type\n    @torch.jit.script\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 371, in script\n    graph = _script_graph(fn, _frames_up=_frames_up + 1)\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 367, in _script_graph\n    return _jit_script_compile(ast, rcb)\nRuntimeError:\nPython functions can currently only return Tensors:\n@torch.jit.script\ndef wrong_return_type():\n    return somefunc()\n           ~~~~~~~~ <--- HERE\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.111s\n\nFAILED (errors=1)\n\nMaybe we can make a version of expect which can regex match? So maybe we could match this substring:\nRuntimeError:\nPython functions can currently only return Tensors:\n@torch.jit.script\ndef wrong_return_type():\n    return somefunc()\n           ~~~~~~~~ <--- HERE\n\nWhich is probably more stable wrt not having absolute paths or anything. How does that sound?", "body": "@ezyang hmm interesting. For example one output of these failures could be something like:\r\n\r\n```\r\n======================================================================\r\nERROR: test_wrong_return_type (__main__.TestScript)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test/test_jit.py\", line 3373, in test_wrong_return_type\r\n    @torch.jit.script\r\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 371, in script\r\n    graph = _script_graph(fn, _frames_up=_frames_up + 1)\r\n  File \"/Users/jamesreed/onnx-fairseq/pytorch/torch/jit/__init__.py\", line 367, in _script_graph\r\n    return _jit_script_compile(ast, rcb)\r\nRuntimeError:\r\nPython functions can currently only return Tensors:\r\n@torch.jit.script\r\ndef wrong_return_type():\r\n    return somefunc()\r\n           ~~~~~~~~ <--- HERE\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.111s\r\n\r\nFAILED (errors=1)\r\n```\r\n\r\nMaybe we can make a version of expect which can regex match? So maybe we could match this substring:\r\n\r\n```\r\nRuntimeError:\r\nPython functions can currently only return Tensors:\r\n@torch.jit.script\r\ndef wrong_return_type():\r\n    return somefunc()\r\n           ~~~~~~~~ <--- HERE\r\n```\r\n\r\nWhich is probably more stable wrt not having absolute paths or anything. How does that sound?"}