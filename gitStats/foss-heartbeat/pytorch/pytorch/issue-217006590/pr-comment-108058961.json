{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/108058961", "pull_request_review_id": 29068595, "id": 108058961, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA1ODk2MQ==", "diff_hunk": "@@ -59,5 +59,66 @@ def __repr__(self):\n             + str(self.out_features) + ')'\n \n \n-# TODO: Bilinear\n+class BiLinear(Module):\n+    r\"\"\"Applies a bilinear transformation to the incoming data: :math:`\\forall k: y_k = x_1 A_k x_2 + b`\n+\n+    Args:\n+        in_features_1: size of each input sample of the first input\n+        in_features_2: size of each input sample of the second input\n+        out_features: size of each output sample\n+        bias: If set to False, the layer will not learn an additive bias. Default: True\n+\n+    Shape:\n+        - Input: :math:`[(N, in\\_features\\_1), (N, in\\_features\\_2)`\n+        - Output: :math:`(N, out\\_features)`\n+\n+    Attributes:\n+        weight: the learnable weights of the module of shape (out_features x in_features_1 x in_features_2)\n+        bias:   the learnable bias of the module of shape (out_features)\n+\n+    Examples::\n+\n+        >>> m = nn.BiLinear(10, 20, 30)\n+        >>> input_1 = autograd.Variable(torch.randn(128, 20))\n+        >>> input_2 = autograd.Variable(torch.randn(128, 30))\n+        >>> output = m([input_1, input_2])\n+        >>> print(output.size())", "path": "torch/nn/modules/linear.py", "position": 28, "original_position": 28, "commit_id": "d0e59aa27e32ff7b3f07f8888fbfc32eacad4072", "original_commit_id": "d0e59aa27e32ff7b3f07f8888fbfc32eacad4072", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Can you replace the last line with `>>> output.size()` and add `torch.Size([128, 10])` below?", "created_at": "2017-03-26T12:12:15Z", "updated_at": "2018-11-23T15:32:52Z", "html_url": "https://github.com/pytorch/pytorch/pull/1104#discussion_r108058961", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1104", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/108058961"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1104#discussion_r108058961"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1104"}}, "body_html": "<p>Can you replace the last line with <code>&gt;&gt;&gt; output.size()</code> and add <code>torch.Size([128, 10])</code> below?</p>", "body_text": "Can you replace the last line with >>> output.size() and add torch.Size([128, 10]) below?"}