{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/314369884", "html_url": "https://github.com/pytorch/pytorch/issues/2032#issuecomment-314369884", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2032", "id": 314369884, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDM2OTg4NA==", "user": {"login": "chenzhekl", "id": 1201055, "node_id": "MDQ6VXNlcjEyMDEwNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1201055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenzhekl", "html_url": "https://github.com/chenzhekl", "followers_url": "https://api.github.com/users/chenzhekl/followers", "following_url": "https://api.github.com/users/chenzhekl/following{/other_user}", "gists_url": "https://api.github.com/users/chenzhekl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenzhekl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenzhekl/subscriptions", "organizations_url": "https://api.github.com/users/chenzhekl/orgs", "repos_url": "https://api.github.com/users/chenzhekl/repos", "events_url": "https://api.github.com/users/chenzhekl/events{/privacy}", "received_events_url": "https://api.github.com/users/chenzhekl/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-11T08:18:39Z", "updated_at": "2017-07-11T08:19:17Z", "author_association": "NONE", "body_html": "<p>One possible explanation:</p>\n<p><code>enc_inp: 3 x 5</code></p>\n<p>After going through<code>Embedding</code> layer,</p>\n<p><code>enc_inp: 3 x 5 x 10</code></p>\n<p>It is of size <code>batch x seq x features</code>. But in pytorch, the input to LSTM is of size <code>seq x batch x features</code>. You view it as <code>enc_embeds.view(-1, batch_size, self.embed_dim)</code>. That's where the problem arises. If you use a mini-batch of size 1, then the batch size doesn't affect the <code>view</code> process. Thus you didn't observe that weird behaviour.</p>\n<p>I haven't tested this theory, though.</p>", "body_text": "One possible explanation:\nenc_inp: 3 x 5\nAfter going throughEmbedding layer,\nenc_inp: 3 x 5 x 10\nIt is of size batch x seq x features. But in pytorch, the input to LSTM is of size seq x batch x features. You view it as enc_embeds.view(-1, batch_size, self.embed_dim). That's where the problem arises. If you use a mini-batch of size 1, then the batch size doesn't affect the view process. Thus you didn't observe that weird behaviour.\nI haven't tested this theory, though.", "body": "One possible explanation: \r\n\r\n`enc_inp: 3 x 5`\r\n\r\nAfter going through`Embedding` layer,\r\n\r\n`enc_inp: 3 x 5 x 10`\r\n\r\nIt is of size `batch x seq x features`. But in pytorch, the input to LSTM is of size `seq x batch x features`. You view it as `enc_embeds.view(-1, batch_size, self.embed_dim)`. That's where the problem arises. If you use a mini-batch of size 1, then the batch size doesn't affect the `view` process. Thus you didn't observe that weird behaviour. \r\n\r\nI haven't tested this theory, though."}