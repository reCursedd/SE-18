{"url": "https://api.github.com/repos/pytorch/pytorch/issues/12735", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/12735/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/12735/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/12735/events", "html_url": "https://github.com/pytorch/pytorch/issues/12735", "id": 370837287, "node_id": "MDU6SXNzdWUzNzA4MzcyODc=", "number": 12735, "title": "Refcount for long argument parsed from scalar tensor looks suspicious", "user": {"login": "jamesr66a", "id": 4685384, "node_id": "MDQ6VXNlcjQ2ODUzODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4685384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesr66a", "html_url": "https://github.com/jamesr66a", "followers_url": "https://api.github.com/users/jamesr66a/followers", "following_url": "https://api.github.com/users/jamesr66a/following{/other_user}", "gists_url": "https://api.github.com/users/jamesr66a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesr66a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesr66a/subscriptions", "organizations_url": "https://api.github.com/users/jamesr66a/orgs", "repos_url": "https://api.github.com/users/jamesr66a/repos", "events_url": "https://api.github.com/users/jamesr66a/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesr66a/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-16T23:17:52Z", "updated_at": "2018-10-17T20:45:39Z", "closed_at": "2018-10-17T17:19:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Applying this patch to the codebase:</p>\n<pre><code>diff --git a/torch/csrc/utils/python_numbers.h b/torch/csrc/utils/python_numbers.h\nindex 0d3fa2f5c..d147d4bf7 100644\n--- a/torch/csrc/utils/python_numbers.h\n+++ b/torch/csrc/utils/python_numbers.h\n@@ -77,12 +77,16 @@ inline bool THPUtils_checkIndex(PyObject *obj) {\n \n inline int64_t THPUtils_unpackIndex(PyObject* obj) {\n   if (!THPUtils_checkLong(obj)) {\n-    auto index = THPObjectPtr(PyNumber_Index(obj));\n+    auto num = PyNumber_Index(obj);\n+    auto index = THPObjectPtr(num);\n     if (index == nullptr) {\n       throw python_error();\n     }\n     obj = index.get();\n+    std::cout &lt;&lt; \"long value refcount \" &lt;&lt; obj-&gt;ob_refcnt &lt;&lt; std::endl;\n   }\n+  // :(\n+  std::cout &lt;&lt; \"long value refcount after THPObjectPtr goes out of scope \" &lt;&lt; obj-&gt;ob_refcnt &lt;&lt; std::endl;\n   return THPUtils_unpackLong(obj);\n }\n</code></pre>\n<p>And run this example program:</p>\n<pre><code>import torch\nimport torch.onnx.operators\n\nx = torch.rand(345321)\nprint('***call view')\nx.view(torch.tensor(345321))\n</code></pre>\n<p>Gives the following output</p>\n<pre><code>long value refcount after THPObjectPtr goes out of scope 4\n***call view\nlong value refcount 1\nlong value refcount after THPObjectPtr goes out of scope 4556590640\n</code></pre>\n<p>Which looks awfully suspicious. Note I used a super rare integer value to avoid getting a pooled instance. I think it might be the case that we need to call <code>THPUtils_unpackLong</code> before the <code>THPObjectPtr</code> goes out of scope</p>", "body_text": "Applying this patch to the codebase:\ndiff --git a/torch/csrc/utils/python_numbers.h b/torch/csrc/utils/python_numbers.h\nindex 0d3fa2f5c..d147d4bf7 100644\n--- a/torch/csrc/utils/python_numbers.h\n+++ b/torch/csrc/utils/python_numbers.h\n@@ -77,12 +77,16 @@ inline bool THPUtils_checkIndex(PyObject *obj) {\n \n inline int64_t THPUtils_unpackIndex(PyObject* obj) {\n   if (!THPUtils_checkLong(obj)) {\n-    auto index = THPObjectPtr(PyNumber_Index(obj));\n+    auto num = PyNumber_Index(obj);\n+    auto index = THPObjectPtr(num);\n     if (index == nullptr) {\n       throw python_error();\n     }\n     obj = index.get();\n+    std::cout << \"long value refcount \" << obj->ob_refcnt << std::endl;\n   }\n+  // :(\n+  std::cout << \"long value refcount after THPObjectPtr goes out of scope \" << obj->ob_refcnt << std::endl;\n   return THPUtils_unpackLong(obj);\n }\n\nAnd run this example program:\nimport torch\nimport torch.onnx.operators\n\nx = torch.rand(345321)\nprint('***call view')\nx.view(torch.tensor(345321))\n\nGives the following output\nlong value refcount after THPObjectPtr goes out of scope 4\n***call view\nlong value refcount 1\nlong value refcount after THPObjectPtr goes out of scope 4556590640\n\nWhich looks awfully suspicious. Note I used a super rare integer value to avoid getting a pooled instance. I think it might be the case that we need to call THPUtils_unpackLong before the THPObjectPtr goes out of scope", "body": "Applying this patch to the codebase:\r\n\r\n```\r\ndiff --git a/torch/csrc/utils/python_numbers.h b/torch/csrc/utils/python_numbers.h\r\nindex 0d3fa2f5c..d147d4bf7 100644\r\n--- a/torch/csrc/utils/python_numbers.h\r\n+++ b/torch/csrc/utils/python_numbers.h\r\n@@ -77,12 +77,16 @@ inline bool THPUtils_checkIndex(PyObject *obj) {\r\n \r\n inline int64_t THPUtils_unpackIndex(PyObject* obj) {\r\n   if (!THPUtils_checkLong(obj)) {\r\n-    auto index = THPObjectPtr(PyNumber_Index(obj));\r\n+    auto num = PyNumber_Index(obj);\r\n+    auto index = THPObjectPtr(num);\r\n     if (index == nullptr) {\r\n       throw python_error();\r\n     }\r\n     obj = index.get();\r\n+    std::cout << \"long value refcount \" << obj->ob_refcnt << std::endl;\r\n   }\r\n+  // :(\r\n+  std::cout << \"long value refcount after THPObjectPtr goes out of scope \" << obj->ob_refcnt << std::endl;\r\n   return THPUtils_unpackLong(obj);\r\n }\r\n ```\r\n\r\nAnd run this example program:\r\n\r\n```\r\nimport torch\r\nimport torch.onnx.operators\r\n\r\nx = torch.rand(345321)\r\nprint('***call view')\r\nx.view(torch.tensor(345321))\r\n```\r\n\r\nGives the following output\r\n\r\n```\r\nlong value refcount after THPObjectPtr goes out of scope 4\r\n***call view\r\nlong value refcount 1\r\nlong value refcount after THPObjectPtr goes out of scope 4556590640\r\n```\r\n\r\nWhich looks awfully suspicious. Note I used a super rare integer value to avoid getting a pooled instance. I think it might be the case that we need to call `THPUtils_unpackLong` before the `THPObjectPtr` goes out of scope"}