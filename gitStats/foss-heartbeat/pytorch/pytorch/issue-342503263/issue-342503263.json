{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9566", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9566/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9566/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9566/events", "html_url": "https://github.com/pytorch/pytorch/pull/9566", "id": 342503263, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAyMzg5MTY5", "number": 9566, "title": "[EASY] Generate uninplaced operators that don't have out-of-place counterparts", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-18T21:45:03Z", "updated_at": "2018-07-19T14:07:36Z", "closed_at": "2018-07-19T14:07:31Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9566", "html_url": "https://github.com/pytorch/pytorch/pull/9566", "diff_url": "https://github.com/pytorch/pytorch/pull/9566.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9566.patch"}, "body_html": "<p>This is needed to unblock the thread-local tracing PR. We trace some in-place ops as out-of-place ops, but not all of them actually have ATen implementations. This is a simple change that adjusts our codemod to pretend that they exist by cloning the modified input and only then applying the inplace op.</p>\n<p>For example we trace <code>x.zero_()</code> as <code>y = zero(x)</code>, which is pretty much <code>zeros_like</code>. At some point we should add a pass that translates it, because <code>zeros_like</code> would be more efficient than <code>x.clone().zero_()</code>, but I'm leaving that for later. Here's how the generated operator looks like:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-en\">Operator</span>(                                                 \n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>aten::zero(Tensor self) -&gt; Tensor<span class=\"pl-pds\">\"</span></span>,                  \n    [](Node *node) {                                      \n                                                          \n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Operation</span>([=](Stack &amp; stack) {               \n        autograd::profiler::RecordFunction <span class=\"pl-smi\">record</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zero<span class=\"pl-pds\">\"</span></span>);\n                                                          \n        <span class=\"pl-k\">auto</span> self = <span class=\"pl-c1\">peek</span>(stack, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>).<span class=\"pl-c1\">toTensor</span>().<span class=\"pl-c1\">clone</span>(); \n        <span class=\"pl-k\">auto</span> result = <span class=\"pl-c1\">at::zero_</span>(self);                    \n        <span class=\"pl-c1\">drop</span>(stack, <span class=\"pl-c1\">1</span>);                                   \n        <span class=\"pl-c1\">pack</span>(stack, <span class=\"pl-c1\">std::move</span>(result));                   \n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;                                         \n      });                                                 \n    }                                                     \n),                                                        </pre></div>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=370202\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zdevito\">@zdevito</a></p>", "body_text": "This is needed to unblock the thread-local tracing PR. We trace some in-place ops as out-of-place ops, but not all of them actually have ATen implementations. This is a simple change that adjusts our codemod to pretend that they exist by cloning the modified input and only then applying the inplace op.\nFor example we trace x.zero_() as y = zero(x), which is pretty much zeros_like. At some point we should add a pass that translates it, because zeros_like would be more efficient than x.clone().zero_(), but I'm leaving that for later. Here's how the generated operator looks like:\nOperator(                                                 \n    \"aten::zero(Tensor self) -> Tensor\",                  \n    [](Node *node) {                                      \n                                                          \n      return Operation([=](Stack & stack) {               \n        autograd::profiler::RecordFunction record(\"zero\");\n                                                          \n        auto self = peek(stack, 0, 1).toTensor().clone(); \n        auto result = at::zero_(self);                    \n        drop(stack, 1);                                   \n        pack(stack, std::move(result));                   \n        return 0;                                         \n      });                                                 \n    }                                                     \n),                                                        \n@zdevito", "body": "This is needed to unblock the thread-local tracing PR. We trace some in-place ops as out-of-place ops, but not all of them actually have ATen implementations. This is a simple change that adjusts our codemod to pretend that they exist by cloning the modified input and only then applying the inplace op.\r\n\r\nFor example we trace `x.zero_()` as `y = zero(x)`, which is pretty much `zeros_like`. At some point we should add a pass that translates it, because `zeros_like` would be more efficient than `x.clone().zero_()`, but I'm leaving that for later. Here's how the generated operator looks like:\r\n```cpp\r\nOperator(                                                 \r\n    \"aten::zero(Tensor self) -> Tensor\",                  \r\n    [](Node *node) {                                      \r\n                                                          \r\n      return Operation([=](Stack & stack) {               \r\n        autograd::profiler::RecordFunction record(\"zero\");\r\n                                                          \r\n        auto self = peek(stack, 0, 1).toTensor().clone(); \r\n        auto result = at::zero_(self);                    \r\n        drop(stack, 1);                                   \r\n        pack(stack, std::move(result));                   \r\n        return 0;                                         \r\n      });                                                 \r\n    }                                                     \r\n),                                                        \r\n```\r\n\r\n@zdevito "}