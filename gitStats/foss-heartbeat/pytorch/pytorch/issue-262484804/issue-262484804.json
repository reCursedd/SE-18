{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2954", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2954/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2954/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2954/events", "html_url": "https://github.com/pytorch/pytorch/issues/2954", "id": 262484804, "node_id": "MDU6SXNzdWUyNjI0ODQ4MDQ=", "number": 2954, "title": "`parameters()` should be a list, not an iterator", "user": {"login": "adamlerer", "id": 5702157, "node_id": "MDQ6VXNlcjU3MDIxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5702157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamlerer", "html_url": "https://github.com/adamlerer", "followers_url": "https://api.github.com/users/adamlerer/followers", "following_url": "https://api.github.com/users/adamlerer/following{/other_user}", "gists_url": "https://api.github.com/users/adamlerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamlerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamlerer/subscriptions", "organizations_url": "https://api.github.com/users/adamlerer/orgs", "repos_url": "https://api.github.com/users/adamlerer/repos", "events_url": "https://api.github.com/users/adamlerer/events{/privacy}", "received_events_url": "https://api.github.com/users/adamlerer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-03T15:58:30Z", "updated_at": "2017-10-05T13:39:47Z", "closed_at": "2017-10-05T13:39:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Making <code>parameters()</code> return an iterator gives ample opportunities to shoot yourself in the foot, e.g.:</p>\n<pre><code># broken gradient clipping\na = model.parameters()\nnorm = 0\nfor p in a:\n  norm += p.norm()\nfor p in a:\n  p /= norm\n</code></pre>\n<p>Also, printing gradients by writing <code>list(m.parameters())[0]</code> is annoying.</p>", "body_text": "Making parameters() return an iterator gives ample opportunities to shoot yourself in the foot, e.g.:\n# broken gradient clipping\na = model.parameters()\nnorm = 0\nfor p in a:\n  norm += p.norm()\nfor p in a:\n  p /= norm\n\nAlso, printing gradients by writing list(m.parameters())[0] is annoying.", "body": "Making `parameters()` return an iterator gives ample opportunities to shoot yourself in the foot, e.g.:\r\n\r\n```\r\n# broken gradient clipping\r\na = model.parameters()\r\nnorm = 0\r\nfor p in a:\r\n  norm += p.norm()\r\nfor p in a:\r\n  p /= norm\r\n```\r\n\r\nAlso, printing gradients by writing `list(m.parameters())[0]` is annoying."}