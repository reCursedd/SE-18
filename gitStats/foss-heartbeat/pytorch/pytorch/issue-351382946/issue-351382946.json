{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10594", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10594/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10594/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10594/events", "html_url": "https://github.com/pytorch/pytorch/pull/10594", "id": 351382946, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4OTk1NDc0", "number": 10594, "title": "[c2] framework for committed serialized tests", "user": {"login": "ajyu", "id": 1071670, "node_id": "MDQ6VXNlcjEwNzE2NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1071670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajyu", "html_url": "https://github.com/ajyu", "followers_url": "https://api.github.com/users/ajyu/followers", "following_url": "https://api.github.com/users/ajyu/following{/other_user}", "gists_url": "https://api.github.com/users/ajyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajyu/subscriptions", "organizations_url": "https://api.github.com/users/ajyu/orgs", "repos_url": "https://api.github.com/users/ajyu/repos", "events_url": "https://api.github.com/users/ajyu/events{/privacy}", "received_events_url": "https://api.github.com/users/ajyu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 890282107, "node_id": "MDU6TGFiZWw4OTAyODIxMDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/caffe2", "name": "caffe2", "color": "210aa8", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-08-16T21:55:26Z", "updated_at": "2018-11-23T15:50:24Z", "closed_at": "2018-08-31T05:43:12Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/10594", "html_url": "https://github.com/pytorch/pytorch/pull/10594", "diff_url": "https://github.com/pytorch/pytorch/pull/10594.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/10594.patch"}, "body_html": "<p>Summary:<br>\nGenerate serialized test inputs/outputs/backward graphs of tests inside <code>caffe2/python/operator_test</code> that call assertSerializedOperatorCheck(). Tests should be decorated with serialized_test.collect_tests.given_and_seeded to run hypothesis tests that are actually random and a single fixed seeded hypothesis tests.</p>\n<p>To use:</p>\n<ol>\n<li>Refactor your test to be a SerializedTestCase<br>\n1a. Decorate it with @given_and_seeded<br>\n1b. Call testWithArgs in main</li>\n<li>Run your test with -g to generate the output. Check it in.</li>\n<li>Subsequent runs of the test without generating the output will check against the checked in test case.</li>\n</ol>\n<p>Details:<br>\nRun your test with <code>python caffe2/python/operator_test/[your_test].py -g</code><br>\nOutputs are in <code>caffe2/python/serialized_test/data</code>. The operator tests outputs are in a further subdirectory <code>operator_test</code>, to allow for other tests in the future (model zoo tests?)</p>\n<p>Currently, we've only refactored weighted_sum_test to use this, but in the next diff, we'll refactor as many as possible. The directory structure may also change as usually there are multiple tests in a single file, so we may create more structure to account for that.</p>\n<p>Test Plan:</p>\n<ol>\n<li>Run <code>python caffe2/python/operator_test/weighted_sum_test.py -g</code> to generate the outputs</li>\n<li>Run <code>python caffe2/python/operator_test/weighted_sum_test.py</code>; Check that the unit test itself still runs as expected</li>\n<li>Run <code>python caffe2/python/gradient_check_test.py</code>; Check that CheckSimple still works as expected</li>\n<li>Run <code>with-proxy FULL_CAFFE2=1 python setup.py develop</code>; Check there are no errors</li>\n</ol>", "body_text": "Summary:\nGenerate serialized test inputs/outputs/backward graphs of tests inside caffe2/python/operator_test that call assertSerializedOperatorCheck(). Tests should be decorated with serialized_test.collect_tests.given_and_seeded to run hypothesis tests that are actually random and a single fixed seeded hypothesis tests.\nTo use:\n\nRefactor your test to be a SerializedTestCase\n1a. Decorate it with @given_and_seeded\n1b. Call testWithArgs in main\nRun your test with -g to generate the output. Check it in.\nSubsequent runs of the test without generating the output will check against the checked in test case.\n\nDetails:\nRun your test with python caffe2/python/operator_test/[your_test].py -g\nOutputs are in caffe2/python/serialized_test/data. The operator tests outputs are in a further subdirectory operator_test, to allow for other tests in the future (model zoo tests?)\nCurrently, we've only refactored weighted_sum_test to use this, but in the next diff, we'll refactor as many as possible. The directory structure may also change as usually there are multiple tests in a single file, so we may create more structure to account for that.\nTest Plan:\n\nRun python caffe2/python/operator_test/weighted_sum_test.py -g to generate the outputs\nRun python caffe2/python/operator_test/weighted_sum_test.py; Check that the unit test itself still runs as expected\nRun python caffe2/python/gradient_check_test.py; Check that CheckSimple still works as expected\nRun with-proxy FULL_CAFFE2=1 python setup.py develop; Check there are no errors", "body": "Summary:\r\nGenerate serialized test inputs/outputs/backward graphs of tests inside `caffe2/python/operator_test` that call assertSerializedOperatorCheck(). Tests should be decorated with serialized_test.collect_tests.given_and_seeded to run hypothesis tests that are actually random and a single fixed seeded hypothesis tests.\r\n\r\nTo use:\r\n1. Refactor your test to be a SerializedTestCase\r\n1a. Decorate it with @given_and_seeded\r\n1b. Call testWithArgs in main\r\n2. Run your test with -g to generate the output. Check it in.\r\n3. Subsequent runs of the test without generating the output will check against the checked in test case. \r\n\r\nDetails:\r\nRun your test with `python caffe2/python/operator_test/[your_test].py -g`\r\nOutputs are in `caffe2/python/serialized_test/data`. The operator tests outputs are in a further subdirectory `operator_test`, to allow for other tests in the future (model zoo tests?)\r\n\r\nCurrently, we've only refactored weighted_sum_test to use this, but in the next diff, we'll refactor as many as possible. The directory structure may also change as usually there are multiple tests in a single file, so we may create more structure to account for that.\r\n\r\nTest Plan:\r\n1. Run `python caffe2/python/operator_test/weighted_sum_test.py -g` to generate the outputs\r\n2. Run `python caffe2/python/operator_test/weighted_sum_test.py`; Check that the unit test itself still runs as expected\r\n3. Run `python caffe2/python/gradient_check_test.py`; Check that CheckSimple still works as expected\r\n4. Run `with-proxy FULL_CAFFE2=1 python setup.py develop`; Check there are no errors"}