{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213707585", "pull_request_review_id": 150598440, "id": 213707585, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzcwNzU4NQ==", "diff_hunk": "@@ -0,0 +1,192 @@\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+from __future__ import unicode_literals\n+\n+from hypothesis import given, seed, settings\n+import caffe2.python.hypothesis_test_util as hu\n+import argparse\n+import os\n+import shutil\n+import sys\n+import numpy\n+import threading\n+import re\n+import inspect\n+from caffe2.python import gradient_checker\n+from caffe2.proto import caffe2_pb2\n+\n+operator_test_type = 'operator_test'\n+TOP_DIR = os.path.dirname(os.path.realpath(__file__))\n+DATA_DIR = os.path.join(TOP_DIR, 'data')\n+_output_context = threading.local()\n+\n+\n+def given_and_seeded(*given_args, **given_kwargs):\n+    def wrapper(f):\n+        hyp_func = given(*given_args, **given_kwargs)(f)\n+        fixed_seed_func = seed(0)(settings(max_examples=1)(given(\n+            *given_args, **given_kwargs)(f)))\n+\n+        def func(self, *args, **kwargs):\n+            self.should_serialize = True\n+            fixed_seed_func(self, *args, **kwargs)\n+            self.should_serialize = False\n+            hyp_func(self, *args, **kwargs)\n+        return func\n+    return wrapper\n+\n+\n+class SerializedTestCase(hu.HypothesisTestCase):\n+\n+    should_serialize = False\n+\n+    def get_output_dir(self):\n+        class_path = inspect.getfile(self.__class__)\n+        file_name_components = os.path.basename(class_path).split('.')\n+        test_file = file_name_components[0]\n+\n+        function_name_components = self.id().split('.')\n+        test_function = function_name_components[-1]\n+\n+        output_dir_arg = getattr(_output_context, 'output_dir', DATA_DIR)\n+        output_dir = os.path.join(\n+            output_dir_arg, operator_test_type, test_file + '.' + test_function)\n+        return output_dir\n+\n+    def serialize_test(self, inputs, outputs, grad_ops, op, device_option):\n+        def prepare_dir(path):\n+            if os.path.exists(path):\n+                shutil.rmtree(path)\n+            os.makedirs(path)\n+        output_dir = self.get_output_dir()\n+        prepare_dir(output_dir)\n+        for (i, grad) in enumerate(grad_ops):\n+            grad_path = os.path.join(output_dir, 'gradient_{}.pb'.format(i))\n+            with open(grad_path, 'wb') as f:\n+                f.write(grad.SerializeToString())\n+        device_type = int(device_option.device_type)\n+        op_path = os.path.join(output_dir, 'operator_{}.pb'.format(device_type))\n+        with open(op_path, 'wb') as f:\n+            f.write(op.SerializeToString())\n+        numpy.savez_compressed(\n+            os.path.join(output_dir, 'inputs'), inputs=inputs)\n+        numpy.savez_compressed(\n+            os.path.join(output_dir, 'outputs'), outputs=outputs)\n+\n+    def compare_test(self, inputs, outputs, grad_ops):", "path": "caffe2/python/serialized_test/serialized_test_util.py", "position": null, "original_position": 77, "commit_id": "833469bfa0676a3bdd55b4d818f29b099280cf0a", "original_commit_id": "7a10150ef275f480180d2bacfe2bd203256c0e08", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "Nit: let's support precision/tolerance here ", "created_at": "2018-08-29T14:45:16Z", "updated_at": "2018-11-23T15:50:15Z", "html_url": "https://github.com/pytorch/pytorch/pull/10594#discussion_r213707585", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10594", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213707585"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10594#discussion_r213707585"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10594"}}, "body_html": "<p>Nit: let's support precision/tolerance here</p>", "body_text": "Nit: let's support precision/tolerance here"}