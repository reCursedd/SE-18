{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213555500", "pull_request_review_id": 150414402, "id": 213555500, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzU1NTUwMA==", "diff_hunk": "@@ -0,0 +1,192 @@\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+from __future__ import unicode_literals\n+\n+from hypothesis import given, seed, settings\n+import caffe2.python.hypothesis_test_util as hu\n+import argparse\n+import os\n+import shutil\n+import sys\n+import numpy\n+import threading\n+import re\n+import inspect\n+from caffe2.python import gradient_checker\n+from caffe2.proto import caffe2_pb2\n+\n+operator_test_type = 'operator_test'\n+TOP_DIR = os.path.dirname(os.path.realpath(__file__))\n+DATA_DIR = os.path.join(TOP_DIR, 'data')\n+_output_context = threading.local()\n+\n+\n+def given_and_seeded(*given_args, **given_kwargs):\n+    def wrapper(f):\n+        hyp_func = given(*given_args, **given_kwargs)(f)\n+        fixed_seed_func = seed(0)(settings(max_examples=1)(given(\n+            *given_args, **given_kwargs)(f)))\n+\n+        def func(self, *args, **kwargs):\n+            self.should_serialize = True\n+            fixed_seed_func(self, *args, **kwargs)\n+            self.should_serialize = False\n+            hyp_func(self, *args, **kwargs)\n+        return func\n+    return wrapper\n+\n+\n+class SerializedTestCase(hu.HypothesisTestCase):\n+\n+    should_serialize = False\n+\n+    def get_output_dir(self):\n+        class_path = inspect.getfile(self.__class__)\n+        file_name_components = os.path.basename(class_path).split('.')\n+        test_file = file_name_components[0]\n+\n+        function_name_components = self.id().split('.')\n+        test_function = function_name_components[-1]\n+\n+        output_dir_arg = getattr(_output_context, 'output_dir', DATA_DIR)\n+        output_dir = os.path.join(\n+            output_dir_arg, operator_test_type, test_file + '.' + test_function)\n+        return output_dir\n+\n+    def serialize_test(self, inputs, outputs, grad_ops, op, device_option):\n+        def prepare_dir(path):\n+            if os.path.exists(path):\n+                shutil.rmtree(path)\n+            os.makedirs(path)\n+        output_dir = self.get_output_dir()\n+        prepare_dir(output_dir)\n+        for (i, grad) in enumerate(grad_ops):\n+            grad_path = os.path.join(output_dir, 'gradient_{}.pb'.format(i))\n+            with open(grad_path, 'wb') as f:\n+                f.write(grad.SerializeToString())\n+        device_type = int(device_option.device_type)\n+        op_path = os.path.join(output_dir, 'operator_{}.pb'.format(device_type))\n+        with open(op_path, 'wb') as f:\n+            f.write(op.SerializeToString())\n+        numpy.savez_compressed(\n+            os.path.join(output_dir, 'inputs'), inputs=inputs)\n+        numpy.savez_compressed(\n+            os.path.join(output_dir, 'outputs'), outputs=outputs)\n+\n+    def compare_test(self, inputs, outputs, grad_ops):\n+\n+        def parse_proto(x):\n+            proto = caffe2_pb2.OperatorDef()\n+            proto.ParseFromString(x)\n+            return proto\n+\n+        source_dir = self.get_output_dir()\n+\n+        # load serialized input and output\n+        loaded_inputs = numpy.load(\n+            os.path.join(source_dir, 'inputs.npz'), encoding='bytes')['inputs']\n+        inputs_equal = True\n+        for (x, y) in zip(inputs, loaded_inputs):\n+            if not numpy.array_equal(x, y):\n+                inputs_equal = False\n+        loaded_outputs = numpy.load(os.path.join(\n+            source_dir, 'outputs.npz'), encoding='bytes')['outputs']\n+\n+        # load operator\n+        found_op = False\n+        for i in os.listdir(source_dir):\n+            op_file = os.path.join(source_dir, i)\n+            match = re.search('operator_(.+?)\\.pb', i)\n+            if os.path.isfile(op_file) and match:\n+                with open(op_file, 'rb') as f:\n+                    loaded_op = f.read()\n+                op_proto = parse_proto(loaded_op)\n+                device_type = int(match.group(1))\n+                device_option = caffe2_pb2.DeviceOption(device_type=device_type)\n+                grad_ops, _ = gradient_checker.getGradientForOp(op_proto)\n+                found_op = True\n+                break\n+\n+        # if inputs are not the same, run serialized input through serialized op\n+        if not inputs_equal:\n+            self.assertTrue(found_op)\n+            outputs = hu.runOpOnInput(device_option, op_proto, loaded_inputs)\n+\n+        # assert outputs are equal\n+        for (x, y) in zip(outputs, loaded_outputs):\n+            numpy.testing.assert_allclose(x, y, atol=1e-7, rtol=1e-7)\n+\n+        # assert gradient op is equal\n+        for i in range(len(grad_ops)):\n+            with open(os.path.join(source_dir, 'gradient_{}.pb'.format(i)), 'rb') as f:\n+                loaded_grad = f.read()\n+            grad_proto = parse_proto(loaded_grad)\n+            self.assertTrue(grad_proto == grad_ops[i])\n+\n+    def assertSerializedOperatorChecks(\n+            self,\n+            inputs,\n+            outputs,\n+            gradient_operator,\n+            op,\n+            device_option,\n+    ):\n+        if self.should_serialize:\n+            if getattr(_output_context, 'should_write_output', False):\n+                self.serialize_test(\n+                    inputs, outputs, gradient_operator, op, device_option)\n+            else:\n+                self.compare_test(inputs, outputs, gradient_operator)\n+\n+    def assertReferenceChecks(\n+        self,\n+        device_option,\n+        op,\n+        inputs,\n+        reference,\n+        input_device_options=None,\n+        threshold=1e-4,\n+        output_to_grad=None,\n+        grad_reference=None,\n+        atol=None,\n+        outputs_to_check=None,\n+    ):\n+        outs = super(SerializedTestCase, self).assertReferenceChecks(\n+            device_option,\n+            op,\n+            inputs,\n+            reference,\n+            input_device_options,\n+            threshold,\n+            output_to_grad,\n+            grad_reference,\n+            atol,\n+            outputs_to_check,\n+        )\n+        grad_ops, _ = gradient_checker.getGradientForOp(op)\n+        self.assertSerializedOperatorChecks(\n+            inputs,\n+            outs,\n+            grad_ops,\n+            op,\n+            device_option,\n+        )\n+\n+", "path": "caffe2/python/serialized_test/serialized_test_util.py", "position": 192, "original_position": 176, "commit_id": "833469bfa0676a3bdd55b4d818f29b099280cf0a", "original_commit_id": "7a10150ef275f480180d2bacfe2bd203256c0e08", "user": {"login": "houseroad", "id": 30275821, "node_id": "MDQ6VXNlcjMwMjc1ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/30275821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houseroad", "html_url": "https://github.com/houseroad", "followers_url": "https://api.github.com/users/houseroad/followers", "following_url": "https://api.github.com/users/houseroad/following{/other_user}", "gists_url": "https://api.github.com/users/houseroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/houseroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houseroad/subscriptions", "organizations_url": "https://api.github.com/users/houseroad/orgs", "repos_url": "https://api.github.com/users/houseroad/repos", "events_url": "https://api.github.com/users/houseroad/events{/privacy}", "received_events_url": "https://api.github.com/users/houseroad/received_events", "type": "User", "site_admin": false}, "body": "Nit: could you add the usage of the script in the comments? Or add `README.md` in `caffe2/python/serialized_test/`.", "created_at": "2018-08-29T06:13:59Z", "updated_at": "2018-11-23T15:50:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/10594#discussion_r213555500", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10594", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213555500"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10594#discussion_r213555500"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10594"}}, "body_html": "<p>Nit: could you add the usage of the script in the comments? Or add <code>README.md</code> in <code>caffe2/python/serialized_test/</code>.</p>", "body_text": "Nit: could you add the usage of the script in the comments? Or add README.md in caffe2/python/serialized_test/."}