{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197251525", "pull_request_review_id": 130960669, "id": 197251525, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzI1MTUyNQ==", "diff_hunk": "@@ -0,0 +1,81 @@\n+#define CATCH_CONFIG_MAIN\n+#include \"catch.hpp\"\n+\n+#include <ATen/ATen.h>\n+#include <iostream>\n+#include <sstream>\n+\n+using namespace at;\n+\n+TEST_CASE( \"half arithmetic\", \"[]\" ) {\n+  Half zero = 0;\n+  Half one = 1;\n+  REQUIRE(zero + one == one);\n+  REQUIRE(zero + zero == zero);\n+  REQUIRE(zero * one == zero);\n+  REQUIRE(one * one == one);\n+  REQUIRE(one / one == one);\n+  REQUIRE(one - one == zero);\n+  REQUIRE(one - zero == one);\n+  REQUIRE(zero - one == -one);\n+  REQUIRE(one + one == Half(2));\n+  REQUIRE(one + one == 2);\n+}\n+\n+TEST_CASE( \"half comparisons\", \"[]\" ) {\n+  Half zero = 0;\n+  Half one = 1;\n+  REQUIRE(zero < one);\n+  REQUIRE(zero < 1);\n+  REQUIRE(1 > zero);\n+  REQUIRE(0 >= zero);\n+  REQUIRE(0 != one);\n+  REQUIRE(zero == 0);\n+  REQUIRE(zero == zero);\n+  REQUIRE(zero == -zero);\n+}\n+\n+TEST_CASE( \"half cast\", \"[]\" ) {\n+  Half value = 1.5f;\n+  REQUIRE((int)value == 1);\n+  REQUIRE((short)value == 1);\n+  REQUIRE((long long)value == 1LL);\n+  REQUIRE((float)value == 1.5f);\n+  REQUIRE((double)value == 1.5);\n+  REQUIRE((bool)value == true);\n+  REQUIRE((bool)Half(0.0f) == false);\n+}\n+\n+TEST_CASE( \"half construction\", \"[]\" ) {\n+  REQUIRE(Half((short)3) == Half(3.0f));\n+  REQUIRE(Half((unsigned short)3) == Half(3.0f));\n+  REQUIRE(Half(3) == Half(3.0f));\n+  REQUIRE(Half(3U) == Half(3.0f));\n+  REQUIRE(Half(3LL) == Half(3.0f));\n+  REQUIRE(Half(3ULL) == Half(3.0f));\n+  REQUIRE(Half(3.5) == Half(3.5f));\n+}\n+\n+static std::string to_string(const Half& h) {\n+  std::stringstream ss;\n+  ss << h;\n+  return ss.str();\n+}\n+\n+TEST_CASE( \"half to string\", \"[]\" ) {\n+  REQUIRE(to_string(Half(3.5f)) == \"3.5\");\n+  REQUIRE(to_string(Half(-100.0f)) == \"-100\");\n+}\n+\n+TEST_CASE( \"half numeric limits\", \"[]\" ) {\n+  using limits = std::numeric_limits<Half>;\n+  REQUIRE(limits::lowest() == -65504.0f);", "path": "aten/src/ATen/test/half_test.cpp", "position": 74, "original_position": 72, "commit_id": "45dfe1b9c777199f451d784613dbd6bd0c0a4d46", "original_commit_id": "16ddb32b25303586f1eab58c0757813d522cf957", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Good idea, I added checks at the end of `half_test.cpp` and checked that they would half caught the earlier mistakes.", "created_at": "2018-06-21T19:27:27Z", "updated_at": "2018-11-23T15:46:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/8660#discussion_r197251525", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8660", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197251525"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8660#discussion_r197251525"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8660"}}, "body_html": "<p>Good idea, I added checks at the end of <code>half_test.cpp</code> and checked that they would half caught the earlier mistakes.</p>", "body_text": "Good idea, I added checks at the end of half_test.cpp and checked that they would half caught the earlier mistakes.", "in_reply_to_id": 197177111}