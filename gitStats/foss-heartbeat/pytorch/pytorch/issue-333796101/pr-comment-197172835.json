{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197172835", "pull_request_review_id": 130855346, "id": 197172835, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE3MjgzNQ==", "diff_hunk": "@@ -0,0 +1,168 @@\n+#pragma once\n+\n+#include \"ATen/ATenGeneral.h\"\n+#include <cstring>\n+#include <limits>\n+\n+#ifdef __CUDACC__\n+#include <cuda_fp16.h>\n+#endif\n+\n+namespace at {\n+\n+/// Constructors\n+\n+inline AT_HOSTDEVICE Half::Half(float value) {\n+#if defined(__CUDA_ARCH__) || defined(__HIP_DEVICE_COMPILE__)\n+  x = __half_as_short(__float2half(value));\n+#else\n+  x = detail::float2halfbits(value);\n+#endif\n+}\n+\n+/// Implicit conversions\n+\n+inline AT_HOSTDEVICE Half::operator float() const {\n+#if defined(__CUDA_ARCH__) || defined(__HIP_DEVICE_COMPILE__)\n+  return __half2float(*reinterpret_cast<const __half*>(&x));\n+#else\n+  return detail::halfbits2float(x);\n+#endif\n+}\n+\n+#ifdef __CUDACC__\n+inline AT_HOSTDEVICE Half::Half(const __half& value) {\n+  x = *reinterpret_cast<const unsigned short*>(&value);\n+}\n+inline AT_HOSTDEVICE Half::operator __half() const {\n+  return *reinterpret_cast<const __half*>(&x);\n+}\n+#endif\n+\n+/// Arithmetic\n+\n+inline AT_HOSTDEVICE Half operator+(const Half& a, const Half& b) {\n+  return (float)a + (float)b;\n+}\n+\n+inline AT_HOSTDEVICE Half operator-(const Half& a, const Half& b) {\n+  return (float)a - (float)b;\n+}\n+\n+inline AT_HOSTDEVICE Half operator*(const Half& a, const Half& b) {\n+  return (float)a * (float)b;\n+}\n+\n+inline AT_HOSTDEVICE Half operator/(const Half& a, const Half& b) {\n+  return (float)a / (float)b;\n+}\n+\n+inline AT_HOSTDEVICE Half operator-(const Half& a) {\n+  return -(float)a;\n+}\n+\n+inline AT_HOSTDEVICE Half& operator+=(Half& a, const Half& b) {\n+  a = a + b;\n+  return a;\n+}\n+\n+inline AT_HOSTDEVICE Half& operator-=(Half& a, const Half& b) {\n+  a = a - b;\n+  return a;\n+}\n+\n+inline AT_HOSTDEVICE Half& operator*=(Half& a, const Half& b) {\n+  a = a * b;\n+  return a;\n+}\n+\n+inline AT_HOSTDEVICE Half& operator/=(Half& a, const Half& b) {\n+  a = a / b;\n+  return a;\n+}\n+\n+/// Arithmetic with floats\n+\n+inline AT_HOSTDEVICE float operator+(Half a, float b) { return (float)a + b; }\n+inline AT_HOSTDEVICE float operator-(Half a, float b) { return (float)a - b; }\n+inline AT_HOSTDEVICE float operator*(Half a, float b) { return (float)a * b; }\n+inline AT_HOSTDEVICE float operator/(Half a, float b) { return (float)a / b; }\n+\n+inline AT_HOSTDEVICE float operator+(float a, Half b) { return a + (float)b; }\n+inline AT_HOSTDEVICE float operator-(float a, Half b) { return a - (float)b; }\n+inline AT_HOSTDEVICE float operator*(float a, Half b) { return a * (float)b; }\n+inline AT_HOSTDEVICE float operator/(float a, Half b) { return a / (float)b; }\n+\n+inline AT_HOSTDEVICE float& operator+=(float& a, const Half& b) { return a += (float)b; }\n+inline AT_HOSTDEVICE float& operator-=(float& a, const Half& b) { return a -= (float)b; }\n+inline AT_HOSTDEVICE float& operator*=(float& a, const Half& b) { return a *= (float)b; }\n+inline AT_HOSTDEVICE float& operator/=(float& a, const Half& b) { return a /= (float)b; }\n+\n+/// Arithmetic with doubles\n+\n+inline AT_HOSTDEVICE double operator+(Half a, double b) { return (double)a + b; }\n+inline AT_HOSTDEVICE double operator-(Half a, double b) { return (double)a - b; }\n+inline AT_HOSTDEVICE double operator*(Half a, double b) { return (double)a * b; }\n+inline AT_HOSTDEVICE double operator/(Half a, double b) { return (double)a / b; }\n+\n+inline AT_HOSTDEVICE double operator+(double a, Half b) { return a + (double)b; }\n+inline AT_HOSTDEVICE double operator-(double a, Half b) { return a - (double)b; }\n+inline AT_HOSTDEVICE double operator*(double a, Half b) { return a * (double)b; }\n+inline AT_HOSTDEVICE double operator/(double a, Half b) { return a / (double)b; }\n+\n+/// Arithmetic with ints\n+\n+inline AT_HOSTDEVICE Half operator+(Half a, int b) { return a + (Half)b; }\n+inline AT_HOSTDEVICE Half operator-(Half a, int b) { return a - (Half)b; }\n+inline AT_HOSTDEVICE Half operator*(Half a, int b) { return a * (Half)b; }\n+inline AT_HOSTDEVICE Half operator/(Half a, int b) { return a / (Half)b; }\n+\n+inline AT_HOSTDEVICE Half operator+(int a, Half b) { return (Half)a + b; }\n+inline AT_HOSTDEVICE Half operator-(int a, Half b) { return (Half)a - b; }\n+inline AT_HOSTDEVICE Half operator*(int a, Half b) { return (Half)a * b; }\n+inline AT_HOSTDEVICE Half operator/(int a, Half b) { return (Half)a / b; }\n+\n+/// NOTE: we do not define comparisons directly and instead rely on the implicit\n+/// conversion from at::Half to float.\n+\n+} // namespace at\n+\n+namespace std {\n+\n+template<> class numeric_limits<at::Half> {\n+ public:\n+  static constexpr bool is_specialized = true;\n+  static constexpr bool is_signed = true;\n+  static constexpr bool is_integer = false;\n+  static constexpr bool is_exact = false;\n+  static constexpr bool has_infinity = true;\n+  static constexpr bool has_quiet_NaN = true;\n+  static constexpr bool has_signaling_NaN = true;\n+  static constexpr bool has_denorm = numeric_limits<float>::has_denorm;\n+  static constexpr bool has_denorm_loss = numeric_limits<float>::has_denorm_loss;\n+  static constexpr bool round_style = numeric_limits<float>::round_style;\n+  static constexpr bool is_iec559 = true;\n+  static constexpr bool is_bounded = true;\n+  static constexpr bool is_modulo = false;\n+  static constexpr bool digits = 11;\n+  static constexpr bool digits10 = 3;\n+  static constexpr bool max_digits10 = 5;\n+  static constexpr bool radix = 2;\n+  static constexpr bool min_exponent = -13;\n+  static constexpr bool min_exponent10 = -4;\n+  static constexpr bool max_exponent = 16;\n+  static constexpr bool max_exponent10 = 4;\n+  static constexpr bool traps = false;\n+  static constexpr bool tinyness_before = numeric_limits<float>::tinyness_before;\n+  static constexpr at::Half min() { return at::Half(0x400, at::Half::from_bits); }", "path": "aten/src/ATen/Half-inl.h", "position": null, "original_position": 157, "commit_id": "45dfe1b9c777199f451d784613dbd6bd0c0a4d46", "original_commit_id": "16ddb32b25303586f1eab58c0757813d522cf957", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: can you make these all 4 digits post \"x\"? makes it easier to read.", "created_at": "2018-06-21T15:15:47Z", "updated_at": "2018-11-23T15:45:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/8660#discussion_r197172835", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8660", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197172835"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8660#discussion_r197172835"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8660"}}, "body_html": "<p>nit: can you make these all 4 digits post \"x\"? makes it easier to read.</p>", "body_text": "nit: can you make these all 4 digits post \"x\"? makes it easier to read."}