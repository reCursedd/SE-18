{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197251360", "pull_request_review_id": 130960449, "id": 197251360, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzI1MTM2MA==", "diff_hunk": "@@ -1,5 +1,12 @@\n #pragma once\n \n+/// Defines the Half type (half-precision floating-point) including conversions\n+/// to standard C types and basic arithmetic operations. Note that arithmetic\n+/// operations are implemented by converting to floating point and\n+/// performing the operation in float32, instead of using CUDA half intrinisics.\n+/// Most uses of this type within ATen are memory bound, including the\n+/// element-wise kernels, and the half intrinisics aren't efficient on all GPUs.", "path": "aten/src/ATen/Half.h", "position": 8, "original_position": 8, "commit_id": "45dfe1b9c777199f451d784613dbd6bd0c0a4d46", "original_commit_id": "16ddb32b25303586f1eab58c0757813d522cf957", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "I added a comment about alternatives. There's no change in performance because we were already following this strategy in device code. For a sanity check, I measured the performance of dense `Embedding` with float16 and saw no difference:\r\n\r\nhttps://gist.github.com/colesbury/b5f92b4fcc082aef3d3af604ea5a4db1", "created_at": "2018-06-21T19:26:48Z", "updated_at": "2018-11-23T15:46:03Z", "html_url": "https://github.com/pytorch/pytorch/pull/8660#discussion_r197251360", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8660", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/197251360"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8660#discussion_r197251360"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8660"}}, "body_html": "<p>I added a comment about alternatives. There's no change in performance because we were already following this strategy in device code. For a sanity check, I measured the performance of dense <code>Embedding</code> with float16 and saw no difference:</p>\n<p><a href=\"https://gist.github.com/colesbury/b5f92b4fcc082aef3d3af604ea5a4db1\">https://gist.github.com/colesbury/b5f92b4fcc082aef3d3af604ea5a4db1</a></p>", "body_text": "I added a comment about alternatives. There's no change in performance because we were already following this strategy in device code. For a sanity check, I measured the performance of dense Embedding with float16 and saw no difference:\nhttps://gist.github.com/colesbury/b5f92b4fcc082aef3d3af604ea5a4db1", "in_reply_to_id": 197170092}