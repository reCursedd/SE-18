{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196542826", "pull_request_review_id": 130116199, "id": 196542826, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjU0MjgyNg==", "diff_hunk": "@@ -0,0 +1,173 @@\n+#pragma once\n+\n+#include \"ATen/ATenGeneral.h\"\n+#include <cstring>\n+#include <limits>\n+\n+#ifdef __CUDACC__\n+#include <cuda_fp16.h>\n+#endif\n+\n+namespace at {\n+\n+/// Constructors\n+\n+inline AT_HOSTDEVICE Half::Half(const __half& value) {\n+  std::memcpy(&x, &value, sizeof(unsigned short));", "path": "aten/src/ATen/Half-inl.h", "position": null, "original_position": 16, "commit_id": "45dfe1b9c777199f451d784613dbd6bd0c0a4d46", "original_commit_id": "fda4f0c046e4cb337b8e45a240ea1aa84fdcc8e8", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "Yes, although it doesn't seem to be as smart about trivial memcpys so maybe adding a special case for device code makes sense. (On CPU, this ends up being equivalent to `x = value` if you compile with optimizations)", "created_at": "2018-06-19T19:02:20Z", "updated_at": "2018-11-23T15:45:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/8660#discussion_r196542826", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/8660", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/196542826"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/8660#discussion_r196542826"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/8660"}}, "body_html": "<p>Yes, although it doesn't seem to be as smart about trivial memcpys so maybe adding a special case for device code makes sense. (On CPU, this ends up being equivalent to <code>x = value</code> if you compile with optimizations)</p>", "body_text": "Yes, although it doesn't seem to be as smart about trivial memcpys so maybe adding a special case for device code makes sense. (On CPU, this ends up being equivalent to x = value if you compile with optimizations)", "in_reply_to_id": 196540692}