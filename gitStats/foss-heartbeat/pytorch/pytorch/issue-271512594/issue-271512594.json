{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3504", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3504/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3504/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3504/events", "html_url": "https://github.com/pytorch/pytorch/pull/3504", "id": 271512594, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUwODc5Nzgy", "number": 3504, "title": "Fix error message for type mismatches with sparse tensors", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 742585577, "node_id": "MDU6TGFiZWw3NDI1ODU1Nzc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/0.3", "name": "0.3", "color": "d1c41b", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-06T15:23:34Z", "updated_at": "2018-02-03T01:26:25Z", "closed_at": "2017-11-06T18:12:41Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3504", "html_url": "https://github.com/pytorch/pytorch/pull/3504", "diff_url": "https://github.com/pytorch/pytorch/pull/3504.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3504.patch"}, "body_html": "<p>There was a bug that SparseCPUFloatType would be translated to \"Sparsetorch.FloatTensor\". This happened because the find and replace code would iterate through the map of find and replaces from shortest key to longest key, replacing CPUFloatType with \"torch.FloatTensor\" before SparseCPUFloatType was found and replaced with \"torch.sparse.FloatTensor\".</p>\n<p>This makes it so that the map is iterated through in reverse order.</p>\n<h3>Test Plan</h3>\n<p>Is there a conventional way in pytorch for unit tests in C++?</p>\n<p>Run code to trigger the Sparse tensor type mismatch:</p>\n<pre><code>import torch\nx = torch.sparse.FloatTensor(5, 5)\ny = torch.FloatTensor(5, 5)\n\ntorch.mm(x, y) # works\n\nxx = torch.autograd.Variable(x)\nxy = torch.autograd.Variable(y)\nprint(type(x), type(xx))\n\ntorch.mm(xx, xy) \n</code></pre>\n<p>Assert that the error message is better:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/5652049/32448282-83c583be-c2dc-11e7-9b8c-91cd2e7bd02d.png\"><img src=\"https://user-images.githubusercontent.com/5652049/32448282-83c583be-c2dc-11e7-9b8c-91cd2e7bd02d.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>", "body_text": "There was a bug that SparseCPUFloatType would be translated to \"Sparsetorch.FloatTensor\". This happened because the find and replace code would iterate through the map of find and replaces from shortest key to longest key, replacing CPUFloatType with \"torch.FloatTensor\" before SparseCPUFloatType was found and replaced with \"torch.sparse.FloatTensor\".\nThis makes it so that the map is iterated through in reverse order.\nTest Plan\nIs there a conventional way in pytorch for unit tests in C++?\nRun code to trigger the Sparse tensor type mismatch:\nimport torch\nx = torch.sparse.FloatTensor(5, 5)\ny = torch.FloatTensor(5, 5)\n\ntorch.mm(x, y) # works\n\nxx = torch.autograd.Variable(x)\nxy = torch.autograd.Variable(y)\nprint(type(x), type(xx))\n\ntorch.mm(xx, xy) \n\nAssert that the error message is better:", "body": "There was a bug that SparseCPUFloatType would be translated to \"Sparsetorch.FloatTensor\". This happened because the find and replace code would iterate through the map of find and replaces from shortest key to longest key, replacing CPUFloatType with \"torch.FloatTensor\" before SparseCPUFloatType was found and replaced with \"torch.sparse.FloatTensor\".\r\n\r\nThis makes it so that the map is iterated through in reverse order.\r\n\r\n### Test Plan\r\nIs there a conventional way in pytorch for unit tests in C++?\r\n\r\nRun code to trigger the Sparse tensor type mismatch:\r\n```\r\nimport torch\r\nx = torch.sparse.FloatTensor(5, 5)\r\ny = torch.FloatTensor(5, 5)\r\n\r\ntorch.mm(x, y) # works\r\n\r\nxx = torch.autograd.Variable(x)\r\nxy = torch.autograd.Variable(y)\r\nprint(type(x), type(xx))\r\n\r\ntorch.mm(xx, xy) \r\n```\r\nAssert that the error message is better:\r\n![image](https://user-images.githubusercontent.com/5652049/32448282-83c583be-c2dc-11e7-9b8c-91cd2e7bd02d.png)\r\n"}