{"url": "https://api.github.com/repos/pytorch/pytorch/issues/1906", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/1906/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/1906/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/1906/events", "html_url": "https://github.com/pytorch/pytorch/issues/1906", "id": 238406965, "node_id": "MDU6SXNzdWUyMzg0MDY5NjU=", "number": 1906, "title": "Pooling throws an exception in Tegra TX1", "user": {"login": "dimatura", "id": 60116, "node_id": "MDQ6VXNlcjYwMTE2", "avatar_url": "https://avatars1.githubusercontent.com/u/60116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimatura", "html_url": "https://github.com/dimatura", "followers_url": "https://api.github.com/users/dimatura/followers", "following_url": "https://api.github.com/users/dimatura/following{/other_user}", "gists_url": "https://api.github.com/users/dimatura/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimatura/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimatura/subscriptions", "organizations_url": "https://api.github.com/users/dimatura/orgs", "repos_url": "https://api.github.com/users/dimatura/repos", "events_url": "https://api.github.com/users/dimatura/events{/privacy}", "received_events_url": "https://api.github.com/users/dimatura/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}, {"id": 553773019, "node_id": "MDU6TGFiZWw1NTM3NzMwMTk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/needs-reproduction", "name": "needs-reproduction", "color": "e99695", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-25T21:14:41Z", "updated_at": "2017-07-14T06:24:30Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Hi all, great work with pytorch. I'm trying to use pytorch in a Jetson TX1, but running into some issues. One of them is pretty simple: pooling doesn't seem to work.</p>\n<p>First, some details:</p>\n<ul>\n<li>Jetson TX1, a 64-bit ARM architecture with a tegra TX1</li>\n<li>Ubuntu 16.04 aarch64</li>\n<li>CUDA 8.0, CUDNN 5105</li>\n<li>python 2.7</li>\n<li>Built from source (conda not available yet) from at least two git commits - 7c24a, Jun 23 and one from roughly a week earlier. <del>Currently compiling the 0.1.12 tag - will update when done.</del> Tag 1.12 (ccdf54) actually works correctly, with and without cuda.</li>\n</ul>\n<p>Here's a simple example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn <span class=\"pl-k\">as</span> nn                                                                                                                                                                                              \n<span class=\"pl-k\">from</span> torch.autograd <span class=\"pl-k\">import</span> Variable                                                                                                                                                                                \n                                                                                                                                                                                                                    \nnet <span class=\"pl-k\">=</span> nn.MaxPool2d(<span class=\"pl-c1\">2</span>)<span class=\"pl-c\"><span class=\"pl-c\">#</span>.cuda()                                                                                                                                                                                      </span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>net = nn.AvgPool2d(2)#.cuda()                                                                                                                                                                                      </span>\n                                                                                                                                                                                                                    \nxd <span class=\"pl-k\">=</span> torch.FloatTensor(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">448</span>, <span class=\"pl-c1\">448</span>)                                                                                                                                                                           \nx <span class=\"pl-k\">=</span> Variable(xd, <span class=\"pl-v\">volatile</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)<span class=\"pl-c\"><span class=\"pl-c\">#</span>.cuda()                                      `                                                                                                                                      </span>\ny <span class=\"pl-k\">=</span> net.forward(x)                                                                                                                                                                                                 \n<span class=\"pl-c1\">print</span>(y.data.mean())</pre></div>\n<p>when using MaxPool2d, I get</p>\n<pre><code>terminate called after throwing an instance of 'THArgException'\n  what():  can't expand an empty tensor at /home/ubuntu/apps/pytorch/torch/lib/TH/generic/THTensor.c:295\nAborted\n</code></pre>\n<p><del>when using AvgPool2d, oddly I get a different error:</del>  AvgPool2d works as expected.</p>\n<p>Since I'm not too experienced with the internals, I'm not sure what changes matter, but I changed a few things (using cuda or cpu, volatile or not, the tensor size, the pooling parameters) and always got the same result. As a very very approximate workaround I've been using extra striding in my convolutions, but obviously that's not ideal ;).</p>", "body_text": "Hi all, great work with pytorch. I'm trying to use pytorch in a Jetson TX1, but running into some issues. One of them is pretty simple: pooling doesn't seem to work.\nFirst, some details:\n\nJetson TX1, a 64-bit ARM architecture with a tegra TX1\nUbuntu 16.04 aarch64\nCUDA 8.0, CUDNN 5105\npython 2.7\nBuilt from source (conda not available yet) from at least two git commits - 7c24a, Jun 23 and one from roughly a week earlier. Currently compiling the 0.1.12 tag - will update when done. Tag 1.12 (ccdf54) actually works correctly, with and without cuda.\n\nHere's a simple example:\nimport torch\nimport torch.nn as nn                                                                                                                                                                                              \nfrom torch.autograd import Variable                                                                                                                                                                                \n                                                                                                                                                                                                                    \nnet = nn.MaxPool2d(2)#.cuda()                                                                                                                                                                                      \n#net = nn.AvgPool2d(2)#.cuda()                                                                                                                                                                                      \n                                                                                                                                                                                                                    \nxd = torch.FloatTensor(1, 3, 448, 448)                                                                                                                                                                           \nx = Variable(xd, volatile=True)#.cuda()                                      `                                                                                                                                      \ny = net.forward(x)                                                                                                                                                                                                 \nprint(y.data.mean())\nwhen using MaxPool2d, I get\nterminate called after throwing an instance of 'THArgException'\n  what():  can't expand an empty tensor at /home/ubuntu/apps/pytorch/torch/lib/TH/generic/THTensor.c:295\nAborted\n\nwhen using AvgPool2d, oddly I get a different error:  AvgPool2d works as expected.\nSince I'm not too experienced with the internals, I'm not sure what changes matter, but I changed a few things (using cuda or cpu, volatile or not, the tensor size, the pooling parameters) and always got the same result. As a very very approximate workaround I've been using extra striding in my convolutions, but obviously that's not ideal ;).", "body": "Hi all, great work with pytorch. I'm trying to use pytorch in a Jetson TX1, but running into some issues. One of them is pretty simple: pooling doesn't seem to work. \r\n\r\nFirst, some details:\r\n- Jetson TX1, a 64-bit ARM architecture with a tegra TX1\r\n- Ubuntu 16.04 aarch64\r\n- CUDA 8.0, CUDNN 5105\r\n- python 2.7\r\n- Built from source (conda not available yet) from at least two git commits - 7c24a, Jun 23 and one from roughly a week earlier. ~~Currently compiling the 0.1.12 tag - will update when done.~~ Tag 1.12 (ccdf54) actually works correctly, with and without cuda.\r\n\r\nHere's a simple example:\r\n```python\r\nimport torch\r\nimport torch.nn as nn                                                                                                                                                                                              \r\nfrom torch.autograd import Variable                                                                                                                                                                                \r\n                                                                                                                                                                                                                    \r\nnet = nn.MaxPool2d(2)#.cuda()                                                                                                                                                                                      \r\n#net = nn.AvgPool2d(2)#.cuda()                                                                                                                                                                                      \r\n                                                                                                                                                                                                                    \r\nxd = torch.FloatTensor(1, 3, 448, 448)                                                                                                                                                                           \r\nx = Variable(xd, volatile=True)#.cuda()                                      `                                                                                                                                      \r\ny = net.forward(x)                                                                                                                                                                                                 \r\nprint(y.data.mean())\r\n```\r\nwhen using MaxPool2d, I get \r\n```\r\nterminate called after throwing an instance of 'THArgException'\r\n  what():  can't expand an empty tensor at /home/ubuntu/apps/pytorch/torch/lib/TH/generic/THTensor.c:295\r\nAborted\r\n```\r\n\r\n~~when using AvgPool2d, oddly I get a different error:~~  AvgPool2d works as expected.\r\n\r\nSince I'm not too experienced with the internals, I'm not sure what changes matter, but I changed a few things (using cuda or cpu, volatile or not, the tensor size, the pooling parameters) and always got the same result. As a very very approximate workaround I've been using extra striding in my convolutions, but obviously that's not ideal ;).  "}