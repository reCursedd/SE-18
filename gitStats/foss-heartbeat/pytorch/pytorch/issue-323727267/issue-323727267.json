{"url": "https://api.github.com/repos/pytorch/pytorch/issues/7617", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/7617/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/7617/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/7617/events", "html_url": "https://github.com/pytorch/pytorch/issues/7617", "id": 323727267, "node_id": "MDU6SXNzdWUzMjM3MjcyNjc=", "number": 7617, "title": "checkpoint(function, *args) should have the same requires_grad as function(*args)", "user": {"login": "ruotianluo", "id": 16023153, "node_id": "MDQ6VXNlcjE2MDIzMTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/16023153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruotianluo", "html_url": "https://github.com/ruotianluo", "followers_url": "https://api.github.com/users/ruotianluo/followers", "following_url": "https://api.github.com/users/ruotianluo/following{/other_user}", "gists_url": "https://api.github.com/users/ruotianluo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruotianluo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruotianluo/subscriptions", "organizations_url": "https://api.github.com/users/ruotianluo/orgs", "repos_url": "https://api.github.com/users/ruotianluo/repos", "events_url": "https://api.github.com/users/ruotianluo/events{/privacy}", "received_events_url": "https://api.github.com/users/ruotianluo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-16T18:02:54Z", "updated_at": "2018-06-04T09:24:17Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h2>Issue description</h2>\n<p>In principle, to my understanding, checkpoint(function, *args) should behave exactly the same during forwarding as function(*args).</p>\n<p>However, now, if the all the inputs have requires_grad to be False, the output will also checkpoint(...) will also have requires_grad to be False. While function may involve other trainable parameters, function(*args) will have requires_grad True output even all the inputs are requires_grad False.</p>\n<p>should be fixed if replacing the no_grad with <code>detach_variable(run_function(*args))</code> (although detach_variable doesn't accept non tuple right now)</p>\n<h2>Code example</h2>\n<pre><code>import torch\nfrom torch.utils.checkpoint import checkpoint\n\nm = torch.nn.Linear(4,3)\nx = torch.randn(10,4)\n\nz1 = checkpoint(lambda _:m(_), x)\nprint(z1.requires_grad)\n\nz2 = m(x)\nprint(z2.requires_grad)\n</code></pre>\n<h2>System Info</h2>\n<p>PyTorch version: 0.5.0a0+a61d4a3<br>\nIs debug build: No<br>\nCUDA used to build PyTorch: None</p>\n<p>OS: Mac OSX 10.13.1<br>\nGCC version: Could not collect<br>\nCMake version: version 3.9.4</p>\n<p>Python version: 2.7<br>\nIs CUDA available: No<br>\nCUDA runtime version: No CUDA<br>\nGPU models and configuration: No CUDA<br>\nNvidia driver version: No CUDA<br>\ncuDNN version: No CUDA</p>\n<p>Versions of relevant libraries:<br>\n[pip] numpy (1.14.2)<br>\n[pip] torch (0.5.0a0+a61d4a3, /Users/ruotianluo/anaconda/lib/python2.7/site-packages)<br>\n[pip] torchvision (0.2.0)<br>\n[conda] torch                     0.5.0a0+242f6c3           <br>\n[conda] torch                     0.5.0a0+a61d4a3           <br>\n[conda] torch                     0.4.0a0+dd91d57           <br>\n[conda] torch                     0.4.0a0+4a9e02f           <br>\n[conda] torch                     0.4.0a0+460e8cd           <br>\n[conda] torch                     0.4.0a0+4dd29ac           <br>\n[conda] torchvision               0.2.0                     </p>", "body_text": "Issue description\nIn principle, to my understanding, checkpoint(function, *args) should behave exactly the same during forwarding as function(*args).\nHowever, now, if the all the inputs have requires_grad to be False, the output will also checkpoint(...) will also have requires_grad to be False. While function may involve other trainable parameters, function(*args) will have requires_grad True output even all the inputs are requires_grad False.\nshould be fixed if replacing the no_grad with detach_variable(run_function(*args)) (although detach_variable doesn't accept non tuple right now)\nCode example\nimport torch\nfrom torch.utils.checkpoint import checkpoint\n\nm = torch.nn.Linear(4,3)\nx = torch.randn(10,4)\n\nz1 = checkpoint(lambda _:m(_), x)\nprint(z1.requires_grad)\n\nz2 = m(x)\nprint(z2.requires_grad)\n\nSystem Info\nPyTorch version: 0.5.0a0+a61d4a3\nIs debug build: No\nCUDA used to build PyTorch: None\nOS: Mac OSX 10.13.1\nGCC version: Could not collect\nCMake version: version 3.9.4\nPython version: 2.7\nIs CUDA available: No\nCUDA runtime version: No CUDA\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nVersions of relevant libraries:\n[pip] numpy (1.14.2)\n[pip] torch (0.5.0a0+a61d4a3, /Users/ruotianluo/anaconda/lib/python2.7/site-packages)\n[pip] torchvision (0.2.0)\n[conda] torch                     0.5.0a0+242f6c3           \n[conda] torch                     0.5.0a0+a61d4a3           \n[conda] torch                     0.4.0a0+dd91d57           \n[conda] torch                     0.4.0a0+4a9e02f           \n[conda] torch                     0.4.0a0+460e8cd           \n[conda] torch                     0.4.0a0+4dd29ac           \n[conda] torchvision               0.2.0", "body": "## Issue description\r\n\r\nIn principle, to my understanding, checkpoint(function, *args) should behave exactly the same during forwarding as function(*args).\r\n\r\nHowever, now, if the all the inputs have requires_grad to be False, the output will also checkpoint(...) will also have requires_grad to be False. While function may involve other trainable parameters, function(*args) will have requires_grad True output even all the inputs are requires_grad False.\r\n\r\nshould be fixed if replacing the no_grad with `detach_variable(run_function(*args))` (although detach_variable doesn't accept non tuple right now)\r\n\r\n## Code example\r\n\r\n```\r\nimport torch\r\nfrom torch.utils.checkpoint import checkpoint\r\n\r\nm = torch.nn.Linear(4,3)\r\nx = torch.randn(10,4)\r\n\r\nz1 = checkpoint(lambda _:m(_), x)\r\nprint(z1.requires_grad)\r\n\r\nz2 = m(x)\r\nprint(z2.requires_grad)\r\n```\r\n\r\n## System Info\r\n\r\nPyTorch version: 0.5.0a0+a61d4a3\r\nIs debug build: No\r\nCUDA used to build PyTorch: None\r\n\r\nOS: Mac OSX 10.13.1\r\nGCC version: Could not collect\r\nCMake version: version 3.9.4\r\n\r\nPython version: 2.7\r\nIs CUDA available: No\r\nCUDA runtime version: No CUDA\r\nGPU models and configuration: No CUDA\r\nNvidia driver version: No CUDA\r\ncuDNN version: No CUDA\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.2)\r\n[pip] torch (0.5.0a0+a61d4a3, /Users/ruotianluo/anaconda/lib/python2.7/site-packages)\r\n[pip] torchvision (0.2.0)\r\n[conda] torch                     0.5.0a0+242f6c3           <pip>\r\n[conda] torch                     0.5.0a0+a61d4a3           <pip>\r\n[conda] torch                     0.4.0a0+dd91d57           <pip>\r\n[conda] torch                     0.4.0a0+4a9e02f           <pip>\r\n[conda] torch                     0.4.0a0+460e8cd           <pip>\r\n[conda] torch                     0.4.0a0+4dd29ac           <pip>\r\n[conda] torchvision               0.2.0                     <pip>"}