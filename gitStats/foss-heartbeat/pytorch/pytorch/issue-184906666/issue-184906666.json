{"url": "https://api.github.com/repos/pytorch/pytorch/issues/162", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/162/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/162/events", "html_url": "https://github.com/pytorch/pytorch/pull/162", "id": 184906666, "node_id": "MDExOlB1bGxSZXF1ZXN0OTA2NTg2MDg=", "number": 162, "title": "Fix Lua->Python logic in legacy.optim", "user": {"login": "bamos", "id": 707462, "node_id": "MDQ6VXNlcjcwNzQ2Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/707462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bamos", "html_url": "https://github.com/bamos", "followers_url": "https://api.github.com/users/bamos/followers", "following_url": "https://api.github.com/users/bamos/following{/other_user}", "gists_url": "https://api.github.com/users/bamos/gists{/gist_id}", "starred_url": "https://api.github.com/users/bamos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bamos/subscriptions", "organizations_url": "https://api.github.com/users/bamos/orgs", "repos_url": "https://api.github.com/users/bamos/repos", "events_url": "https://api.github.com/users/bamos/events{/privacy}", "received_events_url": "https://api.github.com/users/bamos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-24T17:38:50Z", "updated_at": "2016-10-24T18:04:37Z", "closed_at": "2016-10-24T18:04:23Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/162", "html_url": "https://github.com/pytorch/pytorch/pull/162", "diff_url": "https://github.com/pytorch/pytorch/pull/162.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/162.patch"}, "body_html": "<p>Hi, I've started using ADAM from <code>legacy.optim</code> since it's not yet implemented in <code>optim</code>. I noticed and fixed a problem with the Lua-&gt;Python logic here that might be present in other places too. The problem is that <code>{}</code> is considered falsey in Python so if <code>state={}</code> and <code>config</code> is not empty then <code>state or config</code> will evaluate to <code>config</code>.</p>", "body_text": "Hi, I've started using ADAM from legacy.optim since it's not yet implemented in optim. I noticed and fixed a problem with the Lua->Python logic here that might be present in other places too. The problem is that {} is considered falsey in Python so if state={} and config is not empty then state or config will evaluate to config.", "body": "Hi, I've started using ADAM from `legacy.optim` since it's not yet implemented in `optim`. I noticed and fixed a problem with the Lua->Python logic here that might be present in other places too. The problem is that `{}` is considered falsey in Python so if `state={}` and `config` is not empty then `state or config` will evaluate to `config`.\n"}