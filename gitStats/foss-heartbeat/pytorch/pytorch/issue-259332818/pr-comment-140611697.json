{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140611697", "pull_request_review_id": 64716587, "id": 140611697, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDYxMTY5Nw==", "diff_hunk": "@@ -30,9 +30,10 @@ def backward(self, reward):\n         output_probs = probs.gather(1, samples)\n         output_probs.add_(1e-6).reciprocal_()\n         output_probs.neg_().mul_(reward)\n-        # TODO: add batched index_add\n-        for i in range(probs.size(0)):\n-            grad_probs[i].index_add_(0, samples[i], output_probs[i])\n+        # Fill in gradients\n+        idx = grad_probs.new().resize_(grad_probs.size(0)).fill_(1)", "path": "torch/autograd/_functions/stochastic.py", "position": null, "original_position": 8, "commit_id": "e350cd383c1223e9f915b4995d415adc39fea020", "original_commit_id": "695c36fc83aba6500bd350ad55ee7ac135d77ae6", "user": {"login": "zuoxingdong", "id": 18168681, "node_id": "MDQ6VXNlcjE4MTY4Njgx", "avatar_url": "https://avatars0.githubusercontent.com/u/18168681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zuoxingdong", "html_url": "https://github.com/zuoxingdong", "followers_url": "https://api.github.com/users/zuoxingdong/followers", "following_url": "https://api.github.com/users/zuoxingdong/following{/other_user}", "gists_url": "https://api.github.com/users/zuoxingdong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zuoxingdong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zuoxingdong/subscriptions", "organizations_url": "https://api.github.com/users/zuoxingdong/orgs", "repos_url": "https://api.github.com/users/zuoxingdong/repos", "events_url": "https://api.github.com/users/zuoxingdong/events{/privacy}", "received_events_url": "https://api.github.com/users/zuoxingdong/received_events", "type": "User", "site_admin": false}, "body": "@soumith I tried to work around, but it seems the best solution is still to wait `.index_add` support tensor arguments (also with `.select`, `.index_select` etc). That might both vectorize and keep the code simple. What do you think ?", "created_at": "2017-09-22T22:52:40Z", "updated_at": "2018-11-23T15:34:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/2814#discussion_r140611697", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/2814", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/140611697"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/2814#discussion_r140611697"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/2814"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> I tried to work around, but it seems the best solution is still to wait <code>.index_add</code> support tensor arguments (also with <code>.select</code>, <code>.index_select</code> etc). That might both vectorize and keep the code simple. What do you think ?</p>", "body_text": "@soumith I tried to work around, but it seems the best solution is still to wait .index_add support tensor arguments (also with .select, .index_select etc). That might both vectorize and keep the code simple. What do you think ?", "in_reply_to_id": 140538337}