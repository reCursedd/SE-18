{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/413286434", "html_url": "https://github.com/pytorch/pytorch/pull/2814#issuecomment-413286434", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2814", "id": 413286434, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzI4NjQzNA==", "user": {"login": "soumith", "id": 1310570, "node_id": "MDQ6VXNlcjEzMTA1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1310570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soumith", "html_url": "https://github.com/soumith", "followers_url": "https://api.github.com/users/soumith/followers", "following_url": "https://api.github.com/users/soumith/following{/other_user}", "gists_url": "https://api.github.com/users/soumith/gists{/gist_id}", "starred_url": "https://api.github.com/users/soumith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soumith/subscriptions", "organizations_url": "https://api.github.com/users/soumith/orgs", "repos_url": "https://api.github.com/users/soumith/repos", "events_url": "https://api.github.com/users/soumith/events{/privacy}", "received_events_url": "https://api.github.com/users/soumith/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-15T18:13:43Z", "updated_at": "2018-08-15T18:13:43Z", "author_association": "MEMBER", "body_html": "<p>this is no longer necessary. See <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/27455e9c788a1e95411cd7e0fcbabf6f866ded42/torch/distributions/multinomial.py#L79-L99\">pytorch/torch/distributions/multinomial.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 79 to 99\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/27455e9c788a1e95411cd7e0fcbabf6f866ded42\">27455e9</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L79\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"79\"></td>\n          <td id=\"LC79\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">sample</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">sample_shape</span><span class=\"pl-k\">=</span>torch.Size()): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L80\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"80\"></td>\n          <td id=\"LC80\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     sample_shape <span class=\"pl-k\">=</span> torch.Size(sample_shape) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L81\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"81\"></td>\n          <td id=\"LC81\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     samples <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._categorical.sample(torch.Size((<span class=\"pl-c1\">self</span>.total_count,)) <span class=\"pl-k\">+</span> sample_shape) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L82\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"82\"></td>\n          <td id=\"LC82\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> samples.shape is (total_count, sample_shape, batch_shape), need to change it to</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L83\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"83\"></td>\n          <td id=\"LC83\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> (sample_shape, batch_shape, total_count)</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L84\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"84\"></td>\n          <td id=\"LC84\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     shifted_idx <span class=\"pl-k\">=</span> <span class=\"pl-c1\">list</span>(<span class=\"pl-c1\">range</span>(samples.dim())) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L85\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"85\"></td>\n          <td id=\"LC85\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     shifted_idx.append(shifted_idx.pop(<span class=\"pl-c1\">0</span>)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L86\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"86\"></td>\n          <td id=\"LC86\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     samples <span class=\"pl-k\">=</span> samples.permute(<span class=\"pl-k\">*</span>shifted_idx) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L87\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"87\"></td>\n          <td id=\"LC87\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     counts <span class=\"pl-k\">=</span> samples.new(<span class=\"pl-c1\">self</span>._extended_shape(sample_shape)).zero_() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L88\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"88\"></td>\n          <td id=\"LC88\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     counts.scatter_add_(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, samples, torch.ones_like(samples)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L89\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"89\"></td>\n          <td id=\"LC89\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> counts.type_as(<span class=\"pl-c1\">self</span>.probs) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L90\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"90\"></td>\n          <td id=\"LC90\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L91\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"91\"></td>\n          <td id=\"LC91\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">log_prob</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">value</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L92\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"92\"></td>\n          <td id=\"LC92\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>._validate_args: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L93\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"93\"></td>\n          <td id=\"LC93\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c1\">self</span>._validate_sample(value) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L94\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"94\"></td>\n          <td id=\"LC94\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     logits, value <span class=\"pl-k\">=</span> broadcast_all(<span class=\"pl-c1\">self</span>.logits.clone(), value) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L95\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"95\"></td>\n          <td id=\"LC95\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     log_factorial_n <span class=\"pl-k\">=</span> torch.lgamma(value.sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L96\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"96\"></td>\n          <td id=\"LC96\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     log_factorial_xs <span class=\"pl-k\">=</span> torch.lgamma(value <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>).sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L97\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"97\"></td>\n          <td id=\"LC97\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     logits[(value <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>) <span class=\"pl-k\">&amp;</span> (logits <span class=\"pl-k\">==</span> <span class=\"pl-k\">-</span>inf)] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L98\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"98\"></td>\n          <td id=\"LC98\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     log_powers <span class=\"pl-k\">=</span> (logits <span class=\"pl-k\">*</span> value).sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L99\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"99\"></td>\n          <td id=\"LC99\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> log_factorial_n <span class=\"pl-k\">-</span> log_factorial_xs <span class=\"pl-k\">+</span> log_powers </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "this is no longer necessary. See \n  \n    \n      pytorch/torch/distributions/multinomial.py\n    \n    \n        Lines 79 to 99\n      in\n      27455e9\n    \n    \n    \n    \n\n        \n          \n           def sample(self, sample_shape=torch.Size()): \n        \n\n        \n          \n               sample_shape = torch.Size(sample_shape) \n        \n\n        \n          \n               samples = self._categorical.sample(torch.Size((self.total_count,)) + sample_shape) \n        \n\n        \n          \n               # samples.shape is (total_count, sample_shape, batch_shape), need to change it to \n        \n\n        \n          \n               # (sample_shape, batch_shape, total_count) \n        \n\n        \n          \n               shifted_idx = list(range(samples.dim())) \n        \n\n        \n          \n               shifted_idx.append(shifted_idx.pop(0)) \n        \n\n        \n          \n               samples = samples.permute(*shifted_idx) \n        \n\n        \n          \n               counts = samples.new(self._extended_shape(sample_shape)).zero_() \n        \n\n        \n          \n               counts.scatter_add_(-1, samples, torch.ones_like(samples)) \n        \n\n        \n          \n               return counts.type_as(self.probs) \n        \n\n        \n          \n            \n        \n\n        \n          \n           def log_prob(self, value): \n        \n\n        \n          \n               if self._validate_args: \n        \n\n        \n          \n                   self._validate_sample(value) \n        \n\n        \n          \n               logits, value = broadcast_all(self.logits.clone(), value) \n        \n\n        \n          \n               log_factorial_n = torch.lgamma(value.sum(-1) + 1) \n        \n\n        \n          \n               log_factorial_xs = torch.lgamma(value + 1).sum(-1) \n        \n\n        \n          \n               logits[(value == 0) & (logits == -inf)] = 0 \n        \n\n        \n          \n               log_powers = (logits * value).sum(-1) \n        \n\n        \n          \n               return log_factorial_n - log_factorial_xs + log_powers", "body": "this is no longer necessary. See https://github.com/pytorch/pytorch/blob/27455e9c788a1e95411cd7e0fcbabf6f866ded42/torch/distributions/multinomial.py#L79-L99"}