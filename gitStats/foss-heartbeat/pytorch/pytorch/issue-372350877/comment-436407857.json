{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/436407857", "html_url": "https://github.com/pytorch/pytorch/pull/12917#issuecomment-436407857", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12917", "id": 436407857, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQwNzg1Nw==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-06T21:04:21Z", "updated_at": "2018-11-06T21:04:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> Sure.</p>\n<ol>\n<li>\n<p>Disabling JIT is helpful for debugging. Being able to query if JIT is disabled or not further helps debugging.</p>\n</li>\n<li>\n<p>Not everything is the same with JIT disabled/enabled. E.g.,</p>\n<ol>\n<li>\n<p>Not everything is supported in scripting.</p>\n</li>\n<li>\n<p>For traced functions, being traced when JIT is disabled or enabled causes semantics differences. E.g., <code>traced_net = trace(net.eval(), inp)</code> always gives the eval graph when JIT is enabled, but depends on <code>net</code>'s training mode otherwise.</p>\n</li>\n</ol>\n<p>So I have different codepath depending on JIT is enabled or not. Therefore, I also want to be able to log whether JIT is enabled.</p>\n</li>\n</ol>", "body_text": "@apaszke Sure.\n\n\nDisabling JIT is helpful for debugging. Being able to query if JIT is disabled or not further helps debugging.\n\n\nNot everything is the same with JIT disabled/enabled. E.g.,\n\n\nNot everything is supported in scripting.\n\n\nFor traced functions, being traced when JIT is disabled or enabled causes semantics differences. E.g., traced_net = trace(net.eval(), inp) always gives the eval graph when JIT is enabled, but depends on net's training mode otherwise.\n\n\nSo I have different codepath depending on JIT is enabled or not. Therefore, I also want to be able to log whether JIT is enabled.", "body": "@apaszke Sure.\r\n\r\n1. Disabling JIT is helpful for debugging. Being able to query if JIT is disabled or not further helps debugging.\r\n2. Not everything is the same with JIT disabled/enabled. E.g., \r\n\r\n    1.  Not everything is supported in scripting.\r\n\r\n    2. For traced functions, being traced when JIT is disabled or enabled causes semantics differences. E.g., `traced_net = trace(net.eval(), inp)` always gives the eval graph when JIT is enabled, but depends on `net`'s training mode otherwise.\r\n\r\n    So I have different codepath depending on JIT is enabled or not. Therefore, I also want to be able to log whether JIT is enabled."}