{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/436433086", "html_url": "https://github.com/pytorch/pytorch/pull/12917#issuecomment-436433086", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/12917", "id": 436433086, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQzMzA4Ng==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-06T22:30:32Z", "updated_at": "2018-11-07T06:10:17Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>would you really want to write a completely separate implementation of a function just because you might be disabling the JIT?</p>\n</blockquote>\n<p>Why not give people the option to query the flag? It is so simple a change, and very reasonable too. Have you considered my points other than scripting?</p>\n<p>And yes, in my first experience with JIT, I have two places that breaks when <code>PYTORCH_JIT=0</code>. One is because of the tracing behavior I described, and another is due to infinite recursion since the same function is returned at tracing. E.g.,</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">traced</span>(<span class=\"pl-smi\">x</span>):\n  <span class=\"pl-k\">return</span> obj.meth(x)\n\nobj.meth <span class=\"pl-k\">=</span> types.MethodType(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">self</span>, <span class=\"pl-smi\">x</span>: torch.jit.trace(traced, x), obj)</pre></div>\n<p>edit: yes in this example I could just trace <code>obj.meth</code> instead. However, (1) this is still a semantic difference when JIT is enabled or not, and (2) in the real code, I traced something like this</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">get_forward_in_mode</span>(<span class=\"pl-smi\">mode</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>(<span class=\"pl-smi\">x</span>):\n    net.training(mode)\n    <span class=\"pl-k\">return</span> net(x)\n  <span class=\"pl-k\">return</span> f\n\ntraced_train <span class=\"pl-k\">=</span> torch.jit.trace(get_forward_in_mode(<span class=\"pl-c1\">True</span>), x)\ntraced_eval <span class=\"pl-k\">=</span> torch.jit.trace(get_forward_in_mode(<span class=\"pl-c1\">False</span>), x)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">traced_forward</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">x</span>):\n  <span class=\"pl-k\">return</span> traced_train(x) <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.training <span class=\"pl-k\">else</span> traced_eval(x)\n\nnet.forward <span class=\"pl-k\">=</span> types.MethodType(traced_forward, net)</pre></div>", "body_text": "would you really want to write a completely separate implementation of a function just because you might be disabling the JIT?\n\nWhy not give people the option to query the flag? It is so simple a change, and very reasonable too. Have you considered my points other than scripting?\nAnd yes, in my first experience with JIT, I have two places that breaks when PYTORCH_JIT=0. One is because of the tracing behavior I described, and another is due to infinite recursion since the same function is returned at tracing. E.g.,\ndef traced(x):\n  return obj.meth(x)\n\nobj.meth = types.MethodType(lambda self, x: torch.jit.trace(traced, x), obj)\nedit: yes in this example I could just trace obj.meth instead. However, (1) this is still a semantic difference when JIT is enabled or not, and (2) in the real code, I traced something like this\ndef get_forward_in_mode(mode):\n  def f(x):\n    net.training(mode)\n    return net(x)\n  return f\n\ntraced_train = torch.jit.trace(get_forward_in_mode(True), x)\ntraced_eval = torch.jit.trace(get_forward_in_mode(False), x)\n\ndef traced_forward(self, x):\n  return traced_train(x) if self.training else traced_eval(x)\n\nnet.forward = types.MethodType(traced_forward, net)", "body": "> would you really want to write a completely separate implementation of a function just because you might be disabling the JIT?\r\n\r\nWhy not give people the option to query the flag? It is so simple a change, and very reasonable too. Have you considered my points other than scripting?\r\n\r\nAnd yes, in my first experience with JIT, I have two places that breaks when `PYTORCH_JIT=0`. One is because of the tracing behavior I described, and another is due to infinite recursion since the same function is returned at tracing. E.g., \r\n```py\r\ndef traced(x):\r\n  return obj.meth(x)\r\n\r\nobj.meth = types.MethodType(lambda self, x: torch.jit.trace(traced, x), obj)\r\n```\r\n\r\nedit: yes in this example I could just trace `obj.meth` instead. However, (1) this is still a semantic difference when JIT is enabled or not, and (2) in the real code, I traced something like this\r\n```py\r\ndef get_forward_in_mode(mode):\r\n  def f(x):\r\n    net.training(mode)\r\n    return net(x)\r\n  return f\r\n\r\ntraced_train = torch.jit.trace(get_forward_in_mode(True), x)\r\ntraced_eval = torch.jit.trace(get_forward_in_mode(False), x)\r\n\r\ndef traced_forward(self, x):\r\n  return traced_train(x) if self.training else traced_eval(x)\r\n\r\nnet.forward = types.MethodType(traced_forward, net)\r\n```\r\n"}