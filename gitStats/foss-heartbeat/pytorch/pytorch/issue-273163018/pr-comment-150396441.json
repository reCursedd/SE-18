{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150396441", "pull_request_review_id": 75945057, "id": 150396441, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MDM5NjQ0MQ==", "diff_hunk": "@@ -0,0 +1,131 @@\n+#pragma once\n+\n+#include <functional>\n+#include <ATen/ATen.h>\n+\n+namespace torch {\n+\n+// NOTE: hash_combine is based on implementation from Boost\n+//\n+// Boost Software License - Version 1.0 - August 17th, 2003\n+//\n+// Permission is hereby granted, free of charge, to any person or organization\n+// obtaining a copy of the software and accompanying documentation covered by\n+// this license (the \"Software\") to use, reproduce, display, distribute,\n+// execute, and transmit the Software, and to prepare derivative works of the\n+// Software, and to permit third-parties to whom the Software is furnished to\n+// do so, all subject to the following:\n+//\n+// The copyright notices in the Software and this entire statement, including\n+// the above license grant, this restriction and the following disclaimer,\n+// must be included in all copies of the Software, in whole or in part, and\n+// all derivative works of the Software, unless such copies or derivative\n+// works are solely in the form of machine-executable object code generated by\n+// a source language processor.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+// DEALINGS IN THE SOFTWARE.\n+\n+inline std::size_t hash_combine(std::size_t seed, std::size_t value) {\n+  return seed ^ (value + 0x9e3779b9 + (seed << 6) + (seed >> 2));\n+}\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// torch::hash implementation\n+////////////////////////////////////////////////////////////////////////////////\n+\n+namespace _hash_detail {\n+\n+// Use template argument deduction to shorten calls to torch::hash\n+template<typename T>\n+std::size_t simple_get_hash(const T& o);\n+\n+// Use SFINAE to dispatch to std::hash if possible, cast enum types to int automatically,\n+// and fall back to T::hash otherwise.\n+template<typename T>\n+auto dispatch_hash(const T& o) -> decltype(std::hash<T>()(o), std::size_t()) {\n+  return std::hash<T>()(o);\n+}\n+\n+template<typename T>\n+auto dispatch_hash(const T& o) -> decltype((typename std::enable_if<std::is_enum<T>::value, std::size_t>::type){}) {\n+  return std::hash<int>()(static_cast<int>(o));\n+}\n+\n+template<typename T>\n+auto dispatch_hash(const T& o) -> decltype(T::hash(o), std::size_t()) {\n+  return T::hash(o);\n+}\n+\n+} // namespace _hash_detail\n+\n+// Hasher struct\n+template<typename T>\n+struct hash {\n+  std::size_t operator()(const T& o) const {\n+    return _hash_detail::dispatch_hash(o);\n+  };\n+};\n+\n+// Specialization for std::tuple\n+template<typename... Types>\n+struct hash<std::tuple<Types...>> {\n+  template<std::size_t idx, typename... Ts>\n+  struct tuple_hash {\n+    std::size_t operator()(const std::tuple<Ts...>& t) const {\n+      return hash_combine(_hash_detail::simple_get_hash(std::get<idx>(t)),\n+\t\t\t\t\t\t\t\t\t\t\t\t  tuple_hash<idx-1, Ts...>()(t));", "path": "torch/csrc/utils/hash.h", "position": null, "original_position": 82, "commit_id": "0400b77bc8965a93a4fd4c832d5493c9d31b5e90", "original_commit_id": "54f7d654123269a62573e2ebf2b21d2e02c5e783", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Thanks! I fixed it", "created_at": "2017-11-11T23:45:14Z", "updated_at": "2018-11-23T15:36:24Z", "html_url": "https://github.com/pytorch/pytorch/pull/3645#discussion_r150396441", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3645", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/150396441"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3645#discussion_r150396441"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3645"}}, "body_html": "<p>Thanks! I fixed it</p>", "body_text": "Thanks! I fixed it", "in_reply_to_id": 150390495}