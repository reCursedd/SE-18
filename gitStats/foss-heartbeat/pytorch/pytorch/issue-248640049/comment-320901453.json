{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/320901453", "html_url": "https://github.com/pytorch/pytorch/issues/2331#issuecomment-320901453", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2331", "id": 320901453, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDkwMTQ1Mw==", "user": {"login": "cdluminate", "id": 5723047, "node_id": "MDQ6VXNlcjU3MjMwNDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5723047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdluminate", "html_url": "https://github.com/cdluminate", "followers_url": "https://api.github.com/users/cdluminate/followers", "following_url": "https://api.github.com/users/cdluminate/following{/other_user}", "gists_url": "https://api.github.com/users/cdluminate/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdluminate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdluminate/subscriptions", "organizations_url": "https://api.github.com/users/cdluminate/orgs", "repos_url": "https://api.github.com/users/cdluminate/repos", "events_url": "https://api.github.com/users/cdluminate/events{/privacy}", "received_events_url": "https://api.github.com/users/cdluminate/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-08T09:23:44Z", "updated_at": "2017-08-08T09:26:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p>A typical CNN has a static computation graph and a fixed input size requirement. Such that the samples in a batch could be processed by every operator (e.g. conv2) simultaneously to speed up forward/backward pass.</p>\n<p>Tree-LSTM will never have a static computation graph. Different sentences have different syntax trees -- they differ in both span and depth. Each sample must be forwarded and backwarded along to its tree individually. This makes acceleration difficult. In my fuzzy memory there is a paper in ICLR2017 which discusses about generating a tree from a embedding. That paper also declares that acceleration for such tree-structured algorithm is hard.</p>\n<p>One idea is to process the samples in a batch with several parallel threads. I didn't investigate or try this, and I'm not sure whether pytorch supports safely sharing a module to several threads.</p>", "body_text": "A typical CNN has a static computation graph and a fixed input size requirement. Such that the samples in a batch could be processed by every operator (e.g. conv2) simultaneously to speed up forward/backward pass.\nTree-LSTM will never have a static computation graph. Different sentences have different syntax trees -- they differ in both span and depth. Each sample must be forwarded and backwarded along to its tree individually. This makes acceleration difficult. In my fuzzy memory there is a paper in ICLR2017 which discusses about generating a tree from a embedding. That paper also declares that acceleration for such tree-structured algorithm is hard.\nOne idea is to process the samples in a batch with several parallel threads. I didn't investigate or try this, and I'm not sure whether pytorch supports safely sharing a module to several threads.", "body": "A typical CNN has a static computation graph and a fixed input size requirement. Such that the samples in a batch could be processed by every operator (e.g. conv2) simultaneously to speed up forward/backward pass.\r\n\r\nTree-LSTM will never have a static computation graph. Different sentences have different syntax trees -- they differ in both span and depth. Each sample must be forwarded and backwarded along to its tree individually. This makes acceleration difficult. In my fuzzy memory there is a paper in ICLR2017 which discusses about generating a tree from a embedding. That paper also declares that acceleration for such tree-structured algorithm is hard.\r\n\r\nOne idea is to process the samples in a batch with several parallel threads. I didn't investigate or try this, and I'm not sure whether pytorch supports safely sharing a module to several threads."}