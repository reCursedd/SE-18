{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3813", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3813/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3813/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3813/events", "html_url": "https://github.com/pytorch/pytorch/issues/3813", "id": 275791032, "node_id": "MDU6SXNzdWUyNzU3OTEwMzI=", "number": 3813, "title": "Implement random_gamma() sampler (with gradients)", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-21T17:08:15Z", "updated_at": "2017-12-11T11:32:16Z", "closed_at": "2017-12-11T11:32:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Many probability distributions require sampling from the <a href=\"https://en.wikipedia.org/wiki/Gamma_distribution\" rel=\"nofollow\">Gamma distribution</a>, including: <code>Gamma</code>, <code>Beta</code>, and <code>Dirichlet</code>.</p>\n<p>Since Gamma samplers have complex control flow (for rejection sampling) and are seldom a bottleneck in probabilistic algorithms, it should suffice to implement a CPU-only implementation at first. What is more important than a CUDA implementation is a reparameterized sampler so that stochastic gradients can be propagated through the sampler (see <a href=\"http://proceedings.mlr.press/v54/naesseth17a/naesseth17a.pdf\" rel=\"nofollow\">paper</a> and <a href=\"https://github.com/blei-lab/ars-reparameterization\">reference implementation</a> by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7195403\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/naesseth\">@naesseth</a>).</p>\n<h2>Tasks</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"276186235\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3841\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/3841/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/3841\">#3841</a> CPU implementation of basic <code>random_gamma(requires_grad=False)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"278639115\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/3978\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/3978/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/3978\">#3978</a> Support reparameterized <code>random_gamma(requires_grad=True)</code></li>\n</ul>\n<h2>Map of modifications</h2>\n<ul>\n<li><code>aten/src/TH/THRandom.c/h</code> random single numbers</li>\n<li><code>aten/src/TH/generic/THTensorRandom.c/h</code> random tensors</li>\n<li><code>aten/src/ATen/Declarations.cwrap</code> bindings for ATen</li>\n<li><code>torch/csrc/generic/methods/TensorRandom.cwrap</code> bindings for torch.Tensor</li>\n<li><code>torch/autograd/variable.py</code> - Variable</li>\n<li><code>torch/distributions.py</code> - Distributions</li>\n</ul>", "body_text": "Many probability distributions require sampling from the Gamma distribution, including: Gamma, Beta, and Dirichlet.\nSince Gamma samplers have complex control flow (for rejection sampling) and are seldom a bottleneck in probabilistic algorithms, it should suffice to implement a CPU-only implementation at first. What is more important than a CUDA implementation is a reparameterized sampler so that stochastic gradients can be propagated through the sampler (see paper and reference implementation by @naesseth).\nTasks\n\n #3841 CPU implementation of basic random_gamma(requires_grad=False)\n #3978 Support reparameterized random_gamma(requires_grad=True)\n\nMap of modifications\n\naten/src/TH/THRandom.c/h random single numbers\naten/src/TH/generic/THTensorRandom.c/h random tensors\naten/src/ATen/Declarations.cwrap bindings for ATen\ntorch/csrc/generic/methods/TensorRandom.cwrap bindings for torch.Tensor\ntorch/autograd/variable.py - Variable\ntorch/distributions.py - Distributions", "body": "Many probability distributions require sampling from the [Gamma distribution](https://en.wikipedia.org/wiki/Gamma_distribution), including: `Gamma`, `Beta`, and `Dirichlet`.\r\n\r\nSince Gamma samplers have complex control flow (for rejection sampling) and are seldom a bottleneck in probabilistic algorithms, it should suffice to implement a CPU-only implementation at first. What is more important than a CUDA implementation is a reparameterized sampler so that stochastic gradients can be propagated through the sampler (see [paper](http://proceedings.mlr.press/v54/naesseth17a/naesseth17a.pdf) and [reference implementation](https://github.com/blei-lab/ars-reparameterization) by @naesseth).\r\n\r\n## Tasks\r\n- [x] #3841 CPU implementation of basic `random_gamma(requires_grad=False)`\r\n- [ ] #3978 Support reparameterized `random_gamma(requires_grad=True)`\r\n\r\n## Map of modifications\r\n- `aten/src/TH/THRandom.c/h` random single numbers\r\n- `aten/src/TH/generic/THTensorRandom.c/h` random tensors\r\n- `aten/src/ATen/Declarations.cwrap` bindings for ATen\r\n- `torch/csrc/generic/methods/TensorRandom.cwrap` bindings for torch.Tensor\r\n- `torch/autograd/variable.py` - Variable\r\n- `torch/distributions.py` - Distributions"}