{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109655343", "pull_request_review_id": 30770230, "id": 109655343, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTY1NTM0Mw==", "diff_hunk": "@@ -0,0 +1,45 @@\n+from . import CWrapPlugin\n+from string import Template\n+\n+\n+class WrapDim(CWrapPlugin):\n+\n+    DIM_WRAP_NDIM_TEMPLATE = Template(\n+        \"\"\"${arg_tensor}->nDimension\"\"\")\n+\n+    DIM_WRAP_CHECK_TEMPLATE = Template(\n+        \"\"\"THPUtils_assert(${arg_to_wrap} >= -(${ndim}) && ${arg_to_wrap} < (${ndim}),\n+         \"dimension out of range (expected to be in range of [%d, %d], but got %d)\",\n+         -(${ndim}), (${ndim})-1, ${arg_to_wrap})\"\"\")\n+\n+    DIM_WRAP_CODE_TEMPLATE = Template(\n+        \"\"\"if (${arg_to_wrap} < 0) ${arg_to_wrap} += (${ndim});\"\"\")\n+\n+    def initialize(self, cwrap):\n+        self.cwrap = cwrap\n+\n+    def process_option_code_template(self, template, option):\n+        new_code = []\n+        for i, arg in enumerate(option['arguments']):\n+            if 'wrap_dim' not in arg:\n+                continue\n+\n+            params = arg.get('wrap_dim').split(\"+\")\n+            arg_tensor = params[0]\n+\n+            arg_tensor = \"arg_\" + arg_tensor\n+            arg_to_wrap = \"arg_\" + arg.get('assign_name', arg['name'])", "path": "tools/cwrap/plugins/WrapDim.py", "position": null, "original_position": 31, "commit_id": "37d95687c47beab841cd67003de3390414db0dca", "original_commit_id": "f6a50c2a5406a6acb1c06d1679edff3caf6de494", "user": {"login": "albanD", "id": 6359743, "node_id": "MDQ6VXNlcjYzNTk3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6359743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanD", "html_url": "https://github.com/albanD", "followers_url": "https://api.github.com/users/albanD/followers", "following_url": "https://api.github.com/users/albanD/following{/other_user}", "gists_url": "https://api.github.com/users/albanD/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanD/subscriptions", "organizations_url": "https://api.github.com/users/albanD/orgs", "repos_url": "https://api.github.com/users/albanD/repos", "events_url": "https://api.github.com/users/albanD/events{/privacy}", "received_events_url": "https://api.github.com/users/albanD/received_events", "type": "User", "site_admin": false}, "body": "Right now yes because we only use `assign_name` for stateless implementation (excluding genericNN that works completely differently).\r\nBut if some other plugin start to use `assign_name`, this code would break, so I think its better to keep it like that.", "created_at": "2017-04-04T13:02:50Z", "updated_at": "2018-11-23T15:32:59Z", "html_url": "https://github.com/pytorch/pytorch/pull/1108#discussion_r109655343", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1108", "author_association": "COLLABORATOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109655343"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1108#discussion_r109655343"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1108"}}, "body_html": "<p>Right now yes because we only use <code>assign_name</code> for stateless implementation (excluding genericNN that works completely differently).<br>\nBut if some other plugin start to use <code>assign_name</code>, this code would break, so I think its better to keep it like that.</p>", "body_text": "Right now yes because we only use assign_name for stateless implementation (excluding genericNN that works completely differently).\nBut if some other plugin start to use assign_name, this code would break, so I think its better to keep it like that.", "in_reply_to_id": 109315570}