{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109315199", "pull_request_review_id": 30386289, "id": 109315199, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMxNTE5OQ==", "diff_hunk": "@@ -1285,42 +1307,53 @@ def do_test(self, cls=cls, constructor_args=constructor_args,\n }\n for test in method_tests:\n     name, self_size, args = test[:3]\n-    test_name = 'test_' + name + ('_' + test[3] if len(test) == 4 else '')\n-\n-    def do_test(self, name=name, self_size=self_size, args=args, test_name=test_name):\n-        def check(name):\n-            self_variable = create_input((self_size,), requires_grad=False)[0]\n-            args_variable = create_input(args, requires_grad=False)\n-            self_tensor = deepcopy(self_variable.data)\n-            args_tensor = deepcopy(unpack_variables(args_variable))\n-            output_variable = getattr(self_variable, name)(*args_variable)\n-            output_tensor = getattr(self_tensor, name)(*args_tensor)\n-            if not torch.is_tensor(output_tensor) and not isinstance(output_tensor, tuple):\n-                output_tensor = torch.DoubleTensor((output_tensor,))\n-            self.assertEqual(unpack_variables(output_variable), output_tensor)\n-            # TODO: check that both have changed after adding all inplace ops\n-\n-            # functional interface tests\n-            if hasattr(torch, name) and name not in EXCLUDE_FUNCTIONAL:\n-                f_args_variable = (self_variable,) + args_variable\n-                f_args_tensor = (self_tensor,) + args_tensor\n-                output_variable = getattr(torch, name)(*f_args_variable)\n-                output_tensor = getattr(torch, name)(*f_args_tensor)\n+    basic_test_name = 'test_' + name + ('_' + test[3] if len(test) >= 4 else '')\n+\n+    dim_args_idx = test[4] if len(test) == 5 else []\n+\n+    for dim_perm in product([-1, 1], repeat=len(dim_args_idx)):\n+        test_name = basic_test_name\n+        new_args = list(args)\n+        for i, arg_idx in enumerate(dim_args_idx):\n+            new_args[arg_idx] *= dim_perm[i]\n+            if dim_perm[i] == -1:\n+                test_name += \"_negdimarg\" + str(arg_idx)\n+        new_args = tuple(new_args)", "path": "test/test_autograd.py", "position": null, "original_position": 324, "commit_id": "37d95687c47beab841cd67003de3390414db0dca", "original_commit_id": "f6a50c2a5406a6acb1c06d1679edff3caf6de494", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "as above", "created_at": "2017-04-02T17:55:35Z", "updated_at": "2018-11-23T15:32:57Z", "html_url": "https://github.com/pytorch/pytorch/pull/1108#discussion_r109315199", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/1108", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/109315199"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/1108#discussion_r109315199"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/1108"}}, "body_html": "<p>as above</p>", "body_text": "as above"}