{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183469881", "pull_request_review_id": 114473988, "id": 183469881, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzQ2OTg4MQ==", "diff_hunk": "@@ -458,10 +458,26 @@ class BCEWithLogitsLoss(_Loss):\n     an auto-encoder. Note that the targets `t[i]` should be numbers\n     between 0 and 1.\n \n+    It's possible to trade off recall and precision by adding weights to positive examples.\n+    In this case the loss can be described as:\n+    .. math::\n+        \\ell(x, y) = L = \\{l_1,\\dots,l_N\\}^\\top, \\quad\n+        l_n = - w_n \\left[ p_n t_n \\cdot \\log \\sigma(x_n)\n+        + (1 - t_n) \\cdot \\log (1 - \\sigma(x_n)) \\right],\n+\n+    where :math:`p_n` is the positive weight of class :math:`n`.\n+    :math:`p_n > 1` increases the recall, :math:`p_n < 1` increases the precision.\n+\n+    For example, if a dataset contains 100 positive and 300 negative examples of a single class,\n+    then `pos_weight` for the class should be equal to math:`\\frac{300}{100}=3`.\n+    The loss would act as if the dataset contains math:`3\\times 100=300` positive examples.\n+\n     Args:\n         weight (Tensor, optional): a manual rescaling weight given to the loss\n             of each batch element. If given, has to be a Tensor of size\n             \"nbatch\".\n+        pos_weight (Tensor, optional): a weight of positive examples.", "path": "torch/nn/modules/loss.py", "position": null, "original_position": 22, "commit_id": "c1022c31ef025ef405ce48ab31a2a25a87dd1794", "original_commit_id": "9b0bc98a90771044ef4a7823b395d821197a0dd9", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "Ditto here", "created_at": "2018-04-23T17:07:50Z", "updated_at": "2018-11-23T15:43:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/6856#discussion_r183469881", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6856", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/183469881"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6856#discussion_r183469881"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6856"}}, "body_html": "<p>Ditto here</p>", "body_text": "Ditto here"}