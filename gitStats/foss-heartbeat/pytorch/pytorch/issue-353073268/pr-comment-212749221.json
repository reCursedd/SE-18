{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212749221", "pull_request_review_id": 149453026, "id": 212749221, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjc0OTIyMQ==", "diff_hunk": "@@ -2299,6 +2299,30 @@ def pairwise_distance(x1, x2, p=2, eps=1e-6, keepdim=False):\n     return torch.pairwise_distance(x1, x2, p, eps, keepdim)\n \n \n+pdist = _add_docstr(torch.pdist, r\"\"\"\n+pdist(input, p=2) -> Tensor\n+\n+Computes the p-norm distance between every pair of row vectors in the input.\n+This is identical to the upper triangular portion, excluding the diagonal, of\n+`torch.norm(input[:, None] - input, dim=2, p=p)`. This function will be faster\n+if the rows are contiguous.\n+\n+If input has shape :math:`N \\times M` then the output will have shape\n+:math:`\\frac{1}{2} N (N - 1)`.", "path": "torch/nn/functional.py", "position": 13, "original_position": 13, "commit_id": "0d26aa6f1e62e3c44da085ecff3f94883cb56d21", "original_commit_id": "8b4dc3e6503967dd46a19bc63056311ada8a22e5", "user": {"login": "erikbrinkman", "id": 858926, "node_id": "MDQ6VXNlcjg1ODkyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/858926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikbrinkman", "html_url": "https://github.com/erikbrinkman", "followers_url": "https://api.github.com/users/erikbrinkman/followers", "following_url": "https://api.github.com/users/erikbrinkman/following{/other_user}", "gists_url": "https://api.github.com/users/erikbrinkman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikbrinkman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikbrinkman/subscriptions", "organizations_url": "https://api.github.com/users/erikbrinkman/orgs", "repos_url": "https://api.github.com/users/erikbrinkman/repos", "events_url": "https://api.github.com/users/erikbrinkman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikbrinkman/received_events", "type": "User", "site_admin": false}, "body": "I was generally confused when reading documentation. Is math or cs notation preferred? I.e. should I replace all shapes with tuples e.g. `(n * (n - 1) // 2,)`?", "created_at": "2018-08-24T20:39:45Z", "updated_at": "2018-11-23T15:50:00Z", "html_url": "https://github.com/pytorch/pytorch/pull/10782#discussion_r212749221", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10782", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212749221"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10782#discussion_r212749221"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10782"}}, "body_html": "<p>I was generally confused when reading documentation. Is math or cs notation preferred? I.e. should I replace all shapes with tuples e.g. <code>(n * (n - 1) // 2,)</code>?</p>", "body_text": "I was generally confused when reading documentation. Is math or cs notation preferred? I.e. should I replace all shapes with tuples e.g. (n * (n - 1) // 2,)?", "in_reply_to_id": 212701359}