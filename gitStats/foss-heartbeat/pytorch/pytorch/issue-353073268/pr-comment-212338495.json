{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212338495", "pull_request_review_id": 148948043, "id": 212338495, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjMzODQ5NQ==", "diff_hunk": "@@ -1043,6 +1043,56 @@ def test_pairwise_distance_empty(self):\n             self.assertEqual(torch.zeros(0, device=device), torch.pairwise_distance(x, y))\n             self.assertEqual(torch.zeros((0, 1), device=device), torch.pairwise_distance(x, y, keepdim=True))\n \n+    @skipIfRocm\n+    def test_pdist_empty(self):\n+        devices = ['cpu']\n+        for device in devices:\n+            shape = (0, 2)\n+            x = torch.randn(shape, device=device)\n+            self.assertEqual(torch.empty(0, device=device), torch.pdist(x))\n+\n+            shape = (1, 2)\n+            x = torch.randn(shape, device=device)\n+            self.assertEqual(torch.empty(0, device=device), torch.pdist(x))\n+\n+            shape = (3, 0)\n+            x = torch.randn(shape, device=device)\n+            self.assertEqual(torch.zeros(3, device=device), torch.pdist(x))\n+\n+    @skipIfRocm\n+    @unittest.skipIf(not TEST_NUMPY, \"Numpy not found\")\n+    def test_pdist_special(self):\n+        devices = ['cpu']\n+        for device in devices:\n+            for shape in [(4, 5), (3, 2), (2, 1)]:\n+                x = torch.randn(shape, device=device)\n+                actual = torch.pdist(x, p=np.inf)\n+                expected = torch.max(torch.abs(x[:, None] - x[None]), 2)[0][np.triu_indices(shape[0], k=1)]\n+                self.assertEqual(expected.shape, actual.shape)\n+                self.assertTrue(torch.allclose(expected, actual))\n+\n+                x = (torch.rand(shape, device=device) < .5).type(torch.float)\n+                actual = torch.pdist(x, p=0)\n+                expected = torch.sum(x[:, None] != x[None], 2)[np.triu_indices(shape[0], k=1)]\n+                self.assertEqual(expected, actual)\n+\n+    @skipIfRocm\n+    @unittest.skipIf(not TEST_SCIPY, \"Scipy not found\")\n+    def test_pdist_scipy(self):\n+        from scipy.spatial.distance import pdist\n+        devices = ['cpu']\n+        for device in devices:\n+            for shape in [(4, 5), (3, 2), (2, 1)]:\n+                for p in [1, 2, 3, 1.5, 2.5]:", "path": "test/test_torch.py", "position": null, "original_position": 44, "commit_id": "0d26aa6f1e62e3c44da085ecff3f94883cb56d21", "original_commit_id": "e909ffa248ae82915ab3ce7cff4efd1ca0b1662e", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "That's pretty strange on their side.  So, what do you think the correct thing to do here is?  Add your own check for 0 and inf that doesn't go through scipy (assuming that your implementation gives different results)? ", "created_at": "2018-08-23T14:47:28Z", "updated_at": "2018-11-23T15:49:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/10782#discussion_r212338495", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10782", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212338495"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10782#discussion_r212338495"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10782"}}, "body_html": "<p>That's pretty strange on their side.  So, what do you think the correct thing to do here is?  Add your own check for 0 and inf that doesn't go through scipy (assuming that your implementation gives different results)?</p>", "body_text": "That's pretty strange on their side.  So, what do you think the correct thing to do here is?  Add your own check for 0 and inf that doesn't go through scipy (assuming that your implementation gives different results)?", "in_reply_to_id": 212135077}