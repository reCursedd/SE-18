{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212128218", "pull_request_review_id": 148693792, "id": 212128218, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjEyODIxOA==", "diff_hunk": "@@ -4821,6 +4821,20 @@ def test_pairwise_distance(self):\n         input2 = torch.randn(4, 4, requires_grad=True)\n         self.assertTrue(gradcheck(lambda x, y: F.pairwise_distance(x, y), (input1, input2)))\n \n+    def test_pdist(self):\n+        for trans in [False, True]:\n+            inp = torch.randn(4, 5, requires_grad=True)\n+            if trans:\n+                inp = inp.transpose(0, 1)\n+            for p in [0, 1, 2, 0.5, 1.5, 2.5, float('inf')]:\n+                self.assertTrue(gradcheck(lambda x: F.pdist(x, p), (inp,)))\n+\n+    def test_pdist_zeros(self):\n+        for trans in [False, True]:\n+            inp = torch.randn(1, 3, requires_grad=True).repeat([2, 1])\n+            for p in [0, 1, 2, 0.5, 1.5, 2.5, float('inf')]:\n+                self.assertTrue(gradcheck(lambda x: F.pdist(x, p), (inp,)))", "path": "test/test_nn.py", "position": null, "original_position": 16, "commit_id": "0d26aa6f1e62e3c44da085ecff3f94883cb56d21", "original_commit_id": "e909ffa248ae82915ab3ce7cff4efd1ca0b1662e", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: In situations like this I find it helpful to throw in an expected failure case when gradgradcheck is called.  This means if someone fixes double backwards they have to remember to test it.", "created_at": "2018-08-22T22:18:23Z", "updated_at": "2018-11-23T15:49:47Z", "html_url": "https://github.com/pytorch/pytorch/pull/10782#discussion_r212128218", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10782", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/212128218"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10782#discussion_r212128218"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10782"}}, "body_html": "<p>nit: In situations like this I find it helpful to throw in an expected failure case when gradgradcheck is called.  This means if someone fixes double backwards they have to remember to test it.</p>", "body_text": "nit: In situations like this I find it helpful to throw in an expected failure case when gradgradcheck is called.  This means if someone fixes double backwards they have to remember to test it."}