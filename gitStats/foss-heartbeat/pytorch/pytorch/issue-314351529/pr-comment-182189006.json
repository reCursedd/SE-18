{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182189006", "pull_request_review_id": 112946621, "id": 182189006, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjE4OTAwNg==", "diff_hunk": "@@ -48,9 +57,46 @@ def _worker_loop(dataset, index_queue, data_queue, collate_fn, seed, init_fn, wo\n     if init_fn is not None:\n         init_fn(worker_id)\n \n+    worker_done_event = threading.Event()\n+\n+    manager_handle = None\n+    if IS_WINDOWS:\n+        kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)\n+        kernel32.OpenProcess.argtypes = (DWORD, BOOL, DWORD)\n+        kernel32.OpenProcess.restype = HANDLE\n+        kernel32.WaitForSingleObject.argtypes = (HANDLE, DWORD)\n+        kernel32.WaitForSingleObject.restype = DWORD\n+\n+        # Value obtained from https://msdn.microsoft.com/en-us/library/ms684880.aspx\n+        SYNCHRONIZE = 0x00100000\n+        manager_handle = kernel32.OpenProcess(SYNCHRONIZE, 0, manager_pid)\n+\n+        if not manager_handle:\n+            raise ctypes.WinError(ctypes.get_last_error())\n+\n+    def check_manager_process_status(worker_done_event, manager_pid, manager_handle):", "path": "torch/utils/data/dataloader.py", "position": null, "original_position": 49, "commit_id": "865e50ad4def6190266c40c17b00a01b4476ded1", "original_commit_id": "d0186c56ad88d99ad0c31c6d4854d4319a46ee53", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "body": "It seems that there will be cases where the worker is waiting for the main process to put indices into the `index_queue` (as `_put_indices` is called for every batch), and the wait time is dependent on when `__next__` will be called, so I am not sure what timeout value we should set to differentiate this vs main process crash", "created_at": "2018-04-17T18:52:33Z", "updated_at": "2018-11-23T15:42:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/6606#discussion_r182189006", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6606", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182189006"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6606#discussion_r182189006"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6606"}}, "body_html": "<p>It seems that there will be cases where the worker is waiting for the main process to put indices into the <code>index_queue</code> (as <code>_put_indices</code> is called for every batch), and the wait time is dependent on when <code>__next__</code> will be called, so I am not sure what timeout value we should set to differentiate this vs main process crash</p>", "body_text": "It seems that there will be cases where the worker is waiting for the main process to put indices into the index_queue (as _put_indices is called for every batch), and the wait time is dependent on when __next__ will be called, so I am not sure what timeout value we should set to differentiate this vs main process crash", "in_reply_to_id": 182165016}