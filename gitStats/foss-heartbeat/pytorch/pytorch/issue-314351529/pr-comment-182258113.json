{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182258113", "pull_request_review_id": 113019847, "id": 182258113, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjI1ODExMw==", "diff_hunk": "@@ -48,8 +57,40 @@ def _worker_loop(dataset, index_queue, data_queue, collate_fn, seed, init_fn, wo\n     if init_fn is not None:\n         init_fn(worker_id)\n \n+    manager_handle = None\n+    if IS_WINDOWS:\n+        kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)\n+        kernel32.OpenProcess.argtypes = (DWORD, BOOL, DWORD)\n+        kernel32.OpenProcess.restype = HANDLE\n+        kernel32.WaitForSingleObject.argtypes = (HANDLE, DWORD)\n+        kernel32.WaitForSingleObject.restype = DWORD\n+\n+        # Value obtained from https://msdn.microsoft.com/en-us/library/ms684880.aspx\n+        SYNCHRONIZE = 0x00100000\n+        manager_handle = kernel32.OpenProcess(SYNCHRONIZE, 0, manager_pid)\n+\n+        if not manager_handle:\n+            raise ctypes.WinError(ctypes.get_last_error())", "path": "torch/utils/data/dataloader.py", "position": null, "original_position": 45, "commit_id": "865e50ad4def6190266c40c17b00a01b4476ded1", "original_commit_id": "a0ed2e82a2ca4b613e94662e605def0ef072a3d0", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be nice if we could move this platform specific code outside of `_worker_loop`. Perhaps we could do something like a wrapper class?\r\n```python\r\nif IS_WINDOWS:\r\n    class ManagerWatchdog(object):\r\n        def __init__(self, manager_pid):\r\n            ...\r\n        def is_alive(self):\r\n            return ...\r\nelse:\r\n    class ManagerWatchdog(object):\r\n        ... # corresponding impl for linux, just uses `getppid`\r\n```\r\nThen the only modification to this function is that you instantiate the watchdog object and call `is_alive` when the timeout happens", "created_at": "2018-04-17T22:11:54Z", "updated_at": "2018-11-23T15:42:38Z", "html_url": "https://github.com/pytorch/pytorch/pull/6606#discussion_r182258113", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6606", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182258113"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6606#discussion_r182258113"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6606"}}, "body_html": "<p>It would be nice if we could move this platform specific code outside of <code>_worker_loop</code>. Perhaps we could do something like a wrapper class?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> <span class=\"pl-c1\">IS_WINDOWS</span>:\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">ManagerWatchdog</span>(<span class=\"pl-c1\">object</span>):\n        <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">manager_pid</span>):\n            <span class=\"pl-c1\">...</span>\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">is_alive</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">...</span>\n<span class=\"pl-k\">else</span>:\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">ManagerWatchdog</span>(<span class=\"pl-c1\">object</span>):\n        <span class=\"pl-c1\">...</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> corresponding impl for linux, just uses `getppid`</span></pre></div>\n<p>Then the only modification to this function is that you instantiate the watchdog object and call <code>is_alive</code> when the timeout happens</p>", "body_text": "It would be nice if we could move this platform specific code outside of _worker_loop. Perhaps we could do something like a wrapper class?\nif IS_WINDOWS:\n    class ManagerWatchdog(object):\n        def __init__(self, manager_pid):\n            ...\n        def is_alive(self):\n            return ...\nelse:\n    class ManagerWatchdog(object):\n        ... # corresponding impl for linux, just uses `getppid`\nThen the only modification to this function is that you instantiate the watchdog object and call is_alive when the timeout happens"}