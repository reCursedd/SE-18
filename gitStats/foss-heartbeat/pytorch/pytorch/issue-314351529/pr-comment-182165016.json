{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182165016", "pull_request_review_id": 112917365, "id": 182165016, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjE2NTAxNg==", "diff_hunk": "@@ -48,9 +57,46 @@ def _worker_loop(dataset, index_queue, data_queue, collate_fn, seed, init_fn, wo\n     if init_fn is not None:\n         init_fn(worker_id)\n \n+    worker_done_event = threading.Event()\n+\n+    manager_handle = None\n+    if IS_WINDOWS:\n+        kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)\n+        kernel32.OpenProcess.argtypes = (DWORD, BOOL, DWORD)\n+        kernel32.OpenProcess.restype = HANDLE\n+        kernel32.WaitForSingleObject.argtypes = (HANDLE, DWORD)\n+        kernel32.WaitForSingleObject.restype = DWORD\n+\n+        # Value obtained from https://msdn.microsoft.com/en-us/library/ms684880.aspx\n+        SYNCHRONIZE = 0x00100000\n+        manager_handle = kernel32.OpenProcess(SYNCHRONIZE, 0, manager_pid)\n+\n+        if not manager_handle:\n+            raise ctypes.WinError(ctypes.get_last_error())\n+\n+    def check_manager_process_status(worker_done_event, manager_pid, manager_handle):", "path": "torch/utils/data/dataloader.py", "position": null, "original_position": 49, "commit_id": "865e50ad4def6190266c40c17b00a01b4476ded1", "original_commit_id": "d0186c56ad88d99ad0c31c6d4854d4319a46ee53", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "There's no parallelism in checking the status of the main process anyway (because of the GIL), so couldn't we use `index_queue.get()` with a timeout, and just call this function if it times out? There's no need for threads, `worker_done_event`, and the worker can just exit cleanly.", "created_at": "2018-04-17T17:32:06Z", "updated_at": "2018-11-23T15:42:36Z", "html_url": "https://github.com/pytorch/pytorch/pull/6606#discussion_r182165016", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6606", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/182165016"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6606#discussion_r182165016"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6606"}}, "body_html": "<p>There's no parallelism in checking the status of the main process anyway (because of the GIL), so couldn't we use <code>index_queue.get()</code> with a timeout, and just call this function if it times out? There's no need for threads, <code>worker_done_event</code>, and the worker can just exit cleanly.</p>", "body_text": "There's no parallelism in checking the status of the main process anyway (because of the GIL), so couldn't we use index_queue.get() with a timeout, and just call this function if it times out? There's no need for threads, worker_done_event, and the worker can just exit cleanly."}