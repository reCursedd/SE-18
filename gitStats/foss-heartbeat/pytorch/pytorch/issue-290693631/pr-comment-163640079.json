{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163640079", "pull_request_review_id": 91285834, "id": 163640079, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY0MDA3OQ==", "diff_hunk": "@@ -0,0 +1,76 @@\n+import os\n+import subprocess\n+import re\n+\n+\n+WITH_IB_DEVICES = False\n+IB_DEVINFO_CMD = \"ibv_devinfo\"\n+\n+\n+def get_command_path(command):\n+    \"\"\"\n+    Helper function that get the full path of a given linux command\n+    \"\"\"\n+    def excutable(command_path):\n+        return os.path.isfile(command_path) and os.access(command_path, os.X_OK)\n+\n+    for path in os.environ[\"PATH\"].split(os.pathsep):\n+        command_path = os.path.join(path, command)\n+        if excutable(command_path):\n+            return command_path\n+\n+    return None\n+\n+\n+def detect_ib_devices():\n+    \"\"\"\n+    Helper function that detects if there are Infiniband devices on the host,\n+    and returns the number of IB devices detected or None for failure to detect\n+    \"\"\"\n+    try:\n+        full_cmd_path = get_command_path(IB_DEVINFO_CMD)\n+        if not full_cmd_path:\n+            return None\n+        out = subprocess.check_output([full_cmd_path, \"--list\"])\n+        # find the first line of the output\n+        # The outpyt should be either:\n+        #\n+        # > ibv_devinfo --list\n+        # 0 HCAs founds:\n+        #\n+        # or\n+        #\n+        # > ibv_devinfo --list\n+        # 4 HCAs found:\n+        #   mlx5_3\n+        #   mlx5_2\n+        #   mlx5_1\n+        #   mlx5_0\n+        first_line = out.decode().split('\\n')[0]\n+        res = re.findall(\"\\d+\", first_line)\n+        if len(res) != 1:\n+            raise Exception(\"-- IB_detect: unexpected parsing error while \"\n+                            \"trying to find the number of available devices.\")\n+        return int(res[0])", "path": "tools/setup_helpers/ib_detect.py", "position": null, "original_position": 54, "commit_id": "b45de3a1281aef5cfa14013ecdbad556e0c98f4c", "original_commit_id": "b5a42018a1526390dc71ce78ddcc8f8c8ec1ef5a", "user": {"login": "teng-li", "id": 8120856, "node_id": "MDQ6VXNlcjgxMjA4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8120856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teng-li", "html_url": "https://github.com/teng-li", "followers_url": "https://api.github.com/users/teng-li/followers", "following_url": "https://api.github.com/users/teng-li/following{/other_user}", "gists_url": "https://api.github.com/users/teng-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/teng-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teng-li/subscriptions", "organizations_url": "https://api.github.com/users/teng-li/orgs", "repos_url": "https://api.github.com/users/teng-li/repos", "events_url": "https://api.github.com/users/teng-li/events{/privacy}", "received_events_url": "https://api.github.com/users/teng-li/received_events", "type": "User", "site_admin": false}, "body": "That's fine too", "created_at": "2018-01-24T18:44:30Z", "updated_at": "2018-11-23T15:38:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/4795#discussion_r163640079", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4795", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/163640079"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4795#discussion_r163640079"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4795"}}, "body_html": "<p>That's fine too</p>", "body_text": "That's fine too", "in_reply_to_id": 163496353}