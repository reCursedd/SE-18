{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/334868440", "html_url": "https://github.com/pytorch/pytorch/pull/3011#issuecomment-334868440", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3011", "id": 334868440, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDg2ODQ0MA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-06T20:58:24Z", "updated_at": "2017-10-06T20:58:24Z", "author_association": "MEMBER", "body_html": "<p>Great! The lint check is failing because of spaces around the <code>=</code>. I think it's generally a bit better to reduce the test case to only the essential bits. In this case, testing <code>avg_pool3d</code> with a contiguous grad with certain stride patterns. For example:</p>\n<div class=\"highlight highlight-source-python\"><pre>x <span class=\"pl-k\">=</span> Variable(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>).cuda(), <span class=\"pl-v\">requires_grad</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\ny <span class=\"pl-k\">=</span> F.avg_pool3d(x, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>, <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\n\ngrad <span class=\"pl-k\">=</span> torch.randn(y.size()).cuda()\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> increase the stride in dimension 0. the tensor is still contiguous because size[0] is 1</span>\nstride <span class=\"pl-k\">=</span> <span class=\"pl-c1\">list</span>(grad.stride())\nstride[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> stride[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\ngrad.set_(grad.storage(), <span class=\"pl-c1\">0</span>, grad.size(), stride)\n<span class=\"pl-k\">assert</span> grad.is_contiguous()\n\ny.backward(grad)</pre></div>", "body_text": "Great! The lint check is failing because of spaces around the =. I think it's generally a bit better to reduce the test case to only the essential bits. In this case, testing avg_pool3d with a contiguous grad with certain stride patterns. For example:\nx = Variable(torch.randn(1, 3, 4, 4, 4).cuda(), requires_grad=True)\ny = F.avg_pool3d(x, kernel_size=3, padding=1, stride=2)\n\ngrad = torch.randn(y.size()).cuda()\n# increase the stride in dimension 0. the tensor is still contiguous because size[0] is 1\nstride = list(grad.stride())\nstride[0] = stride[0] * 2\ngrad.set_(grad.storage(), 0, grad.size(), stride)\nassert grad.is_contiguous()\n\ny.backward(grad)", "body": "Great! The lint check is failing because of spaces around the `=`. I think it's generally a bit better to reduce the test case to only the essential bits. In this case, testing `avg_pool3d` with a contiguous grad with certain stride patterns. For example:\r\n\r\n```python\r\nx = Variable(torch.randn(1, 3, 4, 4, 4).cuda(), requires_grad=True)\r\ny = F.avg_pool3d(x, kernel_size=3, padding=1, stride=2)\r\n\r\ngrad = torch.randn(y.size()).cuda()\r\n# increase the stride in dimension 0. the tensor is still contiguous because size[0] is 1\r\nstride = list(grad.stride())\r\nstride[0] = stride[0] * 2\r\ngrad.set_(grad.storage(), 0, grad.size(), stride)\r\nassert grad.is_contiguous()\r\n\r\ny.backward(grad)\r\n```"}