{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162799313", "pull_request_review_id": 90320296, "id": 162799313, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjc5OTMxMw==", "diff_hunk": "@@ -51,13 +52,19 @@ struct FunctionTask {\n     , inputs(std::move(inputs)) {}\n };\n \n+struct CompareFunctionTaskTime {\n+  bool operator()(FunctionTask const & t1, FunctionTask const & t2) {\n+    return t1.fn->time < t2.fn->time;\n+  }\n+};\n+\n struct ReadyQueue {\n-  std::deque<FunctionTask> queue;\n+  std::priority_queue<FunctionTask, std::vector<FunctionTask>, CompareFunctionTaskTime> heap;", "path": "torch/csrc/autograd/engine.cpp", "position": 20, "original_position": 20, "commit_id": "fa4036ab8427a4e75a669b587bdcb5c0ebd32848", "original_commit_id": "fa4036ab8427a4e75a669b587bdcb5c0ebd32848", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "body": "It's actually a max-heap. Quoting cppreference:\r\n\r\n> Note that the Compare parameter is defined such that it returns true if its first argument comes before its second argument in a weak ordering. But because the priority queue outputs largest elements first, the elements that \"come before\" are actually output last. That is, the front of the queue contains the \"last\" element according to the weak ordering imposed by Compare.", "created_at": "2018-01-21T02:49:47Z", "updated_at": "2018-11-23T15:38:22Z", "html_url": "https://github.com/pytorch/pytorch/pull/4746#discussion_r162799313", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4746", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162799313"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4746#discussion_r162799313"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4746"}}, "body_html": "<p>It's actually a max-heap. Quoting cppreference:</p>\n<blockquote>\n<p>Note that the Compare parameter is defined such that it returns true if its first argument comes before its second argument in a weak ordering. But because the priority queue outputs largest elements first, the elements that \"come before\" are actually output last. That is, the front of the queue contains the \"last\" element according to the weak ordering imposed by Compare.</p>\n</blockquote>", "body_text": "It's actually a max-heap. Quoting cppreference:\n\nNote that the Compare parameter is defined such that it returns true if its first argument comes before its second argument in a weak ordering. But because the priority queue outputs largest elements first, the elements that \"come before\" are actually output last. That is, the front of the queue contains the \"last\" element according to the weak ordering imposed by Compare.", "in_reply_to_id": 162794328}