{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162794328", "pull_request_review_id": 90315306, "id": 162794328, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mjc5NDMyOA==", "diff_hunk": "@@ -51,13 +52,19 @@ struct FunctionTask {\n     , inputs(std::move(inputs)) {}\n };\n \n+struct CompareFunctionTaskTime {\n+  bool operator()(FunctionTask const & t1, FunctionTask const & t2) {\n+    return t1.fn->time < t2.fn->time;\n+  }\n+};\n+\n struct ReadyQueue {\n-  std::deque<FunctionTask> queue;\n+  std::priority_queue<FunctionTask, std::vector<FunctionTask>, CompareFunctionTaskTime> heap;", "path": "torch/csrc/autograd/engine.cpp", "position": 20, "original_position": 20, "commit_id": "fa4036ab8427a4e75a669b587bdcb5c0ebd32848", "original_commit_id": "fa4036ab8427a4e75a669b587bdcb5c0ebd32848", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "If I understand correctly, `priority_queue` contains the smallest element on the top (if you use a comparator like the one you did), so the Engine will actually process the tasks in a DFS-like manner, where it always picks the earliest one. I think we wanted to do the converse - always pick the oldest one (to reproduce the steps in a reversed order).", "created_at": "2018-01-20T21:34:28Z", "updated_at": "2018-11-23T15:38:21Z", "html_url": "https://github.com/pytorch/pytorch/pull/4746#discussion_r162794328", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4746", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/162794328"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4746#discussion_r162794328"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4746"}}, "body_html": "<p>If I understand correctly, <code>priority_queue</code> contains the smallest element on the top (if you use a comparator like the one you did), so the Engine will actually process the tasks in a DFS-like manner, where it always picks the earliest one. I think we wanted to do the converse - always pick the oldest one (to reproduce the steps in a reversed order).</p>", "body_text": "If I understand correctly, priority_queue contains the smallest element on the top (if you use a comparator like the one you did), so the Engine will actually process the tasks in a DFS-like manner, where it always picks the earliest one. I think we wanted to do the converse - always pick the oldest one (to reproduce the steps in a reversed order)."}