{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181959656", "pull_request_review_id": 112674698, "id": 181959656, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTk1OTY1Ng==", "diff_hunk": "@@ -115,47 +115,40 @@ bool CollectAndDistributeFpnRpnProposalsOp<CPUContext>::RunOnDevice() {\n   int num_rpn_lvls = rpn_max_level_ - rpn_min_level_ + 1;\n   CAFFE_ENFORCE_EQ(InputSize(), 2 * num_rpn_lvls);\n \n-  // roi_in: (N, 5)\n-  const auto& first_roi_in = Input(0);\n-  const auto N = first_roi_in.dim(0);\n-  CAFFE_ENFORCE_EQ(first_roi_in.dims(), (vector<TIndex>{N, 5}));\n-\n-  // score_in: (N)\n-  const auto& first_score_in = Input(num_rpn_lvls);\n-  CAFFE_ENFORCE_EQ(first_score_in.dims(), (vector<TIndex>{N}));\n-\n   int num_roi_lvls = roi_max_level_ - roi_min_level_ + 1;\n   CAFFE_ENFORCE_EQ(OutputSize(), num_roi_lvls + 2);\n \n   // Collect rois and scores in Eigen\n   // rois are in [[batch_idx, x0, y0, x1, y2], ...] format\n   // Combine predictions across all levels and retain the top scoring\n   //\n-  // TODO: This makes the assumption that roi size at each level is the same.\n-  //\n   // equivalent to python code\n   //   roi_inputs = inputs[:num_rpn_lvls]\n   //   score_inputs = inputs[num_rpn_lvls:]\n   //   rois = np.concatenate([blob.data for blob in roi_inputs])\n   //   scores = np.concatenate([blob.data for blob in score_inputs]).squeeze()\n-  ERArrXXf rois(N * num_rpn_lvls, 5);\n-  EArrXf scores(N * num_rpn_lvls);\n+  int proposal_num = 0;\n   for (int i = 0; i < num_rpn_lvls; i++) {\n-    // roi_in: (N, 5)\n     const auto& roi_in = Input(i);\n-    CAFFE_ENFORCE_EQ(roi_in.dims(), (vector<TIndex>{N, 5}));\n+    proposal_num += roi_in.dim(0);\n+  }\n+  ERArrXXf rois(proposal_num, 5);\n+  EArrXf scores(proposal_num);\n+  for (int i = 0, len = 0; i < num_rpn_lvls; i++) {", "path": "caffe2/operators/collect_and_distribute_fpn_rpn_proposals_op.cc", "position": null, "original_position": 38, "commit_id": "3b02ec37cc18972a7c6598c71a767ab414dde708", "original_commit_id": "3cc3bebaa51d946220d87757537165014df9a8d3", "user": {"login": "BIT-silence", "id": 3357667, "node_id": "MDQ6VXNlcjMzNTc2Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3357667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BIT-silence", "html_url": "https://github.com/BIT-silence", "followers_url": "https://api.github.com/users/BIT-silence/followers", "following_url": "https://api.github.com/users/BIT-silence/following{/other_user}", "gists_url": "https://api.github.com/users/BIT-silence/gists{/gist_id}", "starred_url": "https://api.github.com/users/BIT-silence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BIT-silence/subscriptions", "organizations_url": "https://api.github.com/users/BIT-silence/orgs", "repos_url": "https://api.github.com/users/BIT-silence/repos", "events_url": "https://api.github.com/users/BIT-silence/events{/privacy}", "received_events_url": "https://api.github.com/users/BIT-silence/received_events", "type": "User", "site_admin": false}, "body": "Please put int len = 0; out of the for loop.", "created_at": "2018-04-17T06:02:25Z", "updated_at": "2018-11-23T15:42:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/6645#discussion_r181959656", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6645", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/181959656"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6645#discussion_r181959656"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6645"}}, "body_html": "<p>Please put int len = 0; out of the for loop.</p>", "body_text": "Please put int len = 0; out of the for loop."}