{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6059", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6059/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6059/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6059/events", "html_url": "https://github.com/pytorch/pytorch/pull/6059", "id": 309189472, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc3OTA3MzM1", "number": 6059, "title": "Add source location information to error messages", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-28T01:29:02Z", "updated_at": "2018-11-23T15:41:19Z", "closed_at": "2018-03-29T20:57:19Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6059", "html_url": "https://github.com/pytorch/pytorch/pull/6059", "diff_url": "https://github.com/pytorch/pytorch/pull/6059.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6059.patch"}, "body_html": "<p>This is the first PR of a series (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"309149162\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6055\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/6055/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/6055\">#6055</a>) geared towards creating a better debugging experience with our C++ backend. This first PR starts by adding <code>__func__</code>, <code>__FILE__</code> and <code>__LINE__</code> information to error messages. Later PRs will add backtraces.</p>\n<p><code>__func__</code> et al. unfortunately must be evaluated at the call site, so I had to turn <code>at::runtime_error</code> into the <code>AT_ERROR</code> macro to disguise the passing of these source information macros. As you may be aware, C++20 is expected to add <code>std::source_location</code>, which provides a standardized way of retrieving source information dynamically (i.e. you'll be able to give functions a <code>std::source_location src = {}</code> default argument which will evaluate to the source location of each call). I did some digging and found the experimental implementation of this feature in GCC here: <a href=\"https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/experimental/source_location\">https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/experimental/source_location</a>. It relies on <code>__builtin_FILE()</code> and similar macros, also described <a href=\"https://stackoverflow.com/questions/34405913/how-could-stdexperimentalsource-location-be-implemented\" rel=\"nofollow\">here</a>. These macros exist already, so we <em>could</em> preempt the standard and use them and not have to use the <code>AT_ERROR</code> macro. <em>BUT</em> it relies on the idea that you'll call these functions as default arguments, which doesn't work because our <code>runtime_error</code> does <code>printf</code> style formatting (varags + default arguments don't work well). So we'll have to do with the macro, unless we want to use <code>stringstream</code>s for pre-formatting (I'd rather not, I think the macro is sort of ok, given we also have <code>AT_ASSERT</code>).</p>\n<p>Currently, all error messages, even when shown in Python, will have this source location:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/6429851/38003407-4430b488-31ec-11e8-8584-67174c4a65d2.png\"><img src=\"https://user-images.githubusercontent.com/6429851/38003407-4430b488-31ec-11e8-8584-67174c4a65d2.png\" alt=\"screen shot 2018-03-27 at 18 11 05\" style=\"max-width:100%;\"></a></p>\n<p>My next PR will create an exception subclass that only stores this source information, along with the stacktrace, so we'll be able to conditionally show the information based on the error. Let me know if you think it's a good idea to always show the location, or only in errors from the autograd engine.</p>\n<p>I'll also make a codemod sometime later that replaces <code>throw std::runtime_error</code> with our error class.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=655866\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/colesbury\">@colesbury</a></p>\n<p>CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3605224\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebetica\">@ebetica</a></p>", "body_text": "This is the first PR of a series (#6055) geared towards creating a better debugging experience with our C++ backend. This first PR starts by adding __func__, __FILE__ and __LINE__ information to error messages. Later PRs will add backtraces.\n__func__ et al. unfortunately must be evaluated at the call site, so I had to turn at::runtime_error into the AT_ERROR macro to disguise the passing of these source information macros. As you may be aware, C++20 is expected to add std::source_location, which provides a standardized way of retrieving source information dynamically (i.e. you'll be able to give functions a std::source_location src = {} default argument which will evaluate to the source location of each call). I did some digging and found the experimental implementation of this feature in GCC here: https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/experimental/source_location. It relies on __builtin_FILE() and similar macros, also described here. These macros exist already, so we could preempt the standard and use them and not have to use the AT_ERROR macro. BUT it relies on the idea that you'll call these functions as default arguments, which doesn't work because our runtime_error does printf style formatting (varags + default arguments don't work well). So we'll have to do with the macro, unless we want to use stringstreams for pre-formatting (I'd rather not, I think the macro is sort of ok, given we also have AT_ASSERT).\nCurrently, all error messages, even when shown in Python, will have this source location:\n\nMy next PR will create an exception subclass that only stores this source information, along with the stacktrace, so we'll be able to conditionally show the information based on the error. Let me know if you think it's a good idea to always show the location, or only in errors from the autograd engine.\nI'll also make a codemod sometime later that replaces throw std::runtime_error with our error class.\n@apaszke @ezyang @colesbury\nCC @ebetica", "body": "This is the first PR of a series (#6055) geared towards creating a better debugging experience with our C++ backend. This first PR starts by adding `__func__`, `__FILE__` and `__LINE__` information to error messages. Later PRs will add backtraces.\r\n\r\n`__func__` et al. unfortunately must be evaluated at the call site, so I had to turn `at::runtime_error` into the `AT_ERROR` macro to disguise the passing of these source information macros. As you may be aware, C++20 is expected to add `std::source_location`, which provides a standardized way of retrieving source information dynamically (i.e. you'll be able to give functions a `std::source_location src = {}` default argument which will evaluate to the source location of each call). I did some digging and found the experimental implementation of this feature in GCC here: https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/experimental/source_location. It relies on `__builtin_FILE()` and similar macros, also described [here](https://stackoverflow.com/questions/34405913/how-could-stdexperimentalsource-location-be-implemented). These macros exist already, so we *could* preempt the standard and use them and not have to use the `AT_ERROR` macro. *BUT* it relies on the idea that you'll call these functions as default arguments, which doesn't work because our `runtime_error` does `printf` style formatting (varags + default arguments don't work well). So we'll have to do with the macro, unless we want to use `stringstream`s for pre-formatting (I'd rather not, I think the macro is sort of ok, given we also have `AT_ASSERT`).\r\n\r\nCurrently, all error messages, even when shown in Python, will have this source location:\r\n\r\n![screen shot 2018-03-27 at 18 11 05](https://user-images.githubusercontent.com/6429851/38003407-4430b488-31ec-11e8-8584-67174c4a65d2.png)\r\n\r\n\r\nMy next PR will create an exception subclass that only stores this source information, along with the stacktrace, so we'll be able to conditionally show the information based on the error. Let me know if you think it's a good idea to always show the location, or only in errors from the autograd engine.\r\n\r\nI'll also make a codemod sometime later that replaces `throw std::runtime_error` with our error class.\r\n\r\n@apaszke @ezyang @colesbury \r\n\r\nCC @ebetica \r\n"}