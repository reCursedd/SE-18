{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178113939", "pull_request_review_id": 108120008, "id": 178113939, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODExMzkzOQ==", "diff_hunk": "@@ -0,0 +1,78 @@\n+#pragma once\n+\n+#include <ATen/ATenGeneral.h> // for AT_API\n+\n+#include <cstdint>\n+#include <cstdio>\n+#include <exception>\n+#include <stdexcept>\n+#include <string>\n+\n+#include <stdarg.h>\n+\n+namespace at {\n+namespace detail {\n+/// A printf wrapper that returns an std::string.\n+inline std::string format(const char* format_string, ...) {\n+  static constexpr size_t kMaximumStringLength = 4096;\n+  char buffer[kMaximumStringLength];\n+\n+  va_list format_args;\n+  va_start(format_args, format_string);\n+  vsnprintf(buffer, sizeof(buffer), format_string, format_args);\n+  va_end(format_args);\n+\n+  return buffer;\n+}\n+\n+/// Represents a location in source code (for debugging).\n+struct SourceLocation {\n+  std::string toString() const {\n+    return format(\"%s at %s:%d\", function, file, line);\n+  }\n+\n+  const char* function;\n+  const char* file;\n+  uint32_t line;\n+};\n+} // namespace detail\n+\n+/// The primary ATen error class.\n+/// Provides a complete error message with source location information via\n+/// `what()`, and a more concise message via `what_without_location()`. Should\n+/// primarily be used with the `AT_ERROR` macro.\n+struct AT_API Error : public std::exception {\n+  template <typename... FormatArgs>\n+  Error(\n+      detail::SourceLocation source_location,\n+      const char* format_string,\n+      FormatArgs&&... format_args)\n+      : what_without_location_(detail::format(\n+            format_string,\n+            std::forward<FormatArgs>(format_args)...)),", "path": "aten/src/ATen/Error.h", "position": 59, "original_position": 52, "commit_id": "8d239c61172f410dabb3cce769bfe48ee807704c", "original_commit_id": "be4d0980a706adfad9718b055b72c58c9729f9df", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "I think it'll compile to the correct thing (passing arguments individually)", "created_at": "2018-03-29T16:37:26Z", "updated_at": "2018-11-23T15:41:19Z", "html_url": "https://github.com/pytorch/pytorch/pull/6059#discussion_r178113939", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6059", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/178113939"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6059#discussion_r178113939"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6059"}}, "body_html": "<p>I think it'll compile to the correct thing (passing arguments individually)</p>", "body_text": "I think it'll compile to the correct thing (passing arguments individually)", "in_reply_to_id": 178004711}