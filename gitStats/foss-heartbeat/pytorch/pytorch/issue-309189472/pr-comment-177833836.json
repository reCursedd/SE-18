{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177833836", "pull_request_review_id": 107780978, "id": 177833836, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzgzMzgzNg==", "diff_hunk": "@@ -0,0 +1,43 @@\n+#pragma once\n+\n+#include <ATen/ATenGeneral.h> // for AT_API\n+\n+#include <cstdint>\n+#include <cstdio>\n+#include <stdexcept>\n+#include <string>\n+\n+namespace at {\n+namespace detail {\n+struct SourceLocation {\n+  const char* function;\n+  const char* file;\n+  uint32_t line;\n+};\n+} // namespace detail\n+\n+template <typename... FormatArgs>\n+[[noreturn]] AT_API void error(", "path": "aten/src/ATen/Error.h", "position": null, "original_position": 20, "commit_id": "8d239c61172f410dabb3cce769bfe48ee807704c", "original_commit_id": "28b08256e795c203c49f9d9a20bd43b3ea94a1b5", "user": {"login": "goldsborough", "id": 6429851, "node_id": "MDQ6VXNlcjY0Mjk4NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6429851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldsborough", "html_url": "https://github.com/goldsborough", "followers_url": "https://api.github.com/users/goldsborough/followers", "following_url": "https://api.github.com/users/goldsborough/following{/other_user}", "gists_url": "https://api.github.com/users/goldsborough/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldsborough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldsborough/subscriptions", "organizations_url": "https://api.github.com/users/goldsborough/orgs", "repos_url": "https://api.github.com/users/goldsborough/repos", "events_url": "https://api.github.com/users/goldsborough/events{/privacy}", "received_events_url": "https://api.github.com/users/goldsborough/received_events", "type": "User", "site_admin": false}, "body": "So, are we ok with losing the `printf`-like behavior? Then we wouldn't need a macro. We'd just need to rewrite e.g. `AT_ERROR(\"%s%sType is not enabled.\",toString(p),toString(s));` to `throw at::error() << toString(p) <<  toString(s) << \"Type is not enabled.\";`.\r\n\r\nAs for the concern about `std::string`, we could add something like `enable_if<is_literal_type<FormatArgs>>`", "created_at": "2018-03-28T17:44:31Z", "updated_at": "2018-11-23T15:41:14Z", "html_url": "https://github.com/pytorch/pytorch/pull/6059#discussion_r177833836", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/6059", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/177833836"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/6059#discussion_r177833836"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/6059"}}, "body_html": "<p>So, are we ok with losing the <code>printf</code>-like behavior? Then we wouldn't need a macro. We'd just need to rewrite e.g. <code>AT_ERROR(\"%s%sType is not enabled.\",toString(p),toString(s));</code> to <code>throw at::error() &lt;&lt; toString(p) &lt;&lt;  toString(s) &lt;&lt; \"Type is not enabled.\";</code>.</p>\n<p>As for the concern about <code>std::string</code>, we could add something like <code>enable_if&lt;is_literal_type&lt;FormatArgs&gt;&gt;</code></p>", "body_text": "So, are we ok with losing the printf-like behavior? Then we wouldn't need a macro. We'd just need to rewrite e.g. AT_ERROR(\"%s%sType is not enabled.\",toString(p),toString(s)); to throw at::error() << toString(p) <<  toString(s) << \"Type is not enabled.\";.\nAs for the concern about std::string, we could add something like enable_if<is_literal_type<FormatArgs>>", "in_reply_to_id": 177685629}