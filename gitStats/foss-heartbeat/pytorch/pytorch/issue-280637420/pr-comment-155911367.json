{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155911367", "pull_request_review_id": 82314264, "id": 155911367, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTkxMTM2Nw==", "diff_hunk": "@@ -0,0 +1,33 @@\n+#pragma once\n+\n+#include <memory>\n+#include <stddef.h>\n+\n+#include \"ATen/Retainable.h\"\n+\n+namespace at {\n+\n+struct Allocator {\n+  virtual void* allocate(std::size_t n) const = 0;\n+  virtual void deallocate(void* ptr) const = 0;\n+};\n+\n+namespace detail {\n+\n+struct AllocatorContext : public Retainable {", "path": "aten/src/ATen/Allocator.h", "position": null, "original_position": 17, "commit_id": "cd4cdb9fa1bbafa2abfb13878e7c22d3d88f5c9a", "original_commit_id": "54f86b50661dc920ee70d6a00ce5e40e2f5a3e6e", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "I\u2019d say it\u2019s a bit weird that AllocatorContext owns an Allocator (would be more natural the other way around). Not sure how would one implement a caching allocator if it could be owned only by a single context. Any reason to make it this way?", "created_at": "2017-12-09T02:48:32Z", "updated_at": "2018-11-23T15:37:13Z", "html_url": "https://github.com/pytorch/pytorch/pull/4094#discussion_r155911367", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4094", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/155911367"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4094#discussion_r155911367"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4094"}}, "body_html": "<p>I\u2019d say it\u2019s a bit weird that AllocatorContext owns an Allocator (would be more natural the other way around). Not sure how would one implement a caching allocator if it could be owned only by a single context. Any reason to make it this way?</p>", "body_text": "I\u2019d say it\u2019s a bit weird that AllocatorContext owns an Allocator (would be more natural the other way around). Not sure how would one implement a caching allocator if it could be owned only by a single context. Any reason to make it this way?"}