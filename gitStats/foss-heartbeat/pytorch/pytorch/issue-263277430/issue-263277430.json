{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2994", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2994/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2994/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2994/events", "html_url": "https://github.com/pytorch/pytorch/pull/2994", "id": 263277430, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ1MDI5NjY0", "number": 2994, "title": "Fix NN tests not truly respecting SEED option", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-05T21:49:46Z", "updated_at": "2017-10-17T15:13:09Z", "closed_at": "2017-10-06T14:39:34Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/2994", "html_url": "https://github.com/pytorch/pytorch/pull/2994", "diff_url": "https://github.com/pytorch/pytorch/pull/2994.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/2994.patch"}, "body_html": "<p>Previously, many of the NN tests has random inputs/args/targets set at <strong>top</strong> level, before seeding is applied at beginning of each test at <a href=\"https://github.com/pytorch/pytorch/blob/master/test/common.py#L142-L145\">https://github.com/pytorch/pytorch/blob/master/test/common.py#L142-L145</a>. This makes some tests to be flaky and even sensitive to order of definition in the files. In this PR, for <code>input</code>, <code>constructor_args</code> and <code>target</code> (criterion tests), we introduce three ways of definition:</p>\n<ol>\n<li>directly specifying values, e.g. <code>input=torch.arange(1, 9).view(2, 4)</code>. This should <em><strong>not</strong></em> contain nondeterministic  functions.</li>\n<li>specifying a <code>lambda</code> function to generate it, e.g. <code>constructor_args_fn=lambda: torch.rand(2,4)</code></li>\n<li>specifying sizes, which will be used to generate N(0, 1) at test time, e.g. <code>target_size=(4,5)</code>, <code>target_size=[(2, 4), (3,)]</code>.</li>\n</ol>\n<p>The values are only generated when the containing <code>TestCase</code> first accesses them, and are cached afterwards.</p>\n<p>After doing this, we can safely remove the top-level seeding \"hack\" used before.</p>\n<p>Commit structure:</p>\n<ol>\n<li>Implement the 3-way specification.</li>\n<li>Remove top-level seeding options in <code>common.py</code> and <code>test_autograd.py</code></li>\n<li>Update NN tests to new format</li>\n<li>Fix two legacy NN modules that modifies <code>input</code> in <code>clearState</code>, causing <code>input</code> to be invalid at <code>_cuda</code> tests.</li>\n</ol>\n<p>Test time comparison:<br>\nBefore this PR: <code>test_nn.py</code>: 810s; <code>test_legacy_nn.py</code>: 93s<br>\nAfter this PR: <code>test_nn.py</code>: 806s; <code>test_legacy_nn.py</code>: 94s</p>", "body_text": "Previously, many of the NN tests has random inputs/args/targets set at top level, before seeding is applied at beginning of each test at https://github.com/pytorch/pytorch/blob/master/test/common.py#L142-L145. This makes some tests to be flaky and even sensitive to order of definition in the files. In this PR, for input, constructor_args and target (criterion tests), we introduce three ways of definition:\n\ndirectly specifying values, e.g. input=torch.arange(1, 9).view(2, 4). This should not contain nondeterministic  functions.\nspecifying a lambda function to generate it, e.g. constructor_args_fn=lambda: torch.rand(2,4)\nspecifying sizes, which will be used to generate N(0, 1) at test time, e.g. target_size=(4,5), target_size=[(2, 4), (3,)].\n\nThe values are only generated when the containing TestCase first accesses them, and are cached afterwards.\nAfter doing this, we can safely remove the top-level seeding \"hack\" used before.\nCommit structure:\n\nImplement the 3-way specification.\nRemove top-level seeding options in common.py and test_autograd.py\nUpdate NN tests to new format\nFix two legacy NN modules that modifies input in clearState, causing input to be invalid at _cuda tests.\n\nTest time comparison:\nBefore this PR: test_nn.py: 810s; test_legacy_nn.py: 93s\nAfter this PR: test_nn.py: 806s; test_legacy_nn.py: 94s", "body": "Previously, many of the NN tests has random inputs/args/targets set at **top** level, before seeding is applied at beginning of each test at https://github.com/pytorch/pytorch/blob/master/test/common.py#L142-L145. This makes some tests to be flaky and even sensitive to order of definition in the files. In this PR, for `input`, `constructor_args` and `target` (criterion tests), we introduce three ways of definition:\r\n\r\n1. directly specifying values, e.g. `input=torch.arange(1, 9).view(2, 4)`. This should ***not*** contain nondeterministic  functions.\r\n2. specifying a `lambda` function to generate it, e.g. `constructor_args_fn=lambda: torch.rand(2,4)`\r\n3. specifying sizes, which will be used to generate N(0, 1) at test time, e.g. `target_size=(4,5)`, `target_size=[(2, 4), (3,)]`.\r\n\r\nThe values are only generated when the containing `TestCase` first accesses them, and are cached afterwards.\r\n\r\nAfter doing this, we can safely remove the top-level seeding \"hack\" used before.\r\n\r\nCommit structure:\r\n\r\n1. Implement the 3-way specification.\r\n2. Remove top-level seeding options in `common.py` and `test_autograd.py`\r\n3. Update NN tests to new format\r\n4. Fix two legacy NN modules that modifies `input` in `clearState`, causing `input` to be invalid at `_cuda` tests.\r\n\r\nTest time comparison:\r\nBefore this PR: `test_nn.py`: 810s; `test_legacy_nn.py`: 93s\r\nAfter this PR: `test_nn.py`: 806s; `test_legacy_nn.py`: 94s\r\n"}