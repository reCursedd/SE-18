{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10795", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10795/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10795/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10795/events", "html_url": "https://github.com/pytorch/pytorch/issues/10795", "id": 353114910, "node_id": "MDU6SXNzdWUzNTMxMTQ5MTA=", "number": 10795, "title": "[JIT] improve error messages when passing the wrong type", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-22T20:36:53Z", "updated_at": "2018-09-11T15:34:34Z", "closed_at": "2018-09-11T15:34:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>When you have an error in the type of thing you are passing to a script method, we currently give inscrutable errors:</p>\n<pre><code>import torch\n\n@torch.jit.script\ndef hi(x):\n    return 3\n\nprint(hi)\nprint(hi(4))\n</code></pre>\n<p>Gives the error:</p>\n<pre><code>ScriptModule()\nTraceback (most recent call last):\n  File \"what.py\", line 8, in &lt;module&gt;\n    print(hi(4))\n  File \"/data/users/zdevito/pytorch/torch/nn/modules/module.py\", line 477, in __call__\n    result = self.forward(*input, **kwargs)\nRuntimeError: Unable to cast Python instance to C++ type (compile in debug mode for details)\n</code></pre>\n<p>It should instead give an understandable error (\"found int, expected tensor\").</p>", "body_text": "When you have an error in the type of thing you are passing to a script method, we currently give inscrutable errors:\nimport torch\n\n@torch.jit.script\ndef hi(x):\n    return 3\n\nprint(hi)\nprint(hi(4))\n\nGives the error:\nScriptModule()\nTraceback (most recent call last):\n  File \"what.py\", line 8, in <module>\n    print(hi(4))\n  File \"/data/users/zdevito/pytorch/torch/nn/modules/module.py\", line 477, in __call__\n    result = self.forward(*input, **kwargs)\nRuntimeError: Unable to cast Python instance to C++ type (compile in debug mode for details)\n\nIt should instead give an understandable error (\"found int, expected tensor\").", "body": "When you have an error in the type of thing you are passing to a script method, we currently give inscrutable errors:\r\n```\r\nimport torch\r\n\r\n@torch.jit.script\r\ndef hi(x):\r\n    return 3\r\n\r\nprint(hi)\r\nprint(hi(4))\r\n```\r\n\r\nGives the error:\r\n\r\n```\r\nScriptModule()\r\nTraceback (most recent call last):\r\n  File \"what.py\", line 8, in <module>\r\n    print(hi(4))\r\n  File \"/data/users/zdevito/pytorch/torch/nn/modules/module.py\", line 477, in __call__\r\n    result = self.forward(*input, **kwargs)\r\nRuntimeError: Unable to cast Python instance to C++ type (compile in debug mode for details)\r\n```\r\n\r\nIt should instead give an understandable error (\"found int, expected tensor\")."}