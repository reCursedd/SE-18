{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2592", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2592/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2592/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2592/events", "html_url": "https://github.com/pytorch/pytorch/issues/2592", "id": 254481209, "node_id": "MDU6SXNzdWUyNTQ0ODEyMDk=", "number": 2592, "title": "Seg fault when calling backwards on Conv1d", "user": {"login": "RPrenger", "id": 8484670, "node_id": "MDQ6VXNlcjg0ODQ2NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8484670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RPrenger", "html_url": "https://github.com/RPrenger", "followers_url": "https://api.github.com/users/RPrenger/followers", "following_url": "https://api.github.com/users/RPrenger/following{/other_user}", "gists_url": "https://api.github.com/users/RPrenger/gists{/gist_id}", "starred_url": "https://api.github.com/users/RPrenger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RPrenger/subscriptions", "organizations_url": "https://api.github.com/users/RPrenger/orgs", "repos_url": "https://api.github.com/users/RPrenger/repos", "events_url": "https://api.github.com/users/RPrenger/events{/privacy}", "received_events_url": "https://api.github.com/users/RPrenger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-31T22:03:10Z", "updated_at": "2017-09-01T18:25:39Z", "closed_at": "2017-09-01T18:25:39Z", "author_association": "NONE", "body_html": "<p>If you call backwards on a graph that has a <code>Conv1d</code> with the <code>weight</code> parameter's <code>requires_grad</code> flag set to <code>False</code> it segfaults with no warning.  This happens even if something downstream still requires gradients.  Here is code that reproduces it (using Pytorch 1.10):</p>\n<pre lang=\"&quot;&quot;&quot;\" data-meta=\"Minimal example showing bug.  Results in segfault&quot;&quot;&quot;\"><code>import numpy as np\nimport torch\nfrom torch.autograd import Variable\n\nclass Bug(torch.nn.Module):\n    def __init__(self):\n        super(Bug, self).__init__()\n\n        self.conv = torch.nn.Conv1d(1, 1,\n                                    kernel_size=32,\n                                    stride = 8,\n                                    bias=False)\n        if torch.cuda.is_available():\n            self.conv.weight.data = self.conv.weight.data.cuda()\n        self.conv.weight.requires_grad = False\n\n    def forward(self, signals):\n        return self.conv(signals)\n\nif __name__ == '__main__':\n    # Create random Tensors for weights, and wrap them in Variables.\n    signals = Variable(torch.randn(1, 1, 64), requires_grad=True)\n\n    if torch.cuda.is_available():\n        signals.data = signals.data.cuda()\n\n    f=Bug()\n    x = f(signals)\n    output = torch.sum(f(signals))\n    output.backward()\n</code></pre>", "body_text": "If you call backwards on a graph that has a Conv1d with the weight parameter's requires_grad flag set to False it segfaults with no warning.  This happens even if something downstream still requires gradients.  Here is code that reproduces it (using Pytorch 1.10):\nimport numpy as np\nimport torch\nfrom torch.autograd import Variable\n\nclass Bug(torch.nn.Module):\n    def __init__(self):\n        super(Bug, self).__init__()\n\n        self.conv = torch.nn.Conv1d(1, 1,\n                                    kernel_size=32,\n                                    stride = 8,\n                                    bias=False)\n        if torch.cuda.is_available():\n            self.conv.weight.data = self.conv.weight.data.cuda()\n        self.conv.weight.requires_grad = False\n\n    def forward(self, signals):\n        return self.conv(signals)\n\nif __name__ == '__main__':\n    # Create random Tensors for weights, and wrap them in Variables.\n    signals = Variable(torch.randn(1, 1, 64), requires_grad=True)\n\n    if torch.cuda.is_available():\n        signals.data = signals.data.cuda()\n\n    f=Bug()\n    x = f(signals)\n    output = torch.sum(f(signals))\n    output.backward()", "body": "If you call backwards on a graph that has a `Conv1d` with the `weight` parameter's `requires_grad` flag set to `False` it segfaults with no warning.  This happens even if something downstream still requires gradients.  Here is code that reproduces it (using Pytorch 1.10):\r\n```\"\"\" Minimal example showing bug.  Results in segfault\"\"\"\r\nimport numpy as np\r\nimport torch\r\nfrom torch.autograd import Variable\r\n\r\nclass Bug(torch.nn.Module):\r\n    def __init__(self):\r\n        super(Bug, self).__init__()\r\n\r\n        self.conv = torch.nn.Conv1d(1, 1,\r\n                                    kernel_size=32,\r\n                                    stride = 8,\r\n                                    bias=False)\r\n        if torch.cuda.is_available():\r\n            self.conv.weight.data = self.conv.weight.data.cuda()\r\n        self.conv.weight.requires_grad = False\r\n\r\n    def forward(self, signals):\r\n        return self.conv(signals)\r\n\r\nif __name__ == '__main__':\r\n    # Create random Tensors for weights, and wrap them in Variables.\r\n    signals = Variable(torch.randn(1, 1, 64), requires_grad=True)\r\n\r\n    if torch.cuda.is_available():\r\n        signals.data = signals.data.cuda()\r\n\r\n    f=Bug()\r\n    x = f(signals)\r\n    output = torch.sum(f(signals))\r\n    output.backward()"}