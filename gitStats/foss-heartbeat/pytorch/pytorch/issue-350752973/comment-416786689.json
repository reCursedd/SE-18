{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/416786689", "html_url": "https://github.com/pytorch/pytorch/issues/10536#issuecomment-416786689", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/10536", "id": 416786689, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjc4NjY4OQ==", "user": {"login": "srirambandi", "id": 17962708, "node_id": "MDQ6VXNlcjE3OTYyNzA4", "avatar_url": "https://avatars2.githubusercontent.com/u/17962708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srirambandi", "html_url": "https://github.com/srirambandi", "followers_url": "https://api.github.com/users/srirambandi/followers", "following_url": "https://api.github.com/users/srirambandi/following{/other_user}", "gists_url": "https://api.github.com/users/srirambandi/gists{/gist_id}", "starred_url": "https://api.github.com/users/srirambandi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srirambandi/subscriptions", "organizations_url": "https://api.github.com/users/srirambandi/orgs", "repos_url": "https://api.github.com/users/srirambandi/repos", "events_url": "https://api.github.com/users/srirambandi/events{/privacy}", "received_events_url": "https://api.github.com/users/srirambandi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-29T00:49:26Z", "updated_at": "2018-08-29T00:49:26Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5652049\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zou3519\">@zou3519</a> Pre-padding has the same use case as post-padding(which pad_sequence currently offer), except it is proving more efficient in LSTMs, as I have observed. People also reported this behavior <a href=\"https://discuss.pytorch.org/t/padding-pre-versus-post-lstm-performance/13616\" rel=\"nofollow\">here</a>, and <a href=\"https://github.com/enerrio/OpenAI-XOR#results\">here</a>. So, I think a library which offers post-padding as default, should also include pre-padding func.</p>", "body_text": "@zou3519 Pre-padding has the same use case as post-padding(which pad_sequence currently offer), except it is proving more efficient in LSTMs, as I have observed. People also reported this behavior here, and here. So, I think a library which offers post-padding as default, should also include pre-padding func.", "body": "@zou3519 Pre-padding has the same use case as post-padding(which pad_sequence currently offer), except it is proving more efficient in LSTMs, as I have observed. People also reported this behavior [here](https://discuss.pytorch.org/t/padding-pre-versus-post-lstm-performance/13616), and [here](\r\nhttps://github.com/enerrio/OpenAI-XOR#results). So, I think a library which offers post-padding as default, should also include pre-padding func.\r\n\r\n"}