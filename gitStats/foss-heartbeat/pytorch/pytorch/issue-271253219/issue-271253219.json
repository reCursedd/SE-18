{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3492", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3492/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3492/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3492/events", "html_url": "https://github.com/pytorch/pytorch/issues/3492", "id": 271253219, "node_id": "MDU6SXNzdWUyNzEyNTMyMTk=", "number": 3492, "title": "RuntimeError: context has already been set(multiprocessing)", "user": {"login": "zhoumingyi", "id": 23503239, "node_id": "MDQ6VXNlcjIzNTAzMjM5", "avatar_url": "https://avatars3.githubusercontent.com/u/23503239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhoumingyi", "html_url": "https://github.com/zhoumingyi", "followers_url": "https://api.github.com/users/zhoumingyi/followers", "following_url": "https://api.github.com/users/zhoumingyi/following{/other_user}", "gists_url": "https://api.github.com/users/zhoumingyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhoumingyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhoumingyi/subscriptions", "organizations_url": "https://api.github.com/users/zhoumingyi/orgs", "repos_url": "https://api.github.com/users/zhoumingyi/repos", "events_url": "https://api.github.com/users/zhoumingyi/events{/privacy}", "received_events_url": "https://api.github.com/users/zhoumingyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-05T06:51:48Z", "updated_at": "2018-05-29T23:18:17Z", "closed_at": "2017-11-05T11:12:23Z", "author_association": "NONE", "body_html": "<p>I use a spawn start methods to share CUDA tensors between processes</p>\n<pre><code>import torch\ntorch.multiprocessing.set_start_method(\"spawn\")\nimport torch.multiprocessing as mp\n\n\ndef sub_processes(A, B, D, i, j, size):\n\n    D[(j * size):((j + 1) * size), i] = torch.mul(B[:, i], A[j, i])\n\n\ndef task(A, B):\n    size1 = A.shape\n    size2 = B.shape\n    D = torch.zeros([size1[0] * size2[0], size1[1]]).cuda()\n    D.share_memory_()\n\n    for i in range(1):\n        processes = []\n        for j in range(size1[0]):\n            p = mp.Process(target=sub_processes, args=(A, B, D, i, j, size2[0]))\n            p.start()\n            processes.append(p)\n        for p in processes:\n            p.join()\n\n    return D\n\nA = torch.rand(3, 3).cuda()\nB = torch.rand(3, 3).cuda()\nC = task(A,B)\nprint(C)\n</code></pre>\n<p>It returns a wrong result and shows an error</p>\n<pre><code>/usr/bin/python3.5 /home/mingyi/\u684c\u9762/test/test.py\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 106, in spawn_main\n    exitcode = _main(fd)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 115, in _main\n    prepare(preparation_data)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 226, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 278, in _fixup_main_from_path\n    run_name=\"__mp_main__\")\n  File \"/usr/lib/python3.5/runpy.py\", line 254, in run_path\n    pkg_name=pkg_name, script_name=fname)\n  File \"/usr/lib/python3.5/runpy.py\", line 96, in _run_module_code\n    mod_name, mod_spec, pkg_name, script_name)\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/home/mingyi/\u684c\u9762/test/test.py\", line 2, in &lt;module&gt;\n    torch.multiprocessing.set_start_method(\"spawn\")\n  File \"/usr/lib/python3.5/multiprocessing/context.py\", line 231, in set_start_method\n    raise RuntimeError('context has already been set')\nRuntimeError: context has already been set\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 106, in spawn_main\n    exitcode = _main(fd)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 115, in _main\n    prepare(preparation_data)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 226, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 278, in _fixup_main_from_path\n    run_name=\"__mp_main__\")\n  File \"/usr/lib/python3.5/runpy.py\", line 254, in run_path\n    pkg_name=pkg_name, script_name=fname)\n  File \"/usr/lib/python3.5/runpy.py\", line 96, in _run_module_code\n    mod_name, mod_spec, pkg_name, script_name)\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/home/mingyi/\u684c\u9762/test/test.py\", line 2, in &lt;module&gt;\n    torch.multiprocessing.set_start_method(\"spawn\")\n  File \"/usr/lib/python3.5/multiprocessing/context.py\", line 231, in set_start_method\n    raise RuntimeError('context has already been set')\nRuntimeError: context has already been set\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 106, in spawn_main\n    exitcode = _main(fd)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 115, in _main\n    prepare(preparation_data)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 226, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 278, in _fixup_main_from_path\n    run_name=\"__mp_main__\")\n  File \"/usr/lib/python3.5/runpy.py\", line 254, in run_path\n    pkg_name=pkg_name, script_name=fname)\n  File \"/usr/lib/python3.5/runpy.py\", line 96, in _run_module_code\n    mod_name, mod_spec, pkg_name, script_name)\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/home/mingyi/\u684c\u9762/test/test.py\", line 2, in &lt;module&gt;\n    torch.multiprocessing.set_start_method(\"spawn\")\n  File \"/usr/lib/python3.5/multiprocessing/context.py\", line 231, in set_start_method\n    raise RuntimeError('context has already been set')\nRuntimeError: context has already been set\n\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n[torch.cuda.FloatTensor of size 9x3 (GPU 0)]\n\n\nProcess finished with exit code 0\n</code></pre>", "body_text": "I use a spawn start methods to share CUDA tensors between processes\nimport torch\ntorch.multiprocessing.set_start_method(\"spawn\")\nimport torch.multiprocessing as mp\n\n\ndef sub_processes(A, B, D, i, j, size):\n\n    D[(j * size):((j + 1) * size), i] = torch.mul(B[:, i], A[j, i])\n\n\ndef task(A, B):\n    size1 = A.shape\n    size2 = B.shape\n    D = torch.zeros([size1[0] * size2[0], size1[1]]).cuda()\n    D.share_memory_()\n\n    for i in range(1):\n        processes = []\n        for j in range(size1[0]):\n            p = mp.Process(target=sub_processes, args=(A, B, D, i, j, size2[0]))\n            p.start()\n            processes.append(p)\n        for p in processes:\n            p.join()\n\n    return D\n\nA = torch.rand(3, 3).cuda()\nB = torch.rand(3, 3).cuda()\nC = task(A,B)\nprint(C)\n\nIt returns a wrong result and shows an error\n/usr/bin/python3.5 /home/mingyi/\u684c\u9762/test/test.py\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 106, in spawn_main\n    exitcode = _main(fd)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 115, in _main\n    prepare(preparation_data)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 226, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 278, in _fixup_main_from_path\n    run_name=\"__mp_main__\")\n  File \"/usr/lib/python3.5/runpy.py\", line 254, in run_path\n    pkg_name=pkg_name, script_name=fname)\n  File \"/usr/lib/python3.5/runpy.py\", line 96, in _run_module_code\n    mod_name, mod_spec, pkg_name, script_name)\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/home/mingyi/\u684c\u9762/test/test.py\", line 2, in <module>\n    torch.multiprocessing.set_start_method(\"spawn\")\n  File \"/usr/lib/python3.5/multiprocessing/context.py\", line 231, in set_start_method\n    raise RuntimeError('context has already been set')\nRuntimeError: context has already been set\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 106, in spawn_main\n    exitcode = _main(fd)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 115, in _main\n    prepare(preparation_data)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 226, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 278, in _fixup_main_from_path\n    run_name=\"__mp_main__\")\n  File \"/usr/lib/python3.5/runpy.py\", line 254, in run_path\n    pkg_name=pkg_name, script_name=fname)\n  File \"/usr/lib/python3.5/runpy.py\", line 96, in _run_module_code\n    mod_name, mod_spec, pkg_name, script_name)\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/home/mingyi/\u684c\u9762/test/test.py\", line 2, in <module>\n    torch.multiprocessing.set_start_method(\"spawn\")\n  File \"/usr/lib/python3.5/multiprocessing/context.py\", line 231, in set_start_method\n    raise RuntimeError('context has already been set')\nRuntimeError: context has already been set\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 106, in spawn_main\n    exitcode = _main(fd)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 115, in _main\n    prepare(preparation_data)\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 226, in prepare\n    _fixup_main_from_path(data['init_main_from_path'])\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 278, in _fixup_main_from_path\n    run_name=\"__mp_main__\")\n  File \"/usr/lib/python3.5/runpy.py\", line 254, in run_path\n    pkg_name=pkg_name, script_name=fname)\n  File \"/usr/lib/python3.5/runpy.py\", line 96, in _run_module_code\n    mod_name, mod_spec, pkg_name, script_name)\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/home/mingyi/\u684c\u9762/test/test.py\", line 2, in <module>\n    torch.multiprocessing.set_start_method(\"spawn\")\n  File \"/usr/lib/python3.5/multiprocessing/context.py\", line 231, in set_start_method\n    raise RuntimeError('context has already been set')\nRuntimeError: context has already been set\n\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n    0     0     0\n[torch.cuda.FloatTensor of size 9x3 (GPU 0)]\n\n\nProcess finished with exit code 0", "body": "I use a spawn start methods to share CUDA tensors between processes\r\n\r\n```\r\nimport torch\r\ntorch.multiprocessing.set_start_method(\"spawn\")\r\nimport torch.multiprocessing as mp\r\n\r\n\r\ndef sub_processes(A, B, D, i, j, size):\r\n\r\n    D[(j * size):((j + 1) * size), i] = torch.mul(B[:, i], A[j, i])\r\n\r\n\r\ndef task(A, B):\r\n    size1 = A.shape\r\n    size2 = B.shape\r\n    D = torch.zeros([size1[0] * size2[0], size1[1]]).cuda()\r\n    D.share_memory_()\r\n\r\n    for i in range(1):\r\n        processes = []\r\n        for j in range(size1[0]):\r\n            p = mp.Process(target=sub_processes, args=(A, B, D, i, j, size2[0]))\r\n            p.start()\r\n            processes.append(p)\r\n        for p in processes:\r\n            p.join()\r\n\r\n    return D\r\n\r\nA = torch.rand(3, 3).cuda()\r\nB = torch.rand(3, 3).cuda()\r\nC = task(A,B)\r\nprint(C)\r\n```\r\nIt returns a wrong result and shows an error\r\n\r\n```\r\n/usr/bin/python3.5 /home/mingyi/\u684c\u9762/test/test.py\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 106, in spawn_main\r\n    exitcode = _main(fd)\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 115, in _main\r\n    prepare(preparation_data)\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 226, in prepare\r\n    _fixup_main_from_path(data['init_main_from_path'])\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 278, in _fixup_main_from_path\r\n    run_name=\"__mp_main__\")\r\n  File \"/usr/lib/python3.5/runpy.py\", line 254, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"/usr/lib/python3.5/runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/mingyi/\u684c\u9762/test/test.py\", line 2, in <module>\r\n    torch.multiprocessing.set_start_method(\"spawn\")\r\n  File \"/usr/lib/python3.5/multiprocessing/context.py\", line 231, in set_start_method\r\n    raise RuntimeError('context has already been set')\r\nRuntimeError: context has already been set\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 106, in spawn_main\r\n    exitcode = _main(fd)\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 115, in _main\r\n    prepare(preparation_data)\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 226, in prepare\r\n    _fixup_main_from_path(data['init_main_from_path'])\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 278, in _fixup_main_from_path\r\n    run_name=\"__mp_main__\")\r\n  File \"/usr/lib/python3.5/runpy.py\", line 254, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"/usr/lib/python3.5/runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/mingyi/\u684c\u9762/test/test.py\", line 2, in <module>\r\n    torch.multiprocessing.set_start_method(\"spawn\")\r\n  File \"/usr/lib/python3.5/multiprocessing/context.py\", line 231, in set_start_method\r\n    raise RuntimeError('context has already been set')\r\nRuntimeError: context has already been set\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 106, in spawn_main\r\n    exitcode = _main(fd)\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 115, in _main\r\n    prepare(preparation_data)\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 226, in prepare\r\n    _fixup_main_from_path(data['init_main_from_path'])\r\n  File \"/usr/lib/python3.5/multiprocessing/spawn.py\", line 278, in _fixup_main_from_path\r\n    run_name=\"__mp_main__\")\r\n  File \"/usr/lib/python3.5/runpy.py\", line 254, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"/usr/lib/python3.5/runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/mingyi/\u684c\u9762/test/test.py\", line 2, in <module>\r\n    torch.multiprocessing.set_start_method(\"spawn\")\r\n  File \"/usr/lib/python3.5/multiprocessing/context.py\", line 231, in set_start_method\r\n    raise RuntimeError('context has already been set')\r\nRuntimeError: context has already been set\r\n\r\n    0     0     0\r\n    0     0     0\r\n    0     0     0\r\n    0     0     0\r\n    0     0     0\r\n    0     0     0\r\n    0     0     0\r\n    0     0     0\r\n    0     0     0\r\n[torch.cuda.FloatTensor of size 9x3 (GPU 0)]\r\n\r\n\r\nProcess finished with exit code 0\r\n```\r\n"}