{"url": "https://api.github.com/repos/pytorch/pytorch/issues/6110", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/6110/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/6110/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/6110/events", "html_url": "https://github.com/pytorch/pytorch/pull/6110", "id": 309836205, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc4Mzg5OTg0", "number": 6110, "title": "Fix bilinear performance regression", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2018-03-29T17:16:57Z", "updated_at": "2018-11-23T15:42:07Z", "closed_at": "2018-04-16T18:41:48Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/6110", "html_url": "https://github.com/pytorch/pytorch/pull/6110", "diff_url": "https://github.com/pytorch/pytorch/pull/6110.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/6110.patch"}, "body_html": "<p>The current implementation of <code>bilinar</code> uses a matrix multiplication approach. This creates a large intermediate matrix (batch * output dimension * input dimension). Relative to the previous pure python approach, this caused severe performance regression (600ms vs. 18ms for 300x100x200 weights and a batch of 50 on CPU, and also quadratic memory).<br>\nThe attached change restores the performance using the previous strategy of looping over output features. It implements forward, backward, and double backward as native ATen code.</p>\n<p>Credits:</p>\n<ul>\n<li>Martin Tutek reported the regression and pinpointed the problem</li>\n<li>Adam Paszke patiently answered my questions about ATen<br>\nI would not have been able to prepare this without you, thank you!</li>\n</ul>", "body_text": "The current implementation of bilinar uses a matrix multiplication approach. This creates a large intermediate matrix (batch * output dimension * input dimension). Relative to the previous pure python approach, this caused severe performance regression (600ms vs. 18ms for 300x100x200 weights and a batch of 50 on CPU, and also quadratic memory).\nThe attached change restores the performance using the previous strategy of looping over output features. It implements forward, backward, and double backward as native ATen code.\nCredits:\n\nMartin Tutek reported the regression and pinpointed the problem\nAdam Paszke patiently answered my questions about ATen\nI would not have been able to prepare this without you, thank you!", "body": "The current implementation of `bilinar` uses a matrix multiplication approach. This creates a large intermediate matrix (batch * output dimension * input dimension). Relative to the previous pure python approach, this caused severe performance regression (600ms vs. 18ms for 300x100x200 weights and a batch of 50 on CPU, and also quadratic memory).\r\nThe attached change restores the performance using the previous strategy of looping over output features. It implements forward, backward, and double backward as native ATen code.\r\n\r\nCredits:\r\n- Martin Tutek reported the regression and pinpointed the problem\r\n- Adam Paszke patiently answered my questions about ATen\r\nI would not have been able to prepare this without you, thank you!\r\n"}