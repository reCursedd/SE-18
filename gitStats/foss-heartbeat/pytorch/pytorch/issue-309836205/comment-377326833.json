{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/377326833", "html_url": "https://github.com/pytorch/pytorch/pull/6110#issuecomment-377326833", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6110", "id": 377326833, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzMyNjgzMw==", "user": {"login": "elanmart", "id": 10772830, "node_id": "MDQ6VXNlcjEwNzcyODMw", "avatar_url": "https://avatars3.githubusercontent.com/u/10772830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elanmart", "html_url": "https://github.com/elanmart", "followers_url": "https://api.github.com/users/elanmart/followers", "following_url": "https://api.github.com/users/elanmart/following{/other_user}", "gists_url": "https://api.github.com/users/elanmart/gists{/gist_id}", "starred_url": "https://api.github.com/users/elanmart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elanmart/subscriptions", "organizations_url": "https://api.github.com/users/elanmart/orgs", "repos_url": "https://api.github.com/users/elanmart/repos", "events_url": "https://api.github.com/users/elanmart/events{/privacy}", "received_events_url": "https://api.github.com/users/elanmart/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-29T18:20:18Z", "updated_at": "2018-03-29T18:20:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> I don't know if Tom used it, but there was a Python version before:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/pytorch/pytorch/blob/04edb8948ac3237126262c39f21e780fbb326b54/torch/nn/_functions/linear.py#L5-L58\">pytorch/torch/nn/_functions/linear.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 5 to 58\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/pytorch/pytorch/commit/04edb8948ac3237126262c39f21e780fbb326b54\">04edb89</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L5\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"5\"></td>\n          <td id=\"LC5\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Bilinear</span>(<span class=\"pl-e\">Function</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L6\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"6\"></td>\n          <td id=\"LC6\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L7\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"7\"></td>\n          <td id=\"LC7\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-en\">@</span><span class=\"pl-c1\">staticmethod</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L8\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"8\"></td>\n          <td id=\"LC8\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">def</span> <span class=\"pl-en\">forward</span>(<span class=\"pl-smi\">ctx</span>, <span class=\"pl-smi\">input1</span>, <span class=\"pl-smi\">input2</span>, <span class=\"pl-smi\">weight</span>, <span class=\"pl-smi\">bias</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L9\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"9\"></td>\n          <td id=\"LC9\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         ctx.save_for_backward(input1, input2, weight, bias) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L10\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"10\"></td>\n          <td id=\"LC10\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L11\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"11\"></td>\n          <td id=\"LC11\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         output <span class=\"pl-k\">=</span> input1.new(input1.size(<span class=\"pl-c1\">0</span>), weight.size(<span class=\"pl-c1\">0</span>)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L12\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"12\"></td>\n          <td id=\"LC12\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L13\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"13\"></td>\n          <td id=\"LC13\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         buff <span class=\"pl-k\">=</span> input1.new() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L14\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"14\"></td>\n          <td id=\"LC14\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L15\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"15\"></td>\n          <td id=\"LC15\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c\"><span class=\"pl-c\">#</span> compute output scores:</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L16\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"16\"></td>\n          <td id=\"LC16\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">for</span> k, w <span class=\"pl-k\">in</span> <span class=\"pl-c1\">enumerate</span>(weight): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L17\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"17\"></td>\n          <td id=\"LC17\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             torch.mm(input1, w, <span class=\"pl-v\">out</span><span class=\"pl-k\">=</span>buff) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L18\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"18\"></td>\n          <td id=\"LC18\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             buff.mul_(input2) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L19\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"19\"></td>\n          <td id=\"LC19\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             torch.sum(buff, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">out</span><span class=\"pl-k\">=</span>output.narrow(<span class=\"pl-c1\">1</span>, k, <span class=\"pl-c1\">1</span>)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L20\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"20\"></td>\n          <td id=\"LC20\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L21\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"21\"></td>\n          <td id=\"LC21\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">if</span> bias <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L22\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"22\"></td>\n          <td id=\"LC22\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             output.add_(bias.expand_as(output)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L23\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"23\"></td>\n          <td id=\"LC23\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L24\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"24\"></td>\n          <td id=\"LC24\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">return</span> output </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L25\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"25\"></td>\n          <td id=\"LC25\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L26\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"26\"></td>\n          <td id=\"LC26\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-en\">@</span><span class=\"pl-c1\">staticmethod</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L27\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"27\"></td>\n          <td id=\"LC27\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">def</span> <span class=\"pl-en\">backward</span>(<span class=\"pl-smi\">ctx</span>, <span class=\"pl-smi\">grad_output</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L28\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"28\"></td>\n          <td id=\"LC28\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         input1, input2, weight, bias <span class=\"pl-k\">=</span> ctx.saved_variables </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L29\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"29\"></td>\n          <td id=\"LC29\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         grad_input1 <span class=\"pl-k\">=</span> grad_input2 <span class=\"pl-k\">=</span> grad_weight <span class=\"pl-k\">=</span> grad_bias <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L30\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"30\"></td>\n          <td id=\"LC30\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L31\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"31\"></td>\n          <td id=\"LC31\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         buff <span class=\"pl-k\">=</span> Variable(input1.data.new()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L32\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"32\"></td>\n          <td id=\"LC32\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L33\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"33\"></td>\n          <td id=\"LC33\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">if</span> ctx.needs_input_grad[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">or</span> ctx.needs_input_grad[<span class=\"pl-c1\">1</span>]: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L34\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"34\"></td>\n          <td id=\"LC34\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             grad_input1 <span class=\"pl-k\">=</span> torch.mm(input2, weight[<span class=\"pl-c1\">0</span>].t()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L35\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"35\"></td>\n          <td id=\"LC35\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             grad_input1 <span class=\"pl-k\">=</span> grad_input1.mul(grad_output.narrow(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>).expand(grad_input1.size())) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L36\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"36\"></td>\n          <td id=\"LC36\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             grad_input2 <span class=\"pl-k\">=</span> torch.mm(input1, weight[<span class=\"pl-c1\">0</span>]) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L37\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"37\"></td>\n          <td id=\"LC37\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             grad_input2 <span class=\"pl-k\">=</span> grad_input2.mul(grad_output.narrow(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>).expand(grad_input2.size())) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L38\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"38\"></td>\n          <td id=\"LC38\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L39\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"39\"></td>\n          <td id=\"LC39\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             <span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1</span>, weight.size(<span class=\"pl-c1\">0</span>)): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L40\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"40\"></td>\n          <td id=\"LC40\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 buff <span class=\"pl-k\">=</span> input2.mm(weight[k].t()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L41\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"41\"></td>\n          <td id=\"LC41\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 buff <span class=\"pl-k\">=</span> buff.mul(grad_output.narrow(<span class=\"pl-c1\">1</span>, k, <span class=\"pl-c1\">1</span>).expand(grad_input1.size())) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L42\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"42\"></td>\n          <td id=\"LC42\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 grad_input1.add_(buff) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L43\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"43\"></td>\n          <td id=\"LC43\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L44\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"44\"></td>\n          <td id=\"LC44\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 buff <span class=\"pl-k\">=</span> input1.mm(weight[k]) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L45\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"45\"></td>\n          <td id=\"LC45\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 buff <span class=\"pl-k\">=</span> buff.mul(grad_output.narrow(<span class=\"pl-c1\">1</span>, k, <span class=\"pl-c1\">1</span>).expand(grad_input2.size())) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L46\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"46\"></td>\n          <td id=\"LC46\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 grad_input2.add_(buff) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L47\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"47\"></td>\n          <td id=\"LC47\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L48\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"48\"></td>\n          <td id=\"LC48\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         grad_weight <span class=\"pl-k\">=</span> Variable(weight.data.new(weight.size())) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L49\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"49\"></td>\n          <td id=\"LC49\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">if</span> ctx.needs_input_grad[<span class=\"pl-c1\">2</span>]: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L50\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"50\"></td>\n          <td id=\"LC50\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             <span class=\"pl-c\"><span class=\"pl-c\">#</span> accumulate parameter gradients:</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L51\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"51\"></td>\n          <td id=\"LC51\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             <span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(weight.size(<span class=\"pl-c1\">0</span>)): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L52\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"52\"></td>\n          <td id=\"LC52\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 buff <span class=\"pl-k\">=</span> input1.mul(grad_output.narrow(<span class=\"pl-c1\">1</span>, k, <span class=\"pl-c1\">1</span>).expand_as(input1)) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L53\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"53\"></td>\n          <td id=\"LC53\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">                 grad_weight[k] <span class=\"pl-k\">=</span> torch.mm(buff.t(), input2) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L54\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"54\"></td>\n          <td id=\"LC54\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L55\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"55\"></td>\n          <td id=\"LC55\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">if</span> bias <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">and</span> ctx.needs_input_grad[<span class=\"pl-c1\">3</span>]: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L56\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"56\"></td>\n          <td id=\"LC56\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">             grad_bias <span class=\"pl-k\">=</span> grad_output.sum(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L57\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"57\"></td>\n          <td id=\"LC57\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L58\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"58\"></td>\n          <td id=\"LC58\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-k\">return</span> grad_input1, grad_input2, grad_weight, grad_bias </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "@ezyang I don't know if Tom used it, but there was a Python version before:\n\n  \n    \n      pytorch/torch/nn/_functions/linear.py\n    \n    \n        Lines 5 to 58\n      in\n      04edb89\n    \n    \n    \n    \n\n        \n          \n           class Bilinear(Function): \n        \n\n        \n          \n            \n        \n\n        \n          \n               @staticmethod \n        \n\n        \n          \n               def forward(ctx, input1, input2, weight, bias=None): \n        \n\n        \n          \n                   ctx.save_for_backward(input1, input2, weight, bias) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   output = input1.new(input1.size(0), weight.size(0)) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   buff = input1.new() \n        \n\n        \n          \n            \n        \n\n        \n          \n                   # compute output scores: \n        \n\n        \n          \n                   for k, w in enumerate(weight): \n        \n\n        \n          \n                       torch.mm(input1, w, out=buff) \n        \n\n        \n          \n                       buff.mul_(input2) \n        \n\n        \n          \n                       torch.sum(buff, 1, keepdim=True, out=output.narrow(1, k, 1)) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   if bias is not None: \n        \n\n        \n          \n                       output.add_(bias.expand_as(output)) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   return output \n        \n\n        \n          \n            \n        \n\n        \n          \n               @staticmethod \n        \n\n        \n          \n               def backward(ctx, grad_output): \n        \n\n        \n          \n                   input1, input2, weight, bias = ctx.saved_variables \n        \n\n        \n          \n                   grad_input1 = grad_input2 = grad_weight = grad_bias = None \n        \n\n        \n          \n            \n        \n\n        \n          \n                   buff = Variable(input1.data.new()) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   if ctx.needs_input_grad[0] or ctx.needs_input_grad[1]: \n        \n\n        \n          \n                       grad_input1 = torch.mm(input2, weight[0].t()) \n        \n\n        \n          \n                       grad_input1 = grad_input1.mul(grad_output.narrow(1, 0, 1).expand(grad_input1.size())) \n        \n\n        \n          \n                       grad_input2 = torch.mm(input1, weight[0]) \n        \n\n        \n          \n                       grad_input2 = grad_input2.mul(grad_output.narrow(1, 0, 1).expand(grad_input2.size())) \n        \n\n        \n          \n            \n        \n\n        \n          \n                       for k in range(1, weight.size(0)): \n        \n\n        \n          \n                           buff = input2.mm(weight[k].t()) \n        \n\n        \n          \n                           buff = buff.mul(grad_output.narrow(1, k, 1).expand(grad_input1.size())) \n        \n\n        \n          \n                           grad_input1.add_(buff) \n        \n\n        \n          \n            \n        \n\n        \n          \n                           buff = input1.mm(weight[k]) \n        \n\n        \n          \n                           buff = buff.mul(grad_output.narrow(1, k, 1).expand(grad_input2.size())) \n        \n\n        \n          \n                           grad_input2.add_(buff) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   grad_weight = Variable(weight.data.new(weight.size())) \n        \n\n        \n          \n                   if ctx.needs_input_grad[2]: \n        \n\n        \n          \n                       # accumulate parameter gradients: \n        \n\n        \n          \n                       for k in range(weight.size(0)): \n        \n\n        \n          \n                           buff = input1.mul(grad_output.narrow(1, k, 1).expand_as(input1)) \n        \n\n        \n          \n                           grad_weight[k] = torch.mm(buff.t(), input2) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   if bias is not None and ctx.needs_input_grad[3]: \n        \n\n        \n          \n                       grad_bias = grad_output.sum(0, keepdim=False) \n        \n\n        \n          \n            \n        \n\n        \n          \n                   return grad_input1, grad_input2, grad_weight, grad_bias", "body": "@ezyang I don't know if Tom used it, but there was a Python version before: \r\nhttps://github.com/pytorch/pytorch/blob/04edb8948ac3237126262c39f21e780fbb326b54/torch/nn/_functions/linear.py#L5-L58"}