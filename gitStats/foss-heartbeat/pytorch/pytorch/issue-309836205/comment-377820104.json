{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/377820104", "html_url": "https://github.com/pytorch/pytorch/pull/6110#issuecomment-377820104", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/6110", "id": 377820104, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzgyMDEwNA==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-01T22:01:46Z", "updated_at": "2018-04-01T22:01:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So my strategy to avoid implementing double_backward would be to implement the following in C++</p>\n<pre><code>class TrilinearAndSum(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, f1, f2, f3, expand_idx1, expand_idx2, expand_idx3, summation_idxes):\n        # note idxes must be positive for now!\n        ctx.save_for_backward(f1, f2, f3)\n        for i in sorted(expand_idx1): f1 = f1.unsqueeze(i)\n        for i in sorted(expand_idx2): f2 = f2.unsqueeze(i)\n        for i in sorted(expand_idx3): f3 = f3.unsqueeze(i)\n        ctx._summation_idxes = summation_idxes\n        ctx._expand_idxes = (expand_idx1, expand_idx2, expand_idx3)\n        return (f1*f2*f3).sum(summation_idxes)\n    @staticmethod\n    def backward(ctx, grad_out):\n        f1, f2, f3 = ctx.saved_tensors\n        summation_idxes = ctx._summation_idxes\n        expand_idx1, expand_idx2, expand_idx3 = ctx._expand_idxes\n        g1 = TrilinearAndSum.apply(grad_out, f2, f3, summation_idxes, expand_idx2, expand_idx3, expand_idx1)\n        g2 = TrilinearAndSum.apply(f1, grad_out, f3, expand_idx1, summation_idxes, expand_idx3, expand_idx2)\n        g3 = TrilinearAndSum.apply(f1, f2, grad_out, expand_idx1, expand_idx2, summation_idxes, expand_idx3)\n        return g1, g2, g3, None, None, None, None   \n</code></pre>\n<p>This would benefit from the bitset representation for a list of dimensions that I try to implement in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"310155469\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/6152\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/6152/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/6152\">#6152</a>, but that does not seem work for windows...</p>", "body_text": "So my strategy to avoid implementing double_backward would be to implement the following in C++\nclass TrilinearAndSum(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, f1, f2, f3, expand_idx1, expand_idx2, expand_idx3, summation_idxes):\n        # note idxes must be positive for now!\n        ctx.save_for_backward(f1, f2, f3)\n        for i in sorted(expand_idx1): f1 = f1.unsqueeze(i)\n        for i in sorted(expand_idx2): f2 = f2.unsqueeze(i)\n        for i in sorted(expand_idx3): f3 = f3.unsqueeze(i)\n        ctx._summation_idxes = summation_idxes\n        ctx._expand_idxes = (expand_idx1, expand_idx2, expand_idx3)\n        return (f1*f2*f3).sum(summation_idxes)\n    @staticmethod\n    def backward(ctx, grad_out):\n        f1, f2, f3 = ctx.saved_tensors\n        summation_idxes = ctx._summation_idxes\n        expand_idx1, expand_idx2, expand_idx3 = ctx._expand_idxes\n        g1 = TrilinearAndSum.apply(grad_out, f2, f3, summation_idxes, expand_idx2, expand_idx3, expand_idx1)\n        g2 = TrilinearAndSum.apply(f1, grad_out, f3, expand_idx1, summation_idxes, expand_idx3, expand_idx2)\n        g3 = TrilinearAndSum.apply(f1, f2, grad_out, expand_idx1, expand_idx2, summation_idxes, expand_idx3)\n        return g1, g2, g3, None, None, None, None   \n\nThis would benefit from the bitset representation for a list of dimensions that I try to implement in #6152, but that does not seem work for windows...", "body": "So my strategy to avoid implementing double_backward would be to implement the following in C++\r\n```\r\nclass TrilinearAndSum(torch.autograd.Function):\r\n    @staticmethod\r\n    def forward(ctx, f1, f2, f3, expand_idx1, expand_idx2, expand_idx3, summation_idxes):\r\n        # note idxes must be positive for now!\r\n        ctx.save_for_backward(f1, f2, f3)\r\n        for i in sorted(expand_idx1): f1 = f1.unsqueeze(i)\r\n        for i in sorted(expand_idx2): f2 = f2.unsqueeze(i)\r\n        for i in sorted(expand_idx3): f3 = f3.unsqueeze(i)\r\n        ctx._summation_idxes = summation_idxes\r\n        ctx._expand_idxes = (expand_idx1, expand_idx2, expand_idx3)\r\n        return (f1*f2*f3).sum(summation_idxes)\r\n    @staticmethod\r\n    def backward(ctx, grad_out):\r\n        f1, f2, f3 = ctx.saved_tensors\r\n        summation_idxes = ctx._summation_idxes\r\n        expand_idx1, expand_idx2, expand_idx3 = ctx._expand_idxes\r\n        g1 = TrilinearAndSum.apply(grad_out, f2, f3, summation_idxes, expand_idx2, expand_idx3, expand_idx1)\r\n        g2 = TrilinearAndSum.apply(f1, grad_out, f3, expand_idx1, summation_idxes, expand_idx3, expand_idx2)\r\n        g3 = TrilinearAndSum.apply(f1, f2, grad_out, expand_idx1, expand_idx2, summation_idxes, expand_idx3)\r\n        return g1, g2, g3, None, None, None, None   \r\n```\r\nThis would benefit from the bitset representation for a list of dimensions that I try to implement in #6152, but that does not seem work for windows..."}