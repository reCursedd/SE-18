{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/374606968", "html_url": "https://github.com/pytorch/pytorch/issues/5902#issuecomment-374606968", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5902", "id": 374606968, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDYwNjk2OA==", "user": {"login": "jseppanen", "id": 83203, "node_id": "MDQ6VXNlcjgzMjAz", "avatar_url": "https://avatars0.githubusercontent.com/u/83203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseppanen", "html_url": "https://github.com/jseppanen", "followers_url": "https://api.github.com/users/jseppanen/followers", "following_url": "https://api.github.com/users/jseppanen/following{/other_user}", "gists_url": "https://api.github.com/users/jseppanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseppanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseppanen/subscriptions", "organizations_url": "https://api.github.com/users/jseppanen/orgs", "repos_url": "https://api.github.com/users/jseppanen/repos", "events_url": "https://api.github.com/users/jseppanen/events{/privacy}", "received_events_url": "https://api.github.com/users/jseppanen/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-20T13:57:20Z", "updated_at": "2018-03-20T13:57:20Z", "author_association": "NONE", "body_html": "<p>Yes, thanks for the suggestion, that helps! So it seems that pandas dataframes are not really compatible with DataLoader.</p>\n<p>For reference, here's a rewritten ParquetData that doesn't trigger the memory usage increase:</p>\n<pre><code>class ParquetData(Dataset):\n    def __init__(self, path):\n        super().__init__()\n        rawdata = pd.read_parquet(path)\n        self.cc = np.array(rawdata['cc'].tolist())\n        self.ii = np.array(rawdata['ii'].tolist())\n        self.jj = np.array(rawdata['jj'].tolist())\n        self.vv = np.array(rawdata['vv'].tolist())\n        print(f'loaded {len(self)} examples from {path}')\n\n    def __len__(self):\n        return len(self.cc)\n\n    def __getitem__(self, i):\n        image = np.zeros((48, 64, 36), dtype=np.float32)\n        image[self.cc[i], self.ii[i], self.jj[i]] = self.vv[i]\n        input = {\n            'image': image\n        }\n        target = {\n            'label': 0\n        }\n        return input, target\n</code></pre>", "body_text": "Yes, thanks for the suggestion, that helps! So it seems that pandas dataframes are not really compatible with DataLoader.\nFor reference, here's a rewritten ParquetData that doesn't trigger the memory usage increase:\nclass ParquetData(Dataset):\n    def __init__(self, path):\n        super().__init__()\n        rawdata = pd.read_parquet(path)\n        self.cc = np.array(rawdata['cc'].tolist())\n        self.ii = np.array(rawdata['ii'].tolist())\n        self.jj = np.array(rawdata['jj'].tolist())\n        self.vv = np.array(rawdata['vv'].tolist())\n        print(f'loaded {len(self)} examples from {path}')\n\n    def __len__(self):\n        return len(self.cc)\n\n    def __getitem__(self, i):\n        image = np.zeros((48, 64, 36), dtype=np.float32)\n        image[self.cc[i], self.ii[i], self.jj[i]] = self.vv[i]\n        input = {\n            'image': image\n        }\n        target = {\n            'label': 0\n        }\n        return input, target", "body": "Yes, thanks for the suggestion, that helps! So it seems that pandas dataframes are not really compatible with DataLoader.\r\n\r\nFor reference, here's a rewritten ParquetData that doesn't trigger the memory usage increase:\r\n```\r\nclass ParquetData(Dataset):\r\n    def __init__(self, path):\r\n        super().__init__()\r\n        rawdata = pd.read_parquet(path)\r\n        self.cc = np.array(rawdata['cc'].tolist())\r\n        self.ii = np.array(rawdata['ii'].tolist())\r\n        self.jj = np.array(rawdata['jj'].tolist())\r\n        self.vv = np.array(rawdata['vv'].tolist())\r\n        print(f'loaded {len(self)} examples from {path}')\r\n\r\n    def __len__(self):\r\n        return len(self.cc)\r\n\r\n    def __getitem__(self, i):\r\n        image = np.zeros((48, 64, 36), dtype=np.float32)\r\n        image[self.cc[i], self.ii[i], self.jj[i]] = self.vv[i]\r\n        input = {\r\n            'image': image\r\n        }\r\n        target = {\r\n            'label': 0\r\n        }\r\n        return input, target\r\n```"}