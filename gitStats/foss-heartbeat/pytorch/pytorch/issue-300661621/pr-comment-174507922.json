{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174507922", "pull_request_review_id": 103877609, "id": 174507922, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDUwNzkyMg==", "diff_hunk": "@@ -196,13 +234,13 @@ Tensor embedding_bag_backward_cpu(const Tensor &grad_, const Tensor &indices__,\n       if (grad.type().scalarType() == kFloat) {\n         auto igwd = index_grad_weight.data<float>();\n         auto gd = grad.data<float>();\n-        THFloatBlas_axpy(ddim, (float)scale, gd + ddim * source, 1,\n-                         igwd + ddim * index, 1);\n+        axpy<float>(ddim, (float)scale, gd + ddim * source, 1,\n+                    igwd + ddim * index, 1);\n       } else if (grad.type().scalarType() == kDouble) {\n         auto igwd = index_grad_weight.data<double>();\n         auto gd = grad.data<double>();\n-        THDoubleBlas_axpy(ddim, (double)scale, gd + ddim * source, 1,\n-                          igwd + ddim * index, 1);\n+        axpy<double>(ddim, (double)scale, gd + ddim * source, 1,\n+                     igwd + ddim * index, 1);", "path": "aten/src/ATen/native/EmbeddingBag.cpp", "position": null, "original_position": 91, "commit_id": "daa1c07d381679bbc238af2350c94e3971df88f4", "original_commit_id": "4a6d97a8c781da49182ccf9736e50e0615ef82a7", "user": {"login": "martinraison", "id": 2560662, "node_id": "MDQ6VXNlcjI1NjA2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2560662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinraison", "html_url": "https://github.com/martinraison", "followers_url": "https://api.github.com/users/martinraison/followers", "following_url": "https://api.github.com/users/martinraison/following{/other_user}", "gists_url": "https://api.github.com/users/martinraison/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinraison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinraison/subscriptions", "organizations_url": "https://api.github.com/users/martinraison/orgs", "repos_url": "https://api.github.com/users/martinraison/repos", "events_url": "https://api.github.com/users/martinraison/events{/privacy}", "received_events_url": "https://api.github.com/users/martinraison/received_events", "type": "User", "site_admin": false}, "body": "At least on the Python side, `EmbeddingBag` uses `torch.Tensor` to instantiate the weight matrix. So I think we can remove the last else and add a `checkScalarTypes` call as above. We could leave it if we think there's a valid reason for someone to call this directly with a different type, but even then the performance would likely be much worse.", "created_at": "2018-03-14T15:46:52Z", "updated_at": "2018-11-23T15:40:43Z", "html_url": "https://github.com/pytorch/pytorch/pull/5433#discussion_r174507922", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/5433", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/174507922"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/5433#discussion_r174507922"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/5433"}}, "body_html": "<p>At least on the Python side, <code>EmbeddingBag</code> uses <code>torch.Tensor</code> to instantiate the weight matrix. So I think we can remove the last else and add a <code>checkScalarTypes</code> call as above. We could leave it if we think there's a valid reason for someone to call this directly with a different type, but even then the performance would likely be much worse.</p>", "body_text": "At least on the Python side, EmbeddingBag uses torch.Tensor to instantiate the weight matrix. So I think we can remove the last else and add a checkScalarTypes call as above. We could leave it if we think there's a valid reason for someone to call this directly with a different type, but even then the performance would likely be much worse.", "in_reply_to_id": 174503882}