{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/373019165", "html_url": "https://github.com/pytorch/pytorch/pull/5433#issuecomment-373019165", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/5433", "id": 373019165, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzAxOTE2NQ==", "user": {"login": "martinraison", "id": 2560662, "node_id": "MDQ6VXNlcjI1NjA2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2560662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinraison", "html_url": "https://github.com/martinraison", "followers_url": "https://api.github.com/users/martinraison/followers", "following_url": "https://api.github.com/users/martinraison/following{/other_user}", "gists_url": "https://api.github.com/users/martinraison/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinraison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinraison/subscriptions", "organizations_url": "https://api.github.com/users/martinraison/orgs", "repos_url": "https://api.github.com/users/martinraison/repos", "events_url": "https://api.github.com/users/martinraison/events{/privacy}", "received_events_url": "https://api.github.com/users/martinraison/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-14T13:23:58Z", "updated_at": "2018-03-14T13:25:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Update: I tried moving the logic to EmbeddingBag.cpp with the following function</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">index_select_add</span>(<span class=\"pl-k\">const</span> Tensor &amp;select_indices,\n                             <span class=\"pl-k\">const</span> Tensor &amp;add_indices,\n                             <span class=\"pl-k\">const</span> Tensor &amp;src,\n                             Tensor &amp;output) {\n  <span class=\"pl-k\">auto</span> add_indices_data = add_indices.<span class=\"pl-smi\">data</span>&lt;<span class=\"pl-c1\">int64_t</span>&gt;();\n  <span class=\"pl-k\">auto</span> select_indices_data = select_indices.<span class=\"pl-smi\">data</span>&lt;<span class=\"pl-c1\">int64_t</span>&gt;();\n  <span class=\"pl-k\">auto</span> numel = add_indices.<span class=\"pl-c1\">numel</span>();\n  <span class=\"pl-k\">for</span> (<span class=\"pl-c1\">int64_t</span> i = <span class=\"pl-c1\">0</span>; i &lt; numel; i++) {\n    output[add_indices_data[i]] += src[select_indices_data[i]];\n  }\n}</pre></div>\n<p>However this slows things down dramatically (the resulting code is slower than even the original code by a factor of 2 or 3). Am I missing anything or is it just because of the dynamic wrapping? Any easy way to speed this up? (I saw that there are \"accessors\", but it doesn't seem to allow iterating over tensor slices easily).</p>", "body_text": "Update: I tried moving the logic to EmbeddingBag.cpp with the following function\nstatic void index_select_add(const Tensor &select_indices,\n                             const Tensor &add_indices,\n                             const Tensor &src,\n                             Tensor &output) {\n  auto add_indices_data = add_indices.data<int64_t>();\n  auto select_indices_data = select_indices.data<int64_t>();\n  auto numel = add_indices.numel();\n  for (int64_t i = 0; i < numel; i++) {\n    output[add_indices_data[i]] += src[select_indices_data[i]];\n  }\n}\nHowever this slows things down dramatically (the resulting code is slower than even the original code by a factor of 2 or 3). Am I missing anything or is it just because of the dynamic wrapping? Any easy way to speed this up? (I saw that there are \"accessors\", but it doesn't seem to allow iterating over tensor slices easily).", "body": "Update: I tried moving the logic to EmbeddingBag.cpp with the following function\r\n\r\n```C++\r\nstatic void index_select_add(const Tensor &select_indices,\r\n                             const Tensor &add_indices,\r\n                             const Tensor &src,\r\n                             Tensor &output) {\r\n  auto add_indices_data = add_indices.data<int64_t>();\r\n  auto select_indices_data = select_indices.data<int64_t>();\r\n  auto numel = add_indices.numel();\r\n  for (int64_t i = 0; i < numel; i++) {\r\n    output[add_indices_data[i]] += src[select_indices_data[i]];\r\n  }\r\n}\r\n```\r\n\r\nHowever this slows things down dramatically (the resulting code is slower than even the original code by a factor of 2 or 3). Am I missing anything or is it just because of the dynamic wrapping? Any easy way to speed this up? (I saw that there are \"accessors\", but it doesn't seem to allow iterating over tensor slices easily)."}