{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218313830", "pull_request_review_id": 156221425, "id": 218313830, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODMxMzgzMA==", "diff_hunk": "@@ -47,7 +47,9 @@ def __init__(self, probs=None, logits=None, validate_args=None):\n         if probs is not None:\n             if probs.dim() < 1:\n                 raise ValueError(\"`probs` parameter must be at least one-dimensional.\")\n-            self.probs = probs / probs.sum(-1, keepdim=True)\n+            sum_probs = probs.detach().cpu().numpy().sum(-1, keepdims=True)", "path": "torch/distributions/categorical.py", "position": 5, "original_position": 5, "commit_id": "af2a1b8fbc273d5095dffcf7ba886bdb46851b6c", "original_commit_id": "af2a1b8fbc273d5095dffcf7ba886bdb46851b6c", "user": {"login": "zuoxingdong", "id": 18168681, "node_id": "MDQ6VXNlcjE4MTY4Njgx", "avatar_url": "https://avatars0.githubusercontent.com/u/18168681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zuoxingdong", "html_url": "https://github.com/zuoxingdong", "followers_url": "https://api.github.com/users/zuoxingdong/followers", "following_url": "https://api.github.com/users/zuoxingdong/following{/other_user}", "gists_url": "https://api.github.com/users/zuoxingdong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zuoxingdong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zuoxingdong/subscriptions", "organizations_url": "https://api.github.com/users/zuoxingdong/orgs", "repos_url": "https://api.github.com/users/zuoxingdong/repos", "events_url": "https://api.github.com/users/zuoxingdong/events{/privacy}", "received_events_url": "https://api.github.com/users/zuoxingdong/received_events", "type": "User", "site_admin": false}, "body": "@vishwakftw I made the following test case\r\n\r\n```python\r\nfrom time import time\r\nimport numpy as np\r\nimport torch\r\nimport torch.nn.functional as F\r\n\r\nt = time()\r\nfor _ in range(100):\r\n    p = F.softmax(torch.randn(1, 32), -1)\r\n    p = p/p.sum(-1, keepdim=True)\r\nprint(time() - t)\r\n\r\nt = time()\r\nfor _ in range(100):\r\n    p = F.softmax(torch.randn(1, 32), -1)\r\n    \r\n    p = p/torch.from_numpy(p.detach().numpy().sum(-1, keepdims=True)).float()\r\nprint(time() - t)\r\n```\r\ngives\r\n```\r\n0.5028445720672607\r\n0.003795623779296875\r\n```\r\nthe Numpy alternative is much faster.\r\n\r\nBut anyway as @ezyang pointed out above, numpy should not be considered here. \r\n\r\nThe original motivation is in #11747 . Do you have some idea how to reimplement it without using `.sum()` function ? ", "created_at": "2018-09-18T06:42:55Z", "updated_at": "2018-11-23T15:51:33Z", "html_url": "https://github.com/pytorch/pytorch/pull/11749#discussion_r218313830", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/11749", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/218313830"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/11749#discussion_r218313830"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/11749"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23639302\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vishwakftw\">@vishwakftw</a> I made the following test case</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> time <span class=\"pl-k\">import</span> time\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> torch\n<span class=\"pl-k\">import</span> torch.nn.functional <span class=\"pl-k\">as</span> F\n\nt <span class=\"pl-k\">=</span> time()\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n    p <span class=\"pl-k\">=</span> F.softmax(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">32</span>), <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n    p <span class=\"pl-k\">=</span> p<span class=\"pl-k\">/</span>p.sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">keepdim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n<span class=\"pl-c1\">print</span>(time() <span class=\"pl-k\">-</span> t)\n\nt <span class=\"pl-k\">=</span> time()\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n    p <span class=\"pl-k\">=</span> F.softmax(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">32</span>), <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n    \n    p <span class=\"pl-k\">=</span> p<span class=\"pl-k\">/</span>torch.from_numpy(p.detach().numpy().sum(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">keepdims</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)).float()\n<span class=\"pl-c1\">print</span>(time() <span class=\"pl-k\">-</span> t)</pre></div>\n<p>gives</p>\n<pre><code>0.5028445720672607\n0.003795623779296875\n</code></pre>\n<p>the Numpy alternative is much faster.</p>\n<p>But anyway as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> pointed out above, numpy should not be considered here.</p>\n<p>The original motivation is in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"360759382\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/11747\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/11747/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/11747\">#11747</a> . Do you have some idea how to reimplement it without using <code>.sum()</code> function ?</p>", "body_text": "@vishwakftw I made the following test case\nfrom time import time\nimport numpy as np\nimport torch\nimport torch.nn.functional as F\n\nt = time()\nfor _ in range(100):\n    p = F.softmax(torch.randn(1, 32), -1)\n    p = p/p.sum(-1, keepdim=True)\nprint(time() - t)\n\nt = time()\nfor _ in range(100):\n    p = F.softmax(torch.randn(1, 32), -1)\n    \n    p = p/torch.from_numpy(p.detach().numpy().sum(-1, keepdims=True)).float()\nprint(time() - t)\ngives\n0.5028445720672607\n0.003795623779296875\n\nthe Numpy alternative is much faster.\nBut anyway as @ezyang pointed out above, numpy should not be considered here.\nThe original motivation is in #11747 . Do you have some idea how to reimplement it without using .sum() function ?", "in_reply_to_id": 218055627}