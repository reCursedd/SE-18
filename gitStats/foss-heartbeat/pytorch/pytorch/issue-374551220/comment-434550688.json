{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/434550688", "html_url": "https://github.com/pytorch/pytorch/pull/13186#issuecomment-434550688", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/13186", "id": 434550688, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDU1MDY4OA==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-31T03:42:06Z", "updated_at": "2018-10-31T03:42:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I agree that THNN code is slow. But if we were to provide such padding options directly on conv, it should still be:</p>\n<pre><code>if cudnn/mkldnn:\n  pad then conv\nelse:\n  # use thnn\n  call thnn conv with padding option that fuses the padding into the conv kernel\n</code></pre>\n<p>So this is not all pointless. Yeah, for cudnn/mkldnn, we probably want extra padding step. That sounds worth benchmarking.</p>", "body_text": "@apaszke I agree that THNN code is slow. But if we were to provide such padding options directly on conv, it should still be:\nif cudnn/mkldnn:\n  pad then conv\nelse:\n  # use thnn\n  call thnn conv with padding option that fuses the padding into the conv kernel\n\nSo this is not all pointless. Yeah, for cudnn/mkldnn, we probably want extra padding step. That sounds worth benchmarking.", "body": "@apaszke I agree that THNN code is slow. But if we were to provide such padding options directly on conv, it should still be:\r\n```\r\nif cudnn/mkldnn:\r\n  pad then conv\r\nelse:\r\n  # use thnn\r\n  call thnn conv with padding option that fuses the padding into the conv kernel\r\n```\r\n\r\nSo this is not all pointless. Yeah, for cudnn/mkldnn, we probably want extra padding step. That sounds worth benchmarking."}