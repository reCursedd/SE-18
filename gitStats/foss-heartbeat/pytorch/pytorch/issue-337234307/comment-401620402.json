{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/401620402", "html_url": "https://github.com/pytorch/pytorch/issues/9069#issuecomment-401620402", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9069", "id": 401620402, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTYyMDQwMg==", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-01T17:21:33Z", "updated_at": "2018-07-01T17:21:33Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<blockquote>\n<blockquote>\n<p>Speaking of custom backward, this should be a non-issue. We'll need to add the random ops as non-differentiable in the symbolic AD, but capturing of the mask should happen automatically as part of the derivative for mul.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> I am not very familiar with the jit structure, and not sure that I'm understanding this. Could you elaborate?</p>\n<p>About dropout, my concern was that currently dropout is traced a single <code>Dropout</code> op, hiding the random sampling step inside. So the traced graph can be run \"as-is\" with proper dropout mask sampled very time (from my understanding). But since random ops (<code>bernoulli</code> in this case) is traced as <code>prim::Constant</code>, then the graph traced is just wrong.</p>\n<p>My understanding is probably wrong somewhere. Please correct me if so!</p>", "body_text": "Speaking of custom backward, this should be a non-issue. We'll need to add the random ops as non-differentiable in the symbolic AD, but capturing of the mask should happen automatically as part of the derivative for mul.\n\n\n\n@apaszke I am not very familiar with the jit structure, and not sure that I'm understanding this. Could you elaborate?\nAbout dropout, my concern was that currently dropout is traced a single Dropout op, hiding the random sampling step inside. So the traced graph can be run \"as-is\" with proper dropout mask sampled very time (from my understanding). But since random ops (bernoulli in this case) is traced as prim::Constant, then the graph traced is just wrong.\nMy understanding is probably wrong somewhere. Please correct me if so!", "body": ">>> Speaking of custom backward, this should be a non-issue. We'll need to add the random ops as non-differentiable in the symbolic AD, but capturing of the mask should happen automatically as part of the derivative for mul.\r\n\r\n@apaszke I am not very familiar with the jit structure, and not sure that I'm understanding this. Could you elaborate? \r\n\r\nAbout dropout, my concern was that currently dropout is traced a single `Dropout` op, hiding the random sampling step inside. So the traced graph can be run \"as-is\" with proper dropout mask sampled very time (from my understanding). But since random ops (`bernoulli` in this case) is traced as `prim::Constant`, then the graph traced is just wrong.\r\n\r\nMy understanding is probably wrong somewhere. Please correct me if so!"}