{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/354020524", "html_url": "https://github.com/pytorch/pytorch/issues/4353#issuecomment-354020524", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4353", "id": 354020524, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDAyMDUyNA==", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-26T22:34:53Z", "updated_at": "2017-12-26T22:36:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>We should also add some maintainer-instructions for dealing with changing randomness sources in test_distributions.py. In particular there are two types of randomized tests:</p>\n<ol>\n<li>The easier type of randomized test are tests that should always pass but are initialized with random data. If these fail something is wrong, but it's fine to use a fixed seed.</li>\n<li>The trickier tests are statistical tests, and these are explicitly marked \"this is a randomized test\". These have a known positive failure rate (we set <code>failure_rate=1e-3</code> by default). We need to balance strength of these tests with annoyance of false alarms. One way that works is to specifically set seeds in each of the randomized tests. When a random generator occasionally changes (as in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"284111299\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4312\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/4312/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/4312\">#4312</a> ), some of these statistical tests may (rarely) fail. If one fails in this case, it's fine to increment the seed of the failing test (but you shouldn't need to increment it more than once; otherwise something is probably actually wrong).</li>\n</ol>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13564\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ezyang\">@ezyang</a> If you add a generic <code>torch.manual_seed(0)</code> in a <code>setUp()</code>, please do not modify or remove <code>_set_rng_seed()</code> calls in any tests marked \"this is a randomized test\", since these statistical tests need individual seeds.</p>", "body_text": "We should also add some maintainer-instructions for dealing with changing randomness sources in test_distributions.py. In particular there are two types of randomized tests:\n\nThe easier type of randomized test are tests that should always pass but are initialized with random data. If these fail something is wrong, but it's fine to use a fixed seed.\nThe trickier tests are statistical tests, and these are explicitly marked \"this is a randomized test\". These have a known positive failure rate (we set failure_rate=1e-3 by default). We need to balance strength of these tests with annoyance of false alarms. One way that works is to specifically set seeds in each of the randomized tests. When a random generator occasionally changes (as in #4312 ), some of these statistical tests may (rarely) fail. If one fails in this case, it's fine to increment the seed of the failing test (but you shouldn't need to increment it more than once; otherwise something is probably actually wrong).\n\n@ezyang If you add a generic torch.manual_seed(0) in a setUp(), please do not modify or remove _set_rng_seed() calls in any tests marked \"this is a randomized test\", since these statistical tests need individual seeds.", "body": "We should also add some maintainer-instructions for dealing with changing randomness sources in test_distributions.py. In particular there are two types of randomized tests:\r\n1. The easier type of randomized test are tests that should always pass but are initialized with random data. If these fail something is wrong, but it's fine to use a fixed seed.\r\n2. The trickier tests are statistical tests, and these are explicitly marked \"this is a randomized test\". These have a known positive failure rate (we set `failure_rate=1e-3` by default). We need to balance strength of these tests with annoyance of false alarms. One way that works is to specifically set seeds in each of the randomized tests. When a random generator occasionally changes (as in #4312 ), some of these statistical tests may (rarely) fail. If one fails in this case, it's fine to increment the seed of the failing test (but you shouldn't need to increment it more than once; otherwise something is probably actually wrong).\r\n\r\n@ezyang If you add a generic `torch.manual_seed(0)` in a `setUp()`, please do not modify or remove `_set_rng_seed()` calls in any tests marked \"this is a randomized test\", since these statistical tests need individual seeds."}