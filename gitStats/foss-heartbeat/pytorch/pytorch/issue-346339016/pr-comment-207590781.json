{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207590781", "pull_request_review_id": 143239145, "id": 207590781, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU5MDc4MQ==", "diff_hunk": "@@ -63,28 +61,124 @@ void propagateNode(Node* n) {\n   }\n }\n \n+void lowerIf(Block *body, Node * n) {\n+  auto graph = n->owningGraph();\n+  WithInsertPoint insert_point_guard { n };\n+\n+  std::unordered_map<Value*, Value*> value_map;\n+  auto get_value = [&](Value *v) {\n+    auto it = value_map.find(v);\n+    if (it != value_map.end())\n+      return it->second;\n+    return v;\n+  };\n+\n+  for (Node *orig : body->nodes()) {\n+    Node *clone = graph->insertNode(graph->createClone(orig, get_value));\n+    for (size_t i = 0; i < orig->outputs().size(); ++i) {\n+      value_map[orig->outputs()[i]] = clone->outputs()[i];\n+    }\n+  }\n+  for (size_t i = 0; i < n->outputs().size(); ++i) {\n+    n->outputs().at(i)->replaceAllUsesWith(get_value(body->outputs().at(i)));\n+  }\n+  // NB: destroy the node here, because it might contain side effects, like print\n+  n->destroy();\n+}\n+\n+bool isTrueConstant(Value *val) {\n+  at::optional<bool> maybe_value = constant_as<bool>(val);\n+  return maybe_value && *maybe_value;\n+}\n+\n+void lowerIf(Node *n) {\n+  if (isTrueConstant(n->input())) {\n+    lowerIf(n->blocks()[0], n);\n+  } else {\n+    lowerIf(n->blocks()[1], n);\n+  }\n+}\n+\n+//returns true if the mutated variables are changed\n+bool recomputeMutatedVariables(Node *n) {", "path": "torch/csrc/jit/passes/constant_propagation.cpp", "position": null, "original_position": 55, "commit_id": "c5f2104925bec35e14f1dc48b07870f49dbabd0d", "original_commit_id": "ae421d1c66858e6588c9ade3b3e77bbc36bb99d2", "user": {"login": "eellison", "id": 11477974, "node_id": "MDQ6VXNlcjExNDc3OTc0", "avatar_url": "https://avatars2.githubusercontent.com/u/11477974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eellison", "html_url": "https://github.com/eellison", "followers_url": "https://api.github.com/users/eellison/followers", "following_url": "https://api.github.com/users/eellison/following{/other_user}", "gists_url": "https://api.github.com/users/eellison/gists{/gist_id}", "starred_url": "https://api.github.com/users/eellison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eellison/subscriptions", "organizations_url": "https://api.github.com/users/eellison/orgs", "repos_url": "https://api.github.com/users/eellison/repos", "events_url": "https://api.github.com/users/eellison/events{/privacy}", "received_events_url": "https://api.github.com/users/eellison/received_events", "type": "User", "site_admin": false}, "body": "Sorry yea it's recomputing which values should be returned by the if node. If a node used to return (a, b) calculate if it should now only return (a), and return true if the values changed.\r\n\r\nI was following the convention of compiler.cpp in emitIf which calls them mutated_variables.", "created_at": "2018-08-03T15:56:07Z", "updated_at": "2018-11-23T15:48:42Z", "html_url": "https://github.com/pytorch/pytorch/pull/10084#discussion_r207590781", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10084", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207590781"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10084#discussion_r207590781"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10084"}}, "body_html": "<p>Sorry yea it's recomputing which values should be returned by the if node. If a node used to return (a, b) calculate if it should now only return (a), and return true if the values changed.</p>\n<p>I was following the convention of compiler.cpp in emitIf which calls them mutated_variables.</p>", "body_text": "Sorry yea it's recomputing which values should be returned by the if node. If a node used to return (a, b) calculate if it should now only return (a), and return true if the values changed.\nI was following the convention of compiler.cpp in emitIf which calls them mutated_variables.", "in_reply_to_id": 207441869}