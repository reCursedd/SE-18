{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210381072", "pull_request_review_id": 146584285, "id": 210381072, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDM4MTA3Mg==", "diff_hunk": "@@ -57,12 +55,61 @@ void propagateNode(Node* n) {\n   auto graph = n->owningGraph();\n   WithInsertPoint guard(n);\n   for (size_t i = 0; i < outputs.size(); ++i) {\n-    auto new_output = graph->insertConstant(outputs[i]);\n+    auto new_output = insertConstant(*graph, outputs[i]);\n     n->outputs()[i]->replaceAllUsesWith(new_output);\n     // let dce elimination remove n\n   }\n }\n \n+void inlineIf(Block *body, Node * n) {\n+  for(auto it = body->nodes().begin(); it != body->nodes().end();) {\n+    Node *body_node = *it;\n+    //advance iterator because after body_node is moved its next pointer will be\n+    //to n\n+    it++;\n+    body_node->moveBefore(n);\n+  }\n+  for (size_t i = 0; i < n->outputs().size(); ++i) {\n+    n->outputs().at(i)->replaceAllUsesWith(body->outputs().at(i));\n+  }\n+  // NB: destroy the node here, because it might contain side effects, like print\n+  n->destroy();\n+}\n+\n+bool isTrueConstant(Value *val) {\n+  at::optional<bool> maybe_value = constant_as<bool>(val);\n+  return maybe_value && *maybe_value;", "path": "torch/csrc/jit/passes/constant_propagation.cpp", "position": null, "original_position": 40, "commit_id": "c5f2104925bec35e14f1dc48b07870f49dbabd0d", "original_commit_id": "55bf9a436137a6fa9abc08cf42aa2b047c849ea4", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "Perhaps we should assert that it's constant here? Otherwise `inlineIf` could mistakenly take the `else` branch if the value is not a constant.", "created_at": "2018-08-15T19:28:08Z", "updated_at": "2018-11-23T15:49:26Z", "html_url": "https://github.com/pytorch/pytorch/pull/10084#discussion_r210381072", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10084", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/210381072"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10084#discussion_r210381072"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10084"}}, "body_html": "<p>Perhaps we should assert that it's constant here? Otherwise <code>inlineIf</code> could mistakenly take the <code>else</code> branch if the value is not a constant.</p>", "body_text": "Perhaps we should assert that it's constant here? Otherwise inlineIf could mistakenly take the else branch if the value is not a constant."}