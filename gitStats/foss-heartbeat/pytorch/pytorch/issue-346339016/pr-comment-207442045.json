{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207442045", "pull_request_review_id": 143053606, "id": 207442045, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzQ0MjA0NQ==", "diff_hunk": "@@ -63,28 +61,124 @@ void propagateNode(Node* n) {\n   }\n }\n \n+void lowerIf(Block *body, Node * n) {\n+  auto graph = n->owningGraph();\n+  WithInsertPoint insert_point_guard { n };\n+\n+  std::unordered_map<Value*, Value*> value_map;\n+  auto get_value = [&](Value *v) {\n+    auto it = value_map.find(v);\n+    if (it != value_map.end())\n+      return it->second;\n+    return v;\n+  };\n+\n+  for (Node *orig : body->nodes()) {\n+    Node *clone = graph->insertNode(graph->createClone(orig, get_value));\n+    for (size_t i = 0; i < orig->outputs().size(); ++i) {\n+      value_map[orig->outputs()[i]] = clone->outputs()[i];\n+    }\n+  }\n+  for (size_t i = 0; i < n->outputs().size(); ++i) {\n+    n->outputs().at(i)->replaceAllUsesWith(get_value(body->outputs().at(i)));\n+  }\n+  // NB: destroy the node here, because it might contain side effects, like print\n+  n->destroy();\n+}\n+\n+bool isTrueConstant(Value *val) {\n+  at::optional<bool> maybe_value = constant_as<bool>(val);\n+  return maybe_value && *maybe_value;\n+}\n+\n+void lowerIf(Node *n) {\n+  if (isTrueConstant(n->input())) {\n+    lowerIf(n->blocks()[0], n);\n+  } else {\n+    lowerIf(n->blocks()[1], n);\n+  }\n+}\n+\n+//returns true if the mutated variables are changed\n+bool recomputeMutatedVariables(Node *n) {\n+  JIT_ASSERTM(n->kind() == prim::If, \"Only supported for If nodes\");\n+  std::unordered_set<Value*> mutated_variables;\n+  for (Block * block : n->blocks()) {\n+    for (Node *n : block->nodes()) {\n+      for (size_t i = 0; i < n->outputs().size(); ++i) {\n+        mutated_variables.insert(n->outputs()[i]);\n+      }\n+    }\n+  }\n+  auto true_block = n->blocks()[0];\n+  auto false_block = n->blocks()[1];\n+  auto initial_outputs = true_block->outputs().size();\n+  for (size_t i = 0; i < true_block->outputs().size();) {\n+    //neither block mutates output i\n+    if (!mutated_variables.count(true_block->outputs()[i]) &&", "path": "torch/csrc/jit/passes/constant_propagation.cpp", "position": null, "original_position": 70, "commit_id": "c5f2104925bec35e14f1dc48b07870f49dbabd0d", "original_commit_id": "ae421d1c66858e6588c9ade3b3e77bbc36bb99d2", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "Isn't this whole function just equivalent to:\r\n```\r\nif(true_block->outputs()[i] == false_block->outputs()[i]) {\r\n   // erase as an output\r\n}\r\n```", "created_at": "2018-08-03T05:08:31Z", "updated_at": "2018-11-23T15:48:41Z", "html_url": "https://github.com/pytorch/pytorch/pull/10084#discussion_r207442045", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10084", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207442045"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10084#discussion_r207442045"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10084"}}, "body_html": "<p>Isn't this whole function just equivalent to:</p>\n<pre><code>if(true_block-&gt;outputs()[i] == false_block-&gt;outputs()[i]) {\n   // erase as an output\n}\n</code></pre>", "body_text": "Isn't this whole function just equivalent to:\nif(true_block->outputs()[i] == false_block->outputs()[i]) {\n   // erase as an output\n}"}