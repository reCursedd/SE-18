{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191883551", "pull_request_review_id": 124539732, "id": 191883551, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg4MzU1MQ==", "diff_hunk": "@@ -366,35 +366,50 @@ PyObject *THPVariable_is_sparse(THPVariable *self)\n   END_HANDLE_TH_ERRORS\n }\n \n-PyObject *THPVariable_dtype(THPVariable *self)\n+static PyObject *THPVariable_dtype(THPVariable *self)\n {\n   HANDLE_TH_ERRORS\n   auto& self_ = self->cdata;\n   return torch::autograd::utils::wrap(torch::getDtype(self_.type().scalarType()));\n   END_HANDLE_TH_ERRORS\n }\n \n-static PyObject * THPVariable_layout(THPVariable* self, PyObject* args) {\n+static PyObject * THPVariable_layout(THPVariable* self) {\n   HANDLE_TH_ERRORS\n   auto& self_ = self->cdata;\n   return torch::autograd::utils::wrap(torch::getLayout(self_.type().backend()));\n   END_HANDLE_TH_ERRORS\n }\n \n-static PyObject * THPVariable_device(THPVariable* self, PyObject* args) {\n+static PyObject * THPVariable_device(THPVariable* self) {\n   HANDLE_TH_ERRORS\n-  auto& self_ = self->cdata;\n-  if (self_.type().is_cuda()) {\n-    torch::Device device(torch::DeviceType::CUDA, self_.get_device(), false);\n-    return THPDevice_New(device);\n-  }\n-  else {\n-    torch::Device device(torch::DeviceType::CPU, -1, true);\n-    return THPDevice_New(device);\n-  }\n+  return THPDevice_New(torch::getDevice(self->cdata));\n   END_HANDLE_TH_ERRORS\n }\n \n+std::tuple<at::optional<torch::Device>, at::optional<at::ScalarType>, bool>\n+parse_to_conversion(PyObject *args, PyObject *kwargs) {\n+  static PythonArgParser parser({\n+    \"to(Device device, ScalarType dtype=None, bool non_blocking=False)\",\n+    \"to(ScalarType dtype, bool non_blocking=False)\",\n+    \"to(Tensor tensor, bool non_blocking=False)\",\n+  });\n+  ParsedArgs<3> parsed_args;\n+  auto r = parser.parse(args, kwargs, parsed_args);\n+  if (r.idx == 0) {\n+    return std::make_tuple(r.device(0), r.scalartypeOptional(1), r.toBool(2));", "path": "torch/csrc/autograd/python_variable.cpp", "position": null, "original_position": 47, "commit_id": "036f618a8df265c928ff96d43295df2f9de7141a", "original_commit_id": "5ae8e3ddd9fb04920c2f6d9b184645937269a679", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "it might be helpful to make this deviceOptional, see comment below about moving logic to C++.", "created_at": "2018-05-30T18:54:02Z", "updated_at": "2018-11-23T15:44:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/7312#discussion_r191883551", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7312", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191883551"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7312#discussion_r191883551"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7312"}}, "body_html": "<p>it might be helpful to make this deviceOptional, see comment below about moving logic to C++.</p>", "body_text": "it might be helpful to make this deviceOptional, see comment below about moving logic to C++."}