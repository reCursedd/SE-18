{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191882476", "pull_request_review_id": 124539732, "id": 191882476, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg4MjQ3Ng==", "diff_hunk": "@@ -296,17 +296,21 @@ def to(self, *args, **kwargs):\n \n         This can be called as\n \n-        .. function:: to(device)\n+        .. function:: to(device, dtype=None, non_blocking=True)\n \n-        .. function:: to(dtype)\n+        .. function:: to(dtype, non_blocking=True)\n \n-        .. function:: to(device, dtype)\n+        .. function:: to(tensor, non_blocking=True)\n \n-        It has similar signature as :meth:`torch.Tensor.to`, but does not take\n-        a Tensor and only takes in floating point :attr:`dtype` s. In\n-        particular, this method will only cast the floating point parameters and\n-        buffers to :attr:`dtype`. It will still move the integral parameters and\n-        buffers to :attr:`device`, if that is given. See below for examples.\n+        It has similar signature as :meth:`torch.Tensor.to`, but only accepts\n+        floating point desired :attr:`dtype` s. In particular, this method will\n+        only cast the floating point parameters and buffers to :attr:`dtype`\n+        (if given). It will still move the integral parameters and buffers to\n+        :attr:`device`, if that is given. When :attr:`non_blocking`, it tries to\n+        convert asynchronously with respect to the host if possible, e.g.,", "path": "torch/nn/modules/module.py", "position": null, "original_position": 23, "commit_id": "036f618a8df265c928ff96d43295df2f9de7141a", "original_commit_id": "5ae8e3ddd9fb04920c2f6d9b184645937269a679", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "Is device movement considered a conversion?  Maybe say convert/move?", "created_at": "2018-05-30T18:50:50Z", "updated_at": "2018-11-23T15:44:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/7312#discussion_r191882476", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7312", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191882476"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7312#discussion_r191882476"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7312"}}, "body_html": "<p>Is device movement considered a conversion?  Maybe say convert/move?</p>", "body_text": "Is device movement considered a conversion?  Maybe say convert/move?"}