{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189398663", "pull_request_review_id": 121579318, "id": 189398663, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTM5ODY2Mw==", "diff_hunk": "@@ -353,44 +356,83 @@ def arg_error():\n             arg_reprs = list(repr(arg) for arg in args)\n             for key, val in kwargs.items():\n                 arg_reprs.append(\"{}={}\".format(key, val))\n-            return ValueError('module.to expects .to(device), .to(dtype) or '\n-                              '.to(device, dtype), where dtype is a floating '\n-                              'point type, but got .to({})'\n+            return ValueError('module.to expects .to(device, non_blocking=False), '\n+                              '.to(dtype) or .to(device, dtype=None, non_blocking=False), '\n+                              'where dtype is a floating point type, but got .to({})'\n                               .format(\", \".join(arg_reprs)))\n \n         nargs = len(args) + len(kwargs)\n-        device = dtype = None\n-        if nargs < 1 or nargs > 2:\n+        if nargs < 1 or nargs > 3:\n             raise arg_error()\n+\n+        # detect modes by checking first arg\n+        if len(args) > 0:\n+            arg0 = args[0]\n         else:\n-            for key, val in kwargs.items():\n-                if key == 'dtype':\n-                    dtype = kwargs['dtype']\n-                elif 'device' in kwargs:\n-                    device = kwargs['device']\n-                else:\n-                    raise arg_error()\n-            for arg in args:\n-                if isinstance(arg, torch.dtype):\n-                    if dtype is not None:\n-                        raise arg_error()\n-                    dtype = arg\n-                else:\n-                    if device is not None:\n-                        raise arg_error()\n-                    device = arg\n+            # 'device' has priority because of .to(device, dtype=None, non_blocking=False)", "path": "torch/nn/modules/module.py", "position": null, "original_position": 74, "commit_id": "036f618a8df265c928ff96d43295df2f9de7141a", "original_commit_id": "ef18674cfbeaeefb4949562d04dacac232700f36", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "is it possible to move this to C++ so we can just use the same function signatures?  Maybe make an internal function or something that returns a tuple idk.", "created_at": "2018-05-18T21:34:33Z", "updated_at": "2018-11-23T15:44:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/7312#discussion_r189398663", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7312", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189398663"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7312#discussion_r189398663"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7312"}}, "body_html": "<p>is it possible to move this to C++ so we can just use the same function signatures?  Maybe make an internal function or something that returns a tuple idk.</p>", "body_text": "is it possible to move this to C++ so we can just use the same function signatures?  Maybe make an internal function or something that returns a tuple idk.", "in_reply_to_id": 186250013}