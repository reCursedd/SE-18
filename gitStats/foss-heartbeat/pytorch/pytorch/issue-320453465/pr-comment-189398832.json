{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189398832", "pull_request_review_id": 121579318, "id": 189398832, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTM5ODgzMg==", "diff_hunk": "@@ -559,20 +559,20 @@ static PyObject * THPVariable_to(PyObject* self, PyObject* args, PyObject* kwarg\n {\n   HANDLE_TH_ERRORS\n   static PythonArgParser parser({\n-    \"to(Device device, ScalarType dtype=None)\",\n+    \"to(Device device, ScalarType dtype=None, bool non_blocking=False)\",\n     \"to(ScalarType dtype)\",", "path": "tools/autograd/templates/python_variable_methods.cpp", "position": null, "original_position": 6, "commit_id": "036f618a8df265c928ff96d43295df2f9de7141a", "original_commit_id": "8196e2fccb7b0e3d8989dd07436b5815d9858ae8", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: I'd just throw non_blocking on here too even though it doesn't do anything (a lot of combinations don't do anything already).  It just makes it easier to write functions that take devices and/or dtypes without having to move the error checking up a level.", "created_at": "2018-05-18T21:35:48Z", "updated_at": "2018-11-23T15:44:18Z", "html_url": "https://github.com/pytorch/pytorch/pull/7312#discussion_r189398832", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7312", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/189398832"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7312#discussion_r189398832"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7312"}}, "body_html": "<p>nit: I'd just throw non_blocking on here too even though it doesn't do anything (a lot of combinations don't do anything already).  It just makes it easier to write functions that take devices and/or dtypes without having to move the error checking up a level.</p>", "body_text": "nit: I'd just throw non_blocking on here too even though it doesn't do anything (a lot of combinations don't do anything already).  It just makes it easier to write functions that take devices and/or dtypes without having to move the error checking up a level."}