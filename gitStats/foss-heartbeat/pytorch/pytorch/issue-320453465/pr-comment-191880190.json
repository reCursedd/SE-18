{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191880190", "pull_request_review_id": 124539732, "id": 191880190, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg4MDE5MA==", "diff_hunk": "@@ -349,48 +355,29 @@ def to(self, *args, **kwargs):\n                     [-0.5112, -0.2324]], dtype=torch.float16)\n \n         \"\"\"\n-        def arg_error():\n-            arg_reprs = list(repr(arg) for arg in args)\n-            for key, val in kwargs.items():\n-                arg_reprs.append(\"{}={}\".format(key, val))\n-            return ValueError('module.to expects .to(device), .to(dtype) or '\n-                              '.to(device, dtype), where dtype is a floating '\n-                              'point type, but got .to({})'\n-                              .format(\", \".join(arg_reprs)))\n-\n-        nargs = len(args) + len(kwargs)\n-        device = dtype = None\n-        if nargs < 1 or nargs > 2:\n-            raise arg_error()\n-        else:\n-            for key, val in kwargs.items():\n-                if key == 'dtype':\n-                    dtype = kwargs['dtype']\n-                elif 'device' in kwargs:\n-                    device = kwargs['device']\n-                else:\n-                    raise arg_error()\n-            for arg in args:\n-                if isinstance(arg, torch.dtype):\n-                    if dtype is not None:\n-                        raise arg_error()\n-                    dtype = arg\n-                else:\n-                    if device is not None:\n-                        raise arg_error()\n-                    device = arg\n+\n+        device, dtype, non_blocking = torch._C._nn._parse_to(*args, **kwargs)\n \n         if dtype is not None:\n             if not dtype.is_floating_point:\n-                raise arg_error()\n+                raise TypeError('nn.Module.to only accepts floating point '\n+                                'dtypes, but got desired dtype={}'.format(dtype))\n \n-            if device is None:\n-                return self._apply(lambda t: t.to(dtype) if t.is_floating_point() else t)\n-            else:\n-                return self._apply(lambda t: t.to(device, dtype) if t.is_floating_point() else t.to(device))\n+        if device is not None:\n+            def convert(t):\n+                if t.is_floating_point():\n+                    return t.to(device, dtype, non_blocking)", "path": "torch/nn/modules/module.py", "position": null, "original_position": 98, "commit_id": "036f618a8df265c928ff96d43295df2f9de7141a", "original_commit_id": "5ae8e3ddd9fb04920c2f6d9b184645937269a679", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I don't understand why this logic is in python, can it move to C++?  i.e. why can't convert just be:\r\n```\r\ndef convert(t):\r\n     return t.to(device, dtype, non_blocking)\r\n```", "created_at": "2018-05-30T18:44:20Z", "updated_at": "2018-11-23T15:44:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/7312#discussion_r191880190", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/7312", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/191880190"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/7312#discussion_r191880190"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/7312"}}, "body_html": "<p>I don't understand why this logic is in python, can it move to C++?  i.e. why can't convert just be:</p>\n<pre><code>def convert(t):\n     return t.to(device, dtype, non_blocking)\n</code></pre>", "body_text": "I don't understand why this logic is in python, can it move to C++?  i.e. why can't convert just be:\ndef convert(t):\n     return t.to(device, dtype, non_blocking)"}