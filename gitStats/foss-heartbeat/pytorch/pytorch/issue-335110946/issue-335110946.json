{"url": "https://api.github.com/repos/pytorch/pytorch/issues/8826", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/8826/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/8826/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/8826/events", "html_url": "https://github.com/pytorch/pytorch/issues/8826", "id": 335110946, "node_id": "MDU6SXNzdWUzMzUxMTA5NDY=", "number": 8826, "title": "output_padding constraint", "user": {"login": "SsnL", "id": 5674597, "node_id": "MDQ6VXNlcjU2NzQ1OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5674597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SsnL", "html_url": "https://github.com/SsnL", "followers_url": "https://api.github.com/users/SsnL/followers", "following_url": "https://api.github.com/users/SsnL/following{/other_user}", "gists_url": "https://api.github.com/users/SsnL/gists{/gist_id}", "starred_url": "https://api.github.com/users/SsnL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SsnL/subscriptions", "organizations_url": "https://api.github.com/users/SsnL/orgs", "repos_url": "https://api.github.com/users/SsnL/repos", "events_url": "https://api.github.com/users/SsnL/events{/privacy}", "received_events_url": "https://api.github.com/users/SsnL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-23T15:55:19Z", "updated_at": "2018-06-24T18:36:26Z", "closed_at": "2018-06-24T18:36:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Currently we check that <code>output_padding &lt; stride || output_padding &lt; dilation</code>, e.g. <a href=\"https://github.com/pytorch/pytorch/blob/master/aten/src/THCUNN/generic/SpatialFullDilatedConvolution.cu#L19\">here</a>. But the check against <code>dilation</code> doesn't quite make sense. Dilation just effectively increases the kernel size, and shouldn't cause any ambiguity in output shape of <code>conv</code> (not transpose).</p>\n<p>So I propose to change it to only <code>output_padding &lt; stride</code></p>\n<p>FWIW,</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> conv doesn't have ambiguity introduced by dilation in output shape</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> F.conv2d(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>), torch.randn(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>, <span class=\"pl-v\">dilation</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>).shape\ntorch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> F.conv2d(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>), torch.randn(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>), <span class=\"pl-c1\">None</span>, <span class=\"pl-v\">dilation</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>)).shape\ntorch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> F.conv2d(torch.randn(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>), torch.randn(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>), <span class=\"pl-c1\">None</span>, <span class=\"pl-v\">dilation</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">1</span>)).shape\ntorch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> output shape is fully recover-able just using dialtion</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> F.conv_transpose2d(torch.randn(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>), torch.randn(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>), <span class=\"pl-v\">dilation</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>).shape\ntorch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> F.conv_transpose2d(torch.randn(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">2</span>), torch.randn(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>), <span class=\"pl-v\">dilation</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>)).shape\ntorch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> F.conv_transpose2d(torch.randn(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">4</span>), torch.randn(<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>), <span class=\"pl-v\">dilation</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">1</span>)).shape\ntorch.Size([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>])</pre></div>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a> who made the original change in <code>torch/nn</code> repo</p>", "body_text": "Currently we check that output_padding < stride || output_padding < dilation, e.g. here. But the check against dilation doesn't quite make sense. Dilation just effectively increases the kernel size, and shouldn't cause any ambiguity in output shape of conv (not transpose).\nSo I propose to change it to only output_padding < stride\nFWIW,\n>>> # conv doesn't have ambiguity introduced by dilation in output shape\n>>> F.conv2d(torch.randn(1, 3, 5, 6), torch.randn(3,3,3,3, dilation=2).shape\ntorch.Size([1, 3, 1, 2])\n>>> F.conv2d(torch.randn(1, 3, 5, 6), torch.randn(3,3,3,3), None, dilation=(1,2)).shape\ntorch.Size([1, 3, 3, 2])\n>>> F.conv2d(torch.randn(1, 3, 5, 6), torch.randn(3,3,3,3), None, dilation=(2,1)).shape\ntorch.Size([1, 3, 1, 4])\n>>> # output shape is fully recover-able just using dialtion\n>>> F.conv_transpose2d(torch.randn(1,3,1,2), torch.randn(3,3,3,3), dilation=2).shape\ntorch.Size([1, 3, 5, 6])\n>>> F.conv_transpose2d(torch.randn(1,3,3,2), torch.randn(3,3,3,3), dilation=(1,2)).shape\ntorch.Size([1, 3, 5, 6])\n>>> F.conv_transpose2d(torch.randn(1,3,1,4), torch.randn(3,3,3,3), dilation=(2,1)).shape\ntorch.Size([1, 3, 5, 6])\ncc @soumith who made the original change in torch/nn repo", "body": "Currently we check that `output_padding < stride || output_padding < dilation`, e.g. [here](https://github.com/pytorch/pytorch/blob/master/aten/src/THCUNN/generic/SpatialFullDilatedConvolution.cu#L19). But the check against `dilation` doesn't quite make sense. Dilation just effectively increases the kernel size, and shouldn't cause any ambiguity in output shape of `conv` (not transpose).\r\n\r\nSo I propose to change it to only `output_padding < stride`\r\n\r\nFWIW, \r\n```py\r\n>>> # conv doesn't have ambiguity introduced by dilation in output shape\r\n>>> F.conv2d(torch.randn(1, 3, 5, 6), torch.randn(3,3,3,3, dilation=2).shape\r\ntorch.Size([1, 3, 1, 2])\r\n>>> F.conv2d(torch.randn(1, 3, 5, 6), torch.randn(3,3,3,3), None, dilation=(1,2)).shape\r\ntorch.Size([1, 3, 3, 2])\r\n>>> F.conv2d(torch.randn(1, 3, 5, 6), torch.randn(3,3,3,3), None, dilation=(2,1)).shape\r\ntorch.Size([1, 3, 1, 4])\r\n>>> # output shape is fully recover-able just using dialtion\r\n>>> F.conv_transpose2d(torch.randn(1,3,1,2), torch.randn(3,3,3,3), dilation=2).shape\r\ntorch.Size([1, 3, 5, 6])\r\n>>> F.conv_transpose2d(torch.randn(1,3,3,2), torch.randn(3,3,3,3), dilation=(1,2)).shape\r\ntorch.Size([1, 3, 5, 6])\r\n>>> F.conv_transpose2d(torch.randn(1,3,1,4), torch.randn(3,3,3,3), dilation=(2,1)).shape\r\ntorch.Size([1, 3, 5, 6])\r\n```\r\n\r\ncc @soumith who made the original change in `torch/nn` repo"}