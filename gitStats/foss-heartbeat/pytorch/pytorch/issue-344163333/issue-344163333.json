{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9778", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9778/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9778/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9778/events", "html_url": "https://github.com/pytorch/pytorch/issues/9778", "id": 344163333, "node_id": "MDU6SXNzdWUzNDQxNjMzMzM=", "number": 9778, "title": "clamp_ has inconsistent behaviour", "user": {"login": "lemairecarl", "id": 13444373, "node_id": "MDQ6VXNlcjEzNDQ0Mzcz", "avatar_url": "https://avatars3.githubusercontent.com/u/13444373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lemairecarl", "html_url": "https://github.com/lemairecarl", "followers_url": "https://api.github.com/users/lemairecarl/followers", "following_url": "https://api.github.com/users/lemairecarl/following{/other_user}", "gists_url": "https://api.github.com/users/lemairecarl/gists{/gist_id}", "starred_url": "https://api.github.com/users/lemairecarl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lemairecarl/subscriptions", "organizations_url": "https://api.github.com/users/lemairecarl/orgs", "repos_url": "https://api.github.com/users/lemairecarl/repos", "events_url": "https://api.github.com/users/lemairecarl/events{/privacy}", "received_events_url": "https://api.github.com/users/lemairecarl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-24T19:00:56Z", "updated_at": "2018-07-25T15:23:02Z", "closed_at": "2018-07-25T15:23:02Z", "author_association": "CONTRIBUTOR", "body_html": "<h2>Issue description</h2>\n<p><code>tensor.clamp_</code> has inconsistent behaviour when used on subtensors produced with different indexing methods.</p>\n<h2>Code example</h2>\n<h3>Exhibit 1</h3>\n<div class=\"highlight highlight-source-python\"><pre>In[<span class=\"pl-c1\">56</span>]: m <span class=\"pl-k\">=</span> torch.tensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>]).byte()\nIn[<span class=\"pl-c1\">57</span>]: a <span class=\"pl-k\">=</span> torch.ones(<span class=\"pl-c1\">2</span>)\n\nIn[<span class=\"pl-c1\">58</span>]: a[m].clamp_(<span class=\"pl-v\">min</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> in-place</span>\nOut[<span class=\"pl-c1\">58</span>]: tensor([ <span class=\"pl-c1\">2</span>.])\nIn[<span class=\"pl-c1\">59</span>]: a\nOut[<span class=\"pl-c1\">59</span>]: tensor([ <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">1</span>.])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Unexpected output</span>\n\nIn[<span class=\"pl-c1\">60</span>]: a[m] <span class=\"pl-k\">=</span> a[m].clamp(<span class=\"pl-v\">min</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> out-of-place + assignment</span>\nIn[<span class=\"pl-c1\">61</span>]: a\nOut[<span class=\"pl-c1\">61</span>]: tensor([ <span class=\"pl-c1\">2</span>.,  <span class=\"pl-c1\">1</span>.])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Expected output</span></pre></div>\n<h3>Exhibit 2</h3>\n<div class=\"highlight highlight-source-python\"><pre>In[<span class=\"pl-c1\">43</span>]: a <span class=\"pl-k\">=</span> torch.ones(<span class=\"pl-c1\">2</span>)\nIn[<span class=\"pl-c1\">44</span>]: a\nOut[<span class=\"pl-c1\">44</span>]: tensor([ <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">1</span>.])\nIn[<span class=\"pl-c1\">45</span>]: m <span class=\"pl-k\">=</span> torch.tensor([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>]).byte()\n\nIn[<span class=\"pl-c1\">46</span>]: a[m].clamp_(<span class=\"pl-v\">min</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\nOut[<span class=\"pl-c1\">46</span>]: tensor([ <span class=\"pl-c1\">2</span>.])\nIn[<span class=\"pl-c1\">47</span>]: a\nOut[<span class=\"pl-c1\">47</span>]: tensor([ <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">1</span>.])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Unexpected output</span>\n\nIn[<span class=\"pl-c1\">48</span>]: a[[<span class=\"pl-c1\">0</span>]].clamp_(<span class=\"pl-v\">min</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\nOut[<span class=\"pl-c1\">48</span>]: tensor([ <span class=\"pl-c1\">2</span>.])\nIn[<span class=\"pl-c1\">49</span>]: a\nOut[<span class=\"pl-c1\">49</span>]: tensor([ <span class=\"pl-c1\">1</span>.,  <span class=\"pl-c1\">1</span>.])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Unexpected output</span>\n\nIn[<span class=\"pl-c1\">50</span>]: a[<span class=\"pl-c1\">0</span>].clamp_(<span class=\"pl-v\">min</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\nOut[<span class=\"pl-c1\">50</span>]: tensor(<span class=\"pl-c1\">2</span>.)\nIn[<span class=\"pl-c1\">51</span>]: a\nOut[<span class=\"pl-c1\">51</span>]: tensor([ <span class=\"pl-c1\">2</span>.,  <span class=\"pl-c1\">1</span>.])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Expected output</span></pre></div>\n<h2>System Info</h2>\n<pre><code>PyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.1.85\n\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: Could not collect\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration: \nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1080 Ti\n\nNvidia driver version: 390.59\ncuDNN version: Probably one of the following:\n/usr/local/cuda-9.1/lib64/libcudnn.so.7.1.4\n/usr/local/cuda-9.1/lib64/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] numpy (1.14.5)\n[pip] torch (0.4.0)\n[pip] torchfile (0.1.0)\n[pip] torchvision (0.2.1)\n[conda] cuda91                    1.0                  h4c16780_0    pytorch\n[conda] pytorch                   0.4.0           py36_cuda9.1.85_cudnn7.1.2_1  [cuda91]  pytorch\n[conda] torchfile                 0.1.0                     &lt;pip&gt;\n[conda] torchvision               0.2.1                    py36_1    pytorch\n</code></pre>", "body_text": "Issue description\ntensor.clamp_ has inconsistent behaviour when used on subtensors produced with different indexing methods.\nCode example\nExhibit 1\nIn[56]: m = torch.tensor([1, 0]).byte()\nIn[57]: a = torch.ones(2)\n\nIn[58]: a[m].clamp_(min=2)  # in-place\nOut[58]: tensor([ 2.])\nIn[59]: a\nOut[59]: tensor([ 1.,  1.])  # Unexpected output\n\nIn[60]: a[m] = a[m].clamp(min=2)  # out-of-place + assignment\nIn[61]: a\nOut[61]: tensor([ 2.,  1.])  # Expected output\nExhibit 2\nIn[43]: a = torch.ones(2)\nIn[44]: a\nOut[44]: tensor([ 1.,  1.])\nIn[45]: m = torch.tensor([1, 0]).byte()\n\nIn[46]: a[m].clamp_(min=2)\nOut[46]: tensor([ 2.])\nIn[47]: a\nOut[47]: tensor([ 1.,  1.])  # Unexpected output\n\nIn[48]: a[[0]].clamp_(min=2)\nOut[48]: tensor([ 2.])\nIn[49]: a\nOut[49]: tensor([ 1.,  1.])  # Unexpected output\n\nIn[50]: a[0].clamp_(min=2)\nOut[50]: tensor(2.)\nIn[51]: a\nOut[51]: tensor([ 2.,  1.])  # Expected output\nSystem Info\nPyTorch version: 0.4.0\nIs debug build: No\nCUDA used to build PyTorch: 9.1.85\n\nOS: Ubuntu 16.04.4 LTS\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCMake version: Could not collect\n\nPython version: 3.6\nIs CUDA available: Yes\nCUDA runtime version: Could not collect\nGPU models and configuration: \nGPU 0: GeForce GTX 1080 Ti\nGPU 1: GeForce GTX 1080 Ti\n\nNvidia driver version: 390.59\ncuDNN version: Probably one of the following:\n/usr/local/cuda-9.1/lib64/libcudnn.so.7.1.4\n/usr/local/cuda-9.1/lib64/libcudnn_static.a\n\nVersions of relevant libraries:\n[pip] numpy (1.14.5)\n[pip] torch (0.4.0)\n[pip] torchfile (0.1.0)\n[pip] torchvision (0.2.1)\n[conda] cuda91                    1.0                  h4c16780_0    pytorch\n[conda] pytorch                   0.4.0           py36_cuda9.1.85_cudnn7.1.2_1  [cuda91]  pytorch\n[conda] torchfile                 0.1.0                     <pip>\n[conda] torchvision               0.2.1                    py36_1    pytorch", "body": "## Issue description\r\n\r\n`tensor.clamp_` has inconsistent behaviour when used on subtensors produced with different indexing methods.\r\n\r\n## Code example\r\n\r\n### Exhibit 1\r\n\r\n```python\r\nIn[56]: m = torch.tensor([1, 0]).byte()\r\nIn[57]: a = torch.ones(2)\r\n\r\nIn[58]: a[m].clamp_(min=2)  # in-place\r\nOut[58]: tensor([ 2.])\r\nIn[59]: a\r\nOut[59]: tensor([ 1.,  1.])  # Unexpected output\r\n\r\nIn[60]: a[m] = a[m].clamp(min=2)  # out-of-place + assignment\r\nIn[61]: a\r\nOut[61]: tensor([ 2.,  1.])  # Expected output\r\n```\r\n\r\n### Exhibit 2\r\n\r\n```python\r\nIn[43]: a = torch.ones(2)\r\nIn[44]: a\r\nOut[44]: tensor([ 1.,  1.])\r\nIn[45]: m = torch.tensor([1, 0]).byte()\r\n\r\nIn[46]: a[m].clamp_(min=2)\r\nOut[46]: tensor([ 2.])\r\nIn[47]: a\r\nOut[47]: tensor([ 1.,  1.])  # Unexpected output\r\n\r\nIn[48]: a[[0]].clamp_(min=2)\r\nOut[48]: tensor([ 2.])\r\nIn[49]: a\r\nOut[49]: tensor([ 1.,  1.])  # Unexpected output\r\n\r\nIn[50]: a[0].clamp_(min=2)\r\nOut[50]: tensor(2.)\r\nIn[51]: a\r\nOut[51]: tensor([ 2.,  1.])  # Expected output\r\n```\r\n\r\n## System Info\r\n\r\n```\r\nPyTorch version: 0.4.0\r\nIs debug build: No\r\nCUDA used to build PyTorch: 9.1.85\r\n\r\nOS: Ubuntu 16.04.4 LTS\r\nGCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\nCMake version: Could not collect\r\n\r\nPython version: 3.6\r\nIs CUDA available: Yes\r\nCUDA runtime version: Could not collect\r\nGPU models and configuration: \r\nGPU 0: GeForce GTX 1080 Ti\r\nGPU 1: GeForce GTX 1080 Ti\r\n\r\nNvidia driver version: 390.59\r\ncuDNN version: Probably one of the following:\r\n/usr/local/cuda-9.1/lib64/libcudnn.so.7.1.4\r\n/usr/local/cuda-9.1/lib64/libcudnn_static.a\r\n\r\nVersions of relevant libraries:\r\n[pip] numpy (1.14.5)\r\n[pip] torch (0.4.0)\r\n[pip] torchfile (0.1.0)\r\n[pip] torchvision (0.2.1)\r\n[conda] cuda91                    1.0                  h4c16780_0    pytorch\r\n[conda] pytorch                   0.4.0           py36_cuda9.1.85_cudnn7.1.2_1  [cuda91]  pytorch\r\n[conda] torchfile                 0.1.0                     <pip>\r\n[conda] torchvision               0.2.1                    py36_1    pytorch\r\n```"}