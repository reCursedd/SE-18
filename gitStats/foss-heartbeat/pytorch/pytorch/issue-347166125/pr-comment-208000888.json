{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208000888", "pull_request_review_id": 143725973, "id": 208000888, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAwMDg4OA==", "diff_hunk": "@@ -339,7 +339,11 @@ struct GraphFuser {\n           // cases we inline the constants directly in the body of the fused group.\n           JIT_ASSERT(input->node()->kind() == prim::Constant);\n           Node * in_const = subgraph.createClone(input->node(), [](Value*) -> Value* { throw std::runtime_error(\"unexpected input\"); });\n-          subgraph.prependNode(in_const);\n+          if (insert_after == nullptr) {", "path": "torch/csrc/jit/passes/graph_fuser.cpp", "position": null, "original_position": 5, "commit_id": "b00a76e1588f34aa2c1d1a9e55fe76b1ad7cf71d", "original_commit_id": "b7c32375b90410b074fd47b6daacd5d72bd25ae2", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "body": "I think there was a bug in the code. Let's say we're inserting `in_graph` (which is a node) that has two constant inputs `in_const1`, `in_const2`. Using the logic of the previous code,\r\n- We insert `in_const1` to the beginning of the FusionGroup. `insert_after = in_const1`\r\n- We insert `in_const2` to the beginning of the FusionGroup.  `insert_after = in_const2`\r\n\r\nThe graph looks like  the following right now:\r\n\r\n```\r\nin_const2\r\nin_const1\r\n```\r\n\r\nThere is a `return insert_after ? in_graph->insertAfter(insert_after) : subgraph.prependNode(in_graph);` that inserts the node `in_graph` into the FusionGroup. It is inserted between `in_const2` and `in_const1`, as follows:\r\n\r\n```\r\nin_const2\r\nin_graph\r\nin_const1\r\n```\r\nwhich is a problem because `in_const1` is an input to `in_graph`.\r\n\r\nTo fix this, I only update `insert_after` once instead of every time.", "created_at": "2018-08-06T19:19:42Z", "updated_at": "2018-11-23T15:48:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/10178#discussion_r208000888", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10178", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/208000888"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10178#discussion_r208000888"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10178"}}, "body_html": "<p>I think there was a bug in the code. Let's say we're inserting <code>in_graph</code> (which is a node) that has two constant inputs <code>in_const1</code>, <code>in_const2</code>. Using the logic of the previous code,</p>\n<ul>\n<li>We insert <code>in_const1</code> to the beginning of the FusionGroup. <code>insert_after = in_const1</code></li>\n<li>We insert <code>in_const2</code> to the beginning of the FusionGroup.  <code>insert_after = in_const2</code></li>\n</ul>\n<p>The graph looks like  the following right now:</p>\n<pre><code>in_const2\nin_const1\n</code></pre>\n<p>There is a <code>return insert_after ? in_graph-&gt;insertAfter(insert_after) : subgraph.prependNode(in_graph);</code> that inserts the node <code>in_graph</code> into the FusionGroup. It is inserted between <code>in_const2</code> and <code>in_const1</code>, as follows:</p>\n<pre><code>in_const2\nin_graph\nin_const1\n</code></pre>\n<p>which is a problem because <code>in_const1</code> is an input to <code>in_graph</code>.</p>\n<p>To fix this, I only update <code>insert_after</code> once instead of every time.</p>", "body_text": "I think there was a bug in the code. Let's say we're inserting in_graph (which is a node) that has two constant inputs in_const1, in_const2. Using the logic of the previous code,\n\nWe insert in_const1 to the beginning of the FusionGroup. insert_after = in_const1\nWe insert in_const2 to the beginning of the FusionGroup.  insert_after = in_const2\n\nThe graph looks like  the following right now:\nin_const2\nin_const1\n\nThere is a return insert_after ? in_graph->insertAfter(insert_after) : subgraph.prependNode(in_graph); that inserts the node in_graph into the FusionGroup. It is inserted between in_const2 and in_const1, as follows:\nin_const2\nin_graph\nin_const1\n\nwhich is a problem because in_const1 is an input to in_graph.\nTo fix this, I only update insert_after once instead of every time.", "in_reply_to_id": 207701086}