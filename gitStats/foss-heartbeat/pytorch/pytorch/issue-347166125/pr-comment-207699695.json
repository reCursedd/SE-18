{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207699695", "pull_request_review_id": 143372876, "id": 207699695, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY5OTY5NQ==", "diff_hunk": "@@ -624,27 +641,179 @@ void compressContiguous(\n \n } // anonymous namespace\n \n+// XXX: assumes graph inputs are 32-bit indexable\n+// assumes v is an input to the graph.\n+static size_t toInputIndex(Value * v, Graph & subgraph) {\n+  auto start = subgraph.inputs().begin();\n+  auto it = std::find(start, subgraph.inputs().end(), v);\n+  JIT_ASSERT(it != subgraph.inputs().end());\n+  return it - start;\n+}\n+\n+// If there are fused Chunk nodes in the graph, returns a new Graph replacing\n+// all inputs of FusedChunk with their outputs and a list of Chunk descriptors\n+// for each corresponding input to the (old) agraph. If there were no\n+// fused chunk nodes, returns nullptr for the graph.\n+static std::tuple<std::shared_ptr<Graph>,std::vector<MaybeChunkDesc>>\n+maybeLiftFusedChunks(AnnotatedGraph & agraph) {\n+  auto graph = agraph.graph->copy();\n+  auto num_inputs = graph->inputs().size();\n+\n+  std::vector<at::optional<Node*>> chunk_nodes(num_inputs);\n+  std::vector<MaybeChunkDesc> chunk_desc(num_inputs);\n+  bool didLiftFusedChunk = false;\n+\n+  // First pass: construct chunk_desc, keep a running list of all fused Chunk nodes\n+  for (auto * node : graph->nodes()) {\n+    if (node->kind() != aten::chunk) {\n+      continue;\n+    }\n+    didLiftFusedChunk = true;\n+    auto * input = node->namedInput(attr::self);\n+    auto formal_index = toInputIndex(input, *graph);\n+    JIT_ASSERT(!chunk_desc[formal_index]);\n+\n+    chunk_desc[formal_index] = at::optional<ChunkDesc>(\n+        at::in_place,\n+        toIValue(node->namedInput(attr::chunks)).value().toInt(),\n+        toIValue(node->namedInput(attr::dim)).value().toInt());\n+    chunk_nodes[formal_index] = node;\n+  }\n+\n+  // Second pass: Replace input of each fused Chunk node with their outputs\n+  size_t num_added_args = 0;\n+  for (auto it = chunk_nodes.begin(); it != chunk_nodes.end(); ++it) {\n+    if (!*it) {\n+      continue;\n+    }\n+    Node * node = **it;\n+    size_t formal_index = it - chunk_nodes.begin();\n+    JIT_ASSERT(chunk_desc[formal_index]);\n+    JIT_ASSERT(node->outputs().size() == chunk_desc[formal_index]->chunks);\n+\n+    // For inputs (a, b, c), where [x, y = chunk(a, 2, 0)] is an op,\n+    // we want to replace b \"inplace\" with x, y, such that we get (a, x, y, c).\n+    auto to_erase = formal_index + num_added_args;\n+    for (auto * out : node->outputs()) {\n+      auto * in = graph->insertInput(formal_index + num_added_args + 1);\n+      in->setType(out->type());\n+      out->replaceAllUsesWith(in);\n+      ++num_added_args;\n+    }\n+    node->destroy();\n+    graph->eraseInput(to_erase);\n+    --num_added_args;\n+  }\n+\n+  if (!didLiftFusedChunk) {\n+    return std::tuple<std::shared_ptr<Graph>,std::vector<MaybeChunkDesc>>(\n+        nullptr,\n+        std::move(chunk_desc));\n+  }\n+\n+  // Remove some possibly unused constants.\n+  EliminateDeadCode(graph);\n+  return std::tuple<std::shared_ptr<Graph>,std::vector<MaybeChunkDesc>>(\n+      std::move(graph),\n+      std::move(chunk_desc));\n+}\n+\n+// XXX: Assumes that after at::chunk, all inputs are the same size\n+static inline std::vector<int64_t> computeMapSize(\n+    at::ArrayRef<at::Tensor> inputs,\n+    std::vector<MaybeChunkDesc> chunks) {\n+  auto& chunk = chunks[0];\n+  if (!chunk) {\n+    return std::vector<int64_t>(inputs[0].sizes().begin(), inputs[0].sizes().end());\n+  }\n+  auto& tensor = inputs[0];\n+  std::vector<int64_t> map_size(tensor.sizes().begin(), tensor.sizes().end());\n+  map_size[chunk->dim] /= chunk->chunks;\n+  return map_size;\n+}\n+\n+// XXX: this code assumes that inputs are 32-bit addressable\n+static inline uint32_t computeNumel(at::IntList sizes) {\n+  uint32_t result = 1;\n+  if (sizes.size() == 0) {\n+    return 0;\n+  }\n+  for (int64_t size : sizes) {\n+    result *= size;\n+  }\n+  return result;\n+}\n+\n+static void addTensorInfo(\n+    std::vector<void*>& arguments,\n+    char ** buffer_next,\n+    size_t maxPossibleTensorInfoSize,\n+    const TensorDesc & desc,\n+    at::IntList sizes,\n+    at::IntList strides,\n+    void * data_ptr) {\n+  size_t nDim = desc.nDim(); // NOTE: this is the compressed dim\n+  auto ti = reinterpret_cast<TensorInfo*>(*buffer_next);\n+  ti->data = data_ptr;\n+  compressContiguous(sizes, strides, desc.contiguity, ti->sizes(nDim), ti->strides(nDim));\n+  *buffer_next += maxPossibleTensorInfoSize;\n+  arguments.push_back(ti);\n+}\n+\n+static void addTensorChunks(\n+    std::vector<void*>& arguments,\n+    char ** buffer_next,\n+    size_t maxPossibleTensorInfoSize,\n+    const at::Tensor & tensor,\n+    const ChunkDesc & chunk) {\n+  std::vector<int64_t> new_sizes(tensor.sizes().begin(), tensor.sizes().end());", "path": "torch/csrc/jit/fusion_compiler.cpp", "position": null, "original_position": 167, "commit_id": "b00a76e1588f34aa2c1d1a9e55fe76b1ad7cf71d", "original_commit_id": "b7c32375b90410b074fd47b6daacd5d72bd25ae2", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "note: allocation!", "created_at": "2018-08-04T04:37:53Z", "updated_at": "2018-11-23T15:48:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/10178#discussion_r207699695", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10178", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207699695"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10178#discussion_r207699695"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10178"}}, "body_html": "<p>note: allocation!</p>", "body_text": "note: allocation!"}