{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2852", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2852/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2852/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2852/events", "html_url": "https://github.com/pytorch/pytorch/pull/2852", "id": 260146568, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQyNzkwMjY3", "number": 2852, "title": "Rewrite torch.jit interface.", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679953983, "node_id": "MDU6TGFiZWw2Nzk5NTM5ODM=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/jit", "name": "jit", "color": "c5def5", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-25T03:38:48Z", "updated_at": "2018-11-23T15:34:51Z", "closed_at": "2017-09-28T16:34:36Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/2852", "html_url": "https://github.com/pytorch/pytorch/pull/2852", "diff_url": "https://github.com/pytorch/pytorch/pull/2852.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/2852.patch"}, "body_html": "<p>torch.jit now contains two user-facing functions: compile and trace<br>\n(corresponding to what was previously trace/traced and record_trace).<br>\nThe non-curried versions of these functions have been eliminated, so<br>\nthat there is only one function in the API (we <em>must</em> have the<br>\ncurried versions, since these enable their use as decorators).  There is<br>\ndetailed usage documentation in the docblocks for these methods.</p>\n<p>This comes with a complete rewrite of the internals of torch.jit, in the process<br>\nfixing a number of bugs.  Key points of the new implementation:</p>\n<ul>\n<li>\n<p>compile and trace both always return a Module representing the wrapped<br>\nwith compilation/tracing underlying function/module.  This makes handling<br>\nof the function/module cases more uniform, as we can think of the function<br>\ncase as creating an on-the-fly module with the parameters explicitly<br>\nspecified by the user.  For technical reasons, we now <em>require</em> any parameters<br>\nin the function case to be honest-to-goodness Parameters (gory details:<br>\nyou can't register a Variable as a Parameter to a Module, but you can't<br>\ncreate a Parameter from a Variable while sharing the same underlying<br>\nidentity.)</p>\n</li>\n<li>\n<p>Flattening and unflattening is done a lot more uniformly.  We now have<br>\na _flatten and _unflatten function which are inverses of each other:<br>\n_flatten always returns both the flat, tuple of Variables, <em>as well as</em><br>\nthe \"proto\" (now referred in the code as the \"struct\") from which we<br>\ncan unflatten the variables.  Low level functions like 'raw_trace'<br>\nalways work with the flattened inputs/outputs, which keeps their logic<br>\nsimple.</p>\n</li>\n<li>\n<p>JIT trace keying now also includes the \"struct\" of the input arguments.<br>\nThis is a step towards accepting non-Variable arguments in functions,<br>\nalthough flatten/unflatten don't currently support it.</p>\n</li>\n<li>\n<p>TraceForKey (previously TraceInfo) has had its API reworked to have<br>\nless degrees of freedom when you are interacting with it.</p>\n</li>\n</ul>\n<p>TODO: Verify, timing, and trace dumping have been temporarily excised.  I<br>\nplan on adding them back.</p>\n<p>Signed-off-by: Edward Z. Yang <a href=\"mailto:ezyang@fb.com\">ezyang@fb.com</a></p>", "body_text": "torch.jit now contains two user-facing functions: compile and trace\n(corresponding to what was previously trace/traced and record_trace).\nThe non-curried versions of these functions have been eliminated, so\nthat there is only one function in the API (we must have the\ncurried versions, since these enable their use as decorators).  There is\ndetailed usage documentation in the docblocks for these methods.\nThis comes with a complete rewrite of the internals of torch.jit, in the process\nfixing a number of bugs.  Key points of the new implementation:\n\n\ncompile and trace both always return a Module representing the wrapped\nwith compilation/tracing underlying function/module.  This makes handling\nof the function/module cases more uniform, as we can think of the function\ncase as creating an on-the-fly module with the parameters explicitly\nspecified by the user.  For technical reasons, we now require any parameters\nin the function case to be honest-to-goodness Parameters (gory details:\nyou can't register a Variable as a Parameter to a Module, but you can't\ncreate a Parameter from a Variable while sharing the same underlying\nidentity.)\n\n\nFlattening and unflattening is done a lot more uniformly.  We now have\na _flatten and _unflatten function which are inverses of each other:\n_flatten always returns both the flat, tuple of Variables, as well as\nthe \"proto\" (now referred in the code as the \"struct\") from which we\ncan unflatten the variables.  Low level functions like 'raw_trace'\nalways work with the flattened inputs/outputs, which keeps their logic\nsimple.\n\n\nJIT trace keying now also includes the \"struct\" of the input arguments.\nThis is a step towards accepting non-Variable arguments in functions,\nalthough flatten/unflatten don't currently support it.\n\n\nTraceForKey (previously TraceInfo) has had its API reworked to have\nless degrees of freedom when you are interacting with it.\n\n\nTODO: Verify, timing, and trace dumping have been temporarily excised.  I\nplan on adding them back.\nSigned-off-by: Edward Z. Yang ezyang@fb.com", "body": "torch.jit now contains two user-facing functions: compile and trace\r\n(corresponding to what was previously trace/traced and record_trace).\r\nThe non-curried versions of these functions have been eliminated, so\r\nthat there is only one function in the API (we *must* have the\r\ncurried versions, since these enable their use as decorators).  There is\r\ndetailed usage documentation in the docblocks for these methods.\r\n\r\nThis comes with a complete rewrite of the internals of torch.jit, in the process\r\nfixing a number of bugs.  Key points of the new implementation:\r\n\r\n- compile and trace both always return a Module representing the wrapped\r\n  with compilation/tracing underlying function/module.  This makes handling\r\n  of the function/module cases more uniform, as we can think of the function\r\n  case as creating an on-the-fly module with the parameters explicitly\r\n  specified by the user.  For technical reasons, we now *require* any parameters\r\n  in the function case to be honest-to-goodness Parameters (gory details:\r\n  you can't register a Variable as a Parameter to a Module, but you can't\r\n  create a Parameter from a Variable while sharing the same underlying\r\n  identity.)\r\n\r\n- Flattening and unflattening is done a lot more uniformly.  We now have\r\n  a _flatten and _unflatten function which are inverses of each other:\r\n  _flatten always returns both the flat, tuple of Variables, *as well as*\r\n  the \"proto\" (now referred in the code as the \"struct\") from which we\r\n  can unflatten the variables.  Low level functions like 'raw_trace'\r\n  always work with the flattened inputs/outputs, which keeps their logic\r\n  simple.\r\n\r\n- JIT trace keying now also includes the \"struct\" of the input arguments.\r\n  This is a step towards accepting non-Variable arguments in functions,\r\n  although flatten/unflatten don't currently support it.\r\n\r\n- TraceForKey (previously TraceInfo) has had its API reworked to have\r\n  less degrees of freedom when you are interacting with it.\r\n\r\nTODO: Verify, timing, and trace dumping have been temporarily excised.  I\r\nplan on adding them back.\r\n\r\nSigned-off-by: Edward Z. Yang <ezyang@fb.com>"}