{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223295612", "pull_request_review_id": 162384637, "id": 223295612, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMzI5NTYxMg==", "diff_hunk": "@@ -225,19 +225,30 @@ struct NormReduction {\n   }\n \n   static scalar_t reduce_all(const scalar_t* data_, int64_t size,  float pval) {\n-    scalar_t sum = parallel_reduce(\n-      0,\n-      size,\n-      internal::GRAIN_SIZE,\n-      (scalar_t)0,\n-      [=](int64_t begin, int64_t end, scalar_t init) {\n-        const scalar_t* data = &data_[begin];\n-        int64_t n = end - begin;\n-        scalar_t result = norm_reduce(data, n, 1, pval);\n-        return result;\n-      },\n-      std::plus<scalar_t>());\n-    return sum;\n+    scalar_t result = 0;\n+    if (std::isinf(pval)){\n+      result = norm_reduce_sequential(data_, size, 1, pval);\n+    } else {\n+      result = parallel_reduce(\n+        0,\n+        size,\n+        internal::GRAIN_SIZE,\n+        (scalar_t)0,\n+        [=](int64_t begin, int64_t end, scalar_t init) {\n+          const scalar_t* data = &data_[begin];\n+          int64_t n = end - begin;\n+          scalar_t result_local = norm_reduce(data, n, 1, pval);\n+          if (pval != 0) {\n+            result_local = std::pow(result_local, pval);", "path": "aten/src/ATen/native/cpu/ReduceOpsKernel.cpp", "position": null, "original_position": 31, "commit_id": "59069619c1d58c564ea885b86b518bc27893cd45", "original_commit_id": "c72eea411fe22c46c73d59d9efe8dfeaf5c29cba", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It would be good if we stopped using `std::pow` any time before we return the value. We should simply be reducing sums of values raised to the power `p`, and do a single `std::pow(result, 1/p)` at the end. Otherwise we're loosing a lot of precision", "created_at": "2018-10-08T09:12:45Z", "updated_at": "2018-11-23T15:52:32Z", "html_url": "https://github.com/pytorch/pytorch/pull/12444#discussion_r223295612", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/12444", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/223295612"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/12444#discussion_r223295612"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/12444"}}, "body_html": "<p>It would be good if we stopped using <code>std::pow</code> any time before we return the value. We should simply be reducing sums of values raised to the power <code>p</code>, and do a single <code>std::pow(result, 1/p)</code> at the end. Otherwise we're loosing a lot of precision</p>", "body_text": "It would be good if we stopped using std::pow any time before we return the value. We should simply be reducing sums of values raised to the power p, and do a single std::pow(result, 1/p) at the end. Otherwise we're loosing a lot of precision"}