{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161137115", "pull_request_review_id": 88376728, "id": 161137115, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTEzNzExNQ==", "diff_hunk": "@@ -0,0 +1,91 @@\n+import torch\n+from torch.distributions.distribution import Distribution\n+from torch.autograd import Variable\n+from torch.distributions import Categorical\n+from numbers import Number\n+from torch.distributions import constraints\n+from torch.distributions.utils import log_sum_exp, broadcast_all\n+\n+\n+class Multinomial(Distribution):\n+    r\"\"\"\n+    Creates a Multinomial distribution parameterized by `total_count` and\n+    either `probs` or `logits` (but not both). The innermost dimension of\n+    `probs` indexes over categories. All other dimensions index over batches.\n+\n+    Note that `total_count` need not be specified if only :meth:`log_prob` is\n+    called (see example below)\n+\n+    -   :meth:`sample` requires a single shared `total_count` for all\n+        parameters and samples.\n+    -   :meth:`log_prob` allows different `total_count` for each parameter and\n+        sample.\n+\n+    Example::\n+\n+        >>> m = Multinomial(10, torch.Tensor([ 1, 1, 1, 1]))\n+        >>> x= m.sample()  # equal probability of 0, 1, 2, 3\n+         1\n+         3\n+         3\n+         3\n+        [torch.FloatTensor of size 4]\n+\n+        >>> Multinomial(probs=torch.Tensor([1, 1, 1, 1])).log_prob(x)\n+        -4.1338\n+        [torch.FloatTensor of size 1]\n+\n+    Args:\n+        total_count (int or Tensor or Variable): number of trials\n+        probs (Tensor or Variable): event probabilities\n+        logits (Tensor or Variable): event log probabilities\n+    \"\"\"\n+    params = {'total_count': constraints.nonnegative_integer,\n+              'probs': constraints.simplex, 'logits': constraints.real}\n+\n+    def __init__(self, total_count=1, probs=None, logits=None):\n+        if isinstance(total_count, Number):\n+            self.total_count = total_count\n+        else:\n+            if isinstance(total_count, Variable):\n+                total_count = total_count.data\n+            self.total_count = total_count.view(-1)[0]\n+            if (total_count != self.total_count).any():\n+                raise NotImplementedError('inhomogeneous total_count is not supported')\n+        self._categorical = Categorical(probs=probs, logits=logits)\n+        batch_shape = probs.size()[:-1] if probs is not None else logits.size()[:-1]\n+        event_shape = probs.size()[-1:] if probs is not None else logits.size()[-1:]\n+        super(Multinomial, self).__init__(batch_shape, event_shape)\n+\n+    @constraints.dependent_property\n+    def support(self):\n+        return constraints.integer_interval(0, self.total_count)\n+\n+    @property\n+    def logits(self):\n+        return self._categorical.logits\n+\n+    @property\n+    def probs(self):\n+        return self._categorical.probs\n+\n+    def sample(self, sample_shape=torch.Size()):\n+        sample_shape = torch.Size(sample_shape)\n+        samples = self._categorical.sample(torch.Size((self.total_count,)) + sample_shape)\n+        # samples.shape is (total_count, sample_shape, batch_shape), need to change it to\n+        # (sample_shape, batch_shape, total_count)\n+        shifted_idx = list(range(samples.dim()))\n+        shifted_idx.append(shifted_idx.pop(0))\n+        samples = samples.permute(*shifted_idx)\n+        counts = samples.new(self._extended_shape(sample_shape)).zero_()\n+        counts.scatter_add_(-1, samples, torch.ones_like(samples))\n+        return counts.type_as(self.probs)\n+\n+    def log_prob(self, value):\n+        self._validate_log_prob_arg(value)\n+        logits, value = broadcast_all(self.probs.log(), value)", "path": "torch/distributions/multinomial.py", "position": null, "original_position": 86, "commit_id": "4da726477b0fbdf53cab5d7d4fbda62d3b90bbc5", "original_commit_id": "d431b296a5385684973d2a8126f805fb1002e59b", "user": {"login": "neerajprad", "id": 1762463, "node_id": "MDQ6VXNlcjE3NjI0NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1762463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neerajprad", "html_url": "https://github.com/neerajprad", "followers_url": "https://api.github.com/users/neerajprad/followers", "following_url": "https://api.github.com/users/neerajprad/following{/other_user}", "gists_url": "https://api.github.com/users/neerajprad/gists{/gist_id}", "starred_url": "https://api.github.com/users/neerajprad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neerajprad/subscriptions", "organizations_url": "https://api.github.com/users/neerajprad/orgs", "repos_url": "https://api.github.com/users/neerajprad/repos", "events_url": "https://api.github.com/users/neerajprad/events{/privacy}", "received_events_url": "https://api.github.com/users/neerajprad/received_events", "type": "User", "site_admin": false}, "body": "The issue here was that we need to clone the logits because they are getting mutated in line 89 below. We can change that and resort to using `self.probs_or_logits` instead as part #4614. ", "created_at": "2018-01-12T04:15:08Z", "updated_at": "2018-11-23T15:38:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/4624#discussion_r161137115", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4624", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/161137115"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4624#discussion_r161137115"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4624"}}, "body_html": "<p>The issue here was that we need to clone the logits because they are getting mutated in line 89 below. We can change that and resort to using <code>self.probs_or_logits</code> instead as part <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"287934382\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/4614\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/4614/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/4614\">#4614</a>.</p>", "body_text": "The issue here was that we need to clone the logits because they are getting mutated in line 89 below. We can change that and resort to using self.probs_or_logits instead as part #4614."}