{"url": "https://api.github.com/repos/pytorch/pytorch/issues/2839", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/2839/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/2839/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/2839/events", "html_url": "https://github.com/pytorch/pytorch/issues/2839", "id": 259969779, "node_id": "MDU6SXNzdWUyNTk5Njk3Nzk=", "number": 2839, "title": "Support zero-dimensional tensors as scalars", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-23T00:49:19Z", "updated_at": "2017-09-23T23:44:12Z", "closed_at": "2017-09-23T15:04:36Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Note this is a different issue from tensors that have zero-size in one dimension <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"242114272\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/2055\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pytorch/pytorch/issues/2055/hovercard\" href=\"https://github.com/pytorch/pytorch/issues/2055\">#2055</a> .</p>\n<p>Numpy and Tensorflow both allow consistent treatment of dimensions down to zero dimensions. However torch inconsistently treats a zero-dimensional tensor as empty, rather than containing a single element. For example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> dim <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">4</span>):\n    <span class=\"pl-c1\">print</span>(np.ones([<span class=\"pl-c1\">2</span>] <span class=\"pl-k\">*</span> dim).sum())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 1.0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 2.0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 4.0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 8.0</span>\n\n<span class=\"pl-k\">for</span> dim <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">4</span>):\n    <span class=\"pl-c1\">print</span>(torch.ones([<span class=\"pl-c1\">2</span>] <span class=\"pl-k\">*</span> dim).sum())\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 0.0      &lt;---- inconsistency here</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 2.0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 4.0</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 8.0</span></pre></div>", "body_text": "Note this is a different issue from tensors that have zero-size in one dimension #2055 .\nNumpy and Tensorflow both allow consistent treatment of dimensions down to zero dimensions. However torch inconsistently treats a zero-dimensional tensor as empty, rather than containing a single element. For example:\nfor dim in range(4):\n    print(np.ones([2] * dim).sum())\n# 1.0\n# 2.0\n# 4.0\n# 8.0\n\nfor dim in range(4):\n    print(torch.ones([2] * dim).sum())\n# 0.0      <---- inconsistency here\n# 2.0\n# 4.0\n# 8.0", "body": "Note this is a different issue from tensors that have zero-size in one dimension #2055 .\r\n\r\nNumpy and Tensorflow both allow consistent treatment of dimensions down to zero dimensions. However torch inconsistently treats a zero-dimensional tensor as empty, rather than containing a single element. For example:\r\n```py\r\nfor dim in range(4):\r\n    print(np.ones([2] * dim).sum())\r\n# 1.0\r\n# 2.0\r\n# 4.0\r\n# 8.0\r\n\r\nfor dim in range(4):\r\n    print(torch.ones([2] * dim).sum())\r\n# 0.0      <---- inconsistency here\r\n# 2.0\r\n# 4.0\r\n# 8.0\r\n```"}