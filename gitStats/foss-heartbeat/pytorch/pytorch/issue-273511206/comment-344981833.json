{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/344981833", "html_url": "https://github.com/pytorch/pytorch/issues/3669#issuecomment-344981833", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3669", "id": 344981833, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDk4MTgzMw==", "user": {"login": "vadimkantorov", "id": 1041752, "node_id": "MDQ6VXNlcjEwNDE3NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1041752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimkantorov", "html_url": "https://github.com/vadimkantorov", "followers_url": "https://api.github.com/users/vadimkantorov/followers", "following_url": "https://api.github.com/users/vadimkantorov/following{/other_user}", "gists_url": "https://api.github.com/users/vadimkantorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimkantorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimkantorov/subscriptions", "organizations_url": "https://api.github.com/users/vadimkantorov/orgs", "repos_url": "https://api.github.com/users/vadimkantorov/repos", "events_url": "https://api.github.com/users/vadimkantorov/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimkantorov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-16T16:40:01Z", "updated_at": "2017-11-17T00:51:37Z", "author_association": "NONE", "body_html": "<p>Minor differences is that I use OpenBLAS, not MKL, and OpenBLAS/magma are built from sources and I am not using conda. I don't know how to find why g++ behaves differently. Does conda have its own g++? Maybe it's configured differently?</p>\n<p>The error about coalesce makes sense (i mean being explicit about types would be better there), right?  The <code>op</code> uninitialized warning is about the below and complains about <code>op</code> not being initialized in some code branches. It should be easy to initialize by default as CUBLAS_OP_N or assert that <code>trans</code> can't be another character. Same story with <code>inttypes.h</code>. Then the functions not in scope is about some quirk in generation system, can't dig into it.</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">void</span> <span class=\"pl-en\">THCudaBlas_Sgemv</span>(THCState *state, <span class=\"pl-k\">char</span> trans, <span class=\"pl-c1\">int64_t</span> m, <span class=\"pl-c1\">int64_t</span> n, <span class=\"pl-k\">float</span> alpha, <span class=\"pl-k\">float</span> *a, <span class=\"pl-c1\">int64_t</span> lda, <span class=\"pl-k\">float</span> *x, <span class=\"pl-c1\">int64_t</span> incx, <span class=\"pl-k\">float</span> beta, <span class=\"pl-k\">float</span> *y, <span class=\"pl-c1\">int64_t</span> incy)\n{\n  <span class=\"pl-k\">if</span>(n == <span class=\"pl-c1\">1</span>)\n    lda = m;\n\n  cublasOperation_t op;\n  <span class=\"pl-k\">if</span> (trans == <span class=\"pl-s\"><span class=\"pl-pds\">'</span>t<span class=\"pl-pds\">'</span></span>) op = CUBLAS_OP_T;\n  <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (trans == <span class=\"pl-s\"><span class=\"pl-pds\">'</span>n<span class=\"pl-pds\">'</span></span>) op = CUBLAS_OP_N;\n  <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (trans == <span class=\"pl-s\"><span class=\"pl-pds\">'</span>c<span class=\"pl-pds\">'</span></span>) op = CUBLAS_OP_C;\n\n  <span class=\"pl-k\">if</span>( (m &lt;= INT_MAX) &amp;&amp; (n &lt;= INT_MAX) &amp;&amp;\n      (lda &gt; <span class=\"pl-c1\">0</span>) &amp;&amp; (lda &lt;= INT_MAX) &amp;&amp;\n      (incx &gt; <span class=\"pl-c1\">0</span>) &amp;&amp; (incx &lt;= INT_MAX) &amp;&amp;\n      (incy &gt; <span class=\"pl-c1\">0</span>) &amp;&amp; (incy &lt;= INT_MAX) )\n  {\n    <span class=\"pl-k\">int</span> i_m = (<span class=\"pl-k\">int</span>)m;\n    <span class=\"pl-k\">int</span> i_n = (<span class=\"pl-k\">int</span>)n;\n    <span class=\"pl-k\">int</span> i_lda = (<span class=\"pl-k\">int</span>)lda;\n    <span class=\"pl-k\">int</span> i_incx = (<span class=\"pl-k\">int</span>)incx;\n    <span class=\"pl-k\">int</span> i_incy = (<span class=\"pl-k\">int</span>)incy;\n\n    cublasHandle_t handle = <span class=\"pl-c1\">THCState_getCurrentBlasHandle</span>(state);\n    <span class=\"pl-c1\">cublasSetStream</span>(handle, <span class=\"pl-c1\">THCState_getCurrentStream</span>(state));\n    <span class=\"pl-c1\">THCublasCheck</span>(<span class=\"pl-c1\">cublasSgemv</span>(handle, op, i_m, i_n, &amp;alpha, a, i_lda, x, i_incx, &amp;beta, y, i_incy));\n    <span class=\"pl-k\">return</span>;\n  }\n  <span class=\"pl-c1\">THError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Cublas_Sgemv only supports m, n, lda, incx, incy<span class=\"pl-pds\">\"</span></span>\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>in the range 0 &lt; [val] &lt;= %d<span class=\"pl-pds\">\"</span></span>, INT_MAX);\n}\n</pre></div>", "body_text": "Minor differences is that I use OpenBLAS, not MKL, and OpenBLAS/magma are built from sources and I am not using conda. I don't know how to find why g++ behaves differently. Does conda have its own g++? Maybe it's configured differently?\nThe error about coalesce makes sense (i mean being explicit about types would be better there), right?  The op uninitialized warning is about the below and complains about op not being initialized in some code branches. It should be easy to initialize by default as CUBLAS_OP_N or assert that trans can't be another character. Same story with inttypes.h. Then the functions not in scope is about some quirk in generation system, can't dig into it.\nvoid THCudaBlas_Sgemv(THCState *state, char trans, int64_t m, int64_t n, float alpha, float *a, int64_t lda, float *x, int64_t incx, float beta, float *y, int64_t incy)\n{\n  if(n == 1)\n    lda = m;\n\n  cublasOperation_t op;\n  if (trans == 't') op = CUBLAS_OP_T;\n  else if (trans == 'n') op = CUBLAS_OP_N;\n  else if (trans == 'c') op = CUBLAS_OP_C;\n\n  if( (m <= INT_MAX) && (n <= INT_MAX) &&\n      (lda > 0) && (lda <= INT_MAX) &&\n      (incx > 0) && (incx <= INT_MAX) &&\n      (incy > 0) && (incy <= INT_MAX) )\n  {\n    int i_m = (int)m;\n    int i_n = (int)n;\n    int i_lda = (int)lda;\n    int i_incx = (int)incx;\n    int i_incy = (int)incy;\n\n    cublasHandle_t handle = THCState_getCurrentBlasHandle(state);\n    cublasSetStream(handle, THCState_getCurrentStream(state));\n    THCublasCheck(cublasSgemv(handle, op, i_m, i_n, &alpha, a, i_lda, x, i_incx, &beta, y, i_incy));\n    return;\n  }\n  THError(\"Cublas_Sgemv only supports m, n, lda, incx, incy\"\n          \"in the range 0 < [val] <= %d\", INT_MAX);\n}", "body": "Minor differences is that I use OpenBLAS, not MKL, and OpenBLAS/magma are built from sources and I am not using conda. I don't know how to find why g++ behaves differently. Does conda have its own g++? Maybe it's configured differently?\r\n\r\nThe error about coalesce makes sense (i mean being explicit about types would be better there), right?  The `op` uninitialized warning is about the below and complains about `op` not being initialized in some code branches. It should be easy to initialize by default as CUBLAS_OP_N or assert that `trans` can't be another character. Same story with `inttypes.h`. Then the functions not in scope is about some quirk in generation system, can't dig into it.\r\n```cpp\r\nvoid THCudaBlas_Sgemv(THCState *state, char trans, int64_t m, int64_t n, float alpha, float *a, int64_t lda, float *x, int64_t incx, float beta, float *y, int64_t incy)\r\n{\r\n  if(n == 1)\r\n    lda = m;\r\n\r\n  cublasOperation_t op;\r\n  if (trans == 't') op = CUBLAS_OP_T;\r\n  else if (trans == 'n') op = CUBLAS_OP_N;\r\n  else if (trans == 'c') op = CUBLAS_OP_C;\r\n\r\n  if( (m <= INT_MAX) && (n <= INT_MAX) &&\r\n      (lda > 0) && (lda <= INT_MAX) &&\r\n      (incx > 0) && (incx <= INT_MAX) &&\r\n      (incy > 0) && (incy <= INT_MAX) )\r\n  {\r\n    int i_m = (int)m;\r\n    int i_n = (int)n;\r\n    int i_lda = (int)lda;\r\n    int i_incx = (int)incx;\r\n    int i_incy = (int)incy;\r\n\r\n    cublasHandle_t handle = THCState_getCurrentBlasHandle(state);\r\n    cublasSetStream(handle, THCState_getCurrentStream(state));\r\n    THCublasCheck(cublasSgemv(handle, op, i_m, i_n, &alpha, a, i_lda, x, i_incx, &beta, y, i_incy));\r\n    return;\r\n  }\r\n  THError(\"Cublas_Sgemv only supports m, n, lda, incx, incy\"\r\n          \"in the range 0 < [val] <= %d\", INT_MAX);\r\n}\r\n\r\n```"}