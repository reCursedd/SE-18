{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/254161365", "html_url": "https://github.com/pytorch/pytorch/issues/20#issuecomment-254161365", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/20", "id": 254161365, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDE2MTM2NQ==", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-17T09:43:25Z", "updated_at": "2016-10-17T09:43:38Z", "author_association": "MEMBER", "body_html": "<p>This seems to be an elegant solution. It'd be probably the best to make <code>torch.Size</code> a subclass of <code>tuple</code>.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Size</span>(<span class=\"pl-c1\">tuple</span>):\n    <span class=\"pl-k\">pass</span></pre></div>\n<p>Btw, if you have a regular tuple or list of sizes, you can do <code>torch.Tensor(*sizes)</code>, instead of <code>torch.Tensor(torch.Size(sizes))</code>.</p>", "body_text": "This seems to be an elegant solution. It'd be probably the best to make torch.Size a subclass of tuple.\nclass Size(tuple):\n    pass\nBtw, if you have a regular tuple or list of sizes, you can do torch.Tensor(*sizes), instead of torch.Tensor(torch.Size(sizes)).", "body": "This seems to be an elegant solution. It'd be probably the best to make `torch.Size` a subclass of `tuple`.\n\n``` python\nclass Size(tuple):\n    pass\n```\n\nBtw, if you have a regular tuple or list of sizes, you can do `torch.Tensor(*sizes)`, instead of `torch.Tensor(torch.Size(sizes))`.\n"}