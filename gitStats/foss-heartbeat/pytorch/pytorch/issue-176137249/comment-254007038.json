{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/254007038", "html_url": "https://github.com/pytorch/pytorch/issues/20#issuecomment-254007038", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/20", "id": 254007038, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDAwNzAzOA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-15T19:51:16Z", "updated_at": "2016-10-15T19:51:16Z", "author_association": "MEMBER", "body_html": "<p>I got bitten by this again in the PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"183170768\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/pytorch/pytorch/issues/127\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/pytorch/pytorch/pull/127/hovercard\" href=\"https://github.com/pytorch/pytorch/pull/127\">#127</a> -- it breaks with LongTensors.</p>\n<p>I have a new proposal that avoids requiring keyword arguments:</p>\n<p>We change <code>Tensor.size()</code> to return a new type <code>torch.Size()</code> instead of <code>torch.LongStorage</code>. The <code>torch.Size()</code> type provides a some standard operations like indexing, but it's immutable. A tensor can be constructed a <code>torch.Size()</code> type so the following still works:</p>\n<p><code>foo = torch.FloatTensor(tensor.size())</code></p>\n<p>Some more examples:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.FloatTensor(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">2</span>).size()\ntorch.Size([<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">2</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.FloatTensor(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">2</span>).size()[<span class=\"pl-c1\">0</span>]\n<span class=\"pl-c1\">3</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.FloatTensor(torch.Size([<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">2</span>]))\n<span class=\"pl-c1\">...</span>\n[torch.FloatTensor of size <span class=\"pl-ii\">3x4x2</span>] \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> torch.LongTensor(torch.LongStorage([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>])) <span class=\"pl-c\"><span class=\"pl-c\">#</span> as opposed to a LongTensor of size 1x2x3</span>\n <span class=\"pl-c1\">1</span>\n <span class=\"pl-c1\">2</span>\n <span class=\"pl-c1\">3</span>\n[torch.LongTensor of size <span class=\"pl-c1\">3</span>]</pre></div>\n<p>If you guys are OK with this, I'll make the change.</p>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1310570\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/soumith\">@soumith</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5702157\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adamlerer\">@adamlerer</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9110200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fmassa\">@fmassa</a></p>", "body_text": "I got bitten by this again in the PR #127 -- it breaks with LongTensors.\nI have a new proposal that avoids requiring keyword arguments:\nWe change Tensor.size() to return a new type torch.Size() instead of torch.LongStorage. The torch.Size() type provides a some standard operations like indexing, but it's immutable. A tensor can be constructed a torch.Size() type so the following still works:\nfoo = torch.FloatTensor(tensor.size())\nSome more examples:\n>>> torch.FloatTensor(3, 4, 2).size()\ntorch.Size([3, 4, 2])\n>>> torch.FloatTensor(3, 4, 2).size()[0]\n3\n>>> torch.FloatTensor(torch.Size([3, 4, 2]))\n...\n[torch.FloatTensor of size 3x4x2] \n>>> torch.LongTensor(torch.LongStorage([1, 2, 3])) # as opposed to a LongTensor of size 1x2x3\n 1\n 2\n 3\n[torch.LongTensor of size 3]\nIf you guys are OK with this, I'll make the change.\ncc @apaszke, @soumith, @adamlerer, @fmassa", "body": "I got bitten by this again in the PR #127 -- it breaks with LongTensors.\n\nI have a new proposal that avoids requiring keyword arguments:\n\nWe change `Tensor.size()` to return a new type `torch.Size()` instead of `torch.LongStorage`. The `torch.Size()` type provides a some standard operations like indexing, but it's immutable. A tensor can be constructed a `torch.Size()` type so the following still works:\n\n`foo = torch.FloatTensor(tensor.size())`\n\nSome more examples:\n\n``` python\n>>> torch.FloatTensor(3, 4, 2).size()\ntorch.Size([3, 4, 2])\n>>> torch.FloatTensor(3, 4, 2).size()[0]\n3\n>>> torch.FloatTensor(torch.Size([3, 4, 2]))\n...\n[torch.FloatTensor of size 3x4x2] \n>>> torch.LongTensor(torch.LongStorage([1, 2, 3])) # as opposed to a LongTensor of size 1x2x3\n 1\n 2\n 3\n[torch.LongTensor of size 3]\n```\n\nIf you guys are OK with this, I'll make the change. \n\ncc @apaszke, @soumith, @adamlerer, @fmassa \n"}