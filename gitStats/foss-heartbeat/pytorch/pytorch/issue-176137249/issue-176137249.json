{"url": "https://api.github.com/repos/pytorch/pytorch/issues/20", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/20/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/20/events", "html_url": "https://github.com/pytorch/pytorch/issues/20", "id": 176137249, "node_id": "MDU6SXNzdWUxNzYxMzcyNDk=", "number": 20, "title": "Figure out and fix Tensor(Storage) constructor", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 424131847, "node_id": "MDU6TGFiZWw0MjQxMzE4NDc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/bug", "name": "bug", "color": "b60205", "default": true}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-09-09T23:35:38Z", "updated_at": "2016-10-28T22:51:30Z", "closed_at": "2016-10-28T22:51:30Z", "author_association": "MEMBER", "body_html": "<p>Sometimes constructing a Tensor with a storage interprets the storage as the backing storage:</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.IntTensor(torch.IntStorage([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>]))\n\n <span class=\"pl-c1\">1</span>\n <span class=\"pl-c1\">2</span>\n <span class=\"pl-c1\">3</span>\n[torch.IntTensor of size <span class=\"pl-c1\">3</span>]</pre></div>\n<p>But not if it's a LongStorage</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.LongTensor(torch.LongStorage([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>]))\n\n(<span class=\"pl-c1\">0</span>,.,.) <span class=\"pl-k\">=</span>\n  <span class=\"pl-c1\">1.4059e+14</span>  <span class=\"pl-c1\">1.4059e+14</span>  <span class=\"pl-c1\">1.4059e+14</span>\n  <span class=\"pl-c1\">0.0000e+00</span>  <span class=\"pl-c1\">0.0000e+00</span>  <span class=\"pl-c1\">1.4059e+14</span>\n[torch.LongTensor of size <span class=\"pl-ii\">1x2x3</span>]</pre></div>\n<p>This is because we want to allow constructions like:</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.IntTensor([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>])\nb <span class=\"pl-k\">=</span> torch.FloatTensor(a.size())</pre></div>\n<p>But we also want to allow things like:</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.IntTensor([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>])\nb <span class=\"pl-k\">=</span> torch.IntTensor(a.storage())</pre></div>\n<p>We should resolve this ambiguity, probably using keyword arguments. We probably need to require something like:</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> torch.XTensor(<span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>b.size())\na <span class=\"pl-k\">=</span> torch.XTensor(<span class=\"pl-v\">storage</span><span class=\"pl-k\">=</span>b.storage())</pre></div>", "body_text": "Sometimes constructing a Tensor with a storage interprets the storage as the backing storage:\na = torch.IntTensor(torch.IntStorage([1,2,3]))\n\n 1\n 2\n 3\n[torch.IntTensor of size 3]\nBut not if it's a LongStorage\na = torch.LongTensor(torch.LongStorage([1,2,3]))\n\n(0,.,.) =\n  1.4059e+14  1.4059e+14  1.4059e+14\n  0.0000e+00  0.0000e+00  1.4059e+14\n[torch.LongTensor of size 1x2x3]\nThis is because we want to allow constructions like:\na = torch.IntTensor([1,2,3])\nb = torch.FloatTensor(a.size())\nBut we also want to allow things like:\na = torch.IntTensor([1,2,3])\nb = torch.IntTensor(a.storage())\nWe should resolve this ambiguity, probably using keyword arguments. We probably need to require something like:\na = torch.XTensor(size=b.size())\na = torch.XTensor(storage=b.storage())", "body": "Sometimes constructing a Tensor with a storage interprets the storage as the backing storage:\n\n``` python\na = torch.IntTensor(torch.IntStorage([1,2,3]))\n\n 1\n 2\n 3\n[torch.IntTensor of size 3]\n```\n\nBut not if it's a LongStorage\n\n``` python\na = torch.LongTensor(torch.LongStorage([1,2,3]))\n\n(0,.,.) =\n  1.4059e+14  1.4059e+14  1.4059e+14\n  0.0000e+00  0.0000e+00  1.4059e+14\n[torch.LongTensor of size 1x2x3]\n```\n\nThis is because we want to allow constructions like:\n\n``` python\na = torch.IntTensor([1,2,3])\nb = torch.FloatTensor(a.size())\n```\n\nBut we also want to allow things like:\n\n``` python\na = torch.IntTensor([1,2,3])\nb = torch.IntTensor(a.storage())\n```\n\nWe should resolve this ambiguity, probably using keyword arguments. We probably need to require something like:\n\n``` python\na = torch.XTensor(size=b.size())\na = torch.XTensor(storage=b.storage())\n```\n"}