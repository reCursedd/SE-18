{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93647910", "pull_request_review_id": 14180145, "id": 93647910, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzNjQ3OTEw", "diff_hunk": "@@ -31,35 +35,114 @@ def forward(self, input):\n             return output\n \n     def backward(self, grad_output, _indices_grad=None):\n-        if self.save_indices:\n+        if self.return_indices:\n             input, indices = self.saved_tensors\n         else:\n             input, = self.saved_tensors\n             indices = self.indices\n         grad_input = grad_output.new()\n-        self._bw_call(self._backend.library_state, input, grad_output,\n-                grad_input, indices, *self.additional_args)\n+        backend = type2backend[type(input)]\n+        backend.SpatialDilatedMaxPooling_updateGradInput(backend.library_state,\n+                input, grad_output, grad_input, indices, \n+                self.kernel_size, 1,\n+                self.stride, 1,\n+                self.pad, 0,\n+                self.dilation, 1,\n+                self.ceil_mode)\n         return grad_input\n \n+class MaxPool2d(Function):\n+    def __init__(self, kernel_size, stride=None, padding=0, dilation=1,\n+                 return_indices=False, ceil_mode=False):\n+        self.kh, self.kw = _pair(kernel_size)\n+        self.dh, self.dw = _pair(stride or kernel_size)\n+        self.padh, self.padw = _pair(padding)\n+        self.dilh, self.dilw = _pair(dilation)\n+        self.return_indices = return_indices\n+        self.ceil_mode = ceil_mode\n \n-class MaxPool1d(_MaxPoolingBase):\n-    def __init__(self, *args):\n-        super(MaxPool1d, self).__init__(*args)\n-        aa = self.additional_args\n-        self.additional_args = (aa[0], 1, aa[1], 1, aa[2], 0, aa[3], 1, aa[4])\n-\n+    def forward(self, input):\n+        backend = type2backend[type(input)]\n+        indices, output = input.new().long(), input.new()\n+        backend.SpatialDilatedMaxPooling_updateOutput(backend.library_state,\n+                input, output, indices,\n+                self.kw, self.kh,\n+                self.dw, self.dh,\n+                self.padw, self.padh,\n+                self.dilw, self.dilh,\n+                self.ceil_mode)\n+        if self.return_indices:\n+            self.save_for_backward(input, indices)\n+            self.mark_non_differentiable(indices)\n+            return output, indices\n+        else:\n+            self.save_for_backward(input)\n+            self.indices = indices\n+            return output\n \n-class MaxPool2d(_MaxPoolingBase):\n-    pass\n+    def backward(self, grad_output, _indices_grad=None):\n+        if self.return_indices:\n+            input, indices = self.saved_tensors\n+        else:\n+            input, = self.saved_tensors\n+            indices = self.indices\n+        grad_input = grad_output.new()\n+        backend = type2backend[type(input)]\n+        backend.SpatialDilatedMaxPooling_updateGradInput(backend.library_state,\n+                input, grad_output, grad_input, indices, \n+                self.kw, self.kh,\n+                self.dw, self.dh,\n+                self.padw, self.padh,\n+                self.dilw, self.dilh,\n+                self.ceil_mode)\n+        return grad_input\n \n+class MaxPool3d(Function):\n \n-class MaxPool3d(_MaxPoolingBase):\n+    def __init__(self, kernel_size, stride=None, padding=0, dilation=1,\n+                 return_indices=False, ceil_mode=False):\n+        self.kernel_size = _triple(kernel_size)", "path": "torch/nn/functions/thnn/pooling.py", "position": 128, "original_position": 128, "commit_id": "cafbf190d41d9983324d22f2a0f819c52baddfe4", "original_commit_id": "156b341dc7c2947f1da6bbebb3c8b31a70791e23", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "body": "MaxPool2d has 'kh' and 'kw' but MaxPool3d has the tuple 'kernel_size'. Seems like we should be consistent, no?\r\n\r\nI'd be in favor of using `kernel_size` everywhere", "created_at": "2016-12-22T15:57:31Z", "updated_at": "2018-11-23T15:32:04Z", "html_url": "https://github.com/pytorch/pytorch/pull/343#discussion_r93647910", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/343", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/93647910"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/343#discussion_r93647910"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/343"}}, "body_html": "<p>MaxPool2d has 'kh' and 'kw' but MaxPool3d has the tuple 'kernel_size'. Seems like we should be consistent, no?</p>\n<p>I'd be in favor of using <code>kernel_size</code> everywhere</p>", "body_text": "MaxPool2d has 'kh' and 'kw' but MaxPool3d has the tuple 'kernel_size'. Seems like we should be consistent, no?\nI'd be in favor of using kernel_size everywhere"}