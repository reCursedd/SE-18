{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409694391", "html_url": "https://github.com/pytorch/pytorch/pull/9960#issuecomment-409694391", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9960", "id": 409694391, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTY5NDM5MQ==", "user": {"login": "rfejgin", "id": 345348, "node_id": "MDQ6VXNlcjM0NTM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/345348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfejgin", "html_url": "https://github.com/rfejgin", "followers_url": "https://api.github.com/users/rfejgin/followers", "following_url": "https://api.github.com/users/rfejgin/following{/other_user}", "gists_url": "https://api.github.com/users/rfejgin/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfejgin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfejgin/subscriptions", "organizations_url": "https://api.github.com/users/rfejgin/orgs", "repos_url": "https://api.github.com/users/rfejgin/repos", "events_url": "https://api.github.com/users/rfejgin/events{/privacy}", "received_events_url": "https://api.github.com/users/rfejgin/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-01T19:31:44Z", "updated_at": "2018-08-01T19:32:39Z", "author_association": "NONE", "body_html": "<p>It's starting to look like a floating point numeric accuracy thing, that the code isn't resilient to. I'm seeing cases where curBucket should be equal to prevBucket (because the bucket itself has zero probabilitly), but they are slightly different, with curBucket being 1.0 and prevBucket being a little less than 1.0. If the sample falls between those values, the bucket gets selected.<br>\nI think curBucket prevBucket should be equal <em>mathematically</em> but are diverging because of floating point arithmetic -- they are the result of different sums calculated by different threads.</p>", "body_text": "It's starting to look like a floating point numeric accuracy thing, that the code isn't resilient to. I'm seeing cases where curBucket should be equal to prevBucket (because the bucket itself has zero probabilitly), but they are slightly different, with curBucket being 1.0 and prevBucket being a little less than 1.0. If the sample falls between those values, the bucket gets selected.\nI think curBucket prevBucket should be equal mathematically but are diverging because of floating point arithmetic -- they are the result of different sums calculated by different threads.", "body": "It's starting to look like a floating point numeric accuracy thing, that the code isn't resilient to. I'm seeing cases where curBucket should be equal to prevBucket (because the bucket itself has zero probabilitly), but they are slightly different, with curBucket being 1.0 and prevBucket being a little less than 1.0. If the sample falls between those values, the bucket gets selected.\r\nI think curBucket prevBucket should be equal *mathematically* but are diverging because of floating point arithmetic -- they are the result of different sums calculated by different threads."}