{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/409424672", "html_url": "https://github.com/pytorch/pytorch/pull/9960#issuecomment-409424672", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/9960", "id": 409424672, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTQyNDY3Mg==", "user": {"login": "rfejgin", "id": 345348, "node_id": "MDQ6VXNlcjM0NTM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/345348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfejgin", "html_url": "https://github.com/rfejgin", "followers_url": "https://api.github.com/users/rfejgin/followers", "following_url": "https://api.github.com/users/rfejgin/following{/other_user}", "gists_url": "https://api.github.com/users/rfejgin/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfejgin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfejgin/subscriptions", "organizations_url": "https://api.github.com/users/rfejgin/orgs", "repos_url": "https://api.github.com/users/rfejgin/repos", "events_url": "https://api.github.com/users/rfejgin/events{/privacy}", "received_events_url": "https://api.github.com/users/rfejgin/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-01T02:03:52Z", "updated_at": "2018-08-01T02:05:03Z", "author_association": "NONE", "body_html": "<p>I added some tracing in the CUDA code. In the case I caught, the uniform sample equals 0.99999994. Then many buckets (to the right of the last non-zero-probability bin) ended up meeting the condition</p>\n<p><code> (cat &lt; categories) &amp;&amp; (!THCNumerics&lt;T&gt;::ge(sample, curBucket)) &amp;&amp; (THCNumerics&lt;T&gt;::ge(sample, prevBucket));</code></p>\n<p>All of them had curBucket == 1.0 and prevBucket == 0.99999994</p>\n<p>Then many threads end up writing out the result in this line<br>\n<code>dest[curDist] = cat + TH_INDEX_BASE;</code></p>\n<p>and I think that maybe the last of the threads to make that update wins.</p>\n<p>Now I guess the question is why curBucket does not equal prevBucket even though all the nearby bins have zero probability.</p>", "body_text": "I added some tracing in the CUDA code. In the case I caught, the uniform sample equals 0.99999994. Then many buckets (to the right of the last non-zero-probability bin) ended up meeting the condition\n (cat < categories) && (!THCNumerics<T>::ge(sample, curBucket)) && (THCNumerics<T>::ge(sample, prevBucket));\nAll of them had curBucket == 1.0 and prevBucket == 0.99999994\nThen many threads end up writing out the result in this line\ndest[curDist] = cat + TH_INDEX_BASE;\nand I think that maybe the last of the threads to make that update wins.\nNow I guess the question is why curBucket does not equal prevBucket even though all the nearby bins have zero probability.", "body": "I added some tracing in the CUDA code. In the case I caught, the uniform sample equals 0.99999994. Then many buckets (to the right of the last non-zero-probability bin) ended up meeting the condition\r\n\r\n ` (cat < categories) &&\r\n        (!THCNumerics<T>::ge(sample, curBucket)) &&\r\n        (THCNumerics<T>::ge(sample, prevBucket));`\r\n\r\nAll of them had curBucket == 1.0 and prevBucket == 0.99999994\r\n\r\nThen many threads end up writing out the result in this line\r\n`dest[curDist] = cat + TH_INDEX_BASE;`\r\n\r\nand I think that maybe the last of the threads to make that update wins.\r\n\r\n \r\nNow I guess the question is why curBucket does not equal prevBucket even though all the nearby bins have zero probability."}