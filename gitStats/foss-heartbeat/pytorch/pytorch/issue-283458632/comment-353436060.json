{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/353436060", "html_url": "https://github.com/pytorch/pytorch/pull/4270#issuecomment-353436060", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4270", "id": 353436060, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzQzNjA2MA==", "user": {"login": "neerajprad", "id": 1762463, "node_id": "MDQ6VXNlcjE3NjI0NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1762463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neerajprad", "html_url": "https://github.com/neerajprad", "followers_url": "https://api.github.com/users/neerajprad/followers", "following_url": "https://api.github.com/users/neerajprad/following{/other_user}", "gists_url": "https://api.github.com/users/neerajprad/gists{/gist_id}", "starred_url": "https://api.github.com/users/neerajprad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neerajprad/subscriptions", "organizations_url": "https://api.github.com/users/neerajprad/orgs", "repos_url": "https://api.github.com/users/neerajprad/repos", "events_url": "https://api.github.com/users/neerajprad/events{/privacy}", "received_events_url": "https://api.github.com/users/neerajprad/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-21T19:24:12Z", "updated_at": "2017-12-21T19:26:54Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>It's still a bit surprising for me that a test required this, because as far as I can see the old code didn't account for infinities at all (it would do a - b, and this gives you a NaN IIRC). Are you sure this is the case?</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4583066\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/apaszke\">@apaszke</a> - It is in <code>_test_scalar_conversions</code> L1270.</p>\n<pre><code>        f[0] = float('inf')\n        self.assertEqual(float(f), float('inf'))\n        f[0] = float('-inf')\n        self.assertEqual(float(f), float('-inf'))\n</code></pre>\n<p>I believe in cases like these, it is fine since the test authors know what they are doing. But it can be tricky if both the values were computed and resulted in infinities when the value should have been finite.</p>", "body_text": "It's still a bit surprising for me that a test required this, because as far as I can see the old code didn't account for infinities at all (it would do a - b, and this gives you a NaN IIRC). Are you sure this is the case?\n\n@apaszke - It is in _test_scalar_conversions L1270.\n        f[0] = float('inf')\n        self.assertEqual(float(f), float('inf'))\n        f[0] = float('-inf')\n        self.assertEqual(float(f), float('-inf'))\n\nI believe in cases like these, it is fine since the test authors know what they are doing. But it can be tricky if both the values were computed and resulted in infinities when the value should have been finite.", "body": "> It's still a bit surprising for me that a test required this, because as far as I can see the old code didn't account for infinities at all (it would do a - b, and this gives you a NaN IIRC). Are you sure this is the case?\r\n\r\n@apaszke - It is in `_test_scalar_conversions` L1270. \r\n\r\n```\r\n        f[0] = float('inf')\r\n        self.assertEqual(float(f), float('inf'))\r\n        f[0] = float('-inf')\r\n        self.assertEqual(float(f), float('-inf'))\r\n```\r\n\r\nI believe in cases like these, it is fine since the test authors know what they are doing. But it can be tricky if both the values were computed and resulted in infinities when the value should have been finite.\r\n"}