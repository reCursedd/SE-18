{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158073090", "pull_request_review_id": 84822426, "id": 158073090, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODA3MzA5MA==", "diff_hunk": "@@ -218,21 +220,26 @@ def assertTensorsEqual(a, b):\n             else:\n                 assertTensorsEqual(x, y)\n         elif isinstance(x, string_classes) and isinstance(y, string_classes):\n-            super(TestCase, self).assertEqual(x, y)\n+            super(TestCase, self).assertEqual(x, y, message)\n         elif type(x) == set and type(y) == set:\n-            super(TestCase, self).assertEqual(x, y)\n+            super(TestCase, self).assertEqual(x, y, message)\n         elif is_iterable(x) and is_iterable(y):\n-            super(TestCase, self).assertEqual(len(x), len(y))\n+            super(TestCase, self).assertEqual(len(x), len(y), message)\n             for x_, y_ in zip(x, y):\n                 self.assertEqual(x_, y_, prec, message)\n-        else:\n-            try:\n-                self.assertLessEqual(abs(x - y), prec, message)\n+        elif isinstance(x, Number) and isinstance(y, Number):\n+            if abs(x) == float('inf') and abs(y) == float('inf'):", "path": "test/common.py", "position": null, "original_position": 45, "commit_id": "1518dfccebc6c409717fedd8ed55816bc381ed9a", "original_commit_id": "d819c79f8d3bab73807a3969a0fac096a2f4717a", "user": {"login": "neerajprad", "id": 1762463, "node_id": "MDQ6VXNlcjE3NjI0NjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1762463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neerajprad", "html_url": "https://github.com/neerajprad", "followers_url": "https://api.github.com/users/neerajprad/followers", "following_url": "https://api.github.com/users/neerajprad/following{/other_user}", "gists_url": "https://api.github.com/users/neerajprad/gists{/gist_id}", "starred_url": "https://api.github.com/users/neerajprad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neerajprad/subscriptions", "organizations_url": "https://api.github.com/users/neerajprad/orgs", "repos_url": "https://api.github.com/users/neerajprad/repos", "events_url": "https://api.github.com/users/neerajprad/events{/privacy}", "received_events_url": "https://api.github.com/users/neerajprad/received_events", "type": "User", "site_admin": false}, "body": "I removed the `inf` checks, but we are doing the approximate test now only if `x != y` which indirectly does account for infinities, i.e. ( `float('inf') == float('inf')  => True` in python ). There is a test in `test_autograd` which needs this and I think it may be useful in comparing `log_prob` values when probability is 0. \r\n\r\n> if you write your test incorrectly such that it always overflows then it will pass and you won\u2019t even notice that it doesn\u2019t check anything\r\n\r\nThis could happen if the expected value is not set by the user (to infinity) but rather computed through some other method. Let me know what you think.\r\n\r\n", "created_at": "2017-12-20T16:36:15Z", "updated_at": "2018-11-23T15:37:34Z", "html_url": "https://github.com/pytorch/pytorch/pull/4270#discussion_r158073090", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4270", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/158073090"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4270#discussion_r158073090"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4270"}}, "body_html": "<p>I removed the <code>inf</code> checks, but we are doing the approximate test now only if <code>x != y</code> which indirectly does account for infinities, i.e. ( <code>float('inf') == float('inf')  =&gt; True</code> in python ). There is a test in <code>test_autograd</code> which needs this and I think it may be useful in comparing <code>log_prob</code> values when probability is 0.</p>\n<blockquote>\n<p>if you write your test incorrectly such that it always overflows then it will pass and you won\u2019t even notice that it doesn\u2019t check anything</p>\n</blockquote>\n<p>This could happen if the expected value is not set by the user (to infinity) but rather computed through some other method. Let me know what you think.</p>", "body_text": "I removed the inf checks, but we are doing the approximate test now only if x != y which indirectly does account for infinities, i.e. ( float('inf') == float('inf')  => True in python ). There is a test in test_autograd which needs this and I think it may be useful in comparing log_prob values when probability is 0.\n\nif you write your test incorrectly such that it always overflows then it will pass and you won\u2019t even notice that it doesn\u2019t check anything\n\nThis could happen if the expected value is not set by the user (to infinity) but rather computed through some other method. Let me know what you think.", "in_reply_to_id": 157958207}