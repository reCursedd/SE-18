{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/337981230", "html_url": "https://github.com/pytorch/pytorch/pull/3165#issuecomment-337981230", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3165", "id": 337981230, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzk4MTIzMA==", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-19T17:35:28Z", "updated_at": "2017-10-19T17:35:28Z", "author_association": "MEMBER", "body_html": "<p>We'll want a <code>def sample_n(num_samples)</code> function that samples multiple times. I didn't include it because I wanted to keep this minimal.</p>\n<p>It'll also be better once we have better scalar support.</p>\n<p>TensorFlow calls the shape determined by the parameters the <code>batch shape</code>. <code>sample()</code> returns a tensor with the batch shape. <code>sample_n(N)</code> returns something <code>N</code> x <code>batch_shape</code>.</p>\n<p>For Bernoulli and Normal the batch shape is just the shape of the constructor arguments.<br>\nFor Mutlinomial, the probs is <code>batch_shape</code> x <code>K</code>.</p>\n<p>This means that the returned shapes follow a consistent pattern. We want <code>sample_n</code> to be a separate function from <code>sample</code> because <code>1 x N</code> is a different shape from <code>N</code>.</p>", "body_text": "We'll want a def sample_n(num_samples) function that samples multiple times. I didn't include it because I wanted to keep this minimal.\nIt'll also be better once we have better scalar support.\nTensorFlow calls the shape determined by the parameters the batch shape. sample() returns a tensor with the batch shape. sample_n(N) returns something N x batch_shape.\nFor Bernoulli and Normal the batch shape is just the shape of the constructor arguments.\nFor Mutlinomial, the probs is batch_shape x K.\nThis means that the returned shapes follow a consistent pattern. We want sample_n to be a separate function from sample because 1 x N is a different shape from N.", "body": "We'll want a `def sample_n(num_samples)` function that samples multiple times. I didn't include it because I wanted to keep this minimal.\r\n\r\nIt'll also be better once we have better scalar support.\r\n\r\nTensorFlow calls the shape determined by the parameters the `batch shape`. `sample()` returns a tensor with the batch shape. `sample_n(N)` returns something `N` x `batch_shape`.\r\n\r\nFor Bernoulli and Normal the batch shape is just the shape of the constructor arguments.\r\nFor Mutlinomial, the probs is `batch_shape` x `K`.\r\n\r\nThis means that the returned shapes follow a consistent pattern. We want `sample_n` to be a separate function from `sample` because `1 x N` is a different shape from `N`."}