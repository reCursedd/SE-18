{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145552373", "pull_request_review_id": 70369439, "id": 145552373, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTU1MjM3Mw==", "diff_hunk": "@@ -0,0 +1,146 @@\n+\"\"\"\n+The ``distributions`` package contains parameterizable probability distributions\n+and sampling functions.\n+\n+The :meth:`log_prob` method is useful for policy gradient based methods. If the\n+parameters of the distribution are differentiable, then the result of ``log_prob``\n+is also differentiable.\n+\n+Example::\n+\n+    probs = network(input)\n+    m = Multinomial(probs)\n+    action = m.sample()\n+    loss = -m.log_prob(action) * get_reward(env, action)\n+    loss.backward()\n+\"\"\"\n+import math\n+import torch\n+\n+\n+__all__ = ['Distribution', 'Bernoulli', 'Multinomial', 'Normal']\n+\n+\n+class Distribution(object):\n+    r\"\"\"\n+    Distribution is the abstract base class for probability distributions.\n+    \"\"\"\n+\n+    def sample(self):\n+        \"\"\"\n+        Generates a single sample or single batch of samples if the distribution\n+        parameters are batched.\n+        \"\"\"\n+        raise NotImplemented", "path": "torch/distributions.py", "position": null, "original_position": 34, "commit_id": "0cc156374bca28adc210ce0f73798bad6c73503b", "original_commit_id": "a6d4e7bc2c3591d062240158ef02d9ccbf0db60c", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "It should be `NotImplementedError`. `NotImplemented` doesn't subclass `Exception` (it's used only in comparison operators)", "created_at": "2017-10-18T21:47:00Z", "updated_at": "2018-11-23T15:35:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/3165#discussion_r145552373", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/3165", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/145552373"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/3165#discussion_r145552373"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/3165"}}, "body_html": "<p>It should be <code>NotImplementedError</code>. <code>NotImplemented</code> doesn't subclass <code>Exception</code> (it's used only in comparison operators)</p>", "body_text": "It should be NotImplementedError. NotImplemented doesn't subclass Exception (it's used only in comparison operators)"}