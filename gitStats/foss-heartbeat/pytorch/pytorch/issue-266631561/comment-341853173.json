{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/341853173", "html_url": "https://github.com/pytorch/pytorch/pull/3165#issuecomment-341853173", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/3165", "id": 341853173, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTg1MzE3Mw==", "user": {"login": "hughperkins", "id": 123560, "node_id": "MDQ6VXNlcjEyMzU2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/123560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hughperkins", "html_url": "https://github.com/hughperkins", "followers_url": "https://api.github.com/users/hughperkins/followers", "following_url": "https://api.github.com/users/hughperkins/following{/other_user}", "gists_url": "https://api.github.com/users/hughperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/hughperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hughperkins/subscriptions", "organizations_url": "https://api.github.com/users/hughperkins/orgs", "repos_url": "https://api.github.com/users/hughperkins/repos", "events_url": "https://api.github.com/users/hughperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/hughperkins/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-03T23:43:26Z", "updated_at": "2017-11-03T23:43:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p>To save other people hunting around, looks like these work something like:</p>\n<pre><code>m = torch.distributions.Multinomial(probs)\na = m.sample()\nloss = - (m.log_prob(a) * reward).sum()\nloss.backward()\n</code></pre>\n<p>(where before we'd have done:</p>\n<pre><code>a = torch.multinomial(probs)\na.reinforce(reward)\nautograd.backward([a], [None])\n</code></pre>", "body_text": "To save other people hunting around, looks like these work something like:\nm = torch.distributions.Multinomial(probs)\na = m.sample()\nloss = - (m.log_prob(a) * reward).sum()\nloss.backward()\n\n(where before we'd have done:\na = torch.multinomial(probs)\na.reinforce(reward)\nautograd.backward([a], [None])", "body": "To save other people hunting around, looks like these work something like:\r\n\r\n```\r\nm = torch.distributions.Multinomial(probs)\r\na = m.sample()\r\nloss = - (m.log_prob(a) * reward).sum()\r\nloss.backward()\r\n```\r\n\r\n(where before we'd have done:\r\n```\r\na = torch.multinomial(probs)\r\na.reinforce(reward)\r\nautograd.backward([a], [None])\r\n```"}