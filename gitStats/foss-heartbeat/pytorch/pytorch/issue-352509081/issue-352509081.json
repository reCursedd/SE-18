{"url": "https://api.github.com/repos/pytorch/pytorch/issues/10726", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/10726/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/10726/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/10726/events", "html_url": "https://github.com/pytorch/pytorch/issues/10726", "id": 352509081, "node_id": "MDU6SXNzdWUzNTI1MDkwODE=", "number": 10726, "title": "[ppc64le/pytorch] test_milstm_fusion_cuda and  test_lstm_fusion_cuda fails", "user": {"login": "avmgithub", "id": 9083746, "node_id": "MDQ6VXNlcjkwODM3NDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9083746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avmgithub", "html_url": "https://github.com/avmgithub", "followers_url": "https://api.github.com/users/avmgithub/followers", "following_url": "https://api.github.com/users/avmgithub/following{/other_user}", "gists_url": "https://api.github.com/users/avmgithub/gists{/gist_id}", "starred_url": "https://api.github.com/users/avmgithub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avmgithub/subscriptions", "organizations_url": "https://api.github.com/users/avmgithub/orgs", "repos_url": "https://api.github.com/users/avmgithub/repos", "events_url": "https://api.github.com/users/avmgithub/events{/privacy}", "received_events_url": "https://api.github.com/users/avmgithub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-08-21T12:05:50Z", "updated_at": "2018-08-28T14:20:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>The test using jit compiler seems ok for test_lstm_fusion_cuda  .  But not sure why the test_lstm_fusion_cuda (<strong>main</strong>.TestScript) fails.</p>\n<p>test_milstm_fusion_cuda fails (it has no equivalent jit test)</p>\n<p>How can I correct this ?</p>\n<p>Pytorch version :  torch (0.5.0a0+f0d8a36)<br>\nCuda 9.2<br>\ncudnn 7<br>\nppc64le Power8</p>\n<p>Here is the build/test log:  <a href=\"https://powerci.osuosl.org/job/pytorch-linux-cuda9-cudnn7-py3-mpi-build-test-gpu/264/console\" rel=\"nofollow\">https://powerci.osuosl.org/job/pytorch-linux-cuda9-cudnn7-py3-mpi-build-test-gpu/264/console</a></p>\n<pre><code>======================================================================\nFAIL: test_lstm_fusion_cuda (__main__.TestScript)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/jenkins/pytorch/test/common.py\", line 251, in wrapper\n    method(*args, **kwargs)\n  File \"/home/jenkins/pytorch/test/common.py\", line 107, in wrapper\n    fn(*args, **kwargs)\n  File \"test_jit.py\", line 2591, in test_lstm_fusion_cuda\n    self.assertExpectedGraph(backward_graph(module), subname='backward')\n  File \"test_jit.py\", line 228, in assertExpectedGraph\n    self.assertExpected(str(graph), *args, **kwargs)\n  File \"/home/jenkins/pytorch/test/common.py\", line 514, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[908 chars]aph(%9 : Float(3, 20)\\n      %19 : Float(3, 20[1722 chars]n}\\n' != 'grap[908 chars]aph(%11 : Float(3, 20)\\n      %21 : Float(3, 2[1723 chars]n}\\n'\n  graph(%0 : Float(3, 20!)\n        %1 : Float(3, 20!)\n        %2 : Dynamic\n        %3 : Dynamic\n        %4 : Dynamic\n        %5 : Dynamic\n        %6 : Dynamic\n        %7 : Dynamic\n        %8 : Dynamic\n        %x : Float(3, 10)\n        %hx : Float(3, 20)\n        %cx : Float(3, 20)\n        %12 : Float(10!, 80!)\n        %13 : Float(20!, 80!)\n        %ingate : Float(3, 20)\n        %forgetgate : Float(3, 20)\n        %cellgate : Float(3, 20)\n        %outgate : Float(3, 20)\n        %18 : Float(3, 20)) {\n    %19 : int = prim::Constant[value=1]()\n    %20 : Float(3, 80) = prim::FusionGroup_0[device=0](%ingate, %forgetgate, %cellgate, %outgate, %cx, %1, %18, %0)\n    %21 : Float(3, 80) = aten::mul(%20, %19)\n    %22 : Float(80!, 3!) = aten::t(%21)\n    %23 : Float(80, 20) = aten::mm(%22, %hx)\n    %24 : Float(80!, 3!) = aten::t(%20)\n    %25 : Float(80, 10) = aten::mm(%24, %x)\n    return (%25, %23, %21, %21);\n  }\n- with prim::FusionGroup_0 = graph(%9 : Float(3, 20)\n?                                   ^\n+ with prim::FusionGroup_0 = graph(%11 : Float(3, 20)\n?                                   ^^\n-       %19 : Float(3, 20)\n?         -\n+       %21 : Float(3, 20)\n?        +\n        %33 : Float(3, 20)\n-       %39 : Float(3, 20)\n?        ^^\n+       %41 : Float(3, 20)\n?        ^^\n        %46 : Float(3, 20)\n        %53 : Float(3, 20!)\n        %65 : Float(3, 20)\n        %67 : Float(3, 20!)) {\n    %69 : Float(3, 20) = aten::mul(%67, %65)\n-   %68 : Float(3, 20) = aten::mul(%67, %39)\n?                                        ^^\n+   %68 : Float(3, 20) = aten::mul(%67, %41)\n?                                        ^^\n    %66 : Float(3, 20) = aten::mul(%65, %65)\n    %64 : Float(3, 20) = aten::neg(%66)\n    %61 : int = prim::Constant[value=1]()\n    %62 : Float(3, 20) = aten::add(%64, %61, %61)\n    %59 : Float(3, 20) = aten::mul(%68, %62)\n    %55 : int = prim::Constant[value=1]()\n    %56 : Float(3, 20) = aten::add(%53, %59, %55)\n    %51 : int = prim::Constant[value=1]()\n    %52 : Float(3, 20) = aten::mul(%56, %51)\n    %50 : Float(3, 20) = aten::mul(%52, %33)\n-   %49 : Float(3, 20) = aten::mul(%52, %9)\n?                                        ^\n+   %49 : Float(3, 20) = aten::mul(%52, %11)\n?                                        ^^\n    %47 : Float(3, 20) = aten::mul(%56, %46)\n+   %44 : Float(3, 20) = aten::mul(%69, %41)\n-   %44 : Float(3, 20) = aten::neg(%39)\n?     ^                             ^^\n+   %42 : Float(3, 20) = aten::neg(%41)\n?     ^                             ^^\n-   %42 : int = prim::Constant[value=1]()\n?    ^^\n+   %39 : int = prim::Constant[value=1]()\n?    ^^\n-   %43 : Float(3, 20) = aten::add(%44, %42, %42)\n-   %40 : Float(3, 20) = aten::mul(%69, %39)\n?                              ^^^  ^\n+   %40 : Float(3, 20) = aten::add(%42, %39, %39)\n?                              ^^^  ^^^^^^\n-   %37 : Float(3, 20) = aten::mul(%40, %43)\n?                                    ^    ^\n+   %37 : Float(3, 20) = aten::mul(%44, %40)\n?                                    ^    ^\n    %34 : Float(3, 20) = aten::mul(%33, %33)\n    %32 : Float(3, 20) = aten::neg(%34)\n    %29 : int = prim::Constant[value=1]()\n    %30 : Float(3, 20) = aten::add(%32, %29, %29)\n    %27 : Float(3, 20) = aten::mul(%49, %30)\n-   %24 : Float(3, 20) = aten::neg(%19)\n-   %22 : int = prim::Constant[value=1]()\n-   %23 : Float(3, 20) = aten::add(%24, %22, %22)\n-   %20 : Float(3, 20) = aten::mul(%47, %19)\n?     ^                                   -\n+   %24 : Float(3, 20) = aten::mul(%47, %21)\n?     ^                                  +\n-   %17 : Float(3, 20) = aten::mul(%20, %23)\n-   %14 : Float(3, 20) = aten::neg(%9)\n?    ^^                             ^\n+   %22 : Float(3, 20) = aten::neg(%21)\n?    ^^                             ^^\n-   %12 : int = prim::Constant[value=1]()\n?     ^\n+   %19 : int = prim::Constant[value=1]()\n?     ^\n-   %13 : Float(3, 20) = aten::add(%14, %12, %12)\n?    ^^                             ^^    ^    ^\n+   %20 : Float(3, 20) = aten::add(%22, %19, %19)\n?    ^^                             ^^    ^    ^\n+   %17 : Float(3, 20) = aten::mul(%24, %20)\n-   %10 : Float(3, 20) = aten::mul(%50, %9)\n?     ^                                  ^\n+   %14 : Float(3, 20) = aten::mul(%50, %11)\n?     ^                                  ^^\n+   %12 : Float(3, 20) = aten::neg(%11)\n+   %9 : int = prim::Constant[value=1]()\n+   %10 : Float(3, 20) = aten::add(%12, %9, %9)\n-   %7 : Float(3, 20) = aten::mul(%10, %13)\n?                                   ^    ^\n+   %7 : Float(3, 20) = aten::mul(%14, %10)\n?                                   ^    ^\n    %4 : Float(3, 80) = prim::FusedConcat[dim=1](%7, %17, %27, %37)\n    return (%4);\n  }\n\n\n======================================================================\nFAIL: test_milstm_fusion_cuda (__main__.TestScript)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/jenkins/pytorch/test/common.py\", line 251, in wrapper\n    method(*args, **kwargs)\n  File \"/home/jenkins/pytorch/test/common.py\", line 107, in wrapper\n    fn(*args, **kwargs)\n  File \"test_jit.py\", line 2603, in test_milstm_fusion_cuda\n    self.assertExpectedGraph(backward_graph(module), subname='backward')\n  File \"test_jit.py\", line 228, in assertExpectedGraph\n    self.assertExpected(str(graph), *args, **kwargs)\n  File \"/home/jenkins/pytorch/test/common.py\", line 514, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[1502 chars]aph(%9 : Float(3, 20)\\n      %19 : Float(3, 20[2751 chars]n}\\n' != 'grap[1502 chars]aph(%11 : Float(3, 20)\\n      %21 : Float(3, 2[2752 chars]n}\\n'\n  graph(%0 : Float(3, 20!)\n        %1 : Float(3, 20!)\n        %2 : Dynamic\n        %3 : Dynamic\n        %4 : Dynamic\n        %5 : Dynamic\n        %6 : Dynamic\n        %7 : Dynamic\n        %8 : Dynamic\n        %9 : Dynamic\n        %10 : Dynamic\n        %11 : Dynamic\n        %x : Float(3, 10)\n        %hx : Float(3, 20)\n        %cx : Float(3, 20)\n        %alpha : Float(80)\n        %beta_i : Float(80)\n        %beta_h : Float(80)\n        %18 : Float(10!, 80!)\n        %Wx : Float(3, 80)\n        %20 : Float(20!, 80!)\n        %Uz : Float(3, 80)\n        %22 : Float(3, 80)\n        %ingate : Float(3, 20)\n        %forgetgate : Float(3, 20)\n        %cellgate : Float(3, 20)\n        %outgate : Float(3, 20)\n        %27 : Float(3, 20)) {\n    %28 : Float(3, 80) = prim::FusionGroup_0[device=0](%ingate, %forgetgate, %cellgate, %outgate, %cx, %1, %27, %0)\n    %29 : int[] = prim::Constant[value=[3, 80]]()\n    %30 : int = prim::Constant[value=0]()\n    %31 : Float(3!, 80) = aten::expand(%beta_h, %29, %30)\n    %32 : Float(3!, 80) = aten::expand(%beta_i, %29, %30)\n    %33 : Float(3!, 80) = aten::expand(%alpha, %29, %30)\n    %34 : Float(3, 80), %35 : Float(3, 80), %36 : Float(3, 80), %37 : Float(3, 80), %38 : Float(3, 80), %39 : Float(3, 80) = prim::FusionGroup_1[device=0](%33, %32, %Wx, %28, %Uz, %22, %31)\n    %40 : Float(80!, 3!) = aten::t(%36)\n    %41 : Float(80, 20) = aten::mm(%40, %hx)\n    %42 : Float(80!, 3!) = aten::t(%34)\n    %43 : Float(80, 10) = aten::mm(%42, %x)\n    return (%43, %41, %35, %37, %38, %39);\n  }\n- with prim::FusionGroup_0 = graph(%9 : Float(3, 20)\n?                                   ^\n+ with prim::FusionGroup_0 = graph(%11 : Float(3, 20)\n?                                   ^^\n-       %19 : Float(3, 20)\n?         -\n+       %21 : Float(3, 20)\n?        +\n        %33 : Float(3, 20)\n-       %39 : Float(3, 20)\n?        ^^\n+       %41 : Float(3, 20)\n?        ^^\n        %46 : Float(3, 20)\n        %53 : Float(3, 20!)\n        %65 : Float(3, 20)\n        %67 : Float(3, 20!)) {\n    %69 : Float(3, 20) = aten::mul(%67, %65)\n-   %68 : Float(3, 20) = aten::mul(%67, %39)\n?                                        ^^\n+   %68 : Float(3, 20) = aten::mul(%67, %41)\n?                                        ^^\n    %66 : Float(3, 20) = aten::mul(%65, %65)\n    %64 : Float(3, 20) = aten::neg(%66)\n    %61 : int = prim::Constant[value=1]()\n    %62 : Float(3, 20) = aten::add(%64, %61, %61)\n    %59 : Float(3, 20) = aten::mul(%68, %62)\n    %55 : int = prim::Constant[value=1]()\n    %56 : Float(3, 20) = aten::add(%53, %59, %55)\n    %51 : int = prim::Constant[value=1]()\n    %52 : Float(3, 20) = aten::mul(%56, %51)\n    %50 : Float(3, 20) = aten::mul(%52, %33)\n-   %49 : Float(3, 20) = aten::mul(%52, %9)\n?                                        ^\n+   %49 : Float(3, 20) = aten::mul(%52, %11)\n?                                        ^^\n    %47 : Float(3, 20) = aten::mul(%56, %46)\n+   %44 : Float(3, 20) = aten::mul(%69, %41)\n-   %44 : Float(3, 20) = aten::neg(%39)\n?     ^                             ^^\n+   %42 : Float(3, 20) = aten::neg(%41)\n?     ^                             ^^\n-   %42 : int = prim::Constant[value=1]()\n?    ^^\n+   %39 : int = prim::Constant[value=1]()\n?    ^^\n-   %43 : Float(3, 20) = aten::add(%44, %42, %42)\n-   %40 : Float(3, 20) = aten::mul(%69, %39)\n?                              ^^^  ^\n+   %40 : Float(3, 20) = aten::add(%42, %39, %39)\n?                              ^^^  ^^^^^^\n-   %37 : Float(3, 20) = aten::mul(%40, %43)\n?                                    ^    ^\n+   %37 : Float(3, 20) = aten::mul(%44, %40)\n?                                    ^    ^\n    %34 : Float(3, 20) = aten::mul(%33, %33)\n    %32 : Float(3, 20) = aten::neg(%34)\n    %29 : int = prim::Constant[value=1]()\n    %30 : Float(3, 20) = aten::add(%32, %29, %29)\n    %27 : Float(3, 20) = aten::mul(%49, %30)\n-   %24 : Float(3, 20) = aten::neg(%19)\n-   %22 : int = prim::Constant[value=1]()\n-   %23 : Float(3, 20) = aten::add(%24, %22, %22)\n-   %20 : Float(3, 20) = aten::mul(%47, %19)\n?     ^                                   -\n+   %24 : Float(3, 20) = aten::mul(%47, %21)\n?     ^                                  +\n-   %17 : Float(3, 20) = aten::mul(%20, %23)\n-   %14 : Float(3, 20) = aten::neg(%9)\n?    ^^                             ^\n+   %22 : Float(3, 20) = aten::neg(%21)\n?    ^^                             ^^\n-   %12 : int = prim::Constant[value=1]()\n?     ^\n+   %19 : int = prim::Constant[value=1]()\n?     ^\n-   %13 : Float(3, 20) = aten::add(%14, %12, %12)\n?    ^^                             ^^    ^    ^\n+   %20 : Float(3, 20) = aten::add(%22, %19, %19)\n?    ^^                             ^^    ^    ^\n+   %17 : Float(3, 20) = aten::mul(%24, %20)\n-   %10 : Float(3, 20) = aten::mul(%50, %9)\n?     ^                                  ^\n+   %14 : Float(3, 20) = aten::mul(%50, %11)\n?     ^                                  ^^\n+   %12 : Float(3, 20) = aten::neg(%11)\n+   %9 : int = prim::Constant[value=1]()\n+   %10 : Float(3, 20) = aten::add(%12, %9, %9)\n-   %7 : Float(3, 20) = aten::mul(%10, %13)\n?                                   ^    ^\n+   %7 : Float(3, 20) = aten::mul(%14, %10)\n?                                   ^    ^\n    %4 : Float(3, 80) = prim::FusedConcat[dim=1](%7, %17, %27, %37)\n    return (%4);\n  }\n  with prim::FusionGroup_1 = graph(%5 : Float(3!, 80)\n        %8 : Float(3!, 80)\n        %10 : Float(3, 80)\n        %12 : Float(3, 80)\n        %13 : Float(3, 80)\n        %20 : Float(3, 80)\n        %22 : Float(3!, 80)) {\n    %30 : int = prim::Constant[value=1]()\n    %29 : int = prim::Constant[value=1]()\n    %28 : int = prim::Constant[value=1]()\n    %26 : int = prim::Constant[value=1]()\n    %27 : Float(3, 80) = aten::mul(%12, %26)\n    %25 : Float(3, 80) = aten::mul(%27, %13)\n    %24 : Float(3, 80) = aten::mul(%27, %10)\n    %23 : Float(3, 80) = aten::mul(%27, %22)\n    %21 : Float(3, 80) = aten::mul(%12, %20)\n    %19 : int = prim::Constant[value=1]()\n    %17 : int = prim::Constant[value=1]()\n    %18 : Float(3, 80) = aten::add(%23, %21, %17)\n    %14 : Float(3, 80) = aten::mul(%12, %13)\n    %11 : Float(3, 80) = aten::mul(%14, %10)\n    %9 : Float(3, 80) = aten::mul(%27, %8)\n    %6 : Float(3, 80) = aten::mul(%14, %5)\n    %2 : int = prim::Constant[value=1]()\n    %3 : Float(3, 80) = aten::add(%9, %6, %2)\n    return (%3, %11, %18, %24, %25, %27);\n  }\n</code></pre>", "body_text": "The test using jit compiler seems ok for test_lstm_fusion_cuda  .  But not sure why the test_lstm_fusion_cuda (main.TestScript) fails.\ntest_milstm_fusion_cuda fails (it has no equivalent jit test)\nHow can I correct this ?\nPytorch version :  torch (0.5.0a0+f0d8a36)\nCuda 9.2\ncudnn 7\nppc64le Power8\nHere is the build/test log:  https://powerci.osuosl.org/job/pytorch-linux-cuda9-cudnn7-py3-mpi-build-test-gpu/264/console\n======================================================================\nFAIL: test_lstm_fusion_cuda (__main__.TestScript)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/jenkins/pytorch/test/common.py\", line 251, in wrapper\n    method(*args, **kwargs)\n  File \"/home/jenkins/pytorch/test/common.py\", line 107, in wrapper\n    fn(*args, **kwargs)\n  File \"test_jit.py\", line 2591, in test_lstm_fusion_cuda\n    self.assertExpectedGraph(backward_graph(module), subname='backward')\n  File \"test_jit.py\", line 228, in assertExpectedGraph\n    self.assertExpected(str(graph), *args, **kwargs)\n  File \"/home/jenkins/pytorch/test/common.py\", line 514, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[908 chars]aph(%9 : Float(3, 20)\\n      %19 : Float(3, 20[1722 chars]n}\\n' != 'grap[908 chars]aph(%11 : Float(3, 20)\\n      %21 : Float(3, 2[1723 chars]n}\\n'\n  graph(%0 : Float(3, 20!)\n        %1 : Float(3, 20!)\n        %2 : Dynamic\n        %3 : Dynamic\n        %4 : Dynamic\n        %5 : Dynamic\n        %6 : Dynamic\n        %7 : Dynamic\n        %8 : Dynamic\n        %x : Float(3, 10)\n        %hx : Float(3, 20)\n        %cx : Float(3, 20)\n        %12 : Float(10!, 80!)\n        %13 : Float(20!, 80!)\n        %ingate : Float(3, 20)\n        %forgetgate : Float(3, 20)\n        %cellgate : Float(3, 20)\n        %outgate : Float(3, 20)\n        %18 : Float(3, 20)) {\n    %19 : int = prim::Constant[value=1]()\n    %20 : Float(3, 80) = prim::FusionGroup_0[device=0](%ingate, %forgetgate, %cellgate, %outgate, %cx, %1, %18, %0)\n    %21 : Float(3, 80) = aten::mul(%20, %19)\n    %22 : Float(80!, 3!) = aten::t(%21)\n    %23 : Float(80, 20) = aten::mm(%22, %hx)\n    %24 : Float(80!, 3!) = aten::t(%20)\n    %25 : Float(80, 10) = aten::mm(%24, %x)\n    return (%25, %23, %21, %21);\n  }\n- with prim::FusionGroup_0 = graph(%9 : Float(3, 20)\n?                                   ^\n+ with prim::FusionGroup_0 = graph(%11 : Float(3, 20)\n?                                   ^^\n-       %19 : Float(3, 20)\n?         -\n+       %21 : Float(3, 20)\n?        +\n        %33 : Float(3, 20)\n-       %39 : Float(3, 20)\n?        ^^\n+       %41 : Float(3, 20)\n?        ^^\n        %46 : Float(3, 20)\n        %53 : Float(3, 20!)\n        %65 : Float(3, 20)\n        %67 : Float(3, 20!)) {\n    %69 : Float(3, 20) = aten::mul(%67, %65)\n-   %68 : Float(3, 20) = aten::mul(%67, %39)\n?                                        ^^\n+   %68 : Float(3, 20) = aten::mul(%67, %41)\n?                                        ^^\n    %66 : Float(3, 20) = aten::mul(%65, %65)\n    %64 : Float(3, 20) = aten::neg(%66)\n    %61 : int = prim::Constant[value=1]()\n    %62 : Float(3, 20) = aten::add(%64, %61, %61)\n    %59 : Float(3, 20) = aten::mul(%68, %62)\n    %55 : int = prim::Constant[value=1]()\n    %56 : Float(3, 20) = aten::add(%53, %59, %55)\n    %51 : int = prim::Constant[value=1]()\n    %52 : Float(3, 20) = aten::mul(%56, %51)\n    %50 : Float(3, 20) = aten::mul(%52, %33)\n-   %49 : Float(3, 20) = aten::mul(%52, %9)\n?                                        ^\n+   %49 : Float(3, 20) = aten::mul(%52, %11)\n?                                        ^^\n    %47 : Float(3, 20) = aten::mul(%56, %46)\n+   %44 : Float(3, 20) = aten::mul(%69, %41)\n-   %44 : Float(3, 20) = aten::neg(%39)\n?     ^                             ^^\n+   %42 : Float(3, 20) = aten::neg(%41)\n?     ^                             ^^\n-   %42 : int = prim::Constant[value=1]()\n?    ^^\n+   %39 : int = prim::Constant[value=1]()\n?    ^^\n-   %43 : Float(3, 20) = aten::add(%44, %42, %42)\n-   %40 : Float(3, 20) = aten::mul(%69, %39)\n?                              ^^^  ^\n+   %40 : Float(3, 20) = aten::add(%42, %39, %39)\n?                              ^^^  ^^^^^^\n-   %37 : Float(3, 20) = aten::mul(%40, %43)\n?                                    ^    ^\n+   %37 : Float(3, 20) = aten::mul(%44, %40)\n?                                    ^    ^\n    %34 : Float(3, 20) = aten::mul(%33, %33)\n    %32 : Float(3, 20) = aten::neg(%34)\n    %29 : int = prim::Constant[value=1]()\n    %30 : Float(3, 20) = aten::add(%32, %29, %29)\n    %27 : Float(3, 20) = aten::mul(%49, %30)\n-   %24 : Float(3, 20) = aten::neg(%19)\n-   %22 : int = prim::Constant[value=1]()\n-   %23 : Float(3, 20) = aten::add(%24, %22, %22)\n-   %20 : Float(3, 20) = aten::mul(%47, %19)\n?     ^                                   -\n+   %24 : Float(3, 20) = aten::mul(%47, %21)\n?     ^                                  +\n-   %17 : Float(3, 20) = aten::mul(%20, %23)\n-   %14 : Float(3, 20) = aten::neg(%9)\n?    ^^                             ^\n+   %22 : Float(3, 20) = aten::neg(%21)\n?    ^^                             ^^\n-   %12 : int = prim::Constant[value=1]()\n?     ^\n+   %19 : int = prim::Constant[value=1]()\n?     ^\n-   %13 : Float(3, 20) = aten::add(%14, %12, %12)\n?    ^^                             ^^    ^    ^\n+   %20 : Float(3, 20) = aten::add(%22, %19, %19)\n?    ^^                             ^^    ^    ^\n+   %17 : Float(3, 20) = aten::mul(%24, %20)\n-   %10 : Float(3, 20) = aten::mul(%50, %9)\n?     ^                                  ^\n+   %14 : Float(3, 20) = aten::mul(%50, %11)\n?     ^                                  ^^\n+   %12 : Float(3, 20) = aten::neg(%11)\n+   %9 : int = prim::Constant[value=1]()\n+   %10 : Float(3, 20) = aten::add(%12, %9, %9)\n-   %7 : Float(3, 20) = aten::mul(%10, %13)\n?                                   ^    ^\n+   %7 : Float(3, 20) = aten::mul(%14, %10)\n?                                   ^    ^\n    %4 : Float(3, 80) = prim::FusedConcat[dim=1](%7, %17, %27, %37)\n    return (%4);\n  }\n\n\n======================================================================\nFAIL: test_milstm_fusion_cuda (__main__.TestScript)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/jenkins/pytorch/test/common.py\", line 251, in wrapper\n    method(*args, **kwargs)\n  File \"/home/jenkins/pytorch/test/common.py\", line 107, in wrapper\n    fn(*args, **kwargs)\n  File \"test_jit.py\", line 2603, in test_milstm_fusion_cuda\n    self.assertExpectedGraph(backward_graph(module), subname='backward')\n  File \"test_jit.py\", line 228, in assertExpectedGraph\n    self.assertExpected(str(graph), *args, **kwargs)\n  File \"/home/jenkins/pytorch/test/common.py\", line 514, in assertExpected\n    self.assertMultiLineEqual(expected, s)\nAssertionError: 'grap[1502 chars]aph(%9 : Float(3, 20)\\n      %19 : Float(3, 20[2751 chars]n}\\n' != 'grap[1502 chars]aph(%11 : Float(3, 20)\\n      %21 : Float(3, 2[2752 chars]n}\\n'\n  graph(%0 : Float(3, 20!)\n        %1 : Float(3, 20!)\n        %2 : Dynamic\n        %3 : Dynamic\n        %4 : Dynamic\n        %5 : Dynamic\n        %6 : Dynamic\n        %7 : Dynamic\n        %8 : Dynamic\n        %9 : Dynamic\n        %10 : Dynamic\n        %11 : Dynamic\n        %x : Float(3, 10)\n        %hx : Float(3, 20)\n        %cx : Float(3, 20)\n        %alpha : Float(80)\n        %beta_i : Float(80)\n        %beta_h : Float(80)\n        %18 : Float(10!, 80!)\n        %Wx : Float(3, 80)\n        %20 : Float(20!, 80!)\n        %Uz : Float(3, 80)\n        %22 : Float(3, 80)\n        %ingate : Float(3, 20)\n        %forgetgate : Float(3, 20)\n        %cellgate : Float(3, 20)\n        %outgate : Float(3, 20)\n        %27 : Float(3, 20)) {\n    %28 : Float(3, 80) = prim::FusionGroup_0[device=0](%ingate, %forgetgate, %cellgate, %outgate, %cx, %1, %27, %0)\n    %29 : int[] = prim::Constant[value=[3, 80]]()\n    %30 : int = prim::Constant[value=0]()\n    %31 : Float(3!, 80) = aten::expand(%beta_h, %29, %30)\n    %32 : Float(3!, 80) = aten::expand(%beta_i, %29, %30)\n    %33 : Float(3!, 80) = aten::expand(%alpha, %29, %30)\n    %34 : Float(3, 80), %35 : Float(3, 80), %36 : Float(3, 80), %37 : Float(3, 80), %38 : Float(3, 80), %39 : Float(3, 80) = prim::FusionGroup_1[device=0](%33, %32, %Wx, %28, %Uz, %22, %31)\n    %40 : Float(80!, 3!) = aten::t(%36)\n    %41 : Float(80, 20) = aten::mm(%40, %hx)\n    %42 : Float(80!, 3!) = aten::t(%34)\n    %43 : Float(80, 10) = aten::mm(%42, %x)\n    return (%43, %41, %35, %37, %38, %39);\n  }\n- with prim::FusionGroup_0 = graph(%9 : Float(3, 20)\n?                                   ^\n+ with prim::FusionGroup_0 = graph(%11 : Float(3, 20)\n?                                   ^^\n-       %19 : Float(3, 20)\n?         -\n+       %21 : Float(3, 20)\n?        +\n        %33 : Float(3, 20)\n-       %39 : Float(3, 20)\n?        ^^\n+       %41 : Float(3, 20)\n?        ^^\n        %46 : Float(3, 20)\n        %53 : Float(3, 20!)\n        %65 : Float(3, 20)\n        %67 : Float(3, 20!)) {\n    %69 : Float(3, 20) = aten::mul(%67, %65)\n-   %68 : Float(3, 20) = aten::mul(%67, %39)\n?                                        ^^\n+   %68 : Float(3, 20) = aten::mul(%67, %41)\n?                                        ^^\n    %66 : Float(3, 20) = aten::mul(%65, %65)\n    %64 : Float(3, 20) = aten::neg(%66)\n    %61 : int = prim::Constant[value=1]()\n    %62 : Float(3, 20) = aten::add(%64, %61, %61)\n    %59 : Float(3, 20) = aten::mul(%68, %62)\n    %55 : int = prim::Constant[value=1]()\n    %56 : Float(3, 20) = aten::add(%53, %59, %55)\n    %51 : int = prim::Constant[value=1]()\n    %52 : Float(3, 20) = aten::mul(%56, %51)\n    %50 : Float(3, 20) = aten::mul(%52, %33)\n-   %49 : Float(3, 20) = aten::mul(%52, %9)\n?                                        ^\n+   %49 : Float(3, 20) = aten::mul(%52, %11)\n?                                        ^^\n    %47 : Float(3, 20) = aten::mul(%56, %46)\n+   %44 : Float(3, 20) = aten::mul(%69, %41)\n-   %44 : Float(3, 20) = aten::neg(%39)\n?     ^                             ^^\n+   %42 : Float(3, 20) = aten::neg(%41)\n?     ^                             ^^\n-   %42 : int = prim::Constant[value=1]()\n?    ^^\n+   %39 : int = prim::Constant[value=1]()\n?    ^^\n-   %43 : Float(3, 20) = aten::add(%44, %42, %42)\n-   %40 : Float(3, 20) = aten::mul(%69, %39)\n?                              ^^^  ^\n+   %40 : Float(3, 20) = aten::add(%42, %39, %39)\n?                              ^^^  ^^^^^^\n-   %37 : Float(3, 20) = aten::mul(%40, %43)\n?                                    ^    ^\n+   %37 : Float(3, 20) = aten::mul(%44, %40)\n?                                    ^    ^\n    %34 : Float(3, 20) = aten::mul(%33, %33)\n    %32 : Float(3, 20) = aten::neg(%34)\n    %29 : int = prim::Constant[value=1]()\n    %30 : Float(3, 20) = aten::add(%32, %29, %29)\n    %27 : Float(3, 20) = aten::mul(%49, %30)\n-   %24 : Float(3, 20) = aten::neg(%19)\n-   %22 : int = prim::Constant[value=1]()\n-   %23 : Float(3, 20) = aten::add(%24, %22, %22)\n-   %20 : Float(3, 20) = aten::mul(%47, %19)\n?     ^                                   -\n+   %24 : Float(3, 20) = aten::mul(%47, %21)\n?     ^                                  +\n-   %17 : Float(3, 20) = aten::mul(%20, %23)\n-   %14 : Float(3, 20) = aten::neg(%9)\n?    ^^                             ^\n+   %22 : Float(3, 20) = aten::neg(%21)\n?    ^^                             ^^\n-   %12 : int = prim::Constant[value=1]()\n?     ^\n+   %19 : int = prim::Constant[value=1]()\n?     ^\n-   %13 : Float(3, 20) = aten::add(%14, %12, %12)\n?    ^^                             ^^    ^    ^\n+   %20 : Float(3, 20) = aten::add(%22, %19, %19)\n?    ^^                             ^^    ^    ^\n+   %17 : Float(3, 20) = aten::mul(%24, %20)\n-   %10 : Float(3, 20) = aten::mul(%50, %9)\n?     ^                                  ^\n+   %14 : Float(3, 20) = aten::mul(%50, %11)\n?     ^                                  ^^\n+   %12 : Float(3, 20) = aten::neg(%11)\n+   %9 : int = prim::Constant[value=1]()\n+   %10 : Float(3, 20) = aten::add(%12, %9, %9)\n-   %7 : Float(3, 20) = aten::mul(%10, %13)\n?                                   ^    ^\n+   %7 : Float(3, 20) = aten::mul(%14, %10)\n?                                   ^    ^\n    %4 : Float(3, 80) = prim::FusedConcat[dim=1](%7, %17, %27, %37)\n    return (%4);\n  }\n  with prim::FusionGroup_1 = graph(%5 : Float(3!, 80)\n        %8 : Float(3!, 80)\n        %10 : Float(3, 80)\n        %12 : Float(3, 80)\n        %13 : Float(3, 80)\n        %20 : Float(3, 80)\n        %22 : Float(3!, 80)) {\n    %30 : int = prim::Constant[value=1]()\n    %29 : int = prim::Constant[value=1]()\n    %28 : int = prim::Constant[value=1]()\n    %26 : int = prim::Constant[value=1]()\n    %27 : Float(3, 80) = aten::mul(%12, %26)\n    %25 : Float(3, 80) = aten::mul(%27, %13)\n    %24 : Float(3, 80) = aten::mul(%27, %10)\n    %23 : Float(3, 80) = aten::mul(%27, %22)\n    %21 : Float(3, 80) = aten::mul(%12, %20)\n    %19 : int = prim::Constant[value=1]()\n    %17 : int = prim::Constant[value=1]()\n    %18 : Float(3, 80) = aten::add(%23, %21, %17)\n    %14 : Float(3, 80) = aten::mul(%12, %13)\n    %11 : Float(3, 80) = aten::mul(%14, %10)\n    %9 : Float(3, 80) = aten::mul(%27, %8)\n    %6 : Float(3, 80) = aten::mul(%14, %5)\n    %2 : int = prim::Constant[value=1]()\n    %3 : Float(3, 80) = aten::add(%9, %6, %2)\n    return (%3, %11, %18, %24, %25, %27);\n  }", "body": "The test using jit compiler seems ok for test_lstm_fusion_cuda  .  But not sure why the test_lstm_fusion_cuda (__main__.TestScript) fails. \r\n\r\ntest_milstm_fusion_cuda fails (it has no equivalent jit test)\r\n  \r\nHow can I correct this ?\r\n\r\nPytorch version :  torch (0.5.0a0+f0d8a36)\r\nCuda 9.2 \r\ncudnn 7\r\nppc64le Power8\r\n\r\nHere is the build/test log:  https://powerci.osuosl.org/job/pytorch-linux-cuda9-cudnn7-py3-mpi-build-test-gpu/264/console\r\n\r\n\r\n``` \r\n======================================================================\r\nFAIL: test_lstm_fusion_cuda (__main__.TestScript)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/jenkins/pytorch/test/common.py\", line 251, in wrapper\r\n    method(*args, **kwargs)\r\n  File \"/home/jenkins/pytorch/test/common.py\", line 107, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"test_jit.py\", line 2591, in test_lstm_fusion_cuda\r\n    self.assertExpectedGraph(backward_graph(module), subname='backward')\r\n  File \"test_jit.py\", line 228, in assertExpectedGraph\r\n    self.assertExpected(str(graph), *args, **kwargs)\r\n  File \"/home/jenkins/pytorch/test/common.py\", line 514, in assertExpected\r\n    self.assertMultiLineEqual(expected, s)\r\nAssertionError: 'grap[908 chars]aph(%9 : Float(3, 20)\\n      %19 : Float(3, 20[1722 chars]n}\\n' != 'grap[908 chars]aph(%11 : Float(3, 20)\\n      %21 : Float(3, 2[1723 chars]n}\\n'\r\n  graph(%0 : Float(3, 20!)\r\n        %1 : Float(3, 20!)\r\n        %2 : Dynamic\r\n        %3 : Dynamic\r\n        %4 : Dynamic\r\n        %5 : Dynamic\r\n        %6 : Dynamic\r\n        %7 : Dynamic\r\n        %8 : Dynamic\r\n        %x : Float(3, 10)\r\n        %hx : Float(3, 20)\r\n        %cx : Float(3, 20)\r\n        %12 : Float(10!, 80!)\r\n        %13 : Float(20!, 80!)\r\n        %ingate : Float(3, 20)\r\n        %forgetgate : Float(3, 20)\r\n        %cellgate : Float(3, 20)\r\n        %outgate : Float(3, 20)\r\n        %18 : Float(3, 20)) {\r\n    %19 : int = prim::Constant[value=1]()\r\n    %20 : Float(3, 80) = prim::FusionGroup_0[device=0](%ingate, %forgetgate, %cellgate, %outgate, %cx, %1, %18, %0)\r\n    %21 : Float(3, 80) = aten::mul(%20, %19)\r\n    %22 : Float(80!, 3!) = aten::t(%21)\r\n    %23 : Float(80, 20) = aten::mm(%22, %hx)\r\n    %24 : Float(80!, 3!) = aten::t(%20)\r\n    %25 : Float(80, 10) = aten::mm(%24, %x)\r\n    return (%25, %23, %21, %21);\r\n  }\r\n- with prim::FusionGroup_0 = graph(%9 : Float(3, 20)\r\n?                                   ^\r\n+ with prim::FusionGroup_0 = graph(%11 : Float(3, 20)\r\n?                                   ^^\r\n-       %19 : Float(3, 20)\r\n?         -\r\n+       %21 : Float(3, 20)\r\n?        +\r\n        %33 : Float(3, 20)\r\n-       %39 : Float(3, 20)\r\n?        ^^\r\n+       %41 : Float(3, 20)\r\n?        ^^\r\n        %46 : Float(3, 20)\r\n        %53 : Float(3, 20!)\r\n        %65 : Float(3, 20)\r\n        %67 : Float(3, 20!)) {\r\n    %69 : Float(3, 20) = aten::mul(%67, %65)\r\n-   %68 : Float(3, 20) = aten::mul(%67, %39)\r\n?                                        ^^\r\n+   %68 : Float(3, 20) = aten::mul(%67, %41)\r\n?                                        ^^\r\n    %66 : Float(3, 20) = aten::mul(%65, %65)\r\n    %64 : Float(3, 20) = aten::neg(%66)\r\n    %61 : int = prim::Constant[value=1]()\r\n    %62 : Float(3, 20) = aten::add(%64, %61, %61)\r\n    %59 : Float(3, 20) = aten::mul(%68, %62)\r\n    %55 : int = prim::Constant[value=1]()\r\n    %56 : Float(3, 20) = aten::add(%53, %59, %55)\r\n    %51 : int = prim::Constant[value=1]()\r\n    %52 : Float(3, 20) = aten::mul(%56, %51)\r\n    %50 : Float(3, 20) = aten::mul(%52, %33)\r\n-   %49 : Float(3, 20) = aten::mul(%52, %9)\r\n?                                        ^\r\n+   %49 : Float(3, 20) = aten::mul(%52, %11)\r\n?                                        ^^\r\n    %47 : Float(3, 20) = aten::mul(%56, %46)\r\n+   %44 : Float(3, 20) = aten::mul(%69, %41)\r\n-   %44 : Float(3, 20) = aten::neg(%39)\r\n?     ^                             ^^\r\n+   %42 : Float(3, 20) = aten::neg(%41)\r\n?     ^                             ^^\r\n-   %42 : int = prim::Constant[value=1]()\r\n?    ^^\r\n+   %39 : int = prim::Constant[value=1]()\r\n?    ^^\r\n-   %43 : Float(3, 20) = aten::add(%44, %42, %42)\r\n-   %40 : Float(3, 20) = aten::mul(%69, %39)\r\n?                              ^^^  ^\r\n+   %40 : Float(3, 20) = aten::add(%42, %39, %39)\r\n?                              ^^^  ^^^^^^\r\n-   %37 : Float(3, 20) = aten::mul(%40, %43)\r\n?                                    ^    ^\r\n+   %37 : Float(3, 20) = aten::mul(%44, %40)\r\n?                                    ^    ^\r\n    %34 : Float(3, 20) = aten::mul(%33, %33)\r\n    %32 : Float(3, 20) = aten::neg(%34)\r\n    %29 : int = prim::Constant[value=1]()\r\n    %30 : Float(3, 20) = aten::add(%32, %29, %29)\r\n    %27 : Float(3, 20) = aten::mul(%49, %30)\r\n-   %24 : Float(3, 20) = aten::neg(%19)\r\n-   %22 : int = prim::Constant[value=1]()\r\n-   %23 : Float(3, 20) = aten::add(%24, %22, %22)\r\n-   %20 : Float(3, 20) = aten::mul(%47, %19)\r\n?     ^                                   -\r\n+   %24 : Float(3, 20) = aten::mul(%47, %21)\r\n?     ^                                  +\r\n-   %17 : Float(3, 20) = aten::mul(%20, %23)\r\n-   %14 : Float(3, 20) = aten::neg(%9)\r\n?    ^^                             ^\r\n+   %22 : Float(3, 20) = aten::neg(%21)\r\n?    ^^                             ^^\r\n-   %12 : int = prim::Constant[value=1]()\r\n?     ^\r\n+   %19 : int = prim::Constant[value=1]()\r\n?     ^\r\n-   %13 : Float(3, 20) = aten::add(%14, %12, %12)\r\n?    ^^                             ^^    ^    ^\r\n+   %20 : Float(3, 20) = aten::add(%22, %19, %19)\r\n?    ^^                             ^^    ^    ^\r\n+   %17 : Float(3, 20) = aten::mul(%24, %20)\r\n-   %10 : Float(3, 20) = aten::mul(%50, %9)\r\n?     ^                                  ^\r\n+   %14 : Float(3, 20) = aten::mul(%50, %11)\r\n?     ^                                  ^^\r\n+   %12 : Float(3, 20) = aten::neg(%11)\r\n+   %9 : int = prim::Constant[value=1]()\r\n+   %10 : Float(3, 20) = aten::add(%12, %9, %9)\r\n-   %7 : Float(3, 20) = aten::mul(%10, %13)\r\n?                                   ^    ^\r\n+   %7 : Float(3, 20) = aten::mul(%14, %10)\r\n?                                   ^    ^\r\n    %4 : Float(3, 80) = prim::FusedConcat[dim=1](%7, %17, %27, %37)\r\n    return (%4);\r\n  }\r\n\r\n\r\n======================================================================\r\nFAIL: test_milstm_fusion_cuda (__main__.TestScript)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/jenkins/pytorch/test/common.py\", line 251, in wrapper\r\n    method(*args, **kwargs)\r\n  File \"/home/jenkins/pytorch/test/common.py\", line 107, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"test_jit.py\", line 2603, in test_milstm_fusion_cuda\r\n    self.assertExpectedGraph(backward_graph(module), subname='backward')\r\n  File \"test_jit.py\", line 228, in assertExpectedGraph\r\n    self.assertExpected(str(graph), *args, **kwargs)\r\n  File \"/home/jenkins/pytorch/test/common.py\", line 514, in assertExpected\r\n    self.assertMultiLineEqual(expected, s)\r\nAssertionError: 'grap[1502 chars]aph(%9 : Float(3, 20)\\n      %19 : Float(3, 20[2751 chars]n}\\n' != 'grap[1502 chars]aph(%11 : Float(3, 20)\\n      %21 : Float(3, 2[2752 chars]n}\\n'\r\n  graph(%0 : Float(3, 20!)\r\n        %1 : Float(3, 20!)\r\n        %2 : Dynamic\r\n        %3 : Dynamic\r\n        %4 : Dynamic\r\n        %5 : Dynamic\r\n        %6 : Dynamic\r\n        %7 : Dynamic\r\n        %8 : Dynamic\r\n        %9 : Dynamic\r\n        %10 : Dynamic\r\n        %11 : Dynamic\r\n        %x : Float(3, 10)\r\n        %hx : Float(3, 20)\r\n        %cx : Float(3, 20)\r\n        %alpha : Float(80)\r\n        %beta_i : Float(80)\r\n        %beta_h : Float(80)\r\n        %18 : Float(10!, 80!)\r\n        %Wx : Float(3, 80)\r\n        %20 : Float(20!, 80!)\r\n        %Uz : Float(3, 80)\r\n        %22 : Float(3, 80)\r\n        %ingate : Float(3, 20)\r\n        %forgetgate : Float(3, 20)\r\n        %cellgate : Float(3, 20)\r\n        %outgate : Float(3, 20)\r\n        %27 : Float(3, 20)) {\r\n    %28 : Float(3, 80) = prim::FusionGroup_0[device=0](%ingate, %forgetgate, %cellgate, %outgate, %cx, %1, %27, %0)\r\n    %29 : int[] = prim::Constant[value=[3, 80]]()\r\n    %30 : int = prim::Constant[value=0]()\r\n    %31 : Float(3!, 80) = aten::expand(%beta_h, %29, %30)\r\n    %32 : Float(3!, 80) = aten::expand(%beta_i, %29, %30)\r\n    %33 : Float(3!, 80) = aten::expand(%alpha, %29, %30)\r\n    %34 : Float(3, 80), %35 : Float(3, 80), %36 : Float(3, 80), %37 : Float(3, 80), %38 : Float(3, 80), %39 : Float(3, 80) = prim::FusionGroup_1[device=0](%33, %32, %Wx, %28, %Uz, %22, %31)\r\n    %40 : Float(80!, 3!) = aten::t(%36)\r\n    %41 : Float(80, 20) = aten::mm(%40, %hx)\r\n    %42 : Float(80!, 3!) = aten::t(%34)\r\n    %43 : Float(80, 10) = aten::mm(%42, %x)\r\n    return (%43, %41, %35, %37, %38, %39);\r\n  }\r\n- with prim::FusionGroup_0 = graph(%9 : Float(3, 20)\r\n?                                   ^\r\n+ with prim::FusionGroup_0 = graph(%11 : Float(3, 20)\r\n?                                   ^^\r\n-       %19 : Float(3, 20)\r\n?         -\r\n+       %21 : Float(3, 20)\r\n?        +\r\n        %33 : Float(3, 20)\r\n-       %39 : Float(3, 20)\r\n?        ^^\r\n+       %41 : Float(3, 20)\r\n?        ^^\r\n        %46 : Float(3, 20)\r\n        %53 : Float(3, 20!)\r\n        %65 : Float(3, 20)\r\n        %67 : Float(3, 20!)) {\r\n    %69 : Float(3, 20) = aten::mul(%67, %65)\r\n-   %68 : Float(3, 20) = aten::mul(%67, %39)\r\n?                                        ^^\r\n+   %68 : Float(3, 20) = aten::mul(%67, %41)\r\n?                                        ^^\r\n    %66 : Float(3, 20) = aten::mul(%65, %65)\r\n    %64 : Float(3, 20) = aten::neg(%66)\r\n    %61 : int = prim::Constant[value=1]()\r\n    %62 : Float(3, 20) = aten::add(%64, %61, %61)\r\n    %59 : Float(3, 20) = aten::mul(%68, %62)\r\n    %55 : int = prim::Constant[value=1]()\r\n    %56 : Float(3, 20) = aten::add(%53, %59, %55)\r\n    %51 : int = prim::Constant[value=1]()\r\n    %52 : Float(3, 20) = aten::mul(%56, %51)\r\n    %50 : Float(3, 20) = aten::mul(%52, %33)\r\n-   %49 : Float(3, 20) = aten::mul(%52, %9)\r\n?                                        ^\r\n+   %49 : Float(3, 20) = aten::mul(%52, %11)\r\n?                                        ^^\r\n    %47 : Float(3, 20) = aten::mul(%56, %46)\r\n+   %44 : Float(3, 20) = aten::mul(%69, %41)\r\n-   %44 : Float(3, 20) = aten::neg(%39)\r\n?     ^                             ^^\r\n+   %42 : Float(3, 20) = aten::neg(%41)\r\n?     ^                             ^^\r\n-   %42 : int = prim::Constant[value=1]()\r\n?    ^^\r\n+   %39 : int = prim::Constant[value=1]()\r\n?    ^^\r\n-   %43 : Float(3, 20) = aten::add(%44, %42, %42)\r\n-   %40 : Float(3, 20) = aten::mul(%69, %39)\r\n?                              ^^^  ^\r\n+   %40 : Float(3, 20) = aten::add(%42, %39, %39)\r\n?                              ^^^  ^^^^^^\r\n-   %37 : Float(3, 20) = aten::mul(%40, %43)\r\n?                                    ^    ^\r\n+   %37 : Float(3, 20) = aten::mul(%44, %40)\r\n?                                    ^    ^\r\n    %34 : Float(3, 20) = aten::mul(%33, %33)\r\n    %32 : Float(3, 20) = aten::neg(%34)\r\n    %29 : int = prim::Constant[value=1]()\r\n    %30 : Float(3, 20) = aten::add(%32, %29, %29)\r\n    %27 : Float(3, 20) = aten::mul(%49, %30)\r\n-   %24 : Float(3, 20) = aten::neg(%19)\r\n-   %22 : int = prim::Constant[value=1]()\r\n-   %23 : Float(3, 20) = aten::add(%24, %22, %22)\r\n-   %20 : Float(3, 20) = aten::mul(%47, %19)\r\n?     ^                                   -\r\n+   %24 : Float(3, 20) = aten::mul(%47, %21)\r\n?     ^                                  +\r\n-   %17 : Float(3, 20) = aten::mul(%20, %23)\r\n-   %14 : Float(3, 20) = aten::neg(%9)\r\n?    ^^                             ^\r\n+   %22 : Float(3, 20) = aten::neg(%21)\r\n?    ^^                             ^^\r\n-   %12 : int = prim::Constant[value=1]()\r\n?     ^\r\n+   %19 : int = prim::Constant[value=1]()\r\n?     ^\r\n-   %13 : Float(3, 20) = aten::add(%14, %12, %12)\r\n?    ^^                             ^^    ^    ^\r\n+   %20 : Float(3, 20) = aten::add(%22, %19, %19)\r\n?    ^^                             ^^    ^    ^\r\n+   %17 : Float(3, 20) = aten::mul(%24, %20)\r\n-   %10 : Float(3, 20) = aten::mul(%50, %9)\r\n?     ^                                  ^\r\n+   %14 : Float(3, 20) = aten::mul(%50, %11)\r\n?     ^                                  ^^\r\n+   %12 : Float(3, 20) = aten::neg(%11)\r\n+   %9 : int = prim::Constant[value=1]()\r\n+   %10 : Float(3, 20) = aten::add(%12, %9, %9)\r\n-   %7 : Float(3, 20) = aten::mul(%10, %13)\r\n?                                   ^    ^\r\n+   %7 : Float(3, 20) = aten::mul(%14, %10)\r\n?                                   ^    ^\r\n    %4 : Float(3, 80) = prim::FusedConcat[dim=1](%7, %17, %27, %37)\r\n    return (%4);\r\n  }\r\n  with prim::FusionGroup_1 = graph(%5 : Float(3!, 80)\r\n        %8 : Float(3!, 80)\r\n        %10 : Float(3, 80)\r\n        %12 : Float(3, 80)\r\n        %13 : Float(3, 80)\r\n        %20 : Float(3, 80)\r\n        %22 : Float(3!, 80)) {\r\n    %30 : int = prim::Constant[value=1]()\r\n    %29 : int = prim::Constant[value=1]()\r\n    %28 : int = prim::Constant[value=1]()\r\n    %26 : int = prim::Constant[value=1]()\r\n    %27 : Float(3, 80) = aten::mul(%12, %26)\r\n    %25 : Float(3, 80) = aten::mul(%27, %13)\r\n    %24 : Float(3, 80) = aten::mul(%27, %10)\r\n    %23 : Float(3, 80) = aten::mul(%27, %22)\r\n    %21 : Float(3, 80) = aten::mul(%12, %20)\r\n    %19 : int = prim::Constant[value=1]()\r\n    %17 : int = prim::Constant[value=1]()\r\n    %18 : Float(3, 80) = aten::add(%23, %21, %17)\r\n    %14 : Float(3, 80) = aten::mul(%12, %13)\r\n    %11 : Float(3, 80) = aten::mul(%14, %10)\r\n    %9 : Float(3, 80) = aten::mul(%27, %8)\r\n    %6 : Float(3, 80) = aten::mul(%14, %5)\r\n    %2 : int = prim::Constant[value=1]()\r\n    %3 : Float(3, 80) = aten::add(%9, %6, %2)\r\n    return (%3, %11, %18, %24, %25, %27);\r\n  }\r\n"}