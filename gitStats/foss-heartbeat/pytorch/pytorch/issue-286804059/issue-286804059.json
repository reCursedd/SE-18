{"url": "https://api.github.com/repos/pytorch/pytorch/issues/4533", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/4533/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/4533/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/4533/events", "html_url": "https://github.com/pytorch/pytorch/issues/4533", "id": 286804059, "node_id": "MDU6SXNzdWUyODY4MDQwNTk=", "number": 4533, "title": "Investigate difference between `torch.eig` and `numpy.linalg.eig`", "user": {"login": "zou3519", "id": 5652049, "node_id": "MDQ6VXNlcjU2NTIwNDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5652049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zou3519", "html_url": "https://github.com/zou3519", "followers_url": "https://api.github.com/users/zou3519/followers", "following_url": "https://api.github.com/users/zou3519/following{/other_user}", "gists_url": "https://api.github.com/users/zou3519/gists{/gist_id}", "starred_url": "https://api.github.com/users/zou3519/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zou3519/subscriptions", "organizations_url": "https://api.github.com/users/zou3519/orgs", "repos_url": "https://api.github.com/users/zou3519/repos", "events_url": "https://api.github.com/users/zou3519/events{/privacy}", "received_events_url": "https://api.github.com/users/zou3519/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-08T16:32:25Z", "updated_at": "2018-08-20T18:38:04Z", "closed_at": "2018-08-20T18:38:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Reported here: <a href=\"https://discuss.pytorch.org/t/torch-eig-seems-really-unstable-can-anyone-explain-this-result/11579\" rel=\"nofollow\">https://discuss.pytorch.org/t/torch-eig-seems-really-unstable-can-anyone-explain-this-result/11579</a></p>\n<p>Users may assume that <code>torch.eig</code> will return orthornomal eigenvectors when the input is symmetric. This is the case for <code>torch.symeig</code> but I don't think <code>torch.eig</code> has this guarantee, so I'll probably add a warning to the docs.</p>\n<p>However, for most symmetric matrix inputs, it looks like <code>torch.eig</code> does give orthonormal eigenvectors. I'm not sure if the underlying implementation is supposed to do this for all symmetric inputs or not.</p>\n<p>The interesting thing is that for some symmetric inputs,<code>torch.eig</code> and <code>numpy.linalg.eig</code> will give different results that might warrant investigation. For example, for the following input:</p>\n<pre><code>import numpy as np\nL = np.array([[  9.99999881e-01,  -9.82382353e-09],\n       [ -9.82382353e-09,   9.99999940e-01]], dtype=np.float32)\n\nnumpy.linalg.eig(L)[1] \ntorch.eig(torch.Tensor(L), eigenvectors=True)[1]\n</code></pre>\n<p><code>numpy.linalg.eig</code> returns orthonormal eigenvectors while <code>torch.eig</code> doesn't.</p>", "body_text": "Reported here: https://discuss.pytorch.org/t/torch-eig-seems-really-unstable-can-anyone-explain-this-result/11579\nUsers may assume that torch.eig will return orthornomal eigenvectors when the input is symmetric. This is the case for torch.symeig but I don't think torch.eig has this guarantee, so I'll probably add a warning to the docs.\nHowever, for most symmetric matrix inputs, it looks like torch.eig does give orthonormal eigenvectors. I'm not sure if the underlying implementation is supposed to do this for all symmetric inputs or not.\nThe interesting thing is that for some symmetric inputs,torch.eig and numpy.linalg.eig will give different results that might warrant investigation. For example, for the following input:\nimport numpy as np\nL = np.array([[  9.99999881e-01,  -9.82382353e-09],\n       [ -9.82382353e-09,   9.99999940e-01]], dtype=np.float32)\n\nnumpy.linalg.eig(L)[1] \ntorch.eig(torch.Tensor(L), eigenvectors=True)[1]\n\nnumpy.linalg.eig returns orthonormal eigenvectors while torch.eig doesn't.", "body": "Reported here: https://discuss.pytorch.org/t/torch-eig-seems-really-unstable-can-anyone-explain-this-result/11579\r\n\r\nUsers may assume that `torch.eig` will return orthornomal eigenvectors when the input is symmetric. This is the case for `torch.symeig` but I don't think `torch.eig` has this guarantee, so I'll probably add a warning to the docs.\r\n\r\nHowever, for most symmetric matrix inputs, it looks like `torch.eig` does give orthonormal eigenvectors. I'm not sure if the underlying implementation is supposed to do this for all symmetric inputs or not.\r\n\r\nThe interesting thing is that for some symmetric inputs,`torch.eig` and `numpy.linalg.eig` will give different results that might warrant investigation. For example, for the following input:\r\n\r\n```\r\nimport numpy as np\r\nL = np.array([[  9.99999881e-01,  -9.82382353e-09],\r\n       [ -9.82382353e-09,   9.99999940e-01]], dtype=np.float32)\r\n\r\nnumpy.linalg.eig(L)[1] \r\ntorch.eig(torch.Tensor(L), eigenvectors=True)[1]\r\n```\r\n\r\n`numpy.linalg.eig` returns orthonormal eigenvectors while `torch.eig` doesn't. \r\n  "}