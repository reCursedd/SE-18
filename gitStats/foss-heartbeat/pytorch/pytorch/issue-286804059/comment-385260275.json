{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/385260275", "html_url": "https://github.com/pytorch/pytorch/issues/4533#issuecomment-385260275", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/4533", "id": 385260275, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTI2MDI3NQ==", "user": {"login": "t-vi", "id": 20787943, "node_id": "MDQ6VXNlcjIwNzg3OTQz", "avatar_url": "https://avatars2.githubusercontent.com/u/20787943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-vi", "html_url": "https://github.com/t-vi", "followers_url": "https://api.github.com/users/t-vi/followers", "following_url": "https://api.github.com/users/t-vi/following{/other_user}", "gists_url": "https://api.github.com/users/t-vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-vi/subscriptions", "organizations_url": "https://api.github.com/users/t-vi/orgs", "repos_url": "https://api.github.com/users/t-vi/repos", "events_url": "https://api.github.com/users/t-vi/events{/privacy}", "received_events_url": "https://api.github.com/users/t-vi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-29T15:42:16Z", "updated_at": "2018-04-29T15:42:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>An additional difference seems to be that torch.eig does returns only the real part of complex eigenvectors. (Apologies for the inaccurate previous mail.)</p>\n<pre><code>a = torch.tensor([[0.0,1],[-1,0]])\na.eig(eigenvectors=True)\n</code></pre>\n<p>gives</p>\n<pre><code>(tensor([[ 0.,  1.],\n         [ 0., -1.]]), tensor([[ 0.7071,  0.0000],\n         [ 0.0000,  0.7071]]))\n</code></pre>\n<p>while <code>numpy.linalg.eig(a.numpy())</code> gives</p>\n<pre><code>(array([ 0.+1.j,  0.-1.j], dtype=complex64),\n array([[ 0.70710677+0.j        ,  0.70710677-0.j        ],\n        [ 0.00000000+0.70710677j,  0.00000000-0.70710677j]], dtype=complex64))\n</code></pre>\n<p>The PyTorch version seems to be similar to what Lapack / Magma implement in geev_s/d (though magma also has versions doing complex eigenvectors).</p>", "body_text": "An additional difference seems to be that torch.eig does returns only the real part of complex eigenvectors. (Apologies for the inaccurate previous mail.)\na = torch.tensor([[0.0,1],[-1,0]])\na.eig(eigenvectors=True)\n\ngives\n(tensor([[ 0.,  1.],\n         [ 0., -1.]]), tensor([[ 0.7071,  0.0000],\n         [ 0.0000,  0.7071]]))\n\nwhile numpy.linalg.eig(a.numpy()) gives\n(array([ 0.+1.j,  0.-1.j], dtype=complex64),\n array([[ 0.70710677+0.j        ,  0.70710677-0.j        ],\n        [ 0.00000000+0.70710677j,  0.00000000-0.70710677j]], dtype=complex64))\n\nThe PyTorch version seems to be similar to what Lapack / Magma implement in geev_s/d (though magma also has versions doing complex eigenvectors).", "body": "An additional difference seems to be that torch.eig does returns only the real part of complex eigenvectors. (Apologies for the inaccurate previous mail.)\r\n```\r\na = torch.tensor([[0.0,1],[-1,0]])\r\na.eig(eigenvectors=True)\r\n```\r\ngives\r\n```\r\n(tensor([[ 0.,  1.],\r\n         [ 0., -1.]]), tensor([[ 0.7071,  0.0000],\r\n         [ 0.0000,  0.7071]]))\r\n```\r\nwhile `numpy.linalg.eig(a.numpy())` gives\r\n```\r\n(array([ 0.+1.j,  0.-1.j], dtype=complex64),\r\n array([[ 0.70710677+0.j        ,  0.70710677-0.j        ],\r\n        [ 0.00000000+0.70710677j,  0.00000000-0.70710677j]], dtype=complex64))\r\n```\r\nThe PyTorch version seems to be similar to what Lapack / Magma implement in geev_s/d (though magma also has versions doing complex eigenvectors).\r\n"}