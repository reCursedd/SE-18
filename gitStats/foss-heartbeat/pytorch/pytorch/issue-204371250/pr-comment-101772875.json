{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/101772875", "pull_request_review_id": 22512872, "id": 101772875, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTc3Mjg3NQ==", "diff_hunk": "@@ -7,19 +7,22 @@\n     pass\n \n \n-def RNNReLUCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n-    hy = F.relu(F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh))\n+def RNNReLUCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None, skip_input=False):\n+    xw_ih = input if skip_input else F.linear(input, w_ih, b_ih)\n+    hy = F.relu(xw_ih + F.linear(hidden, w_hh, b_hh))\n     return hy\n \n \n-def RNNTanhCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n-    hy = F.tanh(F.linear(input, w_ih, b_ih) + F.linear(hidden, w_hh, b_hh))\n+def RNNTanhCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None, skip_input=False):\n+    xw_ih = input if skip_input else F.linear(input, w_ih, b_ih)\n+    hy = F.tanh(xw_ih + F.linear(hidden, w_hh, b_hh))\n     return hy\n \n \n-def LSTMCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n+def LSTMCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None, skip_input=False):\n     hx, cx = hidden\n-    gates = F.linear(input, w_ih, b_ih) + F.linear(hx, w_hh, b_hh)\n+    xw_ih = input.repeat(1, 4) if skip_input else F.linear(input, w_ih, b_ih)", "path": "torch/nn/_functions/rnn.py", "position": null, "original_position": 24, "commit_id": "3d1b9b211dc191902b524fd06e2ca85e95cd823f", "original_commit_id": "a72dd1b212470ab246253a9f318b91a33256febd", "user": {"login": "SeanNaren", "id": 6707363, "node_id": "MDQ6VXNlcjY3MDczNjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6707363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SeanNaren", "html_url": "https://github.com/SeanNaren", "followers_url": "https://api.github.com/users/SeanNaren/followers", "following_url": "https://api.github.com/users/SeanNaren/following{/other_user}", "gists_url": "https://api.github.com/users/SeanNaren/gists{/gist_id}", "starred_url": "https://api.github.com/users/SeanNaren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SeanNaren/subscriptions", "organizations_url": "https://api.github.com/users/SeanNaren/orgs", "repos_url": "https://api.github.com/users/SeanNaren/repos", "events_url": "https://api.github.com/users/SeanNaren/events{/privacy}", "received_events_url": "https://api.github.com/users/SeanNaren/received_events", "type": "User", "site_admin": false}, "body": "Making that change for LSTM and GRU cell I had to squeeze the additional dim like below:\r\n\r\n```python\r\ndef LSTMCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\r\n    hx, cx = hidden\r\n    x_h = input.unsqueeze(1).expand(input.size(0), 4, input.size(1)) if w_ih is None else F.linear(input, w_ih, b_ih)\r\n    gates = x_h + F.linear(hx, w_hh, b_hh)\r\n    ingate, forgetgate, cellgate, outgate = [x.squeeze(1) for x in gates.chunk(4, 1)] # Remove single dim\r\n\r\n    ingate = F.sigmoid(ingate)\r\n    forgetgate = F.sigmoid(forgetgate)\r\n    cellgate = F.tanh(cellgate)\r\n    outgate = F.sigmoid(outgate)\r\n\r\n    cy = (forgetgate * cx) + (ingate * cellgate)\r\n    hy = outgate * F.tanh(cy)\r\n\r\n    return hy, cy\r\n```\r\n\r\nThis works for GRUs, however causing an error in the backprop:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/sean/test/problem.py\", line 89, in test\r\n    loss.backward()\r\n  File \"/home/sean/anaconda3/lib/python3.5/site-packages/torch/autograd/variable.py\", line 145, in backward\r\n    self._execution_engine.run_backward((self,), (gradient,), retain_variables)\r\n  File \"/home/sean/anaconda3/lib/python3.5/site-packages/torch/nn/_functions/linear.py\", line 22, in backward\r\n    grad_input = torch.mm(grad_output, weight)\r\nRuntimeError: matrices expected, got 3D, 2D tensors at /home/sean/Work/pytorch/torch/lib/TH/generic/THTensorMath.c:857\r\n```\r\n\r\nAny ideas?\r\n", "created_at": "2017-02-17T14:58:06Z", "updated_at": "2018-11-23T15:32:28Z", "html_url": "https://github.com/pytorch/pytorch/pull/658#discussion_r101772875", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/658", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/101772875"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/658#discussion_r101772875"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/658"}}, "body_html": "<p>Making that change for LSTM and GRU cell I had to squeeze the additional dim like below:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">LSTMCell</span>(<span class=\"pl-smi\">input</span>, <span class=\"pl-smi\">hidden</span>, <span class=\"pl-smi\">w_ih</span>, <span class=\"pl-smi\">w_hh</span>, <span class=\"pl-smi\">b_ih</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">b_hh</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n    hx, cx <span class=\"pl-k\">=</span> hidden\n    x_h <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span>.unsqueeze(<span class=\"pl-c1\">1</span>).expand(<span class=\"pl-c1\">input</span>.size(<span class=\"pl-c1\">0</span>), <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">input</span>.size(<span class=\"pl-c1\">1</span>)) <span class=\"pl-k\">if</span> w_ih <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">else</span> F.linear(<span class=\"pl-c1\">input</span>, w_ih, b_ih)\n    gates <span class=\"pl-k\">=</span> x_h <span class=\"pl-k\">+</span> F.linear(hx, w_hh, b_hh)\n    ingate, forgetgate, cellgate, outgate <span class=\"pl-k\">=</span> [x.squeeze(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">for</span> x <span class=\"pl-k\">in</span> gates.chunk(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">1</span>)] <span class=\"pl-c\"><span class=\"pl-c\">#</span> Remove single dim</span>\n\n    ingate <span class=\"pl-k\">=</span> F.sigmoid(ingate)\n    forgetgate <span class=\"pl-k\">=</span> F.sigmoid(forgetgate)\n    cellgate <span class=\"pl-k\">=</span> F.tanh(cellgate)\n    outgate <span class=\"pl-k\">=</span> F.sigmoid(outgate)\n\n    cy <span class=\"pl-k\">=</span> (forgetgate <span class=\"pl-k\">*</span> cx) <span class=\"pl-k\">+</span> (ingate <span class=\"pl-k\">*</span> cellgate)\n    hy <span class=\"pl-k\">=</span> outgate <span class=\"pl-k\">*</span> F.tanh(cy)\n\n    <span class=\"pl-k\">return</span> hy, cy</pre></div>\n<p>This works for GRUs, however causing an error in the backprop:</p>\n<pre><code>Traceback (most recent call last):\n  File \"/home/sean/test/problem.py\", line 89, in test\n    loss.backward()\n  File \"/home/sean/anaconda3/lib/python3.5/site-packages/torch/autograd/variable.py\", line 145, in backward\n    self._execution_engine.run_backward((self,), (gradient,), retain_variables)\n  File \"/home/sean/anaconda3/lib/python3.5/site-packages/torch/nn/_functions/linear.py\", line 22, in backward\n    grad_input = torch.mm(grad_output, weight)\nRuntimeError: matrices expected, got 3D, 2D tensors at /home/sean/Work/pytorch/torch/lib/TH/generic/THTensorMath.c:857\n</code></pre>\n<p>Any ideas?</p>", "body_text": "Making that change for LSTM and GRU cell I had to squeeze the additional dim like below:\ndef LSTMCell(input, hidden, w_ih, w_hh, b_ih=None, b_hh=None):\n    hx, cx = hidden\n    x_h = input.unsqueeze(1).expand(input.size(0), 4, input.size(1)) if w_ih is None else F.linear(input, w_ih, b_ih)\n    gates = x_h + F.linear(hx, w_hh, b_hh)\n    ingate, forgetgate, cellgate, outgate = [x.squeeze(1) for x in gates.chunk(4, 1)] # Remove single dim\n\n    ingate = F.sigmoid(ingate)\n    forgetgate = F.sigmoid(forgetgate)\n    cellgate = F.tanh(cellgate)\n    outgate = F.sigmoid(outgate)\n\n    cy = (forgetgate * cx) + (ingate * cellgate)\n    hy = outgate * F.tanh(cy)\n\n    return hy, cy\nThis works for GRUs, however causing an error in the backprop:\nTraceback (most recent call last):\n  File \"/home/sean/test/problem.py\", line 89, in test\n    loss.backward()\n  File \"/home/sean/anaconda3/lib/python3.5/site-packages/torch/autograd/variable.py\", line 145, in backward\n    self._execution_engine.run_backward((self,), (gradient,), retain_variables)\n  File \"/home/sean/anaconda3/lib/python3.5/site-packages/torch/nn/_functions/linear.py\", line 22, in backward\n    grad_input = torch.mm(grad_output, weight)\nRuntimeError: matrices expected, got 3D, 2D tensors at /home/sean/Work/pytorch/torch/lib/TH/generic/THTensorMath.c:857\n\nAny ideas?", "in_reply_to_id": 101390546}