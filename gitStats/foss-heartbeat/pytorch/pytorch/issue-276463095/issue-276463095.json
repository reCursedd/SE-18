{"url": "https://api.github.com/repos/pytorch/pytorch/issues/3853", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/3853/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/3853/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/3853/events", "html_url": "https://github.com/pytorch/pytorch/pull/3853", "id": 276463095, "node_id": "MDExOlB1bGxSZXF1ZXN0MTU0NDQwMTg4", "number": 3853, "title": "Fix void* wrapping in autograd codegen", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 742585577, "node_id": "MDU6TGFiZWw3NDI1ODU1Nzc=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/0.3", "name": "0.3", "color": "d1c41b", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-23T19:54:30Z", "updated_at": "2018-11-23T15:36:44Z", "closed_at": "2017-11-24T12:33:14Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/3853", "html_url": "https://github.com/pytorch/pytorch/pull/3853", "diff_url": "https://github.com/pytorch/pytorch/pull/3853.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/3853.patch"}, "body_html": "<p>The real reason for this PR is this:</p>\n<p>before:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> Variable(torch.randn(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>)).data_ptr()\n<span class=\"pl-c1\">True</span></pre></div>\n<p>after:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> Variable(torch.randn(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>)).data_ptr()\n<span class=\"pl-c1\">31109648</span></pre></div>\n<p>It used to work because <code>void*</code> would get implicitly casted to a <code>bool</code> when searching for an overload of <code>wrap</code>. This commit fixes this and adds a bunch of assertions to make sure this won't happen again. I can't think of any way to make argument implicit conversion a build failure in C++.</p>", "body_text": "The real reason for this PR is this:\nbefore:\n>>> Variable(torch.randn(5, 5)).data_ptr()\nTrue\nafter:\n>>> Variable(torch.randn(5, 5)).data_ptr()\n31109648\nIt used to work because void* would get implicitly casted to a bool when searching for an overload of wrap. This commit fixes this and adds a bunch of assertions to make sure this won't happen again. I can't think of any way to make argument implicit conversion a build failure in C++.", "body": "The real reason for this PR is this:\r\n\r\nbefore:\r\n\r\n```python\r\n>>> Variable(torch.randn(5, 5)).data_ptr()\r\nTrue\r\n```\r\n\r\nafter:\r\n\r\n```python\r\n>>> Variable(torch.randn(5, 5)).data_ptr()\r\n31109648\r\n```\r\n\r\nIt used to work because `void*` would get implicitly casted to a `bool` when searching for an overload of `wrap`. This commit fixes this and adds a bunch of assertions to make sure this won't happen again. I can't think of any way to make argument implicit conversion a build failure in C++."}