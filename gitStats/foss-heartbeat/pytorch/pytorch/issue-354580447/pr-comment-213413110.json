{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213413110", "pull_request_review_id": 150244505, "id": 213413110, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzQxMzExMA==", "diff_hunk": "@@ -183,6 +183,41 @@ def should_trace(declaration):\n     return True\n \n \n+def get_trace_outputs(declaration):\n+    if declaration['return_type'] == 'std::vector<Tensor>':\n+        return 'flatten_tensor_args({})'.format(declaration['returns'][0]['name'])\n+    elif declaration['name'].endswith('_out'):\n+        output_args = [arg['name'] for arg in declaration['arguments']\n+                       if arg.get('output', False)]\n+        return '{' + ', '.join(output_args) + '}'\n+    trace_outs = [r['name'] for r in declaration['returns']]\n+    if any(ret['dynamic_type'] == 'TensorList' for ret in declaration['returns']):\n+        return CodeTemplate(\"flatten_tensor_args( ${outs} )\").substitute(outs=trace_outs)\n+    else:\n+        return CodeTemplate(\"{ ${outs} }\").substitute(outs=trace_outs)\n+\n+\n+def format_trace(declaration):\n+    local = {}\n+\n+    add_trace_inputs = []\n+    for argument in declaration['arguments']:\n+        add_trace_inputs.append(ADD_TRACE_INPUT.substitute(input=argument['name']))\n+    local['add_trace_inputs'] = '\\n'.join(add_trace_inputs)\n+\n+    # Record inplace operations as out-of-place operations (e.g.,\n+    # not add_ but add)\n+    # TODO: Add a proper concept of side effects to the IR, and\n+    # properly record inplace operations.\n+    local['trace_name'] = uninplace_api_name(declaration['api_name'])\n+    if local['trace_name'] in RENAME_TRACE:\n+        local['trace_name'] = RENAME_TRACE[local['trace_name']]\n+\n+    local['trace_outputs'] = get_trace_outputs(declaration)\n+\n+    return (PRE_RECORD_TRACE.substitute(local), POST_RECORD_TRACE.substitute(local))", "path": "tools/autograd/gen_variable_type.py", "position": 45, "original_position": 45, "commit_id": "2aae196477beb758b8272f9e728afc75cfb975a9", "original_commit_id": "be1d4fcfd9a3e8b9625242efbb8b6d4d8c7ca683", "user": {"login": "zdevito", "id": 370202, "node_id": "MDQ6VXNlcjM3MDIwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/370202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdevito", "html_url": "https://github.com/zdevito", "followers_url": "https://api.github.com/users/zdevito/followers", "following_url": "https://api.github.com/users/zdevito/following{/other_user}", "gists_url": "https://api.github.com/users/zdevito/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdevito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdevito/subscriptions", "organizations_url": "https://api.github.com/users/zdevito/orgs", "repos_url": "https://api.github.com/users/zdevito/repos", "events_url": "https://api.github.com/users/zdevito/events{/privacy}", "received_events_url": "https://api.github.com/users/zdevito/received_events", "type": "User", "site_admin": false}, "body": "This is a move. Minor changes (e.g. `arguments -> declaration['arguments']`) so it works as a global function.", "created_at": "2018-08-28T17:55:12Z", "updated_at": "2018-11-23T15:50:10Z", "html_url": "https://github.com/pytorch/pytorch/pull/10935#discussion_r213413110", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/10935", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/213413110"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/10935#discussion_r213413110"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/10935"}}, "body_html": "<p>This is a move. Minor changes (e.g. <code>arguments -&gt; declaration['arguments']</code>) so it works as a global function.</p>", "body_text": "This is a move. Minor changes (e.g. arguments -> declaration['arguments']) so it works as a global function.", "in_reply_to_id": 213331649}