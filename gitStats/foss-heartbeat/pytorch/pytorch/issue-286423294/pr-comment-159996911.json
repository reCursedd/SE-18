{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159996911", "pull_request_review_id": 87043663, "id": 159996911, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTk5NjkxMQ==", "diff_hunk": "@@ -98,6 +121,76 @@ THC_API void THCTensor_(gesv)(THCState *state, THCTensor *rb_, THCTensor *ra_, T\n #endif\n }\n \n+THC_API void THCTensor_(bgesv)(THCState *state, THCTensor *rb_, THCTensor *ra_, THCTensor *b_, THCTensor *a_)\n+{\n+#ifdef USE_MAGMA\n+  THArgCheck(a_->nDimension == 3, 1, \"A should be 3 dimensional\");\n+  THArgCheck(b_->nDimension == 3, 2, \"b should be 3 dimensional\");\n+  THArgCheck(a_->size[1] == a_->size[2], 1, \"A should be batches of square matrices\");\n+  THArgCheck(b_->size[0] == a_->size[0], 2, \"A, b batch_count incompatible\");\n+  THArgCheck(b_->size[1] == a_->size[1], 2, \"A, b size incompatible\");\n+\n+  int64_t batch_count = a_->size[0];\n+  int64_t n = a_->size[1];\n+  int64_t nrhs = b_->size[2];\n+\n+  THCTensor *a = THCTensor_(newBatchedColumnMajor)(state, ra_, a_);\n+  THCTensor *b = THCTensor_(newBatchedColumnMajor)(state, rb_, b_);\n+  real *a_data = THCTensor_(data)(state, a);\n+  real *b_data = THCTensor_(data)(state, b);\n+\n+  real **a_array = th_magma_malloc_pinned<real *>(batch_count);\n+  real **b_array = th_magma_malloc_pinned<real *>(batch_count);\n+\n+  int *info_array = th_magma_malloc_pinned<int>(batch_count);\n+  int *ipiv_data = th_magma_malloc_pinned<int>(batch_count * n);\n+  int **ipiv_array = th_magma_malloc_pinned<int *>(batch_count);\n+\n+  for (int64_t i = 0; i < batch_count; i++) {\n+    a_array[i] = &a_data[i * n * n];\n+    b_array[i] = &b_data[i * n * nrhs]; \n+    ipiv_array[i] = &ipiv_data[i * n];\n+  }\n+\n+  magma_queue_t magma_queue;\n+  magma_queue_create_from_cuda(\n+      THCTensor_(getDevice)(state, a_),\n+      THCState_getCurrentStream(state),\n+      THCState_getCurrentBlasHandle(state),\n+      THCState_getCurrentSparseHandle(state),\n+      &magma_queue);\n+\n+#if defined(THC_REAL_IS_FLOAT)\n+  magma_sgesv_batched(n, nrhs, a_array, n, ipiv_array, b_array, n, info_array, batch_count, magma_queue);\n+#else\n+  magma_dgesv_batched(n, nrhs, a_array, n, ipiv_array, b_array, n, info_array, batch_count, magma_queue);\n+#endif\n+\n+  for (int64_t i = 0; i < batch_count; i++) {\n+    int info = info_array[i];\n+    if (info < 0) {\n+      THError(\"MAGMA bgesv (gesv_batched) : For batch number %lld: Argument %d : illegal value\",\n+          (long long)batch_count, -info);\n+    } else if (info > 0) {\n+      THError(\"MAGMA bgesv (gesv_batched) : For batch number %lld: U(%d,%d) is zero, singular U.\",\n+          (long long)batch_count, info, info);\n+    }\n+  }", "path": "aten/src/THC/generic/THCTensorMathMagma.cu", "position": null, "original_position": 88, "commit_id": "bb1d72f99ccf1bfc4b2ce1cd56cd2e04ee3d2f8d", "original_commit_id": "523c6bb646fbec0e5ebf5eec5d377f8bf3658fb5", "user": {"login": "apaszke", "id": 4583066, "node_id": "MDQ6VXNlcjQ1ODMwNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4583066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apaszke", "html_url": "https://github.com/apaszke", "followers_url": "https://api.github.com/users/apaszke/followers", "following_url": "https://api.github.com/users/apaszke/following{/other_user}", "gists_url": "https://api.github.com/users/apaszke/gists{/gist_id}", "starred_url": "https://api.github.com/users/apaszke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apaszke/subscriptions", "organizations_url": "https://api.github.com/users/apaszke/orgs", "repos_url": "https://api.github.com/users/apaszke/repos", "events_url": "https://api.github.com/users/apaszke/events{/privacy}", "received_events_url": "https://api.github.com/users/apaszke/received_events", "type": "User", "site_admin": false}, "body": "move error checking after you free most unnecessary stuff", "created_at": "2018-01-05T22:44:02Z", "updated_at": "2018-11-23T15:37:53Z", "html_url": "https://github.com/pytorch/pytorch/pull/4502#discussion_r159996911", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/4502", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/159996911"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/4502#discussion_r159996911"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/4502"}}, "body_html": "<p>move error checking after you free most unnecessary stuff</p>", "body_text": "move error checking after you free most unnecessary stuff"}