{"url": "https://api.github.com/repos/pytorch/pytorch/issues/comments/371745777", "html_url": "https://github.com/pytorch/pytorch/issues/2575#issuecomment-371745777", "issue_url": "https://api.github.com/repos/pytorch/pytorch/issues/2575", "id": 371745777, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTc0NTc3Nw==", "user": {"login": "lautjy", "id": 9349212, "node_id": "MDQ6VXNlcjkzNDkyMTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/9349212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lautjy", "html_url": "https://github.com/lautjy", "followers_url": "https://api.github.com/users/lautjy/followers", "following_url": "https://api.github.com/users/lautjy/following{/other_user}", "gists_url": "https://api.github.com/users/lautjy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lautjy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lautjy/subscriptions", "organizations_url": "https://api.github.com/users/lautjy/orgs", "repos_url": "https://api.github.com/users/lautjy/repos", "events_url": "https://api.github.com/users/lautjy/events{/privacy}", "received_events_url": "https://api.github.com/users/lautjy/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-09T08:25:33Z", "updated_at": "2018-03-09T08:25:33Z", "author_association": "NONE", "body_html": "<p>Can you <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7462210\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nerdcha\">@nerdcha</a> pinpoint what the offending libraries are?<br>\nReading through the threads, it seems that self building pytorch is fine (especially if adding these compile flags <code>-fPIC -ftls-model=global-dynamic</code> into <code>setup.py</code>, though it seems they were not needed ). The main problem are the binary installations. They bring in something that is compiled without <code>-fPIC</code> (or somehow they end us using initial-exec model), and that breaks the whole <code>import X</code> chain. That is my current theory.</p>\n<p>My idea has been to try to find the nasty libs using: <code>readelf -l /path/to/foo.so | grep TLS</code> and then see if they use initial-exec by:  <code>readelf --dynamic /path/to/foo.so</code>. But I don't seem to find time to do this :/<br>\nYour fix of <code>import pytorch</code> at start of all may work, but only on systems where the <code>DTV_SURPLUS</code> is big enough to begin with. Thoughts?</p>", "body_text": "Can you @nerdcha pinpoint what the offending libraries are?\nReading through the threads, it seems that self building pytorch is fine (especially if adding these compile flags -fPIC -ftls-model=global-dynamic into setup.py, though it seems they were not needed ). The main problem are the binary installations. They bring in something that is compiled without -fPIC (or somehow they end us using initial-exec model), and that breaks the whole import X chain. That is my current theory.\nMy idea has been to try to find the nasty libs using: readelf -l /path/to/foo.so | grep TLS and then see if they use initial-exec by:  readelf --dynamic /path/to/foo.so. But I don't seem to find time to do this :/\nYour fix of import pytorch at start of all may work, but only on systems where the DTV_SURPLUS is big enough to begin with. Thoughts?", "body": "Can you @nerdcha pinpoint what the offending libraries are?\r\nReading through the threads, it seems that self building pytorch is fine (especially if adding these compile flags `-fPIC -ftls-model=global-dynamic` into `setup.py`, though it seems they were not needed ). The main problem are the binary installations. They bring in something that is compiled without `-fPIC` (or somehow they end us using initial-exec model), and that breaks the whole `import X` chain. That is my current theory.\r\n\r\nMy idea has been to try to find the nasty libs using: `readelf -l /path/to/foo.so | grep TLS` and then see if they use initial-exec by:  `readelf --dynamic /path/to/foo.so`. But I don't seem to find time to do this :/\r\nYour fix of `import pytorch` at start of all may work, but only on systems where the `DTV_SURPLUS` is big enough to begin with. Thoughts?\r\n"}