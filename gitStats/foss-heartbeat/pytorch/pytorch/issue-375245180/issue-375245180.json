{"url": "https://api.github.com/repos/pytorch/pytorch/issues/13274", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/13274/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/13274/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/13274/events", "html_url": "https://github.com/pytorch/pytorch/pull/13274", "id": 375245180, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI2NzM1OTQ3", "number": 13274, "title": "Fix accesses to uninitialized memory when running sum() within an OMP\u2026", "user": {"login": "colesbury", "id": 655866, "node_id": "MDQ6VXNlcjY1NTg2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/655866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colesbury", "html_url": "https://github.com/colesbury", "followers_url": "https://api.github.com/users/colesbury/followers", "following_url": "https://api.github.com/users/colesbury/following{/other_user}", "gists_url": "https://api.github.com/users/colesbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/colesbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colesbury/subscriptions", "organizations_url": "https://api.github.com/users/colesbury/orgs", "repos_url": "https://api.github.com/users/colesbury/repos", "events_url": "https://api.github.com/users/colesbury/events{/privacy}", "received_events_url": "https://api.github.com/users/colesbury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-29T22:35:20Z", "updated_at": "2018-11-23T15:53:51Z", "closed_at": "2018-10-30T21:19:03Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/13274", "html_url": "https://github.com/pytorch/pytorch/pull/13274", "diff_url": "https://github.com/pytorch/pytorch/pull/13274.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/13274.patch"}, "body_html": "<pre><code>\u2026 parallel region.\n\nThe two_pass_reduction code allocates a buffer of size at::max_threads().\nWhen called within a parallel region, at::parallel_for only uses 1 thread\nso some of this buffer is not written.\n\nThis makes two changes:\n\n1) two_pass_reduction is not called when already in a parallel region\n2) two_pass_reduction fills unwritten buffer elements with the identity\n   (the value in dst)\n</code></pre>\n<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20787943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/t-vi\">@t-vi</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5674597\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SsnL\">@SsnL</a>: I think this should fix the NaNs in BatchNorm when calling sum() within a parallel region.</p>", "body_text": "\u2026 parallel region.\n\nThe two_pass_reduction code allocates a buffer of size at::max_threads().\nWhen called within a parallel region, at::parallel_for only uses 1 thread\nso some of this buffer is not written.\n\nThis makes two changes:\n\n1) two_pass_reduction is not called when already in a parallel region\n2) two_pass_reduction fills unwritten buffer elements with the identity\n   (the value in dst)\n\ncc @t-vi @SsnL: I think this should fix the NaNs in BatchNorm when calling sum() within a parallel region.", "body": "```\r\n\u2026 parallel region.\r\n\r\nThe two_pass_reduction code allocates a buffer of size at::max_threads().\r\nWhen called within a parallel region, at::parallel_for only uses 1 thread\r\nso some of this buffer is not written.\r\n\r\nThis makes two changes:\r\n\r\n1) two_pass_reduction is not called when already in a parallel region\r\n2) two_pass_reduction fills unwritten buffer elements with the identity\r\n   (the value in dst)\r\n```\r\n\r\ncc @t-vi @SsnL: I think this should fix the NaNs in BatchNorm when calling sum() within a parallel region."}