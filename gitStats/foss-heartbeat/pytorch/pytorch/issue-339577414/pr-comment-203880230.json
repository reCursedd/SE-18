{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203880230", "pull_request_review_id": 138860811, "id": 203880230, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg4MDIzMA==", "diff_hunk": "@@ -8,27 +8,38 @@ namespace at {\n struct SparseTensorImpl : public TensorImpl {\n   // Stored in COO format, indices + values.\n \n+#ifndef USE_TH_SIZE_ZERO_DIM\n   // Ideal INVARIANTS:\n+#else\n+  // INVARIANTS:\n+#endif\n   // _sparseDims: range [0, len(shape)]; _sparseDims + _denseDims = len(shape)\n   // _denseDims : range [0, len(shape)]; _sparseDims + _denseDims = len(shape)\n   // _indices.shape: dimensionality: 2,  shape: (_sparseDims, nnz)\n   // _values.shape:  dimensionality: 1 + _denseDims.  shape: (nnz, shape[_sparseDims:])\n \n+#ifndef USE_TH_SIZE_ZERO_DIM\n   // Actual INVARIANT differences:\n   // 1) _sparseDims: range [1, len(shape)] (i.e. we don't allow 0 sparse dimensions)\n   // 2) when nnz = 0, there is strange behavior because we lack 0-dimensional sparse tensors.  Namely:\n   //    dimensionality == 0, _sparseDims == 0, _denseDims == 0, _indices.shape == {0}, _values.shape == {0}\n   // 3) For both _indices.shape and _values.shape, the nnz dimension may be larger than nnz\n   // 4) For _values.shape, the non-nnz dimensions may be smaller than the corresponding dimension size, e.g.\n   //    a shape (2,3) sparse tensor with _sparseDims == 1, may have _values.shape: (nnz, <=2, <=3).\n+#endif\n \n \n   // The true size of the sparse tensor (e.g., if you called to_dense()\n   // on it).  When THTensor merges into TensorImpl, this field\n   // should move to the parent class.\n   std::vector<int64_t> size_;\n \n+#ifndef USE_TH_SIZE_ZERO_DIM\n   // The number of non-zero elements.\n+#else\n+  // The number of non-zero elements, which is guaranteed to match the", "path": "aten/src/ATen/SparseTensorImpl.h", "position": null, "original_position": 33, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "2d7f892678d30e2563d78b68c31b03b3605f8b3c", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "body": "Fixed", "created_at": "2018-07-19T21:35:30Z", "updated_at": "2018-11-23T15:47:45Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r203880230", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/203880230"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r203880230"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>Fixed</p>", "body_text": "Fixed", "in_reply_to_id": 203815915}