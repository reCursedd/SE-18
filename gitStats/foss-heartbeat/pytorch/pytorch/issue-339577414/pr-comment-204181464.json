{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204181464", "pull_request_review_id": 139219684, "id": 204181464, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE4MTQ2NA==", "diff_hunk": "@@ -148,6 +169,10 @@ SparseTensor new_with_tensor_and_size_sparse(const LongTensor& indices, const Te\n   }\n \n   const SparseType& dtype = values.type().toSparse();\n+\n+#ifdef USE_TH_SIZE_ZERO_DIM\n+  AT_CHECK(!(sizes.size() == 0 && values.numel() == 0), \"cannot construct sparse tensor with empty size and no values; use the nullary constructor instead\");", "path": "aten/src/ATen/native/sparse/SparseTensor.cpp", "position": null, "original_position": 48, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "baf404175555d7f375798f64e49e777e5c6a43ed", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "This doesn't seem right (there's another place above it too that's similar), because you are throwing away the information about the sparse/dense dimensions (in general I'd be wary of anything that branches on numel() == 0), that is probably some special case handling that you don't need anymore.\r\n\r\nFor example, I compiled your branch with USE_TH_SIZE_ZERO_DIM and I get the following:\r\n```\r\ntorch.sparse_coo_tensor(torch.empty((1,0), dtype=torch.int64), torch.empty(0,2,4,0), size=(0,2,4,0))\r\n>>> torch.sparse.FloatTensor of size (0,2,4,0) with indices:\r\ntensor([], size=(4, 0), dtype=torch.int64)\r\nand values:\r\ntensor([])\r\n```\r\n which seems clearly wrong.", "created_at": "2018-07-20T22:14:18Z", "updated_at": "2018-11-23T15:47:49Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r204181464", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/204181464"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r204181464"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>This doesn't seem right (there's another place above it too that's similar), because you are throwing away the information about the sparse/dense dimensions (in general I'd be wary of anything that branches on numel() == 0), that is probably some special case handling that you don't need anymore.</p>\n<p>For example, I compiled your branch with USE_TH_SIZE_ZERO_DIM and I get the following:</p>\n<pre><code>torch.sparse_coo_tensor(torch.empty((1,0), dtype=torch.int64), torch.empty(0,2,4,0), size=(0,2,4,0))\n&gt;&gt;&gt; torch.sparse.FloatTensor of size (0,2,4,0) with indices:\ntensor([], size=(4, 0), dtype=torch.int64)\nand values:\ntensor([])\n</code></pre>\n<p>which seems clearly wrong.</p>", "body_text": "This doesn't seem right (there's another place above it too that's similar), because you are throwing away the information about the sparse/dense dimensions (in general I'd be wary of anything that branches on numel() == 0), that is probably some special case handling that you don't need anymore.\nFor example, I compiled your branch with USE_TH_SIZE_ZERO_DIM and I get the following:\ntorch.sparse_coo_tensor(torch.empty((1,0), dtype=torch.int64), torch.empty(0,2,4,0), size=(0,2,4,0))\n>>> torch.sparse.FloatTensor of size (0,2,4,0) with indices:\ntensor([], size=(4, 0), dtype=torch.int64)\nand values:\ntensor([])\n\nwhich seems clearly wrong."}