{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205611023", "pull_request_review_id": 140919100, "id": 205611023, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYxMTAyMw==", "diff_hunk": "@@ -232,7 +278,11 @@ namespace {\n \n SparseTensor& resize_as_sparse_(SparseTensor& self, const SparseTensor& src) {\n   if (!_is_same_size_as_sparse(self, src)) {\n-    _raw_resize_sparse(self, src._sparseDims(), src._denseDims(), src.sizes());\n+#ifndef USE_TH_SIZE_ZERO_DIM\n+    _raw_resize_sparse_legacy(self, src._sparseDims(), src._denseDims(), src.sizes());", "path": "aten/src/ATen/native/sparse/SparseTensor.cpp", "position": null, "original_position": 229, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "48cbd37ac3ec1bd1cea7f9087ddb68872b481daa", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "body": "For the semantics of `resize_as_`, I wondered if we can break it down into two cases:\r\n\r\n1. Different size, but same # of elements (e.g. `torch.Size([1, 2, 3])` and `torch.Size([2, 3])`). sparseDims/denseDims can be same or different.\r\nIn this case, we will convert the data in `indices` and `values` to the new size and sparseDims/denseDims. All data are preserved in this case.\r\n\r\n2. Different size, and different # of elements\r\nIn this case, since it's difficult to know where the original data will be mapped to in the new resized tensor (the mapping is probably very implementation-specific; we could run `to_dense()` -> `resize_()` -> `nonzero()` to get the new indices, but it would be very memory inefficient), I suggest that we give a UserWarning in this case saying that the # of elements are different and hence data can't be preserved, and we just call `resize_and_clear` to get an empty sparse tensor with the new size in this case. ", "created_at": "2018-07-26T21:38:48Z", "updated_at": "2018-11-23T15:48:16Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r205611023", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205611023"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r205611023"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>For the semantics of <code>resize_as_</code>, I wondered if we can break it down into two cases:</p>\n<ol>\n<li>\n<p>Different size, but same # of elements (e.g. <code>torch.Size([1, 2, 3])</code> and <code>torch.Size([2, 3])</code>). sparseDims/denseDims can be same or different.<br>\nIn this case, we will convert the data in <code>indices</code> and <code>values</code> to the new size and sparseDims/denseDims. All data are preserved in this case.</p>\n</li>\n<li>\n<p>Different size, and different # of elements<br>\nIn this case, since it's difficult to know where the original data will be mapped to in the new resized tensor (the mapping is probably very implementation-specific; we could run <code>to_dense()</code> -&gt; <code>resize_()</code> -&gt; <code>nonzero()</code> to get the new indices, but it would be very memory inefficient), I suggest that we give a UserWarning in this case saying that the # of elements are different and hence data can't be preserved, and we just call <code>resize_and_clear</code> to get an empty sparse tensor with the new size in this case.</p>\n</li>\n</ol>", "body_text": "For the semantics of resize_as_, I wondered if we can break it down into two cases:\n\n\nDifferent size, but same # of elements (e.g. torch.Size([1, 2, 3]) and torch.Size([2, 3])). sparseDims/denseDims can be same or different.\nIn this case, we will convert the data in indices and values to the new size and sparseDims/denseDims. All data are preserved in this case.\n\n\nDifferent size, and different # of elements\nIn this case, since it's difficult to know where the original data will be mapped to in the new resized tensor (the mapping is probably very implementation-specific; we could run to_dense() -> resize_() -> nonzero() to get the new indices, but it would be very memory inefficient), I suggest that we give a UserWarning in this case saying that the # of elements are different and hence data can't be preserved, and we just call resize_and_clear to get an empty sparse tensor with the new size in this case.", "in_reply_to_id": 205284731}