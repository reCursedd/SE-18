{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207944822", "pull_request_review_id": 143355072, "id": 207944822, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzk0NDgyMg==", "diff_hunk": "@@ -64,41 +56,69 @@ struct AT_API SparseTensorImpl : public TensorImpl {\n   void * unsafeGetTH(bool retain) override;\n   std::unique_ptr<Storage> storage() override;\n \n-  // Some ops do some manual size fiddling.\n-  // TODO: Figure out a more safe way to provide this functionality\n-  std::vector<int64_t>& _sizes_mut() { return size_; }\n-\n   // WARNING: This function does NOT preserve invariants of sparseDims/denseDims with\n   // respect to indices and values\n   void raw_resize_(int64_t sparseDims, int64_t denseDims, ArrayRef<int64_t> size) {\n-    // UGHHHHH.  Legacy special case\n-    if (size.size() == 0) {\n-      size_ = {0};\n-    } else {\n-      size_ = size.vec();\n-    }\n+    size_ = size.vec();\n     sparseDims_ = sparseDims;\n     denseDims_ = denseDims;\n   }\n \n-  // TODO: I hate these two setters, please get rid of them!!!\n-  void set_indices(const Tensor& indices) {\n-    AT_ASSERT(indices.type().backend() == at::toDense(type().backend()));\n-    AT_ASSERT(indices.type().scalarType() == kLong);\n-    indices_ = indices;\n+  // NOTE: This function preserves invariants of sparseDims/denseDims with respect to\n+  // indices and values.\n+  void resize_(int64_t sparseDims, int64_t denseDims, ArrayRef<int64_t> size) {\n+    AT_CHECK(sparseDims + denseDims == size.size(), \"number of dimensions must be sparseDims (\", sparseDims, \") + denseDims (\", denseDims, \"), but got \", size.size());\n+    AT_CHECK((sparseDims == sparseDims_) || (nnz_ == 0), \"resizing a non-empty sparse tensor with a different sparseDims will invalidate its indices, please use an empty sparse tensor instead\");\n+\n+    if ((!size.equals(size_)) || (sparseDims != sparseDims_) || (denseDims != denseDims_)) {\n+      std::vector<int64_t> values_size = {values().size(0)};\n+      auto dense_size = size.slice(sparseDims);\n+      values_size.insert(values_size.end(), dense_size.begin(), dense_size.end());\n+      values_.resize_(values_size);\n+\n+      std::vector<int64_t> indices_size = indices().sizes().vec();\n+      indices_size[0] = sparseDims;\n+      indices_.resize_(indices_size);\n+    }\n+\n+    size_ = size.vec();\n+    sparseDims_ = sparseDims;\n+    denseDims_ = denseDims;\n   }\n-  void set_values(const Tensor& values) {\n-    AT_ASSERT(values.type().toSparse() == type());\n-    values_ = values;\n+\n+  // NOTE: this function will resize the sparse tensor and also set `indices` and `values` to empty.\n+  void resize_and_clear_(int64_t sparseDims, int64_t denseDims, ArrayRef<int64_t> size) {\n+    AT_CHECK(sparseDims + denseDims == size.size(), \"number of dimensions must be sparseDims (\", sparseDims, \") + denseDims (\", denseDims, \"), but got \", size.size());\n+\n+    size_ = size.vec();\n+    sparseDims_ = sparseDims;\n+    denseDims_ = denseDims;\n+\n+    auto empty_indices = indices().type().tensor({sparseDims, 0});\n+    std::vector<int64_t> values_size = {0};\n+    auto dense_size = sizes().slice(sparseDims);\n+    values_size.insert(values_size.end(), dense_size.begin(), dense_size.end());\n+    auto empty_values = values().type().tensor(values_size);\n+    set_indices_and_values_unsafe(empty_indices, empty_values);\n   }\n \n   void set_coalesced(bool coalesced) { coalesced_ = coalesced; }\n-  void set_nnz(int64_t nnz) { nnz_ = nnz; }\n \n+  // NOTE: this function is only used internally and not exposed to Python frontend\n+  void set_nnz(int64_t nnz) {", "path": "aten/src/ATen/SparseTensorImpl.h", "position": null, "original_position": 103, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "b82e27fe1b554170056673f61f2e35568b6c49bb", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "probably want to rename this set_nnz_and_narrow.", "created_at": "2018-08-06T16:00:33Z", "updated_at": "2018-11-23T15:48:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r207944822", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207944822"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r207944822"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>probably want to rename this set_nnz_and_narrow.</p>", "body_text": "probably want to rename this set_nnz_and_narrow."}