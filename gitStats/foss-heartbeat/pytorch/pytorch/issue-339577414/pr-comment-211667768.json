{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211667768", "pull_request_review_id": 148138538, "id": 211667768, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMTY2Nzc2OA==", "diff_hunk": "@@ -1067,14 +1120,71 @@ def do_test(t):\n \n         do_test(self.SparseTensor())\n \n+    def _test_resize_shape(self, x_i, x_v, x_size, y_i, y_v, y_size):\n+        x_v_numel = torch.zeros(x_v).numel()\n+        y_v_numel = torch.zeros(y_v).numel()\n+        x = torch.sparse_coo_tensor(torch.zeros(x_i),\n+                                    torch.arange(x_v_numel).resize_(x_v).to(torch.float),\n+                                    torch.Size(x_size))\n+        x_dense = x.to_dense()\n+        y = torch.sparse_coo_tensor(torch.zeros(y_i),\n+                                    torch.ones(y_v).to(torch.float),\n+                                    torch.Size(y_size))\n+        y_dense = y.to_dense()\n+        x.resize_as_(y)\n+        x_dense.resize_as_(y_dense)\n+        self.assertEqual(x.shape, y.shape)\n+        self.assertEqual(x._sparseDims(), y._sparseDims())\n+        self.assertEqual(x._denseDims(), y._denseDims())\n+        # Here we make sure that the original data are preserved after resizing\n+        self.assertEqual(x.to_dense().view(-1)[0:x_v_numel].view(x_v),\n+                         x_dense.view(-1)[0:x_v_numel].view(x_v))\n+\n+    def test_resize(self):\n+        # 1. Increase the size of some dense dimensions [Supported]\n+        self._test_resize_shape([1, 1], [1, 2, 3], [2, 2, 3],\n+                                [1, 1], [1, 2, 4], [2, 2, 4])\n+\n+        # 2. Expand the size of some sparse dimensions [Supported]\n+        self._test_resize_shape([1, 1], [1, 2, 3], [2, 2, 3],\n+                                [1, 1], [1, 2, 3], [4, 2, 3])\n+\n+        # 3. Change the shapes of both sparse and dense dimensions when nnz is zero [Supported]\n+        self._test_resize_shape([1, 0], [0, 2, 3], [2, 2, 3],\n+                                [2, 0], [0, 2, 4, 5], [1, 1, 2, 4, 5])\n+\n+        # 4. Add dims to dense dimensions [Not Supported]\n+        with self.assertRaisesRegex(RuntimeError, \"changing the number of dense dimensions\"):\n+            self._test_resize_shape([1, 1], [1, 2, 3], [2, 2, 3],\n+                                    [1, 1], [1, 2, 3, 4], [2, 2, 3, 4])\n+\n+        # 5. Remove dims from dense dimensions [Not Supported]\n+        with self.assertRaisesRegex(RuntimeError, \"changing the number of dense dimensions\"):\n+            self._test_resize_shape([1, 1], [1, 2, 3], [2, 2, 3],\n+                                    [1, 1], [1, 2], [2, 2])\n+\n+        # 6. Change the number of sparse dimensions on a non-empty sparse tensor [Not Supported]\n+        with self.assertRaisesRegex(RuntimeError, \"changing the number of sparse dimensions\"):\n+            self._test_resize_shape([1, 1], [1, 2, 3], [2, 2, 3],\n+                                    [2, 1], [1, 2, 3], [1, 2, 2, 3])\n+\n+        # 7. Shrink the size of some sparse dimensions on a non-empty sparse tensor [Not Supported]\n+        with self.assertRaisesRegex(RuntimeError, \"shrinking the size of sparse dimensions\"):\n+            self._test_resize_shape([1, 1], [1, 2, 3], [2, 2, 3],\n+                                    [1, 1], [1, 2, 3], [1, 2, 3])\n+\n+        # 8. Shrink the size of some dense dimensions on a non-empty sparse tensor [Not Supported]", "path": "test/test_sparse.py", "position": 138, "original_position": 136, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "fb76cab6ebe2d0b0d4296087632568a4dc2a73b4", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "body": "This case is unsupported now, because the following case gives different behavior for sparse and dense resize:\r\n\r\n```\r\n>>> x_i, x_v, x_size = [1, 1], [1, 2, 3], [2, 2, 3]\r\n>>> y_i, y_v, y_size = [1, 1], [1, 2, 2], [2, 2, 2]\r\n>>> x_v_numel = torch.zeros(x_v).numel()\r\n>>> y_v_numel = torch.zeros(y_v).numel()\r\n>>> x = torch.sparse_coo_tensor(torch.zeros(x_i), torch.arange(x_v_numel).resize_(x_v).to(torch.float), torch.Size(x_size))\r\n>>> x_dense = x.to_dense()\r\n>>> y = torch.sparse_coo_tensor(torch.zeros(y_i), torch.ones(y_v), torch.Size(y_size))\r\n>>> y_dense = y.to_dense()\r\n>>> x.resize_as_(y)\r\n>>> print(x.to_dense())  # resize only affects the first block of elements\r\ntensor([[[0., 1.],\r\n         [2., 3.]],\r\n\r\n         [[0., 0.],\r\n          [0., 0.]]])\r\n>>> x_dense.resize_as_(y_dense)\r\n>>> print(x_dense)  # notice that the second block of elements is also affected\r\ntensor([[[0., 1.],\r\n         [2., 3.]],\r\n\r\n        [[4., 5.],\r\n        [0., 0.]]])\r\n```", "created_at": "2018-08-21T16:14:01Z", "updated_at": "2018-11-23T15:49:39Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r211667768", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/211667768"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r211667768"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>This case is unsupported now, because the following case gives different behavior for sparse and dense resize:</p>\n<pre><code>&gt;&gt;&gt; x_i, x_v, x_size = [1, 1], [1, 2, 3], [2, 2, 3]\n&gt;&gt;&gt; y_i, y_v, y_size = [1, 1], [1, 2, 2], [2, 2, 2]\n&gt;&gt;&gt; x_v_numel = torch.zeros(x_v).numel()\n&gt;&gt;&gt; y_v_numel = torch.zeros(y_v).numel()\n&gt;&gt;&gt; x = torch.sparse_coo_tensor(torch.zeros(x_i), torch.arange(x_v_numel).resize_(x_v).to(torch.float), torch.Size(x_size))\n&gt;&gt;&gt; x_dense = x.to_dense()\n&gt;&gt;&gt; y = torch.sparse_coo_tensor(torch.zeros(y_i), torch.ones(y_v), torch.Size(y_size))\n&gt;&gt;&gt; y_dense = y.to_dense()\n&gt;&gt;&gt; x.resize_as_(y)\n&gt;&gt;&gt; print(x.to_dense())  # resize only affects the first block of elements\ntensor([[[0., 1.],\n         [2., 3.]],\n\n         [[0., 0.],\n          [0., 0.]]])\n&gt;&gt;&gt; x_dense.resize_as_(y_dense)\n&gt;&gt;&gt; print(x_dense)  # notice that the second block of elements is also affected\ntensor([[[0., 1.],\n         [2., 3.]],\n\n        [[4., 5.],\n        [0., 0.]]])\n</code></pre>", "body_text": "This case is unsupported now, because the following case gives different behavior for sparse and dense resize:\n>>> x_i, x_v, x_size = [1, 1], [1, 2, 3], [2, 2, 3]\n>>> y_i, y_v, y_size = [1, 1], [1, 2, 2], [2, 2, 2]\n>>> x_v_numel = torch.zeros(x_v).numel()\n>>> y_v_numel = torch.zeros(y_v).numel()\n>>> x = torch.sparse_coo_tensor(torch.zeros(x_i), torch.arange(x_v_numel).resize_(x_v).to(torch.float), torch.Size(x_size))\n>>> x_dense = x.to_dense()\n>>> y = torch.sparse_coo_tensor(torch.zeros(y_i), torch.ones(y_v), torch.Size(y_size))\n>>> y_dense = y.to_dense()\n>>> x.resize_as_(y)\n>>> print(x.to_dense())  # resize only affects the first block of elements\ntensor([[[0., 1.],\n         [2., 3.]],\n\n         [[0., 0.],\n          [0., 0.]]])\n>>> x_dense.resize_as_(y_dense)\n>>> print(x_dense)  # notice that the second block of elements is also affected\ntensor([[[0., 1.],\n         [2., 3.]],\n\n        [[4., 5.],\n        [0., 0.]]])"}