{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207943096", "pull_request_review_id": 143355072, "id": 207943096, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzk0MzA5Ng==", "diff_hunk": "@@ -64,41 +56,69 @@ struct AT_API SparseTensorImpl : public TensorImpl {\n   void * unsafeGetTH(bool retain) override;\n   std::unique_ptr<Storage> storage() override;\n \n-  // Some ops do some manual size fiddling.\n-  // TODO: Figure out a more safe way to provide this functionality\n-  std::vector<int64_t>& _sizes_mut() { return size_; }\n-\n   // WARNING: This function does NOT preserve invariants of sparseDims/denseDims with\n   // respect to indices and values\n   void raw_resize_(int64_t sparseDims, int64_t denseDims, ArrayRef<int64_t> size) {\n-    // UGHHHHH.  Legacy special case\n-    if (size.size() == 0) {\n-      size_ = {0};\n-    } else {\n-      size_ = size.vec();\n-    }\n+    size_ = size.vec();\n     sparseDims_ = sparseDims;\n     denseDims_ = denseDims;\n   }\n \n-  // TODO: I hate these two setters, please get rid of them!!!\n-  void set_indices(const Tensor& indices) {\n-    AT_ASSERT(indices.type().backend() == at::toDense(type().backend()));\n-    AT_ASSERT(indices.type().scalarType() == kLong);\n-    indices_ = indices;\n+  // NOTE: This function preserves invariants of sparseDims/denseDims with respect to\n+  // indices and values.\n+  void resize_(int64_t sparseDims, int64_t denseDims, ArrayRef<int64_t> size) {", "path": "aten/src/ATen/SparseTensorImpl.h", "position": null, "original_position": 60, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "b82e27fe1b554170056673f61f2e35568b6c49bb", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "nit: use IntList.", "created_at": "2018-08-06T15:55:25Z", "updated_at": "2018-11-23T15:48:48Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r207943096", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207943096"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r207943096"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>nit: use IntList.</p>", "body_text": "nit: use IntList."}