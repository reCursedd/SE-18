{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207683911", "pull_request_review_id": 143354094, "id": 207683911, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY4MzkxMQ==", "diff_hunk": "@@ -979,15 +979,90 @@ def test_factory_size_check(self):\n         indices = self.IndexTensor([[1, 2], [0, 2]])\n         values = self.ValueTensor([[1, 1, 1], [1, 1, 1]])\n         sizes = torch.Size([3, 3, 2])\n-        with self.assertRaisesRegex(RuntimeError, \"values and sizes are inconsistent\"):\n+        with self.assertRaisesRegex(RuntimeError, \"values has incorrect size\"):\n             self.SparseTensor(indices, values, sizes)\n \n+    def test_factory_default(self):\n+        tensor = self.SparseTensor()\n+        expected_indices = self.IndexTensor(1, 0)\n+        expected_size = torch.Size([0])\n+        self.assertEqual(tensor._indices(), expected_indices)\n+        self.assertEqual(tensor.shape, expected_size)\n+\n     def test_factory_empty_indices(self):\n         device = 'cuda' if self.is_cuda else 'cpu'\n-        tensor = torch.sparse_coo_tensor([], [], torch.Size([]), device=device)\n-        expected_indices = torch.tensor([], dtype=torch.long, device=device)\n+        tensor = self.SparseTensor()\n+        expected_indices = torch.empty((1, 0), dtype=torch.long, device=device)\n+        self.assertEqual(tensor._indices(), expected_indices)\n+\n+        tensor = torch.sparse_coo_tensor(torch.Size([2, 0]), device=device)\n+        expected_indices = torch.empty((2, 0), dtype=torch.long, device=device)\n         self.assertEqual(tensor._indices(), expected_indices)\n \n+        tensor = torch.sparse_coo_tensor(torch.Size([2, 2, 0]), device=device)\n+        expected_indices = torch.empty((3, 0), dtype=torch.long, device=device)\n+        self.assertEqual(tensor._indices(), expected_indices)\n+\n+        tensor = torch.sparse_coo_tensor(torch.Size([2, 2, 0, 0]), device=device)\n+        expected_indices = torch.empty((4, 0), dtype=torch.long, device=device)\n+        self.assertEqual(tensor._indices(), expected_indices)\n+\n+    def test_factory_nnz(self):\n+        indices = self.IndexTensor([[0]])  # (sparseDims, nnz): (1, 1)\n+        values = self.ValueTensor([[1, 1], [1, 1]])  # (nnz, ...): (2, 2)\n+        sizes = torch.Size([2, 2])\n+        with self.assertRaisesRegex(RuntimeError, \"indices and values must have same nnz\"):\n+            self.SparseTensor(indices, values, sizes)\n+\n+    def test_factory_zero_nnz(self):\n+        device = 'cuda' if self.is_cuda else 'cpu'\n+        t = torch.sparse_coo_tensor(torch.empty(1, 0), torch.empty(0, 2, 4, 0), device=device)", "path": "test/test_sparse.py", "position": null, "original_position": 44, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "09a85dbaf3d59b2639b40dd21c385befedaf7d9d", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "I thought you had to provide the size for cuda sparse tensors -- is that no longer the case?", "created_at": "2018-08-03T22:45:26Z", "updated_at": "2018-11-23T15:48:44Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r207683911", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/207683911"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r207683911"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>I thought you had to provide the size for cuda sparse tensors -- is that no longer the case?</p>", "body_text": "I thought you had to provide the size for cuda sparse tensors -- is that no longer the case?"}