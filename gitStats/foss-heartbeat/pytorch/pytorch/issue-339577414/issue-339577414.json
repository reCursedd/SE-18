{"url": "https://api.github.com/repos/pytorch/pytorch/issues/9279", "repository_url": "https://api.github.com/repos/pytorch/pytorch", "labels_url": "https://api.github.com/repos/pytorch/pytorch/issues/9279/labels{/name}", "comments_url": "https://api.github.com/repos/pytorch/pytorch/issues/9279/comments", "events_url": "https://api.github.com/repos/pytorch/pytorch/issues/9279/events", "html_url": "https://github.com/pytorch/pytorch/pull/9279", "id": 339577414, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAwMTk2NzM1", "number": 9279, "title": "[READY] Preserve sparse tensor shape and dim invariants, and add scalar tensor support", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 559719279, "node_id": "MDU6TGFiZWw1NTk3MTkyNzk=", "url": "https://api.github.com/repos/pytorch/pytorch/labels/ready%20for%20review", "name": "ready for review", "color": "b60205", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2018-07-09T19:28:32Z", "updated_at": "2018-11-23T15:49:44Z", "closed_at": "2018-08-23T17:11:38Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "html_url": "https://github.com/pytorch/pytorch/pull/9279", "diff_url": "https://github.com/pytorch/pytorch/pull/9279.diff", "patch_url": "https://github.com/pytorch/pytorch/pull/9279.patch"}, "body_html": "<p>When 0-sized dimension support is added, we expect an empty sparse tensor to be a 1-dimensional tensor of size <code>[0]</code>, with <code>sparseDims == 1</code> and <code>denseDims == 0</code>. Also, we expect the following invariants to be preserved at all times:</p>\n<pre><code>_sparseDims + _denseDims = len(shape)\n_indices.shape: dimensionality: 2,  shape: (_sparseDims, nnz)\n_values.shape:  dimensionality: 1 + _denseDims.  shape: (nnz, shape[_sparseDims:])\n</code></pre>\n<p>This PR fixes various places where the invariants are not strictly enforced when 0-sized dimension support is enabled.</p>\n<p>Tested and <code>test_sparse.py</code> passes locally on both CPU and CUDA with the <code>USE_TH_SIZE_ZERO_DIM</code> flag.</p>", "body_text": "When 0-sized dimension support is added, we expect an empty sparse tensor to be a 1-dimensional tensor of size [0], with sparseDims == 1 and denseDims == 0. Also, we expect the following invariants to be preserved at all times:\n_sparseDims + _denseDims = len(shape)\n_indices.shape: dimensionality: 2,  shape: (_sparseDims, nnz)\n_values.shape:  dimensionality: 1 + _denseDims.  shape: (nnz, shape[_sparseDims:])\n\nThis PR fixes various places where the invariants are not strictly enforced when 0-sized dimension support is enabled.\nTested and test_sparse.py passes locally on both CPU and CUDA with the USE_TH_SIZE_ZERO_DIM flag.", "body": "When 0-sized dimension support is added, we expect an empty sparse tensor to be a 1-dimensional tensor of size `[0]`, with `sparseDims == 1` and `denseDims == 0`. Also, we expect the following invariants to be preserved at all times:\r\n\r\n```\r\n_sparseDims + _denseDims = len(shape)\r\n_indices.shape: dimensionality: 2,  shape: (_sparseDims, nnz)\r\n_values.shape:  dimensionality: 1 + _denseDims.  shape: (nnz, shape[_sparseDims:])\r\n```\r\n\r\nThis PR fixes various places where the invariants are not strictly enforced when 0-sized dimension support is enabled.\r\n\r\nTested and `test_sparse.py` passes locally on both CPU and CUDA with the `USE_TH_SIZE_ZERO_DIM` flag."}