{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209388636", "pull_request_review_id": 145388047, "id": 209388636, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTM4ODYzNg==", "diff_hunk": "@@ -1147,6 +1125,45 @@ def do_test(t):\n \n         do_test(self.SparseTensor())\n \n+    def _test_resize_shape(self, x_i, x_v, x_size, y_i, y_v, y_size):\n+        x = torch.sparse_coo_tensor(torch.zeros(x_i), torch.ones(x_v), torch.Size(x_size))\n+        y = torch.sparse_coo_tensor(torch.zeros(y_i), torch.ones(y_v), torch.Size(y_size))\n+        x.resize_as_(y)\n+        self.assertEqual(x.shape, y.shape)\n+        self.assertEqual(x._sparseDims(), y._sparseDims())\n+        self.assertEqual(x._denseDims(), y._denseDims())", "path": "test/test_sparse.py", "position": null, "original_position": 72, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "dc7b60d3e595c3c5860f780c876f4101577fce63", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "is the expectation that these resize_as_ calls behave equivalently as for dense tensors?  If so, you should check this.  FYI when I check this I get that case 2, 3, and 5 fail (caveat: I may not be checking this correctly, I just hacked something up).  It's probably also better to do randn rather than ones for the values, since using ones everywhere can cover up issues.", "created_at": "2018-08-10T21:25:32Z", "updated_at": "2018-11-23T15:49:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r209388636", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/209388636"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r209388636"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>is the expectation that these resize_as_ calls behave equivalently as for dense tensors?  If so, you should check this.  FYI when I check this I get that case 2, 3, and 5 fail (caveat: I may not be checking this correctly, I just hacked something up).  It's probably also better to do randn rather than ones for the values, since using ones everywhere can cover up issues.</p>", "body_text": "is the expectation that these resize_as_ calls behave equivalently as for dense tensors?  If so, you should check this.  FYI when I check this I get that case 2, 3, and 5 fail (caveat: I may not be checking this correctly, I just hacked something up).  It's probably also better to do randn rather than ones for the values, since using ones everywhere can cover up issues."}