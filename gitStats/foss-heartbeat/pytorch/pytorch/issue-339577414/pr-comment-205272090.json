{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205272090", "pull_request_review_id": 140511935, "id": 205272090, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTI3MjA5MA==", "diff_hunk": "@@ -427,7 +428,18 @@ static inline Tensor & sparse_transpose_(Tensor & self, int64_t dim0, int64_t di\n     std::vector<int64_t> sizes(self.sizes());\n     std::swap(sizes[dim0], sizes[dim1]);\n \n-    return self.sparse_raw_resize_(sizes, self._sparseDims(), self._denseDims());\n+#ifndef USE_TH_SIZE_ZERO_DIM\n+    return self.sparse_raw_resize_legacy_(sizes, self._sparseDims(), self._denseDims());\n+#else\n+    auto indices_original = _get_sparse_impl(self)->indices();", "path": "aten/src/ATen/native/TensorShape.cpp", "position": null, "original_position": 16, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "48cbd37ac3ec1bd1cea7f9087ddb68872b481daa", "user": {"login": "gchanan", "id": 3768583, "node_id": "MDQ6VXNlcjM3Njg1ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3768583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchanan", "html_url": "https://github.com/gchanan", "followers_url": "https://api.github.com/users/gchanan/followers", "following_url": "https://api.github.com/users/gchanan/following{/other_user}", "gists_url": "https://api.github.com/users/gchanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchanan/subscriptions", "organizations_url": "https://api.github.com/users/gchanan/orgs", "repos_url": "https://api.github.com/users/gchanan/repos", "events_url": "https://api.github.com/users/gchanan/events{/privacy}", "received_events_url": "https://api.github.com/users/gchanan/received_events", "type": "User", "site_admin": false}, "body": "this seems way too verbose; the call to sparse_resize_and_clear_ already creates the tensors of the correct size...and then we add back tensors of the correct size.  Also, won't sparse_resize_and_clear_ automatically keep coalesced because it doesn't change it?  I'm not sure what the right model here to use -- but this should be a single line.\r\n\r\nSome options:\r\n1) Just use sparse_raw_resize_legacy_...this shouldn't be in the public API, but it seems fine if internel functions that know what they are doing use it.\r\n2) Have some equivalent of sparse_raw_resize_legacy_ that checks invariants  -- maybe only #ifdef DEBUG?\r\n\r\nThoughts?", "created_at": "2018-07-25T21:44:03Z", "updated_at": "2018-11-23T15:48:07Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r205272090", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205272090"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r205272090"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>this seems way too verbose; the call to sparse_resize_and_clear_ already creates the tensors of the correct size...and then we add back tensors of the correct size.  Also, won't sparse_resize_and_clear_ automatically keep coalesced because it doesn't change it?  I'm not sure what the right model here to use -- but this should be a single line.</p>\n<p>Some options:</p>\n<ol>\n<li>Just use sparse_raw_resize_legacy_...this shouldn't be in the public API, but it seems fine if internel functions that know what they are doing use it.</li>\n<li>Have some equivalent of sparse_raw_resize_legacy_ that checks invariants  -- maybe only #ifdef DEBUG?</li>\n</ol>\n<p>Thoughts?</p>", "body_text": "this seems way too verbose; the call to sparse_resize_and_clear_ already creates the tensors of the correct size...and then we add back tensors of the correct size.  Also, won't sparse_resize_and_clear_ automatically keep coalesced because it doesn't change it?  I'm not sure what the right model here to use -- but this should be a single line.\nSome options:\n\nJust use sparse_raw_resize_legacy_...this shouldn't be in the public API, but it seems fine if internel functions that know what they are doing use it.\nHave some equivalent of sparse_raw_resize_legacy_ that checks invariants  -- maybe only #ifdef DEBUG?\n\nThoughts?"}