{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205319517", "pull_request_review_id": 140565948, "id": 205319517, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMxOTUxNw==", "diff_hunk": "@@ -232,7 +278,11 @@ namespace {\n \n SparseTensor& resize_as_sparse_(SparseTensor& self, const SparseTensor& src) {\n   if (!_is_same_size_as_sparse(self, src)) {\n-    _raw_resize_sparse(self, src._sparseDims(), src._denseDims(), src.sizes());\n+#ifndef USE_TH_SIZE_ZERO_DIM\n+    _raw_resize_sparse_legacy(self, src._sparseDims(), src._denseDims(), src.sizes());", "path": "aten/src/ATen/native/sparse/SparseTensor.cpp", "position": null, "original_position": 229, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "48cbd37ac3ec1bd1cea7f9087ddb68872b481daa", "user": {"login": "yf225", "id": 4063635, "node_id": "MDQ6VXNlcjQwNjM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4063635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yf225", "html_url": "https://github.com/yf225", "followers_url": "https://api.github.com/users/yf225/followers", "following_url": "https://api.github.com/users/yf225/following{/other_user}", "gists_url": "https://api.github.com/users/yf225/gists{/gist_id}", "starred_url": "https://api.github.com/users/yf225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yf225/subscriptions", "organizations_url": "https://api.github.com/users/yf225/orgs", "repos_url": "https://api.github.com/users/yf225/repos", "events_url": "https://api.github.com/users/yf225/events{/privacy}", "received_events_url": "https://api.github.com/users/yf225/received_events", "type": "User", "site_admin": false}, "body": "For the new semantics the function should probably be named `resize_as_sparse_and_clear_`, but then it would be weird for it to still be in the `resize_as_` Python code path because it now does both resize and clear. To resolve this, can we assume that the user won't care about the internal data when calling `resize_as_` on a sparse tensor (and update our doc to explain the new resize and clear behavior)?", "created_at": "2018-07-26T03:06:06Z", "updated_at": "2018-11-23T15:48:11Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r205319517", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/205319517"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r205319517"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p>For the new semantics the function should probably be named <code>resize_as_sparse_and_clear_</code>, but then it would be weird for it to still be in the <code>resize_as_</code> Python code path because it now does both resize and clear. To resolve this, can we assume that the user won't care about the internal data when calling <code>resize_as_</code> on a sparse tensor (and update our doc to explain the new resize and clear behavior)?</p>", "body_text": "For the new semantics the function should probably be named resize_as_sparse_and_clear_, but then it would be weird for it to still be in the resize_as_ Python code path because it now does both resize and clear. To resolve this, can we assume that the user won't care about the internal data when calling resize_as_ on a sparse tensor (and update our doc to explain the new resize and clear behavior)?", "in_reply_to_id": 205284731}