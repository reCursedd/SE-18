{"url": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202505549", "pull_request_review_id": 137228425, "id": 202505549, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjUwNTU0OQ==", "diff_hunk": "@@ -80,6 +81,27 @@ struct SparseTensorImpl : public TensorImpl {\n     }\n     sparseDims_ = sparseDims;\n     denseDims_ = denseDims;\n+    #else\n+    if (size.size() == 0) {\n+      // An empty sparse tensor should be a 1-dimensional tensor of size [0],\n+      // with sparseDims == 1 and denseDims == 0\n+      size_ = {0};\n+      sparseDims_ = 1;\n+      denseDims_ = 0;\n+    } else {\n+      size_ = size;\n+      sparseDims_ = sparseDims;\n+      denseDims_ = denseDims;\n+    }\n+\n+    // Check and preserve invariants\n+    AT_ASSERT(sparseDims_ + denseDims_ == size_.size());\n+    indices_.resize_({sparseDims_, values_.size(0)});\n+    std::vector<int64_t> values_size = {values_.size(0)};\n+    auto dense_size = sizes().slice(sparseDims_);\n+    values_size.insert(values_size.end(), dense_size.begin(), dense_size.end());\n+    values_.resize_(values_size);", "path": "aten/src/ATen/SparseTensorImpl.h", "position": null, "original_position": 35, "commit_id": "f7b1f23e8f85e8484934de71c9708933421009d0", "original_commit_id": "08ea1f6a842bd1dbe08c99a7b91ffd50e81d2cdf", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "body": "`raw_resize` is a crap function and it requires too many caller invariants to be upheld to be used properly. Not necessarily for this PR but look for opportunities to use more safe versions of this function, like `resize_nnz` ", "created_at": "2018-07-14T04:30:04Z", "updated_at": "2018-11-23T15:47:25Z", "html_url": "https://github.com/pytorch/pytorch/pull/9279#discussion_r202505549", "pull_request_url": "https://api.github.com/repos/pytorch/pytorch/pulls/9279", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/comments/202505549"}, "html": {"href": "https://github.com/pytorch/pytorch/pull/9279#discussion_r202505549"}, "pull_request": {"href": "https://api.github.com/repos/pytorch/pytorch/pulls/9279"}}, "body_html": "<p><code>raw_resize</code> is a crap function and it requires too many caller invariants to be upheld to be used properly. Not necessarily for this PR but look for opportunities to use more safe versions of this function, like <code>resize_nnz</code></p>", "body_text": "raw_resize is a crap function and it requires too many caller invariants to be upheld to be used properly. Not necessarily for this PR but look for opportunities to use more safe versions of this function, like resize_nnz", "in_reply_to_id": 201168063}